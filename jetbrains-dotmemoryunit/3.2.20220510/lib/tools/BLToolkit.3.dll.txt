[AttributeUsageAttribute("64")]
public class BLToolkit.Aspects.AsyncAttribute : AbstractTypeBuilderAttribute {
    private string _targetMethodName;
    private Type[] _parameterTypes;
    public IAbstractTypeBuilder TypeBuilder { get; }
    public AsyncAttribute(string targetMethodName);
    public AsyncAttribute(Type[] parameterTypes);
    public AsyncAttribute(string targetMethodName, Type[] parameterTypes);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
public class BLToolkit.Aspects.Builders.AsyncAspectBuilder : AbstractTypeBuilderBase {
    private string _targetMethodName;
    private Type[] _parameterTypes;
    public AsyncAspectBuilder(string targetMethodName, Type[] parameterTypes);
    public virtual int GetPriority(BuildContext context);
    public virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    protected virtual void BuildAbstractMethod();
    private void BuildBeginMethod();
    private void BuildEndMethod();
    private MethodInfo GetTargetMethod(BuildContext context, string prefix);
    private static Type EnsureDelegateType(BuildContext context, MethodInfo method);
}
public class BLToolkit.Aspects.Builders.ClearCacheAspectBuilder : AbstractTypeBuilderBase {
    private Type _declaringType;
    private string _methodName;
    private Type[] _parameterTypes;
    private static int _methodCounter;
    public ClearCacheAspectBuilder(Type declaringType, string methodName, Type[] parameterTypes);
    public virtual int GetPriority(BuildContext context);
    public virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    public virtual void Build(BuildContext context);
}
public class BLToolkit.Aspects.Builders.InterceptorAspectBuilder : AbstractTypeBuilderBase {
    private Type _interceptorType;
    private InterceptType _interceptType;
    private string _configString;
    private int _priority;
    private bool _localInterceptor;
    private FieldBuilder _interceptorField;
    private LocalBuilder _infoField;
    private static int _methodCounter;
    public InterceptorAspectBuilder(Type interceptorType, InterceptType interceptType, string configString, int priority, bool localInterceptor);
    public virtual int GetPriority(BuildContext context);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    public virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    public virtual void Build(BuildContext context);
    private LocalBuilder GetInfoField();
    private FieldBuilder GetInterceptorField();
    protected virtual void BeginMethodBuild();
    protected virtual void EndMethodBuild();
}
public class BLToolkit.Aspects.Builders.MixinAspectBuilder : AbstractTypeBuilderBase {
    private Type _targetInterface;
    private string _memberName;
    private bool _throwExceptionIfNull;
    private string _exceptionMessage;
    public MixinAspectBuilder(Type targetInterface, string memberName, bool throwExceptionIfNull, string exceptionMessage);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    public virtual Type[] GetInterfaces();
    public virtual void Build(BuildContext context);
    private void CheckNull(EmitHelper emit);
    private bool CheckOverrideAttribute();
}
public class BLToolkit.Aspects.Builders.NotNullAspectBuilder : AbstractTypeBuilderBase {
    private string _message;
    public NotNullAspectBuilder(string message);
    public virtual int GetPriority(BuildContext context);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    public virtual void Build(BuildContext context);
}
public class BLToolkit.Aspects.Builders.OverloadAspectBuilder : AbstractTypeBuilderBase {
    private string _overloadedMethodName;
    private Type[] _parameterTypes;
    public OverloadAspectBuilder(string overloadedMethodName, Type[] parameterTypes);
    public virtual int GetPriority(BuildContext context);
    public virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    protected virtual void BuildAbstractMethod();
    private MethodInfo GetOverloadedMethod(string methodName);
    private static int MatchParameters(ParameterInfo[] parametersToMatch, ParameterInfo[] existingParameters);
}
[DebuggerStepThroughAttribute]
public class BLToolkit.Aspects.CacheAspect : Interceptor {
    private MethodInfo _methodInfo;
    private Nullable`1<int> _instanceMaxCacheTime;
    private Nullable`1<bool> _instanceIsWeak;
    private static IList _registeredAspects;
    private static IsCacheableParameterType _isCacheableParameterType;
    private IDictionary _cache;
    [CompilerGeneratedAttribute]
private static bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <MaxCacheTime>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsWeak>k__BackingField;
    private static IList RegisteredAspects { get; }
    public static bool IsEnabled { get; public set; }
    public static int MaxCacheTime { get; public set; }
    public static bool IsWeak { get; public set; }
    public static IsCacheableParameterType IsCacheableParameterType { get; public set; }
    public IDictionary Cache { get; }
    private static CacheAspect();
    public virtual void Init(CallMethodInfo info, string configString);
    private static IList get_RegisteredAspects();
    public static CacheAspect GetAspect(MethodInfo methodInfo);
    protected virtual void BeforeCall(InterceptCallInfo info);
    protected virtual void AfterCall(InterceptCallInfo info);
    [CompilerGeneratedAttribute]
public static bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public static int get_MaxCacheTime();
    [CompilerGeneratedAttribute]
public static void set_MaxCacheTime(int value);
    [CompilerGeneratedAttribute]
public static bool get_IsWeak();
    [CompilerGeneratedAttribute]
public static void set_IsWeak(bool value);
    public static IsCacheableParameterType get_IsCacheableParameterType();
    public static void set_IsCacheableParameterType(IsCacheableParameterType value);
    private static bool IsCacheableParameterTypeInternal(Type parameterType);
    public IDictionary get_Cache();
    protected virtual CacheAspectItem CreateCacheItem(InterceptCallInfo info);
    protected virtual IDictionary CreateCache();
    protected static CompoundValue GetKey(InterceptCallInfo info);
    protected static CacheAspectItem GetItem(IDictionary cache, CompoundValue key);
    public static void ClearCache(MethodInfo methodInfo);
    public static void ClearCache(Type declaringType, string methodName, Type[] types);
    public static void ClearCache(Type declaringType);
    public static MethodInfo GetMethodInfo(Type declaringType, string methodName, Type[] parameterTypes);
    public static void ClearCache();
}
[ObsoleteAttribute]
public class BLToolkit.Aspects.CacheAspect`1 : CacheAspect {
}
public class BLToolkit.Aspects.CacheAspectItem : object {
    private DateTime _maxCacheTime;
    private object _returnValue;
    private Object[] _refValues;
    public DateTime MaxCacheTime { get; public set; }
    public object ReturnValue { get; public set; }
    public Object[] RefValues { get; public set; }
    public bool IsExpired { get; }
    public virtual DateTime get_MaxCacheTime();
    public virtual void set_MaxCacheTime(DateTime value);
    public object get_ReturnValue();
    public void set_ReturnValue(object value);
    public Object[] get_RefValues();
    public void set_RefValues(Object[] value);
    public virtual bool get_IsExpired();
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.CacheAttribute : InterceptorAttribute {
    private bool _hasMaxCacheTime;
    private int _maxCacheTime;
    private bool _hasIsWeak;
    private bool _isWeak;
    public int MaxCacheTime { get; public set; }
    public int MaxSeconds { get; public set; }
    public int MaxMinutes { get; public set; }
    public bool IsWeak { get; public set; }
    public string ConfigString { get; }
    public CacheAttribute(Type cacheAspectType, string configString);
    public CacheAttribute(Type interceptorType);
    public CacheAttribute(Type interceptorType, int maxCacheTime);
    public CacheAttribute(Type interceptorType, bool isWeak);
    public CacheAttribute(Type interceptorType, int maxCacheTime, bool isWeak);
    public CacheAttribute(string configString);
    public CacheAttribute(int maxCacheTime);
    public CacheAttribute(bool isWeak);
    public CacheAttribute(int maxCacheTime, bool isWeak);
    public int get_MaxCacheTime();
    public void set_MaxCacheTime(int value);
    public int get_MaxSeconds();
    public void set_MaxSeconds(int value);
    public int get_MaxMinutes();
    public void set_MaxMinutes(int value);
    public bool get_IsWeak();
    public void set_IsWeak(bool value);
    public virtual string get_ConfigString();
}
[DebuggerStepThroughAttribute]
public class BLToolkit.Aspects.CallMethodInfo : object {
    private object _sync;
    private MethodInfo _methodInfo;
    private ParameterInfo[] _parameters;
    private Hashtable _items;
    private CacheAspect _cacheAspect;
    private Boolean[] _cacheableParameters;
    public MethodInfo MethodInfo { get; }
    public ParameterInfo[] Parameters { get; }
    public IDictionary Items { get; }
    public CacheAspect CacheAspect { get; internal set; }
    [ObsoleteAttribute("Use CacheAspect.Cache instead")]
public IDictionary MethodCallCache { get; }
    internal Boolean[] CacheableParameters { get; internal set; }
    public CallMethodInfo(MethodInfo methodInfo);
    public MethodInfo get_MethodInfo();
    public ParameterInfo[] get_Parameters();
    public IDictionary get_Items();
    public CacheAspect get_CacheAspect();
    internal void set_CacheAspect(CacheAspect value);
    public IDictionary get_MethodCallCache();
    internal Boolean[] get_CacheableParameters();
    internal void set_CacheableParameters(Boolean[] value);
}
public class BLToolkit.Aspects.ClearCacheAspect : object {
    public static MethodInfo GetMethodInfo(object caller, Type declaringType, string methodName, Type[] parameterTypes);
    public static Type GetType(object caller, Type declaringType);
}
[AttributeUsageAttribute("192")]
public class BLToolkit.Aspects.ClearCacheAttribute : AbstractTypeBuilderAttribute {
    private Type _declaringType;
    private string _methodName;
    private Type[] _parameterTypes;
    public IAbstractTypeBuilder TypeBuilder { get; }
    public ClearCacheAttribute(string methodName);
    public ClearCacheAttribute(string methodName, Type[] parameterTypes);
    public ClearCacheAttribute(Type declaringType, string methodName, Type[] parameterTypes);
    public ClearCacheAttribute(Type declaringType);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[DebuggerStepThroughAttribute]
public class BLToolkit.Aspects.CounterAspect : Interceptor {
    private MethodCallCounter _counter;
    private static LocalDataStoreSlot _counterSlot;
    private static bool _isEnabled;
    private static ArrayList _counters;
    private static CreateCounter _createCounter;
    public static bool IsEnabled { get; public set; }
    public static ArrayList Counters { get; }
    public static CreateCounter CreateCounter { get; public set; }
    private static CounterAspect();
    public virtual void Init(CallMethodInfo info, string configString);
    protected virtual void BeforeCall(InterceptCallInfo info);
    protected virtual void OnFinally(InterceptCallInfo info);
    public static bool get_IsEnabled();
    public static void set_IsEnabled(bool value);
    public static ArrayList get_Counters();
    public static MethodCallCounter GetCounter(MethodInfo methodInfo);
    public static CreateCounter get_CreateCounter();
    public static void set_CreateCounter(CreateCounter value);
    private static MethodCallCounter CreateCounterInternal(CallMethodInfo methodInfo);
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.CounterAttribute : InterceptorAttribute {
    public CounterAttribute(string configString);
    protected CounterAttribute(Type interceptorType, string configString);
}
public class BLToolkit.Aspects.CreateCounter : MulticastDelegate {
    public CreateCounter(object object, IntPtr method);
    public virtual MethodCallCounter Invoke(CallMethodInfo methodInfo);
    public virtual IAsyncResult BeginInvoke(CallMethodInfo methodInfo, AsyncCallback callback, object object);
    public virtual MethodCallCounter EndInvoke(IAsyncResult result);
}
public interface BLToolkit.Aspects.IInterceptor {
    public abstract virtual void Init(CallMethodInfo info, string configString);
    public abstract virtual void Intercept(InterceptCallInfo info);
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.InstanceCacheAttribute : CacheAttribute {
    public bool LocalInterceptor { get; }
    public InstanceCacheAttribute(Type cacheAspectType, string configString);
    public InstanceCacheAttribute(Type interceptorType);
    public InstanceCacheAttribute(Type interceptorType, int maxCacheTime);
    public InstanceCacheAttribute(Type interceptorType, bool isWeak);
    public InstanceCacheAttribute(Type interceptorType, int maxCacheTime, bool isWeak);
    public InstanceCacheAttribute(string configString);
    public InstanceCacheAttribute(int maxCacheTime);
    public InstanceCacheAttribute(bool isWeak);
    public InstanceCacheAttribute(int maxCacheTime, bool isWeak);
    public virtual bool get_LocalInterceptor();
}
[DebuggerStepThroughAttribute]
public class BLToolkit.Aspects.InterceptCallInfo : object {
    private CallMethodInfo _callMethodInfo;
    private Object[] _emptyValues;
    private Object[] _parameterValues;
    private object _returnValue;
    private InterceptResult _interceptResult;
    private InterceptType _interceptType;
    private Exception _exception;
    private Hashtable _items;
    private DateTime _beginCallTime;
    private IPrincipal _currentPrincipal;
    private Thread _currentThread;
    private bool _cached;
    private object _object;
    public CallMethodInfo CallMethodInfo { get; public set; }
    public Object[] ParameterValues { get; public set; }
    public object ReturnValue { get; public set; }
    public InterceptResult InterceptResult { get; public set; }
    public InterceptType InterceptType { get; public set; }
    public Exception Exception { get; public set; }
    public IDictionary Items { get; }
    public DateTime BeginCallTime { get; }
    public IPrincipal CurrentPrincipal { get; }
    public Thread CurrentThread { get; }
    public bool Cached { get; public set; }
    public object Object { get; public set; }
    public CallMethodInfo get_CallMethodInfo();
    public void set_CallMethodInfo(CallMethodInfo value);
    public Object[] get_ParameterValues();
    public void set_ParameterValues(Object[] value);
    public object get_ReturnValue();
    public void set_ReturnValue(object value);
    public InterceptResult get_InterceptResult();
    public void set_InterceptResult(InterceptResult value);
    public InterceptType get_InterceptType();
    public void set_InterceptType(InterceptType value);
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public IDictionary get_Items();
    public DateTime get_BeginCallTime();
    public IPrincipal get_CurrentPrincipal();
    public Thread get_CurrentThread();
    public bool get_Cached();
    public void set_Cached(bool value);
    public object get_Object();
    public void set_Object(object value);
}
[DebuggerStepThroughAttribute]
public abstract class BLToolkit.Aspects.Interceptor : object {
    public virtual void Init(CallMethodInfo info, string configString);
    public virtual void Intercept(InterceptCallInfo info);
    protected virtual void BeforeCall(InterceptCallInfo info);
    protected virtual void AfterCall(InterceptCallInfo info);
    protected virtual void OnCatch(InterceptCallInfo info);
    protected virtual void OnFinally(InterceptCallInfo info);
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.InterceptorAttribute : AbstractTypeBuilderAttribute {
    private Type _interceptorType;
    private InterceptType _interceptType;
    private int _priority;
    private string _configString;
    private bool _localInterceptor;
    public Type InterceptorType { get; }
    public InterceptType InterceptType { get; }
    public int Priority { get; }
    public string ConfigString { get; }
    public bool LocalInterceptor { get; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public InterceptorAttribute(Type interceptorType, InterceptType interceptType);
    public InterceptorAttribute(Type interceptorType, InterceptType interceptType, int priority);
    public InterceptorAttribute(Type interceptorType, InterceptType interceptType, string parameters);
    public InterceptorAttribute(Type interceptorType, InterceptType interceptType, string configString, int priority);
    public InterceptorAttribute(Type interceptorType, InterceptType interceptType, string configString, int priority, bool localInterceptor);
    public virtual Type get_InterceptorType();
    public virtual InterceptType get_InterceptType();
    public virtual int get_Priority();
    public virtual string get_ConfigString();
    public virtual bool get_LocalInterceptor();
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
public enum BLToolkit.Aspects.InterceptResult : Enum {
    public int value__;
    public static InterceptResult Continue;
    public static InterceptResult Return;
}
[FlagsAttribute]
public enum BLToolkit.Aspects.InterceptType : Enum {
    public int value__;
    public static InterceptType BeforeCall;
    public static InterceptType AfterCall;
    public static InterceptType OnCatch;
    public static InterceptType OnFinally;
}
public class BLToolkit.Aspects.IsCacheableParameterType : MulticastDelegate {
    public IsCacheableParameterType(object object, IntPtr method);
    public virtual bool Invoke(Type parameterType);
    public virtual IAsyncResult BeginInvoke(Type parameterType, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.LogAttribute : InterceptorAttribute {
    private bool _hasFileName;
    private string _fileName;
    private bool _hasMinCallTime;
    private int _minCallTime;
    private bool _hasLogExceptions;
    private bool _logExceptions;
    private bool _hasLogParameters;
    private bool _logParameters;
    public string FileName { get; public set; }
    public int MinCallTime { get; public set; }
    public bool LogExceptions { get; public set; }
    public bool LogParameters { get; public set; }
    public string ConfigString { get; }
    public LogAttribute(string parameters);
    protected LogAttribute(Type interceptorType, string parameters);
    public string get_FileName();
    public void set_FileName(string value);
    public int get_MinCallTime();
    public void set_MinCallTime(int value);
    public bool get_LogExceptions();
    public void set_LogExceptions(bool value);
    public bool get_LogParameters();
    public void set_LogParameters(bool value);
    public virtual string get_ConfigString();
}
public class BLToolkit.Aspects.LoggingAspect : Interceptor {
    private string _instanceFileName;
    private Nullable`1<int> _instanceMinCallTime;
    private Nullable`1<bool> _instanceLogExceptions;
    private Nullable`1<bool> _instanceLogParameters;
    private Parameters _parameters;
    private static bool _logParameters;
    private static bool _logExceptions;
    private static int _minCallTime;
    private static string _fileName;
    private static bool _isEnabled;
    private static LogOperation _logOperation;
    private static LogOutput _logOutput;
    public static bool LogParameters { get; public set; }
    public static bool LogExceptions { get; public set; }
    public static int MinCallTime { get; public set; }
    public static string FileName { get; public set; }
    public static bool IsEnabled { get; public set; }
    public static LogOperation LogOperation { get; public set; }
    public static LogOutput LogOutput { get; public set; }
    private static LoggingAspect();
    public virtual void Init(CallMethodInfo info, string configString);
    protected virtual void OnFinally(InterceptCallInfo info);
    public static bool get_LogParameters();
    public static void set_LogParameters(bool value);
    public static bool get_LogExceptions();
    public static void set_LogExceptions(bool value);
    public static int get_MinCallTime();
    public static void set_MinCallTime(int value);
    public static string get_FileName();
    public static void set_FileName(string value);
    public static bool get_IsEnabled();
    public static void set_IsEnabled(bool value);
    public static LogOperation get_LogOperation();
    public static void set_LogOperation(LogOperation value);
    private static void LogOperationInternal(InterceptCallInfo info, Parameters parameters);
    private static void FormatParameter(object parameter, StringBuilder sb);
    public static LogOutput get_LogOutput();
    public static void set_LogOutput(LogOutput value);
    private static void LogOutputInternal(string logText, string fileName);
}
public class BLToolkit.Aspects.LogOperation : MulticastDelegate {
    public LogOperation(object object, IntPtr method);
    public virtual void Invoke(InterceptCallInfo interceptCallInfo, Parameters parameters);
    public virtual IAsyncResult BeginInvoke(InterceptCallInfo interceptCallInfo, Parameters parameters, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class BLToolkit.Aspects.LogOutput : MulticastDelegate {
    public LogOutput(object object, IntPtr method);
    public virtual void Invoke(string logText, string fileName);
    public virtual IAsyncResult BeginInvoke(string logText, string fileName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
public class BLToolkit.Aspects.MethodCallCounter : object {
    private MethodInfo _methodInfo;
    private CallMethodInfo _callMethodInfo;
    private int _totalCount;
    private int _exceptionCount;
    private int _cachedCount;
    private TimeSpan _totalTime;
    private TimeSpan _minTime;
    private TimeSpan _maxTime;
    private ArrayList _currentCalls;
    public MethodInfo MethodInfo { get; public set; }
    public CallMethodInfo CallMethodInfo { get; public set; }
    public int TotalCount { get; public set; }
    public int ExceptionCount { get; public set; }
    public int CachedCount { get; public set; }
    public TimeSpan TotalTime { get; public set; }
    public TimeSpan MinTime { get; public set; }
    public TimeSpan MaxTime { get; public set; }
    public ArrayList CurrentCalls { get; }
    public TimeSpan AverageTime { get; }
    public MethodCallCounter(CallMethodInfo methodInfo);
    public MethodInfo get_MethodInfo();
    public void set_MethodInfo(MethodInfo value);
    public CallMethodInfo get_CallMethodInfo();
    public void set_CallMethodInfo(CallMethodInfo value);
    public int get_TotalCount();
    public void set_TotalCount(int value);
    public int get_ExceptionCount();
    public void set_ExceptionCount(int value);
    public int get_CachedCount();
    public void set_CachedCount(int value);
    public TimeSpan get_TotalTime();
    public void set_TotalTime(TimeSpan value);
    public TimeSpan get_MinTime();
    public void set_MinTime(TimeSpan value);
    public TimeSpan get_MaxTime();
    public void set_MaxTime(TimeSpan value);
    public ArrayList get_CurrentCalls();
    public TimeSpan get_AverageTime();
    public virtual void RegisterCall(InterceptCallInfo info);
    public virtual void UnregisterCall(InterceptCallInfo info);
    protected void AddCall(TimeSpan time, bool withException, bool cached);
}
[AttributeUsageAttribute("4")]
public class BLToolkit.Aspects.MixinAttribute : AbstractTypeBuilderAttribute {
    private Type _targetInterface;
    private string _memberName;
    private bool _throwExceptionIfNull;
    private string _exceptionMessage;
    public Type TargetInterface { get; }
    public string MemberName { get; }
    public bool ThrowExceptionIfNull { get; public set; }
    public string ExceptionMessage { get; public set; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public MixinAttribute(Type targetInterface, string memberName, bool throwExceptionIfNull, string exceptionMessage);
    public MixinAttribute(Type targetInterface, string memberName, bool throwExceptionIfNull);
    public MixinAttribute(Type targetInterface, string memberName, string exceptionMessage);
    public MixinAttribute(Type targetInterface, string memberName);
    public Type get_TargetInterface();
    public string get_MemberName();
    public bool get_ThrowExceptionIfNull();
    public void set_ThrowExceptionIfNull(bool value);
    public string get_ExceptionMessage();
    public void set_ExceptionMessage(string value);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("64")]
public class BLToolkit.Aspects.MixinOverrideAttribute : Attribute {
    private Type _targetInterface;
    private string _methodName;
    public Type TargetInterface { get; public set; }
    public string MethodName { get; public set; }
    public MixinOverrideAttribute(Type targetInterface, string methodName);
    public MixinOverrideAttribute(Type targetInterface);
    public MixinOverrideAttribute(string methodName);
    public Type get_TargetInterface();
    public void set_TargetInterface(Type value);
    public string get_MethodName();
    public void set_MethodName(string value);
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.NoCacheAttribute : NoInterceptionAttribute {
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.NoCounterAttribute : NoInterceptionAttribute {
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.NoInterceptionAttribute : InterceptorAttribute {
    public IAbstractTypeBuilder TypeBuilder { get; }
    public NoInterceptionAttribute(Type interceptorType, InterceptType interceptType);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("1220")]
public class BLToolkit.Aspects.NoLogAttribute : NoInterceptionAttribute {
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.Aspects.NotNullAttribute : AbstractTypeBuilderAttribute {
    private string _message;
    public string Message { get; public set; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public NotNullAttribute(string message);
    public string get_Message();
    public void set_Message(string value);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("64")]
public class BLToolkit.Aspects.OverloadAttribute : AbstractTypeBuilderAttribute {
    private string _overloadedMethodName;
    private Type[] _parameterTypes;
    public IAbstractTypeBuilder TypeBuilder { get; }
    public OverloadAttribute(string overloadedMethodName);
    public OverloadAttribute(Type[] parameterTypes);
    public OverloadAttribute(string overloadedMethodName, Type[] parameterTypes);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
public static class BLToolkit.BLToolkitConstants : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string Build;
    public static string FullVersionString;
    public static string ProductName;
    public static string ProductDescription;
    public static string Copyright;
    public static string Revision;
    public static Version FullVersion;
    private static BLToolkitConstants();
}
public static class BLToolkit.Common.Array`1 : object {
    public static T[] Empty;
    private static Array`1();
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Common.CompoundValue : object {
    private Object[] _values;
    private int _hash;
    public int Count { get; }
    public object Item { get; }
    public CompoundValue(Object[] values);
    public int get_Count();
    public object get_Item(int index);
    private static int CalcHashCode(Object[] values);
    public sealed virtual int CompareTo(object obj);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CompoundValue other);
}
public static class BLToolkit.Common.Configuration : object {
    private static NullEquivalent _checkNullReturnIfNull;
    private static bool _trimDictionaryKey;
    private static bool _notifyOnEqualSet;
    private static bool _openNewConnectionToDiscoverParameters;
    [CompilerGeneratedAttribute]
private static bool <TrimOnMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <FilterOutBaseEqualAttributes>k__BackingField;
    public static NullEquivalent CheckNullReturnIfNull { get; public set; }
    public static bool TrimOnMapping { get; public set; }
    public static bool TrimDictionaryKey { get; public set; }
    public static bool NotifyOnEqualSet { get; public set; }
    public static bool FilterOutBaseEqualAttributes { get; public set; }
    public static bool OpenNewConnectionToDiscoverParameters { get; public set; }
    private static Configuration();
    public static NullEquivalent get_CheckNullReturnIfNull();
    public static void set_CheckNullReturnIfNull(NullEquivalent value);
    [CompilerGeneratedAttribute]
public static bool get_TrimOnMapping();
    [CompilerGeneratedAttribute]
public static void set_TrimOnMapping(bool value);
    public static bool get_TrimDictionaryKey();
    public static void set_TrimDictionaryKey(bool value);
    public static bool get_NotifyOnEqualSet();
    public static void set_NotifyOnEqualSet(bool value);
    [CompilerGeneratedAttribute]
public static bool get_FilterOutBaseEqualAttributes();
    [CompilerGeneratedAttribute]
public static void set_FilterOutBaseEqualAttributes(bool value);
    public static bool get_OpenNewConnectionToDiscoverParameters();
    public static void set_OpenNewConnectionToDiscoverParameters(bool value);
}
public static class BLToolkit.Common.Convert : object {
    public static bool ToBoolean(byte p);
    public static bool ToBoolean(decimal p);
    public static bool ToBoolean(double p);
    public static bool ToBoolean(short p);
    public static bool ToBoolean(int p);
    public static bool ToBoolean(long p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(sbyte p);
    public static bool ToBoolean(float p);
    public static bool ToBoolean(string p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(ushort p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(UInt32 p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(ulong p);
    public static bool ToBoolean(Nullable`1<bool> p);
    public static bool ToBoolean(Nullable`1<byte> p);
    public static bool ToBoolean(Nullable`1<char> p);
    public static bool ToBoolean(Nullable`1<decimal> p);
    public static bool ToBoolean(Nullable`1<double> p);
    public static bool ToBoolean(Nullable`1<short> p);
    public static bool ToBoolean(Nullable`1<int> p);
    public static bool ToBoolean(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(Nullable`1<sbyte> p);
    public static bool ToBoolean(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static bool ToBoolean(Nullable`1<ulong> p);
    public static bool ToBoolean(Binary p);
    public static bool ToBoolean(Byte[] p);
    public static bool ToBoolean(SqlBoolean p);
    public static bool ToBoolean(SqlByte p);
    public static bool ToBoolean(SqlDecimal p);
    public static bool ToBoolean(SqlDouble p);
    public static bool ToBoolean(SqlInt16 p);
    public static bool ToBoolean(SqlInt32 p);
    public static bool ToBoolean(SqlInt64 p);
    public static bool ToBoolean(SqlMoney p);
    public static bool ToBoolean(SqlSingle p);
    public static bool ToBoolean(SqlString p);
    public static bool ToBoolean(object p);
    public static byte ToByte(bool p);
    public static byte ToByte(char p);
    public static byte ToByte(decimal p);
    public static byte ToByte(double p);
    public static byte ToByte(short p);
    public static byte ToByte(int p);
    public static byte ToByte(long p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(sbyte p);
    public static byte ToByte(float p);
    public static byte ToByte(string p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(ushort p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(UInt32 p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(ulong p);
    public static byte ToByte(Nullable`1<bool> p);
    public static byte ToByte(Nullable`1<byte> p);
    public static byte ToByte(Nullable`1<char> p);
    public static byte ToByte(Nullable`1<decimal> p);
    public static byte ToByte(Nullable`1<double> p);
    public static byte ToByte(Nullable`1<short> p);
    public static byte ToByte(Nullable`1<int> p);
    public static byte ToByte(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(Nullable`1<sbyte> p);
    public static byte ToByte(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static byte ToByte(Nullable`1<ulong> p);
    public static byte ToByte(Binary p);
    public static byte ToByte(Byte[] p);
    public static byte ToByte(SqlBoolean p);
    public static byte ToByte(SqlByte p);
    public static byte ToByte(SqlDecimal p);
    public static byte ToByte(SqlDouble p);
    public static byte ToByte(SqlInt16 p);
    public static byte ToByte(SqlInt32 p);
    public static byte ToByte(SqlInt64 p);
    public static byte ToByte(SqlMoney p);
    public static byte ToByte(SqlSingle p);
    public static byte ToByte(SqlString p);
    public static byte ToByte(object p);
    public static char ToChar(bool p);
    public static char ToChar(byte p);
    public static char ToChar(decimal p);
    public static char ToChar(double p);
    public static char ToChar(short p);
    public static char ToChar(int p);
    public static char ToChar(long p);
    [CLSCompliantAttribute("False")]
public static char ToChar(sbyte p);
    public static char ToChar(float p);
    public static char ToChar(string p);
    [CLSCompliantAttribute("False")]
public static char ToChar(ushort p);
    [CLSCompliantAttribute("False")]
public static char ToChar(UInt32 p);
    [CLSCompliantAttribute("False")]
public static char ToChar(ulong p);
    public static char ToChar(Nullable`1<bool> p);
    public static char ToChar(Nullable`1<byte> p);
    public static char ToChar(Nullable`1<char> p);
    public static char ToChar(Nullable`1<decimal> p);
    public static char ToChar(Nullable`1<double> p);
    public static char ToChar(Nullable`1<short> p);
    public static char ToChar(Nullable`1<int> p);
    public static char ToChar(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static char ToChar(Nullable`1<sbyte> p);
    public static char ToChar(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static char ToChar(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static char ToChar(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static char ToChar(Nullable`1<ulong> p);
    public static char ToChar(Binary p);
    public static char ToChar(Byte[] p);
    public static char ToChar(SqlBoolean p);
    public static char ToChar(SqlByte p);
    public static char ToChar(SqlDecimal p);
    public static char ToChar(SqlDouble p);
    public static char ToChar(SqlInt16 p);
    public static char ToChar(SqlInt32 p);
    public static char ToChar(SqlInt64 p);
    public static char ToChar(SqlMoney p);
    public static char ToChar(SqlSingle p);
    public static char ToChar(SqlString p);
    public static char ToChar(object p);
    public static DateTime ToDateTime(DateTimeOffset p);
    public static DateTime ToDateTime(double p);
    public static DateTime ToDateTime(long p);
    public static DateTime ToDateTime(string p);
    public static DateTime ToDateTime(TimeSpan p);
    public static DateTime ToDateTime(Nullable`1<DateTime> p);
    public static DateTime ToDateTime(Nullable`1<DateTimeOffset> p);
    public static DateTime ToDateTime(Nullable`1<double> p);
    public static DateTime ToDateTime(Nullable`1<long> p);
    public static DateTime ToDateTime(Nullable`1<TimeSpan> p);
    public static DateTime ToDateTime(Binary p);
    public static DateTime ToDateTime(Byte[] p);
    public static DateTime ToDateTime(SqlDateTime p);
    public static DateTime ToDateTime(SqlDouble p);
    public static DateTime ToDateTime(SqlInt64 p);
    public static DateTime ToDateTime(SqlString p);
    public static DateTime ToDateTime(object p);
    public static DateTimeOffset ToDateTimeOffset(DateTime p);
    public static DateTimeOffset ToDateTimeOffset(double p);
    public static DateTimeOffset ToDateTimeOffset(long p);
    public static DateTimeOffset ToDateTimeOffset(string p);
    public static DateTimeOffset ToDateTimeOffset(TimeSpan p);
    public static DateTimeOffset ToDateTimeOffset(Nullable`1<DateTime> p);
    public static DateTimeOffset ToDateTimeOffset(Nullable`1<DateTimeOffset> p);
    public static DateTimeOffset ToDateTimeOffset(Nullable`1<double> p);
    public static DateTimeOffset ToDateTimeOffset(Nullable`1<long> p);
    public static DateTimeOffset ToDateTimeOffset(Nullable`1<TimeSpan> p);
    public static DateTimeOffset ToDateTimeOffset(Binary p);
    public static DateTimeOffset ToDateTimeOffset(Byte[] p);
    public static DateTimeOffset ToDateTimeOffset(SqlDateTime p);
    public static DateTimeOffset ToDateTimeOffset(SqlDouble p);
    public static DateTimeOffset ToDateTimeOffset(SqlInt64 p);
    public static DateTimeOffset ToDateTimeOffset(SqlString p);
    public static DateTimeOffset ToDateTimeOffset(object p);
    public static decimal ToDecimal(bool p);
    public static decimal ToDecimal(byte p);
    public static decimal ToDecimal(char p);
    public static decimal ToDecimal(double p);
    public static decimal ToDecimal(short p);
    public static decimal ToDecimal(int p);
    public static decimal ToDecimal(long p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(sbyte p);
    public static decimal ToDecimal(float p);
    public static decimal ToDecimal(string p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(ushort p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(UInt32 p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(ulong p);
    public static decimal ToDecimal(Nullable`1<bool> p);
    public static decimal ToDecimal(Nullable`1<byte> p);
    public static decimal ToDecimal(Nullable`1<char> p);
    public static decimal ToDecimal(Nullable`1<decimal> p);
    public static decimal ToDecimal(Nullable`1<double> p);
    public static decimal ToDecimal(Nullable`1<short> p);
    public static decimal ToDecimal(Nullable`1<int> p);
    public static decimal ToDecimal(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(Nullable`1<sbyte> p);
    public static decimal ToDecimal(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static decimal ToDecimal(Nullable`1<ulong> p);
    public static decimal ToDecimal(SqlBoolean p);
    public static decimal ToDecimal(SqlByte p);
    public static decimal ToDecimal(SqlDecimal p);
    public static decimal ToDecimal(SqlDouble p);
    public static decimal ToDecimal(SqlInt16 p);
    public static decimal ToDecimal(SqlInt32 p);
    public static decimal ToDecimal(SqlInt64 p);
    public static decimal ToDecimal(SqlMoney p);
    public static decimal ToDecimal(SqlSingle p);
    public static decimal ToDecimal(SqlString p);
    public static decimal ToDecimal(object p);
    public static double ToDouble(bool p);
    public static double ToDouble(byte p);
    public static double ToDouble(char p);
    public static double ToDouble(DateTime p);
    public static double ToDouble(DateTimeOffset p);
    public static double ToDouble(decimal p);
    public static double ToDouble(short p);
    public static double ToDouble(int p);
    public static double ToDouble(long p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(sbyte p);
    public static double ToDouble(float p);
    public static double ToDouble(string p);
    public static double ToDouble(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(ushort p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(UInt32 p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(ulong p);
    public static double ToDouble(Nullable`1<bool> p);
    public static double ToDouble(Nullable`1<byte> p);
    public static double ToDouble(Nullable`1<char> p);
    public static double ToDouble(Nullable`1<DateTime> p);
    public static double ToDouble(Nullable`1<DateTimeOffset> p);
    public static double ToDouble(Nullable`1<decimal> p);
    public static double ToDouble(Nullable`1<double> p);
    public static double ToDouble(Nullable`1<short> p);
    public static double ToDouble(Nullable`1<int> p);
    public static double ToDouble(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(Nullable`1<sbyte> p);
    public static double ToDouble(Nullable`1<float> p);
    public static double ToDouble(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static double ToDouble(Nullable`1<ulong> p);
    public static double ToDouble(Binary p);
    public static double ToDouble(Byte[] p);
    public static double ToDouble(SqlBoolean p);
    public static double ToDouble(SqlByte p);
    public static double ToDouble(SqlDateTime p);
    public static double ToDouble(SqlDecimal p);
    public static double ToDouble(SqlDouble p);
    public static double ToDouble(SqlInt16 p);
    public static double ToDouble(SqlInt32 p);
    public static double ToDouble(SqlInt64 p);
    public static double ToDouble(SqlMoney p);
    public static double ToDouble(SqlSingle p);
    public static double ToDouble(SqlString p);
    public static double ToDouble(object p);
    public static Guid ToGuid(string p);
    public static Guid ToGuid(Nullable`1<Guid> p);
    public static Guid ToGuid(Binary p);
    public static Guid ToGuid(Byte[] p);
    public static Guid ToGuid(Type p);
    public static Guid ToGuid(SqlBinary p);
    public static Guid ToGuid(SqlGuid p);
    public static Guid ToGuid(SqlString p);
    public static Guid ToGuid(object p);
    public static short ToInt16(bool p);
    public static short ToInt16(byte p);
    public static short ToInt16(char p);
    public static short ToInt16(decimal p);
    public static short ToInt16(double p);
    public static short ToInt16(int p);
    public static short ToInt16(long p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(sbyte p);
    public static short ToInt16(float p);
    public static short ToInt16(string p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(ushort p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(UInt32 p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(ulong p);
    public static short ToInt16(Nullable`1<bool> p);
    public static short ToInt16(Nullable`1<byte> p);
    public static short ToInt16(Nullable`1<char> p);
    public static short ToInt16(Nullable`1<decimal> p);
    public static short ToInt16(Nullable`1<double> p);
    public static short ToInt16(Nullable`1<short> p);
    public static short ToInt16(Nullable`1<int> p);
    public static short ToInt16(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(Nullable`1<sbyte> p);
    public static short ToInt16(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static short ToInt16(Nullable`1<ulong> p);
    public static short ToInt16(Binary p);
    public static short ToInt16(Byte[] p);
    public static short ToInt16(SqlBoolean p);
    public static short ToInt16(SqlByte p);
    public static short ToInt16(SqlDecimal p);
    public static short ToInt16(SqlDouble p);
    public static short ToInt16(SqlInt16 p);
    public static short ToInt16(SqlInt32 p);
    public static short ToInt16(SqlInt64 p);
    public static short ToInt16(SqlMoney p);
    public static short ToInt16(SqlSingle p);
    public static short ToInt16(SqlString p);
    public static short ToInt16(object p);
    public static int ToInt32(bool p);
    public static int ToInt32(byte p);
    public static int ToInt32(char p);
    public static int ToInt32(decimal p);
    public static int ToInt32(double p);
    public static int ToInt32(short p);
    public static int ToInt32(long p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(sbyte p);
    public static int ToInt32(float p);
    public static int ToInt32(string p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(ushort p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(UInt32 p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(ulong p);
    public static int ToInt32(Nullable`1<bool> p);
    public static int ToInt32(Nullable`1<byte> p);
    public static int ToInt32(Nullable`1<char> p);
    public static int ToInt32(Nullable`1<decimal> p);
    public static int ToInt32(Nullable`1<double> p);
    public static int ToInt32(Nullable`1<short> p);
    public static int ToInt32(Nullable`1<int> p);
    public static int ToInt32(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(Nullable`1<sbyte> p);
    public static int ToInt32(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static int ToInt32(Nullable`1<ulong> p);
    public static int ToInt32(Binary p);
    public static int ToInt32(Byte[] p);
    public static int ToInt32(SqlBoolean p);
    public static int ToInt32(SqlByte p);
    public static int ToInt32(SqlDecimal p);
    public static int ToInt32(SqlDouble p);
    public static int ToInt32(SqlInt16 p);
    public static int ToInt32(SqlInt32 p);
    public static int ToInt32(SqlInt64 p);
    public static int ToInt32(SqlMoney p);
    public static int ToInt32(SqlSingle p);
    public static int ToInt32(SqlString p);
    public static int ToInt32(object p);
    public static long ToInt64(bool p);
    public static long ToInt64(byte p);
    public static long ToInt64(char p);
    public static long ToInt64(DateTime p);
    public static long ToInt64(DateTimeOffset p);
    public static long ToInt64(decimal p);
    public static long ToInt64(double p);
    public static long ToInt64(short p);
    public static long ToInt64(int p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(sbyte p);
    public static long ToInt64(float p);
    public static long ToInt64(string p);
    public static long ToInt64(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(ushort p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(UInt32 p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(ulong p);
    public static long ToInt64(Nullable`1<bool> p);
    public static long ToInt64(Nullable`1<byte> p);
    public static long ToInt64(Nullable`1<char> p);
    public static long ToInt64(Nullable`1<DateTime> p);
    public static long ToInt64(Nullable`1<DateTimeOffset> p);
    public static long ToInt64(Nullable`1<decimal> p);
    public static long ToInt64(Nullable`1<double> p);
    public static long ToInt64(Nullable`1<short> p);
    public static long ToInt64(Nullable`1<int> p);
    public static long ToInt64(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(Nullable`1<sbyte> p);
    public static long ToInt64(Nullable`1<float> p);
    public static long ToInt64(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static long ToInt64(Nullable`1<ulong> p);
    public static long ToInt64(Binary p);
    public static long ToInt64(Byte[] p);
    public static long ToInt64(SqlBoolean p);
    public static long ToInt64(SqlByte p);
    public static long ToInt64(SqlDateTime p);
    public static long ToInt64(SqlDecimal p);
    public static long ToInt64(SqlDouble p);
    public static long ToInt64(SqlInt16 p);
    public static long ToInt64(SqlInt32 p);
    public static long ToInt64(SqlInt64 p);
    public static long ToInt64(SqlMoney p);
    public static long ToInt64(SqlSingle p);
    public static long ToInt64(SqlString p);
    public static long ToInt64(object p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(bool p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(byte p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(char p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(decimal p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(double p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(short p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(int p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(long p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(float p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(ushort p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(UInt32 p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(ulong p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Nullable`1<ulong> p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Binary p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Byte[] p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlByte p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(SqlString p);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(object p);
    public static float ToSingle(bool p);
    public static float ToSingle(byte p);
    public static float ToSingle(char p);
    public static float ToSingle(decimal p);
    public static float ToSingle(double p);
    public static float ToSingle(short p);
    public static float ToSingle(int p);
    public static float ToSingle(long p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(sbyte p);
    public static float ToSingle(string p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(ushort p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(UInt32 p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(ulong p);
    public static float ToSingle(Nullable`1<bool> p);
    public static float ToSingle(Nullable`1<byte> p);
    public static float ToSingle(Nullable`1<char> p);
    public static float ToSingle(Nullable`1<decimal> p);
    public static float ToSingle(Nullable`1<double> p);
    public static float ToSingle(Nullable`1<short> p);
    public static float ToSingle(Nullable`1<int> p);
    public static float ToSingle(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(Nullable`1<sbyte> p);
    public static float ToSingle(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static float ToSingle(Nullable`1<ulong> p);
    public static float ToSingle(Binary p);
    public static float ToSingle(Byte[] p);
    public static float ToSingle(SqlBoolean p);
    public static float ToSingle(SqlByte p);
    public static float ToSingle(SqlDecimal p);
    public static float ToSingle(SqlDouble p);
    public static float ToSingle(SqlInt16 p);
    public static float ToSingle(SqlInt32 p);
    public static float ToSingle(SqlInt64 p);
    public static float ToSingle(SqlMoney p);
    public static float ToSingle(SqlSingle p);
    public static float ToSingle(SqlString p);
    public static float ToSingle(object p);
    public static string ToString(bool p);
    public static string ToString(byte p);
    public static string ToString(char p);
    public static string ToString(DateTime p);
    public static string ToString(DateTimeOffset p);
    public static string ToString(decimal p);
    public static string ToString(double p);
    public static string ToString(Guid p);
    public static string ToString(short p);
    public static string ToString(int p);
    public static string ToString(long p);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte p);
    public static string ToString(float p);
    public static string ToString(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort p);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 p);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong p);
    public static string ToString(Nullable`1<bool> p);
    public static string ToString(Nullable`1<byte> p);
    public static string ToString(Nullable`1<char> p);
    public static string ToString(Nullable`1<DateTime> p);
    public static string ToString(Nullable`1<DateTimeOffset> p);
    public static string ToString(Nullable`1<decimal> p);
    public static string ToString(Nullable`1<double> p);
    public static string ToString(Nullable`1<Guid> p);
    public static string ToString(Nullable`1<short> p);
    public static string ToString(Nullable`1<int> p);
    public static string ToString(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static string ToString(Nullable`1<sbyte> p);
    public static string ToString(Nullable`1<float> p);
    public static string ToString(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static string ToString(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static string ToString(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static string ToString(Nullable`1<ulong> p);
    public static string ToString(Binary p);
    public static string ToString(Byte[] p);
    public static string ToString(Type p);
    public static string ToString(SqlBoolean p);
    public static string ToString(SqlByte p);
    public static string ToString(SqlChars p);
    public static string ToString(SqlDecimal p);
    public static string ToString(SqlDouble p);
    public static string ToString(SqlGuid p);
    public static string ToString(SqlInt16 p);
    public static string ToString(SqlInt32 p);
    public static string ToString(SqlInt64 p);
    public static string ToString(SqlMoney p);
    public static string ToString(SqlSingle p);
    public static string ToString(SqlString p);
    public static string ToString(SqlXml p);
    public static string ToString(XmlDocument p);
    public static string ToString(object p);
    public static TimeSpan ToTimeSpan(DateTime p);
    public static TimeSpan ToTimeSpan(DateTimeOffset p);
    public static TimeSpan ToTimeSpan(double p);
    public static TimeSpan ToTimeSpan(long p);
    public static TimeSpan ToTimeSpan(string p);
    public static TimeSpan ToTimeSpan(Nullable`1<DateTime> p);
    public static TimeSpan ToTimeSpan(Nullable`1<DateTimeOffset> p);
    public static TimeSpan ToTimeSpan(Nullable`1<double> p);
    public static TimeSpan ToTimeSpan(Nullable`1<long> p);
    public static TimeSpan ToTimeSpan(Nullable`1<TimeSpan> p);
    public static TimeSpan ToTimeSpan(Binary p);
    public static TimeSpan ToTimeSpan(Byte[] p);
    public static TimeSpan ToTimeSpan(SqlDateTime p);
    public static TimeSpan ToTimeSpan(SqlDouble p);
    public static TimeSpan ToTimeSpan(SqlInt64 p);
    public static TimeSpan ToTimeSpan(SqlString p);
    public static TimeSpan ToTimeSpan(object p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(bool p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(byte p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(char p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(decimal p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(double p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(short p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(int p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(long p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(sbyte p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(float p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(string p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(UInt32 p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(ulong p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Nullable`1<ulong> p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Binary p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Byte[] p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlByte p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(SqlString p);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(object p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(bool p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(byte p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(char p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(decimal p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(double p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(short p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(int p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(long p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(sbyte p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(float p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(string p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(ushort p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(ulong p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Nullable`1<ulong> p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Binary p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Byte[] p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlByte p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(SqlString p);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(object p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(bool p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(byte p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(char p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(decimal p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(double p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(short p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(int p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(long p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(sbyte p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(float p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(string p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(ushort p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(UInt32 p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Nullable`1<ulong> p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Binary p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Byte[] p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlByte p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(SqlString p);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(object p);
    public static Nullable`1<bool> ToNullableBoolean(bool p);
    public static Nullable`1<bool> ToNullableBoolean(byte p);
    public static Nullable`1<bool> ToNullableBoolean(char p);
    public static Nullable`1<bool> ToNullableBoolean(decimal p);
    public static Nullable`1<bool> ToNullableBoolean(double p);
    public static Nullable`1<bool> ToNullableBoolean(short p);
    public static Nullable`1<bool> ToNullableBoolean(int p);
    public static Nullable`1<bool> ToNullableBoolean(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(sbyte p);
    public static Nullable`1<bool> ToNullableBoolean(float p);
    public static Nullable`1<bool> ToNullableBoolean(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(ulong p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<byte> p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<char> p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<decimal> p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<double> p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<short> p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<int> p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(Nullable`1<sbyte> p);
    public static Nullable`1<bool> ToNullableBoolean(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<bool> ToNullableBoolean(Nullable`1<ulong> p);
    public static Nullable`1<bool> ToNullableBoolean(Binary p);
    public static Nullable`1<bool> ToNullableBoolean(Byte[] p);
    public static Nullable`1<bool> ToNullableBoolean(SqlBoolean p);
    public static Nullable`1<bool> ToNullableBoolean(SqlByte p);
    public static Nullable`1<bool> ToNullableBoolean(SqlDecimal p);
    public static Nullable`1<bool> ToNullableBoolean(SqlDouble p);
    public static Nullable`1<bool> ToNullableBoolean(SqlInt16 p);
    public static Nullable`1<bool> ToNullableBoolean(SqlInt32 p);
    public static Nullable`1<bool> ToNullableBoolean(SqlInt64 p);
    public static Nullable`1<bool> ToNullableBoolean(SqlMoney p);
    public static Nullable`1<bool> ToNullableBoolean(SqlSingle p);
    public static Nullable`1<bool> ToNullableBoolean(SqlString p);
    public static Nullable`1<bool> ToNullableBoolean(object p);
    public static Nullable`1<byte> ToNullableByte(bool p);
    public static Nullable`1<byte> ToNullableByte(byte p);
    public static Nullable`1<byte> ToNullableByte(char p);
    public static Nullable`1<byte> ToNullableByte(decimal p);
    public static Nullable`1<byte> ToNullableByte(double p);
    public static Nullable`1<byte> ToNullableByte(short p);
    public static Nullable`1<byte> ToNullableByte(int p);
    public static Nullable`1<byte> ToNullableByte(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(sbyte p);
    public static Nullable`1<byte> ToNullableByte(float p);
    public static Nullable`1<byte> ToNullableByte(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(ulong p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<bool> p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<char> p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<decimal> p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<double> p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<short> p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<int> p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(Nullable`1<sbyte> p);
    public static Nullable`1<byte> ToNullableByte(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<byte> ToNullableByte(Nullable`1<ulong> p);
    public static Nullable`1<byte> ToNullableByte(Binary p);
    public static Nullable`1<byte> ToNullableByte(Byte[] p);
    public static Nullable`1<byte> ToNullableByte(SqlBoolean p);
    public static Nullable`1<byte> ToNullableByte(SqlByte p);
    public static Nullable`1<byte> ToNullableByte(SqlDecimal p);
    public static Nullable`1<byte> ToNullableByte(SqlDouble p);
    public static Nullable`1<byte> ToNullableByte(SqlInt16 p);
    public static Nullable`1<byte> ToNullableByte(SqlInt32 p);
    public static Nullable`1<byte> ToNullableByte(SqlInt64 p);
    public static Nullable`1<byte> ToNullableByte(SqlMoney p);
    public static Nullable`1<byte> ToNullableByte(SqlSingle p);
    public static Nullable`1<byte> ToNullableByte(SqlString p);
    public static Nullable`1<byte> ToNullableByte(object p);
    public static Nullable`1<char> ToNullableChar(bool p);
    public static Nullable`1<char> ToNullableChar(byte p);
    public static Nullable`1<char> ToNullableChar(char p);
    public static Nullable`1<char> ToNullableChar(decimal p);
    public static Nullable`1<char> ToNullableChar(double p);
    public static Nullable`1<char> ToNullableChar(short p);
    public static Nullable`1<char> ToNullableChar(int p);
    public static Nullable`1<char> ToNullableChar(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(sbyte p);
    public static Nullable`1<char> ToNullableChar(float p);
    public static Nullable`1<char> ToNullableChar(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(ulong p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<bool> p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<byte> p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<decimal> p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<double> p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<short> p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<int> p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(Nullable`1<sbyte> p);
    public static Nullable`1<char> ToNullableChar(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<char> ToNullableChar(Nullable`1<ulong> p);
    public static Nullable`1<char> ToNullableChar(Binary p);
    public static Nullable`1<char> ToNullableChar(Byte[] p);
    public static Nullable`1<char> ToNullableChar(SqlBoolean p);
    public static Nullable`1<char> ToNullableChar(SqlByte p);
    public static Nullable`1<char> ToNullableChar(SqlDecimal p);
    public static Nullable`1<char> ToNullableChar(SqlDouble p);
    public static Nullable`1<char> ToNullableChar(SqlInt16 p);
    public static Nullable`1<char> ToNullableChar(SqlInt32 p);
    public static Nullable`1<char> ToNullableChar(SqlInt64 p);
    public static Nullable`1<char> ToNullableChar(SqlMoney p);
    public static Nullable`1<char> ToNullableChar(SqlSingle p);
    public static Nullable`1<char> ToNullableChar(SqlString p);
    public static Nullable`1<char> ToNullableChar(object p);
    public static Nullable`1<DateTime> ToNullableDateTime(DateTime p);
    public static Nullable`1<DateTime> ToNullableDateTime(DateTimeOffset p);
    public static Nullable`1<DateTime> ToNullableDateTime(double p);
    public static Nullable`1<DateTime> ToNullableDateTime(long p);
    public static Nullable`1<DateTime> ToNullableDateTime(string p);
    public static Nullable`1<DateTime> ToNullableDateTime(TimeSpan p);
    public static Nullable`1<DateTime> ToNullableDateTime(Nullable`1<DateTimeOffset> p);
    public static Nullable`1<DateTime> ToNullableDateTime(Nullable`1<double> p);
    public static Nullable`1<DateTime> ToNullableDateTime(Nullable`1<long> p);
    public static Nullable`1<DateTime> ToNullableDateTime(Nullable`1<TimeSpan> p);
    public static Nullable`1<DateTime> ToNullableDateTime(Binary p);
    public static Nullable`1<DateTime> ToNullableDateTime(Byte[] p);
    public static Nullable`1<DateTime> ToNullableDateTime(SqlDateTime p);
    public static Nullable`1<DateTime> ToNullableDateTime(SqlDouble p);
    public static Nullable`1<DateTime> ToNullableDateTime(SqlInt64 p);
    public static Nullable`1<DateTime> ToNullableDateTime(SqlString p);
    public static Nullable`1<DateTime> ToNullableDateTime(object p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(DateTime p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(DateTimeOffset p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(double p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(long p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(string p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(TimeSpan p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(Nullable`1<DateTime> p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(Nullable`1<double> p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(Nullable`1<long> p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(Nullable`1<TimeSpan> p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(Binary p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(Byte[] p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(SqlDateTime p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(SqlDouble p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(SqlInt64 p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(SqlString p);
    public static Nullable`1<DateTimeOffset> ToNullableDateTimeOffset(object p);
    public static Nullable`1<decimal> ToNullableDecimal(bool p);
    public static Nullable`1<decimal> ToNullableDecimal(byte p);
    public static Nullable`1<decimal> ToNullableDecimal(char p);
    public static Nullable`1<decimal> ToNullableDecimal(decimal p);
    public static Nullable`1<decimal> ToNullableDecimal(double p);
    public static Nullable`1<decimal> ToNullableDecimal(short p);
    public static Nullable`1<decimal> ToNullableDecimal(int p);
    public static Nullable`1<decimal> ToNullableDecimal(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(sbyte p);
    public static Nullable`1<decimal> ToNullableDecimal(float p);
    public static Nullable`1<decimal> ToNullableDecimal(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(ulong p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<bool> p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<byte> p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<char> p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<double> p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<short> p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<int> p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<sbyte> p);
    public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<decimal> ToNullableDecimal(Nullable`1<ulong> p);
    public static Nullable`1<decimal> ToNullableDecimal(Binary p);
    public static Nullable`1<decimal> ToNullableDecimal(Byte[] p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlBoolean p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlByte p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlDecimal p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlDouble p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlInt16 p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlInt32 p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlInt64 p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlMoney p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlSingle p);
    public static Nullable`1<decimal> ToNullableDecimal(SqlString p);
    public static Nullable`1<decimal> ToNullableDecimal(object p);
    public static Nullable`1<double> ToNullableDouble(bool p);
    public static Nullable`1<double> ToNullableDouble(byte p);
    public static Nullable`1<double> ToNullableDouble(char p);
    public static Nullable`1<double> ToNullableDouble(DateTime p);
    public static Nullable`1<double> ToNullableDouble(DateTimeOffset p);
    public static Nullable`1<double> ToNullableDouble(decimal p);
    public static Nullable`1<double> ToNullableDouble(double p);
    public static Nullable`1<double> ToNullableDouble(short p);
    public static Nullable`1<double> ToNullableDouble(int p);
    public static Nullable`1<double> ToNullableDouble(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(sbyte p);
    public static Nullable`1<double> ToNullableDouble(float p);
    public static Nullable`1<double> ToNullableDouble(string p);
    public static Nullable`1<double> ToNullableDouble(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(ulong p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<bool> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<byte> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<char> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<DateTime> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<DateTimeOffset> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<decimal> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<short> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<int> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(Nullable`1<sbyte> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<float> p);
    public static Nullable`1<double> ToNullableDouble(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<double> ToNullableDouble(Nullable`1<ulong> p);
    public static Nullable`1<double> ToNullableDouble(Binary p);
    public static Nullable`1<double> ToNullableDouble(Byte[] p);
    public static Nullable`1<double> ToNullableDouble(SqlBoolean p);
    public static Nullable`1<double> ToNullableDouble(SqlByte p);
    public static Nullable`1<double> ToNullableDouble(SqlDateTime p);
    public static Nullable`1<double> ToNullableDouble(SqlDecimal p);
    public static Nullable`1<double> ToNullableDouble(SqlDouble p);
    public static Nullable`1<double> ToNullableDouble(SqlInt16 p);
    public static Nullable`1<double> ToNullableDouble(SqlInt32 p);
    public static Nullable`1<double> ToNullableDouble(SqlInt64 p);
    public static Nullable`1<double> ToNullableDouble(SqlMoney p);
    public static Nullable`1<double> ToNullableDouble(SqlSingle p);
    public static Nullable`1<double> ToNullableDouble(SqlString p);
    public static Nullable`1<double> ToNullableDouble(object p);
    public static Nullable`1<Guid> ToNullableGuid(Guid p);
    public static Nullable`1<Guid> ToNullableGuid(string p);
    public static Nullable`1<Guid> ToNullableGuid(Binary p);
    public static Nullable`1<Guid> ToNullableGuid(Byte[] p);
    public static Nullable`1<Guid> ToNullableGuid(Type p);
    public static Nullable`1<Guid> ToNullableGuid(SqlBinary p);
    public static Nullable`1<Guid> ToNullableGuid(SqlGuid p);
    public static Nullable`1<Guid> ToNullableGuid(SqlString p);
    public static Nullable`1<Guid> ToNullableGuid(object p);
    public static Nullable`1<short> ToNullableInt16(bool p);
    public static Nullable`1<short> ToNullableInt16(byte p);
    public static Nullable`1<short> ToNullableInt16(char p);
    public static Nullable`1<short> ToNullableInt16(decimal p);
    public static Nullable`1<short> ToNullableInt16(double p);
    public static Nullable`1<short> ToNullableInt16(short p);
    public static Nullable`1<short> ToNullableInt16(int p);
    public static Nullable`1<short> ToNullableInt16(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(sbyte p);
    public static Nullable`1<short> ToNullableInt16(float p);
    public static Nullable`1<short> ToNullableInt16(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(ulong p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<bool> p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<byte> p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<char> p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<decimal> p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<double> p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<int> p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(Nullable`1<sbyte> p);
    public static Nullable`1<short> ToNullableInt16(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<short> ToNullableInt16(Nullable`1<ulong> p);
    public static Nullable`1<short> ToNullableInt16(Binary p);
    public static Nullable`1<short> ToNullableInt16(Byte[] p);
    public static Nullable`1<short> ToNullableInt16(SqlBoolean p);
    public static Nullable`1<short> ToNullableInt16(SqlByte p);
    public static Nullable`1<short> ToNullableInt16(SqlDecimal p);
    public static Nullable`1<short> ToNullableInt16(SqlDouble p);
    public static Nullable`1<short> ToNullableInt16(SqlInt16 p);
    public static Nullable`1<short> ToNullableInt16(SqlInt32 p);
    public static Nullable`1<short> ToNullableInt16(SqlInt64 p);
    public static Nullable`1<short> ToNullableInt16(SqlMoney p);
    public static Nullable`1<short> ToNullableInt16(SqlSingle p);
    public static Nullable`1<short> ToNullableInt16(SqlString p);
    public static Nullable`1<short> ToNullableInt16(object p);
    public static Nullable`1<int> ToNullableInt32(bool p);
    public static Nullable`1<int> ToNullableInt32(byte p);
    public static Nullable`1<int> ToNullableInt32(char p);
    public static Nullable`1<int> ToNullableInt32(decimal p);
    public static Nullable`1<int> ToNullableInt32(double p);
    public static Nullable`1<int> ToNullableInt32(short p);
    public static Nullable`1<int> ToNullableInt32(int p);
    public static Nullable`1<int> ToNullableInt32(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(sbyte p);
    public static Nullable`1<int> ToNullableInt32(float p);
    public static Nullable`1<int> ToNullableInt32(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(ulong p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<bool> p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<byte> p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<char> p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<decimal> p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<double> p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<short> p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(Nullable`1<sbyte> p);
    public static Nullable`1<int> ToNullableInt32(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<int> ToNullableInt32(Nullable`1<ulong> p);
    public static Nullable`1<int> ToNullableInt32(Binary p);
    public static Nullable`1<int> ToNullableInt32(Byte[] p);
    public static Nullable`1<int> ToNullableInt32(SqlBoolean p);
    public static Nullable`1<int> ToNullableInt32(SqlByte p);
    public static Nullable`1<int> ToNullableInt32(SqlDecimal p);
    public static Nullable`1<int> ToNullableInt32(SqlDouble p);
    public static Nullable`1<int> ToNullableInt32(SqlInt16 p);
    public static Nullable`1<int> ToNullableInt32(SqlInt32 p);
    public static Nullable`1<int> ToNullableInt32(SqlInt64 p);
    public static Nullable`1<int> ToNullableInt32(SqlMoney p);
    public static Nullable`1<int> ToNullableInt32(SqlSingle p);
    public static Nullable`1<int> ToNullableInt32(SqlString p);
    public static Nullable`1<int> ToNullableInt32(object p);
    public static Nullable`1<long> ToNullableInt64(bool p);
    public static Nullable`1<long> ToNullableInt64(byte p);
    public static Nullable`1<long> ToNullableInt64(char p);
    public static Nullable`1<long> ToNullableInt64(DateTime p);
    public static Nullable`1<long> ToNullableInt64(DateTimeOffset p);
    public static Nullable`1<long> ToNullableInt64(decimal p);
    public static Nullable`1<long> ToNullableInt64(double p);
    public static Nullable`1<long> ToNullableInt64(short p);
    public static Nullable`1<long> ToNullableInt64(int p);
    public static Nullable`1<long> ToNullableInt64(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(sbyte p);
    public static Nullable`1<long> ToNullableInt64(float p);
    public static Nullable`1<long> ToNullableInt64(string p);
    public static Nullable`1<long> ToNullableInt64(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(ulong p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<bool> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<byte> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<char> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<DateTime> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<DateTimeOffset> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<decimal> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<double> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<short> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(Nullable`1<sbyte> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<float> p);
    public static Nullable`1<long> ToNullableInt64(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<long> ToNullableInt64(Nullable`1<ulong> p);
    public static Nullable`1<long> ToNullableInt64(Binary p);
    public static Nullable`1<long> ToNullableInt64(Byte[] p);
    public static Nullable`1<long> ToNullableInt64(SqlBoolean p);
    public static Nullable`1<long> ToNullableInt64(SqlByte p);
    public static Nullable`1<long> ToNullableInt64(SqlDateTime p);
    public static Nullable`1<long> ToNullableInt64(SqlDecimal p);
    public static Nullable`1<long> ToNullableInt64(SqlDouble p);
    public static Nullable`1<long> ToNullableInt64(SqlInt16 p);
    public static Nullable`1<long> ToNullableInt64(SqlInt32 p);
    public static Nullable`1<long> ToNullableInt64(SqlInt64 p);
    public static Nullable`1<long> ToNullableInt64(SqlMoney p);
    public static Nullable`1<long> ToNullableInt64(SqlSingle p);
    public static Nullable`1<long> ToNullableInt64(SqlString p);
    public static Nullable`1<long> ToNullableInt64(object p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(bool p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(byte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(char p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(decimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(double p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(short p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(int p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(sbyte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(float p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(ulong p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Nullable`1<ulong> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Binary p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(Byte[] p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlByte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(SqlString p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> ToNullableSByte(object p);
    public static Nullable`1<float> ToNullableSingle(bool p);
    public static Nullable`1<float> ToNullableSingle(byte p);
    public static Nullable`1<float> ToNullableSingle(char p);
    public static Nullable`1<float> ToNullableSingle(decimal p);
    public static Nullable`1<float> ToNullableSingle(double p);
    public static Nullable`1<float> ToNullableSingle(short p);
    public static Nullable`1<float> ToNullableSingle(int p);
    public static Nullable`1<float> ToNullableSingle(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(sbyte p);
    public static Nullable`1<float> ToNullableSingle(float p);
    public static Nullable`1<float> ToNullableSingle(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(ulong p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<bool> p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<byte> p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<char> p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<decimal> p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<double> p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<short> p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<int> p);
    public static Nullable`1<float> ToNullableSingle(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<float> ToNullableSingle(Nullable`1<ulong> p);
    public static Nullable`1<float> ToNullableSingle(Binary p);
    public static Nullable`1<float> ToNullableSingle(Byte[] p);
    public static Nullable`1<float> ToNullableSingle(SqlBoolean p);
    public static Nullable`1<float> ToNullableSingle(SqlByte p);
    public static Nullable`1<float> ToNullableSingle(SqlDecimal p);
    public static Nullable`1<float> ToNullableSingle(SqlDouble p);
    public static Nullable`1<float> ToNullableSingle(SqlInt16 p);
    public static Nullable`1<float> ToNullableSingle(SqlInt32 p);
    public static Nullable`1<float> ToNullableSingle(SqlInt64 p);
    public static Nullable`1<float> ToNullableSingle(SqlMoney p);
    public static Nullable`1<float> ToNullableSingle(SqlSingle p);
    public static Nullable`1<float> ToNullableSingle(SqlString p);
    public static Nullable`1<float> ToNullableSingle(object p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(DateTime p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(DateTimeOffset p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(double p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(long p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(string p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(TimeSpan p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(Nullable`1<DateTime> p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(Nullable`1<DateTimeOffset> p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(Nullable`1<double> p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(Nullable`1<long> p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(Binary p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(Byte[] p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(SqlDateTime p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(SqlDouble p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(SqlInt64 p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(SqlString p);
    public static Nullable`1<TimeSpan> ToNullableTimeSpan(object p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(bool p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(byte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(char p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(decimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(double p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(short p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(int p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(sbyte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(float p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(ulong p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Nullable`1<ulong> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Binary p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(Byte[] p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlByte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(SqlString p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> ToNullableUInt16(object p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(bool p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(byte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(char p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(decimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(double p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(short p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(int p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(sbyte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(float p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(ulong p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Nullable`1<ulong> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Binary p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(Byte[] p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlByte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(SqlString p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> ToNullableUInt32(object p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(bool p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(byte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(char p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(decimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(double p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(short p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(int p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(long p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(sbyte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(float p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(string p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(ushort p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(ulong p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<bool> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<char> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<decimal> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<double> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<short> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<int> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<sbyte> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Binary p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(Byte[] p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlBoolean p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlByte p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlDecimal p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlDouble p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlInt16 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlInt32 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlInt64 p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlMoney p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlSingle p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(SqlString p);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> ToNullableUInt64(object p);
    public static SqlBinary ToSqlBinary(Guid p);
    public static SqlBinary ToSqlBinary(Nullable`1<Guid> p);
    public static SqlBinary ToSqlBinary(SqlBytes p);
    public static SqlBinary ToSqlBinary(SqlGuid p);
    public static SqlBinary ToSqlBinary(Binary p);
    public static SqlBinary ToSqlBinary(Byte[] p);
    public static SqlBinary ToSqlBinary(object p);
    public static SqlBoolean ToSqlBoolean(bool p);
    public static SqlBoolean ToSqlBoolean(byte p);
    public static SqlBoolean ToSqlBoolean(char p);
    public static SqlBoolean ToSqlBoolean(decimal p);
    public static SqlBoolean ToSqlBoolean(double p);
    public static SqlBoolean ToSqlBoolean(short p);
    public static SqlBoolean ToSqlBoolean(int p);
    public static SqlBoolean ToSqlBoolean(long p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(sbyte p);
    public static SqlBoolean ToSqlBoolean(float p);
    public static SqlBoolean ToSqlBoolean(string p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(ulong p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<bool> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<byte> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<char> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<decimal> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<double> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<short> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<int> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(Nullable`1<sbyte> p);
    public static SqlBoolean ToSqlBoolean(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlBoolean ToSqlBoolean(Nullable`1<ulong> p);
    public static SqlBoolean ToSqlBoolean(SqlByte p);
    public static SqlBoolean ToSqlBoolean(SqlDecimal p);
    public static SqlBoolean ToSqlBoolean(SqlDouble p);
    public static SqlBoolean ToSqlBoolean(SqlInt16 p);
    public static SqlBoolean ToSqlBoolean(SqlInt32 p);
    public static SqlBoolean ToSqlBoolean(SqlInt64 p);
    public static SqlBoolean ToSqlBoolean(SqlMoney p);
    public static SqlBoolean ToSqlBoolean(SqlSingle p);
    public static SqlBoolean ToSqlBoolean(SqlString p);
    public static SqlBoolean ToSqlBoolean(Binary p);
    public static SqlBoolean ToSqlBoolean(Byte[] p);
    public static SqlBoolean ToSqlBoolean(object p);
    public static SqlByte ToSqlByte(bool p);
    public static SqlByte ToSqlByte(byte p);
    public static SqlByte ToSqlByte(char p);
    public static SqlByte ToSqlByte(decimal p);
    public static SqlByte ToSqlByte(double p);
    public static SqlByte ToSqlByte(short p);
    public static SqlByte ToSqlByte(int p);
    public static SqlByte ToSqlByte(long p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(sbyte p);
    public static SqlByte ToSqlByte(float p);
    public static SqlByte ToSqlByte(string p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(ulong p);
    public static SqlByte ToSqlByte(Nullable`1<bool> p);
    public static SqlByte ToSqlByte(Nullable`1<byte> p);
    public static SqlByte ToSqlByte(Nullable`1<char> p);
    public static SqlByte ToSqlByte(Nullable`1<decimal> p);
    public static SqlByte ToSqlByte(Nullable`1<double> p);
    public static SqlByte ToSqlByte(Nullable`1<short> p);
    public static SqlByte ToSqlByte(Nullable`1<int> p);
    public static SqlByte ToSqlByte(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(Nullable`1<sbyte> p);
    public static SqlByte ToSqlByte(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlByte ToSqlByte(Nullable`1<ulong> p);
    public static SqlByte ToSqlByte(SqlBoolean p);
    public static SqlByte ToSqlByte(SqlDecimal p);
    public static SqlByte ToSqlByte(SqlDouble p);
    public static SqlByte ToSqlByte(SqlInt16 p);
    public static SqlByte ToSqlByte(SqlInt32 p);
    public static SqlByte ToSqlByte(SqlInt64 p);
    public static SqlByte ToSqlByte(SqlMoney p);
    public static SqlByte ToSqlByte(SqlSingle p);
    public static SqlByte ToSqlByte(SqlString p);
    public static SqlByte ToSqlByte(Binary p);
    public static SqlByte ToSqlByte(Byte[] p);
    public static SqlByte ToSqlByte(object p);
    public static SqlBytes ToSqlBytes(bool p);
    public static SqlBytes ToSqlBytes(byte p);
    public static SqlBytes ToSqlBytes(char p);
    public static SqlBytes ToSqlBytes(DateTime p);
    public static SqlBytes ToSqlBytes(DateTimeOffset p);
    public static SqlBytes ToSqlBytes(double p);
    public static SqlBytes ToSqlBytes(Guid p);
    public static SqlBytes ToSqlBytes(short p);
    public static SqlBytes ToSqlBytes(int p);
    public static SqlBytes ToSqlBytes(long p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(sbyte p);
    public static SqlBytes ToSqlBytes(float p);
    public static SqlBytes ToSqlBytes(string p);
    public static SqlBytes ToSqlBytes(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(ulong p);
    public static SqlBytes ToSqlBytes(Nullable`1<bool> p);
    public static SqlBytes ToSqlBytes(Nullable`1<byte> p);
    public static SqlBytes ToSqlBytes(Nullable`1<char> p);
    public static SqlBytes ToSqlBytes(Nullable`1<DateTime> p);
    public static SqlBytes ToSqlBytes(Nullable`1<DateTimeOffset> p);
    public static SqlBytes ToSqlBytes(Nullable`1<decimal> p);
    public static SqlBytes ToSqlBytes(Nullable`1<double> p);
    public static SqlBytes ToSqlBytes(Nullable`1<Guid> p);
    public static SqlBytes ToSqlBytes(Nullable`1<short> p);
    public static SqlBytes ToSqlBytes(Nullable`1<int> p);
    public static SqlBytes ToSqlBytes(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(Nullable`1<sbyte> p);
    public static SqlBytes ToSqlBytes(Nullable`1<float> p);
    public static SqlBytes ToSqlBytes(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlBytes ToSqlBytes(Nullable`1<ulong> p);
    public static SqlBytes ToSqlBytes(SqlBinary p);
    public static SqlBytes ToSqlBytes(SqlGuid p);
    public static SqlBytes ToSqlBytes(Binary p);
    public static SqlBytes ToSqlBytes(Byte[] p);
    public static SqlBytes ToSqlBytes(Stream p);
    public static SqlBytes ToSqlBytes(object p);
    public static SqlDateTime ToSqlDateTime(DateTime p);
    public static SqlDateTime ToSqlDateTime(DateTimeOffset p);
    public static SqlDateTime ToSqlDateTime(double p);
    public static SqlDateTime ToSqlDateTime(long p);
    public static SqlDateTime ToSqlDateTime(string p);
    public static SqlDateTime ToSqlDateTime(TimeSpan p);
    public static SqlDateTime ToSqlDateTime(Nullable`1<DateTime> p);
    public static SqlDateTime ToSqlDateTime(Nullable`1<DateTimeOffset> p);
    public static SqlDateTime ToSqlDateTime(Nullable`1<double> p);
    public static SqlDateTime ToSqlDateTime(Nullable`1<long> p);
    public static SqlDateTime ToSqlDateTime(Nullable`1<TimeSpan> p);
    public static SqlDateTime ToSqlDateTime(SqlDouble p);
    public static SqlDateTime ToSqlDateTime(SqlInt64 p);
    public static SqlDateTime ToSqlDateTime(SqlString p);
    public static SqlDateTime ToSqlDateTime(Binary p);
    public static SqlDateTime ToSqlDateTime(Byte[] p);
    public static SqlDateTime ToSqlDateTime(object p);
    public static SqlDecimal ToSqlDecimal(bool p);
    public static SqlDecimal ToSqlDecimal(byte p);
    public static SqlDecimal ToSqlDecimal(char p);
    public static SqlDecimal ToSqlDecimal(decimal p);
    public static SqlDecimal ToSqlDecimal(double p);
    public static SqlDecimal ToSqlDecimal(short p);
    public static SqlDecimal ToSqlDecimal(int p);
    public static SqlDecimal ToSqlDecimal(long p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(sbyte p);
    public static SqlDecimal ToSqlDecimal(float p);
    public static SqlDecimal ToSqlDecimal(string p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(ulong p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<bool> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<byte> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<char> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<decimal> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<double> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<short> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<int> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(Nullable`1<sbyte> p);
    public static SqlDecimal ToSqlDecimal(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlDecimal ToSqlDecimal(Nullable`1<ulong> p);
    public static SqlDecimal ToSqlDecimal(SqlBoolean p);
    public static SqlDecimal ToSqlDecimal(SqlByte p);
    public static SqlDecimal ToSqlDecimal(SqlDouble p);
    public static SqlDecimal ToSqlDecimal(SqlInt16 p);
    public static SqlDecimal ToSqlDecimal(SqlInt32 p);
    public static SqlDecimal ToSqlDecimal(SqlInt64 p);
    public static SqlDecimal ToSqlDecimal(SqlMoney p);
    public static SqlDecimal ToSqlDecimal(SqlSingle p);
    public static SqlDecimal ToSqlDecimal(SqlString p);
    public static SqlDecimal ToSqlDecimal(Binary p);
    public static SqlDecimal ToSqlDecimal(Byte[] p);
    public static SqlDecimal ToSqlDecimal(object p);
    public static SqlDouble ToSqlDouble(bool p);
    public static SqlDouble ToSqlDouble(byte p);
    public static SqlDouble ToSqlDouble(char p);
    public static SqlDouble ToSqlDouble(DateTime p);
    public static SqlDouble ToSqlDouble(DateTimeOffset p);
    public static SqlDouble ToSqlDouble(decimal p);
    public static SqlDouble ToSqlDouble(double p);
    public static SqlDouble ToSqlDouble(short p);
    public static SqlDouble ToSqlDouble(int p);
    public static SqlDouble ToSqlDouble(long p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(sbyte p);
    public static SqlDouble ToSqlDouble(float p);
    public static SqlDouble ToSqlDouble(string p);
    public static SqlDouble ToSqlDouble(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(ulong p);
    public static SqlDouble ToSqlDouble(Nullable`1<bool> p);
    public static SqlDouble ToSqlDouble(Nullable`1<byte> p);
    public static SqlDouble ToSqlDouble(Nullable`1<char> p);
    public static SqlDouble ToSqlDouble(Nullable`1<DateTime> p);
    public static SqlDouble ToSqlDouble(Nullable`1<DateTimeOffset> p);
    public static SqlDouble ToSqlDouble(Nullable`1<decimal> p);
    public static SqlDouble ToSqlDouble(Nullable`1<double> p);
    public static SqlDouble ToSqlDouble(Nullable`1<short> p);
    public static SqlDouble ToSqlDouble(Nullable`1<int> p);
    public static SqlDouble ToSqlDouble(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(Nullable`1<sbyte> p);
    public static SqlDouble ToSqlDouble(Nullable`1<float> p);
    public static SqlDouble ToSqlDouble(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlDouble ToSqlDouble(Nullable`1<ulong> p);
    public static SqlDouble ToSqlDouble(SqlBoolean p);
    public static SqlDouble ToSqlDouble(SqlByte p);
    public static SqlDouble ToSqlDouble(SqlDateTime p);
    public static SqlDouble ToSqlDouble(SqlDecimal p);
    public static SqlDouble ToSqlDouble(SqlInt16 p);
    public static SqlDouble ToSqlDouble(SqlInt32 p);
    public static SqlDouble ToSqlDouble(SqlInt64 p);
    public static SqlDouble ToSqlDouble(SqlMoney p);
    public static SqlDouble ToSqlDouble(SqlSingle p);
    public static SqlDouble ToSqlDouble(SqlString p);
    public static SqlDouble ToSqlDouble(Binary p);
    public static SqlDouble ToSqlDouble(Byte[] p);
    public static SqlDouble ToSqlDouble(object p);
    public static SqlGuid ToSqlGuid(Guid p);
    public static SqlGuid ToSqlGuid(string p);
    public static SqlGuid ToSqlGuid(Nullable`1<Guid> p);
    public static SqlGuid ToSqlGuid(SqlBinary p);
    public static SqlGuid ToSqlGuid(SqlString p);
    public static SqlGuid ToSqlGuid(Binary p);
    public static SqlGuid ToSqlGuid(Byte[] p);
    public static SqlGuid ToSqlGuid(Type p);
    public static SqlGuid ToSqlGuid(object p);
    public static SqlInt16 ToSqlInt16(bool p);
    public static SqlInt16 ToSqlInt16(byte p);
    public static SqlInt16 ToSqlInt16(char p);
    public static SqlInt16 ToSqlInt16(decimal p);
    public static SqlInt16 ToSqlInt16(double p);
    public static SqlInt16 ToSqlInt16(short p);
    public static SqlInt16 ToSqlInt16(int p);
    public static SqlInt16 ToSqlInt16(long p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(sbyte p);
    public static SqlInt16 ToSqlInt16(float p);
    public static SqlInt16 ToSqlInt16(string p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(ulong p);
    public static SqlInt16 ToSqlInt16(Nullable`1<bool> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<byte> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<char> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<decimal> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<double> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<short> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<int> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(Nullable`1<sbyte> p);
    public static SqlInt16 ToSqlInt16(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlInt16 ToSqlInt16(Nullable`1<ulong> p);
    public static SqlInt16 ToSqlInt16(SqlBoolean p);
    public static SqlInt16 ToSqlInt16(SqlByte p);
    public static SqlInt16 ToSqlInt16(SqlDecimal p);
    public static SqlInt16 ToSqlInt16(SqlDouble p);
    public static SqlInt16 ToSqlInt16(SqlInt32 p);
    public static SqlInt16 ToSqlInt16(SqlInt64 p);
    public static SqlInt16 ToSqlInt16(SqlMoney p);
    public static SqlInt16 ToSqlInt16(SqlSingle p);
    public static SqlInt16 ToSqlInt16(SqlString p);
    public static SqlInt16 ToSqlInt16(Binary p);
    public static SqlInt16 ToSqlInt16(Byte[] p);
    public static SqlInt16 ToSqlInt16(object p);
    public static SqlInt32 ToSqlInt32(bool p);
    public static SqlInt32 ToSqlInt32(byte p);
    public static SqlInt32 ToSqlInt32(char p);
    public static SqlInt32 ToSqlInt32(decimal p);
    public static SqlInt32 ToSqlInt32(double p);
    public static SqlInt32 ToSqlInt32(short p);
    public static SqlInt32 ToSqlInt32(int p);
    public static SqlInt32 ToSqlInt32(long p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(sbyte p);
    public static SqlInt32 ToSqlInt32(float p);
    public static SqlInt32 ToSqlInt32(string p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(ulong p);
    public static SqlInt32 ToSqlInt32(Nullable`1<bool> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<byte> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<char> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<decimal> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<double> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<short> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<int> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(Nullable`1<sbyte> p);
    public static SqlInt32 ToSqlInt32(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlInt32 ToSqlInt32(Nullable`1<ulong> p);
    public static SqlInt32 ToSqlInt32(SqlBoolean p);
    public static SqlInt32 ToSqlInt32(SqlByte p);
    public static SqlInt32 ToSqlInt32(SqlDecimal p);
    public static SqlInt32 ToSqlInt32(SqlDouble p);
    public static SqlInt32 ToSqlInt32(SqlInt16 p);
    public static SqlInt32 ToSqlInt32(SqlInt64 p);
    public static SqlInt32 ToSqlInt32(SqlMoney p);
    public static SqlInt32 ToSqlInt32(SqlSingle p);
    public static SqlInt32 ToSqlInt32(SqlString p);
    public static SqlInt32 ToSqlInt32(Binary p);
    public static SqlInt32 ToSqlInt32(Byte[] p);
    public static SqlInt32 ToSqlInt32(object p);
    public static SqlInt64 ToSqlInt64(bool p);
    public static SqlInt64 ToSqlInt64(byte p);
    public static SqlInt64 ToSqlInt64(char p);
    public static SqlInt64 ToSqlInt64(DateTime p);
    public static SqlInt64 ToSqlInt64(DateTimeOffset p);
    public static SqlInt64 ToSqlInt64(decimal p);
    public static SqlInt64 ToSqlInt64(double p);
    public static SqlInt64 ToSqlInt64(short p);
    public static SqlInt64 ToSqlInt64(int p);
    public static SqlInt64 ToSqlInt64(long p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(sbyte p);
    public static SqlInt64 ToSqlInt64(float p);
    public static SqlInt64 ToSqlInt64(string p);
    public static SqlInt64 ToSqlInt64(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(ulong p);
    public static SqlInt64 ToSqlInt64(Nullable`1<bool> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<byte> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<char> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<DateTime> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<DateTimeOffset> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<decimal> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<double> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<short> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<int> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(Nullable`1<sbyte> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<float> p);
    public static SqlInt64 ToSqlInt64(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlInt64 ToSqlInt64(Nullable`1<ulong> p);
    public static SqlInt64 ToSqlInt64(SqlBoolean p);
    public static SqlInt64 ToSqlInt64(SqlByte p);
    public static SqlInt64 ToSqlInt64(SqlDateTime p);
    public static SqlInt64 ToSqlInt64(SqlDecimal p);
    public static SqlInt64 ToSqlInt64(SqlDouble p);
    public static SqlInt64 ToSqlInt64(SqlInt16 p);
    public static SqlInt64 ToSqlInt64(SqlInt32 p);
    public static SqlInt64 ToSqlInt64(SqlMoney p);
    public static SqlInt64 ToSqlInt64(SqlSingle p);
    public static SqlInt64 ToSqlInt64(SqlString p);
    public static SqlInt64 ToSqlInt64(Binary p);
    public static SqlInt64 ToSqlInt64(Byte[] p);
    public static SqlInt64 ToSqlInt64(object p);
    public static SqlMoney ToSqlMoney(bool p);
    public static SqlMoney ToSqlMoney(byte p);
    public static SqlMoney ToSqlMoney(char p);
    public static SqlMoney ToSqlMoney(decimal p);
    public static SqlMoney ToSqlMoney(double p);
    public static SqlMoney ToSqlMoney(short p);
    public static SqlMoney ToSqlMoney(int p);
    public static SqlMoney ToSqlMoney(long p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(sbyte p);
    public static SqlMoney ToSqlMoney(float p);
    public static SqlMoney ToSqlMoney(string p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(ulong p);
    public static SqlMoney ToSqlMoney(Nullable`1<bool> p);
    public static SqlMoney ToSqlMoney(Nullable`1<byte> p);
    public static SqlMoney ToSqlMoney(Nullable`1<char> p);
    public static SqlMoney ToSqlMoney(Nullable`1<decimal> p);
    public static SqlMoney ToSqlMoney(Nullable`1<double> p);
    public static SqlMoney ToSqlMoney(Nullable`1<short> p);
    public static SqlMoney ToSqlMoney(Nullable`1<int> p);
    public static SqlMoney ToSqlMoney(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(Nullable`1<sbyte> p);
    public static SqlMoney ToSqlMoney(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlMoney ToSqlMoney(Nullable`1<ulong> p);
    public static SqlMoney ToSqlMoney(SqlBoolean p);
    public static SqlMoney ToSqlMoney(SqlByte p);
    public static SqlMoney ToSqlMoney(SqlDecimal p);
    public static SqlMoney ToSqlMoney(SqlDouble p);
    public static SqlMoney ToSqlMoney(SqlInt16 p);
    public static SqlMoney ToSqlMoney(SqlInt32 p);
    public static SqlMoney ToSqlMoney(SqlInt64 p);
    public static SqlMoney ToSqlMoney(SqlSingle p);
    public static SqlMoney ToSqlMoney(SqlString p);
    public static SqlMoney ToSqlMoney(Binary p);
    public static SqlMoney ToSqlMoney(Byte[] p);
    public static SqlMoney ToSqlMoney(object p);
    public static SqlSingle ToSqlSingle(bool p);
    public static SqlSingle ToSqlSingle(byte p);
    public static SqlSingle ToSqlSingle(char p);
    public static SqlSingle ToSqlSingle(decimal p);
    public static SqlSingle ToSqlSingle(double p);
    public static SqlSingle ToSqlSingle(short p);
    public static SqlSingle ToSqlSingle(int p);
    public static SqlSingle ToSqlSingle(long p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(sbyte p);
    public static SqlSingle ToSqlSingle(float p);
    public static SqlSingle ToSqlSingle(string p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(ulong p);
    public static SqlSingle ToSqlSingle(Nullable`1<bool> p);
    public static SqlSingle ToSqlSingle(Nullable`1<byte> p);
    public static SqlSingle ToSqlSingle(Nullable`1<char> p);
    public static SqlSingle ToSqlSingle(Nullable`1<decimal> p);
    public static SqlSingle ToSqlSingle(Nullable`1<double> p);
    public static SqlSingle ToSqlSingle(Nullable`1<short> p);
    public static SqlSingle ToSqlSingle(Nullable`1<int> p);
    public static SqlSingle ToSqlSingle(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(Nullable`1<sbyte> p);
    public static SqlSingle ToSqlSingle(Nullable`1<float> p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlSingle ToSqlSingle(Nullable`1<ulong> p);
    public static SqlSingle ToSqlSingle(SqlBoolean p);
    public static SqlSingle ToSqlSingle(SqlByte p);
    public static SqlSingle ToSqlSingle(SqlDecimal p);
    public static SqlSingle ToSqlSingle(SqlDouble p);
    public static SqlSingle ToSqlSingle(SqlInt16 p);
    public static SqlSingle ToSqlSingle(SqlInt32 p);
    public static SqlSingle ToSqlSingle(SqlInt64 p);
    public static SqlSingle ToSqlSingle(SqlMoney p);
    public static SqlSingle ToSqlSingle(SqlString p);
    public static SqlSingle ToSqlSingle(Binary p);
    public static SqlSingle ToSqlSingle(Byte[] p);
    public static SqlSingle ToSqlSingle(object p);
    public static SqlString ToSqlString(bool p);
    public static SqlString ToSqlString(byte p);
    public static SqlString ToSqlString(char p);
    public static SqlString ToSqlString(DateTime p);
    public static SqlString ToSqlString(DateTimeOffset p);
    public static SqlString ToSqlString(decimal p);
    public static SqlString ToSqlString(double p);
    public static SqlString ToSqlString(Guid p);
    public static SqlString ToSqlString(short p);
    public static SqlString ToSqlString(int p);
    public static SqlString ToSqlString(long p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(sbyte p);
    public static SqlString ToSqlString(float p);
    public static SqlString ToSqlString(string p);
    public static SqlString ToSqlString(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(ulong p);
    public static SqlString ToSqlString(Nullable`1<bool> p);
    public static SqlString ToSqlString(Nullable`1<byte> p);
    public static SqlString ToSqlString(Nullable`1<char> p);
    public static SqlString ToSqlString(Nullable`1<DateTime> p);
    public static SqlString ToSqlString(Nullable`1<DateTimeOffset> p);
    public static SqlString ToSqlString(Nullable`1<decimal> p);
    public static SqlString ToSqlString(Nullable`1<double> p);
    public static SqlString ToSqlString(Nullable`1<Guid> p);
    public static SqlString ToSqlString(Nullable`1<short> p);
    public static SqlString ToSqlString(Nullable`1<int> p);
    public static SqlString ToSqlString(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(Nullable`1<sbyte> p);
    public static SqlString ToSqlString(Nullable`1<float> p);
    public static SqlString ToSqlString(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlString ToSqlString(Nullable`1<ulong> p);
    public static SqlString ToSqlString(SqlBoolean p);
    public static SqlString ToSqlString(SqlByte p);
    public static SqlString ToSqlString(SqlChars p);
    public static SqlString ToSqlString(SqlDecimal p);
    public static SqlString ToSqlString(SqlDouble p);
    public static SqlString ToSqlString(SqlGuid p);
    public static SqlString ToSqlString(SqlInt16 p);
    public static SqlString ToSqlString(SqlInt32 p);
    public static SqlString ToSqlString(SqlInt64 p);
    public static SqlString ToSqlString(SqlMoney p);
    public static SqlString ToSqlString(SqlSingle p);
    public static SqlString ToSqlString(SqlXml p);
    public static SqlString ToSqlString(Binary p);
    public static SqlString ToSqlString(Byte[] p);
    public static SqlString ToSqlString(Type p);
    public static SqlString ToSqlString(XmlDocument p);
    public static SqlString ToSqlString(object p);
    public static SqlXml ToSqlXml(string p);
    public static SqlXml ToSqlXml(SqlBinary p);
    public static SqlXml ToSqlXml(SqlBytes p);
    public static SqlXml ToSqlXml(SqlChars p);
    public static SqlXml ToSqlXml(SqlString p);
    public static SqlXml ToSqlXml(Binary p);
    public static SqlXml ToSqlXml(Byte[] p);
    public static SqlXml ToSqlXml(Char[] p);
    public static SqlXml ToSqlXml(Stream p);
    public static SqlXml ToSqlXml(XmlDocument p);
    public static SqlXml ToSqlXml(XmlReader p);
    public static SqlXml ToSqlXml(object p);
    public static Byte[] ToByteArray(bool p);
    public static Byte[] ToByteArray(byte p);
    public static Byte[] ToByteArray(char p);
    public static Byte[] ToByteArray(DateTime p);
    public static Byte[] ToByteArray(DateTimeOffset p);
    public static Byte[] ToByteArray(double p);
    public static Byte[] ToByteArray(Guid p);
    public static Byte[] ToByteArray(short p);
    public static Byte[] ToByteArray(int p);
    public static Byte[] ToByteArray(long p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(sbyte p);
    public static Byte[] ToByteArray(float p);
    public static Byte[] ToByteArray(string p);
    public static Byte[] ToByteArray(TimeSpan p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(ushort p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(ulong p);
    public static Byte[] ToByteArray(Nullable`1<bool> p);
    public static Byte[] ToByteArray(Nullable`1<byte> p);
    public static Byte[] ToByteArray(Nullable`1<char> p);
    public static Byte[] ToByteArray(Nullable`1<DateTime> p);
    public static Byte[] ToByteArray(Nullable`1<DateTimeOffset> p);
    public static Byte[] ToByteArray(Nullable`1<decimal> p);
    public static Byte[] ToByteArray(Nullable`1<double> p);
    public static Byte[] ToByteArray(Nullable`1<Guid> p);
    public static Byte[] ToByteArray(Nullable`1<short> p);
    public static Byte[] ToByteArray(Nullable`1<int> p);
    public static Byte[] ToByteArray(Nullable`1<long> p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(Nullable`1<sbyte> p);
    public static Byte[] ToByteArray(Nullable`1<float> p);
    public static Byte[] ToByteArray(Nullable`1<TimeSpan> p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Byte[] ToByteArray(Nullable`1<ulong> p);
    public static Byte[] ToByteArray(Binary p);
    public static Byte[] ToByteArray(SqlBinary p);
    public static Byte[] ToByteArray(SqlBoolean p);
    public static Byte[] ToByteArray(SqlByte p);
    public static Byte[] ToByteArray(SqlBytes p);
    public static Byte[] ToByteArray(SqlDecimal p);
    public static Byte[] ToByteArray(SqlDouble p);
    public static Byte[] ToByteArray(SqlGuid p);
    public static Byte[] ToByteArray(SqlInt16 p);
    public static Byte[] ToByteArray(SqlInt32 p);
    public static Byte[] ToByteArray(SqlInt64 p);
    public static Byte[] ToByteArray(SqlMoney p);
    public static Byte[] ToByteArray(SqlSingle p);
    public static Byte[] ToByteArray(SqlString p);
    public static Byte[] ToByteArray(object p);
    public static Stream ToStream(Guid p);
    public static Stream ToStream(Nullable`1<Guid> p);
    public static Stream ToStream(Binary p);
    public static Stream ToStream(Byte[] p);
    public static Stream ToStream(SqlBinary p);
    public static Stream ToStream(SqlBytes p);
    public static Stream ToStream(SqlGuid p);
    public static Stream ToStream(object p);
    public static Type ToType(Guid p);
    public static Type ToType(string p);
    public static Type ToType(Nullable`1<Guid> p);
    public static Type ToType(Binary p);
    public static Type ToType(Byte[] p);
    public static Type ToType(Char[] p);
    public static Type ToType(SqlChars p);
    public static Type ToType(SqlGuid p);
    public static Type ToType(SqlString p);
    public static Type ToType(object p);
    public static bool ToBoolean(char p);
    public static Byte[] ToByteArray(decimal p);
    public static Byte[] ToByteArray(Stream p);
    public static Byte[] ToByteArray(Char[] p);
    public static decimal ToDecimal(Byte[] p);
    public static decimal ToDecimal(Binary p);
    public static SqlChars ToSqlChars(string p);
    public static SqlChars ToSqlChars(Char[] p);
    public static SqlChars ToSqlChars(Byte[] p);
    public static SqlChars ToSqlChars(Binary p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(sbyte p);
    public static SqlChars ToSqlChars(short p);
    public static SqlChars ToSqlChars(int p);
    public static SqlChars ToSqlChars(long p);
    public static SqlChars ToSqlChars(byte p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(ushort p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(UInt32 p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(ulong p);
    public static SqlChars ToSqlChars(float p);
    public static SqlChars ToSqlChars(double p);
    public static SqlChars ToSqlChars(bool p);
    public static SqlChars ToSqlChars(decimal p);
    public static SqlChars ToSqlChars(char p);
    public static SqlChars ToSqlChars(TimeSpan p);
    public static SqlChars ToSqlChars(DateTime p);
    public static SqlChars ToSqlChars(DateTimeOffset p);
    public static SqlChars ToSqlChars(Guid p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(Nullable`1<sbyte> p);
    public static SqlChars ToSqlChars(Nullable`1<short> p);
    public static SqlChars ToSqlChars(Nullable`1<int> p);
    public static SqlChars ToSqlChars(Nullable`1<long> p);
    public static SqlChars ToSqlChars(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static SqlChars ToSqlChars(Nullable`1<ulong> p);
    public static SqlChars ToSqlChars(Nullable`1<float> p);
    public static SqlChars ToSqlChars(Nullable`1<double> p);
    public static SqlChars ToSqlChars(Nullable`1<bool> p);
    public static SqlChars ToSqlChars(Nullable`1<decimal> p);
    public static SqlChars ToSqlChars(Nullable`1<char> p);
    public static SqlChars ToSqlChars(Nullable`1<TimeSpan> p);
    public static SqlChars ToSqlChars(Nullable`1<DateTime> p);
    public static SqlChars ToSqlChars(Nullable`1<DateTimeOffset> p);
    public static SqlChars ToSqlChars(Nullable`1<Guid> p);
    public static SqlChars ToSqlChars(SqlString p);
    public static SqlChars ToSqlChars(SqlByte p);
    public static SqlChars ToSqlChars(SqlInt16 p);
    public static SqlChars ToSqlChars(SqlInt32 p);
    public static SqlChars ToSqlChars(SqlInt64 p);
    public static SqlChars ToSqlChars(SqlSingle p);
    public static SqlChars ToSqlChars(SqlDouble p);
    public static SqlChars ToSqlChars(SqlDecimal p);
    public static SqlChars ToSqlChars(SqlMoney p);
    public static SqlChars ToSqlChars(SqlBoolean p);
    public static SqlChars ToSqlChars(SqlGuid p);
    public static SqlChars ToSqlChars(SqlDateTime p);
    public static SqlChars ToSqlChars(SqlBinary p);
    public static SqlChars ToSqlChars(Type p);
    public static SqlChars ToSqlChars(object p);
    public static Binary ToLinqBinary(string p);
    public static Binary ToLinqBinary(byte p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(sbyte p);
    public static Binary ToLinqBinary(decimal p);
    public static Binary ToLinqBinary(short p);
    public static Binary ToLinqBinary(int p);
    public static Binary ToLinqBinary(long p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(ushort p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(UInt32 p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(ulong p);
    public static Binary ToLinqBinary(float p);
    public static Binary ToLinqBinary(double p);
    public static Binary ToLinqBinary(bool p);
    public static Binary ToLinqBinary(char p);
    public static Binary ToLinqBinary(DateTime p);
    public static Binary ToLinqBinary(DateTimeOffset p);
    public static Binary ToLinqBinary(Byte[] p);
    public static Binary ToLinqBinary(TimeSpan p);
    public static Binary ToLinqBinary(Stream p);
    public static Binary ToLinqBinary(Char[] p);
    public static Binary ToLinqBinary(Guid p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(Nullable`1<sbyte> p);
    public static Binary ToLinqBinary(Nullable`1<short> p);
    public static Binary ToLinqBinary(Nullable`1<int> p);
    public static Binary ToLinqBinary(Nullable`1<long> p);
    public static Binary ToLinqBinary(Nullable`1<byte> p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(Nullable`1<ushort> p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(Nullable`1<UInt32> p);
    [CLSCompliantAttribute("False")]
public static Binary ToLinqBinary(Nullable`1<ulong> p);
    public static Binary ToLinqBinary(Nullable`1<float> p);
    public static Binary ToLinqBinary(Nullable`1<double> p);
    public static Binary ToLinqBinary(Nullable`1<bool> p);
    public static Binary ToLinqBinary(Nullable`1<decimal> p);
    public static Binary ToLinqBinary(Nullable`1<char> p);
    public static Binary ToLinqBinary(Nullable`1<DateTime> p);
    public static Binary ToLinqBinary(Nullable`1<DateTimeOffset> p);
    public static Binary ToLinqBinary(Nullable`1<TimeSpan> p);
    public static Binary ToLinqBinary(Nullable`1<Guid> p);
    public static Binary ToLinqBinary(SqlBinary p);
    public static Binary ToLinqBinary(SqlBytes p);
    public static Binary ToLinqBinary(SqlGuid p);
    public static Binary ToLinqBinary(SqlString p);
    public static Binary ToLinqBinary(SqlByte p);
    public static Binary ToLinqBinary(SqlInt16 p);
    public static Binary ToLinqBinary(SqlInt32 p);
    public static Binary ToLinqBinary(SqlInt64 p);
    public static Binary ToLinqBinary(SqlSingle p);
    public static Binary ToLinqBinary(SqlDouble p);
    public static Binary ToLinqBinary(SqlDecimal p);
    public static Binary ToLinqBinary(SqlMoney p);
    public static Binary ToLinqBinary(SqlBoolean p);
    public static Binary ToLinqBinary(object p);
    public static Char[] ToCharArray(string p);
    public static Char[] ToCharArray(SqlString p);
    public static Char[] ToCharArray(SqlChars p);
    public static Char[] ToCharArray(Byte[] p);
    public static Char[] ToCharArray(Binary p);
    public static Char[] ToCharArray(object p);
    public static XmlReader ToXmlReader(string p);
    public static XmlReader ToXmlReader(SqlXml p);
    public static XmlReader ToXmlReader(SqlString p);
    public static XmlReader ToXmlReader(SqlChars p);
    public static XmlReader ToXmlReader(SqlBinary p);
    public static XmlReader ToXmlReader(Stream p);
    public static XmlReader ToXmlReader(TextReader p);
    public static XmlReader ToXmlReader(XmlDocument p);
    public static XmlReader ToXmlReader(Char[] p);
    public static XmlReader ToXmlReader(Byte[] p);
    public static XmlReader ToXmlReader(Binary p);
    public static XmlReader ToXmlReader(object p);
    public static XmlDocument ToXmlDocument(string p);
    public static XmlDocument ToXmlDocument(SqlString p);
    public static XmlDocument ToXmlDocument(SqlXml p);
    public static XmlDocument ToXmlDocument(SqlChars p);
    public static XmlDocument ToXmlDocument(SqlBinary p);
    public static XmlDocument ToXmlDocument(Stream p);
    public static XmlDocument ToXmlDocument(TextReader p);
    public static XmlDocument ToXmlDocument(XmlReader p);
    public static XmlDocument ToXmlDocument(Char[] p);
    public static XmlDocument ToXmlDocument(Byte[] p);
    public static XmlDocument ToXmlDocument(Binary p);
    public static XmlDocument ToXmlDocument(object p);
    public static object ChangeTypeFromString(string str, Type type);
    private static Exception CreateInvalidCastException(Type originalType, Type conversionType);
}
public static class BLToolkit.Common.Convert`2 : object {
    public static ConvertMethod<T, P> From;
    private static Convert`2();
    public static T[] FromArray(P[] src);
    public static ConvertMethod<T, P> GetConverter();
    private static MethodInfo FindTypeCastOperator(Type t);
    private static P SameType(P p);
    private static T Assignable(P p);
    private static T Default(P p);
}
public static class BLToolkit.Common.ConvertTo`1 : object {
    public static T From(P p);
}
[UsedImplicitlyAttribute]
[TrimmableAttribute]
[ComVisibleAttribute("True")]
public abstract class BLToolkit.Common.EntityBase : object {
    private static Hashtable _hashDescriptors;
    private ICustomTypeDescriptor _typeDescriptor;
    private ICustomTypeDescriptor TypeDescriptor { get; }
    private static EntityBase();
    protected virtual ICustomTypeDescriptor CreateTypeDescriptor();
    private ICustomTypeDescriptor get_TypeDescriptor();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    public virtual void Validate();
    public virtual bool IsValid(string fieldName);
    public virtual String[] GetErrorMessages(string fieldName);
}
public abstract class BLToolkit.Common.EntityBase`1 : EntityBase {
    public static T CreateInstance();
    public virtual T Clone();
}
public interface BLToolkit.Common.IOperable`1 {
    public abstract virtual T Addition(T op1, T op2);
    public abstract virtual T Subtraction(T op1, T op2);
    public abstract virtual T Multiply(T op1, T op2);
    public abstract virtual T Division(T op1, T op2);
    public abstract virtual T Modulus(T op1, T op2);
    public abstract virtual T BitwiseAnd(T op1, T op2);
    public abstract virtual T BitwiseOr(T op1, T op2);
    public abstract virtual T ExclusiveOr(T op1, T op2);
    public abstract virtual T UnaryNegation(T op);
    public abstract virtual T OnesComplement(T op);
    public abstract virtual bool Equality(T op1, T op2);
    public abstract virtual bool Inequality(T op1, T op2);
    public abstract virtual bool GreaterThan(T op1, T op2);
    public abstract virtual bool GreaterThanOrEqual(T op1, T op2);
    public abstract virtual bool LessThan(T op1, T op2);
    public abstract virtual bool LessThanOrEqual(T op1, T op2);
}
[DebuggerStepThroughAttribute]
public class BLToolkit.Common.NameOrIndexParameter : ValueType {
    private string _name;
    private int _index;
    [CompilerGeneratedAttribute]
private static Func`2<string, NameOrIndexParameter> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<int, NameOrIndexParameter> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool ByName { get; }
    public string Name { get; }
    public int Index { get; }
    public NameOrIndexParameter(string name);
    public NameOrIndexParameter(int index);
    public static NameOrIndexParameter op_Implicit(string name);
    public static NameOrIndexParameter op_Implicit(int index);
    public bool get_ByName();
    public string get_Name();
    public int get_Index();
    public static NameOrIndexParameter[] FromStringArray(String[] names);
    public static NameOrIndexParameter[] FromIndexArray(Int32[] indices);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static NameOrIndexParameter <FromStringArray>b__0(string name);
    [CompilerGeneratedAttribute]
private static NameOrIndexParameter <FromIndexArray>b__2(int index);
}
internal static class BLToolkit.Common.NullableConvert`2 : object {
    public static Nullable`1<T> FromNullable(Nullable`1<P> p);
    public static Nullable`1<T> From(P p);
}
public static class BLToolkit.Common.Operator : object {
    public static T Addition(T a, T b);
    public static T Subtraction(T a, T b);
    public static T Multiply(T a, T b);
    public static T Division(T a, T b);
    public static T Modulus(T a, T b);
    public static T BitwiseAnd(T a, T b);
    public static T BitwiseOr(T a, T b);
    public static T ExclusiveOr(T a, T b);
    public static T UnaryNegation(T a);
    public static T OnesComplement(T a);
    public static bool Equality(T a, T b);
    public static bool Inequality(T a, T b);
    public static bool GreaterThan(T a, T b);
    public static bool GreaterThanOrEqual(T a, T b);
    public static bool LessThan(T a, T b);
    public static bool LessThanOrEqual(T a, T b);
}
public static class BLToolkit.Common.Operator`1 : object {
    public static IOperable`1<T> Op;
    private static Operator`1();
    private static IOperable`1<T> GetOperable();
    public static T Addition(T op1, T op2);
    public static T Subtraction(T op1, T op2);
    public static T Multiply(T op1, T op2);
    public static T Division(T op1, T op2);
    public static T Modulus(T op1, T op2);
    public static T BitwiseAnd(T op1, T op2);
    public static T BitwiseOr(T op1, T op2);
    public static T ExclusiveOr(T op1, T op2);
    public static T UnaryNegation(T op);
    public static T OnesComplement(T op);
    public static bool Equality(T op1, T op2);
    public static bool Inequality(T op1, T op2);
    public static bool GreaterThan(T op1, T op2);
    public static bool GreaterThanOrEqual(T op1, T op2);
    public static bool LessThan(T op1, T op2);
    public static bool LessThanOrEqual(T op1, T op2);
}
[ObsoleteAttribute("Use System.Tuple")]
public class BLToolkit.Common.Tuple`2 : ValueType {
    public T1 Field1;
    public T2 Field2;
    public Tuple`2(T1 field1, T2 field2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ObsoleteAttribute("Use System.Tuple")]
public class BLToolkit.Common.Tuple`3 : ValueType {
    public T1 Field1;
    public T2 Field2;
    public T3 Field3;
    public Tuple`3(T1 field1, T2 field2, T3 field3);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ObsoleteAttribute("Use System.Tuple")]
public class BLToolkit.Common.Tuple`4 : ValueType {
    public T1 Field1;
    public T2 Field2;
    public T3 Field3;
    public T4 Field4;
    public Tuple`4(T1 field1, T2 field2, T3 field3, T4 field4);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.ComponentModel.BindingListImpl : object {
    private IList _list;
    private Type _itemType;
    private int _newItemIndex;
    private INotifyObjectEdit _newObject;
    private bool _notifyChanges;
    private ListChangedEventHandler ListChanged;
    private bool _isSorted;
    private PropertyDescriptor _sortProperty;
    private ListSortDirection _sortDirection;
    private ListSortDescriptionCollection _sortDescriptions;
    private Hashtable _sortSubstitutions;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool NotifyChanges { get; public set; }
    public bool SupportsChangeNotification { get; }
    public bool SupportsSorting { get; }
    public bool IsSorted { get; }
    public PropertyDescriptor SortProperty { get; }
    public ListSortDirection SortDirection { get; }
    public bool SupportsSearching { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool SupportsAdvancedSorting { get; }
    public ListSortDescriptionCollection SortDescriptions { get; }
    public bool SupportsFiltering { get; }
    public string Filter { get; public set; }
    public BindingListImpl(IList list, Type itemType);
    private void ApplySort(IComparer comparer);
    public sealed virtual object AddNew();
    private void NewObject_ObjectEdit(object sender, ObjectEditEventArgs args);
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowRemove();
    public bool get_NotifyChanges();
    public void set_NotifyChanges(bool value);
    public sealed virtual bool get_SupportsChangeNotification();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private void FireListChangedEvent(object sender, ListChangedEventArgs e);
    protected virtual void OnListChanged(EditableListChangedEventArgs e);
    protected void OnListChanged(ListChangedType listChangedType, int index);
    private void ItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual bool get_SupportsSorting();
    public sealed virtual bool get_IsSorted();
    public sealed virtual PropertyDescriptor get_SortProperty();
    public sealed virtual ListSortDirection get_SortDirection();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    public sealed virtual void RemoveSort();
    public sealed virtual bool get_SupportsSearching();
    public sealed virtual int Find(PropertyDescriptor property, object key);
    public sealed virtual void AddIndex(PropertyDescriptor property);
    public sealed virtual void RemoveIndex(PropertyDescriptor property);
    public sealed virtual void CancelNew(int itemIndex);
    public sealed virtual void EndNew(int itemIndex);
    public void EndNew();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public IComparer GetSortComparer();
    private IComparer GetSortComparer(PropertyDescriptor sortProperty, ListSortDirection sortDirection);
    private IComparer GetSortComparer(ListSortDescriptionCollection sortDescriptions);
    public sealed virtual bool get_SupportsAdvancedSorting();
    public sealed virtual void ApplySort(ListSortDescriptionCollection sorts);
    public sealed virtual ListSortDescriptionCollection get_SortDescriptions();
    public sealed virtual bool get_SupportsFiltering();
    public sealed virtual string get_Filter();
    public sealed virtual void set_Filter(string value);
    public sealed virtual void RemoveFilter();
    public void CreateSortSubstitution(string originalProperty, string substituteProperty);
    public void RemoveSortSubstitution(string originalProperty);
    public int GetItemSortedPosition(int index, object sender);
    public int GetSortedInsertIndex(object value);
    public void Move(int newIndex, int oldIndex);
    public void AddRange(ICollection c);
    public void InsertRange(int index, ICollection c);
    public void RemoveRange(int index, int count);
    public void SetRange(int index, ICollection c);
    private void AddInternal(object value);
    private void RemoveInternal(object value);
    private void AddInternal(IEnumerable e);
    private void RemoveInternal(IEnumerable e);
    private void OnAddItem(object item, int index);
    private void OnRemoveItem(object item, int index);
    private void OnMoveItem(object item, int oldIndex, int newIndex);
    private void OnChangeItem(object oldValue, object newValue, int index);
    private void OnReset();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void FireCollectionChangedEvent(object sender, NotifyCollectionChangedEventArgs ea);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs ea);
}
public class BLToolkit.ComponentModel.CustomTypeDescriptorImpl : object {
    private ITypeDescriptionProvider _typeDescriptionProvider;
    private AttributeCollection _attributes;
    private TypeConverter _converter;
    private bool _readDefaultEvent;
    private EventDescriptor _defaultEvent;
    private bool _readDefaultProperty;
    private PropertyDescriptor _defaultProperty;
    private Hashtable _editors;
    private EventDescriptorCollection _events;
    private PropertyDescriptorCollection _properties;
    private ICustomTypeDescriptor _td { get; }
    public CustomTypeDescriptorImpl(Type type);
    public CustomTypeDescriptorImpl(ITypeDescriptionProvider typeDescriptionProvider);
    protected virtual ITypeDescriptionProvider CreateTypeDescriptionProvider(Type type);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    private Type GetTypeByName(string typeName);
    private object CreateInstance(Type type);
    private ICustomTypeDescriptor get__td();
}
public class BLToolkit.ComponentModel.Design.GetTypeDialog : Form {
    private IServiceProvider _serviceProvider;
    private Type _baseType;
    private Predicate`1<Type> _filter;
    private Type _resultType;
    private IContainer components;
    private Button _okButton;
    private Button _cancelButton;
    private ImageList imageList;
    private TreeView _treeView;
    private CheckBox _systemCheckBox;
    [CompilerGeneratedAttribute]
private static Comparison`1<Type> CS$<>9__CachedAnonymousMethodDelegate2;
    public Type ResultType { get; }
    public GetTypeDialog(IServiceProvider serviceProvider, Type baseType, Predicate`1<Type> filter);
    public Type get_ResultType();
    private void LoadTypes();
    private void systemCheckBox_CheckedChanged(object sender, EventArgs e);
    private void treeView_AfterSelect(object sender, TreeViewEventArgs e);
    private void treeView_DoubleClick(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private static int <LoadTypes>b__0(Type a, Type b);
}
public class BLToolkit.ComponentModel.Design.ObjectViewTypeEditor : TypeEditor {
    protected virtual bool FilterTypeList(Type type);
}
public class BLToolkit.ComponentModel.Design.ObjectViewTypeNameEditor : ObjectViewTypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
public class BLToolkit.ComponentModel.Design.TypeEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    protected virtual bool FilterTypeList(Type type);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool get_IsDropDownResizable();
}
public class BLToolkit.ComponentModel.Design.TypeNameEditor : TypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class BLToolkit.ComponentModel.Design.TypePicker : UserControl {
    private ITypeResolutionService _typeResolutionService;
    private IWindowsFormsEditorService _windowsFormsEditorService;
    private IServiceProvider _serviceProvider;
    private Type _resultType;
    private Predicate`1<Type> _filter;
    private static Size _size;
    private IContainer components;
    private TreeView treeView;
    private NewLink addNewLinkLabel;
    private Panel addNewPanel;
    private Panel addNewSplitPanel;
    private T GetService();
    public Type PickType(IServiceProvider serviceProvider, Type type, Predicate`1<Type> filter);
    private void InitUI();
    private TypeNode GetTypeNode(DataSourceDescriptor ds);
    private void AddGroup(DataSourceGroup group);
    private void AddTypes();
    private void treeView_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e);
    private void addNewLinkLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    private void TypePicker_Resize(object sender, EventArgs e);
    private void SaveType(Type type);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public interface BLToolkit.ComponentModel.INotifyObjectEdit {
    public abstract virtual void add_ObjectEdit(ObjectEditEventHandler value);
    public abstract virtual void remove_ObjectEdit(ObjectEditEventHandler value);
}
public interface BLToolkit.ComponentModel.IObjectView {
    public object Object { get; public set; }
    public abstract virtual object get_Object();
    public abstract virtual void set_Object(object value);
}
public interface BLToolkit.ComponentModel.ISortable {
    public abstract virtual void Sort(int index, int count, IComparer comparer);
}
public interface BLToolkit.ComponentModel.ITypeDescriptionProvider {
    public Type OriginalType { get; }
    public string ClassName { get; }
    public string ComponentName { get; }
    public abstract virtual Type get_OriginalType();
    public abstract virtual string get_ClassName();
    public abstract virtual string get_ComponentName();
    public abstract virtual EventDescriptor GetEvent(string name);
    public abstract virtual PropertyDescriptor GetProperty(string name);
    public abstract virtual AttributeCollection GetAttributes();
    public abstract virtual EventDescriptorCollection GetEvents();
    public abstract virtual PropertyDescriptorCollection GetProperties();
}
public class BLToolkit.ComponentModel.MemberPropertyDescriptor : PropertyDescriptor {
    private Type _componentType;
    private MemberAccessor _memberAccessor;
    private AttributeCollection _attributes;
    public Type ComponentType { get; }
    public Type PropertyType { get; }
    public MemberAccessor MemberAccessor { get; }
    public bool IsReadOnly { get; }
    public AttributeCollection Attributes { get; }
    public MemberPropertyDescriptor(Type componentType, string memberName);
    public virtual Type get_ComponentType();
    public virtual Type get_PropertyType();
    public MemberAccessor get_MemberAccessor();
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool get_IsReadOnly();
    public virtual bool ShouldSerializeValue(object component);
    public virtual AttributeCollection get_Attributes();
}
[ToolboxBitmapAttribute("BLToolkit.ComponentModel.ObjectBinder")]
[ToolboxItemAttribute("True")]
[ComplexBindingPropertiesAttribute("DataSource")]
[DefaultPropertyAttribute("ItemType")]
public class BLToolkit.ComponentModel.ObjectBinder : Component {
    private static EditableArrayList _empty;
    private object _dataSource;
    private Type _itemType;
    private Type _objectViewType;
    private object _object;
    private bool _isListCreatedInternally;
    private EditableArrayList _list;
    private bool _disposeList;
    private bool _disposeCreatedList;
    private bool _allowNew;
    private bool _allowEdit;
    private bool _allowRemove;
    private IsNullHandler _isNull;
    private static Hashtable _descriptors;
    private static object ListChangedEvent;
    [RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("BLToolkit.ComponentModel.Design.TypeEditor", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[CategoryAttribute("Data")]
[TypeConverterAttribute("BLToolkit.ComponentModel.TypeTypeConverter")]
public Type ItemType { get; public set; }
    [EditorAttribute("BLToolkit.ComponentModel.Design.ObjectViewTypeEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[CategoryAttribute("Data")]
[TypeConverterAttribute("BLToolkit.ComponentModel.TypeTypeConverter")]
public Type ObjectViewType { get; public set; }
    [BrowsableAttribute("False")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public object Object { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[RefreshPropertiesAttribute("2")]
public IList List { get; public set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Determines whether ObjectBinder will invoke underlying List's dispose when being itself disposed.")]
[DefaultValueAttribute("False")]
public bool DisposeList { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Determines whether ObjectBinder will invoke underlying internally created List's dispose when being itself disposed")]
public bool DisposeCreatedList { get; public set; }
    [DescriptionAttribute("Determines whether new items can be added to the list.")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool AllowNew { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Determines whether items in the list can be edited.")]
public bool AllowEdit { get; public set; }
    [DescriptionAttribute("Determines whether items can be removed from the list.")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool AllowRemove { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public IsNullHandler IsNull { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingListView.SupportsAdvancedSorting { get; }
    private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions { get; }
    private bool System.ComponentModel.IBindingListView.SupportsFiltering { get; }
    private string System.ComponentModel.IBindingListView.Filter { get; private set; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ObjectBinder(IContainer container);
    private static ObjectBinder();
    public object get_DataSource();
    public void set_DataSource(object value);
    public Type get_ItemType();
    public void set_ItemType(Type value);
    public Type get_ObjectViewType();
    public void set_ObjectViewType(Type value);
    public object get_Object();
    public void set_Object(object value);
    public IList get_List();
    public void set_List(IList value);
    public bool get_DisposeList();
    public void set_DisposeList(bool value);
    public bool get_DisposeCreatedList();
    public void set_DisposeCreatedList(bool value);
    public bool get_AllowNew();
    public void set_AllowNew(bool value);
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    public bool get_AllowRemove();
    public void set_AllowRemove(bool value);
    public IsNullHandler get_IsNull();
    public void set_IsNull(IsNullHandler value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected void OnListChanged(ListChangedType listChangedType, int newIndex);
    private void ListChangedHandler(object sender, ListChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting();
    private sealed virtual override ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions();
    private sealed virtual override void System.ComponentModel.IBindingListView.ApplySort(ListSortDescriptionCollection sorts);
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsFiltering();
    private sealed virtual override string System.ComponentModel.IBindingListView.get_Filter();
    private sealed virtual override void System.ComponentModel.IBindingListView.set_Filter(string value);
    private sealed virtual override void System.ComponentModel.IBindingListView.RemoveFilter();
    private sealed virtual override void System.ComponentModel.ICancelAddNew.CancelNew(int itemIndex);
    private sealed virtual override void System.ComponentModel.ICancelAddNew.EndNew(int itemIndex);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class BLToolkit.ComponentModel.ObjectEditEventArgs : object {
    private ObjectEditType _editType;
    public ObjectEditType EditType { get; public set; }
    public ObjectEditEventArgs(ObjectEditType editType);
    public ObjectEditType get_EditType();
    public void set_EditType(ObjectEditType value);
}
public class BLToolkit.ComponentModel.ObjectEditEventHandler : MulticastDelegate {
    public ObjectEditEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectEditEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectEditEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum BLToolkit.ComponentModel.ObjectEditType : Enum {
    public int value__;
    public static ObjectEditType Begin;
    public static ObjectEditType End;
    public static ObjectEditType Cancel;
}
public class BLToolkit.ComponentModel.ObjectHolder : object {
    private PropertyDescriptorCollection _originalProperties;
    private PropertyDescriptorCollection _customProperties;
    private object _object;
    private ICustomTypeDescriptor _customTypeDescriptor;
    public object Object { get; }
    private ICustomTypeDescriptor CustomTypeDescriptor { get; }
    public ObjectHolder(object obj, ObjectBinder objectBinder);
    public object get_Object();
    private ICustomTypeDescriptor get_CustomTypeDescriptor();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[DebuggerStepThroughAttribute]
public abstract class BLToolkit.ComponentModel.PropertyDescriptorWrapper : PropertyDescriptor {
    private PropertyDescriptor _pd;
    public AttributeCollection Attributes { get; }
    public string Category { get; }
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public string Description { get; }
    public bool DesignTimeOnly { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsLocalizable { get; }
    public bool IsReadOnly { get; }
    public string Name { get; }
    public Type PropertyType { get; }
    protected PropertyDescriptorWrapper(PropertyDescriptor propertyDescriptor);
    public virtual AttributeCollection get_Attributes();
    public virtual string get_Category();
    public virtual Type get_ComponentType();
    public virtual TypeConverter get_Converter();
    public virtual string get_Description();
    public virtual bool get_DesignTimeOnly();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsLocalizable();
    public virtual bool get_IsReadOnly();
    public virtual string get_Name();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object obj);
    public virtual object GetEditor(Type editorBaseType);
    public virtual int GetHashCode();
    public virtual object GetValue(object component);
    public virtual string ToString();
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void AddValueChanged(object component, EventHandler handler);
    public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
}
public abstract class BLToolkit.ComponentModel.TypeDescriptorExtender : object {
    private object _baseObject;
    private static Hashtable _hashDescriptors;
    private ICustomTypeDescriptor _typeDescriptor;
    private ICustomTypeDescriptor _baseTypeDescriptor;
    private ITypeDescriptionProvider _provider;
    public object BaseObject { get; }
    private ICustomTypeDescriptor TypeDescriptor { get; }
    private ICustomTypeDescriptor BaseTypeDescriptor { get; }
    private ITypeDescriptionProvider Provider { get; }
    private Type BLToolkit.ComponentModel.ITypeDescriptionProvider.OriginalType { get; }
    private string BLToolkit.ComponentModel.ITypeDescriptionProvider.ClassName { get; }
    private string BLToolkit.ComponentModel.ITypeDescriptionProvider.ComponentName { get; }
    protected TypeDescriptorExtender(Type baseType);
    protected TypeDescriptorExtender(object baseObject);
    private static TypeDescriptorExtender();
    public object get_BaseObject();
    private ICustomTypeDescriptor get_TypeDescriptor();
    private ICustomTypeDescriptor CreateTypeDescriptor();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    private ICustomTypeDescriptor get_BaseTypeDescriptor();
    private ITypeDescriptionProvider get_Provider();
    private sealed virtual override Type BLToolkit.ComponentModel.ITypeDescriptionProvider.get_OriginalType();
    private sealed virtual override string BLToolkit.ComponentModel.ITypeDescriptionProvider.get_ClassName();
    private sealed virtual override string BLToolkit.ComponentModel.ITypeDescriptionProvider.get_ComponentName();
    private sealed virtual override EventDescriptor BLToolkit.ComponentModel.ITypeDescriptionProvider.GetEvent(string name);
    private sealed virtual override PropertyDescriptor BLToolkit.ComponentModel.ITypeDescriptionProvider.GetProperty(string name);
    private sealed virtual override AttributeCollection BLToolkit.ComponentModel.ITypeDescriptionProvider.GetAttributes();
    private sealed virtual override EventDescriptorCollection BLToolkit.ComponentModel.ITypeDescriptionProvider.GetEvents();
    private sealed virtual override PropertyDescriptorCollection BLToolkit.ComponentModel.ITypeDescriptionProvider.GetProperties();
}
public abstract class BLToolkit.ComponentModel.TypeDescriptorExtender`1 : TypeDescriptorExtender {
    public T BaseObject { get; }
    protected TypeDescriptorExtender`1(T t);
    public T get_BaseObject();
}
public class BLToolkit.ComponentModel.TypedListImpl : object {
    private Type _itemType;
    private TypeAccessor _typeAccessor;
    private NullValueProvider _getNullValue;
    private PropertyDescriptorCollection _pdc;
    public NullValueProvider GetNullValue { get; public set; }
    public TypedListImpl(Type itemType);
    public NullValueProvider get_GetNullValue();
    public void set_GetNullValue(NullValueProvider value);
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors, Type objectViewType, IsNullHandler isNull, bool cache);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
}
public class BLToolkit.ComponentModel.TypeTypeConverter : TypeConverter {
    private static string NoType;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class BLToolkit.Configuration.BLToolkitSection : ConfigurationSection {
    private static string SectionName;
    private static ConfigurationPropertyCollection _properties;
    private static ConfigurationProperty _propDataProviders;
    private static ConfigurationProperty _propDefaultConfiguration;
    private static ConfigurationProperty _propTypeFactory;
    public static BLToolkitSection Instance { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public DataProviderElementCollection DataProviders { get; }
    public string DefaultConfiguration { get; }
    public TypeFactoryElement TypeFactory { get; }
    private static BLToolkitSection();
    public static BLToolkitSection get_Instance();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public DataProviderElementCollection get_DataProviders();
    public string get_DefaultConfiguration();
    public TypeFactoryElement get_TypeFactory();
}
internal class BLToolkit.Configuration.DataProviderElement : ElementBase {
    protected static ConfigurationProperty _propTypeName;
    protected static ConfigurationProperty _propName;
    protected static ConfigurationProperty _propDefault;
    public string TypeName { get; }
    public string Name { get; }
    public bool Default { get; }
    private static DataProviderElement();
    public string get_TypeName();
    public string get_Name();
    public bool get_Default();
}
[ConfigurationCollectionAttribute("BLToolkit.Configuration.DataProviderElement")]
internal class BLToolkit.Configuration.DataProviderElementCollection : ElementCollectionBase`1<DataProviderElement> {
    protected virtual object GetElementKey(DataProviderElement element);
}
internal abstract class BLToolkit.Configuration.ElementBase : ConfigurationElement {
    protected ConfigurationPropertyCollection _properties;
    private NameValueCollection _attributes;
    protected ConfigurationPropertyCollection Properties { get; }
    public NameValueCollection Attributes { get; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    public NameValueCollection get_Attributes();
}
[DefaultMemberAttribute("Item")]
internal abstract class BLToolkit.Configuration.ElementCollectionBase`1 : ConfigurationElementCollection {
    public T Item { get; }
    public T Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected abstract virtual object GetElementKey(T element);
    protected sealed virtual object GetElementKey(ConfigurationElement element);
    public T get_Item(string name);
    public T get_Item(int index);
}
internal class BLToolkit.Configuration.TypeFactoryElement : ElementBase {
    protected static ConfigurationProperty _propSaveTypes;
    protected static ConfigurationProperty _propSealTypes;
    protected static ConfigurationProperty _propLoadTypes;
    protected static ConfigurationProperty _propAssemblyPath;
    protected static ConfigurationProperty _propVersion;
    protected static ConfigurationProperty _propKeyFile;
    public bool SaveTypes { get; }
    public bool SealTypes { get; }
    public bool LoadTypes { get; }
    public string AssemblyPath { get; }
    public Version Version { get; }
    public string KeyFile { get; }
    private static TypeFactoryElement();
    public bool get_SaveTypes();
    public bool get_SealTypes();
    public bool get_LoadTypes();
    public string get_AssemblyPath();
    public Version get_Version();
    public string get_KeyFile();
}
public class BLToolkit.Data.DataException : DataException {
    private DbManager _dbManager;
    public Nullable`1<int> Number { get; }
    public DataException(string message);
    public DataException(string message, Exception innerException);
    public DataException(Exception innerException);
    protected DataException(SerializationInfo info, StreamingContext context);
    internal DataException(DbManager dbManager, Exception innerException);
    private static string GetMessage(DbManager dbManager, Exception innerException);
    public Nullable`1<int> get_Number();
}
public class BLToolkit.Data.DataProvider.AccessDataProvider : OleDbDataProvider {
    public static string NameString;
    private static Regex _paramsExp;
    public string Name { get; }
    public int MaxBatchSize { get; }
    public virtual bool DeriveParameters(IDbCommand command);
    private static OleDbType GetOleDbType(string jetType);
    public virtual void AttachParameter(IDbCommand command, IDbDataParameter parameter);
    public virtual string get_Name();
    public virtual int get_MaxBatchSize();
    public virtual ISqlProvider CreateSqlProvider();
    public virtual object Convert(object value, ConvertType convertType);
    public virtual IDataReader GetDataReader(MappingSchema schema, IDataReader dataReader);
}
public enum BLToolkit.Data.DataProvider.ConvertType : Enum {
    public int value__;
    public static ConvertType NameToQueryParameter;
    public static ConvertType NameToCommandParameter;
    [ObsoleteAttribute("Use NameToCommandParameter or NameToSprocParameter instead.")]
public static ConvertType NameToParameter;
    public static ConvertType NameToSprocParameter;
    public static ConvertType NameToQueryField;
    public static ConvertType NameToQueryFieldAlias;
    public static ConvertType NameToDatabase;
    public static ConvertType NameToOwner;
    public static ConvertType NameToQueryTable;
    public static ConvertType NameToQueryTableAlias;
    public static ConvertType SprocParameterToName;
    [ObsoleteAttribute("Use SprocParameterToName instead.")]
public static ConvertType ParameterToName;
    public static ConvertType ExceptionToErrorNumber;
    public static ConvertType ExceptionToErrorMessage;
}
public abstract class BLToolkit.Data.DataProvider.DataProviderBase : object {
    private string _uniqueName;
    private ISqlProvider _sqlProvider;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    public Type ConnectionType { get; }
    public string Name { get; }
    public string UniqueName { get; internal set; }
    public MappingSchema MappingSchema { get; public set; }
    protected ISqlProvider SqlProvider { get; }
    public string ProviderName { get; }
    public int MaxParameters { get; }
    public int MaxBatchSize { get; }
    public string EndOfSql { get; }
    public abstract virtual Type get_ConnectionType();
    public abstract virtual string get_Name();
    public string get_UniqueName();
    internal void set_UniqueName(string value);
    public abstract virtual IDbConnection CreateConnectionObject();
    public virtual IDbConnection CloneConnection(IDbConnection connection);
    public abstract virtual DbDataAdapter CreateDataAdapterObject();
    public abstract virtual bool DeriveParameters(IDbCommand command);
    public virtual IDbCommand CreateCommandObject(IDbConnection connection);
    public virtual IDbDataParameter CreateParameterObject(IDbCommand command);
    public virtual IDbDataParameter GetParameter(IDbCommand command, NameOrIndexParameter nameOrIndex);
    public virtual void AttachParameter(IDbCommand command, IDbDataParameter parameter);
    public virtual void SetUserDefinedType(IDbDataParameter parameter, string typeName);
    public virtual bool IsValueParameter(IDbDataParameter parameter);
    public virtual IDbDataParameter CloneParameter(IDbDataParameter parameter);
    public virtual bool InitParameter(IDbDataParameter parameter);
    public virtual object Convert(object value, ConvertType convertType);
    public virtual void InitDbManager(DbManager dbManager);
    public virtual void Configure(NameValueCollection attributes);
    [CompilerGeneratedAttribute]
public virtual MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public virtual void set_MappingSchema(MappingSchema value);
    public virtual void PrepareCommand(CommandType& commandType, String& commandText, IDbDataParameter[]& commandParameters);
    public virtual void SetParameterValue(IDbDataParameter parameter, object value);
    public abstract virtual ISqlProvider CreateSqlProvider();
    protected ISqlProvider get_SqlProvider();
    public virtual IDataReader GetDataReader(MappingSchema schema, IDataReader dataReader);
    public virtual bool ParameterNamesEqual(string paramName1, string paramName2);
    public virtual string get_ProviderName();
    public virtual int get_MaxParameters();
    public virtual int get_MaxBatchSize();
    public virtual string get_EndOfSql();
    public virtual int InsertBatch(DbManager db, string insertText, IEnumerable`1<T> collection, MemberMapper[] members, int maxBatchSize, ParameterProvider`1<T> getParameters);
}
public class BLToolkit.Data.DataProvider.FirebirdMappingSchema : MappingSchema {
    public Byte[] ConvertToByteArray(string value);
    public virtual Byte[] ConvertToByteArray(object value);
    public bool ConvertToBoolean(string value);
    public virtual bool ConvertToBoolean(object value);
    public Stream ConvertToStream(string value);
    public virtual Stream ConvertToStream(object value);
    public SqlBinary ConvertToSqlBinary(string value);
    public virtual SqlBinary ConvertToSqlBinary(object value);
    public SqlBytes ConvertToSqlBytes(string value);
    public virtual SqlBytes ConvertToSqlBytes(object value);
    public virtual SqlGuid ConvertToSqlGuid(object value);
    public virtual Nullable`1<bool> ConvertToNullableBoolean(object value);
}
public class BLToolkit.Data.DataProvider.OdbcDataProvider : DataProviderBase {
    public static string NameString;
    public Type ConnectionType { get; }
    public string Name { get; }
    public virtual IDbConnection CreateConnectionObject();
    public virtual DbDataAdapter CreateDataAdapterObject();
    public virtual bool DeriveParameters(IDbCommand command);
    public virtual object Convert(object value, ConvertType convertType);
    public virtual ISqlProvider CreateSqlProvider();
    public virtual Type get_ConnectionType();
    public virtual string get_Name();
}
public class BLToolkit.Data.DataProvider.OleDbDataProvider : DataProviderBase {
    public static string NameString;
    public Type ConnectionType { get; }
    public string Name { get; }
    public virtual IDbConnection CreateConnectionObject();
    public virtual DbDataAdapter CreateDataAdapterObject();
    public virtual bool DeriveParameters(IDbCommand command);
    public virtual object Convert(object value, ConvertType convertType);
    public virtual ISqlProvider CreateSqlProvider();
    public virtual Type get_ConnectionType();
    public virtual string get_Name();
}
public class BLToolkit.Data.DataProvider.OracleDataProvider : DataProviderBase {
    public static string NameString;
    private string _parameterPrefix;
    public string ParameterPrefix { get; public set; }
    public Type ConnectionType { get; }
    public string Name { get; }
    public string get_ParameterPrefix();
    public void set_ParameterPrefix(string value);
    public virtual IDbConnection CreateConnectionObject();
    public virtual DbDataAdapter CreateDataAdapterObject();
    public virtual bool DeriveParameters(IDbCommand command);
    public virtual object Convert(object value, ConvertType convertType);
    public virtual Type get_ConnectionType();
    public virtual string get_Name();
    public virtual ISqlProvider CreateSqlProvider();
}
public static class BLToolkit.Data.DataProvider.ProviderName : object {
    public static string Access;
    public static string DB2;
    public static string Firebird;
    public static string Informix;
    public static string MsSql;
    public static string MsSql2008;
    public static string MySql;
    public static string Odbc;
    public static string OleDb;
    public static string Oracle;
    public static string PostgreSQL;
    public static string SqlCe;
    public static string SQLite;
    public static string Sybase;
}
public class BLToolkit.Data.DataProvider.Sql2008DataProvider : SqlDataProviderBase {
    public string Name { get; }
    public virtual string get_Name();
    public virtual ISqlProvider CreateSqlProvider();
}
public class BLToolkit.Data.DataProvider.SqlDataProvider : SqlDataProviderBase {
}
public abstract class BLToolkit.Data.DataProvider.SqlDataProviderBase : DataProviderBase {
    public static string NameString;
    public Type ConnectionType { get; }
    public string Name { get; }
    public int MaxParameters { get; }
    public int MaxBatchSize { get; }
    public virtual IDbConnection CreateConnectionObject();
    public virtual DbDataAdapter CreateDataAdapterObject();
    public virtual bool DeriveParameters(IDbCommand command);
    public virtual void PrepareCommand(CommandType& commandType, String& commandText, IDbDataParameter[]& commandParameters);
    public virtual void SetUserDefinedType(IDbDataParameter parameter, string typeName);
    public virtual object Convert(object value, ConvertType convertType);
    public virtual Type get_ConnectionType();
    public virtual string get_Name();
    public virtual ISqlProvider CreateSqlProvider();
    public virtual int get_MaxParameters();
    public virtual int get_MaxBatchSize();
    public virtual IDataReader GetDataReader(MappingSchema schema, IDataReader dataReader);
    public virtual int InsertBatch(DbManager db, string insertText, IEnumerable`1<T> collection, MemberMapper[] members, int maxBatchSize, ParameterProvider`1<T> getParameters);
}
[DesignerCategoryAttribute("Code")]
public class BLToolkit.Data.DbManager : Component {
    public static string ProviderNameDivider;
    public static string AnyProvider;
    public string LastQuery;
    private MappingSchema _mappingSchema;
    private DataProviderBase _dataProvider;
    private static TraceSwitch _traceSwitch;
    public static Action`2<string, string> WriteTraceLine;
    private bool _canRaiseEvents;
    private bool _closeConnection;
    private IDbConnection _connection;
    private bool _closeTransaction;
    private IDbTransaction _transaction;
    private IDbCommand _selectCommand;
    private IDbCommand _insertCommand;
    private IDbCommand _updateCommand;
    private IDbCommand _deleteCommand;
    private EventHandler OnClosing;
    private EventHandler OnClosed;
    private static object _eventBeforeOperation;
    private static object _eventAfterOperation;
    private static object _eventOperationException;
    private static object _eventInitCommand;
    private static Dictionary`2<string, IDbDataParameter[]> _paramCache;
    private static object _paramCacheLock;
    private bool _executed;
    private bool _prepared;
    private IDbDataParameter[] _selectCommandParameters;
    private IDbDataParameter[] _insertCommandParameters;
    private IDbDataParameter[] _updateCommandParameters;
    private IDbDataParameter[] _deleteCommandParameters;
    private string _configurationString;
    private static string _firstConfiguration;
    private static DataProviderBase _firstProvider;
    private static Hashtable _configurationList;
    private static Hashtable _anyProviderConfigurationList;
    private static Dictionary`2<string, string> _connectionStringList;
    private static Dictionary`2<string, DataProviderBase> _dataProviderNameList;
    private static Dictionary`2<Type, DataProviderBase> _dataProviderTypeList;
    private static object _dataProviderListLock;
    private static string _defaultDataProviderName;
    private static string _defaultConfiguration;
    [CompilerGeneratedAttribute]
private static Action`2<string, string> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate2a;
    public MappingSchema MappingSchema { get; public set; }
    public DataProviderBase DataProvider { get; protected set; }
    public static TraceSwitch TraceSwitch { get; public set; }
    public bool CanRaiseEvents { get; public set; }
    public IDbConnection Connection { get; public set; }
    public IDbTransaction Transaction { get; }
    public IDbCommand Command { get; }
    public IDbCommand SelectCommand { get; }
    public IDbCommand InsertCommand { get; }
    public IDbCommand UpdateCommand { get; }
    public IDbCommand DeleteCommand { get; }
    private string BLToolkit.Data.Linq.IDataContext.ContextID { get; }
    private Func`1<ISqlProvider> BLToolkit.Data.Linq.IDataContext.CreateSqlProvider { get; }
    public string ConfigurationString { get; }
    public static string DefaultConfiguration { get; public set; }
    public DbManager(DataProviderBase dataProvider, string connectionString);
    public DbManager(DataProviderBase dataProvider, IDbConnection connection);
    public DbManager(DataProviderBase dataProvider, IDbTransaction transaction);
    private DbManager(int n);
    [DebuggerStepThroughAttribute]
public DbManager(string configurationString);
    [DebuggerStepThroughAttribute]
public DbManager(string providerName, string configuration);
    [DebuggerStepThroughAttribute]
public DbManager(IDbConnection connection);
    [DebuggerStepThroughAttribute]
public DbManager(IDbTransaction transaction);
    private static DbManager();
    public DbManager Clone();
    [DebuggerStepThroughAttribute]
public sealed virtual MappingSchema get_MappingSchema();
    public void set_MappingSchema(MappingSchema value);
    [DebuggerStepThroughAttribute]
public DataProviderBase get_DataProvider();
    protected void set_DataProvider(DataProviderBase value);
    public static TraceSwitch get_TraceSwitch();
    public static void set_TraceSwitch(TraceSwitch value);
    public static void TurnTraceSwitchOn();
    public bool get_CanRaiseEvents();
    public void set_CanRaiseEvents(bool value);
    [DebuggerStepThroughAttribute]
public IDbConnection get_Connection();
    public void set_Connection(IDbConnection value);
    [ObsoleteAttribute]
protected virtual string GetConnectionString(IDbConnection connection);
    private void OpenConnection();
    public void Close();
    [DebuggerStepThroughAttribute]
public IDbTransaction get_Transaction();
    public virtual DbManager BeginTransaction();
    public virtual DbManager BeginTransaction(IsolationLevel il);
    public virtual DbManager CommitTransaction();
    public virtual DbManager RollbackTransaction();
    [DebuggerStepThroughAttribute]
public IDbCommand get_Command();
    [DebuggerStepThroughAttribute]
public IDbCommand get_SelectCommand();
    [DebuggerStepThroughAttribute]
public IDbCommand get_InsertCommand();
    [DebuggerStepThroughAttribute]
public IDbCommand get_UpdateCommand();
    [DebuggerStepThroughAttribute]
public IDbCommand get_DeleteCommand();
    protected virtual IDbCommand OnInitCommand(IDbCommand command);
    private IDbCommand GetCommand(CommandAction commandAction, CommandType commandType, string sql);
    public sealed virtual void add_OnClosing(EventHandler value);
    public sealed virtual void remove_OnClosing(EventHandler value);
    public void add_OnClosed(EventHandler value);
    public void remove_OnClosed(EventHandler value);
    public void add_BeforeOperation(OperationTypeEventHandler value);
    public void remove_BeforeOperation(OperationTypeEventHandler value);
    public void add_AfterOperation(OperationTypeEventHandler value);
    public void remove_AfterOperation(OperationTypeEventHandler value);
    public void add_OperationException(OperationExceptionEventHandler value);
    public void remove_OperationException(OperationExceptionEventHandler value);
    public void add_InitCommand(InitCommandEventHandler value);
    public void remove_InitCommand(InitCommandEventHandler value);
    protected virtual void OnBeforeOperation(OperationType op);
    protected virtual void OnAfterOperation(OperationType op);
    protected virtual void OnOperationException(OperationType op, DataException ex);
    private IDataReader ExecuteReaderInternal();
    private IDataReader ExecuteReaderInternal(CommandBehavior commandBehavior);
    private int ExecuteNonQueryInternal();
    private IDbDataParameter[] CreateSpParameters(string spName, Object[] parameterValues, bool openNewConnectionToDiscoverParameters);
    public virtual IDbDataParameter[] PrepareParameters(Object[] parameters);
    private void AttachParameters(IDbCommand command, IEnumerable`1<IDbDataParameter> commandParameters);
    protected virtual IDbDataParameter[] DiscoverSpParameters(string spName, bool includeReturnValueParameter, bool openNewConnection);
    private IDbDataParameter[] CloneParameters(IDbDataParameter[] originalParameters);
    public IDbDataParameter[] GetSpParameters(string spName, bool includeReturnValueParameter, bool openNewConnectionToDiscoverParameters);
    private void AssignParameterValues(string spName, IDbDataParameter[] commandParameters, Object[] parameterValues);
    private string GetMissedColumnNames(int startIndex, IDbDataParameter[] commandParameters);
    private static string GetExceedParameters(int startIndex, Object[] parameterValues);
    public DbManager AssignParameterValues(DataRow dataRow);
    public DbManager AssignParameterValues(object obj);
    private static Array SortArray(Array array, IComparer comparer);
    public IDbDataParameter[] CreateParameters(DataRow dataRow, IDbDataParameter[] commandParameters);
    public IDbDataParameter[] CreateParameters(DataRow dataRow, String[] outputParameters, String[] inputOutputParameters, String[] ignoreParameters, IDbDataParameter[] commandParameters);
    public IDbDataParameter[] CreateParameters(object obj, IDbDataParameter[] commandParameters);
    public IDbDataParameter[] CreateParameters(object obj, String[] outputParameters, String[] inputOutputParameters, String[] ignoreParameters, IDbDataParameter[] commandParameters);
    public void MapOutputParameters(string returnValueMember, object obj);
    public void MapOutputParameters(object obj);
    public void MapOutputParameters(string returnValueMember, Object[] objects);
    public void MapOutputParameters(Object[] objects);
    public IDbDataParameter Parameter(string parameterName);
    public IDbDataParameter Parameter(string parameterName, object value);
    public IDbDataParameter Parameter(string parameterName, DbType dbType);
    public IDbDataParameter Parameter(string parameterName, DbType dbType, int size);
    public IDbDataParameter NullParameter(string parameterName, object value);
    public IDbDataParameter NullParameter(string parameterName, object value, object nullValue);
    public IDbDataParameter InputParameter(string parameterName, object value);
    public IDbDataParameter OutputParameter(string parameterName, object value);
    public IDbDataParameter OutputParameter(string parameterName, DbType dbType);
    public IDbDataParameter OutputParameter(string parameterName, DbType dbType, int size);
    public IDbDataParameter InputOutputParameter(string parameterName, object value);
    public IDbDataParameter ReturnValue(string parameterName);
    public IDbDataParameter Parameter(ParameterDirection parameterDirection, string parameterName, object value);
    public IDbDataParameter Parameter(ParameterDirection parameterDirection, string parameterName, object value, DbType dbType);
    public IDbDataParameter Parameter(string parameterName, object value, DbType dbType);
    public IDbDataParameter Parameter(ParameterDirection parameterDirection, string parameterName, object value, DbType dbType, int size);
    public IDbDataParameter Parameter(ParameterDirection parameterDirection, string parameterName, object value, string typeName);
    public IDbDataParameter Parameter(string parameterName, object value, DbType dbType, int size);
    public IDbDataParameter Parameter(ParameterDirection parameterDirection, string parameterName, DbType dbType);
    public IDbDataParameter Parameter(ParameterDirection parameterDirection, string parameterName, DbType dbType, int size);
    public IDbDataParameter Parameter(string parameterName, DbType dbType, int size, string sourceColumn);
    public IDbDataParameter Parameter(string parameterName, DbType dbType, string sourceColumn);
    public IDbDataParameter Parameter(string parameterName, DbType dbType, int size, string sourceColumn, DataRowVersion dataRowVersion);
    public IDbDataParameter Parameter(string parameterName, DbType dbType, string sourceColumn, DataRowVersion dataRowVersion);
    public ConvertType GetConvertTypeToParameter();
    private void SetCommand(CommandAction commandAction, IDbCommand command);
    private IDbCommand GetCommand(CommandAction commandAction);
    private void SetCommandParameters(CommandAction commandAction, IDbDataParameter[] commandParameters);
    private IDbDataParameter[] GetCommandParameters(CommandAction commandAction);
    private DbManager SetCommand(CommandAction commandAction, CommandType commandType, string commandText, IDbDataParameter[] commandParameters);
    private DbManager SetSpCommand(CommandAction commandAction, string spName, bool openNewConnectionToDiscoverParameters, Object[] parameterValues);
    private DbManager SetSpCommand(CommandAction commandAction, string spName, Object[] parameterValues);
    public DbManager SetCommand(string commandText);
    public DbManager SetCommand(CommandType commandType, string commandText);
    public DbManager SetCommand(string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetCommand(CommandType commandType, string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetSpCommand(string spName, Object[] parameterValues);
    public DbManager SetSpCommand(string spName, bool openNewConnectionToDiscoverParameters, Object[] parameterValues);
    public DbManager SetCommand(SqlQuery sql, IDbDataParameter[] commandParameters);
    public DbManager SetInsertCommand(string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetInsertCommand(CommandType commandType, string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetInsertSpCommand(string spName, Object[] parameterValues);
    public DbManager SetUpdateCommand(string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetUpdateCommand(CommandType commandType, string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetUpdateSpCommand(string spName, Object[] parameterValues);
    public DbManager SetDeleteCommand(string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetDeleteCommand(CommandType commandType, string commandText, IDbDataParameter[] commandParameters);
    public DbManager SetDeleteSpCommand(string spName, Object[] parameterValues);
    private void PrepareCommand(CommandAction commandAction, CommandType commandType, string commandText, IDbDataParameter[] commandParameters);
    public DbManager Prepare();
    private bool InitParameters(CommandAction commandAction);
    public int ExecuteForEach(ICollection collection);
    public int ExecuteForEach(ICollection`1<T> collection);
    public int ExecuteForEach(int maxBatchSize, IEnumerable`1<T> collection);
    internal int ExecuteForEach(IEnumerable`1<T> collection, MemberMapper[] members, int maxBatchSize, ParameterProvider`1<T> getParameters);
    public int ExecuteForEach(DataTable table);
    public int ExecuteForEach(DataSet dataSet);
    public int ExecuteForEach(DataSet dataSet, NameOrIndexParameter nameOrIndex);
    public int ExecuteNonQuery();
    public int ExecuteNonQuery(string returnValueMember, object obj);
    public int ExecuteNonQuery(object obj);
    public int ExecuteNonQuery(string returnValueMember, Object[] objects);
    public int ExecuteNonQuery(Object[] objects);
    public object ExecuteScalar();
    public object ExecuteScalar(ScalarSourceType sourceType);
    public object ExecuteScalar(ScalarSourceType sourceType, NameOrIndexParameter nameOrIndex);
    public T ExecuteScalar();
    public T ExecuteScalar(ScalarSourceType sourceType);
    public T ExecuteScalar(ScalarSourceType sourceType, NameOrIndexParameter nameOrIndex);
    public IList ExecuteScalarList(IList list, Type type, NameOrIndexParameter nameOrIndex);
    public IList ExecuteScalarList(IList list, Type type);
    public ArrayList ExecuteScalarList(Type type, NameOrIndexParameter nameOrIndex);
    public ArrayList ExecuteScalarList(Type type);
    public IList`1<T> ExecuteScalarList(IList`1<T> list, NameOrIndexParameter nameOrIndex);
    public IList`1<T> ExecuteScalarList(IList`1<T> list);
    public List`1<T> ExecuteScalarList(NameOrIndexParameter nameOrIndex);
    public List`1<T> ExecuteScalarList();
    public IDictionary ExecuteScalarDictionary(IDictionary dic, NameOrIndexParameter keyField, Type keyFieldType, NameOrIndexParameter valueField, Type valueFieldType);
    public Hashtable ExecuteScalarDictionary(NameOrIndexParameter keyField, Type keyFieldType, NameOrIndexParameter valueField, Type valueFieldType);
    public IDictionary`2<TKey, T> ExecuteScalarDictionary(IDictionary`2<TKey, T> dic, NameOrIndexParameter keyField, NameOrIndexParameter valueField);
    public Dictionary`2<TKey, T> ExecuteScalarDictionary(NameOrIndexParameter keyField, NameOrIndexParameter valueField);
    public IDictionary ExecuteScalarDictionary(IDictionary dic, MapIndex index, NameOrIndexParameter valueField, Type valueFieldType);
    public Hashtable ExecuteScalarDictionary(MapIndex index, NameOrIndexParameter valueField, Type valueFieldType);
    public IDictionary`2<CompoundValue, T> ExecuteScalarDictionary(IDictionary`2<CompoundValue, T> dic, MapIndex index, NameOrIndexParameter valueField);
    public Dictionary`2<CompoundValue, T> ExecuteScalarDictionary(MapIndex index, NameOrIndexParameter valueField);
    public IDataReader ExecuteReader();
    public IDataReader ExecuteReader(CommandBehavior commandBehavior);
    public DataSet ExecuteDataSet();
    public DataSet ExecuteDataSet(DataSet dataSet);
    public DataSet ExecuteDataSet(NameOrIndexParameter table);
    public DataSet ExecuteDataSet(DataSet dataSet, NameOrIndexParameter table);
    public DataSet ExecuteDataSet(DataSet dataSet, int startRecord, int maxRecords, NameOrIndexParameter table);
    public DataTable ExecuteDataTable();
    public DataTable ExecuteDataTable(DataTable dataTable);
    public void ExecuteDataTables(int startRecord, int maxRecords, DataTable[] tableList);
    public void ExecuteDataTables(DataTable[] tableList);
    private object ExecuteObjectInternal(object entity, Type type, Object[] parameters);
    public object ExecuteObject(object entity);
    public object ExecuteObject(object entity, Object[] parameters);
    public object ExecuteObject(Type type);
    public object ExecuteObject(Type type, Object[] parameters);
    public T ExecuteObject();
    public T ExecuteObject(Object[] parameters);
    private IList ExecuteListInternal(IList list, Type type, Object[] parameters);
    private void ExecuteListInternal(IList`1<T> list, Object[] parameters);
    public ArrayList ExecuteList(Type type);
    public List`1<T> ExecuteList();
    public ArrayList ExecuteList(Type type, Object[] parameters);
    public List`1<T> ExecuteList(Object[] parameters);
    public IList ExecuteList(IList list, Type type);
    public IList`1<T> ExecuteList(IList`1<T> list);
    public IList ExecuteList(IList list, Type type, Object[] parameters);
    public IList`1<T> ExecuteList(IList`1<T> list, Object[] parameters);
    public TList ExecuteList(TList list, Object[] parameters);
    public TList ExecuteList(Object[] parameters);
    public Hashtable ExecuteDictionary(NameOrIndexParameter keyField, Type keyFieldType, Object[] parameters);
    public IDictionary ExecuteDictionary(IDictionary dictionary, NameOrIndexParameter keyField, Type type, Object[] parameters);
    public Dictionary`2<TKey, TValue> ExecuteDictionary(NameOrIndexParameter keyField, Object[] parameters);
    public IDictionary`2<TKey, TValue> ExecuteDictionary(IDictionary`2<TKey, TValue> dictionary, NameOrIndexParameter keyField, Object[] parameters);
    public IDictionary`2<TKey, TValue> ExecuteDictionary(IDictionary`2<TKey, TValue> dictionary, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public Hashtable ExecuteDictionary(MapIndex index, Type type, Object[] parameters);
    public IDictionary ExecuteDictionary(IDictionary dictionary, MapIndex index, Type type, Object[] parameters);
    public Dictionary`2<CompoundValue, TValue> ExecuteDictionary(MapIndex index, Object[] parameters);
    public IDictionary`2<CompoundValue, TValue> ExecuteDictionary(IDictionary`2<CompoundValue, TValue> dictionary, MapIndex index, Object[] parameters);
    public IDictionary`2<CompoundValue, TValue> ExecuteDictionary(IDictionary`2<CompoundValue, TValue> dictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public MapResultSet[] ExecuteResultSet(MapResultSet[] resultSets);
    public MapResultSet[] ExecuteResultSet(Type masterType, MapNextResult[] nextResults);
    public MapResultSet[] ExecuteResultSet(MapNextResult[] nextResults);
    private DbDataAdapter CreateDataAdapter();
    public int Update(DataSet dataSet);
    public int Update(DataSet dataSet, NameOrIndexParameter table);
    public int Update(DataTable dataTable);
    private void ExecuteOperation(OperationType operationType, Action operation);
    private T ExecuteOperation(OperationType operationType, Func`1<T> operation);
    private void HandleOperationException(OperationType op, Exception ex);
    protected virtual void Dispose(bool disposing);
    public Table`1<T> GetTable();
    public Table`1<T> GetTable(bool dispose);
    public Table`1<T> GetTable(object instance, MethodInfo methodInfo, Object[] parameters);
    private sealed virtual override object BLToolkit.Data.Linq.IDataContext.SetQuery(IQueryContext queryContext);
    private PreparedQuery GetCommand(IQueryContext query);
    protected virtual SqlQuery ProcessQuery(SqlQuery sqlQuery);
    private void GetParameters(IQueryContext query, PreparedQuery pq);
    private sealed virtual override int BLToolkit.Data.Linq.IDataContext.ExecuteNonQuery(object query);
    private sealed virtual override object BLToolkit.Data.Linq.IDataContext.ExecuteScalar(object query);
    private object ExecuteScalarInternal(object query);
    private sealed virtual override IDataReader BLToolkit.Data.Linq.IDataContext.ExecuteReader(object query);
    private sealed virtual override void BLToolkit.Data.Linq.IDataContext.ReleaseQuery(object query);
    private sealed virtual override string BLToolkit.Data.Linq.IDataContext.GetSqlText(object query);
    private sealed virtual override IDataContext BLToolkit.Data.Linq.IDataContext.Clone();
    private sealed virtual override string BLToolkit.Data.Linq.IDataContext.get_ContextID();
    private static Func`1<ISqlProvider> GetCreateSqlProvider(DataProviderBase dp);
    private sealed virtual override Func`1<ISqlProvider> BLToolkit.Data.Linq.IDataContext.get_CreateSqlProvider();
    [DebuggerStepThroughAttribute]
public string get_ConfigurationString();
    protected virtual void InitDataProvider(IDbConnection connection);
    protected virtual IDbConnection CloneConnection();
    protected virtual string GetConnectionHash();
    private static DataProviderBase GetDataProvider(IDbConnection connection);
    public static DataProviderBase GetDataProvider(string configurationString);
    private static bool IsMatchedConfigurationString(string configurationString, string csWithoutProvider);
    private static DataProviderBase FindFirstSuitableProvider(string configurationString);
    public static string GetConnectionString(string configurationString);
    public static void AddDataProvider(DataProviderBase dataProvider);
    public static void AddDataProvider(string providerName, DataProviderBase dataProvider);
    public static void AddDataProvider(Type dataProviderType);
    public static void AddDataProvider(string providerName, Type dataProviderType);
    public static void AddConnectionString(string connectionString);
    public static void AddConnectionString(string configurationString, string connectionString);
    public static void AddConnectionString(string providerName, string configurationString, string connectionString);
    public static string get_DefaultConfiguration();
    public static void set_DefaultConfiguration(string value);
    [CompilerGeneratedAttribute]
private IDbDataParameter[] <ExecuteForEach>b__b(T obj);
    [CompilerGeneratedAttribute]
private static string <ExecuteForEach>b__d(IDbDataParameter p);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__27(string message, string displayName);
    [CompilerGeneratedAttribute]
private static string <get_DefaultConfiguration>b__29(KeyValuePair`2<string, string> de);
}
public interface BLToolkit.Data.IDataReaderEx {
    public abstract virtual DateTimeOffset GetDateTimeOffset(int i);
}
public class BLToolkit.Data.InitCommandEventArgs : EventArgs {
    private IDbCommand _command;
    public IDbCommand Command { get; }
    public InitCommandEventArgs(IDbCommand command);
    public IDbCommand get_Command();
}
public class BLToolkit.Data.InitCommandEventHandler : MulticastDelegate {
    public InitCommandEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InitCommandEventArgs ea);
    public virtual IAsyncResult BeginInvoke(object sender, InitCommandEventArgs ea, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class BLToolkit.Data.Linq.Builder.AggregationBuilder : MethodCallBuilder {
    public static String[] MethodNames;
    [CompilerGeneratedAttribute]
private static Func`2<SqlInfo, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate1;
    private static AggregationBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    [CompilerGeneratedAttribute]
private static ISqlExpression <BuildMethodCall>b__0(SqlInfo _);
}
internal class BLToolkit.Data.Linq.Builder.AllAnyBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
public class BLToolkit.Data.Linq.Builder.BuildInfo : object {
    private bool _isAssociationBuilt;
    [CompilerGeneratedAttribute]
private BuildInfo <SequenceInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlQuery <SqlQuery>k__BackingField;
    public BuildInfo SequenceInfo { get; public set; }
    public IBuildContext Parent { get; public set; }
    public Expression Expression { get; public set; }
    public SqlQuery SqlQuery { get; public set; }
    public bool IsSubQuery { get; }
    public bool IsAssociationBuilt { get; public set; }
    public BuildInfo(IBuildContext parent, Expression expression, SqlQuery sqlQuery);
    public BuildInfo(BuildInfo buildInfo, Expression expression);
    public BuildInfo(BuildInfo buildInfo, Expression expression, SqlQuery sqlQuery);
    [CompilerGeneratedAttribute]
public BuildInfo get_SequenceInfo();
    [CompilerGeneratedAttribute]
public void set_SequenceInfo(BuildInfo value);
    [CompilerGeneratedAttribute]
public IBuildContext get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public SqlQuery get_SqlQuery();
    [CompilerGeneratedAttribute]
public void set_SqlQuery(SqlQuery value);
    public bool get_IsSubQuery();
    public bool get_IsAssociationBuilt();
    public void set_IsAssociationBuilt(bool value);
}
internal class BLToolkit.Data.Linq.Builder.CastBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.ChangeTypeExpression : Expression {
    public static int ChangeTypeType;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; private set; }
    public ChangeTypeExpression(Expression expression, Type type);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
private void set_Expression(Expression value);
    public virtual string ToString();
}
internal class BLToolkit.Data.Linq.Builder.ConcatUnionBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.ContainsBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
public enum BLToolkit.Data.Linq.Builder.ConvertFlags : Enum {
    public int value__;
    public static ConvertFlags Field;
    public static ConvertFlags Key;
    public static ConvertFlags All;
}
internal class BLToolkit.Data.Linq.Builder.CountBuilder : MethodCallBuilder {
    public static String[] MethodNames;
    private static CountBuilder();
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.DefaultIfEmptyBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.DeleteBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.DistinctBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
public class BLToolkit.Data.Linq.Builder.ExpressionBuilder : object {
    private Dictionary`2<Expression, SqlValue> _constants;
    private Dictionary`2<Expression, ParameterAccessor> _parameters;
    public HashSet`1<Expression> AsParameters;
    private static object _sync;
    private static List`1<ISequenceBuilder> _sequenceBuilders;
    private Query _query;
    private List`1<ISequenceBuilder> _builders;
    private bool _reorder;
    private Dictionary`2<Expression, Expression> _expressionAccessors;
    private HashSet`1<Expression> _subQueryExpressions;
    public List`1<ParameterAccessor> CurrentSqlParameters;
    public bool IsBlockDisable;
    public IDataContextInfo DataContextInfo;
    public Expression OriginalExpression;
    public Expression Expression;
    public ParameterExpression[] CompiledParameters;
    private ISqlProvider _sqlProvider;
    public static ParameterExpression ContextParam;
    public static ParameterExpression DataContextParam;
    public static ParameterExpression DataReaderParam;
    public static ParameterExpression ParametersParam;
    public static ParameterExpression ExpressionParam;
    public ParameterExpression SequenceParameter;
    private MethodInfo[] _enumerableMethods;
    private MethodInfo[] _queryableMethods;
    private HashSet`1<Expression> _skippedExpressions;
    [CompilerGeneratedAttribute]
private static Predicate`1<ICloneableElement> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`3<MemberAccessor, int, <>f__AnonymousType4`2<MemberAccessor, int>> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<MemberAccessor, int>, MemberInfo> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<MemberAccessor, int>, int> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, bool> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5`2<ISqlExpression, MemberInfo>, SqlInfo> CS$<>9__CachedAnonymousMethodDelegate44;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Func`2<SqlInfo, string> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<SqlInfo, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate50;
    [CompilerGeneratedAttribute]
private static Func`3<InheritanceMappingAttribute, int, <>f__AnonymousType4`2<InheritanceMappingAttribute, int>> CS$<>9__CachedAnonymousMethodDelegate60;
    [CompilerGeneratedAttribute]
private static Func`3<InheritanceMappingAttribute, int, <>f__AnonymousType4`2<InheritanceMappingAttribute, int>> CS$<>9__CachedAnonymousMethodDelegate61;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<InheritanceMappingAttribute, int>, bool> CS$<>9__CachedAnonymousMethodDelegate62;
    [CompilerGeneratedAttribute]
private static Func`3<InheritanceMappingAttribute, int, <>f__AnonymousType4`2<InheritanceMappingAttribute, int>> CS$<>9__CachedAnonymousMethodDelegate71;
    [CompilerGeneratedAttribute]
private static Func`3<InheritanceMappingAttribute, int, <>f__AnonymousType4`2<InheritanceMappingAttribute, int>> CS$<>9__CachedAnonymousMethodDelegate72;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<InheritanceMappingAttribute, int>, bool> CS$<>9__CachedAnonymousMethodDelegate73;
    [CompilerGeneratedAttribute]
private static Func`3<MemberAccessor, int, <>f__AnonymousType4`2<MemberAccessor, int>> CS$<>9__CachedAnonymousMethodDelegate89;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<MemberAccessor, int>, string> CS$<>9__CachedAnonymousMethodDelegate8a;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<MemberAccessor, int>, int> CS$<>9__CachedAnonymousMethodDelegate8b;
    [CompilerGeneratedAttribute]
private static Func`2<Type, bool> CS$<>9__CachedAnonymousMethodDelegate95;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegate96;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea0;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea1;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea2;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea3;
    [CompilerGeneratedAttribute]
private static Func`3<Expression, Expression, Expression> CS$<>9__CachedAnonymousMethodDelegateae;
    [CompilerGeneratedAttribute]
private static Func`3<Expression, Expression, Expression> CS$<>9__CachedAnonymousMethodDelegateaf;
    [CompilerGeneratedAttribute]
private static Func`3<Type, Type, <>f__AnonymousType6`2<string, Type>> CS$<>9__CachedAnonymousMethodDelegateb7;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType6`2<string, Type>, string> CS$<>9__CachedAnonymousMethodDelegateb8;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType6`2<string, Type>, Type> CS$<>9__CachedAnonymousMethodDelegateb9;
    [CompilerGeneratedAttribute]
private static Func`3<Type, Type, <>f__AnonymousType6`2<string, Type>> CS$<>9__CachedAnonymousMethodDelegatebd;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType6`2<string, Type>, string> CS$<>9__CachedAnonymousMethodDelegatebe;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType6`2<string, Type>, Type> CS$<>9__CachedAnonymousMethodDelegatebf;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegateca;
    [CompilerGeneratedAttribute]
private static Func`3<MethodInfo, bool, bool> CS$<>9__CachedAnonymousMethodDelegatecd;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegateda;
    [CompilerGeneratedAttribute]
private static Func`2<MethodInfo, bool> CS$<>9__CachedAnonymousMethodDelegatedb;
    public ISqlProvider SqlProvider { get; }
    public MappingSchema MappingSchema { get; }
    public MethodInfo[] EnumerableMethods { get; }
    public MethodInfo[] QueryableMethods { get; }
    public ExpressionBuilder(Query query, IDataContextInfo dataContext, Expression expression, ParameterExpression[] compiledParameters);
    private static ExpressionBuilder();
    public IBuildContext BuildWhere(IBuildContext parent, IBuildContext sequence, LambdaExpression condition, bool checkForSubQuery);
    private bool CheckSubQueryForWhere(IBuildContext context, Expression expression, Boolean& makeHaving);
    public void BuildTake(IBuildContext context, ISqlExpression expr);
    public IBuildContext GetSubQuery(IBuildContext context, MethodCallExpression expr);
    internal ISqlExpression SubQueryToSql(IBuildContext context, MethodCallExpression expression);
    private bool IsSubQuery(IBuildContext context, MethodCallExpression call);
    private bool IsSubQuerySource(IBuildContext context, Expression expr);
    private bool IsGroupJoinSource(IBuildContext context, MethodCallExpression call);
    private static bool IsIEnumerableType(Expression expr);
    private Expression ConvertExpression(Expression expression);
    private Expression ConvertMethod(MethodCallExpression pi);
    private static Expression ConvertMethod(MethodCallExpression pi, LambdaExpression lambda);
    private Expression ConvertNew(NewExpression pi);
    public SqlInfo[] ConvertExpressions(IBuildContext context, Expression expression, ConvertFlags queryConvertFlag);
    public ISqlExpression ConvertToSqlAndBuild(IBuildContext context, Expression expression);
    public ISqlExpression ConvertToSql(IBuildContext context, Expression expression);
    private bool IsServerSideOnly(Expression expr);
    private static bool IsQueryMember(Expression expr);
    private bool CanBeConstant(Expression expr);
    private bool CanBeCompiled(Expression expr);
    private SqlValue BuildConstant(Expression expr);
    private ParameterAccessor BuildParameter(Expression expr);
    private Expression ReplaceParameter(IDictionary`2<Expression, Expression> expressionAccessors, Expression expression, Action`1<string> setName);
    private ISqlExpression ConvertEnumerable(IBuildContext context, MethodCallExpression expression);
    private ISqlPredicate ConvertPredicate(IBuildContext context, Expression expression);
    private ISqlPredicate ConvertCompare(IBuildContext context, ExpressionType nodeType, Expression left, Expression right);
    private ISqlPredicate ConvertEnumConversion(IBuildContext context, Expression left, Operator op, Expression right);
    private ISqlPredicate ConvertObjectNullComparison(IBuildContext context, Expression left, Expression right, bool isEqual);
    public ISqlPredicate ConvertObjectComparison(ExpressionType nodeType, IBuildContext leftContext, Expression left, IBuildContext rightContext, Expression right);
    private ISqlPredicate ConvertNewObjectComparison(IBuildContext context, ExpressionType nodeType, Expression left, Expression right);
    private ISqlExpression GetParameter(Expression ex, MemberInfo member);
    private static Expression FindExpression(Expression expr);
    private ISqlPredicate ConvertInPredicate(IBuildContext context, MethodCallExpression expression);
    private ISqlPredicate ConvertLikePredicate(IBuildContext context, MethodCallExpression expression, string start, string end);
    private ISqlPredicate ConvertLikePredicate(IBuildContext context, MethodCallExpression expression);
    private static string EscapeLikeText(string text);
    private static Converter`2<object, object> GetLikeEscaper(string start, string end);
    internal ISqlPredicate MakeIsPredicate(TableContext table, Type typeOperand);
    private ISqlPredicate MakeIsPredicate(IBuildContext context, TypeBinaryExpression expression);
    private void BuildSearchCondition(IBuildContext context, Expression expression, List`1<Condition> conditions);
    private Condition BuildConditionSubQuery(IBuildContext context, Expression expr);
    private Condition BuildAnyCondition(IBuildContext context, SetType setType, MethodCallExpression expr, LambdaExpression lambda, Expression inExpr);
    private bool CanBeTranslatedToSql(IBuildContext context, Expression expr, bool canBeCompiled);
    public IBuildContext GetContext(IBuildContext current, Expression expression);
    private SqlFunctionAttribute GetFunctionAttribute(ICustomAttributeProvider member);
    internal TableFunctionAttribute GetTableFunctionAttribute(ICustomAttributeProvider member);
    public ISqlExpression Convert(IBuildContext context, ISqlExpression expr);
    public ISqlPredicate Convert(IBuildContext context, ISqlPredicate predicate);
    public ISqlExpression ConvertTimeSpanMember(IBuildContext context, MemberExpression expression);
    internal ISqlExpression ConvertSearchCondition(IBuildContext context, ISqlExpression sqlExpression);
    public bool ProcessProjection(Dictionary`2<MemberInfo, Expression> members, Expression expression);
    public static void AddBuilder(ISequenceBuilder builder);
    public ISqlProvider get_SqlProvider();
    public MappingSchema get_MappingSchema();
    public Expression BuildBlock(Expression expression);
    internal Query`1<T> Build();
    [NotNullAttribute]
public IBuildContext BuildSequence(BuildInfo buildInfo);
    public SequenceConvertInfo ConvertSequence(BuildInfo buildInfo, ParameterExpression param);
    private Expression ConvertExpressionTree(Expression expression);
    private Expression ConvertParameters(Expression expression);
    public MethodInfo[] get_EnumerableMethods();
    public MethodInfo[] get_QueryableMethods();
    private Expression OptimizeExpression(Expression expression);
    private LambdaExpression ConvertMethodExpression(MemberInfo mi);
    private Expression ConvertSubquery(Expression expr);
    private Expression ConvertWhere(MethodCallExpression method);
    private static LambdaExpression GetLambda(Expression expression, Int32[] n);
    private Expression ConvertGroupBy(MethodCallExpression method);
    private bool IsExpression(Expression ex);
    private Expression ConvertSelectMany(MethodCallExpression method);
    private Expression ConvertPredicate(MethodCallExpression method);
    private Expression ConvertSelector(MethodCallExpression method, bool isGeneric);
    private Expression ConvertSelect(MethodCallExpression method);
    private Expression ConvertIQueriable(Expression expression);
    private Expression ConvertElementAt(MethodCallExpression method);
    private MethodInfo GetQueriableMethodInfo(MethodCallExpression method, Func`3<MethodInfo, bool, bool> predicate);
    private MethodInfo GetMethodInfo(MethodCallExpression method, string name);
    private static Type[] GetMethodGenericTypes(MethodCallExpression method);
    public Expression BuildExpression(IBuildContext context, Expression expression);
    private static bool EnforceServerSide(IBuildContext context);
    private Expression BuildSql(IBuildContext context, Expression expression);
    public Expression BuildSql(Type type, int idx, MethodInfo checkNullFunction, Expression context);
    public Expression BuildSql(Type type, int idx);
    private bool PreferServerSide(Expression expr);
    [CompilerGeneratedAttribute]
private static bool <BuildTake>b__4(ICloneableElement _);
    [CompilerGeneratedAttribute]
private ConvertInfo <ConvertExpression>b__e(Expression e);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<MemberAccessor, int> <ConvertExpressions>b__1f(MemberAccessor m, int i);
    [CompilerGeneratedAttribute]
private static MemberInfo <ConvertExpressions>b__20(<>f__AnonymousType4`2<MemberAccessor, int> _);
    [CompilerGeneratedAttribute]
private static int <ConvertExpressions>b__21(<>f__AnonymousType4`2<MemberAccessor, int> _);
    [CompilerGeneratedAttribute]
private static bool <ConvertExpressions>b__22(MemberBinding b);
    [CompilerGeneratedAttribute]
private bool <CanBeConstant>b__37(Expression ex);
    [CompilerGeneratedAttribute]
private bool <CanBeCompiled>b__38(Expression ex);
    [CompilerGeneratedAttribute]
private static SqlInfo <ConvertObjectComparison>b__42(<>f__AnonymousType5`2<ISqlExpression, MemberInfo> mm);
    [CompilerGeneratedAttribute]
private static void <GetParameter>b__48(string _);
    [CompilerGeneratedAttribute]
private static string <ConvertInPredicate>b__4d(SqlInfo s);
    [CompilerGeneratedAttribute]
private static ISqlExpression <ConvertInPredicate>b__4e(SqlInfo s);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<InheritanceMappingAttribute, int> <MakeIsPredicate>b__59(InheritanceMappingAttribute m, int i);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<InheritanceMappingAttribute, int> <MakeIsPredicate>b__5b(InheritanceMappingAttribute m, int i);
    [CompilerGeneratedAttribute]
private static bool <MakeIsPredicate>b__5c(<>f__AnonymousType4`2<InheritanceMappingAttribute, int> m);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<InheritanceMappingAttribute, int> <MakeIsPredicate>b__6d(InheritanceMappingAttribute m, int i);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<InheritanceMappingAttribute, int> <MakeIsPredicate>b__6f(InheritanceMappingAttribute m, int i);
    [CompilerGeneratedAttribute]
private static bool <MakeIsPredicate>b__70(<>f__AnonymousType4`2<InheritanceMappingAttribute, int> m);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<MemberAccessor, int> <ProcessProjection>b__85(MemberAccessor m, int i);
    [CompilerGeneratedAttribute]
private static string <ProcessProjection>b__86(<>f__AnonymousType4`2<MemberAccessor, int> _);
    [CompilerGeneratedAttribute]
private static int <ProcessProjection>b__87(<>f__AnonymousType4`2<MemberAccessor, int> _);
    [CompilerGeneratedAttribute]
private static int <Build>b__8e(ISequenceBuilder _);
    [CompilerGeneratedAttribute]
private Expression <ConvertParameters>b__90(Expression expr);
    [CompilerGeneratedAttribute]
private Expression <OptimizeExpression>b__91(Expression expr);
    [CompilerGeneratedAttribute]
private static bool <OptimizeExpression>b__92(Type t);
    [CompilerGeneratedAttribute]
private static bool <OptimizeExpression>b__93(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <ConvertSubquery>b__9c(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <ConvertSubquery>b__9d(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <ConvertSubquery>b__9e(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <ConvertSubquery>b__9f(MethodInfo m);
    [CompilerGeneratedAttribute]
private static Expression <ConvertWhere>b__ab(Expression c, Expression t);
    [CompilerGeneratedAttribute]
private static Expression <ConvertWhere>b__ad(Expression current, Expression _);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType6`2<string, Type> <ConvertGroupBy>b__b4(Type n, Type t);
    [CompilerGeneratedAttribute]
private static string <ConvertGroupBy>b__b5(<>f__AnonymousType6`2<string, Type> _);
    [CompilerGeneratedAttribute]
private static Type <ConvertGroupBy>b__b6(<>f__AnonymousType6`2<string, Type> _);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType6`2<string, Type> <ConvertSelectMany>b__ba(Type n, Type t);
    [CompilerGeneratedAttribute]
private static string <ConvertSelectMany>b__bb(<>f__AnonymousType6`2<string, Type> _);
    [CompilerGeneratedAttribute]
private static Type <ConvertSelectMany>b__bc(<>f__AnonymousType6`2<string, Type> _);
    [CompilerGeneratedAttribute]
private static void <ConvertIQueriable>b__c9(string _);
    [CompilerGeneratedAttribute]
private static bool <ConvertElementAt>b__cb(MethodInfo mi, bool _);
    [CompilerGeneratedAttribute]
private static bool <GetMethodInfo>b__d7(MethodInfo m);
    [CompilerGeneratedAttribute]
private static bool <GetMethodInfo>b__d9(MethodInfo m);
}
public class BLToolkit.Data.Linq.Builder.ExpressionContext : SequenceContextBase {
    public ExpressionContext(IBuildContext parent, IBuildContext sequence, LambdaExpression lambda);
    public ExpressionContext(IBuildContext parent, IBuildContext sequence, LambdaExpression lambda, SqlQuery sqlQuery);
    public virtual Expression BuildExpression(Expression expression, int level);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    public virtual bool IsExpression(Expression expression, int level, RequestFor requestFlag);
    public virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
}
internal class BLToolkit.Data.Linq.Builder.ExpressionHoder`2 : object {
    public TP p;
    public TE ex;
}
internal class BLToolkit.Data.Linq.Builder.FirstSingleBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.GroupByBuilder : MethodCallBuilder {
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<SqlInfo, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<IQueryElement> CS$<>9__CachedAnonymousMethodDelegate5;
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    [CompilerGeneratedAttribute]
private static bool <CanBuildMethodCall>b__0(MemberBinding b);
    [CompilerGeneratedAttribute]
private static bool <BuildMethodCall>b__2(SqlInfo _);
    [CompilerGeneratedAttribute]
private static void <BuildMethodCall>b__3(IQueryElement e);
}
public interface BLToolkit.Data.Linq.Builder.IBuildContext {
    [CLSCompliantAttribute("False")]
public string _sqlQueryText { get; }
    public ExpressionBuilder Builder { get; }
    public Expression Expression { get; }
    public SqlQuery SqlQuery { get; public set; }
    public IBuildContext Parent { get; public set; }
    public abstract virtual string get__sqlQueryText();
    public abstract virtual ExpressionBuilder get_Builder();
    public abstract virtual Expression get_Expression();
    public abstract virtual SqlQuery get_SqlQuery();
    public abstract virtual void set_SqlQuery(SqlQuery value);
    public abstract virtual IBuildContext get_Parent();
    public abstract virtual void set_Parent(IBuildContext value);
    public abstract virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public abstract virtual Expression BuildExpression(Expression expression, int level);
    public abstract virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public abstract virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    public abstract virtual bool IsExpression(Expression expression, int level, RequestFor requestFlag);
    public abstract virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public abstract virtual int ConvertToParentIndex(int index, IBuildContext context);
    public abstract virtual void SetAlias(string alias);
    public abstract virtual ISqlExpression GetSubQuery(IBuildContext context);
}
internal class BLToolkit.Data.Linq.Builder.InsertBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.IntersectBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
public interface BLToolkit.Data.Linq.Builder.ISequenceBuilder {
    public int BuildCounter { get; public set; }
    public abstract virtual int get_BuildCounter();
    public abstract virtual void set_BuildCounter(int value);
    public abstract virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public abstract virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public abstract virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.JoinBuilder : MethodCallBuilder {
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    private static void BuildJoin(ExpressionBuilder builder, Join join, ExpressionContext outerKeyContext, Expression outerKeySelector, ExpressionContext innerKeyContext, Expression innerKeySelector, ExpressionContext countKeyContext, SqlQuery countSql);
    [CompilerGeneratedAttribute]
private static bool <CanBuildMethodCall>b__6(MemberBinding b);
}
internal abstract class BLToolkit.Data.Linq.Builder.MethodCallBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    protected abstract virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected abstract virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected abstract virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    protected static Expression ConvertMethod(MethodCallExpression methodCall, int sourceTypeNumber, SequenceConvertInfo info, ParameterExpression param, Expression expression);
}
internal class BLToolkit.Data.Linq.Builder.OfTypeBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.OrderByBuilder : MethodCallBuilder {
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    [CompilerGeneratedAttribute]
private static bool <CanBuildMethodCall>b__0(MemberBinding b);
}
internal class BLToolkit.Data.Linq.Builder.PassThroughBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
public abstract class BLToolkit.Data.Linq.Builder.PassThroughContext : object {
    [CompilerGeneratedAttribute]
private IBuildContext <Context>k__BackingField;
    public IBuildContext Context { get; public set; }
    private string BLToolkit.Data.Linq.Builder.IBuildContext._sqlQueryText { get; }
    public ExpressionBuilder Builder { get; }
    public Expression Expression { get; }
    public SqlQuery SqlQuery { get; public set; }
    public IBuildContext Parent { get; public set; }
    protected PassThroughContext(IBuildContext context);
    [CompilerGeneratedAttribute]
public IBuildContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IBuildContext value);
    private sealed virtual override string BLToolkit.Data.Linq.Builder.IBuildContext.get__sqlQueryText();
    public virtual ExpressionBuilder get_Builder();
    public virtual Expression get_Expression();
    public virtual SqlQuery get_SqlQuery();
    public virtual void set_SqlQuery(SqlQuery value);
    public virtual IBuildContext get_Parent();
    public virtual void set_Parent(IBuildContext value);
    public virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public virtual Expression BuildExpression(Expression expression, int level);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    public virtual bool IsExpression(Expression expression, int level, RequestFor requestFlag);
    public virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    public virtual void SetAlias(string alias);
    public virtual ISqlExpression GetSubQuery(IBuildContext context);
}
public enum BLToolkit.Data.Linq.Builder.RequestFor : Enum {
    public int value__;
    public static RequestFor Table;
    public static RequestFor Association;
    public static RequestFor Object;
    public static RequestFor GroupJoin;
    public static RequestFor Field;
    public static RequestFor Expression;
    public static RequestFor SubQuery;
    public static RequestFor Root;
}
internal class BLToolkit.Data.Linq.Builder.ScalarSelectBuilder : object {
    [CompilerGeneratedAttribute]
private int <BuildCounter>k__BackingField;
    public int BuildCounter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_BuildCounter();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildCounter(int value);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.SelectBuilder : MethodCallBuilder {
    [CompilerGeneratedAttribute]
private static Func`2<SequenceConvertPath, int> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<SequenceConvertPath, int> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`3<MemberAccessor, int, <>f__AnonymousType4`2<MemberAccessor, int>> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<MemberAccessor, int>, string> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4`2<MemberAccessor, int>, int> CS$<>9__CachedAnonymousMethodDelegate26;
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    private static IBuildContext CheckSubQueryForSelect(IBuildContext context);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression originalMethodCall, BuildInfo buildInfo, ParameterExpression param);
    private static IEnumerable`1<SequenceConvertPath> GetExpressions(ParameterExpression param, Expression path, int level, Expression expression);
    [CompilerGeneratedAttribute]
private static int <Convert>b__5(SequenceConvertPath path);
    [CompilerGeneratedAttribute]
private static int <Convert>b__a(SequenceConvertPath path);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4`2<MemberAccessor, int> <GetExpressions>b__20(MemberAccessor m, int i);
    [CompilerGeneratedAttribute]
private static string <GetExpressions>b__21(<>f__AnonymousType4`2<MemberAccessor, int> _);
    [CompilerGeneratedAttribute]
private static int <GetExpressions>b__22(<>f__AnonymousType4`2<MemberAccessor, int> _);
}
public class BLToolkit.Data.Linq.Builder.SelectContext : object {
    public MethodCallExpression MethodCall;
    public Dictionary`2<MemberInfo, Expression> Members;
    private Dictionary`2<MemberInfo, SqlInfo[]> _sql;
    private Dictionary`2<Tuple`3<Expression, int, ConvertFlags>, SqlInfo[]> _expressionIndex;
    private Dictionary`2<Tuple`2<MemberInfo, ConvertFlags>, SqlInfo[]> _memberIndex;
    [CompilerGeneratedAttribute]
private IBuildContext[] <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <Lambda>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlQuery <SqlQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsScalar>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<IBuildContext, Expression, int, Expression> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<MemberInfo, Expression>, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<SqlInfo[], IEnumerable`1<SqlInfo>> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`3<SqlInfo[], SqlInfo, SqlInfo> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<MemberInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<SqlInfo[], MemberInfo>, IEnumerable`1<SqlInfo>> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType0`2<SqlInfo[], MemberInfo>, SqlInfo, SqlInfo> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`1<IBuildContext> CS$<>9__CachedAnonymousMethodDelegate54;
    [CLSCompliantAttribute("False")]
public string _sqlQueryText { get; }
    public IBuildContext[] Sequence { get; public set; }
    public LambdaExpression Lambda { get; public set; }
    public Expression Body { get; public set; }
    public ExpressionBuilder Builder { get; private set; }
    public SqlQuery SqlQuery { get; public set; }
    public IBuildContext Parent { get; public set; }
    public bool IsScalar { get; private set; }
    private Expression BLToolkit.Data.Linq.Builder.IBuildContext.Expression { get; }
    public SelectContext(IBuildContext parent, LambdaExpression lambda, IBuildContext[] sequences);
    public sealed virtual string get__sqlQueryText();
    [CompilerGeneratedAttribute]
public IBuildContext[] get_Sequence();
    [CompilerGeneratedAttribute]
public void set_Sequence(IBuildContext[] value);
    [CompilerGeneratedAttribute]
public LambdaExpression get_Lambda();
    [CompilerGeneratedAttribute]
public void set_Lambda(LambdaExpression value);
    [CompilerGeneratedAttribute]
public Expression get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Expression value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionBuilder get_Builder();
    [CompilerGeneratedAttribute]
private void set_Builder(ExpressionBuilder value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlQuery get_SqlQuery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlQuery(SqlQuery value);
    [CompilerGeneratedAttribute]
public sealed virtual IBuildContext get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public bool get_IsScalar();
    [CompilerGeneratedAttribute]
private void set_IsScalar(bool value);
    private sealed virtual override Expression BLToolkit.Data.Linq.Builder.IBuildContext.get_Expression();
    public virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public virtual Expression BuildExpression(Expression expression, int level);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    private SqlInfo[] ConvertMember(MemberInfo member, Expression expression, ConvertFlags flags);
    private SqlInfo[] ConvertExpressions(Expression expression, ConvertFlags flags);
    private SqlInfo CheckExpression(SqlInfo expression);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    private SqlInfo[] ConvertToIndexInternal(Expression expression, int level, ConvertFlags flags);
    private void SetInfo(SqlInfo info);
    public virtual bool IsExpression(Expression expression, int level, RequestFor requestFlag);
    public virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    public virtual void SetAlias(string alias);
    public sealed virtual ISqlExpression GetSubQuery(IBuildContext context);
    private T ProcessScalar(Expression expression, int level, Func`4<IBuildContext, Expression, int, T> action, Func`1<T> defaultAction);
    private T ProcessMemberAccess(Expression expression, Expression levelExpression, int level, Func`6<int, IBuildContext, Expression, int, Expression, T> action);
    protected bool IsSubQuery();
    private IBuildContext GetSequence(Expression expression, int level);
    private static Expression GetExpression(Expression expression, Expression levelExpression, Expression memberExpression);
    private static Expression GetMemberExpression(Expression newExpression, Expression expression, int level);
    private Expression GetMemberExpression(MemberInfo member, bool add, Type type);
    [CompilerGeneratedAttribute]
private static Expression <BuildExpression>b__9(IBuildContext ctx, Expression ex, int l);
    [CompilerGeneratedAttribute]
private static bool <ConvertToSql>b__1b(KeyValuePair`2<MemberInfo, Expression> m);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<SqlInfo> <ConvertToSql>b__1d(SqlInfo[] mm);
    [CompilerGeneratedAttribute]
private static SqlInfo <ConvertToSql>b__1e(SqlInfo[] mm, SqlInfo m);
    [CompilerGeneratedAttribute]
private SqlInfo <ConvertExpressions>b__2c(SqlInfo _);
    [CompilerGeneratedAttribute]
private static bool <ConvertToIndexInternal>b__32(MemberInfo m);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<SqlInfo> <ConvertToIndexInternal>b__34(<>f__AnonymousType0`2<SqlInfo[], MemberInfo> mm);
    [CompilerGeneratedAttribute]
private static SqlInfo <ConvertToIndexInternal>b__36(<>f__AnonymousType0`2<SqlInfo[], MemberInfo> mm, SqlInfo m);
    [CompilerGeneratedAttribute]
private static IBuildContext <GetContext>b__51();
}
internal class BLToolkit.Data.Linq.Builder.SelectManyBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
public abstract class BLToolkit.Data.Linq.Builder.SequenceContextBase : object {
    [CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <Lambda>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlQuery <SqlQuery>k__BackingField;
    [CLSCompliantAttribute("False")]
public string _sqlQueryText { get; }
    public IBuildContext Parent { get; public set; }
    public IBuildContext Sequence { get; public set; }
    public ExpressionBuilder Builder { get; public set; }
    public LambdaExpression Lambda { get; public set; }
    public SqlQuery SqlQuery { get; public set; }
    private Expression BLToolkit.Data.Linq.Builder.IBuildContext.Expression { get; }
    protected SequenceContextBase(IBuildContext parent, IBuildContext sequence, LambdaExpression lambda);
    public sealed virtual string get__sqlQueryText();
    [CompilerGeneratedAttribute]
public sealed virtual IBuildContext get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IBuildContext value);
    [CompilerGeneratedAttribute]
public IBuildContext get_Sequence();
    [CompilerGeneratedAttribute]
public void set_Sequence(IBuildContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ExpressionBuilder get_Builder();
    [CompilerGeneratedAttribute]
public void set_Builder(ExpressionBuilder value);
    [CompilerGeneratedAttribute]
public LambdaExpression get_Lambda();
    [CompilerGeneratedAttribute]
public void set_Lambda(LambdaExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual SqlQuery get_SqlQuery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SqlQuery(SqlQuery value);
    private sealed virtual override Expression BLToolkit.Data.Linq.Builder.IBuildContext.get_Expression();
    public virtual void BuildQuery(Query`1<T> query, ParameterExpression queryParameter);
    public abstract virtual Expression BuildExpression(Expression expression, int level);
    public abstract virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public abstract virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    public abstract virtual bool IsExpression(Expression expression, int level, RequestFor requestFlag);
    public abstract virtual IBuildContext GetContext(Expression expression, int level, BuildInfo buildInfo);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    public virtual void SetAlias(string alias);
    public virtual ISqlExpression GetSubQuery(IBuildContext context);
    protected bool IsSubQuery();
}
public class BLToolkit.Data.Linq.Builder.SequenceConvertInfo : object {
    public ParameterExpression Parameter;
    public Expression Expression;
    public List`1<SequenceConvertPath> ExpressionsToReplace;
}
[DebuggerDisplayAttribute("Path = {Path}, Expr = {Expr}, Level = {Level}")]
public class BLToolkit.Data.Linq.Builder.SequenceConvertPath : object {
    [NotNullAttribute]
public Expression Path;
    [NotNullAttribute]
public Expression Expr;
    public int Level;
}
public class BLToolkit.Data.Linq.Builder.SqlInfo : object {
    public ISqlExpression Sql;
    public SqlQuery Query;
    public int Index;
    public MemberInfo Member;
}
internal class BLToolkit.Data.Linq.Builder.SubQueryContext : PassThroughContext {
    public IBuildContext SubQuery;
    protected Dictionary`2<ISqlExpression, int> ColumnIndexes;
    [CompilerGeneratedAttribute]
private SqlQuery <SqlQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private IBuildContext <Parent>k__BackingField;
    public SqlQuery SqlQuery { get; public set; }
    public IBuildContext Parent { get; public set; }
    public SubQueryContext(IBuildContext subQuery, SqlQuery sqlQuery, bool addToSql);
    public SubQueryContext(IBuildContext subQuery, bool addToSql);
    public SubQueryContext(IBuildContext subQuery);
    [CompilerGeneratedAttribute]
public virtual SqlQuery get_SqlQuery();
    [CompilerGeneratedAttribute]
public virtual void set_SqlQuery(SqlQuery value);
    [CompilerGeneratedAttribute]
public virtual IBuildContext get_Parent();
    [CompilerGeneratedAttribute]
public virtual void set_Parent(IBuildContext value);
    public virtual SqlInfo[] ConvertToSql(Expression expression, int level, ConvertFlags flags);
    public virtual SqlInfo[] ConvertToIndex(Expression expression, int level, ConvertFlags flags);
    public virtual bool IsExpression(Expression expression, int level, RequestFor testFlag);
    protected virtual int GetIndex(Column column);
    public virtual int ConvertToParentIndex(int index, IBuildContext context);
    public virtual void SetAlias(string alias);
    public virtual ISqlExpression GetSubQuery(IBuildContext context);
    [CompilerGeneratedAttribute]
private SqlInfo <ConvertToSql>b__67(SqlInfo idx);
    [CompilerGeneratedAttribute]
private SqlInfo <ConvertToIndex>b__68(SqlInfo idx);
}
internal class BLToolkit.Data.Linq.Builder.TableAttributeBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
internal class BLToolkit.Data.Linq.Builder.TableBuilder : object {
    [CompilerGeneratedAttribute]
private int <BLToolkit.Data.Linq.Builder.ISequenceBuilder.BuildCounter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<int, IBuildContext, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private int BLToolkit.Data.Linq.Builder.ISequenceBuilder.BuildCounter { get; private set; }
    [CompilerGeneratedAttribute]
private sealed virtual override int BLToolkit.Data.Linq.Builder.ISequenceBuilder.get_BuildCounter();
    [CompilerGeneratedAttribute]
private sealed virtual override void BLToolkit.Data.Linq.Builder.ISequenceBuilder.set_BuildCounter(int value);
    private static T Find(ExpressionBuilder builder, BuildInfo buildInfo, Func`3<int, IBuildContext, T> action);
    public sealed virtual bool CanBuild(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual IBuildContext BuildSequence(ExpressionBuilder builder, BuildInfo buildInfo);
    public sealed virtual SequenceConvertInfo Convert(ExpressionBuilder builder, BuildInfo buildInfo, ParameterExpression param);
    [CompilerGeneratedAttribute]
private static bool <CanBuild>b__0(int n, IBuildContext _);
}
internal class BLToolkit.Data.Linq.Builder.TakeSkipBuilder : MethodCallBuilder {
    [CompilerGeneratedAttribute]
private static Predicate`1<ICloneableElement> CS$<>9__CachedAnonymousMethodDelegate3;
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    private static void BuildTake(ExpressionBuilder builder, IBuildContext sequence, ISqlExpression expr);
    private static void BuildSkip(ExpressionBuilder builder, IBuildContext sequence, ISqlExpression prevSkipValue, ISqlExpression expr);
    [CompilerGeneratedAttribute]
private static bool <BuildTake>b__1(ICloneableElement _);
}
internal class BLToolkit.Data.Linq.Builder.UpdateBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
    internal static void BuildSetter(ExpressionBuilder builder, BuildInfo buildInfo, LambdaExpression setter, IBuildContext into, IBuildContext sequence);
    internal static void ParseSet(ExpressionBuilder builder, BuildInfo buildInfo, LambdaExpression extract, LambdaExpression update, IBuildContext select);
    internal static void ParseSet(ExpressionBuilder builder, BuildInfo buildInfo, LambdaExpression extract, Expression update, IBuildContext select);
}
internal class BLToolkit.Data.Linq.Builder.WhereBuilder : MethodCallBuilder {
    protected virtual bool CanBuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual IBuildContext BuildMethodCall(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo);
    protected virtual SequenceConvertInfo Convert(ExpressionBuilder builder, MethodCallExpression methodCall, BuildInfo buildInfo, ParameterExpression param);
}
public class BLToolkit.Data.Linq.CompiledQuery : object {
    private object _sync;
    private LambdaExpression _query;
    private Func`2<Object[], object> _compiledQuery;
    protected CompiledQuery(LambdaExpression query);
    private TResult ExecuteQuery(Object[] args);
    private static Func`2<Object[], object> CompileQuery(LambdaExpression query);
    public TResult Invoke(TDC dataContext);
    public TResult Invoke(TDC dataContext, T1 arg1);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2, T3 arg3);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public TResult Invoke(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public static Func`2<TDC, TResult> Compile(Expression`1<Func`2<TDC, TResult>> query);
    public static Func`3<TDC, TArg1, TResult> Compile(Expression`1<Func`3<TDC, TArg1, TResult>> query);
    public static Func`4<TDC, TArg1, TArg2, TResult> Compile(Expression`1<Func`4<TDC, TArg1, TArg2, TResult>> query);
    public static Func`5<TDC, TArg1, TArg2, TArg3, TResult> Compile(Expression`1<Func`5<TDC, TArg1, TArg2, TArg3, TResult>> query);
    public static Func`6<TDC, TArg1, TArg2, TArg3, TArg4, TResult> Compile(Expression`1<Func`6<TDC, TArg1, TArg2, TArg3, TArg4, TResult>> query);
    public static Func`7<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile(Expression`1<Func`7<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query);
}
internal class BLToolkit.Data.Linq.CompiledTable`1 : object {
    private LambdaExpression _lambda;
    private Expression _expression;
    private object _sync;
    private string _lastContextID;
    private MappingSchema _lastMappingSchema;
    private Query`1<T> _lastQuery;
    private Dictionary`2<object, Query`1<T>> _infos;
    public CompiledTable`1(LambdaExpression lambda, Expression expression);
    private Query`1<T> GetInfo(IDataContext dataContext);
    public IQueryable`1<T> Create(Object[] parameters);
    public T Execute(Object[] parameters);
}
public class BLToolkit.Data.Linq.DataContext : object {
    private bool _keepConnectionAlive;
    internal int LockDbManagerCounter;
    private string _connectionString;
    private DbManager _dbManager;
    private EventHandler OnClosing;
    [CompilerGeneratedAttribute]
private string <ConfigurationString>k__BackingField;
    [CompilerGeneratedAttribute]
private DataProviderBase <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextID>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastQuery>k__BackingField;
    public string ConfigurationString { get; private set; }
    public DataProviderBase DataProvider { get; private set; }
    public string ContextID { get; public set; }
    public MappingSchema MappingSchema { get; public set; }
    public string LastQuery { get; public set; }
    public bool KeepConnectionAlive { get; public set; }
    private Func`1<ISqlProvider> BLToolkit.Data.Linq.IDataContext.CreateSqlProvider { get; }
    public DataContext(string configurationString);
    private DataContext(int n);
    [CompilerGeneratedAttribute]
public string get_ConfigurationString();
    [CompilerGeneratedAttribute]
private void set_ConfigurationString(string value);
    [CompilerGeneratedAttribute]
public DataProviderBase get_DataProvider();
    [CompilerGeneratedAttribute]
private void set_DataProvider(DataProviderBase value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContextID();
    [CompilerGeneratedAttribute]
public void set_ContextID(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public void set_MappingSchema(MappingSchema value);
    [CompilerGeneratedAttribute]
public string get_LastQuery();
    [CompilerGeneratedAttribute]
public void set_LastQuery(string value);
    public bool get_KeepConnectionAlive();
    public void set_KeepConnectionAlive(bool value);
    internal DbManager GetDBManager();
    internal void ReleaseQuery();
    private sealed virtual override Func`1<ISqlProvider> BLToolkit.Data.Linq.IDataContext.get_CreateSqlProvider();
    private sealed virtual override object BLToolkit.Data.Linq.IDataContext.SetQuery(IQueryContext queryContext);
    private sealed virtual override int BLToolkit.Data.Linq.IDataContext.ExecuteNonQuery(object query);
    private sealed virtual override object BLToolkit.Data.Linq.IDataContext.ExecuteScalar(object query);
    private sealed virtual override IDataReader BLToolkit.Data.Linq.IDataContext.ExecuteReader(object query);
    private sealed virtual override void BLToolkit.Data.Linq.IDataContext.ReleaseQuery(object query);
    private sealed virtual override string BLToolkit.Data.Linq.IDataContext.GetSqlText(object query);
    private sealed virtual override IDataContext BLToolkit.Data.Linq.IDataContext.Clone();
    public sealed virtual void add_OnClosing(EventHandler value);
    public sealed virtual void remove_OnClosing(EventHandler value);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class BLToolkit.Data.Linq.DataContextInfo : object {
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposeContext>k__BackingField;
    public IDataContext DataContext { get; private set; }
    public bool DisposeContext { get; private set; }
    public string ContextID { get; }
    public MappingSchema MappingSchema { get; }
    public DataContextInfo(IDataContext dataContext);
    public DataContextInfo(IDataContext dataContext, bool disposeContext);
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
private void set_DataContext(IDataContext value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisposeContext();
    [CompilerGeneratedAttribute]
private void set_DisposeContext(bool value);
    public sealed virtual string get_ContextID();
    public sealed virtual MappingSchema get_MappingSchema();
    public sealed virtual ISqlProvider CreateSqlProvider();
    public sealed virtual IDataContextInfo Clone();
    public static IDataContextInfo Create(IDataContext dataContext);
}
public class BLToolkit.Data.Linq.DataContextTransaction : object {
    private int _transactionCounter;
    [CompilerGeneratedAttribute]
private DataContext <DataContext>k__BackingField;
    public DataContext DataContext { get; public set; }
    public DataContextTransaction(DataContext dataContext);
    [CompilerGeneratedAttribute]
public DataContext get_DataContext();
    [CompilerGeneratedAttribute]
public void set_DataContext(DataContext value);
    public void BeginTransaction();
    public void BeginTransaction(IsolationLevel level);
    public void CommitTransaction();
    public void RollbackTransaction();
    public sealed virtual void Dispose();
}
internal class BLToolkit.Data.Linq.DefaultDataContextInfo : object {
    private IDataContext _dataContext;
    private static DataProviderBase _dataProvider;
    public IDataContext DataContext { get; }
    public MappingSchema MappingSchema { get; }
    public bool DisposeContext { get; }
    public string ContextID { get; }
    private static DefaultDataContextInfo();
    public sealed virtual IDataContext get_DataContext();
    public sealed virtual MappingSchema get_MappingSchema();
    public sealed virtual bool get_DisposeContext();
    public sealed virtual string get_ContextID();
    public sealed virtual ISqlProvider CreateSqlProvider();
    public sealed virtual IDataContextInfo Clone();
}
internal class BLToolkit.Data.Linq.ExpressionQuery`1 : Table`1<T> {
    public string SqlText { get; }
    public ExpressionQuery`1(IDataContextInfo dataContext, Expression expression);
    public string get_SqlText();
    public virtual string ToString();
}
public static class BLToolkit.Data.Linq.Expressions : object {
    private static Dictionary`2<string, Dictionary`2<MemberInfo, LambdaExpression>> _members;
    public static Dictionary`2<string, Dictionary`2<MemberInfo, LambdaExpression>> Members { get; }
    private static Expressions();
    public static void MapMember(MemberInfo memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, MemberInfo memberInfo, LambdaExpression expression);
    public static void MapMember(Expression`1<Func`1<object>> memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, Expression`1<Func`1<object>> memberInfo, LambdaExpression expression);
    public static void MapMember(Expression`1<Func`2<T, object>> memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, Expression`1<Func`2<T, object>> memberInfo, LambdaExpression expression);
    public static void MapMember(string providerName, Expression`1<Func`1<TR>> memberInfo, Expression`1<Func`1<TR>> expression);
    public static void MapMember(Expression`1<Func`1<TR>> memberInfo, Expression`1<Func`1<TR>> expression);
    public static void MapMember(string providerName, Expression`1<Func`2<T1, TR>> memberInfo, Expression`1<Func`2<T1, TR>> expression);
    public static void MapMember(Expression`1<Func`2<T1, TR>> memberInfo, Expression`1<Func`2<T1, TR>> expression);
    public static void MapMember(string providerName, Expression`1<Func`3<T1, T2, TR>> memberInfo, Expression`1<Func`3<T1, T2, TR>> expression);
    public static void MapMember(Expression`1<Func`3<T1, T2, TR>> memberInfo, Expression`1<Func`3<T1, T2, TR>> expression);
    public static void MapMember(string providerName, Expression`1<Func`4<T1, T2, T3, TR>> memberInfo, Expression`1<Func`4<T1, T2, T3, TR>> expression);
    public static void MapMember(Expression`1<Func`4<T1, T2, T3, TR>> memberInfo, Expression`1<Func`4<T1, T2, T3, TR>> expression);
    public static void MapMember(string providerName, Expression`1<Func`5<T1, T2, T3, T4, TR>> memberInfo, Expression`1<Func`5<T1, T2, T3, T4, TR>> expression);
    public static void MapMember(Expression`1<Func`5<T1, T2, T3, T4, TR>> memberInfo, Expression`1<Func`5<T1, T2, T3, T4, TR>> expression);
    public static void MapMember(string providerName, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> memberInfo, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> expression);
    public static void MapMember(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> memberInfo, Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> expression);
    public static LambdaExpression ConvertMember(string providerName, MemberInfo mi);
    private static MemberInfo M(Expression`1<Func`2<T, object>> func);
    private static MemberInfo M(Expression`1<Func`1<object>> func);
    private static LambdaExpression L(Expression`1<Func`1<TR>> func);
    private static LambdaExpression L(Expression`1<Func`2<T1, TR>> func);
    private static LambdaExpression L(Expression`1<Func`3<T1, T2, TR>> func);
    private static LambdaExpression L(Expression`1<Func`4<T1, T2, T3, TR>> func);
    private static LambdaExpression L(Expression`1<Func`5<T1, T2, T3, T4, TR>> func);
    private static LambdaExpression L(Expression`1<Func`6<T1, T2, T3, T4, T5, TR>> func);
    private static LambdaExpression L(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TR>> func);
    public static Dictionary`2<string, Dictionary`2<MemberInfo, LambdaExpression>> get_Members();
    [SqlFunctionAttribute("RTrim", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public static string TrimRight(string str, Char[] trimChars);
    [CLSCompliantAttribute("False")]
[SqlFunctionAttribute("LTrim", "Mono.Cecil.CustomAttributeArgument[]")]
public static string TrimLeft(string str, Char[] trimChars);
    [SqlFunctionAttribute]
private static Nullable`1<int> ConvertToCaseCompareTo(string str, string value);
    [SqlFunctionAttribute]
private static string AltStuff(string str, Nullable`1<int> startLocation, Nullable`1<int> length, string value);
    [SqlFunctionAttribute]
private static string VarChar(object obj, Nullable`1<int> size);
    [SqlFunctionAttribute]
private static string Hex(Nullable`1<Guid> guid);
    [SqlFunctionAttribute("PostgreSQL", "Repeat")]
[SqlFunctionAttribute("Access", "String", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
[SqlFunctionAttribute]
[SqlFunctionAttribute("DB2", "Repeat")]
private static string Replicate(string str, Nullable`1<int> count);
    [CLSCompliantAttribute("False")]
[SqlFunctionAttribute("DB2", "Repeat")]
[SqlFunctionAttribute]
[SqlFunctionAttribute("PostgreSQL", "Repeat")]
[SqlFunctionAttribute("Access", "String", "Mono.Cecil.CustomAttributeArgument[]")]
private static string Replicate(Nullable`1<char> ch, Nullable`1<int> count);
    [SqlFunctionAttribute]
private static Nullable`1<DateTime> DateAdd(DateParts part, Nullable`1<int> number, Nullable`1<int> days);
    [SqlFunctionAttribute]
private static Nullable`1<decimal> Round(Nullable`1<decimal> value, int precision, int mode);
    [SqlFunctionAttribute]
private static Nullable`1<double> Round(Nullable`1<double> value, int precision, int mode);
    [SqlFunctionAttribute("Access", "DateSerial")]
private static Nullable`1<DateTime> MakeDateTime2(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [CLSCompliantAttribute("False")]
[SqlFunctionAttribute("Int", "Mono.Cecil.CustomAttributeArgument[]")]
private static T AccessInt(T value);
    [SqlFunctionAttribute("Round", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
private static T AccessRound(T value, Nullable`1<int> precision);
    [SqlFunctionAttribute("PI")]
private static decimal DecimalPI();
    [SqlFunctionAttribute("PI")]
private static double DoublePI();
    [SqlFunctionAttribute]
private static Nullable`1<DateTime> Mdy(Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> year);
}
[ExtensionAttribute]
public static class BLToolkit.Data.Linq.Extensions : object {
    [ExtensionAttribute]
public static Table`1<T> GetTable(IDataContext dataContext);
    [ExtensionAttribute]
public static Table`1<T> GetTable(IDataContext dataContext, object instance, MethodInfo methodInfo, Object[] parameters);
    [ExtensionAttribute]
public static Func`2<TDc, TResult> Compile(IDataContext dataContext, Expression`1<Func`2<TDc, TResult>> query);
    [ExtensionAttribute]
public static Func`3<TDc, TArg1, TResult> Compile(IDataContext dataContext, Expression`1<Func`3<TDc, TArg1, TResult>> query);
    [ExtensionAttribute]
public static Func`4<TDc, TArg1, TArg2, TResult> Compile(IDataContext dataContext, Expression`1<Func`4<TDc, TArg1, TArg2, TResult>> query);
    [ExtensionAttribute]
public static Func`5<TDc, TArg1, TArg2, TArg3, TResult> Compile(IDataContext dataContext, Expression`1<Func`5<TDc, TArg1, TArg2, TArg3, TResult>> query);
    [ExtensionAttribute]
public static int Insert(IDataContextInfo dataContextInfo, T obj);
    [ExtensionAttribute]
public static int Insert(IDataContext dataContext, T obj);
    [ExtensionAttribute]
public static int InsertBatch(DbManager dataContext, int maxBatchSize, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static int InsertBatch(DbManager dataContext, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static int InsertBatch(DbManager dataContext, T[] list);
    [ExtensionAttribute]
[ObsoleteAttribute("Use InsertBatch instead.")]
public static int Insert(DbManager dataContext, T[] list);
    [ObsoleteAttribute("Use InsertBatch instead.")]
[ExtensionAttribute]
public static int Insert(DbManager dataContext, int maxBatchSize, IEnumerable`1<T> list);
    [ObsoleteAttribute("Use InsertBatch instead.")]
[ExtensionAttribute]
public static int Insert(DbManager dataContext, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static object InsertWithIdentity(IDataContextInfo dataContextInfo, T obj);
    [ExtensionAttribute]
public static object InsertWithIdentity(IDataContext dataContext, T obj);
    [ExtensionAttribute]
public static int Update(IDataContextInfo dataContextInfo, T obj);
    [ExtensionAttribute]
public static int Update(IDataContext dataContext, T obj);
    [ExtensionAttribute]
public static int Update(DbManager dataContext, int maxBatchSize, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static int Update(DbManager dataContext, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static int Delete(IDataContextInfo dataContextInfo, T obj);
    [ExtensionAttribute]
public static int Delete(IDataContext dataContext, T obj);
    [ExtensionAttribute]
public static int Delete(DbManager dataContext, int maxBatchSize, IEnumerable`1<T> list);
    [ExtensionAttribute]
public static int Delete(DbManager dataContext, IEnumerable`1<T> list);
}
public interface BLToolkit.Data.Linq.IDataContext {
    public string ContextID { get; }
    public Func`1<ISqlProvider> CreateSqlProvider { get; }
    public abstract virtual string get_ContextID();
    public abstract virtual Func`1<ISqlProvider> get_CreateSqlProvider();
    public abstract virtual object SetQuery(IQueryContext queryContext);
    public abstract virtual int ExecuteNonQuery(object query);
    public abstract virtual object ExecuteScalar(object query);
    public abstract virtual IDataReader ExecuteReader(object query);
    public abstract virtual void ReleaseQuery(object query);
    public abstract virtual string GetSqlText(object query);
    public abstract virtual IDataContext Clone();
    public abstract virtual void add_OnClosing(EventHandler value);
    public abstract virtual void remove_OnClosing(EventHandler value);
}
public interface BLToolkit.Data.Linq.IDataContextInfo {
    public IDataContext DataContext { get; }
    public string ContextID { get; }
    public MappingSchema MappingSchema { get; }
    public bool DisposeContext { get; }
    public abstract virtual IDataContext get_DataContext();
    public abstract virtual string get_ContextID();
    public abstract virtual MappingSchema get_MappingSchema();
    public abstract virtual bool get_DisposeContext();
    public abstract virtual ISqlProvider CreateSqlProvider();
    public abstract virtual IDataContextInfo Clone();
}
internal interface BLToolkit.Data.Linq.IExpressionQuery {
}
[AttributeUsageAttribute("4")]
public class BLToolkit.Data.Linq.IgnoreIEnumerableAttribute : Attribute {
}
public interface BLToolkit.Data.Linq.IQueryContext {
    public SqlQuery SqlQuery { get; }
    public object Context { get; public set; }
    public abstract virtual SqlQuery get_SqlQuery();
    public abstract virtual object get_Context();
    public abstract virtual void set_Context(object value);
    public abstract virtual SqlParameter[] GetParameters();
}
public interface BLToolkit.Data.Linq.ISelectInsertable`2 {
}
public interface BLToolkit.Data.Linq.IUpdateable`1 {
}
public interface BLToolkit.Data.Linq.IValueInsertable`1 {
}
public class BLToolkit.Data.Linq.LinqException : Exception {
    [StringFormatMethodAttribute("args")]
public LinqException(string message, Object[] args);
    public LinqException(string message, Exception innerException);
    public LinqException(Exception innerException);
    protected LinqException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class BLToolkit.Data.Linq.LinqExtensions : object {
    [ExtensionAttribute]
public static Table`1<T> TableName(Table`1<T> table, string name);
    [ExtensionAttribute]
public static Table`1<T> DatabaseName(Table`1<T> table, string name);
    [ExtensionAttribute]
public static Table`1<T> OwnerName(Table`1<T> table, string name);
    [ExtensionAttribute]
public static T Select(IDataContext dataContext, Expression`1<Func`1<T>> selector);
    [ExtensionAttribute]
public static int Delete(IQueryable`1<T> source);
    [ExtensionAttribute]
public static int Delete(IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static int Update(IQueryable`1<TSource> source, Table`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> source, Expression`1<Func`2<T, T>> setter);
    [ExtensionAttribute]
public static int Update(IQueryable`1<T> source, Expression`1<Func`2<T, bool>> predicate, Expression`1<Func`2<T, T>> setter);
    [ExtensionAttribute]
public static int Update(IUpdateable`1<T> source);
    [ExtensionAttribute]
public static IUpdateable`1<T> Set(IQueryable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`2<T, TV>> update);
    [ExtensionAttribute]
public static IUpdateable`1<T> Set(IUpdateable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`2<T, TV>> update);
    [ExtensionAttribute]
public static IUpdateable`1<T> Set(IQueryable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`1<TV>> update);
    [ExtensionAttribute]
public static IUpdateable`1<T> Set(IUpdateable`1<T> source, Expression`1<Func`2<T, TV>> extract, Expression`1<Func`1<TV>> update);
    [ExtensionAttribute]
public static IUpdateable`1<T> Set(IQueryable`1<T> source, Expression`1<Func`2<T, TV>> extract, TV value);
    [ExtensionAttribute]
public static IUpdateable`1<T> Set(IUpdateable`1<T> source, Expression`1<Func`2<T, TV>> extract, TV value);
    [ExtensionAttribute]
public static int Insert(Table`1<T> target, Expression`1<Func`1<T>> setter);
    [ExtensionAttribute]
public static object InsertWithIdentity(Table`1<T> target, Expression`1<Func`1<T>> setter);
    [ExtensionAttribute]
public static IValueInsertable`1<T> Into(IDataContext dataContext, Table`1<T> target);
    [ExtensionAttribute]
public static IValueInsertable`1<T> Value(Table`1<T> source, Expression`1<Func`2<T, TV>> field, Expression`1<Func`1<TV>> value);
    [ExtensionAttribute]
public static IValueInsertable`1<T> Value(Table`1<T> source, Expression`1<Func`2<T, TV>> field, TV value);
    [ExtensionAttribute]
public static IValueInsertable`1<T> Value(IValueInsertable`1<T> source, Expression`1<Func`2<T, TV>> field, Expression`1<Func`1<TV>> value);
    [ExtensionAttribute]
public static IValueInsertable`1<T> Value(IValueInsertable`1<T> source, Expression`1<Func`2<T, TV>> field, TV value);
    [ExtensionAttribute]
public static int Insert(IValueInsertable`1<T> source);
    [ExtensionAttribute]
public static object InsertWithIdentity(IValueInsertable`1<T> source);
    [ExtensionAttribute]
public static int Insert(IQueryable`1<TSource> source, Table`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static object InsertWithIdentity(IQueryable`1<TSource> source, Table`1<TTarget> target, Expression`1<Func`2<TSource, TTarget>> setter);
    [ExtensionAttribute]
public static ISelectInsertable`2<TSource, TTarget> Into(IQueryable`1<TSource> source, Table`1<TTarget> target);
    [ExtensionAttribute]
public static ISelectInsertable`2<TSource, TTarget> Value(ISelectInsertable`2<TSource, TTarget> source, Expression`1<Func`2<TTarget, TValue>> field, Expression`1<Func`2<TSource, TValue>> value);
    [ExtensionAttribute]
public static ISelectInsertable`2<TSource, TTarget> Value(ISelectInsertable`2<TSource, TTarget> source, Expression`1<Func`2<TTarget, TValue>> field, Expression`1<Func`1<TValue>> value);
    [ExtensionAttribute]
public static ISelectInsertable`2<TSource, TTarget> Value(ISelectInsertable`2<TSource, TTarget> source, Expression`1<Func`2<TTarget, TValue>> field, TValue value);
    [ExtensionAttribute]
public static int Insert(ISelectInsertable`2<TSource, TTarget> source);
    [ExtensionAttribute]
public static object InsertWithIdentity(ISelectInsertable`2<TSource, TTarget> source);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, Expression`1<Func`1<int>> count);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Skip(IQueryable`1<TSource> source, Expression`1<Func`1<int>> count);
    [ExtensionAttribute]
public static TSource ElementAt(IQueryable`1<TSource> source, Expression`1<Func`1<int>> index);
    [ExtensionAttribute]
public static TSource ElementAtOrDefault(IQueryable`1<TSource> source, Expression`1<Func`1<int>> index);
}
[AttributeUsageAttribute("192")]
public class BLToolkit.Data.Linq.MethodExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SqlProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string SqlProvider { get; public set; }
    public string MethodName { get; public set; }
    public MethodExpressionAttribute(string methodName);
    public MethodExpressionAttribute(string sqlProvider, string methodName);
    [CompilerGeneratedAttribute]
public string get_SqlProvider();
    [CompilerGeneratedAttribute]
public void set_SqlProvider(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
}
public class BLToolkit.Data.Linq.ParameterAccessor : object {
    public Expression Expression;
    public Func`3<Expression, Object[], object> Accessor;
    public SqlParameter SqlParameter;
}
public abstract class BLToolkit.Data.Linq.Query : object {
    public string ContextID;
    public Expression Expression;
    public MappingSchema MappingSchema;
    private Dictionary`2<Expression, Func`2<Expression, IQueryable>> _queryableAccessorDic;
    private List`1<Func`2<Expression, IQueryable>> _queryableAccessorList;
    public abstract virtual void Init(IBuildContext parseContext, List`1<ParameterAccessor> sqlParameters);
    public bool Compare(string contextID, MappingSchema mappingSchema, Expression expr);
    public int AddQueryableAccessors(Expression expr, Expression`1<Func`2<Expression, IQueryable>> qe);
    public Expression GetIQueryable(int n, Expression expr);
}
public class BLToolkit.Data.Linq.Query`1 : Query {
    private static int CacheSize;
    public Query`1<T> Next;
    public ParameterExpression[] CompiledParameters;
    public List`1<QueryInfo<T>> Queries;
    public Func`1<ISqlProvider> CreateSqlProvider;
    private ISqlProvider _sqlProvider;
    public Func`5<QueryContext, IDataContextInfo, Expression, Object[], object> GetElement;
    public Func`5<QueryContext, IDataContextInfo, Expression, Object[], IEnumerable`1<T>> GetIEnumerable;
    private static Query`1<T> _first;
    private static object _sync;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<ParameterAccessor, int>, int> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<ParameterAccessor, int>, ParameterAccessor> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<SqlField, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    public ISqlProvider SqlProvider { get; }
    private static Query`1();
    public virtual void Init(IBuildContext parseContext, List`1<ParameterAccessor> sqlParameters);
    public ISqlProvider get_SqlProvider();
    private IEnumerable`1<T> MakeEnumerable(QueryContext qc, IDataContextInfo dci, Expression expr, Object[] ps);
    public static Query`1<T> GetQuery(IDataContextInfo dataContextInfo, Expression expr);
    private static Query`1<T> FindQuery(IDataContextInfo dataContextInfo, Expression expr);
    private void FinalizeQuery();
    public void SetNonQueryQuery();
    private int NonQueryQuery(IDataContextInfo dataContextInfo, Expression expr, Object[] parameters);
    public void SetScalarQuery();
    private TS ScalarQuery(IDataContextInfo dataContextInfo, Expression expr, Object[] parameters);
    private int GetParameterIndex(ISqlExpression parameter);
    private IEnumerable`1<IDataReader> RunQuery(IDataContextInfo dataContextInfo, Expression expr, Object[] parameters, int queryNumber);
    private object SetCommand(IDataContext dataContext, Expression expr, Object[] parameters, int idx);
    private void SetParameters(Expression expr, Object[] parameters, int idx);
    public string GetSqlText(IDataContext dataContext, Expression expr, Object[] parameters, int idx);
    private static object ConvertNullable(TT value, TT defaultValue);
    private static ParameterAccessor GetParameter(IDataContext dataContext, SqlField field);
    public static int Insert(IDataContextInfo dataContextInfo, T obj);
    public static object InsertWithIdentity(IDataContextInfo dataContextInfo, T obj);
    public static int Update(IDataContextInfo dataContextInfo, T obj);
    public static int Delete(IDataContextInfo dataContextInfo, T obj);
    public void SetElementQuery(Func`6<QueryContext, IDataContext, IDataReader, Expression, Object[], object> mapper);
    private TE RunQuery(QueryContext ctx, IDataContextInfo dataContextInfo, Expression expr, Object[] parameters, Func`6<QueryContext, IDataContext, IDataReader, Expression, Object[], TE> mapper);
    internal void SetQuery(Func`6<QueryContext, IDataContext, IDataReader, Expression, Object[], T> mapper);
    private static IEnumerable`1<T> Map(IEnumerable`1<IDataReader> data, QueryContext queryContext, IDataContextInfo dataContextInfo, Expression expr, Object[] ps, Func`6<QueryContext, IDataContext, IDataReader, Expression, Object[], T> mapper);
    [CompilerGeneratedAttribute]
private static int <FinalizeQuery>b__5(<>f__AnonymousType2`2<ParameterAccessor, int> p);
    [CompilerGeneratedAttribute]
private static ParameterAccessor <FinalizeQuery>b__6(<>f__AnonymousType2`2<ParameterAccessor, int> p);
    [CompilerGeneratedAttribute]
private object <SetNonQueryQuery>b__c(QueryContext ctx, IDataContextInfo db, Expression expr, Object[] ps);
    [CompilerGeneratedAttribute]
private object <SetScalarQuery>b__d(QueryContext ctx, IDataContextInfo db, Expression expr, Object[] ps);
    [CompilerGeneratedAttribute]
private static bool <Update>b__20(SqlField f);
}
public class BLToolkit.Data.Linq.QueryContext : object {
    public IDataContextInfo RootDataContext;
    public Expression Expression;
    public Object[] CompiledParameters;
    public int Counter;
    private List`1<DataContextContext> _contexts;
    public QueryContext(IDataContextInfo dataContext, Expression expr, Object[] compiledParameters);
    public DataContextContext GetDataContext();
    public void ReleaseDataContext(DataContextContext context);
    private void OnRootClosing(object sender, EventArgs e);
    public void AfterQuery();
}
public class BLToolkit.Data.Linq.ReflectionHelper : object {
    public static MethodInfo ExprItem;
    public static MethodInfo ParamItem;
    public static MethodInfo ElemItem;
    private static ReflectionHelper();
    public static MemberInfo MemeberInfo(LambdaExpression func);
}
public static class BLToolkit.Data.Linq.Settings : object {
    public static Func`2<string, IDataContext> CreateDefaultDataContext;
    [CompilerGeneratedAttribute]
private static Func`2<string, IDataContext> CS$<>9__CachedAnonymousMethodDelegate1;
    private static Settings();
    [CompilerGeneratedAttribute]
private static IDataContext <.cctor>b__0(string config);
}
public static class BLToolkit.Data.Linq.Sql : object {
    [SqlPropertyAttribute("SQLite", "Boolean")]
[SqlPropertyAttribute("MySql", "Boolean")]
[SqlPropertyAttribute("Bit")]
[SqlPropertyAttribute("Informix", "Boolean")]
[SqlPropertyAttribute("PostgreSQL", "Boolean")]
public static bool Bit { get; }
    [SqlPropertyAttribute("Oracle", "Number(19)")]
[SqlPropertyAttribute("BigInt")]
public static long BigInt { get; }
    [SqlPropertyAttribute("MySql", "Signed")]
[SqlPropertyAttribute("Int")]
public static int Int { get; }
    [SqlPropertyAttribute("MySql", "Signed")]
[SqlPropertyAttribute("SmallInt")]
public static short SmallInt { get; }
    [SqlPropertyAttribute("Informix", "SmallInt")]
[SqlPropertyAttribute("DB2", "SmallInt")]
[SqlPropertyAttribute("DB2", "SmallInt")]
[SqlPropertyAttribute("Firebird", "SmallInt")]
[SqlPropertyAttribute("Oracle", "Number(3)")]
[SqlPropertyAttribute("PostgreSQL", "SmallInt")]
[SqlPropertyAttribute("MySql", "Unsigned")]
[SqlPropertyAttribute("TinyInt")]
public static byte TinyInt { get; }
    [SqlPropertyAttribute("Decimal")]
public static decimal DefaultDecimal { get; }
    [SqlPropertyAttribute("Firebird", "Decimal(18,4)")]
[SqlPropertyAttribute("PostgreSQL", "Decimal(19,4)")]
[SqlPropertyAttribute("Money")]
[SqlPropertyAttribute("Oracle", "Number(19,4)")]
[SqlPropertyAttribute("MySql", "Decimal(19,4)")]
public static decimal Money { get; }
    [SqlPropertyAttribute("Firebird", "Decimal(10,4)")]
[SqlPropertyAttribute("Informix", "Decimal(10,4)")]
[SqlPropertyAttribute("Oracle", "Number(10,4)")]
[SqlPropertyAttribute("SmallMoney")]
[SqlPropertyAttribute("PostgreSQL", "Decimal(10,4)")]
[SqlPropertyAttribute("MySql", "Decimal(10,4)")]
[SqlPropertyAttribute("SqlCe", "Decimal(10,4)")]
public static decimal SmallMoney { get; }
    [SqlPropertyAttribute("MySql", "Decimal(29,10)")]
[SqlPropertyAttribute("Float")]
public static double Float { get; }
    [SqlPropertyAttribute("Real")]
[SqlPropertyAttribute("MySql", "Decimal(29,10)")]
public static float Real { get; }
    [SqlPropertyAttribute("PostgreSQL", "TimeStamp")]
[SqlPropertyAttribute("Firebird", "TimeStamp")]
[SqlPropertyAttribute("DateTime")]
public static DateTime DateTime { get; }
    [SqlPropertyAttribute("PostgreSQL", "TimeStamp")]
[SqlPropertyAttribute("Firebird", "TimeStamp")]
[SqlPropertyAttribute("MySql", "DateTime")]
[SqlPropertyAttribute("SqlCe", "DateTime")]
[SqlPropertyAttribute("Sybase", "DateTime")]
[SqlPropertyAttribute("DateTime2")]
[SqlPropertyAttribute("MsSql2005", "DateTime")]
public static DateTime DateTime2 { get; }
    [SqlPropertyAttribute("PostgreSQL", "TimeStamp")]
[SqlPropertyAttribute("SmallDateTime")]
[SqlPropertyAttribute("Firebird", "TimeStamp")]
[SqlPropertyAttribute("MySql", "DateTime")]
[SqlPropertyAttribute("SqlCe", "DateTime")]
public static DateTime SmallDateTime { get; }
    [SqlPropertyAttribute("MsSql2005", "Datetime")]
[SqlPropertyAttribute("SqlCe", "Datetime")]
[SqlPropertyAttribute("Date")]
public static DateTime Date { get; }
    [SqlPropertyAttribute("Time")]
public static DateTime Time { get; }
    [SqlPropertyAttribute("Firebird", "TimeStamp")]
[SqlPropertyAttribute("MsSql2008", "DateTimeOffset")]
[SqlPropertyAttribute("PostgreSQL", "TimeStamp")]
[SqlPropertyAttribute("DateTime")]
public static DateTimeOffset DateTimeOffset { get; }
    [SqlPropertyAttribute("SqlCe", "NChar")]
[SqlPropertyAttribute("Char")]
public static string DefaultChar { get; }
    [SqlPropertyAttribute("VarChar")]
[SqlPropertyAttribute("MySql", "Char")]
[SqlPropertyAttribute("SqlCe", "NVarChar")]
public static string DefaultVarChar { get; }
    [SqlPropertyAttribute("NChar")]
[SqlPropertyAttribute("DB2", "Char")]
public static string DefaultNChar { get; }
    [SqlPropertyAttribute("DB2", "Char")]
[SqlPropertyAttribute("PostgreSQL", "VarChar")]
[SqlPropertyAttribute("Firebird", "VarChar")]
[SqlPropertyAttribute("NVarChar")]
[SqlPropertyAttribute("MySql", "Char")]
[SqlPropertyAttribute("Oracle", "VarChar2")]
public static string DefaultNVarChar { get; }
    [SqlFunctionAttribute("SqlCe", "GetDate")]
[SqlPropertyAttribute("Informix", "CURRENT")]
[SqlFunctionAttribute("Sybase", "GetDate")]
[SqlPropertyAttribute("CURRENT_TIMESTAMP")]
[SqlPropertyAttribute("Access", "Now")]
public static DateTime CurrentTimestamp { get; }
    [SqlPropertyAttribute("Access", "Now")]
[SqlPropertyAttribute("Informix", "CURRENT")]
[SqlFunctionAttribute("Sybase", "GetDate")]
[SqlPropertyAttribute("CURRENT_TIMESTAMP")]
[SqlFunctionAttribute("SqlCe", "GetDate")]
public static DateTime CurrentTimestamp2 { get; }
    [SqlPropertyAttribute("@@DATEFIRST")]
public static int DateFirst { get; }
    [CLSCompliantAttribute("False")]
[SqlExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T AsSql(T obj);
    [SqlExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use AsSql instead.")]
[CLSCompliantAttribute("False")]
public static T OnServer(T obj);
    [CLSCompliantAttribute("False")]
[SqlExpressionAttribute("{0}", "Mono.Cecil.CustomAttributeArgument[]")]
public static T ConvertNullable(Nullable`1<T> value);
    [SqlFunctionAttribute("MySql", "Uuid")]
[SqlFunctionAttribute("Oracle", "Sys_Guid")]
[SqlFunctionAttribute("Firebird", "Gen_Uuid")]
[SqlExpressionAttribute("Sybase", "NewID(1)")]
[SqlFunctionAttribute("NewID")]
public static Guid NewGuid();
    [SqlFunctionAttribute("Convert", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public static TTo Convert(TTo to, TFrom from);
    [SqlFunctionAttribute("Convert", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
public static TTo Convert(TTo to, TFrom from, int format);
    [CLSCompliantAttribute("False")]
[SqlFunctionAttribute("Convert", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo Convert2(TTo to, TFrom from);
    [CLSCompliantAttribute("False")]
[SqlFunctionAttribute("$Convert$", "Mono.Cecil.CustomAttributeArgument[]")]
public static TTo Convert(TFrom obj);
    [SqlExpressionAttribute("{0}")]
public static Nullable`1<TimeSpan> DateToTime(Nullable`1<DateTime> date);
    public static bool get_Bit();
    public static long get_BigInt();
    public static int get_Int();
    public static short get_SmallInt();
    public static byte get_TinyInt();
    public static decimal get_DefaultDecimal();
    [SqlFunctionAttribute]
public static decimal Decimal(int precision);
    [SqlFunctionAttribute]
public static decimal Decimal(int precision, int scale);
    public static decimal get_Money();
    public static decimal get_SmallMoney();
    public static double get_Float();
    public static float get_Real();
    public static DateTime get_DateTime();
    public static DateTime get_DateTime2();
    public static DateTime get_SmallDateTime();
    public static DateTime get_Date();
    public static DateTime get_Time();
    public static DateTimeOffset get_DateTimeOffset();
    [SqlFunctionAttribute]
[SqlFunctionAttribute("SqlCe", "NChar")]
public static string Char(int length);
    public static string get_DefaultChar();
    [SqlFunctionAttribute("MySql", "Char")]
[SqlFunctionAttribute("SqlCe", "NVarChar")]
[SqlFunctionAttribute]
public static string VarChar(int length);
    public static string get_DefaultVarChar();
    [SqlFunctionAttribute]
[SqlFunctionAttribute("DB2", "Char")]
public static string NChar(int length);
    public static string get_DefaultNChar();
    [SqlFunctionAttribute("Oracle", "VarChar2")]
[SqlFunctionAttribute("DB2", "Char")]
[SqlFunctionAttribute]
[SqlFunctionAttribute("Firebird", "VarChar")]
[SqlFunctionAttribute("PostgreSQL", "VarChar")]
[SqlFunctionAttribute("MySql", "Char")]
public static string NVarChar(int length);
    public static string get_DefaultNVarChar();
    [SqlFunctionAttribute("Sybase", "Len")]
[SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Len")]
[SqlFunctionAttribute("Firebird", "Char_Length")]
[SqlFunctionAttribute("MsSql2005", "Len")]
[SqlFunctionAttribute("MsSql2008", "Len")]
[SqlFunctionAttribute("SqlCe", "Len")]
public static Nullable`1<int> Length(string str);
    [SqlFunctionAttribute("Oracle", "Substr")]
[SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Mid")]
[SqlFunctionAttribute("DB2", "Substr")]
[SqlFunctionAttribute("Informix", "Substr")]
[SqlFunctionAttribute("SQLite", "Substr")]
[SqlExpressionAttribute("Firebird", "Substring({0} from {1} for {2})")]
public static string Substring(string str, Nullable`1<int> startIndex, Nullable`1<int> length);
    [SqlFunctionAttribute]
public static bool Like(string matchExpression, string pattern);
    [SqlFunctionAttribute]
public static bool Like(string matchExpression, string pattern, Nullable`1<char> escapeCharacter);
    [SqlFunctionAttribute("MySql", "Locate")]
[SqlFunctionAttribute("DB2", "Locate")]
[SqlFunctionAttribute]
public static Nullable`1<int> CharIndex(string value, string str);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("DB2", "Locate")]
[SqlFunctionAttribute("MySql", "Locate")]
public static Nullable`1<int> CharIndex(string value, string str, Nullable`1<int> startLocation);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("MySql", "Locate")]
[SqlFunctionAttribute("DB2", "Locate")]
public static Nullable`1<int> CharIndex(Nullable`1<char> value, string str);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("DB2", "Locate")]
[SqlFunctionAttribute("MySql", "Locate")]
public static Nullable`1<int> CharIndex(Nullable`1<char> value, string str, Nullable`1<int> startLocation);
    [SqlFunctionAttribute]
public static string Reverse(string str);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("SQLite", "LeftStr")]
public static string Left(string str, Nullable`1<int> length);
    [SqlFunctionAttribute("SQLite", "RightStr")]
[SqlFunctionAttribute]
public static string Right(string str, Nullable`1<int> length);
    [SqlFunctionAttribute]
public static string Stuff(string str, Nullable`1<int> startLocation, Nullable`1<int> length, string value);
    [SqlFunctionAttribute]
public static string Space(Nullable`1<int> length);
    [SqlFunctionAttribute]
public static string PadLeft(string str, Nullable`1<int> totalWidth, Nullable`1<char> paddingChar);
    [SqlFunctionAttribute]
public static string PadRight(string str, Nullable`1<int> totalWidth, Nullable`1<char> paddingChar);
    [SqlFunctionAttribute("Sybase", "Str_Replace")]
[SqlFunctionAttribute]
public static string Replace(string str, string oldValue, string newValue);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("Sybase", "Str_Replace")]
public static string Replace(string str, Nullable`1<char> oldValue, Nullable`1<char> newValue);
    [SqlFunctionAttribute]
public static string Trim(string str);
    [SqlFunctionAttribute("LTrim")]
public static string TrimLeft(string str);
    [SqlFunctionAttribute("RTrim")]
public static string TrimRight(string str);
    [SqlExpressionAttribute("DB2", "Strip({0}, B, {1})")]
[SqlFunctionAttribute]
public static string Trim(string str, Nullable`1<char> ch);
    [SqlFunctionAttribute("LTrim")]
[SqlExpressionAttribute("DB2", "Strip({0}, L, {1})")]
public static string TrimLeft(string str, Nullable`1<char> ch);
    [SqlExpressionAttribute("DB2", "Strip({0}, T, {1})")]
[SqlFunctionAttribute("RTrim")]
public static string TrimRight(string str, Nullable`1<char> ch);
    [SqlFunctionAttribute("Access", "LCase")]
[SqlFunctionAttribute]
public static string Lower(string str);
    [SqlFunctionAttribute("Access", "UCase")]
[SqlFunctionAttribute]
public static string Upper(string str);
    [SqlPropertyAttribute("Informix", "CURRENT")]
[SqlPropertyAttribute("CURRENT_TIMESTAMP")]
[SqlPropertyAttribute("Access", "Now")]
public static DateTime GetDate();
    public static DateTime get_CurrentTimestamp();
    public static DateTime get_CurrentTimestamp2();
    [SqlFunctionAttribute]
public static Nullable`1<DateTime> ToDate(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> second, Nullable`1<int> millisecond);
    [SqlFunctionAttribute]
public static Nullable`1<DateTime> ToDate(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> second);
    [SqlFunctionAttribute]
public static Nullable`1<DateTime> ToDate(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [DatePartAttribute("MySql", "Date_Add({{1}}, Interval {{0}} {0})", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
[SqlFunctionAttribute]
[DatePartAttribute("Oracle", "Add{0}", "False", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("DB2", "{{1}} + {0}", "60", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("Informix", "{{1}} + Interval({0}", "60", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("PostgreSQL", "{{1}} + Interval '{{0}} {0}", "60", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("SQLite", "DateTime({{1}}, '{{0}} {0}')", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("Access", "DateAdd({0}, {{0}}, {{1}})", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
public static Nullable`1<DateTime> DateAdd(DateParts part, Nullable`1<double> number, Nullable`1<DateTime> date);
    [DatePartAttribute("SQLite", "Cast(StrFTime({0}, {{0}}) as int)", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
[SqlFunctionAttribute]
[DatePartAttribute("DB2", "{0}", "False", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("Informix", "{0}", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("MySql", "Extract({0} from {{0}})", "True", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("PostgreSQL", "Extract({0} from {{0}})", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("Firebird", "Extract({0} from {{0}})", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("Oracle", "To_Number(To_Char({{0}}, {0}))", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
[DatePartAttribute("Access", "DatePart({0}, {{0}})", "True", "Mono.Cecil.CustomAttributeArgument[]", "0", "Mono.Cecil.CustomAttributeArgument[]")]
public static Nullable`1<int> DatePart(DateParts part, Nullable`1<DateTime> date);
    [SqlFunctionAttribute("MySql", "TIMESTAMPDIFF")]
[CLSCompliantAttribute("False")]
[SqlFunctionAttribute]
public static Nullable`1<int> DateDiff(DateParts part, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int get_DateFirst();
    [SqlFunctionAttribute]
public static Nullable`1<DateTime> MakeDateTime(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day);
    [SqlFunctionAttribute]
public static Nullable`1<DateTime> MakeDateTime(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<int> second);
    [SqlFunctionAttribute]
public static Nullable`1<decimal> Abs(Nullable`1<decimal> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Abs(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<short> Abs(Nullable`1<short> value);
    [SqlFunctionAttribute]
public static Nullable`1<int> Abs(Nullable`1<int> value);
    [SqlFunctionAttribute]
public static Nullable`1<long> Abs(Nullable`1<long> value);
    [SqlFunctionAttribute]
[CLSCompliantAttribute("False")]
public static Nullable`1<sbyte> Abs(Nullable`1<sbyte> value);
    [SqlFunctionAttribute]
public static Nullable`1<float> Abs(Nullable`1<float> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Acos(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Asin(Nullable`1<double> value);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Atn")]
public static Nullable`1<double> Atan(Nullable`1<double> value);
    [SqlFunctionAttribute("DB2", "Atan2", "Mono.Cecil.CustomAttributeArgument[]")]
[CLSCompliantAttribute("False")]
[SqlFunctionAttribute("MsSql2008", "Atn2")]
[SqlFunctionAttribute("MsSql2005", "Atn2")]
[SqlFunctionAttribute("SqlCe", "Atn2")]
[SqlFunctionAttribute("Sybase", "Atn2")]
[SqlFunctionAttribute]
public static Nullable`1<double> Atan2(Nullable`1<double> x, Nullable`1<double> y);
    [SqlFunctionAttribute("Informix", "Ceil")]
[SqlFunctionAttribute("Oracle", "Ceil")]
[SqlFunctionAttribute]
public static Nullable`1<decimal> Ceiling(Nullable`1<decimal> value);
    [SqlFunctionAttribute("Informix", "Ceil")]
[SqlFunctionAttribute("Oracle", "Ceil")]
[SqlFunctionAttribute]
public static Nullable`1<double> Ceiling(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Cos(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Cosh(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Cot(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<decimal> Degrees(Nullable`1<decimal> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Degrees(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<short> Degrees(Nullable`1<short> value);
    [SqlFunctionAttribute]
public static Nullable`1<int> Degrees(Nullable`1<int> value);
    [SqlFunctionAttribute]
public static Nullable`1<long> Degrees(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
[SqlFunctionAttribute]
public static Nullable`1<sbyte> Degrees(Nullable`1<sbyte> value);
    [SqlFunctionAttribute]
public static Nullable`1<float> Degrees(Nullable`1<float> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Exp(Nullable`1<double> value);
    [SqlFunctionAttribute("Access", "Int")]
[SqlFunctionAttribute]
public static Nullable`1<decimal> Floor(Nullable`1<decimal> value);
    [SqlFunctionAttribute("Access", "Int")]
[SqlFunctionAttribute]
public static Nullable`1<double> Floor(Nullable`1<double> value);
    [SqlFunctionAttribute("Informix", "LogN")]
[SqlFunctionAttribute("Oracle", "Ln")]
[SqlFunctionAttribute("Firebird", "Ln")]
[SqlFunctionAttribute("PostgreSQL", "Ln")]
[SqlFunctionAttribute]
public static Nullable`1<decimal> Log(Nullable`1<decimal> value);
    [SqlFunctionAttribute("Firebird", "Ln")]
[SqlFunctionAttribute("Oracle", "Ln")]
[SqlFunctionAttribute("Informix", "LogN")]
[SqlFunctionAttribute("PostgreSQL", "Ln")]
[SqlFunctionAttribute]
public static Nullable`1<double> Log(Nullable`1<double> value);
    [SqlFunctionAttribute("PostgreSQL", "Log")]
[SqlFunctionAttribute]
public static Nullable`1<double> Log10(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Log(Nullable`1<double> newBase, Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<decimal> Log(Nullable`1<decimal> newBase, Nullable`1<decimal> value);
    [SqlExpressionAttribute("Access", "{0} ^ {1}")]
[SqlFunctionAttribute]
public static Nullable`1<double> Power(Nullable`1<double> x, Nullable`1<double> y);
    [SqlFunctionAttribute]
public static Nullable`1<decimal> RoundToEven(Nullable`1<decimal> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> RoundToEven(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<decimal> Round(Nullable`1<decimal> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Round(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<decimal> Round(Nullable`1<decimal> value, Nullable`1<int> precision);
    [SqlFunctionAttribute]
public static Nullable`1<double> Round(Nullable`1<double> value, Nullable`1<int> precision);
    [SqlFunctionAttribute]
public static Nullable`1<decimal> RoundToEven(Nullable`1<decimal> value, Nullable`1<int> precision);
    [SqlFunctionAttribute]
public static Nullable`1<double> RoundToEven(Nullable`1<double> value, Nullable`1<int> precision);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Sgn")]
public static Nullable`1<int> Sign(Nullable`1<decimal> value);
    [SqlFunctionAttribute("Access", "Sgn")]
[SqlFunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<double> value);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Sgn")]
public static Nullable`1<int> Sign(Nullable`1<short> value);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Sgn")]
public static Nullable`1<int> Sign(Nullable`1<int> value);
    [SqlFunctionAttribute("Access", "Sgn")]
[SqlFunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<long> value);
    [SqlFunctionAttribute("Access", "Sgn")]
[CLSCompliantAttribute("False")]
[SqlFunctionAttribute]
public static Nullable`1<int> Sign(Nullable`1<sbyte> value);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Sgn")]
public static Nullable`1<int> Sign(Nullable`1<float> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Sin(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Sinh(Nullable`1<double> value);
    [SqlFunctionAttribute]
[SqlFunctionAttribute("Access", "Sqr")]
public static Nullable`1<double> Sqrt(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Tan(Nullable`1<double> value);
    [SqlFunctionAttribute]
public static Nullable`1<double> Tanh(Nullable`1<double> value);
    [SqlExpressionAttribute("Oracle", "Trunc({0}, 0)")]
[SqlExpressionAttribute("DB2", "Truncate({0}, 0)")]
[SqlExpressionAttribute("Informix", "Trunc({0}, 0)")]
[SqlExpressionAttribute("MsSql2008", "Round({0}, 0, 1)")]
[SqlExpressionAttribute("Firebird", "Trunc({0}, 0)")]
[SqlExpressionAttribute("PostgreSQL", "Trunc({0}, 0)")]
[SqlExpressionAttribute("MySql", "Truncate({0}, 0)")]
[SqlExpressionAttribute("SqlCe", "Round({0}, 0, 1)")]
[SqlFunctionAttribute]
[SqlExpressionAttribute("MsSql2005", "Round({0}, 0, 1)")]
public static Nullable`1<decimal> Truncate(Nullable`1<decimal> value);
    [SqlExpressionAttribute("Informix", "Trunc({0}, 0)")]
[SqlExpressionAttribute("DB2", "Truncate({0}, 0)")]
[SqlExpressionAttribute("Oracle", "Trunc({0}, 0)")]
[SqlExpressionAttribute("Firebird", "Trunc({0}, 0)")]
[SqlExpressionAttribute("PostgreSQL", "Trunc({0}, 0)")]
[SqlExpressionAttribute("MySql", "Truncate({0}, 0)")]
[SqlExpressionAttribute("SqlCe", "Round({0}, 0, 1)")]
[SqlFunctionAttribute]
[SqlExpressionAttribute("MsSql2008", "Round({0}, 0, 1)")]
[SqlExpressionAttribute("MsSql2005", "Round({0}, 0, 1)")]
public static Nullable`1<double> Truncate(Nullable`1<double> value);
}
[AttributeUsageAttribute("16")]
public class BLToolkit.Data.Linq.SqlEnumAttribute : Attribute {
}
[AttributeUsageAttribute("192")]
public class BLToolkit.Data.Linq.SqlExpressionAttribute : SqlFunctionAttribute {
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    protected string Name { get; }
    public string Expression { get; public set; }
    public int Precedence { get; public set; }
    public SqlExpressionAttribute(string expression);
    public SqlExpressionAttribute(string expression, Int32[] argIndices);
    public SqlExpressionAttribute(string sqlProvider, string expression);
    public SqlExpressionAttribute(string sqlProvider, string expression, Int32[] argIndices);
    protected string get_Name();
    public string get_Expression();
    public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public int get_Precedence();
    [CompilerGeneratedAttribute]
public void set_Precedence(int value);
    public virtual ISqlExpression GetExpression(MemberInfo member, ISqlExpression[] args);
}
[AttributeUsageAttribute("192")]
public class BLToolkit.Data.Linq.SqlFunctionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SqlProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServerSideOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferServerSide>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ArgIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Type, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate3;
    public string SqlProvider { get; public set; }
    public string Name { get; public set; }
    public bool ServerSideOnly { get; public set; }
    public bool PreferServerSide { get; public set; }
    public Int32[] ArgIndices { get; public set; }
    public SqlFunctionAttribute(string name);
    public SqlFunctionAttribute(string name, Int32[] argIndices);
    public SqlFunctionAttribute(string sqlProvider, string name);
    public SqlFunctionAttribute(string sqlProvider, string name, Int32[] argIndices);
    [CompilerGeneratedAttribute]
public string get_SqlProvider();
    [CompilerGeneratedAttribute]
public void set_SqlProvider(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ServerSideOnly();
    [CompilerGeneratedAttribute]
public void set_ServerSideOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferServerSide();
    [CompilerGeneratedAttribute]
public void set_PreferServerSide(bool value);
    [CompilerGeneratedAttribute]
public Int32[] get_ArgIndices();
    [CompilerGeneratedAttribute]
public void set_ArgIndices(Int32[] value);
    protected ISqlExpression[] ConvertArgs(MemberInfo member, ISqlExpression[] args);
    public virtual ISqlExpression GetExpression(MemberInfo member, ISqlExpression[] args);
    [CompilerGeneratedAttribute]
private static ISqlExpression <ConvertArgs>b__0(Type t);
    [CompilerGeneratedAttribute]
private static ISqlExpression <ConvertArgs>b__1(Type t);
}
[AttributeUsageAttribute("192")]
public class BLToolkit.Data.Linq.SqlPropertyAttribute : SqlFunctionAttribute {
    public SqlPropertyAttribute(string name);
    public SqlPropertyAttribute(string sqlProvider, string name);
    public virtual ISqlExpression GetExpression(MemberInfo member, ISqlExpression[] args);
}
public class BLToolkit.Data.Linq.Table`1 : object {
    internal Query`1<T> Info;
    internal Object[] Parameters;
    [DebuggerBrowsableAttribute("0")]
private string _sqlTextHolder;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataContextInfo <DataContextInfo>k__BackingField;
    [NotNullAttribute]
public Expression Expression { get; public set; }
    [NotNullAttribute]
public IDataContextInfo DataContextInfo { get; public set; }
    [UsedImplicitlyAttribute]
private string _sqlText { get; }
    public string SqlText { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public Table`1(IDataContextInfo dataContextInfo, Expression expression);
    public Table`1(IDataContextInfo dataContextInfo);
    public Table`1(Expression expression);
    public Table`1(IDataContext dataContext);
    public Table`1(IDataContext dataContext, Expression expression);
    [CompilerGeneratedAttribute]
public Expression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Expression value);
    [CompilerGeneratedAttribute]
public IDataContextInfo get_DataContextInfo();
    [CompilerGeneratedAttribute]
public void set_DataContextInfo(IDataContextInfo value);
    private string get__sqlText();
    public string get_SqlText();
    private IEnumerable`1<T> Execute(IDataContextInfo dataContextInfo, Expression expression);
    private Query`1<T> GetQuery(Expression expression, bool cache);
    public virtual string ToString();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[AttributeUsageAttribute("64")]
public class BLToolkit.Data.Linq.TableExpressionAttribute : TableFunctionAttribute {
    protected string Name { get; }
    public string Expression { get; public set; }
    public TableExpressionAttribute(string expression);
    public TableExpressionAttribute(string expression, Int32[] argIndices);
    public TableExpressionAttribute(string sqlProvider, string expression);
    public TableExpressionAttribute(string sqlProvider, string expression, Int32[] argIndices);
    protected string get_Name();
    public string get_Expression();
    public void set_Expression(string value);
    public virtual void SetTable(SqlTable table, MemberInfo member, IEnumerable`1<Expression> arguments, IEnumerable`1<ISqlExpression> sqlArgs);
}
[AttributeUsageAttribute("64")]
public class BLToolkit.Data.Linq.TableFunctionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SqlProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ArgIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Type, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Type, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate3;
    public string SqlProvider { get; public set; }
    public string Name { get; public set; }
    public Int32[] ArgIndices { get; public set; }
    public TableFunctionAttribute(string name);
    public TableFunctionAttribute(string name, Int32[] argIndices);
    public TableFunctionAttribute(string sqlProvider, string name);
    public TableFunctionAttribute(string sqlProvider, string name, Int32[] argIndices);
    [CompilerGeneratedAttribute]
public string get_SqlProvider();
    [CompilerGeneratedAttribute]
public void set_SqlProvider(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_ArgIndices();
    [CompilerGeneratedAttribute]
public void set_ArgIndices(Int32[] value);
    protected ISqlExpression[] ConvertArgs(MemberInfo member, ISqlExpression[] args);
    public virtual void SetTable(SqlTable table, MemberInfo member, IEnumerable`1<Expression> arguments, IEnumerable`1<ISqlExpression> sqlArgs);
    [CompilerGeneratedAttribute]
private static ISqlExpression <ConvertArgs>b__0(Type t);
    [CompilerGeneratedAttribute]
private static ISqlExpression <ConvertArgs>b__1(Type t);
}
public class BLToolkit.Data.OperationExceptionEventArgs : OperationTypeEventArgs {
    private DataException _exception;
    public DataException Exception { get; }
    public OperationExceptionEventArgs(OperationType operation, DataException exception);
    public DataException get_Exception();
}
public class BLToolkit.Data.OperationExceptionEventHandler : MulticastDelegate {
    public OperationExceptionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OperationExceptionEventArgs ea);
    public virtual IAsyncResult BeginInvoke(object sender, OperationExceptionEventArgs ea, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum BLToolkit.Data.OperationType : Enum {
    public int value__;
    public static OperationType OpenConnection;
    public static OperationType CloseConnection;
    public static OperationType BeginTransaction;
    public static OperationType CommitTransaction;
    public static OperationType RollbackTransaction;
    public static OperationType DisposeTransaction;
    public static OperationType DeriveParameters;
    public static OperationType PrepareCommand;
    public static OperationType ExecuteNonQuery;
    [ObsoleteAttribute]
public static OperationType ExecuteScalar;
    public static OperationType ExecuteReader;
    public static OperationType Fill;
    public static OperationType Update;
}
public class BLToolkit.Data.OperationTypeEventArgs : EventArgs {
    private OperationType _operation;
    public OperationType Operation { get; }
    public OperationTypeEventArgs(OperationType operation);
    public OperationType get_Operation();
}
public class BLToolkit.Data.OperationTypeEventHandler : MulticastDelegate {
    public OperationTypeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OperationTypeEventArgs ea);
    public virtual IAsyncResult BeginInvoke(object sender, OperationTypeEventArgs ea, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum BLToolkit.Data.ScalarSourceType : Enum {
    public int value__;
    public static ScalarSourceType DataReader;
    public static ScalarSourceType OutputParameter;
    public static ScalarSourceType ReturnValue;
    public static ScalarSourceType AffectedRows;
}
public class BLToolkit.Data.Sql.ChildContainer`2 : Dictionary`2<string, TC> {
    private TP _parent;
    public TP Parent { get; }
    internal ChildContainer`2(TP parent);
    public TP get_Parent();
    public void Add(TC item);
    public sealed virtual void Add(string key, TC value);
    public void AddRange(IEnumerable`1<TC> collection);
}
[ExtensionAttribute]
public static class BLToolkit.Data.Sql.Extensions : object {
    [ExtensionAttribute]
public static Join InnerJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join InnerJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join LeftJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join LeftJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join Join(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join Join(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join CrossApply(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join CrossApply(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join OuterApply(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join OuterApply(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join WeakInnerJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join WeakInnerJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join WeakLeftJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join WeakLeftJoin(ISqlTableSource table, string alias, Join[] joins);
    [ExtensionAttribute]
public static Join WeakJoin(ISqlTableSource table, Join[] joins);
    [ExtensionAttribute]
public static Join WeakJoin(ISqlTableSource table, string alias, Join[] joins);
}
public interface BLToolkit.Data.Sql.IChild`1 {
    public string Name { get; }
    public T Parent { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual T get_Parent();
    public abstract virtual void set_Parent(T value);
}
public interface BLToolkit.Data.Sql.ICloneableElement {
    public abstract virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
}
public interface BLToolkit.Data.Sql.IQueryElement {
    public QueryElementType ElementType { get; }
    public abstract virtual QueryElementType get_ElementType();
    public abstract virtual StringBuilder ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
public interface BLToolkit.Data.Sql.ISqlExpression {
    public int Precedence { get; }
    public Type SystemType { get; }
    public abstract virtual bool CanBeNull();
    public abstract virtual int get_Precedence();
    public abstract virtual Type get_SystemType();
}
public interface BLToolkit.Data.Sql.ISqlExpressionWalkable {
    public abstract virtual ISqlExpression Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
}
public interface BLToolkit.Data.Sql.ISqlPredicate {
    public int Precedence { get; }
    public abstract virtual bool CanBeNull();
    public abstract virtual int get_Precedence();
}
public interface BLToolkit.Data.Sql.ISqlTableSource {
    public SqlField All { get; }
    public int SourceID { get; }
    public SqlTableType SqlTableType { get; }
    public abstract virtual SqlField get_All();
    public abstract virtual int get_SourceID();
    public abstract virtual SqlTableType get_SqlTableType();
    public abstract virtual IList`1<ISqlExpression> GetKeys(bool allIfEmpty);
}
public interface BLToolkit.Data.Sql.IValueContainer {
    public object Value { get; }
    public abstract virtual object get_Value();
}
public class BLToolkit.Data.Sql.Join : object {
    private string _tableName;
    private string _alias;
    private List`1<JoinOn> _joinOns;
    public string TableName { get; public set; }
    public string Alias { get; public set; }
    public List`1<JoinOn> JoinOns { get; }
    public QueryElementType ElementType { get; }
    public Join(string tableName, JoinOn[] joinOns);
    public Join(string tableName, string alias, JoinOn[] joinOns);
    public Join(string tableName, string alias, IEnumerable`1<JoinOn> joinOns);
    public Join(AttributeExtension ext);
    public string get_TableName();
    public void set_TableName(string value);
    public string get_Alias();
    public void set_Alias(string value);
    public List`1<JoinOn> get_JoinOns();
    public Join Clone();
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
}
public class BLToolkit.Data.Sql.JoinOn : object {
    private string _field;
    private string _otherField;
    private string _expression;
    public string Field { get; public set; }
    public string OtherField { get; public set; }
    public string Expression { get; public set; }
    public QueryElementType ElementType { get; }
    public JoinOn(string field, string otherField);
    public JoinOn(string field, string otherField, string expression);
    public JoinOn(AttributeExtension ext);
    public string get_Field();
    public void set_Field(string value);
    public string get_OtherField();
    public void set_OtherField(string value);
    public string get_Expression();
    public void set_Expression(string value);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
}
public class BLToolkit.Data.Sql.Precedence : object {
    public static int Primary;
    public static int Unary;
    public static int Multiplicative;
    public static int Subtraction;
    public static int Additive;
    public static int Comparison;
    public static int Bitwise;
    public static int LogicalNegation;
    public static int LogicalConjunction;
    public static int LogicalDisjunction;
    public static int Unknown;
}
public enum BLToolkit.Data.Sql.QueryElementType : Enum {
    public int value__;
    public static QueryElementType SqlField;
    public static QueryElementType SqlFunction;
    public static QueryElementType SqlParameter;
    public static QueryElementType SqlExpression;
    public static QueryElementType SqlBinaryExpression;
    public static QueryElementType SqlValue;
    public static QueryElementType SqlDataType;
    public static QueryElementType SqlTable;
    public static QueryElementType Join;
    public static QueryElementType JoinOn;
    public static QueryElementType ExprPredicate;
    public static QueryElementType NotExprPredicate;
    public static QueryElementType ExprExprPredicate;
    public static QueryElementType LikePredicate;
    public static QueryElementType BetweenPredicate;
    public static QueryElementType IsNullPredicate;
    public static QueryElementType InSubQueryPredicate;
    public static QueryElementType InListPredicate;
    public static QueryElementType FuncLikePredicate;
    public static QueryElementType SqlQuery;
    public static QueryElementType Column;
    public static QueryElementType SearchCondition;
    public static QueryElementType Condition;
    public static QueryElementType TableSource;
    public static QueryElementType JoinedTable;
    public static QueryElementType SelectClause;
    public static QueryElementType SetClause;
    public static QueryElementType SetExpression;
    public static QueryElementType FromClause;
    public static QueryElementType WhereClause;
    public static QueryElementType GroupByClause;
    public static QueryElementType OrderByClause;
    public static QueryElementType OrderByItem;
    public static QueryElementType Union;
}
public enum BLToolkit.Data.Sql.QueryType : Enum {
    public int value__;
    public static QueryType Select;
    public static QueryType Delete;
    public static QueryType Update;
    public static QueryType Insert;
}
public class BLToolkit.Data.Sql.QueryVisitor : object {
    private Dictionary`2<IQueryElement, IQueryElement> _visitedElements;
    [CompilerGeneratedAttribute]
private static Clone`1<SqlField> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Clone`1<Join> CS$<>9__CachedAnonymousMethodDelegateb;
    public Dictionary`2<IQueryElement, IQueryElement> VisitedElements { get; }
    public Dictionary`2<IQueryElement, IQueryElement> get_VisitedElements();
    public void Visit(IQueryElement element, Action`1<IQueryElement> action);
    public void Visit(IQueryElement element, bool parentFirst, Func`2<IQueryElement, bool> action);
    public void VisitAll(IQueryElement element, Action`1<IQueryElement> action);
    private void Visit(IQueryElement element, bool all, bool parentFirst, Func`2<IQueryElement, bool> action);
    private IQueryElement Find(IEnumerable`1<T> arr, Func`2<IQueryElement, bool> find);
    public IQueryElement Find(IQueryElement element, Func`2<IQueryElement, bool> find);
    public T Convert(T element, Func`2<IQueryElement, IQueryElement> action);
    private IQueryElement ConvertInternal(IQueryElement element, Func`2<IQueryElement, IQueryElement> action);
    private static TE[] ToArray(IDictionary`2<TK, TE> dic);
    private T[] Convert(T[] arr, Func`2<IQueryElement, IQueryElement> action);
    private T[] Convert(T[] arr1, Func`2<IQueryElement, IQueryElement> action, Clone`1<T> clone);
    private List`1<T> Convert(List`1<T> list, Func`2<IQueryElement, IQueryElement> action);
    private List`1<T> Convert(List`1<T> list1, Func`2<IQueryElement, IQueryElement> action, Clone`1<T> clone);
    [CompilerGeneratedAttribute]
private static SqlField <ConvertInternal>b__7(SqlField f);
    [CompilerGeneratedAttribute]
private static Join <ConvertInternal>b__8(Join j);
}
[DebuggerDisplayAttribute("SQL = {SqlText}")]
public class BLToolkit.Data.Sql.SqlBinaryExpression : object {
    [CompilerGeneratedAttribute]
private ISqlExpression <Expr1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression <Expr2>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    public ISqlExpression Expr1 { get; internal set; }
    public string Operation { get; private set; }
    public ISqlExpression Expr2 { get; internal set; }
    public Type SystemType { get; private set; }
    public int Precedence { get; private set; }
    public string SqlText { get; }
    public QueryElementType ElementType { get; }
    public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2, int precedence);
    public SqlBinaryExpression(Type systemType, ISqlExpression expr1, string operation, ISqlExpression expr2);
    [CompilerGeneratedAttribute]
public ISqlExpression get_Expr1();
    [CompilerGeneratedAttribute]
internal void set_Expr1(ISqlExpression value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(string value);
    [CompilerGeneratedAttribute]
public ISqlExpression get_Expr2();
    [CompilerGeneratedAttribute]
internal void set_Expr2(ISqlExpression value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
private void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Precedence();
    [CompilerGeneratedAttribute]
private void set_Precedence(int value);
    public string get_SqlText();
    public virtual string ToString();
    [ObsoleteAttribute]
private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool CanBeNull();
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
public class BLToolkit.Data.Sql.SqlDataType : object {
    private static TypeInfo[] _typeInfo;
    public static SqlDataType DbBigInt;
    public static SqlDataType DbInt;
    public static SqlDataType DbSmallInt;
    public static SqlDataType DbTinyInt;
    public static SqlDataType DbBit;
    public static SqlDataType DbDecimal;
    public static SqlDataType DbMoney;
    public static SqlDataType DbSmallMoney;
    public static SqlDataType DbFloat;
    public static SqlDataType DbReal;
    public static SqlDataType DbDateTime;
    public static SqlDataType DbDateTime2;
    public static SqlDataType DbSmallDateTime;
    public static SqlDataType DbDate;
    public static SqlDataType DbTime;
    public static SqlDataType DbDateTimeOffset;
    public static SqlDataType DbChar;
    public static SqlDataType DbVarChar;
    public static SqlDataType DbText;
    public static SqlDataType DbNChar;
    public static SqlDataType DbNVarChar;
    public static SqlDataType DbNText;
    public static SqlDataType DbBinary;
    public static SqlDataType DbVarBinary;
    public static SqlDataType DbImage;
    public static SqlDataType DbTimestamp;
    public static SqlDataType DbUniqueIdentifier;
    public static SqlDataType DbVariant;
    public static SqlDataType DbXml;
    public static SqlDataType DbUdt;
    public static SqlDataType DbStructured;
    public static SqlDataType Boolean;
    public static SqlDataType Char;
    public static SqlDataType SByte;
    public static SqlDataType Byte;
    public static SqlDataType Int16;
    public static SqlDataType UInt16;
    public static SqlDataType Int32;
    public static SqlDataType UInt32;
    public static SqlDataType Int64;
    public static SqlDataType UInt64;
    public static SqlDataType Single;
    public static SqlDataType Double;
    public static SqlDataType Decimal;
    public static SqlDataType DateTime;
    public static SqlDataType String;
    public static SqlDataType Guid;
    public static SqlDataType ByteArray;
    public static SqlDataType LinqBinary;
    public static SqlDataType CharArray;
    public static SqlDataType DateTimeOffset;
    public static SqlDataType TimeSpan;
    public static SqlDataType SqlByte;
    public static SqlDataType SqlInt16;
    public static SqlDataType SqlInt32;
    public static SqlDataType SqlInt64;
    public static SqlDataType SqlSingle;
    public static SqlDataType SqlBoolean;
    public static SqlDataType SqlDouble;
    public static SqlDataType SqlDateTime;
    public static SqlDataType SqlDecimal;
    public static SqlDataType SqlMoney;
    public static SqlDataType SqlString;
    public static SqlDataType SqlBinary;
    public static SqlDataType SqlGuid;
    public static SqlDataType SqlBytes;
    public static SqlDataType SqlChars;
    public static SqlDataType SqlXml;
    [CompilerGeneratedAttribute]
private SqlDbType <SqlDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    public SqlDbType SqlDbType { get; private set; }
    public Type Type { get; private set; }
    public int Length { get; private set; }
    public int Precision { get; private set; }
    public int Scale { get; private set; }
    public int Precedence { get; }
    public Type SystemType { get; }
    public QueryElementType ElementType { get; }
    public SqlDataType(SqlDbType dbType);
    public SqlDataType(SqlDbType dbType, int length);
    public SqlDataType(SqlDbType dbType, int precision, int scale);
    public SqlDataType(Type type);
    public SqlDataType(Type type, int length);
    public SqlDataType(Type type, int precision, int scale);
    public SqlDataType(SqlDbType dbType, Type type);
    public SqlDataType(SqlDbType dbType, Type type, int length);
    public SqlDataType(SqlDbType dbType, Type type, int precision, int scale);
    internal SqlDataType(SqlDbType dbType, Type type, int length, int precision, int scale);
    private SqlDataType(SqlDbType dbType, Type type, Func`2<SqlDbType, int> length, int precision, int scale);
    private SqlDataType(SqlDbType dbType, Type type, int length, Func`2<SqlDbType, int> precision, int scale);
    private static SqlDataType();
    [CompilerGeneratedAttribute]
public SqlDbType get_SqlDbType();
    [CompilerGeneratedAttribute]
private void set_SqlDbType(SqlDbType value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
private void set_Precision(int value);
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
private void set_Scale(int value);
    private static TypeInfo[] SortTypeInfo(TypeInfo[] info);
    private static int Len(object obj);
    public static int GetMaxLength(SqlDbType dbType);
    public static int GetMaxPrecision(SqlDbType dbType);
    public static int GetMaxScale(SqlDbType dbType);
    public static int GetMaxDisplaySize(SqlDbType dbType);
    public static SqlDataType GetDataType(Type type);
    public static SqlDataType GetDataType(SqlDbType type);
    public static bool CanBeNull(Type type);
    public virtual string ToString();
    public sealed virtual int get_Precedence();
    public sealed virtual Type get_SystemType();
    private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool CanBeNull();
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
public class BLToolkit.Data.Sql.SqlException : Exception {
    public SqlException(string message);
    [StringFormatMethodAttribute("message")]
public SqlException(string message, Object[] args);
    public SqlException(string message, Exception innerException);
    public SqlException(Exception innerException);
    protected SqlException(SerializationInfo info, StreamingContext context);
}
public class BLToolkit.Data.Sql.SqlExpression : object {
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expr>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression[] <Parameters>k__BackingField;
    public Type SystemType { get; private set; }
    public string Expr { get; private set; }
    public int Precedence { get; private set; }
    public ISqlExpression[] Parameters { get; private set; }
    public QueryElementType ElementType { get; }
    public SqlExpression(Type systemType, string expr, int precedence, ISqlExpression[] parameters);
    public SqlExpression(string expr, int precedence, ISqlExpression[] parameters);
    public SqlExpression(Type systemType, string expr, ISqlExpression[] parameters);
    public SqlExpression(string expr, ISqlExpression[] parameters);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
private void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public string get_Expr();
    [CompilerGeneratedAttribute]
private void set_Expr(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Precedence();
    [CompilerGeneratedAttribute]
private void set_Precedence(int value);
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(ISqlExpression[] value);
    public virtual string ToString();
    [ObsoleteAttribute]
private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool CanBeNull();
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    public static bool NeedsEqual(IQueryElement ex);
}
public class BLToolkit.Data.Sql.SqlField : object {
    private MemberMapper _memberMapper;
    private string _physicalName;
    private NonUpdatableAttribute _nonUpdatableAttribute;
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PrimaryKeyOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlTableSource <Table>k__BackingField;
    public Type SystemType { get; public set; }
    public string Alias { get; public set; }
    public string Name { get; public set; }
    public bool Nullable { get; public set; }
    public int PrimaryKeyOrder { get; public set; }
    public ISqlTableSource Table { get; private set; }
    public MemberMapper MemberMapper { get; }
    public string PhysicalName { get; public set; }
    public bool IsIdentity { get; }
    public bool IsInsertable { get; }
    public bool IsUpdatable { get; }
    public bool IsPrimaryKey { get; }
    private ISqlTableSource BLToolkit.Data.Sql.IChild<BLToolkit.Data.Sql.ISqlTableSource>.Parent { get; private set; }
    public int Precedence { get; }
    public QueryElementType ElementType { get; }
    public SqlField(SqlField field);
    public SqlField(Type systemType, string name, string physicalName, bool nullable, int pkOrder, NonUpdatableAttribute nonUpdatableAttribute, MemberMapper memberMapper);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
public void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public int get_PrimaryKeyOrder();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeyOrder(int value);
    [CompilerGeneratedAttribute]
public ISqlTableSource get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(ISqlTableSource value);
    public MemberMapper get_MemberMapper();
    public string get_PhysicalName();
    public void set_PhysicalName(string value);
    public bool get_IsIdentity();
    public bool get_IsInsertable();
    public bool get_IsUpdatable();
    public bool get_IsPrimaryKey();
    private sealed virtual override ISqlTableSource BLToolkit.Data.Sql.IChild<BLToolkit.Data.Sql.ISqlTableSource>.get_Parent();
    private sealed virtual override void BLToolkit.Data.Sql.IChild<BLToolkit.Data.Sql.ISqlTableSource>.set_Parent(ISqlTableSource value);
    public virtual string ToString();
    public sealed virtual int get_Precedence();
    public sealed virtual bool CanBeNull();
    private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
public class BLToolkit.Data.Sql.SqlFunction : object {
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precedence>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression[] <Parameters>k__BackingField;
    public Type SystemType { get; private set; }
    public string Name { get; private set; }
    public int Precedence { get; private set; }
    public ISqlExpression[] Parameters { get; private set; }
    public QueryElementType ElementType { get; }
    [ObsoleteAttribute]
public SqlFunction(string name, ISqlExpression[] parameters);
    [ObsoleteAttribute]
public SqlFunction(string name, int precedence, ISqlExpression[] parameters);
    public SqlFunction(Type systemType, string name, ISqlExpression[] parameters);
    public SqlFunction(Type systemType, string name, int precedence, ISqlExpression[] parameters);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
private void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Precedence();
    [CompilerGeneratedAttribute]
private void set_Precedence(int value);
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(ISqlExpression[] value);
    public static SqlFunction CreateCount(Type type, ISqlTableSource table);
    public static SqlFunction CreateAll(SqlQuery subQuery);
    public static SqlFunction CreateSome(SqlQuery subQuery);
    public static SqlFunction CreateAny(SqlQuery subQuery);
    public static SqlFunction CreateExists(SqlQuery subQuery);
    public virtual string ToString();
    [ObsoleteAttribute]
private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> action);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool CanBeNull();
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
public class BLToolkit.Data.Sql.SqlParameter : object {
    private object _value;
    internal List`1<Type> EnumTypes;
    internal List`1<int> TakeValues;
    internal string LikeStart;
    internal string LikeEnd;
    private Converter`2<object, object> _valueConverter;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQueryParameter>k__BackingField;
    public string Name { get; public set; }
    public Type SystemType { get; public set; }
    public bool IsQueryParameter { get; public set; }
    public object Value { get; public set; }
    public Converter`2<object, object> ValueConverter { get; public set; }
    public int Precedence { get; }
    public QueryElementType ElementType { get; }
    public SqlParameter(Type systemType, string name, object value, MappingSchema mappingSchema);
    public SqlParameter(Type systemType, string name, object value, Converter`2<object, object> valueConverter);
    [ObsoleteAttribute]
public SqlParameter(string name, object value);
    [ObsoleteAttribute]
public SqlParameter(string name, object value, Converter`2<object, object> valueConverter);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_SystemType();
    [CompilerGeneratedAttribute]
public void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsQueryParameter();
    [CompilerGeneratedAttribute]
public void set_IsQueryParameter(bool value);
    public sealed virtual object get_Value();
    public void set_Value(object value);
    public Converter`2<object, object> get_ValueConverter();
    public void set_ValueConverter(Converter`2<object, object> value);
    internal void SetEnumConverter(Type type, MappingSchema ms);
    private void SetEnumConverterInternal(Type type, MappingSchema ms);
    internal void SetTakeConverter(int take);
    private void SetTakeConverterInternal(int take);
    internal void SetLikeConverter(string start, string end);
    private static Converter`2<object, object> GetLikeEscaper(string start, string end);
    public virtual string ToString();
    public sealed virtual int get_Precedence();
    private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool CanBeNull();
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
public class BLToolkit.Data.Sql.SqlProvider.AccessSqlProvider : BasicSqlProvider {
    private Column _selectColumn;
    public bool IsSkipSupported { get; }
    public bool TakeAcceptsParameter { get; }
    public bool IsCountSubQuerySupported { get; }
    public bool IsNestedJoinSupported { get; }
    protected string FirstFormat { get; }
    public virtual int CommandCount(SqlQuery sqlQuery);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    public virtual bool get_IsSkipSupported();
    public virtual bool get_TakeAcceptsParameter();
    public virtual bool get_IsCountSubQuerySupported();
    public virtual bool get_IsNestedJoinSupported();
    public virtual bool ConvertCountSubQuery(SqlQuery subQuery);
    protected virtual string get_FirstFormat();
    protected virtual void BuildSql(StringBuilder sb);
    private void BuildAnyAsCount(StringBuilder sb);
    protected virtual IEnumerable`1<Column> GetSelectedColumns();
    protected virtual void BuildSkipFirst(StringBuilder sb);
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual bool ParenthesizeJoin();
    public virtual ISqlPredicate ConvertPredicate(ISqlPredicate predicate);
    private static string ReescapeLikeText(string text, char esc);
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    private SqlFunction ConvertCase(Type systemType, ISqlExpression[] parameters, int start);
    public virtual void BuildValue(StringBuilder sb, object value);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildUpdateClause(StringBuilder sb);
    protected virtual void BuildFromClause(StringBuilder sb);
    public virtual object Convert(object value, ConvertType convertType);
}
public abstract class BLToolkit.Data.Sql.SqlProvider.BasicSqlProvider : object {
    private SqlQuery _sqlQuery;
    private int _indent;
    private int _nextNesting;
    private int _nesting;
    private bool _skipAlias;
    private Step _buildStep;
    private static Dictionary`2<Type, INullableValueReader> _nullableValueReader;
    public NumberFormatInfo NumberFormatInfo;
    private string _name;
    public SqlQuery SqlQuery { get; public set; }
    public int Indent { get; public set; }
    public int Nesting { get; }
    public Step BuildStep { get; public set; }
    public bool SkipAcceptsParameter { get; }
    public bool TakeAcceptsParameter { get; }
    public bool IsTakeSupported { get; }
    public bool IsSkipSupported { get; }
    public bool IsSubQueryTakeSupported { get; }
    public bool IsSubQueryColumnSupported { get; }
    public bool IsCountSubQuerySupported { get; }
    public bool IsNestedJoinSupported { get; }
    public bool IsNestedJoinParenthesisRequired { get; }
    public bool IsIdentityParameterRequired { get; }
    public bool IsApplyJoinSupported { get; }
    protected bool SkipFirst { get; }
    protected string SkipFormat { get; }
    protected string FirstFormat { get; }
    protected string LimitFormat { get; }
    protected string OffsetFormat { get; }
    protected bool NeedSkip { get; }
    protected bool NeedTake { get; }
    public string Name { get; }
    private static BasicSqlProvider();
    public sealed virtual SqlQuery get_SqlQuery();
    public sealed virtual void set_SqlQuery(SqlQuery value);
    public int get_Indent();
    public void set_Indent(int value);
    public int get_Nesting();
    public Step get_BuildStep();
    public void set_BuildStep(Step value);
    public virtual bool get_SkipAcceptsParameter();
    public virtual bool get_TakeAcceptsParameter();
    public virtual bool get_IsTakeSupported();
    public virtual bool get_IsSkipSupported();
    public virtual bool get_IsSubQueryTakeSupported();
    public virtual bool get_IsSubQueryColumnSupported();
    public virtual bool get_IsCountSubQuerySupported();
    public virtual bool get_IsNestedJoinSupported();
    public virtual bool get_IsNestedJoinParenthesisRequired();
    public virtual bool get_IsIdentityParameterRequired();
    public virtual bool get_IsApplyJoinSupported();
    public virtual bool ConvertCountSubQuery(SqlQuery subQuery);
    public virtual int CommandCount(SqlQuery sqlQuery);
    public virtual int BuildSql(int commandNumber, SqlQuery sqlQuery, StringBuilder sb, int indent, int nesting, bool skipAlias);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    protected virtual int BuildSqlBuilder(SqlQuery sqlQuery, StringBuilder sb, int indent, int nesting, bool skipAlias);
    protected abstract virtual ISqlProvider CreateSqlProvider();
    protected virtual bool ParenthesizeJoin();
    protected virtual void BuildSql(StringBuilder sb);
    public virtual StringBuilder BuildTableName(StringBuilder sb, string database, string owner, string table);
    public virtual object Convert(object value, ConvertType convertType);
    protected virtual void BuildSelectClause(StringBuilder sb);
    protected virtual IEnumerable`1<Column> GetSelectedColumns();
    protected virtual void BuildColumns(StringBuilder sb);
    protected virtual void BuildColumn(StringBuilder sb, Column col, Boolean& addAlias);
    protected virtual void BuildDeleteClause(StringBuilder sb);
    protected virtual void BuildUpdateClause(StringBuilder sb);
    protected virtual void BuildUpdateTable(StringBuilder sb);
    protected virtual void BuildUpdateTableName(StringBuilder sb);
    protected virtual void BuildUpdateSet(StringBuilder sb);
    protected virtual void BuildInsertClause(StringBuilder sb);
    protected virtual void BuildGetIdentity(StringBuilder sb);
    protected virtual void BuildFromClause(StringBuilder sb);
    protected void BuildPhysicalTable(StringBuilder sb, ISqlTableSource table, string alias);
    protected void BuildTableName(StringBuilder sb, TableSource ts, bool buildName, bool buildAlias);
    private void BuildJoinTable(StringBuilder sb, JoinedTable join, Int32& joinCounter);
    protected virtual bool BuildJoinType(StringBuilder sb, JoinedTable join);
    protected virtual bool BuildWhere();
    protected virtual void BuildWhereClause(StringBuilder sb);
    protected virtual void BuildGroupByClause(StringBuilder sb);
    protected virtual void BuildHavingClause(StringBuilder sb);
    protected virtual void BuildOrderByClause(StringBuilder sb);
    protected virtual bool get_SkipFirst();
    protected virtual string get_SkipFormat();
    protected virtual string get_FirstFormat();
    protected virtual string get_LimitFormat();
    protected virtual string get_OffsetFormat();
    protected bool get_NeedSkip();
    protected bool get_NeedTake();
    protected virtual void BuildSkipFirst(StringBuilder sb);
    protected virtual void BuildOffsetLimit(StringBuilder sb);
    protected virtual void BuildWhereSearchCondition(StringBuilder sb, SearchCondition condition);
    protected virtual void BuildSearchCondition(StringBuilder sb, SearchCondition condition);
    protected virtual void BuildSearchCondition(StringBuilder sb, int parentPrecedence, SearchCondition condition);
    protected virtual void BuildPredicate(StringBuilder sb, ISqlPredicate predicate);
    private static SqlField GetUnderlayingField(ISqlExpression expr);
    private void BuildInListPredicate(ISqlPredicate predicate, StringBuilder sb);
    protected void BuildPredicate(StringBuilder sb, int parentPrecedence, ISqlPredicate predicate);
    protected void BuildPredicate(StringBuilder sb, int parentPrecedence, int precedence, ISqlPredicate predicate);
    protected virtual void BuildLikePredicate(StringBuilder sb, Like predicate);
    protected virtual StringBuilder BuildExpression(StringBuilder sb, ISqlExpression expr, bool buildTableName, bool checkParentheses, string alias, Boolean& addAlias);
    protected void BuildExpression(StringBuilder sb, int parentPrecedence, ISqlExpression expr, string alias, Boolean& addAlias);
    protected StringBuilder BuildExpression(StringBuilder sb, ISqlExpression expr);
    protected StringBuilder BuildExpression(StringBuilder sb, ISqlExpression expr, bool buildTableName, bool checkParentheses);
    protected void BuildExpression(StringBuilder sb, int precedence, ISqlExpression expr);
    public virtual void BuildValue(StringBuilder sb, object value);
    protected virtual void BuildString(StringBuilder sb, string value);
    protected virtual void BuildUnicodeString(StringBuilder sb, string value);
    protected virtual void BuildBinaryExpression(StringBuilder sb, SqlBinaryExpression expr);
    protected void BuildFunction(StringBuilder sb, string name, SqlBinaryExpression expr);
    protected void BuildBinaryExpression(StringBuilder sb, string op, SqlBinaryExpression expr);
    protected virtual void BuildFunction(StringBuilder sb, SqlFunction func);
    protected void BuildFunction(StringBuilder sb, string name, ISqlExpression[] exprs);
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    protected virtual int GetPrecedence(ISqlExpression expr);
    protected virtual int GetPrecedence(ISqlPredicate predicate);
    protected virtual void BuildAliases(StringBuilder sb, string table, List`1<Column> columns, string postfix);
    protected void AlternativeBuildSql(StringBuilder sb, bool implementOrderBy, Action`1<StringBuilder> buildSql);
    protected void AlternativeBuildSql2(StringBuilder sb, Action`1<StringBuilder> buildSql);
    protected void BuildAlternativeOrderBy(StringBuilder sb, bool ascending);
    protected IEnumerable`1<Column> AlternativeGetSelectedColumns(ColumnSelector columnSelector);
    protected bool IsDateDataType(ISqlExpression expr, string dateName);
    protected bool IsTimeDataType(ISqlExpression expr);
    protected ISqlExpression FloorBeforeConvert(SqlFunction func);
    protected ISqlExpression AlternativeConvertToBoolean(SqlFunction func, int paramNumber);
    protected SqlQuery GetAlternativeDelete(SqlQuery sqlQuery);
    protected SqlQuery GetAlternativeUpdate(SqlQuery sqlQuery);
    protected SequenceNameAttribute GetSequenceNameAttribute(SqlTable table, bool throwException);
    private static string SetAlias(string alias, int maxLen);
    protected void CheckAliases(SqlQuery sqlQuery, int maxLen);
    private static bool Wrap(int precedence, int parentPrecedence);
    protected String[] GetTempAliases(int n, string defaultAlias);
    protected static string GetTableAlias(ISqlTableSource table);
    private string GetTablePhysicalName(ISqlTableSource table, string alias);
    protected StringBuilder AppendIndent(StringBuilder sb);
    public ISqlExpression Add(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Add(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Add(ISqlExpression expr1, int value);
    public ISqlExpression Inc(ISqlExpression expr1);
    public ISqlExpression Sub(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Sub(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Sub(ISqlExpression expr1, int value);
    public ISqlExpression Dec(ISqlExpression expr1);
    public ISqlExpression Mul(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Mul(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Mul(ISqlExpression expr1, int value);
    public ISqlExpression Div(ISqlExpression expr1, ISqlExpression expr2, Type type);
    public ISqlExpression Div(ISqlExpression expr1, ISqlExpression expr2);
    public ISqlExpression Div(ISqlExpression expr1, int value);
    protected virtual int GetMaxLength(SqlDataType type);
    protected virtual int GetMaxPrecision(SqlDataType type);
    protected virtual int GetMaxScale(SqlDataType type);
    protected virtual int GetMaxDisplaySize(SqlDataType type);
    protected virtual ISqlExpression ConvertConvertion(SqlFunction func);
    public virtual ISqlExpression ConvertExpression(ISqlExpression expression);
    public virtual ISqlPredicate ConvertPredicate(ISqlPredicate predicate);
    protected ISqlPredicate ConvertEqualPredicate(ExprExpr expr);
    private ISqlPredicate OptimizeCase(ExprExpr expr);
    private static bool Compare(int v1, int v2, Operator op);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    private SqlQuery MoveCountSubQuery(SqlQuery sqlQuery);
    private void MoveCountSubQuery(IQueryElement element);
    private SqlQuery MoveSubQueryColumn(SqlQuery sqlQuery);
    public virtual ISqlExpression GetIdentityExpression(SqlTable table, SqlField identityField, bool forReturning);
    public virtual string get_Name();
    public virtual LambdaExpression ConvertMember(MemberInfo mi);
}
public class BLToolkit.Data.Sql.SqlProvider.DB2SqlProvider : BasicSqlProvider {
    private SqlField _identityField;
    public static bool QuoteIdentifiers;
    [CompilerGeneratedAttribute]
private static Action`1<IQueryElement> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool TakeAcceptsParameter { get; }
    protected string LimitFormat { get; }
    private static DB2SqlProvider();
    public virtual bool get_TakeAcceptsParameter();
    public virtual int CommandCount(SqlQuery sqlQuery);
    public virtual int BuildSql(int commandNumber, SqlQuery sqlQuery, StringBuilder sb, int indent, int nesting, bool skipAlias);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual void BuildSql(StringBuilder sb);
    protected virtual void BuildSelectClause(StringBuilder sb);
    protected virtual string get_LimitFormat();
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildFromClause(StringBuilder sb);
    public virtual void BuildValue(StringBuilder sb, object value);
    protected virtual void BuildColumn(StringBuilder sb, Column col, Boolean& addAlias);
    public virtual object Convert(object value, ConvertType convertType);
    [CompilerGeneratedAttribute]
private static void <Finalize>b__0(IQueryElement element);
}
public class BLToolkit.Data.Sql.SqlProvider.FirebirdSqlProvider : BasicSqlProvider {
    public static bool QuoteIdentifiers;
    private FirebirdMappingSchema _mappingSchema;
    [CompilerGeneratedAttribute]
private static Action`1<IQueryElement> CS$<>9__CachedAnonymousMethodDelegate1;
    protected bool SkipFirst { get; }
    protected string SkipFormat { get; }
    protected string FirstFormat { get; }
    public bool IsIdentityParameterRequired { get; }
    private MappingSchema BLToolkit.Mapping.IMappingSchemaProvider.MappingSchema { get; }
    private static FirebirdSqlProvider();
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual void BuildSelectClause(StringBuilder sb);
    protected virtual bool get_SkipFirst();
    protected virtual string get_SkipFormat();
    protected virtual string get_FirstFormat();
    public virtual bool get_IsIdentityParameterRequired();
    protected virtual void BuildGetIdentity(StringBuilder sb);
    public virtual ISqlExpression GetIdentityExpression(SqlTable table, SqlField identityField, bool forReturning);
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    private static void SetNonQueryParameter(IQueryElement element);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildFromClause(StringBuilder sb);
    protected virtual void BuildColumn(StringBuilder sb, Column col, Boolean& addAlias);
    public virtual object Convert(object value, ConvertType convertType);
    private sealed virtual override MappingSchema BLToolkit.Mapping.IMappingSchemaProvider.get_MappingSchema();
    [CompilerGeneratedAttribute]
private static void <Finalize>b__0(IQueryElement element);
}
public class BLToolkit.Data.Sql.SqlProvider.InformixSqlProvider : BasicSqlProvider {
    [CompilerGeneratedAttribute]
private static Action`1<IQueryElement> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsSubQueryTakeSupported { get; }
    protected string FirstFormat { get; }
    protected string SkipFormat { get; }
    public virtual int CommandCount(SqlQuery sqlQuery);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    protected virtual ISqlProvider CreateSqlProvider();
    public virtual int BuildSql(int commandNumber, SqlQuery sqlQuery, StringBuilder sb, int indent, int nesting, bool skipAlias);
    protected virtual void BuildSelectClause(StringBuilder sb);
    public virtual bool get_IsSubQueryTakeSupported();
    protected virtual string get_FirstFormat();
    protected virtual string get_SkipFormat();
    protected virtual void BuildLikePredicate(StringBuilder sb, Like predicate);
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    public virtual object ConvertBooleanValue(bool value);
    public virtual void BuildValue(StringBuilder sb, object value);
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildFromClause(StringBuilder sb);
    public virtual object Convert(object value, ConvertType convertType);
    [CompilerGeneratedAttribute]
private static void <Finalize>b__0(IQueryElement element);
}
public interface BLToolkit.Data.Sql.SqlProvider.ISqlProvider {
    public string Name { get; }
    public SqlQuery SqlQuery { get; public set; }
    public bool SkipAcceptsParameter { get; }
    public bool TakeAcceptsParameter { get; }
    public bool IsSkipSupported { get; }
    public bool IsTakeSupported { get; }
    public bool IsSubQueryTakeSupported { get; }
    public bool IsSubQueryColumnSupported { get; }
    public bool IsCountSubQuerySupported { get; }
    public bool IsIdentityParameterRequired { get; }
    public bool IsApplyJoinSupported { get; }
    public abstract virtual int CommandCount(SqlQuery sqlQuery);
    public abstract virtual int BuildSql(int commandNumber, SqlQuery sqlQuery, StringBuilder sb, int indent, int nesting, bool skipAlias);
    public abstract virtual ISqlExpression ConvertExpression(ISqlExpression expression);
    public abstract virtual ISqlPredicate ConvertPredicate(ISqlPredicate predicate);
    public abstract virtual SqlQuery Finalize(SqlQuery sqlQuery);
    public abstract virtual StringBuilder BuildTableName(StringBuilder sb, string database, string owner, string table);
    public abstract virtual object Convert(object value, ConvertType convertType);
    public abstract virtual LambdaExpression ConvertMember(MemberInfo mi);
    public abstract virtual ISqlExpression GetIdentityExpression(SqlTable table, SqlField identityField, bool forReturning);
    public abstract virtual string get_Name();
    public abstract virtual SqlQuery get_SqlQuery();
    public abstract virtual void set_SqlQuery(SqlQuery value);
    public abstract virtual bool get_SkipAcceptsParameter();
    public abstract virtual bool get_TakeAcceptsParameter();
    public abstract virtual bool get_IsSkipSupported();
    public abstract virtual bool get_IsTakeSupported();
    public abstract virtual bool get_IsSubQueryTakeSupported();
    public abstract virtual bool get_IsSubQueryColumnSupported();
    public abstract virtual bool get_IsCountSubQuerySupported();
    public abstract virtual bool get_IsIdentityParameterRequired();
    public abstract virtual bool get_IsApplyJoinSupported();
}
public class BLToolkit.Data.Sql.SqlProvider.MsSql2005SqlProvider : MsSqlSqlProvider {
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
}
public class BLToolkit.Data.Sql.SqlProvider.MsSql2008SqlProvider : MsSqlSqlProvider {
    protected virtual ISqlProvider CreateSqlProvider();
}
public abstract class BLToolkit.Data.Sql.SqlProvider.MsSqlSqlProvider : BasicSqlProvider {
    public bool IsApplyJoinSupported { get; }
    protected string FirstFormat { get; }
    public virtual bool get_IsApplyJoinSupported();
    protected virtual string get_FirstFormat();
    protected virtual void BuildSql(StringBuilder sb);
    protected virtual void BuildGetIdentity(StringBuilder sb);
    protected virtual void BuildOrderByClause(StringBuilder sb);
    protected virtual IEnumerable`1<Column> GetSelectedColumns();
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    protected virtual void BuildDeleteClause(StringBuilder sb);
    protected virtual void BuildUpdateTableName(StringBuilder sb);
    protected virtual void BuildUnicodeString(StringBuilder sb, string value);
    protected virtual void BuildColumn(StringBuilder sb, Column col, Boolean& addAlias);
    public virtual object Convert(object value, ConvertType convertType);
}
public class BLToolkit.Data.Sql.SqlProvider.MySqlSqlProvider : BasicSqlProvider {
    private static string _commandParameterPrefix;
    private static string _sprocParameterPrefix;
    private static List`1<char> _convertParameterSymbols;
    [CompilerGeneratedAttribute]
private static char <ParameterSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <TryConvertParameterSymbol>k__BackingField;
    protected string LimitFormat { get; }
    public bool IsNestedJoinParenthesisRequired { get; }
    public static char ParameterSymbol { get; public set; }
    public static bool TryConvertParameterSymbol { get; public set; }
    public static string CommandParameterPrefix { get; public set; }
    public static string SprocParameterPrefix { get; public set; }
    public static List`1<char> ConvertParameterSymbols { get; public set; }
    private static MySqlSqlProvider();
    public virtual int CommandCount(SqlQuery sqlQuery);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual string get_LimitFormat();
    public virtual bool get_IsNestedJoinParenthesisRequired();
    protected virtual void BuildOffsetLimit(StringBuilder sb);
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    protected virtual void BuildDeleteClause(StringBuilder sb);
    protected virtual void BuildUpdateClause(StringBuilder sb);
    protected virtual void BuildFromClause(StringBuilder sb);
    [CompilerGeneratedAttribute]
public static char get_ParameterSymbol();
    [CompilerGeneratedAttribute]
public static void set_ParameterSymbol(char value);
    [CompilerGeneratedAttribute]
public static bool get_TryConvertParameterSymbol();
    [CompilerGeneratedAttribute]
public static void set_TryConvertParameterSymbol(bool value);
    public static string get_CommandParameterPrefix();
    public static void set_CommandParameterPrefix(string value);
    public static string get_SprocParameterPrefix();
    public static void set_SprocParameterPrefix(string value);
    public static List`1<char> get_ConvertParameterSymbols();
    public static void set_ConvertParameterSymbols(List`1<char> value);
    public virtual object Convert(object value, ConvertType convertType);
}
public class BLToolkit.Data.Sql.SqlProvider.OracleSqlProvider : BasicSqlProvider {
    private string _rowNumberAlias;
    [CompilerGeneratedAttribute]
private static Action`1<IQueryElement> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsCountSubQuerySupported { get; }
    public bool IsIdentityParameterRequired { get; }
    public virtual bool get_IsCountSubQuerySupported();
    public virtual bool get_IsIdentityParameterRequired();
    protected virtual void BuildSelectClause(StringBuilder sb);
    protected virtual void BuildGetIdentity(StringBuilder sb);
    public virtual ISqlExpression GetIdentityExpression(SqlTable table, SqlField identityField, bool forReturning);
    protected virtual bool BuildWhere();
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual void BuildSql(StringBuilder sb);
    protected virtual void BuildWhereSearchCondition(StringBuilder sb, SearchCondition condition);
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildFromClause(StringBuilder sb);
    public virtual void BuildValue(StringBuilder sb, object value);
    protected virtual void BuildColumn(StringBuilder sb, Column col, Boolean& addAlias);
    public virtual object Convert(object value, ConvertType convertType);
    [CompilerGeneratedAttribute]
private static void <Finalize>b__0(IQueryElement element);
}
public class BLToolkit.Data.Sql.SqlProvider.PostgreSQLSqlProvider : BasicSqlProvider {
    public static bool QuoteIdentifiers;
    protected string LimitFormat { get; }
    protected string OffsetFormat { get; }
    public virtual int CommandCount(SqlQuery sqlQuery);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual string get_LimitFormat();
    protected virtual string get_OffsetFormat();
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    public virtual void BuildValue(StringBuilder sb, object value);
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildFromClause(StringBuilder sb);
    public virtual object Convert(object value, ConvertType convertType);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Data.Sql.SqlProvider.SequenceNameAttribute : Attribute {
    private string _providerName;
    private string _sequenceName;
    public string ProviderName { get; public set; }
    public string SequenceName { get; public set; }
    public SequenceNameAttribute(string providerName, string sequenceName);
    public SequenceNameAttribute(string sequenceName);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public string get_SequenceName();
    public void set_SequenceName(string value);
}
public class BLToolkit.Data.Sql.SqlProvider.SqlCeSqlProvider : BasicSqlProvider {
    public bool IsSkipSupported { get; }
    public bool IsTakeSupported { get; }
    public bool IsSubQueryTakeSupported { get; }
    public bool IsSubQueryColumnSupported { get; }
    public bool IsCountSubQuerySupported { get; }
    public bool IsApplyJoinSupported { get; }
    public virtual bool get_IsSkipSupported();
    public virtual bool get_IsTakeSupported();
    public virtual bool get_IsSubQueryTakeSupported();
    public virtual bool get_IsSubQueryColumnSupported();
    public virtual bool get_IsCountSubQuerySupported();
    public virtual bool get_IsApplyJoinSupported();
    public virtual int CommandCount(SqlQuery sqlQuery);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    protected virtual ISqlProvider CreateSqlProvider();
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    protected virtual void BuildFromClause(StringBuilder sb);
    protected virtual void BuildColumn(StringBuilder sb, Column col, Boolean& addAlias);
    public virtual object Convert(object value, ConvertType convertType);
}
public class BLToolkit.Data.Sql.SqlProvider.SQLiteSqlProvider : BasicSqlProvider {
    protected string LimitFormat { get; }
    protected string OffsetFormat { get; }
    public bool IsSkipSupported { get; }
    public bool IsNestedJoinSupported { get; }
    public virtual int CommandCount(SqlQuery sqlQuery);
    protected virtual void BuildCommand(int commandNumber, StringBuilder sb);
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual string get_LimitFormat();
    protected virtual string get_OffsetFormat();
    public virtual bool get_IsSkipSupported();
    public virtual bool get_IsNestedJoinSupported();
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    public virtual SqlQuery Finalize(SqlQuery sqlQuery);
    protected virtual void BuildFromClause(StringBuilder sb);
    public virtual void BuildValue(StringBuilder sb, object value);
    public virtual object Convert(object value, ConvertType convertType);
}
public class BLToolkit.Data.Sql.SqlProvider.SybaseSqlProvider : BasicSqlProvider {
    private bool _isSelect;
    private bool _skipAliases;
    protected string FirstFormat { get; }
    public bool IsSkipSupported { get; }
    public bool TakeAcceptsParameter { get; }
    public bool IsSubQueryTakeSupported { get; }
    public bool IsCountSubQuerySupported { get; }
    private SybaseSqlProvider(bool skipAliases);
    protected virtual void BuildGetIdentity(StringBuilder sb);
    protected virtual string get_FirstFormat();
    public virtual bool get_IsSkipSupported();
    public virtual bool get_TakeAcceptsParameter();
    public virtual bool get_IsSubQueryTakeSupported();
    public virtual bool get_IsCountSubQuerySupported();
    public virtual ISqlExpression ConvertExpression(ISqlExpression expr);
    protected virtual void BuildSelectClause(StringBuilder sb);
    protected virtual void BuildColumn(StringBuilder sb, Column col, Boolean& addAlias);
    protected virtual ISqlProvider CreateSqlProvider();
    protected virtual void BuildDataType(StringBuilder sb, SqlDataType type);
    protected virtual void BuildDeleteClause(StringBuilder sb);
    protected virtual void BuildUpdateTableName(StringBuilder sb);
    protected virtual void BuildUnicodeString(StringBuilder sb, string value);
    public virtual object Convert(object value, ConvertType convertType);
}
[DebuggerDisplayAttribute("SQL = {SqlText}")]
public class BLToolkit.Data.Sql.SqlQuery : object {
    private static Dictionary`2<string, object> _reservedWords;
    private List`1<SqlParameter> _parameters;
    private List`1<object> _properties;
    private QueryType _queryType;
    private SelectClause _select;
    private SetClause _set;
    private FromClause _from;
    private WhereClause _where;
    private GroupByClause _groupBy;
    private WhereClause _having;
    private OrderByClause _orderBy;
    private List`1<Union> _unions;
    private IDictionary`2<string, object> _aliases;
    public static int SourceIDCounter;
    private SqlField _all;
    private List`1<ISqlExpression> _keys;
    [CompilerGeneratedAttribute]
private bool <ParameterDependent>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlQuery <ParentSql>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceID>k__BackingField;
    [CompilerGeneratedAttribute]
private static Predicate`1<Column> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`1<TableSource> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Predicate`1<Column> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Predicate`1<Column> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Predicate`1<Column> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<ISqlExpression, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`2<IQueryElement, IQueryElement> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Predicate`1<ICloneableElement> CS$<>9__CachedAnonymousMethodDelegate40;
    [CompilerGeneratedAttribute]
private static Func`3<ISqlExpression, Column, <>f__AnonymousType9`2<ISqlExpression, Column>> CS$<>9__CachedAnonymousMethodDelegate47;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType9`2<ISqlExpression, Column>, bool> CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType9`2<ISqlExpression, Column>, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate49;
    public List`1<SqlParameter> Parameters { get; }
    public List`1<object> Properties { get; }
    public bool ParameterDependent { get; public set; }
    public SqlQuery ParentSql { get; public set; }
    public bool IsSimple { get; }
    public QueryType QueryType { get; public set; }
    public SelectClause Select { get; }
    public SetClause Set { get; }
    public FromClause From { get; }
    public WhereClause Where { get; }
    public GroupByClause GroupBy { get; }
    public WhereClause Having { get; }
    public OrderByClause OrderBy { get; }
    public List`1<Union> Unions { get; }
    public bool HasUnion { get; }
    public string SqlText { get; }
    public int Precedence { get; }
    public Type SystemType { get; }
    public int SourceID { get; private set; }
    public SqlTableType SqlTableType { get; }
    public SqlField All { get; internal set; }
    public QueryElementType ElementType { get; }
    private static SqlQuery();
    internal SqlQuery(int id);
    private SqlQuery(SqlQuery clone, Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    internal void Init(SetClause set, SelectClause select, FromClause from, WhereClause where, GroupByClause groupBy, WhereClause having, OrderByClause orderBy, List`1<Union> unions, SqlQuery parentSql, bool parameterDependent, List`1<SqlParameter> parameters);
    public List`1<SqlParameter> get_Parameters();
    public List`1<object> get_Properties();
    [CompilerGeneratedAttribute]
public bool get_ParameterDependent();
    [CompilerGeneratedAttribute]
public void set_ParameterDependent(bool value);
    [CompilerGeneratedAttribute]
public SqlQuery get_ParentSql();
    [CompilerGeneratedAttribute]
public void set_ParentSql(SqlQuery value);
    public bool get_IsSimple();
    public QueryType get_QueryType();
    public void set_QueryType(QueryType value);
    public SelectClause get_Select();
    public SetClause get_Set();
    public static Join InnerJoin(ISqlTableSource table, Join[] joins);
    public static Join InnerJoin(ISqlTableSource table, string alias, Join[] joins);
    public static Join LeftJoin(ISqlTableSource table, Join[] joins);
    public static Join LeftJoin(ISqlTableSource table, string alias, Join[] joins);
    public static Join Join(ISqlTableSource table, Join[] joins);
    public static Join Join(ISqlTableSource table, string alias, Join[] joins);
    public static Join CrossApply(ISqlTableSource table, Join[] joins);
    public static Join CrossApply(ISqlTableSource table, string alias, Join[] joins);
    public static Join OuterApply(ISqlTableSource table, Join[] joins);
    public static Join OuterApply(ISqlTableSource table, string alias, Join[] joins);
    public static Join WeakInnerJoin(ISqlTableSource table, Join[] joins);
    public static Join WeakInnerJoin(ISqlTableSource table, string alias, Join[] joins);
    public static Join WeakLeftJoin(ISqlTableSource table, Join[] joins);
    public static Join WeakLeftJoin(ISqlTableSource table, string alias, Join[] joins);
    public static Join WeakJoin(ISqlTableSource table, Join[] joins);
    public static Join WeakJoin(ISqlTableSource table, string alias, Join[] joins);
    public FromClause get_From();
    public WhereClause get_Where();
    public GroupByClause get_GroupBy();
    public WhereClause get_Having();
    public OrderByClause get_OrderBy();
    public List`1<Union> get_Unions();
    public bool get_HasUnion();
    public void AddUnion(SqlQuery union, bool isAll);
    public void FinalizeAndValidate(bool isApplySupported);
    private void ResolveFields();
    private QueryData GetQueryData();
    private static TableSource FindField(SqlField field, TableSource table);
    private static ISqlExpression GetColumn(QueryData data, SqlField field, bool addToGroupBy);
    private void ResolveFields(QueryData data);
    private void OptimizeUnions();
    private void FinalizeAndValidateInternal(bool isApplySupported);
    internal static void OptimizeSearchCondition(SearchCondition searchCondition);
    private void ForEachTable(Action`1<TableSource> action);
    private void RemoveOrderBy();
    private void ResolveWeakJoins();
    private TableSource OptimizeSubQuery(TableSource source, bool optimizeWhere, bool allColumns, bool isApplySupported);
    private TableSource RemoveSubQuery(TableSource childSource, bool concatWhere, bool allColumns);
    private static bool IsAggregationFunction(ISqlExpression expr);
    private void OptimizeApply(TableSource tableSource, JoinedTable joinTable, bool isApplySupported);
    private static bool ContainsTable(ISqlTableSource table, IQueryElement sql);
    private static void ConcatSearchCondition(WhereClause where1, WhereClause where2);
    private void OptimizeSubQueries(bool isApplySupported);
    private void OptimizeApplies(bool isApplySupported);
    private void OptimizeColumns();
    public void RemoveAlias(string alias);
    public string GetAlias(string desiredAlias, string defaultAlias);
    public String[] GetTempAliases(int n, string defaultAlias);
    private void SetAliases();
    public SqlQuery ProcessParameters();
    private static Predicate ConvertInListPredicate(InList p);
    private static SqlField GetUnderlayingField(ISqlExpression expr);
    public SqlQuery Clone();
    public SqlQuery Clone(Predicate`1<ICloneableElement> doClone);
    public TableSource GetTableSource(ISqlTableSource table);
    private static TableSource CheckTableSource(TableSource ts, ISqlTableSource table, string alias);
    public string get_SqlText();
    public virtual string ToString();
    public sealed virtual bool CanBeNull();
    public sealed virtual int get_Precedence();
    public sealed virtual Type get_SystemType();
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    [ObsoleteAttribute]
private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SourceID();
    [CompilerGeneratedAttribute]
private void set_SourceID(int value);
    public sealed virtual SqlTableType get_SqlTableType();
    public sealed virtual SqlField get_All();
    internal void set_All(SqlField value);
    public sealed virtual IList`1<ISqlExpression> GetKeys(bool allIfEmpty);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    [CompilerGeneratedAttribute]
private static bool <ResolveFields>b__7(Column c);
    [CompilerGeneratedAttribute]
private static void <FinalizeAndValidateInternal>b__10(TableSource table);
    [CompilerGeneratedAttribute]
private void <FinalizeAndValidateInternal>b__12(IQueryElement e);
    [CompilerGeneratedAttribute]
private static bool <RemoveSubQuery>b__20(Column c);
    [CompilerGeneratedAttribute]
private static bool <RemoveSubQuery>b__21(Column c);
    [CompilerGeneratedAttribute]
private static bool <OptimizeApply>b__29(Column c);
    [CompilerGeneratedAttribute]
private static ISqlExpression <OptimizeColumns>b__2e(ISqlExpression expr);
    [CompilerGeneratedAttribute]
private static IQueryElement <ProcessParameters>b__37(IQueryElement e);
    [CompilerGeneratedAttribute]
private static bool <Clone>b__3f(ICloneableElement _);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Column> <GetKeys>b__42(ISqlExpression key);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType9`2<ISqlExpression, Column> <GetKeys>b__43(ISqlExpression key, Column col);
    [CompilerGeneratedAttribute]
private static bool <GetKeys>b__44(<>f__AnonymousType9`2<ISqlExpression, Column> <>h__TransparentIdentifier41);
    [CompilerGeneratedAttribute]
private static ISqlExpression <GetKeys>b__45(<>f__AnonymousType9`2<ISqlExpression, Column> <>h__TransparentIdentifier41);
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Data.Sql.SqlTable : object {
    private SqlTableType _sqlTableType;
    private ChildContainer`2<ISqlTableSource, SqlField> _fields;
    private List`1<Join> _joins;
    private SequenceNameAttribute[] _sequenceAttributes;
    private SqlField _all;
    private int _sourceID;
    private List`1<ISqlExpression> _keyFields;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhysicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlExpression[] <TableArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<SqlField, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<SqlField, int> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<SqlField, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<SqlField, ISqlExpression> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Converter`2<Join, Join> CS$<>9__CachedAnonymousMethodDelegatee;
    public SqlField Item { get; }
    public string Name { get; public set; }
    public string Alias { get; public set; }
    public string Database { get; public set; }
    public string Owner { get; public set; }
    public Type ObjectType { get; public set; }
    public string PhysicalName { get; public set; }
    public SqlTableType SqlTableType { get; public set; }
    public ISqlExpression[] TableArguments { get; public set; }
    public ChildContainer`2<ISqlTableSource, SqlField> Fields { get; }
    public List`1<Join> Joins { get; }
    public SequenceNameAttribute[] SequenceAttributes { get; }
    public SqlField All { get; }
    public int SourceID { get; }
    public QueryElementType ElementType { get; }
    private int BLToolkit.Data.Sql.ISqlExpression.Precedence { get; }
    private Type BLToolkit.Data.Sql.ISqlExpression.SystemType { get; }
    internal SqlTable(int id, string name, string alias, string database, string owner, string physicalName, Type objectType, SequenceNameAttribute[] sequenceAttributes, SqlField[] fields, SqlTableType sqlTableType, ISqlExpression[] tableArguments);
    public SqlTable(MappingSchema mappingSchema, Type objectType);
    public SqlTable(Type objectType);
    public SqlTable(SqlTable table);
    public SqlTable(SqlTable table, IEnumerable`1<SqlField> fields, IEnumerable`1<Join> joins, ISqlExpression[] tableArguments);
    public SqlTable(ExtensionList extensions, string name);
    public SqlTable(MappingSchema mappingSchema, ExtensionList extensions, string name);
    private void InitFromBase(SqlTable baseTable);
    public virtual string ToString();
    public SqlField get_Item(string fieldName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
public void set_ObjectType(Type value);
    [CompilerGeneratedAttribute]
public string get_PhysicalName();
    [CompilerGeneratedAttribute]
public void set_PhysicalName(string value);
    public sealed virtual SqlTableType get_SqlTableType();
    public void set_SqlTableType(SqlTableType value);
    [CompilerGeneratedAttribute]
public ISqlExpression[] get_TableArguments();
    [CompilerGeneratedAttribute]
public void set_TableArguments(ISqlExpression[] value);
    public ChildContainer`2<ISqlTableSource, SqlField> get_Fields();
    public List`1<Join> get_Joins();
    public SequenceNameAttribute[] get_SequenceAttributes();
    public sealed virtual SqlField get_All();
    public SqlField GetIdentityField();
    public sealed virtual int get_SourceID();
    public sealed virtual IList`1<ISqlExpression> GetKeys(bool allIfEmpty);
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
    private sealed virtual override bool BLToolkit.Data.Sql.ISqlExpression.CanBeNull();
    private sealed virtual override int BLToolkit.Data.Sql.ISqlExpression.get_Precedence();
    private sealed virtual override Type BLToolkit.Data.Sql.ISqlExpression.get_SystemType();
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    [CompilerGeneratedAttribute]
private static bool <GetKeys>b__3(SqlField f);
    [CompilerGeneratedAttribute]
private static int <GetKeys>b__4(SqlField f);
    [CompilerGeneratedAttribute]
private static ISqlExpression <GetKeys>b__5(SqlField f);
    [CompilerGeneratedAttribute]
private static ISqlExpression <GetKeys>b__6(SqlField f);
    [CompilerGeneratedAttribute]
private static Join <Clone>b__c(Join j);
}
public class BLToolkit.Data.Sql.SqlTable`1 : SqlTable {
    public SqlTable`1(MappingSchema mappingSchema);
}
public enum BLToolkit.Data.Sql.SqlTableType : Enum {
    public int value__;
    public static SqlTableType Table;
    public static SqlTableType Function;
    public static SqlTableType Expression;
}
public class BLToolkit.Data.Sql.SqlValue : object {
    private object _value;
    private Type _systemType;
    public object Value { get; }
    public Type SystemType { get; }
    public int Precedence { get; }
    public QueryElementType ElementType { get; }
    public SqlValue(Type systemType, object value);
    public SqlValue(object value);
    public sealed virtual object get_Value();
    public sealed virtual Type get_SystemType();
    public virtual string ToString();
    public sealed virtual int get_Precedence();
    private sealed virtual override ISqlExpression BLToolkit.Data.Sql.ISqlExpressionWalkable.Walk(bool skipColumns, Func`2<ISqlExpression, ISqlExpression> func);
    private sealed virtual override bool System.IEquatable<BLToolkit.Data.Sql.ISqlExpression>.Equals(ISqlExpression other);
    public sealed virtual bool CanBeNull();
    public sealed virtual ICloneableElement Clone(Dictionary`2<ICloneableElement, ICloneableElement> objectTree, Predicate`1<ICloneableElement> doClone);
    public sealed virtual QueryElementType get_ElementType();
    private sealed virtual override StringBuilder BLToolkit.Data.Sql.IQueryElement.ToString(StringBuilder sb, Dictionary`2<IQueryElement, IQueryElement> dic);
}
[AttributeUsageAttribute("64")]
public class BLToolkit.DataAccess.ActionNameAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public ActionNameAttribute(string name);
    public string get_Name();
}
[AttributeUsageAttribute("4")]
public class BLToolkit.DataAccess.ActionSprocNameAttribute : Attribute {
    private string _actionName;
    private string _procedureName;
    public string ActionName { get; }
    public string ProcedureName { get; }
    public ActionSprocNameAttribute(string actionName, string procedureName);
    public string get_ActionName();
    public string get_ProcedureName();
}
[AttributeUsageAttribute("1028")]
[BaseTypeRequiredAttribute("BLToolkit.DataAccess.DataAccessor")]
public class BLToolkit.DataAccess.ActualTypeAttribute : Attribute {
    private Type _baseType;
    private Type _actualType;
    public Type BaseType { get; }
    public Type ActualType { get; }
    public ActualTypeAttribute(Type baseType, Type actualType);
    public Type get_BaseType();
    public Type get_ActualType();
}
[AttributeUsageAttribute("64")]
public class BLToolkit.DataAccess.CommandBehaviorAttribute : Attribute {
    private CommandBehavior _commandBehavior;
    public CommandBehavior CommandBehavior { get; public set; }
    public CommandBehaviorAttribute(CommandBehavior commandBehavior);
    public CommandBehavior get_CommandBehavior();
    public void set_CommandBehavior(CommandBehavior value);
}
public class BLToolkit.DataAccess.DataAccessException : Exception {
    public DataAccessException(string message);
    public DataAccessException(string message, Exception innerException);
    public DataAccessException(Exception innerException);
    protected DataAccessException(SerializationInfo info, StreamingContext context);
}
[DataAccessorAttribute]
[DebuggerStepThroughAttribute]
public abstract class BLToolkit.DataAccess.DataAccessor : DataAccessorBase {
    protected DataAccessor(DbManager dbManager);
    protected DataAccessor(DbManager dbManager, bool dispose);
    public static DataAccessor CreateInstance(Type type);
    public static DataAccessor CreateInstance(Type type, InitContext context);
    public static DataAccessor CreateInstance(Type type, DbManager dbManager);
    public static DataAccessor CreateInstance(Type type, InitContext context, DbManager dbManager);
    public static DataAccessor CreateInstance(Type type, DbManager dbManager, bool dispose);
    public static DataAccessor CreateInstance(Type type, InitContext context, DbManager dbManager, bool dispose);
    public static T CreateInstance();
    public static T CreateInstance(DbManager dbManager);
    public static T CreateInstance(DbManager dbManager, bool dispose);
    [NoInterceptionAttribute]
protected virtual string GetQueryParameterName(DbManager db, string paramName);
    [NoInterceptionAttribute]
protected virtual string GetSpParameterName(DbManager db, string paramName);
    [NoInterceptionAttribute]
protected virtual IDbDataParameter[] PrepareParameters(DbManager db, Object[] parameters);
    [NoInterceptionAttribute]
protected virtual IDbDataParameter GetParameter(DbManager db, string paramName);
    [NoInterceptionAttribute]
protected virtual IDbDataParameter[] CreateParameters(DbManager db, object obj, String[] outputParameters, String[] inputOutputParameters, String[] ignoreParameters, IDbDataParameter[] commandParameters);
    [NoInterceptionAttribute]
protected virtual IDbDataParameter[] CreateParameters(DbManager db, DataRow dataRow, String[] outputParameters, String[] inputOutputParameters, String[] ignoreParameters, IDbDataParameter[] commandParameters);
    [NoInterceptionAttribute]
protected virtual string PrepareSqlQuery(DbManager db, int queryID, int uniqueID, string sqlQuery);
    protected void ExecuteDictionary(DbManager db, IDictionary dictionary, Type objectType, Type keyType, string methodName);
    protected void ExecuteDictionary(DbManager db, IDictionary`2<CompoundValue, TValue> dictionary, Type objectType, string methodName);
    protected void ExecuteDictionary(DbManager db, IDictionary`2<TKey, TValue> dictionary, Type objectType, string methodName);
    protected void ExecuteScalarDictionary(DbManager db, IDictionary dictionary, Type objectType, Type keyType, string methodName, NameOrIndexParameter scalarField, Type elementType);
    protected IEnumerable`1<T> ExecuteEnumerable(DbManager db, Type objectType, bool disposeDbManager);
    protected IEnumerable ExecuteEnumerable(DbManager db, Type objectType, bool disposeDbManager);
    [NoInterceptionAttribute]
[CLSCompliantAttribute("False")]
protected virtual sbyte ConvertToSByte(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual short ConvertToInt16(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual int ConvertToInt32(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual long ConvertToInt64(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual byte ConvertToByte(DbManager db, object value, object parameter);
    [CLSCompliantAttribute("False")]
[NoInterceptionAttribute]
protected virtual ushort ConvertToUInt16(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
[CLSCompliantAttribute("False")]
protected virtual UInt32 ConvertToUInt32(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
[CLSCompliantAttribute("False")]
protected virtual ulong ConvertToUInt64(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual char ConvertToChar(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual float ConvertToSingle(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual double ConvertToDouble(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual bool ConvertToBoolean(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual string ConvertToString(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual DateTime ConvertToDateTime(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual DateTimeOffset ConvertToDateTimeOffset(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual Binary ConvertToLinqBinary(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual decimal ConvertToDecimal(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual Guid ConvertToGuid(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual Stream ConvertToStream(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual XmlReader ConvertToXmlReader(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual XmlDocument ConvertToXmlDocument(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual Byte[] ConvertToByteArray(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual Char[] ConvertToCharArray(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlByte ConvertToSqlByte(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlInt16 ConvertToSqlInt16(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlInt32 ConvertToSqlInt32(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlInt64 ConvertToSqlInt64(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlSingle ConvertToSqlSingle(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlBoolean ConvertToSqlBoolean(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlDouble ConvertToSqlDouble(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlDateTime ConvertToSqlDateTime(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlDecimal ConvertToSqlDecimal(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlMoney ConvertToSqlMoney(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlGuid ConvertToSqlGuid(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual SqlString ConvertToSqlString(DbManager db, object value, object parameter);
    [NoInterceptionAttribute]
protected virtual object ConvertChangeType(DbManager db, object value, Type conversionType, object parameter);
    [NoInterceptionAttribute]
protected virtual bool IsNull(DbManager db, object value, object parameter);
    protected SqlQueryAttribute GetSqlQueryAttribute(MethodInfo methodInfo);
}
public abstract class BLToolkit.DataAccess.DataAccessor`1 : DataAccessor {
    [DebuggerStepThroughAttribute]
protected DataAccessor`1(DbManager dbManager);
    [DebuggerStepThroughAttribute]
protected DataAccessor`1(DbManager dbManager, bool dispose);
}
public abstract class BLToolkit.DataAccess.DataAccessor`2 : DataAccessor`1<T> {
    [DebuggerStepThroughAttribute]
protected DataAccessor`2(DbManager dbManager);
    public static TA CreateInstance();
    public static TA CreateInstance(DbManager dbManager);
    public static TA CreateInstance(DbManager dbManager, bool dispose);
}
[AttributeUsageAttribute("4")]
internal class BLToolkit.DataAccess.DataAccessorAttribute : AbstractTypeBuilderAttribute {
    public IAbstractTypeBuilder TypeBuilder { get; }
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
public abstract class BLToolkit.DataAccess.DataAccessorBase : object {
    private ExtensionList _extensions;
    private bool _disposeDbManager;
    private MappingSchema _mappingSchema;
    private DbManager _dbManager;
    private static Hashtable _actionSproc;
    public ExtensionList Extensions { get; public set; }
    [NoInterceptionAttribute]
public bool DisposeDbManager { get; public set; }
    public MappingSchema MappingSchema { get; public set; }
    protected DbManager DbManager { get; }
    [DebuggerStepThroughAttribute]
protected DataAccessorBase(DbManager dbManager);
    [DebuggerStepThroughAttribute]
protected DataAccessorBase(DbManager dbManager, bool dispose);
    private static DataAccessorBase();
    [NoInterceptionAttribute]
[DebuggerStepThroughAttribute]
public virtual DbManager GetDbManager();
    [NoInterceptionAttribute]
protected virtual DbManager CreateDbManager();
    [NoInterceptionAttribute]
public virtual void BeginTransaction();
    [NoInterceptionAttribute]
public virtual void BeginTransaction(IsolationLevel il);
    [NoInterceptionAttribute]
public virtual void CommitTransaction();
    [NoInterceptionAttribute]
public virtual void RollbackTransaction();
    public ExtensionList get_Extensions();
    public void set_Extensions(ExtensionList value);
    public virtual bool get_DisposeDbManager();
    public virtual void set_DisposeDbManager(bool value);
    public MappingSchema get_MappingSchema();
    public void set_MappingSchema(MappingSchema value);
    protected DbManager get_DbManager();
    protected internal void SetDbManager(DbManager dbManager, bool dispose);
    [NoInterceptionAttribute]
protected virtual string GetDefaultSpName(string typeName, string actionName);
    [NoInterceptionAttribute]
protected virtual string GetSpName(Type type, string actionName);
    [NoInterceptionAttribute]
protected virtual string GetDatabaseName(Type type);
    [NoInterceptionAttribute]
protected virtual string GetOwnerName(Type type);
    [NoInterceptionAttribute]
protected virtual string GetTableName(Type type);
    [NoInterceptionAttribute]
protected virtual void Dispose(DbManager dbManager);
}
public class BLToolkit.DataAccess.DataAccessorBuilder : AbstractTypeBuilderBase {
    private static BindingFlags _bindingFlags;
    private Dictionary`2<Type, Type> _actualTypes;
    private Type _baseType;
    private Type _objectType;
    private bool _explicitObjectType;
    private ParameterInfo[] _parameters;
    private ArrayList _paramList;
    private ArrayList _refParamList;
    private bool _createManager;
    private LocalBuilder _locManager;
    private LocalBuilder _locObjType;
    private ArrayList _outputParameters;
    private SqlQueryAttribute _sqlQueryAttribute;
    private ArrayList _formatParamList;
    private ParameterInfo _destination;
    private ArrayList _mapOutputParameters;
    private static int _nameCounter;
    private static int _uniqueQueryID;
    [CompilerGeneratedAttribute]
private static Converter`2<NameOrIndexParameter, string> CS$<>9__CachedAnonymousMethodDelegate1;
    private Dictionary`2<Type, Type> ActualTypes { get; }
    private Type MethodReturnType { get; }
    public virtual int GetPriority(BuildContext context);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    private Dictionary`2<Type, Type> get_ActualTypes();
    private static ReturnType GetReturnType(Type returnType);
    private void ThrowTypeBuilderException(string message);
    protected virtual void BuildAbstractMethod();
    protected virtual void BuildAbstractGetter();
    protected virtual void BuildAbstractSetter();
    private void GetSqlQueryAttribute();
    private void AddParameter(ParameterInfo pi);
    private void ProcessParameters();
    private void CreateDbManager(bool beginException);
    private void SetObjectType();
    private void ExecuteReader();
    private void ExecuteDataSet(Type returnType);
    private void ExecuteDataTable();
    private void ExecuteScalarList();
    private void ExecuteList();
    public FieldBuilder GetIndexField(NameOrIndexParameter[] namesOrIndexes);
    private void ExecuteScalarDictionaryWithPK(Type keyType, NameOrIndexParameter scalarField, Type elementType);
    private void ExecuteScalarDictionaryWithMapIndex(NameOrIndexParameter[] index, NameOrIndexParameter scalarField, Type elementType);
    private void ExecuteScalarDictionaryWithScalarKey(NameOrIndexParameter keyField, Type keyType, NameOrIndexParameter scalarField, Type elementType);
    private void ExecuteDictionaryWithPK(Type keyType, Type elementType);
    private void ExecuteDictionaryWithMapIndex(NameOrIndexParameter[] index, Type elementType);
    private void ExecuteDictionaryWithScalarKey(NameOrIndexParameter keyField, Type elementType);
    public void ExecuteEnumerable();
    public void ExecuteNonQuery();
    public void ExecuteScalar();
    public void ExecuteObject();
    private void Finally();
    private void CreateReturnTypeInstance();
    private Type get_MethodReturnType();
    private void LoadDestinationOrReturnValue();
    private bool IsGenericDestinationOrReturnValue();
    private void InitObjectType();
    private void GetSprocNameOrSqlQueryTest();
    private void CallSetCommand();
    private LocalBuilder BuildParameters();
    private LocalBuilder BuildSimpleParameters();
    private FieldBuilder CreateStringArrayField(Object[] attrs);
    private FieldBuilder CreateNullValueField(Type type, string value);
    private LocalBuilder BuildRefParameters();
    private void LoadParameterOrNull(ParameterInfo pi, Type type);
    private void BuildParameter(ParameterInfo pi);
    private LocalBuilder BuildParametersWithDiscoverParameters();
    private void StoreParameterValue(LocalBuilder param, ParameterInfo pi, Type type);
    private void GetOutRefParameters();
    private static bool IsInterfaceOf(Type type, Type interfaceType);
    private MethodInfo GetConverterMethod(Type type);
    [CompilerGeneratedAttribute]
private static string <GetIndexField>b__0(NameOrIndexParameter nameOrIndex);
}
[AttributeUsageAttribute("64")]
public class BLToolkit.DataAccess.DataSetTableAttribute : Attribute {
    private NameOrIndexParameter _nameOrIndex;
    public NameOrIndexParameter NameOrIndex { get; public set; }
    public DataSetTableAttribute(string name);
    public DataSetTableAttribute(int index);
    public NameOrIndexParameter get_NameOrIndex();
    public void set_NameOrIndex(NameOrIndexParameter value);
}
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("384")]
public class BLToolkit.DataAccess.DbTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    public DbType DbType { get; public set; }
    public Nullable`1<int> Size { get; public set; }
    public DbTypeAttribute(DbType sqlDbType);
    public DbTypeAttribute(DbType sqlDbType, int size);
    [CompilerGeneratedAttribute]
public DbType get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<int> value);
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.DestinationAttribute : NoMapAttribute {
}
[CLSCompliantAttribute("False")]
[AttributeUsageAttribute("2048")]
public abstract class BLToolkit.DataAccess.Direction : Attribute {
    protected String[] _members;
    public String[] Members { get; public set; }
    public String[] get_Members();
    public void set_Members(String[] value);
}
[AttributeUsageAttribute("68")]
public class BLToolkit.DataAccess.DiscoverParametersAttribute : Attribute {
    private bool _discover;
    public bool Discover { get; }
    public DiscoverParametersAttribute(bool discover);
    public bool get_Discover();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.FormatAttribute : NoMapAttribute {
    private int _index;
    public int Index { get; }
    public FormatAttribute(int index);
    public int get_Index();
}
[AttributeUsageAttribute("1412")]
public class BLToolkit.DataAccess.IdentityAttribute : NonUpdatableAttribute {
}
[AttributeUsageAttribute("64")]
[CLSCompliantAttribute("False")]
public class BLToolkit.DataAccess.IndexAttribute : Attribute {
    private NameOrIndexParameter[] _fields;
    public NameOrIndexParameter[] Fields { get; }
    public IndexAttribute(String[] names);
    public IndexAttribute(Int32[] indices);
    public IndexAttribute(NameOrIndexParameter[] fields);
    public NameOrIndexParameter[] get_Fields();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.NoMapAttribute : Attribute {
    private bool _noMap;
    public bool NoMap { get; public set; }
    public NoMapAttribute(bool noMap);
    public bool get_NoMap();
    public void set_NoMap(bool value);
}
[AttributeUsageAttribute("1412")]
public class BLToolkit.DataAccess.NonUpdatableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <OnInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    public bool OnInsert { get; public set; }
    public bool OnUpdate { get; public set; }
    public bool IsIdentity { get; public set; }
    public string FieldName { get; public set; }
    public NonUpdatableAttribute(bool onInsert, bool onUpdate, bool isIdentity);
    [CompilerGeneratedAttribute]
public bool get_OnInsert();
    [CompilerGeneratedAttribute]
public void set_OnInsert(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnUpdate();
    [CompilerGeneratedAttribute]
public void set_OnUpdate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
}
[BaseTypeRequiredAttribute("BLToolkit.DataAccess.DataAccessor")]
[AttributeUsageAttribute("68")]
public class BLToolkit.DataAccess.ObjectTypeAttribute : Attribute {
    private Type _objectType;
    public Type ObjectType { get; }
    public ObjectTypeAttribute(Type objectType);
    public Type get_ObjectType();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.ParamDbTypeAttribute : Attribute {
    private DbType _dbType;
    public DbType DbType { get; }
    public ParamDbTypeAttribute(DbType dbType);
    public DbType get_DbType();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.ParamNameAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public ParamNameAttribute(string name);
    public string get_Name();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.ParamNullValueAttribute : Attribute {
    private object _value;
    public object Value { get; }
    public ParamNullValueAttribute(object value);
    public ParamNullValueAttribute(Type type, string value);
    public object get_Value();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.ParamSizeAttribute : Attribute {
    private int _size;
    public int Size { get; }
    public ParamSizeAttribute(int size);
    public int get_Size();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.DataAccess.ParamTypeNameAttribute : Attribute {
    private string _typeName;
    public string TypeName { get; }
    public ParamTypeNameAttribute(string typeName);
    public string get_TypeName();
}
[AttributeUsageAttribute("384")]
public class BLToolkit.DataAccess.PrimaryKeyAttribute : Attribute {
    private int _order;
    public int Order { get; }
    public PrimaryKeyAttribute(int order);
    public int get_Order();
}
[AttributeUsageAttribute("64")]
public class BLToolkit.DataAccess.ScalarFieldNameAttribute : Attribute {
    private NameOrIndexParameter _nameOrIndex;
    public NameOrIndexParameter NameOrIndex { get; public set; }
    public ScalarFieldNameAttribute(string name);
    public ScalarFieldNameAttribute(int index);
    public NameOrIndexParameter get_NameOrIndex();
    public void set_NameOrIndex(NameOrIndexParameter value);
}
[AttributeUsageAttribute("64")]
public class BLToolkit.DataAccess.ScalarSourceAttribute : ScalarFieldNameAttribute {
    private ScalarSourceType _scalarType;
    public ScalarSourceType ScalarType { get; public set; }
    public ScalarSourceAttribute(ScalarSourceType scalarType);
    public ScalarSourceAttribute(ScalarSourceType scalarType, string name);
    public ScalarSourceAttribute(ScalarSourceType scalarType, int index);
    public ScalarSourceType get_ScalarType();
    public void set_ScalarType(ScalarSourceType value);
}
[AttributeUsageAttribute("64")]
public class BLToolkit.DataAccess.SprocNameAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public SprocNameAttribute(string name);
    public string get_Name();
}
public class BLToolkit.DataAccess.SprocQuery : DataAccessorBase {
    public SprocQuery(DbManager dbManager);
    public SprocQuery(DbManager dbManager, bool dispose);
    public virtual object SelectByKey(DbManager db, Type type, Object[] key);
    public virtual object SelectByKey(Type type, Object[] key);
    public virtual T SelectByKey(DbManager db, Object[] key);
    public virtual T SelectByKey(Object[] key);
    public virtual ArrayList SelectAll(DbManager db, Type type);
    public virtual IList SelectAll(DbManager db, IList list, Type type);
    public virtual ArrayList SelectAll(Type type);
    public virtual IList SelectAll(IList list, Type type);
    public virtual List`1<T> SelectAll(DbManager db);
    public virtual L SelectAll(DbManager db, L list);
    public virtual L SelectAll(DbManager db);
    public virtual List`1<T> SelectAll();
    public virtual L SelectAll(L list);
    public virtual L SelectAll();
    public virtual void Insert(DbManager db, object obj);
    public virtual void Insert(object obj);
    public virtual int Update(DbManager db, object obj);
    public virtual int Update(object obj);
    public virtual int DeleteByKey(DbManager db, Type type, Object[] key);
    public virtual int DeleteByKey(Type type, Object[] key);
    public virtual int Delete(DbManager db, object obj);
    public virtual int Delete(object obj);
}
public class BLToolkit.DataAccess.SprocQuery`1 : DataAccessorBase {
    public SprocQuery`1(DbManager dbManager);
    public SprocQuery`1(DbManager dbManager, bool dispose);
    public virtual T SelectByKey(DbManager db, Object[] key);
    public virtual T SelectByKey(Object[] key);
    public virtual List`1<T> SelectAll(DbManager db);
    public virtual L SelectAll(DbManager db, L list);
    public virtual L SelectAll(DbManager db);
    public virtual List`1<T> SelectAll();
    public virtual L SelectAll(L list);
    public virtual L SelectAll();
    public virtual void Insert(DbManager db, T obj);
    public virtual void Insert(T obj);
    public virtual int Update(DbManager db, T obj);
    public virtual int Update(T obj);
    public virtual int DeleteByKey(DbManager db, Object[] key);
    public virtual int DeleteByKey(Object[] key);
    public virtual int Delete(DbManager db, T obj);
    public virtual int Delete(T obj);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.DataAccess.SqlIgnoreAttribute : Attribute {
    private bool _ignore;
    public bool Ignore { get; public set; }
    public SqlIgnoreAttribute(bool ignore);
    public bool get_Ignore();
    public void set_Ignore(bool value);
}
public class BLToolkit.DataAccess.SqlQuery : SqlQueryBase {
    public SqlQuery(DbManager dbManager);
    public SqlQuery(DbManager dbManager, bool dispose);
    public SqlQuery(ExtensionList extensions);
    public SqlQueryInfo GetSqlQueryInfo(DbManager db, string actionName);
    public virtual object SelectByKey(DbManager db, Type type, Object[] keys);
    public virtual object SelectByKey(Type type, Object[] keys);
    public virtual T SelectByKey(DbManager db, Object[] keys);
    public virtual T SelectByKey(Object[] keys);
    public virtual ArrayList SelectAll(DbManager db, Type type);
    public virtual IList SelectAll(DbManager db, IList list, Type type);
    public virtual ArrayList SelectAll(Type type);
    public virtual IList SelectAll(IList list, Type type);
    public virtual List`1<T> SelectAll(DbManager db);
    public virtual TL SelectAll(DbManager db, TL list);
    public virtual TL SelectAll(DbManager db);
    public virtual List`1<T> SelectAll();
    public virtual TL SelectAll(TL list);
    public virtual TL SelectAll();
    public virtual int Insert(DbManager db, object obj);
    public virtual int Insert(object obj);
    public virtual int Update(DbManager db, object obj);
    public virtual int Update(object obj);
    public virtual int DeleteByKey(DbManager db, Type type, Object[] key);
    public virtual int DeleteByKey(Type type, Object[] key);
    public virtual int DeleteByKey(DbManager db, Object[] key);
    public virtual int DeleteByKey(Object[] key);
    public virtual int Delete(DbManager db, object obj);
    public virtual int Delete(object obj);
}
public class BLToolkit.DataAccess.SqlQuery`1 : SqlQueryBase {
    private static SqlQueryInfo _selectAllQuery;
    public SqlQuery`1(DbManager dbManager);
    public SqlQuery`1(DbManager dbManager, bool dispose);
    public SqlQuery`1(ExtensionList extensions);
    public SqlQueryInfo GetSqlQueryInfo(DbManager db, string actionName);
    public virtual T SelectByKey(DbManager db, Object[] keys);
    public virtual T SelectByKey(Object[] keys);
    public virtual List`1<T> SelectAll(DbManager db);
    public virtual TL SelectAll(DbManager db, TL list);
    public virtual TL SelectAll(DbManager db);
    public virtual List`1<T> SelectAll();
    public virtual TL SelectAll(TL list);
    public virtual TL SelectAll();
    public virtual int Insert(DbManager db, T obj);
    public virtual int Insert(T obj);
    public virtual int Insert(DbManager db, int maxBatchSize, IEnumerable`1<T> list);
    public virtual int Insert(int maxBatchSize, IEnumerable`1<T> list);
    public virtual int Insert(DbManager db, IEnumerable`1<T> list);
    public virtual int Insert(IEnumerable`1<T> list);
    public virtual int Update(DbManager db, T obj);
    public virtual int Update(T obj);
    public virtual int Update(DbManager db, int maxBatchSize, IEnumerable`1<T> list);
    public virtual int Update(int maxBatchSize, IEnumerable`1<T> list);
    public virtual int Update(DbManager db, IEnumerable`1<T> list);
    public virtual int Update(IEnumerable`1<T> list);
    public virtual int DeleteByKey(DbManager db, Object[] key);
    public virtual int DeleteByKey(Object[] key);
    public virtual int Delete(DbManager db, T obj);
    public virtual int Delete(T obj);
    public virtual int Delete(DbManager db, int maxBatchSize, IEnumerable`1<T> list);
    public virtual int Delete(int maxBatchSize, IEnumerable`1<T> list);
    public virtual int Delete(DbManager db, IEnumerable`1<T> list);
    public virtual int Delete(IEnumerable`1<T> list);
    protected int ExecuteForEach(DbManager db, IEnumerable`1<T> collection, MemberMapper[] members, int maxBatchSize, ParameterProvider`1<T> getParameters);
}
[AttributeUsageAttribute("64")]
[BaseTypeRequiredAttribute("BLToolkit.DataAccess.DataAccessor")]
public class BLToolkit.DataAccess.SqlQueryAttribute : Attribute {
    private string _sqlText;
    private bool _isDynamic;
    private int _id;
    public string SqlText { get; public set; }
    public bool IsDynamic { get; public set; }
    public int ID { get; public set; }
    public SqlQueryAttribute(string sqlText);
    public string get_SqlText();
    public void set_SqlText(string value);
    public bool get_IsDynamic();
    public void set_IsDynamic(bool value);
    public int get_ID();
    public void set_ID(int value);
    public virtual string GetSqlText(DataAccessor accessor, DbManager dbManager);
}
public abstract class BLToolkit.DataAccess.SqlQueryBase : DataAccessorBase {
    private static Hashtable _keyList;
    private static Hashtable _actionSqlQueryInfo;
    [CompilerGeneratedAttribute]
private static Comparison`1<MemberOrder> CS$<>9__CachedAnonymousMethodDelegate1;
    protected SqlQueryBase(DbManager dbManager);
    protected SqlQueryBase(DbManager dbManager, bool dispose);
    private static SqlQueryBase();
    [NoInterceptionAttribute]
protected virtual MemberMapper[] GetFieldList(ObjectMapper om);
    [NoInterceptionAttribute]
protected virtual MemberMapper[] GetNonKeyFieldList(ObjectMapper om);
    [NoInterceptionAttribute]
protected internal virtual MemberMapper[] GetKeyFieldList(DbManager db, Type type);
    [NoInterceptionAttribute]
protected virtual void AddWherePK(DbManager db, SqlQueryInfo query, StringBuilder sb, int nParameter);
    protected SqlQueryInfo CreateSelectByKeySqlText(DbManager db, Type type);
    protected void AppendTableName(StringBuilder sb, DbManager db, Type type);
    protected SqlQueryInfo CreateSelectAllSqlText(DbManager db, Type type);
    protected SqlQueryInfo CreateInsertSqlText(DbManager db, Type type, int nParameter);
    protected SqlQueryInfo CreateUpdateSqlText(DbManager db, Type type, int nParameter);
    protected SqlQueryInfo CreateDeleteSqlText(DbManager db, Type type, int nParameter);
    [NoInterceptionAttribute]
protected virtual SqlQueryInfo CreateSqlText(DbManager db, Type type, string actionName);
    [NoInterceptionAttribute]
public virtual SqlQueryInfo GetSqlQueryInfo(DbManager db, Type type, string actionName);
    [CompilerGeneratedAttribute]
private static int <GetKeyFieldList>b__0(MemberOrder x, MemberOrder y);
}
public class BLToolkit.DataAccess.SqlQueryInfo : object {
    private List`1<SqlQueryParameterInfo> _parameters;
    [CompilerGeneratedAttribute]
private string <QueryText>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectMapper <ObjectMapper>k__BackingField;
    public string QueryText { get; public set; }
    public ObjectMapper ObjectMapper { get; private set; }
    public Type ObjectType { get; }
    public SqlQueryInfo(ObjectMapper objectMapper);
    [CompilerGeneratedAttribute]
public string get_QueryText();
    [CompilerGeneratedAttribute]
public void set_QueryText(string value);
    [CompilerGeneratedAttribute]
public ObjectMapper get_ObjectMapper();
    [CompilerGeneratedAttribute]
private void set_ObjectMapper(ObjectMapper value);
    public Type get_ObjectType();
    public SqlQueryParameterInfo AddParameter(string parameterName, string fieldName);
    public IDbDataParameter[] GetParameters(DbManager db, Object[] key);
    public IDbDataParameter[] GetParameters(DbManager db, object obj);
    public MemberMapper[] GetMemberMappers();
}
public class BLToolkit.DataAccess.SqlQueryParameterInfo : object {
    private string _parameterName;
    private string _fieldName;
    private MemberMapper _memberMapper;
    public string ParameterName { get; public set; }
    public string FieldName { get; public set; }
    public MemberMapper MemberMapper { get; }
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public MemberMapper get_MemberMapper();
    internal void SetMemberMapper(ObjectMapper objectMapper);
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.DataAccess.TableNameAttribute : Attribute {
    private string _database;
    private string _owner;
    private string _name;
    public string Database { get; public set; }
    public string Owner { get; public set; }
    public string Name { get; public set; }
    public TableNameAttribute(string name);
    public TableNameAttribute(string database, string name);
    public TableNameAttribute(string database, string owner, string name);
    public virtual string get_Database();
    public virtual void set_Database(string value);
    public virtual string get_Owner();
    public virtual void set_Owner(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
}
[DebuggerDisplayAttribute("Count = {Count}, ItemType = {ItemType}")]
[DefaultMemberAttribute("Item")]
public class BLToolkit.EditableObjects.EditableArrayList : ArrayList {
    private ArrayList _newItems;
    private ArrayList _delItems;
    private int _noTrackingChangesCount;
    private int _minTrackingChangesCount;
    private TypedListImpl _typedListImpl;
    private BindingListImpl _bindingListImpl;
    private ListChangedEventHandler ListChanged;
    private bool _supressEvent;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private ArrayList <List>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    internal ArrayList List { get; private set; }
    public Type ItemType { get; private set; }
    public ArrayList NewItems { get; }
    public ArrayList DelItems { get; }
    public bool NotifyChanges { get; public set; }
    public bool IsTrackingChanges { get; }
    public bool IsDirty { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public int Capacity { get; public set; }
    private TypedListImpl TypedListImpl { get; }
    private BindingListImpl BindingListImpl { get; }
    public bool AllowEdit { get; }
    public bool AllowNew { get; }
    public bool AllowRemove { get; }
    public bool IsSorted { get; }
    public ListSortDirection SortDirection { get; }
    public PropertyDescriptor SortProperty { get; }
    public bool SupportsChangeNotification { get; }
    public bool SupportsSearching { get; }
    public bool SupportsSorting { get; }
    public string Filter { get; public set; }
    public ListSortDescriptionCollection SortDescriptions { get; }
    public bool SupportsAdvancedSorting { get; }
    public bool SupportsFiltering { get; }
    public EditableArrayList(Type itemType, ArrayList list, bool trackChanges);
    public EditableArrayList(Type itemType);
    public EditableArrayList(Type itemType, bool trackChanges);
    public EditableArrayList(Type itemType, int capacity);
    public EditableArrayList(Type itemType, int capacity, bool trackChanges);
    public EditableArrayList(Type itemType, ICollection c);
    public EditableArrayList(Type itemType, ICollection c, bool trackChanges);
    public EditableArrayList(Type itemType, ArrayList list);
    public EditableArrayList(EditableArrayList list);
    public EditableArrayList(EditableArrayList list, bool trackChanges);
    public EditableArrayList(Type itemType, EditableArrayList list);
    public EditableArrayList(Type itemType, EditableArrayList list, bool trackChanges);
    [CompilerGeneratedAttribute]
internal ArrayList get_List();
    [CompilerGeneratedAttribute]
private void set_List(ArrayList value);
    [CompilerGeneratedAttribute]
public Type get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(Type value);
    public ArrayList get_NewItems();
    public ArrayList get_DelItems();
    public void Sort(String[] memberNames);
    public void Sort(ListSortDirection direction, String[] memberNames);
    public void SortEx(string sortExpression);
    public void Move(int newIndex, int oldIndex);
    public void Move(int newIndex, object item);
    public bool get_NotifyChanges();
    public void set_NotifyChanges(bool value);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected void OnListChanged(ListChangedType listChangedType, int index);
    private void OnResetList();
    private void OnAddItem(object newObject, int index);
    private void AddInternal(object value);
    private void RemoveInternal(object value);
    private void AddInternal(IEnumerable e);
    private void RemoveInternal(IEnumerable e);
    protected virtual void OnAdd(object value);
    protected virtual void OnRemove(object value);
    public bool get_IsTrackingChanges();
    protected void SetTrackingChanges(bool trackChanges);
    public virtual void BeginMapping(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
    public virtual void AcceptChanges();
    public virtual void RejectChanges();
    public virtual bool get_IsDirty();
    private sealed virtual override void BLToolkit.EditableObjects.IPrintDebugState.PrintDebugState(PropertyInfo propertyInfo, String& str);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual int Add(object value);
    public virtual void Clear();
    public virtual bool Contains(object item);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void CopyTo(Array array, int arrayIndex);
    public virtual IEnumerator GetEnumerator();
    public int Add(object value, bool trackChanges);
    public virtual void AddRange(ICollection c);
    public void AddRange(ICollection c, bool trackChanges);
    public virtual int BinarySearch(int index, int count, object value, IComparer comparer);
    public virtual int BinarySearch(object value);
    public virtual int BinarySearch(object value, IComparer comparer);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public void Clear(bool trackChanges);
    protected EditableArrayList Clone(EditableArrayList el);
    public virtual object Clone();
    public virtual void CopyTo(int index, Array array, int arrayIndex, int count);
    public virtual void CopyTo(Array array);
    public virtual bool Equals(object obj);
    public virtual IEnumerator GetEnumerator(int index, int count);
    public virtual int GetHashCode();
    public virtual ArrayList GetRange(int index, int count);
    public virtual int IndexOf(object value, int startIndex);
    public virtual int IndexOf(object value, int startIndex, int count);
    public void Insert(int index, object value, bool trackChanges);
    public virtual void InsertRange(int index, ICollection c);
    public void InsertRange(int index, ICollection c, bool trackChanges);
    public virtual int LastIndexOf(object value);
    public virtual int LastIndexOf(object value, int startIndex);
    public virtual int LastIndexOf(object value, int startIndex, int count);
    public void Remove(object obj, bool trackChanges);
    public void RemoveAt(int index, bool trackChanges);
    public virtual void RemoveRange(int index, int count);
    public void RemoveRange(int index, int count, bool trackChanges);
    public virtual void Reverse();
    public virtual void Reverse(int index, int count);
    public virtual void SetRange(int index, ICollection c);
    public virtual void Sort();
    public virtual void Sort(int index, int count, IComparer comparer);
    public virtual void Sort(IComparer comparer);
    public virtual Object[] ToArray();
    public virtual Array ToArray(Type type);
    public virtual string ToString();
    public virtual void TrimToSize();
    public static EditableArrayList Adapter(Type itemType, IList list);
    public static EditableArrayList Adapter(IList list);
    public sealed virtual void Dispose();
    private TypedListImpl get_TypedListImpl();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors, Type objectViewType, IsNullHandler isNull, bool cache);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
    private BindingListImpl get_BindingListImpl();
    public sealed virtual void AddIndex(PropertyDescriptor property);
    public sealed virtual object AddNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    public sealed virtual int Find(PropertyDescriptor property, object key);
    public sealed virtual bool get_IsSorted();
    public sealed virtual void RemoveIndex(PropertyDescriptor property);
    public sealed virtual void RemoveSort();
    public sealed virtual ListSortDirection get_SortDirection();
    public sealed virtual PropertyDescriptor get_SortProperty();
    public sealed virtual bool get_SupportsChangeNotification();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private void BeginSuppressEvent();
    private void EndSuppressEvent();
    public sealed virtual bool get_SupportsSearching();
    public sealed virtual bool get_SupportsSorting();
    public void CreateSortSubstitution(string originalProperty, string substituteProperty);
    public void RemoveSortSubstitution(string originalProperty);
    public sealed virtual void ApplySort(ListSortDescriptionCollection sorts);
    public sealed virtual string get_Filter();
    public sealed virtual void set_Filter(string value);
    public sealed virtual void RemoveFilter();
    public sealed virtual ListSortDescriptionCollection get_SortDescriptions();
    public sealed virtual bool get_SupportsAdvancedSorting();
    public sealed virtual bool get_SupportsFiltering();
    public sealed virtual void CancelNew(int itemIndex);
    public sealed virtual void EndNew(int itemIndex);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
}
[DebuggerDisplayAttribute("Count = {Count}")]
[DefaultMemberAttribute("Item")]
public class BLToolkit.EditableObjects.EditableList`1 : EditableArrayList {
    public T Item { get; public set; }
    public EditableList`1(int capacity);
    public EditableList`1(ICollection c);
    public EditableList`1(bool trackChanges);
    public EditableList`1(int capacity, bool trackChanges);
    public EditableList`1(ICollection c, bool trackChanges);
    public EditableList`1(EditableList`1<T> list);
    public EditableList`1(EditableList`1<T> list, bool trackChanges);
    internal EditableList`1(ArrayList list);
    public virtual object Clone();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public T[] ToArray();
    public T AddNew();
    public int RemoveAll(Predicate`1<T> match);
    public T Find(Predicate`1<T> match);
    public EditableList`1<T> FindAll(Predicate`1<T> match);
    public int FindIndex(Predicate`1<T> match);
    public int FindIndex(int startIndex, Predicate`1<T> match);
    public int FindIndex(int startIndex, int count, Predicate`1<T> match);
    public T FindLast(Predicate`1<T> match);
    public int FindLastIndex(Predicate`1<T> match);
    public int FindLastIndex(int startIndex, Predicate`1<T> match);
    public int FindLastIndex(int startIndex, int count, Predicate`1<T> match);
    public void ForEach(Action`1<T> action);
    public void Sort(IComparer`1<T> comparer);
    public void Sort(int index, int count, IComparer`1<T> comparer);
    public void Sort(Comparison`1<T> comparison);
    public static EditableList`1<T> Adapter(List`1<T> list);
    public static EditableList`1<T> Adapter(IList list);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void Add(T item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
public class BLToolkit.EditableObjects.EditableListChangedEventArgs : ListChangedEventArgs {
    public EditableListChangedEventArgs(int newIndex, int oldIndex);
    public EditableListChangedEventArgs(ListChangedType listChangedType, int index);
    public EditableListChangedEventArgs(ListChangedType listChangedType);
    public EditableListChangedEventArgs(int index, PropertyDescriptor propDesc);
}
[GlobalInstanceTypeAttribute("System.Nullable`1<System.UInt16>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.UInt16>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.SByte>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.SByte>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Int16>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Int16>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Int32>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Int32>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Int64>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Int64>>")]
[ImplementInterfaceAttribute("BLToolkit.EditableObjects.IPrintDebugState")]
[GlobalInstanceTypeAttribute("System.Byte", "BLToolkit.EditableObjects.EditableValue`1<System.Byte>")]
[GlobalInstanceTypeAttribute("System.Char", "BLToolkit.EditableObjects.EditableValue`1<System.Char>")]
[GlobalInstanceTypeAttribute("System.UInt16", "BLToolkit.EditableObjects.EditableValue`1<System.UInt16>")]
[GlobalInstanceTypeAttribute("System.UInt32", "BLToolkit.EditableObjects.EditableValue`1<System.UInt32>")]
[GlobalInstanceTypeAttribute("System.UInt64", "BLToolkit.EditableObjects.EditableValue`1<System.UInt64>")]
[GlobalInstanceTypeAttribute("System.Boolean", "BLToolkit.EditableObjects.EditableValue`1<System.Boolean>")]
[GlobalInstanceTypeAttribute("System.SByte", "BLToolkit.EditableObjects.EditableValue`1<System.SByte>")]
[GlobalInstanceTypeAttribute("System.Int16", "BLToolkit.EditableObjects.EditableValue`1<System.Int16>")]
[GlobalInstanceTypeAttribute("System.Int32", "BLToolkit.EditableObjects.EditableValue`1<System.Int32>")]
[GlobalInstanceTypeAttribute("System.Int64", "BLToolkit.EditableObjects.EditableValue`1<System.Int64>")]
[GlobalInstanceTypeAttribute("System.Single", "BLToolkit.EditableObjects.EditableValue`1<System.Single>")]
[GlobalInstanceTypeAttribute("System.Double", "BLToolkit.EditableObjects.EditableValue`1<System.Double>")]
[GlobalInstanceTypeAttribute("System.String", "BLToolkit.EditableObjects.EditableValue`1<System.String>", "Mono.Cecil.CustomAttributeArgument")]
[GlobalInstanceTypeAttribute("System.DateTime", "BLToolkit.EditableObjects.EditableValue`1<System.DateTime>")]
[GlobalInstanceTypeAttribute("System.Decimal", "BLToolkit.EditableObjects.EditableValue`1<System.Decimal>")]
[GlobalInstanceTypeAttribute("System.Guid", "BLToolkit.EditableObjects.EditableValue`1<System.Guid>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Byte>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Byte>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Char>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Char>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.UInt32>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.UInt32>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.UInt64>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.UInt64>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Boolean>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Boolean>>")]
[ImplementInterfaceAttribute("BLToolkit.TypeBuilder.ISetParent")]
[ComVisibleAttribute("True")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Single>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Single>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Double>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Double>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.DateTime>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.DateTime>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Decimal>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Decimal>>")]
[GlobalInstanceTypeAttribute("System.Nullable`1<System.Guid>", "BLToolkit.EditableObjects.EditableValue`1<System.Nullable`1<System.Guid>>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlBoolean", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlBoolean>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlByte", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlByte>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlDateTime", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlDateTime>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlDecimal", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlDecimal>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlDouble", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlDouble>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlGuid", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlGuid>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlInt16", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlInt16>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlInt32", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlInt32>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlInt64", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlInt64>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlMoney", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlMoney>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlSingle", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlSingle>")]
[GlobalInstanceTypeAttribute("System.Data.SqlTypes.SqlString", "BLToolkit.EditableObjects.EditableValue`1<System.Data.SqlTypes.SqlString>", "Mono.Cecil.CustomAttributeArgument")]
[GlobalInstanceTypeAttribute("System.Xml.XmlDocument", "BLToolkit.EditableObjects.EditableXmlDocument")]
[GlobalInstanceTypeAttribute("BLToolkit.EditableObjects.EditableObject", "BLToolkit.EditableObjects.EditableObjectHolder")]
[ImplementInterfaceAttribute("BLToolkit.EditableObjects.IEditable")]
[ImplementInterfaceAttribute("BLToolkit.EditableObjects.IMemberwiseEditable")]
public abstract class BLToolkit.EditableObjects.EditableObject : EntityBase {
    private bool _isInMapping;
    private int _notNotifyChangesCount;
    private PropertyChangedEventHandler PropertyChanged;
    private ObjectEditEventHandler ObjectEdit;
    [MapIgnoreAttribute]
[BindableAttribute("False")]
public bool IsDirty { get; }
    [MapIgnoreAttribute]
[BindableAttribute("False")]
public string PrintDebugState { get; }
    [BindableAttribute("False")]
[MapIgnoreAttribute]
public bool IsInMapping { get; }
    [BindableAttribute("False")]
[MapIgnoreAttribute]
[XmlIgnoreAttribute]
public bool NotifyChanges { get; public set; }
    public virtual void AcceptChanges();
    public virtual void RejectChanges();
    public virtual bool get_IsDirty();
    public virtual void AcceptMemberChanges(string memberName);
    public virtual void RejectMemberChanges(string memberName);
    public virtual bool IsDirtyMember(string memberName);
    public virtual PropertyInfo[] GetDirtyMembers();
    public virtual string get_PrintDebugState();
    public bool get_IsInMapping();
    protected void SetIsInMapping(bool isInMapping);
    public virtual void BeginMapping(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
    protected internal virtual void OnPropertyChanged(string propertyName);
    public bool get_NotifyChanges();
    public void set_NotifyChanges(bool value);
    public void LockNotifyChanges();
    public void UnlockNotifyChanges();
    private sealed virtual override void BLToolkit.TypeBuilder.IPropertyChanged.OnPropertyChanged(PropertyInfo propertyInfo);
    public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void BeginEdit();
    public virtual void CancelEdit();
    public virtual void EndEdit();
    public sealed virtual void add_ObjectEdit(ObjectEditEventHandler value);
    public sealed virtual void remove_ObjectEdit(ObjectEditEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
}
public abstract class BLToolkit.EditableObjects.EditableObject`1 : EditableObject {
    public static T CreateInstance();
    public virtual T Clone();
    public void CopyTo(T dest);
}
public class BLToolkit.EditableObjects.EditableObjectHolder : object {
    private EditableObject _original;
    private EditableObject _current;
    private object _parent;
    private PropertyInfo _propertyInfo;
    [SetValueAttribute]
[GetValueAttribute]
public EditableObject Value { get; public set; }
    public bool IsDirty { get; }
    public EditableObjectHolder(EditableObject obj);
    private void _current_PropertyChanged(object sender, PropertyChangedEventArgs e);
    public EditableObject get_Value();
    public void set_Value(EditableObject value);
    public sealed virtual void AcceptChanges();
    public sealed virtual void RejectChanges();
    public sealed virtual bool get_IsDirty();
    public sealed virtual bool AcceptMemberChanges(PropertyInfo propertyInfo, string memberName);
    public sealed virtual bool RejectMemberChanges(PropertyInfo propertyInfo, string memberName);
    public sealed virtual bool IsDirtyMember(PropertyInfo propertyInfo, string memberName, Boolean& isDirty);
    public sealed virtual void GetDirtyMembers(PropertyInfo propertyInfo, ArrayList list);
    public sealed virtual void PrintDebugState(PropertyInfo propertyInfo, String& str);
    public sealed virtual void SetParent(object parent, PropertyInfo propertyInfo);
}
public class BLToolkit.EditableObjects.EditableValue`1 : ValueType {
    private T _original;
    private T _current;
    [SetValueAttribute]
[GetValueAttribute]
public T Value { get; public set; }
    public bool IsDirty { get; }
    public EditableValue`1(T value);
    public T get_Value();
    public void set_Value(T value);
    public sealed virtual void AcceptChanges();
    public sealed virtual void RejectChanges();
    public sealed virtual bool get_IsDirty();
    public sealed virtual bool AcceptMemberChanges(PropertyInfo propertyInfo, string memberName);
    public sealed virtual bool RejectMemberChanges(PropertyInfo propertyInfo, string memberName);
    public sealed virtual bool IsDirtyMember(PropertyInfo propertyInfo, string memberName, Boolean& isDirty);
    public sealed virtual void GetDirtyMembers(PropertyInfo propertyInfo, ArrayList list);
    public sealed virtual void PrintDebugState(PropertyInfo propertyInfo, String& str);
}
public class BLToolkit.EditableObjects.EditableXmlDocument : object {
    private Stack _changedNodes;
    private XmlDocument _original;
    private XmlDocument _current;
    private IPropertyChanged _parent;
    private PropertyInfo _propertyInfo;
    [GetValueAttribute]
[SetValueAttribute]
public XmlDocument Value { get; public set; }
    public bool IsDirty { get; }
    public EditableXmlDocument(XmlDocument value);
    public XmlDocument get_Value();
    public void set_Value(XmlDocument value);
    private void StartXmlDocTracking();
    private void StopXmlDocTracking();
    private void HandleNodeChanged(object sender, XmlNodeChangedEventArgs ea);
    public sealed virtual void AcceptChanges();
    public sealed virtual void RejectChanges();
    public sealed virtual bool get_IsDirty();
    public sealed virtual bool AcceptMemberChanges(PropertyInfo propertyInfo, string memberName);
    public sealed virtual bool RejectMemberChanges(PropertyInfo propertyInfo, string memberName);
    public sealed virtual bool IsDirtyMember(PropertyInfo propertyInfo, string memberName, Boolean& isDirty);
    public sealed virtual void GetDirtyMembers(PropertyInfo propertyInfo, ArrayList list);
    public sealed virtual void PrintDebugState(PropertyInfo propertyInfo, String& str);
    public sealed virtual void SetParent(object parent, PropertyInfo propertyInfo);
}
public interface BLToolkit.EditableObjects.IEditable {
    public bool IsDirty { get; }
    public abstract virtual void AcceptChanges();
    public abstract virtual void RejectChanges();
    public abstract virtual bool get_IsDirty();
}
public interface BLToolkit.EditableObjects.IMemberwiseEditable {
    public abstract virtual bool AcceptMemberChanges(PropertyInfo propertyInfo, string memberName);
    public abstract virtual bool RejectMemberChanges(PropertyInfo propertyInfo, string memberName);
    public abstract virtual bool IsDirtyMember(PropertyInfo propertyInfo, string memberName, Boolean& isDirty);
    public abstract virtual void GetDirtyMembers(PropertyInfo propertyInfo, ArrayList list);
}
public interface BLToolkit.EditableObjects.IPrintDebugState {
    public abstract virtual void PrintDebugState(PropertyInfo propertyInfo, String& str);
}
[ExtensionAttribute]
internal static class BLToolkit.Linq.ExpressionHelper : object {
    public static bool IsConstant(Type type);
    public static bool Compare(Expression expr1, Expression expr2, Dictionary`2<Expression, Func`2<Expression, IQueryable>> queryableAccessorDic);
    private static Expression ConvertTo(Expression expr, Type type);
    private static void Path(IEnumerable`1<T> source, Expression path, MethodInfo property, Action`2<T, Expression> func);
    private static void Path(IEnumerable`1<T> source, Expression path, MethodInfo property, Action`2<Expression, Expression> func);
    private static void Path(Expression expr, Expression path, MethodInfo property, Action`2<Expression, Expression> func);
    [ExtensionAttribute]
public static void Path(Expression expr, Expression path, Action`2<Expression, Expression> func);
    private static void Visit(IEnumerable`1<T> source, Action`1<T> func);
    private static void Visit(IEnumerable`1<T> source, Action`1<Expression> func);
    [ExtensionAttribute]
public static void Visit(Expression expr, Action`1<Expression> func);
    private static void Visit(IEnumerable`1<T> source, Func`2<T, bool> func);
    private static void Visit(IEnumerable`1<T> source, Func`2<Expression, bool> func);
    [ExtensionAttribute]
public static void Visit(Expression expr, Func`2<Expression, bool> func);
    private static Expression Find(IEnumerable`1<T> source, Func`2<T, Expression> func);
    private static Expression Find(IEnumerable`1<T> source, Func`2<Expression, bool> func);
    [ExtensionAttribute]
public static Expression Find(Expression expr, Func`2<Expression, bool> func);
    private static IEnumerable`1<T> Convert(IEnumerable`1<T> source, Func`2<T, T> func);
    private static IEnumerable`1<T> Convert(IEnumerable`1<T> source, Func`2<Expression, Expression> func);
    [ExtensionAttribute]
public static Expression Convert(Expression expr, Func`2<Expression, Expression> func);
    private static IEnumerable`1<T> Convert2(IEnumerable`1<T> source, Func`2<T, T> func);
    private static IEnumerable`1<T> Convert2(IEnumerable`1<T> source, Func`2<Expression, ConvertInfo> func);
    [ExtensionAttribute]
public static Expression Convert2(Expression expr, Func`2<Expression, ConvertInfo> func);
    [ExtensionAttribute]
public static Expression Unwrap(Expression ex);
    [ExtensionAttribute]
public static Dictionary`2<Expression, Expression> GetExpressionAccessors(Expression expression, Expression path);
    [ExtensionAttribute]
public static Expression GetRootObject(Expression expr);
    [ExtensionAttribute]
public static bool IsQueryable(MethodCallExpression method);
    [ExtensionAttribute]
public static bool IsQueryable(MethodCallExpression method, string name);
    [ExtensionAttribute]
public static bool IsQueryable(MethodCallExpression method, String[] names);
    private static Expression FindLevel(Expression expression, int level, Int32& current);
    [ExtensionAttribute]
public static Expression GetLevelExpression(Expression expression, int level);
}
[ExtensionAttribute]
public static class BLToolkit.Linq.Extensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
}
public class BLToolkit.Mapping.Association : object {
    [CompilerGeneratedAttribute]
private MemberAccessor <MemberAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ThisKey>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <OtherKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeNull>k__BackingField;
    public MemberAccessor MemberAccessor { get; public set; }
    public String[] ThisKey { get; public set; }
    public String[] OtherKey { get; public set; }
    public string Storage { get; public set; }
    public bool CanBeNull { get; public set; }
    public Association(MemberAccessor memberAccessor, String[] thisKey, String[] otherKey, string storage, bool canBeNull);
    [CompilerGeneratedAttribute]
public MemberAccessor get_MemberAccessor();
    [CompilerGeneratedAttribute]
public void set_MemberAccessor(MemberAccessor value);
    [CompilerGeneratedAttribute]
public String[] get_ThisKey();
    [CompilerGeneratedAttribute]
public void set_ThisKey(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_OtherKey();
    [CompilerGeneratedAttribute]
public void set_OtherKey(String[] value);
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(string value);
    [CompilerGeneratedAttribute]
public bool get_CanBeNull();
    [CompilerGeneratedAttribute]
public void set_CanBeNull(bool value);
    public static String[] ParseKeys(string keys);
}
[AttributeUsageAttribute("448")]
public class BLToolkit.Mapping.AssociationAttribute : Attribute {
    private string _thisKey;
    private string _otherKey;
    private string _storage;
    private bool _canBeNull;
    public string ThisKey { get; public set; }
    public string OtherKey { get; public set; }
    public string Storage { get; public set; }
    public bool CanBeNull { get; public set; }
    public string get_ThisKey();
    public void set_ThisKey(string value);
    public string get_OtherKey();
    public void set_OtherKey(string value);
    public string get_Storage();
    public void set_Storage(string value);
    public bool get_CanBeNull();
    public void set_CanBeNull(bool value);
    public String[] GetThisKeys();
    public String[] GetOtherKeys();
}
public class BLToolkit.Mapping.DataReaderListMapper : object {
    private DataReaderMapper _mapper;
    public DataReaderListMapper(DataReaderMapper mapper);
    public virtual void InitMapping(InitContext initContext);
    public virtual bool SetNextDataSource(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.DataReaderMapper : object {
    private IDataReaderEx _dataReaderEx;
    private IDataReader _dataReader;
    private MappingSchema _mappingSchema;
    public IDataReader DataReader { get; }
    public MappingSchema MappingSchema { get; }
    public int Count { get; }
    public DataReaderMapper(MappingSchema mappingSchema, IDataReader dataReader);
    public IDataReader get_DataReader();
    public MappingSchema get_MappingSchema();
    public virtual int get_Count();
    public virtual Type GetFieldType(int index);
    public virtual string GetName(int index);
    public virtual int GetOrdinal(string name);
    public virtual object GetValue(object o, int index);
    public virtual object GetValue(object o, string name);
    public virtual bool IsNull(object o, int index);
    public virtual bool SupportsTypedValues(int index);
    [CLSCompliantAttribute("False")]
public virtual sbyte GetSByte(object o, int index);
    public virtual short GetInt16(object o, int index);
    public virtual int GetInt32(object o, int index);
    public virtual long GetInt64(object o, int index);
    public virtual byte GetByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ushort GetUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual UInt32 GetUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ulong GetUInt64(object o, int index);
    public virtual bool GetBoolean(object o, int index);
    public virtual char GetChar(object o, int index);
    public virtual float GetSingle(object o, int index);
    public virtual double GetDouble(object o, int index);
    public virtual decimal GetDecimal(object o, int index);
    public virtual Guid GetGuid(object o, int index);
    public virtual DateTime GetDateTime(object o, int index);
    public virtual DateTimeOffset GetDateTimeOffset(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<sbyte> GetNullableSByte(object o, int index);
    public virtual Nullable`1<short> GetNullableInt16(object o, int index);
    public virtual Nullable`1<int> GetNullableInt32(object o, int index);
    public virtual Nullable`1<long> GetNullableInt64(object o, int index);
    public virtual Nullable`1<byte> GetNullableByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ushort> GetNullableUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<UInt32> GetNullableUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ulong> GetNullableUInt64(object o, int index);
    public virtual Nullable`1<bool> GetNullableBoolean(object o, int index);
    public virtual Nullable`1<char> GetNullableChar(object o, int index);
    public virtual Nullable`1<float> GetNullableSingle(object o, int index);
    public virtual Nullable`1<double> GetNullableDouble(object o, int index);
    public virtual Nullable`1<decimal> GetNullableDecimal(object o, int index);
    public virtual Nullable`1<Guid> GetNullableGuid(object o, int index);
    public virtual Nullable`1<DateTime> GetNullableDateTime(object o, int index);
    public virtual Nullable`1<DateTimeOffset> GetNullableDateTimeOffset(object o, int index);
    public virtual SqlByte GetSqlByte(object o, int index);
    public virtual SqlInt16 GetSqlInt16(object o, int index);
    public virtual SqlInt32 GetSqlInt32(object o, int index);
    public virtual SqlInt64 GetSqlInt64(object o, int index);
    public virtual SqlSingle GetSqlSingle(object o, int index);
    public virtual SqlBoolean GetSqlBoolean(object o, int index);
    public virtual SqlDouble GetSqlDouble(object o, int index);
    public virtual SqlDateTime GetSqlDateTime(object o, int index);
    public virtual SqlDecimal GetSqlDecimal(object o, int index);
    public virtual SqlMoney GetSqlMoney(object o, int index);
    public virtual SqlGuid GetSqlGuid(object o, int index);
    public virtual SqlString GetSqlString(object o, int index);
}
public class BLToolkit.Mapping.DataRowMapper : MapDataSourceDestinationBase {
    private bool _createColumns;
    private DataRowVersion _version;
    private DataRow _dataRow;
    private ArrayList _nameList;
    public DataRow DataRow { get; public set; }
    public int Count { get; }
    public DataRowMapper(DataRow dataRow);
    public DataRowMapper(DataRowView view);
    public DataRowMapper(DataRow dataRow, DataRowVersion version);
    private void Init(DataRow dataRow);
    public DataRow get_DataRow();
    public void set_DataRow(DataRow value);
    public virtual int get_Count();
    public virtual Type GetFieldType(int index);
    public virtual string GetName(int index);
    public virtual object GetValue(object o, int index);
    public virtual object GetValue(object o, string name);
    public virtual bool IsNull(object o, int index);
    public virtual int GetOrdinal(string name);
    private void CreateColumn(int index, object value);
    public virtual void SetValue(object o, int index, object value);
    public virtual void SetValue(object o, string name, object value);
}
public class BLToolkit.Mapping.DataTableMapper : object {
    private DataTable _table;
    private DataRowMapper _mapper;
    private int _currentRow;
    public DataTableMapper(DataTable dataTable, DataRowMapper mapper);
    private sealed virtual override void BLToolkit.Mapping.IMapDataSourceList.InitMapping(InitContext initContext);
    private sealed virtual override bool BLToolkit.Mapping.IMapDataSourceList.SetNextDataSource(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.IMapDataSourceList.EndMapping(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.IMapDataDestinationList.InitMapping(InitContext initContext);
    private sealed virtual override IMapDataDestination BLToolkit.Mapping.IMapDataDestinationList.GetDataDestination(InitContext initContext);
    private sealed virtual override object BLToolkit.Mapping.IMapDataDestinationList.GetNextObject(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.IMapDataDestinationList.EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.DefaultMappingSchema : MappingSchema {
}
internal class BLToolkit.Mapping.DefaultMemberMapper : MemberMapper {
    public bool SupportsValue { get; }
    public virtual bool get_SupportsValue();
    public virtual object GetValue(object o);
    public virtual void SetValue(object o, object value);
}
[AttributeUsageAttribute("1428")]
public class BLToolkit.Mapping.DefaultValueAttribute : Attribute {
    private object _value;
    private Type _type;
    public object Value { get; }
    public Type Type { get; }
    public DefaultValueAttribute(object value);
    public DefaultValueAttribute(Type type, object value);
    public object get_Value();
    public Type get_Type();
}
public class BLToolkit.Mapping.DictionaryIndexListMapper : object {
    private NameOrIndexParameter[] _fields;
    private IDictionary _dic;
    private Boolean[] _fromSource;
    private bool _isFromSource;
    private bool _isFromDest;
    private ObjectMapper _mapper;
    private object _newObject;
    private Object[] _indexValue;
    public DictionaryIndexListMapper(IDictionary dic, MapIndex index, ObjectMapper objectMapper);
    private void AddObject();
    public virtual void InitMapping(InitContext initContext);
    [CLSCompliantAttribute("False")]
public virtual IMapDataDestination GetDataDestination(InitContext initContext);
    public virtual object GetNextObject(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.DictionaryIndexListMapper`1 : object {
    private NameOrIndexParameter[] _fields;
    private IDictionary`2<CompoundValue, T> _dic;
    private Boolean[] _fromSource;
    private bool _isFromSource;
    private bool _isFromDest;
    private ObjectMapper _mapper;
    private object _newObject;
    private Object[] _indexValue;
    public DictionaryIndexListMapper`1(IDictionary`2<CompoundValue, T> dic, MapIndex index, ObjectMapper objectMapper);
    private void AddObject();
    public virtual void InitMapping(InitContext initContext);
    [CLSCompliantAttribute("False")]
public virtual IMapDataDestination GetDataDestination(InitContext initContext);
    public virtual object GetNextObject(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.DictionaryListMapper : object {
    private IDictionary _dic;
    private bool _fromSource;
    private NameOrIndexParameter _keyField;
    private ObjectMapper _mapper;
    private object _newObject;
    private object _keyValue;
    private static Char[] _trim;
    public DictionaryListMapper(IDictionary dic, NameOrIndexParameter keyField, ObjectMapper objectMapper);
    private static DictionaryListMapper();
    private void AddObject();
    public virtual void InitMapping(InitContext initContext);
    [CLSCompliantAttribute("False")]
public virtual IMapDataDestination GetDataDestination(InitContext initContext);
    public virtual object GetNextObject(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.DictionaryListMapper`2 : object {
    private IDictionary`2<K, T> _dic;
    private bool _fromSource;
    private MB`1<K, K> _keyGetter;
    private NameOrIndexParameter _keyField;
    private int _index;
    private ObjectMapper _mapper;
    private object _newObject;
    private bool _typeMismatch;
    private K _keyValue;
    private static Char[] _trim;
    public DictionaryListMapper`2(IDictionary`2<K, T> dic, NameOrIndexParameter keyField, ObjectMapper objectMapper);
    private static DictionaryListMapper`2();
    private void AddObject();
    public virtual void InitMapping(InitContext initContext);
    [CLSCompliantAttribute("False")]
public virtual IMapDataDestination GetDataDestination(InitContext initContext);
    public virtual object GetNextObject(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.DictionaryMapper : MapDataSourceDestinationBase {
    private IDictionary _dictionary;
    private int _currentIndex;
    private IDictionaryEnumerator _enumerator;
    private List`1<string> _nameList;
    public IDictionary Dictionary { get; }
    public int Count { get; }
    public DictionaryMapper(IDictionary dictionary);
    public IDictionary get_Dictionary();
    private void SetEnumerator(int i);
    public virtual int get_Count();
    public virtual Type GetFieldType(int index);
    public virtual string GetName(int index);
    public virtual bool SupportsTypedValues(int index);
    public virtual object GetValue(object o, int index);
    public virtual object GetValue(object o, string name);
    public virtual int GetOrdinal(string name);
    public virtual void SetValue(object o, int index, object value);
    public virtual void SetValue(object o, string name, object value);
}
public class BLToolkit.Mapping.EnumeratorMapper : object {
    private IEnumerator _enumerator;
    private Type _objectType;
    public EnumeratorMapper(IEnumerator enumerator);
    public virtual void InitMapping(InitContext initContext);
    public virtual bool SetNextDataSource(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.ExpressionMapper`2 : object {
    private MappingParameters _parameters;
    private Func`2<object, object> _getCurrent;
    private Action`2<object, object> _setCurrent;
    [CompilerGeneratedAttribute]
private static Func`2<MemberAccessor, MemberAccessor> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<MemberMapper, MemberAccessor> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<MemberAccessor, MemberAccessor> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<MemberMapper, MemberAccessor> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<TSource, TDest> CS$<>9__CachedAnonymousMethodDelegate26;
    public bool DeepCopy { get; public set; }
    public bool HandleBackReferences { get; public set; }
    public ExpressionMapper`2(MappingSchema mappingSchema);
    private ExpressionMapper`2(MappingParameters parameters);
    public bool get_DeepCopy();
    public void set_DeepCopy(bool value);
    public bool get_HandleBackReferences();
    public void set_HandleBackReferences(bool value);
    private static IValueConvertHelper<TSource, TDest> GetValueHelper(Type stype, Type dtype);
    private static IConvertHelper<TSource, TDest> GetHelper(Type stype, Type dtype);
    private Expression GetValueMapper(Expression source, Type dtype, bool checkNull, object nullValue, MapValue[] destMapValues, object defaultValue, MapValue[] srcMapValues);
    private IEnumerable`1<MemberBinding> GetBindings(Expression source);
    private Expression GetMemberInit(ParameterExpression source);
    public Func`2<TSource, TDest> GetMapper();
    [CompilerGeneratedAttribute]
private static MemberAccessor <GetBindings>b__1(MemberAccessor m);
    [CompilerGeneratedAttribute]
private static MemberAccessor <GetBindings>b__2(MemberMapper mm);
    [CompilerGeneratedAttribute]
private static MemberAccessor <GetBindings>b__3(MemberAccessor m);
    [CompilerGeneratedAttribute]
private static MemberAccessor <GetBindings>b__4(MemberMapper mm);
    [CompilerGeneratedAttribute]
private static TDest <GetMapper>b__22(TSource s);
}
[CLSCompliantAttribute("False")]
public interface BLToolkit.Mapping.IMapDataDestination {
    public abstract virtual Type GetFieldType(int index);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual void SetValue(object o, int index, object value);
    public abstract virtual void SetValue(object o, string name, object value);
    public abstract virtual void SetNull(object o, int index);
    public abstract virtual bool SupportsTypedValues(int index);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetSByte(object o, int index, sbyte value);
    public abstract virtual void SetInt16(object o, int index, short value);
    public abstract virtual void SetInt32(object o, int index, int value);
    public abstract virtual void SetInt64(object o, int index, long value);
    public abstract virtual void SetByte(object o, int index, byte value);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetUInt16(object o, int index, ushort value);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetUInt32(object o, int index, UInt32 value);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetUInt64(object o, int index, ulong value);
    public abstract virtual void SetBoolean(object o, int index, bool value);
    public abstract virtual void SetChar(object o, int index, char value);
    public abstract virtual void SetSingle(object o, int index, float value);
    public abstract virtual void SetDouble(object o, int index, double value);
    public abstract virtual void SetDecimal(object o, int index, decimal value);
    public abstract virtual void SetGuid(object o, int index, Guid value);
    public abstract virtual void SetDateTime(object o, int index, DateTime value);
    public abstract virtual void SetDateTimeOffset(object o, int index, DateTimeOffset value);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetNullableSByte(object o, int index, Nullable`1<sbyte> value);
    public abstract virtual void SetNullableInt16(object o, int index, Nullable`1<short> value);
    public abstract virtual void SetNullableInt32(object o, int index, Nullable`1<int> value);
    public abstract virtual void SetNullableInt64(object o, int index, Nullable`1<long> value);
    public abstract virtual void SetNullableByte(object o, int index, Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetNullableUInt16(object o, int index, Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetNullableUInt32(object o, int index, Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public abstract virtual void SetNullableUInt64(object o, int index, Nullable`1<ulong> value);
    public abstract virtual void SetNullableBoolean(object o, int index, Nullable`1<bool> value);
    public abstract virtual void SetNullableChar(object o, int index, Nullable`1<char> value);
    public abstract virtual void SetNullableSingle(object o, int index, Nullable`1<float> value);
    public abstract virtual void SetNullableDouble(object o, int index, Nullable`1<double> value);
    public abstract virtual void SetNullableDecimal(object o, int index, Nullable`1<decimal> value);
    public abstract virtual void SetNullableGuid(object o, int index, Nullable`1<Guid> value);
    public abstract virtual void SetNullableDateTime(object o, int index, Nullable`1<DateTime> value);
    public abstract virtual void SetNullableDateTimeOffset(object o, int index, Nullable`1<DateTimeOffset> value);
    public abstract virtual void SetSqlByte(object o, int index, SqlByte value);
    public abstract virtual void SetSqlInt16(object o, int index, SqlInt16 value);
    public abstract virtual void SetSqlInt32(object o, int index, SqlInt32 value);
    public abstract virtual void SetSqlInt64(object o, int index, SqlInt64 value);
    public abstract virtual void SetSqlSingle(object o, int index, SqlSingle value);
    public abstract virtual void SetSqlBoolean(object o, int index, SqlBoolean value);
    public abstract virtual void SetSqlDouble(object o, int index, SqlDouble value);
    public abstract virtual void SetSqlDateTime(object o, int index, SqlDateTime value);
    public abstract virtual void SetSqlDecimal(object o, int index, SqlDecimal value);
    public abstract virtual void SetSqlMoney(object o, int index, SqlMoney value);
    public abstract virtual void SetSqlGuid(object o, int index, SqlGuid value);
    public abstract virtual void SetSqlString(object o, int index, SqlString value);
}
[CLSCompliantAttribute("False")]
public interface BLToolkit.Mapping.IMapDataDestinationList {
    public abstract virtual void InitMapping(InitContext initContext);
    [CLSCompliantAttribute("False")]
public abstract virtual IMapDataDestination GetDataDestination(InitContext initContext);
    public abstract virtual object GetNextObject(InitContext initContext);
    public abstract virtual void EndMapping(InitContext initContext);
}
[CLSCompliantAttribute("False")]
public interface BLToolkit.Mapping.IMapDataSource {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual Type GetFieldType(int index);
    public abstract virtual string GetName(int index);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual object GetValue(object o, int index);
    public abstract virtual object GetValue(object o, string name);
    public abstract virtual bool IsNull(object o, int index);
    public abstract virtual bool SupportsTypedValues(int index);
    [CLSCompliantAttribute("False")]
public abstract virtual sbyte GetSByte(object o, int index);
    public abstract virtual short GetInt16(object o, int index);
    public abstract virtual int GetInt32(object o, int index);
    public abstract virtual long GetInt64(object o, int index);
    public abstract virtual byte GetByte(object o, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual ushort GetUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual UInt32 GetUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual ulong GetUInt64(object o, int index);
    public abstract virtual bool GetBoolean(object o, int index);
    public abstract virtual char GetChar(object o, int index);
    public abstract virtual float GetSingle(object o, int index);
    public abstract virtual double GetDouble(object o, int index);
    public abstract virtual decimal GetDecimal(object o, int index);
    public abstract virtual DateTime GetDateTime(object o, int index);
    public abstract virtual DateTimeOffset GetDateTimeOffset(object o, int index);
    public abstract virtual Guid GetGuid(object o, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual Nullable`1<sbyte> GetNullableSByte(object o, int index);
    public abstract virtual Nullable`1<short> GetNullableInt16(object o, int index);
    public abstract virtual Nullable`1<int> GetNullableInt32(object o, int index);
    public abstract virtual Nullable`1<long> GetNullableInt64(object o, int index);
    public abstract virtual Nullable`1<byte> GetNullableByte(object o, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual Nullable`1<ushort> GetNullableUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual Nullable`1<UInt32> GetNullableUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public abstract virtual Nullable`1<ulong> GetNullableUInt64(object o, int index);
    public abstract virtual Nullable`1<bool> GetNullableBoolean(object o, int index);
    public abstract virtual Nullable`1<char> GetNullableChar(object o, int index);
    public abstract virtual Nullable`1<float> GetNullableSingle(object o, int index);
    public abstract virtual Nullable`1<double> GetNullableDouble(object o, int index);
    public abstract virtual Nullable`1<decimal> GetNullableDecimal(object o, int index);
    public abstract virtual Nullable`1<DateTime> GetNullableDateTime(object o, int index);
    public abstract virtual Nullable`1<DateTimeOffset> GetNullableDateTimeOffset(object o, int index);
    public abstract virtual Nullable`1<Guid> GetNullableGuid(object o, int index);
    public abstract virtual SqlByte GetSqlByte(object o, int index);
    public abstract virtual SqlInt16 GetSqlInt16(object o, int index);
    public abstract virtual SqlInt32 GetSqlInt32(object o, int index);
    public abstract virtual SqlInt64 GetSqlInt64(object o, int index);
    public abstract virtual SqlSingle GetSqlSingle(object o, int index);
    public abstract virtual SqlBoolean GetSqlBoolean(object o, int index);
    public abstract virtual SqlDouble GetSqlDouble(object o, int index);
    public abstract virtual SqlDateTime GetSqlDateTime(object o, int index);
    public abstract virtual SqlDecimal GetSqlDecimal(object o, int index);
    public abstract virtual SqlMoney GetSqlMoney(object o, int index);
    public abstract virtual SqlGuid GetSqlGuid(object o, int index);
    public abstract virtual SqlString GetSqlString(object o, int index);
}
public interface BLToolkit.Mapping.IMapDataSourceList {
    public abstract virtual void InitMapping(InitContext initContext);
    public abstract virtual bool SetNextDataSource(InitContext initContext);
    public abstract virtual void EndMapping(InitContext initContext);
}
public interface BLToolkit.Mapping.IMappingSchemaProvider {
    public MappingSchema MappingSchema { get; }
    public abstract virtual MappingSchema get_MappingSchema();
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.Mapping.InheritanceMappingAttribute : Attribute {
    private object _code;
    private bool _isDefault;
    private Type _type;
    public object Code { get; public set; }
    public bool IsDefault { get; public set; }
    public Type Type { get; public set; }
    public object get_Code();
    public void set_Code(object value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public Type get_Type();
    public void set_Type(Type value);
}
public interface BLToolkit.Mapping.ISupportMapping {
    public abstract virtual void BeginMapping(InitContext initContext);
    public abstract virtual void EndMapping(InitContext initContext);
}
[CLSCompliantAttribute("False")]
public interface BLToolkit.Mapping.IValueMapper {
    public abstract virtual void Map(IMapDataSource source, object sourceObject, int sourceIndex, IMapDataDestination dest, object destObject, int destIndex);
}
public class BLToolkit.Mapping.Map : object {
    private static MappingSchema _defaultSchema;
    public static MappingSchema DefaultSchema { get; public set; }
    public static ExtensionList Extensions { get; public set; }
    private static Map();
    [DebuggerStepThroughAttribute]
public static MappingSchema get_DefaultSchema();
    public static void set_DefaultSchema(MappingSchema value);
    [DebuggerStepThroughAttribute]
public static ExtensionList get_Extensions();
    public static void set_Extensions(ExtensionList value);
    public static ObjectMapper GetObjectMapper(Type type);
    public static object GetNullValue(Type type);
    public static bool IsNull(object value);
    public static void SourceToDestination(object sourceObject, object destObject, Object[] parameters);
    [CLSCompliantAttribute("False")]
public static void MapSourceToDestination(IMapDataSource source, object sourceObject, IMapDataDestination dest, object destObject, Object[] parameters);
    [CLSCompliantAttribute("False")]
public static void SourceListToDestinationList(IMapDataSourceList dataSourceList, IMapDataDestinationList dataDestinationList, Object[] parameters);
    public static object ValueToEnum(object value, Type type);
    public static object EnumToValue(object value);
    public static object EnumToValue(object value, bool convertToUnderlyingType);
    public static T ToEnum(object value);
    public static object ObjectToObject(object sourceObject, object destObject, Object[] parameters);
    public static object ObjectToObject(object sourceObject, Type destObjectType, Object[] parameters);
    public static T ObjectToObject(object sourceObject, Object[] parameters);
    public static DataRow ObjectToDataRow(object sourceObject, DataRow destRow);
    public static DataRow ObjectToDataRow(object sourceObject, DataTable destTable);
    public static IDictionary ObjectToDictionary(object sourceObject, IDictionary destDictionary);
    public static IDictionary ObjectToDictionary(object sourceObject);
    public static object DataRowToObject(DataRow dataRow, object destObject, Object[] parameters);
    public static object DataRowToObject(DataRow dataRow, DataRowVersion version, object destObject, Object[] parameters);
    public static object DataRowToObject(DataRow dataRow, Type destObjectType, Object[] parameters);
    public static object DataRowToObject(DataRow dataRow, DataRowVersion version, Type destObjectType, Object[] parameters);
    public static T DataRowToObject(DataRow dataRow, Object[] parameters);
    public static T DataRowToObject(DataRow dataRow, DataRowVersion version, Object[] parameters);
    public static DataRow DataRowToDataRow(DataRow sourceRow, DataRow destRow);
    public static DataRow DataRowToDataRow(DataRow sourceRow, DataRowVersion version, DataRow destRow);
    public static DataRow DataRowToDataRow(DataRow sourceRow, DataTable destTable);
    public static DataRow DataRowToDataRow(DataRow sourceRow, DataRowVersion version, DataTable destTable);
    public static IDictionary DataRowToDictionary(DataRow sourceRow, IDictionary destDictionary);
    public static Hashtable DataRowToDictionary(DataRow sourceRow);
    public static IDictionary DataRowToDictionary(DataRow sourceRow, DataRowVersion version, IDictionary destDictionary);
    public static Hashtable DataRowToDictionary(DataRow sourceRow, DataRowVersion version);
    public static object DataReaderToObject(IDataReader dataReader, object destObject, Object[] parameters);
    public static object DataReaderToObject(IDataReader dataReader, Type destObjectType, Object[] parameters);
    public static T DataReaderToObject(IDataReader dataReader, Object[] parameters);
    public static DataRow DataReaderToDataRow(IDataReader dataReader, DataRow destRow);
    public static DataRow DataReaderToDataRow(IDataReader dataReader, DataTable destTable);
    public static IDictionary DataReaderToDictionary(IDataReader dataReader, IDictionary destDictionary);
    public static IDictionary DataReaderToDictionary(IDataReader dataReader);
    public static object DictionaryToObject(IDictionary sourceDictionary, object destObject, Object[] parameters);
    public static object DictionaryToObject(IDictionary sourceDictionary, Type destObjectType, Object[] parameters);
    public static T DictionaryToObject(IDictionary sourceDictionary, Object[] parameters);
    public static DataRow DictionaryToDataRow(IDictionary sourceDictionary, DataRow destRow);
    public static DataRow DictionaryToDataRow(IDictionary sourceDictionary, DataTable destTable);
    public static IList ListToList(ICollection sourceList, IList destList, Type destObjectType, Object[] parameters);
    public static IList ListToList(ICollection sourceList, Type destObjectType, Object[] parameters);
    public static List`1<T> ListToList(ICollection sourceList, List`1<T> destList, Object[] parameters);
    public static List`1<T> ListToList(ICollection sourceList, Object[] parameters);
    public static DataTable ListToDataTable(ICollection sourceList, DataTable destTable);
    public static DataTable ListToDataTable(ICollection sourceList);
    public static IDictionary ListToDictionary(ICollection sourceList, IDictionary destDictionary, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static IDictionary ListToDictionary(ICollection sourceList, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static IDictionary`2<TK, T> ListToDictionary(ICollection sourceList, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyField, Object[] parameters);
    public static Dictionary`2<TK, T> ListToDictionary(ICollection sourceList, NameOrIndexParameter keyField, Object[] parameters);
    public static IDictionary ListToDictionary(ICollection sourceList, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public static IDictionary ListToDictionary(ICollection sourceList, MapIndex index, Type destObjectType, Object[] parameters);
    public static IDictionary`2<CompoundValue, T> ListToDictionary(ICollection sourceList, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public static Dictionary`2<CompoundValue, T> ListToDictionary(ICollection sourceList, MapIndex index, Object[] parameters);
    public static DataTable DataTableToDataTable(DataTable sourceTable, DataTable destTable);
    public static DataTable DataTableToDataTable(DataTable sourceTable, DataRowVersion version, DataTable destTable);
    public static DataTable DataTableToDataTable(DataTable sourceTable);
    public static DataTable DataTableToDataTable(DataTable sourceTable, DataRowVersion version);
    public static IList DataTableToList(DataTable sourceTable, IList list, Type destObjectType, Object[] parameters);
    public static IList DataTableToList(DataTable sourceTable, DataRowVersion version, IList list, Type destObjectType, Object[] parameters);
    public static ArrayList DataTableToList(DataTable sourceTable, Type destObjectType, Object[] parameters);
    public static ArrayList DataTableToList(DataTable sourceTable, DataRowVersion version, Type destObjectType, Object[] parameters);
    public static List`1<T> DataTableToList(DataTable sourceTable, List`1<T> list, Object[] parameters);
    public static List`1<T> DataTableToList(DataTable sourceTable, DataRowVersion version, List`1<T> list, Object[] parameters);
    public static List`1<T> DataTableToList(DataTable sourceTable, Object[] parameters);
    public static List`1<T> DataTableToList(DataTable sourceTable, DataRowVersion version, Object[] parameters);
    public static IDictionary DataTableToDictionary(DataTable sourceTable, IDictionary destDictionary, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static Hashtable DataTableToDictionary(DataTable sourceTable, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static IDictionary`2<TK, T> DataTableToDictionary(DataTable sourceTable, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyField, Object[] parameters);
    public static Dictionary`2<TK, T> DataTableToDictionary(DataTable sourceTable, NameOrIndexParameter keyField, Object[] parameters);
    public static IDictionary DataTableToDictionary(DataTable sourceTable, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public static Hashtable DataTableToDictionary(DataTable sourceTable, MapIndex index, Type destObjectType, Object[] parameters);
    public static IDictionary`2<CompoundValue, T> DataTableToDictionary(DataTable sourceTable, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public static Dictionary`2<CompoundValue, T> DataTableToDictionary(DataTable sourceTable, MapIndex index, Object[] parameters);
    public static IList DataReaderToList(IDataReader reader, IList list, Type destObjectType, Object[] parameters);
    public static IList DataReaderToList(IDataReader reader, Type destObjectType, Object[] parameters);
    public static IList`1<T> DataReaderToList(IDataReader reader, IList`1<T> list, Object[] parameters);
    public static List`1<T> DataReaderToList(IDataReader reader, Object[] parameters);
    public static DataTable DataReaderToDataTable(IDataReader reader, DataTable destTable);
    public static DataTable DataReaderToDataTable(IDataReader reader);
    public static IDictionary DataReaderToDictionary(IDataReader dataReader, IDictionary destDictionary, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static IDictionary DataReaderToDictionary(IDataReader dataReader, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static IDictionary`2<TK, T> DataReaderToDictionary(IDataReader dataReader, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyField, Object[] parameters);
    public static Dictionary`2<TK, T> DataReaderToDictionary(IDataReader dataReader, NameOrIndexParameter keyField, Object[] parameters);
    public static IDictionary DataReaderToDictionary(IDataReader dataReader, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public static IDictionary DataReaderToDictionary(IDataReader dataReader, MapIndex index, Type destObjectType, Object[] parameters);
    public static IDictionary`2<CompoundValue, T> DataReaderToDictionary(IDataReader dataReader, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public static Dictionary`2<CompoundValue, T> DataReaderToDictionary(IDataReader dataReader, MapIndex index, Object[] parameters);
    public static IList DictionaryToList(IDictionary sourceDictionary, IList destList, Type destObjectType, Object[] parameters);
    public static IList DictionaryToList(IDictionary sourceDictionary, Type destObjectType, Object[] parameters);
    public static List`1<T> DictionaryToList(IDictionary sourceDictionary, List`1<T> destList, Object[] parameters);
    public static List`1<T> DictionaryToList(IDictionary sourceDictionary, Object[] parameters);
    public static DataTable DictionaryToDataTable(IDictionary sourceDictionary, DataTable destTable);
    public static DataTable DictionaryToDataTable(IDictionary sourceDictionary);
    public static IDictionary DictionaryToDictionary(IDictionary sourceDictionary, IDictionary destDictionary, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static IDictionary DictionaryToDictionary(IDictionary sourceDictionary, NameOrIndexParameter keyField, Type destObjectType, Object[] parameters);
    public static IDictionary`2<TK, T> DictionaryToDictionary(IDictionary sourceDictionary, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyField, Object[] parameters);
    public static Dictionary`2<TK, T> DictionaryToDictionary(IDictionary sourceDictionary, NameOrIndexParameter keyField, Object[] parameters);
    public static IDictionary DictionaryToDictionary(IDictionary sourceDictionary, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public static IDictionary DictionaryToDictionary(IDictionary sourceDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public static IDictionary`2<CompoundValue, T> DictionaryToDictionary(IDictionary sourceDictionary, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public static Dictionary`2<CompoundValue, T> DictionaryToDictionary(IDictionary sourceDictionary, MapIndex index, Object[] parameters);
    public static void ResultSets(MapResultSet[] resultSets);
    public static object CreateInstance(Type type);
    public static T CreateInstance();
    public static Func`2<TSource, TDest> GetObjectMapper();
    public static Func`2<TSource, TDest> GetObjectMapper(bool deepCopy);
}
public abstract class BLToolkit.Mapping.MapDataDestinationBase : object {
    public abstract virtual Type GetFieldType(int index);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual void SetValue(object o, int index, object value);
    public abstract virtual void SetValue(object o, string name, object value);
    public virtual void SetNull(object o, int index);
    public virtual bool SupportsTypedValues(int index);
    [CLSCompliantAttribute("False")]
public virtual void SetSByte(object o, int index, sbyte value);
    public virtual void SetInt16(object o, int index, short value);
    public virtual void SetInt32(object o, int index, int value);
    public virtual void SetInt64(object o, int index, long value);
    public virtual void SetByte(object o, int index, byte value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt16(object o, int index, ushort value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt32(object o, int index, UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt64(object o, int index, ulong value);
    public virtual void SetBoolean(object o, int index, bool value);
    public virtual void SetChar(object o, int index, char value);
    public virtual void SetSingle(object o, int index, float value);
    public virtual void SetDouble(object o, int index, double value);
    public virtual void SetDecimal(object o, int index, decimal value);
    public virtual void SetGuid(object o, int index, Guid value);
    public virtual void SetDateTime(object o, int index, DateTime value);
    public virtual void SetDateTimeOffset(object o, int index, DateTimeOffset value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableSByte(object o, int index, Nullable`1<sbyte> value);
    public virtual void SetNullableInt16(object o, int index, Nullable`1<short> value);
    public virtual void SetNullableInt32(object o, int index, Nullable`1<int> value);
    public virtual void SetNullableInt64(object o, int index, Nullable`1<long> value);
    public virtual void SetNullableByte(object o, int index, Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt16(object o, int index, Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt32(object o, int index, Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt64(object o, int index, Nullable`1<ulong> value);
    public virtual void SetNullableBoolean(object o, int index, Nullable`1<bool> value);
    public virtual void SetNullableChar(object o, int index, Nullable`1<char> value);
    public virtual void SetNullableSingle(object o, int index, Nullable`1<float> value);
    public virtual void SetNullableDouble(object o, int index, Nullable`1<double> value);
    public virtual void SetNullableDecimal(object o, int index, Nullable`1<decimal> value);
    public virtual void SetNullableGuid(object o, int index, Nullable`1<Guid> value);
    public virtual void SetNullableDateTime(object o, int index, Nullable`1<DateTime> value);
    public virtual void SetNullableDateTimeOffset(object o, int index, Nullable`1<DateTimeOffset> value);
    public virtual void SetSqlByte(object o, int index, SqlByte value);
    public virtual void SetSqlInt16(object o, int index, SqlInt16 value);
    public virtual void SetSqlInt32(object o, int index, SqlInt32 value);
    public virtual void SetSqlInt64(object o, int index, SqlInt64 value);
    public virtual void SetSqlSingle(object o, int index, SqlSingle value);
    public virtual void SetSqlBoolean(object o, int index, SqlBoolean value);
    public virtual void SetSqlDouble(object o, int index, SqlDouble value);
    public virtual void SetSqlDateTime(object o, int index, SqlDateTime value);
    public virtual void SetSqlDecimal(object o, int index, SqlDecimal value);
    public virtual void SetSqlMoney(object o, int index, SqlMoney value);
    public virtual void SetSqlGuid(object o, int index, SqlGuid value);
    public virtual void SetSqlString(object o, int index, SqlString value);
}
public abstract class BLToolkit.Mapping.MapDataSourceBase : object {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual Type GetFieldType(int index);
    public abstract virtual string GetName(int index);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual object GetValue(object o, int index);
    public abstract virtual object GetValue(object o, string name);
    public virtual bool IsNull(object o, int index);
    public virtual bool SupportsTypedValues(int index);
    [CLSCompliantAttribute("False")]
public virtual sbyte GetSByte(object o, int index);
    public virtual short GetInt16(object o, int index);
    public virtual int GetInt32(object o, int index);
    public virtual long GetInt64(object o, int index);
    public virtual byte GetByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ushort GetUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual UInt32 GetUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ulong GetUInt64(object o, int index);
    public virtual bool GetBoolean(object o, int index);
    public virtual char GetChar(object o, int index);
    public virtual float GetSingle(object o, int index);
    public virtual double GetDouble(object o, int index);
    public virtual decimal GetDecimal(object o, int index);
    public virtual Guid GetGuid(object o, int index);
    public virtual DateTime GetDateTime(object o, int index);
    public virtual DateTimeOffset GetDateTimeOffset(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<sbyte> GetNullableSByte(object o, int index);
    public virtual Nullable`1<short> GetNullableInt16(object o, int index);
    public virtual Nullable`1<int> GetNullableInt32(object o, int index);
    public virtual Nullable`1<long> GetNullableInt64(object o, int index);
    public virtual Nullable`1<byte> GetNullableByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ushort> GetNullableUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<UInt32> GetNullableUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ulong> GetNullableUInt64(object o, int index);
    public virtual Nullable`1<bool> GetNullableBoolean(object o, int index);
    public virtual Nullable`1<char> GetNullableChar(object o, int index);
    public virtual Nullable`1<float> GetNullableSingle(object o, int index);
    public virtual Nullable`1<double> GetNullableDouble(object o, int index);
    public virtual Nullable`1<decimal> GetNullableDecimal(object o, int index);
    public virtual Nullable`1<Guid> GetNullableGuid(object o, int index);
    public virtual Nullable`1<DateTime> GetNullableDateTime(object o, int index);
    public virtual Nullable`1<DateTimeOffset> GetNullableDateTimeOffset(object o, int index);
    public virtual SqlByte GetSqlByte(object o, int index);
    public virtual SqlInt16 GetSqlInt16(object o, int index);
    public virtual SqlInt32 GetSqlInt32(object o, int index);
    public virtual SqlInt64 GetSqlInt64(object o, int index);
    public virtual SqlSingle GetSqlSingle(object o, int index);
    public virtual SqlBoolean GetSqlBoolean(object o, int index);
    public virtual SqlDouble GetSqlDouble(object o, int index);
    public virtual SqlDateTime GetSqlDateTime(object o, int index);
    public virtual SqlDecimal GetSqlDecimal(object o, int index);
    public virtual SqlMoney GetSqlMoney(object o, int index);
    public virtual SqlGuid GetSqlGuid(object o, int index);
    public virtual SqlString GetSqlString(object o, int index);
}
public abstract class BLToolkit.Mapping.MapDataSourceDestinationBase : MapDataSourceBase {
    public abstract virtual void SetValue(object o, int index, object value);
    public abstract virtual void SetValue(object o, string name, object value);
    public virtual void SetNull(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual void SetSByte(object o, int index, sbyte value);
    public virtual void SetInt16(object o, int index, short value);
    public virtual void SetInt32(object o, int index, int value);
    public virtual void SetInt64(object o, int index, long value);
    public virtual void SetByte(object o, int index, byte value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt16(object o, int index, ushort value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt32(object o, int index, UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt64(object o, int index, ulong value);
    public virtual void SetBoolean(object o, int index, bool value);
    public virtual void SetChar(object o, int index, char value);
    public virtual void SetSingle(object o, int index, float value);
    public virtual void SetDouble(object o, int index, double value);
    public virtual void SetDecimal(object o, int index, decimal value);
    public virtual void SetGuid(object o, int index, Guid value);
    public virtual void SetDateTime(object o, int index, DateTime value);
    public virtual void SetDateTimeOffset(object o, int index, DateTimeOffset value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableSByte(object o, int index, Nullable`1<sbyte> value);
    public virtual void SetNullableInt16(object o, int index, Nullable`1<short> value);
    public virtual void SetNullableInt32(object o, int index, Nullable`1<int> value);
    public virtual void SetNullableInt64(object o, int index, Nullable`1<long> value);
    public virtual void SetNullableByte(object o, int index, Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt16(object o, int index, Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt32(object o, int index, Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt64(object o, int index, Nullable`1<ulong> value);
    public virtual void SetNullableBoolean(object o, int index, Nullable`1<bool> value);
    public virtual void SetNullableChar(object o, int index, Nullable`1<char> value);
    public virtual void SetNullableSingle(object o, int index, Nullable`1<float> value);
    public virtual void SetNullableDouble(object o, int index, Nullable`1<double> value);
    public virtual void SetNullableDecimal(object o, int index, Nullable`1<decimal> value);
    public virtual void SetNullableGuid(object o, int index, Nullable`1<Guid> value);
    public virtual void SetNullableDateTime(object o, int index, Nullable`1<DateTime> value);
    public virtual void SetNullableDateTimeOffset(object o, int index, Nullable`1<DateTimeOffset> value);
    public virtual void SetSqlByte(object o, int index, SqlByte value);
    public virtual void SetSqlInt16(object o, int index, SqlInt16 value);
    public virtual void SetSqlInt32(object o, int index, SqlInt32 value);
    public virtual void SetSqlInt64(object o, int index, SqlInt64 value);
    public virtual void SetSqlSingle(object o, int index, SqlSingle value);
    public virtual void SetSqlBoolean(object o, int index, SqlBoolean value);
    public virtual void SetSqlDouble(object o, int index, SqlDouble value);
    public virtual void SetSqlDateTime(object o, int index, SqlDateTime value);
    public virtual void SetSqlDecimal(object o, int index, SqlDecimal value);
    public virtual void SetSqlMoney(object o, int index, SqlMoney value);
    public virtual void SetSqlGuid(object o, int index, SqlGuid value);
    public virtual void SetSqlString(object o, int index, SqlString value);
}
[AttributeUsageAttribute("1412")]
public class BLToolkit.Mapping.MapFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MapName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrigName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInheritanceDiscriminator>k__BackingField;
    public string MapName { get; public set; }
    public string OrigName { get; public set; }
    public string Format { get; public set; }
    public string Storage { get; public set; }
    public bool IsInheritanceDiscriminator { get; public set; }
    public MapFieldAttribute(string mapName);
    public MapFieldAttribute(string mapName, string origName);
    [CompilerGeneratedAttribute]
public string get_MapName();
    [CompilerGeneratedAttribute]
public void set_MapName(string value);
    [CompilerGeneratedAttribute]
public string get_OrigName();
    [CompilerGeneratedAttribute]
public void set_OrigName(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInheritanceDiscriminator();
    [CompilerGeneratedAttribute]
public void set_IsInheritanceDiscriminator(bool value);
}
[CLSCompliantAttribute("False")]
public static class BLToolkit.Mapping.MapGetData`1 : object {
    public static MB`1<T, T> I;
    private static MapGetData`1();
    public static T From(IMapDataSource s, object o, int i);
    private static MB`1<T, T> GetGetter();
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Mapping.MapIgnoreAttribute : Attribute {
    private bool _ignore;
    public bool Ignore { get; public set; }
    public MapIgnoreAttribute(bool ignore);
    public bool get_Ignore();
    public void set_Ignore(bool value);
}
[AttributeUsageAttribute("384")]
public abstract class BLToolkit.Mapping.MapImplicitAttribute : Attribute {
}
public class BLToolkit.Mapping.MapIndex : object {
    private string _id;
    [CompilerGeneratedAttribute]
private NameOrIndexParameter[] <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<NameOrIndexParameter, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public NameOrIndexParameter[] Fields { get; private set; }
    public string ID { get; }
    public MapIndex(String[] names);
    public MapIndex(Int32[] indices);
    public MapIndex(NameOrIndexParameter[] fields);
    [CompilerGeneratedAttribute]
public NameOrIndexParameter[] get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(NameOrIndexParameter[] value);
    public string get_ID();
    [CLSCompliantAttribute("False")]
public object GetValue(IMapDataSource source, object obj, int index);
    [CLSCompliantAttribute("False")]
public object GetValueOrIndex(IMapDataSource source, object obj);
    [CLSCompliantAttribute("False")]
public CompoundValue GetIndexValue(IMapDataSource source, object obj);
    [CompilerGeneratedAttribute]
private static string <get_ID>b__0(NameOrIndexParameter _);
}
[DebuggerStepThroughAttribute]
public class BLToolkit.Mapping.MapMemberInfo : object {
    [CompilerGeneratedAttribute]
private MemberAccessor <MemberAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberAccessor <ComplexMemberAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInheritanceDiscriminator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trimmable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SqlIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DbSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDbTypeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDbSizeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private MapValue[] <MapValues>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberExtension <MemberExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    public MemberAccessor MemberAccessor { get; public set; }
    public MemberAccessor ComplexMemberAccessor { get; public set; }
    public string Name { get; public set; }
    public string MemberName { get; public set; }
    public string Storage { get; public set; }
    public bool IsInheritanceDiscriminator { get; public set; }
    public bool Trimmable { get; public set; }
    public bool SqlIgnore { get; public set; }
    public bool Nullable { get; public set; }
    public object NullValue { get; public set; }
    public object DefaultValue { get; public set; }
    public Type Type { get; public set; }
    public int DbSize { get; public set; }
    public bool IsDbTypeSet { get; public set; }
    public bool IsDbSizeSet { get; public set; }
    public MappingSchema MappingSchema { get; public set; }
    public MapValue[] MapValues { get; public set; }
    public MemberExtension MemberExtension { get; public set; }
    public DbType DbType { get; public set; }
    [CompilerGeneratedAttribute]
public MemberAccessor get_MemberAccessor();
    [CompilerGeneratedAttribute]
public void set_MemberAccessor(MemberAccessor value);
    [CompilerGeneratedAttribute]
public MemberAccessor get_ComplexMemberAccessor();
    [CompilerGeneratedAttribute]
public void set_ComplexMemberAccessor(MemberAccessor value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInheritanceDiscriminator();
    [CompilerGeneratedAttribute]
public void set_IsInheritanceDiscriminator(bool value);
    [CompilerGeneratedAttribute]
public bool get_Trimmable();
    [CompilerGeneratedAttribute]
public void set_Trimmable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SqlIgnore();
    [CompilerGeneratedAttribute]
public void set_SqlIgnore(bool value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public object get_NullValue();
    [CompilerGeneratedAttribute]
public void set_NullValue(object value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public int get_DbSize();
    [CompilerGeneratedAttribute]
public void set_DbSize(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDbTypeSet();
    [CompilerGeneratedAttribute]
public void set_IsDbTypeSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDbSizeSet();
    [CompilerGeneratedAttribute]
public void set_IsDbSizeSet(bool value);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public void set_MappingSchema(MappingSchema value);
    [CompilerGeneratedAttribute]
public MapValue[] get_MapValues();
    [CompilerGeneratedAttribute]
public void set_MapValues(MapValue[] value);
    [CompilerGeneratedAttribute]
public MemberExtension get_MemberExtension();
    [CompilerGeneratedAttribute]
public void set_MemberExtension(MemberExtension value);
    [CompilerGeneratedAttribute]
public DbType get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(DbType value);
}
public class BLToolkit.Mapping.MapNextResult : object {
    private Type _objectType;
    private MapIndex _slaveIndex;
    private MapIndex _masterIndex;
    private string _containerName;
    private MapNextResult[] _nextResults;
    internal Type ObjectType { get; }
    internal MapIndex SlaveIndex { get; }
    internal MapIndex MasterIndex { get; }
    internal string ContainerName { get; }
    internal MapNextResult[] NextResults { get; }
    public MapNextResult(Type type, MapIndex slaveIndex, MapIndex masterIndex, string containerName, MapNextResult[] nextResults);
    public MapNextResult(Type type, string slaveIndex, string masterIndex, string containerName, MapNextResult[] nextResults);
    internal Type get_ObjectType();
    internal MapIndex get_SlaveIndex();
    internal MapIndex get_MasterIndex();
    internal string get_ContainerName();
    internal MapNextResult[] get_NextResults();
}
internal class BLToolkit.Mapping.Mapper`2 : object {
    public Func`3<TS, MappingContext, TD> Map;
}
internal class BLToolkit.Mapping.MappingContext : object {
    public Dictionary`2<object, object> Objects;
    public Func`2<object, object> GetParent;
    public List`1<Action`1<object>> CrossActions;
    public Dictionary`2<object, List`1<Action`2<object, object>>> Crosses;
}
public class BLToolkit.Mapping.MappingException : Exception {
    public MappingException(string message);
    public MappingException(string message, Exception innerException);
    public MappingException(Exception innerException);
    protected MappingException(SerializationInfo info, StreamingContext context);
}
internal class BLToolkit.Mapping.MappingParameters : object {
    public MappingSchema MappingSchema;
    public bool DeepCopy;
    public bool HandleCrossReferences;
    public Dictionary`2<object, object> MapperList;
    public bool UseContext;
    public bool ContextParameterUsed;
    private ParameterExpression _mappingContext;
    public ParameterExpression MappingContext { get; }
    public ParameterExpression get_MappingContext();
}
public class BLToolkit.Mapping.MappingSchema : object {
    private Dictionary`2<Type, ObjectMapper> _mappers;
    private Dictionary`2<Type, ObjectMapper> _pendingMappers;
    private MetadataProviderBase _metadataProvider;
    private sbyte _defaultSByteNullValue;
    private short _defaultInt16NullValue;
    private int _defaultInt32NullValue;
    private long _defaultInt64NullValue;
    private byte _defaultByteNullValue;
    private ushort _defaultUInt16NullValue;
    private UInt32 _defaultUInt32NullValue;
    private ulong _defaultUInt64NullValue;
    private char _defaultCharNullValue;
    private float _defaultSingleNullValue;
    private double _defaultDoubleNullValue;
    private bool _defaultBooleanNullValue;
    private Dictionary`2<Type, MapValue[]> _mapValues;
    private Dictionary`2<Type, object> _defaultValues;
    internal Dictionary`2<Type, IValueMapper> SameTypeMappers;
    internal Dictionary`2<KeyValuePair`2<Type, Type>, IValueMapper> DifferentTypeMappers;
    private static ObjectMapper _nullMapper;
    [CompilerGeneratedAttribute]
private ExtensionList <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultStringNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DefaultDateTimeNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <DefaultDateTimeOffsetNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Binary <DefaultLinqBinaryNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <DefaultDecimalNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <DefaultGuidNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <DefaultStreamNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlReader <DefaultXmlReaderNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDocument <DefaultXmlDocumentNullValue>k__BackingField;
    public MetadataProviderBase MetadataProvider { get; public set; }
    public ExtensionList Extensions { get; public set; }
    [CLSCompliantAttribute("False")]
public sbyte DefaultSByteNullValue { get; public set; }
    public short DefaultInt16NullValue { get; public set; }
    public int DefaultInt32NullValue { get; public set; }
    public long DefaultInt64NullValue { get; public set; }
    public byte DefaultByteNullValue { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort DefaultUInt16NullValue { get; public set; }
    [CLSCompliantAttribute("False")]
public UInt32 DefaultUInt32NullValue { get; public set; }
    [CLSCompliantAttribute("False")]
public ulong DefaultUInt64NullValue { get; public set; }
    public char DefaultCharNullValue { get; public set; }
    public float DefaultSingleNullValue { get; public set; }
    public double DefaultDoubleNullValue { get; public set; }
    public bool DefaultBooleanNullValue { get; public set; }
    public string DefaultStringNullValue { get; public set; }
    public DateTime DefaultDateTimeNullValue { get; public set; }
    public DateTimeOffset DefaultDateTimeOffsetNullValue { get; public set; }
    public Binary DefaultLinqBinaryNullValue { get; public set; }
    public decimal DefaultDecimalNullValue { get; public set; }
    public Guid DefaultGuidNullValue { get; public set; }
    public Stream DefaultStreamNullValue { get; public set; }
    public XmlReader DefaultXmlReaderNullValue { get; public set; }
    public XmlDocument DefaultXmlDocumentNullValue { get; public set; }
    [CLSCompliantAttribute("False")]
public IValueMapper DefaultValueMapper { get; }
    private static MappingSchema();
    public ObjectMapper GetObjectMapper(Type type);
    private void SetObjectMapperInternal(Type type, ObjectMapper om);
    public void SetObjectMapper(Type type, ObjectMapper om);
    protected virtual ObjectMapper CreateObjectMapper(Type type);
    protected virtual ObjectMapper CreateObjectMapperInstance(Type type);
    [DebuggerStepThroughAttribute]
public MetadataProviderBase get_MetadataProvider();
    public void set_MetadataProvider(MetadataProviderBase value);
    protected virtual MetadataProviderBase CreateMetadataProvider();
    [CompilerGeneratedAttribute]
public ExtensionList get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(ExtensionList value);
    public virtual void InitNullValues();
    public sbyte get_DefaultSByteNullValue();
    public void set_DefaultSByteNullValue(sbyte value);
    [CLSCompliantAttribute("False")]
public virtual sbyte ConvertToSByte(object value);
    public short get_DefaultInt16NullValue();
    public void set_DefaultInt16NullValue(short value);
    public virtual short ConvertToInt16(object value);
    public int get_DefaultInt32NullValue();
    public void set_DefaultInt32NullValue(int value);
    public virtual int ConvertToInt32(object value);
    public long get_DefaultInt64NullValue();
    public void set_DefaultInt64NullValue(long value);
    public virtual long ConvertToInt64(object value);
    public byte get_DefaultByteNullValue();
    public void set_DefaultByteNullValue(byte value);
    public virtual byte ConvertToByte(object value);
    public ushort get_DefaultUInt16NullValue();
    public void set_DefaultUInt16NullValue(ushort value);
    [CLSCompliantAttribute("False")]
public virtual ushort ConvertToUInt16(object value);
    public UInt32 get_DefaultUInt32NullValue();
    public void set_DefaultUInt32NullValue(UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual UInt32 ConvertToUInt32(object value);
    public ulong get_DefaultUInt64NullValue();
    public void set_DefaultUInt64NullValue(ulong value);
    [CLSCompliantAttribute("False")]
public virtual ulong ConvertToUInt64(object value);
    public char get_DefaultCharNullValue();
    public void set_DefaultCharNullValue(char value);
    public virtual char ConvertToChar(object value);
    public float get_DefaultSingleNullValue();
    public void set_DefaultSingleNullValue(float value);
    public virtual float ConvertToSingle(object value);
    public double get_DefaultDoubleNullValue();
    public void set_DefaultDoubleNullValue(double value);
    public virtual double ConvertToDouble(object value);
    public bool get_DefaultBooleanNullValue();
    public void set_DefaultBooleanNullValue(bool value);
    public virtual bool ConvertToBoolean(object value);
    [CompilerGeneratedAttribute]
public string get_DefaultStringNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultStringNullValue(string value);
    public virtual string ConvertToString(object value);
    [CompilerGeneratedAttribute]
public DateTime get_DefaultDateTimeNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultDateTimeNullValue(DateTime value);
    public virtual DateTime ConvertToDateTime(object value);
    public virtual TimeSpan ConvertToTimeSpan(object value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_DefaultDateTimeOffsetNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultDateTimeOffsetNullValue(DateTimeOffset value);
    public virtual DateTimeOffset ConvertToDateTimeOffset(object value);
    [CompilerGeneratedAttribute]
public Binary get_DefaultLinqBinaryNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultLinqBinaryNullValue(Binary value);
    public virtual Binary ConvertToLinqBinary(object value);
    [CompilerGeneratedAttribute]
public decimal get_DefaultDecimalNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultDecimalNullValue(decimal value);
    public virtual decimal ConvertToDecimal(object value);
    [CompilerGeneratedAttribute]
public Guid get_DefaultGuidNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultGuidNullValue(Guid value);
    public virtual Guid ConvertToGuid(object value);
    [CompilerGeneratedAttribute]
public Stream get_DefaultStreamNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultStreamNullValue(Stream value);
    public virtual Stream ConvertToStream(object value);
    [CompilerGeneratedAttribute]
public XmlReader get_DefaultXmlReaderNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultXmlReaderNullValue(XmlReader value);
    public virtual XmlReader ConvertToXmlReader(object value);
    [CompilerGeneratedAttribute]
public XmlDocument get_DefaultXmlDocumentNullValue();
    [CompilerGeneratedAttribute]
public void set_DefaultXmlDocumentNullValue(XmlDocument value);
    public virtual XmlDocument ConvertToXmlDocument(object value);
    public virtual Byte[] ConvertToByteArray(object value);
    public virtual Char[] ConvertToCharArray(object value);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<sbyte> ConvertToNullableSByte(object value);
    public virtual Nullable`1<short> ConvertToNullableInt16(object value);
    public virtual Nullable`1<int> ConvertToNullableInt32(object value);
    public virtual Nullable`1<long> ConvertToNullableInt64(object value);
    public virtual Nullable`1<byte> ConvertToNullableByte(object value);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ushort> ConvertToNullableUInt16(object value);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<UInt32> ConvertToNullableUInt32(object value);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ulong> ConvertToNullableUInt64(object value);
    public virtual Nullable`1<char> ConvertToNullableChar(object value);
    public virtual Nullable`1<double> ConvertToNullableDouble(object value);
    public virtual Nullable`1<float> ConvertToNullableSingle(object value);
    public virtual Nullable`1<bool> ConvertToNullableBoolean(object value);
    public virtual Nullable`1<DateTime> ConvertToNullableDateTime(object value);
    public virtual Nullable`1<TimeSpan> ConvertToNullableTimeSpan(object value);
    public virtual Nullable`1<DateTimeOffset> ConvertToNullableDateTimeOffset(object value);
    public virtual Nullable`1<decimal> ConvertToNullableDecimal(object value);
    public virtual Nullable`1<Guid> ConvertToNullableGuid(object value);
    public virtual SqlByte ConvertToSqlByte(object value);
    public virtual SqlInt16 ConvertToSqlInt16(object value);
    public virtual SqlInt32 ConvertToSqlInt32(object value);
    public virtual SqlInt64 ConvertToSqlInt64(object value);
    public virtual SqlSingle ConvertToSqlSingle(object value);
    public virtual SqlBoolean ConvertToSqlBoolean(object value);
    public virtual SqlDouble ConvertToSqlDouble(object value);
    public virtual SqlDateTime ConvertToSqlDateTime(object value);
    public virtual SqlDecimal ConvertToSqlDecimal(object value);
    public virtual SqlMoney ConvertToSqlMoney(object value);
    public virtual SqlString ConvertToSqlString(object value);
    public virtual SqlBinary ConvertToSqlBinary(object value);
    public virtual SqlGuid ConvertToSqlGuid(object value);
    public virtual SqlBytes ConvertToSqlBytes(object value);
    public virtual SqlChars ConvertToSqlChars(object value);
    public virtual SqlXml ConvertToSqlXml(object value);
    public virtual T GetDefaultNullValue();
    public virtual T ConvertTo(TP value);
    public virtual object ConvertChangeType(object value, Type conversionType);
    public virtual object ConvertChangeType(object value, Type conversionType, bool isNullable);
    public virtual DataReaderMapper CreateDataReaderMapper(IDataReader dataReader);
    public virtual DataReaderListMapper CreateDataReaderListMapper(IDataReader reader);
    public virtual DataReaderMapper CreateDataReaderMapper(IDataReader dataReader, NameOrIndexParameter nameOrIndex);
    public virtual DataReaderListMapper CreateDataReaderListMapper(IDataReader reader, NameOrIndexParameter nameOrIndex);
    public virtual DataRowMapper CreateDataRowMapper(DataRow row, DataRowVersion version);
    public virtual DataTableMapper CreateDataTableMapper(DataTable dataTable, DataRowVersion version);
    public virtual DictionaryMapper CreateDictionaryMapper(IDictionary dictionary);
    public virtual DictionaryListMapper CreateDictionaryListMapper(IDictionary dic, NameOrIndexParameter keyFieldNameOrIndex, ObjectMapper objectMapper);
    public virtual DictionaryIndexListMapper CreateDictionaryListMapper(IDictionary dic, MapIndex index, ObjectMapper objectMapper);
    public virtual DictionaryListMapper`2<TK, T> CreateDictionaryListMapper(IDictionary`2<TK, T> dic, NameOrIndexParameter keyFieldNameOrIndex, ObjectMapper objectMapper);
    public virtual DictionaryIndexListMapper`1<T> CreateDictionaryListMapper(IDictionary`2<CompoundValue, T> dic, MapIndex index, ObjectMapper objectMapper);
    public virtual EnumeratorMapper CreateEnumeratorMapper(IEnumerator enumerator);
    public virtual ObjectListMapper CreateObjectListMapper(IList list, ObjectMapper objectMapper);
    public virtual ScalarListMapper CreateScalarListMapper(IList list, Type type);
    public virtual SimpleDestinationListMapper CreateScalarDestinationListMapper(IList list, Type type);
    public virtual SimpleSourceListMapper CreateScalarSourceListMapper(IList list, Type type);
    public virtual ScalarListMapper`1<T> CreateScalarListMapper(IList`1<T> list);
    public virtual SimpleDestinationListMapper CreateScalarDestinationListMapper(IList`1<T> list);
    public virtual object GetNullValue(Type type);
    public virtual bool IsNull(object value);
    public virtual MapValue[] GetMapValues(Type type);
    public virtual object GetDefaultValue(Type type);
    [CLSCompliantAttribute("False")]
public virtual IMapDataSource GetDataSource(object obj);
    [CLSCompliantAttribute("False")]
public virtual IMapDataDestination GetDataDestination(object obj);
    [CLSCompliantAttribute("False")]
public virtual IMapDataSourceList GetDataSourceList(object obj);
    [CLSCompliantAttribute("False")]
public virtual IMapDataDestinationList GetDataDestinationList(object obj);
    public virtual IValueMapper get_DefaultValueMapper();
    [CLSCompliantAttribute("False")]
public void SetValueMapper(Type sourceType, Type destType, IValueMapper mapper);
    [CLSCompliantAttribute("False")]
protected internal virtual IValueMapper GetValueMapper(Type sourceType, Type destType);
    [CLSCompliantAttribute("False")]
protected internal IValueMapper[] GetValueMappers(IMapDataSource source, IMapDataDestination dest, Int32[] index);
    [CLSCompliantAttribute("False")]
protected internal static Int32[] GetIndex(IMapDataSource source, IMapDataDestination dest);
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute]
protected static void MapInternal(IMapDataSource source, object sourceObject, IMapDataDestination dest, object destObject, Int32[] index);
    [CLSCompliantAttribute("False")]
protected internal static void MapInternal(IMapDataSource source, object sourceObject, IMapDataDestination dest, object destObject, Int32[] index, IValueMapper[] mappers);
    [CLSCompliantAttribute("False")]
protected virtual void MapInternal(InitContext initContext, IMapDataSource source, object sourceObject, IMapDataDestination dest, object destObject, Object[] parameters);
    protected virtual object MapInternal(InitContext initContext);
    [CLSCompliantAttribute("False")]
public void MapSourceToDestination(IMapDataSource source, object sourceObject, IMapDataDestination dest, object destObject, Object[] parameters);
    public void MapSourceToDestination(object sourceObject, object destObject, Object[] parameters);
    [CLSCompliantAttribute("False")]
public virtual void MapSourceListToDestinationList(IMapDataSourceList dataSourceList, IMapDataDestinationList dataDestinationList, Object[] parameters);
    public virtual object MapValueToEnum(object value, Type type);
    public virtual object MapEnumToValue(object value, Type type, bool convertToUnderlyingType);
    public virtual object MapEnumToValue(object value, bool convertToUnderlyingType);
    public object MapEnumToValue(object value);
    public virtual object MapEnumToValue(object value, Type type);
    public T MapValueToEnum(object value);
    public object MapObjectToObject(object sourceObject, object destObject, Object[] parameters);
    public object MapObjectToObject(object sourceObject, Type destObjectType, Object[] parameters);
    public T MapObjectToObject(object sourceObject, Object[] parameters);
    public DataRow MapObjectToDataRow(object sourceObject, DataRow destRow);
    public DataRow MapObjectToDataRow(object sourceObject, DataTable destTable);
    public IDictionary MapObjectToDictionary(object sourceObject, IDictionary destDictionary);
    public IDictionary MapObjectToDictionary(object sourceObject);
    public object MapDataRowToObject(DataRow dataRow, object destObject, Object[] parameters);
    public object MapDataRowToObject(DataRow dataRow, DataRowVersion version, object destObject, Object[] parameters);
    public object MapDataRowToObject(DataRow dataRow, Type destObjectType, Object[] parameters);
    public object MapDataRowToObject(DataRow dataRow, DataRowVersion version, Type destObjectType, Object[] parameters);
    public T MapDataRowToObject(DataRow dataRow, Object[] parameters);
    public T MapDataRowToObject(DataRow dataRow, DataRowVersion version, Object[] parameters);
    public DataRow MapDataRowToDataRow(DataRow sourceRow, DataRow destRow);
    public DataRow MapDataRowToDataRow(DataRow sourceRow, DataRowVersion version, DataRow destRow);
    public DataRow MapDataRowToDataRow(DataRow sourceRow, DataTable destTable);
    public DataRow MapDataRowToDataRow(DataRow sourceRow, DataRowVersion version, DataTable destTable);
    public IDictionary MapDataRowToDictionary(DataRow sourceRow, IDictionary destDictionary);
    public Hashtable MapDataRowToDictionary(DataRow sourceRow);
    public IDictionary MapDataRowToDictionary(DataRow sourceRow, DataRowVersion version, IDictionary destDictionary);
    public Hashtable MapDataRowToDictionary(DataRow sourceRow, DataRowVersion version);
    public object MapDataReaderToObject(IDataReader dataReader, object destObject, Object[] parameters);
    public object MapDataReaderToObject(IDataReader dataReader, Type destObjectType, Object[] parameters);
    public T MapDataReaderToObject(IDataReader dataReader, Object[] parameters);
    public DataRow MapDataReaderToDataRow(IDataReader dataReader, DataRow destRow);
    public DataRow MapDataReaderToDataRow(IDataReader dataReader, DataTable destTable);
    public IDictionary MapDataReaderToDictionary(IDataReader dataReader, IDictionary destDictionary);
    public IDictionary MapDataReaderToDictionary(IDataReader dataReader);
    public object MapDictionaryToObject(IDictionary sourceDictionary, object destObject, Object[] parameters);
    public object MapDictionaryToObject(IDictionary sourceDictionary, Type destObjectType, Object[] parameters);
    public T MapDictionaryToObject(IDictionary sourceDictionary, Object[] parameters);
    public DataRow MapDictionaryToDataRow(IDictionary sourceDictionary, DataRow destRow);
    public DataRow MapDictionaryToDataRow(IDictionary sourceDictionary, DataTable destTable);
    public IList MapListToList(ICollection sourceList, IList destList, Type destObjectType, Object[] parameters);
    public IList MapListToList(ICollection sourceList, Type destObjectType, Object[] parameters);
    public List`1<T> MapListToList(ICollection sourceList, List`1<T> destList, Object[] parameters);
    public List`1<T> MapListToList(ICollection sourceList, Object[] parameters);
    public DataTable MapListToDataTable(ICollection sourceList, DataTable destTable);
    public DataTable MapListToDataTable(ICollection sourceList);
    public IDictionary MapListToDictionary(ICollection sourceList, IDictionary destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary MapListToDictionary(ICollection sourceList, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary`2<TK, T> MapListToDictionary(ICollection sourceList, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public Dictionary`2<TK, T> MapListToDictionary(ICollection sourceList, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public IDictionary MapListToDictionary(ICollection sourceList, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary MapListToDictionary(ICollection sourceList, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary`2<CompoundValue, T> MapListToDictionary(ICollection sourceList, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public Dictionary`2<CompoundValue, T> MapListToDictionary(ICollection sourceList, MapIndex index, Object[] parameters);
    public DataTable MapDataTableToDataTable(DataTable sourceTable, DataTable destTable);
    public DataTable MapDataTableToDataTable(DataTable sourceTable, DataRowVersion version, DataTable destTable);
    public DataTable MapDataTableToDataTable(DataTable sourceTable);
    public DataTable MapDataTableToDataTable(DataTable sourceTable, DataRowVersion version);
    public IList MapDataTableToList(DataTable sourceTable, IList list, Type destObjectType, Object[] parameters);
    public IList MapDataTableToList(DataTable sourceTable, DataRowVersion version, IList list, Type destObjectType, Object[] parameters);
    public ArrayList MapDataTableToList(DataTable sourceTable, Type destObjectType, Object[] parameters);
    public ArrayList MapDataTableToList(DataTable sourceTable, DataRowVersion version, Type destObjectType, Object[] parameters);
    public List`1<T> MapDataTableToList(DataTable sourceTable, List`1<T> list, Object[] parameters);
    public List`1<T> MapDataTableToList(DataTable sourceTable, DataRowVersion version, List`1<T> list, Object[] parameters);
    public List`1<T> MapDataTableToList(DataTable sourceTable, Object[] parameters);
    public List`1<T> MapDataTableToList(DataTable sourceTable, DataRowVersion version, Object[] parameters);
    public IDictionary MapDataTableToDictionary(DataTable sourceTable, IDictionary destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public Hashtable MapDataTableToDictionary(DataTable sourceTable, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary`2<TK, T> MapDataTableToDictionary(DataTable sourceTable, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public Dictionary`2<TK, T> MapDataTableToDictionary(DataTable sourceTable, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public IDictionary MapDataTableToDictionary(DataTable sourceTable, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public Hashtable MapDataTableToDictionary(DataTable sourceTable, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary`2<CompoundValue, T> MapDataTableToDictionary(DataTable sourceTable, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public Dictionary`2<CompoundValue, T> MapDataTableToDictionary(DataTable sourceTable, MapIndex index, Object[] parameters);
    public IList MapDataReaderToList(IDataReader reader, IList list, Type destObjectType, Object[] parameters);
    public IList MapDataReaderToList(IDataReader reader, Type destObjectType, Object[] parameters);
    public IList`1<T> MapDataReaderToList(IDataReader reader, IList`1<T> list, Object[] parameters);
    public List`1<T> MapDataReaderToList(IDataReader reader, Object[] parameters);
    public IList MapDataReaderToScalarList(IDataReader reader, NameOrIndexParameter nameOrIndex, IList list, Type type);
    public IList MapDataReaderToScalarList(IDataReader reader, NameOrIndexParameter nameOrIndex, Type type);
    public IList`1<T> MapDataReaderToScalarList(IDataReader reader, NameOrIndexParameter nameOrIndex, IList`1<T> list);
    public List`1<T> MapDataReaderToScalarList(IDataReader reader, NameOrIndexParameter nameOrIndex);
    public DataTable MapDataReaderToDataTable(IDataReader reader, DataTable destTable);
    public DataTable MapDataReaderToDataTable(IDataReader reader);
    public IDictionary MapDataReaderToDictionary(IDataReader reader, IDictionary destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary MapDataReaderToDictionary(IDataReader reader, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary`2<TK, T> MapDataReaderToDictionary(IDataReader reader, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary`2<TK, T> MapDataReaderToDictionary(IDataReader reader, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public Dictionary`2<TK, T> MapDataReaderToDictionary(IDataReader reader, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public IDictionary MapDataReaderToDictionary(IDataReader reader, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary MapDataReaderToDictionary(IDataReader reader, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary`2<CompoundValue, T> MapDataReaderToDictionary(IDataReader reader, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary`2<CompoundValue, T> MapDataReaderToDictionary(IDataReader reader, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public Dictionary`2<CompoundValue, T> MapDataReaderToDictionary(IDataReader reader, MapIndex index, Object[] parameters);
    public IList MapDictionaryToList(IDictionary sourceDictionary, IList destList, Type destObjectType, Object[] parameters);
    public IList MapDictionaryToList(IDictionary sourceDictionary, Type destObjectType, Object[] parameters);
    public List`1<T> MapDictionaryToList(IDictionary sourceDictionary, List`1<T> destList, Object[] parameters);
    public List`1<T> MapDictionaryToList(IDictionary sourceDictionary, Object[] parameters);
    public DataTable MapDictionaryToDataTable(IDictionary sourceDictionary, DataTable destTable);
    public DataTable MapDictionaryToDataTable(IDictionary sourceDictionary);
    public IDictionary MapDictionaryToDictionary(IDictionary sourceDictionary, IDictionary destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary MapDictionaryToDictionary(IDictionary sourceDictionary, NameOrIndexParameter keyFieldNameOrIndex, Type destObjectType, Object[] parameters);
    public IDictionary`2<TK, T> MapDictionaryToDictionary(IDictionary sourceDictionary, IDictionary`2<TK, T> destDictionary, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public Dictionary`2<TK, T> MapDictionaryToDictionary(IDictionary sourceDictionary, NameOrIndexParameter keyFieldNameOrIndex, Object[] parameters);
    public IDictionary MapDictionaryToDictionary(IDictionary sourceDictionary, IDictionary destDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary MapDictionaryToDictionary(IDictionary sourceDictionary, MapIndex index, Type destObjectType, Object[] parameters);
    public IDictionary`2<CompoundValue, T> MapDictionaryToDictionary(IDictionary sourceDictionary, IDictionary`2<CompoundValue, T> destDictionary, MapIndex index, Object[] parameters);
    public Dictionary`2<CompoundValue, T> MapDictionaryToDictionary(IDictionary sourceDictionary, MapIndex index, Object[] parameters);
    public void MapResultSets(MapResultSet[] resultSets);
    public void MapDataReaderToResultSet(IDataReader reader, MapResultSet[] resultSets);
    public void MapDataSetToResultSet(DataSet dataSet, MapResultSet[] resultSets);
    public MapResultSet[] Clone(MapResultSet[] resultSets);
    private static int GetResultCount(MapNextResult[] nextResults);
    private static int GetResultSets(int current, MapResultSet[] output, MapResultSet master, MapNextResult[] nextResults);
    public MapResultSet[] ConvertToResultSet(Type masterType, MapNextResult[] nextResults);
    private void PrepareRelarions(MapResultSet[] sets);
    public Func`2<TSource, TDest> GetObjectMapper();
    public Func`2<TSource, TDest> GetObjectMapper(bool deepCopy);
}
public class BLToolkit.Mapping.MapRelation : MapRelationBase {
    private MapResultSet _slaveResultSet;
    public MapResultSet SlaveResultSet { get; }
    public MapRelation(MapResultSet slaveResultSet, MapIndex slaveIndex, MapIndex masterIndex, string containerName);
    public MapRelation(MapResultSet slaveResultSet, MapRelationBase relation);
    public MapResultSet get_SlaveResultSet();
}
public class BLToolkit.Mapping.MapRelationBase : object {
    private MapIndex _masterIndex;
    private MapIndex _slaveIndex;
    private string _containerName;
    private Type _slave;
    public MapIndex MasterIndex { get; }
    public MapIndex SlaveIndex { get; }
    public string ContainerName { get; }
    public Type Slave { get; }
    public MapRelationBase(Type slave, MapIndex slaveIndex, MapIndex masterIndex, string containerName);
    public MapIndex get_MasterIndex();
    public MapIndex get_SlaveIndex();
    public string get_ContainerName();
    public Type get_Slave();
}
public class BLToolkit.Mapping.MapResultSet : object {
    private Type _objectType;
    private Object[] _parameters;
    private IList _list;
    private MapRelation[] _relations;
    private List`1<MapRelation> _relationList;
    private Dictionary`2<string, IDictionary`2<object, IList>> _indexies;
    internal Type ObjectType { get; }
    public Object[] Parameters { get; public set; }
    public IList List { get; public set; }
    internal MapRelation[] Relations { get; internal set; }
    public MapResultSet(Type objectType);
    public MapResultSet(Type objectType, IList list);
    public MapResultSet(Type objectType, Object[] parameters);
    public MapResultSet(Type objectType, IList list, Object[] parameters);
    internal MapResultSet(MapResultSet resultSet);
    internal Type get_ObjectType();
    public Object[] get_Parameters();
    public void set_Parameters(Object[] value);
    public IList get_List();
    public void set_List(IList value);
    internal MapRelation[] get_Relations();
    internal void set_Relations(MapRelation[] value);
    public void AddRelation(MapResultSet slaveResultSet, MapIndex slaveIndex, MapIndex masterIndex, string containerName);
    public void AddRelation(MapResultSet slaveResultSet, string slaveIndex, string masterIndex, string containerName);
    public void AddRelation(MapResultSet slaveResultSet, MapRelationBase relation);
    public IDictionary`2<object, IList> GetIndex(MappingSchema ms, MapIndex masterIndex);
    public IDictionary`2<object, IList> GetIndex(MappingSchema ms, MapRelation relation);
}
[CLSCompliantAttribute("False")]
public static class BLToolkit.Mapping.MapSetData`1 : object {
    public static MB`1<T, T> I;
    private static MapSetData`1();
    public static void To(IMapDataDestination d, object o, int i, T v);
    private static MB`1<T, T> GetSetter();
}
public class BLToolkit.Mapping.MapValue : object {
    private object _origValue;
    private Object[] _mapValues;
    public object OrigValue { get; }
    public Object[] MapValues { get; }
    public MapValue(object origValue, Object[] mapValues);
    public object get_OrigValue();
    public Object[] get_MapValues();
}
[AttributeUsageAttribute("1428")]
public class BLToolkit.Mapping.MapValueAttribute : Attribute {
    private Type _type;
    private object _origValue;
    private Object[] _values;
    public object Type { get; }
    public object OrigValue { get; }
    public Object[] Values { get; }
    public MapValueAttribute(object value1);
    public MapValueAttribute(Object[] values);
    public MapValueAttribute(object origValue, Object[] values);
    public MapValueAttribute(object origValue, object value1);
    public MapValueAttribute(object origValue, object value1, object value2);
    public MapValueAttribute(object origValue, object value1, object value2, object value3);
    public MapValueAttribute(object origValue, object value1, object value2, object value3, object value4);
    public MapValueAttribute(object origValue, object value1, object value2, object value3, object value4, object value5);
    public MapValueAttribute(Type type, object origValue, Object[] values);
    public MapValueAttribute(Type type, object origValue, object value1);
    public MapValueAttribute(Type type, object origValue, object value1, object value2);
    public MapValueAttribute(Type type, object origValue, object value1, object value2, object value3);
    public MapValueAttribute(Type type, object origValue, object value1, object value2, object value3, object value4);
    public MapValueAttribute(Type type, object origValue, object value1, object value2, object value3, object value4, object value5);
    protected void SetValues(Type type, object origValue, Object[] values);
    public object get_Type();
    public object get_OrigValue();
    public Object[] get_Values();
}
public class BLToolkit.Mapping.MemberMapper : object {
    private MemberAccessor _complexMemberAccessor;
    private Type _type;
    private static Char[] _trim;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private MapMemberInfo <MapMemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberAccessor <MemberAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExplicit>k__BackingField;
    public MappingSchema MappingSchema { get; private set; }
    public string Name { get; private set; }
    public string MemberName { get; private set; }
    public string Storage { get; private set; }
    public DbType DbType { get; private set; }
    public MapMemberInfo MapMemberInfo { get; private set; }
    public int Ordinal { get; private set; }
    public MemberAccessor MemberAccessor { get; private set; }
    public bool IsExplicit { get; public set; }
    public MemberAccessor ComplexMemberAccessor { get; }
    public Type Type { get; }
    public bool SupportsValue { get; }
    private static MemberMapper();
    public virtual void Init(MapMemberInfo mapMemberInfo);
    internal static MemberMapper CreateMemberMapper(MapMemberInfo mi);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
private void set_MappingSchema(MappingSchema value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
private void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public string get_Storage();
    [CompilerGeneratedAttribute]
private void set_Storage(string value);
    [CompilerGeneratedAttribute]
public DbType get_DbType();
    [CompilerGeneratedAttribute]
private void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public MapMemberInfo get_MapMemberInfo();
    [CompilerGeneratedAttribute]
private void set_MapMemberInfo(MapMemberInfo value);
    [CompilerGeneratedAttribute]
public int get_Ordinal();
    [CompilerGeneratedAttribute]
private void set_Ordinal(int value);
    [CompilerGeneratedAttribute]
public MemberAccessor get_MemberAccessor();
    [CompilerGeneratedAttribute]
private void set_MemberAccessor(MemberAccessor value);
    [CompilerGeneratedAttribute]
public bool get_IsExplicit();
    [CompilerGeneratedAttribute]
public void set_IsExplicit(bool value);
    internal void SetOrdinal(int ordinal);
    [DebuggerStepThroughAttribute]
public MemberAccessor get_ComplexMemberAccessor();
    public virtual Type get_Type();
    public DbType GetDbType();
    public int GetDbSize(object value);
    public virtual bool get_SupportsValue();
    public virtual object GetValue(object o);
    public virtual bool IsNull(object o);
    [CLSCompliantAttribute("False")]
public virtual sbyte GetSByte(object o);
    public virtual short GetInt16(object o);
    public virtual int GetInt32(object o);
    public virtual long GetInt64(object o);
    public virtual byte GetByte(object o);
    [CLSCompliantAttribute("False")]
public virtual ushort GetUInt16(object o);
    [CLSCompliantAttribute("False")]
public virtual UInt32 GetUInt32(object o);
    [CLSCompliantAttribute("False")]
public virtual ulong GetUInt64(object o);
    public virtual bool GetBoolean(object o);
    public virtual char GetChar(object o);
    public virtual float GetSingle(object o);
    public virtual double GetDouble(object o);
    public virtual decimal GetDecimal(object o);
    public virtual Guid GetGuid(object o);
    public virtual DateTime GetDateTime(object o);
    public virtual DateTimeOffset GetDateTimeOffset(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<sbyte> GetNullableSByte(object o);
    public virtual Nullable`1<short> GetNullableInt16(object o);
    public virtual Nullable`1<int> GetNullableInt32(object o);
    public virtual Nullable`1<long> GetNullableInt64(object o);
    public virtual Nullable`1<byte> GetNullableByte(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ushort> GetNullableUInt16(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<UInt32> GetNullableUInt32(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ulong> GetNullableUInt64(object o);
    public virtual Nullable`1<bool> GetNullableBoolean(object o);
    public virtual Nullable`1<char> GetNullableChar(object o);
    public virtual Nullable`1<float> GetNullableSingle(object o);
    public virtual Nullable`1<double> GetNullableDouble(object o);
    public virtual Nullable`1<decimal> GetNullableDecimal(object o);
    public virtual Nullable`1<Guid> GetNullableGuid(object o);
    public virtual Nullable`1<DateTime> GetNullableDateTime(object o);
    public virtual Nullable`1<DateTimeOffset> GetNullableDateTimeOffset(object o);
    public virtual SqlByte GetSqlByte(object o);
    public virtual SqlInt16 GetSqlInt16(object o);
    public virtual SqlInt32 GetSqlInt32(object o);
    public virtual SqlInt64 GetSqlInt64(object o);
    public virtual SqlSingle GetSqlSingle(object o);
    public virtual SqlBoolean GetSqlBoolean(object o);
    public virtual SqlDouble GetSqlDouble(object o);
    public virtual SqlDateTime GetSqlDateTime(object o);
    public virtual SqlDecimal GetSqlDecimal(object o);
    public virtual SqlMoney GetSqlMoney(object o);
    public virtual SqlGuid GetSqlGuid(object o);
    public virtual SqlString GetSqlString(object o);
    public virtual void SetValue(object o, object value);
    public virtual void SetNull(object o);
    [CLSCompliantAttribute("False")]
public virtual void SetSByte(object o, sbyte value);
    public virtual void SetInt16(object o, short value);
    public virtual void SetInt32(object o, int value);
    public virtual void SetInt64(object o, long value);
    public virtual void SetByte(object o, byte value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt16(object o, ushort value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt32(object o, UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt64(object o, ulong value);
    public virtual void SetBoolean(object o, bool value);
    public virtual void SetChar(object o, char value);
    public virtual void SetSingle(object o, float value);
    public virtual void SetDouble(object o, double value);
    public virtual void SetDecimal(object o, decimal value);
    public virtual void SetGuid(object o, Guid value);
    public virtual void SetDateTime(object o, DateTime value);
    public virtual void SetDateTimeOffset(object o, DateTimeOffset value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableSByte(object o, Nullable`1<sbyte> value);
    public virtual void SetNullableInt16(object o, Nullable`1<short> value);
    public virtual void SetNullableInt32(object o, Nullable`1<int> value);
    public virtual void SetNullableInt64(object o, Nullable`1<long> value);
    public virtual void SetNullableByte(object o, Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt16(object o, Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt32(object o, Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt64(object o, Nullable`1<ulong> value);
    public virtual void SetNullableBoolean(object o, Nullable`1<bool> value);
    public virtual void SetNullableChar(object o, Nullable`1<char> value);
    public virtual void SetNullableSingle(object o, Nullable`1<float> value);
    public virtual void SetNullableDouble(object o, Nullable`1<double> value);
    public virtual void SetNullableDecimal(object o, Nullable`1<decimal> value);
    public virtual void SetNullableGuid(object o, Nullable`1<Guid> value);
    public virtual void SetNullableDateTime(object o, Nullable`1<DateTime> value);
    public virtual void SetNullableDateTimeOffset(object o, Nullable`1<DateTimeOffset> value);
    public virtual void SetSqlByte(object o, SqlByte value);
    public virtual void SetSqlInt16(object o, SqlInt16 value);
    public virtual void SetSqlInt32(object o, SqlInt32 value);
    public virtual void SetSqlInt64(object o, SqlInt64 value);
    public virtual void SetSqlSingle(object o, SqlSingle value);
    public virtual void SetSqlBoolean(object o, SqlBoolean value);
    public virtual void SetSqlDouble(object o, SqlDouble value);
    public virtual void SetSqlDateTime(object o, SqlDateTime value);
    public virtual void SetSqlDecimal(object o, SqlDecimal value);
    public virtual void SetSqlMoney(object o, SqlMoney value);
    public virtual void SetSqlGuid(object o, SqlGuid value);
    public virtual void SetSqlString(object o, SqlString value);
    public virtual void CloneValue(object source, object dest);
    private static MemberMapper GetPrimitiveMemberMapper(MapMemberInfo mi);
    private static MemberMapper GetSimpleMemberMapper(MapMemberInfo mi);
    private static MemberMapper GetNullableMemberMapper(MapMemberInfo mi);
    private static MemberMapper GetSqlTypeMemberMapper(MapMemberInfo mi);
    protected object MapFrom(object value);
    protected object MapFrom(object value, MapMemberInfo mapInfo);
    protected object MapTo(object value);
    protected static object MapTo(object value, MapMemberInfo mapInfo);
}
[AttributeUsageAttribute("1412")]
public class BLToolkit.Mapping.MemberMapperAttribute : MapImplicitAttribute {
    private Type _memberType;
    private Type _memberMapperType;
    public Type MemberType { get; }
    public Type MemberMapperType { get; }
    public MemberMapper MemberMapper { get; }
    public MemberMapperAttribute(Type memberMapperType);
    public MemberMapperAttribute(Type memberType, Type memberMapperType);
    public Type get_MemberType();
    public Type get_MemberMapperType();
    public virtual MemberMapper get_MemberMapper();
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Mapping.NotNullAttribute : NullableAttribute {
}
[AttributeUsageAttribute("1412")]
public class BLToolkit.Mapping.NullableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public bool IsNullable { get; public set; }
    public Type Type { get; private set; }
    public NullableAttribute(bool isNullable);
    public NullableAttribute(Type type);
    public NullableAttribute(Type type, bool isNullable);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
public class BLToolkit.Mapping.NullDateTimeAttribute : NullValueAttribute {
    public NullDateTimeAttribute(int year, int month, int day);
    public NullDateTimeAttribute(int year, int month, int day, int hour, int minute, int second);
    public NullDateTimeAttribute(int year, int month, int day, int hour, int minute, int second, int millisecond);
}
public class BLToolkit.Mapping.NullDecimalAttribute : NullValueAttribute {
    public NullDecimalAttribute(decimal nullValue);
    public NullDecimalAttribute(double value);
    public NullDecimalAttribute(Int32[] bits);
    public NullDecimalAttribute(long value);
    [CLSCompliantAttribute("False")]
public NullDecimalAttribute(ulong value);
    public NullDecimalAttribute(int lo, int mid, int hi, bool isNegative, byte scale);
}
public class BLToolkit.Mapping.NullGuidAttribute : NullValueAttribute {
    public NullGuidAttribute(Byte[] b);
    public NullGuidAttribute(string g);
    public NullGuidAttribute(int a, short b, short c, Byte[] d);
    public NullGuidAttribute(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    [CLSCompliantAttribute("False")]
public NullGuidAttribute(UInt32 a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
}
[AttributeUsageAttribute("1428")]
public class BLToolkit.Mapping.NullValueAttribute : Attribute {
    private object _value;
    private Type _type;
    public object Value { get; }
    public Type Type { get; }
    public NullValueAttribute(object value);
    public NullValueAttribute(Type type, object value);
    public object get_Value();
    public Type get_Type();
}
public class BLToolkit.Mapping.ObjectListMapper : object {
    private IList _list;
    private ObjectMapper _mapper;
    private int _currentItem;
    private object _currentObject;
    public ObjectListMapper(IList list, ObjectMapper objectMapper);
    private sealed virtual override void BLToolkit.Mapping.IMapDataSourceList.InitMapping(InitContext initContext);
    private sealed virtual override bool BLToolkit.Mapping.IMapDataSourceList.SetNextDataSource(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.IMapDataSourceList.EndMapping(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.IMapDataDestinationList.InitMapping(InitContext initContext);
    private sealed virtual override IMapDataDestination BLToolkit.Mapping.IMapDataDestinationList.GetDataDestination(InitContext initContext);
    private void AddCurrent();
    private sealed virtual override object BLToolkit.Mapping.IMapDataDestinationList.GetNextObject(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.IMapDataDestinationList.EndMapping(InitContext initContext);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Type = {TypeAccessor.Type}, OriginalType = {TypeAccessor.OriginalType}")]
public class BLToolkit.Mapping.ObjectMapper : MapDataSourceDestinationBase {
    private List`1<MemberMapper> _members;
    private List`1<Association> _associations;
    private List`1<InheritanceMappingAttribute> _inheritanceMapping;
    private TypeExtension _extension;
    private MetadataProviderBase _metadataProvider;
    private String[] _fieldNames;
    private Dictionary`2<string, MemberMapper> _nameToMember;
    private Dictionary`2<string, MemberMapper> _memberNameToMember;
    private TypeAccessor _typeAccessor;
    private MappingSchema _mappingSchema;
    private Dictionary`2<string, MemberMapper> _nameToComplexMapper;
    public MemberMapper Item { get; }
    public List`1<Association> Associations { get; }
    public List`1<InheritanceMappingAttribute> InheritanceMapping { get; }
    public TypeExtension Extension { get; public set; }
    public MetadataProviderBase MetadataProvider { get; public set; }
    public String[] FieldNames { get; }
    public MemberMapper Item { get; }
    public MemberMapper Item { get; }
    public TypeAccessor TypeAccessor { get; }
    public MappingSchema MappingSchema { get; }
    public int Count { get; }
    protected virtual MemberMapper CreateMemberMapper(MapMemberInfo mapMemberInfo);
    protected virtual void Add(MemberMapper memberMapper);
    protected virtual MetadataProviderBase CreateMetadataProvider();
    public MemberMapper get_Item(int index);
    public List`1<Association> get_Associations();
    public List`1<InheritanceMappingAttribute> get_InheritanceMapping();
    public TypeExtension get_Extension();
    public void set_Extension(TypeExtension value);
    public MetadataProviderBase get_MetadataProvider();
    public void set_MetadataProvider(MetadataProviderBase value);
    public String[] get_FieldNames();
    public MemberMapper get_Item(string name);
    public MemberMapper get_Item(string name, bool byPropertyName);
    public int GetOrdinal(string name, bool byPropertyName);
    public TypeAccessor get_TypeAccessor();
    public MappingSchema get_MappingSchema();
    public virtual void Init(MappingSchema mappingSchema, Type type);
    private MemberMapper EnsureMapper(string mapName, string origName);
    protected MemberMapper GetComplexMapper(string mapName, string origName);
    private MapValue[] GetMapValues(MemberAccessor member);
    protected virtual object GetDefaultValue(MemberAccessor memberAccessor);
    protected virtual bool GetNullable(MemberAccessor memberAccessor);
    protected virtual bool GetMapIgnore(MemberAccessor memberAccessor);
    protected virtual bool GetSqlIgnore(MemberAccessor memberAccessor);
    protected virtual string GetFieldName(MemberAccessor memberAccessor);
    protected virtual string GetFieldStorage(MemberAccessor memberAccessor);
    protected virtual bool GetInheritanceDiscriminator(MemberAccessor memberAccessor);
    protected virtual bool GetTrimmable(MemberAccessor memberAccessor);
    protected virtual object GetNullValue(MemberAccessor memberAccessor, bool isNullable);
    protected virtual Association GetAssociation(MemberAccessor memberAccessor);
    protected virtual InheritanceMappingAttribute[] GetInheritanceMapping();
    public virtual object CreateInstance();
    public virtual object CreateInstance(InitContext context);
    public virtual int get_Count();
    public virtual Type GetFieldType(int index);
    public virtual string GetName(int index);
    public virtual object GetValue(object o, int index);
    public virtual object GetValue(object o, string name);
    public virtual bool IsNull(object o, int index);
    public virtual bool SupportsTypedValues(int index);
    [CLSCompliantAttribute("False")]
public virtual sbyte GetSByte(object o, int index);
    public virtual short GetInt16(object o, int index);
    public virtual int GetInt32(object o, int index);
    public virtual long GetInt64(object o, int index);
    public virtual byte GetByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ushort GetUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual UInt32 GetUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ulong GetUInt64(object o, int index);
    public virtual bool GetBoolean(object o, int index);
    public virtual char GetChar(object o, int index);
    public virtual float GetSingle(object o, int index);
    public virtual double GetDouble(object o, int index);
    public virtual decimal GetDecimal(object o, int index);
    public virtual Guid GetGuid(object o, int index);
    public virtual DateTime GetDateTime(object o, int index);
    public virtual DateTimeOffset GetDateTimeOffset(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<sbyte> GetNullableSByte(object o, int index);
    public virtual Nullable`1<short> GetNullableInt16(object o, int index);
    public virtual Nullable`1<int> GetNullableInt32(object o, int index);
    public virtual Nullable`1<long> GetNullableInt64(object o, int index);
    public virtual Nullable`1<byte> GetNullableByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ushort> GetNullableUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<UInt32> GetNullableUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ulong> GetNullableUInt64(object o, int index);
    public virtual Nullable`1<bool> GetNullableBoolean(object o, int index);
    public virtual Nullable`1<char> GetNullableChar(object o, int index);
    public virtual Nullable`1<float> GetNullableSingle(object o, int index);
    public virtual Nullable`1<double> GetNullableDouble(object o, int index);
    public virtual Nullable`1<decimal> GetNullableDecimal(object o, int index);
    public virtual Nullable`1<Guid> GetNullableGuid(object o, int index);
    public virtual Nullable`1<DateTime> GetNullableDateTime(object o, int index);
    public virtual Nullable`1<DateTimeOffset> GetNullableDateTimeOffset(object o, int index);
    public virtual SqlByte GetSqlByte(object o, int index);
    public virtual SqlInt16 GetSqlInt16(object o, int index);
    public virtual SqlInt32 GetSqlInt32(object o, int index);
    public virtual SqlInt64 GetSqlInt64(object o, int index);
    public virtual SqlSingle GetSqlSingle(object o, int index);
    public virtual SqlBoolean GetSqlBoolean(object o, int index);
    public virtual SqlDouble GetSqlDouble(object o, int index);
    public virtual SqlDateTime GetSqlDateTime(object o, int index);
    public virtual SqlDecimal GetSqlDecimal(object o, int index);
    public virtual SqlMoney GetSqlMoney(object o, int index);
    public virtual SqlGuid GetSqlGuid(object o, int index);
    public virtual SqlString GetSqlString(object o, int index);
    public virtual int GetOrdinal(string name);
    public virtual void SetValue(object o, int index, object value);
    public virtual void SetValue(object o, string name, object value);
    public virtual void SetNull(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual void SetSByte(object o, int index, sbyte value);
    public virtual void SetInt16(object o, int index, short value);
    public virtual void SetInt32(object o, int index, int value);
    public virtual void SetInt64(object o, int index, long value);
    public virtual void SetByte(object o, int index, byte value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt16(object o, int index, ushort value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt32(object o, int index, UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt64(object o, int index, ulong value);
    public virtual void SetBoolean(object o, int index, bool value);
    public virtual void SetChar(object o, int index, char value);
    public virtual void SetSingle(object o, int index, float value);
    public virtual void SetDouble(object o, int index, double value);
    public virtual void SetDecimal(object o, int index, decimal value);
    public virtual void SetGuid(object o, int index, Guid value);
    public virtual void SetDateTime(object o, int index, DateTime value);
    public virtual void SetDateTimeOffset(object o, int index, DateTimeOffset value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableSByte(object o, int index, Nullable`1<sbyte> value);
    public virtual void SetNullableInt16(object o, int index, Nullable`1<short> value);
    public virtual void SetNullableInt32(object o, int index, Nullable`1<int> value);
    public virtual void SetNullableInt64(object o, int index, Nullable`1<long> value);
    public virtual void SetNullableByte(object o, int index, Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt16(object o, int index, Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt32(object o, int index, Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt64(object o, int index, Nullable`1<ulong> value);
    public virtual void SetNullableBoolean(object o, int index, Nullable`1<bool> value);
    public virtual void SetNullableChar(object o, int index, Nullable`1<char> value);
    public virtual void SetNullableSingle(object o, int index, Nullable`1<float> value);
    public virtual void SetNullableDouble(object o, int index, Nullable`1<double> value);
    public virtual void SetNullableDecimal(object o, int index, Nullable`1<decimal> value);
    public virtual void SetNullableGuid(object o, int index, Nullable`1<Guid> value);
    public virtual void SetNullableDateTime(object o, int index, Nullable`1<DateTime> value);
    public virtual void SetNullableDateTimeOffset(object o, int index, Nullable`1<DateTimeOffset> value);
    public virtual void SetSqlByte(object o, int index, SqlByte value);
    public virtual void SetSqlInt16(object o, int index, SqlInt16 value);
    public virtual void SetSqlInt32(object o, int index, SqlInt32 value);
    public virtual void SetSqlInt64(object o, int index, SqlInt64 value);
    public virtual void SetSqlSingle(object o, int index, SqlSingle value);
    public virtual void SetSqlBoolean(object o, int index, SqlBoolean value);
    public virtual void SetSqlDouble(object o, int index, SqlDouble value);
    public virtual void SetSqlDateTime(object o, int index, SqlDateTime value);
    public virtual void SetSqlDecimal(object o, int index, SqlDecimal value);
    public virtual void SetSqlMoney(object o, int index, SqlMoney value);
    public virtual void SetSqlGuid(object o, int index, SqlGuid value);
    public virtual void SetSqlString(object o, int index, SqlString value);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MemberMapper> System.Collections.Generic.IEnumerable<BLToolkit.Mapping.MemberMapper>.GetEnumerator();
}
public static class BLToolkit.Mapping.ObjectMapper`1 : object {
    private static ObjectMapper _instance;
    public static int Count { get; }
    public static ObjectMapper Instance { get; }
    private static ObjectMapper`1();
    public static T CreateInstance();
    public static T CreateInstance(InitContext context);
    public static int get_Count();
    public static string GetName(int index);
    public static object GetValue(T o, int index);
    public static object GetValue(T o, string name);
    public static int GetOrdinal(string name);
    public static void SetValue(T o, int index, object value);
    public static void SetValue(object o, string name, object value);
    public static ObjectMapper get_Instance();
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.Mapping.ObjectMapperAttribute : Attribute {
    private ObjectMapper _objectMapper;
    public ObjectMapper ObjectMapper { get; }
    public ObjectMapperAttribute(Type objectMapperType);
    public ObjectMapper get_ObjectMapper();
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Mapping.RelationAttribute : Attribute {
    private Type _destination;
    private string _masterIndex1;
    private string _masterIndex2;
    private string _masterIndex3;
    private string _slaveIndex1;
    private string _slaveIndex2;
    private string _slaveIndex3;
    public Type Destination { get; }
    public string MasterIndex1 { get; public set; }
    public string MasterIndex2 { get; public set; }
    public string MasterIndex3 { get; public set; }
    public string SlaveIndex1 { get; public set; }
    public string SlaveIndex2 { get; public set; }
    public string SlaveIndex3 { get; public set; }
    public MapIndex MasterIndex { get; }
    public MapIndex SlaveIndex { get; }
    public RelationAttribute(Type destination);
    public RelationAttribute(string slaveIndex);
    public RelationAttribute(string slaveIndex, string masterIndex);
    public RelationAttribute(Type destination, string slaveIndex);
    public RelationAttribute(Type destination, string slaveIndex, string masterIndex);
    public Type get_Destination();
    public string get_MasterIndex1();
    public void set_MasterIndex1(string value);
    public string get_MasterIndex2();
    public void set_MasterIndex2(string value);
    public string get_MasterIndex3();
    public void set_MasterIndex3(string value);
    public string get_SlaveIndex1();
    public void set_SlaveIndex1(string value);
    public string get_SlaveIndex2();
    public void set_SlaveIndex2(string value);
    public string get_SlaveIndex3();
    public void set_SlaveIndex3(string value);
    public MapIndex get_MasterIndex();
    public MapIndex get_SlaveIndex();
    private void AddIndex(List`1<string> index, string field);
}
public class BLToolkit.Mapping.ScalarDataReaderMapper : DataReaderMapper {
    private int _index;
    public int Index { get; }
    public int Count { get; }
    public ScalarDataReaderMapper(MappingSchema mappingSchema, IDataReader dataReader, NameOrIndexParameter nameOrIndex);
    public int get_Index();
    public virtual int get_Count();
    public virtual Type GetFieldType(int index);
    public virtual string GetName(int index);
    public virtual object GetValue(object o, int index);
    public virtual object GetValue(object o, string name);
    public virtual bool IsNull(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual sbyte GetSByte(object o, int index);
    public virtual short GetInt16(object o, int index);
    public virtual int GetInt32(object o, int index);
    public virtual long GetInt64(object o, int index);
    public virtual byte GetByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ushort GetUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual UInt32 GetUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual ulong GetUInt64(object o, int index);
    public virtual bool GetBoolean(object o, int index);
    public virtual char GetChar(object o, int index);
    public virtual float GetSingle(object o, int index);
    public virtual double GetDouble(object o, int index);
    public virtual decimal GetDecimal(object o, int index);
    public virtual Guid GetGuid(object o, int index);
    public virtual DateTime GetDateTime(object o, int index);
    public virtual DateTimeOffset GetDateTimeOffset(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<sbyte> GetNullableSByte(object o, int index);
    public virtual Nullable`1<short> GetNullableInt16(object o, int index);
    public virtual Nullable`1<int> GetNullableInt32(object o, int index);
    public virtual Nullable`1<long> GetNullableInt64(object o, int index);
    public virtual Nullable`1<byte> GetNullableByte(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ushort> GetNullableUInt16(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<UInt32> GetNullableUInt32(object o, int index);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ulong> GetNullableUInt64(object o, int index);
    public virtual Nullable`1<bool> GetNullableBoolean(object o, int index);
    public virtual Nullable`1<char> GetNullableChar(object o, int index);
    public virtual Nullable`1<float> GetNullableSingle(object o, int index);
    public virtual Nullable`1<double> GetNullableDouble(object o, int index);
    public virtual Nullable`1<decimal> GetNullableDecimal(object o, int index);
    public virtual Nullable`1<Guid> GetNullableGuid(object o, int index);
    public virtual Nullable`1<DateTime> GetNullableDateTime(object o, int index);
    public virtual Nullable`1<DateTimeOffset> GetNullableDateTimeOffset(object o, int index);
    public virtual SqlByte GetSqlByte(object o, int index);
    public virtual SqlInt16 GetSqlInt16(object o, int index);
    public virtual SqlInt32 GetSqlInt32(object o, int index);
    public virtual SqlInt64 GetSqlInt64(object o, int index);
    public virtual SqlSingle GetSqlSingle(object o, int index);
    public virtual SqlBoolean GetSqlBoolean(object o, int index);
    public virtual SqlDouble GetSqlDouble(object o, int index);
    public virtual SqlDateTime GetSqlDateTime(object o, int index);
    public virtual SqlDecimal GetSqlDecimal(object o, int index);
    public virtual SqlMoney GetSqlMoney(object o, int index);
    public virtual SqlGuid GetSqlGuid(object o, int index);
    public virtual SqlString GetSqlString(object o, int index);
}
public class BLToolkit.Mapping.ScalarListMapper : MapDataSourceDestinationBase {
    private IList _list;
    private Type _type;
    private int _index;
    public int Count { get; }
    public ScalarListMapper(IList list, Type type);
    public virtual Type GetFieldType(int index);
    public virtual int GetOrdinal(string name);
    public virtual void SetValue(object o, int index, object value);
    public virtual void SetValue(object o, string name, object value);
    public virtual int get_Count();
    public virtual string GetName(int index);
    public virtual object GetValue(object o, int index);
    public virtual object GetValue(object o, string name);
}
public class BLToolkit.Mapping.ScalarListMapper`1 : MapDataDestinationBase {
    private IList`1<T> _list;
    private MappingSchema _mappingSchema;
    private T _nullValue;
    private bool _isNullable;
    private Type _type;
    private Type _underlyingType;
    public ScalarListMapper`1(MappingSchema mappingSchema, IList`1<T> list);
    public virtual Type GetFieldType(int index);
    public virtual int GetOrdinal(string name);
    public virtual void SetValue(object o, int index, object value);
    public virtual void SetValue(object o, string name, object value);
    public virtual void SetNull(object o, int index);
    public virtual bool SupportsTypedValues(int index);
    [CLSCompliantAttribute("False")]
public virtual void SetSByte(object o, int index, sbyte value);
    public virtual void SetInt16(object o, int index, short value);
    public virtual void SetInt32(object o, int index, int value);
    public virtual void SetInt64(object o, int index, long value);
    public virtual void SetByte(object o, int index, byte value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt16(object o, int index, ushort value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt32(object o, int index, UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt64(object o, int index, ulong value);
    public virtual void SetBoolean(object o, int index, bool value);
    public virtual void SetChar(object o, int index, char value);
    public virtual void SetSingle(object o, int index, float value);
    public virtual void SetDouble(object o, int index, double value);
    public virtual void SetDecimal(object o, int index, decimal value);
    public virtual void SetGuid(object o, int index, Guid value);
    public virtual void SetDateTime(object o, int index, DateTime value);
    public virtual void SetDateTimeOffset(object o, int index, DateTimeOffset value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableSByte(object o, int index, Nullable`1<sbyte> value);
    public virtual void SetNullableInt16(object o, int index, Nullable`1<short> value);
    public virtual void SetNullableInt32(object o, int index, Nullable`1<int> value);
    public virtual void SetNullableInt64(object o, int index, Nullable`1<long> value);
    public virtual void SetNullableByte(object o, int index, Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt16(object o, int index, Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt32(object o, int index, Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt64(object o, int index, Nullable`1<ulong> value);
    public virtual void SetNullableBoolean(object o, int index, Nullable`1<bool> value);
    public virtual void SetNullableChar(object o, int index, Nullable`1<char> value);
    public virtual void SetNullableSingle(object o, int index, Nullable`1<float> value);
    public virtual void SetNullableDouble(object o, int index, Nullable`1<double> value);
    public virtual void SetNullableDecimal(object o, int index, Nullable`1<decimal> value);
    public virtual void SetNullableGuid(object o, int index, Nullable`1<Guid> value);
    public virtual void SetNullableDateTime(object o, int index, Nullable`1<DateTime> value);
    public virtual void SetNullableDateTimeOffset(object o, int index, Nullable`1<DateTimeOffset> value);
    public virtual void SetSqlByte(object o, int index, SqlByte value);
    public virtual void SetSqlInt16(object o, int index, SqlInt16 value);
    public virtual void SetSqlInt32(object o, int index, SqlInt32 value);
    public virtual void SetSqlInt64(object o, int index, SqlInt64 value);
    public virtual void SetSqlSingle(object o, int index, SqlSingle value);
    public virtual void SetSqlBoolean(object o, int index, SqlBoolean value);
    public virtual void SetSqlDouble(object o, int index, SqlDouble value);
    public virtual void SetSqlDateTime(object o, int index, SqlDateTime value);
    public virtual void SetSqlDecimal(object o, int index, SqlDecimal value);
    public virtual void SetSqlMoney(object o, int index, SqlMoney value);
    public virtual void SetSqlGuid(object o, int index, SqlGuid value);
    public virtual void SetSqlString(object o, int index, SqlString value);
}
public class BLToolkit.Mapping.SimpleDestinationListMapper : object {
    private IMapDataDestination _mapper;
    [CLSCompliantAttribute("False")]
public SimpleDestinationListMapper(IMapDataDestination mapper);
    public virtual void InitMapping(InitContext initContext);
    [CLSCompliantAttribute("False")]
public virtual IMapDataDestination GetDataDestination(InitContext initContext);
    public virtual object GetNextObject(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.SimpleSourceListMapper : object {
    private IMapDataSource _mapper;
    [CLSCompliantAttribute("False")]
public SimpleSourceListMapper(IMapDataSource mapper);
    public virtual void InitMapping(InitContext initContext);
    public sealed virtual bool SetNextDataSource(InitContext initContext);
    public virtual void EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.TextDataListMapper : object {
    private TextDataMapper _mapper;
    public TextDataListMapper(TextDataMapper mapper);
    public TextDataListMapper(TextDataWriter writer);
    private sealed virtual override void BLToolkit.Mapping.IMapDataDestinationList.InitMapping(InitContext initContext);
    private sealed virtual override IMapDataDestination BLToolkit.Mapping.IMapDataDestinationList.GetDataDestination(InitContext initContext);
    private sealed virtual override object BLToolkit.Mapping.IMapDataDestinationList.GetNextObject(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.IMapDataDestinationList.EndMapping(InitContext initContext);
}
public class BLToolkit.Mapping.TextDataMapper : MapDataDestinationBase {
    private TextDataWriter _writer;
    public TextDataWriter Writer { get; }
    public TextDataMapper(TextDataWriter writer);
    public TextDataWriter get_Writer();
    public virtual void WriteEnd();
    public virtual Type GetFieldType(int index);
    public virtual int GetOrdinal(string name);
    public virtual void SetValue(object o, int index, object value);
    public virtual void SetValue(object o, string name, object value);
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Mapping.TextDataReader : object {
    private StreamReader _reader;
    private MappingSchema _mappingSchema;
    private string _line;
    private String[] _names;
    private String[] _values;
    private int _lineNumber;
    private static String[] _empty;
    private DataTable _schemaTable;
    private bool IsEof { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public TextDataReader(Stream stream);
    public TextDataReader(Stream stream, MappingSchema mappingSchema);
    private static TextDataReader();
    private bool get_IsEof();
    private bool ReadNextLine();
    private void ReadHeader();
    private static string Encode(string value);
    private bool ReadRecord();
    public virtual void Close();
    public virtual int get_Depth();
    public virtual Type GetFieldType(int index);
    public virtual string GetName(int index);
    public virtual DataTable GetSchemaTable();
    public virtual int get_FieldCount();
    public virtual bool get_IsClosed();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_RecordsAffected();
    public virtual void Dispose();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual IDataReader GetData(int i);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
}
public class BLToolkit.Mapping.TextDataWriter : object {
    private TextWriter _writer;
    private String[] _names;
    private String[] _values;
    public TextDataWriter(Stream stream, String[] fieldNames);
    public TextDataWriter(Stream stream, Type type);
    public TextDataWriter(Stream stream, MappingSchema mappingSchema, String[] fieldNames);
    public TextDataWriter(Stream stream, MappingSchema mappingSchema, Type type);
    public TextDataWriter(TextWriter writer, String[] fieldNames);
    public TextDataWriter(TextWriter writer, Type type);
    public TextDataWriter(TextWriter writer, MappingSchema mappingSchema, String[] fieldNames);
    public TextDataWriter(TextWriter writer, MappingSchema mappingSchema, Type type);
    public virtual void WriteEnd();
    public virtual Type GetFieldType(int index);
    public virtual int GetOrdinal(string name);
    public virtual void SetValue(int index, object value);
    public virtual void SetValue(string name, object value);
    private void WriteHeader();
    private void WriteRecord();
    private sealed virtual override void BLToolkit.Mapping.ISupportMapping.BeginMapping(InitContext initContext);
    private sealed virtual override void BLToolkit.Mapping.ISupportMapping.EndMapping(InitContext initContext);
}
[AttributeUsageAttribute("1412")]
public class BLToolkit.Mapping.TrimmableAttribute : Attribute {
    private bool _isTrimmable;
    public static TrimmableAttribute Yes;
    public static TrimmableAttribute No;
    public static TrimmableAttribute Default;
    public bool IsTrimmable { get; }
    public TrimmableAttribute(bool isTrimmable);
    private static TrimmableAttribute();
    public bool get_IsTrimmable();
    private static TrimmableAttribute GetDefaultTrimmableAttribute();
}
public static class BLToolkit.Mapping.ValueMapping : object {
    private static Dictionary`2<KeyValuePair`2<Type, Type>, IValueMapper> _mappers;
    private static IValueMapper _defaultMapper;
    private static object _sync;
    [CLSCompliantAttribute("False")]
public static IValueMapper DefaultMapper { get; public set; }
    private static ValueMapping();
    public static IValueMapper get_DefaultMapper();
    public static void set_DefaultMapper(IValueMapper value);
    [CLSCompliantAttribute("False")]
public static IValueMapper GetMapper(Type t1, Type t2);
}
public class BLToolkit.Net.HttpReader : object {
    private X509Certificate _certificate;
    private string _baseUri;
    private string _previousUri;
    private CookieContainer _cookieContainer;
    private string _userAgent;
    private string _accept;
    private Uri _requestUri;
    private string _contentType;
    private IWebProxy _proxy;
    private ICredentials _credentials;
    private string _html;
    private Hashtable _headers;
    private string _location;
    private bool _sendReferer;
    private HttpStatusCode _statusCode;
    private int _timeout;
    public X509Certificate Certificate { get; public set; }
    public string BaseUri { get; public set; }
    public string PreviousUri { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public string UserAgent { get; public set; }
    public string Accept { get; public set; }
    public Uri RequestUri { get; public set; }
    public string ContentType { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public ICredentials Credentials { get; public set; }
    public string Html { get; }
    public Hashtable Headers { get; }
    public string Location { get; }
    public bool SendReferer { get; public set; }
    public HttpStatusCode StatusCode { get; }
    public int Timeout { get; public set; }
    public HttpReader(string baseUri);
    public X509Certificate get_Certificate();
    public void set_Certificate(X509Certificate value);
    public string get_BaseUri();
    public void set_BaseUri(string value);
    public string get_PreviousUri();
    public void set_PreviousUri(string value);
    public CookieContainer get_CookieContainer();
    public void set_CookieContainer(CookieContainer value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public string get_Accept();
    public void set_Accept(string value);
    public Uri get_RequestUri();
    public void set_RequestUri(Uri value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public string get_Html();
    public Hashtable get_Headers();
    public string get_Location();
    public bool get_SendReferer();
    public void set_SendReferer(bool value);
    public HttpStatusCode get_StatusCode();
    public int get_Timeout();
    public void set_Timeout(int value);
    public void LoadCertificate(string fileName);
    private HttpWebRequest PrepareRequest(string method, string requestUri, ProcessStream requestStreamProcessor);
    public HttpStatusCode Request(string requestUri, string method, ProcessStream requestStreamProcessor, ProcessStream responseStreamProcessor);
    public IEnumerable`1<string> Request(string requestUri, string method, ProcessStream requestStreamProcessor);
    public HttpStatusCode Get(string requestUri);
    public HttpStatusCode Get(string requestUri, ProcessStream responseStreamProcessor);
    public HttpStatusCode Post(string requestUri, string postData);
    public HttpStatusCode Post(string requestUri, ProcessStream requestStreamProcessor);
    public HttpStatusCode Post(string requestUri, string postData, ProcessStream responseStreamProcessor);
    public HttpStatusCode Post(string requestUri, ProcessStream requestStreamProcessor, ProcessStream responseStreamProcessor);
    private HttpStatusCode Soap(string soapAction, ProcessStream inputStreamProcessor, ProcessStream outputStreamProcessor);
    public HttpStatusCode Soap(string soapAction, string postData);
    public HttpStatusCode Soap(string soapAction, string postData, ProcessStream outputStreamProcessor);
    public IEnumerable`1<string> SoapEx(string soapAction, string postData);
    public void Download(string requestUri, string fileName);
}
public class BLToolkit.Net.ProcessStream : MulticastDelegate {
    public ProcessStream(object object, IntPtr method);
    public virtual void Invoke(Stream stream);
    public virtual IAsyncResult BeginInvoke(Stream stream, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class BLToolkit.Patterns.DuckType : object {
    [CLSCompliantAttribute("False")]
protected Object[] _objects;
    public Object[] Objects { get; }
    public Object[] get_Objects();
    internal void SetObjects(Object[] objs);
}
public static class BLToolkit.Patterns.DuckTyping : object {
    private static Dictionary`2<Type, Dictionary`2<object, Type>> _duckTypes;
    private static bool _allowStaticMembers;
    public static bool AllowStaticMembers { get; public set; }
    private static DuckTyping();
    public static Type GetDuckType(Type interfaceType, Type objectType);
    public static object Implement(Type interfaceType, Type baseObjectType, object obj);
    public static object Implement(Type interfaceType, object obj);
    public static Object[] Implement(Type interfaceType, Type baseObjectType, Object[] objects);
    public static Object[] Implement(Type interfaceType, Object[] objects);
    public static I Implement(object obj);
    public static I Implement(T obj);
    public static I[] Implement(Object[] objects);
    public static I[] Implement(T[] objects);
    public static bool get_AllowStaticMembers();
    public static void set_AllowStaticMembers(bool value);
    public static Type GetDuckType(Type interfaceType, Type[] objectTypes);
    public static object Aggregate(Type interfaceType, Type[] baseObjectTypes, Object[] objs);
    public static object Aggregate(Type interfaceType, Object[] objs);
    public static I Aggregate(Object[] objs);
}
[AttributeUsageAttribute("1216")]
public class BLToolkit.Patterns.MustImplementAttribute : Attribute {
    private bool _implement;
    private bool _throwException;
    private string _exceptionMessage;
    public static MustImplementAttribute Default;
    public static MustImplementAttribute Aggregate;
    public bool Implement { get; }
    public bool ThrowException { get; public set; }
    public string ExceptionMessage { get; public set; }
    public MustImplementAttribute(bool implement, bool throwException, string exceptionMessage);
    public MustImplementAttribute(bool implement, bool throwException);
    public MustImplementAttribute(bool implement, string exceptionMessage);
    public MustImplementAttribute(bool implement);
    private static MustImplementAttribute();
    public bool get_Implement();
    public bool get_ThrowException();
    public void set_ThrowException(bool value);
    public string get_ExceptionMessage();
    public void set_ExceptionMessage(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class BLToolkit.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbstractClassBuilder_TypeIsNotAnInterface { get; }
    internal static string AsyncAspectBuilder_NoTargetMethod { get; }
    internal static string CacheAttribute_ParentTypeConstraintViolated { get; }
    internal static string Convert_InvalidCast { get; }
    internal static string DataAccessor_IndexIsComplex { get; }
    internal static string DataAccessor_InvalidKeyType { get; }
    internal static string DataAccessor_UnknownIndex { get; }
    internal static string DataAccessorBase_NoDbManager { get; }
    internal static string DataAccessorBuilder_BadKeyType { get; }
    internal static string DataAccessorBuilder_BadListItemType { get; }
    internal static string DataAccessorBuilder_CantCreateTypeInstance { get; }
    internal static string DataAccessorBuilder_CantExecuteNonQueryToDestination { get; }
    internal static string DataAccessorBuilder_DataSetTableMustBeByName { get; }
    internal static string DataAccessorBuilder_EqualsMethodIsNotPublic { get; }
    internal static string DataAccessorBuilder_IncompatibleDestinationType { get; }
    internal static string DataAccessorBuilder_ScalarDestinationIsNotByRef { get; }
    internal static string DataAccessorBuilder_ScalarFieldNameMissing { get; }
    internal static string DataAccessorBuilderTooManyDestinations { get; }
    internal static string DataAccessot_ParameterNotFound { get; }
    internal static string DbManager_CannotUpdateNullDataset { get; }
    internal static string DbManager_CannotUpdateNullDataTable { get; }
    internal static string DbManager_ConnectionTypeMismatch { get; }
    internal static string DbManager_InvalidDataProviderConnectionType { get; }
    internal static string DbManager_InvalidDataProviderName { get; }
    internal static string DbManager_InvalidDataProviderProviderName { get; }
    internal static string DbManager_InvalidProviderName { get; }
    internal static string DbManager_MismatchParameterCount { get; }
    internal static string DbManager_MoreThenOneDefaultProvider { get; }
    internal static string DbManager_NotDbDataParameter { get; }
    internal static string DbManager_UnknownConfiguration { get; }
    internal static string DbManager_UnknownConnectionType { get; }
    internal static string DbManager_UnknownDataProvider { get; }
    internal static string DuckTyping_InterfaceMustBePublic { get; }
    internal static string DuckTyping_InterfaceTypeMustBeAnInterface { get; }
    internal static string DuckTyping_InvalidNumberOfObjs { get; }
    internal static string DuckTyping_NotASubtypeOf { get; }
    internal static string EmitHelper_NoSuchMethod { get; }
    internal static string EmitHelper_NotExpectedType { get; }
    internal static string InterceptCallInfo_CallMethodInfoIsNotMutable { get; }
    internal static string MapIndex_BadField { get; }
    internal static string MapIndex_EmptyFields { get; }
    internal static string MapIndex_EmptyIndices { get; }
    internal static string MapIndex_EmptyNames { get; }
    internal static string MappingSchema_IncompatibleArrayTypes { get; }
    internal static string NameOrIndexParameter_BadIndex { get; }
    internal static string NameOrIndexParameter_BadName { get; }
    internal static string OverloadAspectBuilder_NoOverloadedMethod { get; }
    internal static string TypeBuilder_CannotGetGetter { get; }
    internal static string TypeBuilder_CannotGetSetter { get; }
    internal static string TypeBuilder_GenericShouldBeSingleTyped { get; }
    internal static string TypeBuilder_NoDefaultCtor { get; }
    internal static string TypeBuilder_PropertyTypeHasNoCtorWithParamType { get; }
    internal static string TypeBuilder_PropertyTypeHasNoPublicCtor { get; }
    internal static string TypeBuilder_PropertyTypeHasNoPublicDefaultCtor { get; }
    internal static string TypeBuilder_PublicMethodMustBeImplemented { get; }
    internal static string TypeBuilder_PublicMethodNotImplemented { get; }
    internal static string TypeBuilder_UnknownParameterType { get; }
    internal static string TypeFactory_BuildFailed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbstractClassBuilder_TypeIsNotAnInterface();
    internal static string get_AsyncAspectBuilder_NoTargetMethod();
    internal static string get_CacheAttribute_ParentTypeConstraintViolated();
    internal static string get_Convert_InvalidCast();
    internal static string get_DataAccessor_IndexIsComplex();
    internal static string get_DataAccessor_InvalidKeyType();
    internal static string get_DataAccessor_UnknownIndex();
    internal static string get_DataAccessorBase_NoDbManager();
    internal static string get_DataAccessorBuilder_BadKeyType();
    internal static string get_DataAccessorBuilder_BadListItemType();
    internal static string get_DataAccessorBuilder_CantCreateTypeInstance();
    internal static string get_DataAccessorBuilder_CantExecuteNonQueryToDestination();
    internal static string get_DataAccessorBuilder_DataSetTableMustBeByName();
    internal static string get_DataAccessorBuilder_EqualsMethodIsNotPublic();
    internal static string get_DataAccessorBuilder_IncompatibleDestinationType();
    internal static string get_DataAccessorBuilder_ScalarDestinationIsNotByRef();
    internal static string get_DataAccessorBuilder_ScalarFieldNameMissing();
    internal static string get_DataAccessorBuilderTooManyDestinations();
    internal static string get_DataAccessot_ParameterNotFound();
    internal static string get_DbManager_CannotUpdateNullDataset();
    internal static string get_DbManager_CannotUpdateNullDataTable();
    internal static string get_DbManager_ConnectionTypeMismatch();
    internal static string get_DbManager_InvalidDataProviderConnectionType();
    internal static string get_DbManager_InvalidDataProviderName();
    internal static string get_DbManager_InvalidDataProviderProviderName();
    internal static string get_DbManager_InvalidProviderName();
    internal static string get_DbManager_MismatchParameterCount();
    internal static string get_DbManager_MoreThenOneDefaultProvider();
    internal static string get_DbManager_NotDbDataParameter();
    internal static string get_DbManager_UnknownConfiguration();
    internal static string get_DbManager_UnknownConnectionType();
    internal static string get_DbManager_UnknownDataProvider();
    internal static string get_DuckTyping_InterfaceMustBePublic();
    internal static string get_DuckTyping_InterfaceTypeMustBeAnInterface();
    internal static string get_DuckTyping_InvalidNumberOfObjs();
    internal static string get_DuckTyping_NotASubtypeOf();
    internal static string get_EmitHelper_NoSuchMethod();
    internal static string get_EmitHelper_NotExpectedType();
    internal static string get_InterceptCallInfo_CallMethodInfoIsNotMutable();
    internal static string get_MapIndex_BadField();
    internal static string get_MapIndex_EmptyFields();
    internal static string get_MapIndex_EmptyIndices();
    internal static string get_MapIndex_EmptyNames();
    internal static string get_MappingSchema_IncompatibleArrayTypes();
    internal static string get_NameOrIndexParameter_BadIndex();
    internal static string get_NameOrIndexParameter_BadName();
    internal static string get_OverloadAspectBuilder_NoOverloadedMethod();
    internal static string get_TypeBuilder_CannotGetGetter();
    internal static string get_TypeBuilder_CannotGetSetter();
    internal static string get_TypeBuilder_GenericShouldBeSingleTyped();
    internal static string get_TypeBuilder_NoDefaultCtor();
    internal static string get_TypeBuilder_PropertyTypeHasNoCtorWithParamType();
    internal static string get_TypeBuilder_PropertyTypeHasNoPublicCtor();
    internal static string get_TypeBuilder_PropertyTypeHasNoPublicDefaultCtor();
    internal static string get_TypeBuilder_PublicMethodMustBeImplemented();
    internal static string get_TypeBuilder_PublicMethodNotImplemented();
    internal static string get_TypeBuilder_UnknownParameterType();
    internal static string get_TypeFactory_BuildFailed();
}
public class BLToolkit.Reflection.Emit.AssemblyBuilderHelper : object {
    private AssemblyName _assemblyName;
    private Action`1<int> _createAssemblyBuilder;
    private AssemblyBuilder _assemblyBuilder;
    private ModuleBuilder _moduleBuilder;
    private CustomAttributeBuilder _blToolkitAttribute;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; private set; }
    public AssemblyName AssemblyName { get; }
    public AssemblyBuilder AssemblyBuilder { get; }
    public string ModulePath { get; }
    public ModuleBuilder ModuleBuilder { get; }
    public CustomAttributeBuilder BLToolkitAttribute { get; }
    public AssemblyBuilderHelper(string path);
    public AssemblyBuilderHelper(string path, Version version, string keyFile);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    public AssemblyName get_AssemblyName();
    public AssemblyBuilder get_AssemblyBuilder();
    public string get_ModulePath();
    public ModuleBuilder get_ModuleBuilder();
    public CustomAttributeBuilder get_BLToolkitAttribute();
    public static AssemblyBuilder op_Implicit(AssemblyBuilderHelper assemblyBuilder);
    public static ModuleBuilder op_Implicit(AssemblyBuilderHelper assemblyBuilder);
    public void Save();
    public TypeBuilderHelper DefineType(string name);
    public TypeBuilderHelper DefineType(string name, Type parent);
    public TypeBuilderHelper DefineType(string name, TypeAttributes attrs, Type parent);
    public TypeBuilderHelper DefineType(string name, Type parent, Type[] interfaces);
    public TypeBuilderHelper DefineType(string name, TypeAttributes attrs, Type parent, Type[] interfaces);
}
public class BLToolkit.Reflection.Emit.ConstructorBuilderHelper : MethodBuilderBase {
    private ConstructorBuilder _constructorBuilder;
    private EmitHelper _emitter;
    public ConstructorBuilder ConstructorBuilder { get; }
    public EmitHelper Emitter { get; }
    public ConstructorBuilderHelper(TypeBuilderHelper typeBuilder, ConstructorBuilder constructorBuilder);
    public ConstructorBuilder get_ConstructorBuilder();
    public static ConstructorBuilder op_Implicit(ConstructorBuilderHelper constructorBuilder);
    public virtual EmitHelper get_Emitter();
}
public class BLToolkit.Reflection.Emit.EmitHelper : object {
    private MethodBuilderBase _method;
    private ILGenerator _ilGenerator;
    public MethodBuilderBase Method { get; }
    public ILGenerator ILGenerator { get; }
    public EmitHelper add { get; }
    public EmitHelper add_ovf { get; }
    public EmitHelper add_ovf_un { get; }
    public EmitHelper and { get; }
    public EmitHelper arglist { get; }
    public EmitHelper break { get; }
    public EmitHelper ceq { get; }
    public EmitHelper cgt { get; }
    public EmitHelper cgt_un { get; }
    public EmitHelper ckfinite { get; }
    public EmitHelper clt { get; }
    public EmitHelper clt_un { get; }
    public EmitHelper conv_i { get; }
    public EmitHelper conv_i1 { get; }
    public EmitHelper conv_i2 { get; }
    public EmitHelper conv_i4 { get; }
    public EmitHelper conv_i8 { get; }
    public EmitHelper conv_ovf_i { get; }
    public EmitHelper conv_ovf_i1 { get; }
    public EmitHelper conv_ovf_i1_un { get; }
    public EmitHelper conv_ovf_i2 { get; }
    public EmitHelper conv_ovf_i2_un { get; }
    public EmitHelper conv_ovf_i4 { get; }
    public EmitHelper conv_ovf_i4_un { get; }
    public EmitHelper conv_ovf_i8 { get; }
    public EmitHelper conv_ovf_i8_un { get; }
    public EmitHelper conv_ovf_i_un { get; }
    public EmitHelper conv_ovf_u { get; }
    public EmitHelper conv_ovf_u1 { get; }
    public EmitHelper conv_ovf_u1_un { get; }
    public EmitHelper conv_ovf_u2 { get; }
    public EmitHelper conv_ovf_u2_un { get; }
    public EmitHelper conv_ovf_u4 { get; }
    public EmitHelper conv_ovf_u4_un { get; }
    public EmitHelper conv_ovf_u8 { get; }
    public EmitHelper conv_ovf_u8_un { get; }
    public EmitHelper conv_ovf_u_un { get; }
    public EmitHelper conv_r4 { get; }
    public EmitHelper conv_r8 { get; }
    public EmitHelper conv_r_un { get; }
    public EmitHelper conv_u { get; }
    public EmitHelper conv_u1 { get; }
    public EmitHelper conv_u2 { get; }
    public EmitHelper conv_u4 { get; }
    public EmitHelper conv_u8 { get; }
    public EmitHelper cpblk { get; }
    public EmitHelper div { get; }
    public EmitHelper div_un { get; }
    public EmitHelper dup { get; }
    public EmitHelper endfilter { get; }
    public EmitHelper endfinally { get; }
    public EmitHelper initblk { get; }
    public EmitHelper ldarg_0 { get; }
    public EmitHelper ldarg_1 { get; }
    public EmitHelper ldarg_2 { get; }
    public EmitHelper ldarg_3 { get; }
    public EmitHelper ldc_i4_0 { get; }
    public EmitHelper ldc_i4_1 { get; }
    public EmitHelper ldc_i4_2 { get; }
    public EmitHelper ldc_i4_3 { get; }
    public EmitHelper ldc_i4_4 { get; }
    public EmitHelper ldc_i4_5 { get; }
    public EmitHelper ldc_i4_6 { get; }
    public EmitHelper ldc_i4_7 { get; }
    public EmitHelper ldc_i4_8 { get; }
    public EmitHelper ldc_i4_m1 { get; }
    public EmitHelper ldelem_i { get; }
    public EmitHelper ldelem_i1 { get; }
    public EmitHelper ldelem_i2 { get; }
    public EmitHelper ldelem_i4 { get; }
    public EmitHelper ldelem_i8 { get; }
    public EmitHelper ldelem_r4 { get; }
    public EmitHelper ldelem_r8 { get; }
    public EmitHelper ldelem_ref { get; }
    public EmitHelper ldelem_u1 { get; }
    public EmitHelper ldelem_u2 { get; }
    public EmitHelper ldelem_u4 { get; }
    public EmitHelper ldind_i { get; }
    public EmitHelper ldind_i1 { get; }
    public EmitHelper ldind_i2 { get; }
    public EmitHelper ldind_i4 { get; }
    public EmitHelper ldind_i8 { get; }
    public EmitHelper ldind_r4 { get; }
    public EmitHelper ldind_r8 { get; }
    public EmitHelper ldind_ref { get; }
    public EmitHelper ldind_u1 { get; }
    public EmitHelper ldind_u2 { get; }
    public EmitHelper ldind_u4 { get; }
    public EmitHelper ldlen { get; }
    public EmitHelper ldloc_0 { get; }
    public EmitHelper ldloc_1 { get; }
    public EmitHelper ldloc_2 { get; }
    public EmitHelper ldloc_3 { get; }
    public EmitHelper ldnull { get; }
    public EmitHelper localloc { get; }
    public EmitHelper mul { get; }
    public EmitHelper mul_ovf { get; }
    public EmitHelper mul_ovf_un { get; }
    public EmitHelper neg { get; }
    public EmitHelper nop { get; }
    public EmitHelper not { get; }
    public EmitHelper or { get; }
    public EmitHelper pop { get; }
    public EmitHelper readonly { get; }
    public EmitHelper refanytype { get; }
    public EmitHelper rem { get; }
    public EmitHelper rem_un { get; }
    public EmitHelper rethrow { get; }
    public EmitHelper shl { get; }
    public EmitHelper shr { get; }
    public EmitHelper shr_un { get; }
    public EmitHelper stelem_i { get; }
    public EmitHelper stelem_i1 { get; }
    public EmitHelper stelem_i2 { get; }
    public EmitHelper stelem_i4 { get; }
    public EmitHelper stelem_i8 { get; }
    public EmitHelper stelem_r4 { get; }
    public EmitHelper stelem_r8 { get; }
    public EmitHelper stelem_ref { get; }
    public EmitHelper stind_i { get; }
    public EmitHelper stind_i1 { get; }
    public EmitHelper stind_i2 { get; }
    public EmitHelper stind_i4 { get; }
    public EmitHelper stind_i8 { get; }
    public EmitHelper stind_r4 { get; }
    public EmitHelper stind_r8 { get; }
    public EmitHelper stind_ref { get; }
    public EmitHelper stloc_0 { get; }
    public EmitHelper stloc_1 { get; }
    public EmitHelper stloc_2 { get; }
    public EmitHelper stloc_3 { get; }
    public EmitHelper sub { get; }
    public EmitHelper sub_ovf { get; }
    public EmitHelper sub_ovf_un { get; }
    public EmitHelper tailcall { get; }
    public EmitHelper throw { get; }
    public EmitHelper volatile { get; }
    public EmitHelper xor { get; }
    public EmitHelper(ILGenerator ilGenerator);
    public EmitHelper(MethodBuilderBase methodBuilder, ILGenerator ilGenerator);
    public MethodBuilderBase get_Method();
    public ILGenerator get_ILGenerator();
    public static ILGenerator op_Implicit(EmitHelper emitHelper);
    public EmitHelper BeginCatchBlock(Type exceptionType);
    public EmitHelper BeginExceptFilterBlock();
    public Label BeginExceptionBlock();
    public EmitHelper BeginFaultBlock();
    public EmitHelper BeginFinallyBlock();
    public EmitHelper BeginScope();
    public LocalBuilder DeclareLocal(Type localType);
    public LocalBuilder DeclareLocal(Type localType, bool pinned);
    public Label DefineLabel();
    public EmitHelper EndExceptionBlock();
    public EmitHelper EndScope();
    public EmitHelper MarkLabel(Label loc);
    public EmitHelper MarkSequencePoint(ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn);
    public EmitHelper ThrowException(Type exceptionType);
    public EmitHelper UsingNamespace(string namespaceName);
    public EmitHelper get_add();
    public EmitHelper get_add_ovf();
    public EmitHelper get_add_ovf_un();
    public EmitHelper get_and();
    public EmitHelper get_arglist();
    public EmitHelper beq(Label label);
    public EmitHelper beq_s(Label label);
    public EmitHelper bge(Label label);
    public EmitHelper bge_s(Label label);
    public EmitHelper bge_un(Label label);
    public EmitHelper bge_un_s(Label label);
    public EmitHelper bgt(Label label);
    public EmitHelper bgt_s(Label label);
    public EmitHelper bgt_un(Label label);
    public EmitHelper bgt_un_s(Label label);
    public EmitHelper ble(Label label);
    public EmitHelper ble_s(Label label);
    public EmitHelper ble_un(Label label);
    public EmitHelper ble_un_s(Label label);
    public EmitHelper blt(Label label);
    public EmitHelper blt_s(Label label);
    public EmitHelper blt_un(Label label);
    public EmitHelper blt_un_s(Label label);
    public EmitHelper bne_un(Label label);
    public EmitHelper bne_un_s(Label label);
    public EmitHelper box(Type type);
    public EmitHelper boxIfValueType(Type type);
    public EmitHelper br(Label label);
    public EmitHelper get_break();
    public EmitHelper brfalse(Label label);
    public EmitHelper brfalse_s(Label label);
    public EmitHelper brtrue(Label label);
    public EmitHelper brtrue_s(Label label);
    public EmitHelper br_s(Label label);
    public EmitHelper call(MethodInfo methodInfo);
    public EmitHelper call(ConstructorInfo constructorInfo);
    public EmitHelper call(MethodInfo methodInfo, Type[] optionalParameterTypes);
    public EmitHelper call(Type type, string methodName, Type[] optionalParameterTypes);
    public EmitHelper call(Type type, string methodName, BindingFlags flags, Type[] optionalParameterTypes);
    public EmitHelper calli(CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);
    public EmitHelper calli(CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);
    public EmitHelper callvirt(MethodInfo methodInfo);
    public EmitHelper callvirt(MethodInfo methodInfo, Type[] optionalParameterTypes);
    public EmitHelper callvirt(Type type, string methodName, Type[] optionalParameterTypes);
    public EmitHelper callvirt(Type type, string methodName, BindingFlags flags, Type[] optionalParameterTypes);
    public EmitHelper callvirt(Type type, string methodName, BindingFlags flags);
    public EmitHelper callvirtNoGenerics(Type type, string methodName, Type[] optionalParameterTypes);
    public EmitHelper castclass(Type type);
    public EmitHelper castType(Type type);
    public EmitHelper get_ceq();
    public EmitHelper get_cgt();
    public EmitHelper get_cgt_un();
    public EmitHelper constrained(Type type);
    public EmitHelper get_ckfinite();
    public EmitHelper get_clt();
    public EmitHelper get_clt_un();
    public EmitHelper get_conv_i();
    public EmitHelper get_conv_i1();
    public EmitHelper get_conv_i2();
    public EmitHelper get_conv_i4();
    public EmitHelper get_conv_i8();
    public EmitHelper conv(Type type);
    public EmitHelper get_conv_ovf_i();
    public EmitHelper get_conv_ovf_i1();
    public EmitHelper get_conv_ovf_i1_un();
    public EmitHelper get_conv_ovf_i2();
    public EmitHelper get_conv_ovf_i2_un();
    public EmitHelper get_conv_ovf_i4();
    public EmitHelper get_conv_ovf_i4_un();
    public EmitHelper get_conv_ovf_i8();
    public EmitHelper get_conv_ovf_i8_un();
    public EmitHelper get_conv_ovf_i_un();
    public EmitHelper get_conv_ovf_u();
    public EmitHelper get_conv_ovf_u1();
    public EmitHelper get_conv_ovf_u1_un();
    public EmitHelper get_conv_ovf_u2();
    public EmitHelper get_conv_ovf_u2_un();
    public EmitHelper get_conv_ovf_u4();
    public EmitHelper get_conv_ovf_u4_un();
    public EmitHelper get_conv_ovf_u8();
    public EmitHelper get_conv_ovf_u8_un();
    public EmitHelper get_conv_ovf_u_un();
    public EmitHelper get_conv_r4();
    public EmitHelper get_conv_r8();
    public EmitHelper get_conv_r_un();
    public EmitHelper get_conv_u();
    public EmitHelper get_conv_u1();
    public EmitHelper get_conv_u2();
    public EmitHelper get_conv_u4();
    public EmitHelper get_conv_u8();
    public EmitHelper get_cpblk();
    public EmitHelper cpobj(Type type);
    public EmitHelper get_div();
    public EmitHelper get_div_un();
    public EmitHelper get_dup();
    public EmitHelper get_endfilter();
    public EmitHelper get_endfinally();
    public EmitHelper get_initblk();
    public EmitHelper initobj(Type type);
    public EmitHelper isinst(Type type);
    public EmitHelper jmp(MethodInfo methodInfo);
    public EmitHelper ldarg(short index);
    public EmitHelper ldargEx(ParameterInfo parameterInfo, bool box);
    public EmitHelper ldarg(int index);
    public EmitHelper ldarg(ParameterInfo parameterInfo);
    public EmitHelper ldarga(short index);
    public EmitHelper ldarga_s(byte index);
    public EmitHelper ldarga(int index);
    public EmitHelper ldarga(ParameterInfo parameterInfo);
    public EmitHelper get_ldarg_0();
    public EmitHelper get_ldarg_1();
    public EmitHelper get_ldarg_2();
    public EmitHelper get_ldarg_3();
    public EmitHelper ldarg_s(byte index);
    public EmitHelper ldc_bool(bool b);
    public EmitHelper ldc_i4(int num);
    public EmitHelper get_ldc_i4_0();
    public EmitHelper get_ldc_i4_1();
    public EmitHelper get_ldc_i4_2();
    public EmitHelper get_ldc_i4_3();
    public EmitHelper get_ldc_i4_4();
    public EmitHelper get_ldc_i4_5();
    public EmitHelper get_ldc_i4_6();
    public EmitHelper get_ldc_i4_7();
    public EmitHelper get_ldc_i4_8();
    public EmitHelper get_ldc_i4_m1();
    public EmitHelper ldc_i4_(int num);
    [CLSCompliantAttribute("False")]
public EmitHelper ldc_i4_s(sbyte num);
    public EmitHelper ldc_i8(long num);
    public EmitHelper ldc_r4(float num);
    public EmitHelper ldc_r8(double num);
    public EmitHelper ldelema(Type type);
    public EmitHelper get_ldelem_i();
    public EmitHelper get_ldelem_i1();
    public EmitHelper get_ldelem_i2();
    public EmitHelper get_ldelem_i4();
    public EmitHelper get_ldelem_i8();
    public EmitHelper get_ldelem_r4();
    public EmitHelper get_ldelem_r8();
    public EmitHelper get_ldelem_ref();
    public EmitHelper get_ldelem_u1();
    public EmitHelper get_ldelem_u2();
    public EmitHelper get_ldelem_u4();
    public EmitHelper ldfld(FieldInfo fieldInfo);
    public EmitHelper ldflda(FieldInfo fieldInfo);
    public EmitHelper ldftn(MethodInfo methodInfo);
    public EmitHelper get_ldind_i();
    public EmitHelper get_ldind_i1();
    public EmitHelper get_ldind_i2();
    public EmitHelper get_ldind_i4();
    public EmitHelper get_ldind_i8();
    public EmitHelper get_ldind_r4();
    public EmitHelper get_ldind_r8();
    public EmitHelper get_ldind_ref();
    public EmitHelper get_ldind_u1();
    public EmitHelper get_ldind_u2();
    public EmitHelper get_ldind_u4();
    public EmitHelper ldind(Type type);
    public EmitHelper get_ldlen();
    public EmitHelper ldloc(short index);
    public EmitHelper ldloc(LocalBuilder localBuilder);
    public EmitHelper ldloca(short index);
    public EmitHelper ldloca_s(byte index);
    public EmitHelper ldloca(LocalBuilder local);
    public EmitHelper get_ldloc_0();
    public EmitHelper get_ldloc_1();
    public EmitHelper get_ldloc_2();
    public EmitHelper get_ldloc_3();
    public EmitHelper ldloc_s(byte index);
    public EmitHelper get_ldnull();
    public EmitHelper ldobj(Type type);
    public EmitHelper ldsfld(FieldInfo fieldInfo);
    public EmitHelper ldsflda(FieldInfo fieldInfo);
    public EmitHelper ldstrEx(string str);
    public EmitHelper ldstr(string str);
    public EmitHelper ldNameOrIndex(NameOrIndexParameter nameOrIndex);
    public EmitHelper ldtoken(MethodInfo methodInfo);
    public EmitHelper ldtoken(FieldInfo fieldInfo);
    public EmitHelper ldtoken(Type type);
    public EmitHelper ldvirtftn(MethodInfo methodInfo);
    public EmitHelper leave(Label label);
    public EmitHelper leave_s(Label label);
    public EmitHelper get_localloc();
    public EmitHelper mkrefany(Type type);
    public EmitHelper get_mul();
    public EmitHelper get_mul_ovf();
    public EmitHelper get_mul_ovf_un();
    public EmitHelper get_neg();
    public EmitHelper newarr(Type type);
    public EmitHelper newobj(ConstructorInfo constructorInfo);
    public EmitHelper newobj(Type type, Type[] parameters);
    public EmitHelper get_nop();
    public EmitHelper get_not();
    public EmitHelper get_or();
    public EmitHelper get_pop();
    public EmitHelper get_readonly();
    public EmitHelper get_refanytype();
    public EmitHelper refanyval(Type type);
    public EmitHelper get_rem();
    public EmitHelper get_rem_un();
    public EmitHelper ret();
    public EmitHelper get_rethrow();
    public EmitHelper get_shl();
    public EmitHelper get_shr();
    public EmitHelper get_shr_un();
    public EmitHelper sizeof(Type type);
    public EmitHelper starg(short index);
    public EmitHelper starg_s(byte index);
    public EmitHelper starg(int index);
    public EmitHelper get_stelem_i();
    public EmitHelper get_stelem_i1();
    public EmitHelper get_stelem_i2();
    public EmitHelper get_stelem_i4();
    public EmitHelper get_stelem_i8();
    public EmitHelper get_stelem_r4();
    public EmitHelper get_stelem_r8();
    public EmitHelper get_stelem_ref();
    public EmitHelper stfld(FieldInfo fieldInfo);
    public EmitHelper get_stind_i();
    public EmitHelper get_stind_i1();
    public EmitHelper get_stind_i2();
    public EmitHelper get_stind_i4();
    public EmitHelper get_stind_i8();
    public EmitHelper get_stind_r4();
    public EmitHelper get_stind_r8();
    public EmitHelper get_stind_ref();
    public EmitHelper stind(Type type);
    public EmitHelper stloc(LocalBuilder local);
    public EmitHelper stloc(short index);
    public EmitHelper get_stloc_0();
    public EmitHelper get_stloc_1();
    public EmitHelper get_stloc_2();
    public EmitHelper get_stloc_3();
    public EmitHelper stloc_s(LocalBuilder local);
    public EmitHelper stloc_s(byte index);
    public EmitHelper stobj(Type type);
    public EmitHelper stsfld(FieldInfo fieldInfo);
    public EmitHelper get_sub();
    public EmitHelper get_sub_ovf();
    public EmitHelper get_sub_ovf_un();
    public EmitHelper switch(Label[] labels);
    public EmitHelper get_tailcall();
    public EmitHelper get_throw();
    public EmitHelper unaligned(Label label);
    public EmitHelper unaligned(long addr);
    public EmitHelper unbox(Type type);
    public EmitHelper unbox_any(Type type);
    public EmitHelper unboxIfValueType(Type type);
    public EmitHelper get_volatile();
    public EmitHelper get_xor();
    public void end();
    public EmitHelper LoadInitValue(Type type);
    public bool LoadWellKnownValue(object o);
    public EmitHelper Init(ParameterInfo parameterInfo, int index);
    public EmitHelper InitOutParameters(ParameterInfo[] parameters);
    public EmitHelper Init(LocalBuilder localBuilder);
    public EmitHelper LoadType(Type type);
    public EmitHelper LoadField(FieldInfo fieldInfo);
    public EmitHelper CastFromObject(Type type);
    public EmitHelper CastIfNecessary(Type expectedType, Type actualType);
    public void AddMaxStackSize(int size);
    private static Exception CreateNoSuchMethodException(Type type, string methodName);
    private static Exception CreateNotExpectedTypeException(Type type);
}
public abstract class BLToolkit.Reflection.Emit.MethodBuilderBase : object {
    private TypeBuilderHelper _type;
    public TypeBuilderHelper Type { get; }
    public EmitHelper Emitter { get; }
    protected MethodBuilderBase(TypeBuilderHelper typeBuilder);
    public TypeBuilderHelper get_Type();
    public abstract virtual EmitHelper get_Emitter();
}
public class BLToolkit.Reflection.Emit.MethodBuilderHelper : MethodBuilderBase {
    private MethodBuilder _methodBuilder;
    private EmitHelper _emitter;
    private MethodInfo _overriddenMethod;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public MethodBuilder MethodBuilder { get; }
    public EmitHelper Emitter { get; }
    public MethodInfo OverriddenMethod { get; public set; }
    public Type DeclaringType { get; }
    public MethodBuilderHelper(TypeBuilderHelper typeBuilder, MethodBuilder methodBuilder);
    internal MethodBuilderHelper(TypeBuilderHelper typeBuilder, MethodBuilder methodBuilder, Type[] genericArguments, Type returnType, Type[] parameterTypes);
    public void SetCustomAttribute(Type attributeType);
    public void SetCustomAttribute(Type attributeType, PropertyInfo[] properties, Object[] propertyValues);
    public void SetCustomAttribute(Type attributeType, string propertyName, object propertyValue);
    public MethodBuilder get_MethodBuilder();
    public static MethodBuilder op_Implicit(MethodBuilderHelper methodBuilder);
    public virtual EmitHelper get_Emitter();
    public MethodInfo get_OverriddenMethod();
    public void set_OverriddenMethod(MethodInfo value);
    public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(Type t);
}
public class BLToolkit.Reflection.Emit.TypeBuilderHelper : object {
    private AssemblyBuilderHelper _assembly;
    private TypeBuilder _typeBuilder;
    private Dictionary`2<MethodInfo, MethodBuilder> _overriddenMethods;
    private ConstructorBuilderHelper _typeInitializer;
    private ConstructorBuilderHelper _defaultConstructor;
    private ConstructorBuilderHelper _initConstructor;
    public AssemblyBuilderHelper Assembly { get; }
    public TypeBuilder TypeBuilder { get; }
    public Dictionary`2<MethodInfo, MethodBuilder> OverriddenMethods { get; }
    public ConstructorBuilderHelper TypeInitializer { get; }
    public bool IsTypeInitializerDefined { get; }
    public ConstructorBuilderHelper DefaultConstructor { get; }
    public bool IsDefaultConstructorDefined { get; }
    public ConstructorBuilderHelper InitConstructor { get; }
    public bool IsInitConstructorDefined { get; }
    public TypeBuilderHelper(AssemblyBuilderHelper assemblyBuilder, TypeBuilder typeBuilder);
    public AssemblyBuilderHelper get_Assembly();
    public TypeBuilder get_TypeBuilder();
    public static TypeBuilder op_Implicit(TypeBuilderHelper typeBuilder);
    public MethodBuilderHelper DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    public MethodBuilderHelper DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public MethodBuilderHelper DefineMethod(string name, MethodAttributes attributes, Type returnType);
    public MethodBuilderHelper DefineMethod(string name, MethodAttributes attributes);
    public MethodBuilderHelper DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention);
    public MethodBuilderHelper DefineGenericMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type[] genericArguments, Type returnType, Type[] parameterTypes);
    public Dictionary`2<MethodInfo, MethodBuilder> get_OverriddenMethods();
    public MethodBuilderHelper DefineMethod(string name, MethodInfo methodInfoDeclaration, MethodAttributes attributes);
    public MethodBuilderHelper DefineMethod(string name, MethodInfo methodInfoDeclaration);
    public MethodBuilderHelper DefineMethod(MethodInfo methodInfoDeclaration);
    public Type Create();
    public void SetCustomAttribute(Type attributeType);
    public void SetCustomAttribute(Type attributeType, PropertyInfo[] properties, Object[] propertyValues);
    public void SetCustomAttribute(Type attributeType, string propertyName, object propertyValue);
    public ConstructorBuilderHelper get_TypeInitializer();
    public bool get_IsTypeInitializerDefined();
    public ConstructorBuilderHelper get_DefaultConstructor();
    public bool get_IsDefaultConstructorDefined();
    public ConstructorBuilderHelper get_InitConstructor();
    public bool get_IsInitConstructorDefined();
    public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes);
    public ConstructorBuilderHelper DefinePublicConstructor(Type[] parameterTypes);
    public ConstructorBuilderHelper DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes);
    public TypeBuilderHelper DefineNestedType(string name);
    public TypeBuilderHelper DefineNestedType(string name, Type parent);
    public TypeBuilderHelper DefineNestedType(string name, TypeAttributes attributes, Type parent);
    public TypeBuilderHelper DefineNestedType(string name, Type parent, Type[] interfaces);
    public TypeBuilderHelper DefineNestedType(string name, TypeAttributes attributes, Type parent, Type[] interfaces);
}
public abstract class BLToolkit.Reflection.ExprMemberAccessor : MemberAccessor {
    protected bool HasSetterValue;
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    protected ExprMemberAccessor(TypeAccessor typeAccessor, MemberInfo memberInfo);
    public virtual bool get_HasGetter();
    public virtual bool get_HasSetter();
    public static MemberAccessor GetMemberAccessor(TypeAccessor typeAccessor, string memberName);
}
internal class BLToolkit.Reflection.ExprTypeAccessor`2 : TypeAccessor {
    private static List`1<MemberInfo> _members;
    private static IObjectFactory _objectFactory;
    private static Func`1<T> _createInstance;
    private static Func`2<InitContext, T> _createInstanceInit;
    public Type Type { get; }
    public Type OriginalType { get; }
    private static ExprTypeAccessor`2();
    private static T ThrowException();
    public virtual object CreateInstance();
    public virtual object CreateInstance(InitContext context);
    public virtual Type get_Type();
    public virtual Type get_OriginalType();
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.AttributeExtension : object {
    private AttributeNameCollection _attributes;
    private static AttributeExtension _null;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueCollection <Values>k__BackingField;
    public string Name { get; public set; }
    public ValueCollection Values { get; private set; }
    public object Value { get; }
    public object Item { get; }
    public object Item { get; }
    public AttributeNameCollection Attributes { get; }
    public static AttributeExtension Null { get; }
    private AttributeExtension(ValueCollection values);
    private static AttributeExtension();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ValueCollection get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(ValueCollection value);
    public object get_Value();
    public object get_Item(string valueName);
    public object get_Item(string valueName, object defaultValue);
    public AttributeNameCollection get_Attributes();
    public static AttributeExtension get_Null();
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.AttributeExtensionCollection : List`1<AttributeExtension> {
    private static AttributeExtensionCollection _null;
    public AttributeExtension Item { get; }
    public object Value { get; }
    public static AttributeExtensionCollection Null { get; }
    private static AttributeExtensionCollection();
    public AttributeExtension get_Item(int index);
    public object get_Value();
    public void Add(AttributeExtension attributeExtension);
    public static AttributeExtensionCollection get_Null();
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.AttributeNameCollection : Dictionary`2<string, AttributeExtensionCollection> {
    private static AttributeNameCollection _null;
    public AttributeExtensionCollection Item { get; }
    public static AttributeNameCollection Null { get; }
    private static AttributeNameCollection();
    public AttributeExtensionCollection get_Item(string attributeName);
    public void Add(AttributeExtension attributeExtension);
    public void Add(string name, string value);
    public static AttributeNameCollection get_Null();
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.ExtensionList : Dictionary`2<string, TypeExtension> {
    public TypeExtension Item { get; }
    public TypeExtension Item { get; }
    public TypeExtension get_Item(string typeName);
    public TypeExtension get_Item(Type type);
    public void Add(TypeExtension typeInfo);
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.MemberExtension : object {
    private AttributeNameCollection _attributes;
    private static MemberExtension _null;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public AttributeExtensionCollection Item { get; }
    public AttributeNameCollection Attributes { get; }
    public static MemberExtension Null { get; }
    private MemberExtension(AttributeNameCollection attributes);
    private static MemberExtension();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public AttributeExtensionCollection get_Item(string attributeName);
    public AttributeNameCollection get_Attributes();
    public static MemberExtension get_Null();
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.MemberExtensionCollection : Dictionary`2<string, MemberExtension> {
    private static MemberExtensionCollection _null;
    public MemberExtension Item { get; }
    public static MemberExtensionCollection Null { get; }
    private static MemberExtensionCollection();
    public MemberExtension get_Item(string memberName);
    public void Add(MemberExtension memberInfo);
    public static MemberExtensionCollection get_Null();
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.TypeExtension : object {
    private MemberExtensionCollection _members;
    private AttributeNameCollection _attributes;
    private static TypeExtension _null;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Name { get; public set; }
    public MemberExtension Item { get; }
    public MemberExtensionCollection Members { get; }
    public AttributeNameCollection Attributes { get; }
    public static TypeExtension Null { get; }
    private TypeExtension(MemberExtensionCollection members, AttributeNameCollection attributes);
    private static TypeExtension();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public MemberExtension get_Item(string memberName);
    public MemberExtensionCollection get_Members();
    public AttributeNameCollection get_Attributes();
    public static TypeExtension get_Null();
    public static bool ToBoolean(object value, bool defaultValue);
    public static bool ToBoolean(object value);
    public static object ChangeType(object value, Type type);
    public static ExtensionList GetExtensions(string xmlFile);
    public static ExtensionList GetExtensions(string xmlFile, Assembly assembly);
    public static ExtensionList GetExtensions(Stream xmlDocStream);
    public static TypeExtension GetTypeExtension(Type type, ExtensionList typeExtensions);
    private static ExtensionList CreateTypeInfo(XDocument doc);
    private static TypeExtension ParseType(XElement typeNode);
    private static MemberExtension ParseMember(XElement memberNode);
    private static AttributeExtension ParseAttribute(XElement attributeNode);
    [CompilerGeneratedAttribute]
private static bool <CreateTypeInfo>b__0(XElement _);
}
[AttributeUsageAttribute("20")]
public class BLToolkit.Reflection.Extension.TypeExtensionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string FileName { get; public set; }
    public string TypeName { get; public set; }
    public TypeExtensionAttribute(string typeName);
    public TypeExtensionAttribute(string fileName, string typeName);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
}
public class BLToolkit.Reflection.Extension.TypeExtensionException : Exception {
    public TypeExtensionException(string message);
    public TypeExtensionException(string message, Exception innerException);
    public TypeExtensionException(Exception innerException);
    protected TypeExtensionException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public class BLToolkit.Reflection.Extension.ValueCollection : Dictionary`2<string, object> {
    private object _value;
    private static ValueCollection _null;
    public object Value { get; }
    public object Item { get; }
    public static ValueCollection Null { get; }
    private static ValueCollection();
    public object get_Value();
    public object get_Item(string name);
    public void Add(string name, string value);
    public static ValueCollection get_Null();
}
public class BLToolkit.Reflection.GenericBinder : Binder {
    private bool _genericMethodDefinition;
    private static GenericBinder _generic;
    private static GenericBinder _nonGeneric;
    public static GenericBinder Generic { get; }
    public static GenericBinder NonGeneric { get; }
    public GenericBinder(bool genericMethodDefinition);
    public virtual MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, Object[]& args, ParameterModifier[] modifiers, CultureInfo culture, String[] names, Object& state);
    public virtual FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
    public virtual MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] matchMethods, Type[] parameterTypes, ParameterModifier[] modifiers);
    public virtual PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
    public virtual object ChangeType(object value, Type type, CultureInfo culture);
    public virtual void ReorderArgumentArray(Object[]& args, object state);
    public static GenericBinder get_Generic();
    public static GenericBinder get_NonGeneric();
}
public class BLToolkit.Reflection.InitContext : object {
    private Dictionary`2<object, object> _items;
    [CompilerGeneratedAttribute]
private Object[] <MemberParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLazyInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SourceObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectMapper <ObjectMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingSchema <MappingSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private IMapDataSource <DataSource>k__BackingField;
    public Object[] MemberParameters { get; public set; }
    public Object[] Parameters { get; public set; }
    public bool IsInternal { get; public set; }
    public bool IsLazyInstance { get; public set; }
    public object Parent { get; public set; }
    public object SourceObject { get; public set; }
    public ObjectMapper ObjectMapper { get; public set; }
    public MappingSchema MappingSchema { get; public set; }
    public bool IsSource { get; public set; }
    public bool StopMapping { get; public set; }
    [CLSCompliantAttribute("False")]
public IMapDataSource DataSource { get; public set; }
    public Dictionary`2<object, object> Items { get; }
    public bool IsDestination { get; public set; }
    [CompilerGeneratedAttribute]
public Object[] get_MemberParameters();
    [CompilerGeneratedAttribute]
public void set_MemberParameters(Object[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Object[] value);
    [CompilerGeneratedAttribute]
public bool get_IsInternal();
    [CompilerGeneratedAttribute]
public void set_IsInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLazyInstance();
    [CompilerGeneratedAttribute]
public void set_IsLazyInstance(bool value);
    [CompilerGeneratedAttribute]
public object get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(object value);
    [CompilerGeneratedAttribute]
public object get_SourceObject();
    [CompilerGeneratedAttribute]
public void set_SourceObject(object value);
    [CompilerGeneratedAttribute]
public ObjectMapper get_ObjectMapper();
    [CompilerGeneratedAttribute]
public void set_ObjectMapper(ObjectMapper value);
    [CompilerGeneratedAttribute]
public MappingSchema get_MappingSchema();
    [CompilerGeneratedAttribute]
public void set_MappingSchema(MappingSchema value);
    [CompilerGeneratedAttribute]
public bool get_IsSource();
    [CompilerGeneratedAttribute]
public void set_IsSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_StopMapping();
    [CompilerGeneratedAttribute]
public void set_StopMapping(bool value);
    [CompilerGeneratedAttribute]
public IMapDataSource get_DataSource();
    [CompilerGeneratedAttribute]
public void set_DataSource(IMapDataSource value);
    [DebuggerStepThroughAttribute]
public Dictionary`2<object, object> get_Items();
    [DebuggerStepThroughAttribute]
public bool get_IsDestination();
    [DebuggerStepThroughAttribute]
public void set_IsDestination(bool value);
}
public interface BLToolkit.Reflection.IObjectFactory {
    public abstract virtual object CreateInstance(TypeAccessor typeAccessor, InitContext context);
}
public class BLToolkit.Reflection.IsNullHandler : MulticastDelegate {
    public IsNullHandler(object object, IntPtr method);
    public virtual bool Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public abstract class BLToolkit.Reflection.MemberAccessor : object {
    private PropertyDescriptor _propertyDescriptor;
    private Type _underlyingType;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeAccessor <TypeAccessor>k__BackingField;
    public MemberInfo MemberInfo { get; private set; }
    public TypeAccessor TypeAccessor { get; private set; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public bool HasGetter { get; }
    public bool HasSetter { get; }
    public Type Type { get; }
    public string Name { get; }
    public Type UnderlyingType { get; }
    protected MemberAccessor(TypeAccessor typeAccessor, MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    [CompilerGeneratedAttribute]
private void set_MemberInfo(MemberInfo value);
    [CompilerGeneratedAttribute]
public TypeAccessor get_TypeAccessor();
    [CompilerGeneratedAttribute]
private void set_TypeAccessor(TypeAccessor value);
    public PropertyDescriptor get_PropertyDescriptor();
    public virtual bool get_HasGetter();
    public virtual bool get_HasSetter();
    public Type get_Type();
    public string get_Name();
    public Type get_UnderlyingType();
    public bool IsDefined();
    [ObsoleteAttribute("Use generic version instead")]
public Attribute GetAttribute(Type attributeType);
    public T GetAttribute();
    [ObsoleteAttribute("Use generic version instead")]
public Object[] GetAttributes(Type attributeType);
    public T[] GetAttributes();
    public Object[] GetAttributes();
    public Object[] GetTypeAttributes(Type attributeType);
    public virtual bool IsNull(object o);
    public virtual object GetValue(object o);
    public virtual void SetValue(object o, object value);
    public virtual void CloneValue(object source, object dest);
    [CLSCompliantAttribute("False")]
public virtual sbyte GetSByte(object o);
    public virtual short GetInt16(object o);
    public virtual int GetInt32(object o);
    public virtual long GetInt64(object o);
    public virtual byte GetByte(object o);
    [CLSCompliantAttribute("False")]
public virtual ushort GetUInt16(object o);
    [CLSCompliantAttribute("False")]
public virtual UInt32 GetUInt32(object o);
    [CLSCompliantAttribute("False")]
public virtual ulong GetUInt64(object o);
    public virtual bool GetBoolean(object o);
    public virtual char GetChar(object o);
    public virtual float GetSingle(object o);
    public virtual double GetDouble(object o);
    public virtual decimal GetDecimal(object o);
    public virtual Guid GetGuid(object o);
    public virtual DateTime GetDateTime(object o);
    public virtual TimeSpan GetTimeSpan(object o);
    public virtual DateTimeOffset GetDateTimeOffset(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<sbyte> GetNullableSByte(object o);
    public virtual Nullable`1<short> GetNullableInt16(object o);
    public virtual Nullable`1<int> GetNullableInt32(object o);
    public virtual Nullable`1<long> GetNullableInt64(object o);
    public virtual Nullable`1<byte> GetNullableByte(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ushort> GetNullableUInt16(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<UInt32> GetNullableUInt32(object o);
    [CLSCompliantAttribute("False")]
public virtual Nullable`1<ulong> GetNullableUInt64(object o);
    public virtual Nullable`1<bool> GetNullableBoolean(object o);
    public virtual Nullable`1<char> GetNullableChar(object o);
    public virtual Nullable`1<float> GetNullableSingle(object o);
    public virtual Nullable`1<double> GetNullableDouble(object o);
    public virtual Nullable`1<decimal> GetNullableDecimal(object o);
    public virtual Nullable`1<Guid> GetNullableGuid(object o);
    public virtual Nullable`1<DateTime> GetNullableDateTime(object o);
    public virtual Nullable`1<TimeSpan> GetNullableTimeSpan(object o);
    public virtual Nullable`1<DateTimeOffset> GetNullableDateTimeOffset(object o);
    public virtual SqlByte GetSqlByte(object o);
    public virtual SqlInt16 GetSqlInt16(object o);
    public virtual SqlInt32 GetSqlInt32(object o);
    public virtual SqlInt64 GetSqlInt64(object o);
    public virtual SqlSingle GetSqlSingle(object o);
    public virtual SqlBoolean GetSqlBoolean(object o);
    public virtual SqlDouble GetSqlDouble(object o);
    public virtual SqlDateTime GetSqlDateTime(object o);
    public virtual SqlDecimal GetSqlDecimal(object o);
    public virtual SqlMoney GetSqlMoney(object o);
    public virtual SqlGuid GetSqlGuid(object o);
    public virtual SqlString GetSqlString(object o);
    [CLSCompliantAttribute("False")]
public virtual void SetSByte(object o, sbyte value);
    public virtual void SetInt16(object o, short value);
    public virtual void SetInt32(object o, int value);
    public virtual void SetInt64(object o, long value);
    public virtual void SetByte(object o, byte value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt16(object o, ushort value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt32(object o, UInt32 value);
    [CLSCompliantAttribute("False")]
public virtual void SetUInt64(object o, ulong value);
    public virtual void SetBoolean(object o, bool value);
    public virtual void SetChar(object o, char value);
    public virtual void SetSingle(object o, float value);
    public virtual void SetDouble(object o, double value);
    public virtual void SetDecimal(object o, decimal value);
    public virtual void SetGuid(object o, Guid value);
    public virtual void SetDateTime(object o, DateTime value);
    public virtual void SetTimeSpan(object o, TimeSpan value);
    public virtual void SetDateTimeOffset(object o, DateTimeOffset value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableSByte(object o, Nullable`1<sbyte> value);
    public virtual void SetNullableInt16(object o, Nullable`1<short> value);
    public virtual void SetNullableInt32(object o, Nullable`1<int> value);
    public virtual void SetNullableInt64(object o, Nullable`1<long> value);
    public virtual void SetNullableByte(object o, Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt16(object o, Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt32(object o, Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
public virtual void SetNullableUInt64(object o, Nullable`1<ulong> value);
    public virtual void SetNullableBoolean(object o, Nullable`1<bool> value);
    public virtual void SetNullableChar(object o, Nullable`1<char> value);
    public virtual void SetNullableSingle(object o, Nullable`1<float> value);
    public virtual void SetNullableDouble(object o, Nullable`1<double> value);
    public virtual void SetNullableDecimal(object o, Nullable`1<decimal> value);
    public virtual void SetNullableGuid(object o, Nullable`1<Guid> value);
    public virtual void SetNullableDateTime(object o, Nullable`1<DateTime> value);
    public virtual void SetNullableTimeSpan(object o, Nullable`1<TimeSpan> value);
    public virtual void SetNullableDateTimeOffset(object o, Nullable`1<DateTimeOffset> value);
    public virtual void SetSqlByte(object o, SqlByte value);
    public virtual void SetSqlInt16(object o, SqlInt16 value);
    public virtual void SetSqlInt32(object o, SqlInt32 value);
    public virtual void SetSqlInt64(object o, SqlInt64 value);
    public virtual void SetSqlSingle(object o, SqlSingle value);
    public virtual void SetSqlBoolean(object o, SqlBoolean value);
    public virtual void SetSqlDouble(object o, SqlDouble value);
    public virtual void SetSqlDateTime(object o, SqlDateTime value);
    public virtual void SetSqlDecimal(object o, SqlDecimal value);
    public virtual void SetSqlMoney(object o, SqlMoney value);
    public virtual void SetSqlGuid(object o, SqlGuid value);
    public virtual void SetSqlString(object o, SqlString value);
}
public class BLToolkit.Reflection.MetadataProvider.AttributeMetadataProvider : MetadataProviderBase {
    private static FieldAttributes EnumField;
    private TypeAccessor _typeAccessor;
    private Object[] _mapFieldAttributes;
    private Object[] _nonUpdatableAttributes;
    private object _sync;
    private void EnsureMapper(TypeAccessor typeAccessor);
    private Object[] GetMapFieldAttributes(TypeAccessor typeAccessor);
    private Object[] GetNonUpdatableAttributes(TypeAccessor typeAccessor);
    public virtual string GetFieldName(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetFieldStorage(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetInheritanceDiscriminator(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual void EnsureMapper(TypeAccessor typeAccessor, MappingSchema mappingSchema, EnsureMapperHandler handler);
    public virtual bool GetMapIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetTrimmable(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual MapValue[] GetMapValues(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    private static List`1<MapValue> GetEnumMapValues(Type type);
    public virtual MapValue[] GetMapValues(TypeExtension typeExtension, Type type, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExtension, Type type, Boolean& isSet);
    private static object GetEnumDefaultValueFromType(Type type);
    public virtual bool GetNullable(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    private static object CheckNullValue(object value, MemberAccessor member);
    public virtual object GetNullValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetDatabaseName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetOwnerName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetTableName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual int GetPrimaryKeyOrder(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual NonUpdatableAttribute GetNonUpdatableAttribute(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual bool GetSqlIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual List`1<MapRelationBase> GetRelations(MappingSchema schema, ExtensionList typeExt, Type master, Type slave, Boolean& isSet);
    public virtual Association GetAssociation(TypeExtension typeExtension, MemberAccessor member);
    public virtual InheritanceMappingAttribute[] GetInheritanceMapping(Type type, TypeExtension typeExtension);
}
public class BLToolkit.Reflection.MetadataProvider.CreateProvider : MulticastDelegate {
    public CreateProvider(object object, IntPtr method);
    public virtual MetadataProviderBase Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual MetadataProviderBase EndInvoke(IAsyncResult result);
}
public class BLToolkit.Reflection.MetadataProvider.EnsureMapperHandler : MulticastDelegate {
    public EnsureMapperHandler(object object, IntPtr method);
    public virtual MemberMapper Invoke(string mapName, string origName);
    public virtual IAsyncResult BeginInvoke(string mapName, string origName, AsyncCallback callback, object object);
    public virtual MemberMapper EndInvoke(IAsyncResult result);
}
public class BLToolkit.Reflection.MetadataProvider.ExtensionMetadataProvider : MetadataProviderBase {
    private static FieldAttributes EnumField;
    [CompilerGeneratedAttribute]
private static Func`2<AttributeExtension, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<AttributeExtension, object> CS$<>9__CachedAnonymousMethodDelegate3;
    private static object GetValue(TypeExtension typeExtension, MemberAccessor member, string elemName, Boolean& isSet);
    public virtual string GetFieldName(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetFieldStorage(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetInheritanceDiscriminator(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetMapIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetTrimmable(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual MapValue[] GetMapValues(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    private static List`1<MapValue> GetEnumMapValues(TypeExtension typeExt, Type type);
    private static List`1<MapValue> GetTypeMapValues(TypeExtension typeExt, Type type);
    public virtual MapValue[] GetMapValues(TypeExtension typeExt, Type type, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExt, Type type, Boolean& isSet);
    private static object GetEnumDefaultValueFromExtension(TypeExtension typeExt, Type type);
    public virtual bool GetNullable(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual object GetNullValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetDatabaseName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetOwnerName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetTableName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual int GetPrimaryKeyOrder(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual NonUpdatableAttribute GetNonUpdatableAttribute(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual bool GetSqlIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual List`1<MapRelationBase> GetRelations(MappingSchema schema, ExtensionList typeExt, Type master, Type slave, Boolean& isSet);
    public virtual Association GetAssociation(TypeExtension typeExtension, MemberAccessor member);
    public virtual InheritanceMappingAttribute[] GetInheritanceMapping(Type type, TypeExtension typeExtension);
    [CompilerGeneratedAttribute]
private static bool <GetEnumMapValues>b__0(AttributeExtension ae);
    [CompilerGeneratedAttribute]
private static object <GetEnumMapValues>b__1(AttributeExtension ae);
}
public class BLToolkit.Reflection.MetadataProvider.LinqMetadataProvider : MetadataProviderBase {
    private Type _type;
    private Nullable`1<bool> _isLinqObject;
    private object _sync;
    [CompilerGeneratedAttribute]
private static Func`2<object, InheritanceMappingAttribute> CS$<>9__CachedAnonymousMethodDelegate1;
    private void EnsureMapper(Type type);
    private bool IsLinqObject(Type type);
    public virtual string GetFieldName(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetFieldStorage(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetInheritanceDiscriminator(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetMapIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetNullable(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetTableName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual int GetPrimaryKeyOrder(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual NonUpdatableAttribute GetNonUpdatableAttribute(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual Association GetAssociation(TypeExtension typeExtension, MemberAccessor member);
    public virtual InheritanceMappingAttribute[] GetInheritanceMapping(Type type, TypeExtension typeExtension);
    [CompilerGeneratedAttribute]
private static InheritanceMappingAttribute <GetInheritanceMapping>b__0(object a);
}
public abstract class BLToolkit.Reflection.MetadataProvider.MetadataProviderBase : object {
    private static OnCreateProvider OnCreateProvider;
    private static CreateProvider _createProvider;
    public static CreateProvider CreateProvider { get; public set; }
    private static MetadataProviderBase();
    public virtual void AddProvider(MetadataProviderBase provider);
    public virtual void InsertProvider(int index, MetadataProviderBase provider);
    public virtual MetadataProviderBase[] GetProviders();
    public virtual string GetFieldName(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetFieldStorage(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetInheritanceDiscriminator(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual void EnsureMapper(TypeAccessor typeAccessor, MappingSchema mappingSchema, EnsureMapperHandler handler);
    public virtual bool GetMapIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetTrimmable(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual MapValue[] GetMapValues(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual MapValue[] GetMapValues(TypeExtension typeExtension, Type type, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExtension, Type type, Boolean& isSet);
    public virtual bool GetNullable(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual object GetNullValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetDatabaseName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetOwnerName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetTableName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual int GetPrimaryKeyOrder(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual NonUpdatableAttribute GetNonUpdatableAttribute(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual bool GetSqlIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual List`1<MapRelationBase> GetRelations(MappingSchema schema, ExtensionList typeExt, Type master, Type slave, Boolean& isSet);
    protected static List`1<string> GetPrimaryKeyFields(MappingSchema schema, TypeAccessor ta, TypeExtension tex);
    public virtual Association GetAssociation(TypeExtension typeExtension, MemberAccessor member);
    public virtual InheritanceMappingAttribute[] GetInheritanceMapping(Type type, TypeExtension typeExtension);
    public static void add_OnCreateProvider(OnCreateProvider value);
    public static void remove_OnCreateProvider(OnCreateProvider value);
    public static CreateProvider get_CreateProvider();
    public static void set_CreateProvider(CreateProvider value);
    private static MetadataProviderBase CreateInternal();
}
public class BLToolkit.Reflection.MetadataProvider.MetadataProviderList : MetadataProviderBase {
    private List`1<MetadataProviderBase> _list;
    public virtual void AddProvider(MetadataProviderBase provider);
    public virtual void InsertProvider(int index, MetadataProviderBase provider);
    public virtual MetadataProviderBase[] GetProviders();
    public virtual string GetFieldName(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetFieldStorage(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetInheritanceDiscriminator(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual void EnsureMapper(TypeAccessor typeAccessor, MappingSchema mappingSchema, EnsureMapperHandler handler);
    public virtual bool GetMapIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual bool GetTrimmable(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual MapValue[] GetMapValues(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual MapValue[] GetMapValues(TypeExtension typeExt, Type type, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual object GetDefaultValue(MappingSchema mappingSchema, TypeExtension typeExtension, Type type, Boolean& isSet);
    public virtual bool GetNullable(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual object GetNullValue(MappingSchema mappingSchema, TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual string GetDatabaseName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetOwnerName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual string GetTableName(Type type, ExtensionList extensions, Boolean& isSet);
    public virtual int GetPrimaryKeyOrder(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual NonUpdatableAttribute GetNonUpdatableAttribute(Type type, TypeExtension typeExt, MemberAccessor member, Boolean& isSet);
    public virtual bool GetSqlIgnore(TypeExtension typeExtension, MemberAccessor member, Boolean& isSet);
    public virtual List`1<MapRelationBase> GetRelations(MappingSchema schema, ExtensionList typeExt, Type master, Type slave, Boolean& isSet);
    public virtual Association GetAssociation(TypeExtension typeExtension, MemberAccessor member);
    public virtual InheritanceMappingAttribute[] GetInheritanceMapping(Type type, TypeExtension typeExtension);
}
public class BLToolkit.Reflection.MetadataProvider.OnCreateProvider : MulticastDelegate {
    public OnCreateProvider(object object, IntPtr method);
    public virtual void Invoke(MetadataProviderBase parentProvider);
    public virtual IAsyncResult BeginInvoke(MetadataProviderBase parentProvider, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class BLToolkit.Reflection.NullValueProvider : MulticastDelegate {
    public NullValueProvider(object object, IntPtr method);
    public virtual object Invoke(Type type);
    public virtual IAsyncResult BeginInvoke(Type type, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.Reflection.ObjectFactoryAttribute : Attribute {
    private IObjectFactory _objectFactory;
    public IObjectFactory ObjectFactory { get; }
    public ObjectFactoryAttribute(Type type);
    public IObjectFactory get_ObjectFactory();
}
[DebuggerDisplayAttribute("Type = {Type}, OriginalType = {OriginalType}")]
[DefaultMemberAttribute("Item")]
public abstract class BLToolkit.Reflection.TypeAccessor : object {
    private static FieldAttributes EnumField;
    private IObjectFactory _objectFactory;
    private List`1<MemberAccessor> _members;
    private Dictionary`2<string, MemberAccessor> _memberNames;
    private static Dictionary`2<Type, TypeAccessor> _accessors;
    private static GetAssociatedType AssociatedTypeHandler;
    private static NullValueProvider _getNullValue;
    private static Dictionary`2<Type, object> _nullValues;
    private static IsNullHandler _isNull;
    private static Hashtable _descriptors;
    private ICustomTypeDescriptor _customTypeDescriptor;
    private PropertyDescriptorCollection _propertyDescriptors;
    public IObjectFactory ObjectFactory { get; public set; }
    public Type Type { get; }
    public Type OriginalType { get; }
    public MemberAccessor Item { get; }
    public MemberAccessor Item { get; }
    public MemberAccessor Item { get; }
    [ObsoleteAttribute("Use TypeFactory.LoadTypes instead")]
public static bool LoadTypes { get; public set; }
    public static NullValueProvider GetNullValue { get; public set; }
    public static IsNullHandler IsNull { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<BLToolkit.Reflection.MemberAccessor>.IsReadOnly { get; }
    public ICustomTypeDescriptor CustomTypeDescriptor { get; }
    public PropertyDescriptorCollection PropertyDescriptors { get; }
    private string BLToolkit.ComponentModel.ITypeDescriptionProvider.ClassName { get; }
    private string BLToolkit.ComponentModel.ITypeDescriptionProvider.ComponentName { get; }
    private static TypeAccessor();
    protected MemberInfo GetMember(int memberType, string memberName);
    protected void AddMember(MemberAccessor member);
    [DebuggerStepThroughAttribute]
public virtual object CreateInstance();
    [DebuggerStepThroughAttribute]
public virtual object CreateInstance(InitContext context);
    [DebuggerStepThroughAttribute]
public object CreateInstanceEx();
    [DebuggerStepThroughAttribute]
public object CreateInstanceEx(InitContext context);
    public IObjectFactory get_ObjectFactory();
    public void set_ObjectFactory(IObjectFactory value);
    internal static object CopyInternal(object source, object dest, TypeAccessor ta);
    public static object Copy(object source, object dest);
    public static object Copy(object source);
    public static bool AreEqual(object obj1, object obj2);
    public static int GetHashCode(object obj);
    public abstract virtual Type get_Type();
    public abstract virtual Type get_OriginalType();
    public MemberAccessor get_Item(string memberName);
    public MemberAccessor get_Item(int index);
    public MemberAccessor get_Item(NameOrIndexParameter nameOrIndex);
    public static bool get_LoadTypes();
    public static void set_LoadTypes(bool value);
    public static TypeAccessor GetAccessor(Type originalType);
    public static TypeAccessor GetAccessor(object obj);
    public static TypeAccessor GetAccessor();
    private static bool IsClassBulderNeeded(Type type);
    internal static bool IsInstanceBuildable(Type type);
    private static bool IsAssociatedType(Type type);
    public static object CreateInstance(Type type);
    public static object CreateInstance(Type type, InitContext context);
    public static object CreateInstanceEx(Type type);
    public static object CreateInstanceEx(Type type, InitContext context);
    public static T CreateInstance();
    public static T CreateInstance(InitContext context);
    public static T CreateInstanceEx();
    public static T CreateInstanceEx(InitContext context);
    public static TypeAccessor AssociateType(Type parent, Type child);
    public static void add_AssociatedTypeHandler(GetAssociatedType value);
    public static void remove_AssociatedTypeHandler(GetAssociatedType value);
    public static NullValueProvider get_GetNullValue();
    public static void set_GetNullValue(NullValueProvider value);
    private static object GetNullInternal(Type type);
    private static object GetEnumNullValue(Type type);
    public static IsNullHandler get_IsNull();
    public static void set_IsNull(IsNullHandler value);
    private static bool IsNullInternal(object value);
    private sealed virtual override void System.Collections.Generic.ICollection<BLToolkit.Reflection.MemberAccessor>.Add(MemberAccessor item);
    private sealed virtual override void System.Collections.Generic.ICollection<BLToolkit.Reflection.MemberAccessor>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<BLToolkit.Reflection.MemberAccessor>.Contains(MemberAccessor item);
    private sealed virtual override void System.Collections.Generic.ICollection<BLToolkit.Reflection.MemberAccessor>.CopyTo(MemberAccessor[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<BLToolkit.Reflection.MemberAccessor>.Remove(MemberAccessor item);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<BLToolkit.Reflection.MemberAccessor>.get_IsReadOnly();
    public int IndexOf(MemberAccessor ma);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MemberAccessor> System.Collections.Generic.IEnumerable<BLToolkit.Reflection.MemberAccessor>.GetEnumerator();
    public static void WriteDebug(object o);
    private static void DebugWriteLine(string text);
    public static void WriteConsole(object o);
    private static string MapTypeName(Type type);
    public static void Write(object o, WriteLine writeLine);
    public static ICustomTypeDescriptor GetCustomTypeDescriptor(Type type);
    public ICustomTypeDescriptor get_CustomTypeDescriptor();
    public PropertyDescriptorCollection get_PropertyDescriptors();
    public PropertyDescriptorCollection CreatePropertyDescriptors();
    public PropertyDescriptorCollection CreateExtendedPropertyDescriptors(Type objectViewType, IsNullHandler isNull);
    private static PropertyDescriptorCollection GetExtendedProperties(PropertyDescriptorCollection pdc, Type itemType, string propertyPrefix, Type[] parentTypes, PropertyDescriptor[] parentAccessors, IsNullHandler isNull);
    private sealed virtual override string BLToolkit.ComponentModel.ITypeDescriptionProvider.get_ClassName();
    private sealed virtual override string BLToolkit.ComponentModel.ITypeDescriptionProvider.get_ComponentName();
    private sealed virtual override EventDescriptor BLToolkit.ComponentModel.ITypeDescriptionProvider.GetEvent(string name);
    private sealed virtual override PropertyDescriptor BLToolkit.ComponentModel.ITypeDescriptionProvider.GetProperty(string name);
    private sealed virtual override AttributeCollection BLToolkit.ComponentModel.ITypeDescriptionProvider.GetAttributes();
    private sealed virtual override EventDescriptorCollection BLToolkit.ComponentModel.ITypeDescriptionProvider.GetEvents();
    private sealed virtual override PropertyDescriptorCollection BLToolkit.ComponentModel.ITypeDescriptionProvider.GetProperties();
}
public static class BLToolkit.Reflection.TypeAccessor`1 : object {
    private static TypeAccessor _instance;
    public static IObjectFactory ObjectFactory { get; public set; }
    public static Type Type { get; }
    public static Type OriginalType { get; }
    public static TypeAccessor Instance { get; }
    private static TypeAccessor`1();
    [DebuggerStepThroughAttribute]
public static T CreateInstance();
    [DebuggerStepThroughAttribute]
public static T CreateInstance(InitContext context);
    [DebuggerStepThroughAttribute]
public static T CreateInstanceEx();
    [DebuggerStepThroughAttribute]
public static T CreateInstanceEx(InitContext context);
    public static T Copy(T source, T dest);
    public static T Copy(T source);
    public static bool AreEqual(T obj1, T obj2);
    public static IObjectFactory get_ObjectFactory();
    public static void set_ObjectFactory(IObjectFactory value);
    public static Type get_Type();
    public static Type get_OriginalType();
    [DebuggerStepThroughAttribute]
public static TypeAccessor get_Instance();
}
[DebuggerDisplayAttribute("Type = {Type}")]
public class BLToolkit.Reflection.TypeHelper : object {
    private Type _type;
    private static Dictionary`2<Type, Object[]> _typeAttributesTopInternal;
    private static Dictionary`2<Type, Object[]> _typeAttributesInternal;
    private static Dictionary`2<string, Object[]> _typeAttributes;
    public Type Type { get; }
    public string FullName { get; }
    public string Name { get; }
    public bool IsAbstract { get; }
    public bool IsArray { get; }
    public bool IsValueType { get; }
    public bool IsClass { get; }
    public bool IsInterface { get; }
    public bool IsSerializable { get; }
    public TypeHelper(Type type);
    private static TypeHelper();
    public Type get_Type();
    public static TypeHelper op_Implicit(Type type);
    public static Type op_Implicit(TypeHelper typeHelper);
    public Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public Object[] GetCustomAttributes(Type attributeType);
    public Object[] GetCustomAttributes(bool inherit);
    public Object[] GetCustomAttributes();
    public Object[] GetAttributes(Type attributeType);
    public Object[] GetAttributes();
    private Object[] GetAttributesInternal();
    private static void GetAttributesInternal(List`1<object> list, Type type);
    private static void GetAttributesTreeInternal(List`1<object> list, Type type);
    public static Object[] GetAttributes(Type type, Type attributeType);
    public static Attribute GetFirstAttribute(Type type, Type attributeType);
    public static T GetFirstAttribute(Type type);
    public string get_FullName();
    public string get_Name();
    public bool get_IsAbstract();
    public bool get_IsArray();
    public bool get_IsValueType();
    public bool get_IsClass();
    public bool get_IsInterface();
    public bool get_IsSerializable();
    public MethodInfo[] GetMethods();
    public MethodInfo[] GetPublicMethods();
    public MethodInfo[] GetMethods(BindingFlags flags);
    public MethodInfo[] GetMethods(bool generic);
    public MethodInfo[] GetPublicMethods(bool generic);
    public MethodInfo[] GetMethods(bool generic, BindingFlags flags);
    public MethodInfo GetMethod(string methodName);
    public MethodInfo GetPublicMethod(string methodName);
    public MethodInfo GetMethod(string methodName, BindingFlags flags);
    public MethodInfo GetPublicMethod(string methodName, Type[] types);
    public MethodInfo GetMethod(string methodName, Type[] types);
    public MethodInfo GetMethod(string methodName, BindingFlags flags, Type[] types);
    public MethodInfo GetMethod(bool generic, string methodName);
    public MethodInfo GetPublicMethod(bool generic, string methodName);
    public MethodInfo GetMethod(bool generic, string methodName, BindingFlags flags);
    public MethodInfo GetPublicMethod(bool generic, string methodName, Type[] types);
    public MethodInfo GetMethod(bool generic, string methodName, Type[] types);
    public MethodInfo GetMethod(bool generic, string methodName, BindingFlags flags, Type[] types);
    public FieldInfo[] GetFields();
    public FieldInfo[] GetFields(BindingFlags bindingFlags);
    public FieldInfo GetField(string name);
    public PropertyInfo[] GetProperties();
    public PropertyInfo[] GetProperties(BindingFlags bindingFlags);
    public PropertyInfo GetProperty(string name);
    public InterfaceMapping GetInterfaceMap(Type interfaceType);
    public ConstructorInfo GetPublicConstructor(Type[] types);
    public ConstructorInfo GetConstructor(Type parameterType);
    public static ConstructorInfo GetConstructor(Type type, Type[] types);
    public ConstructorInfo GetPublicDefaultConstructor();
    public ConstructorInfo GetDefaultConstructor();
    public static ConstructorInfo GetDefaultConstructor(Type type);
    public ConstructorInfo[] GetPublicConstructors();
    public ConstructorInfo[] GetConstructors();
    public static bool IsNullable(Type type);
    public static bool IsNullableType(Type type);
    public static Type GetUnderlyingType(Type type);
    public static bool IsSameOrParent(Type parent, Type child);
    public static Type GetGenericType(Type genericType, Type type);
    public static MethodInfo GetMethod(Type type, bool generic, string methodName, BindingFlags flags);
    public static MethodInfo[] GetMethods(Type type, bool generic, BindingFlags flags);
    public static MethodInfo GetMethod(Type type, string methodName, BindingFlags bindingFlags, int requiredParametersCount, Type[] parameterTypes);
    public static Object[] GetPropertyParameters(PropertyInfo propertyInfo);
    public static PropertyInfo GetPropertyInfo(Type type, string propertyName, Type returnType, Type[] types);
    public static Type GetListItemType(object list);
    public static Type GetListItemType(Type listType);
    public static Type GetElementType(Type type);
    public static bool IsScalar(Type type);
    public static Type[] GetGenericArguments(Type type, Type baseType);
    public static Type TranslateGenericParameters(Type type, Type[] typeArguments);
    public static bool CompareParameterTypes(Type goal, Type probe);
    public static bool CheckConstraints(Type goal, Type probe);
    public static bool CompareGenericTypes(Type goal, Type probe);
    public static PropertyInfo GetPropertyByMethod(MethodInfo method);
    public static Type GetMemberType(MemberInfo memberInfo);
    public static bool IsFloatType(Type type);
    public static bool IsIntegerType(Type type);
    public static bool IsNullableValueMember(MemberInfo member);
    public static bool Equals(MemberInfo member1, MemberInfo member2);
    public static object GetDefaultValue(Type type);
}
public class BLToolkit.Reflection.XmlIncludeAbstractAttribute : XmlIncludeAttribute {
    public XmlIncludeAbstractAttribute(Type type);
}
[ServiceContractAttribute]
public interface BLToolkit.ServiceModel.ILinqService {
    [OperationContractAttribute]
public abstract virtual string GetSqlProviderType();
    [OperationContractAttribute]
public abstract virtual int ExecuteNonQuery(LinqServiceQuery query);
    [OperationContractAttribute]
public abstract virtual object ExecuteScalar(LinqServiceQuery query);
    [OperationContractAttribute]
public abstract virtual LinqServiceResult ExecuteReader(LinqServiceQuery query);
}
[ServiceBehaviorAttribute]
public class BLToolkit.ServiceModel.LinqService : object {
    public static Func`2<string, Type> TypeResolver;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SqlProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, Type> CS$<>9__CachedAnonymousMethodDelegate5;
    public string Configuration { get; public set; }
    public Type SqlProviderType { get; public set; }
    public bool AllowUpdates { get; public set; }
    public LinqService(string configuration);
    private static LinqService();
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    public virtual IDataContext CreateDataContext();
    [CompilerGeneratedAttribute]
public Type get_SqlProviderType();
    [CompilerGeneratedAttribute]
public void set_SqlProviderType(Type value);
    public virtual string GetSqlProviderType();
    public sealed virtual int ExecuteNonQuery(LinqServiceQuery query);
    public sealed virtual object ExecuteScalar(LinqServiceQuery query);
    public sealed virtual LinqServiceResult ExecuteReader(LinqServiceQuery query);
    [CompilerGeneratedAttribute]
public bool get_AllowUpdates();
    [CompilerGeneratedAttribute]
public void set_AllowUpdates(bool value);
    protected virtual void ValidateQuery(LinqServiceQuery query);
    [CompilerGeneratedAttribute]
private static Type <.cctor>b__4(string _);
}
internal class BLToolkit.ServiceModel.LinqServiceClient : ClientBase`1<ILinqService> {
    public LinqServiceClient(string endpointConfigurationName);
    public LinqServiceClient(string endpointConfigurationName, string remoteAddress);
    public LinqServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress);
    public LinqServiceClient(Binding binding, EndpointAddress remoteAddress);
    public sealed virtual string GetSqlProviderType();
    public sealed virtual int ExecuteNonQuery(LinqServiceQuery query);
    public sealed virtual object ExecuteScalar(LinqServiceQuery query);
    public sealed virtual LinqServiceResult ExecuteReader(LinqServiceQuery query);
    private sealed virtual override void System.IDisposable.Dispose();
}
[DataContractAttribute]
public class BLToolkit.ServiceModel.LinqServiceQuery : object {
    private string _queryData;
    [CompilerGeneratedAttribute]
private SqlQuery <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlParameter[] <Parameters>k__BackingField;
    public SqlQuery Query { get; public set; }
    public SqlParameter[] Parameters { get; public set; }
    [DataMemberAttribute]
private string QueryData { get; private set; }
    [CompilerGeneratedAttribute]
public SqlQuery get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(SqlQuery value);
    [CompilerGeneratedAttribute]
public SqlParameter[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(SqlParameter[] value);
    private string get_QueryData();
    private void set_QueryData(string value);
    protected virtual string Serialize();
    protected virtual void Deserialize(string data);
}
[DataContractAttribute]
public class BLToolkit.ServiceModel.LinqServiceResult : object {
    private string _resultData;
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <QueryID>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FieldNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <FieldTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <VaryingTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<String[]> <Data>k__BackingField;
    public int FieldCount { get; public set; }
    public int RowCount { get; public set; }
    public Guid QueryID { get; public set; }
    public String[] FieldNames { get; public set; }
    public Type[] FieldTypes { get; public set; }
    public Type[] VaryingTypes { get; public set; }
    public List`1<String[]> Data { get; public set; }
    [DataMemberAttribute]
private string ResultData { get; private set; }
    [CompilerGeneratedAttribute]
public int get_FieldCount();
    [CompilerGeneratedAttribute]
public void set_FieldCount(int value);
    [CompilerGeneratedAttribute]
public int get_RowCount();
    [CompilerGeneratedAttribute]
public void set_RowCount(int value);
    [CompilerGeneratedAttribute]
public Guid get_QueryID();
    [CompilerGeneratedAttribute]
public void set_QueryID(Guid value);
    [CompilerGeneratedAttribute]
public String[] get_FieldNames();
    [CompilerGeneratedAttribute]
public void set_FieldNames(String[] value);
    [CompilerGeneratedAttribute]
public Type[] get_FieldTypes();
    [CompilerGeneratedAttribute]
public void set_FieldTypes(Type[] value);
    [CompilerGeneratedAttribute]
public Type[] get_VaryingTypes();
    [CompilerGeneratedAttribute]
public void set_VaryingTypes(Type[] value);
    [CompilerGeneratedAttribute]
public List`1<String[]> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(List`1<String[]> value);
    private string get_ResultData();
    private void set_ResultData(string value);
    protected virtual string Serialize();
    protected virtual void Deserialize(string data);
}
internal static class BLToolkit.ServiceModel.LinqServiceSerializer : object {
    private static int _paramIndex;
    private static int _typeIndex;
    private static int _typeArrayIndex;
    private static Dictionary`2<Type, Type> _arrayTypes;
    private static Dictionary`2<Type, Func`2<object, object>> _arrayConverters;
    private static LinqServiceSerializer();
    public static string Serialize(LinqServiceQuery query);
    public static void Deserialize(LinqServiceQuery query, string str);
    public static string Serialize(LinqServiceResult result);
    public static void Deserialize(LinqServiceResult result, string str);
    private static Type GetArrayType(Type elementType);
    private static object ConvertIEnumerableToArray(object list, Type elementType);
}
public class BLToolkit.ServiceModel.ServiceModelDataContext : object {
    private string _endpointConfigurationName;
    private string _remoteAddress;
    private EndpointAddress _endpointAddress;
    private string _contextID;
    private MappingSchema _mappingSchema;
    private Type _sqlProviderType;
    private static Dictionary`2<Type, Func`1<ISqlProvider>> _sqlProviders;
    private Func`1<ISqlProvider> _createSqlProvider;
    private EventHandler OnClosing;
    [CompilerGeneratedAttribute]
private Binding <Binding>k__BackingField;
    public Binding Binding { get; private set; }
    private string BLToolkit.Data.Linq.IDataContext.ContextID { get; }
    public MappingSchema MappingSchema { get; public set; }
    public Type SqlProviderType { get; public set; }
    private Func`1<ISqlProvider> BLToolkit.Data.Linq.IDataContext.CreateSqlProvider { get; }
    public ServiceModelDataContext(string endpointConfigurationName);
    public ServiceModelDataContext(string endpointConfigurationName, string remoteAddress);
    public ServiceModelDataContext(string endpointConfigurationName, EndpointAddress endpointAddress);
    public ServiceModelDataContext(Binding binding, EndpointAddress endpointAddress);
    private static ServiceModelDataContext();
    [CompilerGeneratedAttribute]
public Binding get_Binding();
    [CompilerGeneratedAttribute]
private void set_Binding(Binding value);
    private ILinqService GetClient();
    private sealed virtual override string BLToolkit.Data.Linq.IDataContext.get_ContextID();
    public sealed virtual MappingSchema get_MappingSchema();
    public void set_MappingSchema(MappingSchema value);
    public virtual Type get_SqlProviderType();
    public virtual void set_SqlProviderType(Type value);
    private sealed virtual override Func`1<ISqlProvider> BLToolkit.Data.Linq.IDataContext.get_CreateSqlProvider();
    private sealed virtual override object BLToolkit.Data.Linq.IDataContext.SetQuery(IQueryContext queryContext);
    private sealed virtual override int BLToolkit.Data.Linq.IDataContext.ExecuteNonQuery(object query);
    private sealed virtual override object BLToolkit.Data.Linq.IDataContext.ExecuteScalar(object query);
    private sealed virtual override IDataReader BLToolkit.Data.Linq.IDataContext.ExecuteReader(object query);
    public sealed virtual void ReleaseQuery(object query);
    private sealed virtual override string BLToolkit.Data.Linq.IDataContext.GetSqlText(object query);
    private sealed virtual override IDataContext BLToolkit.Data.Linq.IDataContext.Clone();
    public sealed virtual void add_OnClosing(EventHandler value);
    public sealed virtual void remove_OnClosing(EventHandler value);
    public sealed virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class BLToolkit.ServiceModel.ServiceModelDataReader : object {
    private LinqServiceResult _result;
    private Dictionary`2<string, int> _ordinal;
    private String[] _data;
    private int _current;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ServiceModelDataReader(LinqServiceResult result);
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual string GetString(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
}
[AttributeUsageAttribute("1024")]
public class BLToolkit.TypeBuilder.AutoImplementInterfaceAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
public class BLToolkit.TypeBuilder.BLToolkitGeneratedAttribute : Attribute {
}
internal class BLToolkit.TypeBuilder.Builders.AbstractClassBuilder : object {
    private Type _sourceType;
    private static DefaultTypeBuilder _defaultTypeBuilder;
    private BuildContext _context;
    private AbstractTypeBuilderList _builders;
    private static int _idCounter;
    [CompilerGeneratedAttribute]
private static Func`2<IAbstractTypeBuilder, IAbstractTypeBuilder> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IAbstractTypeBuilder, int> CS$<>9__CachedAnonymousMethodDelegate3;
    public string AssemblyNameSuffix { get; }
    public AbstractClassBuilder(Type sourceType);
    private static AbstractClassBuilder();
    public sealed virtual string get_AssemblyNameSuffix();
    public sealed virtual Type Build(AssemblyBuilderHelper assemblyBuilder);
    internal static string GetTypeFullName(Type type);
    internal static string GetTypeShortName(Type type);
    public sealed virtual string GetTypeName();
    public sealed virtual Type GetBuildingType();
    private static AbstractTypeBuilderList GetBuilderList(TypeHelper type);
    private Type Build();
    private static void SetID(AbstractTypeBuilderList builders);
    private static void CheckCompatibility(BuildContext context, AbstractTypeBuilderList builders);
    private void DefineNonAbstractType();
    private void Build(BuildStep step, AbstractTypeBuilderList builders);
    private void BeginEmitMethod(MethodInfo method);
    private void EmitMethod(AbstractTypeBuilderList builders, MethodInfo methdoInfo, BuildElement buildElement);
    private void EndEmitMethod();
    private static AbstractTypeBuilderList GetBuilders(Object[] attributes, object target);
    private static AbstractTypeBuilderList GetBuilders(MemberInfo memberInfo);
    private static AbstractTypeBuilderList GetBuilders(ParameterInfo parameterInfo);
    private static AbstractTypeBuilderList GetBuilders(ParameterInfo[] parameters);
    private static AbstractTypeBuilderList Combine(AbstractTypeBuilderList[] builders);
    private bool IsApplied(IAbstractTypeBuilder builder, AbstractTypeBuilderList builders, BuildStep buildStep);
    private bool IsApplied(BuildElement element, AbstractTypeBuilderList builders);
    private static void GetAbstractProperties(Type type, List`1<PropertyInfo> props);
    private void DefineAbstractProperties();
    private void DefineAbstractGetter(PropertyInfo propertyInfo, MethodInfo getter, AbstractTypeBuilderList propertyBuilders);
    private void DefineAbstractSetter(PropertyInfo propertyInfo, MethodInfo setter, AbstractTypeBuilderList propertyBuilders);
    private static void GetAbstractMethods(Type type, List`1<MethodInfo> methods);
    private void DefineAbstractMethods();
    private void OverrideVirtualProperties();
    private void OverrideGetter(MethodInfo getter, AbstractTypeBuilderList propertyBuilders);
    private void OverrideSetter(MethodInfo setter, AbstractTypeBuilderList propertyBuilders);
    private void OverrideVirtualMethods();
    private void DefineInterfaces();
    [CompilerGeneratedAttribute]
private static IAbstractTypeBuilder <Build>b__0(IAbstractTypeBuilder builder);
    [CompilerGeneratedAttribute]
private static int <Build>b__1(IAbstractTypeBuilder builder);
}
public abstract class BLToolkit.TypeBuilder.Builders.AbstractTypeBuilderAttribute : Attribute {
    public IAbstractTypeBuilder TypeBuilder { get; }
    public abstract virtual IAbstractTypeBuilder get_TypeBuilder();
}
public abstract class BLToolkit.TypeBuilder.Builders.AbstractTypeBuilderBase : object {
    private int _id;
    private object _targetElement;
    private BuildContext _context;
    public int ID { get; public set; }
    public object TargetElement { get; public set; }
    public BuildContext Context { get; public set; }
    protected bool IsObjectHolder { get; }
    public virtual Type[] GetInterfaces();
    public sealed virtual int get_ID();
    public sealed virtual void set_ID(int value);
    public sealed virtual object get_TargetElement();
    public sealed virtual void set_TargetElement(object value);
    [DebuggerStepThroughAttribute]
public BuildContext get_Context();
    [DebuggerStepThroughAttribute]
public void set_Context(BuildContext value);
    public virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    protected bool IsRelative(IAbstractTypeBuilder typeBuilder);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    public virtual int GetPriority(BuildContext context);
    public virtual void Build(BuildContext context);
    protected virtual void BeforeBuildType();
    protected virtual void BuildType();
    protected virtual void AfterBuildType();
    protected virtual void CatchBuildType();
    protected virtual void FinallyBuildType();
    protected virtual void BeforeBuildAbstractGetter();
    protected virtual void BuildAbstractGetter();
    protected virtual void AfterBuildAbstractGetter();
    protected virtual void CatchBuildAbstractGetter();
    protected virtual void FinallyBuildAbstractGetter();
    protected virtual void BeforeBuildAbstractSetter();
    protected virtual void BuildAbstractSetter();
    protected virtual void AfterBuildAbstractSetter();
    protected virtual void CatchBuildAbstractSetter();
    protected virtual void FinallyBuildAbstractSetter();
    protected virtual void BeforeBuildAbstractMethod();
    protected virtual void BuildAbstractMethod();
    protected virtual void AfterBuildAbstractMethod();
    protected virtual void CatchBuildAbstractMethod();
    protected virtual void FinallyBuildAbstractMethod();
    protected virtual void BeforeBuildVirtualGetter();
    protected virtual void BuildVirtualGetter();
    protected virtual void AfterBuildVirtualGetter();
    protected virtual void CatchBuildVirtualGetter();
    protected virtual void FinallyBuildVirtualGetter();
    protected virtual void BeforeBuildVirtualSetter();
    protected virtual void BuildVirtualSetter();
    protected virtual void AfterBuildVirtualSetter();
    protected virtual void CatchBuildVirtualSetter();
    protected virtual void FinallyBuildVirtualSetter();
    protected virtual void BeforeBuildVirtualMethod();
    protected virtual void BuildVirtualMethod();
    protected virtual void AfterBuildVirtualMethod();
    protected virtual void CatchBuildVirtualMethod();
    protected virtual void FinallyBuildVirtualMethod();
    protected virtual void BuildInterfaceMethod();
    protected virtual void BeginMethodBuild();
    protected virtual void EndMethodBuild();
    protected bool CallLazyInstanceInsurer(FieldBuilder field);
    protected virtual string GetFieldName(PropertyInfo propertyInfo);
    protected string GetFieldName();
    protected FieldBuilder GetPropertyInfoField(PropertyInfo property);
    protected FieldBuilder GetPropertyInfoField();
    protected FieldBuilder GetParameterField();
    protected FieldBuilder GetTypeAccessorField();
    protected FieldBuilder GetArrayInitializer(Type arrayType);
    protected FieldBuilder GetArrayInitializer();
    protected virtual Type GetFieldType();
    protected virtual Type GetObjectType();
    protected virtual bool get_IsObjectHolder();
}
public class BLToolkit.TypeBuilder.Builders.AbstractTypeBuilderList : List`1<IAbstractTypeBuilder> {
    public AbstractTypeBuilderList(int capacity);
}
[DebuggerStepThroughAttribute]
public class BLToolkit.TypeBuilder.Builders.BuildContext : object {
    private Dictionary`2<PropertyInfo, FieldBuilder> _fields;
    private IDictionary`2<TypeHelper, IAbstractTypeBuilder> _interfaceMap;
    [CompilerGeneratedAttribute]
private TypeHelper <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyBuilderHelper <AssemblyBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeBuilderHelper <TypeBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, object> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeHelper <CurrentInterface>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodBuilderHelper <MethodBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalBuilder <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalBuilder <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <ReturnLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildElement <BuildElement>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildStep <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private AbstractTypeBuilderList <TypeBuilders>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <CurrentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <CurrentMethod>k__BackingField;
    public TypeHelper Type { get; private set; }
    public AssemblyBuilderHelper AssemblyBuilder { get; public set; }
    public TypeBuilderHelper TypeBuilder { get; public set; }
    public Dictionary`2<object, object> Items { get; private set; }
    public Dictionary`2<PropertyInfo, FieldBuilder> Fields { get; }
    public IDictionary`2<TypeHelper, IAbstractTypeBuilder> InterfaceMap { get; }
    public TypeHelper CurrentInterface { get; public set; }
    public MethodBuilderHelper MethodBuilder { get; public set; }
    public LocalBuilder ReturnValue { get; public set; }
    public LocalBuilder Exception { get; public set; }
    public Label ReturnLabel { get; public set; }
    public BuildElement BuildElement { get; public set; }
    public bool IsAbstractGetter { get; }
    public bool IsAbstractSetter { get; }
    public bool IsAbstractProperty { get; }
    public bool IsAbstractMethod { get; }
    public bool IsVirtualGetter { get; }
    public bool IsVirtualSetter { get; }
    public bool IsVirtualProperty { get; }
    public bool IsVirtualMethod { get; }
    public bool IsGetter { get; }
    public bool IsSetter { get; }
    public bool IsProperty { get; }
    public bool IsMethod { get; }
    public bool IsMethodOrProperty { get; }
    public BuildStep Step { get; public set; }
    public bool IsBeginStep { get; }
    public bool IsBeforeStep { get; }
    public bool IsBuildStep { get; }
    public bool IsAfterStep { get; }
    public bool IsCatchStep { get; }
    public bool IsFinallyStep { get; }
    public bool IsEndStep { get; }
    public bool IsBeforeOrBuildStep { get; }
    public AbstractTypeBuilderList TypeBuilders { get; public set; }
    public PropertyInfo CurrentProperty { get; public set; }
    public MethodInfo CurrentMethod { get; public set; }
    public BuildContext(Type type);
    [CompilerGeneratedAttribute]
public TypeHelper get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(TypeHelper value);
    [CompilerGeneratedAttribute]
public AssemblyBuilderHelper get_AssemblyBuilder();
    [CompilerGeneratedAttribute]
public void set_AssemblyBuilder(AssemblyBuilderHelper value);
    [CompilerGeneratedAttribute]
public TypeBuilderHelper get_TypeBuilder();
    [CompilerGeneratedAttribute]
public void set_TypeBuilder(TypeBuilderHelper value);
    [CompilerGeneratedAttribute]
public Dictionary`2<object, object> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(Dictionary`2<object, object> value);
    public T GetItem(string key);
    public Dictionary`2<PropertyInfo, FieldBuilder> get_Fields();
    public IDictionary`2<TypeHelper, IAbstractTypeBuilder> get_InterfaceMap();
    [CompilerGeneratedAttribute]
public TypeHelper get_CurrentInterface();
    [CompilerGeneratedAttribute]
public void set_CurrentInterface(TypeHelper value);
    [CompilerGeneratedAttribute]
public MethodBuilderHelper get_MethodBuilder();
    [CompilerGeneratedAttribute]
public void set_MethodBuilder(MethodBuilderHelper value);
    [CompilerGeneratedAttribute]
public LocalBuilder get_ReturnValue();
    [CompilerGeneratedAttribute]
public void set_ReturnValue(LocalBuilder value);
    [CompilerGeneratedAttribute]
public LocalBuilder get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(LocalBuilder value);
    [CompilerGeneratedAttribute]
public Label get_ReturnLabel();
    [CompilerGeneratedAttribute]
public void set_ReturnLabel(Label value);
    [CompilerGeneratedAttribute]
public BuildElement get_BuildElement();
    [CompilerGeneratedAttribute]
public void set_BuildElement(BuildElement value);
    public bool get_IsAbstractGetter();
    public bool get_IsAbstractSetter();
    public bool get_IsAbstractProperty();
    public bool get_IsAbstractMethod();
    public bool get_IsVirtualGetter();
    public bool get_IsVirtualSetter();
    public bool get_IsVirtualProperty();
    public bool get_IsVirtualMethod();
    public bool get_IsGetter();
    public bool get_IsSetter();
    public bool get_IsProperty();
    public bool get_IsMethod();
    public bool get_IsMethodOrProperty();
    [CompilerGeneratedAttribute]
public BuildStep get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(BuildStep value);
    public bool get_IsBeginStep();
    public bool get_IsBeforeStep();
    public bool get_IsBuildStep();
    public bool get_IsAfterStep();
    public bool get_IsCatchStep();
    public bool get_IsFinallyStep();
    public bool get_IsEndStep();
    public bool get_IsBeforeOrBuildStep();
    [CompilerGeneratedAttribute]
public AbstractTypeBuilderList get_TypeBuilders();
    [CompilerGeneratedAttribute]
public void set_TypeBuilders(AbstractTypeBuilderList value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_CurrentProperty();
    [CompilerGeneratedAttribute]
public void set_CurrentProperty(PropertyInfo value);
    [CompilerGeneratedAttribute]
public MethodInfo get_CurrentMethod();
    [CompilerGeneratedAttribute]
public void set_CurrentMethod(MethodInfo value);
    public FieldBuilder GetField(string fieldName);
    public FieldBuilder CreateField(string fieldName, Type type, FieldAttributes attributes);
    public FieldBuilder CreatePrivateField(string fieldName, Type type);
    public FieldBuilder CreatePrivateField(PropertyInfo propertyInfo, string fieldName, Type type);
    public FieldBuilder CreatePrivateStaticField(string fieldName, Type type);
    public MethodBuilderHelper GetFieldInstanceEnsurer(string fieldName);
}
public enum BLToolkit.TypeBuilder.Builders.BuildElement : Enum {
    public int value__;
    public static BuildElement Type;
    public static BuildElement AbstractGetter;
    public static BuildElement AbstractSetter;
    public static BuildElement AbstractMethod;
    public static BuildElement VirtualGetter;
    public static BuildElement VirtualSetter;
    public static BuildElement VirtualMethod;
    public static BuildElement InterfaceMethod;
}
public enum BLToolkit.TypeBuilder.Builders.BuildStep : Enum {
    public int value__;
    public static BuildStep Begin;
    public static BuildStep Before;
    public static BuildStep Build;
    public static BuildStep After;
    public static BuildStep Catch;
    public static BuildStep Finally;
    public static BuildStep End;
}
public class BLToolkit.TypeBuilder.Builders.DefaultTypeBuilder : AbstractTypeBuilderBase {
    private static TypeHelper _initContextType;
    [CompilerGeneratedAttribute]
private static Predicate`1<TypeHelper> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Predicate`1<TypeHelper> CS$<>9__CachedAnonymousMethodDelegate7;
    protected static TypeHelper InitContextType { get; }
    public virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    protected virtual void BuildAbstractGetter();
    protected virtual void BuildAbstractSetter();
    protected virtual void BuildVirtualGetter();
    protected virtual void BuildVirtualSetter();
    protected virtual void BuildVirtualMethod();
    private void CallBaseMethod();
    protected static TypeHelper get_InitContextType();
    protected virtual void BeforeBuildAbstractGetter();
    protected virtual void BeforeBuildAbstractSetter();
    protected FieldBuilder GetField();
    private void BuildHolderInstance(EmitHelper emit);
    private void CreateDefaultInstance(FieldBuilder field, TypeHelper fieldType, TypeHelper objectType, EmitHelper emit);
    private void CreateParametrizedInstance(FieldBuilder field, TypeHelper fieldType, TypeHelper objectType, EmitHelper emit, Object[] parameters);
    private Stack`1<ConstructorInfo> GetGenericNestedConstructors(TypeHelper objectType, Predicate`1<TypeHelper> isActionable, Action`1<TypeHelper> action, Func`1<bool> isBreakCondition);
    private void BuildInitContextInstance();
    private void CreateAbstractInitContextInstance(FieldBuilder field, TypeHelper fieldType, TypeHelper objectType, EmitHelper emit, Object[] parameters);
    private void BuildDefaultInstance();
    private bool CheckObjectHolderCtor(TypeHelper fieldType, TypeHelper objectType);
    private void CreateInitContextDefaultInstance(string initContextName, FieldBuilder field, TypeHelper fieldType, TypeHelper objectType, EmitHelper emit, Object[] parameters);
    private LocalBuilder GetInitContextBuilder(string initContextName, EmitHelper emit);
    private bool IsLazyInstance(Type type);
    private void BuildLazyInstanceEnsurer();
    private void CreateInitContextLazyInstance(FieldBuilder field, TypeHelper fieldType, TypeHelper objectType, EmitHelper emit, Object[] parameters);
    protected virtual void AfterBuildType();
    private void FinalizeDefaultConstructors();
    private void FinalizeInitContextConstructors();
    [CompilerGeneratedAttribute]
private static bool <CreateParametrizedInstance>b__0(TypeHelper typeHelper);
    [CompilerGeneratedAttribute]
private static bool <CreateParametrizedInstance>b__3(TypeHelper typeHelper);
}
internal class BLToolkit.TypeBuilder.Builders.DuckTypeBuilder : object {
    private Type _interfaceType;
    private Type[] _objectTypes;
    private TypeBuilderHelper _typeBuilder;
    private MustImplementAttribute _defaultAttribute;
    public string AssemblyNameSuffix { get; }
    public DuckTypeBuilder(MustImplementAttribute defaultAttribute, Type interfaceType, Type[] objectTypes);
    public sealed virtual string get_AssemblyNameSuffix();
    public sealed virtual Type Build(AssemblyBuilderHelper assemblyBuilder);
    public sealed virtual string GetTypeName();
    public sealed virtual Type GetBuildingType();
    private static bool CompareMethodSignature(MethodInfo m1, MethodInfo m2);
    private bool BuildMembers(Type interfaceType);
}
internal class BLToolkit.TypeBuilder.Builders.FakeGetter : FakeMethodInfo {
    public string Name { get; }
    public Type ReturnType { get; }
    public FakeGetter(PropertyInfo propertyInfo);
    public virtual ParameterInfo[] GetParameters();
    public virtual string get_Name();
    public virtual Type get_ReturnType();
}
internal abstract class BLToolkit.TypeBuilder.Builders.FakeMethodInfo : MethodInfo {
    protected MethodInfo _pair;
    protected PropertyInfo _property;
    private static CustomAttributeProvider _customAttributeProvider;
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    public Type DeclaringType { get; }
    public MemberTypes MemberType { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Type ReflectedType { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public ParameterInfo ReturnParameter { get; }
    protected FakeMethodInfo(PropertyInfo propertyInfo, MethodInfo pair);
    private static FakeMethodInfo();
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    public virtual Type get_DeclaringType();
    public virtual MethodInfo GetBaseDefinition();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual MemberTypes get_MemberType();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Type get_ReflectedType();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public virtual ParameterInfo get_ReturnParameter();
}
internal class BLToolkit.TypeBuilder.Builders.FakeParameterInfo : ParameterInfo {
    private Object[] _attributes;
    private MemberInfo _memberInfo;
    private string _name;
    private Type _type;
    public ParameterAttributes Attributes { get; }
    public object DefaultValue { get; }
    public MemberInfo Member { get; }
    public string Name { get; }
    public Type ParameterType { get; }
    public int Position { get; }
    public FakeParameterInfo(string name, Type type, MemberInfo memberInfo, Object[] attributes);
    public FakeParameterInfo(MethodInfo method);
    public virtual ParameterAttributes get_Attributes();
    public virtual object get_DefaultValue();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual MemberInfo get_Member();
    public virtual string get_Name();
    public virtual Type get_ParameterType();
    public virtual int get_Position();
}
internal class BLToolkit.TypeBuilder.Builders.FakeSetter : FakeMethodInfo {
    public string Name { get; }
    public Type ReturnType { get; }
    public FakeSetter(PropertyInfo propertyInfo);
    public virtual ParameterInfo[] GetParameters();
    public virtual string get_Name();
    public virtual Type get_ReturnType();
}
internal class BLToolkit.TypeBuilder.Builders.GeneratedAttributeBuilder : AbstractTypeBuilderBase {
    private CustomAttributeBuilder _attributeBuilder;
    public GeneratedAttributeBuilder(Type attributeType, Object[] arguments, String[] names, Object[] values);
    private static bool CheckParameters(ParameterInfo[] argumentTypes, Object[] arguments);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    public virtual void Build(BuildContext context);
}
public interface BLToolkit.TypeBuilder.Builders.IAbstractTypeBuilder {
    public int ID { get; public set; }
    public object TargetElement { get; public set; }
    public abstract virtual int get_ID();
    public abstract virtual void set_ID(int value);
    public abstract virtual object get_TargetElement();
    public abstract virtual void set_TargetElement(object value);
    public abstract virtual Type[] GetInterfaces();
    public abstract virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    public abstract virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    public abstract virtual int GetPriority(BuildContext context);
    public abstract virtual void Build(BuildContext context);
}
internal class BLToolkit.TypeBuilder.Builders.ImplementInterfaceBuilder : AbstractTypeBuilderBase {
    private Type _type;
    public ImplementInterfaceBuilder(Type type);
    public virtual Type[] GetInterfaces();
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    protected virtual void BuildInterfaceMethod();
}
internal class BLToolkit.TypeBuilder.Builders.InstanceTypeBuilder : DefaultTypeBuilder {
    private bool _isObjectHolder;
    private Type _propertyType;
    private Type _instanceType;
    public Type PropertyType { get; }
    public Type InstanceType { get; }
    protected bool IsObjectHolder { get; }
    public InstanceTypeBuilder(Type instanceType, bool isObjectHolder);
    public InstanceTypeBuilder(Type propertyType, Type instanceType, bool isObjectHolder);
    public Type get_PropertyType();
    public Type get_InstanceType();
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    protected virtual Type GetFieldType();
    protected virtual Type GetObjectType();
    protected virtual bool get_IsObjectHolder();
    protected virtual void BuildAbstractGetter();
    protected virtual void BuildAbstractSetter();
    private MemberInfo GetGetter();
    private MemberInfo GetSetter();
}
public interface BLToolkit.TypeBuilder.Builders.ITypeBuilder {
    public string AssemblyNameSuffix { get; }
    public abstract virtual string get_AssemblyNameSuffix();
    public abstract virtual Type Build(AssemblyBuilderHelper assemblyBuilder);
    public abstract virtual string GetTypeName();
    public abstract virtual Type GetBuildingType();
}
public class BLToolkit.TypeBuilder.Builders.PropertyChangedBuilder : AbstractTypeBuilderBase {
    private bool _notifyOnEqualSet;
    private bool _useReferenceEquals;
    private bool _skipSetterOnNoChange;
    private LocalBuilder _isSameValueBuilder;
    private Label _afterNotificationLabel;
    public PropertyChangedBuilder(bool notifyOnEqualSet, bool useReferenceEquals, bool skipSetterOnNoChange);
    public virtual bool IsApplied(BuildContext context, AbstractTypeBuilderList builders);
    protected virtual void BeforeBuildAbstractSetter();
    protected virtual void BeforeBuildVirtualSetter();
    protected virtual void AfterBuildAbstractSetter();
    protected virtual void AfterBuildVirtualSetter();
    public virtual bool IsCompatible(BuildContext context, IAbstractTypeBuilder typeBuilder);
    public virtual int GetPriority(BuildContext context);
    private void GenerateIsSameValueComparison();
    private void BuildSetter();
}
internal class BLToolkit.TypeBuilder.Builders.TypeAccessorBuilder : object {
    private TypeHelper _type;
    private TypeHelper _originalType;
    private TypeHelper _accessorType;
    private TypeHelper _memberAccessor;
    private List`1<TypeBuilderHelper> _nestedTypes;
    private TypeBuilderHelper _typeBuilder;
    private bool _friendlyAssembly;
    public string AssemblyNameSuffix { get; }
    public TypeAccessorBuilder(Type type, Type originalType);
    public sealed virtual string get_AssemblyNameSuffix();
    public sealed virtual string GetTypeName();
    public sealed virtual Type GetBuildingType();
    public sealed virtual Type Build(AssemblyBuilderHelper assemblyBuilder);
    private void BuildCreateInstanceMethods();
    private void BuildTypeProperties();
    private void BuildMembers();
    private static void AddMemberToDictionary(IDictionary`2<string, MemberInfo> members, MemberInfo mi);
    private void BuildMember(MemberInfo mi);
    private void BuildInitMember(MemberInfo mi, ConstructorBuilderHelper ctorBuilder);
    private bool IsMethodAccessible(MethodInfo method);
    private void BuildGetter(MemberInfo mi, TypeBuilderHelper nestedType);
    private void BuildSetter(MemberInfo mi, TypeBuilderHelper nestedType);
    private void BuildIsNull(MemberInfo mi, TypeBuilderHelper nestedType, Type memberType);
    private void BuildTypedGetter(MemberInfo mi, TypeBuilderHelper nestedType, string typedPropertyName);
    private void BuildTypedSetter(MemberInfo mi, TypeBuilderHelper nestedType, Type memberType, string typedPropertyName);
    private void BuildCloneValueMethod(MemberInfo mi, TypeBuilderHelper nestedType, Type memberType);
    private void BuildTypedGetterForNullable(MemberInfo mi, TypeBuilderHelper nestedType, Type memberType);
    private void BuildTypedSetterForNullable(MemberInfo mi, TypeBuilderHelper nestedType, Type memberType);
    private static ConstructorBuilderHelper BuildNestedTypeConstructor(TypeBuilderHelper nestedType);
    private void BuildObjectFactory();
}
public static class BLToolkit.TypeBuilder.Builders.TypeBuilderConsts : object {
    public static string AssemblyNameSuffix;
}
[AttributeUsageAttribute("128")]
public class BLToolkit.TypeBuilder.DefaultInstanceTypeAttribute : AbstractTypeBuilderAttribute {
    public IAbstractTypeBuilder TypeBuilder { get; }
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("1260")]
[DefaultMemberAttribute("Item")]
public class BLToolkit.TypeBuilder.GenerateAttributeAttribute : AbstractTypeBuilderAttribute {
    private Type _attributeType;
    private Object[] _arguments;
    private String[] _namedArgumentNames;
    private Object[] _namedArgumentValues;
    public Type AttributeType { get; }
    public Object[] Arguments { get; }
    public String[] NamedArgumentNames { get; public set; }
    public Object[] NamedArgumentValues { get; public set; }
    public object Item { get; public set; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public GenerateAttributeAttribute(Type attributeType);
    public GenerateAttributeAttribute(Type attributeType, Object[] arguments);
    public Type get_AttributeType();
    public Object[] get_Arguments();
    public String[] get_NamedArgumentNames();
    public void set_NamedArgumentNames(String[] value);
    public Object[] get_NamedArgumentValues();
    public void set_NamedArgumentValues(Object[] value);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public T GetValue(string name);
    public T GetValue(string name, T defaultValue);
    public void SetValue(string name, T value);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("448")]
public class BLToolkit.TypeBuilder.GetValueAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.TypeBuilder.GlobalInstanceTypeAttribute : InstanceTypeAttribute {
    private Type _propertyType;
    private IAbstractTypeBuilder _typeBuilder;
    public Type PropertyType { get; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public GlobalInstanceTypeAttribute(Type propertyType, Type instanceType);
    public GlobalInstanceTypeAttribute(Type propertyType, Type instanceType, object parameter1);
    public GlobalInstanceTypeAttribute(Type propertyType, Type instanceType, object parameter1, object parameter2);
    public GlobalInstanceTypeAttribute(Type propertyType, Type instanceType, object parameter1, object parameter2, object parameter3);
    public GlobalInstanceTypeAttribute(Type propertyType, Type instanceType, object parameter1, object parameter2, object parameter3, object parameter4);
    public GlobalInstanceTypeAttribute(Type propertyType, Type instanceType, object parameter1, object parameter2, object parameter3, object parameter4, object parameter5);
    public Type get_PropertyType();
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.TypeBuilder.ImplementInterfaceAttribute : AbstractTypeBuilderAttribute {
    private Type _type;
    public Type Type { get; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public ImplementInterfaceAttribute(Type type);
    public Type get_Type();
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("128")]
public class BLToolkit.TypeBuilder.InstanceTypeAttribute : AbstractTypeBuilderAttribute {
    private Object[] _parameters;
    private Type _instanceType;
    private bool _isObjectHolder;
    private IAbstractTypeBuilder _typeBuilder;
    public Object[] Parameters { get; }
    protected Type InstanceType { get; }
    public bool IsObjectHolder { get; public set; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public InstanceTypeAttribute(Type instanceType);
    public InstanceTypeAttribute(Type instanceType, object parameter1);
    public InstanceTypeAttribute(Type instanceType, object parameter1, object parameter2);
    public InstanceTypeAttribute(Type instanceType, object parameter1, object parameter2, object parameter3);
    public InstanceTypeAttribute(Type instanceType, object parameter1, object parameter2, object parameter3, object parameter4);
    public InstanceTypeAttribute(Type instanceType, object parameter1, object parameter2, object parameter3, object parameter4, object parameter5);
    public InstanceTypeAttribute(Type instanceType, object parameter1, Object[] parameters);
    protected void SetParameters(Object[] parameters);
    public Object[] get_Parameters();
    protected Type get_InstanceType();
    public bool get_IsObjectHolder();
    public void set_IsObjectHolder(bool value);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[PropertyChangedAttribute]
public interface BLToolkit.TypeBuilder.IPropertyChanged {
    public abstract virtual void OnPropertyChanged(PropertyInfo propertyInfo);
}
public interface BLToolkit.TypeBuilder.ISetParent {
    public abstract virtual void SetParent(object parent, PropertyInfo propertyInfo);
}
[AttributeUsageAttribute("128")]
public class BLToolkit.TypeBuilder.LazyInstanceAttribute : Attribute {
    private bool _isLazy;
    public bool IsLazy { get; public set; }
    public LazyInstanceAttribute(bool isLazy);
    public bool get_IsLazy();
    public void set_IsLazy(bool value);
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.TypeBuilder.LazyInstancesAttribute : Attribute {
    private bool _isLazy;
    private Type _type;
    public bool IsLazy { get; public set; }
    public Type Type { get; public set; }
    public LazyInstancesAttribute(Type type);
    public LazyInstancesAttribute(bool isLazy);
    public LazyInstancesAttribute(Type type, bool isLazy);
    public bool get_IsLazy();
    public void set_IsLazy(bool value);
    public Type get_Type();
    public void set_Type(Type value);
}
[AttributeUsageAttribute("128")]
public class BLToolkit.TypeBuilder.NoInstanceAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class BLToolkit.TypeBuilder.ParameterAttribute : Attribute {
    private Object[] _parameters;
    public Object[] Parameters { get; }
    public ParameterAttribute(object parameter1);
    public ParameterAttribute(object parameter1, object parameter2);
    public ParameterAttribute(object parameter1, object parameter2, object parameter3);
    public ParameterAttribute(object parameter1, object parameter2, object parameter3, object parameter4);
    public ParameterAttribute(object parameter1, object parameter2, object parameter3, object parameter4, object parameter5);
    protected void SetParameters(Object[] parameters);
    public Object[] get_Parameters();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.TypeBuilder.ParentAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
public class BLToolkit.TypeBuilder.PropertyChangedAttribute : AbstractTypeBuilderAttribute {
    private bool _notifyOnEqualSet;
    private bool _useReferenceEquals;
    private bool _skipSetterOnNoChange;
    public bool NotifyOnEqualSet { get; public set; }
    public bool UseReferenceEquals { get; public set; }
    public bool SkipSetterOnNoChange { get; public set; }
    public IAbstractTypeBuilder TypeBuilder { get; }
    public PropertyChangedAttribute(bool notifyOnEqualSet);
    public PropertyChangedAttribute(bool notifyOnEqualSet, bool useReferenceEquals);
    public PropertyChangedAttribute(bool notifyOnEqualSet, bool useReferenceEquals, bool skipSetterOnNoChange);
    public bool get_NotifyOnEqualSet();
    public void set_NotifyOnEqualSet(bool value);
    public bool get_UseReferenceEquals();
    public void set_UseReferenceEquals(bool value);
    public bool get_SkipSetterOnNoChange();
    public void set_SkipSetterOnNoChange(bool value);
    public virtual IAbstractTypeBuilder get_TypeBuilder();
}
[AttributeUsageAttribute("2048")]
public class BLToolkit.TypeBuilder.PropertyInfoAttribute : Attribute {
}
[AttributeUsageAttribute("8192")]
public class BLToolkit.TypeBuilder.ReturnIfFalseAttribute : ReturnIfZeroAttribute {
}
[AttributeUsageAttribute("8192")]
public class BLToolkit.TypeBuilder.ReturnIfNonZeroAttribute : Attribute {
}
[AttributeUsageAttribute("8192")]
public class BLToolkit.TypeBuilder.ReturnIfNotNullAttribute : ReturnIfNonZeroAttribute {
}
[AttributeUsageAttribute("8192")]
public class BLToolkit.TypeBuilder.ReturnIfNullAttribute : ReturnIfZeroAttribute {
}
[AttributeUsageAttribute("8192")]
public class BLToolkit.TypeBuilder.ReturnIfTrueAttribute : ReturnIfNonZeroAttribute {
}
[AttributeUsageAttribute("8192")]
public class BLToolkit.TypeBuilder.ReturnIfZeroAttribute : Attribute {
}
[AttributeUsageAttribute("448")]
public class BLToolkit.TypeBuilder.SetValueAttribute : Attribute {
}
public class BLToolkit.TypeBuilder.TypeBuilderException : Exception {
    public TypeBuilderException(string message);
    public TypeBuilderException(string message, Exception innerException);
    public TypeBuilderException(Exception innerException);
    protected TypeBuilderException(SerializationInfo info, StreamingContext context);
}
public static class BLToolkit.TypeBuilder.TypeFactory : object {
    private static string _globalAssemblyPath;
    private static string _globalAssemblyKeyFile;
    private static Version _globalAssemblyVersion;
    private static AssemblyBuilderHelper _globalAssembly;
    private static Dictionary`2<Type, IDictionary`2<object, Type>> _builtTypes;
    private static Dictionary`2<Assembly, Assembly> _assemblies;
    [CompilerGeneratedAttribute]
private static bool <SaveTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <SealTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <LoadTypes>k__BackingField;
    private static AssemblyBuilderHelper GlobalAssemblyBuilder { get; }
    public static bool SaveTypes { get; public set; }
    public static bool SealTypes { get; public set; }
    public static bool LoadTypes { get; public set; }
    private static TypeFactory();
    private static void SubscribeAssemblyResolver();
    private static AssemblyBuilderHelper get_GlobalAssemblyBuilder();
    [CompilerGeneratedAttribute]
public static bool get_SaveTypes();
    [CompilerGeneratedAttribute]
public static void set_SaveTypes(bool value);
    [CompilerGeneratedAttribute]
public static bool get_SealTypes();
    [CompilerGeneratedAttribute]
public static void set_SealTypes(bool value);
    public static void SetGlobalAssembly(string path);
    public static void SetGlobalAssembly(string path, Version version, string keyFile);
    public static void SaveGlobalAssembly();
    private static AssemblyBuilderHelper GetAssemblyBuilder(Type type, string suffix);
    private static void SaveAssembly(AssemblyBuilderHelper assemblyBuilder, Type type);
    [CompilerGeneratedAttribute]
public static bool get_LoadTypes();
    [CompilerGeneratedAttribute]
public static void set_LoadTypes(bool value);
    public static Type GetType(object hashKey, Type sourceType, ITypeBuilder typeBuilder);
    public static Type GetType(Type sourceType);
    public static T CreateInstance();
    private static Assembly LoadExtensionAssembly(Assembly originalAssembly);
    [ConditionalAttribute("DEBUG")]
private static void WriteDebug(string format, Object[] parameters);
    public static void Init();
    public static Assembly AssemblyResolver(object sender, ResolveEventArgs args);
}
[AttributeUsageAttribute("388")]
public class BLToolkit.Validation.FriendlyNameAttribute : Attribute {
    private string _name;
    public string Name { get; }
    public FriendlyNameAttribute(string name);
    public string get_Name();
}
public interface BLToolkit.Validation.IValidatable {
    public abstract virtual void Validate();
    public abstract virtual bool IsValid(string fieldName);
    public abstract virtual String[] GetErrorMessages(string fieldName);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.MaxDateValueAttribute : MaxValueAttribute {
    public MaxDateValueAttribute(int year, int month, int day);
    public MaxDateValueAttribute(int year, int month, int day, string errorMessage);
    public MaxDateValueAttribute(int year, int month, int day, bool isExclusive);
    public MaxDateValueAttribute(int year, int month, int day, bool isExclusive, string errorMessage);
    public virtual bool IsValid(ValidationContext context);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.MaxLengthAttribute : ValidatorBaseAttribute {
    private int _value;
    public int Value { get; }
    public string ErrorMessage { get; public set; }
    public MaxLengthAttribute(int maxLength);
    public MaxLengthAttribute(int maxLength, string errorMessage);
    public int get_Value();
    public virtual bool IsValid(ValidationContext context);
    public virtual string get_ErrorMessage();
    public virtual void set_ErrorMessage(string value);
    public virtual string GetErrorMessage(ValidationContext context);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.MaxValueAttribute : ValidatorBaseAttribute {
    private object _value;
    private bool _isExclusive;
    public bool IsExclusive { get; public set; }
    public string ErrorMessage { get; public set; }
    public MaxValueAttribute(object maxValue);
    public MaxValueAttribute(object maxValue, string errorMessage);
    public MaxValueAttribute(object maxValue, bool isExclusive);
    public MaxValueAttribute(object maxValue, bool isExclusive, string errorMessage);
    public virtual object GetValue(ValidationContext context);
    public bool get_IsExclusive();
    public void set_IsExclusive(bool value);
    public virtual bool IsValid(ValidationContext context);
    public virtual string get_ErrorMessage();
    public virtual void set_ErrorMessage(string value);
    public virtual string GetErrorMessage(ValidationContext context);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.MinDateValueAttribute : MinValueAttribute {
    public MinDateValueAttribute(int year, int month, int day);
    public MinDateValueAttribute(int year, int month, int day, string errorMessage);
    public MinDateValueAttribute(int year, int month, int day, bool isExclusive);
    public MinDateValueAttribute(int year, int month, int day, bool isExclusive, string errorMessage);
    public virtual bool IsValid(ValidationContext context);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.MinLengthAttribute : ValidatorBaseAttribute {
    private int _value;
    public int Value { get; }
    public string ErrorMessage { get; public set; }
    public MinLengthAttribute(int minLength);
    public MinLengthAttribute(int minLength, string errorMessage);
    public int get_Value();
    public virtual bool IsValid(ValidationContext context);
    public virtual string get_ErrorMessage();
    public virtual void set_ErrorMessage(string value);
    public virtual string GetErrorMessage(ValidationContext context);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.MinValueAttribute : ValidatorBaseAttribute {
    private object _value;
    private bool _isExclusive;
    public bool IsExclusive { get; public set; }
    public string ErrorMessage { get; public set; }
    public MinValueAttribute(object minValue);
    public MinValueAttribute(object minValue, string errorMessage);
    public MinValueAttribute(object minValue, bool isExclusive);
    public MinValueAttribute(object minValue, bool isExclusive, string errorMessage);
    public virtual object GetValue(ValidationContext context);
    public bool get_IsExclusive();
    public void set_IsExclusive(bool value);
    public virtual bool IsValid(ValidationContext context);
    public virtual string get_ErrorMessage();
    public virtual void set_ErrorMessage(string value);
    public virtual string GetErrorMessage(ValidationContext context);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.RegExAttribute : ValidatorBaseAttribute {
    private string _pattern;
    private RegexOptions _options;
    private Regex _validator;
    [ObsoleteAttribute("Use RegExAttribute.Pattern instead.")]
public string Value { get; }
    public string Pattern { get; }
    public RegexOptions Options { get; }
    public Regex Validator { get; }
    public string ErrorMessage { get; public set; }
    public RegExAttribute(string pattern);
    public RegExAttribute(string pattern, RegexOptions options);
    public RegExAttribute(string pattern, string errorMessage);
    public RegExAttribute(string pattern, RegexOptions options, string errorMessage);
    public string get_Value();
    public string get_Pattern();
    public RegexOptions get_Options();
    public Regex get_Validator();
    public virtual bool IsValid(ValidationContext context);
    public virtual string get_ErrorMessage();
    public virtual void set_ErrorMessage(string value);
}
[AttributeUsageAttribute("384")]
public class BLToolkit.Validation.RequiredAttribute : ValidatorBaseAttribute {
    public string ErrorMessage { get; public set; }
    public RequiredAttribute(string errorMessage);
    public virtual bool IsValid(ValidationContext context);
    public virtual string get_ErrorMessage();
    public virtual void set_ErrorMessage(string value);
}
public class BLToolkit.Validation.ValidatableObjectBase : object {
    public virtual void Validate();
}
public class BLToolkit.Validation.ValidationContext : object {
    private object _object;
    private TypeAccessor _typeAccessor;
    private PropertyDescriptor _propertyDescriptor;
    private IsNullHandler _isNull;
    private object _value;
    private MemberAccessor _memberAccessor;
    private MemberInfo _memberInfo;
    private object _nullValue;
    public object Object { get; public set; }
    public TypeAccessor TypeAccessor { get; }
    public PropertyDescriptor PropertyDescriptor { get; public set; }
    public IsNullHandler IsNull { get; public set; }
    public bool IsValueNull { get; }
    public object Value { get; public set; }
    public MemberAccessor MemberAccessor { get; public set; }
    public MemberInfo MemberInfo { get; }
    public object NullValue { get; }
    public string MemberName { get; }
    public object get_Object();
    public void set_Object(object value);
    public TypeAccessor get_TypeAccessor();
    public PropertyDescriptor get_PropertyDescriptor();
    public void set_PropertyDescriptor(PropertyDescriptor value);
    public IsNullHandler get_IsNull();
    public void set_IsNull(IsNullHandler value);
    public bool get_IsValueNull();
    public object get_Value();
    public void set_Value(object value);
    public MemberAccessor get_MemberAccessor();
    public void set_MemberAccessor(MemberAccessor value);
    public MemberInfo get_MemberInfo();
    public object get_NullValue();
    public string get_MemberName();
}
public class BLToolkit.Validation.ValidationException : Exception {
    public ValidationException(string message);
    public ValidationException(string message, Exception innerException);
    public ValidationException(Exception innerException);
    protected ValidationException(SerializationInfo info, StreamingContext context);
}
public class BLToolkit.Validation.Validator : object {
    public static void Validate(ValidationContext context);
    public static void Validate(object obj, IsNullHandler isNull);
    public static void Validate(object obj);
    private static bool IsNullInternal(ValidationContext context);
    public static ValidationContext InitContext(ValidationContext context, object obj, PropertyDescriptor pd, IsNullHandler isNull);
    public static bool IsValid(ValidationContext context, string fieldName);
    public static bool IsValid(object obj, string fieldName, IsNullHandler isNull);
    public static bool IsValid(object obj, PropertyDescriptor pd, IsNullHandler isNull);
    public static bool IsValid(object obj, PropertyDescriptor pd);
    public static bool IsValid(object obj, string fieldName);
    public static String[] GetErrorMessages(ValidationContext context, string fieldName);
    public static String[] GetErrorMessages(object obj, string fieldName, IsNullHandler isNull);
    public static String[] GetErrorMessages(object obj, PropertyDescriptor pd, IsNullHandler isNull);
    public static String[] GetErrorMessages(object obj, PropertyDescriptor pd);
    public static String[] GetErrorMessages(object obj, string fieldName);
}
public abstract class BLToolkit.Validation.ValidatorBaseAttribute : Attribute {
    private string _errorMessage;
    public string ErrorMessage { get; public set; }
    protected ValidatorBaseAttribute(string errorMessage);
    public virtual string get_ErrorMessage();
    public virtual void set_ErrorMessage(string value);
    public abstract virtual bool IsValid(ValidationContext context);
    public virtual string GetErrorMessage(ValidationContext context);
    protected virtual string GetPropertyFriendlyName(ValidationContext context);
}
internal class BLToolkit.Web.UI.Design.WebObjectBinderDesigner : DataSourceDesigner {
    private DesignerDataSourceView _view;
    private WebObjectBinder _component;
    public bool CanConfigure { get; }
    public virtual String[] GetViewNames();
    public virtual DesignerDataSourceView GetView(string viewName);
    public virtual void Initialize(IComponent component);
    public virtual bool get_CanConfigure();
    public virtual void Configure();
}
[ToolboxBitmapAttribute("BLToolkit.Web.UI.WebObjectBinder")]
[DescriptionAttribute("BLToolkit Web Object Binder")]
[DisplayNameAttribute("Object Binder")]
[DesignerAttribute("BLToolkit.Web.UI.Design.WebObjectBinderDesigner")]
[DefaultPropertyAttribute("TypeName")]
[PersistChildrenAttribute("False")]
[ParseChildrenAttribute("True")]
public class BLToolkit.Web.UI.WebObjectBinder : DataSourceControl {
    internal ObjectBinder _objectBinder;
    private ObjectDataSourceView _view;
    [EditorAttribute("BLToolkit.ComponentModel.Design.TypeNameEditor", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string TypeName { get; public set; }
    [CategoryAttribute("Data")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("BLToolkit.ComponentModel.Design.ObjectViewTypeNameEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string ObjectViewTypeName { get; public set; }
    [RefreshPropertiesAttribute("2")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object Object { get; public set; }
    [BrowsableAttribute("False")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public IList List { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_ObjectViewTypeName();
    public void set_ObjectViewTypeName(string value);
    public object get_Object();
    public void set_Object(object value);
    public IList get_List();
    public void set_List(IList value);
    private void _objectBinder_ListChanged(object sender, ListChangedEventArgs e);
    public virtual void Dispose();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    protected virtual DataSourceView GetView(string viewName);
    protected virtual ICollection GetViewNames();
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.AssertionConditionAttribute : Attribute {
    private AssertionConditionType _conditionType;
    public AssertionConditionType ConditionType { get; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    public AssertionConditionType get_ConditionType();
}
internal enum JetBrains.Annotations.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.AssertionMethodAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.Annotations.BaseTypeRequiredAttribute : Attribute {
    private Type[] _baseTypes;
    public IEnumerable`1<Type> BaseTypes { get; }
    public BaseTypeRequiredAttribute(Type baseType);
    public BaseTypeRequiredAttribute(Type[] baseTypes);
    public IEnumerable`1<Type> get_BaseTypes();
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.Annotations.CannotApplyEqualityOperatorAttribute : Attribute {
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseFlags : Enum {
    public int value__;
    public static ImplicitUseFlags Default;
    public static ImplicitUseFlags IncludeMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class JetBrains.Annotations.MeansImplicitUseAttribute : Attribute {
    private ImplicitUseFlags _flags;
    [UsedImplicitlyAttribute]
public ImplicitUseFlags Flags { get; }
    [UsedImplicitlyAttribute]
public MeansImplicitUseAttribute(ImplicitUseFlags flags);
    public ImplicitUseFlags get_Flags();
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("96")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    private string _formatParameterName;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    public string get_FormatParameterName();
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.TerminatesProgramAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    private ImplicitUseFlags _flags;
    [UsedImplicitlyAttribute]
public ImplicitUseFlags Flags { get; }
    public UsedImplicitlyAttribute(ImplicitUseFlags flags);
    public ImplicitUseFlags get_Flags();
}
public class System.Action`10 : MulticastDelegate {
    public Action`10(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`11 : MulticastDelegate {
    public Action`11(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`12 : MulticastDelegate {
    public Action`12(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`13 : MulticastDelegate {
    public Action`13(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`14 : MulticastDelegate {
    public Action`14(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`15 : MulticastDelegate {
    public Action`15(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`16 : MulticastDelegate {
    public Action`16(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`5 : MulticastDelegate {
    public Action`5(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`6 : MulticastDelegate {
    public Action`6(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`7 : MulticastDelegate {
    public Action`7(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`8 : MulticastDelegate {
    public Action`8(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Action`9 : MulticastDelegate {
    public Action`9(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.Collections.IStructuralComparable {
    public abstract virtual int CompareTo(object other, IComparer comparer);
}
public interface System.Collections.IStructuralEquatable {
    public abstract virtual bool Equals(object other, IEqualityComparer comparer);
    public abstract virtual int GetHashCode(IEqualityComparer comparer);
}
public class System.Func`10 : MulticastDelegate {
    public Func`10(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`11 : MulticastDelegate {
    public Func`11(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`12 : MulticastDelegate {
    public Func`12(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`13 : MulticastDelegate {
    public Func`13(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`14 : MulticastDelegate {
    public Func`14(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`15 : MulticastDelegate {
    public Func`15(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`16 : MulticastDelegate {
    public Func`16(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`17 : MulticastDelegate {
    public Func`17(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`6 : MulticastDelegate {
    public Func`6(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`7 : MulticastDelegate {
    public Func`7(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`8 : MulticastDelegate {
    public Func`8(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
public class System.Func`9 : MulticastDelegate {
    public Func`9(object object, IntPtr method);
    public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
internal interface System.ITuple {
    public int Size { get; }
    public abstract virtual int GetHashCode(IEqualityComparer comparer);
    public abstract virtual string ToString(StringBuilder sb);
    public abstract virtual int get_Size();
}
public static class System.Tuple : object {
    internal static int CombineHashCodes(int h1, int h2);
    internal static int CombineHashCodes(int h1, int h2, int h3);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    public static Tuple`1<T1> Create(T1 item1);
    public static Tuple`2<T1, T2> Create(T1 item1, T2 item2);
    public static Tuple`3<T1, T2, T3> Create(T1 item1, T2 item2, T3 item3);
    public static Tuple`4<T1, T2, T3, T4> Create(T1 item1, T2 item2, T3 item3, T4 item4);
    public static Tuple`5<T1, T2, T3, T4, T5> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
    public static Tuple`6<T1, T2, T3, T4, T5, T6> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
    public static Tuple`7<T1, T2, T3, T4, T5, T6, T7> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
    public static Tuple`8<T1, T2, T3, T4, T5, T6, T7, Tuple`1<T8>> Create(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);
}
public class System.Tuple`1 : object {
    private T1 _item1;
    public T1 Item1 { get; }
    private int System.ITuple.Size { get; }
    public Tuple`1(T1 item1);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    private sealed virtual override int System.ITuple.get_Size();
}
public class System.Tuple`2 : object {
    private T1 _item1;
    private T2 _item2;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    private int System.ITuple.Size { get; }
    public Tuple`2(T1 item1, T2 item2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    public T2 get_Item2();
    private sealed virtual override int System.ITuple.get_Size();
}
public class System.Tuple`3 : object {
    private T1 _item1;
    private T2 _item2;
    private T3 _item3;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    private int System.ITuple.Size { get; }
    public Tuple`3(T1 item1, T2 item2, T3 item3);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    public T2 get_Item2();
    public T3 get_Item3();
    private sealed virtual override int System.ITuple.get_Size();
}
public class System.Tuple`4 : object {
    private T1 _item1;
    private T2 _item2;
    private T3 _item3;
    private T4 _item4;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    private int System.ITuple.Size { get; }
    public Tuple`4(T1 item1, T2 item2, T3 item3, T4 item4);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    public T2 get_Item2();
    public T3 get_Item3();
    public T4 get_Item4();
    private sealed virtual override int System.ITuple.get_Size();
}
public class System.Tuple`5 : object {
    private T1 _item1;
    private T2 _item2;
    private T3 _item3;
    private T4 _item4;
    private T5 _item5;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    private int System.ITuple.Size { get; }
    public Tuple`5(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    public T2 get_Item2();
    public T3 get_Item3();
    public T4 get_Item4();
    public T5 get_Item5();
    private sealed virtual override int System.ITuple.get_Size();
}
public class System.Tuple`6 : object {
    private T1 _item1;
    private T2 _item2;
    private T3 _item3;
    private T4 _item4;
    private T5 _item5;
    private T6 _item6;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    private int System.ITuple.Size { get; }
    public Tuple`6(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    public T2 get_Item2();
    public T3 get_Item3();
    public T4 get_Item4();
    public T5 get_Item5();
    public T6 get_Item6();
    private sealed virtual override int System.ITuple.get_Size();
}
public class System.Tuple`7 : object {
    private T1 _item1;
    private T2 _item2;
    private T3 _item3;
    private T4 _item4;
    private T5 _item5;
    private T6 _item6;
    private T7 _item7;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    private int System.ITuple.Size { get; }
    public Tuple`7(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    public T2 get_Item2();
    public T3 get_Item3();
    public T4 get_Item4();
    public T5 get_Item5();
    public T6 get_Item6();
    public T7 get_Item7();
    private sealed virtual override int System.ITuple.get_Size();
}
public class System.Tuple`8 : object {
    private T1 _item1;
    private T2 _item2;
    private T3 _item3;
    private T4 _item4;
    private T5 _item5;
    private T6 _item6;
    private T7 _item7;
    private TRest _rest;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public T5 Item5 { get; }
    public T6 Item6 { get; }
    public T7 Item7 { get; }
    public TRest Rest { get; }
    private int System.ITuple.Size { get; }
    public Tuple`8(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override int System.ITuple.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override string System.ITuple.ToString(StringBuilder sb);
    public virtual string ToString();
    public T1 get_Item1();
    public T2 get_Item2();
    public T3 get_Item3();
    public T4 get_Item4();
    public T5 get_Item5();
    public T6 get_Item6();
    public T7 get_Item7();
    public TRest get_Rest();
    private sealed virtual override int System.ITuple.get_Size();
}
