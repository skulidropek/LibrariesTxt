public class JetBrains.Common.JetInjector.ActionCollection : object {
    private Dictionary`2<Key, IBuildAction> myActions;
    private Dictionary`2<Key, IBuildAction> myOpenGenericActions;
    public sealed virtual void Add(object stage, IBuildAction action, Type forType, object token);
    private Dictionary`2<Key, IBuildAction> GetTargetDictionary(Type forType);
    public sealed virtual void Remove(object stage, Type forType, object token);
    [CanBeNullAttribute]
public sealed virtual IBuildAction Get(object stage, Type type, object token);
    private static void Add(Key key, IBuildAction action, Dictionary`2<Key, IBuildAction> dictionary);
    private static void Remove(Key key, Dictionary`2<Key, IBuildAction> dictionary);
}
public class JetBrains.Common.JetInjector.BuildArgument : object {
    [NotNullAttribute]
public Type Type;
    [CanBeNullAttribute]
public object Token;
    [DebuggerStepThroughAttribute]
public BuildArgument(Type type, object token);
    public sealed virtual bool Equals(BuildArgument other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface JetBrains.Common.JetInjector.IActionCollection {
    public abstract virtual void Add(object stage, IBuildAction action, Type forType, object token);
    public abstract virtual void Remove(object stage, Type forType, object token);
    [CanBeNullAttribute]
public abstract virtual IBuildAction Get(object stage, Type type, object token);
}
public interface JetBrains.Common.JetInjector.IBuildAction {
    public abstract virtual bool Execute(IBuildSession buildSession);
    public abstract virtual void PostProcess(IBuildSession buildSession);
}
public interface JetBrains.Common.JetInjector.IBuildSession {
    [NotNullAttribute]
public Maybe`1<object> Instance { get; public set; }
    [NotNullAttribute]
public Type Type { get; }
    [CanBeNullAttribute]
public object Token { get; }
    [NotNullAttribute]
public BuildArgument BuildArgument { get; }
    public abstract virtual Maybe`1<object> get_Instance();
    public abstract virtual void set_Instance(Maybe`1<object> value);
    public abstract virtual Type get_Type();
    public abstract virtual object get_Token();
    public abstract virtual BuildArgument get_BuildArgument();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<object> GetServiceChain(Type serviceType);
    [NotNullAttribute]
public abstract virtual Maybe`1<object> BuildUp(BuildArgument buildArgument);
}
[AttributeUsageAttribute("2272")]
public class JetBrains.Common.JetInjector.InjectAttribute : Attribute {
    private object myPointId;
    [CanBeNullAttribute]
public object PointId { get; }
    public InjectAttribute(object pointId);
    public object get_PointId();
}
public interface JetBrains.Common.JetInjector.IParameterValue {
    [NotNullAttribute]
public Type ValueType { get; }
    [CanBeNullAttribute]
public object Value { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual object get_Value();
}
public interface JetBrains.Common.JetInjector.IRegistry {
    [NotNullAttribute]
public IActionCollection Actions { get; }
    [NotNullAttribute]
public IServiceCollection Services { get; }
    public abstract virtual IActionCollection get_Actions();
    public abstract virtual IServiceCollection get_Services();
}
public interface JetBrains.Common.JetInjector.IServiceCollection {
    public abstract virtual void Add(Type serviceType, object service, Type forType, object token);
    public abstract virtual void Remove(Type serviceType, Type forType, object token);
    public abstract virtual void ManageServiceChain(Type serviceType, Type forType, object token, Action`1<LinkedList`1<object>> manage);
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<object> GetChain(Type serviceType, Type forType, object token);
}
public class JetBrains.Common.JetInjector.Parameter : object {
    private Type myValueType;
    private object myValue;
    public Type ValueType { get; }
    private object JetBrains.Common.JetInjector.IParameterValue.Value { get; }
    private Parameter(Type valueType, object value);
    public sealed virtual Type get_ValueType();
    private sealed virtual override object JetBrains.Common.JetInjector.IParameterValue.get_Value();
    public static IParameterValue Value(T value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public class JetBrains.Common.JetInjector.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ActionCollection_DuplicateAction_Template { get; }
    public static string ConstructorProviderIsNotFound { get; }
    public static string ConstructorsAmbiguty { get; }
    public static string DoesNotContainConstructor { get; }
    public static string MapOpenGenericType_IsNotOpen_Template { get; }
    public static string MapType_IsNotAssingable_Template { get; }
    public static string ParameterProviderIsNotFound { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ActionCollection_DuplicateAction_Template();
    public static string get_ConstructorProviderIsNotFound();
    public static string get_ConstructorsAmbiguty();
    public static string get_DoesNotContainConstructor();
    public static string get_MapOpenGenericType_IsNotOpen_Template();
    public static string get_MapType_IsNotAssingable_Template();
    public static string get_ParameterProviderIsNotFound();
}
public class JetBrains.Common.JetInjector.Registry : object {
    private string myName;
    private IActionCollection myActions;
    private IServiceCollection myServices;
    public IActionCollection Actions { get; }
    public IServiceCollection Services { get; }
    public Registry(string name);
    public sealed virtual IActionCollection get_Actions();
    public sealed virtual IServiceCollection get_Services();
    public virtual string ToString();
}
public class JetBrains.Common.JetInjector.ServiceCollection : object {
    private Dictionary`2<Key, LinkedList`1<object>> myServices;
    public sealed virtual void Add(Type serviceType, object service, Type forType, object token);
    public sealed virtual void ManageServiceChain(Type serviceType, Type forType, object token, Action`1<LinkedList`1<object>> manage);
    [CanBeNullAttribute]
public sealed virtual IEnumerable`1<object> GetChain(Type serviceType, Type forType, object token);
    public sealed virtual void Remove(Type serviceType, Type forType, object token);
}
