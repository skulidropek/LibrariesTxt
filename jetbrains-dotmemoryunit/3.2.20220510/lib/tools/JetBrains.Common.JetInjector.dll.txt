public class JetBrains.Common.JetInjector.AttributedConstructorProvider : object {
    private Predicate`1<Attribute> myPredicate;
    public AttributedConstructorProvider(object id);
    public AttributedConstructorProvider(Predicate`1<Attribute> predicate);
    [CanBeNullAttribute]
public sealed virtual ConstructorInfo GetConstructor(Type type);
    private static Predicate`1<Attribute> CreateInjectHerePredicate(object id);
    [CompilerGeneratedAttribute]
private bool <GetConstructor>b__0(ConstructorInfo _);
    [CompilerGeneratedAttribute]
private bool <GetConstructor>b__1(Attribute attribute);
}
public class JetBrains.Common.JetInjector.BlankBuildAction : object {
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.BuildArgumentProvider : object {
    private Predicate`1<ParameterInfo> myPredicate;
    private object myToken;
    private Type myType;
    public BuildArgumentProvider(Predicate`1<ParameterInfo> predicate, object token, Type type);
    public sealed virtual BuildArgument GetBuildArgumentFor(ParameterInfo parameterInfo);
}
[ExtensionAttribute]
public static class JetBrains.Common.JetInjector.BuildArgumentProviderExtension : object {
    [ExtensionAttribute]
public static Object[] ResolveParameters(IBuildSession buildSession, IEnumerable`1<ParameterInfo> parameters);
    private static object ResolveParameterValue(IBuildSession buildSession, ParameterInfo parameterInfo);
}
internal class JetBrains.Common.JetInjector.BuildException : Exception {
    public BuildException(Exception innerException);
}
public class JetBrains.Common.JetInjector.BuildSession : object {
    private static string ExceptionDataBuildingChain;
    private static string ExceptionDataStackTrace;
    private IEnumerable`1<object> myConveyer;
    private IRegistry mySessionalContext;
    private IInjector[] myParentInjectors;
    private Func`3<IEnumerable`1<BuildArgument>, BuildArgument, IRegistry> myContextProvider;
    private Stack`1<IRegistry> myContextChain;
    private Stack`1<BuildUnit> mySession;
    [CompilerGeneratedAttribute]
private static Func`2<IInjector, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<BuildUnit, BuildArgument> CS$<>9__CachedAnonymousMethodDelegate5;
    public BuildSession(IEnumerable`1<object> conveyer, IEnumerable`1<IRegistry> contexts, Func`3<IEnumerable`1<BuildArgument>, BuildArgument, IRegistry> contextProvider, IRegistry sessionalContext, IInjector[] parentInjectors);
    public Maybe`1<object> BuildUp(BuildArgument buildArgument, object instance);
    private void FillExceptionWithBuildUnitData(Exception exception);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(IInjector injector);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(IRegistry ctx);
    [CompilerGeneratedAttribute]
private static BuildArgument <BuildUp>b__4(BuildUnit _);
}
public class JetBrains.Common.JetInjector.BuildSessionCache : object {
    private Dictionary`2<BuildArgument, Maybe`1<object>> myInstances;
    private IBuildSession myCurrentBuildSession;
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
[ExtensionAttribute]
public static class JetBrains.Common.JetInjector.ConstructorProviderExtension : object {
    [ExtensionAttribute]
public static ConstructorInfo GetConstructor(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.CreateByReflectionAction : object {
    public static IBuildAction Instance;
    private static CreateByReflectionAction();
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.CreateGenericByReflectionAction : object {
    private Type myToOpenGenericType;
    private Object[] myParameters;
    public CreateGenericByReflectionAction(Type toOpenGenericType, Object[] parameters);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
    [CompilerGeneratedAttribute]
private bool <Execute>b__0(ConstructorInfo _);
}
public class JetBrains.Common.JetInjector.CustomFactoryMethod`1 : object {
    private Func`1<TResult> myFactoryMethod;
    public CustomFactoryMethod`1(Func`1<TResult> factoryMethod);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.CustomFactoryMethod`2 : object {
    private Func`2<TParam, TResult> myFactoryMethod;
    public CustomFactoryMethod`2(Func`2<TParam, TResult> factoryMethod);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.CustomFactoryMethod`3 : object {
    private Func`3<TParam1, TParam2, TResult> myFactoryMethod;
    public CustomFactoryMethod`3(Func`3<TParam1, TParam2, TResult> factoryMethod);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.CustomFactoryMethod`4 : object {
    private Func`4<TParam1, TParam2, TParam3, TResult> myFactoryMethod;
    public CustomFactoryMethod`4(Func`4<TParam1, TParam2, TParam3, TResult> factoryMethod);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.CustomFactoryMethod`5 : object {
    private Func`5<TParam1, TParam2, TParam3, TParam4, TResult> myFactoryMethod;
    public CustomFactoryMethod`5(Func`5<TParam1, TParam2, TParam3, TParam4, TResult> factoryMethod);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.CustomFactoryMethod`6 : object {
    private Func`6<TParam1, TParam2, TParam3, TParam4, TParam5, TResult> myFactoryMethod;
    public CustomFactoryMethod`6(Func`6<TParam1, TParam2, TParam3, TParam4, TParam5, TResult> factoryMethod);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public static class JetBrains.Common.JetInjector.For : object {
    private static Func`2<object, object> DefaultParameterAttributeCreator;
    private static Func`2<object, object> ourInjectParameterAttributeCreator;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegatea;
    private static For();
    public static void Initialize(Func`2<object, object> createInjectParameterAttribute);
    public static ParameterDescriptor`1<object> Parameter(object parameterId);
    public static ParameterDescriptor`1<object> ParameterName(string parameterName);
    public static ParameterDescriptor`1<T> Parameter();
    [CompilerGeneratedAttribute]
private static IBuildArgumentProvider <Parameter>b__8(object token);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__9(object o);
}
public interface JetBrains.Common.JetInjector.IBuildArgumentProvider {
    [CanBeNullAttribute]
public abstract virtual BuildArgument GetBuildArgumentFor(ParameterInfo parameterInfo);
}
public interface JetBrains.Common.JetInjector.IConstructorProvider {
    [CanBeNullAttribute]
public abstract virtual ConstructorInfo GetConstructor(Type type);
}
public interface JetBrains.Common.JetInjector.IInjector {
    public abstract virtual IRegistry GetOrCreateContext(Type inContextOfType, object token);
}
public interface JetBrains.Common.JetInjector.IJetFactory {
    public IRegistry Registry { get; }
    public abstract virtual Maybe`1<object> BuildUp(Type type, IRegistry sessionContext, object token, object instance);
    public abstract virtual IRegistry get_Registry();
}
public class JetBrains.Common.JetInjector.InjectAttributeBuildArgumentProvider : object {
    public sealed virtual BuildArgument GetBuildArgumentFor(ParameterInfo parameterInfo);
}
public class JetBrains.Common.JetInjector.Injector : object {
    private IRegistry myRegistry;
    private IInjector[] myParents;
    private LinkedList`1<object> myConveyer;
    private Dictionary`2<BuildArgument, IRegistry> myContexts;
    public IRegistry Registry { get; }
    public IActionCollection Actions { get; }
    public IServiceCollection Services { get; }
    public Injector(string name, IEnumerable`1<object> conveyer, IInjector[] parents);
    public Injector(IEnumerable`1<object> conveyer, IRegistry registry, IInjector[] parents);
    public sealed virtual IRegistry get_Registry();
    public sealed virtual IActionCollection get_Actions();
    public sealed virtual IServiceCollection get_Services();
    public Injector CreateChildInjector(string name, IRegistry globalContext);
    public sealed virtual Maybe`1<object> BuildUp(Type type, IRegistry sessionContext, object token, object instance);
    public sealed virtual IRegistry GetOrCreateContext(Type inContextOfType, object token);
    [CanBeNullAttribute]
private IRegistry GetContext(IEnumerable`1<BuildArgument> currentBuildChain, BuildArgument buildArgument);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Common.JetInjector.InjectorExtension : object {
    [ExtensionAttribute]
public static IRegistry InContext(IInjector injector, object token);
    [ExtensionAttribute]
public static IRegistry InContext(IInjector injector, Type resolvingType, object token);
    [ExtensionAttribute]
private static T Resolve(IInjector injector, IRegistry sessionContext, object token, object instance);
    [ExtensionAttribute]
public static T ResolveWithToken(IInjector injector, object token, Object[] parameters);
    [ExtensionAttribute]
public static T Resolve(IInjector injector, Object[] parameters);
}
public interface JetBrains.Common.JetInjector.IParameterConfigurator {
    public abstract virtual void Configure(IRegistry registry, Type forType, object token);
}
public interface JetBrains.Common.JetInjector.IParameterDefaultValueProvider {
    public abstract virtual Maybe`1<object> GetValue(ParameterInfo parameterInfo);
}
public class JetBrains.Common.JetInjector.MapOpenGenericType : object {
    private Type myToType;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Type> CS$<>9__CachedAnonymousMethodDelegate2;
    public MapOpenGenericType(Type toType, Type fromType);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
    private static bool IsAssignable(Type fromType, Type toType);
    [CompilerGeneratedAttribute]
private static Type <IsAssignable>b__0(Type _);
}
public class JetBrains.Common.JetInjector.MapType : object {
    private Type myToType;
    private Maybe`1<object> myToToken;
    public MapType(Type toType, Type fromType);
    public MapType(Type toType, Maybe`1<object> toToken, Type fromType);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
[ExtensionAttribute]
internal static class JetBrains.Common.JetInjector.MethodParametersExtractor : object {
    [ExtensionAttribute]
public static Object[] GetValuesForMethodParameters(IBuildSession buildSession, MethodInfo method);
}
public class JetBrains.Common.JetInjector.MostParametersConstructorProvider : object {
    private static ConstructorInfo NoParametersConstructor;
    private static MostParametersConstructorProvider();
    public sealed virtual ConstructorInfo GetConstructor(Type type);
}
public class JetBrains.Common.JetInjector.OpenGenericBinding : object {
    private IRegistry myRegistry;
    private Type myFromOpenGenericType;
    private object myToken;
    public OpenGenericBinding(IRegistry registry, Type fromOpenGenericType, object token);
    public OpenGenericBinding WithKey(object token);
    public void As(Type toOpenGenericType);
    public void AsEntityWithExplicitParameters(Type toOpenGenericType, Object[] parameters);
}
public class JetBrains.Common.JetInjector.ParameterDefaultValueProivder : object {
    public sealed virtual Maybe`1<object> GetValue(ParameterInfo parameterInfo);
}
public class JetBrains.Common.JetInjector.ParameterDescription : object {
    private Type myParameterType;
    private string myParameterName;
    private Nullable`1<int> myParameterPosition;
    private BuildArgument myBuildArgument;
    private bool myCheckTypeCompatibility;
    public ParameterDescription(object registrationKey, Type parameterType);
    public ParameterDescription(Type parameterType, BuildArgument buildArgument, bool checkTypeCompatibility);
    public ParameterDescription(string parameterName, BuildArgument buildArgument, bool checkTypeCompatibility);
    public ParameterDescription(int parameterPosition, BuildArgument buildArgument, bool checkTypeCompatibility);
    private ParameterDescription(BuildArgument buildArgument, bool checkTypeCompatibility);
    [CanBeNullAttribute]
public BuildArgument GetBuildArgument(ParameterInfo parameterInfo);
}
public class JetBrains.Common.JetInjector.RegistrationContext : object {
    public IRegistry Registry;
    public object Token;
    public Type TargetType;
    public RegistrationContext(IRegistry registry, Type targetType, object token);
}
public class JetBrains.Common.JetInjector.RegistrationContext`1 : RegistrationContext {
    public RegistrationContext`1(IRegistry registry, object token);
    public RegistrationContext`1<T> As(Func`1<T> factoryMethod);
    public RegistrationContext`1<T> As(Func`2<TParam, T> factoryMethod);
    public RegistrationContext`1<T> As(Func`3<TParam1, TParam2, T> factoryMethod);
    public RegistrationContext`1<T> As(Func`4<TParam1, TParam2, TParam3, T> factoryMethod);
    public RegistrationContext`1<T> As(Func`5<TParam1, TParam2, TParam3, TParam4, T> factoryMethod);
    public RegistrationContext`1<T> As(Func`6<TParam1, TParam2, TParam3, TParam4, TParam5, T> factoryMethod);
}
[ExtensionAttribute]
public static class JetBrains.Common.JetInjector.RegistrationContextExtension : object {
    [ExtensionAttribute]
public static RegistrationContext`1<TWhat> WithToken(RegistrationContext`1<TWhat> registrationContext, object token);
    [ExtensionAttribute]
public static RegistrationContext As(RegistrationContext registrationContext, bool checkTypeCompatibility);
    [ExtensionAttribute]
public static RegistrationContext As(RegistrationContext registrationContext, Maybe`1<object> toToken, bool checkTypeCompatibility);
    [ExtensionAttribute]
public static void AsInstance(RegistrationContext`1<T> registrationContext, T instance);
    [ExtensionAttribute]
public static RegistrationContext AsSingleton(RegistrationContext registrationContext);
    [ExtensionAttribute]
public static RegistrationContext UsingParameters(RegistrationContext registrationContext, Func`1<Object[]> getParameters);
    [ExtensionAttribute]
public static RegistrationContext UsingParameters(RegistrationContext registrationContext, Object[] parameters);
    [ExtensionAttribute]
public static ParameterDescriptor ForParameter(RegistrationContext`1<TWhat> registrationContext, object parameterId);
    [ExtensionAttribute]
public static ParameterDescriptor ForParameter(RegistrationContext`1<TWhat> registrationContext);
    [ExtensionAttribute]
public static RegistrationContext`1<TWhat> UsingConstructorLike(RegistrationContext`1<TWhat> registrationContext, Type[] parameterTypes);
    [ExtensionAttribute]
public static RegistrationContext`1<TWhat> UsingMarkedConstructor(RegistrationContext`1<TWhat> registrationContext, string name);
    [CompilerGeneratedAttribute]
private static IBuildArgumentProvider <ForParameter>b__7(object token);
}
[ExtensionAttribute]
public static class JetBrains.Common.JetInjector.RegistryExtension : object {
    [ExtensionAttribute]
public static void AddDefaultAction(IRegistry registry, object stage, IBuildAction buildAction);
    [ExtensionAttribute]
public static void AddDefaultService(IRegistry registry, TService[] serviceChain);
    [ExtensionAttribute]
public static void AddServiceFor(IRegistry registry, TService service);
    [ExtensionAttribute]
public static RegistrationContext`1<T> Register(IRegistry registry);
    [ExtensionAttribute]
public static void Register(IRegistry registry, Type type);
    [ExtensionAttribute]
public static RegistrationContext`1<TVoid> TreatAll(IRegistry registry);
    [ExtensionAttribute]
public static RegistrationContext`1<T> Treat(IRegistry registry);
    [ExtensionAttribute]
public static OpenGenericBinding TreatOpenGeneric(IRegistry registry, Type type);
}
public class JetBrains.Common.JetInjector.SimpleFactoryMethodAction`1 : object {
    private Func`1<T> myFactoryMethod;
    public SimpleFactoryMethodAction`1(Func`1<T> factoryMethod);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public class JetBrains.Common.JetInjector.SimplestBuildArgumentProvider : object {
    public sealed virtual BuildArgument GetBuildArgumentFor(ParameterInfo parameterInfo);
}
public class JetBrains.Common.JetInjector.Singleton : object {
    private Maybe`1<object> myInstance;
    public Singleton(object instance);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
}
public enum JetBrains.Common.JetInjector.Stage : Enum {
    public int value__;
    public static Stage Caching;
    public static Stage MapType;
    public static Stage OnCreate;
    public static Stage Create;
    public static Stage Inject;
}
public class JetBrains.Common.JetInjector.TVoid : object {
}
public class JetBrains.Common.JetInjector.TypedParameterToBuildArgument : object {
    private Type myParameterType;
    private object myToken;
    public TypedParameterToBuildArgument(Type parameterType, object token);
    public sealed virtual BuildArgument GetBuildArgumentFor(ParameterInfo parameterInfo);
}
public class JetBrains.Common.JetInjector.WeakConstructorProvider : object {
    private Nullable`1<BindingFlags> myBindingFlags;
    private Type[] myParameterTypes;
    public WeakConstructorProvider(Type[] parameterTypes);
    public WeakConstructorProvider(BindingFlags bindingFlags, Type[] parameterTypes);
    [CanBeNullAttribute]
public sealed virtual ConstructorInfo GetConstructor(Type type);
}
public class JetBrains.Common.JetInjector.WeakTypedParameterToBuildArgument : object {
    private Maybe`1<object> myValue;
    private object myToken;
    public WeakTypedParameterToBuildArgument(object value, object token);
    public sealed virtual bool Execute(IBuildSession buildSession);
    public sealed virtual void PostProcess(IBuildSession buildSession);
    [CanBeNullAttribute]
public sealed virtual BuildArgument GetBuildArgumentFor(ParameterInfo parameterInfo);
}
