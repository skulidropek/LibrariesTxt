[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.Common.Util.Shell.Actions.ActionRunner : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private IActionManager myActionManager;
    private IActionBarManager myActionBarManager;
    private IShellLocks myShellLocks;
    private DataContexts myDataContexts;
    public ActionRunner(Lifetime lifetime, IThreading threading, IActionManager actionManager, IActionBarManager actionBarManager, IShellLocks shellLocks, DataContexts dataContexts);
    public sealed virtual void ShowContextMenu(PlatformActionId menuType, UIElement element, Point openingPosition);
    private static Point GetCenterPoint(Size size);
    private static bool MenuTriggeredByMouse(Point openingPosition);
    private void ShowMenu(UIElement element, PlatformActionId menuType, Point showPosition, Func`1<IEnumerable`1<IDataRule>> overriddenFGetDataRule);
    private static Size GetElementSize(UIElement uiElement);
    public sealed virtual void ShowDropDownMenu(PlatformActionId menuType, UIElement element);
    public sealed virtual void TryExecuteAction(PlatformActionId actionType, UIElement uiElement);
    public sealed virtual bool CanExecuteAction(PlatformActionId actionType, UIElement uiElement);
    private void ShowPopupMenuInAvalonElement(UIElement element, PlatformActionId menuId, Point value, Func`1<IEnumerable`1<IDataRule>> overriddenFGetDataRule);
    private IActionDefWithId GetActionDef(PlatformActionId actionId);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.Actions.ActionRunnerHelpers : object {
    [ExtensionAttribute]
public static void GlobalRegisterAllActions(IActionRunner actionRunner);
    [ExtensionAttribute]
public static void BindAllActions(IActionRunner actionRunner, Lifetime lifetime, UIElement topLevelElement);
    [ExtensionAttribute]
private static void BindExecuteActionsWithState(IActionRunner actionRunner, Lifetime lifetime, UIElement topLevelElement);
    private static CommandBinding ExecuteActionWithStateCommandBinding(IActionRunner actionRunner);
    [ExtensionAttribute]
private static void BindExecuteActions(IActionRunner actionRunner, Lifetime lifetime, UIElement topLevelElement);
    private static CommandBinding ExecuteActionCommandBinding(IActionRunner actionRunner);
    [ExtensionAttribute]
private static void BindShowContextMenuActions(IActionRunner actionRunner, Lifetime lifetime, UIElement topLevelElement);
    private static CommandBinding ShowContextMenuCommandBinding(IActionRunner actionRunner);
    [ExtensionAttribute]
private static void BindShowDropDownActions(IActionRunner actionRunner, Lifetime lifetime, UIElement topLevelElement);
    private static CommandBinding ShowDropDownMenuCommandBinding(IActionRunner actionRunner);
    private static void CanExecuteAction(CanExecuteRoutedEventArgs args, IActionRunner actionRunner);
    private static void ExecuteAction(ExecutedRoutedEventArgs args, IActionRunner actionRunner);
    private static UIElement FindFocusedElementUnderControl(UIElement parent);
    private static void ShowContextMenu(ExecutedRoutedEventArgs args, IActionRunner actionRunner);
    private static void ShowDropDownMenu(ExecutedRoutedEventArgs args, IActionRunner actionRunner);
    [NotNullAttribute]
private static UIElement GetUIElement(RoutedEventArgs args);
    [NotNullAttribute]
private static PlatformActionId GetActionId(object param);
    private static Point GetOpeningPosition(object param);
}
public class JetBrains.Common.Util.Shell.Actions.ActionSystem : object {
    public static RoutedCommand ShowDropDownMenuAction;
    public static ICommand ExecuteAction;
    public static ICommand ExecuteActionWithState;
    private static DependencyProperty AttachedDataRulesEventHandlerProperty;
    public static DependencyProperty DataRulesProperty;
    public static DependencyProperty IsDataProviderProperty;
    public static DependencyProperty ListItemIsDataProviderProperty;
    internal static RoutedCommand ShowContextMenuAction;
    public static DependencyProperty ContextMenuGroupIdProperty;
    private static Pair`2[] ourHackList;
    [CompilerGeneratedAttribute]
private static Func`2<IActionNodeDef, IEnumerable`1<IActionNodeDef>> CS$<>9__CachedAnonymousMethodDelegate7;
    private static ActionSystem();
    private static GetDataRulesEventHandler GetAttachedDataRulesEventHandler(DependencyObject obj);
    private static void SetAttachedDataRulesEventHandler(DependencyObject obj, GetDataRulesEventHandler value);
    [UsedImplicitlyAttribute]
public static void SetDataRules(UIElement element, IEnumerable`1<IDataRule> value);
    [UsedImplicitlyAttribute]
public static IEnumerable`1<IDataRule> GetDataRules(UIElement element);
    private static void DataRules_OnChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [UsedImplicitlyAttribute]
public static void SetIsDataProvider(FrameworkElement element, bool value);
    [UsedImplicitlyAttribute]
public static bool GetIsDataProvider(FrameworkElement element);
    private static void IsDataProvider_OnChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnGetDataProviders(object sender, GetDataRulesEventArgs args);
    [UsedImplicitlyAttribute]
public static void SetListItemIsDataProvider(FrameworkElement element, bool value);
    [UsedImplicitlyAttribute]
public static bool GetListItemIsDataProvider(FrameworkElement element);
    private static void ListItemIsDataProvider_OnChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [UsedImplicitlyAttribute]
public static void SetContextMenuGroupId(UIElement element, Type value);
    [UsedImplicitlyAttribute]
public static Type GetContextMenuGroupId(UIElement element);
    private static void ContextMenuGroupId_OnChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void Element_OnContextMenuOpening(object sender, ContextMenuEventArgs e);
    public static IEnumerable`1<KeyBinding> BuildBindingsForMenuGroup(Type groupType, IActionManager actionManager);
    private static IEnumerable`1<Pair`2<Key, ModifierKeys>> GetWpfShortcutPairs(KeyboardShortcut shortcut);
    private static string HackShortcutString(string presentableText);
    private static ModifierKeys PlatformToWpfKey(KeyboardModifiers modifiers);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IActionNodeDef> <BuildBindingsForMenuGroup>b__5(IActionNodeDef p);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.Actions.DefaultDataRules : object {
    private static Dictionary`2<Type, IDataConstant> Map;
    public static DependencyProperty DataContextTypeProperty;
    private static DefaultDataRules();
    private static DataConstant`1<T> GetConstant();
    public static IDataRule Create(T obj, Lifetime lifetime);
    public static IDataRule Create(Func`2<IDataContext, T> getValue, Lifetime lifetime);
    public static IDataRule CreateStruct(T obj, Lifetime lifetime);
    [ExtensionAttribute]
public static T GetData(IDataContext context);
    [ExtensionAttribute]
public static Nullable`1<T> GetDataStruct(IDataContext context);
    private static void DataContextTypeOnChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [UsedImplicitlyAttribute]
private static void AddHandler(FrameworkElement e);
    [UsedImplicitlyAttribute]
private static void RemoveHandler(FrameworkElement e);
    private static void OnGetDataProviders(object sender, GetDataRulesEventArgs args);
    public static void SetDataContextType(DependencyObject element, Type value);
    public static Type GetDataContextType(DependencyObject element);
    [ExtensionAttribute]
public static IDataRule CreateDataRule(DataConstant`1<T> constant, T value);
    [ExtensionAttribute]
public static IDataRule CreateDataRule(DataConstant`1<StructWrapper`1<T>> constant, T value);
    [ExtensionAttribute]
public static IDataRule CreateDataRule(DataConstant`1<T> constant, Func`2<IDataContext, T> value);
    [CompilerGeneratedAttribute]
private static IDataConstant <GetConstant>b__0(Type t);
}
public interface JetBrains.Common.Util.Shell.Actions.IActionRunner {
    public abstract virtual void ShowContextMenu(PlatformActionId menuType, UIElement element, Point openingPosition);
    public abstract virtual void ShowDropDownMenu(PlatformActionId menuType, UIElement element);
    public abstract virtual void TryExecuteAction(PlatformActionId actionType, UIElement uiElement);
    public abstract virtual bool CanExecuteAction(PlatformActionId actionType, UIElement uiElement);
}
public class JetBrains.Common.Util.Shell.Actions.PlatformActionId : object {
    [CanBeNullAttribute]
private string myActionId;
    [CanBeNullAttribute]
private Type myActionType;
    [CanBeNullAttribute]
public string ActionId { get; }
    [CanBeNullAttribute]
public Type ActionType { get; }
    public PlatformActionId(string actionId);
    public PlatformActionId(Type actionType);
    public static PlatformActionId op_Implicit(Type actionType);
    public static PlatformActionId op_Implicit(string actionId);
    public string get_ActionId();
    public Type get_ActionType();
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.Actions.PlatformActionIdEx : object {
    [ExtensionAttribute]
public static void AssertIsAction(PlatformActionId menuType);
    [ExtensionAttribute]
public static void AssertIsExecutableAction(PlatformActionId actionType);
}
public class JetBrains.Common.Util.Shell.Actions.ShowContextMenuActionParameter : object {
    [CompilerGeneratedAttribute]
private Type <ContextMenuGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <OpeningPosition>k__BackingField;
    [NotNullAttribute]
public Type ContextMenuGroupId { get; private set; }
    public Point OpeningPosition { get; private set; }
    public ShowContextMenuActionParameter(Type contextMenuGroupId, Point openingPosition);
    [CompilerGeneratedAttribute]
public Type get_ContextMenuGroupId();
    [CompilerGeneratedAttribute]
private void set_ContextMenuGroupId(Type value);
    [CompilerGeneratedAttribute]
public Point get_OpeningPosition();
    [CompilerGeneratedAttribute]
private void set_OpeningPosition(Point value);
}
public class JetBrains.Common.Util.Shell.Actions.WpfCommandActionHandler`1 : object {
    private Func`2<TComponent, ICommand> myProperty;
    public WpfCommandActionHandler`1(Func`2<TComponent, ICommand> property);
    private ICommand GetCommand(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ZoneMarkerAttribute]
public class JetBrains.Common.Util.Shell.Actions.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.APM.AsyncOperationExtensionsShell : object {
    [ExtensionAttribute]
public static void WaitWithJetDispatcher(IAsyncOperation operation);
    [ExtensionAttribute]
public static void WaitWithJetDispatcherAndLifetime(IAsyncOperation operation, Lifetime lifetime);
}
[ZoneMarkerAttribute]
[EnvironmentComponentAttribute]
public class JetBrains.Common.Util.Shell.ConsoleHelpers.CompactConsoleLogger : object {
    private CustomLoggerListener myListener;
    public bool Debug { get; public set; }
    public CompactConsoleLogger(ConsoleLoggerMixin logger, ConsoleApplicationExitCode exitCode);
    public bool get_Debug();
    public void set_Debug(bool value);
}
public class JetBrains.Common.Util.Shell.ConsoleHelpers.ConsoleApplicationExitCode : object {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public int ExitCode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(int value);
}
public class JetBrains.Common.Util.Shell.ConsoleHelpers.InsertObjectToComponentContianerMixIn : object {
    private object myOptions;
    public InsertObjectToComponentContianerMixIn(object options);
    public sealed virtual void Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Common.Util.Shell.ConsoleHelpers.UnblockFileManager : object {
    public static int STGM_READ;
    public static int STGM_WRITE;
    public static int STGM_READWRITE;
    public static int STGM_SHARE_EXCLUSIVE;
    private IZoneIdentifier myZoneId;
    private IPersistFile myFile;
    public UnblockFileManager(Lifetime lifetime);
    public bool IsSupported();
    public SecurityZone GetFileZone(FileSystemPath fullFilename);
    public void SetFileZone(FileSystemPath fullFilename, SecurityZone zoneId);
    public void RemoveZoneId(FileSystemPath fullFilename);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Common.Util.Shell.ContextBoundSettingsFileLive : object {
    private IContextBoundSettingsStoreLive mySettings;
    private Action myFlush;
    private IProperty`1<FileSystemPath> myFilePath;
    public IProperty`1<FileSystemPath> FilePath { get; }
    public IEnumerable`1<ISettingsStorageMountPoint> InvolvedMountPoints { get; }
    public bool IsIgnoringReadonlyFlag { get; public set; }
    public ISettingsStore SettingsStore { get; }
    public ISettingsSchema Schema { get; }
    public ISignal`1<SettingsStoreChangeArgs> Changed { get; }
    public IListEvents`1<ISettingsStorageMountPoint> InvolvedMountPointsLive { get; }
    public ContextBoundSettingsFileLive(IProperty`1<FileSystemPath> filePath, Action flush, IContextBoundSettingsStoreLive settings);
    public sealed virtual IProperty`1<FileSystemPath> get_FilePath();
    public sealed virtual void Flush();
    public sealed virtual object GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual Object[] GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual object GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public sealed virtual void RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual bool IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IEnumerable`1<ISettingsStorageMountPoint> get_InvolvedMountPoints();
    public sealed virtual bool get_IsIgnoringReadonlyFlag();
    public sealed virtual void set_IsIgnoringReadonlyFlag(bool value);
    public sealed virtual ISettingsStore get_SettingsStore();
    public sealed virtual ISettingsSchema get_Schema();
    public sealed virtual SettingsStoreChangeArgs GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IDictionary`2<object, object> EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IEnumerable`1<object> EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
    public sealed virtual ISignal`1<SettingsStoreChangeArgs> get_Changed();
    public sealed virtual IProperty`1<TValue> GetValueProperty(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IListEvents`1<ISettingsStorageMountPoint> get_InvolvedMountPointsLive();
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.DataProviderEx : object {
    [ExtensionAttribute]
public static IDataProvider`1<T> NotifyCommandChanges(IDataProvider`1<T> provider);
    [CompilerGeneratedAttribute]
private static T <NotifyCommandChanges>b__0(T t);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.Util.Shell.IDotCommonSharedZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.Util.Shell.IStandaloneCmdWithDotCommonConsoleHelpersEnvironmentZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.Util.Shell.IViewerOpenerZone {
}
internal class JetBrains.Common.Util.Shell.Launcher.ComponentContainerMixin : object {
    private IDataProxy`1<IComponentContainer> myDataProxy;
    public IDataProvider`1<IComponentContainer> Data { get; }
    public void SetValue(IComponentContainer container);
    public IDataProvider`1<IComponentContainer> get_Data();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.Util.Shell.Launcher.IExternalStorageEnvironmentZone {
}
[ShellComponentAttribute("0", "0", "0")]
internal class JetBrains.Common.Util.Shell.Launcher.ShellComponents.ComponentContainerExtractorComponent : object {
    public ComponentContainerExtractorComponent(IComponentContainer container, ComponentContainerMixin mixin);
}
[ZoneMarkerAttribute]
public class JetBrains.Common.Util.Shell.Launcher.ShellComponents.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.Launcher.ShellLauncher : object {
    [CompilerGeneratedAttribute]
private static Func`1<ProductBinariesDirArtifact> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<IDataProvider`1<IComponentContainer>, IComponentContainer> CS$<>9__CachedAnonymousMethodDelegatea;
    public static IDataProvider`1<IComponentContainer> BeginRun(Type zone);
    public static IDataProvider`1<IComponentContainer> BeginRun();
    private static void StartShell(ComponentContainerMixin componentContainerMixin, Type zone);
    [ExtensionAttribute]
public static IRemotableReference`1<IComponentContainer> StartRemoteShell(IRemoteCommunicator comm);
    [ExtensionAttribute]
public static IRemotableReference`1<IComponentContainer> StartRemoteShell(IRemoteCommunicator comm, Type zone);
    [CompilerGeneratedAttribute]
private static ProductBinariesDirArtifact <StartShell>b__3();
    [CompilerGeneratedAttribute]
private static IComponentContainer <StartRemoteShell>b__6(IDataProvider`1<IComponentContainer> dp);
}
[UsedImplicitlyAttribute]
public class JetBrains.Common.Util.Shell.LiveSettings : object {
    private IContextBoundSettingsStoreLive mySettings;
    public LiveSettings(IContextBoundSettingsStoreLive settings);
    public sealed virtual void CreateIndexedKey(Type settingKeyType, object indexKey, IDictionary`2<Type, object> parentIndex);
    public sealed virtual void DeleteIndexedKey(Type settingKeyType, object indexKey, IDictionary`2<Type, object> parentIndex);
    public sealed virtual void SetKey(Type settingKeyType, object value, object indexKey, IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual object GetKey(Type settingKeyType, object indexKey, IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual TEntryValue GetIndexedValue(Expression`1<Func`2<TKey, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambda, TEntryIndex entryIndex, object indexKey, IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual void SetIndexedValue(Expression`1<Func`2<TKey, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambda, TEntryIndex entryIndex, TEntryValue value, object indexKey, IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual void RemoveIndexedValue(Expression`1<Func`2<TKey, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambda, TEntryIndex entryIndex, object indexKey, IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> EnumerateIndexedValues(Expression`1<Func`2<TKey, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambda, object indexKey, IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual void ResetValue(Expression`1<Func`2<TKey, TProperty>> lambda, object indexKey);
    public sealed virtual IProperty`1<TProperty> GetProperty(Expression`1<Func`2<TKey, TProperty>> lambda, object indexKey, Lifetime lifetime, IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual IEnumerable`1<object> EnumKeyIndices(Type settingKeyType, IDictionary`2<Type, object> parentIndexKeys);
    public IEnumerable`1<Pair`2<TIndexKey, TKey>> EnumIndexedKeys(IDictionary`2<Type, object> parentIndexKeys);
    public sealed virtual IEnumerable`1<Pair`2<object, object>> EnumerateIndexedKeys(Type settingKeyType, IDictionary`2<Type, object> parentIndexKeys, bool ignoreKeyIsDefined);
    public sealed virtual void AdviseChange(Action callback, Type settingKeyType, Lifetime lifetime);
    public sealed virtual void AdviseChange(Expression`1<Func`2<TKey, TValue>> lambdaexpression, Action callback, Lifetime lifetime);
    private IDictionary`2<SettingsKey, object> MakeKeyIndices(SettingsKey settingsKey, object indexKey, IEnumerable`1<KeyValuePair`2<Type, object>> parentIndexKeys);
    [CompilerGeneratedAttribute]
private static Pair`2<TEntryIndex, TEntryValue> <EnumerateIndexedValues>b__0(KeyValuePair`2<object, object> pair);
}
public abstract class JetBrains.Common.Util.Shell.Options.IgnoreEnvironmentOptionPages : OptionPagesList {
    private HashSet`1<string> myDisabledPageIds;
    private HashSet`1<string> myExplicitlyEnabledPageIds;
    [CompilerGeneratedAttribute]
private static Func`2<OptionsPageEntity, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<OptionsPageEntity, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<TreeItem`1<OptionsPageEntity>, IEnumerable`1<OptionsPageEntity>> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<TreeItem`1<OptionsPageEntity>, IEnumerable`1<TreeItem`1<OptionsPageEntity>>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<TreeItem`1<OptionsPageEntity>, OptionsPageEntity> CS$<>9__CachedAnonymousMethodDelegate9;
    protected IgnoreEnvironmentOptionPages(ShellPartCatalogSet catalogueSet, ProductConfigurations productConfigurations, IEnumerable`1<string> explicitlyEnabledPageIds);
    protected virtual IEnumerable`1<OptionsPageEntity> GetAllOptionsPageEntities();
    protected virtual bool IsPageInConfiguration(OptionsPageAttribute attribute, ProductConfigurations productConfigurations);
    private bool IsDisabled(OptionsPageAttribute attribute);
    protected HashSet`1<string> GetExplicitlyEnabledPageIds();
    [CompilerGeneratedAttribute]
private static string <GetAllOptionsPageEntities>b__0(OptionsPageEntity entity);
    [CompilerGeneratedAttribute]
private static string <GetAllOptionsPageEntities>b__1(OptionsPageEntity entity);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<OptionsPageEntity> <GetAllOptionsPageEntities>b__2(TreeItem`1<OptionsPageEntity> root);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<TreeItem`1<OptionsPageEntity>> <GetAllOptionsPageEntities>b__3(TreeItem`1<OptionsPageEntity> treeItem);
    [CompilerGeneratedAttribute]
private static OptionsPageEntity <GetAllOptionsPageEntities>b__4(TreeItem`1<OptionsPageEntity> treeItem);
}
public class JetBrains.Common.Util.Shell.Properties.ExemptFromZoningValidation : object {
    [BuildStepAttribute]
public static IEnumerable`1<SuppressMissingRequirementValidation> SuppressZoneValidation();
}
public class JetBrains.Common.Util.Shell.Remoting.Helpers.ExternalStorageWithShell : ValueType {
    public IRemoteCommunicator Comm;
    public IRemotableReference`1<IComponentContainer> ComponentContainer;
}
public class JetBrains.Common.Util.Shell.Remoting.Helpers.RemotableReferenceToExternalStorageComponentValueResolver : object {
    private Dictionary`2<Type, IValueDescriptor> myReferencesCache;
    private IRemotableReference`1<IComponentContainer> myRemoteComponentContainer;
    public RemotableReferenceToExternalStorageComponentValueResolver(IRemotableReference`1<IComponentContainer> remoteComponentContainer);
    public sealed virtual IValueDescriptor Resolve(TRequest request, IValueResolveContext context);
    [NotNullAttribute]
private static IValueDescriptor Create(Type underType, IRemotableReference`1<IComponentContainer> remoteComponentContainer);
}
public class JetBrains.Common.Util.Shell.Remoting.Helpers.RemotableReferenceToLocalComponentValueResolver : object {
    public sealed virtual IValueDescriptor Resolve(TRequest request, IValueResolveContext context);
    [NotNullAttribute]
private static IValueDescriptor Create(Type underType, IValueDescriptor underDescriptor);
}
public interface JetBrains.Common.Util.Shell.Remoting.Interfaces.IExternalStoragePool {
    public abstract virtual ExternalStorageWithShell GetStorage(Lifetime lifetime);
}
public interface JetBrains.Common.Util.Shell.Remoting.Interfaces.IUseExternalStorage {
    public IDataProvider`1<bool> UseExternalStorage { get; }
    public abstract virtual IDataProvider`1<bool> get_UseExternalStorage();
}
[SettingsKeyAttribute("System.Reflection.Missing", "Remote Storage")]
public class JetBrains.Common.Util.Shell.Remoting.Settings.RemoteStorageSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Use local storage")]
public bool AllowRemoteStorage;
}
[ShellComponentAttribute]
public class JetBrains.Common.Util.Shell.Remoting.ShellComponents.ExternalStoragePool : object {
    private Lifetime myLifetime;
    private IExternalStorage myExternalStorage;
    private IRemotableReference`1<IComponentContainer> myExternalShell;
    private LifetimeDefinition myExternalStorageLifetime;
    private Dispatcher myDispatcher;
    public ExternalStoragePool(IUseExternalStorage settings, Lifetime lifetime);
    protected virtual Type EnvironmentZone();
    private void OnCommTerminated(IRemoteCommunicator comm);
    private void InitStorage();
    private void DisposeStorage();
    public sealed virtual ExternalStorageWithShell GetStorage(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(bool remote);
    [CompilerGeneratedAttribute]
private void <InitStorage>b__2(IRemoteCommunicator c);
}
[ShellComponentAttribute]
public class JetBrains.Common.Util.Shell.Remoting.ShellComponents.UseExternalStorageSettingComponent : object {
    [CompilerGeneratedAttribute]
private IDataProvider`1<bool> <UseExternalStorage>k__BackingField;
    public IDataProvider`1<bool> UseExternalStorage { get; protected set; }
    public UseExternalStorageSettingComponent(Lifetime lifetime, ISettingsStore settings);
    [CompilerGeneratedAttribute]
public sealed virtual IDataProvider`1<bool> get_UseExternalStorage();
    [CompilerGeneratedAttribute]
protected void set_UseExternalStorage(IDataProvider`1<bool> value);
}
[ZoneMarkerAttribute]
public class JetBrains.Common.Util.Shell.Remoting.ShellComponents.ZoneMarker : object {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.Util.Shell.Remoting.Zones.ILocalSideZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.Util.Shell.Remoting.Zones.IRemoteEnvironmentZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Common.Util.Shell.Remoting.Zones.IRemoteSideZone {
}
public class JetBrains.Common.Util.Shell.Resources.SearchThemedIcons : object {
}
[ZoneMarkerAttribute]
public class JetBrains.Common.Util.Shell.resources.ZoneMarker : object {
}
public class JetBrains.Common.Util.Shell.SettingsFileLive : LiveSettings {
    private IContextBoundSettingsFileLive mySettingsFile;
    public IProperty`1<FileSystemPath> SettingsFilePath { get; }
    public SettingsFileLive(IContextBoundSettingsFileLive settingsFile);
    public sealed virtual IProperty`1<FileSystemPath> get_SettingsFilePath();
    public sealed virtual void Flush();
}
public static class JetBrains.Common.Util.Shell.Viewers.ActivateWindow : object {
    public static void ByPID(int processId);
    public static void ByWindowHandle(IntPtr mainWindowHandle);
}
public class JetBrains.Common.Util.Shell.Viewers.ActiveViewer : ValueType {
    [CompilerGeneratedAttribute]
private int <PID>k__BackingField;
    [CompilerGeneratedAttribute]
private ActiveViewerState <State>k__BackingField;
    public int PID { get; public set; }
    public ActiveViewerState State { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PID();
    [CompilerGeneratedAttribute]
public void set_PID(int value);
    [CompilerGeneratedAttribute]
public ActiveViewerState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ActiveViewerState value);
}
public enum JetBrains.Common.Util.Shell.Viewers.ActiveViewerState : Enum {
    public int value__;
    public static ActiveViewerState Normal;
    public static ActiveViewerState Processing;
    public static ActiveViewerState Starting;
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Common.Util.Shell.Viewers.InstanceManager.IRemoteInstance {
    public int PID { get; }
    public bool IsVisualStudio { get; }
    public string Item { get; }
    public abstract virtual int get_PID();
    public abstract virtual bool get_IsVisualStudio();
    public abstract virtual string get_Item(string property);
}
public interface JetBrains.Common.Util.Shell.Viewers.InstanceManager.IRemotePropertyProvider {
    public abstract virtual string GetValue(string propertyName);
}
public static class JetBrains.Common.Util.Shell.Viewers.InstanceManager.nameof`1 : object {
    public static string Method(Expression`1<Func`2<T, TV>> property);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.Viewers.InstanceManager.RemoteInstanceProperties : object {
    public static string SnapshotPath;
    public static string SnapshotIsLocked;
    [ExtensionAttribute]
public static string GetSnapshotPath(IRemoteInstance remoteInstance);
    [ExtensionAttribute]
public static bool GetSnapshotIsLocked(IRemoteInstance remoteInstance);
}
[ShellComponentAttribute]
public class JetBrains.Common.Util.Shell.Viewers.InstanceManager.RemoteInstancesManager : object {
    private static string MonikerPrefix;
    private static BindingFlags Flags;
    private string myMonikerName;
    private List`1<IRemotePropertyProvider> myPropertyProviders;
    private IRemoteInstance myInstance;
    private static ILogger Log;
    [CompilerGeneratedAttribute]
private static Func`2<BoundObject`1<object>, RemoteInstance> CS$<>9__CachedAnonymousMethodDelegate2;
    public IRemoteInstance ThisInstance { get; }
    public ICollection`1<IRemoteInstance> OtherInstances { get; }
    public RemoteInstancesManager(Lifetime lifetime, IVisualStudioIndicator isVisualStudio);
    private static RemoteInstancesManager();
    public void AddRemotePropertyProvider(Lifetime lifetime, IRemotePropertyProvider propertyProvider);
    public IRemoteInstance get_ThisInstance();
    public ICollection`1<IRemoteInstance> get_OtherInstances();
    [CompilerGeneratedAttribute]
private bool <get_OtherInstances>b__0(string name);
    [CompilerGeneratedAttribute]
private static RemoteInstance <get_OtherInstances>b__1(BoundObject`1<object> obj);
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.Viewers.InstanceManager.RemoteInstancesManagerEx : object {
    private static ILogger Log;
    private static RemoteInstancesManagerEx();
    [ExtensionAttribute]
public static bool SnapshotAlreadyOpened(RemoteInstancesManager remoteInstancesManager, FileSystemPath indexFile);
    [ExtensionAttribute]
public static IEnumerable`1<IRemoteInstance> InstancesWithSnapshot(RemoteInstancesManager remoteInstancesManager, FileSystemPath indexFile);
    [ExtensionAttribute]
public static bool TryFindInstanceWithSnapshot(RemoteInstancesManager remoteInstancesManager, FileSystemPath indexFile, IRemoteInstance& instance);
}
[ShellComponentAttribute]
public class JetBrains.Common.Util.Shell.Viewers.InstanceManager.RemotePropertyRegistrator : object {
    private static ILogger Log;
    private RemoteInstancesManager myRemoteInstancesManager;
    public RemotePropertyRegistrator(RemoteInstancesManager remoteInstancesManager);
    private static RemotePropertyRegistrator();
    public void Register(Lifetime lifetime, string key, Func`1<string> valueGetter);
}
public interface JetBrains.Common.Util.Shell.Viewers.ISnapshotViewer {
    [CanBeNullAttribute]
public FileSystemPath Executable { get; }
    public string StandardExtension { get; }
    public string SnapshotDescription { get; }
    public abstract virtual bool CanOpen(FileSystemPath path);
    public abstract virtual void Open(FileSystemPath path, string presentablename, string reason);
    public abstract virtual FileSystemPath get_Executable();
    public abstract virtual string get_StandardExtension();
    public abstract virtual string get_SnapshotDescription();
}
public interface JetBrains.Common.Util.Shell.Viewers.IVisualStudioIndicator {
}
public class JetBrains.Common.Util.Shell.Viewers.MultipleSnapshotViewersTracker : object {
    private RemoteInstancesManager myRemoteInstancesManager;
    private IOneToManyMap`3<FileSystemPath, Process, IList`1<Process>> mySnapshotToProcessMap;
    private TimeSpan myMaximumOpeningTime;
    private static ILogger Log;
    [CompilerGeneratedAttribute]
private static Func`2<IRemoteInstance, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IRemoteInstance, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public MultipleSnapshotViewersTracker(RemoteInstancesManager remoteInstancesManager);
    private static MultipleSnapshotViewersTracker();
    public Nullable`1<ActiveViewer> GetConflictingViewerBySnapshot(FileSystemPath path);
    private bool ProcessRecordExpired(Process p);
    private bool ViewerIsOpeningRightNow(FileSystemPath path, Int32& pid);
    public void RegisterStartedInstance(FileSystemPath path, Process process);
    [CompilerGeneratedAttribute]
private static bool <GetConflictingViewerBySnapshot>b__3(IRemoteInstance i);
    [CompilerGeneratedAttribute]
private static bool <GetConflictingViewerBySnapshot>b__4(IRemoteInstance instance);
}
[ShellComponentAttribute]
public class JetBrains.Common.Util.Shell.Viewers.OpenSnapshotUtil : object {
    private IEnumerable`1<ISnapshotViewer> myViewers;
    [CompilerGeneratedAttribute]
private static Func`2<ISnapshotViewer, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate4;
    public IEnumerable`1<FileSystemPath> Executables { get; }
    public OpenSnapshotUtil(IEnumerable`1<ISnapshotViewer> viewers);
    public bool CanOpen(FileSystemPath path);
    public void Open(FileSystemPath path, string presentablename, string reason);
    public IEnumerable`1<FileSystemPath> get_Executables();
    public static bool AskForSwitchingToProcess(ActiveViewerState state);
    [CompilerGeneratedAttribute]
private static FileSystemPath <get_Executables>b__3(ISnapshotViewer v);
}
[ShellComponentAttribute]
public class JetBrains.Common.Util.Shell.Viewers.ParamsForInheritedSnapshotViewerComponent : object {
    private IProductCommandLine myCommandLine;
    private ICollection`1<string> myParamsForPassToInheritor;
    public ICollection`1<string> ParamsForPassToInheritor { get; }
    public ParamsForInheritedSnapshotViewerComponent(IProductCommandLine commandLine);
    public ICollection`1<string> get_ParamsForPassToInheritor();
    public IEnumerable`1<string> GetParamsForInheritor();
}
public abstract class JetBrains.Common.Util.Shell.Viewers.SnapshotViewerBase : object {
    public static string PresentableSnapshotNameOptionKey;
    public static string PresentableReasonOptionKey;
    private static bool Is64BitOperatingSystem;
    private ParamsForInheritedSnapshotViewerComponent myParamsForInheritedSnapshotViewer;
    private InstalledProductsDiscoveryComponent myProductsDiscovery;
    private string myInstallationHostName;
    private Lazy`1<FileSystemPath> myViewerAppPath;
    private MultipleSnapshotViewersTracker myInstancesTracker;
    private static ILogger Log;
    protected string ViewerAppName { get; }
    public string StandardExtension { get; }
    public string SnapshotDescription { get; }
    public FileSystemPath Executable { get; }
    protected SnapshotViewerBase(Lifetime lifetime, ParamsForInheritedSnapshotViewerComponent paramsForInheritedSnapshotViewer, InstalledProductsDiscoveryComponent productsDiscovery, string installationHostName, RemoteInstancesManager remoteInstancesManager);
    private static SnapshotViewerBase();
    protected abstract virtual string get_ViewerAppName();
    public abstract virtual bool CanOpen(FileSystemPath path);
    public sealed virtual void Open(FileSystemPath path, string presentableName, string reason);
    private void StartNewViewerInstance(FileSystemPath path, string presentableName, string reason);
    private IEnumerable`1<string> BuildCommandLineParams(FileSystemPath path, string presentableName, string reason);
    public abstract virtual string get_StandardExtension();
    public abstract virtual string get_SnapshotDescription();
    public sealed virtual FileSystemPath get_Executable();
    private FileSystemPath GetViewerPath();
    private string GetViewerFileName();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
[ZoneMarkerAttribute]
public class JetBrains.Common.Util.Shell.Viewers.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.Common.Util.Shell.Zoning.ZoneFilterHelpers : object {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, IEnumerable`1<PartCatalogType>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Comparison`1<Pair`2<PartCatalogType, PartCatalogAttribute>> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Comparison`1<Pair`2<PartCatalogType, PartCatalogAttribute>> CS$<>9__CachedAnonymousMethodDelegate8;
    private static ZoneFilterHelpers();
    [ExtensionAttribute]
public static IPartCatalogSet FilterCatalogSetWithExtraZones(IPartCatalogSet inputCatalogueSet, Lifetime lifetime, ProductConfigurations configurations, Type[] zones);
    public static string GetDump(IPartCatalogSet catalogSet, Type attributeType);
    public static ComponentContainer CreateChainedComponentContainerWithExtraZones(Lifetime lifetime, string id, FullPartCatalogSet catalogSet, IComponentContainer parentContainer, Type[] zones);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PartCatalogType> <GetDump>b__3(PartCatalog c);
    [CompilerGeneratedAttribute]
private static int <GetDump>b__4(Pair`2<PartCatalogType, PartCatalogAttribute> l, Pair`2<PartCatalogType, PartCatalogAttribute> r);
    [CompilerGeneratedAttribute]
private static int <GetDump>b__5(Pair`2<PartCatalogType, PartCatalogAttribute> l, Pair`2<PartCatalogType, PartCatalogAttribute> r);
}
public class RenderedIcons_ByPackResourceNameHash_AC7B30659F7F72E2B05C0F8DD0D0986A : object {
    public static Byte[] FoundClass__SymbolsVs11Color__png__x1;
    public static Byte[] FoundClass__SymbolsVs11Gray__png__x1;
    public static Byte[] FoundClass__SymbolsVs11GrayDark__png__x1;
    public static Byte[] FoundMethod__SymbolsVs11Color__png__x1;
    public static Byte[] FoundMethod__SymbolsVs11Gray__png__x1;
    public static Byte[] FoundMethod__SymbolsVs11GrayDark__png__x1;
    public static Byte[] FoundNamespace__SymbolsVs11Color__png__x1;
    public static Byte[] FoundNamespace__SymbolsVs11Gray__png__x1;
    public static Byte[] FoundNamespace__SymbolsVs11GrayDark__png__x1;
    public static Byte[] FoundClass__SymbolsVs11Color__png__x2;
    public static Byte[] FoundClass__SymbolsVs11Gray__png__x2;
    public static Byte[] FoundClass__SymbolsVs11GrayDark__png__x2;
    public static Byte[] FoundMethod__SymbolsVs11Color__png__x2;
    public static Byte[] FoundMethod__SymbolsVs11Gray__png__x2;
    public static Byte[] FoundMethod__SymbolsVs11GrayDark__png__x2;
    public static Byte[] FoundNamespace__SymbolsVs11Color__png__x2;
    public static Byte[] FoundNamespace__SymbolsVs11Gray__png__x2;
    public static Byte[] FoundNamespace__SymbolsVs11GrayDark__png__x2;
    private static RenderedIcons_ByPackResourceNameHash_AC7B30659F7F72E2B05C0F8DD0D0986A();
}
