[ExtensionAttribute]
internal static class JetBrains.Etw.BuildScript.EtwNativeFiles : object {
    [ExtensionAttribute]
[NotNullAttribute]
private static string GetFolderName(TargetType targetType);
    [NotNullAttribute]
private static RelativePath GetDir(TargetType targetType, ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetEtwHost(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetEtwCollector(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetEtwApi(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetEtwCollectorBoostTests(ProcessorArchitecture architecture, bool debug);
}
internal static class JetBrains.Etw.BuildScript.EtwNativeNames : object {
    private static string Prefix;
    public static string Api;
    public static string CollectorHost;
    public static string Collector;
    public static string CollectorBoostTests;
    private static EtwNativeNames();
}
public class JetBrains.Etw.EtwControllerApi : object {
    private LifetimeDefinition ld;
    private IntPtr etwController;
    private List`1<NativeDelegate> nativeDelegates;
    [CompilerGeneratedAttribute]
private static Func`2<ICollectorParam, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate1f;
    private EtwControllerApi(Lifetime lifetime, ErrorCallback errorCallback, FileSystemPath logPath, FileSystemPath collectorPath, IEnumerable`1<ICollectorParam> collectorParams, bool runHostAllowed, HostLaunchMode collectorHostMode, HostDeleteOptions hostDeleteOptions, FileSystemPath collectorHostPath);
    private EtwControllerApi(Lifetime lifetime, ErrorCallback errorCallback, EtlEndsCallback etlEndsCallback, string sessionName, FileSystemPath etlPath, FileSystemPath collectorPath, IEnumerable`1<ICollectorParam> collectorParams, FileSystemPath etlPathKernel);
    [UsedImplicitlyAttribute]
public static Task`1<EtwControllerApi> Create(Lifetime lifetime, ErrorCallback errorCallback, bool runHostAllowed, HostLaunchMode collectorHostMode, HostDeleteOptions hostDeleteOptions, FileSystemPath collectorHostPath, FileSystemPath collectorPath, IEnumerable`1<ICollectorParam> collectorParams, FileSystemPath logPath);
    [UsedImplicitlyAttribute]
public static Task`1<EtwControllerApi> Open(Lifetime lifetime, ErrorCallback errorCallback, EtlEndsCallback etlEndsCallback, string sessionName, FileSystemPath etlPath, FileSystemPath collectorPath, IEnumerable`1<ICollectorParam> collectorParams, FileSystemPath etlPathKernel);
    [UsedImplicitlyAttribute]
public Task`1<IEtwMonitoring> Monitoring(UInt32 parent, string processPath, string cmd, UInt32 limit, EtwSessionStartedCallback sessionStartedCallback, EtwSessionEndedCallback sessionEndedCallback, SnapshotProgressCallback snapshotProgressCallback, SnapshotPathGenCallback snapshotPathGenCallback);
    [UsedImplicitlyAttribute]
public Task`1<IEtwSession> Attach(UInt32 procId, EtwSessionEndedCallback sessionEndedCallback, SnapshotProgressCallback snapshotProgressCallback);
    [UsedImplicitlyAttribute]
public Task Close();
    public void Terminate();
    private void SetOnLifetime(Lifetime lifetime);
    [NotNullAttribute]
private static string BuildCommandLine(FileSystemPath collectorPath, IEnumerable`1<ICollectorParam> collectorParams);
    private static Task RunTask(Action func);
    private static Task`1<T> RunTask(Func`1<T> func);
    private static Task`1<FileSystemPath> CreateSnapshotTask(IntPtr snapshotTaskPtr);
    [CompilerGeneratedAttribute]
private void <Close>b__1c();
    [CompilerGeneratedAttribute]
private void <SetOnLifetime>b__1d();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <BuildCommandLine>b__1e(ICollectorParam x);
}
public class JetBrains.Etw.EtwControllerException : Exception {
    [CompilerGeneratedAttribute]
private string <EtwControllerMessage>k__BackingField;
    public string EtwControllerMessage { get; private set; }
    public EtwControllerException(string errorMessage, string controllerMessage);
    [CompilerGeneratedAttribute]
public string get_EtwControllerMessage();
    [CompilerGeneratedAttribute]
private void set_EtwControllerMessage(string value);
}
public static class JetBrains.Etw.EtwFiles : object {
    private static FileSystemPath ourEtwDirectory;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<FileSystemPath, Marker>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    private static EtwFiles();
    [NotNullAttribute]
public static String[] GetProcesses(ProcessorArchitecture architecture);
    private static bool IsIncludePdb(bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetServerFiles(ProcessorArchitecture architecture, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetClientFiles(ProcessorArchitecture architecture, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetEtwFiles(ProcessorArchitecture architecture, bool debug, bool includePdb);
    [NotNullAttribute]
public static Tuple`2[] MakeShadowCopy(Tuple`2[] etwBinFiles, FileSystemPath outDir);
    [CompilerGeneratedAttribute]
private static bool <MakeShadowCopy>b__0(Tuple`2<FileSystemPath, Marker> x);
}
public static class JetBrains.Etw.EtwHResults : object {
    public static HResults ETW_E_INTERNAL;
    public static HResults ETW_E_ETW_ALREADY_IN_USE;
    public static HResults ETW_E_PROVIDER_CANNOT_START;
    public static HResults ETW_E_CANNOT_LAUNCH_XPERF;
    public static HResults ETW_E_IO_ERROR;
    public static HResults ETW_E_DISK_IS_FULL;
    public static HResults ETW_E_VERIFY_EXE;
    [CanBeNullAttribute]
public static string TryToTranslate(HResults hr);
}
public static class JetBrains.Etw.EtwLaunchUtils : object {
    public static bool GetHasAdministrativeRights();
    public static void PrepeareEtwHostToDeleteOnLifetime(Lifetime lifetime, FileSystemPath procFilePath, bool isDeleteFullDir);
}
public interface JetBrains.Etw.IEtwMonitoring {
    public abstract virtual Task Cancel();
    public abstract virtual void Terminate();
}
public interface JetBrains.Etw.IEtwSession {
    public int ProcessId { get; }
    public abstract virtual Task`1<Task`1<FileSystemPath>> SnapshotStart(FileSystemPath snapshotPath);
    public abstract virtual Task SnapshotGet();
    public abstract virtual Task Detach();
    public abstract virtual void Terminate();
    public abstract virtual IntPtr GetHandle();
    public abstract virtual int get_ProcessId();
}
internal class JetBrains.Etw.Impl.ErrorInfo : ValueType {
    public int code;
    public IntPtr message;
}
internal static class JetBrains.Etw.Impl.EtwController : object {
    public static ReleaseStringDelegate ReleaseString;
    public static ReleaseUnicodeStringDelegate ReleaseUnicodeString;
    public static ReleaseErrorInfoDelegate ReleaseErrorInfo;
    public static SnapshotTaskResultDelegate SnapshotTaskResult;
    public static ReleaseSnapshotTaskDelegate ReleaseSnapshotTask;
    public static CreateRealTimeEtwControllerDelegate CreateRealTimeEtwController;
    public static CreateEtlEtwControllerDelegate CreateEtlEtwController;
    public static ReleaseEtwControllerDelegate ReleaseEtwController;
    public static MonitoringDelegate Monitoring;
    public static MonitoringCancelDelegate MonitoringCancel;
    public static ReleaseEtwMonitoringSessionDelegate ReleaseEtwMonitoringSession;
    public static AttachDelegate Attach;
    public static GetEtwSessionProcessIdDelegate GetEtwSessionProcessId;
    public static SnapshotStartDelegate SnapshotStart;
    public static SnapshotGetDelegate SnapshotGet;
    public static ReleaseEtwSessionDelegate ReleaseEtwSession;
    public static DetachDelegate Detach;
    public static CloseDelegate Close;
    private static EtwController();
}
public enum JetBrains.Etw.Param.EtwCollectorLogIndex : Enum {
    public byte value__;
    public static EtwCollectorLogIndex SymbolResolver;
    public static EtwCollectorLogIndex Kernel;
    public static EtwCollectorLogIndex Callstack;
    public static EtwCollectorLogIndex Thread;
}
[FlagsAttribute]
public enum JetBrains.Etw.Param.EtwCollectorLogMask : Enum {
    public UInt32 value__;
    public static EtwCollectorLogMask None;
    public static EtwCollectorLogMask SymbolResolver;
    public static EtwCollectorLogMask Kernel;
    public static EtwCollectorLogMask Callstack;
    public static EtwCollectorLogMask Thread;
}
public interface JetBrains.Etw.Param.ICollectorParam {
    [NotNullAttribute]
public abstract virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.LightweightParam : object {
    public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.LoggerDirectoryParam : object {
    private FileSystemPath myDirectory;
    public LoggerDirectoryParam(FileSystemPath directory);
    public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.LoggerMaskParam : object {
    private EtwCollectorLogMask myLogMask;
    public LoggerMaskParam(EtwCollectorLogMask logMask);
    public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.TopRootFactorParam : object {
    private UInt32 myFactor;
    public TopRootFactorParam(UInt32 factor);
    public sealed virtual String[] GetArguments();
}
public class JetBrains.Etw.Param.XperfParam : object {
    private string myXperfPath;
    public XperfParam(string xperfPath);
    public sealed virtual String[] GetArguments();
}
