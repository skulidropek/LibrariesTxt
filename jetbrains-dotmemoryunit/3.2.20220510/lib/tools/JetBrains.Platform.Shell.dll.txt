public class JetBrains.Application.AbstractTreeBuilder.AbstractTreeBuilder : object {
    private IAbstractTreeControl myTreeControl;
    private IAbstractTreeStructure myTreeStructure;
    private ITreeStructurePresenter myPresenter;
    private IComparer`1<IAbstractTreeNode> myNodeComparer;
    private Dictionary`2<IAbstractTreeNode, object> myNodeToSavedItemMap;
    private JetHashSet`1<IAbstractTreeNode> myNodesWithDummyChild;
    private int myTransactionLevel;
    [CanBeNullAttribute]
private IShellLocks myShellLocks;
    public IComparer`1<IAbstractTreeNode> NodeComparer { get; public set; }
    public AbstractTreeBuilder(IAbstractTreeControl treeControl, IAbstractTreeStructure treeStructure, ITreeStructurePresenter presenter, bool buildTree, IShellLocks shellLocks);
    public void CheckConsistency();
    private void AddNodes(IList`1<IAbstractTreeNode> list, IAbstractTreeNode parentNode);
    public void UpdateAll();
    public void UpdateSubtree(IAbstractTreeNode rootNode, object rootItem);
    public void UpdateNode(IAbstractTreeNode rootNode, object rootItem);
    public void SortSubtree(IAbstractTreeNode rootNode);
    public IComparer`1<IAbstractTreeNode> get_NodeComparer();
    public void set_NodeComparer(IComparer`1<IAbstractTreeNode> value);
    private void OnExpandedChanged(IAbstractTreeControl treeControl, IAbstractTreeNode node);
    private void RemoveAllChildren(IAbstractTreeNode parentNode, bool physicallyRemove);
    private void UpdateChildren(IAbstractTreeNode parentNode);
    private void InitializeNewNode(IAbstractTreeNode node, object item);
    private void StartTransaction();
    private void EndTransaction();
    public void SortAll();
    private void ExecuteOrQueue(string actionName, Action action);
    public object ItemByNode(IAbstractTreeNode node);
    [ObsoleteAttribute("Doesn't dispose itemPath enumerator!")]
public void BuildNodeByPath(IEnumerable`1<object> itemsPath, Action`1<IAbstractTreeNode> onFinished);
    private void BuildNodeByPath(IAbstractTreeNode fromNode, IEnumerator`1<object> itemsPath, Action`1<IAbstractTreeNode> onFinished);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Application.AbstractTreeBuilder.ExpandedChangedHandler : MulticastDelegate {
    public ExpandedChangedHandler(object object, IntPtr method);
    public virtual void Invoke(IAbstractTreeControl treeControl, IAbstractTreeNode node);
    public virtual IAsyncResult BeginInvoke(IAbstractTreeControl treeControl, IAbstractTreeNode node, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface JetBrains.Application.AbstractTreeBuilder.IAbstractTreeControl {
    public IAbstractTreeNode Root { get; }
    public abstract virtual IAbstractTreeNode get_Root();
    public abstract virtual void add_ExpandedChanged(ExpandedChangedHandler value);
    public abstract virtual void remove_ExpandedChanged(ExpandedChangedHandler value);
    public abstract virtual void StartTransaction();
    public abstract virtual void EndTransaction();
}
public interface JetBrains.Application.AbstractTreeBuilder.IAbstractTreeNode {
    public IAbstractTreeNode Parent { get; }
    public IEnumerable`1<IAbstractTreeNode> Children { get; }
    public bool Expanded { get; public set; }
    public IPresentableItem PresentableItem { get; }
    public abstract virtual IAbstractTreeNode get_Parent();
    public abstract virtual IEnumerable`1<IAbstractTreeNode> get_Children();
    public abstract virtual bool get_Expanded();
    public abstract virtual void set_Expanded(bool value);
    public abstract virtual IAbstractTreeNode AddChild();
    public abstract virtual IAbstractTreeNode AddDummyChild();
    public abstract virtual void RemoveChild(IAbstractTreeNode child);
    public abstract virtual void SortChildren(IComparer`1<IAbstractTreeNode> nodeComparer);
    public abstract virtual IPresentableItem get_PresentableItem();
}
public interface JetBrains.Application.AbstractTreeBuilder.IAbstractTreeStructure {
    public object Root { get; }
    public bool AutoExpandSingleChild { get; }
    public abstract virtual object get_Root();
    public abstract virtual IEnumerable GetChildren(object item);
    public abstract virtual bool AreChildrenEquivalent(object child1, object child2);
    public abstract virtual int GetChildEquivalenceHashCode(object child);
    public abstract virtual object SaveItem(object item);
    public abstract virtual object RestoreItem(object o);
    public abstract virtual bool CanHaveChildren(object item);
    public abstract virtual bool IsInitiallyExpanded(object item);
    public abstract virtual bool get_AutoExpandSingleChild();
}
public interface JetBrains.Application.AbstractTreeBuilder.ITreeStructurePresenter {
    public abstract virtual void UpdateNode(IAbstractTreeNode node, object item);
    public abstract virtual void DisposeNode(IAbstractTreeNode node, object item);
}
public enum JetBrains.Application.Access : Enum {
    public int value__;
    public static Access None;
    public static Access PrimaryThread;
    public static Access AnyThread;
}
public class JetBrains.Application.ActivityTrackingNew.ActivityDescriptor : ValueType {
    [NotNullAttribute]
private string myGroup;
    [NotNullAttribute]
private string myId;
    [NotNullAttribute]
public string Group { get; }
    [NotNullAttribute]
public string Id { get; }
    public ActivityDescriptor(string group, string id);
    public string get_Group();
    public string get_Id();
    public static ActivityDescriptor OfAction(string actionId);
    public sealed virtual bool Equals(ActivityDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ActivityDescriptor left, ActivityDescriptor right);
    public static bool op_Inequality(ActivityDescriptor left, ActivityDescriptor right);
    public virtual string ToString();
}
public interface JetBrains.Application.ActivityTrackingNew.IActivityTracking {
    public abstract virtual void TrackAction(string actionId);
    public abstract virtual void TrackActivity(string activityGroup, string activityId, int count);
}
public interface JetBrains.Application.ActivityTrackingNew.IUsageStatisticsCounters {
    [NotNullAttribute]
public IProperty`1<bool> IsAvailable { get; }
    public abstract virtual IProperty`1<bool> get_IsAvailable();
    [NotNullAttribute]
public abstract virtual IProperty`1<int> GetActivityUsageCounter(Lifetime lifetime, ActivityDescriptor activityDescriptor);
}
[ShellComponentAttribute]
public class JetBrains.Application.ActivityTrackingNew.PermanentUserId : object {
    private static string InstallationIdDataName;
    private ISharedStorageAccess`1<Guid> myStorageAccess;
    public PermanentUserId(JetBrainsSharedStorage sharedStorage);
    public Guid GetUniqueUserId();
    private static Guid StringToGuid(string s);
    private static string GuidToString(Guid guid);
    [ObsoleteAttribute("Do not use the method. Inject the component.")]
public static PermanentUserId CreatePermanentUserId();
    [ObsoleteAttribute("Do not use the method. Inject the component.")]
public static Guid GetUniqueUserId2();
}
[ExtensionAttribute]
public static class JetBrains.Application.ActivityTrackingNew.UsageCounterProviderEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<int> GetActionUsageCounter(IUsageStatisticsCounters usageStatisticsCounters, Lifetime lifetime, string actionId);
}
[ShellComponentAttribute]
public class JetBrains.Application.ActivityTrackingNew.UsageStatistics : object {
    private IViewable`1<IActivityTracking> myTrackers;
    private IEnumerable`1<IActivityTracking> myTrackerList;
    public UsageStatistics(Lifetime lifetime, IViewable`1<IActivityTracking> trackers);
    public void TrackAction(string actionId);
    public void TrackActivity(string activityGroup, string activityId);
}
[ShellComponentAttribute]
public class JetBrains.Application.AdvancedSettingsLayersEditingTrait : object {
    public IProperty`1<bool> IsAdvancedLayerEditingOn;
    public AdvancedSettingsLayersEditingTrait(Lifetime lifetime, IViewable`1<ISettingsApplicationTrait> viewTraits, IEnumerable`1<ISettingsApplicationTrait> enumTraits);
}
[ShellComponentAttribute]
public class JetBrains.Application.ApplicationDescriptorUpdatesTmp : object {
    private Uri JetBrains.Application.IApplicationDescriptorUpdatesTmp.UpdatesFilterUri { get; }
    private sealed virtual override Uri JetBrains.Application.IApplicationDescriptorUpdatesTmp.get_UpdatesFilterUri();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.ApplicationHost : object {
    private IHostProductInfo myHostProductInfo;
    [CompilerGeneratedAttribute]
private HostInfo <HostInfo>k__BackingField;
    public HostInfo HostInfo { get; private set; }
    public IHostProductInfo HostProductInfo { get; }
    public ApplicationHost(HostInfo hostInfo, IHostProductInfo hostProductInfo);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_HostInfo();
    [CompilerGeneratedAttribute]
private void set_HostInfo(HostInfo value);
    public sealed virtual IHostProductInfo get_HostProductInfo();
    public sealed virtual FileSystemPath GetHostFolder(HostFolderLifetime folderLifetime, ApplicationHostDetails folderDetails);
    public sealed virtual RelativePath GetHostRelativeFolder(ApplicationHostDetails folderDetails);
    public sealed virtual string HostIdentifier(ApplicationHostDetails folderDetails);
}
public class JetBrains.Application.ApplicationPackageArtifactLocallyInstalled : ApplicationPackageArtifact {
    private static string SerializationIdentity;
    private FileSystemPath myLocalInstallDirectory;
    [NotNullAttribute]
public FileSystemPath LocalInstallDirectory { get; }
    public ApplicationPackageArtifactLocallyInstalled(IStructuredStorage sstg);
    public ApplicationPackageArtifactLocallyInstalled(CsexpReader reader);
    public ApplicationPackageArtifactLocallyInstalled(ApplicationPackageArtifact package, FileSystemPath localInstallDirectory);
    public ApplicationPackageArtifactLocallyInstalled(SubplatformName sname, JetSemanticVersion version, string companyNameHuman, string companyNameLegal, DateTime builtOn, Nullable`1<DateTime> bestBefore, Nullable`1<DateTime> birthDate, FileSystemPath localInstallDirectory, IEnumerable`1<ApplicationPackageFile> files, ICollection`1<ApplicationPackageReference> references);
    private static ApplicationPackageArtifactLocallyInstalled();
    public sealed virtual FileSystemPath get_LocalInstallDirectory();
    protected virtual void AssertValid();
    protected virtual void SerializeCore(CsexpArchive ar);
}
[ShellComponentAttribute]
public class JetBrains.Application.ApplicationPackagesFiles : object {
    private JetBinaryTree`2<RelativePath, Tuple`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>> myTree;
    public ApplicationPackagesFiles(ApplicationPackagesLocallyInstalled packages, ILogger logger);
    public IEnumerable`1<Tuple`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>> GetFiles(RelativePath root);
}
[ExtensionAttribute]
public static class JetBrains.Application.ApplicationPackagesFilesEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemPath> GetFileSystemPaths(ApplicationPackagesFiles applicationPackagesFiles, RelativePath root);
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemPath> GetExtensionsFileSystemPaths(ApplicationPackagesFiles applicationPackagesFiles, RelativePath root);
    [ExtensionAttribute]
public static IEnumerable`1<Tuple`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>> GetExtensionsFiles(ApplicationPackagesFiles applicationPackagesFiles, RelativePath root);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetFileSystemPaths>b__0(Tuple`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile> _);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetExtensionsFileSystemPaths>b__2(Tuple`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile> t);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.BuildRunnerEnvironmentCollectorComponent : BuildRunnerEnvironmentCollector {
    public BuildRunnerEnvironmentCollectorComponent(IInputArtifactStringTable stringtable, ILogger logger);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatch : object {
    public IListEvents`1<BuildEntityPointer> BuildEntryPoints;
    public ISignal`1<InOutEventArgs`2<BuildRunnerRequest, BuildRunnerSession>> BuildRequestedFull;
    public ISignal`1<InOutEventArgs`2<SimpleBuildRequest, BuildRunnerSession>> BuildRequestedSimple;
    public IListEvents`1<BuildRunnerSession> RunningBuildSessions;
    public BuildAppDispatch(Lifetime lifetime, ILogger logger);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatchActivateLogOnBuild : object {
    public BuildAppDispatchActivateLogOnBuild(Lifetime lifetimeComponent, BuildAppDispatch dispatch, BuildLog buildlog);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "VS version, Root suffix, Do not compile flag and other user build preferences.")]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatchSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Visual studio version for OpenInVs.")]
public string OpenInVsVisualStudioVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Visual studio version for LocalInstall.")]
public string VisualStudioVersion;
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatchTurnSimpleBuildRequestIntoFull : object {
    public BuildAppDispatchTurnSimpleBuildRequestIntoFull(Lifetime lifetime, BuildAppDispatch dispatch, IInputArtifactStringTable stringtable, BuildScriptEntrySources buildScriptSources, BuildRequestEntryBinaries buildRequestEntryBinaries, ILogger logger);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.RunBuildForEntryPointFromCommandLine : object {
    [CompilerGeneratedAttribute]
private static Func`2<State, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    public RunBuildForEntryPointFromCommandLine(SynchronizedLifetime lifeComponent, IProductCommandLine cmdline, BuildAppDispatch dispatch, IThreading threading, IStatusBar statusbar, ApplicationShutdownRequests shutdowner, ILogger logger);
    private static void Init_IndicatorPresentation(Lifetime lifetime, IProperty`1<State> State, IProperty`1<TimeSpan> ShutdownSecondsRemaining, StatusBarProgressIndicator indicator, string sRunBuildFor, TimeSpan InitialShutdownWaitTime);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__5(State state);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.RunBuildWhenAppDispatchRequires : object {
    public RunBuildWhenAppDispatchRequires(Lifetime lifetimeComponent, BuildAppDispatch dispatch, IIsolatedBuildRunners buildrunner, IBuildRunnerEnvironmentCollector enver, IThreading threading);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.Build.App.IBuildApplicationZone {
}
public interface JetBrains.Application.Build.App.IBuildRunnerEnvironmentCollector {
    [CanBeNullAttribute]
public abstract virtual BuildRunnerEnvironment TryGetBuildEnvironment();
}
[ZoneDefinitionAttribute]
public class JetBrains.Application.Build.App.ICmdlineBuildAppEnvironmentZone : object {
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.IsolatedBuildRunnersComponent : object {
    private Lazy`1<IIsolatedBuildRunners> myCore;
    public IsolatedBuildRunnersComponent(SynchronizedLifetime lifetime, IBuiltInBuildEngineExtraction builtInBuildEngineExtraction, IThreading threading, IComponentContainer container, JetEnvironment environment, ILogger logger);
    private static Type TryGetEngineImplementationFromCatalog(IPartCatalogSet catalogset, OnError onerror);
    private sealed virtual override BuildRunnerSession JetBrains.Build.Running.IIsolatedBuildRunners.BeginRunBuildScript(SynchronizedLifetime lifetime, BuildRunnerRequest request, BuildRunnerEnvironment environment);
}
[ZoneDefinitionAttribute]
public class JetBrains.Application.Build.App.ITeamCityBuildAppEnvironmentZone : object {
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.Application.Build.App.Params.BuildAppStartupArtifactValues : object {
    public BuildAppStartupArtifactValues(InputArtifactStringTableRawStorage stringtable, IProductCommandLine cmdline, ILogger Logger);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent : object {
    private InputArtifactStringTableRawStorage myStorage;
    private IInputArtifactStringTableIndexer JetBrains.Application.Build.Runner.IInputArtifactStringTable.Artifacts { get; }
    private IDictionaryEvents`2<string, string> JetBrains.Application.Build.Runner.IInputArtifactStringTable.MapArtifactNameToValue { get; }
    private IDictionaryEvents`2<StringSlice, String[]> JetBrains.Application.Build.Runner.IInputArtifactStringTable.MapLocalNameToFullNames { get; }
    public InputArtifactStringTableComponent(InputArtifactStringTableRawStorage storage, IEnumerable`1<IFillInputArtifactStringTableRawStorage> fillers);
    private sealed virtual override IInputArtifactStringTableIndexer JetBrains.Application.Build.Runner.IInputArtifactStringTable.get_Artifacts();
    private sealed virtual override IDictionaryEvents`2<string, string> JetBrains.Application.Build.Runner.IInputArtifactStringTable.get_MapArtifactNameToValue();
    private sealed virtual override IDictionaryEvents`2<StringSlice, String[]> JetBrains.Application.Build.Runner.IInputArtifactStringTable.get_MapLocalNameToFullNames();
    private sealed virtual override string JetBrains.Application.Build.Runner.IInputArtifactStringTable.TryGetPreferredFullNameByLocalName(StringSlice localname);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.BuildSettingsPerHomeDir : object {
    public Func`2<Lifetime, IContextBoundSettingsStoreLive> BindForCurrentHomeDir;
    public BuildSettingsPerHomeDir(ISettingsStore settingsStore, BuildSettingsPerHomeDirStorage buildSettingsPerHomeDirStorage);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.BuildSettingsPerHomeDirStorage : FileSettingsStorageProviderBase {
    public static string BuildSettingsFileName;
    public static string LayerId;
    private static Dictionary`2<PropertyId, object> ourMountsMetadata;
    [CompilerGeneratedAttribute]
private static Func`1<FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate5;
    public BuildSettingsPerHomeDirStorage(Lifetime lifetime, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    private static BuildSettingsPerHomeDirStorage();
    private static Property`1<FileSystemPath> GetPath(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetPath>b__4();
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "Extra artifacts for build.")]
public class JetBrains.Application.Build.App.Params.LocalSettings.BuildToolSettings : object {
    public static Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, string>>> ArtifactNameToValueExpression;
    [SettingsIndexedEntryAttribute("BuildArtifact.")]
public IIndexedEntry`2<string, string> ArtifactNameToValue;
    private static BuildToolSettings();
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.DevenvParametersForBuild : object {
    [NotNullAttribute]
private ILogger myLogger;
    public List`1<InstalledVs> InstalledVsVersions;
    public List`1<IInstalledIde> InstalledAllIdes;
    public IProperty`1<VsHive> LocalInstallSelectedVsVersion;
    public IProperty`1<IInstalledIde> OpenInIdeSelectedIdeVersion;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledVs, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Comparison`1<InstalledVs> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<VsHive, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledVisualStudio, string> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledRider, string> CS$<>9__CachedAnonymousMethodDelegate11;
    public DevenvParametersForBuild(Lifetime lifetime, ILogger logger, BuildSettingsPerHomeDir settingsStore, IInputArtifactStringTable stringtable, RiderDiscoveryHost riderDiscoveryHost);
    private void BindVsVersionTwoWay(Lifetime lifetime, IProperty`1<string> settingsVersion, IProperty`1<VsHive> modelVersion);
    private void BindSelectedIdeTwoWay(Lifetime lifetime, IProperty`1<string> settingsVersion, IProperty`1<IInstalledIde> modelVersion);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(InstalledVs x);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__1(InstalledVs a, InstalledVs b);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(LocalInstallTargetArtifact art);
    [CompilerGeneratedAttribute]
private VsHive <BindVsVersionTwoWay>b__6(string str);
    [CompilerGeneratedAttribute]
private static string <BindVsVersionTwoWay>b__8(VsHive ver);
    [CompilerGeneratedAttribute]
private IInstalledIde <BindSelectedIdeTwoWay>b__c(string str);
    [CompilerGeneratedAttribute]
private string <BindSelectedIdeTwoWay>b__d(IInstalledIde ver);
    [CompilerGeneratedAttribute]
private static string <BindSelectedIdeTwoWay>b__e(InstalledVisualStudio x);
    [CompilerGeneratedAttribute]
private static string <BindSelectedIdeTwoWay>b__f(InstalledRider x);
}
public interface JetBrains.Application.Build.App.Params.LocalSettings.IInstalledIde {
    public string Presentation { get; }
    public abstract virtual string get_Presentation();
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledRider : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DirWithExe>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <ExePath>k__BackingField;
    public FileSystemPath Path { get; private set; }
    public string Version { get; private set; }
    public FileSystemPath DirWithExe { get; private set; }
    public FileSystemPath ExePath { get; private set; }
    public string Presentation { get; }
    public InstalledRider(FileSystemPath path, string version, FileSystemPath dirWithExe, FileSystemPath exePath);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(FileSystemPath value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_DirWithExe();
    [CompilerGeneratedAttribute]
private void set_DirWithExe(FileSystemPath value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_ExePath();
    [CompilerGeneratedAttribute]
private void set_ExePath(FileSystemPath value);
    public virtual string ToString();
    public sealed virtual string get_Presentation();
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledRiderSerializer : object {
    public string ConvertToString(InstalledRider val);
    public InstalledRider ConvertFromString(IEnumerable`1<IInstalledIde> ides, string val);
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledVisualStudio : object {
    [CompilerGeneratedAttribute]
private InstalledVs <Value>k__BackingField;
    public InstalledVs Value { get; private set; }
    public string Presentation { get; }
    public InstalledVisualStudio(InstalledVs value);
    [CompilerGeneratedAttribute]
public InstalledVs get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(InstalledVs value);
    public virtual string ToString();
    public sealed virtual string get_Presentation();
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledVisualStudioSerializer : object {
    [NotNullAttribute]
public string ConvertToString(InstalledVisualStudio val);
    public InstalledVisualStudio ConvertFromString(IEnumerable`1<IInstalledIde> ides, string val);
}
[ShellComponentAttribute]
public class JetBrains.Application.Build.App.Params.LocalSettings.RiderDiscoveryHost : object {
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, IEnumerable`1<FileSystemPath>> CS$<>9__CachedAnonymousMethodDelegatec;
    public IEnumerable`1<IInstalledIde> Discover();
    private static IEnumerable`1<InstalledRider> DiscoverRiders();
    [NotNullAttribute]
private static IEnumerable`1<InstalledRider> DiscoverInUserProfile();
    [CanBeNullAttribute]
private static IEnumerable`1<InstalledRider> TryFoundRiderDescriptionFile(FileSystemPath folder);
    [NotNullAttribute]
private static IEnumerable`1<InstalledRider> DiscoverInProgramFiles();
    [CanBeNullAttribute]
private static InstalledRider TryGetRiderFromFolder(FileSystemPath path, string version);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<FileSystemPath> <TryFoundRiderDescriptionFile>b__b(FileSystemPath x);
}
internal class JetBrains.Application.Build.App.Params.LocalSettings.RiderVersionComparer : object {
    private Regex regex;
    private IEnumerable`1<string> groups;
    public sealed virtual int Compare(string x, string y);
    private static int CompareVersion(string x, string y);
    private static string GetNotEmptyStringVersion(string s);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.SyncInputArtifactStringsFromLocalSettings : object {
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate8;
    public SyncInputArtifactStringsFromLocalSettings(Lifetime lifetime, IThreading threading, InputArtifactStringTableRawStorage stringtable, BuildSettingsPerHomeDir buildSettingsPerHomeDir, BuildAppStartupArtifactValues ensurestartup, ILogger logger);
    private static bool IsIgnoreArtSave(IInputArtifactStringTableEntry art);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__5(Pair`2<string, string> p);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__6(Pair`2<string, string> p);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.Application.Build.App.Profile.ProfileProperties : object {
    private IProperty`1<int> myFileSystemTimestamp;
    private IThreading myThreading;
    private IProperty`1<IDirectedGraph`1<SubplatformName>> myGraph;
    [NotNullAttribute]
public IProperty`1<ProfileDescription> SelectedFullProfile;
    [NotNullAttribute]
public IProperty`1<ProfileNameArtifact> SelectedProfileName;
    [NotNullAttribute]
public IProperty`1<ProfilesArtifact> Profiles;
    [CompilerGeneratedAttribute]
private static Func`3<ProductHomeDirArtifact, int, IDirectedGraph`1<SubplatformName>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<ProductHomeDirArtifact, DirectedGraph`1<SubplatformName>> CS$<>9__CachedAnonymousMethodDelegate8;
    public ProfileProperties(Lifetime lifetime, IThreading threading, IInputArtifactStringTable table, SyncInputArtifactStringsFromLocalSettings dependency);
    public bool AddProfile(UserDefinedProfileDescription value);
    public bool RemoveProfile(string name);
    public bool UpdateProfile(string name, IEnumerable`1<SubplatrformPrefixAndKind> changes);
    public void RefreshProfilesAccordingFileSystem();
    [CompilerGeneratedAttribute]
private static IDirectedGraph`1<SubplatformName> <.ctor>b__0(ProductHomeDirArtifact artifact, int _);
    [CompilerGeneratedAttribute]
private static DirectedGraph`1<SubplatformName> <.ctor>b__1(ProductHomeDirArtifact x);
}
[ExtensionAttribute]
public static class JetBrains.Application.Build.App.Profile.TreeNodeKindEx : object {
    [ExtensionAttribute]
public static TrieNodeKind ToTrieNodeKind(SubplatformCompileKind kind);
    [ExtensionAttribute]
public static string ToPresentableName(TrieNodeKind enum);
}
public class JetBrains.Application.Build.App.Profile.TrieNodeData : object {
    private TrieNodeKind myKind;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <MainText>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <SubplatformPrefix>k__BackingField;
    public TrieNodeKind Kind { get; public set; }
    public string CheckBoxText { get; }
    public string MainText { get; private set; }
    [NotNullAttribute]
public RelativePath SubplatformPrefix { get; private set; }
    public TrieNodeData(TrieNodeKind kind, RelativePath prefix, string mainText);
    public TrieNodeKind get_Kind();
    public void set_Kind(TrieNodeKind value);
    public string get_CheckBoxText();
    [CompilerGeneratedAttribute]
public string get_MainText();
    [CompilerGeneratedAttribute]
private void set_MainText(string value);
    [CompilerGeneratedAttribute]
public RelativePath get_SubplatformPrefix();
    [CompilerGeneratedAttribute]
private void set_SubplatformPrefix(RelativePath value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public enum JetBrains.Application.Build.App.Profile.TrieNodeKind : Enum {
    public byte value__;
    public static TrieNodeKind ExcludedType;
    public static TrieNodeKind SourceType;
    public static TrieNodeKind BinaryType;
    public static TrieNodeKind MixedType;
}
[ExtensionAttribute]
public static class JetBrains.Application.Build.App.Profile.TrieUtils : object {
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs`1<ITrieNode<TrieNodeData>>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<TrieEntry<TrieNodeData>, TrieNodeKind> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`3<TrieNodeKind, TrieNodeKind, TrieNodeKind> CS$<>9__CachedAnonymousMethodDelegate5;
    [ExtensionAttribute]
public static FileSystemPathTrie`1<TrieNodeData> BuildTrie(ProfileDescription profile);
    [ExtensionAttribute]
[NotNullAttribute]
public static ITrieNode<TrieNodeData> GetRoot(FileSystemPathTrie`1<TrieNodeData> trie);
    [ExtensionAttribute]
public static bool TryUpdate(FileSystemPathTrie`1<TrieNodeData> that, FileSystemPathTrie`1<TrieNodeData> other);
    private static bool DoTryUpdate(ITrieNode<TrieNodeData> node, ITrieNode<TrieNodeData> otherNode);
    [CompilerGeneratedAttribute]
private static void <BuildTrie>b__0(object sender, EventArgs`1<ITrieNode<TrieNodeData>> args);
    [CompilerGeneratedAttribute]
private static TrieNodeKind <BuildTrie>b__1(TrieEntry<TrieNodeData> x);
    [CompilerGeneratedAttribute]
private static TrieNodeKind <BuildTrie>b__2(TrieNodeKind acc, TrieNodeKind x);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.Application.Build.App.ShellBasedBuiltInBuildEngineExtraction : object {
    private ApplicationPackagesLocallyInstalled myAppPackages;
    private Optional`1<PartCatalogSet> myCatalogset;
    public ShellBasedBuiltInBuildEngineExtraction(ApplicationPackagesLocallyInstalled appPackages, Optional`1<ShellPartCatalogSet> catalogset);
    private static IList`1<SimpleFileItem> CollectBuiltInEngineDlls(ApplicationPackagesLocallyInstalled appPackages, Optional`1<PartCatalogSet> catalogset);
    private static IList`1<SimpleFileItem> CollectBuiltInEngineDlls_RealAppPackages(IApplicationPackageLocallyInstalled appkgWithThisAssembly, ApplicationPackagesLocallyInstalled appPackages, Optional`1<PartCatalogSet> catalogset);
    private sealed virtual override IList`1<SimpleFileItem> JetBrains.Build.Running.IBuiltInBuildEngineExtraction.GetBuildEngineFiles();
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.TeamCity.PublishOutputsToTeamCity : object {
    public PublishOutputsToTeamCity(Lifetime lifetime, BuildAppDispatch dispatch, ILogger logger);
    public static void PublishResultsForSession(BuildRunnerSession session, ILogger logger);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.TeamCity.RunBuildForTeamCity : object {
    public RunBuildForTeamCity(IProductCommandLine cmdline, ApplicationShutdownRequests applicationShutdownRequests, ILogger logger);
}
[ZoneMarkerAttribute]
[ZoneActivatorAttribute]
public class JetBrains.Application.Build.App.TeamCity.TeamCityBuildAppActivator : object {
    public sealed virtual bool ActivatorEnabled();
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog : object {
    private static string TeamCityBuildStatusTextMacro;
    private Features myFeatures;
    public IListEvents`1<string> CurrentStepNames;
    public IProperty`1<string> TagString;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4d`2<InputArtifactStringName, string>, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<TeamCityBuildTags, String[]> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<String[], IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Action`1<PropertyChangedEventArgs`1<string>> CS$<>9__CachedAnonymousMethodDelegate1a;
    public TeamCityBuildLog(Lifetime lifetime, BuildAppDispatch dispatch, IInputArtifactStringTable stringtable, ILogger logger, Features features);
    private TeamCityBuildLog(Lifetime lifetime, BuildRunnerSession session, IInputArtifactStringTable stringtable, ILogger logger, Features features);
    private TeamCityBuildLog(Lifetime lifetime, IInputArtifactStringTable stringtable, ILogger logger, Features features);
    private static TeamCityBuildLog();
    [NotNullAttribute]
public static TeamCityBuildLog CreateForSingleSession(Lifetime lifetime, BuildRunnerSession session, IInputArtifactStringTable stringtable, ILogger logger, Features features);
    private void InitCommon_ApplyTags(IInputArtifactStringTable stringtable, ILogger logger);
    private void InitCommon_BuildStatus(Lifetime lifetime, Features features);
    private void InitCommon_ReportEngineStats(Lifetime lifetime);
    private void InitPerSession(Lifetime lifeSession, BuildRunnerSession session);
    private void IssueTeamCityMessageOnLogRecord(BuildLogRecord logrecord);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static bool <InitCommon_ApplyTags>b__4(<>f__AnonymousType4d`2<InputArtifactStringName, string> t);
    [CompilerGeneratedAttribute]
private static String[] <InitCommon_ApplyTags>b__7(TeamCityBuildTags tag);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <InitCommon_ApplyTags>b__8(String[] o);
    [CompilerGeneratedAttribute]
private static bool <InitCommon_ApplyTags>b__9(string s);
    [CompilerGeneratedAttribute]
private static string <InitCommon_ApplyTags>b__a(string s);
    [CompilerGeneratedAttribute]
private static string <InitCommon_ApplyTags>b__b(string tag);
    [CompilerGeneratedAttribute]
private static void <InitCommon_BuildStatus>b__18(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <InitPerSession>b__20(AddRemoveIndexEventArgs`1<BuildLogRecord> args);
}
public class JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomation : AAutomation {
    public IProperty`1<string> BinaryStageObjectiveName;
    public UiCommandAutomation CmdRunBinaryStage;
    public UiCommandAutomation CmdRunCustomEntry;
    public SignalCommand CmdSaveLastOutputs;
    public IProperty`1<string> CustomEntryTypeName;
    public IListEvents`1<UiCommandAutomation> EntryPointToolbarItems;
    public IListEvents`1<UiCommandAutomation> GeneralToolbar;
    public IProperty`1<bool> IsBuildRunning;
    [NotNullAttribute]
public ICollectionEvents`1<OutputFileArtifact> LastBuildOutputFiles;
    public IProperty`1<string> LastBuildOutputsSummary;
    [NotNullAttribute]
public IProperty`1<ChunkedMemoryStream> LastFullBuildResults;
    public LocalInstallAutomation LocalInstallAutomation;
    public IProperty`1<string> RunningBuildText;
    [CompilerGeneratedAttribute]
private static Func`2<OutputFileArtifact, long> CS$<>9__CachedAnonymousMethodDelegate1c;
    public BuildAppDispatchAutomation(Lifetime lifetime, BuildAppDispatch dispatch, IThreading threading, LocalInstallAutomation localInstallAutomation, BuildAppDispatchAutomationInteractivityBase interactivity, ILogger logger);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7(AddRemoveIndexEventArgs`1<BuildRunnerSession> args);
    [CompilerGeneratedAttribute]
private static long <.ctor>b__9(OutputFileArtifact of);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomationInteractivityBase : object {
    public virtual FileSystemPath BrowseForFolder(string title, FileSystemPath initial);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ToolWindowDescriptorAttribute]
public class JetBrains.Application.Build.App.Ux.BuildAppDispatchWindow : ToolWindowDescriptor {
    public BuildAppDispatchWindow(IApplicationHost host);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildAppDispatchWindowShow : object {
    public BuildAppDispatchWindowShow(Lifetime lifetime, BuildAppDispatchWindow buildAppToolWindow, ToolWindowManager toolWindowManager, IComponentContainer container);
}
public class JetBrains.Application.Build.App.Ux.BuildArtifactsAutomation : AAutomation {
    public IList`1<BuildArtifactSwatchAutomation> Swatches;
    public SwatchPanelAutomation SwatchPanel;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, string> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, bool> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, BuildEntityPointer> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, bool> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, bool> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, BuildEntityPointer> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, bool> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, bool> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, BuildEntityPointer> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, bool> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, bool> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, BuildEntityPointer> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, bool> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, BuildEntityPointer> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, bool> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, BuildEntityPointer> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`3<PlannedItem, int, <>f__AnonymousType5b`2<PlannedItem, int>> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5b`2<PlannedItem, int>, bool> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5b`2<PlannedItem, int>, int> CS$<>9__CachedAnonymousMethodDelegate36;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, string> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, bool> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<PlannedItem, BuildEntityPointer> CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, bool> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Action`1<BuildArtifactSwatchAutomation> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Action`1<BuildArtifactSwatchAutomation> CS$<>9__CachedAnonymousMethodDelegate3c;
    public BuildArtifactsAutomation(Lifetime lifetime, BuildExecutor executorAsync, IThreading threading);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(BuildEntityPointer art);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1(PlannedItem item);
    [CompilerGeneratedAttribute]
private static BuildEntityPointer <.ctor>b__2(PlannedItem item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(BuildEntityPointer ep);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__4(PlannedItem item);
    [CompilerGeneratedAttribute]
private static BuildEntityPointer <.ctor>b__5(PlannedItem item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(BuildEntityPointer ep);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7(PlannedItem item);
    [CompilerGeneratedAttribute]
private static BuildEntityPointer <.ctor>b__8(PlannedItem item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__9(BuildEntityPointer ep);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__a(PlannedItem item);
    [CompilerGeneratedAttribute]
private static BuildEntityPointer <.ctor>b__b(PlannedItem item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__c(BuildEntityPointer ep);
    [CompilerGeneratedAttribute]
private static BuildEntityPointer <.ctor>b__d(PlannedItem item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__e(BuildEntityPointer ep);
    [CompilerGeneratedAttribute]
private static BuildEntityPointer <.ctor>b__f(BuildEntityPointer art);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType5b`2<PlannedItem, int> <.ctor>b__11(PlannedItem item, int index);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__12(<>f__AnonymousType5b`2<PlannedItem, int> tuple);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__13(<>f__AnonymousType5b`2<PlannedItem, int> tuple);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__15(BuildEntityPointer art);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__16(PlannedItem item);
    [CompilerGeneratedAttribute]
private static BuildEntityPointer <.ctor>b__17(PlannedItem item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__18(BuildEntityPointer ep);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1b(BuildArtifactSwatchAutomation swatch);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1d(BuildArtifactSwatchAutomation swatch);
}
public class JetBrains.Application.Build.App.Ux.BuildArtifactsSetAutomation : AAutomation {
    public IListEvents`1<BuildArtifactsAutomation> Items;
    public BuildArtifactsSetAutomation(Lifetime lifetime);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ToolWindowDescriptorAttribute]
public class JetBrains.Application.Build.App.Ux.BuildArtifactsToolWindow : ToolWindowDescriptor {
    public BuildArtifactsToolWindow(IApplicationHost host);
}
public class JetBrains.Application.Build.App.Ux.BuildArtifactSwatchAutomation : AAutomation {
    public IProperty`1<ColorCode> Color;
    public IProperty`1<string> DisplayName;
    public IProperty`1<bool> IsActive;
    public IProperty`1<StateFlags> State;
    public SwatchIndicatorAutomation Swatch;
    public BuildArtifactSwatchAutomation(Lifetime lifetime, BuildEntityPointer artifact, StringAbbreviatorLive`1<BuildEntityPointer> abbrev);
}
public class JetBrains.Application.Build.App.Ux.BuildDisplayAutomation : AAutomation {
    private BuildExecutor myBuildExecutorAsync;
    private Lifetime myLifetime;
    private IThreading myThreading;
    public IProperty`1<BuildArtifactsAutomation> BuildArtifacts;
    public IProperty`1<BuildStepsAutomation> BuildSteps;
    public LogAutomation Log;
    public BuildDisplayAutomation(Lifetime lifetime, IThreading threading);
    public void BindToBuildExecutorAsync(BuildExecutor executorAsync);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.Application.Build.App.Ux.BuildLog : object {
    private Lifetime myLifetimeComponent;
    private ILogger myLogger;
    private IThreading myThreading;
    private ToolWindowClass myToolWindowClass;
    public BuildLog(Lifetime lifetime, BuildLogToolWindow buildLogToolWindow, ToolWindowManager toolWindowManager, IThreading threading, ILogger logger);
    public virtual void ShowApplicationLog(Lifetime lifetimeRecording, string title);
    [NotNullAttribute]
public virtual LogAutomation ShowManualLog(Lifetime lifetimeRecording, string title, bool createToolWindow);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ToolWindowDescriptorAttribute]
public class JetBrains.Application.Build.App.Ux.BuildLogToolWindow : ToolWindowDescriptor {
    public BuildLogToolWindow(IApplicationHost host);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildStepsAndArtifactsWindowShow : object {
    public BuildStepsAndArtifactsWindowShow(Lifetime lifetime, BuildAppDispatch dispatch, BuildStepsToolWindow buildStepsToolWindow, BuildArtifactsToolWindow buildArtifactsToolWindow, ToolWindowManager toolWindowManager, ILogger logger, IThreading threading);
}
public class JetBrains.Application.Build.App.Ux.BuildStepsAutomation : AAutomation {
    public IList`1<BuildStepSwatchAutomation> Swatches;
    public SwatchPanelAutomation SwatchPanel;
    [CompilerGeneratedAttribute]
private static Func`2<BuildEntityPointer, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<PlannedItem, int, <>f__AnonymousType5b`2<PlannedItem, int>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5b`2<PlannedItem, int>, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5b`2<PlannedItem, int>, int> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`3<PlannedItem, int, <>f__AnonymousType5b`2<PlannedItem, int>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5b`2<PlannedItem, int>, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    public BuildStepsAutomation(Lifetime lifetime, BuildExecutor executorAsync, IThreading threading);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(BuildEntityPointer step);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType5b`2<PlannedItem, int> <.ctor>b__1(PlannedItem item, int index);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(<>f__AnonymousType5b`2<PlannedItem, int> tuple);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__3(<>f__AnonymousType5b`2<PlannedItem, int> tuple);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType5b`2<PlannedItem, int> <.ctor>b__5(PlannedItem item, int index);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(<>f__AnonymousType5b`2<PlannedItem, int> tuple);
}
public class JetBrains.Application.Build.App.Ux.BuildStepsSetAutomation : AAutomation {
    public IListEvents`1<BuildStepsAutomation> Items;
    public BuildStepsSetAutomation(Lifetime lifetime);
}
[ToolWindowDescriptorAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildStepsToolWindow : ToolWindowDescriptor {
    public BuildStepsToolWindow(IApplicationHost host);
}
public class JetBrains.Application.Build.App.Ux.BuildStepSwatchAutomation : AAutomation {
    public IProperty`1<ColorCode> Color;
    public IProperty`1<string> DisplayName;
    public IProperty`1<bool> IsActive;
    public SwatchIndicatorAutomation Swatch;
    public BuildStepSwatchAutomation(Lifetime lifetime, BuildEntityPointer step, StringAbbreviatorLive`1<BuildEntityPointer> abbrSteps);
}
public class JetBrains.Application.Build.App.Ux.CommandShortcutAutomation : AAutomation {
    private SignalCommand myCommand;
    public UiCommandAutomation CommandAutomation;
    [CompilerGeneratedAttribute]
private static Action`1<SignalCommand> CS$<>9__CachedAnonymousMethodDelegate9;
    public CommandShortcutAutomation(Lifetime lifetime, IListEvents`1<UiCommandAutomation> commands, string commandName, string displayName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(SignalCommand cmd);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UsedImplicitlyAttribute]
public class JetBrains.Application.Build.App.Ux.LocalInstallAutomation : AAutomation {
    private static string Profilename;
    private static ILogger ourLogger;
    private BuildAppDispatch myBuildAppDispatch;
    private Lifetime myLifetime;
    private IProperty`1<bool> myPBDRHintHasProfile;
    private IProperty`1<bool> myRootSuffixTextHasProfile;
    private IThreading myThreading;
    public SignalCommand AddProfileSuffixCommand;
    public IProperty`1<bool> DoNotCompileAllCheck;
    public IProperty`1<bool> DoNotCompileCppCheck;
    public IProperty`1<bool> DoNotRewriteCheck;
    public IProperty`1<bool> DoNotValidateSourcesCheck;
    public IListEvents`1<InstalledVs> InstalledDevenvs;
    public IListEvents`1<IInstalledIde> InstalledIdes;
    public IProperty`1<Nullable`1<bool>> IsIncrementalCheck;
    public IProperty`1<Nullable`1<bool>> IsModeAssertCheck;
    public IProperty`1<Nullable`1<bool>> IsModeOptimizeCheck;
    public IProperty`1<Nullable`1<bool>> IsModeReportExceptionsCheck;
    public IProperty`1<bool> CppEnableDeveloperModeCheck;
    public IProperty`1<Nullable`1<bool>> CppSuppressUnityBuildCheck;
    public IProperty`1<bool> IsProductBinariesDirExplicitlySpecified;
    public SignalCommand LocalInstallCommand;
    public IProperty`1<VsHive> LocalInstallSelectedDevenv;
    public SignalCommand OpenInVisualStudioCommand;
    public IProperty`1<bool> OpenInVsAndBuildSolutionCheck;
    public IProperty`1<bool> OpenInVsInternalModeCheck;
    public IProperty`1<bool> CanSetInternalMode;
    public IProperty`1<IInstalledIde> OpenInIdeSelectedIdeVersion;
    public SignalCommand PrepareWorkingCopyCommand;
    public IProperty`1<string> ProductBinariesDirRelativeHintText;
    public IProperty`1<string> ProductHomeDir;
    public IProperty`1<bool> RootSuffixCheck;
    public IProperty`1<string> RootSuffixText;
    public IProperty`1<bool> SkipOsIntegrationCheck;
    [CompilerGeneratedAttribute]
private static Func`2<ProductHomeDirArtifact, string> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`2<OpenInVisualStudioBuildSolutionArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static Func`2<bool, OpenInVisualStudioBuildSolutionArtifact> CS$<>9__CachedAnonymousMethodDelegate3e;
    [CompilerGeneratedAttribute]
private static Func`2<OpenInVisualStudioInternalModeArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate3f;
    [CompilerGeneratedAttribute]
private static Func`2<bool, OpenInVisualStudioInternalModeArtifact> CS$<>9__CachedAnonymousMethodDelegate40;
    [CompilerGeneratedAttribute]
private static Func`2<OpenInIdeInternalModeApplicabilityArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate41;
    [CompilerGeneratedAttribute]
private static Func`2<bool, OpenInIdeInternalModeApplicabilityArtifact> CS$<>9__CachedAnonymousMethodDelegate42;
    [CompilerGeneratedAttribute]
private static Func`2<IInstalledIde, OpenInVisualStudioInstallDirArtifact> CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static Func`2<IInstalledIde, bool> CS$<>9__CachedAnonymousMethodDelegate44;
    [CompilerGeneratedAttribute]
private static Func`2<SkipLocalCompilationArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<bool, SkipLocalCompilationArtifact> CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static Func`2<SkipLocalCompilationCpp, bool> CS$<>9__CachedAnonymousMethodDelegate47;
    [CompilerGeneratedAttribute]
private static Func`2<bool, SkipLocalCompilationCpp> CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static Func`2<SkipSourcesValidation, bool> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Func`2<bool, SkipSourcesValidation> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Func`2<SkipAssemblyRewrites, bool> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`2<bool, SkipAssemblyRewrites> CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static Func`2<SkipStandaloneHostOsIntegration, bool> CS$<>9__CachedAnonymousMethodDelegate4d;
    [CompilerGeneratedAttribute]
private static Func`2<bool, SkipStandaloneHostOsIntegration> CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static Func`2<IncrementalBuild, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, IncrementalBuild> CS$<>9__CachedAnonymousMethodDelegate50;
    [CompilerGeneratedAttribute]
private static Func`2<IsModeOptimize, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate51;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, IsModeOptimize> CS$<>9__CachedAnonymousMethodDelegate52;
    [CompilerGeneratedAttribute]
private static Func`2<IsModeAssert, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate53;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, IsModeAssert> CS$<>9__CachedAnonymousMethodDelegate54;
    [CompilerGeneratedAttribute]
private static Func`2<IsModeReportExceptions, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate55;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, IsModeReportExceptions> CS$<>9__CachedAnonymousMethodDelegate56;
    [CompilerGeneratedAttribute]
private static Func`2<CppEnableDeveloperMode, bool> CS$<>9__CachedAnonymousMethodDelegate57;
    [CompilerGeneratedAttribute]
private static Func`2<bool, CppEnableDeveloperMode> CS$<>9__CachedAnonymousMethodDelegate58;
    [CompilerGeneratedAttribute]
private static Func`2<CppSuppressUnityBuild, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate59;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, CppSuppressUnityBuild> CS$<>9__CachedAnonymousMethodDelegate5a;
    [CompilerGeneratedAttribute]
private static Func`2<IncrementalBuild, IsCachingBuildStuff> CS$<>9__CachedAnonymousMethodDelegate5b;
    [CompilerGeneratedAttribute]
private static Func`2<ProductBinariesDirArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate5c;
    [CompilerGeneratedAttribute]
private static Func`2<LocalInstallTargetArtifact, VsHive> CS$<>9__CachedAnonymousMethodDelegate5d;
    [CompilerGeneratedAttribute]
private static Func`2<VsHive, LocalInstallTargetArtifact> CS$<>9__CachedAnonymousMethodDelegate5e;
    [CompilerGeneratedAttribute]
private static Func`2<ProductHomeDirArtifact, string> CS$<>9__CachedAnonymousMethodDelegate63;
    [CompilerGeneratedAttribute]
private static Func`2<OpenInVisualStudioBuildSolutionArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate64;
    [CompilerGeneratedAttribute]
private static Func`2<OpenInVisualStudioInternalModeArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate65;
    [CompilerGeneratedAttribute]
private static Func`2<OpenInIdeInternalModeApplicabilityArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate66;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, OpenInVisualStudioInstallDirArtifact> CS$<>9__CachedAnonymousMethodDelegate67;
    [CompilerGeneratedAttribute]
private static Func`2<SkipLocalCompilationArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate68;
    [CompilerGeneratedAttribute]
private static Func`2<SkipLocalCompilationCpp, bool> CS$<>9__CachedAnonymousMethodDelegate69;
    [CompilerGeneratedAttribute]
private static Func`2<SkipSourcesValidation, bool> CS$<>9__CachedAnonymousMethodDelegate6a;
    [CompilerGeneratedAttribute]
private static Func`2<SkipAssemblyRewrites, bool> CS$<>9__CachedAnonymousMethodDelegate6b;
    [CompilerGeneratedAttribute]
private static Func`2<SkipStandaloneHostOsIntegration, bool> CS$<>9__CachedAnonymousMethodDelegate6c;
    [CompilerGeneratedAttribute]
private static Func`2<IncrementalBuild, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate6d;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, IncrementalBuild> CS$<>9__CachedAnonymousMethodDelegate6e;
    [CompilerGeneratedAttribute]
private static Func`2<IsModeOptimize, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate6f;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, IsModeOptimize> CS$<>9__CachedAnonymousMethodDelegate70;
    [CompilerGeneratedAttribute]
private static Func`2<IsModeAssert, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate71;
    [CompilerGeneratedAttribute]
private static Func`2<IsModeReportExceptions, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate72;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, IsModeReportExceptions> CS$<>9__CachedAnonymousMethodDelegate73;
    [CompilerGeneratedAttribute]
private static Func`2<CppSuppressUnityBuild, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate74;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, CppSuppressUnityBuild> CS$<>9__CachedAnonymousMethodDelegate75;
    [CompilerGeneratedAttribute]
private static Func`2<IncrementalBuild, IsCachingBuildStuff> CS$<>9__CachedAnonymousMethodDelegate76;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledVisualStudio, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate95;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledRider, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate96;
    public LocalInstallAutomation(Lifetime lifetime, DevenvParametersForBuild devenvParams, BuildAppDispatch dispatch, IThreading threading, IInputArtifactStringTable stringtable);
    private static LocalInstallAutomation();
    private void AddProfileSuffix();
    private void BindPBDRHint(Lifetime lifetime, IInputArtifactStringTable stringtable);
    private void BindRootSuffixCombo(Lifetime lifetime, IInputArtifactStringTable stringtable);
    private static string RecognizeProfileSuffix(string text, string profile);
    private void RunCommand(SimpleBuildRequest req);
    private static string SubstituteProfileSuffix(string text, string profileName);
    private static FileSystemPath GetIdePath(IInstalledIde ide);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(ProductHomeDirArtifact hda);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(OpenInVisualStudioBuildSolutionArtifact art);
    [CompilerGeneratedAttribute]
private static OpenInVisualStudioBuildSolutionArtifact <.ctor>b__4(bool opt);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__5(OpenInVisualStudioInternalModeArtifact art);
    [CompilerGeneratedAttribute]
private static OpenInVisualStudioInternalModeArtifact <.ctor>b__7(bool opt);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__8(OpenInIdeInternalModeApplicabilityArtifact art);
    [CompilerGeneratedAttribute]
private static OpenInIdeInternalModeApplicabilityArtifact <.ctor>b__a(bool opt);
    [CompilerGeneratedAttribute]
private static OpenInVisualStudioInstallDirArtifact <.ctor>b__b(IInstalledIde ver);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__d(IInstalledIde ver);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__e(SkipLocalCompilationArtifact skip);
    [CompilerGeneratedAttribute]
private static SkipLocalCompilationArtifact <.ctor>b__10(bool b);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__11(SkipLocalCompilationCpp skip);
    [CompilerGeneratedAttribute]
private static SkipLocalCompilationCpp <.ctor>b__13(bool b);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__14(SkipSourcesValidation skip);
    [CompilerGeneratedAttribute]
private static SkipSourcesValidation <.ctor>b__16(bool b);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__17(SkipAssemblyRewrites skip);
    [CompilerGeneratedAttribute]
private static SkipAssemblyRewrites <.ctor>b__19(bool b);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1a(SkipStandaloneHostOsIntegration skip);
    [CompilerGeneratedAttribute]
private static SkipStandaloneHostOsIntegration <.ctor>b__1c(bool b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__1d(IncrementalBuild art);
    [CompilerGeneratedAttribute]
private static IncrementalBuild <.ctor>b__1f(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__21(IsModeOptimize art);
    [CompilerGeneratedAttribute]
private static IsModeOptimize <.ctor>b__23(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__25(IsModeAssert art);
    [CompilerGeneratedAttribute]
private static IsModeAssert <.ctor>b__27(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__28(IsModeReportExceptions art);
    [CompilerGeneratedAttribute]
private static IsModeReportExceptions <.ctor>b__2a(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2c(CppEnableDeveloperMode art);
    [CompilerGeneratedAttribute]
private static CppEnableDeveloperMode <.ctor>b__2d(bool b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__2e(CppSuppressUnityBuild art);
    [CompilerGeneratedAttribute]
private static CppSuppressUnityBuild <.ctor>b__30(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static IsCachingBuildStuff <.ctor>b__32(IncrementalBuild ib);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__34(ProductBinariesDirArtifact bindir);
    [CompilerGeneratedAttribute]
private static VsHive <.ctor>b__35(LocalInstallTargetArtifact lita);
    [CompilerGeneratedAttribute]
private static LocalInstallTargetArtifact <.ctor>b__36(VsHive ver);
    [CompilerGeneratedAttribute]
private void <.ctor>b__37();
    [CompilerGeneratedAttribute]
private void <.ctor>b__38();
    [CompilerGeneratedAttribute]
private void <.ctor>b__39();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3a();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(ProductHomeDirArtifact homedir);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(OpenInVisualStudioBuildSolutionArtifact x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(OpenInVisualStudioInternalModeArtifact x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__9(OpenInIdeInternalModeApplicabilityArtifact x);
    [CompilerGeneratedAttribute]
private static OpenInVisualStudioInstallDirArtifact <.ctor>b__c(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__f(SkipLocalCompilationArtifact s);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__12(SkipLocalCompilationCpp s);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__15(SkipSourcesValidation s);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__18(SkipAssemblyRewrites s);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1b(SkipStandaloneHostOsIntegration s);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__1e(IncrementalBuild o);
    [CompilerGeneratedAttribute]
private static IncrementalBuild <.ctor>b__20(Nullable`1<bool> bb);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__22(IsModeOptimize o);
    [CompilerGeneratedAttribute]
private static IsModeOptimize <.ctor>b__24(Nullable`1<bool> bb);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__26(IsModeAssert o);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__29(IsModeReportExceptions o);
    [CompilerGeneratedAttribute]
private static IsModeReportExceptions <.ctor>b__2b(Nullable`1<bool> bb);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__2f(CppSuppressUnityBuild o);
    [CompilerGeneratedAttribute]
private static CppSuppressUnityBuild <.ctor>b__31(Nullable`1<bool> bb);
    [CompilerGeneratedAttribute]
private static IsCachingBuildStuff <.ctor>b__33(IncrementalBuild ibb);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3b();
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetIdePath>b__93(InstalledVisualStudio x);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetIdePath>b__94(InstalledRider x);
}
public class JetBrains.Application.Build.App.Ux.LogAutomation : AAutomation {
    private static LoggingLevel RunningItemFakeLoggingLevel;
    private Nullable`1<DateTime> myPivotTimeValue;
    private ReadonlyToken myReadonly;
    public IListEvents`1<LogRecordAutomation> AllRecords;
    public DelegateCommand CopySelectionCommand;
    public IDictionary`2<LoggingLevel, IProperty`1<int>> CountMessagesByKind;
    public SearchModelEventHandler FilterEditboxBehavior;
    public IProperty`1<bool> IsListeningAutomatically;
    public IProperty`1<bool> IsShowingRunningItem;
    public IProperty`1<LoggingLevel> MaxLevelToShow;
    public IProperty`1<LogRecordAutomation[]> SelectedItems;
    public ISignal`1<OutEventArgs`1<LogRecordAutomation[]>> SelectedItemsRequested;
    public IProperty`1<IFilterDescriptor> TreeFilter;
    public IListEvents`1<LogRecordAutomation> TreeItemsSource;
    [CompilerGeneratedAttribute]
private static Func`2<LoggingLevel, LoggingLevel> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<LogRecordAutomation, DateTime> CS$<>9__CachedAnonymousMethodDelegate15;
    public LogAutomation(Lifetime lifetime, IThreading threading, bool isListeningInitial);
    public void AddRecord(BuildLogRecord value);
    private void ShowRunningItem(Lifetime lifeRunningItem, IThreading threading);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static LoggingLevel <.ctor>b__4(LoggingLevel ll);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6(AddRemoveIndexEventArgs`1<LogRecordAutomation> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9(AddRemoveIndexEventArgs`1<LogRecordAutomation> args);
    [CompilerGeneratedAttribute]
private static DateTime <.ctor>b__1(LogRecordAutomation rec);
}
public class JetBrains.Application.Build.App.Ux.ProfileExplorerViewModel : AAutomation {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ProfileProperties myProfileProperties;
    public ISignal`1<OutEventArgs`1<ITrieNode[]>> SelectedItemsRequested;
    [CompilerGeneratedAttribute]
private SignalCommand <AddProfileCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeCheckedToBinaryCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeCheckedToSourceCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeToBinaryCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeToExcludedCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeToSourceCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CurrentProfileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <InputNewProfileText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanRemoveProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<String[]> <Profiles>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <RefreshCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <RemoveProfileCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<ITrieNode<TrieNodeData>> <Roots>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ProfilesArtifact, String[]> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<String[], bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<ProfileNameArtifact, string> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<string, ProfileNameArtifact> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<UserDefinedProfileDescription, string> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<ITrieNode<TrieNodeData>, bool> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<ITrieNode<TrieNodeData>, RelativePath> CS$<>9__CachedAnonymousMethodDelegate2b;
    public SignalCommand AddProfileCommand { get; private set; }
    public DelegateCommand ChangeCheckedToBinaryCommand { get; public set; }
    public DelegateCommand ChangeCheckedToSourceCommand { get; public set; }
    public DelegateCommand ChangeToBinaryCommand { get; private set; }
    public DelegateCommand ChangeToExcludedCommand { get; private set; }
    public DelegateCommand ChangeToSourceCommand { get; private set; }
    public IProperty`1<string> CurrentProfileName { get; private set; }
    public IProperty`1<string> InputNewProfileText { get; private set; }
    public IProperty`1<bool> CanRemoveProfile { get; private set; }
    public IProperty`1<String[]> Profiles { get; private set; }
    public SignalCommand RefreshCommand { get; private set; }
    public SignalCommand RemoveProfileCommand { get; private set; }
    public ListEvents`1<ITrieNode<TrieNodeData>> Roots { get; private set; }
    public ProfileExplorerViewModel(Lifetime lifetime, IThreading threading, ProfileProperties profileProperties);
    [CompilerGeneratedAttribute]
public SignalCommand get_AddProfileCommand();
    [CompilerGeneratedAttribute]
private void set_AddProfileCommand(SignalCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeCheckedToBinaryCommand();
    [CompilerGeneratedAttribute]
public void set_ChangeCheckedToBinaryCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeCheckedToSourceCommand();
    [CompilerGeneratedAttribute]
public void set_ChangeCheckedToSourceCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeToBinaryCommand();
    [CompilerGeneratedAttribute]
private void set_ChangeToBinaryCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeToExcludedCommand();
    [CompilerGeneratedAttribute]
private void set_ChangeToExcludedCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeToSourceCommand();
    [CompilerGeneratedAttribute]
private void set_ChangeToSourceCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CurrentProfileName();
    [CompilerGeneratedAttribute]
private void set_CurrentProfileName(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_InputNewProfileText();
    [CompilerGeneratedAttribute]
private void set_InputNewProfileText(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanRemoveProfile();
    [CompilerGeneratedAttribute]
private void set_CanRemoveProfile(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<String[]> get_Profiles();
    [CompilerGeneratedAttribute]
private void set_Profiles(IProperty`1<String[]> value);
    [CompilerGeneratedAttribute]
public SignalCommand get_RefreshCommand();
    [CompilerGeneratedAttribute]
private void set_RefreshCommand(SignalCommand value);
    [CompilerGeneratedAttribute]
public SignalCommand get_RemoveProfileCommand();
    [CompilerGeneratedAttribute]
private void set_RemoveProfileCommand(SignalCommand value);
    [CompilerGeneratedAttribute]
public ListEvents`1<ITrieNode<TrieNodeData>> get_Roots();
    [CompilerGeneratedAttribute]
private void set_Roots(ListEvents`1<ITrieNode<TrieNodeData>> value);
    private void AddProfile();
    private void Refresh();
    private void RemoveProfile();
    private void ChangeCheckedToType(SubplatformCompileKind type);
    private void ChangeToType(SubplatformCompileKind type);
    private void DoChangeToType(SubplatformCompileKind kind, Func`2<ITrieNode<TrieNodeData>, bool> filter);
    private void RunCommand(Action func, string nameCmd);
    [CompilerGeneratedAttribute]
private static String[] <.ctor>b__0(ProfilesArtifact x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(String[] x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(Lifetime lt, FileSystemPathTrie`1<TrieNodeData> x);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__5(ProfileNameArtifact x);
    [CompilerGeneratedAttribute]
private static ProfileNameArtifact <.ctor>b__6(string s);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9();
    [CompilerGeneratedAttribute]
private void <.ctor>b__a(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__c(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__e(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12(object o);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(UserDefinedProfileDescription d);
    [CompilerGeneratedAttribute]
private void <.ctor>b__b();
    [CompilerGeneratedAttribute]
private void <.ctor>b__d();
    [CompilerGeneratedAttribute]
private void <.ctor>b__f();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11();
    [CompilerGeneratedAttribute]
private void <.ctor>b__13();
    [CompilerGeneratedAttribute]
private static bool <ChangeCheckedToType>b__27(ITrieNode<TrieNodeData> node);
    [CompilerGeneratedAttribute]
private static RelativePath <DoChangeToType>b__29(ITrieNode<TrieNodeData> x);
}
[ToolWindowDescriptorAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.ProfileExplorerWindow : ToolWindowDescriptor {
    public ProfileExplorerWindow(IApplicationHost host);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.ProfileExplorerWindowShow : object {
    public ProfileExplorerWindowShow(Lifetime lifetime, ProfileExplorerWindow profileExplorerWindow, ToolWindowManager toolWindowManager, IThreading threading);
}
public class JetBrains.Application.Build.App.Ux.ProfileName : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; public set; }
    public ProfileName(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected bool Equals(ProfileName other);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.SwatchIndicatorAutomation : AAutomation {
    public IProperty`1<ColorCode> Color;
    public IProperty`1<bool> IsActive;
    public IProperty`1<string> Text;
    public SwatchIndicatorAutomation(Lifetime lifetime);
}
public class JetBrains.Application.Build.App.Ux.SwatchPanelAutomation : AAutomation {
    [NotNullAttribute]
public IListEvents`1<IAutomation> Items;
    [NotNullAttribute]
public IProperty`1<int> MaxAllowedSwatchChars;
    [NotNullAttribute]
public IThreading Threading;
    public SwatchPanelAutomation(Lifetime lifetime, IThreading threading);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.TaskBarBuildProgress : object {
    public TaskBarBuildProgress(Lifetime lifetime, ITaskBarManager taskBarManager, BuildAppDispatch dispatch);
}
[CommandLineSwitchAttribute("Artifact", "1")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineArtifact : object {
    public static string Name;
    public static char ShortSyntaxPrefixChar;
    private static CmdLineArtifact();
}
[CommandLineSwitchAttribute("BuildEngine", "1")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineBuildEngine : object {
    public static string Name;
}
[CommandLineSwitchAttribute("BuildScriptBin", "1")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineBuildScriptBin : object {
    public static string Name;
}
[CommandLineSwitchAttribute("BuildScriptSrc", "1")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineBuildScriptSrc : object {
    public static string Name;
}
[CommandLineSwitchAttribute("RunBuild", "1")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineRunBuild : object {
    public static string Name;
    public static char ShortSyntaxPrefixChar;
    private static CmdLineRunBuild();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Build.License.ThirdPartyLibraries : BuildStageOutputFileArtifactBase {
    private static Dictionary`2<Uri, string> ourKnownLicenseTypes;
    private static SemanticVersion ourEmptyVersion;
    private static HashSet`1<IPackageName> ourIgnoredPackages;
    private static Func`3[] ourCustomMetadata;
    private static HashSet`1<string> ourLevelDbRootFolders;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, InputPackage> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, IGalleryPackage> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<ThirdPartyLibraries, InstallersPortablesZipsDeployableFile> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate4d;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate50;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate51;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate52;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate53;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate54;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate55;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate56;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate57;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate58;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate59;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate5a;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate5b;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate5c;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate5d;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate5e;
    [CompilerGeneratedAttribute]
private static Func`3<RelativePath, IPackageMetadata, IPackageMetadata> CS$<>9__CachedAnonymousMethodDelegate5f;
    public ThirdPartyLibraries(IStructuredStorage sstg);
    public ThirdPartyLibraries(SimpleFileItem file);
    private static ThirdPartyLibraries();
    [BuildStepAttribute]
public static ThirdPartyLibraries[] PublishThirdPartyLibraries(DeployedFilesNamingScheme naming, InputPackage[] inputs, ILogger logger);
    private static string Link(Uri link, string description);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] Deploy(ThirdPartyLibraries[] libraries);
    [BuildStepAttribute]
public static SaveThirdPartyLibraries Save(ProductBinariesDirArtifact productBinariesDirArtifact, ThirdPartyLibraries[] libraries);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static PackageIdentity <PublishThirdPartyLibraries>b__1(InputPackage _);
    [CompilerGeneratedAttribute]
private static InputPackage <PublishThirdPartyLibraries>b__2(InputPackage _);
    [CompilerGeneratedAttribute]
private static IGalleryPackage <PublishThirdPartyLibraries>b__3(InputPackage inp);
    [CompilerGeneratedAttribute]
private static InstallersPortablesZipsDeployableFile <Deploy>b__1d(ThirdPartyLibraries _);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__36(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__37(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__38(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__39(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__3a(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__3b(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__3c(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__3d(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__3e(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__3f(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__40(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__41(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__42(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__43(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__44(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__45(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__46(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__47(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__48(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__49(RelativePath f, IPackageMetadata m);
    [CompilerGeneratedAttribute]
private static IPackageMetadata <.cctor>b__4a(RelativePath f, IPackageMetadata m);
}
[ShellComponentAttribute]
public class JetBrains.Application.Build.Runner.BuildRequestEntryBinaries : object {
    private ILogger Logger;
    private IProductCommandLine myCmdline;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<IStructuredStorage, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    public BuildRequestEntryBinaries(IProductCommandLine cmdline, ILogger logger);
    public void AddBuildScriptAndEngineBinariesToRequest(BuildRunnerRequest request, ProductHomeDirArtifact homedir);
    public static void AddBuildScriptAndEngineBinariesToRequest(BuildRunnerRequest request, ICommandLine cmdline, ProductHomeDirArtifact homedir, ILogger logger);
    private static void AddBuildScriptAndEngineBinariesToRequest_Engine(BuildRunnerRequest request, ICommandLine cmdline, ProductHomeDirArtifact homedir, ILogger logger);
    private static void AddBuildScriptAndEngineBinariesToRequest_Script(BuildRunnerRequest request, ICommandLine cmdline, ProductHomeDirArtifact homedir, ILogger logger);
    [NotNullAttribute]
private static List`1<SimpleFileItem> FilterOutNonBinSstg(List`1<SimpleFileItem> binfilesUnfiltered);
    [CanBeNullAttribute]
private static FileSystemPath ParseRealtivelyIfPossible(string sBin, ProductHomeDirArtifact homedir, ILogger logger);
    [CompilerGeneratedAttribute]
private static bool <FilterOutNonBinSstg>b__e(SimpleFileItem fi);
    [CompilerGeneratedAttribute]
private static bool <FilterOutNonBinSstg>b__f(IStructuredStorage sstg);
}
public static class JetBrains.Application.Build.Runner.BuildRunner : object {
    public static ILogger Logger;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<string, AssemblyQualifiedTypeName> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static SessionStartedHandler CS$<>9__CachedAnonymousMethodDelegate1c;
    private static BuildRunner();
    public static IList`1<object> Run(ICollection`1<FileSystemPath> assemblies, IEnumerable`1<object> inputs, IList`1<Type> outputs);
    public static IList`1<object> Run(IEnumerable`1<Assembly> assemblies, IEnumerable`1<object> inputs, IList`1<Type> outputs);
    public static void Run(BuildStorage storage, IList`1<BuildStorageArtifact> artifactsToCalculate);
    [PublicAPIAttribute]
public static int RunCommandLine(string objective, Hashtable artifactStringValues, String[] dirsWithBuildScriptSources, String[] filesWithBuildScriptBinaries, String[] filesWithBuildEngine, int nMaxLoggingLevel);
    [HandleProcessCorruptedStateExceptionsAttribute]
[PublicAPIAttribute]
public static int RunCommandLineInterface();
    [PublicAPIAttribute]
public static int RunTeamCity(string objective, Hashtable artifactStringValues, String[] dirsWithBuildScriptSources, String[] filesWithBuildScriptBinaries, String[] filesWithBuildEngine);
    [NotNullAttribute]
private static BuildRunnerCommandString FillCommandStringObject(string objective, Hashtable artifactStringValues, String[] dirsWithBuildScriptSources, String[] filesWithBuildScriptBinaries, String[] filesWithBuildEngine);
    private static void LogIntoCommandLine(SynchronizedLifetime lifetime, LoggingLevel loglevelMax, BuildRunnerSession session);
    private static SessionStartedHandler RunCommandLine_OnSessionStarted(LoggingLevel nMaxLoggingLevel);
    private static UInt32 RunCommandLineInterfaceCore();
    [CanBeNullAttribute]
private static BuildRunnerEnvironment RunCommandLineInterfaceCore_FillRequestFromCommandLine(BuildRunnerRequest request, ICommandLine cmdl);
    private static SessionStartedHandler RunCommandLineInterfaceCore_InitLoggerAndHandling();
    private static IList`1<object> RunOnStorage(BuildStorage storage, IList`1<Type> outputs);
    private static Task RunTeamCity_OnSessionStarted(SynchronizedLifetime lifetime, BuildRunnerSession session);
    [CompilerGeneratedAttribute]
private static bool <RunCommandLineInterfaceCore_FillRequestFromCommandLine>b__13(string s);
    [CompilerGeneratedAttribute]
private static string <RunCommandLineInterfaceCore_FillRequestFromCommandLine>b__14(string s);
    [CompilerGeneratedAttribute]
private static AssemblyQualifiedTypeName <RunCommandLineInterfaceCore_FillRequestFromCommandLine>b__15(string s);
    [CompilerGeneratedAttribute]
private static Task <RunCommandLineInterfaceCore_InitLoggerAndHandling>b__1b(SynchronizedLifetime lifetime, BuildRunnerSession session);
}
public class JetBrains.Application.Build.Runner.BuildRunnerEnvironmentCollector : object {
    [NotNullAttribute]
private Func`1<BuildRunnerEnvironment> myEnvironment;
    [CompilerGeneratedAttribute]
private static Func`2<IsCachingBuildStuff, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public BuildRunnerEnvironmentCollector(IInputArtifactStringTable stringtable, ILogger logger);
    private static bool GetIsCaching(IInputArtifactStringTable stringtable, ILogger logger);
    [CanBeNullAttribute]
private static SimpleFileItem GetNugetConfig(IInputArtifactStringTable stringtable, ILogger logger);
    private sealed virtual override BuildRunnerEnvironment JetBrains.Application.Build.App.IBuildRunnerEnvironmentCollector.TryGetBuildEnvironment();
    [CompilerGeneratedAttribute]
private static bool <GetIsCaching>b__8(IsCachingBuildStuff o);
}
public static class JetBrains.Application.Build.Runner.BuildRunnerRequestFiller : object {
    [CompilerGeneratedAttribute]
private static Func`2<ArtifactStringsForNestedStage, IDictionary`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate1;
    public static void SetInputArtifactsFromStringTable(BuildRunnerRequest request, IInputArtifactStringTable stringtable, ICollection`1<object> parametersToExclude, ILogger logger);
    [NotNullAttribute]
public static BuildRunnerRequest WrapEntryPointWithFullRequest(SimpleBuildRequest simple, IInputArtifactStringTable stringtable, BuildScriptEntrySources sources, BuildRequestEntryBinaries binaries, ILogger logger);
    [CompilerGeneratedAttribute]
private static IDictionary`2<string, string> <SetInputArtifactsFromStringTable>b__0(ArtifactStringsForNestedStage strings);
}
[ShellComponentAttribute]
public class JetBrains.Application.Build.Runner.BuildScriptEntrySources : object {
    public static bool OptionUseOnlyShellBuildScriptInEntryBuild;
    public static RelativePath PlatformCoreShellBuildScriptPath;
    private ILogger Logger;
    private IProductCommandLine myCmdline;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public BuildScriptEntrySources(IProductCommandLine cmdline, ILogger logger);
    private static BuildScriptEntrySources();
    public void AddBuildScriptSourcesFromCommandLineToRequest(BuildRunnerRequest request, ProductHomeDirArtifact homedir);
    public static void AddBuildScriptSourcesFromCommandLineToRequest(BuildRunnerRequest request, ICommandLine cmdl, ProductHomeDirArtifact homedir, bool isAddingSourceFilesFromNonKeyedParameters, ILogger logger);
    [NotNullAttribute]
public static IEnumerable`1<RelativePath> GetWellKnownEntryBuildSourcesLocations(ProductHomeDirArtifact homedir);
    [CompilerGeneratedAttribute]
private static bool <AddBuildScriptSourcesFromCommandLineToRequest>b__0(string s);
}
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTable {
    public IInputArtifactStringTableIndexer Artifacts { get; }
    public IDictionaryEvents`2<string, string> MapArtifactNameToValue { get; }
    public IDictionaryEvents`2<StringSlice, String[]> MapLocalNameToFullNames { get; }
    public abstract virtual IInputArtifactStringTableIndexer get_Artifacts();
    public abstract virtual IDictionaryEvents`2<string, string> get_MapArtifactNameToValue();
    public abstract virtual IDictionaryEvents`2<StringSlice, String[]> get_MapLocalNameToFullNames();
    public abstract virtual string TryGetPreferredFullNameByLocalName(StringSlice localname);
}
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry {
    public bool IsDefined { get; }
    public IProperty`1<string> LiveString { get; }
    public StringSlice LocalName { get; }
    public IInputArtifactStringTable Owner { get; }
    public string String { get; public set; }
    public abstract virtual bool get_IsDefined();
    public abstract virtual IProperty`1<string> get_LiveString();
    public abstract virtual StringSlice get_LocalName();
    public abstract virtual IInputArtifactStringTable get_Owner();
    public abstract virtual string get_String();
    public abstract virtual void set_String(string value);
    public abstract virtual IInputArtifactStringTableEntry`1<TArtifact> Cast();
}
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry`1 {
    public IProperty`1<TArtifact> LiveValue { get; }
    public TArtifact Value { get; public set; }
    public abstract virtual IProperty`1<TArtifact> get_LiveValue();
    public abstract virtual TArtifact get_Value();
    public abstract virtual void set_Value(TArtifact value);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTableIndexer {
    public IInputArtifactStringTableEntry Item { get; }
    public IInputArtifactStringTable Owner { get; }
    public abstract virtual IInputArtifactStringTableEntry get_Item(StringSlice localname);
    public abstract virtual IInputArtifactStringTable get_Owner();
    public abstract virtual IInputArtifactStringTableEntry`1<TArtifact> GetItem();
}
public class JetBrains.Application.Build.Runner.InputArtifactStringTable : object {
    private ArtifactsIndexer myArtifactsIndexer;
    private JetHashSet`1<StringSlice> myHashKeysBetweenTableAndStringProp;
    private Lifetime myLifetime;
    private IDictionary`2<Pair`2<StringSlice, Type>, IUntypedProperty> myMapArtifactPropertiesParsed;
    private IDictionary`2<StringSlice, IProperty`1<string>> myMapArtifactPropertiesString;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private IDictionaryEvents`2<string, string> <MapArtifactNameToValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionaryEvents`2<StringSlice, String[]> <MapLocalNameToFullNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1a;
    public IInputArtifactStringTableIndexer Artifacts { get; }
    public IDictionaryEvents`2<string, string> MapArtifactNameToValue { get; private set; }
    public IDictionaryEvents`2<StringSlice, String[]> MapLocalNameToFullNames { get; private set; }
    public InputArtifactStringTable(Lifetime lifetime, IThreading threading, ILogger logger);
    public sealed virtual IInputArtifactStringTableIndexer get_Artifacts();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionaryEvents`2<string, string> get_MapArtifactNameToValue();
    [CompilerGeneratedAttribute]
private void set_MapArtifactNameToValue(IDictionaryEvents`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionaryEvents`2<StringSlice, String[]> get_MapLocalNameToFullNames();
    [CompilerGeneratedAttribute]
private void set_MapLocalNameToFullNames(IDictionaryEvents`2<StringSlice, String[]> value);
    [CanBeNullAttribute]
public sealed virtual string TryGetPreferredFullNameByLocalName(StringSlice localname);
    private void Ctor_WatchArtifactStringIntoProperties(Lifetime lifetime);
    private void SetOrRemoveValue(StringSlice localname, string value);
    [CanBeNullAttribute]
private string TryGetValue(StringSlice localname);
    private IProperty`1<TValue> WatchArtifactParsedValue(StringSlice localname);
    [NotNullAttribute]
private IProperty`1<string> WatchArtifactString(StringSlice localname);
    public static void FillFromCommandLine(IInputArtifactStringTable stringtable, ICommandLine cmdline, bool isAllowShortSyntax, ILogger Logger);
    public static void FillPredefined(IInputArtifactStringTable stringtable, ILogger logger);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(AddRemoveEventArgs`1<KeyValuePair`2<string, string>> args);
    [CompilerGeneratedAttribute]
private static string <TryGetPreferredFullNameByLocalName>b__6(string s);
    [CompilerGeneratedAttribute]
private void <Ctor_WatchArtifactStringIntoProperties>b__8(AddRemoveEventArgs`1<KeyValuePair`2<string, string>> args);
    [CompilerGeneratedAttribute]
private static bool <FillFromCommandLine>b__17(string s);
    [CompilerGeneratedAttribute]
private static string <FillFromCommandLine>b__18(string s);
}
public class JetBrains.Application.Build.Runner.SimpleBuildRequest : object {
    [NotNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public AssemblyQualifiedTypeName MainObjective;
    [NotNullAttribute]
public ICollection`1<object> Parameters;
    private SimpleBuildRequest(AssemblyQualifiedTypeName mainObjective, string sDisplayName, Object[] parameters);
    [NotNullAttribute]
public static SimpleBuildRequest CreateBinaryStage();
    [NotNullAttribute]
public static SimpleBuildRequest CreateBinaryStage(Object[] parameters);
    [NotNullAttribute]
public static SimpleBuildRequest CreateBinaryStage(AssemblyQualifiedTypeName aqtnBinaryStageObjective);
    [NotNullAttribute]
public static SimpleBuildRequest CreateExplicit(Object[] parameters);
    [NotNullAttribute]
public static SimpleBuildRequest CreateExplicit(AssemblyQualifiedTypeName aqtnMainStage, Object[] parameters);
    [NotNullAttribute]
public static string MakeDisplayNameForObjective(AssemblyQualifiedTypeName objective);
    public virtual string ToString();
}
public static class JetBrains.Application.Build.Tests.BoostTestingTasks : object {
    private static TimeSpan TestsRunTimeout;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPartPaths, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<NugetEntry>, IEnumerable`1<RelativePath>> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<NugetEntry, RelativePath> CS$<>9__CachedAnonymousMethodDelegate1e;
    private static BoostTestingTasks();
    [BuildStepAttribute]
public static BoostTestResult RunBoostTests(AllAssembliesOnEverything allass, TestDataHomeDirArtifact productHomeDirArtifact, InputPackage[] ipkgs, ILogger logger);
    private static void RunBoostTests_Subplatform(Lifetime lifeTestRun, Subplatform subWithTests, TestDataHomeDirArtifact productHomeDirArtifact, InputPackage[] ipkgs, ILogger logger);
    [NotNullAttribute]
private static Tuple`2<string, OneToListMap`2<string, RelativePath>> LoadBoostTestSuits(FileSystemPath configurationFile);
    [CompilerGeneratedAttribute]
private static bool <RunBoostTests_Subplatform>b__5(NugetPartPaths x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<RelativePath> <RunBoostTests_Subplatform>b__6(IList`1<NugetEntry> x);
    [CompilerGeneratedAttribute]
private static string <RunBoostTests_Subplatform>b__8(InputPackage pkg);
    [CompilerGeneratedAttribute]
private static RelativePath <RunBoostTests_Subplatform>b__7(NugetEntry y);
}
public static class JetBrains.Application.Build.Tests.IntegrationTestingTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, IEnumerable`1<IAssemblyItem>> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IAssemblyItem, RelativePath> CS$<>9__CachedAnonymousMethodDelegate8;
    [BuildStepAttribute]
public static ExtractForIntegrationTests NestedExtractForIntegrationTests(InputPackage[] ipkgs, InstallerExePackedWithEmbeddedPackages installerExePackedWithEmbeddedPackages, AllAssembliesOnEverything allass, ILogger logger, IntegrationTestsHomeDirArtifact homedir);
    [CompilerGeneratedAttribute]
private static string <NestedExtractForIntegrationTests>b__0(InputPackage pkg);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IAssemblyItem> <NestedExtractForIntegrationTests>b__2(InputPackage pkg);
    [CompilerGeneratedAttribute]
private static RelativePath <NestedExtractForIntegrationTests>b__3(IAssemblyItem ai);
}
[TypeConverterAttribute("JetBrains.Application.Build.Tests.IntegrationTestsHomeDirArtifact/IntegrationTestsHomeDirArtifactConverter")]
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.Build.Tests.IntegrationTestsHomeDirArtifact/IntegrationTestsHomeDirArtifactSerializer")]
public class JetBrains.Application.Build.Tests.IntegrationTestsHomeDirArtifact : object {
    public static string InTestsDataForVm;
    public static string InTestsDataForVmBin;
    public static string InTestsInstallerName;
    [NotNullAttribute]
public FileSystemPath InTestHomeDir;
    public IntegrationTestsHomeDirArtifact(FileSystemPath inTestHomeDir);
    public virtual string ToString();
}
public interface JetBrains.Application.Build.Tests.Nunit.IInvokeNunit {
    public abstract virtual void RunTests(FileSystemPath pathDllToTest, TestRunnerCpuArchitecture cpu, TestRunnerClr clr, TestsFilter filter, IDictionary`2<string, string> additionalenvvars);
    [NotNullAttribute]
public abstract virtual Task`1<Missing> RunTestsAsync(OuterLifetime lifetime, FileSystemPath pathDllToTest, TestRunnerCpuArchitecture cpu, TestRunnerClr clr, TestsFilter filter, IDictionary`2<string, string> additionalenvvars);
}
[BuildHelperAttribute]
public class JetBrains.Application.Build.Tests.Nunit.InvokeNunitRunner : object {
    public static ILogger Logger;
    private static PackageIdentity[] NunitRunnerPackagesSet;
    public static TimeSpan TestsRunTimeout;
    private RelativePath ExecutableName;
    private AsyncLazy`1<FileSystemPath> myNunitLauncherFile;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate14;
    public InvokeNunitRunner(Lifetime lifetime, NugetPackageManagerForBuild nugetPackageManagerForBuild, ILogger logger);
    private static InvokeNunitRunner();
    public static bool IsDllReferencingNunit(FileSystemPath pathDll);
    public static bool IsDllReferencingNunit(IAssemblyItem ai);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.Build.Tests.Nunit.InvokeNunitRunner/<GetStartInfoAsync>d__15")]
[ItemCanBeNullAttribute]
private Task`1<StartInfo> GetStartInfoAsync(FileSystemPath pathDllToTest, TestRunnerCpuArchitecture cpu, TestRunnerClr clr, TestsFilter filter, IDictionary`2<string, string> additionalenvvars);
    private sealed virtual override void JetBrains.Application.Build.Tests.Nunit.IInvokeNunit.RunTests(FileSystemPath pathDllToTest, TestRunnerCpuArchitecture cpu, TestRunnerClr clr, TestsFilter filter, IDictionary`2<string, string> additionalenvvars);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Tests.Nunit.InvokeNunitRunner/<JetBrains.Application.Build.Tests.Nunit.IInvokeNunit.RunTestsAsync>d__20")]
[DebuggerStepThroughAttribute]
private sealed virtual override Task`1<Missing> JetBrains.Application.Build.Tests.Nunit.IInvokeNunit.RunTestsAsync(OuterLifetime lifetime, FileSystemPath pathDllToTest, TestRunnerCpuArchitecture cpu, TestRunnerClr clr, TestsFilter filter, IDictionary`2<string, string> additionalenvvars);
    [CompilerGeneratedAttribute]
private static bool <IsDllReferencingNunit>b__c(AssemblyNameInfo ani);
    [CompilerGeneratedAttribute]
private static bool <IsDllReferencingNunit>b__e(AssemblyNameInfo ani);
    [CompilerGeneratedAttribute]
private static string <GetStartInfoAsync>b__11(string cat);
    [CompilerGeneratedAttribute]
private static string <GetStartInfoAsync>b__12(string cat);
}
[ValueSerializerAttribute("JetBrains.Application.Build.Tests.UnitTestDegreeOfParallelism/UnitTestDegreeOfParallelismSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.Build.Tests.UnitTestDegreeOfParallelism : object {
    private double myRawValue;
    public bool IsFactorNotProcessorCount;
    [BuildStepAttribute]
public static UnitTestDegreeOfParallelism Default { get; }
    public double Factor { get; }
    public UInt32 ProcessorCount { get; }
    public double RawValueOfFactorOrProcessorCount { get; }
    private UnitTestDegreeOfParallelism(bool isFactorNotProcessorCount, double value);
    public static UnitTestDegreeOfParallelism get_Default();
    public double get_Factor();
    public UInt32 get_ProcessorCount();
    public double get_RawValueOfFactorOrProcessorCount();
    public static UnitTestDegreeOfParallelism FromFactor(double factor);
    public static UnitTestDegreeOfParallelism FromProcessorCount(UInt32 count);
    public virtual string ToString();
    private static UnitTestDegreeOfParallelism Parse(string s);
}
public static class JetBrains.Application.Build.Tests.UnitTestingTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<UnitTestRunnerParametersForSingleRun, TestRunnerCpuArchitecture> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<UnitTestRunnerParametersForSingleRun, TestRunnerClr> CS$<>9__CachedAnonymousMethodDelegate7;
    [BuildStepAttribute]
public static UnitTestResult RunUnitTests(Lifetime lifeStep, AllAssembliesOnEverything allass, InputPackage[] ipkgs, TestDataHomeDirArtifact testhomedir, IInvokeNunit invokenunit, Optional`1<UnitTestPlatform> platform, Optional`1<UnitTestFilter> filter, Optional`1<UnitTestRunnerParameters> maybeParameters, Optional`1<UnitTestingExtractedFileConflicts> extractconflicts, UnitTestDegreeOfParallelism degreeOfParallelism, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Tests.UnitTestingTasks/<RunUnitTestsAsync>d__14")]
[DebuggerStepThroughAttribute]
public static Task`1<UnitTestResult> RunUnitTestsAsync(Lifetime lifeStep, AllAssembliesOnEverything allass, InputPackage[] ipkgs, TestDataHomeDirArtifact testhomedir, IInvokeNunit invokenunit, Optional`1<UnitTestPlatform> platform, Optional`1<UnitTestFilter> filter, Optional`1<UnitTestRunnerParameters> maybeParameters, Optional`1<UnitTestingExtractedFileConflicts> extractconflicts, UnitTestDegreeOfParallelism degreeOfParallelism, ILogger logger);
    private static bool CheckAssembly(IAssemblyItem assemblyitem, Subplatform subWithTests, UnitTestRunnerParametersForSingleRun runparams, Regex regexAssemblyFilter, ILogger logger);
    private static void DecorateWithTestSuite(Lifetime lifetime, UnitTestRunnerParametersForSingleRun singleRun, ConfigurationsVariation convar, ILogger logger);
    private static Task`1<UnitTestPreparedFolder> PrepareSubplatformAsync(Lifetime lifeTestRun, Subplatform subWithTests, InputPackage[] ipkgs, Optional`1<UnitTestingExtractedFileConflicts> extractconflicts, Invocator invocator, ILogger logger);
    private static void ReportFailedNunit(Exception ex, Subplatform subWithTests, IAssemblyItem assemblyitem, ILogger logger);
    [NotNullAttribute]
private static Task`1<Missing> RunSingleAssemblyAsync(Lifetime lifetime, IAssemblyItem assemblyitem, Subplatform subWithTests, UnitTestRunnerParametersForSingleRun runparams, UnitTestPreparedFolder prepdir, TestDataHomeDirArtifact testhomedir, Regex regexAssemblyFilter, IThreading invocator, IInvokeNunit invokenunit, TestsFilter testsfilter, TaskSemaphore semaphore, ILogger logger);
    private static Task`1<Missing> RunSubplatformOnParametersAsync(Lifetime lifeSubplatform, Subplatform subWithTests, UnitTestRunnerParametersForSingleRun runparams, UnitTestPreparedFolder prepdir, IThreading invocator, TestDataHomeDirArtifact testhomedir, IInvokeNunit invokenunit, ConfigurationsVariation convar, TaskSemaphore semaphore, ILogger logger);
    [CompilerGeneratedAttribute]
private static TestRunnerCpuArchitecture <RunUnitTestsAsync>b__1(UnitTestRunnerParametersForSingleRun p);
    [CompilerGeneratedAttribute]
private static TestRunnerClr <RunUnitTestsAsync>b__2(UnitTestRunnerParametersForSingleRun p);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Build.Validation.PostCompileValidationResult : object {
    [NotNullAttribute]
public String[] Errors;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, String[]> CS$<>9__CachedAnonymousMethodDelegate1;
    public PostCompileValidationResult(IStructuredStorage sstg);
    public PostCompileValidationResult(String[] errors);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private static String[] <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__2(CsexpWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Build.Validation.ValidateComponentSpecificZoning : object {
    private static string ComponentAssemblyDataName;
    [NotNullAttribute]
public String[] Errors;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, String[]> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalogType, StringSource> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, string> CS$<>9__CachedAnonymousMethodDelegate35;
    public bool IsValid { get; }
    [BuildStepAttribute]
public ValidateComponentSpecificZoning(ProductPartCatalogForBuild productPartCatalogForBuild, PackageZoningInvalid[] invalids, AllAssembliesOnEverything allass, ILogger logger);
    public ValidateComponentSpecificZoning(IStructuredStorage sstg);
    private static ValidateComponentSpecificZoning();
    public bool get_IsValid();
    [BuildStepAttribute]
public static PostCompileValidationResult MountToPostCompileValidation(ValidateComponentSpecificZoning item);
    private static void CheckActivatorNotPullingNewEnvZones(PartCatalogType ctypeActivator, ICollection`1<ZonePart> zonesTransitive, PartCatalogZoneMapping zonemapping, IDictionary`2<PartCatalogType, bool> mapIsZoneEnvironment, IList`1<ValidationException> errors, ILogger logger);
    private static void CheckComponents(ProductPartCatalogForBuild productPartCatalogForBuild, PartCatalogZoneMapping zonemapping, IList`1<ValidationException> errors, IDictionary`2<PartCatalogType, bool> mapIsZoneEnvironment, ILogger logger);
    private static void CheckEnvComponentNotZonedByShell(PartCatalogType ctypeComponent, ICollection`1<ZonePart> zonesTransitive, PartCatalogZoneMapping zonemapping, IDictionary`2<PartCatalogType, bool> mapIsZoneEnvironment, IList`1<ValidationException> errors, ILogger logger);
    private static void CheckEnvironmentZoneDefinitions(ProductPartCatalogForBuild productPartCatalogForBuild, IList`1<ValidationException> errors, IDictionary`2<PartCatalogType, bool> mapIsZoneEnvironment, ILogger logger);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    private static IList`1<ValidationException> GetValidationErrors(ProductPartCatalogForBuild productPartCatalogForBuild, ILogger logger);
    private static bool IsZoneEnvironment(ZonePart zone, IDictionary`2<PartCatalogType, bool> mapIsZoneEnvironment);
    private static AttrKinds TypeToKindBits(PartCatalogType ctype);
    [CompilerGeneratedAttribute]
private static String[] <.ctor>b__5(Stream stream);
    [CompilerGeneratedAttribute]
private static string <CheckActivatorNotPullingNewEnvZones>b__7(ZonePart z);
    [CompilerGeneratedAttribute]
private static StringSource <CheckEnvComponentNotZonedByShell>b__1e(PartCatalogType z);
    [CompilerGeneratedAttribute]
private static string <CheckEnvironmentZoneDefinitions>b__32(ZonePart z);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__3c(CsexpWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Build.Validation.ZonesValidationResult : object {
    [NotNullAttribute]
public IList`1<Error> Errors;
    [CompilerGeneratedAttribute]
private static Func`2<Error, string> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<CsexpReader, Error> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Action`2<Error, CsexpWriter> CS$<>9__CachedAnonymousMethodDelegate2e;
    [BuildStepAttribute]
public ZonesValidationResult(Lifetime lifetime, ProductPartCatalogForBuild productPartCatalogForBuild, PackageZoningInvalid[] invalids, SuppressMissingRequirementValidation[] zonesToSuppressValidation, AllAssembliesOnEverything allass, ILogger logger);
    public ZonesValidationResult(IStructuredStorage sstg);
    [BuildStepAttribute]
public static PostCompileValidationResult MountToPostCompileValidation(ZonesValidationResult zvr);
    public void Serialize(CsexpArchive ar);
    private static bool AllZonesAreSuppresed(JetHashSet`1<AssemblyQualifiedTypeName> suppresedZonesHashSet, Error e);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private void <.ctor>b__27(Stream stream);
    [CompilerGeneratedAttribute]
private static string <MountToPostCompileValidation>b__29(Error err);
    [CompilerGeneratedAttribute]
private static Error <Serialize>b__2b(CsexpReader reader);
    [CompilerGeneratedAttribute]
private static void <Serialize>b__2c(Error error, CsexpWriter writer);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__2f(CsexpWriter writer);
}
public static class JetBrains.Application.Build.Validation.ZonesValidator : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, AssemblyQualifiedTypeName> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, AssemblyQualifiedTypeName> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<ModuleZoneWithOrigin, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<ModuleZoneWithOrigin, string> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, AssemblyQualifiedTypeName> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, AssemblyQualifiedTypeName> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<ModuleZoneWithOrigin, string> CS$<>9__CachedAnonymousMethodDelegate23;
    private static ZonesValidator();
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Validation.ZonesValidator/<ValidateAsync>d__e")]
[DebuggerStepThroughAttribute]
[NotNullAttribute]
public static Task`1<Error[]> ValidateAsync(PartCatalog catalog, IThreading threading);
    private static FrugalLocalList`1<ZonePart> CmpSortedZones(ZonePart[] enabledZones, ZonePart[] requiredZones);
    private static ZonePart[] GetNameZones(IMetadataTypeInfo info, AssemblyData assemblyData);
    private static bool IsTypeEligibleForFullCheck(PartCatalogType pctype);
    [NotNullAttribute]
private static ICollection`1<ZonePart> MakeMinimalSet(ICollection`1<ZonePart> allzones);
    private static bool ValidateCustomAttributeOwner(IMetadataEntity entity, TypeRequirementsValidationContext ctx);
    private static bool ValidateMethod(ImageBodyReader bodyReader, IMetadataMethod metadataMethod, TypeRequirementsValidationContext ctx);
    private static bool ValidateMethodBody(IMethodBody body, TypeRequirementsValidationContext ctx);
    private static bool ValidatePartTypeRequirements(TypeRequirementsValidationContext ctx);
    private static bool ValidateType(IMetadataType type, TypeRequirementsValidationContext ctx);
    private static bool ValidateTypeDeclaration(IMetadataTypeInfo referencedTypeInfo, TypeRequirementsValidationContext ctx);
    private static bool ValidateTypeSpecialization(IMetadataClassType referencedType, TypeRequirementsValidationContext ctx);
    private static void ValidateZoneDefinitionZones(PartCatalogType pctype, IMetadataTypeInfo metype, ZonePart[] zonesRequiredByType, PartCatalogZoneMapping zonemapping, ConcurrentQueue`1<Error> errorlog);
    [CompilerGeneratedAttribute]
private static AssemblyQualifiedTypeName <ValidateTypeDeclaration>b__15(ZonePart z);
    [CompilerGeneratedAttribute]
private static AssemblyQualifiedTypeName <ValidateTypeDeclaration>b__16(ZonePart z);
    [CompilerGeneratedAttribute]
private static string <ValidateTypeDeclaration>b__17(ModuleZoneWithOrigin o);
    [CompilerGeneratedAttribute]
private static string <ValidateTypeDeclaration>b__18(ModuleZoneWithOrigin o);
    [CompilerGeneratedAttribute]
private static AssemblyQualifiedTypeName <ValidateZoneDefinitionZones>b__1e(ZonePart z);
    [CompilerGeneratedAttribute]
private static AssemblyQualifiedTypeName <ValidateZoneDefinitionZones>b__1f(ZonePart z);
    [CompilerGeneratedAttribute]
private static string <ValidateZoneDefinitionZones>b__20(ModuleZoneWithOrigin o);
}
public class JetBrains.Application.BuildScript.Application.ApplicationPackageArtifact : object {
    private static string SerializationIdentity;
    private Nullable`1<DateTime> myBestBefore;
    private Nullable`1<DateTime> myBirthDate;
    private DateTime myBuiltOn;
    [NotNullAttribute]
private string myCompanyNameHuman;
    [NotNullAttribute]
private string myCompanyNameLegal;
    [NotNullAttribute]
private ICollection`1<ApplicationPackageFile> myFiles;
    [NotNullAttribute]
private ICollection`1<ApplicationPackageReference> myReferences;
    [NotNullAttribute]
private string mySubplatformName_String;
    [CanBeNullAttribute]
private SubplatformName mySubplatformName_Typed;
    [NotNullAttribute]
private JetSemanticVersion myVersion;
    [CompilerGeneratedAttribute]
private static Func`2<CsexpReader, ApplicationPackageFile> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`2<ApplicationPackageFile, CsexpWriter> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<CsexpReader, ApplicationPackageReference> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`2<ApplicationPackageReference, CsexpWriter> CS$<>9__CachedAnonymousMethodDelegatea;
    public Nullable`1<DateTime> BestBefore { get; }
    public Nullable`1<DateTime> BirthDate { get; }
    public DateTime BuiltOn { get; }
    [NotNullAttribute]
public string CompanyNameHuman { get; }
    [NotNullAttribute]
public string CompanyNameLegal { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public ICollection`1<ApplicationPackageFile> Files { get; }
    [NotNullAttribute]
public string Id { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public ICollection`1<ApplicationPackageReference> References { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    [NotNullAttribute]
public JetSemanticVersion Version { get; }
    public ApplicationPackageArtifact(CsexpReader reader);
    public ApplicationPackageArtifact(IStructuredStorage sstg);
    public ApplicationPackageArtifact(IApplicationPackage other);
    public ApplicationPackageArtifact(SubplatformName sname, JetSemanticVersion version, string companyNameHuman, string companyNameLegal, DateTime builtOn, Nullable`1<DateTime> bestBefore, Nullable`1<DateTime> birthDate, IEnumerable`1<ApplicationPackageFile> files, ICollection`1<ApplicationPackageReference> references);
    private static ApplicationPackageArtifact();
    public sealed virtual Nullable`1<DateTime> get_BestBefore();
    public sealed virtual Nullable`1<DateTime> get_BirthDate();
    public sealed virtual DateTime get_BuiltOn();
    public sealed virtual string get_CompanyNameHuman();
    public sealed virtual string get_CompanyNameLegal();
    public sealed virtual ICollection`1<ApplicationPackageFile> get_Files();
    public sealed virtual string get_Id();
    public sealed virtual ICollection`1<ApplicationPackageReference> get_References();
    public sealed virtual SubplatformName get_SubplatformName();
    public sealed virtual JetSemanticVersion get_Version();
    public void GetObjectData(CsexpWriter writer);
    public virtual string ToString();
    protected virtual void AssertValid();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    protected virtual void SerializeCore(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__2(CsexpWriter writer);
    [CompilerGeneratedAttribute]
private static ApplicationPackageFile <SerializeCore>b__3(CsexpReader reader);
    [CompilerGeneratedAttribute]
private static void <SerializeCore>b__4(ApplicationPackageFile item, CsexpWriter writer);
    [CompilerGeneratedAttribute]
private static ApplicationPackageReference <SerializeCore>b__5(CsexpReader reader);
    [CompilerGeneratedAttribute]
private static void <SerializeCore>b__6(ApplicationPackageReference item, CsexpWriter writer);
}
public class JetBrains.Application.BuildScript.Application.ApplicationPackageFile : object {
    [CanBeNullAttribute]
private AssemblyNameInfo myAssemblyName;
    [NotNullAttribute]
private RelativePath myLocalInstallPath;
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    [NotNullAttribute]
public RelativePath LocalInstallPath { get; }
    public ApplicationPackageFile(RelativePath localInstallPath, AssemblyNameInfo assname);
    public ApplicationPackageFile(CsexpReader reader);
    public AssemblyNameInfo get_AssemblyName();
    public RelativePath get_LocalInstallPath();
    public void Serialize(CsexpWriter writer);
    public virtual string ToString();
    internal void SerializeCore(CsexpArchive ar);
}
[XamlSerializableAttribute]
public class JetBrains.Application.BuildScript.Application.ApplicationPackageReference : object {
    [NotNullAttribute]
private string myCompanyNameHuman;
    [NotNullAttribute]
private SubplatformName mySubplatformName;
    [NotNullAttribute]
public string CompanyNameHuman { get; }
    [NotNullAttribute]
public string PackageId { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    public ApplicationPackageReference(SubplatformName subplatformName, string companyNameHuman);
    public ApplicationPackageReference(CsexpReader reader);
    public string get_CompanyNameHuman();
    public string get_PackageId();
    public SubplatformName get_SubplatformName();
    public void Serialize(CsexpWriter writer);
    public virtual string ToString();
    internal void SerializeCore(CsexpArchive ar);
}
public class JetBrains.Application.BuildScript.Application.Catalogs.CalculateModuleZoneTraitsForPartCatalogTables : object {
    public static string TraitNamespace;
    private string JetBrains.Application.Table.Emit.ICalculateTraitsForPartCatalogTables.TraitNamespace { get; }
    private static CalculateModuleZoneTraitsForPartCatalogTables();
    public static PartCatalogTrait GetModuleZoneTraitName(ZonePart zone);
    private sealed virtual override void JetBrains.Application.Table.Emit.ICalculateTraitsForPartCatalogTables.CalculateTraits(EmitTimeTables tables, OneToSetMap`2<TypeRef, TraitNameRecord> typetraits);
    private sealed virtual override string JetBrains.Application.Table.Emit.ICalculateTraitsForPartCatalogTables.get_TraitNamespace();
}
public static class JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogs : object {
    private static ILogger Logger;
    public static ICollection`1<ICalculateTraitsForPartCatalogTables> StandardTraitCalculators;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, AssemblyNameAndLocation> CS$<>9__CachedAnonymousMethodDelegate3;
    private static PartCatalogs();
    [ObsoleteAttribute("Not implemented yet.")]
public static PartCatalog Create(IList`1<PartCatalogAssembly> assemblies);
    public static PartCatalog CreateWithMetadataReader(Lifetime lifetime, IEnumerable`1<AssemblyNameInfo> assemblies, IAssemblyMasterBinder masterbinder);
    public static PartCatalog CreateWithMetadataReaderFromAssemblyFiles(Lifetime lifetime, ICollection`1<FileSystemPath> filesAssembliesForCataloging, IEnumerable`1<FileSystemPath> filesAdditionalAssemblyReferences);
    public static PartCatalog CreateWithMetadataReaderFromAssemblyFiles(Lifetime lifetime, ICollection`1<AssemblyNameAndLocation> filesAssembliesForCataloging, IEnumerable`1<AssemblyNameAndLocation> filesAdditionalAssemblyReferences);
    public static PartCatalog CreateWithMetadataReaderFromRuntimeAssemblies(Lifetime lifetime, IEnumerable`1<Assembly> assemblies);
    public static PartCatalog CreateWithMetadataReaderFromRuntimeAssembly(Lifetime lifetime, Assembly assembly);
    public static CatalogTables CreateWithMetadataReaderRaw(Lifetime lifetime, IEnumerable`1<AssemblyNameInfo> assemblies, IAssemblyMasterBinder masterbinder);
    [CompilerGeneratedAttribute]
private static AssemblyNameAndLocation <CreateWithMetadataReaderFromAssemblyFiles>b__1(FileSystemPath loc);
}
public class JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping : object {
    private ILogger Logger;
    [CompilerGeneratedAttribute]
private IDictionary`2<AssemblyNameInfo, AssemblyData> <MapAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, string> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, string> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyData, string> CS$<>9__CachedAnonymousMethodDelegate21;
    public IDictionary`2<AssemblyNameInfo, AssemblyData> MapAssemblies { get; private set; }
    private PartCatalogZoneMapping(ILogger logger);
    [CompilerGeneratedAttribute]
public IDictionary`2<AssemblyNameInfo, AssemblyData> get_MapAssemblies();
    [CompilerGeneratedAttribute]
private void set_MapAssemblies(IDictionary`2<AssemblyNameInfo, AssemblyData> value);
    [NotNullAttribute]
public static PartCatalogZoneMapping GetOrCreate(PartCatalog catalog);
    [CanBeNullAttribute]
public ICollection`1<ZoneMarker> GetPartZones(PartCatalogType part);
    [CanBeNullAttribute]
public ZonePart[] GetPartZonesTransitivelyClosed(PartCatalogType part);
    public bool IsPartInZones(PartCatalogType part, JetHashSet`1<ZonePart> activeModuleZoneValues, CachedPartsPerZone cachedPartsPerZone);
    public void TraceModuleZones();
    [NotNullAttribute]
private static PartCatalogZoneMapping Calculate(PartCatalog catalog, ILogger logger);
    [CompilerGeneratedAttribute]
private object <GetPartZones>b__2();
    [CompilerGeneratedAttribute]
private static string <GetPartZones>b__3(AssemblyNameInfo name);
    [CompilerGeneratedAttribute]
private object <GetPartZonesTransitivelyClosed>b__c();
    [CompilerGeneratedAttribute]
private static string <GetPartZonesTransitivelyClosed>b__d(AssemblyNameInfo name);
    [CompilerGeneratedAttribute]
private object <IsPartInZones>b__16();
    [CompilerGeneratedAttribute]
private static string <IsPartInZones>b__17(AssemblyNameInfo name);
    [CompilerGeneratedAttribute]
private static string <TraceModuleZones>b__1e(AssemblyNameInfo k);
    [CompilerGeneratedAttribute]
private static string <TraceModuleZones>b__1f(AssemblyData assdata);
}
public static class JetBrains.Application.BuildScript.Application.HostFolderLocations : object {
    public static FileSystemPath GetHostsFolder(HostFolderLifetime folderLifetime);
    public static FileSystemPath GetHostFolder(HostInfo hostInfo, HostFolderLifetime folderLifetime, ApplicationHostDetails folderDetails);
    public static RelativePath GetRelativeHostFolder(HostInfo hostInfo, ApplicationHostDetails folderDetails);
}
[DataContractAttribute]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.Application.HostInfo>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.Application.HostInfo>")]
[JsonObjectAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Application.HostInfo : object {
    public static HostInfo Default;
    [DataMemberAttribute]
public string ShortName;
    [DataMemberAttribute]
public string Hive;
    [DataMemberAttribute]
public UInt32 Wave;
    [DataMemberAttribute]
public bool SupportsSideBySide;
    public string FullIdentifierName { get; }
    public HostInfo(IStructuredStorage storage);
    public HostInfo(string shortName, string hive, UInt32 wave, bool supportSideBySide);
    private static HostInfo();
    public static HostInfo CreateForCurrentWave(string sHostShortName);
    public string get_FullIdentifierName();
    public string GetRootSuffix();
    public HostInfo NewWithRootSuffux(string rootSuffix);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    private void Serialize(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__2(CsexpWriter writer);
}
public interface JetBrains.Application.BuildScript.Application.IApplicationPackage {
    public Nullable`1<DateTime> BestBefore { get; }
    public Nullable`1<DateTime> BirthDate { get; }
    public DateTime BuiltOn { get; }
    [NotNullAttribute]
public string CompanyNameHuman { get; }
    [NotNullAttribute]
public string CompanyNameLegal { get; }
    [NotNullAttribute]
public ICollection`1<ApplicationPackageFile> Files { get; }
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public ICollection`1<ApplicationPackageReference> References { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    [NotNullAttribute]
public JetSemanticVersion Version { get; }
    public abstract virtual Nullable`1<DateTime> get_BestBefore();
    public abstract virtual Nullable`1<DateTime> get_BirthDate();
    public abstract virtual DateTime get_BuiltOn();
    public abstract virtual string get_CompanyNameHuman();
    public abstract virtual string get_CompanyNameLegal();
    public abstract virtual ICollection`1<ApplicationPackageFile> get_Files();
    public abstract virtual string get_Id();
    public abstract virtual ICollection`1<ApplicationPackageReference> get_References();
    public abstract virtual SubplatformName get_SubplatformName();
    public abstract virtual JetSemanticVersion get_Version();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Application.IApplicationPackageEx : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Don't use. Use ApplicationPackages class.")]
public static ApplicationPackageArtifact FindPackageWithAssembly(IEnumerable`1<ApplicationPackageArtifact> thіs, Assembly assembly, OnError onerror);
    [ExtensionAttribute]
[ObsoleteAttribute("Don't use. Use ApplicationPackages class.")]
public static ApplicationPackageArtifact FindPackageWithAssembly(IEnumerable`1<ApplicationPackageArtifact> thіs, AssemblyNameInfo name, OnError onerror);
    [ExtensionAttribute]
[ObsoleteAttribute("Don't use. Use ApplicationPackages class.")]
public static bool HasAssembly(ApplicationPackageArtifact thіs, AssemblyNameInfo name);
}
[ObsoleteAttribute("Use with caution, seems like the ApplicationPackagesLocallyInstalled class fails to expose the enumerable to the container right now, so use the class itself for the enumeration.")]
public interface JetBrains.Application.BuildScript.Application.IApplicationPackageLocallyInstalled {
    [NotNullAttribute]
public FileSystemPath LocalInstallDirectory { get; }
    public abstract virtual FileSystemPath get_LocalInstallDirectory();
}
public interface JetBrains.Application.BuildScript.Application.IApplicationTrait {
}
public interface JetBrains.Application.BuildScript.Application.IEndUserProduct {
    [NotNullAttribute]
public string CompanyNameLegal { get; }
    [NotNullAttribute]
public ImageSource ProductAboutBoxImage { get; }
    [CanBeNullAttribute]
public ImageSource ProductDialogHeaderImage { get; }
    [NotNullAttribute]
public string ProductDisplayName { get; }
    [NotNullAttribute]
public string ProductFullName { get; }
    [NotNullAttribute]
public Icon ProductIcon { get; }
    [NotNullAttribute]
public ImageSource ProductSplashScreenImage { get; }
    [NotNullAttribute]
public Uri ProductUrl { get; }
    public abstract virtual string get_CompanyNameLegal();
    public abstract virtual ImageSource get_ProductAboutBoxImage();
    public abstract virtual ImageSource get_ProductDialogHeaderImage();
    public abstract virtual string get_ProductDisplayName();
    public abstract virtual string get_ProductFullName();
    public abstract virtual Icon get_ProductIcon();
    public abstract virtual ImageSource get_ProductSplashScreenImage();
    public abstract virtual Uri get_ProductUrl();
}
public interface JetBrains.Application.BuildScript.Application.IProductNameAndVersion {
    [NotNullAttribute]
public string CompanyNameHuman { get; }
    [NotNullAttribute]
public string ProductName { get; }
    [NotNullAttribute]
public Version ProductVersion { get; }
    public abstract virtual string get_CompanyNameHuman();
    public abstract virtual string get_ProductName();
    public abstract virtual Version get_ProductVersion();
}
public interface JetBrains.Application.BuildScript.Application.IWindowBranding {
    [NotNullAttribute]
public string CompanyName { get; }
    [NotNullAttribute]
public string ProductDisplayName { get; }
    [NotNullAttribute]
public IProperty`1<Icon> WindowIcon { get; }
    public abstract virtual string get_CompanyName();
    public abstract virtual string get_ProductDisplayName();
    public abstract virtual IProperty`1<Icon> get_WindowIcon();
    [NotNullAttribute]
public abstract virtual string MakeWindowCaption(string caption);
}
public abstract class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute : PartAttribute {
    public static ZonePart AutoselectZoneByAttributePrimitiveValue(IEnumerable`1<PartCatalog> catalogset, ulong valuePrimitive, OnError onerror);
    public static ZonePart AutoselectZoneByAttributeValue(IEnumerable`1<PartCatalog> catalogset, TValue value, OnError onerror);
    public static ZonePart[] AutoselectZonesByAttributePredicate(IEnumerable`1<PartCatalog> catalogset, Func`2<TypeAttribute`1<TAutoselectAttribute>, bool> FIsMatch, OnError onerror);
}
[AttributeUsageAttribute("1024")]
public class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByClrVersionAttribute : AutoselectZoneAttribute {
    public AutoselectZoneByClrVersionAttribute(int nClrVersionMajor);
}
[AttributeUsageAttribute("1024")]
public class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByCpuArchitectureAttribute : AutoselectZoneAttribute {
    public AutoselectZoneByCpuArchitectureAttribute(ProcessorArchitecture processorarchitecture);
}
[ZoneDefinitionAttribute]
[AutoselectZoneByCpuArchitectureAttribute("9")]
public interface JetBrains.Application.BuildScript.Application.Zones.IAmd64CpuArchitectureZone {
}
[AutoselectZoneByCpuArchitectureAttribute("5")]
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IArmCpuArchitectureZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.ICpuArchitectureZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IEnvironmentZone {
}
public interface JetBrains.Application.BuildScript.Application.Zones.IHostSpecificZone {
}
[AutoselectZoneByCpuArchitectureAttribute("0")]
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IIntelCpuArchitectureZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IInternalVisibilityZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IOuterWorldConnectZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IPublicVisibilityZone {
}
public interface JetBrains.Application.BuildScript.Application.Zones.IRequire`1 {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByClrVersionAttribute("2")]
public interface JetBrains.Application.BuildScript.Application.Zones.ISinceClr2Zone {
}
[AutoselectZoneByClrVersionAttribute("4")]
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.ISinceClr4Zone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.ISinceFramework45Zone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneCmdZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneTabWellUIZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneUIZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IUIInteractiveZone {
}
public interface JetBrains.Application.BuildScript.Application.Zones.IZone {
}
public static class JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers : object {
    public static string IZoneFullName;
    public static string NamespaceZoneMarkerClassName;
    public static StringSource RequireFullNameWithoutGenericArgs;
    public static string ZoneDefinitionAttributeFullName;
    public static string ZoneMarkerAttributeTypeFullName;
    public static string ZoneMarkerAttributeTypeLocalName;
    private static ModuleZoneHelpers();
    [NotNullAttribute]
public static ICollection`1<ZonePart> AddZoneBasesAndRequirements(IEnumerable`1<ZonePart> zones, ILogger logger);
    [NotNullAttribute]
public static IDictionary`2<ZonePart, ZonePart[]> AddZoneBasesAndRequirements2(IEnumerable`1<ZonePart> zones, bool isCollectingPaths, ILogger logger);
    [CanBeNullAttribute]
public static ICollection`1<ModuleZoneWithOrigin> GetNameZonesTransitivelyClosedAndExplained(string fullname, AssemblyData assembly, ILogger logger);
    [CanBeNullAttribute]
public static ICollection`1<ModuleZoneWithOrigin> GetPartZonesTransitivelyClosedAndExplained(PartCatalogType part, PartCatalogZoneMapping zonemapping, ILogger logger);
    public static ZoneFlags GetZoneFlags(ZonePart zoneWithAttr);
    public static IEnumerable`1<ZonePart> InheritedZones(ZonePart part);
    public static IEnumerable`1<ZonePart> RequiredZones(ZonePart part);
}
[AttributeUsageAttribute("1036")]
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionAttribute : PartAttribute {
    [PublicAPIAttribute]
public ZoneDefinitionAttribute(ZoneFlags zoneflags);
}
[AttributeUsageAttribute("1036")]
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionConfigurableFeatureAttribute : PartAttribute {
    public string FeatureName;
    public string Description;
    public bool IsInProductSection;
    [PublicAPIAttribute]
public ZoneDefinitionConfigurableFeatureAttribute(string FeatureName, string Description, bool IsInProductSection);
}
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
[AttributeUsageAttribute("1036")]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionProductAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <ProductPresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductTechnicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyNameLegal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionMarketingString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductTwitterUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductUrlEvaluate>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProductIcon>k__BackingField;
    public string ProductPresentableName { get; public set; }
    public string ProductTechnicalName { get; public set; }
    public string CompanyNameLegal { get; public set; }
    public string CompanyName { get; public set; }
    public string VersionMarketingString { get; public set; }
    public string Version { get; public set; }
    public string ProductUrl { get; public set; }
    public string ProductTwitterUrl { get; public set; }
    public string ProductUrlEvaluate { get; public set; }
    public Type ProductIcon { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProductPresentableName();
    [CompilerGeneratedAttribute]
public void set_ProductPresentableName(string value);
    [CompilerGeneratedAttribute]
public string get_ProductTechnicalName();
    [CompilerGeneratedAttribute]
public void set_ProductTechnicalName(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyNameLegal();
    [CompilerGeneratedAttribute]
public void set_CompanyNameLegal(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
public void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public string get_VersionMarketingString();
    [CompilerGeneratedAttribute]
public void set_VersionMarketingString(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ProductUrl();
    [CompilerGeneratedAttribute]
public void set_ProductUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ProductTwitterUrl();
    [CompilerGeneratedAttribute]
public void set_ProductTwitterUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ProductUrlEvaluate();
    [CompilerGeneratedAttribute]
public void set_ProductUrlEvaluate(string value);
    [CompilerGeneratedAttribute]
public Type get_ProductIcon();
    [CompilerGeneratedAttribute]
public void set_ProductIcon(Type value);
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.Application.Zones.ZoneFlags : Enum {
    public int value__;
    public static ZoneFlags AutoEnable;
}
[AttributeUsageAttribute("1036")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private Type[] <Zones>k__BackingField;
    [NotNullAttribute]
public Type[] Zones { get; public set; }
    public ZoneMarkerAttribute(Type[] zones);
    [CompilerGeneratedAttribute]
public Type[] get_Zones();
    [CompilerGeneratedAttribute]
public void set_Zones(Type[] value);
}
public class JetBrains.Application.BuildScript.Application.Zones.ZonePart : object {
    public PartCatalogType ZoneInterfaceType;
    private ZonePart(PartCatalogType ctypeZoneInterface);
    public virtual bool Equals(object obj);
    public static ZonePart FromPartType(PartCatalogType ctypeZoneInterface);
    [NotNullAttribute]
public static ZonePart FromType(Type type, IPartCatalogSet catalogset);
    [NotNullAttribute]
public static ZonePart FromType(IPartCatalogSet catalogset);
    public virtual int GetHashCode();
    public static bool op_Equality(ZonePart left, ZonePart right);
    public static bool op_Inequality(ZonePart left, ZonePart right);
    public virtual string ToString();
    protected bool Equals(ZonePart other);
}
public enum JetBrains.Application.BuildScript.ApplicationHostDetails : Enum {
    public int value__;
    public static ApplicationHostDetails Shared;
    public static ApplicationHostDetails PerHost;
    public static ApplicationHostDetails PerWave;
    public static ApplicationHostDetails PerHostAndWave;
}
public class JetBrains.Application.BuildScript.AssemblyNamesList : object {
    private string StreamName_List;
    [NotNullAttribute]
public IList`1<AssemblyNameInfo> AssemblyNames;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public AssemblyNamesList(IStructuredStorage storage);
    public AssemblyNamesList(IList`1<AssemblyNameInfo> assemblyNames);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private static string <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__0(AssemblyNameInfo assname);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact/BinaryStageObjectiveArtifactSerializer")]
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact : object {
    [NotNullAttribute]
public AssemblyQualifiedTypeName BinaryStageObjective;
    public BinaryStageObjectiveArtifact(AssemblyQualifiedTypeName binaryStageObjective);
    public static BinaryStageObjectiveArtifact Parse(string value);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildSystemExePackedForTeamCity : object {
    public StuffedLauncherArtifact Launcher;
    public JetSemanticVersion Version;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildSystemExePackedForTeamCityNuget : object {
    public static string BuildExeFileInsideNugetPackageName;
    public static string BuildExeNugetPackageName;
    public NugetPackageFileItem NugetPackage;
    private static BuildSystemExePackedForTeamCityNuget();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildSystemExePackedGui : object {
    public StuffedLauncherArtifact Launcher;
    public JetSemanticVersion Version;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildSystemExePackedGuiNuget : object {
    public static string BuildExeFileInsideNugetPackageName;
    public static string BuildExeNugetPackageName;
    public NugetPackageFileItem NugetPackage;
    private static BuildSystemExePackedGuiNuget();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildSystemExeScatteredNuget : object {
    public static string BuildExeFileInsideNugetPackageName;
    public static string BuildExeShallowNugetPackageName;
    public NugetPackageFileItem NugetPackage;
    private static BuildSystemExeScatteredNuget();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildSystemExeShallowRunner : object {
    public StuffedLauncherArtifact Launcher;
    public JetSemanticVersion Version;
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.BuildApp.Artifacts.TeamCityBuildTags/TeamCityBuildTagsSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.TeamCityBuildTags : object {
    public String[] Tags;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public TeamCityBuildTags(String[] tags);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__0(string tag);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.BuildAppEnvironmentConfig : object {
    public AssemblyQualifiedTypeMemberName MainMethod;
    public ZonePart Zone;
    public BuildAppEnvironmentConfig(ZonePart zone, AssemblyQualifiedTypeMemberName mainMethod);
}
public static class JetBrains.Application.BuildScript.BuildApp.BuildResults : object {
    public static RelativePath BuildResultsFileName;
    private static BuildResults();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.BuildApp.IsCachingBuildStuff/IsCachingBuildStuffSerializer")]
public class JetBrains.Application.BuildScript.BuildApp.IsCachingBuildStuff : object {
    public bool IsCachingEnabled;
    public IsCachingBuildStuff(bool isCachingEnabled);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Tasks.PartialLocalEmitBuildSystem : object {
    [CompilerGeneratedAttribute]
private static Func`2<DeployablePackage, InputPackage> CS$<>9__CachedAnonymousMethodDelegate1;
    [BuildStepAttribute]
public PartialLocalEmitBuildSystem(Lifetime lifetime, ProductHomeDirArtifact homedir, INestedBuildRunner nester, AllAssembliesOnSources allass, Optional`1<SkipLocalCompilationArtifact> skiplocal, ILogger logger);
    [CompilerGeneratedAttribute]
private static InputPackage <.ctor>b__0(DeployablePackage dpkg);
}
[AttributeUsageAttribute("12")]
public class JetBrains.Application.BuildScript.BuildEntryPointAttribute : BuildPartAttribute {
    public BuildEntryPointAttribute(Type typeNextLevelEntryPoint);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.BuildRunnerResultEx : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private static Func`2<IStructuredStorage, IEnumerable`1<IStructuredStorage>> CS$<>9__CachedAnonymousMethodDelegate1;
    private static BuildRunnerResultEx();
    [NotNullAttribute]
[ExtensionAttribute]
public static ICollection`1<OutputFileArtifact> ExtractAnythingWhichLooksLikeAFile(BuildRunnerResult result);
    [NotNullAttribute]
[ExtensionAttribute]
public static ICollection`1<OutputFileArtifact> ExtractBuildStageOutputFiles(BuildRunnerResult result);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IStructuredStorage> <ExtractAnythingWhichLooksLikeAFile>b__0(IStructuredStorage sstg);
}
public abstract class JetBrains.Application.BuildScript.BuildStageOutputFileArtifactBase : object {
    private static string BuildStageOutputSerializationMarker;
    [NotNullAttribute]
public SimpleFileItem File;
    protected BuildStageOutputFileArtifactBase(SimpleFileItem file);
    protected BuildStageOutputFileArtifactBase(IStructuredStorage sstg);
    private static BuildStageOutputFileArtifactBase();
    public virtual string ToString();
    [CanBeNullAttribute]
public static SimpleFileItem TryReadFromStorage(IStructuredStorage sstg);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
public abstract class JetBrains.Application.BuildScript.BuildStageOutputPackageFileArtifactBase : BuildStageOutputFileArtifactBase {
    public NugetPackageFileItem Package;
    private NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.Package { get; }
    protected BuildStageOutputPackageFileArtifactBase(NugetPackageFileItem package);
    protected BuildStageOutputPackageFileArtifactBase(IStructuredStorage sstg);
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
    private sealed virtual override NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.get_Package();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.BuildSystemDirEx : object {
    private static string DevKitDirName;
    private static BuildSystemDirEx();
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetDevKitBuildSystemDir(ProductHomeDirArtifact homeDirArtifact);
    [NotNullAttribute]
public static FileSystemPath GetDevKitBuildSystemDir(FileSystemPath homedir);
    [NotNullAttribute]
public static FileSystemPath GetDevKitDir(FileSystemPath homedir);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetDevKitConfigDir(ProductHomeDirArtifact homeDirArtifact);
    [NotNullAttribute]
public static FileSystemPath GetDevKitConfigDir(FileSystemPath homedir);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildTransportPackage : object {
    [NotNullAttribute]
public NugetPackageFileItem Package;
    private NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.Package { get; }
    public BuildTransportPackage(NugetPackageFileItem package);
    public virtual string ToString();
    private sealed virtual override NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.get_Package();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildVersionSuffix : object {
    public int Build;
    [CanBeNullAttribute]
public string PrereleaseMetadata;
    public int Revision;
    public BuildVersionSuffix(int build, int revision, string prereleaseMetadata);
    public BuildVersionSuffix(IStructuredStorage storage);
    [NotNullAttribute]
public static BuildVersionSuffix CreateFromDate(DateTime date, string prereleasemetadata);
    [NotNullAttribute]
public static BuildVersionSuffix CreateFromDateRough(DateTime date, TimeSpan roughness, string prereleasemetadata);
    [BuildStepAttribute]
public static BuildVersionSuffix DefaultBuildVersionSuffixForNow(Optional`1<PackageDefaultPrereleaseMetadata> maybeprereleasemetadata, Optional`1<IncrementalBuild> incremental, ILogger logger);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BuildVersionSuffix other);
    public virtual int GetHashCode();
    public static bool op_Equality(BuildVersionSuffix left, BuildVersionSuffix right);
    public static bool op_Inequality(BuildVersionSuffix left, BuildVersionSuffix right);
    [NotNullAttribute]
public JetSemanticVersion ToSemanticVersion(Version2 majorminor);
    public virtual string ToString();
    [NotNullAttribute]
public Version ToVersion(Version2 majorminor);
    [BuildStepAttribute]
[NotNullAttribute]
public static SerializedHostComponentItemArtifact[] WriteApplicationPackageObjects(BuildVersionSuffix allassPkg, ILogger logger);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
}
public static class JetBrains.Application.BuildScript.Compile.Actions.ActionSystemTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformVsCommandsGuidArtifact, SubplatformComponentForPackagingFast> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, SubplatformVsCommandsGuidArtifact> CS$<>9__CachedAnonymousMethodDelegate7;
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackagingFast> EmbedVsCommandsGuidIntoPackage(ICollection`1<SubplatformVsCommandsGuidArtifact> guids, AllAssembliesOnSources allassSrc);
    [BuildStepAttribute]
public static ICollection`1<SubplatformVsCommandsGuidArtifact> UseLegacyGuidForPlatformSubplatformVsCommands(AllAssembliesOnEverything allass);
    [CompilerGeneratedAttribute]
private static SubplatformComponentForPackagingFast <EmbedVsCommandsGuidIntoPackage>b__1(SubplatformVsCommandsGuidArtifact g);
    [CompilerGeneratedAttribute]
private static SubplatformVsCommandsGuidArtifact <UseLegacyGuidForPlatformSubplatformVsCommands>b__6(Subplatform sub);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact/SubplatformVsCommandsGuidArtifactSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact : object {
    public static Guid AutogeneratedActionsCommandGuidsNamespace;
    public static Guid AutogeneratedCommandGroupsGuidsNamespace;
    public static Guid BeforeWaveReSharperActionGuid;
    public Guid ActionsCommandGroupGuid;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformVsCommandsGuidArtifact(SubplatformName subplatformName, Guid actionsCommandGroupGuid);
    private static SubplatformVsCommandsGuidArtifact();
    public static Guid GenerateGuidForActions(SubplatformName sname);
    public static Guid GenerateGuidForGroups(SubplatformName sname);
    public virtual string ToString();
    private static SubplatformVsCommandsGuidArtifact Parse(string text);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.AddTargetsFileToIncludeAssembliesInProject : object {
    private AllAssembliesOnSources myAllassSrc;
    private ILogger myLogger;
    private IFrameworkNameProvider myFrameworkNameProvider;
    [NotNullAttribute]
private IFrameworkCompatibilityProvider myFrameworkCompatibilityProvider;
    private NuGetFramework myTargetFramework;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackaging, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<SubplatformFileForPackaging, AssemblyItem>, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackaging, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<SubplatformFileForPackaging, AssemblyItem>, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<NuGetFramework, IList`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>>>, IEnumerable`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>>> CS$<>9__CachedAnonymousMethodDelegate1a;
    private double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.Priority { get; }
    public AddTargetsFileToIncludeAssembliesInProject(AllAssembliesOnSources allassSrc, ILogger logger, IFrameworkNameProvider frameworkNameProvider, IFrameworkCompatibilityProvider frameworkCompatibilityProvider);
    private OneToListMap`2<NuGetFramework, Tuple`2<SubplatformFileForPackaging, AssemblyItem>> CollectAssemblies(ICollection`1<SubplatformFileForPackaging> assemblies, ILogger logger);
    private void RenderPropsFile(TextWriter targetWriter, Subplatform subplatform, Func`3<PackageFileRole, RelativePath, RelativePath> getTargetRelativePath, IEnumerable`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>> assemblies, ICollection`1<SubplatformFileForPackaging> contentFiles, ILogger logger);
    private void RenderTargetsFile(TextWriter targetWriter, Func`3<PackageFileRole, RelativePath, RelativePath> getTargetRelativePath, IEnumerable`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>> assemblies, ICollection`1<SubplatformFileForPackaging> targets, ILogger logger);
    [NotNullAttribute]
private NuGetFramework RenderTargetsFile_GetRequiredNetfx(AssemblyItem ai, ILogger logger);
    [NotNullAttribute]
private static NuGetFramework RenderTargetsFile_GetRequiredNetfx_GetClr(AssemblyItem ai, ILogger logger);
    [CanBeNullAttribute]
private NuGetFramework RenderTargetsFile_GetRequiredNetfx_TryGetTargetNetfxSafe(AssemblyItem ai, ILogger logger);
    private sealed virtual override double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.get_Priority();
    private sealed virtual override SubplatformFileForPackaging[] JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.ApplyTransform(SubplatformFileForPackaging[] items, AssertTransformationsOrder& assertion);
    [CompilerGeneratedAttribute]
private static string <CollectAssemblies>b__0(SubplatformFileForPackaging sffp);
    [CompilerGeneratedAttribute]
private static string <RenderPropsFile>b__3(Tuple`2<SubplatformFileForPackaging, AssemblyItem> tuple);
    [CompilerGeneratedAttribute]
private static string <RenderPropsFile>b__4(SubplatformFileForPackaging sffp);
    [CompilerGeneratedAttribute]
private static string <RenderTargetsFile>b__a(Tuple`2<SubplatformFileForPackaging, AssemblyItem> tuple);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>> <JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.ApplyTransform>b__18(KeyValuePair`2<NuGetFramework, IList`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>>> _);
}
public static class JetBrains.Application.BuildScript.Compile.BuildTransportsAndOutputsHelpers : object {
    public static RelativePath BuildOutputWaybillFileName;
    public static bool IsOnlyOutputingProducePackages;
    public static RelativePath OutputBaseReferencePackage;
    public static RelativePath OutputBaseSubplatformBinariesPackage;
    public static RelativePath OutputBaseSubplatformProgramDatabasePackage;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, BuildTransportPackage> CS$<>9__CachedAnonymousMethodDelegate5;
    private static BuildTransportsAndOutputsHelpers();
    public static void GetTransportsAndOutputsFromDeployablePackageResults(SerializedValuesResolver results, DeployablePackagesFromParentBuilds parentBuildPackages, ILogger logger, BuildTransportPackage[]& buildTransportPackages, OutputFileArtifact[]& outputs);
    private static RelativePath GetOutputBaseByPackageKind(DeployablePackage dpkg);
    [CompilerGeneratedAttribute]
private static BuildTransportPackage <GetTransportsAndOutputsFromDeployablePackageResults>b__4(NugetPackageFileItem pkg);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService : object {
    private static string _regexContentNameNegativeCharset;
    private static string _sInvalidCharsReplacementString;
    public static ILogger Logger;
    private Optional`1<SignServerFlavor> myFlavor;
    private Optional`1<SignServerInfo> mySsi;
    [CompilerGeneratedAttribute]
private static Func`2<Match, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate10;
    private bool JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.IsAvailable { get; }
    private static AuthenticodeSigningService();
    public AuthenticodeSigningService(Optional`1<SignServerInfo> ssi, Optional`1<SignServerFlavor> flavor);
    private static bool IsPe(Stream stream);
    private static bool IsMsi(Stream stream);
    private static bool IsMachO(Stream stream);
    [NotNullAttribute]
private static string GetContextType(SimpleFileItem input);
    [ItemNotNullAttribute]
[DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<ApplySignatureAsync>d__0")]
private Task`1<SimpleFileItem> ApplySignatureAsync(SimpleFileItem input, string sContentName);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<AttemptAtSigningAsync>d__8")]
[ItemNotNullAttribute]
[DebuggerStepThroughAttribute]
private Task`1<SimpleFileItem> AttemptAtSigningAsync(SimpleFileItem input, string sContentNameNotNull);
    private sealed virtual override Task`1<SimpleFileItem> JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.EnsureSignedAsync(SimpleFileItem input, string sContentName);
    [NotNullAttribute]
private string GetCharsetConstrainedContentName(string sRawContentName);
    private sealed virtual override bool JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.get_IsAvailable();
    [NotNullAttribute]
private Uri MakeFullUri(Uri uri, string sContentName);
    private sealed virtual override SimpleFileItem JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.Sign(SimpleFileItem input, string sContentName);
    private sealed virtual override Task`1<SimpleFileItem> JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.SignAsync(SimpleFileItem input, string sContentName);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<SignCoreAsync>d__11")]
private Task`1<SimpleFileItem> SignCoreAsync(SimpleFileItem input, string sContentName);
    private static bool VerifySignature(SimpleFileItem output, OnError onerror);
    [CompilerGeneratedAttribute]
private static string <GetCharsetConstrainedContentName>b__d(Match match);
    [CompilerGeneratedAttribute]
private static string <GetCharsetConstrainedContentName>b__e(string sa, string sb);
}
public interface JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService {
    public bool IsAvailable { get; }
    public abstract virtual bool get_IsAvailable();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<SimpleFileItem> EnsureSignedAsync(SimpleFileItem input, string sContentName);
    [NotNullAttribute]
[ObsoleteAttribute("Use the async version.")]
public abstract virtual SimpleFileItem Sign(SimpleFileItem input, string sContentName);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<SimpleFileItem> SignAsync(SimpleFileItem input, string sContentName);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx : object {
    [ExtensionAttribute]
public static bool IsSigningThisFileTypeSupported(IAuthenticodeSigningService _, SimpleFileItem input);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the async version.")]
[NotNullAttribute]
public static SimpleFileItem SignIfAvailable(IAuthenticodeSigningService thіs, SimpleFileItem input, string sContentName);
    [NotNullAttribute]
[ExtensionAttribute]
public static Task`1<SimpleFileItem> SignIfAvailableAsync(IAuthenticodeSigningService thіs, SimpleFileItem input, string sContentName);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerFlavor/SignServerFlavorSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerFlavor : object {
    [NotNullAttribute]
public string FlavorName;
    public SignServerFlavor(string flavorName);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerInfo>")]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerInfo : ToolServerInfo {
    public SignServerInfo(string serialized);
    public SignServerInfo(string username, string password, Uri uri);
}
public static class JetBrains.Application.BuildScript.Compile.CodeSigning.StrongNameSignatureHelpers : object {
    [NotNullAttribute]
public static SimpleFileItem SignDelaySignedAssembly(SimpleFileItem assembly, Byte[] snk);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.CompiledSubplatformFile : SubplatformFileForPackagingBase {
    [CompilerGeneratedAttribute]
private static Func`2<CompiledSubplatformFile, SubplatformFileForPackaging> CS$<>9__CachedAnonymousMethodDelegate1;
    public CompiledSubplatformFile(SubplatformName subname, SimpleFileItem file, PackageFileRole role);
    [BuildStepAttribute]
public static IEnumerable`1<SubplatformFileForPackaging> PackCompiledFiles(IEnumerable`1<CompiledSubplatformFile> compileds);
    [CompilerGeneratedAttribute]
private static SubplatformFileForPackaging <PackCompiledFiles>b__0(CompiledSubplatformFile cp);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.CompileNativeDegreeOfParallelismArtifact/CompileNativeDegreeOfParallelismArtifactSerializer")]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Compile.CompileNativeDegreeOfParallelismArtifact/CompileNativeDegreeOfParallelismArtifactConverter")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.CompileNativeDegreeOfParallelismArtifact : object {
    public OccupyStrategy Strategy;
    public CompileNativeDegreeOfParallelismArtifact(OccupyStrategy strategy);
    public virtual string ToString();
    [NotNullAttribute]
public static CompileNativeDegreeOfParallelismArtifact Parse(string str);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks : object {
    private static TimeSpan CompileStandardSubplatformProjectsBuildTimeout;
    [CompilerGeneratedAttribute]
private static Func`2<ValidateCleanCompilation, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, IEnumerable`1<<>f__AnonymousType7`2<SubplatformName, RelativePath>>> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformProjectWrapper, Pair`2<SubplatformName, RelativePath>> CS$<>9__CachedAnonymousMethodDelegate42;
    private static CompileStandardSubplatformProjectsTasks();
    [BuildStepAttribute]
public static CompileSubplatformsInput CompilationNeedsNuggetsLocallyRestored(LocalRestoredPackageReferenceArtifact[] nuggets);
    [BuildStepAttribute]
public static void CompileSubplatforms(Lifetime lifetime, AllAssembliesOnSources allassSrc, IAuthenticodeSigningService signingService, CompileSubplatformsInput[] inputs, ProductBinariesDirArtifact bindir, Optional`1<SkipLocalCompilationArtifact> skip, SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper refsdeploy, ILogger logger, IsModeOptimize optimize, ValidateCleanCompilation[] cleancompile, Optional`1<IncrementalBuild> incremental, Optional`1<ProfileNameArtifact> maybeProfile, ICollection`1<SubplatformProjectExemptFromManagedAssemblies> projectsExemptFromManagedAssemblieses, CompiledSubplatformFile[]& compiledfiles, IInvokeMsbuild invokemsbuild);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<AssertCleanCompileAsync>d__c")]
[DebuggerStepThroughAttribute]
private static Task AssertCleanCompileAsync(BuildResults built, ValidateCleanCompilation[] cleancompile, AllAssembliesOnSources allassSrc, ILogger logger);
    [DebuggerStepThroughAttribute]
[NotNullAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<CollectBuildOutputsAsync>d__14")]
private static Task`1<CompiledSubplatformFile[]> CollectBuildOutputsAsync(AllAssembliesOnSources allass, IAuthenticodeSigningService signingService, FileSystemPath pathBinDir, bool isSeparateFolderForEachProject, JetHashSet`1<Pair`2<SubplatformName, RelativePath>> hashProjectsExemptFromManagedAssemblies, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<CollectBuildOutputSingleAsync>d__17")]
[DebuggerStepThroughAttribute]
private static Task`1<CompiledSubplatformFile[]> CollectBuildOutputSingleAsync(SubplatformProjectWrapper subandproj, IAuthenticodeSigningService signingService, FileSystemPath pathBinDir, bool isSeparateFolderForEachProject, JetHashSet`1<Pair`2<SubplatformName, RelativePath>> hashProjectsExemptFromManagedAssemblies, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<CompileSubplatformsAsync>d__30")]
[DebuggerStepThroughAttribute]
private static Task`1<CompiledSubplatformFile[]> CompileSubplatformsAsync(Lifetime lifetime, AllAssembliesOnSources allassSrc, IAuthenticodeSigningService signingService, CompileSubplatformsInput[] inputs, ProductBinariesDirArtifact bindir, Optional`1<SkipLocalCompilationArtifact> skip, SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper refsdeploy, ILogger logger, IsModeOptimize optimize, ValidateCleanCompilation[] cleancompile, Optional`1<IncrementalBuild> incremental, Optional`1<ProfileNameArtifact> maybeProfile, ICollection`1<SubplatformProjectExemptFromManagedAssemblies> projectsExemptFromManagedAssemblieses, IInvokeMsbuild invokemsbuild);
    [NotNullAttribute]
private static IDictionary`2<string, string> PrepareProperties(Lifetime lifetime, ProductBinariesDirArtifact bindir, SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper refsdeploy, IsModeOptimize optimize, Optional`1<ProfileNameArtifact> maybeProfile, bool isIncremental, FileSystemPath& pathBinDir);
    [NotNullAttribute]
[ExtensionAttribute]
private static Task`1<SimpleFileItem> SignIfNeededAsync(IAuthenticodeSigningService signingService, ILogger logger, SimpleFileItem file);
    [NotNullAttribute]
private static JetHashSet`1<Pair`2<SubplatformName, RelativePath>> ValidateProjectsExemptFromManagedAssemblies(AllAssembliesOnSources allassSrc, ICollection`1<SubplatformProjectExemptFromManagedAssemblies> projectsExemptFromManagedAssemblieses, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <AssertCleanCompileAsync>b__0(ValidateCleanCompilation cc);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType7`2<SubplatformName, RelativePath>> <CompileSubplatformsAsync>b__27(SubplatformOnSources sp);
    [CompilerGeneratedAttribute]
private static Pair`2<SubplatformName, RelativePath> <ValidateProjectsExemptFromManagedAssemblies>b__41(SubplatformProjectWrapper wrapper);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.CompileSubplatformsInput : object {
}
public static class JetBrains.Application.BuildScript.Compile.CompileTasksSinceClr4 : object {
    [BuildStepAttribute]
public static CompileLevelEntryPoint LinkCompileLevelEntryPointToBinaries(SubplatformBinariesPackage[] subbins, DeployablePackage[] dpkgs);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact : object {
    public RelativePath MoveToFolder;
    public string PackageId;
    public JetSemanticVersion PackageVersion;
    public SubplatformName Subplatform;
    [NotNullAttribute]
public PackageIdentity GetPackageIdentity();
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [BuildStepAttribute]
public static IList`1<SubplatformFileForPackagingFast> EmbedFilesFromPackageIntoSubplatform(EmbedPackageInSubplatformArtifact[] embeds, RetrievedPackageReferenceArtifact[] pkgs, AllAssembliesOnEverything allass, ILogger logger);
    [BuildStepAttribute]
public static IList`1<PackageReferenceArtifact> RequirePackages(EmbedPackageInSubplatformArtifact[] embeds, AllAssembliesOnEverything allass, ILogger logger);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <EmbedFilesFromPackageIntoSubplatform>b__0(RetrievedPackageReferenceArtifact retr);
    [CompilerGeneratedAttribute]
private static string <EmbedFilesFromPackageIntoSubplatform>b__1(NugetPackageFileItem pkg);
}
public static class JetBrains.Application.BuildScript.Compile.EmitsApplicationPackageForNuget : object {
    [CompilerGeneratedAttribute]
private static Func`2<TransformedSubplatformFileForPackaging, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, ApplicationPackageReference> CS$<>9__CachedAnonymousMethodDelegate5;
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackaging> CreateAppPkg(AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass, TransformedSubplatformFileForPackaging[] filesAfterTransforms, BuildVersionSuffix versuffix, SubplatformPackagesTimesArtifact packagetimes, ILogger logger);
    [CompilerGeneratedAttribute]
private static SubplatformName <CreateAppPkg>b__0(TransformedSubplatformFileForPackaging file);
    [CompilerGeneratedAttribute]
private static ApplicationPackageReference <CreateAppPkg>b__2(Subplatform subref);
}
public static class JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog : object {
    [CompilerGeneratedAttribute]
private static Func`2<PackagePartCatalogArtifact, SubplatformComponentForPackaging> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<TransformedSubplatformFileForPackaging, SubplatformName> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, IEnumerable`1<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>, RetrievedPackageReferenceArtifact> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, string> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<PackageExcludedFromSubplatformCatalogingAssemblyResolve, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformWhitelistMissingAssemblyReferencesArtifact, IEnumerable`1<AssemblyNameInfo>> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformDataForCataloging, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<PackagePartCatalogArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<DupeAssemblyRecord, string> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<PackageIdentity, IHaveNugetPackageFileItem>, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate2f;
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackaging> EmbedCatalogInPackage(ICollection`1<PackagePartCatalogArtifact> catalogs);
    [BuildStepAttribute]
public static ICollection`1<PackagePartCatalogArtifact> EmitCatalog(AllAssembliesOnEverything allass, TransformedSubplatformFileForPackaging[] subfiles, IBuildTimeRealizedAssemblyItemUnification unification, RetrievedPackageReferenceArtifact[] retrs, InputPackage[] inputs, PackageExcludedFromSubplatformCatalogingAssemblyResolve[] nonresolvable, SubplatformWhitelistMissingAssemblyReferencesArtifact[] whitelistmissing, ILogger logger);
    private static SubplatformDataForCataloging EmitCatalog_CollectInitial(SubplatformOnSources subplatform, AllAssembliesAccess aaa, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFiles, ILookup`2<SubplatformName, RetrievedPackageReferenceArtifact> lookupReferencedPackages, JetHashSet`1<string> hashPackagesFromSubplatforms, ILookup`2<string, InputPackage> lookupInputPackages, JetHashSet`1<PackageIdentity> hashSkipPackages, ILogger logger);
    private static PackagePartCatalogArtifact EmitCatalog_Create(SubplatformDataForCataloging subdatum, Dictionary`2<PackageIdentity, ICollection`1<IAssemblyItem>> mapExpandedPackageItems, IBuildTimeRealizedAssemblyItemUnification unification, JetHashSet`1<AssemblyNameInfo> hashSkipAssemblies, ILogger logger);
    [NotNullAttribute]
private static Dictionary`2<PackageIdentity, ICollection`1<IAssemblyItem>> EmitCatalog_ExpandPackages(SubplatformDataForCataloging[] subdata, JetHashSet`1<AssemblyNameInfo> hashSkipAssemblies, ILogger logger);
    [CompilerGeneratedAttribute]
private static SubplatformComponentForPackaging <EmbedCatalogInPackage>b__0(PackagePartCatalogArtifact catalog);
    [CompilerGeneratedAttribute]
private static SubplatformName <EmitCatalog>b__2(TransformedSubplatformFileForPackaging f);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>> <EmitCatalog>b__3(RetrievedPackageReferenceArtifact rpra);
    [CompilerGeneratedAttribute]
private static SubplatformName <EmitCatalog>b__5(<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact> tuple);
    [CompilerGeneratedAttribute]
private static RetrievedPackageReferenceArtifact <EmitCatalog>b__6(<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact> tuple);
    [CompilerGeneratedAttribute]
private static string <EmitCatalog>b__7(InputPackage pkg);
    [CompilerGeneratedAttribute]
private static PackageIdentity <EmitCatalog>b__8(PackageExcludedFromSubplatformCatalogingAssemblyResolve x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<AssemblyNameInfo> <EmitCatalog>b__9(SubplatformWhitelistMissingAssemblyReferencesArtifact wl);
    [CompilerGeneratedAttribute]
private static bool <EmitCatalog>b__b(SubplatformDataForCataloging x);
    [CompilerGeneratedAttribute]
private static bool <EmitCatalog>b__d(PackagePartCatalogArtifact x);
    [CompilerGeneratedAttribute]
private static bool <EmitCatalog_CollectInitial>b__1c(PackageReferenceArtifact pra);
    [CompilerGeneratedAttribute]
private static string <EmitCatalog_Create>b__22(DupeAssemblyRecord rec);
    [CompilerGeneratedAttribute]
private static PackageIdentity <EmitCatalog_ExpandPackages>b__2c(KeyValuePair`2<PackageIdentity, IHaveNugetPackageFileItem> pair);
}
public static class JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages : object {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackagingFast, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackagingFast, SubplatformName> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformComponentForPackagingFast, SubplatformName> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackagingFast, ApplicationPackageFile> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, ApplicationPackageReference> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformComponentForPackagingFast, object> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<TransformedSubplatformFileForPackaging, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformComponentForPackaging, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<SubplatformBinariesPackage, SubplatformProgramDatabasePackage>, bool> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<SubplatformName, TransformedSubplatformFileForPackaging>, IEnumerable`1<Tuple`3<SubplatformName, string, object>>> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<SubplatformName, SubplatformComponentForPackaging>, IEnumerable`1<Tuple`3<SubplatformName, string, object>>> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`3<SubplatformName, string, object>, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<SubplatformName, Tuple`3<SubplatformName, string, object>>, string> CS$<>9__CachedAnonymousMethodDelegate36;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`3<SubplatformName, string, object>, string> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, Tuple`3<SubplatformName, string, object>>, string> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, string> CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate55;
    [BuildStepAttribute]
public static ICollection`1<LightweightMetadataFile> CreateLightweightMetadataFiles(AllAssembliesOnSources allassembliesSrc, AllAssembliesOnEverything allAssembliesOnEverything, ICollection`1<SubplatformFileForPackagingFast> fastfiles, ICollection`1<SubplatformComponentForPackagingFast> fastcomponents, BuildVersionSuffix versuffix, ILogger logger);
    [BuildStepAttribute]
public static void CreateSubplatformPackages(TransformedSubplatformFileForPackaging[] subplatformFileForPackagings, SubplatformComponentForPackaging[] packagecomponents, AllAssembliesOnSources allassembliesSrc, AllAssembliesOnEverything allAssembliesOnEverything, RetrievedPackageReferenceArtifact[] packagerefs, BuildVersionSuffix versuffix, SourcesValidationResult[] sourcesValidationResult, ILogger logger, List`1& packagesBin, List`1& packagesPdb);
    [NotNullAttribute]
public static string GetLightJetMetadataFilename(Subplatform subplatform);
    private static void AssertNoItemsForAbsentSubplatforms(AllAssembliesOnSources allassSrc, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFilesForPackaging, ILookup`2<SubplatformName, SubplatformComponentForPackaging> lookupPackageComponents, ILogger logger);
    private static PublicKeyToken CalculatePubKeyTokenBySnk(FileSystemPath productHomeDir, SubplatformOnSources sub);
    private static void CreateSubplatformPackages_Main(SubplatformOnSources subplatform, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFilesForPackagingBySubplatform, ILookup`2<SubplatformName, SubplatformComponentForPackaging> lookupPackageComponents, RetrievedPackageReferenceArtifact[] packagerefs, BuildVersionSuffix versuffix, AllAssembliesAccess aaa, ILogger logger, SubplatformBinariesPackage& packageBin, IApplicationPackage& apppkg);
    private static void CreateSubplatformPackages_Pdb(SubplatformOnSources subplatform, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFilesForPackagingBySubplatform, IApplicationPackage apppkg, ILogger logger, SubplatformProgramDatabasePackage& packagePdb);
    [CompilerGeneratedAttribute]
private static bool <CreateLightweightMetadataFiles>b__0(SubplatformFileForPackagingFast ff);
    [CompilerGeneratedAttribute]
private static SubplatformName <CreateLightweightMetadataFiles>b__1(SubplatformFileForPackagingFast ff);
    [CompilerGeneratedAttribute]
private static SubplatformName <CreateLightweightMetadataFiles>b__2(SubplatformComponentForPackagingFast fc);
    [CompilerGeneratedAttribute]
private static ApplicationPackageFile <CreateLightweightMetadataFiles>b__6(SubplatformFileForPackagingFast ff);
    [CompilerGeneratedAttribute]
private static ApplicationPackageReference <CreateLightweightMetadataFiles>b__8(Subplatform subref);
    [CompilerGeneratedAttribute]
private static object <CreateLightweightMetadataFiles>b__9(SubplatformComponentForPackagingFast fastcomponent);
    [CompilerGeneratedAttribute]
private static SubplatformName <CreateSubplatformPackages>b__1e(TransformedSubplatformFileForPackaging sfp);
    [CompilerGeneratedAttribute]
private static SubplatformName <CreateSubplatformPackages>b__1f(SubplatformComponentForPackaging pc);
    [CompilerGeneratedAttribute]
private static bool <CreateSubplatformPackages>b__21(Pair`2<SubplatformBinariesPackage, SubplatformProgramDatabasePackage> pair);
    [CompilerGeneratedAttribute]
private static SubplatformName <AssertNoItemsForAbsentSubplatforms>b__27(SubplatformOnSources sub);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Tuple`3<SubplatformName, string, object>> <AssertNoItemsForAbsentSubplatforms>b__29(IGrouping`2<SubplatformName, TransformedSubplatformFileForPackaging> g);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Tuple`3<SubplatformName, string, object>> <AssertNoItemsForAbsentSubplatforms>b__2c(IGrouping`2<SubplatformName, SubplatformComponentForPackaging> g);
    [CompilerGeneratedAttribute]
private static SubplatformName <AssertNoItemsForAbsentSubplatforms>b__2e(Tuple`3<SubplatformName, string, object> t);
    [CompilerGeneratedAttribute]
private static string <AssertNoItemsForAbsentSubplatforms>b__2f(IGrouping`2<SubplatformName, Tuple`3<SubplatformName, string, object>> g);
    [CompilerGeneratedAttribute]
private static string <AssertNoItemsForAbsentSubplatforms>b__30(Tuple`3<SubplatformName, string, object> t);
    [CompilerGeneratedAttribute]
private static string <AssertNoItemsForAbsentSubplatforms>b__31(IGrouping`2<string, Tuple`3<SubplatformName, string, object>> g);
    [CompilerGeneratedAttribute]
private static bool <CreateSubplatformPackages_Main>b__45(RetrievedPackageReferenceArtifact pr);
    [CompilerGeneratedAttribute]
private static string <CreateSubplatformPackages_Main>b__47(RetrievedPackageReferenceArtifact pr);
    [CompilerGeneratedAttribute]
private static bool <CreateSubplatformPackages_Main>b__46(PackageReferenceArtifact pra);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.EmptyTransformSubplatformFilesForPackaging : object {
    private double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.Priority { get; }
    private sealed virtual override SubplatformFileForPackaging[] JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.ApplyTransform(SubplatformFileForPackaging[] items, AssertTransformationsOrder& assertion);
    private sealed virtual override double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.get_Priority();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion/ForceTargetFrameworkVersionSerializer")]
public class JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion : object {
    public string TargetFrameworkVersion;
    public ForceTargetFrameworkVersion(string targetFrameworkVersion);
    public virtual string ToString();
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources {
    [NotNullAttribute]
public abstract virtual TArtifact RunNestedBuildSyncOnSourcesForArtifact(Action`1<BuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
    [NotNullAttribute]
public abstract virtual TArtifact[] RunNestedBuildSyncOnSourcesForArtifacts(Action`1<BuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
}
public static class JetBrains.Application.BuildScript.Compile.InstallJetComponentManager : object {
    [BuildStepAttribute]
public static EmbedPackageInSubplatformArtifact RequestEmbed();
}
public static class JetBrains.Application.BuildScript.Compile.InstallLevelDbNativeDlls : object {
    [BuildStepAttribute]
public static EmbedPackageInSubplatformArtifact RequestEmbed();
}
public static class JetBrains.Application.BuildScript.Compile.InstallNativeHooks : object {
    [BuildStepAttribute]
public static EmbedPackageInSubplatformArtifact RequestEmbed();
}
public interface JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    [CanBeNullAttribute]
public abstract virtual SubplatformFileForPackaging[] ApplyTransform(SubplatformFileForPackaging[] items, AssertTransformationsOrder& assertion);
}
public static class JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants : object {
    [NotNullAttribute]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethod;
    [NotNullAttribute]
[ObsoleteAttribute("Use ConsoleMainMethod.")]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethodScattered;
    [NotNullAttribute]
public static AssemblyQualifiedTypeMemberName MainMethod;
    [ObsoleteAttribute("Use MainMethod.")]
[NotNullAttribute]
public static AssemblyQualifiedTypeMemberName MainMethodScattered;
    private static LauncherCompileTimeConstants();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.LibraryMarkerUtil : object {
    private static string Extension;
    private static RelativePath ourDirectory;
    private static LibraryMarkerUtil();
    [ExtensionAttribute]
public static bool IsLibraryMarkerFile(RelativePath file);
    [NotNullAttribute]
private static RelativePath GetMarkerFile();
    [NotNullAttribute]
public static SimpleFileItem CreateMarkerFile();
}
public class JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler : TaskScheduler {
    [ThreadStaticAttribute]
private static bool _currentThreadIsProcessingItems;
    private LinkedList`1<Task> _tasks;
    private int _maxDegreeOfParallelism;
    private int _delegatesQueuedOrRunning;
    public int MaximumConcurrencyLevel { get; }
    public LimitedConcurrencyLevelTaskScheduler(int maxDegreeOfParallelism);
    protected sealed virtual void QueueTask(Task task);
    private void NotifyThreadPoolOfPendingWork();
    protected sealed virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected sealed virtual bool TryDequeue(Task task);
    public sealed virtual int get_MaximumConcurrencyLevel();
    protected sealed virtual IEnumerable`1<Task> GetScheduledTasks();
    [CompilerGeneratedAttribute]
private void <NotifyThreadPoolOfPendingWork>b__2(object _);
}
public static class JetBrains.Application.BuildScript.Compile.MsbuildFileJet : object {
}
public abstract class JetBrains.Application.BuildScript.Compile.NativeSolutions.BaseNativeArtifact : object {
    [NotNullAttribute]
public RelativePath SolutionDir;
    [NotNullAttribute]
public Subplatform Subplatform;
    [NotNullAttribute]
public IReadOnlyCollection`1<CompileTarget> Targets;
    protected BaseNativeArtifact(RelativePath solutionDir, IReadOnlyCollection`1<CompileTarget> targets, Subplatform subplatform);
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.CMakeCompiler : Enum {
    public int value__;
    public static CMakeCompiler Clang;
    public static CMakeCompiler Vc120;
    public static CMakeCompiler Vc140;
    public static CMakeCompiler Vc141;
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.CMakeConfiguration : Enum {
    public int value__;
    public static CMakeConfiguration Debug;
    public static CMakeConfiguration Release;
    public static CMakeConfiguration RelWithDebInfo;
    public static CMakeConfiguration MinSizeRel;
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.CMakeGenerator : Enum {
    public int value__;
    public static CMakeGenerator UnixMakefiles;
    public static CMakeGenerator NMakeMakefiles;
    public static CMakeGenerator VisualStudio;
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileGeneratorArtifact/CompileNativeGeneratorArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileGeneratorArtifact/CompileNativeGeneratorArtifactSerializer")]
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileGeneratorArtifact : object {
    public static CMakeGenerator DefaultGenerator;
    public CMakeGenerator Generator;
    public CompileGeneratorArtifact(CMakeGenerator generator);
    private static CompileGeneratorArtifact();
    public virtual string ToString();
    [NotNullAttribute]
private static CompileGeneratorArtifact FromString(string str);
}
public static class JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileNativeSolutions : object {
    private static string PackageIdCMakeWindows;
    private static string PackageIdCMakeLinux;
    private static string PackageIdBuildSyncWindows;
    private static string PackageIdNMakeWindows;
    private static CMakeConfiguration[] ourSupportedConfigurations;
    [CompilerGeneratedAttribute]
private static Func`2<SolutionItem, RelativePath> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`3<RelativePath, Tuple`2[], Task[]>, IEnumerable`1<Task>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ICMakeTarget, Task`1<string>>, Task`1<string>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<SolutionItem, RelativePath> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<ProfileNameArtifact, string> CS$<>9__CachedAnonymousMethodDelegate5b;
    [CompilerGeneratedAttribute]
private static Func`2<SolutionItem, RelativePath> CS$<>9__CachedAnonymousMethodDelegate60;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<Subplatform, SolutionItem>, RelativePath> CS$<>9__CachedAnonymousMethodDelegate6c;
    [CompilerGeneratedAttribute]
private static Comparison`1<<>f__AnonymousType5`3<SolutionItem, JetHashSet`1<Subplatform>, JetHashSet`1<Subplatform>>> CS$<>9__CachedAnonymousMethodDelegate6d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5`3<SolutionItem, JetHashSet`1<Subplatform>, JetHashSet`1<Subplatform>>, SolutionItem> CS$<>9__CachedAnonymousMethodDelegate6e;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate77;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate78;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate79;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, TextAndEncoding> CS$<>9__CachedAnonymousMethodDelegate92;
    [CompilerGeneratedAttribute]
private static Func`2<CompileNativeDegreeOfParallelismArtifact, OccupyStrategy> CS$<>9__CachedAnonymousMethodDelegate94;
    private static CompileNativeSolutions();
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy RunPrepareWorkingCopy(ILogger logger, LocalRestoredPackageReferenceArtifact[] restoredPackages, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, Calculated cppSkipCompiling, Optional`1<ProfileNameArtifact> maybeProfile, CppEnableDeveloperMode cppEnableDeveloperMode, CppSuppressUnityBuild cppSuppressUnityBuild, CompileGeneratorArtifact compileGeneratorArtifact, NativeProductArtifact[] nativeProductArtifacts, NativeLibraryArtifact[] nativeLibraryArtifacts, NativeBoostTestArtifact[] nativeBoostTestArtifacts, IInvokeMsbuild invokeMsbuild);
    [BuildStepAttribute]
public static CompiledSubplatformFile[] RunCompile(ILogger logger, AllAssembliesOnEverything allass, LocalRestoredPackageReferenceArtifact[] restoredPackages, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, InputPackage[] inputPackages, Calculated cppSkipCompiling, Optional`1<IncrementalBuild> incremental, Optional`1<CompileNativeDegreeOfParallelismArtifact> degreeOfParallelism, IAuthenticodeSigningService signingService, Optional`1<ProfileNameArtifact> maybeProfile, CppEnableDeveloperMode cppEnableDeveloperMode, CppSuppressUnityBuild cppSuppressUnityBuild, CompileGeneratorArtifact compileGeneratorArtifact, NativeProductArtifact[] nativeProductArtifacts, NativeLibraryArtifact[] nativeLibraryArtifacts, NativeBoostTestArtifact[] nativeBoostTestArtifacts, IInvokeMsbuild invokeMsbuild);
    [NotNullAttribute]
private static ICompilerEnvironmentInitializer CreateCompilerEnvironment(ILogger logger, IInvokeMsbuild invokeMsbuild);
    [NotNullAttribute]
private static IFileGenerator CreateScriptGenerator(ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, Optional`1<ProfileNameArtifact> maybeProfile, CompileGeneratorArtifact compileGeneratorArtifact, Func`2<ToolsetIdentity, FileSystemPath> getMsBuildExe, Func`1<FileSystemPath> getCMakeExe, Func`1<FileSystemPath> getNMakeExe, Func`1<FileSystemPath> getUnixMakeExe);
    [NotNullAttribute]
private static RelativePath GetRelativeObjBaseDir(Optional`1<ProfileNameArtifact> maybeProfile);
    [NotNullAttribute]
private static FileSystemPath GetCMakeExecutable(ProductHomeDirArtifact productHomeDir, LocalRestoredPackageReferenceArtifact[] restoredPackages);
    [CanBeNullAttribute]
private static FileSystemPath GetBuildSyncExecutable(ProductHomeDirArtifact productHomeDir, LocalRestoredPackageReferenceArtifact[] restoredPackages);
    [NotNullAttribute]
private static FileSystemPath GetMsBuildExecutable(IInvokeMsbuild invokeMsbuild, ToolsetIdentity toolset);
    [NotNullAttribute]
private static FileSystemPath GetNMakeExecutable(ProductHomeDirArtifact productHomeDir, LocalRestoredPackageReferenceArtifact[] restoredPackages);
    [NotNullAttribute]
private static FileSystemPath GetUnixMakeExecutable();
    [NotNullAttribute]
private static FileSystemPath SearchInPaths(string filename);
    [NotNullAttribute]
private static SolutionItem[] GetUnorderedSolutions(Func`2<ToolsetIdentity, FileSystemPath> getMsBuildExe, Func`1<FileSystemPath> getUnixMakeExe, ICompilerEnvironmentProvider compilerEnvironmentProvider, NativeProductArtifact[] nativeProductArtifacts, NativeLibraryArtifact[] nativeLibraryArtifacts, NativeBoostTestArtifact[] nativeBoostTestArtifacts);
    [NotNullAttribute]
private static SolutionItem[] GetOrderedSolutions(AllAssembliesOnEverything allass, Func`2<ToolsetIdentity, FileSystemPath> getMsBuildExe, Func`1<FileSystemPath> getUnixMakeExe, ICompilerEnvironmentProvider compilerEnvironmentProvider, NativeProductArtifact[] nativeProductArtifacts, NativeLibraryArtifact[] nativeLibraryArtifacts, NativeBoostTestArtifact[] nativeBoostTestArtifacts);
    private static void RunCMake(ILogger logger, FileSystemPath objDir, FileSystemPath solutionDir, FileSystemPath cmakeExe, String[] options, IEnumerable`1<KeyValuePair`2<string, EnvironmentValue>> additionalEnvironmentVariables);
    private static void ApplyEnvironment(IDictionary`2<string, string> environmentVariables, IEnumerable`1<KeyValuePair`2<string, EnvironmentValue>> additionalEnvironmentVariables);
    private static Tuple`3[] PrepareForIncrementalCompilation(ILogger logger, EnableCMakeGeneration enableCMakeGeneration, ProductHomeDirArtifact productHomeDir, CppEnableDeveloperMode cppEnableDeveloperMode, CppSuppressUnityBuild cppSuppressUnityBuild, SolutionItem[] unorderedSolutions, RelativePath relativeObjBaseDir, IFileGenerator fileGenerator, Func`1<FileSystemPath> getCMakeExe, Func`1<FileSystemPath> getBuildSyncExe);
    [NotNullAttribute]
private static ICollection`1<FileSystemPath> CollectAllGeneratedFiles(FileSystemPath fullSolutionDir);
    private static string GetSolutionName(ProductHomeDirArtifact productHomeDir, RelativePath solutionDir);
    private static int CalculteDegreeOfParallelism(Optional`1<CompileNativeDegreeOfParallelismArtifact> degreeOfParallelism);
    [CompilerGeneratedAttribute]
private static RelativePath <RunPrepareWorkingCopy>b__8(SolutionItem x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Task> <RunPrepareWorkingCopy>b__9(Tuple`3<RelativePath, Tuple`2[], Task[]> x);
    [CompilerGeneratedAttribute]
private static Task`1<string> <RunPrepareWorkingCopy>b__a(Tuple`2<ICMakeTarget, Task`1<string>> y);
    [CompilerGeneratedAttribute]
private static RelativePath <RunCompile>b__1b(SolutionItem x);
    [CompilerGeneratedAttribute]
private static string <GetRelativeObjBaseDir>b__5a(ProfileNameArtifact x);
    [CompilerGeneratedAttribute]
private static RelativePath <GetUnorderedSolutions>b__5f(SolutionItem x);
    [CompilerGeneratedAttribute]
private static RelativePath <GetOrderedSolutions>b__66(Tuple`2<Subplatform, SolutionItem> x);
    [CompilerGeneratedAttribute]
private static int <GetOrderedSolutions>b__6a(<>f__AnonymousType5`3<SolutionItem, JetHashSet`1<Subplatform>, JetHashSet`1<Subplatform>> x, <>f__AnonymousType5`3<SolutionItem, JetHashSet`1<Subplatform>, JetHashSet`1<Subplatform>> y);
    [CompilerGeneratedAttribute]
private static SolutionItem <GetOrderedSolutions>b__6b(<>f__AnonymousType5`3<SolutionItem, JetHashSet`1<Subplatform>, JetHashSet`1<Subplatform>> x);
    [CompilerGeneratedAttribute]
private static string <ApplyEnvironment>b__74(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static string <ApplyEnvironment>b__75(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static string <ApplyEnvironment>b__76(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static TextAndEncoding <GetSolutionName>b__91(Stream s);
    [CompilerGeneratedAttribute]
private static OccupyStrategy <CalculteDegreeOfParallelism>b__93(CompileNativeDegreeOfParallelismArtifact x);
}
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileTarget : object {
    public ProcessorArchitecture Architecture;
    public CMakeCompiler Compiler;
    public CMakeGenerator Generator;
    public CompileTarget(ProcessorArchitecture architecture, CMakeGenerator generator, CMakeCompiler compiler);
    public sealed virtual bool Equals(CompileTarget other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal abstract class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.BaseFileGenerator : object {
    protected static string Beget;
    protected static string Compile;
    protected ILogger Logger;
    protected Optional`1<ProfileNameArtifact> MaybeProfile;
    protected ProductBinariesDirArtifact ProductBinariesDirArtifact;
    protected ProductHomeDirArtifact ProductHomeDirArtifact;
    protected CompileGeneratorArtifact CompileGeneratorArtifact;
    [CompilerGeneratedAttribute]
private static Func`2<ProfileNameArtifact, string> CS$<>9__CachedAnonymousMethodDelegate2;
    protected BaseFileGenerator(ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, CompileGeneratorArtifact compileGeneratorArtifact, Optional`1<ProfileNameArtifact> maybeProfile);
    public sealed virtual FileSystemPath WriteCMakeConfiguration(RelativePath solutionDir);
    [NotNullAttribute]
protected FileSystemPath WriteScript(RelativePath solutionDir, string suffix, string text);
    [NotNullAttribute]
protected FileSystemPath WriteText(RelativePath solutionDir, string filename, string text);
    [NotNullAttribute]
private string GenerateCMakeScriptText(RelativePath solutionDir, RelativePath relativeScriptDir);
    [CompilerGeneratedAttribute]
private static string <WriteScript>b__0(ProfileNameArtifact x);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CacheUtil : object {
    private static Regex ourCacheEntry;
    private static Regex ourCacheEntryQuoted;
    private static Regex ourCompiler;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`3<string, string, string>, Tuple`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegatea;
    private static CacheUtil();
    [CanBeNullAttribute]
private static IReadOnlyCollection`1<Tuple`3<string, string, string>> ReadCMakeCache(FileSystemPath cmakeCache, Func`2<string, bool> filter);
    public static void CleanUpObjDirIfNeed(ILogger logger, ICMakeTarget target, FileSystemPath objDir);
    [CompilerGeneratedAttribute]
private static Tuple`2<string, string> <CleanUpObjDirIfNeed>b__3(Tuple`3<string, string, string> x);
    [CompilerGeneratedAttribute]
private static string <CleanUpObjDirIfNeed>b__4(Tuple`2<string, string> x);
    [CompilerGeneratedAttribute]
private static string <CleanUpObjDirIfNeed>b__5(Tuple`2<string, string> x);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeCommonConfig : object {
    [NotNullAttribute]
public Func`1<FileSystemPath> GetBuildSyncExe;
    public FileSystemPath BinDir;
    public String[] Definitions;
    public bool DeveloperMode;
    public FileSystemPath LibDir;
    public bool SuppressUnityBuild;
    public CMakeCommonConfig(Func`1<FileSystemPath> getBuildSyncExe);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeTarget : object {
    private static SemanticVersion ourToolsetVersion;
    private static ToolsetIdentity ourToolsetWindowsVc120;
    private static ToolsetIdentity ourToolsetWindowsVc140;
    private static ToolsetIdentity ourToolsetWindowsVc141;
    private static Version ourWindowsSdkVersion;
    private ICompilerEnvironmentProvider myCompilerEnvironmentProvider;
    private Func`2<ToolsetIdentity, FileSystemPath> myGetMsBuildExe;
    private Func`1<FileSystemPath> myGetUnixMakeExe;
    private CMakeUnit myUnit;
    public Version WindowsSdkVersionMsBuild { get; }
    public CMakeUnit Unit { get; }
    public ToolsetIdentity ToolsetMsBuild { get; }
    public string VariableName { get; }
    public string ShortDirectoryName { get; }
    public string DirectoryName { get; }
    public bool ActivateTrackFileAccessMsBuild { get; }
    private CMakeTarget(CMakeUnit unit, Func`2<ToolsetIdentity, FileSystemPath> getMsBuildExe, Func`1<FileSystemPath> getUnixMakeExe, ICompilerEnvironmentProvider compilerEnvironmentProvider);
    private static CMakeTarget();
    public sealed virtual Version get_WindowsSdkVersionMsBuild();
    public sealed virtual CMakeUnit get_Unit();
    public sealed virtual ToolsetIdentity get_ToolsetMsBuild();
    public sealed virtual string get_VariableName();
    public sealed virtual string get_ShortDirectoryName();
    public sealed virtual string get_DirectoryName();
    public sealed virtual bool get_ActivateTrackFileAccessMsBuild();
    public sealed virtual IReadOnlyCollection`1<KeyValuePair`2<string, FileSystemPath>> GetCompilers();
    public sealed virtual IReadOnlyCollection`1<string> GetOptions();
    public sealed virtual IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> GetBuildEnvironmentVariables();
    public sealed virtual IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> GetCMakeEnvironmentVariables();
    public virtual string ToString();
    [NotNullAttribute]
public static ICMakeTarget[] Create(IReadOnlyCollection`1<CompileTarget> targets, CMakeConfiguration[] configurations, Func`2<ToolsetIdentity, FileSystemPath> getMsBuildExe, Func`1<FileSystemPath> getUnixMakeExe, ICompilerEnvironmentProvider locateBuildTools);
    [CanBeNullAttribute]
private FileSystemPath GetMakeProgram();
    [NotNullAttribute]
private string GetMlNameVc();
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeUnit : object {
    public ProcessorArchitecture Architecture;
    public CMakeCompiler Compiler;
    public Nullable`1<CMakeConfiguration> Configuration;
    public CMakeGenerator Generator;
    public CMakeUnit(ProcessorArchitecture architecture, CMakeGenerator generator, CMakeCompiler compiler, Nullable`1<CMakeConfiguration> configuration);
    public sealed virtual bool Equals(CMakeUnit other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CommandLineOptions : object {
    [NotNullAttribute]
public static IEnumerable`1<string> GetCMakeCommonOptions(CMakeCommonConfig config, bool noOmission);
    [NotNullAttribute]
public static IEnumerable`1<string> GetMsBuildScriptOptions();
    [NotNullAttribute]
public static IEnumerable`1<string> GetNMakeScriptOptions();
    [NotNullAttribute]
public static IEnumerable`1<string> GetUnixMakeScriptOptions();
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerDirs : object {
    [NotNullAttribute]
public FileSystemPath[] IncludeDirs;
    [NotNullAttribute]
public FileSystemPath[] LibraryDirs;
    [NotNullAttribute]
public FileSystemPath WindowsSdkDir;
    public CompilerDirs(FileSystemPath[] includeDirs, FileSystemPath[] libraryDirs, FileSystemPath windowsSdkDir);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironment : object {
    [NotNullAttribute]
public CompilerDirs CompilerDirs;
    private Func`2<RelativePath, FileSystemPath> mySearchInPath;
    public CompilerEnvironment(Func`2<RelativePath, FileSystemPath> searchInPath, CompilerDirs compilerDirs);
    [NotNullAttribute]
public FileSystemPath SearchInPath(RelativePath relativeFile);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironmentEmpty : object {
    public ICompilerEnvironmentProvider Provider { get; }
    public sealed virtual ICompilerEnvironmentProvider get_Provider();
    public sealed virtual void Initialize(SolutionItem[] solutions);
    public sealed virtual CompilerEnvironment Get(ICMakeTarget target);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironmentMsBuild : object {
    private IInvokeMsbuild myInvokeMsbuild;
    private ILogger myLogger;
    private Dictionary`2<CMakeUnit, CompilerEnvironment> myStorage;
    [CompilerGeneratedAttribute]
private static Func`2<SolutionItem, IEnumerable`1<ICMakeTarget>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<ICMakeTarget, CMakeUnit> CS$<>9__CachedAnonymousMethodDelegate6;
    public ICompilerEnvironmentProvider Provider { get; }
    public CompilerEnvironmentMsBuild(ILogger logger, IInvokeMsbuild invokeMsbuild);
    public sealed virtual ICompilerEnvironmentProvider get_Provider();
    public sealed virtual void Initialize(SolutionItem[] solutions);
    public sealed virtual CompilerEnvironment Get(ICMakeTarget target);
    [ItemNotNullAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironmentMsBuild/<LocateBuildTools>d__f")]
[DebuggerStepThroughAttribute]
private Task`1<CompilerEnvironment> LocateBuildTools(ICMakeTarget target);
    [NotNullAttribute]
private static string GetPlatformToolset(CMakeCompiler compiler);
    [NotNullAttribute]
private Task`1<FullCompilerDirs> RunProbingLocateBuild(ICMakeTarget target);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ICMakeTarget> <Initialize>b__2(SolutionItem x);
    [CompilerGeneratedAttribute]
private static CMakeUnit <Initialize>b__3(ICMakeTarget x);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompileUtil : object {
    [CompilerGeneratedAttribute]
private static Func`2<NativeProductArtifact, CompiledSubplatformFile> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<NativeLibraryArtifact, CompiledSubplatformFile> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<NativeBoostTestArtifact, CompiledSubplatformFile> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, bool> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPartPaths, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<NugetEntry>, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<CompiledSubplatformFile, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<CompiledSubplatformFile, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate22;
    [NotNullAttribute]
public static CompiledSubplatformFile[] Collect(FileSystemPath binDir, IAuthenticodeSigningService signingService, ILogger logger, NativeProductArtifact[] nativeProductArtifacts, NativeLibraryArtifact[] nativeLibraryArtifacts, NativeBoostTestArtifact[] nativeBoostTestArtifacts);
    public static void ExtractInputLibraries(InputPackage[] inputPackages, ILogger logger, FileSystemPath libDir);
    public static void ExtractLibraries(CompiledSubplatformFile[] compiledFiles, ILogger logger, FileSystemPath libDir);
    [NotNullAttribute]
private static CompiledSubplatformFile CreateSignedSubplatformFile(RelativePath file, ILogger logger, IAuthenticodeSigningService signingService, SubplatformName subplatformName, FileSystemPath dir, PackageFileRole role);
    [NotNullAttribute]
private static CompiledSubplatformFile CreateSubplatformFile(RelativePath file, SubplatformName subplatformName, FileSystemPath dir, PackageFileRole role);
    [CanBeNullAttribute]
private static CompiledSubplatformFile CreateNativePdbMarker(Subplatform productSubplatform);
    [CanBeNullAttribute]
private static CompiledSubplatformFile CreateLibraryMarker(Subplatform librarySubplatform);
    [CanBeNullAttribute]
private static CompiledSubplatformFile CreateBoostTestConfigurationFile(Subplatform subplatform, IReadOnlyCollection`1<Tuple`3<RelativePath, PackageFileRole, string>> boostTestsFiles);
    [NotNullAttribute]
private static SimpleFileItem SignIfNeeded(IAuthenticodeSigningService signingService, ILogger logger, SimpleFileItem file);
    private static void ExtractFiles(IList`1<SimpleFileItem> files, ILogger logger, FileSystemPath libDir);
    [CompilerGeneratedAttribute]
private static CompiledSubplatformFile <Collect>b__6(NativeProductArtifact x);
    [CompilerGeneratedAttribute]
private static CompiledSubplatformFile <Collect>b__7(NativeLibraryArtifact x);
    [CompilerGeneratedAttribute]
private static CompiledSubplatformFile <Collect>b__8(NativeBoostTestArtifact x);
    [CompilerGeneratedAttribute]
private static bool <ExtractInputLibraries>b__14(InputPackage p);
    [CompilerGeneratedAttribute]
private static bool <ExtractInputLibraries>b__18(SimpleFileItem x);
    [CompilerGeneratedAttribute]
private static bool <ExtractInputLibraries>b__15(NugetPartPaths x);
    [CompilerGeneratedAttribute]
private static bool <ExtractInputLibraries>b__16(IList`1<NugetEntry> x);
    [CompilerGeneratedAttribute]
private static bool <ExtractLibraries>b__1f(CompiledSubplatformFile x);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <ExtractLibraries>b__20(CompiledSubplatformFile x);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.Constants : object {
    private static string GeneratedSuffix;
    public static string NativeSolutionPrefix;
    public static string GeneratedSuffixCMake;
    public static string GeneratedSuffixCmd;
    public static string GeneratedSuffixSh;
    public static string GeneratedSuffixSln;
    public static UnixFileModes UnixFileModeExecute;
    public static UnixFileModes UnixFileModeNormal;
    public static string JbProductDir;
    public static string JbGenDefinitions;
    public static string JbGenOutputDir;
    public static string JbGenLibraryDir;
    public static string CCompiler;
    public static string CxxCompiler;
    public static string AsmMasmCompiler;
    public static string RcCompiler;
    public static string McCompiler;
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ConventionsUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetGeneratorName(CMakeUnit unit);
    [NotNullAttribute]
[ExtensionAttribute]
public static string Format(CMakeUnit unit, char delimitter, FormatMode mode);
    [NotNullAttribute]
[ExtensionAttribute]
public static string GetFolderName(CMakeGenerator generator);
    [NotNullAttribute]
[ExtensionAttribute]
public static string GetFolderName(CMakeCompiler compiler);
    [NotNullAttribute]
[ExtensionAttribute]
public static string GetFolderName(CMakeConfiguration configuration);
    [ExtensionAttribute]
public static WellKnownPlatform GetMsBuildPlatform(ProcessorArchitecture architecture);
    [ExtensionAttribute]
public static WellKnownConfiguration GetMsBuildConfiguration(CMakeConfiguration configuration);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.EnvironmentValue : object {
    [CanBeNullAttribute]
public FileSystemPath[] Paths;
    [CanBeNullAttribute]
public string Str;
    public EnvironmentValue(FileSystemPath[] paths);
    public EnvironmentValue(FileSystemPath path);
    public EnvironmentValue(string str);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorBash : BaseFileGenerator {
    private Func`1<FileSystemPath> myGetCMakeExe;
    private Func`1<FileSystemPath> myGetUnixMakeExe;
    [CompilerGeneratedAttribute]
private static Func`2<ICMakeTarget, IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ICMakeTarget, IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> CS$<>9__CachedAnonymousMethodDelegate8;
    public FileGeneratorBash(ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, CompileGeneratorArtifact compileGeneratorArtifact, Optional`1<ProfileNameArtifact> maybeProfile, Func`1<FileSystemPath> getCMakeExe, Func`1<FileSystemPath> getUnixMakeExe);
    public sealed virtual FileSystemPath WriteBegetScript(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, IEnumerable`1<string> commonConfig);
    public sealed virtual FileSystemPath WriteCompileScript(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, CMakeConfiguration[] configurations);
    public sealed virtual FileSystemPath WritePatchedSolution(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget target);
    [NotNullAttribute]
private string GenerateBegetScriptText(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, IEnumerable`1<string> commonConfig);
    [NotNullAttribute]
private string GenerateCompileScriptText(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets);
    [NotNullAttribute]
private static string MultilineEscaping(string s);
    [NotNullAttribute]
private static string MakeMultiline(char separator, IEnumerable`1<string> arguments);
    private static void UnderEnvironment(StringBuilder builder, Func`2<ICMakeTarget, IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> getEnvironmentVariables, Action`2<Action`1<ICMakeTarget>, Action> action);
    private void WriteCompileScriptMake(string solutionName, RelativePath relativeObjBaseDir, ICMakeTarget[] filteredTargets, StringBuilder builder, Action`1<ICMakeTarget> writeEnvironment, Action cleanEnvironment);
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> <GenerateBegetScriptText>b__0(ICMakeTarget x);
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> <GenerateCompileScriptText>b__5(ICMakeTarget x);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd : BaseFileGenerator {
    private static Regex ourSolutionRegex;
    private Func`1<FileSystemPath> myGetCMakeExe;
    private Func`2<ToolsetIdentity, FileSystemPath> myGetMsBuildExe;
    private Func`1<FileSystemPath> myGetNMakeExe;
    [CompilerGeneratedAttribute]
private static Func`2<ICMakeTarget, IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ICMakeTarget, IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate15;
    public FileGeneratorCmd(ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, CompileGeneratorArtifact compileGeneratorArtifact, Optional`1<ProfileNameArtifact> maybeProfile, Func`1<FileSystemPath> getCMakeExe, Func`1<FileSystemPath> getNMakeExe, Func`2<ToolsetIdentity, FileSystemPath> getMsBuildExe);
    private static FileGeneratorCmd();
    public sealed virtual FileSystemPath WriteBegetScript(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, IEnumerable`1<string> commonConfig);
    public sealed virtual FileSystemPath WriteCompileScript(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, CMakeConfiguration[] configurations);
    public sealed virtual FileSystemPath WritePatchedSolution(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget target);
    [NotNullAttribute]
private static string MakeMultiline(char separator, IEnumerable`1<string> arguments);
    private static void UnderEnvironment(StringBuilder builder, Func`2<ICMakeTarget, IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> getEnvironmentVariables, Action`2<Action`1<ICMakeTarget>, Action> action);
    private string GenerateBegetScriptText(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, IEnumerable`1<string> commonConfig);
    private string GenerateCompileScriptText(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, CMakeConfiguration[] configurations);
    private void WriteCompileScriptNMake(string solutionName, RelativePath relativeObjBaseDir, ICMakeTarget[] filteredTargets, StringBuilder builder, Action`1<ICMakeTarget> writeEnvironment, Action cleanEnvironment);
    private void WriteCompileScriptVisualStudio(string solutionName, ICMakeTarget[] filteredTargets, StringBuilder builder, Action`1<ICMakeTarget> writeEnvironment, Action cleanEnvironment, CMakeConfiguration[] configurations, RelativePath solutionDir);
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> <GenerateBegetScriptText>b__6(ICMakeTarget x);
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> <GenerateCompileScriptText>b__b(ICMakeTarget x);
    [CompilerGeneratedAttribute]
private static string <WriteCompileScriptVisualStudio>b__14(KeyValuePair`2<string, string> x);
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.IBaseFileGenerator {
    [NotNullAttribute]
public abstract virtual FileSystemPath WriteCMakeConfiguration(RelativePath solutionDir);
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICMakeTarget {
    [NotNullAttribute]
public CMakeUnit Unit { get; }
    [NotNullAttribute]
public string VariableName { get; }
    [NotNullAttribute]
public string ShortDirectoryName { get; }
    [NotNullAttribute]
public string DirectoryName { get; }
    public bool ActivateTrackFileAccessMsBuild { get; }
    [NotNullAttribute]
public ToolsetIdentity ToolsetMsBuild { get; }
    [CanBeNullAttribute]
public Version WindowsSdkVersionMsBuild { get; }
    public abstract virtual CMakeUnit get_Unit();
    public abstract virtual string get_VariableName();
    public abstract virtual string get_ShortDirectoryName();
    public abstract virtual string get_DirectoryName();
    public abstract virtual bool get_ActivateTrackFileAccessMsBuild();
    public abstract virtual ToolsetIdentity get_ToolsetMsBuild();
    public abstract virtual Version get_WindowsSdkVersionMsBuild();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<KeyValuePair`2<string, FileSystemPath>> GetCompilers();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<string> GetOptions();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> GetBuildEnvironmentVariables();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>> GetCMakeEnvironmentVariables();
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICompilerEnvironmentInitializer {
    [NotNullAttribute]
public ICompilerEnvironmentProvider Provider { get; }
    public abstract virtual ICompilerEnvironmentProvider get_Provider();
    public abstract virtual void Initialize(SolutionItem[] solutions);
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICompilerEnvironmentProvider {
    [NotNullAttribute]
public abstract virtual CompilerEnvironment Get(ICMakeTarget target);
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.IFileGenerator {
    [NotNullAttribute]
public abstract virtual FileSystemPath WriteBegetScript(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, IEnumerable`1<string> commonConfig);
    [NotNullAttribute]
public abstract virtual FileSystemPath WriteCompileScript(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget[] targets, CMakeConfiguration[] configurations);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath WritePatchedSolution(RelativePath relativeObjBaseDir, RelativePath solutionDir, string solutionName, ICMakeTarget target);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.NativeMsbuildProperties : object {
    public static string BinDir;
    public static string LibDir;
    public static string ObjDir;
    public static string NativePreprocessorDefinitions;
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.NativePreprocessorDefinitions : object {
    public static string PrdSuffix;
    public static string LibSuffix;
    public static string TstSuffix;
    public static string RelSuffix;
    public static string DbgSuffix;
    private static DateTime ourBaseDateTime;
    public static String[] DefaultDefinitions;
    private static NativePreprocessorDefinitions();
    private static void CreateDateTimeVersion(ILogger logger, Version2 majorminor, Version& version, DateTime& dateTime);
    [NotNullAttribute]
private static String[] MakeDefinitions(bool isSigned, DateTime time, Version version);
    [NotNullAttribute]
[ObsoleteAttribute("Will be deleted shortly")]
public static String[] GenerateDefinitions(ILogger logger, IAuthenticodeSigningService signingService, Subplatform subplatform);
    [NotNullAttribute]
public static String[] GenerateDefinitions(ILogger logger, IAuthenticodeSigningService signingService, Version2 majorminor);
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.NativeSolutionsUtil : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ProfileNameArtifact, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [NotNullAttribute]
public static FileSystemPath[] GetIsolatedPathDirs_Windows();
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetFullObjDir(ProductHomeDirArtifact productHomeDir, RelativePath relativeObjBaseDir, string solutionName, ICMakeTarget target);
    [NotNullAttribute]
public static string GetUserSolutionName(string solutionName, Optional`1<ProfileNameArtifact> maybeProfile, ICMakeTarget target);
    [NotNullAttribute]
public static FileSystemPath GetUserSolutionFile(ProductHomeDirArtifact productHomeDir, RelativePath solutionDir, string solutionName, Optional`1<ProfileNameArtifact> maybeProfile, ICMakeTarget target);
    [NotNullAttribute]
public static FileSystemPath GetObjSolutionFile(ProductHomeDirArtifact productHomeDir, RelativePath relativeObjBaseDir, string solutionName, ICMakeTarget target);
    [NotNullAttribute]
[ExtensionAttribute]
public static FileSystemPath GetFileFormDevelopmentRestoredPackages(LocalRestoredPackageReferenceArtifact[] restoredPackages, ProductHomeDirArtifact productHomeDir, string packageId, RelativePath relativeFile);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetIsolatedPathDirs_Windows>b__0(string s);
    [CompilerGeneratedAttribute]
private static string <GetUserSolutionName>b__5(ProfileNameArtifact x);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeBoostTestArtifact : BaseNativeArtifact {
    [NotNullAttribute]
public IReadOnlyCollection`1<Tuple`3<RelativePath, PackageFileRole, string>> Files;
    public NativeBoostTestArtifact(RelativePath solutionDir, IReadOnlyCollection`1<CompileTarget> targets, Subplatform subplatform, IReadOnlyCollection`1<Tuple`3<RelativePath, PackageFileRole, string>> files);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeLibraryArtifact : BaseNativeArtifact {
    [NotNullAttribute]
public IReadOnlyCollection`1<Tuple`2<RelativePath, PackageFileRole>> Files;
    public NativeLibraryArtifact(RelativePath solutionDir, IReadOnlyCollection`1<CompileTarget> targets, Subplatform subplatform, IReadOnlyCollection`1<Tuple`2<RelativePath, PackageFileRole>> files);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeProductArtifact : BaseNativeArtifact {
    [NotNullAttribute]
public IReadOnlyCollection`1<Tuple`2<RelativePath, PackageFileRole>> Files;
    public NativeProductArtifact(RelativePath solutionDir, IReadOnlyCollection`1<CompileTarget> targets, Subplatform subplatform, IReadOnlyCollection`1<Tuple`2<RelativePath, PackageFileRole>> files);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.NestedBuildRunnerOnSources : object {
    private INestedBuildRunner myRunner;
    private AllAssembliesOnSources myAllassSrc;
    private NestedInputArtifactsHelper myNestart;
    private InputPackage[] myInputs;
    private AllAssembliesFilterByProfile myPrfilter;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, InputPackage> CS$<>9__CachedAnonymousMethodDelegate1;
    public NestedBuildRunnerOnSources(INestedBuildRunner runner, AllAssembliesOnSources allassSrc, NestedInputArtifactsHelper nestart, InputPackage[] inputs, Optional`1<InputsForBinaryReferencesArtifact> maybeInputsFromShadowPkgs, Optional`1<AllAssembliesFilterByProfile> maybePrfilter);
    private sealed virtual override TArtifact JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources.RunNestedBuildSyncOnSourcesForArtifact(Action`1<BuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
    private sealed virtual override TArtifact[] JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources.RunNestedBuildSyncOnSourcesForArtifacts(Action`1<BuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
    public TResolve RunNestedBuildSyncOnSourcesCore(Action`1<BuildRunnerRequest> FAdjustRequest, Func`2<BuildRunnerResult, TResolve> FResolve, AllAssembliesFilter aafilter);
    [CompilerGeneratedAttribute]
private static InputPackage <.ctor>b__0(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static TArtifact[] <JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources.RunNestedBuildSyncOnSourcesForArtifacts>b__2(BuildRunnerResult result);
}
public enum JetBrains.Application.BuildScript.Compile.OccupyStrategy : Enum {
    public int value__;
    public static OccupyStrategy AllProcessors;
    public static OccupyStrategy LeaveOneProcessorFree;
    public static OccupyStrategy HalfProcessorsPlusOne;
    public static OccupyStrategy OneProcessor;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.OccupyStrategyEx : object {
    [ExtensionAttribute]
public static int ConvertToProcessorCount(OccupyStrategy strategy);
}
public enum JetBrains.Application.BuildScript.Compile.PackageFileRole : Enum {
    public int value__;
    public static PackageFileRole Other;
    public static PackageFileRole ManagedAssembly;
    public static PackageFileRole UnmanagedDll;
    public static PackageFileRole UnmanagedLibrary;
    public static PackageFileRole ProgramDatabase;
    public static PackageFileRole BuildTargets;
    public static PackageFileRole XmlDocumentation;
    public static PackageFileRole NugetBuildFile;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.PackagePartCatalogArtifact : object {
    private static RelativePath DefaultFileName;
    public PrecalculatedPartCatalog Catalog;
    public SubplatformName SubplatformName;
    public PackagePartCatalogArtifact(IStructuredStorage sstg);
    public PackagePartCatalogArtifact(SubplatformName subplatform, PrecalculatedPartCatalog catalog);
    private static PackagePartCatalogArtifact();
    [NotNullAttribute]
public static PackagePartCatalogArtifact CreateFromStream(SubplatformName subplatform, IDictionary`2<AssemblyNameInfo, RelativePath> assemblies, Action`1<Stream> FWrite);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
public static class JetBrains.Application.BuildScript.Compile.RequestPlatformCleanCompile : object {
    [BuildStepAttribute]
public static ValidateCleanCompilation Yield();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.SkipAssemblyRewrites/SkipAssemblyRewritesSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SkipAssemblyRewrites : object {
    public bool IsSkipAssemblyRewrites;
    public SkipAssemblyRewrites(bool isSkipAssemblyRewrites);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalHeadNode : object {
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalNode : object {
    [NotNullAttribute]
public GlobalHeadNode HeadNode;
    [NotNullAttribute]
public GlobalSectionNode[] Sections;
    public GlobalNode(GlobalHeadNode head, GlobalSectionNode[] sections);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalSectionHeadNode : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Stage;
    public GlobalSectionHeadNode(string name, string stage);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalSectionNode : object {
    [NotNullAttribute]
public GlobalSectionHeadNode Head;
    [NotNullAttribute]
public KeyValuePair`2[] Properties;
    public GlobalSectionNode(GlobalSectionHeadNode head, KeyValuePair`2[] properties);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectHeadNode : object {
    [NotNullAttribute]
public string Location;
    [NotNullAttribute]
public string Name;
    public Guid ProjectGuid;
    public Guid ProjectType;
    public ProjectHeadNode(Guid projectType, string name, string location, Guid projectGuid);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectNode : object {
    [NotNullAttribute]
public ProjectHeadNode Head;
    [NotNullAttribute]
public ProjectSectionNode[] Sections;
    public ProjectNode(ProjectHeadNode head, ProjectSectionNode[] sections);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectSectionHeadNode : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Stage;
    public ProjectSectionHeadNode(string name, string stage);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectSectionNode : object {
    [NotNullAttribute]
public ProjectSectionHeadNode Head;
    [NotNullAttribute]
public KeyValuePair`2[] Properties;
    public ProjectSectionNode(ProjectSectionHeadNode head, KeyValuePair`2[] properties);
}
public static class JetBrains.Application.BuildScript.Compile.SolutionFileParser.SlnFileParser : object {
    private static string formatMicrosoftVisualStudioSolutionFile;
    private static string formatFormatVersion;
    private static string formatProject;
    private static string formatEndProject;
    private static string formatProjectSection;
    private static string formatEndProjectSection;
    private static string formatGlobal;
    private static string formatEndGlobal;
    private static string formatGlobalSection;
    private static string formatEndGlobalSection;
    private static Parser`1<string> QuotedString;
    private static Parser`1<Version> Version2;
    private static Parser`1<string> Space;
    private static Parser`1<string> Comment;
    private static Parser`1<string> Separator;
    private static Parser`1<Version> FormatVersion;
    private static Parser`1<KeyValuePair`2<string, string>> Property;
    private static Parser`1<KeyValuePair`2<string, string>> SpecialProperty;
    private static Parser`1<ProjectSectionHeadNode> ProjectSectionHead;
    private static Parser`1<GlobalSectionHeadNode> GlobalSectionHead;
    private static Parser`1<ProjectHeadNode> ProjectHead;
    private static Parser`1<GlobalHeadNode> GlobalHead;
    private static Parser`1<ProjectSectionNode> ProjectSection;
    private static Parser`1<GlobalSectionNode> GlobalSection;
    private static Parser`1<Tuple`2<ProjectNode, GlobalSectionNode[]>> Project;
    private static Parser`1<GlobalNode> Global;
    public static Parser`1<SolutionNode> Solution;
    [CompilerGeneratedAttribute]
private static Func`2<char, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegatef6;
    [CompilerGeneratedAttribute]
private static Func`3<char, string, <>f__AnonymousType8`2<char, string>> CS$<>9__CachedAnonymousMethodDelegatef7;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType8`2<char, string>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegatef8;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType8`2<char, string>, char, string> CS$<>9__CachedAnonymousMethodDelegatef9;
    [CompilerGeneratedAttribute]
private static Func`2<string, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegatefa;
    [CompilerGeneratedAttribute]
private static Func`3<string, char, <>f__AnonymousType9`2<string, char>> CS$<>9__CachedAnonymousMethodDelegatefb;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType9`2<string, char>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegatefc;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType9`2<string, char>, string, Version> CS$<>9__CachedAnonymousMethodDelegatefd;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, string> CS$<>9__CachedAnonymousMethodDelegatefe;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegateff;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate100;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate101;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, string, <>f__AnonymousTypeb`2<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, string>> CS$<>9__CachedAnonymousMethodDelegate102;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTypeb`2<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate103;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousTypeb`2<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>, string> CS$<>9__CachedAnonymousMethodDelegate104;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate105;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate106;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate107;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate108;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char, <>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate109;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate10a;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate10b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate10c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>, <>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate10d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate10e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, IEnumerable`1<char>, <>f__AnonymousType10`2<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate10f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType10`2<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, IEnumerable`1<char>>, Parser`1<Version>> CS$<>9__CachedAnonymousMethodDelegate110;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType10`2<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, IEnumerable`1<char>>, Version, Version> CS$<>9__CachedAnonymousMethodDelegate111;
    [CompilerGeneratedAttribute]
private static Func`2<string, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate112;
    [CompilerGeneratedAttribute]
private static Func`3<string, IEnumerable`1<char>, <>f__AnonymousType11`2<string, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate113;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate114;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char, <>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate115;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate116;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType13`2<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate117;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType13`2<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate118;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType13`2<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate119;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate11a;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, string, <>f__AnonymousType14`2<IEnumerable`1<char>, string>> CS$<>9__CachedAnonymousMethodDelegate11b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate11c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char, <>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>> CS$<>9__CachedAnonymousMethodDelegate11d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate11e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, IEnumerable`1<char>, <>f__AnonymousType16`2<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate11f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType16`2<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate120;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType16`2<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, IEnumerable`1<char>>, string, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate121;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate122;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate123;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate124;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char, <>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate125;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate126;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate127;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate128;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, <>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>> CS$<>9__CachedAnonymousMethodDelegate129;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate12a;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>, <>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate12b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate12c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char, <>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate12d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate12e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate12f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate130;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char, <>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate131;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate132;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType1f`2<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate133;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1f`2<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate134;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType1f`2<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, ProjectSectionHeadNode> CS$<>9__CachedAnonymousMethodDelegate135;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate136;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate137;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate138;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char, <>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate139;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate13a;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate13b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate13c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, <>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>> CS$<>9__CachedAnonymousMethodDelegate13d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate13e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>, <>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate13f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate140;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char, <>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate141;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate142;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate143;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate144;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char, <>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate145;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate146;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType27`2<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate147;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType27`2<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate148;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType27`2<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, GlobalSectionHeadNode> CS$<>9__CachedAnonymousMethodDelegate149;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate14a;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate14b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate14c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char, <>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate14d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate14e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate14f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate150;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, <>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>> CS$<>9__CachedAnonymousMethodDelegate151;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate152;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>, <>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate153;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate154;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char, <>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate155;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate156;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate157;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate158;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char, <>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate159;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate15a;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate15b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate15c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, <>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>> CS$<>9__CachedAnonymousMethodDelegate15d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate15e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>, <>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate15f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate160;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char, <>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate161;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate162;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate163;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate164;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, <>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>> CS$<>9__CachedAnonymousMethodDelegate165;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate166;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>, <>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate167;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate168;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char, <>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate169;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate16a;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, <>f__AnonymousType37`2<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate16b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType37`2<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate16c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType37`2<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string, ProjectHeadNode> CS$<>9__CachedAnonymousMethodDelegate16d;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, GlobalHeadNode> CS$<>9__CachedAnonymousMethodDelegate16e;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectSectionHeadNode, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate16f;
    [CompilerGeneratedAttribute]
private static Func`3<ProjectSectionHeadNode, IEnumerable`1<string>, <>f__AnonymousType38`2<ProjectSectionHeadNode, IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate170;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType38`2<ProjectSectionHeadNode, IEnumerable`1<string>>, Parser`1<IEnumerable`1<KeyValuePair`2<string, string>>>> CS$<>9__CachedAnonymousMethodDelegate171;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType38`2<ProjectSectionHeadNode, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>, ProjectSectionNode> CS$<>9__CachedAnonymousMethodDelegate172;
    [CompilerGeneratedAttribute]
private static Func`2<GlobalSectionHeadNode, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate173;
    [CompilerGeneratedAttribute]
private static Func`3<GlobalSectionHeadNode, IEnumerable`1<string>, <>f__AnonymousType38`2<GlobalSectionHeadNode, IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate174;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType38`2<GlobalSectionHeadNode, IEnumerable`1<string>>, Parser`1<IEnumerable`1<KeyValuePair`2<string, string>>>> CS$<>9__CachedAnonymousMethodDelegate175;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType38`2<GlobalSectionHeadNode, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>, GlobalSectionNode> CS$<>9__CachedAnonymousMethodDelegate176;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectHeadNode, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate177;
    [CompilerGeneratedAttribute]
private static Func`3<ProjectHeadNode, IEnumerable`1<string>, <>f__AnonymousType38`2<ProjectHeadNode, IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate178;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType38`2<ProjectHeadNode, IEnumerable`1<string>>, Parser`1<IEnumerable`1<Tuple`2<ProjectSectionNode, GlobalSectionNode>>>> CS$<>9__CachedAnonymousMethodDelegate179;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType38`2<ProjectHeadNode, IEnumerable`1<string>>, IEnumerable`1<Tuple`2<ProjectSectionNode, GlobalSectionNode>>, Tuple`2<ProjectNode, GlobalSectionNode[]>> CS$<>9__CachedAnonymousMethodDelegate17a;
    [CompilerGeneratedAttribute]
private static Func`2<GlobalHeadNode, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate17b;
    [CompilerGeneratedAttribute]
private static Func`3<GlobalHeadNode, IEnumerable`1<string>, <>f__AnonymousType38`2<GlobalHeadNode, IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate17c;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType38`2<GlobalHeadNode, IEnumerable`1<string>>, Parser`1<IEnumerable`1<GlobalSectionNode>>> CS$<>9__CachedAnonymousMethodDelegate17d;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType38`2<GlobalHeadNode, IEnumerable`1<string>>, IEnumerable`1<GlobalSectionNode>, GlobalNode> CS$<>9__CachedAnonymousMethodDelegate17e;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<string>, Parser`1<Version>> CS$<>9__CachedAnonymousMethodDelegate17f;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<string>, Version, <>f__AnonymousType39`2<IEnumerable`1<string>, Version>> CS$<>9__CachedAnonymousMethodDelegate180;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate181;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>, <>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate182;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, Parser`1<IEnumerable`1<KeyValuePair`2<string, string>>>> CS$<>9__CachedAnonymousMethodDelegate183;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>, <>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>> CS$<>9__CachedAnonymousMethodDelegate184;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, Parser`1<IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>> CS$<>9__CachedAnonymousMethodDelegate185;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>, <>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>> CS$<>9__CachedAnonymousMethodDelegate186;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, Parser`1<GlobalNode>> CS$<>9__CachedAnonymousMethodDelegate187;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, GlobalNode, <>f__AnonymousType3d`2<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, GlobalNode>> CS$<>9__CachedAnonymousMethodDelegate188;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3d`2<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, GlobalNode>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate189;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType3d`2<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, GlobalNode>, IEnumerable`1<string>, SolutionNode> CS$<>9__CachedAnonymousMethodDelegate18a;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate18b;
    [CompilerGeneratedAttribute]
private static Func`3<KeyValuePair`2<string, string>, IEnumerable`1<string>, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate18c;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate18d;
    [CompilerGeneratedAttribute]
private static Func`3<KeyValuePair`2<string, string>, IEnumerable`1<string>, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate18e;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectSectionNode, Tuple`2<ProjectSectionNode, GlobalSectionNode>> CS$<>9__CachedAnonymousMethodDelegate18f;
    [CompilerGeneratedAttribute]
private static Func`2<GlobalSectionNode, Tuple`2<ProjectSectionNode, GlobalSectionNode>> CS$<>9__CachedAnonymousMethodDelegate190;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ProjectSectionNode, GlobalSectionNode>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate191;
    [CompilerGeneratedAttribute]
private static Func`3<Tuple`2<ProjectSectionNode, GlobalSectionNode>, IEnumerable`1<string>, Tuple`2<ProjectSectionNode, GlobalSectionNode>> CS$<>9__CachedAnonymousMethodDelegate192;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ProjectSectionNode, GlobalSectionNode>, ProjectSectionNode> CS$<>9__CachedAnonymousMethodDelegate193;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ProjectSectionNode, GlobalSectionNode>, GlobalSectionNode> CS$<>9__CachedAnonymousMethodDelegate194;
    [CompilerGeneratedAttribute]
private static Func`2<GlobalSectionNode, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate195;
    [CompilerGeneratedAttribute]
private static Func`3<GlobalSectionNode, IEnumerable`1<string>, GlobalSectionNode> CS$<>9__CachedAnonymousMethodDelegate196;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate197;
    [CompilerGeneratedAttribute]
private static Func`3<KeyValuePair`2<string, string>, IEnumerable`1<string>, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate198;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ProjectNode, GlobalSectionNode[]>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate199;
    [CompilerGeneratedAttribute]
private static Func`3<Tuple`2<ProjectNode, GlobalSectionNode[]>, IEnumerable`1<string>, Tuple`2<ProjectNode, GlobalSectionNode[]>> CS$<>9__CachedAnonymousMethodDelegate19a;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ProjectNode, GlobalSectionNode[]>, ProjectNode> CS$<>9__CachedAnonymousMethodDelegate19b;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<ProjectNode, GlobalSectionNode[]>, IEnumerable`1<GlobalSectionNode>> CS$<>9__CachedAnonymousMethodDelegate19c;
    private static SlnFileParser();
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__4f(char b);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType8`2<char, string> <.cctor>b__50(char b, string t);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__51(<>f__AnonymousType8`2<char, string> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__52(<>f__AnonymousType8`2<char, string> <>h__TransparentIdentifier0, char e);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__53(string j);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType9`2<string, char> <.cctor>b__54(string j, char d);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__55(<>f__AnonymousType9`2<string, char> <>h__TransparentIdentifier2);
    [CompilerGeneratedAttribute]
private static Version <.cctor>b__56(<>f__AnonymousType9`2<string, char> <>h__TransparentIdentifier2, string i);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__57(IEnumerable`1<char> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__58(IEnumerable`1<char> w);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__59(IEnumerable`1<char> w, IEnumerable`1<char> t);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__5a(<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier4);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypeb`2<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, string> <.cctor>b__5b(<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier4, string m);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__5c(<>f__AnonymousTypeb`2<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier5);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__5d(<>f__AnonymousTypeb`2<<>f__AnonymousTypea`2<IEnumerable`1<char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier5, IEnumerable`1<char> n);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__5e(string m);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__5f(IEnumerable`1<char> sg);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__60(IEnumerable`1<char> sg, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__61(<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier7);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <.cctor>b__62(<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier7, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__63(<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier8);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__64(<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier8, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__65(<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier9);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>> <.cctor>b__66(<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier9, IEnumerable`1<char> fv);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__67(<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>> <>h__TransparentIdentifiera);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType10`2<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, IEnumerable`1<char>> <.cctor>b__68(<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>> <>h__TransparentIdentifiera, IEnumerable`1<char> w2);
    [CompilerGeneratedAttribute]
private static Parser`1<Version> <.cctor>b__69(<>f__AnonymousType10`2<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, IEnumerable`1<char>> <>h__TransparentIdentifierb);
    [CompilerGeneratedAttribute]
private static Version <.cctor>b__6a(<>f__AnonymousType10`2<<>f__AnonymousTypef`2<<>f__AnonymousTypee`2<<>f__AnonymousTyped`2<<>f__AnonymousTypec`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, IEnumerable`1<char>>, IEnumerable`1<char>> <>h__TransparentIdentifierb, Version vr);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__6b(string nm);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType11`2<string, IEnumerable`1<char>> <.cctor>b__6c(string nm, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__6d(<>f__AnonymousType11`2<string, IEnumerable`1<char>> <>h__TransparentIdentifierd);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char> <.cctor>b__6e(<>f__AnonymousType11`2<string, IEnumerable`1<char>> <>h__TransparentIdentifierd, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__6f(<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char> <>h__TransparentIdentifiere);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType13`2<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__70(<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char> <>h__TransparentIdentifiere, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__71(<>f__AnonymousType13`2<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifierf);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <.cctor>b__72(<>f__AnonymousType13`2<<>f__AnonymousType12`2<<>f__AnonymousType11`2<string, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifierf, string vl);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__73(IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType14`2<IEnumerable`1<char>, string> <.cctor>b__74(IEnumerable`1<char> w0, string nm);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__75(<>f__AnonymousType14`2<IEnumerable`1<char>, string> <>h__TransparentIdentifier11);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char> <.cctor>b__76(<>f__AnonymousType14`2<IEnumerable`1<char>, string> <>h__TransparentIdentifier11, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__77(<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char> <>h__TransparentIdentifier12);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType16`2<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, IEnumerable`1<char>> <.cctor>b__78(<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char> <>h__TransparentIdentifier12, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__79(<>f__AnonymousType16`2<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier13);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <.cctor>b__7a(<>f__AnonymousType16`2<<>f__AnonymousType15`2<<>f__AnonymousType14`2<IEnumerable`1<char>, string>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier13, string vl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__7b(IEnumerable`1<char> tk);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__7c(IEnumerable`1<char> tk, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__7d(<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier15);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <.cctor>b__7e(<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier15, char bb);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__7f(<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier16);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__80(<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier16, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__81(<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier17);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <.cctor>b__82(<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier17, string nm);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__83(<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier18);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <.cctor>b__84(<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier18, IEnumerable`1<char> w2);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__85(<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier19);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <.cctor>b__86(<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier19, char be);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__87(<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier1a);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__88(<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier1a, IEnumerable`1<char> w3);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__89(<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier1b);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <.cctor>b__8a(<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier1b, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__8b(<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier1c);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1f`2<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__8c(<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier1c, IEnumerable`1<char> w4);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__8d(<>f__AnonymousType1f`2<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier1d);
    [CompilerGeneratedAttribute]
private static ProjectSectionHeadNode <.cctor>b__8e(<>f__AnonymousType1f`2<<>f__AnonymousType1e`2<<>f__AnonymousType1d`2<<>f__AnonymousType1c`2<<>f__AnonymousType1b`2<<>f__AnonymousType1a`2<<>f__AnonymousType19`2<<>f__AnonymousType18`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier1d, string tp);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__8f(IEnumerable`1<char> tk);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__90(IEnumerable`1<char> tk, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__91(<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier1f);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <.cctor>b__92(<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier1f, char bb);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__93(<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier20);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__94(<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier20, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__95(<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier21);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <.cctor>b__96(<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier21, string nm);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__97(<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier22);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <.cctor>b__98(<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier22, IEnumerable`1<char> w2);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__99(<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier23);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <.cctor>b__9a(<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier23, char be);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__9b(<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier24);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__9c(<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier24, IEnumerable`1<char> w3);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__9d(<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier25);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <.cctor>b__9e(<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier25, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__9f(<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier26);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType27`2<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__a0(<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier26, IEnumerable`1<char> w4);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__a1(<>f__AnonymousType27`2<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier27);
    [CompilerGeneratedAttribute]
private static GlobalSectionHeadNode <.cctor>b__a2(<>f__AnonymousType27`2<<>f__AnonymousType26`2<<>f__AnonymousType25`2<<>f__AnonymousType24`2<<>f__AnonymousType23`2<<>f__AnonymousType22`2<<>f__AnonymousType21`2<<>f__AnonymousType20`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier27, string tp);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__a3(IEnumerable`1<char> tk);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__a4(IEnumerable`1<char> tk, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__a5(<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier29);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <.cctor>b__a6(<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier29, char bb);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__a7(<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier2a);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__a8(<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier2a, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__a9(<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier2b);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <.cctor>b__aa(<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier2b, string tg);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__ab(<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier2c);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <.cctor>b__ac(<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier2c, IEnumerable`1<char> w2);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__ad(<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier2d);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <.cctor>b__ae(<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier2d, char be);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__af(<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier2e);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__b0(<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier2e, IEnumerable`1<char> w3);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__b1(<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier2f);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <.cctor>b__b2(<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier2f, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__b3(<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier30);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__b4(<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier30, IEnumerable`1<char> w4);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__b5(<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier31);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <.cctor>b__b6(<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier31, string nm);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__b7(<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier32);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <.cctor>b__b8(<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier32, IEnumerable`1<char> w5);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__b9(<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier33);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <.cctor>b__ba(<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier33, char d0);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__bb(<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier34);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__bc(<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier34, IEnumerable`1<char> w6);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__bd(<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier35);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <.cctor>b__be(<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier35, string fl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__bf(<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier36);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <.cctor>b__c0(<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string> <>h__TransparentIdentifier36, IEnumerable`1<char> w7);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__c1(<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier37);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <.cctor>b__c2(<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>> <>h__TransparentIdentifier37, char d1);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__c3(<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier38);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType37`2<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <.cctor>b__c4(<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier38, IEnumerable`1<char> w8);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__c5(<>f__AnonymousType37`2<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier39);
    [CompilerGeneratedAttribute]
private static ProjectHeadNode <.cctor>b__c6(<>f__AnonymousType37`2<<>f__AnonymousType36`2<<>f__AnonymousType35`2<<>f__AnonymousType34`2<<>f__AnonymousType33`2<<>f__AnonymousType32`2<<>f__AnonymousType31`2<<>f__AnonymousType30`2<<>f__AnonymousType2f`2<<>f__AnonymousType2e`2<<>f__AnonymousType2d`2<<>f__AnonymousType2c`2<<>f__AnonymousType2b`2<<>f__AnonymousType2a`2<<>f__AnonymousType29`2<<>f__AnonymousType28`2<<>f__AnonymousType17`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>>, string>, IEnumerable`1<char>>, char>, IEnumerable`1<char>> <>h__TransparentIdentifier39, string pg);
    [CompilerGeneratedAttribute]
private static GlobalHeadNode <.cctor>b__c7(IEnumerable`1<char> tk);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__c8(ProjectSectionHeadNode h);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType38`2<ProjectSectionHeadNode, IEnumerable`1<string>> <.cctor>b__c9(ProjectSectionHeadNode h, IEnumerable`1<string> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<KeyValuePair`2<string, string>>> <.cctor>b__ca(<>f__AnonymousType38`2<ProjectSectionHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier3b);
    [CompilerGeneratedAttribute]
private static ProjectSectionNode <.cctor>b__cd(<>f__AnonymousType38`2<ProjectSectionHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier3b, IEnumerable`1<KeyValuePair`2<string, string>> s);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__ce(GlobalSectionHeadNode h);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType38`2<GlobalSectionHeadNode, IEnumerable`1<string>> <.cctor>b__cf(GlobalSectionHeadNode h, IEnumerable`1<string> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<KeyValuePair`2<string, string>>> <.cctor>b__d0(<>f__AnonymousType38`2<GlobalSectionHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier3e);
    [CompilerGeneratedAttribute]
private static GlobalSectionNode <.cctor>b__d3(<>f__AnonymousType38`2<GlobalSectionHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier3e, IEnumerable`1<KeyValuePair`2<string, string>> s);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__d4(ProjectHeadNode h);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType38`2<ProjectHeadNode, IEnumerable`1<string>> <.cctor>b__d5(ProjectHeadNode h, IEnumerable`1<string> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<Tuple`2<ProjectSectionNode, GlobalSectionNode>>> <.cctor>b__d6(<>f__AnonymousType38`2<ProjectHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier41);
    [CompilerGeneratedAttribute]
private static Tuple`2<ProjectNode, GlobalSectionNode[]> <.cctor>b__db(<>f__AnonymousType38`2<ProjectHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier41, IEnumerable`1<Tuple`2<ProjectSectionNode, GlobalSectionNode>> s);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__de(GlobalHeadNode h);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType38`2<GlobalHeadNode, IEnumerable`1<string>> <.cctor>b__df(GlobalHeadNode h, IEnumerable`1<string> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<GlobalSectionNode>> <.cctor>b__e0(<>f__AnonymousType38`2<GlobalHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier44);
    [CompilerGeneratedAttribute]
private static GlobalNode <.cctor>b__e3(<>f__AnonymousType38`2<GlobalHeadNode, IEnumerable`1<string>> <>h__TransparentIdentifier44, IEnumerable`1<GlobalSectionNode> s);
    [CompilerGeneratedAttribute]
private static Parser`1<Version> <.cctor>b__e4(IEnumerable`1<string> w0);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType39`2<IEnumerable`1<string>, Version> <.cctor>b__e5(IEnumerable`1<string> w0, Version fv);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__e6(<>f__AnonymousType39`2<IEnumerable`1<string>, Version> <>h__TransparentIdentifier47);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>> <.cctor>b__e7(<>f__AnonymousType39`2<IEnumerable`1<string>, Version> <>h__TransparentIdentifier47, IEnumerable`1<string> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<KeyValuePair`2<string, string>>> <.cctor>b__e8(<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>> <>h__TransparentIdentifier48);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>> <.cctor>b__eb(<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>> <>h__TransparentIdentifier48, IEnumerable`1<KeyValuePair`2<string, string>> gp);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>> <.cctor>b__ec(<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>> <>h__TransparentIdentifier49);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>> <.cctor>b__ef(<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>> <>h__TransparentIdentifier49, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>> pj);
    [CompilerGeneratedAttribute]
private static Parser`1<GlobalNode> <.cctor>b__f0(<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>> <>h__TransparentIdentifier4a);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3d`2<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, GlobalNode> <.cctor>b__f1(<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>> <>h__TransparentIdentifier4a, GlobalNode gl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__f2(<>f__AnonymousType3d`2<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, GlobalNode> <>h__TransparentIdentifier4b);
    [CompilerGeneratedAttribute]
private static SolutionNode <.cctor>b__f3(<>f__AnonymousType3d`2<<>f__AnonymousType3c`2<<>f__AnonymousType3b`2<<>f__AnonymousType3a`2<<>f__AnonymousType39`2<IEnumerable`1<string>, Version>, IEnumerable`1<string>>, IEnumerable`1<KeyValuePair`2<string, string>>>, IEnumerable`1<Tuple`2<ProjectNode, GlobalSectionNode[]>>>, GlobalNode> <>h__TransparentIdentifier4b, IEnumerable`1<string> w2);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__cb(KeyValuePair`2<string, string> p);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <.cctor>b__cc(KeyValuePair`2<string, string> p, IEnumerable`1<string> z);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__d1(KeyValuePair`2<string, string> p);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <.cctor>b__d2(KeyValuePair`2<string, string> p, IEnumerable`1<string> z);
    [CompilerGeneratedAttribute]
private static Tuple`2<ProjectSectionNode, GlobalSectionNode> <.cctor>b__d7(ProjectSectionNode x);
    [CompilerGeneratedAttribute]
private static Tuple`2<ProjectSectionNode, GlobalSectionNode> <.cctor>b__d8(GlobalSectionNode x);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__d9(Tuple`2<ProjectSectionNode, GlobalSectionNode> p);
    [CompilerGeneratedAttribute]
private static Tuple`2<ProjectSectionNode, GlobalSectionNode> <.cctor>b__da(Tuple`2<ProjectSectionNode, GlobalSectionNode> p, IEnumerable`1<string> z);
    [CompilerGeneratedAttribute]
private static ProjectSectionNode <.cctor>b__dc(Tuple`2<ProjectSectionNode, GlobalSectionNode> x);
    [CompilerGeneratedAttribute]
private static GlobalSectionNode <.cctor>b__dd(Tuple`2<ProjectSectionNode, GlobalSectionNode> x);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__e1(GlobalSectionNode p);
    [CompilerGeneratedAttribute]
private static GlobalSectionNode <.cctor>b__e2(GlobalSectionNode p, IEnumerable`1<string> z);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__e9(KeyValuePair`2<string, string> p);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <.cctor>b__ea(KeyValuePair`2<string, string> p, IEnumerable`1<string> z);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__ed(Tuple`2<ProjectNode, GlobalSectionNode[]> p);
    [CompilerGeneratedAttribute]
private static Tuple`2<ProjectNode, GlobalSectionNode[]> <.cctor>b__ee(Tuple`2<ProjectNode, GlobalSectionNode[]> p, IEnumerable`1<string> z);
    [CompilerGeneratedAttribute]
private static ProjectNode <.cctor>b__f4(Tuple`2<ProjectNode, GlobalSectionNode[]> x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<GlobalSectionNode> <.cctor>b__f5(Tuple`2<ProjectNode, GlobalSectionNode[]> x);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.SolutionNode : object {
    [NotNullAttribute]
public Version FileVersion;
    [NotNullAttribute]
public GlobalNode Global;
    [NotNullAttribute]
public ProjectNode[] Projects;
    [NotNullAttribute]
public KeyValuePair`2[] Properties;
    public SolutionNode(Version fileVersion, KeyValuePair`2[] properties, ProjectNode[] projects, GlobalNode global);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackaging : SubplatformComponentForPackagingBase {
    public SubplatformComponentForPackaging(SubplatformName subplatformName, object componentForSerialization);
    public SubplatformComponentForPackaging(IStructuredStorage sstg);
    public SubplatformComponentForPackaging(SubplatformComponentForPackagingBase copyctor);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingBase : object {
    [NotNullAttribute]
public object ComponentForSerialization;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformComponentForPackagingBase(SubplatformName subplatformName, object componentForSerialization);
    public SubplatformComponentForPackagingBase(IStructuredStorage sstg);
    public SubplatformComponentForPackagingBase(SubplatformComponentForPackagingBase copyctor);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingFast : SubplatformComponentForPackagingBase {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformComponentForPackagingFast, SubplatformComponentForPackaging> CS$<>9__CachedAnonymousMethodDelegate1;
    public SubplatformComponentForPackagingFast(SubplatformName subplatformName, object componentForSerialization);
    public SubplatformComponentForPackagingFast(IStructuredStorage sstg);
    [BuildStepAttribute]
public static SubplatformComponentForPackaging[] FastToCommon(SubplatformComponentForPackagingFast[] fasts, ILogger logger);
    [CompilerGeneratedAttribute]
private static SubplatformComponentForPackaging <FastToCommon>b__0(SubplatformComponentForPackagingFast fast);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging : SubplatformFileForPackagingBase {
    public SubplatformFileForPackaging(SubplatformName subname, SimpleFileItem file, PackageFileRole role);
    public SubplatformFileForPackaging(SubplatformFileForPackagingBase copyctor);
}
public class JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingBase : object {
    [NotNullAttribute]
public SimpleFileItem File;
    public PackageFileRole Role;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformFileForPackagingBase(SubplatformFileForPackagingBase copyctor);
    public SubplatformFileForPackagingBase(SubplatformName subname, SimpleFileItem file, PackageFileRole role);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingFast : SubplatformFileForPackagingBase {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackagingFast, SubplatformFileForPackaging> CS$<>9__CachedAnonymousMethodDelegate1;
    public SubplatformFileForPackagingFast(SubplatformName subname, SimpleFileItem file, PackageFileRole role);
    public SubplatformFileForPackagingFast(SubplatformFileForPackagingBase copyctor);
    [BuildStepAttribute]
public static SubplatformFileForPackaging[] FastToCommon(SubplatformFileForPackagingFast[] fasts, ILogger logger);
    [CompilerGeneratedAttribute]
private static SubplatformFileForPackaging <FastToCommon>b__0(SubplatformFileForPackagingFast fast);
}
public class JetBrains.Application.BuildScript.Compile.SubplatformOriginalRevision : object {
    private static string StreamName_Rev;
    private static string StreamName_Sname;
    [NotNullAttribute]
public string RevisionIdentity;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformOriginalRevision(IStructuredStorage sstg);
    public SubplatformOriginalRevision(SubplatformName sname, string rid);
    private static SubplatformOriginalRevision();
    [BuildStepAttribute]
public static IEnumerable`1<SubplatformComponentForPackagingFast> EmbedInPackages(AllAssembliesOnSources allassSrc, ILogger logger);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CanBeNullAttribute]
private static string TryGetRevisionForFolder(FileSystemPath dir, FileSystemPath dirUppermost);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformProjectExemptFromManagedAssemblies : object {
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformProjectExemptFromManagedAssemblies(SubplatformName subplatformName, RelativePath projectInSubplatform);
    public SubplatformProjectExemptFromManagedAssemblies(SubplatformProjectWrapper subproj);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact : object {
    [NotNullAttribute]
public WhitelistMissingAssemblyReferences AssemblyReferences;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformWhitelistMissingAssemblyReferencesArtifact, SubplatformComponentForPackagingFast> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, IEnumerable`1<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>>> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<SubplatformName, <>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>>, RelativePath> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<SubplatformName, <>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>>, IEnumerable`1<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>>> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<ICollection`1<<>f__AnonymousType1`2<PackageIdentity, AssemblyNameInfo>>, IEnumerable`1<<>f__AnonymousType1`2<PackageIdentity, AssemblyNameInfo>>> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate20;
    public SubplatformWhitelistMissingAssemblyReferencesArtifact(SubplatformName name, WhitelistMissingAssemblyReferences refs);
    [BuildStepAttribute]
public static List`1<SubplatformComponentForPackagingFast> EmitIntoPackageComponents(SubplatformWhitelistMissingAssemblyReferencesArtifact[] arts);
    [BuildStepAttribute]
public static List`1<SubplatformWhitelistMissingAssemblyReferencesArtifact> WhitelistAssembliesFromDevelopmentOnlyDependencies(AllAssembliesOnSources allassSrc, RetrievedPackageReferenceArtifact[] rpras, ILogger logger);
    [CompilerGeneratedAttribute]
private static SubplatformComponentForPackagingFast <EmitIntoPackageComponents>b__0(SubplatformWhitelistMissingAssemblyReferencesArtifact art);
    [CompilerGeneratedAttribute]
private static SubplatformName <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__2(SubplatformOnSources sub);
    [CompilerGeneratedAttribute]
private static bool <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__6(RetrievedPackageReferenceArtifact rpra);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>> <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__8(RetrievedPackageReferenceArtifact rpra);
    [CompilerGeneratedAttribute]
private static SubplatformName <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__a(<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact> tuple);
    [CompilerGeneratedAttribute]
private static RelativePath <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__b(IGrouping`2<SubplatformName, <>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>> g);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>> <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__c(IGrouping`2<SubplatformName, <>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact>> g);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__d(<>f__AnonymousType0`2<SubplatformName, RetrievedPackageReferenceArtifact> tuple);
    [CompilerGeneratedAttribute]
private static PackageIdentity <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__e(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType1`2<PackageIdentity, AssemblyNameInfo>> <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__12(ICollection`1<<>f__AnonymousType1`2<PackageIdentity, AssemblyNameInfo>> o);
    [CompilerGeneratedAttribute]
private static bool <WhitelistAssembliesFromDevelopmentOnlyDependencies>b__7(PackageReferenceArtifact pra);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.TimeBombSpan/TimeBombSpanSerializer")]
public class JetBrains.Application.BuildScript.Compile.TimeBombSpan : object {
    public Nullable`1<TimeSpan> TimeSpan;
    public TimeBombSpan(Nullable`1<TimeSpan> timeSpan);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging : SubplatformFileForPackagingBase {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackaging, TransformedSubplatformFileForPackaging> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<ITransformSubplatformFilesForPackaging, double> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<ITransformSubplatformFilesForPackaging, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ITransformSubplatformFilesForPackaging, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformFileForPackaging, TransformedSubplatformFileForPackaging> CS$<>9__CachedAnonymousMethodDelegate9;
    public TransformedSubplatformFileForPackaging(SubplatformName subname, SimpleFileItem file, PackageFileRole role);
    public TransformedSubplatformFileForPackaging(SubplatformFileForPackagingBase copyctor);
    [BuildStepAttribute]
public static TransformedSubplatformFileForPackaging[] ApplyTransform(SubplatformFileForPackaging[] original, ITransformSubplatformFilesForPackaging[] transformers, ILogger logger);
    [CompilerGeneratedAttribute]
private static TransformedSubplatformFileForPackaging <ApplyTransform>b__0(SubplatformFileForPackaging x);
    [CompilerGeneratedAttribute]
private static double <ApplyTransform>b__1(ITransformSubplatformFilesForPackaging tr);
    [CompilerGeneratedAttribute]
private static string <ApplyTransform>b__2(ITransformSubplatformFilesForPackaging tr);
    [CompilerGeneratedAttribute]
private static string <ApplyTransform>b__3(ITransformSubplatformFilesForPackaging tr);
    [CompilerGeneratedAttribute]
private static TransformedSubplatformFileForPackaging <ApplyTransform>b__4(SubplatformFileForPackaging x);
}
public static class JetBrains.Application.BuildScript.Compile.TransformSubplatformFilesForPackaging : object {
    public static AssertTransformationsOrder AssertNoMoreManagedAssemblies(ITransformSubplatformFilesForPackaging owner, JetHashSet`1<SubplatformFileForPackaging> expected);
}
public class JetBrains.Application.BuildScript.Compile.TransportPackagesWaybill : object {
    private ICollection`1<Item> myItems;
    [NotNullAttribute]
public ICollection`1<Item> Items { get; }
    public TransportPackagesWaybill(IStructuredStorage sstg);
    public ICollection`1<Item> get_Items();
    public void Serialize(CsexpArchive ar);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream sin);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__5(CsexpWriter writer);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk : object {
    public bool IsOverwriting;
    public CanAutofixFilesOnDisk(bool isOverwriting);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation/SkipWorkingCopyDirectoryCaseFoldingValidationSerializer")]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation/SkipWorkingCopyDirectoryCaseFoldingValidationConverter")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation : object {
    public bool IsSkipWorkingCopyDirectoryCaseFoldingValidation;
    public SkipWorkingCopyDirectoryCaseFoldingValidation(bool isSkipWorkingCopyDirectoryCaseFoldingValidation);
    public virtual string ToString();
    private static SkipWorkingCopyDirectoryCaseFoldingValidation Deserialize(string value);
    private static string Serialize(SkipWorkingCopyDirectoryCaseFoldingValidation value);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.SourcesValidationResult : object {
    [CanBeNullAttribute]
public string ErrorMessage;
    public SourcesValidationResult(string errorMessage);
}
public static class JetBrains.Application.BuildScript.Compile.Validation.UpdateBuildBootstrapToolVersions : object {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<InjectToolPackageArtifact, PackageName> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<EmbedPackageInSubplatformArtifact, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<EmbedPackageInSubplatformArtifact, PackageName> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<IPackageName, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<IPackageName, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<IPackageName, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<IPackageName, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [BuildStepAttribute]
public static SourcesValidationResult Run(ProductHomeDirArtifact homedir, InjectToolPackageArtifact[] injectToolPackages, EmbedPackageInSubplatformArtifact[] embedPackages, AllAssembliesOnSources assembliesOnSources, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger);
    private static int UpdateFileWithTaskReferences(FileSystemPath file, Func`2<IPackageName, string> searchPattern, Func`2<IPackageName, string> replaceString, IEnumerable`1<IPackageName> packages, ILogger logger, bool isLive);
    private static int OverwriteFileContent(ILogger logger, bool isLive, FileSystemPath file, string content);
    [CompilerGeneratedAttribute]
private static bool <Run>b__0(SubplatformOnSources x);
    [CompilerGeneratedAttribute]
private static PackageName <Run>b__1(InjectToolPackageArtifact x);
    [CompilerGeneratedAttribute]
private static bool <Run>b__2(EmbedPackageInSubplatformArtifact x);
    [CompilerGeneratedAttribute]
private static PackageName <Run>b__3(EmbedPackageInSubplatformArtifact x);
    [CompilerGeneratedAttribute]
private static string <Run>b__4(IPackageName pkg);
    [CompilerGeneratedAttribute]
private static string <Run>b__5(IPackageName pkg);
    [CompilerGeneratedAttribute]
private static string <Run>b__6(IPackageName pkg);
    [CompilerGeneratedAttribute]
private static string <Run>b__7(IPackageName pkg);
}
public static class JetBrains.Application.BuildScript.Compile.Validation.ValidateBuildSystemProjectAssemblyCustomAttributes : object {
    private static string BuildSystemProjectAssemblyCustomAttributesFileName;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [BuildStepAttribute]
public static SourcesValidationResult Run(ProductHomeDirArtifact homedir, InjectToolPackageArtifact[] injectToolPackages, EmbedPackageInSubplatformArtifact[] embedPackages, AllAssembliesOnSources assembliesOnSources, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger);
    [CompilerGeneratedAttribute]
private static bool <Run>b__0(SubplatformOnSources x);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation : object {
    [NotNullAttribute]
public RelativePath SubplatformOrCollection;
    public ValidateCleanCompilation(RelativePath subplatformOrCollection);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding : object {
    public ICollection`1<FileWithProblem> FilesWithEncodingProblems;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, TextAndEncoding> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, FileEncodingVerdict> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<SourceFilesForEncodingCheck, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<SourceFilesForEncodingCheck, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [BuildStepAttribute]
public ValidateFileEncoding(SourcesValidationResult& plug, AllAssembliesOnSources allassSrc, SourceFilesForEncodingCheck[] filters, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger);
    private static void FixFileEncoding(RelativePath relFile, AllAssembliesOnSources allassSrc, ILogger logger);
    private static FileEncodingVerdict IsSuspiciousFileEncoding(FileSystemPath file, ILogger logger);
    private void ReportAndAutofix(ICollection`1<FileWithProblem> problems, AllAssembliesOnSources allassSrc, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private void ValidateCore(AllAssembliesOnSources allassSrc, SourceFilesForEncodingCheck[] filters, ILogger logger);
    [CompilerGeneratedAttribute]
private static TextAndEncoding <FixFileEncoding>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private static FileEncodingVerdict <IsSuspiciousFileEncoding>b__2(Stream stream);
    [CompilerGeneratedAttribute]
private static bool <ValidateCore>b__5(SourceFilesForEncodingCheck f);
    [CompilerGeneratedAttribute]
private static bool <ValidateCore>b__8(SourceFilesForEncodingCheck f);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateLineEngings : object {
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, int>, int> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, int>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, int>, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<char, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, int>, int> CS$<>9__CachedAnonymousMethodDelegatea;
    [BuildStepAttribute]
public ValidateLineEngings(SourcesValidationResult& plug, AllAssembliesOnSources allassSrc, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger);
    private Nullable`1<EolsMustBe> GetConstraint(FileSystemPath file);
    private bool ProcessFile(FileSystemPath file, AllAssembliesOnSources allassSrc, SubplatformOnSources subplatform, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private string RenderLineEnding(string ending);
    private string RenderLineEndingsTimes(IDictionary`2<string, int> mapLineEndingsCount);
    [CompilerGeneratedAttribute]
private static int <ProcessFile>b__0(KeyValuePair`2<string, int> pair);
    [CompilerGeneratedAttribute]
private static bool <ProcessFile>b__1(KeyValuePair`2<string, int> pair);
    [CompilerGeneratedAttribute]
private static bool <ProcessFile>b__2(KeyValuePair`2<string, int> pair);
    [CompilerGeneratedAttribute]
private static string <RenderLineEnding>b__6(char ch);
    [CompilerGeneratedAttribute]
private static int <RenderLineEndingsTimes>b__8(KeyValuePair`2<string, int> pair);
    [CompilerGeneratedAttribute]
private string <RenderLineEndingsTimes>b__9(KeyValuePair`2<string, int> pair);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidatePackageReferences : object {
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, IEnumerable`1<PackageReferenceArtifact>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, RetrievedPackageReferenceArtifact>, <>f__AnonymousType3e`2<string, ILookup`2<JetSemanticVersion, RetrievedPackageReferenceArtifact>>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3e`2<string, ILookup`2<JetSemanticVersion, RetrievedPackageReferenceArtifact>>, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, JetSemanticVersion> CS$<>9__CachedAnonymousMethodDelegate15;
    [BuildStepAttribute]
public ValidatePackageReferences(RetrievedPackageReferenceArtifact[] retrs, Optional`1<SkipSourcesValidation> skipval, ILogger logger, SourcesValidationResult& result);
    public static bool ReportInvalidVersionSpec(PackageReferenceArtifact pr, ILogger logger);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PackageReferenceArtifact> <.ctor>b__0(RetrievedPackageReferenceArtifact retr);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(RetrievedPackageReferenceArtifact rpra);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__4(RetrievedPackageReferenceArtifact retr);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3e`2<string, ILookup`2<JetSemanticVersion, RetrievedPackageReferenceArtifact>> <.ctor>b__5(IGrouping`2<string, RetrievedPackageReferenceArtifact> groupById);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7(<>f__AnonymousType3e`2<string, ILookup`2<JetSemanticVersion, RetrievedPackageReferenceArtifact>> t);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(PackageReferenceArtifact pra);
    [CompilerGeneratedAttribute]
private static JetSemanticVersion <.ctor>b__6(RetrievedPackageReferenceArtifact retr);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateWorkingCopyDirectoryCaseFolding : object {
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, ICollection`1<DirectoryEntryData>> CS$<>9__CachedAnonymousMethodDelegate1;
    [BuildStepAttribute]
public ValidateWorkingCopyDirectoryCaseFolding(IWorkingCopyTreeHelper wchelper, ProductHomeDirArtifact homedir, Optional`1<SkipSourcesValidation> skipval, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipWorkingCopyDirectoryCaseFoldingValidation> skipWcCaseFolding, ILogger logger, SourcesValidationResult& result);
    public static List`1<FileSystemCasingConflict> ValidateCore(ProductHomeDirArtifact homedir, ILogger logger, WorkingCopyTreeNodes wc, Func`2<FileSystemPath, ICollection`1<DirectoryEntryData>> directoryEnumerator);
    private static void OnIndexFoldingError(FileSystemPath fulldir, string childLocalIndex, string childLocalFs, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    [CompilerGeneratedAttribute]
private static ICollection`1<DirectoryEntryData> <.ctor>b__0(FileSystemPath dir);
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.DiskToDiskCasingConflict : FileSystemCasingConflict {
    public string LocalName;
    public string LocalNameInterned;
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.DiskToIndexCasingConflict : FileSystemCasingConflict {
    public string DiskName;
    public string IndexName;
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.FileSystemCasingConflict : object {
    public FileSystemPath Directory;
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.IndexCasingConflict : ValueType {
    public IEnumerable`1<string> ConflictedNames;
    public string IndexPath;
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.IWorkingCopyTreeHelper {
    public WorkingCopyTreeNodes WorkingCopyTreeRoot { get; }
    public abstract virtual WorkingCopyTreeNodes get_WorkingCopyTreeRoot();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.WorkingCopyTreeHelper : object {
    public static PackageIdentity LibGit2Sharp;
    public static PackageIdentity LibGit2SharpNative;
    private Lazy`1<WorkingCopyTreeNodes> myWorkingCopyTreeRoot;
    [NotNullAttribute]
public WorkingCopyTreeNodes WorkingCopyTreeRoot { get; }
    public WorkingCopyTreeHelper(ProductHomeDirArtifact homedir, NugetPackageManagerForBuild nugetter, ILogger logger);
    private static WorkingCopyTreeHelper();
    public sealed virtual WorkingCopyTreeNodes get_WorkingCopyTreeRoot();
    private static FileSystemPath InstallGitLib(NugetPackageManagerForBuild nugetter, ILogger logger);
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.WorkingCopyTreeNodes : object {
    public static char Separator;
    private JetHashSet`1<Parented> myCaseFolding;
    private IDictionary`2<StringSlice, List`1<StringSlice>> myMapPathToChildrenCaseSensitive;
    private static WorkingCopyTreeNodes();
    public void ForEachNonLeafNode(Action`2<StringSlice, IReadOnlyList`1<StringSlice>> callback);
    public StringSlice GetLocalNameCasingInIndex(StringSlice directory, StringSlice localname);
    public void InsertPath(StringSlice fullpath, Action`1<IndexCasingConflict> indexCasingConflictAction);
    private void ForEachNonLeafNode_Children(StringSlice dir, List`1<StringSlice> children, Action`2<StringSlice, IReadOnlyList`1<StringSlice>> callback);
    private void InsertLinkFromParent(StringSlice& fullpath, Action`1<IndexCasingConflict> indexCasingConflictAction);
}
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.CompileLevelEntryPoint : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[BuildEntryPointAttribute]
public class JetBrains.Application.BuildScript.CompileSources : object {
}
public static class JetBrains.Application.BuildScript.Compression : object {
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public static SimpleFileItem ZipCompress(RelativePath archivename, IEnumerable`1<SimpleFileItem> files, ILogger logger, string comment, WhenToCompressEntry whencompress);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.DeployablePackage : BuildStageOutputPackageFileArtifactBase {
    public DeployablePackageFlags Flags;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public DeployablePackage(SubplatformName subname, NugetPackageFileItem package, DeployablePackageFlags flags);
    public DeployablePackage(IStructuredStorage sstg);
    public virtual string ToString();
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Dummy.TestDependentCompile : object {
    [CompilerGeneratedAttribute]
private static Action`1<Lifetime> CS$<>9__CachedAnonymousMethodDelegate7;
    [BuildStepAttribute]
public static TestDependentCompile DepComp(ProductHomeDirArtifact homedir, INestedBuildRunner nester, ILogger logger, NestedInputArtifactsHelper nestart);
    [CompilerGeneratedAttribute]
private static void <DepComp>b__6(Lifetime lifetime);
}
public static class JetBrains.Application.BuildScript.Dummy.TestDependentUnitTests : object {
    [CompilerGeneratedAttribute]
private static Action`1<Lifetime> CS$<>9__CachedAnonymousMethodDelegate7;
    [BuildStepAttribute]
public static EntryStdAfx DepUT(ProductHomeDirArtifact homedir, INestedBuildRunner nester, ILogger logger, Optional`1<SkipLocalCompilationArtifact> skiplocal, NugetConfigFile nuconfig);
    [CompilerGeneratedAttribute]
private static void <DepUT>b__2(Lifetime lifetime);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Dummy.TestPsi : object {
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, BuildTransportPackage> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<BuildTransportPackage, InputPackage> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<BuildTransportPackage, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate7;
    [BuildStepAttribute]
public TestPsi(Lifetime lifetime, ILogger logger, ProductHomeDirArtifact homedir, INestedBuildRunner nester, NugetConfigFile configfile);
    [CompilerGeneratedAttribute]
private static BuildTransportPackage <.ctor>b__2(SimpleFileItem fi);
    [CompilerGeneratedAttribute]
private static InputPackage <.ctor>b__3(BuildTransportPackage pkg);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <.ctor>b__4(BuildTransportPackage tr);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EndUserProductArtifact : object {
    public Nullable`1<DateTime> BestBefore { get; }
    public Nullable`1<DateTime> BirthDate { get; }
    public DateTime BuiltOn { get; }
    public string CompanyNameLegal { get; }
    public ImageSource ProductAboutBoxImage { get; }
    public ImageSource ProductDialogHeaderImage { get; }
    public string ProductDisplayName { get; }
    public string ProductFullName { get; }
    public Icon ProductIcon { get; }
    public ImageSource ProductSplashScreenImage { get; }
    public Uri ProductUrl { get; }
    public string CompanyNameHuman { get; }
    public string ProductName { get; }
    public Version ProductVersion { get; }
    public EndUserProductArtifact(IStructuredStorage storage);
    public Nullable`1<DateTime> get_BestBefore();
    public Nullable`1<DateTime> get_BirthDate();
    public DateTime get_BuiltOn();
    public sealed virtual string get_CompanyNameLegal();
    public sealed virtual ImageSource get_ProductAboutBoxImage();
    public sealed virtual ImageSource get_ProductDialogHeaderImage();
    public sealed virtual string get_ProductDisplayName();
    public sealed virtual string get_ProductFullName();
    public sealed virtual Icon get_ProductIcon();
    public sealed virtual ImageSource get_ProductSplashScreenImage();
    public sealed virtual Uri get_ProductUrl();
    public sealed virtual string get_CompanyNameHuman();
    public sealed virtual string get_ProductName();
    public sealed virtual Version get_ProductVersion();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalEmitBuildSystem : object {
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalExtractForIntegrationTests : object {
    [BuildStepAttribute]
public EntryLocalExtractForIntegrationTests(ILocalTwoStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalExtractPackagesToBinDir : object {
    [BuildStepAttribute]
public EntryLocalExtractPackagesToBinDir(ILocalTwoStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalInstall : object {
    [BuildStepAttribute]
public EntryLocalInstall(ILocalTwoStageBuild build);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalMakePackedInstaller : BuildStageOutputFileArtifactBase {
    public EntryLocalMakePackedInstaller(SimpleFileItem file);
    public EntryLocalMakePackedInstaller(IStructuredStorage sstg);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalPrepareWorkingCopy : object {
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage : BuildStageOutputFileArtifactBase {
    [CompilerGeneratedAttribute]
private static Func`2<OutputFileArtifact, EntryLocalRunBinaryStage> CS$<>9__CachedAnonymousMethodDelegate1;
    public EntryLocalRunBinaryStage(SimpleFileItem file);
    public EntryLocalRunBinaryStage(IStructuredStorage sstg);
    [BuildStepAttribute]
public static EntryLocalRunBinaryStage[] RunBinaryStage(BinaryStageObjectiveArtifact objective, ILocalTwoStageBuild localTwoStageBuild, ICollection`1& outputs);
    [CompilerGeneratedAttribute]
private static EntryLocalRunBinaryStage <RunBinaryStage>b__0(OutputFileArtifact output);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBoostTests : object {
    [BuildStepAttribute]
public EntryLocalRunBoostTests(ILocalTwoStageBuild build);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunUnitTests : object {
    [BuildStepAttribute]
public EntryLocalRunUnitTests(ILocalTwoStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalSavePackagesToBinDir : object {
    [BuildStepAttribute]
public EntryLocalSavePackagesToBinDir(ILocalTwoStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryOpenInIde : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryStdAfx : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryStdAfxSn : object {
    [BuildStepAttribute]
public EntryStdAfxSn(ILogger logger, OutputFileArtifact& output);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityCompilePlatformCore : BuildStageOutputFileArtifactBase {
    [CompilerGeneratedAttribute]
private static Func`2<OutputFileArtifact, EntryTeamCityCompilePlatformCore> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<BuildTransportPackage, IEnumerable`1<IAssemblyItem>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IAssemblyItem, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, EntryTeamCityCompilePlatformCore> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<RelativePath, RelativePath> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<RelativePath, RelativePath> CS$<>9__CachedAnonymousMethodDelegate10;
    public EntryTeamCityCompilePlatformCore(IStructuredStorage sstg);
    public EntryTeamCityCompilePlatformCore(SimpleFileItem file);
    [BuildStepAttribute]
public static ICollection`1<EntryTeamCityCompilePlatformCore> CompilePlatformCore(Lifetime lifetime, ProductHomeDirArtifact homedir, INestedBuildRunner nester, NestedInputArtifactsHelper nestart, NugetConfigFile nuconfig, NugetPackageManagerForBuild packman, ILogger Logger, BuildTransportPackage[]& buildTransportPackages, BuildEngineOrScriptBinaries& buildEngineAndScriptBinaries);
    [CompilerGeneratedAttribute]
private static EntryTeamCityCompilePlatformCore <CompilePlatformCore>b__1(OutputFileArtifact of);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IAssemblyItem> <CompilePlatformCore>b__2(BuildTransportPackage pkg);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <CompilePlatformCore>b__3(IAssemblyItem ai);
    [CompilerGeneratedAttribute]
private static EntryTeamCityCompilePlatformCore <CompilePlatformCore>b__6(SimpleFileItem fi);
    [CompilerGeneratedAttribute]
private static RelativePath <CompilePlatformCore>b__8(RelativePath path);
    [CompilerGeneratedAttribute]
private static RelativePath <CompilePlatformCore>b__7(RelativePath rel);
}
public static class JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers : object {
    public static string ArtifactsInputsFolderName;
    public static RelativePath BootstrapFolderName;
    public static string BuildEngineAndCoreScriptFileName;
    private static string BuildIdConfigPropName;
    public static string BuildRunnerExecutableFileName;
    public static string EntryScriptsFolderName;
    private static string TransportPackagesWaybillArtifactPropertyNamePrefix;
    private static Parser`1<string> ParseBuildIdInWaybillProp;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<ParentBuildInfo>, Nullable`1<ParentBuildInfo>> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, string> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<ParentBuildInfo, string> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1[], IEnumerable`1<NugetPackageFileItem>> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1[], IEnumerable`1<NugetPackageFileItem>> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1<NugetPackageFileItem>, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<Task`1<NugetPackageFileItem>, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, InputPackage> CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate8b;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<string>, <>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>> CS$<>9__CachedAnonymousMethodDelegate8c;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate8d;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>, <>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate8e;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate8f;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, char, <>f__AnonymousType41`2<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate90;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType41`2<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, char>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate91;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType41`2<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, char>, string, string> CS$<>9__CachedAnonymousMethodDelegate92;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate93;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, char, string> CS$<>9__CachedAnonymousMethodDelegate94;
    private static EntryTeamCityHelpers();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers/<GetPackagesFromParentBuildsAsync>d__2b")]
[DebuggerStepThroughAttribute]
public static Task`1<DeployablePackagesFromParentBuilds> GetPackagesFromParentBuildsAsync(NugetPackageManagerForBuild packman, ILogger logger);
    [BuildStepAttribute]
public static DeployablePackagesFromParentBuilds GetPackagesFromParentBuildsSync(NugetPackageManagerForBuild packman, ILogger logger);
    public static void IssuePropertyForWaybillFile(ILogger logger);
    public static void MakeUpRootDir(FileSystemPath pathRootDir, ILogger Logger, NugetConfigFile nugetconfig, RootDirRole role);
    public static void PublishAndPropagateBuildNumber(BuildRunnerRequest request, NestedInputArtifactsHelper nestart, ILogger logger);
    public static OutputFileArtifact[] RunBinaryStageCore(Lifetime lifetime, BinaryStageObjectiveArtifact objective, INestedBuildRunner nester, NestedInputArtifactsHelper nestart, DeployablePackagesFromParentBuilds transports, NugetPackageManagerForBuild packman, ILogger Logger, Object[] moreinputs);
    public static void SelfAttachPostMortemCdb(NugetPackageManagerForBuild packman, Optional`1<IsEvadeSelfDebug> maybeIsEvade, ILogger logger);
    public static void UnmakeRootDir(FileSystemPath productHomeDir, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers/<GetArtifactAsync>d__54")]
[DebuggerStepThroughAttribute]
private static Task`1<SimpleFileItem> GetArtifactAsync(string filename, string buildid, TeamCityProperties tcprops, ILogger logger);
    [DebuggerStepThroughAttribute]
[ItemNotNullAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers/<GetArtifactAsync_SingleAttempt>d__5b")]
private static Task`1<SimpleFileItem> GetArtifactAsync_SingleAttempt(string filename, string buildid, TeamCityProperties tcprops, ILogger logger);
    [NotNullAttribute]
private static string GetRunningBuildTeamCityId(TeamCityProperties tcprops);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers/<MakeXmlQueryAsync>d__62")]
private static Task`1<XmlDocument> MakeXmlQueryAsync(string query, TeamCityProperties tcprops, ILogger logger);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers/<MakeXmlQueryAsync_SingleAttempt>d__69")]
[ItemNotNullAttribute]
private static Task`1<XmlDocument> MakeXmlQueryAsync_SingleAttempt(string query, TeamCityProperties tcprops, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers/<TryGetArtifactPackageAsync>d__71")]
[DebuggerStepThroughAttribute]
private static Task`1<NugetPackageFileItem> TryGetArtifactPackageAsync(PackageIdentity pkgid, string buildid, TeamCityProperties tcprops, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityHelpers/<TryGetParentBuildInfoAsync>d__77")]
[DebuggerStepThroughAttribute]
private static Task`1<Nullable`1<ParentBuildInfo>> TryGetParentBuildInfoAsync(WaybillProp propWaybill, TeamCityProperties tcprops, ILogger logger);
    [CompilerGeneratedAttribute]
private static Nullable`1<ParentBuildInfo> <GetPackagesFromParentBuildsAsync>b__3(Nullable`1<ParentBuildInfo> x);
    [CompilerGeneratedAttribute]
private static string <GetPackagesFromParentBuildsAsync>b__4(XmlNode xmlNode);
    [CompilerGeneratedAttribute]
private static string <GetPackagesFromParentBuildsAsync>b__7(ParentBuildInfo p);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<NugetPackageFileItem> <GetPackagesFromParentBuildsAsync>b__10(Task`1[] tts);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<NugetPackageFileItem> <GetPackagesFromParentBuildsAsync>b__14(Task`1[] tts);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <GetPackagesFromParentBuildsAsync>b__11(Task`1<NugetPackageFileItem> t);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <GetPackagesFromParentBuildsAsync>b__15(Task`1<NugetPackageFileItem> t);
    [CompilerGeneratedAttribute]
private static InputPackage <RunBinaryStageCore>b__44(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static string <SelfAttachPostMortemCdb>b__49(string cmd);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<string>> <.cctor>b__81(IEnumerable`1<char> dep);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>> <.cctor>b__84(IEnumerable`1<char> dep, IEnumerable`1<string> name);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__85(<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>> <>h__TransparentIdentifier7c);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>> <.cctor>b__86(<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>> <>h__TransparentIdentifier7c, IEnumerable`1<char> np);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__87(<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>> <>h__TransparentIdentifier7d);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType41`2<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, char> <.cctor>b__88(<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>> <>h__TransparentIdentifier7d, char d2);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__89(<>f__AnonymousType41`2<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier7e);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__8a(<>f__AnonymousType41`2<<>f__AnonymousType40`2<<>f__AnonymousType3f`2<IEnumerable`1<char>, IEnumerable`1<string>>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier7e, string buildidInProp);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__82(IEnumerable`1<char> stuff);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__83(IEnumerable`1<char> stuff, char dn);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityRunBinaryStage : BuildStageOutputFileArtifactBase {
    [CompilerGeneratedAttribute]
private static Func`2<OutputFileArtifact, EntryTeamCityRunBinaryStage> CS$<>9__CachedAnonymousMethodDelegate1;
    public EntryTeamCityRunBinaryStage(SimpleFileItem file);
    public EntryTeamCityRunBinaryStage(IStructuredStorage sstg);
    [BuildStepAttribute]
public static EntryTeamCityRunBinaryStage[] RunBinaryStage(Lifetime lifetime, BinaryStageObjectiveArtifact objective, INestedBuildRunner nester, NestedInputArtifactsHelper nestart, DeployablePackagesFromParentBuilds transports, NugetPackageManagerForBuild packman, ILogger Logger, OutputFileArtifact[]& outputs);
    [CompilerGeneratedAttribute]
private static EntryTeamCityRunBinaryStage <RunBinaryStage>b__0(OutputFileArtifact o);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityRunCompile : BuildStageOutputFileArtifactBase {
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, InputPackage> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<OutputFileArtifact, EntryTeamCityRunCompile> CS$<>9__CachedAnonymousMethodDelegate3;
    public EntryTeamCityRunCompile(SimpleFileItem file);
    public EntryTeamCityRunCompile(IStructuredStorage sstg);
    [BuildStepAttribute]
public static EntryTeamCityRunCompile[] RunCompile(Lifetime lifetime, ProductHomeDirArtifact homedir, AllAssembliesFilter aafilter, INestedBuildRunner nester, NestedInputArtifactsHelper nestart, DeployablePackagesFromParentBuilds transport, NugetConfigFile nugetconfig, NugetPackageManagerForBuild packman, ILogger Logger, OutputFileArtifact[]& outputs, BuildTransportPackage[]& buildTransportPackages);
    [CompilerGeneratedAttribute]
private static InputPackage <RunCompile>b__0(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static EntryTeamCityRunCompile <RunCompile>b__1(OutputFileArtifact o);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryTeamCityRunTestData : BuildStageOutputFileArtifactBase {
    [CompilerGeneratedAttribute]
private static Func`2<OutputFileArtifact, EntryTeamCityRunTestData> CS$<>9__CachedAnonymousMethodDelegate1;
    public EntryTeamCityRunTestData(SimpleFileItem file);
    public EntryTeamCityRunTestData(IStructuredStorage sstg);
    [BuildStepAttribute]
public static EntryTeamCityRunTestData[] RunTests(Lifetime lifetime, BinaryStageObjectiveArtifact objective, INestedBuildRunner nester, NestedInputArtifactsHelper nestart, DeployablePackagesFromParentBuilds transports, NugetPackageManagerForBuild packman, ILogger Logger, OutputFileArtifact[]& outputs);
    [CompilerGeneratedAttribute]
private static EntryTeamCityRunTestData <RunTests>b__0(OutputFileArtifact o);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.EntryPoints.IsEvadeSelfDebug/IsEvadeSelfDebugSerializer")]
public class JetBrains.Application.BuildScript.EntryPoints.IsEvadeSelfDebug : object {
    public bool Value;
    public IsEvadeSelfDebug(bool value);
}
public static class JetBrains.Application.BuildScript.GlobalDefines : object {
    public static int UnifiedVersionMajor;
    public static int UnifiedVersionMinor;
    public static int UnifiedVersionBuild;
    public static string UnifiedVersion;
    public static string WaveMarketingNumber;
    public static string VersionSuffix;
    public static string SpaceVersionSuffix;
    public static string WaveMarketingName;
    public static string UnifiedMarketingVersionString;
    public static string ReSharperPlatformPresentableName;
    public static Int32[] AllSupportedVsHosts;
    public static string WaveMarketingNameCompressed;
    public static bool IsEap;
    private static GlobalDefines();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Helpers.BuildRunnerRequestEx : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private static Func`2<IHaveNugetPackageFileItem, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IHaveNugetPackageFileItem, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, InputPackage> CS$<>9__CachedAnonymousMethodDelegate10;
    private static BuildRunnerRequestEx();
    [ExtensionAttribute]
public static bool HasInput(BuildRunnerRequest thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static BuildRunnerRequest WithBuildScriptBinaries(BuildRunnerRequest thіs, ICollection`1<IHaveNugetPackageFileItem> binaries);
    [ExtensionAttribute]
[NotNullAttribute]
public static BuildRunnerRequest WithCompiledBinaries(BuildRunnerRequest thіs, ICollection`1<InputPackage> binaries);
    [ExtensionAttribute]
[NotNullAttribute]
public static BuildRunnerRequest WithCompiledBinaries(BuildRunnerRequest thіs, ICollection`1<NugetPackageFileItem> binaries, CustomEngineInBinaries customengine);
    [ExtensionAttribute]
[NotNullAttribute]
public static BuildRunnerRequest WithInputArtifactsForNestedBuild(BuildRunnerRequest thіs, NestedInputArtifactsHelper nestarts);
    [NotNullAttribute]
[ExtensionAttribute]
public static BuildRunnerRequest WithoutInput(BuildRunnerRequest thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static BuildRunnerRequest WithSourcesFromDisk(BuildRunnerRequest thіs, ProductHomeDirArtifact homedir, AllAssembliesOnEverything allass);
    [ExtensionAttribute]
[NotNullAttribute]
public static BuildRunnerRequest WithTransportPackagesForScriptAndEngine(BuildRunnerRequest thіs, PreviousBuildResults prevresults);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <WithBuildScriptBinaries>b__0(IHaveNugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static string <WithBuildScriptBinaries>b__1(IHaveNugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <WithCompiledBinaries>b__4(InputPackage pkg);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <WithCompiledBinaries>b__5(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <WithCompiledBinaries>b__8(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static string <WithCompiledBinaries>b__9(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static InputPackage <WithTransportPackagesForScriptAndEngine>b__f(NugetPackageFileItem pkg);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment : object {
    public static ILogger Logger;
    public static string PropertyNamePrefix;
    private static GetArtifactStringsFromEnvironment();
    private static KeyValuePair`2<string, string> TryExtractArtifact(string key, string value);
    private sealed virtual override IDictionary`2<string, string> JetBrains.Application.BuildScript.Helpers.IGetArtifactStringsFromEnvironment.GetArtifactStrings();
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.Helpers.IGetArtifactStringsFromEnvironment {
    [NotNullAttribute]
public abstract virtual IDictionary`2<string, string> GetArtifactStrings();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Helpers.NestedInputArtifactsHelper : object {
    private ILogger Logger;
    private Optional`1<ArtifactStringsForNestedStage> myArtifactStringsForNestedStage;
    private IGetArtifactStringsFromEnvironment myArtifactStringsFromEnvironment;
    public NestedInputArtifactsHelper(IGetArtifactStringsFromEnvironment artifactStringsFromEnvironment, Optional`1<ArtifactStringsForNestedStage> artifactStringsForNestedStage, ILogger logger);
    public void ApplyTo(BuildRunnerRequest request);
    [CanBeNullAttribute]
public TValue TryPeekNestedArtifactValue(OnError onerror);
    private static void ApplyArtifactStringsForNestedStage(BuildRunnerRequest request, Optional`1<ArtifactStringsForNestedStage> artstrings, ILogger Logger);
    private static void ApplyArtifactStringsFromEnvironment(BuildRunnerRequest request, IGetArtifactStringsFromEnvironment getenv, ILogger Logger);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Helpers.ToolServerInfo/ToolServerInfoSerializer")]
public class JetBrains.Application.BuildScript.Helpers.ToolServerInfo : object {
    [NotNullAttribute]
public string Password;
    [NotNullAttribute]
public Uri Uri;
    [NotNullAttribute]
public string Username;
    public ToolServerInfo(string username, string password, Uri uri);
    public ToolServerInfo(string serialized);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.HostEnvironmentZoneArtifact : object {
    [NotNullAttribute]
public AssemblyQualifiedTypeName EnvironmentZoneTypeName;
    public HostEnvironmentZoneArtifact(AssemblyQualifiedTypeName environmentZoneTypeName);
    public HostEnvironmentZoneArtifact(IStructuredStorage sstg);
    [NotNullAttribute]
public static HostEnvironmentZoneArtifact Create();
    [NotNullAttribute]
public static HostEnvironmentZoneArtifact Create(ZonePart zone);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
public enum JetBrains.Application.BuildScript.HostFolderLifetime : Enum {
    public int value__;
    public static HostFolderLifetime TempFolder;
    public static HostFolderLifetime LocalAppdataCaches;
    public static HostFolderLifetime LocalAppdata;
    public static HostFolderLifetime RoamingAppdata;
}
public interface JetBrains.Application.BuildScript.IHaveBuildTransportPackages {
    [NotNullAttribute]
public ICollection`1<BuildTransportPackage> BuildTransportPackages { get; }
    public abstract virtual ICollection`1<BuildTransportPackage> get_BuildTransportPackages();
}
public interface JetBrains.Application.BuildScript.ILocalBuildOptimizationArtifact {
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.ILocalTwoStageBuild {
    [NotNullAttribute]
public abstract virtual ICollection`1<TObjective> RunTwoStage();
    [NotNullAttribute]
public abstract virtual ICollection`1<OutputFileArtifact> RunTwoStage(AssemblyQualifiedTypeName binaryStageObjective);
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.IncrementalBuild/IncrementalBuildConverter")]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.IncrementalBuild/IncrementalBuildSerializer")]
public class JetBrains.Application.BuildScript.IncrementalBuild : object {
    public bool IsIncrementalBuildEnabled;
    public IncrementalBuild(bool isIncrementalBuildEnabled);
    public virtual string ToString();
    private static IncrementalBuild Deserialize(string value);
    private static string Serialize(IncrementalBuild value);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.InputPackage : object {
    [NotNullAttribute]
public NugetPackageFileItem Package;
    private NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.Package { get; }
    public InputPackage(NugetPackageFileItem package);
    public virtual string ToString();
    private sealed virtual override NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.get_Package();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.InputsForBinaryReferencesArtifact : object {
    [NotNullAttribute]
public ICollection`1<NugetPackageFileItem> TransportAsInputs;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate4;
    public InputsForBinaryReferencesArtifact(ICollection`1<NugetPackageFileItem> transportAsInputs);
    [BuildStepAttribute]
public static InputsForBinaryReferencesArtifact PrepareInputsForBinaryReferencesFrom(ShadowPackageDirArtifact shadowPackageDir, ProductBinariesDirArtifact binariesDir, ProductHomeDirArtifact productHomeDirArtifact, AllAssembliesFilterByProfile prfilter, ILogger logger);
    private static Dictionary`2<string, string> CalcPkgIdToSubplatformsIdentityMapping(ProductHomeDirArtifact productHomeDirArtifact);
    private static ICollection`1<NugetPackageFileItem> GetTransportFromBinDir(FileSystemPath binDir);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <GetTransportFromBinDir>b__3(SimpleFileItem fi);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.ChocolateyPackageArtifact : BuildStageOutputFileArtifactBase {
    public ChocolateyPackageArtifact(SimpleFileItem file);
    public ChocolateyPackageArtifact(IStructuredStorage sstg);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.ContentPackExecutableArtifact : object {
    [NotNullAttribute]
public StuffedLauncherArtifact Launcher;
    public ContentPackExecutableArtifact(StuffedLauncherArtifact launcher);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme : object {
    private IsModeChecked myIsChecked;
    private IsModeUnchecked myIsUnchecked;
    private ILogger myLogger;
    private string myOriginTag;
    [BuildStepAttribute]
public DeployedFilesNamingScheme(BuildVersionSuffix versuffix, IsModeChecked isChecked, IsModeUnchecked isUnchecked, ILogger logger);
    public virtual string ToString();
    [NotNullAttribute]
[PureAttribute]
public Construction Name(string name);
    [NotNullAttribute]
[PureAttribute]
public Construction CompanyName();
    [NotNullAttribute]
public static string VersionRemoveWhitespace(string version);
}
public static class JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles : object {
    public static string DeploymentPackagingIdentityFileName;
    private static DeploymentPackagingIdentityFiles();
    [NotNullAttribute]
public static SimpleFileItem RenderIdentityFile(BuildVersionSuffix buildversuffix);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDir : object {
    [NotNullAttribute]
public SimpleFileItem WrittenPathsList;
    public ExtractPackagesToBinDir(SimpleFileItem writtenPathsList);
}
public static class JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Action`1<ExtractedFileConflict> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Action`1<ExtractedFileConflict> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReferenceArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    [BuildStepAttribute]
public static ExtractPackagesToBinDir DoExtractPackages(ProductBinariesDirArtifact bindir, InputPackage[] ipkgs, AllAssembliesOnEverything assembliesOnEverything, ILogger logger);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy PreExtractPackagesOnPrepareWorkingCopy(ProductBinariesDirArtifact bindir, RetrievedPackageReferenceArtifact[] retrsRaw, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <DoExtractPackages>b__0(Subplatform x);
    [CompilerGeneratedAttribute]
private static void <DoExtractPackages>b__2(ExtractedFileConflict conflict);
    [CompilerGeneratedAttribute]
private static bool <PreExtractPackagesOnPrepareWorkingCopy>b__c(RetrievedPackageReferenceArtifact retr);
    [CompilerGeneratedAttribute]
private static PackageIdentity <PreExtractPackagesOnPrepareWorkingCopy>b__e(RetrievedPackageReferenceArtifact retr);
    [CompilerGeneratedAttribute]
private static PackageIdentity <PreExtractPackagesOnPrepareWorkingCopy>b__f(RetrievedPackageReferenceArtifact retr);
    [CompilerGeneratedAttribute]
private static void <PreExtractPackagesOnPrepareWorkingCopy>b__11(ExtractedFileConflict conflict);
    [CompilerGeneratedAttribute]
private static bool <PreExtractPackagesOnPrepareWorkingCopy>b__d(PackageReferenceArtifact pra);
}
public class JetBrains.Application.BuildScript.Install.FileAssociationEntry : object {
    public string Extension;
    public string Description;
    public int IconIndex;
    public FileAssociationEntry(string extension, string description, int iconIndex);
    public void Serialize(CsexpArchive ar);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.HttpGalleryPackagesJson : BuildStageOutputFileArtifactBase {
    public HttpGalleryPackagesJson(IStructuredStorage sstg);
    public HttpGalleryPackagesJson(SimpleFileItem jsonFile);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(HttpGalleryPackagesJson installerExePackedWithEmbedded);
}
public interface JetBrains.Application.BuildScript.Install.IContentWriter {
    public abstract virtual void WriteFile(Stream content, string partName);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExeBootstrapper : BuildStageOutputFileArtifactBase {
    [CompilerGeneratedAttribute]
private static Func`2<InstallerExeBootstrapper, InstallersPortablesZipsDeployableFile> CS$<>9__CachedAnonymousMethodDelegate1;
    public InstallerExeBootstrapper(SimpleFileItem file);
    public InstallerExeBootstrapper(IStructuredStorage sstg);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(InstallerExeBootstrapper[] bootstrappers);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static InstallersPortablesZipsDeployableFile <ToDeployable>b__0(InstallerExeBootstrapper x);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePacked : BuildStageOutputFileArtifactBase {
    public LauncherConfig Configuration;
    [CompilerGeneratedAttribute]
private static Func`2<InstallerExePacked, InstallersPortablesZipsDeployableFile> CS$<>9__CachedAnonymousMethodDelegate1;
    public InstallerExePacked(IStructuredStorage sstg);
    public InstallerExePacked(StuffedLauncherArtifact launcher);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(InstallerExePacked[] installerExePacked);
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private static InstallersPortablesZipsDeployableFile <ToDeployable>b__0(InstallerExePacked x);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackages : BuildStageOutputFileArtifactBase {
    public LauncherConfig Configuration;
    public InstallerExePackedWithEmbeddedPackages(IStructuredStorage sstg);
    public InstallerExePackedWithEmbeddedPackages(StuffedLauncherArtifact launcher);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(InstallerExePackedWithEmbeddedPackages installerExePackedWithEmbedded);
    public virtual string ToString();
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesDescriptor : object {
    [DataMemberAttribute]
public int Wave;
    [DataMemberAttribute]
public string InstallerExeFileName;
    [DataMemberAttribute]
public DateTime SubscriptionCheckDate;
    [DataMemberAttribute]
public string PrereleaseSuffix;
    [DataMemberAttribute]
public string PresentableVersion;
    [DataMemberAttribute]
public string TechnicalVersion;
    [DataMemberAttribute]
public string ShellPackageVersion;
    [DataMemberAttribute]
public string InstallerExeSha256;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesJSon : BuildStageOutputFileArtifactBase {
    public InstallerExePackedWithEmbeddedPackagesJSon(IStructuredStorage sstg);
    public InstallerExePackedWithEmbeddedPackagesJSon(SimpleFileItem jsonFile);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(InstallerExePackedWithEmbeddedPackagesJSon installerExePackedWithEmbedded);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallersPortablesZipsDeployableFile : BuildStageOutputFileArtifactBase {
    public InstallersPortablesZipsDeployableFile(IStructuredStorage sstg);
    public InstallersPortablesZipsDeployableFile(SimpleFileItem file);
}
public enum JetBrains.Application.BuildScript.Install.IsolationOptions : Enum {
    public int value__;
    public static IsolationOptions NotIsolated;
    public static IsolationOptions IsolatedToProductBinariesDir;
    public static IsolationOptions PerUserInstall;
}
public class JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase : LauncherArtifactBase {
    protected CleanLauncherArtifactBase(LauncherConfig config, SimpleFileItem executable, SimpleFileItem programDatabase);
    protected CleanLauncherArtifactBase(IStructuredStorage storage);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherCompileTimeArtifact : CleanLauncherArtifactBase {
    public CleanLauncherCompileTimeArtifact(LauncherConfig config, SimpleFileItem executable, SimpleFileItem programDatabase);
    public CleanLauncherCompileTimeArtifact(IStructuredStorage storage);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks : object {
    private static string LauncherFilenamePrefix;
    public static ProcessorArchitecture[] SupportedPlatforms;
    public static LauncherSubsystem[] SupportedSubsystems;
    public static LauncherConfig[] SupportedConfigurations;
    private static IDictionary`2<string, LauncherConfig> ourMapExpectedFileSuffices;
    private static SemanticVersion ourToolsetVersion;
    private static ToolsetIdentity ourManagedToolset;
    private static ToolsetIdentity ourNativeToolset;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnPackageEx, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static CtorDelegate`1<CleanLauncherCompileTimeArtifact> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, bool> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static CtorDelegate`1<CleanLauncherCompileTimeArtifact> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessorArchitecture, IEnumerable`1<LauncherSubsystem>> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`3<ProcessorArchitecture, LauncherSubsystem, LauncherConfig> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`1<Dictionary`2<string, LauncherConfig>> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<LauncherConfig, string> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<LauncherConfig, LauncherConfig> CS$<>9__CachedAnonymousMethodDelegate35;
    private static CleanLauncherTasks();
    public static CleanLauncherCompileTimeArtifact[] CompileLaunchers(Lifetime lifetime, ProductHomeDirArtifact productHomeDirArtifact, Optional`1<IAuthenticodeSigningService> maybesigner, IInvokeMsbuild invokemsbuild, ILogger logger);
    [BuildStepAttribute]
public static CleanLauncherCompileTimeArtifact[] ProduceCleanLauncherCompileTimeArtifacts(Lifetime lifetime, AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> maybehomedir, Optional`1<ProductBinariesDirArtifact> maybebindir, SubplatformsInAllInputPackages inputs, Optional`1<SkipLocalCompilationArtifact> skiplocal, Optional`1<IAuthenticodeSigningService> maybesigner, IInvokeMsbuild invokemsbuild, ILogger logger, IList`1& package);
    private static CleanLauncherCompileTimeArtifact[] CheckAlreadyCompiledLaunchers(Optional`1<ProductBinariesDirArtifact> maybebindir, Optional`1<SkipLocalCompilationArtifact> skiplocal, ILogger logger);
    private static void ExpandLauncherFilesForPackaging(CleanLauncherCompileTimeArtifact[] launchers, IList`1& package);
    internal static TLauncherArtifact[] ExtractFromCompiledPackage(SubplatformOnPackageEx subCore, CtorDelegate`1<TLauncherArtifact> ctor, ILogger logger);
    private static bool IsFullSet(TLauncherArtifact[] launchers, OnError onerror);
    [NotNullAttribute]
private static string MakeLauncherFileNameWithoutExtension(ProcessorArchitecture architecture, LauncherSubsystem sub);
    private static TLauncherArtifact[] TossLauncherFiles(ICollection`1<SimpleFileItem> fis, CtorDelegate`1<TLauncherArtifact> ctor, ILogger logger);
    [CompilerGeneratedAttribute]
private static bool <ProduceCleanLauncherCompileTimeArtifacts>b__1e(SubplatformOnPackageEx sub);
    [CompilerGeneratedAttribute]
private static CleanLauncherCompileTimeArtifact <ProduceCleanLauncherCompileTimeArtifacts>b__1f(LauncherConfig cfg, SimpleFileItem exe, SimpleFileItem pdb);
    [CompilerGeneratedAttribute]
private static bool <ProduceCleanLauncherCompileTimeArtifacts>b__20(Subplatform sub);
    [CompilerGeneratedAttribute]
private static CleanLauncherCompileTimeArtifact <CheckAlreadyCompiledLaunchers>b__24(LauncherConfig cfg, SimpleFileItem exe, SimpleFileItem pdb);
    [CompilerGeneratedAttribute]
private static bool <ExtractFromCompiledPackage>b__26(NugetPartPaths path);
    [CompilerGeneratedAttribute]
private static bool <TossLauncherFiles>b__27(SimpleFileItem file);
    [CompilerGeneratedAttribute]
private static bool <TossLauncherFiles>b__28(SimpleFileItem file);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<LauncherSubsystem> <.cctor>b__2c(ProcessorArchitecture pl);
    [CompilerGeneratedAttribute]
private static LauncherConfig <.cctor>b__2d(ProcessorArchitecture pl, LauncherSubsystem sub);
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, LauncherConfig> <.cctor>b__2e();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__2f(LauncherConfig cfg);
    [CompilerGeneratedAttribute]
private static LauncherConfig <.cctor>b__30(LauncherConfig cfg);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.CompileTimeLauncherHosts : object {
    [CompilerGeneratedAttribute]
private static Func`2<StuffedLauncherArtifact, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [BuildStepAttribute]
public static void EmbedCompileTimeLauncherHosts(StandaloneLauncherHostInPackageArtifact[] hosts, ICollection`1<CleanLauncherCompileTimeArtifact> cleanlaunchers, IAuthenticodeSigningService signer, ILogger logger, IList`1& files, IList`1& components);
    [CompilerGeneratedAttribute]
private static string <EmbedCompileTimeLauncherHosts>b__0(StuffedLauncherArtifact la);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.EntryLocalSingleExeStandaloneLauncherStuffed : object {
    [CompilerGeneratedAttribute]
private static Func`2<SingleExeStandaloneLauncherStuffed, OutputFileArtifact> CS$<>9__CachedAnonymousMethodDelegate1;
    [BuildStepAttribute]
public EntryLocalSingleExeStandaloneLauncherStuffed(ILocalTwoStageBuild build, OutputFileArtifact[]& outfile);
    [CompilerGeneratedAttribute]
private static OutputFileArtifact <.ctor>b__0(SingleExeStandaloneLauncherStuffed x);
}
public class JetBrains.Application.BuildScript.Install.Launcher.GuiLauncherNamingScheme : object {
    [NotNullAttribute]
public static ILauncherNamingScheme Instance;
    private static GuiLauncherNamingScheme();
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public interface JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme {
    [NotNullAttribute]
public abstract virtual string GetExeFileSuffix(LauncherConfig config);
}
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherArtifactBase : object {
    public LauncherConfig Configuration;
    [NotNullAttribute]
public SimpleFileItem Executable;
    [CanBeNullAttribute]
public SimpleFileItem ProgramDatabase;
    protected LauncherArtifactBase(LauncherConfig configuration, SimpleFileItem executable, SimpleFileItem programDatabase);
    protected LauncherArtifactBase(IStructuredStorage storage);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig/LauncherConfigSerializer")]
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig : ValueType {
    public ProcessorArchitecture Cpu;
    public LauncherSubsystem Subsystem;
    public LauncherConfig(ProcessorArchitecture cpu, LauncherSubsystem subsystem);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LauncherConfig other);
    [NotNullAttribute]
[PureAttribute]
public string GetDefaultExeFileSuffix();
    public virtual int GetHashCode();
    public static bool op_Equality(LauncherConfig left, LauncherConfig right);
    public static bool op_Inequality(LauncherConfig left, LauncherConfig right);
    public static LauncherConfig Parse(string text);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherConfigEx : object {
    [ExtensionAttribute]
public static bool IsInSet(LauncherConfig config, StandaloneLauncherCpuSets set);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherHostHelpers : object {
    [CompilerGeneratedAttribute]
private static Func`2<object, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<object, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [NotNullAttribute]
public static ICollection`1<StuffedLauncherArtifact> StuffStandaloneLauncherHost(StandaloneLauncherHostBase host, ICollection`1<CleanLauncherArtifactBase> launchersClean, ICollection`1<NativeResourceForLauncher> resources, IAuthenticodeSigningService signer, ILogger logger, IEnumerable`1<object> components, object nameSuffix, BuildVersionSuffix buildVersionSuffix, string installationHive);
    [CompilerGeneratedAttribute]
private static string <StuffStandaloneLauncherHost>b__0(object o);
    [CompilerGeneratedAttribute]
private static string <StuffStandaloneLauncherHost>b__1(object ins);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller : object {
    public static ushort LastIconIndex;
    public static ushort MainIconIndex;
    public static string CMDLINE_NAME_ASSEMBLY_FILE;
    public static string CMDLINE_NAME_ASSEMBLY_NAME;
    public static string CMDLINE_NAME_CLASS_NAME;
    public static string CMDLINE_NAME_DEBUGFORCECLR2;
    public static string CMDLINE_NAME_METHOD_NAME;
    public static string CMDLINE_NAME_MODE;
    public static string CMDLINE_NAME_NETFXCLIENTPROFILE;
    public static string CMDLINE_NAME_NETFXREQUIREDVERSION;
    public static string CMDLINE_NAME_NO_STUFFED_CMDLINE;
    public static string CMDLINE_NAME_NOINTERACTIVE;
    public static string CMDLINE_NAME_NOSPLASH;
    public static string CMDLINE_NAME_TARGET;
    public static string CMDLINE_NAME_WAITFORANYKEY;
    public static string CMDLINE_NAMESPACE_LAUNCHER;
    public static string CMDLINE_VALUE_MODE_INVOKE_METHOD;
    public static string CMDLINE_VALUE_NATIVE_DLIB_TARGET;
    public static string CMDLINE_VALUE_NATIVE_EXEC_TARGET;
    public static string CMDLINE_VALUE_NATIVE_SLIB_TARGET;
    public static string CMDLINE_VALUE_TARGET_ASSEMBLY;
    public static NativeResourceTypeAndName IDB_SPLASH;
    public static NativeResourceTypeAndName IDB_SPLASH_HIGH_DPI;
    public static NativeResourceTypeAndName IDR_COMPANY_NAME;
    public static NativeResourceTypeAndName IDR_HOST_COMPONENTS;
    public static NativeResourceTypeAndName IDR_IDENTITY;
    public static NativeResourceTypeAndName IDR_PRODUCT_CONTENT;
    public static NativeResourceTypeAndName IDR_PRODUCT_NAME;
    public static NativeResourceTypeAndName IDR_PRODUCT_VERSION_4;
    public static NativeResourceTypeAndName IDR_PRODUCT_VERSION_SEMANTIC;
    public static NativeResourceTypeAndName IDR_STUFFED_COMMAND_LINE;
    public static NativeResourceTypeAndName IDI_LAUNCHER;
    [CompilerGeneratedAttribute]
private static Action`1<TextBlock> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Action`1<TextBlock> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Action`1<TextBlock> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<ProductContentFile, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`3<long, ProductContentFile, long> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate44;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Func`2<NativeResourceForLauncher, bool> CS$<>9__CachedAnonymousMethodDelegate4b;
    private static LauncherInstaller();
    [NotNullAttribute]
public static FileSystemPath FindLauncherExecutableAtRuntime(LauncherConfig config);
    public static bool IsHostComponentsResourcePresentInExecutable();
    public static bool IsProductContentResourcePresentInExecutable();
    public static NativeResourceForLauncher MakeCommandLineForRunningMethod(Expression`1<Func`1<object>> method, Version verNetFxRequired, Nullable`1<bool> bNetfxClientProfile, bool splash);
    public static NativeResourceForLauncher MakeCommandLineForRunningMethod(AssemblyQualifiedTypeMemberName method, Version verNetFxRequired, Nullable`1<bool> bNetfxClientProfile, bool splash);
    public static NativeResourceForLauncher MakeCommandLineForRunningMethod(string sAssemblyName, string sTypeName, string sMethodName, Version verNetFxRequired, Nullable`1<bool> bNetfxClientProfile, bool splash);
    [NotNullAttribute]
public static CommandLineBuilderJet MakeCommandLineStringForRunningMethod(MemberInfo method, Version verNetFxRequired, bool bNoSplash, bool bWaitForAnyKey, bool bNonInteractive);
    [NotNullAttribute]
public static CommandLineBuilderJet MakeCommandLineStringForRunningMethod(FileSystemPath pathAssembly, string sTypeName, string sMethodName, string sInvocationTarget, Version verNetFxRequired, bool bNoSplash, bool bWaitForAnyKey, bool bNonInteractive);
    public static NativeResourceForLauncher MakeHostComponentsNativeResource(ICollection`1<object> allcomponents);
    [NotNullAttribute]
public static SimpleFileItem MakeSplashFile(string sCompanyName, string sProductName, BitmapEncoder bitmapEncoder, string fileName, bool highDpi);
    public static FrameworkElement MakeSplashVisual(string sCompanyName, string sProductName);
    public static NativeResourceForLauncher PackageProductContent(ICollection`1<ProductContentFile> filesToInstall, ILogger logger);
    [NotNullAttribute]
public static SerializedValuesResolver ReadHostComponentsFromNativeExecutable(Lifetime lifetime);
    [NotNullAttribute]
public static UnmanagedMemoryStream ReadProductContentResourceFromNativeExecutable();
    public static StuffedLauncherArtifact StuffLauncher(CleanLauncherArtifactBase cleanLauncherArtifact, ICollection`1<NativeResourceForLauncher> resources, ProductNameAndVersionArtifact product, IAuthenticodeSigningService signer, ILogger logger, string sPreferredFileNameNoExt);
    private static NativeResourceForLauncher PackageProductContent_Itss(ICollection`1<ProductContentFile> filesToInstall, ILogger logger);
    [NotNullAttribute]
private static NativeResourceForLauncher PackageProductContent_Zip(ICollection`1<ProductContentFile> filesToInstall, ILogger logger);
    [NotNullAttribute]
private static ICollection`1<NativeResourceForLauncher> StuffLauncher_AddIdentityNativeResource(ICollection`1<NativeResourceForLauncher> resources, CleanLauncherArtifactBase cleanLauncherArtifact);
    private static ICollection`1<NativeResourceForLauncher> StuffLauncher_AddProductInfoNativeResourcesIfMissing(ICollection`1<NativeResourceForLauncher> original, ProductNameAndVersionArtifact product);
    [NotNullAttribute]
private static ICollection`1<NativeResourceForLauncher> StuffLauncher_AddSplashHighDpiNativeResourceIfMissing(ICollection`1<NativeResourceForLauncher> resources, ProductNameAndVersionArtifact product);
    [NotNullAttribute]
private static ICollection`1<NativeResourceForLauncher> StuffLauncher_AddSplashNativeResourceIfMissing(ICollection`1<NativeResourceForLauncher> resources, ProductNameAndVersionArtifact product);
    private static void StuffLauncher_WriteIcons(IEnumerable`1<NativeResourceForLauncher> icons, FileSystemPath pathExe, ILogger logger);
    private static void StuffLauncher_WriteResource(NativeResourceForLauncher resource, Void* hRes, FileSystemPath pathExe, ILogger logger);
    private static void StuffLauncher_WriteVersionInfo(FileSystemPath pathExe, ProductNameAndVersionArtifact product, string sOriginalfileName, ILogger logger);
    [CompilerGeneratedAttribute]
private static void <MakeSplashVisual>b__14(TextBlock tb);
    [CompilerGeneratedAttribute]
private static void <MakeSplashVisual>b__15(TextBlock tb);
    [CompilerGeneratedAttribute]
private static void <MakeSplashVisual>b__16(TextBlock tb);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher>b__1e(NativeResourceForLauncher res);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <StuffLauncher>b__1f(NativeResourceForLauncher resource);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <PackageProductContent_Zip>b__35(ProductContentFile pcf);
    [CompilerGeneratedAttribute]
private static long <PackageProductContent_Zip>b__36(long sum, ProductContentFile pcf);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher_AddIdentityNativeResource>b__39(NativeResourceForLauncher res);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher_AddProductInfoNativeResourcesIfMissing>b__3f(NativeResourceForLauncher res);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher_AddProductInfoNativeResourcesIfMissing>b__40(NativeResourceForLauncher res);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher_AddProductInfoNativeResourcesIfMissing>b__41(NativeResourceForLauncher res);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher_AddProductInfoNativeResourcesIfMissing>b__42(NativeResourceForLauncher res);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher_AddSplashHighDpiNativeResourceIfMissing>b__48(NativeResourceForLauncher res);
    [CompilerGeneratedAttribute]
private static bool <StuffLauncher_AddSplashNativeResourceIfMissing>b__4a(NativeResourceForLauncher res);
}
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherNamingScheme : object {
    [NotNullAttribute]
private IDictionary`2<LauncherConfig, string> myMap;
    public LauncherNamingScheme(IDictionary`2<LauncherConfig, string> map);
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public enum JetBrains.Application.BuildScript.Install.Launcher.LauncherSubsystem : Enum {
    public int value__;
    public static LauncherSubsystem Windows;
    public static LauncherSubsystem Console;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherSubsystemEx : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static string GetExeFileSuffix(LauncherSubsystem thіs);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherHostArtifact : object {
    public StandaloneLauncherHostBase StandaloneLauncherHost;
    public SingleExeStandaloneLauncherHostArtifact(StandaloneLauncherHostBase wrappedLauncher);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherStuffed : BuildStageOutputFileArtifactBase {
    [CompilerGeneratedAttribute]
private static Func`2<SingleExeStandaloneLauncherStuffed, InstallersPortablesZipsDeployableFile> CS$<>9__CachedAnonymousMethodDelegate1;
    public SingleExeStandaloneLauncherStuffed(SimpleFileItem file);
    public SingleExeStandaloneLauncherStuffed(IStructuredStorage sstg);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(SingleExeStandaloneLauncherStuffed[] singleExes);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static InstallersPortablesZipsDeployableFile <ToDeployable>b__0(SingleExeStandaloneLauncherStuffed x);
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets : Enum {
    public UInt32 value__;
    public static StandaloneLauncherCpuSets NativeWinNT;
    public static StandaloneLauncherCpuSets Managed;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostArtifact : StandaloneLauncherHostBase {
    public StandaloneLauncherHostArtifact(AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, ChunkedMemoryStream splashScreen, ChunkedMemoryStream splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired, ILauncherNamingScheme namingscheme);
    public StandaloneLauncherHostArtifact(AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, Byte[] splashScreen, Byte[] splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired);
    [ObsoleteAttribute("Use overload version with ByteArrayIcon instead of Icon")]
public StandaloneLauncherHostArtifact(ZonePart zone, LauncherSubsystem subsystem, string sCompanyNameHuman, string sProductName, JetSemanticVersion version, Icon icon, Expression`1<Func`1<object>> managedEntryPointMethod, bool makeShortcut, Byte[] splashScreen, Byte[] splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired);
    [ObsoleteAttribute("Use overload with the product name.")]
public StandaloneLauncherHostArtifact(ZonePart zone, LauncherSubsystem subsystem, string sCompanyNameHuman, string sProductName, JetSemanticVersion version, ByteArrayIcon icon, Expression`1<Func`1<object>> managedEntryPointMethod, bool makeShortcut, Byte[] splashScreen, Byte[] splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired);
    [ObsoleteAttribute("Use overload with the product name.")]
public StandaloneLauncherHostArtifact(ZonePart zone, LauncherSubsystem subsystem, string sCompanyNameHuman, string sProductName, JetSemanticVersion version, ByteArrayIcon icon, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, Byte[] splashScreen, Byte[] splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired);
    [ObsoleteAttribute("Use overload with AssemblyQualifiedTypeMemberName instead of a lambda expression.")]
public StandaloneLauncherHostArtifact(ZonePart zone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact product, ByteArrayIcon icon, Expression`1<Func`1<object>> managedEntryPointMethod, bool makeShortcut, Byte[] splashScreen, Byte[] splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired);
    public StandaloneLauncherHostArtifact(ZonePart zone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact product, ByteArrayIcon icon, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, Byte[] splashScreen, Byte[] splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired);
    public virtual string ToString();
}
public abstract class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase : object {
    [NotNullAttribute]
public AssemblyQualifiedTypeName EnvironmentZone;
    [CanBeNullAttribute]
public ICollection`1<ByteArrayIcon> ExtraIcons;
    [CanBeNullAttribute]
public ICollection`1<FileAssociationEntry> FileAssociations;
    [NotNullAttribute]
public AssemblyQualifiedTypeMemberName ManagedEntryPointMethod;
    [NotNullAttribute]
public ILauncherNamingScheme NamingScheme;
    [CanBeNullAttribute]
public Version NetFxRequiredVersion;
    [NotNullAttribute]
public ProductNameAndVersionArtifact ProductNameAndVersion;
    [CanBeNullAttribute]
public ChunkedMemoryStream SplashScreen;
    [CanBeNullAttribute]
public ChunkedMemoryStream SplashScreenHighDpi;
    public bool StartMenuLink;
    public LauncherSubsystem Subsystem;
    [CanBeNullAttribute]
public string VersionString;
    [NotNullAttribute]
public WindowBrandingArtifact WindowBranding;
    [CompilerGeneratedAttribute]
private StandaloneLauncherCpuSets <CpuSets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutableName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ChunkedMemoryStream, ChunkedMemoryStream> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ChunkedMemoryStream, ChunkedMemoryStream> CS$<>9__CachedAnonymousMethodDelegate3;
    public StandaloneLauncherCpuSets CpuSets { get; public set; }
    [CanBeNullAttribute]
public string ExecutableName { get; public set; }
    protected StandaloneLauncherHostBase(AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, ChunkedMemoryStream splashScreen, ChunkedMemoryStream splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired, ILauncherNamingScheme namingscheme);
    [CompilerGeneratedAttribute]
public StandaloneLauncherCpuSets get_CpuSets();
    [CompilerGeneratedAttribute]
public void set_CpuSets(StandaloneLauncherCpuSets value);
    [CompilerGeneratedAttribute]
public string get_ExecutableName();
    [CompilerGeneratedAttribute]
public void set_ExecutableName(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static ChunkedMemoryStream <.ctor>b__0(ChunkedMemoryStream cms);
    [CompilerGeneratedAttribute]
private static ChunkedMemoryStream <.ctor>b__1(ChunkedMemoryStream cms);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostInPackageArtifact : StandaloneLauncherHostBase {
    [NotNullAttribute]
public SubplatformName Subplatform;
    public StandaloneLauncherHostInPackageArtifact(SubplatformName subplatform, AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, ChunkedMemoryStream splashScreen, ChunkedMemoryStream splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired, ILauncherNamingScheme namingscheme);
    public StandaloneLauncherHostInPackageArtifact(SubplatformName subplatform, ZonePart zone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact product, ByteArrayIcon icon, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, ChunkedMemoryStream splashScreen, ChunkedMemoryStream splashScreenHighDpi, string versionString, IEnumerable`1<ByteArrayIcon> extraIcons, IEnumerable`1<FileAssociationEntry> fileAssociations, Version verNetFxRequired, ILauncherNamingScheme namingscheme);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostOsIntegration : object {
    private static string StreamName;
    private bool myIsWithStartMenuLink;
    private string myMarketingVersionString;
    private ProductNameAndVersionArtifact myProductNameAndVersion;
    [NotNullAttribute]
public IList`1<FileAssociationEntry> FileAssociations;
    public IList`1<LauncherLocation> Launchers;
    [CompilerGeneratedAttribute]
private static Action`2<FileAssociationEntry, CsexpArchive> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`2<LauncherLocation, CsexpArchive> CS$<>9__CachedAnonymousMethodDelegate6;
    public bool IsEmpty { get; }
    public bool IsWithStartMenuLink { get; }
    [NotNullAttribute]
public string MarketingVersionString { get; }
    [NotNullAttribute]
public ProductNameAndVersionArtifact ProductNameAndVersion { get; }
    public StandaloneLauncherHostOsIntegration(ProductNameAndVersionArtifact productNameAndVersion, string marketingVersionString, IEnumerable`1<FileAssociationEntry> fileAssociations, bool isWithStartMenuLink, IEnumerable`1<LauncherLocation> launchers);
    public StandaloneLauncherHostOsIntegration(StandaloneLauncherHostBase host, IEnumerable`1<LauncherLocation> launchers);
    public StandaloneLauncherHostOsIntegration(IStructuredStorage sstg);
    private static StandaloneLauncherHostOsIntegration();
    public bool get_IsEmpty();
    public bool get_IsWithStartMenuLink();
    public string get_MarketingVersionString();
    public ProductNameAndVersionArtifact get_ProductNameAndVersion();
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    private void SerializeCore(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__2(CsexpWriter writer);
    [CompilerGeneratedAttribute]
private static void <SerializeCore>b__3(FileAssociationEntry o, CsexpArchive a);
    [CompilerGeneratedAttribute]
private static void <SerializeCore>b__4(LauncherLocation o, CsexpArchive a);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StuffedLauncherArtifact : LauncherArtifactBase {
    public StuffedLauncherArtifact(LauncherConfig config, SimpleFileItem executable, SimpleFileItem programDatabase);
    public StuffedLauncherArtifact(IStructuredStorage storage);
}
public class JetBrains.Application.BuildScript.Install.Launcher.TechnicalConsoleLauncherNamingScheme : object {
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public class JetBrains.Application.BuildScript.Install.Launcher.TechnicalGuiLauncherNamingScheme : object {
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public class JetBrains.Application.BuildScript.Install.Launcher.WrappedNamingScheme : object {
    private ILauncherNamingScheme myNested;
    private Func`2<string, string> myWrap;
    public WrappedNamingScheme(ILauncherNamingScheme nested, Func`2<string, string> wrap);
    [NotNullAttribute]
public static ILauncherNamingScheme PrefixWith(ILauncherNamingScheme nested, string prefix);
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.LocalInstallPart : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Install.LocalInstallRootSuffix/LocalInstallRootSuffixSerializer")]
public class JetBrains.Application.BuildScript.Install.LocalInstallRootSuffix : object {
    [NotNullAttribute]
public string RootSuffix;
    public LocalInstallRootSuffix(string rootSuffix);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.LocalInstallWithPostInstallStepsPart : object {
    [BuildStepAttribute]
public static LocalInstallWithPostInstallStepsPart LinkToLocalInstallParts(LocalInstallPart[] lips);
}
public static class JetBrains.Application.BuildScript.Install.LocalMakePackedInstallerTasks : object {
    [BuildStepAttribute]
public static EntryLocalMakePackedInstaller InstallPackedInstaller(ProductBinariesDirArtifact bindir, InstallerExePackedWithEmbeddedPackages installerExePacked, InstallerExePackedWithEmbeddedPackagesJSon jSon, ILogger logger);
}
public class JetBrains.Application.BuildScript.Install.LocalPaths : object {
    public static string Jetbrains;
    public static string Installations;
    public static string PackagesFileName;
    public static string UninstallFileName;
    public FileSystemPath RootPath;
    public FileSystemPath InstallationsFolder;
    public FileSystemPath PackagesFolder { get; }
    private LocalPaths(FileSystemPath rootPath, FileSystemPath installFolder);
    private static LocalPaths();
    public static LocalPaths FromCurrentRuntime();
    public static LocalPaths CreateLocalPerMachine();
    public static LocalPaths CreateLocalPathsPerUser();
    public static LocalPaths CreateLocalCustom(FileSystemPath installFolder);
    public static LocalPaths FromLocalAppData(FileSystemPath localAppData);
    public FileSystemPath get_PackagesFolder();
    public FileSystemPath NewInstallationsPath(string fullIdentifierName);
    public static FileSystemPath ProgramFiles32();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact : object {
    public IsolationOptions IsolationOptions;
    public LocalRegisterIsolationOptionsArtifact(IsolationOptions isolationOptions);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsOverrideArtifact : object {
    public IsolationOptions IsolationOptions;
    public LocalRegisterIsolationOptionsOverrideArtifact(IStructuredStorage storage);
    public LocalRegisterIsolationOptionsOverrideArtifact(IsolationOptions isolationOptions);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4(BinaryWriter writer);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDir : object {
    [NotNullAttribute]
public SimpleFileItem WrittenPathsList;
    public LocalSavePackagesToBinDir(SimpleFileItem writtenPathsList);
}
public static class JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDirTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, InputPackage>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, InputPackage>, InputPackage> CS$<>9__CachedAnonymousMethodDelegate8;
    [BuildStepAttribute]
public static LocalSavePackagesToBinDir DoLocalSavePackagesToBinDir(ProductBinariesDirArtifact bindir, InputPackage[] ipkgs, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <DoLocalSavePackagesToBinDir>b__0(InputPackage dpkg);
    [CompilerGeneratedAttribute]
private static string <DoLocalSavePackagesToBinDir>b__1(IGrouping`2<string, InputPackage> g);
    [CompilerGeneratedAttribute]
private static InputPackage <DoLocalSavePackagesToBinDir>b__2(IGrouping`2<string, InputPackage> g);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.LocalUninstallArtifact : object {
}
public static class JetBrains.Application.BuildScript.Install.MsiTransmitter : object {
    [CompilerGeneratedAttribute]
private static Func`3<InputPackage, SerializedValuesResolver, IEnumerable`1<SharedMsiArtifact>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<SharedMsiArtifact>, IEnumerable`1<SharedMsiArtifact>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<SharedMsiArtifact, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [BuildStepAttribute]
public static void PatchThroughPackagedMsiArtifact(InputPackage[] ipkgs, SharedMsiArtifact[]& sharedMsies, LocalInstallPart& localinstall, ILogger logger);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<SharedMsiArtifact> <PatchThroughPackagedMsiArtifact>b__0(InputPackage package, SerializedValuesResolver meta);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<SharedMsiArtifact> <PatchThroughPackagedMsiArtifact>b__2(IEnumerable`1<SharedMsiArtifact> o);
    [CompilerGeneratedAttribute]
private static bool <PatchThroughPackagedMsiArtifact>b__1(SharedMsiArtifact x);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.PackagedMsi.SharedMsiArtifact : object {
    public RelativePath InPackageLocation;
    public ProcessorArchitecture ProcessorArchitecture;
    public SubplatformName SubplatformName;
    [CompilerGeneratedAttribute]
private static Func`2<SharedMsiArtifact, SubplatformComponentForPackaging> CS$<>9__CachedAnonymousMethodDelegate4;
    public SharedMsiArtifact(IStructuredStorage structuredStorage);
    [BuildStepAttribute]
public static SubplatformComponentForPackaging[] EmbedInPackages(SharedMsiArtifact[] msies, AllAssembliesOnSources allassSrc);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    private void Serialize(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private static SubplatformComponentForPackaging <EmbedInPackages>b__3(SharedMsiArtifact msi);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__7(CsexpWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.PostInstallExecutableArtifact : object {
    public static string KeyPostInstallExecutable;
    public FileSystemPath RegisterExecutablePath;
    public string RegisterExecutableArgs;
    public FileSystemPath UnregisterExecutablePath;
    public string UnregisterExecutableArgs;
    public PostInstallExecutableArtifact(IStructuredStorage structuredStorage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    [BuildStepAttribute]
public static PostInstallExecutableArtifact[] EmptyDefault();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4(BinaryWriter writer);
}
public class JetBrains.Application.BuildScript.Install.StorageContentWriter : object {
    private Lifetime myLifetime;
    private IStorage myStorage;
    public StorageContentWriter(Lifetime lifetime, FileSystemPath stotagePath);
    public sealed virtual void WriteFile(Stream streamRead, string partName);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.VersionJSon : BuildStageOutputFileArtifactBase {
    public VersionJSon(IStructuredStorage sstg);
    public VersionJSon(SimpleFileItem jsonFile);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(VersionJSon versionJSon);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact : object {
    public string Name;
    [BuildStepAttribute]
public IntermediateOutputFolderPerProfileArtifact(ProfileNameArtifact profile);
}
public interface JetBrains.Application.BuildScript.IProductInfo {
    public string ProductTechnicalName { get; }
    public string ProductPresentableName { get; }
    public string CompanyNameLegal { get; }
    public string CompanyName { get; }
    public JetSemanticVersion Version { get; }
    public string VersionMarketingString { get; }
    public string ProductUrl { get; }
    public string ProductTwitterUrl { get; }
    public string ProductUrlEvaluate { get; }
    public Icon ProductIcon { get; }
    public DateTime BuildDate { get; }
    public DateTime SubscriptionCheckDate { get; }
    public abstract virtual string get_ProductTechnicalName();
    public abstract virtual string get_ProductPresentableName();
    public abstract virtual string get_CompanyNameLegal();
    public abstract virtual string get_CompanyName();
    public abstract virtual JetSemanticVersion get_Version();
    public abstract virtual string get_VersionMarketingString();
    public abstract virtual string get_ProductUrl();
    public abstract virtual string get_ProductTwitterUrl();
    public abstract virtual string get_ProductUrlEvaluate();
    public abstract virtual Icon get_ProductIcon();
    public abstract virtual DateTime get_BuildDate();
    public abstract virtual DateTime get_SubscriptionCheckDate();
}
public static class JetBrains.Application.BuildScript.JetBrainsBundle : object {
    public static string Id;
    public static int Version;
    private static JetBrainsBundle();
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.LocalEmitSolutionFile : object {
    public static string GeneratedBatchSuffix;
    public static string GeneratedSlnSuffix;
    public static string GeneratedSlnSuffixWithDot;
    private static string SolutionDotsettingsSourceFileName;
    private static RelativePath ToolsetManagedsolutionDotsettingsFileRelFromRoot;
    public FileSystemPath SolutionFile;
    [CompilerGeneratedAttribute]
private static Func`2<ProfileNameArtifact, string> CS$<>9__CachedAnonymousMethodDelegatee;
    public LocalEmitSolutionFile(FileSystemPath solutionFile);
    private static LocalEmitSolutionFile();
    [BuildStepAttribute]
public static LocalEmitSolutionFile Do(ProductHomeDirArtifact homedir, ProductSolutionFile solfile, AllAssembliesOnSources allassSrc, Optional`1<ProfileNameArtifact> maybeProfile, ILogger logger, IJetNugetPackageManager nugetter);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.LocalEmitSolutionFile/<ChooseMsbuildExeForSolution>d__8")]
[DebuggerStepThroughAttribute]
private static Task ChooseMsbuildExeForSolution(ProductHomeDirArtifact homedir, AllAssembliesOnSources allassSrc, IJetNugetPackageManager nugetter, Optional`1<ProfileNameArtifact> maybeProfile, ILogger logger);
    private static void ChooseMsbuildExeForSolution_IntoMsbuildCmd(ProductHomeDirArtifact homedir, ToolsetIdentity toolsetForMainSolution, FileSystemPath pathToMsbuild, FileSystemPath pathToMono, Optional`1<ProfileNameArtifact> maybeProfile, ILogger logger);
    private static void ChooseMsbuildExeForSolution_IntoToolsetSolSettings(ProductHomeDirArtifact homedir, FileSystemPath pathToMsbuild, FileSystemPath pathToMono, ILogger logger);
    private static string GetProfileName(ProductHomeDirArtifact homedir, Optional`1<ProfileNameArtifact> maybeProfile);
    private static void SolutionSettings(ProductHomeDirArtifact homedir, FileSystemPath solfile, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <GetProfileName>b__d(ProfileNameArtifact x);
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.LocalInstallTargetArtifact/LocalInstallTargetArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.LocalInstallTargetArtifact/LocalInstallTargetArtifactSerializer")]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.LocalInstallTargetArtifact : object {
    [NotNullAttribute]
public VsHive VsHive;
    public LocalInstallTargetArtifact(VsHive hive);
    [NotNullAttribute]
public static LocalInstallTargetArtifact FromString(string str);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact : object {
    [NotNullAttribute]
public ICollection`1<PackageReferenceArtifact> PackageReferences;
    [NotNullAttribute]
public RelativePath RestoredLocation;
    [NotNullAttribute]
public JetPackageManifest RetrievedPackageManifest;
    public LocalRestoredPackageReferenceArtifact(ICollection`1<PackageReferenceArtifact> packageReferences, JetPackageManifest retrievedPackageManifest, RelativePath restoredLocation);
    [BuildStepAttribute]
public static LocalRestorePackages Aggregate(LocalRestoredPackageReferenceArtifact[] locref);
    public virtual string ToString();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.LocalRestoredPackages : object {
    private Dictionary`2<RestoredPackageKey, LocalRestoredPackageReferenceArtifact> MapLocalRestoredBySub;
    private Dictionary`2<PackageIdentity, NugetPackageFileItem> MapRetrievedByIdentity;
    private AllAssembliesOnSources myAllAssembliesOnSources;
    private LocalRestoredPackageReferenceArtifact[] myRestoreds;
    public LocalRestoredPackages(AllAssembliesOnSources allassSrc, RetrievedPackageReferenceArtifact[] retrieveds, LocalRestoredPackageReferenceArtifact[] restoreds, ILogger logger);
    public FileSystemPath GetRestoreLocation(SubplatformName subplatform, PackageIdentity package, OnError onerror);
    public NugetPackageFileItem GetRetrievedPackage(PackageIdentity package, OnError onerror);
    private FileSystemPath GetRestoreLocation_Fail(SubplatformName subplatform, PackageIdentity package, OnError onerror);
}
[BuildEntryPointAttribute]
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.LocalRestorePackages : object {
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.LocalTwoStageBuild : object {
    private AllAssembliesOnEverything myAllAssembliesOnEverything;
    private ILogger myLogger;
    private Optional`1<ProductBinariesDirArtifact> myMaybeBinDir;
    private NestedInputArtifactsHelper myNestart;
    private NugetConfigFile myNugetConfig;
    private INestedBuildRunner myNestedBuildRunner;
    private PreviousBuildResults myPreviousBuildResults;
    private ProductHomeDirArtifact myProductHomeDirArtifact;
    [CanBeNullAttribute]
private InputsForBinaryReferencesArtifact myInputsForBinaryReferences;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<BuildRunnerResult, ICollection`1<OutputFileArtifact>> CS$<>9__CachedAnonymousMethodDelegate8;
    public LocalTwoStageBuild(ProductHomeDirArtifact homedir, AllAssembliesOnEverything allass, INestedBuildRunner nester, PreviousBuildResults previousBuildResults, Optional`1<InputsForBinaryReferencesArtifact> inputsForBinaryReferences, Optional`1<ProductBinariesDirArtifact> maybeBinDir, NestedInputArtifactsHelper nestart, NugetConfigFile nugetconfig, ILogger logger);
    private ICollection`1<InputPackage> GetTransportAsInputsFromDeployblePackages(ICollection`1<DeployablePackage> deployablePackages, IEnumerable`1<InputPackage> previousTransportAsInputs);
    private TRetVal RunTwoStageCore(AssemblyQualifiedTypeName binaryStageObjective, Func`2<BuildRunnerResult, TRetVal> FWithResult);
    private sealed virtual override ICollection`1<OutputFileArtifact> JetBrains.Application.BuildScript.ILocalTwoStageBuild.RunTwoStage(AssemblyQualifiedTypeName binaryStageObjective);
    private sealed virtual override ICollection`1<TObjective> JetBrains.Application.BuildScript.ILocalTwoStageBuild.RunTwoStage();
    [CompilerGeneratedAttribute]
private static string <GetTransportAsInputsFromDeployblePackages>b__0(InputPackage ipkg);
    [CompilerGeneratedAttribute]
private static InputPackage <RunTwoStageCore>b__2(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static ICollection`1<OutputFileArtifact> <JetBrains.Application.BuildScript.ILocalTwoStageBuild.RunTwoStage>b__7(BuildRunnerResult result);
    [CompilerGeneratedAttribute]
private static ICollection`1<TObjective> <JetBrains.Application.BuildScript.ILocalTwoStageBuild.RunTwoStage>b__9(BuildRunnerResult result);
}
public static class JetBrains.Application.BuildScript.MonoRuntimeConfig : object {
    public static RelativePath MonoEntryPointScript;
    public static RelativePath MonoExecutablePartPathLinux;
    public static RelativePath MonoExecutablePartPathMacos;
    public static string MonoNugetIdFileName;
    public static string MonoNugetVersionFileName;
    public static FileSystemPath MonoRuntimesLocalExpandDir;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public static bool IsMonoRuntimeAvailableForThisEnvironment { get; }
    private static MonoRuntimeConfig();
    public static bool get_IsMonoRuntimeAvailableForThisEnvironment();
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.MonoRuntimeConfig/<GetMonoRuntimeExecutableForThisEnvironmentAsync>d__0")]
[ItemNotNullAttribute]
public static Task`1<FileSystemPath> GetMonoRuntimeExecutableForThisEnvironmentAsync(ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter);
    [NotNullAttribute]
public static PackageIdentity GetMonoRuntimePackageIdentity(ProductHomeDirArtifact homedir);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.MonoRuntimeConfig/<LocalExpandMonoRuntimeAsync>d__c")]
[NotNullAttribute]
public static Task`1<FileSystemPath> LocalExpandMonoRuntimeAsync(ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter);
    [CompilerGeneratedAttribute]
private static bool <GetMonoRuntimePackageIdentity>b__4(FileSystemPath file);
}
public static class JetBrains.Application.BuildScript.NugetApplicationPackageConvention : object {
    [NotNullAttribute]
public static RelativePath GetJetMetadataEffectivePath(IPackage nupkg);
    [NotNullAttribute]
public static RelativePath GetJetMetadataEffectivePath(IHaveNugetPackageFileItem nupkg);
    [NotNullAttribute]
public static RelativePath GetJetMetadataEffectivePath(ApplicationPackageArtifact apppkg);
    [NotNullAttribute]
public static RelativePath GetJetMetadataEffectivePath(Subplatform subplatform);
    public static string GetSubplatformPackageId(Subplatform subplatform);
    [NotNullAttribute]
public static JetSemanticVersion GetSubplatformPackageVersion(Subplatform subplatform, BuildVersionSuffix dt);
    [NotNullAttribute]
public static IVersionSpec GetSubplatformReferencedPackageVersionSpec(Subplatform subplatform, BuildVersionSuffix buildSuffix);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.NugetApplicationPackageTasks : object {
    [CompilerGeneratedAttribute]
private static Comparison`1<ConfigFileInfo> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<PackageIdentity, RetrievedPackageReferenceArtifact>, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<RetrievedPackageReferenceArtifact, IEnumerable`1<JetPackageReference>> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReferenceArtifact, JetPackageReference> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<PackageIdentity, IList`1<PackageReferenceArtifact>>, string> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReferenceArtifact, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate21;
    [BuildStepAttribute]
public static RetrievedPackageReferenceArtifact AddBundleReference(AllAssembliesOnSources allassSrc, Optional`1<PackageDefaultPrereleaseMetadata> maybeprereleasemetadata);
    [BuildStepAttribute]
public static PackageReferenceArtifact[] CollectPackageReferencesFromFiles(AllAssembliesOnSources allass, ILogger logger);
    public static NugetPackageFileItem CreateBundlePackage(Optional`1<PackageDefaultPrereleaseMetadata> maybeprereleasemetadata);
    [NotNullAttribute]
public static List`1<ConfigFileInfo> GetPackageConfigFilesInSubplatform(AllAssembliesOnSources allass, SubplatformOnSources subplatform);
    [ExtensionAttribute]
public static bool IsStandard(PackageReferenceFlags flags);
    [BuildStepAttribute]
public static LocalRestoredPackageReferenceArtifact[] LocalRestoreReferencedNugetPackages(Lifetime lifetime, RetrievedPackageReferenceArtifact[] pkgsRaw, ProductHomeDirArtifact homedir, LocalRestoreNugetPackagesCentralCacheArtifact centralcache, ILogger logger);
    [BuildStepAttribute]
public static RetrievedPackageReferenceArtifact[] RetrieveNugetPackageReferences(Lifetime lifetime, PackageReferenceArtifact[] references, NugetPackageManagerForBuild packman, InputPackage[] inputPackages, ProductHomeDirArtifact homedir, LocalRestoreNugetPackagesCentralCacheArtifact centralcache, ILogger logger);
    public static void TryCleanOutOldMetadataFiles(AllAssembliesOnSources allassembliesSrc, FileSystemPath binDir, ILogger logger);
    [CompilerGeneratedAttribute]
private static int <GetPackageConfigFilesInSubplatform>b__10(ConfigFileInfo black, ConfigFileInfo white);
    [CompilerGeneratedAttribute]
private static PackageIdentity <LocalRestoreReferencedNugetPackages>b__12(RetrievedPackageReferenceArtifact rpra);
    [CompilerGeneratedAttribute]
private static PackageIdentity <LocalRestoreReferencedNugetPackages>b__13(IGrouping`2<PackageIdentity, RetrievedPackageReferenceArtifact> g);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<JetPackageReference> <LocalRestoreReferencedNugetPackages>b__14(RetrievedPackageReferenceArtifact pkg);
    [CompilerGeneratedAttribute]
private static JetPackageReference <LocalRestoreReferencedNugetPackages>b__15(PackageReferenceArtifact pra);
    [CompilerGeneratedAttribute]
private static PackageIdentity <RetrieveNugetPackageReferences>b__1a(InputPackage ipkg);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <RetrieveNugetPackageReferences>b__1b(InputPackage ipkg);
    [CompilerGeneratedAttribute]
private static string <RetrieveNugetPackageReferences>b__1c(KeyValuePair`2<PackageIdentity, IList`1<PackageReferenceArtifact>> pair);
    [CompilerGeneratedAttribute]
private static SubplatformName <RetrieveNugetPackageReferences>b__1d(PackageReferenceArtifact pra);
}
public static class JetBrains.Application.BuildScript.NuGetHelpers.JetPackageEqualityComparer : object {
    public static IEqualityComparer`1<string> IdComparer;
    public static IEqualityComparer`1<IPackageName> Id;
    public static IEqualityComparer`1<IPackageName> IdAndVersion;
    [CompilerGeneratedAttribute]
private static Func`3<IPackageName, IPackageName, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<IPackageName, int> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`3<IPackageName, IPackageName, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IPackageName, int> CS$<>9__CachedAnonymousMethodDelegate7;
    private static JetPackageEqualityComparer();
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__0(IPackageName x, IPackageName y);
    [CompilerGeneratedAttribute]
private static int <.cctor>b__1(IPackageName name);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__2(IPackageName x, IPackageName y);
    [CompilerGeneratedAttribute]
private static int <.cctor>b__3(IPackageName name);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.LocalRestoreNugetPackagesCentralCacheArtifact : object {
    [NotNullAttribute]
public LocalRestoreNugetPackagesCentralCache CentralCache;
    public LocalRestoreNugetPackagesCentralCacheArtifact(LocalRestoreNugetPackagesCentralCache centralcache);
    [NotNullAttribute]
[BuildStepAttribute]
public static LocalRestoreNugetPackagesCentralCacheArtifact CreateInLocalAppDataIfSupported();
    public virtual string ToString();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetCompatibilityProvider : CompatibilityProvider {
    public NuGetCompatibilityProvider(IFrameworkNameProvider mappings);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NugetConfigFileLocatorShell : NugetConfigFileLocator {
    private Optional`1<ProductHomeDirArtifact> myHomeDir;
    private ILogger myLogger;
    public NugetConfigFileLocatorShell(Optional`1<ProductHomeDirArtifact> homedir, Optional`1<NugetConfigFileLocalPath> localpath, ILogger logger);
    public virtual NugetConfigFile TryGetConfigFile();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetFrameworkMapping : object {
    private IFrameworkMappings myFrameworkMappingsImplementation;
    public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierSynonyms { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierShortNames { get; }
    public IEnumerable`1<FrameworkSpecificMapping> ProfileShortNames { get; }
    public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> EquivalentFrameworks { get; }
    public IEnumerable`1<FrameworkSpecificMapping> EquivalentProfiles { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> SubSetFrameworks { get; }
    public IEnumerable`1<OneWayCompatibilityMappingEntry> CompatibilityMappings { get; }
    public IEnumerable`1<string> NonPackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> PackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> EquivalentFrameworkPrecedence { get; }
    public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> ShortNameReplacements { get; }
    public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> FullNameReplacements { get; }
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierSynonyms();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierShortNames();
    public sealed virtual IEnumerable`1<FrameworkSpecificMapping> get_ProfileShortNames();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_EquivalentFrameworks();
    public sealed virtual IEnumerable`1<FrameworkSpecificMapping> get_EquivalentProfiles();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_SubSetFrameworks();
    public sealed virtual IEnumerable`1<OneWayCompatibilityMappingEntry> get_CompatibilityMappings();
    public sealed virtual IEnumerable`1<string> get_NonPackageBasedFrameworkPrecedence();
    public sealed virtual IEnumerable`1<string> get_PackageBasedFrameworkPrecedence();
    public sealed virtual IEnumerable`1<string> get_EquivalentFrameworkPrecedence();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_ShortNameReplacements();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_FullNameReplacements();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NugetFrameworkNameProvider : FrameworkNameProvider {
    public NugetFrameworkNameProvider(IEnumerable`1<IFrameworkMappings> mappings, IEnumerable`1<IPortableFrameworkMappings> portableMappings);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetFrameworkReducer : FrameworkReducer {
    public NuGetFrameworkReducer(IFrameworkNameProvider mappings, IFrameworkCompatibilityProvider compat);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell : object {
    public static ILogger Logger;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, ApplicationPackageFile> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<ManifestDependencySet, IEnumerable`1<ManifestDependency>> CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static Func`2<ManifestDependency, bool> CS$<>9__CachedAnonymousMethodDelegate4f;
    private static NugetHelpersShell();
    [NotNullAttribute]
public static IList`1<SimpleFileItem> ExtractFilesFromPackages(IEnumerable`1<THavePackage> packages, Action`1<ExtractedFileConflict> λOnConflict);
    public static void ExtractFilesFromPackagesStreamedParallel(IEnumerable`1<THavePackage> packages, Action`1<FileFromPackage`1<THavePackage>> λNextFile, Action`1<ExtractedFileConflict> λOnConflict);
    public static void ExtractFilesFromPackagesStreamedSequential(ICollection`1<THavePackage> pkgs, Action`1<FileFromPackage`1<THavePackage>> λNextFile, Action`1<ExtractedFileConflict> λOnConflict);
    [ExtensionAttribute]
public static void ForEachPackageJetMetadata(IEnumerable`1<TPackage> thіs, GetJetMetadataMethod method, Action`2<TPackage, SerializedValuesResolver> λ, OnError onerror, IBindTypeByName typebinder);
    [NotNullAttribute]
[ExtensionAttribute]
public static ICollection`1<TValue> ForEachPackageJetMetadata(IEnumerable`1<TPackage> thіs, GetJetMetadataMethod method, Func`3<TPackage, SerializedValuesResolver, TValue> λ, OnError onerror, IBindTypeByName typebinder);
    public static SerializedValuesResolver GenerateFakeJetMetadata(Lifetime lifetime, IHaveNugetPackageFileItem package, OnError onerror, ICollection`1<SimpleFileItem> contentitemsIfKnown);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollection`1<SimpleFileItem> GetJetContentFileItems(IHaveNugetPackageFileItem thіs, Func`2<NugetPartPaths, bool> λFilter, GetJetMetadataMethod metadatamethod);
    [ExtensionAttribute]
public static SerializedValuesResolver GetJetMetadata(IHaveNugetPackageFileItem thіs, Lifetime lifetime, OnError onerror, GetJetMetadataMethod method, IBindTypeByName typebinder);
    public static ISettings GetNugetSettingsFromProductHomeDir(ProductHomeDirArtifact homedir);
    [ExtensionAttribute]
public static bool HasJetMetadata(IHaveNugetPackageFileItem thіs, OnError onerror, GetJetMetadataMethod method);
    [ExtensionAttribute]
public static bool IsReferencingWavePackage(IHaveNugetPackageFileItem thіs);
    public static Optional`1<NugetConfigFile> ReadConfigFileInHomeDir(Optional`1<ProductHomeDirArtifact> homedir);
    [ExtensionAttribute]
public static bool ShouldHaveJetMetadataInPackage(IHaveNugetPackageFileItem thіs);
    [NotNullAttribute]
[ExtensionAttribute]
private static ICollection`1<SimpleFileItem> GetJetContentFileItemsRealOnly_Nuget(IHaveNugetPackageFileItem thіs, Func`2<RelativePath, bool> λFilter);
    [ExtensionAttribute]
[NotNullAttribute]
private static ICollection`1<SimpleFileItem> GetJetContentFileItemsRealOnly_ZipIntrospection(IHaveNugetPackageFileItem thіs, Func`2<NugetPartPaths, bool> λFilter);
    [CompilerGeneratedAttribute]
private static void <ExtractFilesFromPackages>b__2(ExtractedFileConflict conflict);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <ExtractFilesFromPackages>b__3(THavePackage pkg);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackages>b__4(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackages>b__5(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackages>b__6(RelativePath path);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem>> <ExtractFilesFromPackages>b__7(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static RelativePath <ExtractFilesFromPackages>b__9(<>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem> tuple);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackages>b__a(IGrouping`2<RelativePath, <>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem>> g);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackages>b__b(<>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem> t);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackages>b__c(IGrouping`2<string, <>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem>> g);
    [CompilerGeneratedAttribute]
private static JetSemanticVersion <ExtractFilesFromPackages>b__d(<>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem> t);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackages>b__e(<>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem> tuple);
    [CompilerGeneratedAttribute]
private static FileInPackage <ExtractFilesFromPackages>b__f(<>f__AnonymousType4`2<SimpleFileItem, NugetPackageFileItem> tuple);
    [CompilerGeneratedAttribute]
private static void <ExtractFilesFromPackagesStreamedParallel>b__19(ExtractedFileConflict conflict);
    [CompilerGeneratedAttribute]
private static int <ExtractFilesFromPackagesStreamedParallel>b__1a(THavePackage black, THavePackage white);
    [CompilerGeneratedAttribute]
private static string <ExtractFilesFromPackagesStreamedParallel>b__1b(RelativePath path);
    [CompilerGeneratedAttribute]
private static void <ExtractFilesFromPackagesStreamedSequential>b__22(ExtractedFileConflict conflict);
    [CompilerGeneratedAttribute]
private static ApplicationPackageFile <GenerateFakeJetMetadata>b__35(SimpleFileItem fi);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ManifestDependency> <IsReferencingWavePackage>b__4c(ManifestDependencySet depset);
    [CompilerGeneratedAttribute]
private static bool <IsReferencingWavePackage>b__4d(ManifestDependency dep);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetPortableFrameworkMappings : DefaultPortableFrameworkMappings {
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NugetPackageManagerForApplicationBuild : NugetPackageManagerForBuild {
    public static bool OptionNeverUseLocalPackageManager;
    public NugetPackageManagerForApplicationBuild(Lifetime lifetime, Optional`1<ProductHomeDirArtifact> maybehomedir, NugetConfigFile nugetConfigFile, ILogger logger);
    private static NugetPackageManagerForApplicationBuild();
}
public class JetBrains.Application.BuildScript.Obfuscation.MetadataWriter.IlMutableMetadataAccess : object {
    private Stream myOriginalStream;
    [CompilerGeneratedAttribute]
private ILReaderMetadataAccess <ReaderAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Replacement> <Replacements>k__BackingField;
    public ILReaderMetadataAccess ReaderAccess { get; private set; }
    public IList`1<Replacement> Replacements { get; private set; }
    public IlMutableMetadataAccess(Stream stream, DateTime timestamp);
    [CompilerGeneratedAttribute]
public ILReaderMetadataAccess get_ReaderAccess();
    [CompilerGeneratedAttribute]
private void set_ReaderAccess(ILReaderMetadataAccess value);
    [CompilerGeneratedAttribute]
public IList`1<Replacement> get_Replacements();
    [CompilerGeneratedAttribute]
private void set_Replacements(IList`1<Replacement> value);
    public void Replace(int offset, string name);
    public void ReplaceBytes(int offset, Byte[] bytes);
    public void WriteToFolder(Stream streamOutput);
}
public class JetBrains.Application.BuildScript.Obfuscation.MetadataWriter.Replacement : object {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ReplaceBytes>k__BackingField;
    public int Offset { get; private set; }
    public Byte[] ReplaceBytes { get; private set; }
    public Replacement(int offset, Byte[] replaceText);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_ReplaceBytes();
    [CompilerGeneratedAttribute]
private void set_ReplaceBytes(Byte[] value);
}
public class JetBrains.Application.BuildScript.Obfuscation.NamesCollection : object {
    private HashSet`1<string> myUsedNames;
    private JetHashSet`1<string> myExclusionSet;
    private Dictionary`2<string, string> myNamesChanges;
    private Random myRandom;
    public NamesCollection(HashSet`1<string> usedNames, JetHashSet`1<string> exclusionSet);
    public void Dump(StreamWriter writer);
    public string Rename(string name);
    private bool IsNoramalIdent(string name);
    private string GenerateNewName(string nameRoot);
    private string Substitute(string name, string newNameRoot, int offset);
    public string GetNameRoot(string name);
    public string GetNameRoot(string name, Int32& offset);
}
public class JetBrains.Application.BuildScript.Obfuscation.Obfuscator : object {
    private List`1<IMetadataAssembly> myLibraries;
    private List`1<IMetadataAssembly> myUserAssemblies;
    private List`1<AssemblyData> myLibraryMetadataAccesses;
    private List`1<AssemblyData> myUserAssembliesMetadataAccesses;
    private JetHashSet`1<string> myExcludedStringsSet;
    private MetadataLoader myLoader;
    private HashSet`1<string> myUsedNames;
    private NamesCollection myNamesCollection;
    private Dictionary`2<IMetadataAssembly, IlMutableMetadataAccess> myRelationMap;
    public IList`1<SimpleFileItem> RewrittenFiles;
    [CompilerGeneratedAttribute]
private static Func`3<SimpleFileItem, Byte[], SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<IMetadataAssembly, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<IMetadataAssembly, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<IMetadataAssembly, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate18;
    public Obfuscator(ICollection`1<AssemblyFileAndKeyPair> libraryPaths, ICollection`1<AssemblyFileAndKeyPair> userAssemblies);
    private static bool IsUpToDate(IEnumerable`1<FileSystemPath> libraryPaths, IEnumerable`1<FileSystemPath> userAssemblies);
    private static FileSystemPath GetConfigPath(IEnumerable`1<FileSystemPath> libraryPaths, IEnumerable`1<FileSystemPath> userAssemblies);
    public void Dump(StreamWriter writer);
    public void Obfuscate();
    private void ApplyReplacementsToFiles();
    private void RenameRefs();
    private void RenameRefs(IMetadataAssembly assembly);
    private void RenameTypeRefs(IMetadataAssembly assembly);
    private void RenameMemberRefs(IMetadataAssembly assembly);
    private void RenameDefs();
    private void RenameTypeDefs(IMetadataAssembly assembly);
    private void RenameStringAtOffset(IMetadataAssembly assembly, ILReaderMetadataAccess access, int offset);
    private void RenameMemberDefs(IMetadataAssembly assembly);
    private int ToAbsolute(int offset, ILReaderMetadataAccess access);
    private void BuildExclusionList();
    private void ExcludeObfuscationAttrs(IMetadataAssembly assembly);
    private bool HasObfuscationAttributes(IMetadataEntity metadataMethod);
    private void ExcludeVirtualMethods(IMetadataAssembly assembly);
    private bool IsVirtual(IMetadataMethod metadataMethod);
    private void ExcludeUserDefs(IMetadataAssembly assembly, bool user);
    private bool IsExternal(MetadataToken methodToken, ILReaderMetadataAccess access);
    private void ExcludeToken(ILReaderMetadataAccess access, MetadataToken defToken, int skip);
    private void ExcludeInterfaceMethodImpls(IMetadataAssembly assembly);
    private void GetUniqueNames(IMetadataAssembly assembly);
    public void WriteResults();
    private void LoadMemberRefs(IMetadataAssembly assembly);
    private void LoadTypeRefs(IMetadataAssembly assembly);
    private bool IsTypeOuterRef(ILReaderMetadataAccess access, int offset);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static SimpleFileItem <ApplyReplacementsToFiles>b__8(SimpleFileItem file, Byte[] snk);
    [CompilerGeneratedAttribute]
private static FileSystemPath <WriteResults>b__10(IMetadataAssembly assembly);
    [CompilerGeneratedAttribute]
private static FileSystemPath <WriteResults>b__11(IMetadataAssembly assembly);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <IsTypeOuterRef>b__17(IMetadataAssembly assembly);
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.OpenInIdeInternalModeApplicabilityArtifact/OpenInIdeInternalModeApplicabilityArtifactConverter")]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInIdeInternalModeApplicabilityArtifact/OpenInIdeInternalModeApplicabilityArtifactSerializer")]
public class JetBrains.Application.BuildScript.OpenInIdeInternalModeApplicabilityArtifact : object {
    public bool CanSetInternalMode;
    public OpenInIdeInternalModeApplicabilityArtifact(bool canSetInternalMode);
    private static OpenInIdeInternalModeApplicabilityArtifact Deserialize(string value);
    private static string Serialize(OpenInIdeInternalModeApplicabilityArtifact value);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioBuildSolutionArtifact/OpenInVisualStudioBuildSolutionArtifactSerializer")]
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioBuildSolutionArtifact/OpenInVisualStudioBuildSolutionArtifactConverter")]
public class JetBrains.Application.BuildScript.OpenInVisualStudioBuildSolutionArtifact : object {
    public bool BuildSolution;
    public OpenInVisualStudioBuildSolutionArtifact(bool buildSolution);
    private static OpenInVisualStudioBuildSolutionArtifact Deserialize(string value);
    private static string Serialize(OpenInVisualStudioBuildSolutionArtifact value);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioInstallDirArtifact/OpenInVisualStudioInstallDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.OpenInVisualStudioInstallDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath InstallPath;
    public OpenInVisualStudioInstallDirArtifact(FileSystemPath installPath);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioInternalModeArtifact/OpenInVisualStudioInternalModeArtifactConverter")]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioInternalModeArtifact/OpenInVisualStudioInternalModeArtifactSerializer")]
public class JetBrains.Application.BuildScript.OpenInVisualStudioInternalModeArtifact : object {
    public bool InternalMode;
    public OpenInVisualStudioInternalModeArtifact(bool internalMode);
    private static OpenInVisualStudioInternalModeArtifact Deserialize(string value);
    private static string Serialize(OpenInVisualStudioInternalModeArtifact value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.OutputFileArtifact : BuildStageOutputFileArtifactBase {
    public OutputFileArtifact(SimpleFileItem file);
    public OutputFileArtifact(IStructuredStorage sstg);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata/PackageDefaultPrereleaseMetadataSerializer")]
public class JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata : object {
    [NotNullAttribute]
public string PrereleaseMetadata;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [BuildStepAttribute]
[NotNullAttribute]
public static PackageDefaultPrereleaseMetadata DefaultValue { get; }
    public PackageDefaultPrereleaseMetadata(string prereleasemetadata);
    public static PackageDefaultPrereleaseMetadata get_DefaultValue();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <get_DefaultValue>b__0(string s);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PackageFileRoleEx : object {
    [ExtensionAttribute]
public static RelativePath GetBaseFolderInPackage(PackageFileRole thіs);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PackageReferenceArtifact : object {
    [NotNullAttribute]
public JetPackageReference PackageReference;
    public PackageReferenceFlags ReferencingContextFlags;
    [CanBeNullAttribute]
public RelativePath ReferencingProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName ReferencingSubplatformName;
    public PackageReferenceArtifact(JetPackageReference rf, SubplatformName subplatform, RelativePath relProjectInSubplatform, PackageReferenceFlags flags);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadata>")]
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadata>")]
public class JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadata : object {
    [CanBeNullAttribute]
[DataMemberAttribute]
public JetSubplatformZoningSpecArtifact ZoningSpec;
    [CanBeNullAttribute]
[DataMemberAttribute]
public ProductInfo ProductInfo;
    [DataMemberAttribute]
public JetSubplatformSpec Spec;
}
[DataContractAttribute]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec>")]
public class JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec : object {
    [CanBeNullAttribute]
[DataMemberAttribute]
public string AutomaticFeature;
    [DataMemberAttribute]
[CanBeNullAttribute]
public Int32[] VsHosts;
    [DataMemberAttribute]
[CanBeNullAttribute]
public string HostName;
    [DataMemberAttribute]
[CanBeNullAttribute]
public string ComplementedProductName;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__0(int x);
}
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact>")]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact>")]
[DataContractAttribute]
public class JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact : object {
    [DataMemberAttribute]
public String[] Activates;
    [DataMemberAttribute]
public String[][] Requires;
    [DataMemberAttribute]
public JetZoneDefSpec[] ZoneDefs;
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetZoneDefSpec>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetZoneDefSpec>")]
public class JetBrains.Application.BuildScript.PackageSpecification.JetZoneDefSpec : object {
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public String[] Extends;
    [DataMemberAttribute]
public String[] Requires;
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.PackageSpecification.PackageZoningSpecTasks : object {
    private static KeyEnumerator`2<StringSource, ZonesAndTypes, StringSource, StringSource> myFEnumNameParts;
    [CompilerGeneratedAttribute]
private static Func`2<PackagePartCatalogArtifact, SubplatformName> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<PackagePartCatalogArtifact, PrecalculatedPartCatalog> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<Subplatform, AsyncLazy`1<CatalogTables>>, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<Subplatform, AsyncLazy`1<CatalogTables>>, SubplatformName> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<Subplatform, AsyncLazy`1<CatalogTables>>, AsyncLazy`1<CatalogTables>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType3`2<SubplatformOnSources, JetSubplatformZoningSpecArtifact>, SubplatformComponentForPackaging> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static AddOrUpdateHandler`1<StringSource, ZonesAndTypes, StringSource> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Action`1<ZonesAndTypes> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, StringSource> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, StringSource> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, string> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, string> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<JetHashSet`1<ZonePart>, String[]> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, string> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static KeyEnumerator`2<StringSource, ZonesAndTypes, StringSource, StringSource> CS$<>9__CachedAnonymousMethodDelegate41;
    private static PackageZoningSpecTasks();
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackaging> EmitZoningSpecsForAllAssemblies(Lifetime lifetime, AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass, ICollection`1<PackagePartCatalogArtifact> catalogs, IBuildTimeRealizedAssemblyItemUnification unification, ILogger logger);
    private static List`1<JetHashSet`1<ZonePart>> CalculatePackageZoneMinRequirements(PartCatalog catalog, PartCatalogZoneMapping zoning, JetHashSet`1<StringSource> hashAssembliesOur);
    private static void CalculatePackageZoneMinRequirements_AssemblyRecurseNames(TrieNode<StringSource, ZonesAndTypes> node, ZonePart[] current, List`1<JetHashSet`1<ZonePart>> output);
    private static void CalculatePackageZoneMinRequirements_AssemblyRecurseNames_AddSet(ZonePart[] current, List`1<JetHashSet`1<ZonePart>> output);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PackageSpecification.PackageZoningSpecTasks/<EmitZoningSpecForSubplatformAsync>d__33")]
private static Task`1<JetSubplatformZoningSpecArtifact> EmitZoningSpecForSubplatformAsync(Lifetime lifetime, SubplatformOnSources sub, AllAssembliesOnEverything allass, IBuildTimeRealizedAssemblyItemUnification unification, Dictionary`2<SubplatformName, AsyncLazy`1<CatalogTables>> mapSubToCatalogTables, ILogger logger);
    private static AsyncLazy`1<CatalogTables> LoadCatablesForSub(Lifetime lifetime, Subplatform sub, ILookup`2<SubplatformName, PrecalculatedPartCatalog> lookupCatalogs, ILogger logger);
    [CompilerGeneratedAttribute]
private static SubplatformName <EmitZoningSpecsForAllAssemblies>b__0(PackagePartCatalogArtifact ppca);
    [CompilerGeneratedAttribute]
private static PrecalculatedPartCatalog <EmitZoningSpecsForAllAssemblies>b__1(PackagePartCatalogArtifact ppca);
    [CompilerGeneratedAttribute]
private static bool <EmitZoningSpecsForAllAssemblies>b__4(<>f__AnonymousType2`2<Subplatform, AsyncLazy`1<CatalogTables>> o);
    [CompilerGeneratedAttribute]
private static SubplatformName <EmitZoningSpecsForAllAssemblies>b__5(<>f__AnonymousType2`2<Subplatform, AsyncLazy`1<CatalogTables>> t);
    [CompilerGeneratedAttribute]
private static AsyncLazy`1<CatalogTables> <EmitZoningSpecsForAllAssemblies>b__6(<>f__AnonymousType2`2<Subplatform, AsyncLazy`1<CatalogTables>> t);
    [CompilerGeneratedAttribute]
private static SubplatformComponentForPackaging <EmitZoningSpecsForAllAssemblies>b__9(<>f__AnonymousType3`2<SubplatformOnSources, JetSubplatformZoningSpecArtifact> t);
    [CompilerGeneratedAttribute]
private static ZonesAndTypes <CalculatePackageZoneMinRequirements>b__1a(bool isExist, ZonesAndTypes exist, StringSource context);
    [CompilerGeneratedAttribute]
private static void <CalculatePackageZoneMinRequirements>b__1b(ZonesAndTypes x);
    [CompilerGeneratedAttribute]
private static StringSource <EmitZoningSpecForSubplatformAsync>b__1f(AssemblyNameInfo assname);
    [CompilerGeneratedAttribute]
private static StringSource <EmitZoningSpecForSubplatformAsync>b__21(AssemblyNameInfo assname);
    [CompilerGeneratedAttribute]
private static string <EmitZoningSpecForSubplatformAsync>b__22(ZonePart zp);
    [CompilerGeneratedAttribute]
private static string <EmitZoningSpecForSubplatformAsync>b__23(ZonePart zp);
    [CompilerGeneratedAttribute]
private static String[] <EmitZoningSpecForSubplatformAsync>b__24(JetHashSet`1<ZonePart> set);
    [CompilerGeneratedAttribute]
private static string <EmitZoningSpecForSubplatformAsync>b__25(ZonePart zone);
    [CompilerGeneratedAttribute]
private static string <EmitZoningSpecForSubplatformAsync>b__26(string o);
    [CompilerGeneratedAttribute]
private static string <EmitZoningSpecForSubplatformAsync>b__27(string o);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__40(StringSource fullname, StringSource& left, StringSource& key);
}
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.ProductInfo>")]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.ProductInfo>")]
public class JetBrains.Application.BuildScript.PackageSpecification.ProductInfo : object {
    [DataMemberAttribute]
public string ProductTechnicalName;
    [DataMemberAttribute]
public string ProductPresentableName;
    [DataMemberAttribute]
public string ProductDetails;
    [DataMemberAttribute]
public string CompanyNameLegal;
    [DataMemberAttribute]
public string CompanyName;
    [DataMemberAttribute]
[CanBeNullAttribute]
public Version _VersionObsolete;
    [DataMemberAttribute]
public JetSemanticVersion Version;
    [DataMemberAttribute]
public string VersionMarketingString;
    [DataMemberAttribute]
public string ProductUrl;
    [DataMemberAttribute]
public string ProductTwitterUrl;
    [DataMemberAttribute]
public string ProductUrlEvaluate;
    [DataMemberAttribute]
public DateTime BuildDate;
    [DataMemberAttribute]
public DateTime SubscriptionCheckDate;
    [DataMemberAttribute]
public string Icon;
    private string JetBrains.Application.BuildScript.IProductInfo.ProductTechnicalName { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductPresentableName { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.CompanyNameLegal { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.CompanyName { get; }
    private JetSemanticVersion JetBrains.Application.BuildScript.IProductInfo.Version { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.VersionMarketingString { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductUrl { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductTwitterUrl { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductUrlEvaluate { get; }
    private Icon JetBrains.Application.BuildScript.IProductInfo.ProductIcon { get; }
    private DateTime JetBrains.Application.BuildScript.IProductInfo.BuildDate { get; }
    private DateTime JetBrains.Application.BuildScript.IProductInfo.SubscriptionCheckDate { get; }
    public string FullNameAndCompany();
    public string FullName();
    public virtual string ToString();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductTechnicalName();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductPresentableName();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_CompanyNameLegal();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_CompanyName();
    private sealed virtual override JetSemanticVersion JetBrains.Application.BuildScript.IProductInfo.get_Version();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_VersionMarketingString();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductUrl();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductTwitterUrl();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductUrlEvaluate();
    private sealed virtual override Icon JetBrains.Application.BuildScript.IProductInfo.get_ProductIcon();
    private sealed virtual override DateTime JetBrains.Application.BuildScript.IProductInfo.get_BuildDate();
    private sealed virtual override DateTime JetBrains.Application.BuildScript.IProductInfo.get_SubscriptionCheckDate();
}
internal class JetBrains.Application.BuildScript.PackageSpecification.ZonesAndTypes : object {
    public bool IsWithParts;
    [CanBeNullAttribute]
public ZonePart[] Zones;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.ParserEx : object {
    private static Parser`1<T> ParseSingleEnumValue(string name);
    public static Parser`1<T> CreateEnumParser();
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> XUntil(Parser`1<T> parser, Parser`1<U> until);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PerMachineInstallArtifact/PerMachineInstallArtifactSerializer")]
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.PerMachineInstallArtifact/PerMachineInstallArtifactConverter")]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PerMachineInstallArtifact : object {
    public bool IsPerMachine;
    public PerMachineInstallArtifact(bool perMachine);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PreCompile.Autofix.Helpers : object {
    public static bool IsCanPatchPackageConfig;
    public static string NsMsbuild;
    private static Helpers();
    public static XmlElement FindUnconditionalProperty(XmlDocument xml, XmlNamespaceManager ns, string propertyname, bool bFailIfMissing);
    [NotNullAttribute]
[ExtensionAttribute]
public static XmlNamespaceManager GetMsbuildNs(XmlNode xml);
    public static XmlElement GetUnconditionalPropertyGroup(XmlDocument xml, XmlNamespaceManager ns);
    public static void RemoveAllProjectPropertiesInList(XmlDocument xml, IList`1<string> propsToRemove);
    [ExtensionAttribute]
public static void RemoveSelf(XmlNode xmlNode);
    public static Nullable`1<bool> SaveIfLive(XmlDocument xml, FileSystemPath file, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
public class JetBrains.Application.BuildScript.PreCompile.Autofix.LocalAutofixProjectFiles : object {
    [BuildStepAttribute]
public LocalAutofixProjectFiles(INestedBuildRunnerOnSources nester, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger, SourcesValidationResult& validation);
    [BuildStepAttribute]
public static EntryLocalAutofixFiles SpawnCompileStageValidation(INestedBuildRunnerOnSources nester, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
}
public static class JetBrains.Application.BuildScript.PreCompile.Autofix.Stages : object {
    private static HashSet`1<string> WellKnownGacAssemblies;
    public static string EvaluatedTargetsFileSuffixWithDot;
    private static SubplatformName DevKitSubplatformName;
    [CompilerGeneratedAttribute]
private static Func`2<InjectToolPackageArtifact, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>, JetPackageReference> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>>, string> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>>>, bool> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>>, JetPackageReference> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>>, IEnumerable`1<JetPackageReference>> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`2<JetPackageReference, DeferQuotedObject> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<JetPackageReference, FrameworkName> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`2<JetPackageReference, bool> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<JetPackageReference, SemanticVersion> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>>, IEnumerable`1<<>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>>> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Action`1<XmlElement> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>, JetPackageReference> CS$<>9__CachedAnonymousMethodDelegate3f;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, IEnumerable`1<Pair`2<AssemblyNameInfo, Subplatform>>> CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<AssemblyNameInfo, Subplatform>, string> CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static Func`2<ConfigFileInfo, bool> CS$<>9__CachedAnonymousMethodDelegate58;
    [CompilerGeneratedAttribute]
private static Func`2<PackageReference, bool> CS$<>9__CachedAnonymousMethodDelegate59;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate67;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate68;
    [CompilerGeneratedAttribute]
private static Func`2<XmlAttribute, bool> CS$<>9__CachedAnonymousMethodDelegate6d;
    [CompilerGeneratedAttribute]
private static Func`2<XmlAttribute, bool> CS$<>9__CachedAnonymousMethodDelegate6e;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, IEnumerable`1<XmlElement>> CS$<>9__CachedAnonymousMethodDelegate71;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, bool> CS$<>9__CachedAnonymousMethodDelegate72;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, bool> CS$<>9__CachedAnonymousMethodDelegate77;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, bool> CS$<>9__CachedAnonymousMethodDelegate78;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, bool> CS$<>9__CachedAnonymousMethodDelegate79;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, bool> CS$<>9__CachedAnonymousMethodDelegate7a;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate80;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate81;
    [CompilerGeneratedAttribute]
private static Func`2<string, int> CS$<>9__CachedAnonymousMethodDelegate82;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate83;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate84;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate8a;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate92;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate93;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, bool> CS$<>9__CachedAnonymousMethodDelegate94;
    private static Stages();
    public static void CleanupProjectProperties(XmlDocument xml);
    public static void CorrectProjectReferences(XmlDocument xml, FileSystemPath thisFilePath, SubplatformOnSources subplatform, AllAssembliesOnSources allassSrc, SubplatformReferencesValidator subvalidator, ILogger logger);
    public static void FixNugetPackageReferenceRelativePaths(XmlDocument xml, FileSystemPath pathProj, AllAssembliesOnSources allass, ILogger logger);
    public static bool GlobalEnsureSameNugetReferenceVersion(AllAssembliesOnSources allass, InjectToolPackageArtifact[] injections, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void KillOutputPathOverrides(XmlDocument xml, ILogger logger);
    public static void FixDllReferences(XmlDocument xml, FileSystemPath fi, SubplatformOnSources subplatform, AllAssembliesOnSources allass, AllAssembliesOnEverything allassall, LookupFilesInNugetPackages lookupFilesInNugetPackages, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private static bool FixDllReferences_ProjectReference(FileSystemPath fi, XmlDllReference reference, AllAssembliesOnSources allass, ILookup`2<string, Pair`2<AssemblyNameInfo, Subplatform>> lookupSubplatformAssemblies, ILogger logger);
    private static void FixDllReferences_Nuget(FileSystemPath projectFile, XmlDllReference reference, SubplatformOnSources subplatform, AllAssembliesOnSources allass, LookupFilesInNugetPackages lookupFilesInNugetPackages, Boxed`1<JetHashSet`1<PackageIdentity>> hashNuggetRefsLegit, Boolean& isPackagesConfigModificationWarned, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void MergeAdjacentItemGroups(XmlDocument xml, RelativePath relProj, ILogger logger);
    public static void RemoveEmptyEntities(XmlDocument xml, RelativePath relProj, ILogger logger);
    public static void RemoveStuffedAssemblyName(XmlDocument xml);
    public static void SerializeEmptyElementsInShortFormat(XmlDocument xmlDoc);
    public static void SetupStuffingImportDirectives(XmlDocument xml, FileSystemPath fi);
    public static void SingleProjectConfiguration(XmlDocument xml);
    public static void UpdateReferencePrivateMetadata(XmlDocument xml, Nullable`1<bool> newvalue, ILogger logger);
    private static void NugetDllReferences_AddReferenceToConfigFile(PackageIdentity packageName, FileSystemPath fiPackagesConfig, AllAssembliesOnSources allass, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void NugetRootFolderImpors(XmlDocument xmlDoc, ILogger logger);
    public static void MakeImportTargetsUnconditional(XmlDocument xmlDoc, ILogger logger);
    public static void RemoveImportMicrosoftCommonProps(XmlDocument xmlDoc, ILogger logger);
    public static void MakePathsMatchSourceControlCasing(XmlDocument xml, FileSystemPath projectFilePath, WorkingCopyTreeHelper wch, AllAssembliesOnSources allasssrc, ILogger logger);
    private static string ReportXmlAttr(XmlAttribute attr);
    public static void GlobalAssertNoDeepProjects(AllAssembliesOnSources allass, ILogger logger);
    public static void MakeWildcardFriendly(XmlDocument xmlProj, FileSystemPath fileProj, AllAssembliesOnSources allasssrc, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference> <GlobalEnsureSameNugetReferenceVersion>b__11(InjectToolPackageArtifact inject);
    [CompilerGeneratedAttribute]
private static JetPackageReference <GlobalEnsureSameNugetReferenceVersion>b__12(<>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference> pr);
    [CompilerGeneratedAttribute]
private static string <GlobalEnsureSameNugetReferenceVersion>b__13(IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>> g);
    [CompilerGeneratedAttribute]
private static bool <GlobalEnsureSameNugetReferenceVersion>b__14(IGrouping`2<string, IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>>> g);
    [CompilerGeneratedAttribute]
private static JetPackageReference <GlobalEnsureSameNugetReferenceVersion>b__15(IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>> g);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<JetPackageReference> <GlobalEnsureSameNugetReferenceVersion>b__18(IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>> g);
    [CompilerGeneratedAttribute]
private static DeferQuotedObject <GlobalEnsureSameNugetReferenceVersion>b__1a(JetPackageReference pr);
    [CompilerGeneratedAttribute]
private static FrameworkName <GlobalEnsureSameNugetReferenceVersion>b__1b(JetPackageReference pr);
    [CompilerGeneratedAttribute]
private static bool <GlobalEnsureSameNugetReferenceVersion>b__1c(JetPackageReference pr);
    [CompilerGeneratedAttribute]
private static SemanticVersion <GlobalEnsureSameNugetReferenceVersion>b__1d(JetPackageReference pr);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>> <GlobalEnsureSameNugetReferenceVersion>b__1e(IGrouping`2<JetPackageReference, <>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference>> g);
    [CompilerGeneratedAttribute]
private static string <GlobalEnsureSameNugetReferenceVersion>b__20(XmlElement xml);
    [CompilerGeneratedAttribute]
private static void <GlobalEnsureSameNugetReferenceVersion>b__21(XmlElement xml);
    [CompilerGeneratedAttribute]
private static JetPackageReference <GlobalEnsureSameNugetReferenceVersion>b__19(<>f__AnonymousType43`3<SubplatformName, FileSystemPath, JetPackageReference> tuple);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Pair`2<AssemblyNameInfo, Subplatform>> <FixDllReferences>b__42(Subplatform sp);
    [CompilerGeneratedAttribute]
private static string <FixDllReferences>b__44(Pair`2<AssemblyNameInfo, Subplatform> t);
    [CompilerGeneratedAttribute]
private static bool <FixDllReferences_Nuget>b__50(ConfigFileInfo info);
    [CompilerGeneratedAttribute]
private static bool <FixDllReferences_Nuget>b__51(PackageReference pr);
    [CompilerGeneratedAttribute]
private static string <MergeAdjacentItemGroups>b__64(XmlElement xe);
    [CompilerGeneratedAttribute]
private static string <MergeAdjacentItemGroups>b__65(XmlElement xe);
    [CompilerGeneratedAttribute]
private static bool <RemoveEmptyEntities>b__6b(XmlAttribute attr);
    [CompilerGeneratedAttribute]
private static bool <RemoveEmptyEntities>b__6c(XmlAttribute attr);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<XmlElement> <SerializeEmptyElementsInShortFormat>b__6f(XmlElement element);
    [CompilerGeneratedAttribute]
private static bool <SerializeEmptyElementsInShortFormat>b__70(XmlNode node);
    [CompilerGeneratedAttribute]
private static bool <SetupStuffingImportDirectives>b__73(XmlElement xmlImport);
    [CompilerGeneratedAttribute]
private static bool <SetupStuffingImportDirectives>b__74(XmlElement xmlImport);
    [CompilerGeneratedAttribute]
private static bool <SetupStuffingImportDirectives>b__75(XmlElement xmlImport);
    [CompilerGeneratedAttribute]
private static bool <SetupStuffingImportDirectives>b__76(XmlElement xmlImport);
    [CompilerGeneratedAttribute]
private static string <SingleProjectConfiguration>b__7b(XmlElement x);
    [CompilerGeneratedAttribute]
private static string <SingleProjectConfiguration>b__7c(string s);
    [CompilerGeneratedAttribute]
private static int <SingleProjectConfiguration>b__7d(string s);
    [CompilerGeneratedAttribute]
private static bool <SingleProjectConfiguration>b__7e(int n);
    [CompilerGeneratedAttribute]
private static string <SingleProjectConfiguration>b__7f(int n);
    [CompilerGeneratedAttribute]
private static string <ReportXmlAttr>b__89(XmlElement xml);
    [CompilerGeneratedAttribute]
private static string <MakeWildcardFriendly>b__8b(XmlElement xe);
    [CompilerGeneratedAttribute]
private static bool <MakeWildcardFriendly>b__8c(string s);
    [CompilerGeneratedAttribute]
private static bool <MakeWildcardFriendly>b__91(XmlElement xe);
}
public class JetBrains.Application.BuildScript.PreCompile.Autofix.SubplatformReferencesValidator : object {
    private ILogger myLogger;
    public DirectedGraphWithEdges`2<SubplatformName, RefKind> References;
    private static Func`3<RefKind, RefKind, RefKind> MergeFlags;
    public IDictionary`2<RelativePath, Subplatform> MapProjectToSub;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<Edge<SubplatformName, RefKind>, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`3<RefKind, RefKind, RefKind> CS$<>9__CachedAnonymousMethodDelegate13;
    public SubplatformReferencesValidator(AllAssembliesOnEverything allassAll, AllAssembliesOnSources allassSrc, ILogger logger);
    private static SubplatformReferencesValidator();
    [NotNullAttribute]
private static IDictionary`2<RelativePath, Subplatform> InitMapProjectToSub(AllAssembliesOnEverything allassAll, ILogger logger);
    public bool ValidateUseOfSubplatform(SubplatformName who, SubplatformName what, string context);
    public bool ApplyAutofixes(Optional`1<CanAutofixFilesOnDisk> isModeLive);
    [CompilerGeneratedAttribute]
private static SubplatformName <.ctor>b__0(Subplatform sub);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Edge<SubplatformName, RefKind>> <.ctor>b__2(SubplatformName from);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(Edge<SubplatformName, RefKind> e);
    [CompilerGeneratedAttribute]
private static RefKind <.cctor>b__12(RefKind ka, RefKind kb);
}
public class JetBrains.Application.BuildScript.PreCompile.Autofix.WalkFilter : object {
    private static Regex ExcludeNone;
    private static Regex IncludeAll;
    public Regex DirExclude;
    public Regex DirInclude;
    public Regex FileExclude;
    public Regex FileInclude;
    public Regex RelativePathExclude;
    public Regex RelativePathInclude;
    public FileSystemPath WalkRoot;
    private static WalkFilter();
    public bool CheckFile(FileSystemPath file);
    public bool CheckFolder(FileSystemPath directory);
    public IEnumerable`1<FileSystemPath> Walk();
    private bool CheckRelative(FileSystemPath path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileSystemPath> <Walk>b__0(FileSystemPath path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileSystemPath> <Walk>b__1(FileSystemPath path);
}
public static class JetBrains.Application.BuildScript.PreCompile.Autofix.Worker : object {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, IEnumerable`1<<>f__AnonymousType44`2<SubplatformOnSources, RelativePath>>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType44`2<SubplatformOnSources, RelativePath>, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType44`2<SubplatformOnSources, RelativePath>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    public static LocalAutofixFilesSingleRun SubplatformAutofixProjects(AllAssembliesOnSources allass, AllAssembliesOnEverything allassall, InjectToolPackageArtifact[] injections, LookupFilesInNugetPackages lookupFilesInNugetPackages, Optional`1<CanAutofixFilesOnDisk> isModeLive, WorkingCopyTreeHelper wch, ILogger logger);
    private static bool SubplatformDecorateProjects_Single(FileSystemPath fi, SubplatformOnSources subplatform, AllAssembliesOnSources allasssrc, AllAssembliesOnEverything allassall, LookupFilesInNugetPackages lookupFilesInNugetPackages, SubplatformReferencesValidator subvalidator, Optional`1<CanAutofixFilesOnDisk> isModeLive, WorkingCopyTreeHelper wch, ILogger logger);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType44`2<SubplatformOnSources, RelativePath>> <SubplatformAutofixProjects>b__0(SubplatformOnSources sub);
    [CompilerGeneratedAttribute]
private static string <SubplatformAutofixProjects>b__2(<>f__AnonymousType44`2<SubplatformOnSources, RelativePath> x);
    [CompilerGeneratedAttribute]
private static string <SubplatformAutofixProjects>b__3(<>f__AnonymousType44`2<SubplatformOnSources, RelativePath> x);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PreCompile.BuildSourcesProj : object {
    private static Type[] ourBuildEntitiesOnSourcesReferenceAssemblies;
    private static Type[] ourSimpleBuildEntitiesOnSourcesReferenceAssemblies;
    private static String[] ReferencedPackageIds;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<string, XElement> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Assembly> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, IEnumerable`1<RelativePath>> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<RelativePath, XElement> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<ProfileNameArtifact, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    private static BuildSourcesProj();
    [BuildStepAttribute]
public static Tuple`2<LocalEmitBuildSourcesProj, LocalPrepareWorkingCopy> Emit(AllAssembliesOnSources allassOnSrc, RetrievedPackageReferenceArtifact[] retrieveds, ProductHomeDirArtifact homedir, Optional`1<ProfileNameArtifact> maybeProfile, ILogger logger);
    [NotNullAttribute]
[ExtensionAttribute]
private static XElement AddAliases(XElement item, string name);
    [CompilerGeneratedAttribute]
private static string <Emit>b__0(Type x);
    [CompilerGeneratedAttribute]
private static XElement <Emit>b__1(string x);
    [CompilerGeneratedAttribute]
private static string <Emit>b__2(XElement xe);
    [CompilerGeneratedAttribute]
private static string <Emit>b__7(XElement xe);
    [CompilerGeneratedAttribute]
private static Assembly <Emit>b__8(Type type);
    [CompilerGeneratedAttribute]
private static bool <Emit>b__b(XElement o);
    [CompilerGeneratedAttribute]
private static string <Emit>b__c(XElement xe);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<RelativePath> <Emit>b__d(SubplatformOnSources x);
    [CompilerGeneratedAttribute]
private static XElement <Emit>b__f(RelativePath x);
    [CompilerGeneratedAttribute]
private static string <Emit>b__10(ProfileNameArtifact x);
}
public static class JetBrains.Application.BuildScript.PreCompile.CallSetupProductRoot : object {
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy SetupProductRoot(ProductHomeDirArtifact homedir, ILogger logger);
}
[MemberwiseSerializableAttribute]
[BuildEntryPointAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.EntryLocalAutofixFiles : object {
}
public static class JetBrains.Application.BuildScript.PreCompile.EntryLocalPrepareWorkingCopyTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate6;
    [BuildStepAttribute]
public static EntryLocalPrepareWorkingCopy RunNestedLocalPrepareWorkingCopy(Lifetime lifetime, ProductHomeDirArtifact homedir, INestedBuildRunner nester, Optional`1<AllAssembliesFilterByProfile> prfilter, NestedInputArtifactsHelper nestart, ILogger logger);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <RunNestedLocalPrepareWorkingCopy>b__4(InputPackage ip);
}
public static class JetBrains.Application.BuildScript.PreCompile.EntryOpenInVisualStudioTasks : object {
    public static string ResharperBuildSolutionAfterOpenEnvVariable;
    private static EntryOpenInVisualStudioTasks();
    [BuildStepAttribute]
public static EntryOpenInIde RunOpenInVisualStudio(Lifetime lifetime, EntryLocalPrepareWorkingCopy prepareWorkingCopy, LocalEmitSolutionFile localEmitSolutionFile, OpenInVisualStudioInstallDirArtifact installDirArtifact, OpenInVisualStudioBuildSolutionArtifact buildSolutionArtifact, OpenInVisualStudioInternalModeArtifact internalModeArtifact, OpenInIdeInternalModeApplicabilityArtifact openInIdeInternalModeApplicabilityArtifact, ProductHomeDirArtifact homedir, ILogger logger);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.DispositionAgainstCommonTargetsSerializer")]
public enum JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.DispositionAgainstCommonTargets : Enum {
    public int value__;
    public static DispositionAgainstCommonTargets Before;
    public static DispositionAgainstCommonTargets After;
}
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.DispositionAgainstCommonTargetsSerializer : ValueSerializerBase`1<DispositionAgainstCommonTargets> {
    [CompilerGeneratedAttribute]
private static Func`2<DispositionAgainstCommonTargets, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<string, DispositionAgainstCommonTargets> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(DispositionAgainstCommonTargets x);
    [CompilerGeneratedAttribute]
private static DispositionAgainstCommonTargets <.ctor>b__1(string s);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml : GeneratedMsbuildElementBase {
    [NotNullAttribute]
public string Id;
    [NotNullAttribute]
public string XmlDocumentFragment;
    [CompilerGeneratedAttribute]
private static Func`2<XNode, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public GeneratedMsbuildCustomXml(SubplatformProjectWrapper subproj, string sId, string sXmlDocumentFragment, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildCustomXml(SubplatformProjectWrapper subproj, string sId, IEnumerable`1<XNode> content, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildCustomXml(SubplatformName subplatform, RelativePath projectInSubplatform, string sId, string sXmlDocumentFragment, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(XNode xe);
}
public abstract class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase : object {
    public string Condition;
    public DispositionAgainstCommonTargets Disposition;
    public double Priority;
    public RelativePath ProjectInSubplatform;
    public SubplatformName Subplatform;
    protected GeneratedMsbuildElementBase(SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildImport : GeneratedMsbuildElementBase {
    [NotNullAttribute]
public RelativePath ImportTarget;
    public GeneratedMsbuildImport(SubplatformProjectWrapper subproj, RelativePath importTarget, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildImport(SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, RelativePath importTarget, double priority, string condition);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject : object {
    [NotNullAttribute]
public SimpleFileItem File;
    [NotNullAttribute]
public ICollection`1<SimpleFileItem> ItemsToRealize;
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName Subplatform;
    public GeneratedMsbuildMainImportedProject(SubplatformName subplatform, RelativePath projectInSubplatform, SimpleFileItem file, ICollection`1<SimpleFileItem> itemsToRealize);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty : GeneratedMsbuildElementBase {
    public string PropertyName;
    public string PropertyValue;
    public GeneratedMsbuildProperty(string propertyName, string propertyValue, SubplatformProjectWrapper subproj, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildProperty(XName propertyName, string propertyValue, SubplatformProjectWrapper subproj, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildProperty(string propertyName, string propertyValue, SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildTaskItem : GeneratedMsbuildElementBase {
    public SimpleFileItem File;
    public string ItemGroupName;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, RelativePath> CS$<>9__CachedAnonymousMethodDelegate1;
    public GeneratedMsbuildTaskItem(string itemGroupName, SimpleFileItem file, SubplatformProjectWrapper subproj, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildTaskItem(string itemGroupName, SimpleFileItem file, SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static RelativePath <ToString>b__0(SimpleFileItem f);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile : object {
    [NotNullAttribute]
public SimpleFileItem File;
    [NotNullAttribute]
public FileSystemPath LocalPath;
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName Subplatform;
    [CompilerGeneratedAttribute]
private static Func`2<LocallyWrittenGeneratedMsbuildFile, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, LocallyWrittenGeneratedMsbuildFile>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public LocallyWrittenGeneratedMsbuildFile(SubplatformName subplatform, RelativePath projectInSubplatform, SimpleFileItem file, FileSystemPath localPath);
    [BuildStepAttribute]
public static LocallyWrittenGeneratedMsbuildFile[] LocallyWriteItemsForAllProjects(GeneratedMsbuildMainImportedProject[] projects, ProductHomeDirArtifact homedir, ILogger logger);
    [BuildStepAttribute]
public static Tuple`2<CompileSubplatformsInput, LocalPrepareWorkingCopy> MountLocallyWrittenGeneratedCompileItems(LocallyWrittenGeneratedMsbuildFile[] items);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <LocallyWriteItemsForAllProjects>b__0(LocallyWrittenGeneratedMsbuildFile written);
    [CompilerGeneratedAttribute]
private static bool <LocallyWriteItemsForAllProjects>b__1(IGrouping`2<string, LocallyWrittenGeneratedMsbuildFile> group);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LightweightMetadataFile : BuildStageOutputFileArtifactBase {
    public LightweightMetadataFile(SimpleFileItem file);
    public LightweightMetadataFile(IStructuredStorage sstg);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LocalEmitBuildSourcesProj : object {
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LocalPreExtractFastFilesForPackaging : object {
    [BuildStepAttribute]
public LocalPreExtractFastFilesForPackaging(ProductBinariesDirArtifact bindir, ICollection`1<SubplatformFileForPackagingFast> fastfiles, ILogger logger);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy MountIntoPWC(LocalPreExtractFastFilesForPackaging task);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LocalPrepareWorkingCopy : object {
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy PrepareWorkingCopy(LocalRestorePackages packages, LocalEmitSolutionFile solfile);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy Link_LocalSavePackagesToShadowPackagesDir_LocalPrepareWorkingCopy(LocalSavePackagesToShadowPackagesDir localSavePackagesToShadowPackagesDir);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy Link_EmitLightweightMetadataFiles_LocalPrepareWorkingCopy(WriteOutLightweightMetadataFiles writeOutLightweightMetadataFiles);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy Link_ExtractPackagesToBinDir_LocalPrepareWorkingCopy(ExtractPackagesToBinDir extractPackagesToBinDir);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LocalSavePackagesToShadowPackagesDir : object {
    [NotNullAttribute]
public SimpleFileItem WrittenPathsList;
    public LocalSavePackagesToShadowPackagesDir(SimpleFileItem writtenPathsList);
}
public static class JetBrains.Application.BuildScript.PreCompile.LocalSavePackagesToShadowPackagesDirTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, InputPackage>, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, InputPackage>, InputPackage> CS$<>9__CachedAnonymousMethodDelegate9;
    [BuildStepAttribute]
public static LocalSavePackagesToShadowPackagesDir DoLocalSavePackagesToShadowPackagesDir(ShadowPackageDirArtifact shadowBindir, InputPackage[] ipkgs, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <DoLocalSavePackagesToShadowPackagesDir>b__0(InputPackage dpkg);
    [CompilerGeneratedAttribute]
private static string <DoLocalSavePackagesToShadowPackagesDir>b__1(IGrouping`2<string, InputPackage> g);
    [CompilerGeneratedAttribute]
private static InputPackage <DoLocalSavePackagesToShadowPackagesDir>b__2(IGrouping`2<string, InputPackage> g);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LookupFilesInNugetPackages : object {
    public IList`1<NuFileItem> AllFiles;
    public IDictionary`2<IPackageName, NugetPackageFileItem> AllPackages;
    public ILookup`2<AssemblyNameInfo, NuFileItem> LookupByAssemblyNameAndVersion;
    public ILookup`2<AssemblyNameInfo, NuFileItem> LookupByBareAssemblyName;
    public ILookup`2<AssemblyNameInfo, NuFileItem> LookupByFullAssemblyName;
    public ILookup`2<PackageIdentity, NuFileItem> LookupByPackage;
    public ILookup`2<RelativePath, NuFileItem> LookupByRelPathEffective;
    public ILookup`2<RelativePath, NuFileItem> LookupByRelPathFull;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, RelativePath> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, RelativePath> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, PackageIdentity> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<NuFileItem, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    public LookupFilesInNugetPackages(RetrievedPackageReferenceArtifact[] retrpkgs, ILogger logger);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(NuFileItem file);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <.ctor>b__3(NuFileItem file);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__4(NuFileItem file);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <.ctor>b__5(NuFileItem file);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(NuFileItem file);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <.ctor>b__7(NuFileItem file);
    [CompilerGeneratedAttribute]
private static RelativePath <.ctor>b__8(NuFileItem file);
    [CompilerGeneratedAttribute]
private static RelativePath <.ctor>b__9(NuFileItem file);
    [CompilerGeneratedAttribute]
private static PackageIdentity <.ctor>b__a(NuFileItem file);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__b(NuFileItem file);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ChooseWellKnownCommonTargetsForProjectKind : object {
    private sealed virtual override string JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.IChooseCommonTargetsForProjectKind.GetCommonTargetsImportForProject(SimpleFileItem projfile);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DefineConstantArtifact : object {
    public string Name;
    [CompilerGeneratedAttribute]
private static Func`2<DefineConstantArtifact, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<DefineConstantArtifact, string> CS$<>9__CachedAnonymousMethodDelegated;
    public DefineConstantArtifact(string name);
    [NotNullAttribute]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildCustomXml> EmitCppClSpecificDefinesIntoMsbuild(AllAssembliesOnSources allassSrc, DefineConstantArtifact[] defines, ILogger logger);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> EmitDefinesIntoMsbuild(AllAssembliesOnSources allassSrc, DefineConstantArtifact[] defines, ILogger logger);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <EmitCppClSpecificDefinesIntoMsbuild>b__0(DefineConstantArtifact def);
    [CompilerGeneratedAttribute]
private static string <EmitDefinesIntoMsbuild>b__b(DefineConstantArtifact def);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.AssemblyVersionCs : object {
    [BuildStepAttribute]
public static GeneratedAssemblyAttributeArtifact[] AssemblyVersionFiles(AllAssembliesOnSources allass, BuildVersionSuffix versuffix, ILogger logger);
    public static void CalculateAssemblyVersion(BuildVersionSuffix versuffix, ILogger logger, SubplatformOnSources sub, Version& verCoerced, JetSemanticVersion& semanticVersion);
    [NotNullAttribute]
public static Version CoerceAssemblyVersionToWord(Version version, ILogger logger);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor/BuildChainFlavorSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor : object {
    public static BuildChainFlavorEnum DefaultValue;
    public BuildChainFlavorEnum Value;
    public BuildChainFlavor(BuildChainFlavorEnum value);
    private static BuildChainFlavor();
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum : Enum {
    public int value__;
    public static BuildChainFlavorEnum SNAPSHOT;
    public static BuildChainFlavorEnum EAP_DEV;
    public static BuildChainFlavorEnum EAP_PRODUCTION_CHECKED;
    public static BuildChainFlavorEnum EAP_PRODUCTION_UNCHECKED;
    public static BuildChainFlavorEnum RELEASE_CHECKED;
    public static BuildChainFlavorEnum RELEASE_UNCHECKED;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEx : object {
    private static string ourFixedSnapshotStamp;
    private static BuildChainFlavorEx();
    [ExtensionAttribute]
public static SemanticVersion SdkPackageVersion(BuildChainFlavor flavor, BuildVersionSuffix buildVersionSuffix);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact : object {
    [NotNullAttribute]
public CodeAttributeDeclaration AssemblyAttribute;
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName Subplatform;
    [CompilerGeneratedAttribute]
private static Func`3<CodeAttributeArgument, int, <>f__AnonymousType46`2<CodeAttributeArgument, int>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType46`2<CodeAttributeArgument, int>, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType46`2<CodeAttributeArgument, int>, int> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`3<CodeAttributeArgument, int, <>f__AnonymousType46`2<CodeAttributeArgument, int>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType46`2<CodeAttributeArgument, int>, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType46`2<CodeAttributeArgument, int>, int> CS$<>9__CachedAnonymousMethodDelegateb;
    public GeneratedAssemblyAttributeArtifact(SubplatformName subplatform, RelativePath projectInSubplatform, CodeAttributeDeclaration assemblyAttribute);
    public sealed virtual int CompareTo(GeneratedAssemblyAttributeArtifact other);
    public sealed virtual int CompareTo(object obj);
    public static bool op_GreaterThan(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
    public static bool op_GreaterThanOrEqual(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
    public static bool op_LessThan(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
    public static bool op_LessThanOrEqual(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType46`2<CodeAttributeArgument, int> <CompareTo>b__0(CodeAttributeArgument arg, int index);
    [CompilerGeneratedAttribute]
private static string <CompareTo>b__1(<>f__AnonymousType46`2<CodeAttributeArgument, int> t);
    [CompilerGeneratedAttribute]
private static int <CompareTo>b__2(<>f__AnonymousType46`2<CodeAttributeArgument, int> t);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType46`2<CodeAttributeArgument, int> <CompareTo>b__3(CodeAttributeArgument arg, int index);
    [CompilerGeneratedAttribute]
private static string <CompareTo>b__4(<>f__AnonymousType46`2<CodeAttributeArgument, int> t);
    [CompilerGeneratedAttribute]
private static int <CompareTo>b__5(<>f__AnonymousType46`2<CodeAttributeArgument, int> t);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedPerProjectCodeFiles : object {
    private static string TargetName;
    private static string TaskItemNameSpecial;
    [CompilerGeneratedAttribute]
private static Func`2<GeneratedAssemblyAttributeArtifact, <>f__AnonymousType47`2<SubplatformName, RelativePath>> CS$<>9__CachedAnonymousMethodDelegate4;
    private static GeneratedPerProjectCodeFiles();
    [BuildStepAttribute]
public static void EmitAssemblyCustomAttributes(AllAssembliesOnSources allass, GeneratedAssemblyAttributeArtifact[] assemblyattrs, List`1& taskitems, List`1& customs, ILogger logger);
    [CanBeNullAttribute]
private static string GuessSourceExtensionByProjectExtension(string sProjExtensionWithDot);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType47`2<SubplatformName, RelativePath> <EmitAssemblyCustomAttributes>b__1(GeneratedAssemblyAttributeArtifact elem);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit : object {
    [CompilerGeneratedAttribute]
private static Func`2<IntermediateOutputFolderPerProfileArtifact, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<IntermediateOutputFolderPerProfileArtifact, string> CS$<>9__CachedAnonymousMethodDelegate36;
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> BinAndObj(AllAssembliesOnSources allassSrc, ProductBinariesDirArtifact bindir, Optional`1<IntermediateOutputFolderPerProfileArtifact> maybeIntFolderPerProfile, ILogger logger);
    [BuildStepAttribute]
public static void CompilerWarnings(AllAssembliesOnSources allassSrc, ProductBinariesDirArtifact bindir, ILogger logger, IList`1& properties, IList`1& xmls);
    [BuildStepAttribute]
[NotNullAttribute]
public static IEnumerable`1<GeneratedMsbuildCustomXml> CppOptimize(AllAssembliesOnSources allassSrc, IsModeOptimize optimize);
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefaultDefineConstants();
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> DefineSolutionDirectories(AllAssembliesOnSources allassSrc, ILogger logger);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildCustomXml> DontCopyReferences(AllAssembliesOnSources allassSrc, ILogger logger);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> EnableXmlDocGeneration(AllAssembliesOnSources allassSrc, Optional`1<IntermediateOutputFolderPerProfileArtifact> maybeIntFolderPerProfile, ILogger logger);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> GeneralSettings(AllAssembliesOnSources allassSrc, IsModeOptimize optimize, Optional`1<ForceTargetFrameworkVersion> forceTargetFrameworkVersion, ILogger logger);
    [NotNullAttribute]
public static RelativePath GetProjectIntermediateOutputPathWithMacros(SubplatformProjectWrapper project, string intFolderPerProfile);
    public static RelativePath GetSubdirForOutputPathInSeparateFolders(SubplatformProjectWrapper subandproj);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> LanguageSettings(AllAssembliesOnSources allassSrc, ILogger logger);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> MsbuildWarnings(AllAssembliesOnSources allassSrc);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> StrongNameSign(AllAssembliesOnSources allassSrc, ILogger logger);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> SubplatformsAware(AllAssembliesOnSources allassSrc, Optional`1<ProfileNameArtifact> maybeProfile, ILogger logger);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> SuppressInProcessCompiler(AllAssembliesOnSources allassSrc, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <BinAndObj>b__0(IntermediateOutputFolderPerProfileArtifact x);
    [CompilerGeneratedAttribute]
private static string <CompilerWarnings>b__17(int n);
    [CompilerGeneratedAttribute]
private static string <CompilerWarnings>b__18(int n);
    [CompilerGeneratedAttribute]
private static string <CompilerWarnings>b__19(int n);
    [CompilerGeneratedAttribute]
private static string <CompilerWarnings>b__1a(int n);
    [CompilerGeneratedAttribute]
private static string <CompilerWarnings>b__1b(int n);
    [CompilerGeneratedAttribute]
private static string <EnableXmlDocGeneration>b__35(IntermediateOutputFolderPerProfileArtifact x);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAnnotateCallStacks/IsModeAnnotateCallStacksSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAnnotateCallStacks : object {
    public static bool DefaultValue;
    public static string DefineConstant;
    public bool IsOn;
    public IsModeAnnotateCallStacks(bool isOn);
    private static IsModeAnnotateCallStacks();
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeAnnotateCallStacks mode);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAssert/IsModeAssertSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAssert : object {
    public static bool DefaultValue;
    public static string DefineConstant;
    public bool IsOn;
    public IsModeAssert(bool isOn);
    private static IsModeAssert();
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeAssert mode);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeChecked/IsModeCheckedSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeChecked : object {
    public static bool DefaultValue;
    public bool IsOn;
    public IsModeChecked(bool isOn);
    private static IsModeChecked();
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeChecked mode);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize/IsModeOptimizeSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize : object {
    public static bool DefaultValue;
    public static string DefineConstant;
    public bool IsOn;
    public IsModeOptimize(bool isOn);
    private static IsModeOptimize();
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeOptimize mode);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions/IsModeReportExceptionsSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions : object {
    public static bool DefaultValue;
    public static string DefineConstant;
    public bool IsOn;
    [CompilerGeneratedAttribute]
private static Func`2<DontEmitModeAssemblyAttributesForProject, Pair`2<SubplatformName, RelativePath>> CS$<>9__CachedAnonymousMethodDelegate3;
    public IsModeReportExceptions(bool isOn);
    private static IsModeReportExceptions();
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedAssemblyAttributeArtifact> ApplyAssemblyCustomAttribute(IsModeReportExceptions mode, AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass, DontEmitModeAssemblyAttributesForProject[] dontemit);
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeReportExceptions mode);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static Pair`2<SubplatformName, RelativePath> <ApplyAssemblyCustomAttribute>b__0(DontEmitModeAssemblyAttributesForProject dont);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeStatistics/IsModeStatisticsSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeStatistics : object {
    public static bool DefaultValue;
    public static string DefineConstant;
    public bool IsOn;
    public IsModeStatistics(bool isOn);
    private static IsModeStatistics();
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeStatistics mode);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeUnchecked/IsModeUncheckedSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeUnchecked : object {
    public static bool DefaultValue;
    public bool IsOn;
    public IsModeUnchecked(bool isOn);
    private static IsModeUnchecked();
    [BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeUnchecked mode);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.EmitsPerProjectGeneratedTargets : object {
    public static string GeneratedTargetsFileNameBase;
    public static string GeneratedTargetsFileSuffixWithDot;
    public static Version2 MsbuildProjectVersion;
    [CompilerGeneratedAttribute]
private static Func`2<GeneratedMsbuildElementBase, <>f__AnonymousType47`2<SubplatformName, RelativePath>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<ProfileNameArtifact, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, IEnumerable`1<<>f__AnonymousType47`2<SubplatformName, RelativePath>>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IChooseCommonTargetsForProjectKind, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<GeneratedMsbuildElementBase, double> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<GeneratedMsbuildElementBase, int> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<GeneratedMsbuildElementBase, string> CS$<>9__CachedAnonymousMethodDelegate16;
    private static EmitsPerProjectGeneratedTargets();
    [BuildStepAttribute]
public static IList`1<GeneratedMsbuildMainImportedProject> EmitPerProjectGeneratedTargets(AllAssembliesOnSources allassSrc, GeneratedMsbuildTaskItem[] taskitems, GeneratedMsbuildImport[] imports, GeneratedMsbuildProperty[] properties, GeneratedMsbuildCustomXml[] customxml, IChooseCommonTargetsForProjectKind[] projectkind, Optional`1<ProfileNameArtifact> maybeProfile, ILogger logger);
    private static GeneratedMsbuildMainImportedProject DoForProject(SubplatformName subplatform, RelativePath projectInSubplatform, AllAssembliesOnSources allassSrc, ICollection`1<GeneratedMsbuildElementBase> elementsHere, string sCommonTargetsImport, string profileNameWithDot, ILogger logger);
    [CanBeNullAttribute]
private static string GetCommonTargetsImport(IChooseCommonTargetsForProjectKind[] projectkind, SimpleFileItem profile, ILogger logger);
    private static void WriteElement(GeneratedMsbuildElementBase element, XmlElement xmlProject, IList`1<SimpleFileItem> itemsToRealize, ILogger logger);
    private static void WriteElement_CustomXml(GeneratedMsbuildCustomXml element, XmlElement xmlProject, ILogger logger);
    private static void WriteElement_Import(GeneratedMsbuildImport element, XmlElement xmlProject, ILogger logger);
    private static void WriteElement_Property(GeneratedMsbuildProperty element, XmlElement xmlProject, ILogger logger);
    private static void WriteElement_TaskItem(GeneratedMsbuildTaskItem element, XmlElement xmlProject, IList`1<SimpleFileItem> itemsToRealize, ILogger logger);
    private static void WriteElementsSection(ICollection`1<GeneratedMsbuildElementBase> elementsUnfiltered, XmlElement xmlProject, DispositionAgainstCommonTargets disposition, IList`1<SimpleFileItem> itemsToRealize, ILogger logger);
    private static void WriteMainCommonTargets(string sCommonTargetsImport, XmlElement xmlProject, ILogger logger);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType47`2<SubplatformName, RelativePath> <EmitPerProjectGeneratedTargets>b__0(GeneratedMsbuildElementBase elem);
    [CompilerGeneratedAttribute]
private static string <EmitPerProjectGeneratedTargets>b__1(ProfileNameArtifact x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType47`2<SubplatformName, RelativePath>> <EmitPerProjectGeneratedTargets>b__2(SubplatformOnSources sub);
    [CompilerGeneratedAttribute]
private static string <GetCommonTargetsImport>b__d(IChooseCommonTargetsForProjectKind ch);
    [CompilerGeneratedAttribute]
private static double <WriteElementsSection>b__10(GeneratedMsbuildElementBase elem);
    [CompilerGeneratedAttribute]
private static int <WriteElementsSection>b__11(GeneratedMsbuildElementBase elem);
    [CompilerGeneratedAttribute]
private static string <WriteElementsSection>b__12(GeneratedMsbuildElementBase elem);
}
public interface JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.IChooseCommonTargetsForProjectKind {
    [CanBeNullAttribute]
public abstract virtual string GetCommonTargetsImportForProject(SimpleFileItem projfile);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SubstituteProjectReferencesWithAssemblyReferences : object {
    [CompilerGeneratedAttribute]
private static Func`2<Stream, XDocument> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, RelativePath> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<RelativePath, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, string> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<XName, XElement> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<RelativePath, XElement> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<int, ApplicationPackageFile>, int> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, string> CS$<>9__CachedAnonymousMethodDelegate24;
    [BuildStepAttribute]
public static void EmitSubstsForEachRef(AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass, ILogger logger, IList`1& compileitems, ICollection`1& customxmls, UsedSubplatformsWithBinRefs& usedrefs, Optional`1<IncrementalBuild> incremental);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> LocalBinaryProjectOutputsMacroName(AllAssembliesOnSources allassSrc, Optional`1<IncrementalBuild> incremental);
    private static void EmitForProject(AllAssembliesOnEverything allass, SubplatformProjectWrapper subandproj, ILogger logger, ICollection`1& compileitems, ICollection`1& subplatformsWithBinRefs, GeneratedMsbuildCustomXml& customxml, bool isIncremental);
    private static ApplicationPackageFile GetPackageFileOfReferencedProject(SubplatformProjectWrapper doingSubstsIn, SubplatformOnPackageEx spTargetPkg, RelativePath projReferenceToSubst, ILogger logger);
    private static int LongestCommonSubstringLength(string S, string T);
    [CompilerGeneratedAttribute]
private static XDocument <EmitForProject>b__8(Stream stream);
    [CompilerGeneratedAttribute]
private static RelativePath <EmitForProject>b__9(XElement xe);
    [CompilerGeneratedAttribute]
private static bool <EmitForProject>b__a(RelativePath rp);
    [CompilerGeneratedAttribute]
private static SubplatformName <EmitForProject>b__c(Subplatform sp);
    [CompilerGeneratedAttribute]
private static SubplatformName <EmitForProject>b__d(Subplatform sp);
    [CompilerGeneratedAttribute]
private static bool <EmitForProject>b__e(ApplicationPackageFile file);
    [CompilerGeneratedAttribute]
private static string <EmitForProject>b__f(ApplicationPackageFile file);
    [CompilerGeneratedAttribute]
private static XElement <EmitForProject>b__10(XName prop);
    [CompilerGeneratedAttribute]
private static XElement <EmitForProject>b__11(RelativePath pr);
    [CompilerGeneratedAttribute]
private static bool <GetPackageFileOfReferencedProject>b__1e(ApplicationPackageFile file);
    [CompilerGeneratedAttribute]
private static int <GetPackageFileOfReferencedProject>b__20(IGrouping`2<int, ApplicationPackageFile> g);
    [CompilerGeneratedAttribute]
private static string <GetPackageFileOfReferencedProject>b__21(ApplicationPackageFile file);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper : object {
    private ILogger Logger;
    private AllAssembliesOnEverything myAllAssemblies;
    private InputPackage[] myInputPackages;
    private UsedSubplatformsWithBinRefs myUsedSubplatformsWithBinRefs;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformName, string> CS$<>9__CachedAnonymousMethodDelegate2;
    public SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper(AllAssembliesOnEverything allass, InputPackage[] inputs, UsedSubplatformsWithBinRefs usedSubplatformsWithBinRefs, ILogger logger);
    [NotNullAttribute]
public FileSystemPath DeployReferenceReplacements(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static string <DeployReferenceReplacements>b__0(SubplatformName sname);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.UsedSubplatformsWithBinRefs : object {
    public JetHashSet`1<SubplatformName> SubplatformsWithBinRefs;
    public static string FolderNameFromSubplatformName(SubplatformName sname);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppEnableDeveloperMode/CppEnableDeveloperModeSerializer")]
public class JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppEnableDeveloperMode : object {
    public static bool DefaultValue;
    public bool IsOn;
    public CppEnableDeveloperMode(bool isOn);
    private static CppEnableDeveloperMode();
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppSuppressUnityBuild/CppSuppressUnityBuildSerializer")]
public class JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppSuppressUnityBuild : object {
    public static bool DefaultValue;
    public bool IsOn;
    public CppSuppressUnityBuild(bool isOn);
    private static CppSuppressUnityBuild();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PreCompile.PackageFileRoleEx : object {
    [ExtensionAttribute]
public static bool IsIncludedInMainPackage(PackageFileRole thіs);
    [ExtensionAttribute]
public static bool IsIncludedInSymbolsPackage(PackageFileRole thіs);
    [ExtensionAttribute]
public static bool IsInstalled(PackageFileRole thіs);
    [ExtensionAttribute]
public static bool IsListedInAppPackage(PackageFileRole thіs);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact : object {
    public RelativePath FileToImportFromPackage;
    public string PackageId;
    public JetSemanticVersion PackageVersion;
    public string SubplatformNamePassFilterRegex;
    public string Condition;
    [NotNullAttribute]
public PackageIdentity GetPackageIdentity();
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageTasks : object {
    [BuildStepAttribute]
public static List`1<GeneratedMsbuildImport> Inject(AllAssembliesOnSources allass, InjectToolPackageArtifact[] injections, LocalRestoredPackages packages, ILogger logger);
    [BuildStepAttribute]
public static List`1<PackageReferenceArtifact> RequestRetrieval(AllAssembliesOnSources allass, InjectToolPackageArtifact[] injections, ILogger logger);
}
public static class JetBrains.Application.BuildScript.PreCompile.ToolPackages.InternalsVisibleTo : object {
    [BuildStepAttribute]
public static InjectToolPackageArtifact Inject { get; }
    public static InjectToolPackageArtifact get_Inject();
}
public static class JetBrains.Application.BuildScript.PreCompile.ToolPackages.MsbuildCopyWithMoveAside : object {
    [BuildStepAttribute]
public static IEnumerable`1<InjectToolPackageArtifact> Inject { get; }
    public static IEnumerable`1<InjectToolPackageArtifact> get_Inject();
}
public static class JetBrains.Application.BuildScript.PreCompile.ToolPackages.ThemedIconsPacker : object {
    public static PackageIdentity PackageIdentity;
    [BuildStepAttribute]
public static InjectToolPackageArtifact Inject { get; }
    private static ThemedIconsPacker();
    public static InjectToolPackageArtifact get_Inject();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.WriteOutLightweightMetadataFiles : object {
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [BuildStepAttribute]
public WriteOutLightweightMetadataFiles(AllAssembliesOnSources allassembliesSrc, SubplatformsInAllInputPackages inAllInputPackages, ICollection`1<LightweightMetadataFile> metadataFiles, ProductBinariesDirArtifact productBinDirArt, ILogger logger);
    public static void TryCleanOutOldMetadataFiles(AllAssemblies interestingSet, Func`2<Subplatform, string> getFileNameFunc, string fileMetadataSuffix, FileSystemPath binDir, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(Subplatform x);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreviousBuildResults : object {
    private ILogger Logger;
    [NotNullAttribute]
public SerializedValuesResolver Artifacts;
    [CompilerGeneratedAttribute]
private static Func`2<IHaveBuildTransportPackages, IEnumerable`1<BuildTransportPackage>> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<BuildTransportPackage, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, NugetPackageFileItem>, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, NugetPackageFileItem>, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, string> CS$<>9__CachedAnonymousMethodDelegate12;
    public PreviousBuildResults(Lifetime lifetime, PreviousBuildResultStorages previousBuildResultStorages, ILogger logger);
    private PreviousBuildResults(Lifetime lifetime, Func`2<Lifetime, SerializedValuesResolver> λArtifacts, ILogger logger);
    [NotNullAttribute]
public static PreviousBuildResults Create(Lifetime lifetime, Func`2<Lifetime, SerializedValuesResolver> λArtifacts, ILogger logger);
    [NotNullAttribute]
public ICollection`1<NugetPackageFileItem> GetTransportPackages();
    [NotNullAttribute]
public ICollection`1<NugetPackageFileItem> TryGetTransportPackages();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<BuildTransportPackage> <TryGetTransportPackages>b__6(IHaveBuildTransportPackages have);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <TryGetTransportPackages>b__7(BuildTransportPackage tp);
    [CompilerGeneratedAttribute]
private static string <TryGetTransportPackages>b__8(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static bool <TryGetTransportPackages>b__9(IGrouping`2<string, NugetPackageFileItem> g);
    [CompilerGeneratedAttribute]
private void <TryGetTransportPackages>b__a(IGrouping`2<string, NugetPackageFileItem> g);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <TryGetTransportPackages>b__b(IGrouping`2<string, NugetPackageFileItem> g);
    [CompilerGeneratedAttribute]
private static string <TryGetTransportPackages>b__c(NugetPackageFileItem pkg);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreviousBuildResultsFolderArtifact/PreviousBuildResultsFolderArtifactSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreviousBuildResultsFolderArtifact : object {
    [NotNullAttribute]
public FileSystemPath PreviousBuildResultsFolder;
    public PreviousBuildResultsFolderArtifact(FileSystemPath previousBuildResultsFolder);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreviousBuildResultStorages : object {
    [NotNullAttribute]
public IList`1<SimpleFileItem> FilesWithPreviousBuildResultStorages;
    [CompilerGeneratedAttribute]
private static Func`2<IStructuredStorage, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public PreviousBuildResultStorages(IList`1<SimpleFileItem> filesWithPreviousBuildResultStorages);
    [BuildStepAttribute]
public PreviousBuildResultStorages(Optional`1<PreviousBuildResultsFolderArtifact> previousBuildResultsFolderArtifact, ILogger logger);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ProductBinariesDirArtifact/ProductBinariesDirArtifactSerializer")]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.ProductBinariesDirArtifact/ProductBinariesDirArtifactConverter")]
public class JetBrains.Application.BuildScript.ProductBinariesDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath ProductBinariesDir;
    [CompilerGeneratedAttribute]
private static Func`2<ProductBinariesDirRelativeHintArtifact, IPath> CS$<>9__CachedAnonymousMethodDelegate1;
    public ProductBinariesDirArtifact(FileSystemPath productBinariesDir);
    [BuildStepAttribute]
public ProductBinariesDirArtifact(ProductHomeDirArtifact homedir, Optional`1<ProductBinariesDirRelativeHintArtifact> maybeRelativeHint, Optional`1<ProfileNameArtifact> maybeProfileNameHint, ILogger logger);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static IPath <.ctor>b__0(ProductBinariesDirRelativeHintArtifact relhint);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact/ProductBinariesDirRelativeHintArtifactSerializer")]
public class JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact : object {
    [NotNullAttribute]
public IPath ProductBinariesDirRelativeHint;
    public ProductBinariesDirRelativeHintArtifact(IPath productBinariesDirRelativeHint);
    public virtual string ToString();
}
public class JetBrains.Application.BuildScript.ProductHeadlineBuilder : object {
    private StringBuilder myHeadline;
    [NotNullAttribute]
public ProductHeadlineBuilder ProductName(string productName);
    [NotNullAttribute]
public ProductHeadlineBuilder Version(BuildVersionSuffix version);
    [NotNullAttribute]
public ProductHeadlineBuilder Version(JetSemanticVersion version);
    [NotNullAttribute]
public ProductHeadlineBuilder Copyright(int sinceYear, bool useAnsiMark);
    [NotNullAttribute]
public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.ProductHomeDirArtifact/ProductHomeDirArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ProductHomeDirArtifact/ProductHomeDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.ProductHomeDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath ProductHomeDir;
    public ProductHomeDirArtifact(FileSystemPath productHomeDir);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.ProductNameAndVersionArtifact : object {
    [NotNullAttribute]
private string myCompanyNameHuman;
    [NotNullAttribute]
private string myCompanyNameLegal;
    [NotNullAttribute]
private string myProductName;
    [NotNullAttribute]
private JetSemanticVersion myProductVersion;
    private string Stream_CompanyNameHuman;
    private string Stream_CompanyNameLegal;
    private string Stream_ProductName;
    private string Stream_ProductVersion;
    public string CompanyNameHuman { get; }
    public string CompanyNameLegal { get; }
    public string ProductName { get; }
    public JetSemanticVersion ProductVersion { get; }
    [ObsoleteAttribute("Use a more complete overload.")]
public ProductNameAndVersionArtifact(string companyName, string productName, JetSemanticVersion productVersion);
    public ProductNameAndVersionArtifact(string sProductName, SubplatformOnSources subplatform, BuildVersionSuffix suffix);
    public ProductNameAndVersionArtifact(string sCompanyNameHuman, string sCompanyNameLegal, string sProductName, JetSemanticVersion versionProduct);
    public ProductNameAndVersionArtifact(IStructuredStorage storage);
    public ProductNameAndVersionArtifact(CsexpReader reader);
    public string get_CompanyNameHuman();
    public string get_CompanyNameLegal();
    public string get_ProductName();
    public JetSemanticVersion get_ProductVersion();
    public void GetObjectData(CsexpWriter writer);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
    private static void Serialize(CsexpArchive ar, String& companyNameHuman, String& companyNameLegal, String& productName, JetSemanticVersion& productVersion);
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.ProductNameFlags : Enum {
    public int value__;
    public static ProductNameFlags O;
    public static ProductNameFlags Name;
    public static ProductNameFlags Company;
    public static ProductNameFlags VersionMarketing;
    public static ProductNameFlags VersionFromPackage;
    public static ProductNameFlags BuildDateFromPackage;
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.ProductPartCatalogForBuild : object {
    [NotNullAttribute]
public IAssemblyMasterBinder MasterBinder;
    [NotNullAttribute]
public PartCatalog ProductPartCatalog;
    protected ProductPartCatalogForBuild(Tuple`2<PartCatalog, IAssemblyMasterBinder> data);
    [NotNullAttribute]
public static ProductPartCatalogForBuild CreateOnCatalog(PartCatalog catalog, IAssemblyMasterBinder masterbinder);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.ProductSolutionFile : object {
    public SimpleFileItem SlnFile;
    [BuildStepAttribute]
public static ProductSolutionFile Create(AllAssembliesOnSources allAssembliesOnSources);
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.ProfileNameArtifact/ProfileNameArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ProfileNameArtifact/ProfileNameArtifactSerializer")]
public class JetBrains.Application.BuildScript.ProfileNameArtifact : object {
    [NotNullAttribute]
public string ProfileName;
    public ProfileNameArtifact(string profile);
    [BuildStepAttribute]
public static ProfileNameArtifact InferDefaultProfileNameFromProductHomeDir(ProductHomeDirArtifact homedir, ILogger logger);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.ProfileNameArtUtil : object {
    private static Regex ourPattern;
    private static ProfileNameArtUtil();
    public static bool TryValidateName(string profile);
    public static void ValidateName(string profile);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact : object {
    public bool IsSynthetic;
    [NotNullAttribute]
public NugetPackageFileItem Package;
    [NotNullAttribute]
public ICollection`1<PackageReferenceArtifact> PackageReferences;
    [CompilerGeneratedAttribute]
private static Func`1<IDictionary`2<NugetPackageFileItem, DeployablePackageFlags>> CS$<>9__CachedAnonymousMethodDelegate1;
    private NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.Package { get; }
    public RetrievedPackageReferenceArtifact(PackageReferenceArtifact[] packageReferences, NugetPackageFileItem package, bool isSynthetic);
    [BuildStepAttribute]
public static DeployablePackage[] DeployNonDevelopmentPackageReferences(RetrievedPackageReferenceArtifact[] pkgs, ILogger logger);
    public virtual string ToString();
    private sealed virtual override NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.get_Package();
    [CompilerGeneratedAttribute]
private static IDictionary`2<NugetPackageFileItem, DeployablePackageFlags> <DeployNonDevelopmentPackageReferences>b__0();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.SerializedHostComponentItemArtifact : object {
    [NotNullAttribute]
public object ComponentForSerialization;
    public SerializedHostComponentItemArtifact(object componentForSerialization);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.SerializedHostComponentsCompositeArtifact : object {
    [NotNullAttribute]
public ChunkedMemoryStream SerializedValues;
    public SerializedHostComponentsCompositeArtifact(ChunkedMemoryStream serializedValues);
    [BuildStepAttribute]
public static SerializedHostComponentsCompositeArtifact ComposeHostComponentItems(SerializedHostComponentItemArtifact[] items);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ShadowPackageDirArtifact/ShadowPackageDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.ShadowPackageDirArtifact : object {
    private static string FolderName;
    [NotNullAttribute]
public FileSystemPath PrecompiledPackagesFolder;
    [BuildStepAttribute]
public ShadowPackageDirArtifact(ProductBinariesDirArtifact productBinDirArtifact);
    public ShadowPackageDirArtifact(FileSystemPath folder);
    private static ShadowPackageDirArtifact();
    public virtual string ToString();
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.SkipLocalCompilationArtifact/SkipLocalCompilationArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.SkipLocalCompilationArtifact/SkipLocalCompilationArtifactSerializer")]
public class JetBrains.Application.BuildScript.SkipLocalCompilationArtifact : object {
    public bool IsSkipCompileAll;
    public SkipLocalCompilationArtifact(bool isSkipCompileAll);
    private static SkipLocalCompilationArtifact Deserialize(string value);
    private static string Serialize(SkipLocalCompilationArtifact value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.SkipLocalCompilationCpp/SkipLocalCompilationCppConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.SkipLocalCompilationCpp/SkipLocalCompilationCppSerializer")]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.SkipLocalCompilationCpp : object {
    public bool IsSkipCompileCpp;
    public SkipLocalCompilationCpp(bool isSkipCompileCpp);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.SkipObfuscationArtifact/SkipObfuscationArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.SkipObfuscationArtifact/SkipObfuscationArtifactSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.SkipObfuscationArtifact : object {
    public bool IsSkip;
    public SkipObfuscationArtifact(bool isSkip);
    private static string Serialize(SkipObfuscationArtifact value);
    private static SkipObfuscationArtifact Deserialize(string value);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.SkipSourcesValidation/SkipSourcesValidationConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.SkipSourcesValidation/SkipSourcesValidationSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.SkipSourcesValidation : object {
    public bool IsSkipSourcesValidation;
    public SkipSourcesValidation(bool isSkipSourcesValidation);
    public virtual string ToString();
    private static SkipSourcesValidation Deserialize(string value);
    private static string Serialize(SkipSourcesValidation value);
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration/SkipStandaloneHostOsIntegrationConverter")]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration/SkipStandaloneHostOsIntegrationSerializer")]
public class JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration : object {
    public bool IsSkipOsIntegration;
    public SkipStandaloneHostOsIntegration(bool isSkipOsIntegration);
    public virtual string ToString();
    private static SkipStandaloneHostOsIntegration Deserialize(string value);
    private static string Serialize(SkipStandaloneHostOsIntegration value);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembilesEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static AllAssembliesAccess CreateAccess(AllAssembliesOnEverything thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static AllAssembliesOnSources Filter(AllAssembliesOnSources thіs, IAllAssembliesOnSrcFilter collinfo);
    [ExtensionAttribute]
[NotNullAttribute]
public static AllAssembliesOnPackages Filter(AllAssembliesOnPackages thіs, AllAssembliesFilter collinfo);
    [ExtensionAttribute]
[NotNullAttribute]
public static AllAssembliesOnSources FilterBinDependencies(AllAssembliesOnSources thіs, AllAssembliesFilterByProfile collinfo);
    [ExtensionAttribute]
public static Subplatform FindSubplatformOfAssembly(AllAssemblies allass, AssemblyNameInfo assname, OnError onerror);
    [ExtensionAttribute]
public static bool Has(AllAssemblies thіs, SubplatformName what);
}
public class JetBrains.Application.BuildScript.Solution.AllAssemblies : object {
    public IList`1<Subplatform> Subplatforms;
    public AllAssemblies(IEnumerable`1<Subplatform> subplatforms);
}
public class JetBrains.Application.BuildScript.Solution.AllAssembliesAccess : object {
    public AllAssemblies AllAssemblies;
    public IDictionary`2<SubplatformName, Subplatform> CacheByName;
    public DirectedGraph`1<Subplatform> SubplatformReferences;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public AllAssembliesAccess(AllAssembliesOnEverything allAssemblies);
    [NotNullAttribute]
public ICollection`1<Subplatform> AddChildrenTransitively(Subplatform sub);
    [NotNullAttribute]
public ICollection`1<Subplatform> AddChildrenTransitively(IEnumerable`1<Subplatform> subs);
    [NotNullAttribute]
public IList`1<Subplatform> AddReferencesTransitively(Subplatform sub);
    [NotNullAttribute]
public IList`1<Subplatform> AddReferencesTransitively(IEnumerable`1<Subplatform> subs);
    [NotNullAttribute]
public Subplatform Find(SubplatformName name);
    private static ReadOnlyDictionary`2<SubplatformName, Subplatform> Ctor_CacheByName(AllAssemblies allass, ILogger Logger);
    private DirectedGraph`1<Subplatform> Ctor_References(ILogger Logger);
    [CompilerGeneratedAttribute]
private static string <AddReferencesTransitively>b__0(Subplatform sub);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesAndBuildSources : object {
    public static RelativePath BuildSourcesFolderName;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<RelativePath, RelativePath> CS$<>9__CachedAnonymousMethodDelegate7;
    private static AllAssembliesAndBuildSources();
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemPath> GetActualFoldersWithBuildScriptSources(AllAssembliesOnSources thіs);
    [ExtensionAttribute]
public static IEnumerable`1<RelativePath> GetPossibleFoldersWithBuildScriptSources(AllAssembliesOnSources thіs);
    [ExtensionAttribute]
public static IEnumerable`1<RelativePath> GetPossibleFoldersWithBuildScriptSources(AllAssembliesOnEverything thіs);
    private static IEnumerable`1<RelativePath> GetPossibleFoldersWithBuildScriptSources(SubplatformOnSources subplatform);
    [CompilerGeneratedAttribute]
private static bool <GetActualFoldersWithBuildScriptSources>b__1(FileSystemPath dir);
    [CompilerGeneratedAttribute]
private static RelativePath <GetPossibleFoldersWithBuildScriptSources>b__6(RelativePath dir);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesFilter/AllAssembliesCollectionInfoSerializer")]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesFilter : object {
    public string SubplatformMaskOnPackages;
    public string SubplatformMaskOnSources;
    [NotNullAttribute]
public AllAssembliesOnPackages Filter(AllAssembliesOnPackages allass);
    [NotNullAttribute]
public sealed virtual AllAssembliesOnSources Filter(AllAssembliesOnSources allass);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile/AllAssembliesCollectionInfoTypeConverter")]
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile/AllAssembliesCollectionInfoSerializer")]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile : object {
    public string SubplatformMaskOnBinaries;
    public string SubplatformMaskOnSources;
    [NotNullAttribute]
public sealed virtual AllAssembliesOnSources Filter(AllAssembliesOnSources allass);
    [NotNullAttribute]
public AllAssembliesOnSources FilterBinDependencies(AllAssembliesOnSources allass);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfileEx : object {
    [ExtensionAttribute]
public static bool IsBinariesEmpty(AllAssembliesFilterByProfile that);
    [ExtensionAttribute]
public static bool IsSourcesEmpty(AllAssembliesFilterByProfile that);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesLocator : object {
    public static string DefaultIntermediateOutputPathFolderName;
    public static string DefaultProductBinariesDirFolderName;
    [NotNullAttribute]
public static string JetMetadataInApplicationPackageExt;
    public static string JetMetadataLightInApplicationPackageExt;
    internal static ILogger Logger;
    public static string ProductHomeDirEnvironmentVariableName;
    public static string ProductHomeDirMarkerFile;
    public static string ProgramDatabasePackageIdAppendix;
    public static string ProjectsCollectionDirMarkerFile;
    public static string ProjectsHiddenFromSolutionDirMarkerFile;
    public static string SubplatformRootDirMarkerFileName;
    public static string SubplatformRootDirStrongNameKeyPairFileName;
    public static string SubplatformsCollectionDirMarkerFileName;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, ApplicationPackageArtifact> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, ApplicationPackageArtifact> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IStructuredStorage, ApplicationPackageArtifact> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IStructuredStorage, ApplicationPackageArtifact> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Subplatform, IEnumerable`1<AssemblyNameInfo>> CS$<>9__CachedAnonymousMethodDelegate24;
    private static AllAssembliesLocator();
    [NotNullAttribute]
public static AllAssembliesOnPackages GetAllAssembliesOnLocallyInstalledBinariesFlat(ProductBinariesDirArtifact bindir);
    [NotNullAttribute]
public static AllAssembliesOnSources GetAllAssembliesOnSources(FileSystemPath pathToProductHomeDir);
    [NotNullAttribute]
public static FileSystemPath GetProductHomeDirOnSources(FileSystemPath pathInsideProductDir);
    [NotNullAttribute]
public static FileSystemPath GetProductHomeDirOnSourcesOnProcessEntryPoint();
    [NotNullAttribute]
public static List`1<FileSystemPath> GetProjectFilesUnderFolder(FileSystemPath pathFolderWithProjects, bool isDeep);
    [NotNullAttribute]
public static IEnumerable`1<FileSystemPath> GetSubplatformOnSourcesFolders(FileSystemPath pathProductHomeDir);
    [NotNullAttribute]
public static string GetSubplatformPackageId(SubplatformName subplatformname, string sCompanyNameHuman);
    [NotNullAttribute]
public static string GetSubplatformPackageId(Subplatform subplatform);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<AssemblyNameInfo> SelectManyAssemblies(AllAssemblies thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<SubplatformProjectWrapper> SelectManyProjects(AllAssembliesOnSources allassSrc);
    [CanBeNullAttribute]
public static FileSystemPath TryGetProductHomeDirOnSources(FileSystemPath pathInsideProductDir);
    private static void FetchAssemblyNameAndOutputTypeFromFile(FileSystemPath file, AssemblyNameInfo& assname, OutputType& outputType);
    private static string FetchPropertyValue(string sProperty, string valuePattern, FileSystemPath file, XmlDocument xmldoc, XmlNamespaceManager nsman);
    [CompilerGeneratedAttribute]
private static ApplicationPackageArtifact <GetAllAssembliesOnLocallyInstalledBinariesFlat>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private static ApplicationPackageArtifact <GetAllAssembliesOnLocallyInstalledBinariesFlat>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private static ApplicationPackageArtifact <GetAllAssembliesOnLocallyInstalledBinariesFlat>b__1(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private static ApplicationPackageArtifact <GetAllAssembliesOnLocallyInstalledBinariesFlat>b__4(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<AssemblyNameInfo> <SelectManyAssemblies>b__23(Subplatform sp);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything : AllAssemblies {
    public AllAssembliesOnEverything(IEnumerable`1<Subplatform> subplatforms);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackages : AllAssemblies {
    [NotNullAttribute]
public IList`1<SubplatformOnPackage> Subplatforms;
    public AllAssembliesOnPackages(ICollection`1<SubplatformOnPackage> subplatforms);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackagesEx : AllAssemblies {
    [NotNullAttribute]
public IList`1<SubplatformOnPackageEx> Subplatforms;
    [BuildStepAttribute]
public AllAssembliesOnPackagesEx(AllAssembliesOnPackages allassPkg, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources : AllAssemblies {
    [NotNullAttribute]
public FileSystemPath ProductHomeDir;
    [NotNullAttribute]
public IList`1<SubplatformOnSources> Subplatforms;
    public AllAssembliesOnSources(FileSystemPath pathProductHomeDir, ICollection`1<SubplatformOnSources> subplatforms);
}
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesTasks : object {
    [BuildStepAttribute]
public static AllAssembliesOnPackages ExtractAllAssembliesOnPackages(AllAssembliesOnEverything allass);
    [BuildStepAttribute]
public static AllAssembliesOnSources ExtractAllAssembliesOnSources(AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir);
}
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesTasksSinceClr4 : object {
    [CompilerGeneratedAttribute]
private static Comparison`1<Subplatform> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`3<InputPackage, SerializedValuesResolver, SubplatformOnPackageEx> CS$<>9__CachedAnonymousMethodDelegate4;
    [BuildStepAttribute]
public static AllAssembliesOnEverything CollectAllAssembliesStep(Lifetime lifetime, Optional`1<ProductHomeDirArtifact> homedir, Optional`1<AllAssembliesFilter> maybecollinfo, Optional`1<AllAssembliesFilterByProfile> maybePrfilter, SubplatformsInAllInputPackages allinputs, ILogger logger);
    [BuildStepAttribute]
public static SubplatformsInAllInputPackages FindSubplatformsInInputPackages(InputPackage[] inputs, ILogger logger);
    [CompilerGeneratedAttribute]
private static int <CollectAllAssembliesStep>b__0(Subplatform x, Subplatform y);
    [CompilerGeneratedAttribute]
private static SubplatformOnPackageEx <FindSubplatformsInInputPackages>b__2(InputPackage package, SerializedValuesResolver meta);
}
public interface JetBrains.Application.BuildScript.Solution.IAllAssembliesOnSrcFilter {
    [NotNullAttribute]
public abstract virtual AllAssembliesOnSources Filter(AllAssembliesOnSources allass);
}
public enum JetBrains.Application.BuildScript.Solution.OutputType : Enum {
    public byte value__;
    public static OutputType Executable;
    public static OutputType Library;
    public static OutputType Unknown;
}
public class JetBrains.Application.BuildScript.Solution.PackageOriginalProjects : object {
    private static string StreamName;
    [NotNullAttribute]
public IList`1<ProjectAndAssembly> ProjectInSubplatformPath_AssemblyName;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectAndAssembly, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectAndAssembly, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, SubplatformComponentForPackagingFast> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectAndAssembly, string> CS$<>9__CachedAnonymousMethodDelegatef;
    public PackageOriginalProjects(IEnumerable`1<ProjectAndAssembly> entries);
    public PackageOriginalProjects(IStructuredStorage sstg);
    private static PackageOriginalProjects();
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackagingFast> EmbedInPackages(AllAssembliesOnSources allassSrc);
    public AssemblyNameInfo GetAssemblyNameOfProject(RelativePath project, OnError onerror);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(ProjectAndAssembly pair);
    [CompilerGeneratedAttribute]
private IList`1<ProjectAndAssembly> <.ctor>b__2(StreamReader reader);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(string l);
    [CompilerGeneratedAttribute]
private ProjectAndAssembly <.ctor>b__4(string l);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__6(ProjectAndAssembly pair);
    [CompilerGeneratedAttribute]
private static SubplatformComponentForPackagingFast <EmbedInPackages>b__c(SubplatformOnSources sub);
    [CompilerGeneratedAttribute]
private static string <GetAssemblyNameOfProject>b__e(ProjectAndAssembly paa);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__10(StreamWriter writer);
}
public class JetBrains.Application.BuildScript.Solution.Profiles.ProfileDescription : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public SubplatrformAndKind[] SubplatformAndKinds;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatrformAndKind, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public ProfileDescription(string name, SubplatrformAndKind[] subplatformAndKinds);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__0(SubplatrformAndKind x);
}
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifact/ProfilesArtifactSerializer")]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifact/ProfilesArtifactConverter")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifact : object {
    public UserDefinedProfileDescription[] Descriptions;
    [CompilerGeneratedAttribute]
private static Func`2<UserDefinedProfileDescription, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public ProfilesArtifact(UserDefinedProfileDescription[] descriptions);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__0(UserDefinedProfileDescription x);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifactEx : object {
    [CanBeNullAttribute]
[ExtensionAttribute]
public static UserDefinedProfileDescription GetConfigBy(ProfilesArtifact that, string profileName);
}
public static class JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifactParser : object {
    public static string PROFILE_SECTION_SEP;
    public static char PROFILE_ITEMS_SEP;
    public static char PROFILE_ITEM_SEP;
    private static Parser`1<string> ourProfileNameRule;
    public static Parser`1<SubplatformCompileKind> SubplatformKindRule;
    private static Parser`1<SubplatrformPrefixAndKind> ourProfileItemRule;
    public static Parser`1<UserDefinedProfileDescription> ProfileTerm;
    public static Parser`1<ProfilesArtifact> ProfileConfigs;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, string> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformCompileKind, SubplatformCompileKind> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformCompileKind, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`3<SubplatformCompileKind, char, <>f__AnonymousType6`2<SubplatformCompileKind, char>> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType6`2<SubplatformCompileKind, char>, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType6`2<SubplatformCompileKind, char>, string, SubplatrformPrefixAndKind> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<string, Parser`1<IEnumerable`1<SubplatrformPrefixAndKind>>> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`3<string, IEnumerable`1<SubplatrformPrefixAndKind>, UserDefinedProfileDescription> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<UserDefinedProfileDescription, List`1<UserDefinedProfileDescription>> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`4<IEnumerable`1<char>, List`1<UserDefinedProfileDescription>, List`1<UserDefinedProfileDescription>, List`1<UserDefinedProfileDescription>> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<IOption`1<List`1<UserDefinedProfileDescription>>, ProfilesArtifact> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<char, Parser`1<SubplatrformPrefixAndKind>> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`3<char, SubplatrformPrefixAndKind, SubplatrformPrefixAndKind> CS$<>9__CachedAnonymousMethodDelegate20;
    private static ProfilesArtifactParser();
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__5(IEnumerable`1<char> first);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__6(IEnumerable`1<char> first, IEnumerable`1<char> rest);
    [CompilerGeneratedAttribute]
private static SubplatformCompileKind <.cctor>b__7(SubplatformCompileKind kind);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__8(SubplatformCompileKind kind);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType6`2<SubplatformCompileKind, char> <.cctor>b__9(SubplatformCompileKind kind, char sep);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__a(<>f__AnonymousType6`2<SubplatformCompileKind, char> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private static SubplatrformPrefixAndKind <.cctor>b__b(<>f__AnonymousType6`2<SubplatformCompileKind, char> <>h__TransparentIdentifier1, string subplatform);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<SubplatrformPrefixAndKind>> <.cctor>b__c(string name);
    [CompilerGeneratedAttribute]
private static UserDefinedProfileDescription <.cctor>b__f(string name, IEnumerable`1<SubplatrformPrefixAndKind> items);
    [CompilerGeneratedAttribute]
private static List`1<UserDefinedProfileDescription> <.cctor>b__10(UserDefinedProfileDescription x);
    [CompilerGeneratedAttribute]
private static List`1<UserDefinedProfileDescription> <.cctor>b__11(IEnumerable`1<char> _, List`1<UserDefinedProfileDescription> x, List`1<UserDefinedProfileDescription> y);
    [CompilerGeneratedAttribute]
private static ProfilesArtifact <.cctor>b__12(IOption`1<List`1<UserDefinedProfileDescription>> xs);
    [CompilerGeneratedAttribute]
private static Parser`1<SubplatrformPrefixAndKind> <.cctor>b__d(char sep);
    [CompilerGeneratedAttribute]
private static SubplatrformPrefixAndKind <.cctor>b__e(char sep, SubplatrformPrefixAndKind item);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.ProfileTasks : object {
    private static SubplatformName ourShellName;
    [CompilerGeneratedAttribute]
private static DoAfterProcessing`1<SubplatformName> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, SubplatformName> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, SubplatformOnSources> CS$<>9__CachedAnonymousMethodDelegated;
    private static ProfileTasks();
    [BuildStepAttribute]
public static Optional`1<AllAssembliesFilterByProfile> CreateFilterByProfile(ProfileNameArtifact profile, ProfilesArtifact configs, ProductHomeDirArtifact homedir, ILogger logger);
    public static AllAssembliesFilterByProfile CreateAllAssembliesFilterByProfile(ProfileDescription description);
    public static UserDefinedProfileDescription CompactUserDefinedProfile(UserDefinedProfileDescription description);
    public static ProfileDescription BuildPlainProfile(UserDefinedProfileDescription description, IDirectedGraph`1<SubplatformName> graph);
    [ExtensionAttribute]
private static void UpdateMarkup(SubplatformsGraphMarkup graphMarkup, KeyValuePair`2<SubplatformName, SubplatformCompileKind> change, IDirectedGraph`1<SubplatformName> graph);
    private static void ApplyOp(IDirectedGraph`1<SubplatformName> g, SubplatformsGraphMarkup markup, SubplatformName node, Func`3<SubplatformCompileKind, SubplatformCompileKind, SubplatformCompileKind> op);
    public static DirectedGraph`1<SubplatformName> CreateSubplatformsGraph(AllAssembliesOnSources allAssembliesOnSources);
    private static void AssertNoLoops(IDirectedGraph`1<T> graph);
    [CompilerGeneratedAttribute]
private static void <UpdateMarkup>b__4(SubplatformName _);
    [CompilerGeneratedAttribute]
private static SubplatformName <CreateSubplatformsGraph>b__a(SubplatformOnSources x);
    [CompilerGeneratedAttribute]
private static SubplatformOnSources <CreateSubplatformsGraph>b__b(SubplatformOnSources x);
    [CompilerGeneratedAttribute]
private static WalkInstruction <AssertNoLoops>b__e(T node, Visit visit, IList`1<T> path);
    [CompilerGeneratedAttribute]
private static void <AssertNoLoops>b__f(T x);
}
public enum JetBrains.Application.BuildScript.Solution.Profiles.SubplatformCompileKind : Enum {
    public int value__;
    public static SubplatformCompileKind None;
    public static SubplatformCompileKind Excluded;
    public static SubplatformCompileKind Source;
    public static SubplatformCompileKind Binary;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformCompileKindEx : object {
    [ExtensionAttribute]
public static SubplatformCompileKind Max(SubplatformCompileKind l, SubplatformCompileKind r);
    [ExtensionAttribute]
public static SubplatformCompileKind Min(SubplatformCompileKind l, SubplatformCompileKind r);
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformKindEx : object {
    [ExtensionAttribute]
public static string ConvertToString(SubplatformCompileKind kind);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformsGraphMarkup : object {
    private Dictionary`2<SubplatformName, SubplatformCompileKind> myMarkup;
    public SubplatformCompileKind Item { get; public set; }
    public ProfileDescription CreateProfileDescription(string prName);
    public SubplatformCompileKind get_Item(SubplatformName name);
    public void set_Item(SubplatformName name, SubplatformCompileKind value);
    public bool Contains(SubplatformName name);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformsGraphMarkupEx : object {
    [ExtensionAttribute]
public static SubplatformsGraphMarkup CreateEmptyMarkup(IDirectedGraph`1<SubplatformName> g);
}
public class JetBrains.Application.BuildScript.Solution.Profiles.SubplatrformAndKind : object {
    [NotNullAttribute]
public SubplatformName Name;
    public SubplatformCompileKind Kind;
    public SubplatrformAndKind(SubplatformName name, SubplatformCompileKind kind);
    public virtual string ToString();
}
public class JetBrains.Application.BuildScript.Solution.Profiles.SubplatrformPrefixAndKind : object {
    [NotNullAttribute]
public RelativePath Prefix;
    public SubplatformCompileKind Kind;
    public SubplatrformPrefixAndKind(RelativePath prefix, SubplatformCompileKind kind);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatrformPrefixAndKindEx : object {
    [ExtensionAttribute]
public static bool IsMatchedTo(SubplatrformPrefixAndKind that, SubplatformName s);
}
public class JetBrains.Application.BuildScript.Solution.Profiles.UserDefinedProfileDescription : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public SubplatrformPrefixAndKind[] OrderedSubplatformPrefixAndKinds;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatrformPrefixAndKind, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public UserDefinedProfileDescription(string name, SubplatrformPrefixAndKind[] orderedSubplatformPrefixAndKinds);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__0(SubplatrformPrefixAndKind x);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.ProjectAndAssembly/ProjectAndAssemblySerializer")]
public class JetBrains.Application.BuildScript.Solution.ProjectAndAssembly : object {
    [NotNullAttribute]
public AssemblyNameInfo AssemblyName;
    public OutputType PossibleOutputType;
    [NotNullAttribute]
public RelativePath ProjectFileInSubplatform;
    public ProjectAndAssembly(RelativePath projectFileInSubplatform, AssemblyNameInfo assemblyName, OutputType outputType);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.ProjectAndAssemblyEx : object {
    [ExtensionAttribute]
public static bool IsLibrary(ProjectAndAssembly that);
}
public class JetBrains.Application.BuildScript.Solution.Subplatform : object {
    [NotNullAttribute]
public IList`1<AssemblyNameInfo> Assemblies;
    [NotNullAttribute]
public SubplatformName Name;
    [NotNullAttribute]
public SubplatformInfo SubplatformInfo;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public Subplatform(SubplatformName name, IEnumerable`1<AssemblyNameInfo> assemblies, SubplatformInfo subplatformInfo);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(AssemblyNameInfo an);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.SubplatformEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetCompanyNameHuman(Subplatform thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static string GetCompanyNameLegal(Subplatform thіs);
    [NotNullAttribute]
[ObsoleteAttribute("Use JetBrains.Application.BuildScript.Solution.SubplatformEx.GetVersion(JetBrains.Application.BuildScript.Solution.Subplatform,JetBrains.Application.BuildScript.BuildVersionSuffix)")]
[ExtensionAttribute]
public static Version2 GetVersion2(Subplatform thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static JetSemanticVersion GetVersion(Subplatform thіs, BuildVersionSuffix buildVersionSuffix);
}
[XamlSerializableAttribute]
[PublicAPIAttribute]
public class JetBrains.Application.BuildScript.Solution.SubplatformInfo : object {
    private List`1<SubplatformReference> mySubplatformReferences;
    [CompilerGeneratedAttribute]
private string <CompanyNameHuman>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyNameLegal>k__BackingField;
    [CompilerGeneratedAttribute]
private JetSemanticVersion <VersionOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageReference, SubplatformReference> CS$<>9__CachedAnonymousMethodDelegate3;
    [CanBeNullAttribute]
public string CompanyNameHuman { get; public set; }
    [CanBeNullAttribute]
public string CompanyNameLegal { get; public set; }
    [NotNullAttribute]
[DesignerSerializationVisibilityAttribute("2")]
public List`1<SubplatformReference> SubplatformReferences { get; }
    [CanBeNullAttribute]
public JetSemanticVersion VersionOverride { get; public set; }
    public SubplatformInfo(string companyNameHuman, string companyNameLegal, JetSemanticVersion versionOverride, List`1<SubplatformReference> subplatformReferences);
    [CompilerGeneratedAttribute]
public string get_CompanyNameHuman();
    [CompilerGeneratedAttribute]
public void set_CompanyNameHuman(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyNameLegal();
    [CompilerGeneratedAttribute]
public void set_CompanyNameLegal(string value);
    public List`1<SubplatformReference> get_SubplatformReferences();
    [CompilerGeneratedAttribute]
public JetSemanticVersion get_VersionOverride();
    [CompilerGeneratedAttribute]
public void set_VersionOverride(JetSemanticVersion value);
    [NotNullAttribute]
public static SubplatformInfo FromAppPackage(ApplicationPackageArtifact package);
    [CompilerGeneratedAttribute]
private static SubplatformReference <FromAppPackage>b__2(ApplicationPackageReference pref);
}
public class JetBrains.Application.BuildScript.Solution.SubPlatformInfoReader : object {
    [NotNullAttribute]
public static SubplatformInfo Read(Stream stream);
}
[TypeConverterAttribute("JetBrains.Application.BuildScript.Solution.SubplatformName/SubplatformNameConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.SubplatformName/SubplatformNameSerializer")]
public class JetBrains.Application.BuildScript.Solution.SubplatformName : object {
    [NotNullAttribute]
public RelativePath RelativePath;
    public SubplatformName(RelativePath relativePath);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SubplatformName left, SubplatformName right);
    public static bool op_Inequality(SubplatformName left, SubplatformName right);
    public virtual string ToString();
    public sealed virtual bool Equals(SubplatformName other);
}
public class JetBrains.Application.BuildScript.Solution.SubplatformOnPackage : Subplatform {
    [NotNullAttribute]
public ApplicationPackageArtifact ApplicationPackage;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate1;
    public SubplatformOnPackage(ApplicationPackageArtifact package);
    [NotNullAttribute]
public static IEnumerable`1<AssemblyNameInfo> GetAssembliesFromPackageFiles(ApplicationPackageArtifact package);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <GetAssembliesFromPackageFiles>b__0(ApplicationPackageFile f);
}
public class JetBrains.Application.BuildScript.Solution.SubplatformOnPackageEx : SubplatformOnPackage {
    [NotNullAttribute]
public NugetPackageFileItem Package;
    [NotNullAttribute]
public Optional`1<PackageOriginalProjects> PackageOriginalProjects;
    private NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.Package { get; }
    public SubplatformOnPackageEx(NugetPackageFileItem package, ApplicationPackageArtifact apppkg, Optional`1<PackageOriginalProjects> projects);
    private sealed virtual override NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.get_Package();
}
public class JetBrains.Application.BuildScript.Solution.SubplatformOnSources : Subplatform {
    [NotNullAttribute]
public IList`1<RelativePath> ProjectFiles;
    [NotNullAttribute]
public IList`1<ProjectAndAssembly> ProjectFilesEx;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectAndAssembly, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectAndAssembly, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<ProjectAndAssembly, RelativePath> CS$<>9__CachedAnonymousMethodDelegate5;
    public SubplatformOnSources(SubplatformName name, ICollection`1<ProjectAndAssembly> projectfiles, SubplatformInfo si);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <.ctor>b__0(ProjectAndAssembly paa);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(ProjectAndAssembly paa);
    [CompilerGeneratedAttribute]
private static RelativePath <.ctor>b__2(ProjectAndAssembly paa);
}
public static class JetBrains.Application.BuildScript.Solution.SubplatformPlatformCoreShell : object {
    public static string CompanyNameHuman;
    public static SubplatformName Name;
    [NotNullAttribute]
public static string PackageId { get; }
    private static SubplatformPlatformCoreShell();
    public static string get_PackageId();
}
public class JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper : object {
    [NotNullAttribute]
public AllAssembliesOnSources AllAssembliesOnSources;
    [NotNullAttribute]
public ProjectAndAssembly ProjectAndAssembly;
    [NotNullAttribute]
public SubplatformOnSources SubplatformOnSources;
    [NotNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    [NotNullAttribute]
public RelativePath ProjectInSubplatform { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    public SubplatformProjectWrapper(SubplatformOnSources subplatform, ProjectAndAssembly projectAndAssembly, AllAssembliesOnSources allassSrc);
    public AssemblyNameInfo get_AssemblyName();
    public RelativePath get_ProjectInSubplatform();
    public SubplatformName get_SubplatformName();
    public sealed virtual bool Equals(SubplatformProjectWrapper other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NotNullAttribute]
public FileSystemPath GetProjectFileAbsPath();
    [NotNullAttribute]
public RelativePath GetProjectFileRelToRoot();
    public static bool op_Equality(SubplatformProjectWrapper left, SubplatformProjectWrapper right);
    public static bool op_Inequality(SubplatformProjectWrapper left, SubplatformProjectWrapper right);
    public virtual string ToString();
}
[PublicAPIAttribute]
[XamlSerializableAttribute]
public class JetBrains.Application.BuildScript.Solution.SubplatformReference : object {
    [CompilerGeneratedAttribute]
private SubplatformName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SubplatformType <Type>k__BackingField;
    public SubplatformName Name { get; public set; }
    public SubplatformType Type { get; public set; }
    [CompilerGeneratedAttribute]
public SubplatformName get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(SubplatformName value);
    [CompilerGeneratedAttribute]
public SubplatformType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SubplatformType value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.SubplatformsInAllInputPackages : AllAssemblies {
    [NotNullAttribute]
public IList`1<SubplatformOnPackageEx> Subplatforms;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnPackageEx, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public SubplatformsInAllInputPackages(ICollection`1<SubplatformOnPackageEx> subplatforms);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(SubplatformOnPackageEx sub);
}
public enum JetBrains.Application.BuildScript.Solution.SubplatformType : Enum {
    public int value__;
    public static SubplatformType Normal;
    public static SubplatformType CompileTimeOnly;
}
public class JetBrains.Application.BuildScript.SolutionGenerator.Generator : object {
    private static ILogger Logger;
    private GeneratorInfo myGeneratorInfo;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnSources, IEnumerable`1<<>f__AnonymousType7`2<SubplatformName, RelativePath>>> CS$<>9__CachedAnonymousMethodDelegate7;
    private Generator(FileSystemPath rootFolder);
    public Generator(AllAssembliesOnSources allAssembliesOnSources);
    private static Generator();
    public static void WriteSolutionFile(FileSystemPath rootFolder, TextWriter writer);
    public static SimpleFileItem WriteSolutionFile(AllAssembliesOnSources allAssembliesOnSources);
    private void AddProject(FileSystemPath pathToProjectFile);
    private void Generate(TextWriter writer);
    private void WriteSln(TextWriter writer);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType7`2<SubplatformName, RelativePath>> <Generate>b__4(SubplatformOnSources sp);
    [CompilerGeneratedAttribute]
private void <Generate>b__6(<>f__AnonymousType7`2<SubplatformName, RelativePath> t);
}
[PublicAPIAttribute]
public class JetBrains.Application.BuildScript.SolutionGenerator.GeneratorInfo : object {
    private List`1<GeneratorProject> myProjects;
    private AllAssembliesOnSources mySubplatformsToProjects;
    private Dictionary`2<string, VirtualProject> myVirtualProjects;
    [PublicAPIAttribute]
public List`1<GeneratorProject> Projects { get; }
    [PublicAPIAttribute]
public AllAssembliesOnSources SubplatformsToProjects { get; }
    [PublicAPIAttribute]
public Dictionary`2<string, VirtualProject> VirtualProjects { get; }
    public GeneratorInfo(AllAssembliesOnSources allAssembliesOnSources);
    public GeneratorInfo(FileSystemPath rootFolder);
    public List`1<GeneratorProject> get_Projects();
    public AllAssembliesOnSources get_SubplatformsToProjects();
    public Dictionary`2<string, VirtualProject> get_VirtualProjects();
}
[PublicAPIAttribute]
public class JetBrains.Application.BuildScript.SolutionGenerator.GeneratorProject : object {
    private static Guid CsProj;
    private static Guid FsProj;
    private static ILogger Logger;
    private static Guid VbProj;
    private static Guid VcxProj;
    private string myFileName;
    private Guid myGuid;
    private VirtualProject myParent;
    private RelativePath myRelativePath;
    private Guid myTypeGuid;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private GeneratorProject(FileSystemPath projectFilePath, Guid guid, GeneratorInfo generatorInfo, RelativePath relativePath, VirtualProject parent);
    private static GeneratorProject();
    public static GeneratorProject CreateFromFile(FileSystemPath projectFilePath, GeneratorInfo generatorInfo);
    public virtual string ToString();
    public void WriteConf(TextWriter writer);
    public void WriteDecl(TextWriter writer);
    public void WritePrnt(TextWriter writer);
    [CompilerGeneratedAttribute]
private static string <CreateFromFile>b__0(XmlElement xml);
    [CompilerGeneratedAttribute]
private static bool <CreateFromFile>b__1(string x);
}
[PublicAPIAttribute]
public class JetBrains.Application.BuildScript.SolutionGenerator.VirtualProject : object {
    private static string FolderProj;
    private string myName;
    private VirtualProject myParent;
    public string Guid;
    public VirtualProject(string name, VirtualProject parent);
    public void WriteDecl(TextWriter writer);
    public void WriteProject(TextWriter writer);
}
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.SubplatformBinariesPackage : object {
    [NotNullAttribute]
public NugetPackageFileItem Package;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformBinariesPackage, DeployablePackage> CS$<>9__CachedAnonymousMethodDelegate1;
    private NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.Package { get; }
    public SubplatformBinariesPackage(SubplatformName subname, NugetPackageFileItem package);
    [BuildStepAttribute]
public static DeployablePackage[] DeployMe(SubplatformBinariesPackage[] pkgs);
    private sealed virtual override NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.get_Package();
    [CompilerGeneratedAttribute]
private static DeployablePackage <DeployMe>b__0(SubplatformBinariesPackage pkg);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact/SubplatformPackagesTimesArtifactSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact : object {
    public Nullable`1<DateTime> BestBefore;
    public DateTime BuiltOn;
    [BuildStepAttribute]
public SubplatformPackagesTimesArtifact(Optional`1<TimeBombSpan> maybeTimeBomb, ILogger logger);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
public class JetBrains.Application.BuildScript.SubplatformProgramDatabasePackage : object {
    [NotNullAttribute]
public NugetPackageFileItem Package;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformProgramDatabasePackage, DeployablePackage> CS$<>9__CachedAnonymousMethodDelegate1;
    private NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.Package { get; }
    public SubplatformProgramDatabasePackage(SubplatformName subname, NugetPackageFileItem package);
    [BuildStepAttribute]
public static DeployablePackage[] DeployMe(SubplatformProgramDatabasePackage[] pkgs);
    private sealed virtual override NugetPackageFileItem JetBrains.Util.Storage.Packages.IHaveNugetPackageFileItem.get_Package();
    [CompilerGeneratedAttribute]
private static DeployablePackage <DeployMe>b__0(SubplatformProgramDatabasePackage pkg);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Testing.BoostTestResult : object {
    [BuildStepAttribute]
public static UnitTestResult BoostTestsAreUnitTests(BoostTestResult[] boosttests);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Testing.ExtractForIntegrationTests : object {
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact/TestDataHomeDirArtifactSerializer")]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact/TestDataHomeDirArtifactConverter")]
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath TestDataHomeDir;
    public TestDataHomeDirArtifact(FileSystemPath testDataHomeDir);
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.Testing.TestRunnerClr : Enum {
    public byte value__;
    public static TestRunnerClr ClrLatest;
    public static TestRunnerClr Clr2;
    public static TestRunnerClr Clr4;
}
public enum JetBrains.Application.BuildScript.Testing.TestRunnerCpuArchitecture : Enum {
    public byte value__;
    public static TestRunnerCpuArchitecture CpuSameAsHost;
    public static TestRunnerCpuArchitecture CpuX86;
    public static TestRunnerCpuArchitecture CpuAmd64;
}
public class JetBrains.Application.BuildScript.Testing.TestsFilter : ValueType {
    [CanBeNullAttribute]
public String[] CategoryExclude;
    [CanBeNullAttribute]
public String[] CategoryInclude;
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.UnitTestFilter/UnitTestFilterSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Testing.UnitTestFilter : object {
    [CanBeNullAttribute]
public string AssemblyBareNameFilter;
    [CanBeNullAttribute]
public String[] CategoryExclude;
    [CanBeNullAttribute]
public String[] CategoryInclude;
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.UnitTestPlatform/UnitTestPlatformSerializer")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Testing.UnitTestPlatform : object {
    public Nullable`1<TestRunnerClr> TestRunnerClr;
    public Nullable`1<TestRunnerCpuArchitecture> TestRunnerCpuArchitecture;
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Testing.UnitTestPlatformEx : object {
    [ExtensionAttribute]
public static TestRunnerClr DetermineTestRunnerClr(UnitTestPlatform unitTestPlatform);
    [ExtensionAttribute]
public static TestRunnerCpuArchitecture DetermineTestRunnerCpuArchitecture(UnitTestPlatform unitTestPlatform);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Testing.UnitTestResult : object {
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.UnitTestRunnerParameters/UnitTestRunnerParametersSerializer")]
public class JetBrains.Application.BuildScript.Testing.UnitTestRunnerParameters : object {
    public ICollection`1<UnitTestRunnerParametersForSingleRun> Parameters;
    public UnitTestRunnerParameters(ICollection`1<UnitTestRunnerParametersForSingleRun> parameters);
}
public static class JetBrains.Application.BuildScript.Testing.UnitTestRunnerSerialization : object {
    private static char PartsDelimitter;
    private static char Delimitter;
    private static string λέξις_AssemblyBareNameFilter;
    private static string λέξις_CategoryInclude;
    private static string λέξις_CategoryExclude;
    private static char λέξις_μικρός_AssemblyBareNameFilter;
    private static char λέξις_μικρός_CategoryInclude;
    private static char λέξις_μικρός_CategoryExclude;
    private static Parser`1<string> Value;
    private static Parser`1<string> QuotedXmlEscapedValue;
    private static Parser`1<UnitTestPart> Clr;
    private static Parser`1<UnitTestPart> Achitecture;
    private static Parser`1<UnitTestPart> FilterCategoryInclude;
    private static Parser`1<UnitTestPart> FilterCategoryExclude;
    private static Parser`1<UnitTestPart> FilterAssemblyBareNameFilter;
    private static Parser`1<UnitTestPlatform> UnitTestPlatform;
    private static Parser`1<UnitTestRunnerParameters> UnitTestRunnerParameters;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Func`2<char, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Func`3<char, string, <>f__AnonymousType8`2<char, string>> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType8`2<char, string>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType8`2<char, string>, char, string> CS$<>9__CachedAnonymousMethodDelegate4d;
    [CompilerGeneratedAttribute]
private static Func`2<TestRunnerClr, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static Func`3<TestRunnerClr, IEnumerable`1<char>, UnitTestPart> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<TestRunnerCpuArchitecture, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate50;
    [CompilerGeneratedAttribute]
private static Func`3<TestRunnerCpuArchitecture, IEnumerable`1<char>, UnitTestPart> CS$<>9__CachedAnonymousMethodDelegate51;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate52;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate53;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate54;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char, <>f__AnonymousTyped`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate55;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTyped`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate56;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousTyped`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, char> CS$<>9__CachedAnonymousMethodDelegate57;
    [CompilerGeneratedAttribute]
private static Func`2<char, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate58;
    [CompilerGeneratedAttribute]
private static Func`3<char, string, <>f__AnonymousType49`2<char, string>> CS$<>9__CachedAnonymousMethodDelegate59;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType49`2<char, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate5a;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType49`2<char, string>, IEnumerable`1<char>, UnitTestPart> CS$<>9__CachedAnonymousMethodDelegate5b;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate5c;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate5d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate5e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char, <>f__AnonymousType4a`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate5f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4a`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate60;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType4a`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, char> CS$<>9__CachedAnonymousMethodDelegate61;
    [CompilerGeneratedAttribute]
private static Func`2<char, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate62;
    [CompilerGeneratedAttribute]
private static Func`3<char, string, <>f__AnonymousType49`2<char, string>> CS$<>9__CachedAnonymousMethodDelegate63;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType49`2<char, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate64;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType49`2<char, string>, IEnumerable`1<char>, UnitTestPart> CS$<>9__CachedAnonymousMethodDelegate65;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate66;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<char>, <>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate67;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, Parser`1<char>> CS$<>9__CachedAnonymousMethodDelegate68;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char, <>f__AnonymousType15`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>> CS$<>9__CachedAnonymousMethodDelegate69;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType15`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate6a;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType15`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char>, IEnumerable`1<char>, char> CS$<>9__CachedAnonymousMethodDelegate6b;
    [CompilerGeneratedAttribute]
private static Func`2<char, Parser`1<string>> CS$<>9__CachedAnonymousMethodDelegate6c;
    [CompilerGeneratedAttribute]
private static Func`3<char, string, <>f__AnonymousType49`2<char, string>> CS$<>9__CachedAnonymousMethodDelegate6d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType49`2<char, string>, Parser`1<IEnumerable`1<char>>> CS$<>9__CachedAnonymousMethodDelegate6e;
    [CompilerGeneratedAttribute]
private static Func`3<<>f__AnonymousType49`2<char, string>, IEnumerable`1<char>, UnitTestPart> CS$<>9__CachedAnonymousMethodDelegate6f;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<UnitTestPart>>> CS$<>9__CachedAnonymousMethodDelegate70;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<UnitTestPart>, UnitTestPlatform> CS$<>9__CachedAnonymousMethodDelegate71;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<char>, Parser`1<IEnumerable`1<UnitTestPart>>> CS$<>9__CachedAnonymousMethodDelegate72;
    [CompilerGeneratedAttribute]
private static Func`3<IEnumerable`1<char>, IEnumerable`1<UnitTestPart>, UnitTestRunnerParametersForSingleRun> CS$<>9__CachedAnonymousMethodDelegate73;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<UnitTestRunnerParametersForSingleRun>, UnitTestRunnerParameters> CS$<>9__CachedAnonymousMethodDelegate74;
    [CompilerGeneratedAttribute]
private static Func`2<UnitTestPart, UnitTestPart> CS$<>9__CachedAnonymousMethodDelegate75;
    [CompilerGeneratedAttribute]
private static Func`2<UnitTestPart, UnitTestPart> CS$<>9__CachedAnonymousMethodDelegate76;
    private static UnitTestRunnerSerialization();
    public static UnitTestRunnerParameters DeserializeRunnerParameters(string input);
    public static string Serialize(UnitTestRunnerParameters parameters);
    public static UnitTestPlatform DeserializePlatform(string input);
    public static string Serialize(UnitTestPlatform parameters);
    public static string Serialize(UnitTestRunnerParametersForSingleRun parameter);
    private static void ToString(UnitTestRunnerParameters parameters, StringBuilder sb);
    private static void ToString(UnitTestRunnerParametersForSingleRun parameter, StringBuilder sb);
    private static void ToString(UnitTestFilter unitTestFilter, StringBuilder sb);
    private static void AppendAttribute(StringBuilder sb, string attributeName, string value);
    private static void ToString(UnitTestPlatform unitTestPlatform, StringBuilder sb);
    private static UnitTestRunnerParameters Build(IEnumerable`1<UnitTestRunnerParametersForSingleRun> runs);
    private static UnitTestRunnerParametersForSingleRun BuildSingleRun(IEnumerable`1<UnitTestPart> parts);
    private static UnitTestPlatform BuildPlatform(IEnumerable`1<UnitTestPart> parts);
    private static UnitTestFilter BuildFilters(IEnumerable`1<UnitTestPart> parts);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__1b(string t);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__1c(char b);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType8`2<char, string> <.cctor>b__1d(char b, string t);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__1e(<>f__AnonymousType8`2<char, string> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__1f(<>f__AnonymousType8`2<char, string> <>h__TransparentIdentifier1, char e);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__20(TestRunnerClr v);
    [CompilerGeneratedAttribute]
private static UnitTestPart <.cctor>b__21(TestRunnerClr v, IEnumerable`1<char> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__22(TestRunnerCpuArchitecture v);
    [CompilerGeneratedAttribute]
private static UnitTestPart <.cctor>b__23(TestRunnerCpuArchitecture v, IEnumerable`1<char> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__24(IEnumerable`1<char> ky);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__25(IEnumerable`1<char> ky, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__26(<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier7);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTyped`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <.cctor>b__27(<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier7, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__28(<>f__AnonymousTyped`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier8);
    [CompilerGeneratedAttribute]
private static char <.cctor>b__29(<>f__AnonymousTyped`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier8, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__2a(char k);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType49`2<char, string> <.cctor>b__2b(char k, string v);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__2c(<>f__AnonymousType49`2<char, string> <>h__TransparentIdentifier5);
    [CompilerGeneratedAttribute]
private static UnitTestPart <.cctor>b__2d(<>f__AnonymousType49`2<char, string> <>h__TransparentIdentifier5, IEnumerable`1<char> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__2e(IEnumerable`1<char> ky);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__2f(IEnumerable`1<char> ky, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__30(<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifierc);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4a`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <.cctor>b__31(<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifierc, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__32(<>f__AnonymousType4a`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifierd);
    [CompilerGeneratedAttribute]
private static char <.cctor>b__33(<>f__AnonymousType4a`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifierd, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__34(char k);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType49`2<char, string> <.cctor>b__35(char k, string v);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__36(<>f__AnonymousType49`2<char, string> <>h__TransparentIdentifiera);
    [CompilerGeneratedAttribute]
private static UnitTestPart <.cctor>b__37(<>f__AnonymousType49`2<char, string> <>h__TransparentIdentifiera, IEnumerable`1<char> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__38(IEnumerable`1<char> ky);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <.cctor>b__39(IEnumerable`1<char> ky, IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static Parser`1<char> <.cctor>b__3a(<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier11);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType15`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <.cctor>b__3b(<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>> <>h__TransparentIdentifier11, char dl);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__3c(<>f__AnonymousType15`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier12);
    [CompilerGeneratedAttribute]
private static char <.cctor>b__3d(<>f__AnonymousType15`2<<>f__AnonymousType48`2<IEnumerable`1<char>, IEnumerable`1<char>>, char> <>h__TransparentIdentifier12, IEnumerable`1<char> w1);
    [CompilerGeneratedAttribute]
private static Parser`1<string> <.cctor>b__3e(char k);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType49`2<char, string> <.cctor>b__3f(char k, string v);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<char>> <.cctor>b__40(<>f__AnonymousType49`2<char, string> <>h__TransparentIdentifierf);
    [CompilerGeneratedAttribute]
private static UnitTestPart <.cctor>b__41(<>f__AnonymousType49`2<char, string> <>h__TransparentIdentifierf, IEnumerable`1<char> w);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<UnitTestPart>> <.cctor>b__42(IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static UnitTestPlatform <.cctor>b__44(IEnumerable`1<char> w0, IEnumerable`1<UnitTestPart> it);
    [CompilerGeneratedAttribute]
private static Parser`1<IEnumerable`1<UnitTestPart>> <.cctor>b__45(IEnumerable`1<char> w0);
    [CompilerGeneratedAttribute]
private static UnitTestRunnerParametersForSingleRun <.cctor>b__47(IEnumerable`1<char> w0, IEnumerable`1<UnitTestPart> it);
    [CompilerGeneratedAttribute]
private static UnitTestRunnerParameters <.cctor>b__48(IEnumerable`1<UnitTestRunnerParametersForSingleRun> pt);
    [CompilerGeneratedAttribute]
private static UnitTestPart <.cctor>b__43(UnitTestPart v);
    [CompilerGeneratedAttribute]
private static UnitTestPart <.cctor>b__46(UnitTestPart v);
}
public static class JetBrains.Application.BuildScript.UltimateLicensingConstants : object {
    public static int LicenseVersion;
    public static DateTime ProductBuiltDateUsedForSubscriptionCheck;
    public static string UrlToShowWhenLicenseServerIsBlacklisted;
    private static UltimateLicensingConstants();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.WindowBrandingArtifact : object {
    [CanBeNullAttribute]
private IProperty`1<ByteArrayIcon> myWindowIconProperty;
    private string myCompanyName;
    private string myProductDisplayName;
    private ByteArrayIcon myWindowIcon;
    private string Stream_CompanyName;
    private string Stream_ProductDisplayName;
    private string Stream_WindowIcon;
    private IProperty`1<Icon> myWindowIconLegacy;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, ByteArrayIcon> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ByteArrayIcon, Icon> CS$<>9__CachedAnonymousMethodDelegate4;
    public string CompanyName { get; }
    public string ProductDisplayName { get; }
    private IProperty`1<Icon> JetBrains.Application.BuildScript.Application.IWindowBranding.WindowIcon { get; }
    public IProperty`1<ByteArrayIcon> WindowIcon { get; }
    public WindowBrandingArtifact(IStructuredStorage storage);
    public WindowBrandingArtifact(string sProductDisplayName, ByteArrayIcon iconStatic, string companyName);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
    public sealed virtual string MakeWindowCaption(string caption);
    public sealed virtual string get_CompanyName();
    public sealed virtual string get_ProductDisplayName();
    private sealed virtual override IProperty`1<Icon> JetBrains.Application.BuildScript.Application.IWindowBranding.get_WindowIcon();
    public IProperty`1<ByteArrayIcon> get_WindowIcon();
    [CompilerGeneratedAttribute]
private static ByteArrayIcon <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__2(Stream stream);
    [CompilerGeneratedAttribute]
private static Icon <JetBrains.Application.BuildScript.Application.IWindowBranding.get_WindowIcon>b__3(ByteArrayIcon icon);
}
public static class JetBrains.Application.BuildScript.WindowBrandingHelpers : object {
    public static string WindowCaptionMaker(string caption, string sProductDisplayName);
}
public class JetBrains.Application.changes.ChangedEventHandler : MulticastDelegate {
    public ChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ChangeEventArgs changeEventArgs);
    public virtual IAsyncResult BeginInvoke(object sender, ChangeEventArgs changeEventArgs, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.changes.ChangeEventArgs : EventArgs {
    [NotNullAttribute]
private IChangeMap myChangeMap;
    [NotNullAttribute]
public IChangeMap ChangeMap { get; }
    public ChangeEventArgs(IChangeMap changeMap);
    public IChangeMap get_ChangeMap();
}
public abstract class JetBrains.Application.changes.ChangeManager : object {
    [NotNullAttribute]
public ISignal`1<ChangeEventArgs> Changed2;
    public bool IsInChange { get; }
    public abstract virtual void ExecuteAfterChange(Action action);
    public abstract virtual void RegisterChangeProvider(IChangeProvider changeProvider);
    public abstract virtual void UnregisterChangeProvider(IChangeProvider changeProvider);
    public abstract virtual void OnProviderChanged(IChangeProvider changeProvider, object change, ITaskExecutor executor);
    public abstract virtual void AddDependency(IChangeProvider target, IChangeProvider source);
    public abstract virtual void RemoveDependency(IChangeProvider target, IChangeProvider source);
    public abstract virtual void Dump(TextWriter to);
    public abstract virtual bool get_IsInChange();
    public abstract virtual void add_Changed(ChangedEventHandler value);
    public abstract virtual void remove_Changed(ChangedEventHandler value);
}
[ExtensionAttribute]
public static class JetBrains.Application.changes.ChangeManagerEx : object {
    [ExtensionAttribute]
public static IDisposable PushRegisterChangeProvider(ChangeManager changeManager, IChangeProvider changeProvider);
}
[ExtensionAttribute]
public static class JetBrains.Application.changes.ChangeManagerExtension : object {
    [ExtensionAttribute]
public static void RegisterChangeProvider(ChangeManager changeManager, Lifetime lifetime, IChangeProvider changeProvider);
    [ExtensionAttribute]
public static void AddDependency(ChangeManager changeManager, Lifetime lifetime, IChangeProvider target, IChangeProvider source);
}
[ShellComponentAttribute]
public class JetBrains.Application.changes.ChangeManagerImpl : ChangeManager {
    private static Statistics Statistics;
    private WeakToStrongDictionary`2<IChangeProvider, WeakCollection`1<IChangeProvider>> myNodeToIncomingNodesMap;
    private WeakToStrongDictionary`2<IChangeProvider, WeakCollection`1<IChangeProvider>> myNodeToOutgoingNodesMap;
    private long myEventCounter;
    private bool myIsDispatchingEvent;
    private bool myIsExecutingPendingActions;
    private Queue`1<Action> myActionsToExecuteAfterChange;
    private ChangedEventHandler[] myChangedEventHandlers;
    private WeakToStrongDictionary`2<IChangeProvider, List`1<IChangeProvider>> myCachedProviderToAllDependentProviders;
    private IThreading myThreading;
    public bool IsInChange { get; }
    public long EventCounter { get; }
    public ChangeManagerImpl(Lifetime lifetime, IThreading threading);
    private static ChangeManagerImpl();
    public sealed virtual ICollection`1<IChangeProvider> GetDependentNodes(IChangeProvider changeProvider);
    [NotNullAttribute]
private WeakCollection`1<IChangeProvider> GetOutgoingNodesList(IChangeProvider changeProvider);
    public sealed virtual ICollection`1<IChangeProvider> GetDependsUponNodes(IChangeProvider changeProvider);
    [NotNullAttribute]
private WeakCollection`1<IChangeProvider> GetIncomingNodesList(IChangeProvider changeProvider);
    private IChangeProvider FindNextNode(JetHashSet`1<IChangeProvider> removedNodes);
    private bool CheckCycles();
    private static void FindReachableNodes(IDependencyGraph dependencyGraph, IChangeProvider changeProvider, JetHashSet`1<IChangeProvider> reachable);
    public virtual void OnProviderChanged(IChangeProvider changeProvider, object change, ITaskExecutor executor);
    private static void InvokeOrderedDependentProviders(ITaskExecutor executor, IEnumerable`1<IChangeProvider> dependentProviders, ChangeMap changeMap);
    private void ExecutePendingActions();
    public virtual void RegisterChangeProvider(IChangeProvider changeProvider);
    private void DoRegisterChangeProvider(IChangeProvider changeProvider);
    public void CheckCyclicDependency();
    public virtual bool get_IsInChange();
    public virtual void AddDependency(IChangeProvider target, IChangeProvider source);
    private void DoAddDependency(IChangeProvider source, IChangeProvider target);
    public virtual void RemoveDependency(IChangeProvider target, IChangeProvider source);
    private void DoRemoveDependency(IChangeProvider source, IChangeProvider target);
    private int GetProviderIndex(IChangeProvider provider);
    private string GetProviders(IEnumerable`1<IChangeProvider> providers);
    public virtual void Dump(TextWriter to);
    public long get_EventCounter();
    public virtual void UnregisterChangeProvider(IChangeProvider changeProvider);
    private void DoUnregisterChangeProvider(IChangeProvider changeProvider);
    public virtual void add_Changed(ChangedEventHandler value);
    public virtual void remove_Changed(ChangedEventHandler value);
    public virtual void ExecuteAfterChange(Action action);
    [ObsoleteAttribute("Used for internal purposes only")]
public WeakToStrongDictionary`2<IChangeProvider, WeakCollection`1<IChangeProvider>> NodeToIncomingNodesMap();
    [ObsoleteAttribute("Used for internal purposes only")]
public WeakToStrongDictionary`2<IChangeProvider, WeakCollection`1<IChangeProvider>> NodeToOutgoingNodesMap();
}
internal class JetBrains.Application.changes.ChangeMap : object {
    private Dictionary`2<IChangeProvider, object> myChangeProviderToChangesMap;
    public void ContributeChange(IChangeProvider changeProvider, object change);
    public sealed virtual IEnumerable`1<TChangeType> GetChanges();
    public sealed virtual object GetChange(IChangeProvider changeProvider);
}
[ExtensionAttribute]
public static class JetBrains.Application.changes.ChangeMapEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T GetChange(IChangeMap changeMap, IChangeProvider changeProvider);
}
public class JetBrains.Application.changes.CyclicDependencyException : ApplicationException {
    private IChangeProvider myOffendingProvider;
    public IChangeProvider OffendingProvider { get; }
    public CyclicDependencyException(IChangeProvider offendingProvider);
    public IChangeProvider get_OffendingProvider();
}
public class JetBrains.Application.changes.FileSystemChange : object {
    private IList`1<FileSystemChangeDelta> myFileSystemChangeDeltas;
    public IList`1<FileSystemChangeDelta> Deltas { get; }
    public FileSystemChange(IList`1<FileSystemChangeDelta> fileSystemChangeDeltas);
    public IList`1<FileSystemChangeDelta> get_Deltas();
}
public class JetBrains.Application.changes.FileSystemChangeDelta : object {
    private IList`1<FileSystemChangeDelta> myChildrenDeltas;
    private FileSystemChangeType myChangeType;
    private FileSystemPath myOldPath;
    private FileSystemPath myNewPath;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemChangeDelta, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public FileSystemChangeType ChangeType { get; }
    public FileSystemPath OldPath { get; }
    public FileSystemPath NewPath { get; }
    public FileSystemChangeDelta(IList`1<FileSystemChangeDelta> childrenDeltas, FileSystemChangeType changeType, FileSystemPath oldPath, FileSystemPath newPath);
    [CanBeNullAttribute]
public FileSystemChangeDelta FindChangeDelta(FileSystemPath path);
    [NotNullAttribute]
public FileSystemChangeDelta FindNearestParentChangeDelta(FileSystemPath path);
    public virtual string ToString();
    public IList`1<FileSystemChangeDelta> GetChildren();
    public void AppendChild(FileSystemChangeDelta chilDelta);
    public FileSystemChangeType get_ChangeType();
    public FileSystemPath get_OldPath();
    public FileSystemPath get_NewPath();
    public void Accept(IFileSystemChangeDeltaVisitor visitor);
    private void DumpInternal(FileSystemPath prefix, TextWriter writer, int level);
    public void Dump(FileSystemPath prefix, TextWriter writer);
    public string Dump(FileSystemPath prefix);
    [CompilerGeneratedAttribute]
private static string <DumpInternal>b__0(FileSystemChangeDelta d);
}
[ExtensionAttribute]
public static class JetBrains.Application.changes.FileSystemChangeEx : object {
    [ExtensionAttribute]
public static void VisitDeltasRecursively(FileSystemChange change, Action`1<FileSystemChangeDelta> processDelta);
}
public enum JetBrains.Application.changes.FileSystemChangeType : Enum {
    public int value__;
    public static FileSystemChangeType ADDED;
    public static FileSystemChangeType DELETED;
    public static FileSystemChangeType CHANGED;
    public static FileSystemChangeType SUBTREE_CHANGED;
    public static FileSystemChangeType RENAMED;
    public static FileSystemChangeType UNKNOWN;
}
public interface JetBrains.Application.changes.IChangeMap {
    [CanBeNullAttribute]
public abstract virtual object GetChange(IChangeProvider changeProvider);
    public abstract virtual IEnumerable`1<TChangeType> GetChanges();
}
public interface JetBrains.Application.changes.IChangeProvider {
    public abstract virtual object Execute(IChangeMap changeMap);
}
internal interface JetBrains.Application.changes.IDependencyGraph {
    public abstract virtual ICollection`1<IChangeProvider> GetDependentNodes(IChangeProvider provider);
    public abstract virtual ICollection`1<IChangeProvider> GetDependsUponNodes(IChangeProvider provider);
}
public interface JetBrains.Application.changes.IFileSystemChangeDeltaVisitor {
    public abstract virtual void Visit(FileSystemChangeDelta delta);
}
public class JetBrains.Application.changes.Pattern : object {
    private FileSystemPath myBasePath;
    private bool myIsRecursive;
    private Regex myRegex;
    private string myOriginalPattern;
    private static Char[] ourWildcards;
    public string OriginalPattern { get; }
    public FileSystemPath BasePath { get; }
    public bool IsRecursive { get; }
    public Regex Regex { get; }
    public Pattern(FileSystemPath basePath, string pattern);
    private static Pattern();
    public string get_OriginalPattern();
    public FileSystemPath get_BasePath();
    public bool get_IsRecursive();
    public Regex get_Regex();
    private void ConvertPattern(string originalNAntPattern);
    private string ToRegexPattern(string pattern);
    public bool MatchWith(FileSystemPath path);
    public virtual string ToString();
    public sealed virtual bool Equals(Pattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static void WritePattern(Pattern excludePattern, BinaryWriter writer);
}
public class JetBrains.Application.changes.RecursiveFileSystemChangeDeltaVisitor : object {
    public virtual void Visit(FileSystemChangeDelta delta);
}
public class JetBrains.Application.CommandProcessing.Command : ValueType {
    private string myName;
    public static Command Empty;
    public string Name { get; }
    public Command(string name);
    private static Command();
    public string get_Name();
    public virtual string ToString();
}
public interface JetBrains.Application.CommandProcessing.ICommandProcessor {
    public IProperty`1<bool> IsExecutingCommand { get; }
    public bool IsRedoInProgress { get; }
    public bool IsUndoInProgress { get; }
    public Command CurrentCommand { get; }
    [NotNullAttribute]
public IProperty`1<string> CurrentBatchChangeName { get; }
    public abstract virtual IProperty`1<bool> get_IsExecutingCommand();
    public abstract virtual bool get_IsRedoInProgress();
    public abstract virtual bool get_IsUndoInProgress();
    public abstract virtual Command get_CurrentCommand();
    public abstract virtual void BeginBatchTextChange(Lifetime lifetime, string commandName);
    public abstract virtual void ExecuteBeforeCurrentCommandFinished(Action F);
    public abstract virtual IProperty`1<string> get_CurrentBatchChangeName();
    public abstract virtual void BeginCommand(Lifetime lifetime, string commandName);
}
[ExtensionAttribute]
public static class JetBrains.Application.CommandProcessing.ICommandProcessorEx : object {
    [ExtensionAttribute]
public static void WithCommand(ICommandProcessor thіs, string commandName, Action action);
    [ExtensionAttribute]
[GuardAttribute("-1")]
public static void ExecuteOutsideCommandScope(ICommandProcessor thіs, Lifetime lifetime, Action action);
    [NotNullAttribute]
[ExtensionAttribute]
public static IDisposable UsingBatchTextChange(ICommandProcessor thіs, string commandName);
    [NotNullAttribute]
[ExtensionAttribute]
public static IDisposable UsingCommand(ICommandProcessor thіs, string commandName);
}
[ShellComponentAttribute]
public class JetBrains.Application.CommandProcessing.StandaloneCommandProcessor : object {
    protected IProperty`1<Command> myCurrentCommand;
    protected IProperty`1<int> myCurrentCommandNestingLevel;
    private List`1<Action> myPendingActionsToExecute;
    private ISignal`1<string> myAfterCommandFinished;
    private ISignal`1<string> myBeforeCommandFinished;
    private ISignal`1<string> myBeforeCommandStarted;
    protected bool myIsUndoInProgress;
    protected bool myIsRedoInProgress;
    public IProperty`1<string> myCurrentBatchChangeName;
    protected IProperty`1<bool> myIsExecutingCommand;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegatef;
    private IProperty`1<string> JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentBatchChangeName { get; }
    public ISignal`1<string> BeforeCommandStarted { get; }
    public ISignal`1<string> BeforeCommandFinished { get; }
    public ISignal`1<string> AfterCommandFinished { get; }
    private IProperty`1<bool> JetBrains.Application.CommandProcessing.ICommandProcessor.IsExecutingCommand { get; }
    private Command JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentCommand { get; }
    private bool JetBrains.Application.CommandProcessing.ICommandProcessor.IsUndoInProgress { get; }
    private bool JetBrains.Application.CommandProcessing.ICommandProcessor.IsRedoInProgress { get; }
    public StandaloneCommandProcessor(Lifetime lifetime);
    private sealed virtual override IProperty`1<string> JetBrains.Application.CommandProcessing.ICommandProcessor.get_CurrentBatchChangeName();
    public ISignal`1<string> get_BeforeCommandStarted();
    public ISignal`1<string> get_BeforeCommandFinished();
    public ISignal`1<string> get_AfterCommandFinished();
    private sealed virtual override void JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(Lifetime lifetime, string commandName);
    private sealed virtual override void JetBrains.Application.CommandProcessing.ICommandProcessor.BeginCommand(Lifetime lifetime, string commandName);
    private void ExecutePendingActions();
    private sealed virtual override void JetBrains.Application.CommandProcessing.ICommandProcessor.ExecuteBeforeCurrentCommandFinished(Action F);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.CommandProcessing.ICommandProcessor.get_IsExecutingCommand();
    private sealed virtual override Command JetBrains.Application.CommandProcessing.ICommandProcessor.get_CurrentCommand();
    private sealed virtual override bool JetBrains.Application.CommandProcessing.ICommandProcessor.get_IsUndoInProgress();
    private sealed virtual override bool JetBrains.Application.CommandProcessing.ICommandProcessor.get_IsRedoInProgress();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(int n);
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.CommandProcessing.ICommandProcessor.BeginCommand>b__6();
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.CommandProcessing.ICommandProcessor.BeginCommand>b__7();
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.CommandProcessing.ICommandProcessor.BeginCommand>b__a();
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.CommandProcessing.ICommandProcessor.BeginCommand>b__c();
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.CommandProcessing.ICommandProcessor.BeginCommand>b__d();
    [CompilerGeneratedAttribute]
private object <JetBrains.Application.CommandProcessing.ICommandProcessor.BeginCommand>b__b();
    [CompilerGeneratedAttribute]
private object <ExecutePendingActions>b__13();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "Sets up application's access to the World Wide Web.")]
public class JetBrains.Application.Communication.InternetSettings : object {
}
public interface JetBrains.Application.Communication.IPortListener {
    public bool ContinueListening { get; }
    public abstract virtual bool get_ContinueListening();
    public abstract virtual void OnBytesReceived(IPEndPoint from, Byte[] data);
}
[ShellComponentAttribute]
public class JetBrains.Application.Communication.ShellWebProxySettingsReader : object {
    public ShellWebProxySettingsReader(Lifetime lifetime, WebProxySettingsReader webProxySettingsReader, ISettingsStore settingsStore, ISettingsOptimization settingsOptimization);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Communication.SocketManager : object {
    private ILogger myLogger;
    public static Int32[] MULTICAST_PORTS;
    public static IPAddress MULTICAST_ADDRESS;
    private object LOCK;
    private Dictionary`2<IPEndPoint, Entry> myThreads;
    public SocketManager(Lifetime lifetime, ILogger logger);
    private static SocketManager();
    private static UdpClient AttachToPort(IPEndPoint ipPoint, ILogger logger);
    [CanBeNullAttribute]
private Entry GetEntry(IPEndPoint ipPoint);
    private void RemovePortListener(IPEndPoint ipPoint, IPortListener listener);
    private bool AddPortListener(IPEndPoint ipPoint, IPortListener listener);
    private void RemovePortThread(IPEndPoint ipPoint);
    public static bool IsFromUs(IPEndPoint from, ILogger logger);
    private void Send(IPEndPoint address, Byte[] dataBytes);
    public void AddPortListener(Lifetime lifetime, IPortListener listener, IPAddress multicastAddress, Int32[] ports);
    private void RemovePortListener(IPortListener listener);
    public void Send(Byte[] data);
    private void DisposeInternal();
}
[SettingsKeyAttribute("JetBrains.Application.Communication.InternetSettings", "Governs the use of a proxy server when downloading from Internet.")]
public class JetBrains.Application.Communication.WebProxySettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether to use user-defined proxy settings instead of the system-wide proxy settings.")]
public bool IsCustomProxy;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "If IsCustomProxy, use this proxy hostname.")]
public string Hostname;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "If IsCustomProxy, use this proxy port.")]
public int Port;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "If IsCustomProxy, use this proxy username (for password-protected proxies only).")]
public string Username;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "If IsCustomProxy, use this proxy password (for password-protected proxies only, ignored if username is empty).")]
public string Password;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "If IsCustomProxy, and creating custom proxy from the provided settings failed, reports the error. An empty string if last proxy use was successful. This error won't be exposed as a download exception because on this error proxy settings silently fall back to default. Always set on the global context.")]
public string LastProxyCreationError;
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Communication.WebProxySettingsReader : object {
    private ILogger myLogger;
    private SafeRegistryPersister`1<WebProxySettings> myPersister;
    private IWebProxy myWebProxy;
    public WebProxySettingsReader(Lifetime lifetime, ILogger logger, AnyProductSettingsLocation settingsLocation);
    public static Pair`2<IWebProxy, string> WebProxySettingsToProxy(WebProxySettings proxySettings);
    internal string SetSettings(WebProxySettings proxySettings);
    [NotNullAttribute]
public IWebProxy GetProxySettings();
    private void TraceSettings(string action, WebProxySettings proxySettings);
}
public static class JetBrains.Application.ComposeVerdictWithPriority : object {
    [NotNullAttribute]
public static IProperty`1<TVerdict> Create(Lifetime lifetime, CollectionEvents`1<VerdictTeller`1<TVerdict>> tellers);
    private static void BindPropToList(Lifetime lifetime, IProperty`1<TVerdict> propComposite, IListEvents`1<VerdictTeller`1<TVerdict>> listTellers);
    private static TVerdict UpdateActiveTellers_GetCompositeState(IList`1<ActiveTeller`1<TVerdict>> tellers);
    private static void UpdateActiveTellers(Lifetime lifetimeComponent, List`1<ActiveTeller`1<TVerdict>> tellers, IProperty`1<TVerdict> propComposite);
    [NotNullAttribute]
private static IProperty`1<TVerdict> UpdateActiveTellers_Activate(Lifetime lifetimeComponent, ActiveTeller`1<TVerdict> teller, Action FUpdateOnPropChange);
    [CompilerGeneratedAttribute]
private static int <Create>b__1(VerdictTeller`1<TVerdict> α, VerdictTeller`1<TVerdict> β);
}
[ExtensionAttribute]
public static class JetBrains.Application.Configuration.ComponentSettingsProviderExtensions : object {
    [ExtensionAttribute]
public static void Upgrade(IComponentSettingsProvider legacySettingsProvider, XmlExternalizationScope scope, string sectionName, Action`1<XmlElement> action);
}
[ObsoleteAttribute("For usage only in settings upgraders. Do not create a component!")]
public class JetBrains.Application.Configuration.GlobalSettingsTable : SettingsTableBase {
    private static XmlExternalizationScope ourConfigScope;
    private IComponentSettingsProvider mySettings;
    public GlobalSettingsTable(IComponentSettingsProvider settings, ProductConfigurations productConfigurations);
}
public interface JetBrains.Application.Configuration.IComponentSettingsProvider {
    public abstract virtual void LoadSettings(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
}
public interface JetBrains.Application.Configuration.ISaveSettings {
    public abstract virtual void LoadSettings();
    public abstract virtual void SaveSettings();
}
[ObsoleteAttribute("Deprecated functionality. Use SettingsStore and its infrastructure.")]
public interface JetBrains.Application.Configuration.IXmlConfigurable {
    public abstract virtual void ConfigureFromXml(XmlElement element);
}
public interface JetBrains.Application.Configuration.IXmlReadable {
    public abstract virtual void ReadFromXml(XmlElement element);
}
public interface JetBrains.Application.Configuration.IXmlRegistrable {
    public abstract virtual void RegisterFromXml(XmlElement element, IDictionary extraData);
}
public interface JetBrains.Application.Configuration.IXmlUpgradable {
    [NotNullAttribute]
public IEnumerable`1<string> LegacyTagNames { get; }
    public abstract virtual IEnumerable`1<string> get_LegacyTagNames();
    public abstract virtual bool UpgradeFromXml(XmlElement element, Version version);
}
public interface JetBrains.Application.Configuration.IXmlWritable {
    public abstract virtual void WriteToXml(XmlElement element);
}
[ObsoleteAttribute]
public abstract class JetBrains.Application.Configuration.SettingsComponentBase : object {
    private static string ConfigurationElementName;
    private Dictionary`2<XmlExternalizationScope, Dictionary`2<string, XmlElement>> myXmlSettingsBag;
    [CanBeNullAttribute]
private Version myVersionUpgradingFrom;
    [CanBeNullAttribute]
private XmlDocument myXmlDocumentSettings;
    private ProductConfigurations myProductConfigurations;
    [NotNullAttribute]
protected ICollection`1<XmlExternalizationScope> ValidXmlExternalizationScopes { get; }
    protected SettingsComponentBase(ProductConfigurations productConfigurations);
    private void ComponentReadFromXmlBag(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
    protected abstract virtual bool OnLoadSettingsXmlBag(Action`2<XmlDocument, XmlExternalizationScope> funcDeserializeXmlBag);
    protected void ShouldUpgradeSettings(Version version);
    protected abstract virtual ICollection`1<XmlExternalizationScope> get_ValidXmlExternalizationScopes();
    private bool ComponentReadFromXmlBag_TrySettingsElement(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
    private bool ComponentReadFromXmlBag_TryUpgrade(IXmlReadable component, XmlExternalizationScope scope);
    private void DeserializeXmlBag(XmlDocument document, XmlExternalizationScope scope);
    private void AssertValidComponent(object component, XmlExternalizationScope scope, string sectionName);
    public sealed virtual void LoadSettings(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
    public void LoadSettingsWithXmlExternalizationUtil(object target, XmlExternalizationScope scope, string sectionName);
    public bool Init();
}
public abstract class JetBrains.Application.Configuration.SettingsTableBase : object {
    private static string BOOLEAN_SETTINGS_TAG;
    private static string INTEGER_SETTINGS_TAG;
    private static string SETTING_ENCRYPTED_ATTRIBUTE;
    private static string SETTING_NAME_ATTRIBUTE;
    private static string SETTING_TAG;
    private static string STRING_SETTINGS_TAG;
    protected static string ConfigName;
    [NotNullAttribute]
private PropertiesCollection`1<bool> myBooleanPropertiesCollection;
    [NotNullAttribute]
private JetHashSet`1<string> myEncryptedSettings;
    [NotNullAttribute]
private PropertiesCollection`1<int> myIntegerPropertiesCollection;
    [NotNullAttribute]
private PropertiesCollection`1<string> myStringPropertiesCollection;
    private ProductConfigurations myProductConfigurations;
    public PropertiesCollection`1<bool> BoolProperties { get; }
    public PropertiesCollection`1<int> IntProperties { get; }
    public PropertiesCollection`1<string> StringProperties { get; }
    protected SettingsTableBase(ProductConfigurations productConfigurations);
    public PropertiesCollection`1<bool> get_BoolProperties();
    public PropertiesCollection`1<int> get_IntProperties();
    public PropertiesCollection`1<string> get_StringProperties();
    public sealed virtual bool GetBoolean(string settingName);
    public sealed virtual bool GetBoolean(string settingName, bool defaultVal);
    public sealed virtual int GetInteger(string settingName);
    public sealed virtual int GetInteger(string settingName, int defaultVal);
    public sealed virtual string GetString(string settingName);
    public sealed virtual string GetString(string settingName, string defaultVal);
    public sealed virtual void SetBoolean(string settingName, bool val);
    public sealed virtual void SetInteger(string settingName, int val);
    public sealed virtual void SetString(string settingName, string val);
    public bool IsEncrypted(string settingName);
    private void ReadHashtable(XmlElement element, string tagName, IDictionary`2<string, string> table);
    private void WriteHashtable(XmlElement element, string tagName, SortedDictionary`2<string, string> table);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
}
public abstract class JetBrains.Application.Configuration.SettingTablesUpgrader : object {
    private static WorkspaceSettingsTable ourWorkspaceSettingsTable;
    private static GlobalSettingsTable ourGlobalSettingsTable;
    private static object ourLock;
    protected ProductConfigurations ProductConfigurations;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    protected SettingTablesUpgrader(ProductConfigurations productConfigurations);
    private static SettingTablesUpgrader();
    private sealed virtual override void JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    protected abstract virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader.Upgrade>b__1();
}
[ObsoleteAttribute("%MEANINGFUL EXPLANATION HERE%")]
public class JetBrains.Application.Configuration.ShellSettingsComponent : SettingsComponentBase {
    private static XmlExternalizationScope[] ourValidXmlExternalizationScopes;
    public static PropertyId`1<Func`1<IEnumerable`1<Tuple`2<FileSystemPath, Version>>>> PropGetLegacySettingsFiles;
    private IApplicationHost myApplicationHost;
    private IEnumerable`1<ISettingsApplicationTrait> mySettingsApplicationTraits;
    private ProductSettingsLocation myProductSettingsLocation;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsApplicationTrait, IEnumerable`1<Tuple`2<FileSystemPath, Version>>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<Tuple`2<FileSystemPath, Version>>, IEnumerable`1<Tuple`2<FileSystemPath, Version>>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<FileSystemPath, Version>, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    protected ICollection`1<XmlExternalizationScope> ValidXmlExternalizationScopes { get; }
    public ShellSettingsComponent(IApplicationHost applicationHost, IEnumerable`1<ISettingsApplicationTrait> settingsApplicationTraits, IThreading threading, ProductSettingsLocation productSettingsLocation, ProductConfigurations productConfigurations);
    private static ShellSettingsComponent();
    protected virtual ICollection`1<XmlExternalizationScope> get_ValidXmlExternalizationScopes();
    [CanBeNullAttribute]
private XmlDocument GetWorkspaceDocument();
    protected virtual bool OnLoadSettingsXmlBag(Action`2<XmlDocument, XmlExternalizationScope> funcDeserializeXmlBag);
    [CanBeNullAttribute]
private XmlDocument GetUserSettingsDocument_CurrentVersion();
    [CanBeNullAttribute]
private XmlDocument GetUserSettingsDocument_LegacyVersion();
    [CanBeNullAttribute]
private XmlDocument GetUserSettingsDocument();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Tuple`2<FileSystemPath, Version>> <GetUserSettingsDocument_LegacyVersion>b__0(ISettingsApplicationTrait settrait);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Tuple`2<FileSystemPath, Version>> <GetUserSettingsDocument_LegacyVersion>b__2(IEnumerable`1<Tuple`2<FileSystemPath, Version>> files);
    [CompilerGeneratedAttribute]
private static bool <GetUserSettingsDocument_LegacyVersion>b__3(Tuple`2<FileSystemPath, Version> customfile);
}
[ShellComponentAttribute]
public class JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgrade : SettingsUpgradeBase`2<IGlobalSettingsUpgrader, GlobalSettingsUpgraderAttribute> {
    private IShellLocks myLocks;
    private ProductSettingsLocation myProductSettingsLocation;
    private ProductConfigurations myProductConfigurations;
    private IApplicationHost myProductNameAndVersion;
    private IEnumerable`1<ISettingsApplicationTrait> mySettingsApplicationTraits;
    [CompilerGeneratedAttribute]
private static Func`3<Lifetime, DataContexts, IDataContext> CS$<>9__CachedAnonymousMethodDelegate5;
    public GlobalSettingsUpgrade(Lifetime lifetime, ISettingsStore settingsStore, IComponentContainer parentContainer, ShellPartCatalogSet catalogueSet, ProductSettingsLocation productSettingsLocation, ProductConfigurations productConfigurations, IShellLocks locks, ResetSettings resetSettings, GlobalSettings globalSettings, IApplicationHost productNameAndVersion, IEnumerable`1<ISettingsApplicationTrait> settingsApplicationTraits);
    protected virtual SettingsScalarEntry IsUpgradedFlagEntry(ISettingsSchema schema);
    protected virtual void DoUpgrade(IGlobalSettingsUpgrader settingsUpgrader, IComponentSettingsProvider solutionSettingsComponent, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    protected virtual IComponentSettingsProvider CreateLegacySettingsComponent();
    [CompilerGeneratedAttribute]
private static IDataContext <.ctor>b__3(Lifetime l, DataContexts contexts);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Global Settings Upgraded")]
public class JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgradedSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Global Settings Upgraded")]
public bool IsUpgraded;
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute : PartAttribute {
}
public interface JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader {
    public abstract virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public interface JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader {
}
public abstract class JetBrains.Application.Configuration.Upgrade.SettingsUpgradeBase`2 : object {
    protected virtual void DoUpgrade(IComponentContainer parentContainer, IPartCatalogSet catalogueSet, IContextBoundSettingsStore boundSettingsStore);
    protected abstract virtual SettingsScalarEntry IsUpgradedFlagEntry(ISettingsSchema schema);
    protected abstract virtual void DoUpgrade(TSettingsUpgrader settingsUpgrader, IComponentSettingsProvider solutionSettingsComponent, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    protected abstract virtual IComponentSettingsProvider CreateLegacySettingsComponent();
}
[ExtensionAttribute]
public static class JetBrains.Application.Configuration.Upgrade.SettingsUpgradeEx : object {
    [ExtensionAttribute]
public static void UpgradeValue(IContextBoundSettingsStore boundSettingsStore, Expression`1<Func`2<TKey, T>> expression, T value);
    [ExtensionAttribute]
public static void UpgradeIndexedValue(IContextBoundSettingsStore boundSettingsStore, Expression`1<Func`2<TSettingKey, IIndexedEntry`2<TKey, TValue>>> expression, TKey key, TValue value);
}
[ObsoleteAttribute("For usage only in settings upgraders. Do not create a component!")]
public class JetBrains.Application.Configuration.WorkspaceSettingsTable : SettingsTableBase {
    private static XmlExternalizationScope ourConfigScope;
    private IComponentSettingsProvider mySettings;
    public WorkspaceSettingsTable(IComponentSettingsProvider settings, ProductConfigurations productConfigurations);
}
[BaseTypeRequiredAttribute("JetBrains.Application.Configuration.IXmlConfigurable")]
public class JetBrains.Application.Configuration.XmlConfigurableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ConfigurationResourceName>k__BackingField;
    public string ConfigurationResourceName { get; public set; }
    public XmlConfigurableAttribute(string configurationResourceName);
    [CompilerGeneratedAttribute]
public string get_ConfigurationResourceName();
    [CompilerGeneratedAttribute]
public void set_ConfigurationResourceName(string value);
}
public static class JetBrains.Application.Configuration.XmlConfigurableHelper : object {
    public static void InitializeComponent_XmlConfigurable(IXmlConfigurable configurable);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("384")]
public class JetBrains.Application.Configuration.XmlExternalizableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXmlSerializer>k__BackingField;
    [CanBeNullAttribute]
public object DefaultValue { get; public set; }
    [CanBeNullAttribute]
public string SettingName { get; public set; }
    public bool UseXmlSerializer { get; public set; }
    public XmlExternalizableAttribute(object defaultvalue);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public string get_SettingName();
    [CompilerGeneratedAttribute]
public void set_SettingName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseXmlSerializer();
    [CompilerGeneratedAttribute]
public void set_UseXmlSerializer(bool value);
}
public enum JetBrains.Application.Configuration.XmlExternalizationScope : Enum {
    public int value__;
    public static XmlExternalizationScope Any;
    public static XmlExternalizationScope Local;
    public static XmlExternalizationScope Shared;
    public static XmlExternalizationScope UserSettings;
    public static XmlExternalizationScope WorkspaceSettings;
}
public static class JetBrains.Application.Configuration.XmlExternalizationUtil : object {
    private static string XmlArrayItemElemName;
    private static string XmlIsNullAttrName;
    public static string XmlExternalizableElementName;
    public static string XmlStreamElementName;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<ExternalizableMember, string> CS$<>9__CachedAnonymousMethodDelegate26;
    private static XmlExternalizationUtil();
    public static void ApplyDefaults(object externalizable);
    public static void ApplyDefaults(object externalizable, object proptoken);
    public static void ReadFromXml(XmlReader reader, object externalizable);
    public static void ReadFromXml(XmlElement parent, object externalizable);
    public static void ReadFromXml(XmlElement parent, object externalizable, object proptoken);
    public static void ReadFromXml(XmlReader reader, object externalizable, object proptoken);
    public static void ReadStreamElementsFromXml(XmlElement parent, Action`1<XmlReader> action);
    public static void ReadStreamFromXml(XmlElement parent, Action`1<XmlReader> action);
    public static void ReadStructFromXml(XmlElement parent, T& externalizable);
    public static void ReadStructFromXml(XmlElement parent, T& externalizable, object proptoken);
    public static void TryReadFromXml(XmlReader reader, object externalizable);
    public static void TryReadFromXml(XmlReader reader, object externalizable, object proptoken);
    public static void WriteStreamToXml(XmlElement parent, Action`1<XmlWriter> action);
    public static void WriteToXml(XmlElement parent, object externalizable);
    public static void WriteToXml(XmlWriter writer, object externalizable);
    public static void WriteToXml(XmlElement parent, object externalizable, object proptoken);
    public static void WriteToXml(XmlWriter writer, object externalizable, object proptoken);
    private static bool EqualsWithArrays(object o1, object o2);
    [NotNullAttribute]
private static List`1<ExternalizableMember> GetExternalizableMembers(object instance);
    private static object ParseValue(string value, Type targetType);
    private static void ReadFromXml_FillMembersWithValues(XmlReader reader, IDictionary`2<string, ExternalizableMember> members);
    private static void ReadFromXml_FillMembersWithValues(XmlElement parent, IDictionary`2<string, ExternalizableMember> members);
    [CanBeNullAttribute]
private static object ReadFromXml_FillMembersWithValues_Value(XmlReader reader, Type type);
    [CanBeNullAttribute]
private static object ReadFromXml_FillMembersWithValues_Value(XmlElement element, Type target);
    [NotNullAttribute]
private static Array ToArrayOfType(Type type, IEnumerable`1<object> source);
    private static void ReadFromXml_FillMembersWithValues_ValueXmlSerializer(XmlReader reader, ExternalizableMember item);
    private static void ReadFromXmlCore(object externalizable, Action`1<Dictionary`2<string, ExternalizableMember>> funcFillMembersWithValues, object proptoken);
    private static void WriteToXml_Value(XmlElement parent, string name, object val);
    private static void WriteToXml_Value(XmlWriter writer, string name, object val);
    private static void WriteToXml_XmlSerializerValue(XmlWriter writer, ExternalizableMember item, object value);
    public static void ReadFromSubTag(XmlElement element, IXmlReadable externalizable, string tagName);
    public static void WriteToSubTag(XmlElement element, IXmlWritable setting, string tagName);
    public static bool ArrayEquals(Array array1, Array array2);
    [CompilerGeneratedAttribute]
private static bool <ReadFromXml_FillMembersWithValues_Value>b__1d(object value);
    [CompilerGeneratedAttribute]
private static string <ReadFromXmlCore>b__25(ExternalizableMember item);
}
[ExtensionAttribute]
public static class JetBrains.Application.Configuration.XmlReadableExtensions : object {
    [ExtensionAttribute]
public static IXmlReadable CreateReadable(Action`1<XmlElement> action);
}
public class JetBrains.Application.ContextNotifications.ContextNotificationActionModel : object {
    private IconId myIcon;
    private string myTooltip;
    private ICommand myCommand;
    [NotNullAttribute]
public ICommand Command { get; }
    [NotNullAttribute]
public IconId Icon { get; }
    [CanBeNullAttribute]
public string Tooltip { get; }
    public ContextNotificationActionModel(IconId icon, string tooltip, ICommand command);
    public ContextNotificationActionModel(IconId icon, string tooltip, Action action, Func`1<bool> canExecute);
    public ICommand get_Command();
    public IconId get_Icon();
    public string get_Tooltip();
}
public abstract class JetBrains.Application.ContextNotifications.ContextNotificationHostBase : object {
    [NotNullAttribute]
private ContextNotificationViewModel myContextNotificationViewModel;
    [NotNullAttribute]
private Signal`1<ContextNotificationModel> myNotificationCreated;
    [NotNullAttribute]
private EscapeHandler myEscapeHandler;
    public ContextNotificationViewModel ViewModel { get; }
    public ISignal`1<ContextNotificationModel> NotificationCreated { get; }
    protected ContextNotificationHostBase(Lifetime lifetime, IThreading threading, IActionManager actionManager);
    public virtual void Create(ContextNotificationModel model);
    protected virtual bool CanRemoveLastTask(IDataContext context);
    public sealed virtual ContextNotificationViewModel get_ViewModel();
    public sealed virtual ISignal`1<ContextNotificationModel> get_NotificationCreated();
}
[ShellComponentAttribute]
public class JetBrains.Application.ContextNotifications.ContextNotificationHostProvider : object {
    [NotNullAttribute]
private IComponentContainer myContainer;
    public bool IsAvaliable { get; }
    public ContextNotificationHostProvider(IComponentContainer container);
    public bool get_IsAvaliable();
    [CanBeNullAttribute]
public IContextNotificationHost Get();
}
public abstract class JetBrains.Application.ContextNotifications.ContextNotificationModel : object {
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private GroupingEvent myGroupingEvent;
    [NotNullAttribute]
private ObservableCollection`1<ContextNotificationActionModel> myActions;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public string Title { get; }
    public double TitleExtraWidth { get; }
    public bool HasProgress { get; }
    public double Fraction { get; }
    [NotNullAttribute]
protected GroupingEvent GroupingEvent { get; }
    public bool IsVisible { get; public set; }
    public bool CanExecute { get; }
    public ObservableCollection`1<ContextNotificationActionModel> Actions { get; }
    protected ContextNotificationModel(LifetimeDefinition lifetimeDefinition, IThreading threading);
    private void Initialize();
    public Lifetime get_Lifetime();
    public abstract virtual string get_Title();
    public virtual double get_TitleExtraWidth();
    public virtual bool get_HasProgress();
    public virtual double get_Fraction();
    protected GroupingEvent get_GroupingEvent();
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    public virtual void Cancel();
    public virtual void Execute();
    public virtual bool get_CanExecute();
    public ObservableCollection`1<ContextNotificationActionModel> get_Actions();
    protected virtual void FillActions();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged();
}
public class JetBrains.Application.ContextNotifications.ContextNotificationViewModel : object {
    private static TimeSpan ourFromMilliseconds;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ObservableCollection`1<ContextNotificationModel> myTasks;
    private PropertyChangedEventHandler PropertyChanged;
    public ObservableCollection`1<ContextNotificationModel> Tasks { get; }
    public ContextNotificationViewModel(Lifetime lifetime, IThreading threading);
    private static ContextNotificationViewModel();
    public ObservableCollection`1<ContextNotificationModel> get_Tasks();
    public void Add(Lifetime lifetime, ContextNotificationModel model);
    private void AddInternal(ContextNotificationModel model);
    private void AddModel(ContextNotificationModel task);
    private void RemoveBackgroundOperation(ContextNotificationModel task);
    public bool Any();
    public bool RemoveLast();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public interface JetBrains.Application.ContextNotifications.IContextNotificationHost {
    [NotNullAttribute]
public ISignal`1<ContextNotificationModel> NotificationCreated { get; }
    [NotNullAttribute]
public ContextNotificationViewModel ViewModel { get; }
    public abstract virtual void Create(ContextNotificationModel model);
    public abstract virtual ISignal`1<ContextNotificationModel> get_NotificationCreated();
    public abstract virtual ContextNotificationViewModel get_ViewModel();
}
public enum JetBrains.Application.Creation : Enum {
    public int value__;
    public static Creation PrimaryThread;
    public static Creation AnyThread;
}
public class JetBrains.Application.DataContext.AmbientApplicationDataRule`1 : DataRule`1<TValue> {
    public AmbientApplicationDataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.AmbientApplicationOrSelectionDataRule`1 : DataRule`1<TValue> {
    public AmbientApplicationOrSelectionDataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.AmbientSelectionDataRule`1 : DataRule`1<TValue> {
    public AmbientSelectionDataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.AmbientSelectionMainThreadDataRule`1 : DataRule`1<TValue> {
    public AmbientSelectionMainThreadDataRule`1(string name, DataConstant`1<TValue> dataconstant, IThreading mainthread, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.ApplicationContext : object {
    public static ApplicationContext Instance { get; }
    public static ApplicationContext get_Instance();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public abstract class JetBrains.Application.DataContext.ApplicationDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<Boxed`1<Point>> ScreenPoint;
    [NotNullAttribute]
public static DataConstant`1<CurrentSelectionContext> CurrentSelectionContext;
    [NotNullAttribute]
public static DataConstant`1<ApplicationContext> ApplicationContext;
    [NotNullAttribute]
public static DataConstant`1<ComponentContainerForFactoring> ComponentContainerForFactoring;
    private static ApplicationDataConstants();
}
[ExtensionAttribute]
public static class JetBrains.Application.DataContext.ApplicationDataConstantsExtensions : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static T GetComponent(IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<T> GetComponents(IDataContext dataContext);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static T TryGetComponent(IDataContext dataContext);
}
public class JetBrains.Application.DataContext.ComponentContainerForFactoring : object {
    public IComponentContainer Container;
    public ComponentContainerForFactoring(IComponentContainer container);
}
public class JetBrains.Application.DataContext.CurrentSelectionContext : object {
    public static CurrentSelectionContext Instance { get; }
    public static CurrentSelectionContext get_Instance();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class JetBrains.Application.DataContext.DataConstant`1 : object {
    [NotNullAttribute]
private string myId;
    public string Id { get; }
    public Type Type { get; }
    public DataConstant`1(string id);
    public sealed virtual string get_Id();
    public virtual string ToString();
    public static PropertyId`1<T> op_Implicit(DataConstant`1<T> dataconstant);
    public sealed virtual Type get_Type();
}
public class JetBrains.Application.DataContext.DataConstantPropertyId`1 : PropertyId`1<T> {
    [NotNullAttribute]
private DataConstant`1<T> myDataConstant;
    [NotNullAttribute]
public DataConstant`1<T> DataConstant { get; }
    public DataConstantPropertyId`1(DataConstant`1<T> dataconstant);
    public DataConstant`1<T> get_DataConstant();
    public static DataConstantPropertyId`1<T> op_Implicit(DataConstant`1<T> dataconstant);
    public static DataConstant`1<T> op_Implicit(DataConstantPropertyId`1<T> propertyid);
}
internal class JetBrains.Application.DataContext.DataContext : object {
    private Lifetime myLifetime;
    private DataContextValidator myValidator;
    private IShellLocks myLocks;
    private DataContextState myState;
    private static ILogger ourLogger;
    private IDataConstant myCachedValue0_Constant;
    private IDataConstant myCachedValue1_Constant;
    private IDataConstant myCachedValue2_Constant;
    private IDataConstant myCachedValue3_Constant;
    private object myCachedValue0_Value;
    private object myCachedValue1_Value;
    private object myCachedValue2_Value;
    private object myCachedValue3_Value;
    private Dictionary`2<IDataConstant, object> myCachedValuesTail;
    private object NULL_VALUE;
    private IList`1<IDataConstant> myDataConstantsInUse_Constant;
    private IList`1<bool> myDataConstantsDoCacheNull_Flag;
    [NotNullAttribute]
public Thread Thread;
    [NotNullAttribute]
private Evaluator myDataRules;
    private string myDebugInstanceId;
    [CompilerGeneratedAttribute]
private static Func`2<DataRuleStorageRecord[], IEnumerable`1<IDataRule>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<DataRuleStorageRecord, IDataRule> CS$<>9__CachedAnonymousMethodDelegate7;
    public DataContextState State { get; }
    [NotNullAttribute]
internal IEnumerable`1<IDataRule> DataRules { get; }
    private bool JetBrains.Application.DataContext.IDataContext.IsEmpty { get; }
    internal DataContext(Lifetime lifetime, DataContextValidator validator, IShellLocks locks, IEnumerable`1<IDataRule> datarulesPlain, ConcurrentDictionary`2<IDataConstant, DataRuleStorageRecord[]> datarulesSorted);
    private DataContext(Lifetime lifetime, DataContextValidator validator, IShellLocks locks, Evaluator dataRulesPlain, string debugInstanceId);
    private static DataContext();
    public sealed virtual DataContextState get_State();
    public sealed virtual IDataContext Prolongate(Lifetime lifetime);
    internal IEnumerable`1<IDataRule> get_DataRules();
    internal object DoGetData(IDataConstant constant);
    [NotNullAttribute]
private Dictionary`2<IDataConstant, object> CachedValues_ToDictionarySlow();
    [CanBeNullAttribute]
private object CachedValues_TryGetValue(IDataConstant constant);
    private void CachedValues_Set(IDataConstant constant, object value);
    private sealed virtual override T JetBrains.Application.DataContext.IDataContext.GetData(DataConstant`1<T> dataConstant);
    private sealed virtual override bool JetBrains.Application.DataContext.IDataContext.get_IsEmpty();
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message);
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message, object arg);
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message, object arg1, object arg2);
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message, object arg1, object arg2, object arg3);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDataRule> <get_DataRules>b__4(DataRuleStorageRecord[] o);
    [CompilerGeneratedAttribute]
private static IDataRule <get_DataRules>b__5(DataRuleStorageRecord record);
    [CompilerGeneratedAttribute]
private object <DoGetData>b__9();
}
[ShellComponentAttribute]
public class JetBrains.Application.DataContext.DataContexts : object {
    private FindDataRules myFindDataRules;
    private IShellLocks myLocks;
    [NotNullAttribute]
private ConcurrentDictionary`2<IDataConstant, DataRuleStorageRecord[]> myDataRulesSorted;
    private LockObject myDataRulesSortedWriterLock;
    private IDataContext myEmptyDataContext;
    private DataContextValidator myDataContextValidator;
    private ulong myDataRuleGeneration;
    [NotNullAttribute]
public FindDataRules FindDataRules { get; }
    [NotNullAttribute]
public IDataContext Empty { get; }
    public DataContexts(Lifetime lifetime, FindDataRules findDataRules, IShellLocks locks);
    public void RegisterDataRule(Lifetime lifetime, string name, DataConstant`1<TValue> constant, Func`2<IDataContext, TValue> FRule);
    public void RegisterDataRule(Lifetime lifetime, IDataRule rule);
    public void RegisterDataValidator(Lifetime lifetime, DataConstant`1<TValue> dataConstant, Func`3<DataContextState, TValue, bool> validator);
    [GuardAttribute("1")]
[NotNullAttribute]
public IDataContext CreateOnActiveControl(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateOnSelection(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [GuardAttribute("1")]
[NotNullAttribute]
public IDataContext CreateOnApplicationWideState(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateWithDataRules(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [GuardAttribute("1")]
[NotNullAttribute]
public IDataContext CreateWithoutDataRules(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [GuardAttribute("1")]
[NotNullAttribute]
public IDataContext CreateAtScreenPoint(Lifetime lifetime, Point ptScreen, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateOnControl(Lifetime lifetime, EitherControl control, IEnumerable`1<IDataRule> datarulesAdditional);
    [GuardAttribute("1")]
[NotNullAttribute]
public IDataContext CloneWithAdditionalDataRules(Lifetime lifetime, IDataContext dataContext, IEnumerable`1<IDataRule> datarulesAdditional);
    public FindDataRules get_FindDataRules();
    public IDataContext get_Empty();
}
public class JetBrains.Application.DataContext.DataContextState : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    [CompilerGeneratedAttribute]
private bool <ReadLockIsHeldAtCreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteLockTimestampAtCreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteLockTimestampAtLifetimeTermination>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteLockTimestampAtIgnoreMoment>k__BackingField;
    public bool ReadLockIsHeldAtCreationTime { get; private set; }
    public int WriteLockTimestampAtCreationTime { get; private set; }
    public int WriteLockTimestampAtLifetimeTermination { get; private set; }
    public int WriteLockTimestampAtIgnoreMoment { get; private set; }
    public int WriteLockTimestamp { get; }
    public bool IsLifetimeActive { get; }
    public DataContextState(Lifetime lifetime, IShellLocks locks);
    [CompilerGeneratedAttribute]
public bool get_ReadLockIsHeldAtCreationTime();
    [CompilerGeneratedAttribute]
private void set_ReadLockIsHeldAtCreationTime(bool value);
    [CompilerGeneratedAttribute]
public int get_WriteLockTimestampAtCreationTime();
    [CompilerGeneratedAttribute]
private void set_WriteLockTimestampAtCreationTime(int value);
    [CompilerGeneratedAttribute]
public int get_WriteLockTimestampAtLifetimeTermination();
    [CompilerGeneratedAttribute]
private void set_WriteLockTimestampAtLifetimeTermination(int value);
    [CompilerGeneratedAttribute]
public int get_WriteLockTimestampAtIgnoreMoment();
    [CompilerGeneratedAttribute]
private void set_WriteLockTimestampAtIgnoreMoment(int value);
    public int get_WriteLockTimestamp();
    public bool get_IsLifetimeActive();
    public bool CanGetData();
    public bool CanProlongate(Lifetime prolongationLifetime);
    private static int GetWriteLockTimestamp(IShellLocks locks);
    public void IgnoreWriteLocks();
    public virtual string ToString();
}
[ShellComponentAttribute]
public class JetBrains.Application.DataContext.DataContextValidator : object {
    private OneToListMap`2<Type, Func`3<DataContextState, object, bool>> myValidators;
    public void RegisterValidator(Lifetime lifetime, Func`3<DataContextState, T, bool> validator);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public void AssertDataIsValid(DataContextState state, IDataConstant constant, object value, IDataRule dataRule);
}
public class JetBrains.Application.DataContext.DataRule`1 : object {
    private DataConstant`1<TValue> myDataConstant;
    [CanBeNullAttribute]
private Func`2<IDataContext, TValue> myFTryEvaluate;
    [CanBeNullAttribute]
private TValue myValue;
    protected double myPriority;
    private Func`2<IDataContext, Tuple`2<TValue, bool>> myFTryEvaluateOrMissingValue;
    [NotNullAttribute]
private string myName;
    public string Name { get; }
    private IDataConstant JetBrains.Application.DataContext.IDataRule.OutputType { get; }
    private double JetBrains.Application.DataContext.IDataRule.Priority { get; }
    public DataRule`1(string name, DataConstant`1<TValue> dataconstant, TValue value);
    public DataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
    public DataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, Tuple`2<TValue, bool>> FTryEvaluateOrMissingValue);
    public sealed virtual string get_Name();
    private sealed virtual override IDataConstant JetBrains.Application.DataContext.IDataRule.get_OutputType();
    private sealed virtual override double JetBrains.Application.DataContext.IDataRule.get_Priority();
    private sealed virtual override object JetBrains.Application.DataContext.IDataRule.Evaluate(IDataContext context);
    [CompilerGeneratedAttribute]
private object <JetBrains.Application.DataContext.IDataRule.Evaluate>b__0();
    [CompilerGeneratedAttribute]
private object <JetBrains.Application.DataContext.IDataRule.Evaluate>b__1();
}
public static class JetBrains.Application.DataContext.DataRulePriorityClasses : object {
    public static double Assert;
    public static double Default;
    public static double Ambient;
    public static double Desperate;
}
[ExtensionAttribute]
public static class JetBrains.Application.DataContext.DataRules : object {
    [NotNullAttribute]
[PureAttribute]
public static IList`1<IDataRule> AddRule(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
    [NotNullAttribute]
[PureAttribute]
public static IList`1<IDataRule> AddRule(string name, DataConstant`1<TValue> dataconstant, TValue value);
    [NotNullAttribute]
[ExtensionAttribute]
public static IList`1<IDataRule> AddRule(IList`1<IDataRule> thіs, string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IList`1<IDataRule> AddRule(IList`1<IDataRule> thіs, string name, DataConstant`1<TValue> dataconstant, TValue value);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.DataContext.IFindDataRules")]
public class JetBrains.Application.DataContext.ExportFindDataRulesAttribute : ShellComponentAttribute {
    public double Priority;
}
[ShellComponentAttribute]
public class JetBrains.Application.DataContext.FindDataRules : object {
    private IEnumerable`1<IFindDataRules> myFinders;
    [CompilerGeneratedAttribute]
private static Comparison`1<ExportFindDataRulesAttribute> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IFindDataRules, IEnumerable`1<IDataRule>> CS$<>9__CachedAnonymousMethodDelegate3;
    public FindDataRules(Lifetime lifetime, IViewable`1<IFindDataRules> finders);
    public IEnumerable`1<IDataRule> FindActiveDataRules();
    public IEnumerable`1<IDataRule> FindDataRulesAtPoint(Point ptScreen);
    public IEnumerable`1<IDataRule> FindDataRulesInControl(EitherControl control);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__0(ExportFindDataRulesAttribute α, ExportFindDataRulesAttribute β);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDataRule> <FindActiveDataRules>b__2(IFindDataRules finder);
}
public interface JetBrains.Application.DataContext.IDataConstant {
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public Type Type { get; }
    public abstract virtual string get_Id();
    public abstract virtual Type get_Type();
}
public interface JetBrains.Application.DataContext.IDataContext {
    public DataContextState State { get; }
    public bool IsEmpty { get; }
    public abstract virtual DataContextState get_State();
    public abstract virtual bool get_IsEmpty();
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
public abstract virtual T GetData(DataConstant`1<T> dataConstant);
    [NotNullAttribute]
public abstract virtual IDataContext Prolongate(Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Application.DataContext.IDataContextEx : object {
    private static IDictionary`2<IDataConstant, PropertyId> myCache;
    private static IDataContextEx();
    [ExtensionAttribute]
public static bool CheckAllNotNull(IDataContext thіs, IDataConstant[] dataConstants);
    [ExtensionAttribute]
public static bool CheckAllNotNull(IDataContext thіs, IDataConstant dataConstant);
    [ExtensionAttribute]
public static bool CheckAnyNotNull(IDataContext thіs, IDataConstant[] dataConstants);
    [ExtensionAttribute]
[NotNullAttribute]
public static PropertyBag ToPropertyBag(IDataContext context, IDataConstant[] constants);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static object GetRawData(IDataContext context, IDataConstant constant);
    [NotNullAttribute]
[ExtensionAttribute]
public static PropertyId ToPropertyId(IDataConstant constant);
    [ExtensionAttribute]
[NotNullAttribute]
public static PropertyId`1<T> ToPropertyId(DataConstant`1<T> constant);
}
public interface JetBrains.Application.DataContext.IDataContextProvider {
    public IDataContext DataContext { get; }
    public abstract virtual IDataContext get_DataContext();
}
public interface JetBrains.Application.DataContext.IDataRule {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IDataConstant OutputType { get; }
    public double Priority { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDataConstant get_OutputType();
    public abstract virtual double get_Priority();
    public abstract virtual object Evaluate(IDataContext context);
}
public interface JetBrains.Application.DataContext.IDataRuleProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> GetDataRules();
}
public interface JetBrains.Application.DataContext.IFindDataRules {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> FindActiveDataRules();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> FindDataRulesAtPoint(Point ptScreen);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> FindDataRulesInControl(EitherControl control);
}
[ShellComponentAttribute]
public class JetBrains.Application.DataContext.ShellDataRules : object {
    public ShellDataRules(Lifetime lifetime, DataContexts contexts, IComponentContainer container);
}
[ObsoleteAttribute("There won't be any Defines in the Shared Shell, should stop using these at any places now.")]
public class JetBrains.Application.Defines : object {
    public static bool IsModeAssert;
    [NotNullAttribute]
public static string CompanyName;
    [NotNullAttribute]
public static DateTime DateTimeForSubscriptionCheck;
    [NotNullAttribute]
public static DateTime DateTimeProductBirth;
    [NotNullAttribute]
public static Guid GuidProductUpgradeCodeInstallationCenter;
    [NotNullAttribute]
public static Guid GuidVsPackageCoClass;
    [NotNullAttribute]
public static bool IsModeAnnotateCallStacks;
    [NotNullAttribute]
public static bool IsModeStatistics;
    [NotNullAttribute]
public static bool IsMsiIncludePdb;
    [NotNullAttribute]
public static bool IsMsiIncludeXmlDoc;
    [NotNullAttribute]
public static bool IsMsiProductBinariesStrongName;
    [NotNullAttribute]
public static bool IsReleaseLicenseAgreement;
    [NotNullAttribute]
public static bool IsReSharper;
    [NotNullAttribute]
public static bool IsReSharperMisbehavesEnabled;
    [NotNullAttribute]
public static string LicenseProductFamily;
    [NotNullAttribute]
public static string LicenseSeed;
    [NotNullAttribute]
public static string LicenseSupportIdentifier;
    [NotNullAttribute]
public static string ModeAnnotateCallStacksName;
    [NotNullAttribute]
public static string ModeAssertName;
    [NotNullAttribute]
public static string ModeStatisticsName;
    [NotNullAttribute]
public static string MsiSupportedVsVersionsList;
    [NotNullAttribute]
public static string NetfxRequiredVersionBuild;
    [NotNullAttribute]
public static string NetfxRequiredVersionMajor;
    [NotNullAttribute]
public static string NetfxRequiredVersionMinor;
    [NotNullAttribute]
public static string NetfxRequiredVersionRevision;
    [NotNullAttribute]
public static int NumLicenseAppVersion;
    [NotNullAttribute]
public static int NumLicenseFeedbackRequestDays;
    [NotNullAttribute]
public static int NumLicenseFreeTrialDays;
    [NotNullAttribute]
public static int NumLicenseLeftDaysNotification;
    [NotNullAttribute]
public static int NumTimeBombDays;
    [NotNullAttribute]
public static string NUnitCpu;
    [NotNullAttribute]
public static string NUnitInParallel;
    [NotNullAttribute]
public static string NUnitRuntime;
    [NotNullAttribute]
public static string NUnitVersion;
    [NotNullAttribute]
public static string PragmaOnce_Platform_Defines_Targets;
    [NotNullAttribute]
public static string PragmaOnce_Product_Defines_Targets;
    [NotNullAttribute]
public static string ProductDisplayName;
    [NotNullAttribute]
public static string ProductFullName;
    [NotNullAttribute]
public static string ProductName;
    [NotNullAttribute]
public static string ProductStandaloneApplicationCaps;
    [NotNullAttribute]
public static string ProductUpgradeCodeLegacyVS0800;
    [NotNullAttribute]
public static string ProductUpgradeCodeLegacyVS0900;
    [NotNullAttribute]
public static string ProductUpgradeCodeLegacyVS1000;
    [NotNullAttribute]
public static string ProductVisualStudioIntegrationCaps;
    [NotNullAttribute]
public static Uri UriBuy;
    [NotNullAttribute]
public static Uri UriCompany;
    [NotNullAttribute]
public static Uri UriEvaluate;
    [NotNullAttribute]
public static Uri UriProduct;
    [NotNullAttribute]
public static Uri UriProductCommunityNewsgroups;
    [NotNullAttribute]
public static Uri UriProductHelp;
    [NotNullAttribute]
public static Uri UriProductSupportEmail;
    [NotNullAttribute]
public static Uri UriProductUninstallFeedback;
    [NotNullAttribute]
public static Uri UriProductUpdateInfoForInstaller;
    [NotNullAttribute]
public static Uri UriUpdatesFilterXslt;
    [NotNullAttribute]
public static string VsPackageLoadKey;
    private static Defines();
}
[MemberwiseSerializableAttribute]
public abstract class JetBrains.Application.Deploy.BasePushToArtifact : object {
    [NotNullAttribute]
public SimpleFileItem File;
    protected BasePushToArtifact(SimpleFileItem file);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
public abstract class JetBrains.Application.Deploy.BasePushTorGalleryArtifact : BasePushToArtifact {
    protected BasePushTorGalleryArtifact(SimpleFileItem file);
}
[DataContractAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum JetBrains.Application.Deploy.DeployCdnFlags : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DeployCdnFlags Default;
    [EnumMemberAttribute]
public static DeployCdnFlags Override;
    [EnumMemberAttribute]
public static DeployCdnFlags Unzip;
}
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Deploy.DeployScript : object {
    public static string DeployJson;
    [DataMemberAttribute]
public DeployToCdn[] ReSharperCdn;
    [DataMemberAttribute]
public DeployToCdn[] RiderCdn;
    [DataMemberAttribute]
public String[] ChocolateyGallery;
    [DataMemberAttribute]
public String[] ListedPackageIds;
    [DataMemberAttribute]
public String[] NugetGallery;
    [DataMemberAttribute]
public String[] ReSharperGallery;
    [DataMemberAttribute]
public String[] SymbolServer;
}
[JsonObjectAttribute]
[DataContractAttribute]
public class JetBrains.Application.Deploy.DeployToCdn : object {
    [DataMemberAttribute]
public string File;
    [DataMemberAttribute]
public DeployCdnFlags Flag;
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.LocalDeployScriptFile : object {
    [NotNullAttribute]
public SimpleFileItem WrittenPathsList;
    public LocalDeployScriptFile(SimpleFileItem writtenPathsList);
}
public static class JetBrains.Application.Deploy.LocalDeployScriptFileTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<PushToNugetGalleryArtifact, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<PushToReSharperCdnArtifact, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<PushToRiderCdnArtifact, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<PushToChocolateyGalleryArtifact, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<PushToSymbolServerArtifact, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<PushToReSharperGalleryArtifact, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, string> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, SimpleFileItem>, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, SimpleFileItem>, SimpleFileItem> CS$<>9__CachedAnonymousMethodDelegate14;
    [BuildStepAttribute]
public static LocalDeployScriptFile DoLocalSavePackagesToBinDir(ProductBinariesDirArtifact bindir, PushArtifact pushArtifact, ILogger logger);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <DoLocalSavePackagesToBinDir>b__0(PushToNugetGalleryArtifact _);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <DoLocalSavePackagesToBinDir>b__1(PushToReSharperCdnArtifact _);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <DoLocalSavePackagesToBinDir>b__2(PushToRiderCdnArtifact _);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <DoLocalSavePackagesToBinDir>b__3(PushToChocolateyGalleryArtifact _);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <DoLocalSavePackagesToBinDir>b__4(PushToSymbolServerArtifact _);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <DoLocalSavePackagesToBinDir>b__5(PushToReSharperGalleryArtifact _);
    [CompilerGeneratedAttribute]
private static string <DoLocalSavePackagesToBinDir>b__6(SimpleFileItem f);
    [CompilerGeneratedAttribute]
private static string <DoLocalSavePackagesToBinDir>b__7(IGrouping`2<string, SimpleFileItem> g);
    [CompilerGeneratedAttribute]
private static SimpleFileItem <DoLocalSavePackagesToBinDir>b__8(IGrouping`2<string, SimpleFileItem> g);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.PushArtifact : object {
    public PushToReSharperCdnArtifact[] ReSharperCdnArtifacts;
    public PushToRiderCdnArtifact[] RiderCdnArtifacts;
    public PushToChocolateyGalleryArtifact[] ChocolateyGalleryArtifacts;
    public PushToListedPackageIdArtifact[] ListedPackageIdArtifacts;
    public PushToNugetGalleryArtifact[] NugetGalleryArtifacts;
    public PushToReSharperGalleryArtifact[] ReSharperGalleryArtifacts;
    public PushToSymbolServerArtifact[] SymbolServerArtifacts;
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToChocolateyGalleryArtifact : BasePushTorGalleryArtifact {
    public PushToChocolateyGalleryArtifact(SimpleFileItem file);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.PushToListedPackageIdArtifact : object {
    public string PackageId;
    public PushToListedPackageIdArtifact(string packageId);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.PushToNugetGalleryArtifact : BasePushTorGalleryArtifact {
    public PushToNugetGalleryArtifact(SimpleFileItem file);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToReSharperCdnArtifact : BasePushToArtifact {
    public DeployCdnFlags Flags;
    public PushToReSharperCdnArtifact(SimpleFileItem file, DeployCdnFlags flags);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToReSharperGalleryArtifact : BasePushTorGalleryArtifact {
    public PushToReSharperGalleryArtifact(SimpleFileItem file);
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.PushToRiderCdnArtifact : BasePushToArtifact {
    public DeployCdnFlags Flags;
    public PushToRiderCdnArtifact(SimpleFileItem file, DeployCdnFlags flags);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.PushToSymbolServerArtifact : BasePushToArtifact {
    public PushToSymbolServerArtifact(SimpleFileItem file);
}
public static class JetBrains.Application.Deploy.SymbolStorageConstants : object {
    public static string FlatMarker;
    public static string SingleTierMarker;
    public static string TwoTierMarker;
    public static string TagDirectory;
    public static string TagExtension;
}
public static class JetBrains.Application.Diagnostics.Dumper : object {
    public static void DumpToFile(Action`1<StreamWriter> writer, ICommonFileDialogs filedlg);
    public static void DumpToNotepad(Action`1<StreamWriter> writer, string extensionWithDot);
}
[ActionAttribute("Focus Monitor")]
public class JetBrains.Application.Diagnostics.FocusMonitorAction : object {
    private Form myForm;
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.Diagnostics.FocusMonitorAutomation : AAutomation {
    public SignalCommand ClearCommand;
    public string FocusMonitorWindowName;
    public IProperty`1<bool> IsLiveLoggingEnabled;
    public IListEvents`1<LogEntry> LogEntries;
    public IProperty`1<LogEntry> SelectedEntry;
    public IProperty`1<Orientation> DetailsOrientation;
    public FocusMonitorAutomation(Lifetime lifetime, IThreading threading, TrackFocus trackFocus, Orientation detailsOrientation);
    public static WindowRecordTooltipAutomation GetTooltip(WindowRecord wndrec);
    private void Init_LogEntries(Lifetime lifetime, TrackFocus trackFocus, IThreading threading);
    private bool IsFocusMonitorFocused(LogEntry value);
    [CompilerGeneratedAttribute]
private void <Init_LogEntries>b__4(AddRemoveIndexEventArgs`1<LogEntry> args);
    [CompilerGeneratedAttribute]
private void <Init_LogEntries>b__5(AddRemoveIndexEventArgs`1<LogEntry> args);
    [CompilerGeneratedAttribute]
private bool <IsFocusMonitorFocused>b__6(WindowRecord record);
}
public static class JetBrains.Application.Env.Launcher : object {
    [NotNullAttribute]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethod;
    [ObsoleteAttribute("Use ConsoleMainMethod.")]
[NotNullAttribute]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethodScattered;
    private static Launcher();
    [PublicAPIAttribute]
public static int ConsoleMain();
    [ObsoleteAttribute("Use ConsoleMain.")]
[PublicAPIAttribute]
public static int ConsoleMainScattered();
}
public class JetBrains.Application.Env.NativeComponentManagerProxyHostMixin : object {
    private static Boxed`1<NativeComponentManagerProxy> myPerProcessComponentManagerProxy;
    [CompilerGeneratedAttribute]
private static Func`1<Action> CS$<>9__CachedAnonymousMethodDelegate3;
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.Priority { get; }
    private bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.IsAvailable { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_Priority();
    private sealed virtual override bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_IsAvailable();
    private sealed virtual override ProductCanBeStartedVerdict JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.RunMainLoop(ComponentContainer containerEnv);
    [CompilerGeneratedAttribute]
private static Action <JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost>b__0();
}
public static class JetBrains.Application.Environment.ActivateEx : object {
    public static Type TypeOfIActivate;
    public static Type TypeOfIActivatorDependsOn;
    public static StringSource IActivateFullNameNoGenericArgs;
    private static ActivateEx();
}
public class JetBrains.Application.Environment.AdditionalDeployedPackages : object {
    [NotNullAttribute]
public static string EnvironmentVariableNamePrefix;
    private static ILogger Logger;
    public FrugalLocalList`1<AdHocPackage> AdditionalAdHocPackages;
    public FrugalLocalList`1<FileSystemPath> AdditionalFiles;
    public FrugalLocalList`1<FileSystemPath> AdditionalFolders;
    public FrugalLocalList`1<PackageIdentity> AdditionalPackageReferences;
    public AdditionalDeployedPackages(FrugalLocalList`1<FileSystemPath> folders, FrugalLocalList`1<FileSystemPath> files, FrugalLocalList`1<PackageIdentity> pkgrefs, FrugalLocalList`1<AdHocPackage> ahpkgs);
    public AdditionalDeployedPackages(FrugalLocalList`1& folders, FrugalLocalList`1& files, FrugalLocalList`1& pkgrefs, FrugalLocalList`1& ahpkgs);
    private static AdditionalDeployedPackages();
    [NotNullAttribute]
public static AdditionalDeployedPackages Parse(string text);
    public virtual string ToString();
    [CanBeNullAttribute]
public static string TryReadFromEnvironmentVariable();
    [NotNullAttribute]
private static AdditionalDeployedPackages ParseCore(string text);
    private static AdHocPackage ParseCore_AdHocPackage(XmlReader reader);
    private static FormatException ParseCore_AdHocPackage_ThrowAttr(string sAttrName, XmlReader reader, Exception ex);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.AllAssemblies.AssemblyFolderLocator : object {
    public virtual FileSystemPath GetAssemblyPackageLocation(Assembly assembly);
}
public interface JetBrains.Application.Environment.AllAssemblies.IAssemblyFolderLocator {
    public abstract virtual FileSystemPath GetAssemblyPackageLocation(Assembly assembly);
}
[ShellComponentAttribute]
public class JetBrains.Application.Environment.ApplicationCloseUpController : object {
    public ApplicationCloseUpController(Lifetime lifetime, ApplicationShutdownRequests shutdowner);
    public virtual bool CanClose();
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.Environment.ApplicationIdleEvent : object {
    [NotNullAttribute]
public ISimpleSignal Idle;
    public ApplicationIdleEvent(Lifetime lifetime);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.ApplicationPackages : object {
    private static Func`2<IEnumerable`1<ApplicationPackageArtifact>, Maps> myDelegateCreateMapping;
    private LocalLazy`2<Maps, IEnumerable`1<ApplicationPackageArtifact>> myMapAssemblyToPackage;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<ApplicationPackageArtifact>, Maps> CS$<>9__CachedAnonymousMethodDelegate5;
    public ApplicationPackages(IEnumerable`1<ApplicationPackageArtifact> apppkgs);
    private static ApplicationPackages();
    public ApplicationPackageArtifact FindPackageWithAssembly(Assembly assembly, OnError onerror);
    public ApplicationPackageArtifact FindPackageWithAssembly(AssemblyNameInfo name, OnError onerror);
    public ApplicationPackageArtifact FindPackageWithAssembly(StringSource simplename, OnError onerror);
    [CompilerGeneratedAttribute]
private static Maps <.cctor>b__0(IEnumerable`1<ApplicationPackageArtifact> apppkgs);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.ApplicationPackagesLocallyInstalled : object {
    private IList`1<IApplicationPackageLocallyInstalled> myList;
    private ILogger myLogger;
    private IEnumerable`1<ApplicationPackageArtifact> myPackages;
    private IDeployedPackagesExpandLocationResolver myResolver;
    public ApplicationPackagesLocallyInstalled(IEnumerable`1<ApplicationPackageArtifact> packages, IDeployedPackagesExpandLocationResolver resolver, ILogger logger);
    [NotNullAttribute]
public static IDeployedPackagesExpandLocationResolver GetOrCreatePackageLocationResolver(SerializedValuesResolver serializedValuesResolver);
    private sealed virtual override IEnumerator`1<IApplicationPackageLocallyInstalled> System.Collections.Generic.IEnumerable<JetBrains.Application.BuildScript.Application.IApplicationPackageLocallyInstalled>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NotNullAttribute]
private IList`1<IApplicationPackageLocallyInstalled> GetOrCreateList();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.ApplicationShutdownRequests : object {
    private ILogger Logger;
    [CanBeNullAttribute]
private ApplicationCloseUpController myCloseUpController;
    private IHostCommandLine myHostcmdl;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private IProperty`1<ProductCanBeStartedVerdict> myVerdict;
    [NotNullAttribute]
public ISimpleSignal ShutdownStarted;
    private double JetBrains.Application.Environment.IProductCanBeStarted.Priority { get; }
    public ApplicationShutdownRequests(Lifetime lifetime, IThreading threading, IHostCommandLine hostcmdl, ILogger logger);
    [GuardAttribute("-1")]
public void ShutdownRequested(ShutdownErrorStatus status);
    private sealed virtual override IProperty`1<ProductCanBeStartedVerdict> JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted(Lifetime lifetime);
    protected virtual void OnRestartHostProcess(bool isHighIntegrityLevel);
    private static bool OnRestartHostProcess_IsRuansVerb(bool isHighIntegrityLevel, ILogger logger);
    private sealed virtual override double JetBrains.Application.Environment.IProductCanBeStarted.get_Priority();
    internal void RegisterCloseUpRequestHandler(Lifetime lifetime, ApplicationCloseUpController closeUpController);
    [CompilerGeneratedAttribute]
private void <RegisterCloseUpRequestHandler>b__9();
}
public static class JetBrains.Application.Environment.ApplicationStartupTraceHelpers : object {
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, IEnumerable`1<PartCatalogAssembly>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, <>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping>, IEnumerable`1<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>, PartCatalogAssembly> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>, PartCatalogZoneMapping> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, IEnumerable`1<PartCatalogType>> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<ZoneMarker, StringSource> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, <>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping>> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping>, IEnumerable`1<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>>> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>, PartCatalogAssembly> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>, PartCatalogZoneMapping> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, IEnumerable`1<PartCatalogType>> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, IEnumerable`1<PartCatalogType>> CS$<>9__CachedAnonymousMethodDelegate20;
    public static void TraceCatalogSet(IPartCatalogSet catalogset, string catname, bool isDoingZones, ILogger logger);
    public static void TraceCatalogSetDiff(IPartCatalogSet catalogsetLarger, string catnameLarger, IPartCatalogSet catalogsetSmaller, string catnameSmaller, ICollection`1<ZonePart> zonesEnabled, ILogger logger);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PartCatalogAssembly> <TraceCatalogSet>b__0(PartCatalog cat);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping> <TraceCatalogSet>b__1(PartCatalog cat);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>> <TraceCatalogSet>b__2(<>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping> t);
    [CompilerGeneratedAttribute]
private static PartCatalogAssembly <TraceCatalogSet>b__4(<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping> t);
    [CompilerGeneratedAttribute]
private static PartCatalogZoneMapping <TraceCatalogSet>b__5(<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping> t);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PartCatalogType> <TraceCatalogSet>b__6(PartCatalog cat);
    [CompilerGeneratedAttribute]
private static StringSource <TraceCatalogSet>b__7(ZoneMarker zm);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping> <TraceCatalogSetDiff>b__11(PartCatalog cat);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping>> <TraceCatalogSetDiff>b__12(<>f__AnonymousType4b`2<PartCatalog, PartCatalogZoneMapping> t);
    [CompilerGeneratedAttribute]
private static PartCatalogAssembly <TraceCatalogSetDiff>b__14(<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping> t);
    [CompilerGeneratedAttribute]
private static PartCatalogZoneMapping <TraceCatalogSetDiff>b__15(<>f__AnonymousType4c`2<PartCatalogAssembly, PartCatalogZoneMapping> t);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PartCatalogType> <TraceCatalogSetDiff>b__16(PartCatalog cat);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PartCatalogType> <TraceCatalogSetDiff>b__17(PartCatalog cat);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.Components.AnyProductSettingsLocation : object {
    private HostInfo myHostInfo;
    public static BackSlashSeparatedRelativePath ProductRegistryKeyPrefix_Software;
    public static string LegacyUserSettingsFileName;
    public static string GlobalSettingsStorageFileName;
    public static string LegacyWorkspaceSettingsFileName;
    [NotNullAttribute]
public static string AllProductsFolderName;
    public static string AnyVersionString;
    [CompilerGeneratedAttribute]
private static Comparison`1<Tuple`2<FileSystemPath, Version>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<FileSystemPath, Version>, Tuple`2<FileSystemPath, Version>> CS$<>9__CachedAnonymousMethodDelegate3;
    public AnyProductSettingsLocation(HostInfo hostInfo);
    private static AnyProductSettingsLocation();
    public virtual FileSystemPath GetSettingsPath(HostFolderLifetime specialFolder, ApplicationHostDetails details);
    [NotNullAttribute]
public sealed virtual RelativePath GetSettingsRelativePath(ApplicationHostDetails details);
    [NotNullAttribute]
public sealed virtual string GetSettingsRegistryKey(ApplicationHostDetails detail);
    [NotNullAttribute]
public sealed virtual FileSystemPath GetUserSettingsDir(HostFolderLifetime basefolder, ApplicationHostDetails details);
    [NotNullAttribute]
public virtual RelativePath GetSettingsPathSuffix(string nameProduct, Version version, IList`1<Tuple`2<string, string>> additionalParameters);
    public virtual IEnumerable`1<Tuple`2<FileSystemPath, Version>> GetLegacyUserSettingsRoamingLegacyDirs(string legacyProductName);
    [NotNullAttribute]
public virtual FileSystemPath GetLegacyUserSettingsXmlPath(IApplicationHost product);
    [NotNullAttribute]
public virtual FileSystemPath GetLegacyWorkspaceXmlPath(IApplicationHost product);
    [NotNullAttribute]
public FileSystemPath GetInstallDir(IApplicationHost product);
    [CompilerGeneratedAttribute]
private static int <GetLegacyUserSettingsRoamingLegacyDirs>b__0(Tuple`2<FileSystemPath, Version> α, Tuple`2<FileSystemPath, Version> β);
    [CompilerGeneratedAttribute]
private static Tuple`2<FileSystemPath, Version> <GetLegacyUserSettingsRoamingLegacyDirs>b__1(Tuple`2<FileSystemPath, Version> tuple);
}
[ObsoleteAttribute("Use ApplicationShutdownRequests::ShutdownRequested.")]
[ShellComponentAttribute]
public class JetBrains.Application.Environment.Components.ApplicationRestart : object {
    public virtual bool ApplicationCanRestart();
    public virtual void Restart(bool elevate);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.Components.DisableLeakWatchdogOnShutdown : object {
    public DisableLeakWatchdogOnShutdown(Lifetime lifetime, ApplicationShutdownRequests shutdownRequests);
    public static void ShutDown();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.Components.ExtractProductCommandLineFromHostCommandLine : object {
    [CanBeNullAttribute]
private IProductCommandLine myProductCommandLine;
    [NotNullAttribute]
private IListEvents`1<CommandLineParameter> myParameters;
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.Keys { get; }
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.NonKeyedParameters { get; }
    private string JetBrains.Application.Hosting.IProductCommandLine.KeyPrefix { get; }
    private bool JetBrains.Application.Hosting.IProductCommandLine.IsKeyPrefixOptional { get; }
    private IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.Parameters { get; }
    private FileSystemPath JetBrains.Application.Hosting.ICommandLine.StartupDirectory { get; }
    public ExtractProductCommandLineFromHostCommandLine(Lifetime lifetime, IHostCommandLine hostCommandLine, IApplicationHost descriptor, JetEnvironment environment);
    private sealed virtual override bool JetBrains.Application.Hosting.ICommandLine.IsKeyDefined(string key, bool isCaseSensitive);
    private sealed virtual override string JetBrains.Application.Hosting.ICommandLine.TryGetKeyValue(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.GetKeyValues(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_Keys();
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_NonKeyedParameters();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.get_KeyPrefix();
    private sealed virtual override bool JetBrains.Application.Hosting.IProductCommandLine.get_IsKeyPrefixOptional();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.MakeFullCommandLineKeyName(string sShortKeyName);
    private sealed virtual override IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.get_Parameters();
    private sealed virtual override FileSystemPath JetBrains.Application.Hosting.ICommandLine.get_StartupDirectory();
}
public interface JetBrains.Application.Environment.Components.IAnyProductSettingsLocation {
    public abstract virtual FileSystemPath GetSettingsPath(HostFolderLifetime specialFolder, ApplicationHostDetails details);
    [NotNullAttribute]
public abstract virtual RelativePath GetSettingsRelativePath(ApplicationHostDetails details);
    [NotNullAttribute]
public abstract virtual string GetSettingsRegistryKey(ApplicationHostDetails detail);
    [NotNullAttribute]
public abstract virtual FileSystemPath GetUserSettingsDir(HostFolderLifetime basefolder, ApplicationHostDetails details);
    [NotNullAttribute]
public abstract virtual RelativePath GetSettingsPathSuffix(string nameProduct, Version version, IList`1<Tuple`2<string, string>> additionalParameters);
}
public interface JetBrains.Application.Environment.Components.IApplicationRestart {
    public abstract virtual bool ApplicationCanRestart();
    public abstract virtual void Restart(bool elevate);
}
[ObsoleteAttribute]
public interface JetBrains.Application.Environment.Components.IComponentStartupShutdown {
    public abstract virtual void OnAfterStartup();
    public abstract virtual void OnBeforeShutdown();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.Components.InitializationStrategyProvider : object {
    public virtual IInitializationStrategy InitializationStrategy(Lifetime lifetime);
}
[ZoneActivatorAttribute]
public class JetBrains.Application.Environment.Components.InternalModeProductZoneActivator : object {
    private IEnumerable`1<IInternalZonePreferenceStore> myInternalZonePreferenceProviders;
    private IProductCommandLine myCmdline;
    public static Nullable`1<bool> OverrideInternalModeOnNextStart;
    [CompilerGeneratedAttribute]
private static Func`2<IInternalZonePreferenceStore, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public InternalModeProductZoneActivator(IEnumerable`1<IInternalZonePreferenceStore> internalZonePreferenceProviders, IProductCommandLine cmdline);
    private sealed virtual override bool JetBrains.Application.Environment.IActivate<JetBrains.Application.BuildScript.Application.Zones.IInternalVisibilityZone>.ActivatorEnabled();
    private sealed virtual override bool JetBrains.Application.Environment.IActivate<JetBrains.Application.BuildScript.Application.Zones.IPublicVisibilityZone>.ActivatorEnabled();
    private bool IsInternal();
    [CompilerGeneratedAttribute]
private static bool <IsInternal>b__0(IInternalZonePreferenceStore x);
}
[ShellComponentAttribute]
public class JetBrains.Application.Environment.Components.NotifyComponentStartupShutdown : object {
    [CompilerGeneratedAttribute]
private static Action`1<IComponentStartupShutdown> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<IComponentStartupShutdown> CS$<>9__CachedAnonymousMethodDelegate3;
    public NotifyComponentStartupShutdown(Lifetime lifetime, IViewable`1<IComponentStartupShutdown> view);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(IComponentStartupShutdown compo);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(IComponentStartupShutdown compo);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.Components.ProductSettingsLocation : object {
    [NotNullAttribute]
public AnyProductSettingsLocation AnyProductSettingsLocation;
    [NotNullAttribute]
public IApplicationHost ApplicationHost;
    [NotNullAttribute]
public FileSystemPath InstallDir { get; }
    public ProductSettingsLocation(AnyProductSettingsLocation anyProductSettingsLocation, IApplicationHost applicationHost);
    [NotNullAttribute]
public FileSystemPath GetUserSettingsNonRoamingDir(ApplicationHostDetails details);
    [NotNullAttribute]
public FileSystemPath GetUserSettingsRoamingDir(ApplicationHostDetails details);
    [NotNullAttribute]
public string GetProductRegistryKey(ApplicationHostDetails details);
    public FileSystemPath get_InstallDir();
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.Environment.Components.ReportUnhandledExceptions : object {
    [CompilerGeneratedAttribute]
private static UnhandledExceptionEventHandler CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static ThreadExceptionEventHandler CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static DispatcherUnhandledExceptionEventHandler CS$<>9__CachedAnonymousMethodDelegateb;
    public ReportUnhandledExceptions(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object sender, UnhandledExceptionEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3(object sender, ThreadExceptionEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__6(object sender, DispatcherUnhandledExceptionEventArgs args);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.Components.SuspendResume : object {
    public static string RegistryDataName_IsSuspended;
    [NotNullAttribute]
public Property`1<bool> IsSuspended;
    public SuspendResume(Lifetime lifetime, IProductCommandLine productCommandLine, ProductSettingsLocation productSettingsLocation, IThreading threading);
    private static SuspendResume();
    [GuardAttribute("1")]
public void Resume();
    [GuardAttribute("1")]
public void Suspend();
    [GuardAttribute("1")]
public void ToggleSuspended();
    private void Init_CommandLine(IProductCommandLine productCommandLine);
    private void Init_Registry(Lifetime lifetime, ProductSettingsLocation productSettingsLocation);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.Components.SuspendResumeProductCanBeStarted : object {
    private SuspendResume mySuspendResume;
    [CompilerGeneratedAttribute]
private static Func`2<bool, ProductCanBeStartedVerdict> CS$<>9__CachedAnonymousMethodDelegate1;
    private double JetBrains.Application.Environment.IProductCanBeStarted.Priority { get; }
    public SuspendResumeProductCanBeStarted(SuspendResume suspendResume);
    private sealed virtual override double JetBrains.Application.Environment.IProductCanBeStarted.get_Priority();
    private sealed virtual override IProperty`1<ProductCanBeStartedVerdict> JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static ProductCanBeStartedVerdict <JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted>b__0(bool isSuspended);
}
public class JetBrains.Application.Environment.DeployedPackages : object {
    public static ILogger Logger;
    [NotNullAttribute]
public CatalogTables CatalogTables;
    public EFlags Flags;
    [NotNullAttribute]
public SerializedValuesResolver PackageComponents;
    public DeployedPackages(CatalogTables catables, SerializedValuesResolver components, EFlags flags);
    private static DeployedPackages();
    [NotNullAttribute]
public static DeployedPackages LoadWithCaching(Lifetime lifetime, DeployedPackagesIdentity identity);
}
public static class JetBrains.Application.Environment.DeployedPackagesCache : object {
    public static string CacheFileExt;
    public static string CacheFileNamePrefix;
    private static ILogger Logger;
    public static UInt32 OldCacheFilesLimit;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, DateTime> CS$<>9__CachedAnonymousMethodDelegate2;
    [NotNullAttribute]
public static FileSystemPath GetCacheDirectory { get; }
    private static DeployedPackagesCache();
    public static FileSystemPath get_GetCacheDirectory();
    public static void CleanupCacheDir();
    [NotNullAttribute]
public static FileSystemPath GetCacheFile(DeployedPackagesIdentity identity);
    [NotNullAttribute]
public static FileSystemPath GetCacheFile(OWORD identity);
    [CanBeNullAttribute]
public static DeployedPackages LoadCache(Lifetime lifeFile, Byte* pBuffer, DeployedPackagesIdentity identity, OnError onerror);
    [NotNullAttribute]
public static DeployedPackages LoadWithCaching(Lifetime lifetime, DeployedPackagesIdentity identity);
    [CanBeNullAttribute]
public static DeployedPackages TryLoadCacheFile(Lifetime lifetime, DeployedPackagesIdentity identity, OnError onerror);
    public static void WriteCache(DeployedPackagesIdentity identity, DeployedPackages packages, Stream streamOutput);
    public static void WriteCacheFile(DeployedPackagesIdentity identity, DeployedPackages packages);
    [PublicAPIAttribute]
private static bool EnsureAlignment(Stream stream, byte alignment);
    [CompilerGeneratedAttribute]
private static DateTime <CleanupCacheDir>b__1(FileSystemPath file);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.DeployedPackagesCacheIdentityEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static DeployedPackagesIdentity WithSubplatformPassFilter(DeployedPackagesIdentity thіs, AssemblyNameInfo subplatformPassFilter);
}
public static class JetBrains.Application.Environment.DeployedPackagesDiscovery : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<RelativePath, List`1<DirectoryEntryData>>, RelativePath> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<DirectoryEntryData, RelativePath> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<DirectoryEntryData, RelativePath> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, RelativePath> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Comparison`1<DirectoryEntryData> CS$<>9__CachedAnonymousMethodDelegateb;
    private static DeployedPackagesDiscovery();
    [NotNullAttribute]
public static DeployedPackagesIdentity CreateFromFolder(FileSystemPath bindir, DiscoveryFlags discoflags);
    private static void ScanEnvVarForAdditionalPackages(DiscoveryFlags discoflags, IList`1<Folder> folders, IList`1& retrievenugets);
    private static void ScanEnvVarForAdditionalPackages_AdHocs(AdditionalDeployedPackages additionals, IList`1<Folder> folders);
    [CanBeNullAttribute]
private static IList`1<PackageIdentity> ScanEnvVarForAdditionalPackages_Downloads(AdditionalDeployedPackages additionals, DiscoveryFlags discoflags);
    private static void ScanEnvVarForAdditionalPackages_Files(AdditionalDeployedPackages additionals, DiscoveryFlags discoflags, IList`1<Folder> folders);
    private static void ScanEnvVarForAdditionalPackages_Folders(AdditionalDeployedPackages additionals, DiscoveryFlags discoflags, IList`1<Folder> folders);
    [NotNullAttribute]
private static Folder ScanFolder(FileSystemPath dir, bool isDiscoveringNugets);
    [CompilerGeneratedAttribute]
private static RelativePath <ScanEnvVarForAdditionalPackages_AdHocs>b__0(Pair`2<RelativePath, List`1<DirectoryEntryData>> pair);
    [CompilerGeneratedAttribute]
private static RelativePath <ScanEnvVarForAdditionalPackages_AdHocs>b__1(DirectoryEntryData ded);
    [CompilerGeneratedAttribute]
private static RelativePath <ScanEnvVarForAdditionalPackages_AdHocs>b__2(DirectoryEntryData ded);
    [CompilerGeneratedAttribute]
private static FileSystemPath <ScanEnvVarForAdditionalPackages_Files>b__6(FileSystemPath af);
    [CompilerGeneratedAttribute]
private static RelativePath <ScanEnvVarForAdditionalPackages_Files>b__7(FileSystemPath af);
    [CompilerGeneratedAttribute]
private static int <ScanFolder>b__a(DirectoryEntryData black, DirectoryEntryData white);
}
public class JetBrains.Application.Environment.DeployedPackagesExpandLocationResolver : object {
    private IDictionary`2<string, string> myMapPackageIdToDirectory;
    public DeployedPackagesExpandLocationResolver(IDictionary`2<string, FileSystemPath> mapPackageIdToDirectory);
    public DeployedPackagesExpandLocationResolver(IStructuredStorage sstg);
    private sealed virtual override FileSystemPath JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver.GetDeployedPackageDirectory(IApplicationPackage package);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__2(CsexpWriter writer);
}
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Environment.DeployedPackagesExpandLocationResolverTrivial : object {
    [NotNullAttribute]
private ProductBinariesDirArtifact myBindir;
    public DeployedPackagesExpandLocationResolverTrivial(ProductBinariesDirArtifact bindir);
    private sealed virtual override FileSystemPath JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver.GetDeployedPackageDirectory(IApplicationPackage package);
}
public class JetBrains.Application.Environment.DeployedPackagesIdentity : object {
    public static string Revision;
    public IList`1<Folder> Folders;
    [CanBeNullAttribute]
public AssemblyNameInfo MinimalPackageSetFilter;
    [NotNullAttribute]
public IList`1<PackageIdentity> RetrievedNugets;
    public DeployedPackagesIdentity(IList`1<Folder> folders, IList`1<PackageIdentity> retrievedNugets, AssemblyNameInfo minimalPackageSetFilter);
    private static DeployedPackagesIdentity();
    public OWORD CalculateIdentityHash();
    public virtual string ToString();
    public void WriteIdentity(Cookie ck);
}
public static class JetBrains.Application.Environment.DeployedPackagesLoader : object {
    private static ILogger Logger;
    [CompilerGeneratedAttribute]
private static Func`2<LoadedMetadataFile, Nullable`1<LoadedMetadataFile>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<LoadedMetadataFile>, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameAndLocation, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, ChunkedMemoryStream> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, AssemblyInfo> CS$<>9__CachedAnonymousMethodDelegate21;
    private static DeployedPackagesLoader();
    [NotNullAttribute]
public static DeployedPackages Load(Lifetime lifetime, DeployedPackagesIdentity identity, Diagnostyx diag);
    private static DeployedPackagesExpandLocationResolver CreateExpandLocationResolver(ICollection`1<LoadedMetadataFile> metadata, EFlags& flags);
    [NotNullAttribute]
private static ICollection`1<LoadedMetadataFile> ApplyMinimalPackageSetFilter(ICollection`1<LoadedMetadataFile> loadedUnfiltered, AssemblyNameInfo assemblyTarget);
    private static void CollectPackageComponents(ICollection`1<LoadedMetadataFile> loaded, SerializedValuesResolver allcomponents, EFlags& flags);
    private static void CreateAdHocCatalogForUncatalogedAssemblies(Lifetime lifeCreationProcess, ICollection`1<AssemblyNameInfo> assembliesForAdHocCataloging, DeployedPackagesMasterBinderData binderlist, ICollection`1<CatalogTables> catables);
    [NotNullAttribute]
private static DeployedPackagesMasterBinderData CreateMasterBinderData(ICollection`1<LoadedMetadataFile> loadedFiltered, EFlags& flags);
    private static ICollection`1<LoadedMetadataFile> LoadMetadatas(Lifetime lifetime, DeployedPackagesIdentity identity, OnError onerror, Diagnostyx diag);
    private static void TryAddMetadataFileFromDisk(Lifetime lifetime, FileSystemPath pathMetadataFile, List`1<LoadedMetadataFile> loadeds, OnError onerror);
    private static void LoadPrecalculatedCatalogs(Lifetime lifeCreationProcess, ICollection`1<LoadedMetadataFile> loadedFiltered, ICollection`1& catables, ICollection`1& assembliesForAdHocCataloging);
    private static bool LoadPrecalculatedCatalogs_Validate(LoadedMetadataFile loaded, CatalogTables table, IDictionary`2<StringSource, Guid> cacheMvids);
    [NotNullAttribute]
private static ChunkedMemoryStream MergeCatalogs(ICollection`1<CatalogTables> catables);
    [CompilerGeneratedAttribute]
private static Nullable`1<LoadedMetadataFile> <ApplyMinimalPackageSetFilter>b__6(LoadedMetadataFile x);
    [CompilerGeneratedAttribute]
private static string <ApplyMinimalPackageSetFilter>b__7(Nullable`1<LoadedMetadataFile> loaded);
    [CompilerGeneratedAttribute]
private static FileSystemPath <CreateMasterBinderData>b__10(AssemblyNameAndLocation anal);
    [CompilerGeneratedAttribute]
private static ChunkedMemoryStream <TryAddMetadataFileFromDisk>b__1c(Stream sin);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <LoadPrecalculatedCatalogs>b__1e(ApplicationPackageFile file);
    [CompilerGeneratedAttribute]
private static AssemblyInfo <LoadPrecalculatedCatalogs_Validate>b__20(Stream stream);
}
public class JetBrains.Application.Environment.DeployedPackagesMasterBinderData : object {
    [NotNullAttribute]
public AssemblyNameInfo[] PossiblyUnresolvableAssemblies;
    [NotNullAttribute]
public AssemblyNameAndLocation[] ResolvableAssemblyFiles;
    public DeployedPackagesMasterBinderData(AssemblyNameAndLocation[] resolvables, AssemblyNameInfo[] unresolvables);
    public DeployedPackagesMasterBinderData(IStructuredStorage sstg);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private Pair`2<AssemblyNameAndLocation[], AssemblyNameInfo[]> <.ctor>b__1(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__3(Stream stream);
}
public static class JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand : object {
    public static FileSystemPath BaseExpansionFolder;
    public static ILogger Logger;
    private static DeployedPackagesNugetAutoexpand();
    [NotNullAttribute]
public static Expanded ExpandNugetPackages(IList`1<NugetAutoexpandable> packages, FileSystemPath dirBaseExpansionFolderOverride, OnError onerror);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.Environment.EnvironmentComponentAttribute : ComponentAttribute {
    public EnvironmentComponentAttribute(Lifecycle lifecycle, Creation creation, Access access);
}
public class JetBrains.Application.Environment.EnvironmentPartCatalogSet : PartCatalogSet {
}
public class JetBrains.Application.Environment.EnvironmentZones : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private List`1<ZonePart> <AllZoneParts>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<ZonePart, ZonePart> <ZoneToSuccessorsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<ZonePart, ZonePart> <ZoneToPredecessorsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<ZonePart, ZonePart> <ZoneToInheritorsMap>k__BackingField;
    public List`1<ZonePart> AllZoneParts { get; private set; }
    public OneToListMap`2<ZonePart, ZonePart> ZoneToSuccessorsMap { get; private set; }
    public OneToListMap`2<ZonePart, ZonePart> ZoneToPredecessorsMap { get; private set; }
    public OneToListMap`2<ZonePart, ZonePart> ZoneToInheritorsMap { get; private set; }
    public EnvironmentZones(FullPartCatalogSet catalogset, ILogger logger);
    [CompilerGeneratedAttribute]
public List`1<ZonePart> get_AllZoneParts();
    [CompilerGeneratedAttribute]
private void set_AllZoneParts(List`1<ZonePart> value);
    [CompilerGeneratedAttribute]
public OneToListMap`2<ZonePart, ZonePart> get_ZoneToSuccessorsMap();
    [CompilerGeneratedAttribute]
private void set_ZoneToSuccessorsMap(OneToListMap`2<ZonePart, ZonePart> value);
    [CompilerGeneratedAttribute]
public OneToListMap`2<ZonePart, ZonePart> get_ZoneToPredecessorsMap();
    [CompilerGeneratedAttribute]
private void set_ZoneToPredecessorsMap(OneToListMap`2<ZonePart, ZonePart> value);
    [CompilerGeneratedAttribute]
public OneToListMap`2<ZonePart, ZonePart> get_ZoneToInheritorsMap();
    [CompilerGeneratedAttribute]
private void set_ZoneToInheritorsMap(OneToListMap`2<ZonePart, ZonePart> value);
    private void BuildZoneRelations();
    public void ExpandToInheritors(JetHashSet`1<ZonePart> allowedActivatorZones, JetHashSet`1<ZonePart> negativeZones);
    public void IncludeAutoenabled(JetHashSet`1<ZonePart> allowedActivatorZones, JetHashSet`1<ZonePart> negativeZones);
    private bool DependenciesSatisfied(JetHashSet`1<ZonePart> allAutoenableZones, ZonePart zonePart);
    public void ExpandToPredecessors(JetHashSet`1<ZonePart> zones);
    public void PropagateNegativeZones(JetHashSet`1<ZonePart> zonesNegative);
    public void LogZoneParts(string text, IEnumerable`1<ZonePart> parts);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.EnvironmentZonesExtra : object {
    public Nullable`1<FeatureInfo> TryGetFeatureInfo(ZonePart runningZone);
    public Nullable`1<ProductInfo> TryGetProductInfo(ZonePart runningZone);
}
public class JetBrains.Application.Environment.FullPartCatalogSet : PartCatalogSet {
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameAndLocation, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameAndLocation, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegatef;
    public FullPartCatalogSet(Lifetime lifetime, PartCatalog catalog);
    [NotNullAttribute]
public static FullPartCatalogSet CreateFromCatalogTablesAndInstallResolver(Lifetime lifetime, CatalogTables tables, IAssemblyMasterBinder masterbinder);
    [NotNullAttribute]
public static FullPartCatalogSet CreateFromCatalogTablesAndInstallResolver(Lifetime lifetime, CatalogTables tables, DeployedPackagesMasterBinderData masterbinderfilelist);
    public static FullPartCatalogSet CreateFromDiskFilesAndInstallResolver(Lifetime lifetime, ICollection`1<AssemblyNameAndLocation> allassemblies, ICollection`1<AssemblyNameAndLocation> extras);
    [NotNullAttribute]
public static FullPartCatalogSet CreateFromPackagesAndInstallResolver(Lifetime lifetime, IList`1<ApplicationPackageArtifact> packages, IDeployedPackagesExpandLocationResolver resolver);
    [CompilerGeneratedAttribute]
private static FileSystemPath <CreateFromPackagesAndInstallResolver>b__5(AssemblyNameAndLocation anal);
    [CompilerGeneratedAttribute]
private static string <CreateFromPackagesAndInstallResolver>b__6(AssemblyNameAndLocation anal);
    [CompilerGeneratedAttribute]
private static FileSystemPath <CreateFromPackagesAndInstallResolver>b__7(FileSystemPath file);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.Helpers.ProductConfigurationsEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static InternalMode GetInternalMode(ProductConfigurations thіs);
    [ExtensionAttribute]
public static bool IsInternalMode(ProductConfigurations thіs);
    [CompilerGeneratedAttribute]
private static bool <IsInternalMode>b__0(ZonePart config);
}
public class JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatHostMixin : object {
    [CanBeNullAttribute]
private DeployedPackages myDeployedPackages;
    private Assembly myMinimalPackageSetFilter;
    private Lazy`1<ProductBinariesDirArtifact> myProductBinariesDirArtifact;
    public CollectProductPackagesInDirectoryFlatHostMixin(Lazy`1<ProductBinariesDirArtifact> productBinariesDirArtifact, Assembly minimalPackageSetFilter);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
}
[ObsoleteAttribute("This is the legacy no-caching version which builds the part catalog each time over the set of files available, and does not support AdditionalDeployedPackages.")]
public class JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatNoCachingHostMixin : object {
    private ILogger Logger;
    private Func`2<AllAssembliesOnPackages, AllAssembliesOnPackages> myAllAssembliesProcessor;
    private IList`1<ApplicationPackageArtifact> myPackages;
    private Lazy`1<ProductBinariesDirArtifact> myProductBinariesDirArtifact;
    private Func`2<AllAssemblies, IList`1<Subplatform>> myΛFilter;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnPackage, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnPackage, ApplicationPackageArtifact> CS$<>9__CachedAnonymousMethodDelegate4;
    public CollectProductPackagesInDirectoryFlatNoCachingHostMixin(Lazy`1<ProductBinariesDirArtifact> productBinariesDirArtifact, Func`2<AllAssemblies, IList`1<Subplatform>> λFilter, Func`2<AllAssembliesOnPackages, AllAssembliesOnPackages> allAssembliesProcessor);
    private IList`1<ApplicationPackageArtifact> CollectSubplatformPackages();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static string <CollectSubplatformPackages>b__1(SubplatformOnPackage s);
    [CompilerGeneratedAttribute]
private static ApplicationPackageArtifact <CollectSubplatformPackages>b__2(SubplatformOnPackage sub);
}
public class JetBrains.Application.Environment.HostParameters.ConsoleLoggerMixin : object {
    private SequentialLifetimes myPushToLogger;
    [CompilerGeneratedAttribute]
private LoggingLevel <LoggingLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private IFilter[] <Filters>k__BackingField;
    public LoggingLevel LoggingLevel { get; private set; }
    public IFilter[] Filters { get; private set; }
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    public ConsoleLoggerMixin(LoggingLevel level, IFilter[] filters);
    [CompilerGeneratedAttribute]
public LoggingLevel get_LoggingLevel();
    [CompilerGeneratedAttribute]
private void set_LoggingLevel(LoggingLevel value);
    [CompilerGeneratedAttribute]
public IFilter[] get_Filters();
    [CompilerGeneratedAttribute]
private void set_Filters(IFilter[] value);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    public void PushToLogger(ILogEventListener listener, LoggingLevel level, IFilter[] filters);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    public sealed virtual void Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.CreateLoggerOutputToStdOutHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public class JetBrains.Application.Environment.HostParameters.CustomComponentHostMixin : object {
    private Func`1<object> myΛCreateCustomComponent;
    public CustomComponentHostMixin(Func`1<object> λCreateCustomComponent);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.CustomHostCommandLineHostMixin : object {
    private IHostCommandLine myHostCommandLine;
    public CustomHostCommandLineHostMixin(IHostCommandLine hostCommandLine);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.DefaultApplicationHostMixin : object {
    private HostInfo myHostInfo;
    public static string FallbackHostProductName;
    public DefaultApplicationHostMixin(HostInfo hostInfo);
    private static DefaultApplicationHostMixin();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.DefaultHostCommandLineFromProcessRuntimeHostMixin : object {
    private String[] myArgs;
    public DefaultHostCommandLineFromProcessRuntimeHostMixin(String[] args);
    public virtual void Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.EnableMultithreadedJitHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.EnvironmentZoneFromSerializedComponentsHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    public EnvironmentZoneFromSerializedComponentsHostMixin(ISerializedValuesResolverLoader svr);
    private sealed virtual override ZonePart JetBrains.Application.Environment.HostParameters.IHaveEnvironmentZoneHostMixin.GetEnvironmentZone(FullPartCatalogSet catalogset);
}
public class JetBrains.Application.Environment.HostParameters.EnvironmentZoneHostMixin : object {
    [CompilerGeneratedAttribute]
private ZonePart <ZoneAsPart>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ZoneAsRuntimeType>k__BackingField;
    [CanBeNullAttribute]
public ZonePart ZoneAsPart { get; private set; }
    [CanBeNullAttribute]
public Type ZoneAsRuntimeType { get; private set; }
    public EnvironmentZoneHostMixin(ZonePart zone);
    public EnvironmentZoneHostMixin(Type zone);
    [CompilerGeneratedAttribute]
public ZonePart get_ZoneAsPart();
    [CompilerGeneratedAttribute]
private void set_ZoneAsPart(ZonePart value);
    [CompilerGeneratedAttribute]
public Type get_ZoneAsRuntimeType();
    [CompilerGeneratedAttribute]
private void set_ZoneAsRuntimeType(Type value);
    private sealed virtual override ZonePart JetBrains.Application.Environment.HostParameters.IHaveEnvironmentZoneHostMixin.GetEnvironmentZone(FullPartCatalogSet catalogset);
}
public abstract class JetBrains.Application.Environment.HostParameters.ExceptionReporterHostMixinBase : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    protected abstract virtual void SetExceptionReporter(Lifetime lifetime);
}
[ObsoleteAttribute("We won't be embedding package info into the entry point. Packages will be collected AD HOC from startup folder.")]
public class JetBrains.Application.Environment.HostParameters.FullPartCatalogFromSerializedComponentsHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    public FullPartCatalogFromSerializedComponentsHostMixin(ISerializedValuesResolverLoader svr);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.GuardAssertHostMixin : object {
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate3;
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IAssertStartStopHostMixin.Assert(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.Environment.HostParameters.IAssertStartStopHostMixin.Assert>b__0();
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.Environment.HostParameters.IAssertStartStopHostMixin.Assert>b__1();
}
public class JetBrains.Application.Environment.HostParameters.HostInfoFromSerializedComponents : object {
    private Lazy`1<HostInfo> myHostInfo;
    [NotNullAttribute]
public Lazy`1<HostInfo> HosInfo { get; }
    public HostInfoFromSerializedComponents(ISerializedValuesResolverLoader loader);
    public sealed virtual Lazy`1<HostInfo> get_HosInfo();
    [CanBeNullAttribute]
protected virtual HostInfo GetHostInfo(ISerializedValuesResolverLoader loader);
}
public class JetBrains.Application.Environment.HostParameters.HostInfoFromSerializedComponentsWithRootSuffixFromBinDir : HostInfoFromSerializedComponents {
    private Lazy`1<ProductBinariesDirArtifact> myBindirArt;
    [CompilerGeneratedAttribute]
private static Func`2<StreamReader, InstallableHost> CS$<>9__CachedAnonymousMethodDelegate1;
    public HostInfoFromSerializedComponentsWithRootSuffixFromBinDir(ISerializedValuesResolverLoader loader, Lazy`1<ProductBinariesDirArtifact> bindirart);
    protected virtual HostInfo GetHostInfo(ISerializedValuesResolverLoader loader);
    [HandleProcessCorruptedStateExceptionsAttribute]
[CanBeNullAttribute]
private static HostInfo ReadHostInfoFromBinDir(Lazy`1<ProductBinariesDirArtifact> bindirart);
    [CompilerGeneratedAttribute]
private static InstallableHost <ReadHostInfoFromBinDir>b__0(StreamReader reader);
}
public class JetBrains.Application.Environment.HostParameters.HostInfoHostMixin : object {
    private IHaveHostInfo myHaveHostInfo;
    public HostInfoHostMixin(IHaveHostInfo haveHostInfo);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public enum JetBrains.Application.Environment.HostParameters.HostInitLevels : Enum {
    public int value__;
    public static HostInitLevels Default;
    public static HostInitLevels BeforeDefault;
    public static HostInitLevels HighPriority;
    public static HostInitLevels Native;
    public static HostInitLevels PumpOutLeftovers;
    public static HostInitLevels FallbackExceptionReporting;
    public static HostInitLevels AfterDefault;
}
public interface JetBrains.Application.Environment.HostParameters.IAssertStartStopHostMixin {
    public abstract virtual void Assert(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin {
    public abstract virtual void Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveEnvironmentZoneHostMixin {
    [NotNullAttribute]
public abstract virtual ZonePart GetEnvironmentZone(FullPartCatalogSet catalogset);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin {
    [NotNullAttribute]
public abstract virtual FullPartCatalogSet GetFullPartCatalogSet(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveHostInfo {
    public Lazy`1<HostInfo> HosInfo { get; }
    public abstract virtual Lazy`1<HostInfo> get_HosInfo();
}
public interface JetBrains.Application.Environment.HostParameters.IInitAppHostMixin {
    public HostInitLevels Priority { get; }
    public abstract virtual HostInitLevels get_Priority();
    public abstract virtual void InitHost(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.HostParameters.IInitLoggerHostMixin {
    public abstract virtual void InitLogger();
}
public interface JetBrains.Application.Environment.HostParameters.IJetHostMixin {
}
public class JetBrains.Application.Environment.HostParameters.InitExceptionReporterOnSerializedComponentsHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    public InitExceptionReporterOnSerializedComponentsHostMixin(ISerializedValuesResolverLoader svr);
    [NotNullAttribute]
public static ExceptionReporting ShellLessExceptionReporting__CreateDeadEnd();
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.InitLoggerHostMixin : object {
    private Lazy`1<HostInfo> myHostInfo;
    private LogSubconfiguration myLogSubconfiguration;
    public InitLoggerHostMixin(HostInfo hostInfo, LogSubconfiguration subconfiguration);
    public InitLoggerHostMixin(IHaveHostInfo haveHostInfo);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitLoggerHostMixin.InitLogger();
}
public class JetBrains.Application.Environment.HostParameters.InitStdWindowsAppFxHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private static Application OnAlgorithmError();
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public interface JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin {
    public RunMessageLoopPriority Priority { get; }
    public bool IsAvailable { get; }
    public abstract virtual RunMessageLoopPriority get_Priority();
    public abstract virtual bool get_IsAvailable();
    public abstract virtual ProductCanBeStartedVerdict RunMainLoop(ComponentContainer containerEnv);
}
public class JetBrains.Application.Environment.HostParameters.JetHostParameters : object {
    public IList`1<IJetHostMixin> Mixins;
    public JetHostParameters(IList`1<IJetHostMixin> host);
}
public class JetBrains.Application.Environment.HostParameters.JetHostParametersCaller : object {
    private ILogger Logger;
    private IList`1<IJetHostMixin> Mixins;
    [CompilerGeneratedAttribute]
private static Func`2<IInitAppHostMixin, HostInitLevels> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IRunMainLoopHostMixin, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IRunMainLoopHostMixin, RunMessageLoopPriority> CS$<>9__CachedAnonymousMethodDelegate9;
    public JetHostParametersCaller(IList`1<IJetHostMixin> mixins);
    [HandleProcessCorruptedStateExceptionsAttribute]
public void FillHostInfoContainer(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    [HandleProcessCorruptedStateExceptionsAttribute]
[NotNullAttribute]
public FullPartCatalogSet GetFullPartCatalogSet(Lifetime lifetime);
    [HandleProcessCorruptedStateExceptionsAttribute]
[NotNullAttribute]
public JetEnvironmentAvailableZones GetJetEnvironmentAvailableZones(FullPartCatalogSet catalogset);
    [HandleProcessCorruptedStateExceptionsAttribute]
public void InitHost(Lifetime lifetime);
    [HandleProcessCorruptedStateExceptionsAttribute]
public void InitLogger();
    [HandleProcessCorruptedStateExceptionsAttribute]
public ProductCanBeStartedVerdict RunMainLoop(ComponentContainer containerEnv);
    public void StartStopAsserts(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static HostInitLevels <InitHost>b__0(IInitAppHostMixin _);
    [CompilerGeneratedAttribute]
private static bool <RunMainLoop>b__6(IRunMainLoopHostMixin _);
    [CompilerGeneratedAttribute]
private static RunMessageLoopPriority <RunMainLoop>b__7(IRunMainLoopHostMixin _);
}
public class JetBrains.Application.Environment.HostParameters.MakeAdHockProductPackageOnScatteredFilesHostMixin : object {
    public static SubplatformName AdHocApplicationPackageName;
    private ApplicationPackageArtifact myPackage;
    [CanBeNullAttribute]
private ProductBinariesDirArtifact myProductBinariesDirArtifactRaw;
    [CanBeNullAttribute]
private Predicate`1<RelativePath> myΛFilter;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [NotNullAttribute]
private ProductBinariesDirArtifact ProductBinariesDirArtifact { get; }
    public MakeAdHockProductPackageOnScatteredFilesHostMixin(ProductBinariesDirArtifact productBinariesDirArtifact, Predicate`1<RelativePath> λFilter);
    private static MakeAdHockProductPackageOnScatteredFilesHostMixin();
    public static ApplicationPackageArtifact CollectScatteredDllFilesIntoApplicationPackage(ProductBinariesDirArtifact productBinariesDirArtifact, Predicate`1<RelativePath> λFilter);
    private DeployedPackagesExpandLocationResolverTrivial CreateExpandLocationResolver();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
    private ProductBinariesDirArtifact get_ProductBinariesDirArtifact();
    [CompilerGeneratedAttribute]
private static bool <CollectScatteredDllFilesIntoApplicationPackage>b__0(FileSystemPath file);
    [CompilerGeneratedAttribute]
private static bool <CollectScatteredDllFilesIntoApplicationPackage>b__1(ApplicationPackageFile f);
}
public class JetBrains.Application.Environment.HostParameters.MessagePumpMainLoopHostMixin : object {
    private RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.Priority { get; }
    private bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.IsAvailable { get; }
    private sealed virtual override RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_Priority();
    private sealed virtual override bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_IsAvailable();
    private sealed virtual override ProductCanBeStartedVerdict JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.RunMainLoop(ComponentContainer containerEnv);
}
public class JetBrains.Application.Environment.HostParameters.PumpOutLeftoversHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public enum JetBrains.Application.Environment.HostParameters.RunMessageLoopPriority : Enum {
    public int value__;
    public static RunMessageLoopPriority Default;
    public static RunMessageLoopPriority MsoComponentManager;
}
public class JetBrains.Application.Environment.HostParameters.SerializedComponentsIntoEnvironmentContainerHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    public SerializedComponentsIntoEnvironmentContainerHostMixin(ISerializedValuesResolverLoader svr);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.StdOutGreetingHostMixin : object {
    private Func`1<string> myΛGetText;
    private HostInitLevels myPriority;
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    public StdOutGreetingHostMixin(string text, HostInitLevels priority);
    public StdOutGreetingHostMixin(Func`1<string> λGetText, HostInitLevels priority);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public class JetBrains.Application.Environment.HostParameters.SuppressExceptionReporterHostMixin : ExceptionReporterHostMixinBase {
    protected virtual void SetExceptionReporter(Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.HostParameters.WindowsApplicationHost : object {
    [CompilerGeneratedAttribute]
private static Func`2<IJetHostMixin, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<IJetHostMixin, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<IJetHostMixin, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [PureAttribute]
[ExtensionAttribute]
[NotNullAttribute]
public static Full CustomConsoleGreeting(Full input, Func`1<string> λGetText, HostInitLevels priority);
    [NotNullAttribute]
[ExtensionAttribute]
[PureAttribute]
public static ProductInfo Hosted(Packages input, HostInfo hostInfo, LogSubconfiguration logconf);
    [PureAttribute]
[NotNullAttribute]
[ExtensionAttribute]
public static Full InEnvironmentZone(ProductInfo input, ZonePart zone);
    [NotNullAttribute]
[PureAttribute]
[ExtensionAttribute]
public static Full InEnvironmentZone(ProductInfo input, Type typeZone);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full InEnvironmentZone(ProductInfo input);
    [ExtensionAttribute]
[PureAttribute]
[NotNullAttribute]
public static ProductInfo NameDontCare(Packages input);
    [NotNullAttribute]
[ExtensionAttribute]
[PureAttribute]
[ObsoleteAttribute("We won't be embedding package info into the entry point. Packages will be collected AD HOC from startup folder.")]
public static Full OnBuildTimeSerializedDataInExeResources(Engine input);
    [PureAttribute]
[NotNullAttribute]
[ExtensionAttribute]
public static Full OnBuildTimeSerializedDataInExeResourcesOnScatteredPackages(Engine input);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Engine OnConsoleEngine(Empty input, String[] args);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Packages OnPackagesInFlatFolder(Engine input, Lazy`1<ProductBinariesDirArtifact> productBinariesDirArtifact, Assembly minimalPackageSetFilter);
    [PureAttribute]
[NotNullAttribute]
[ExtensionAttribute]
public static Packages OnScatteredFilesInFlatFolder(Engine input, ProductBinariesDirArtifact productBinariesDirArtifact, Predicate`1<RelativePath> λFilter);
    [NotNullAttribute]
[PureAttribute]
[ExtensionAttribute]
public static Engine OnWindowsNonInteractiveEngine(Empty input);
    [CompilerGeneratedAttribute]
private static bool <Hosted>b__0(IJetHostMixin x);
    [CompilerGeneratedAttribute]
private static bool <OnBuildTimeSerializedDataInExeResources>b__2(IJetHostMixin x);
    [CompilerGeneratedAttribute]
private static bool <OnBuildTimeSerializedDataInExeResourcesOnScatteredPackages>b__4(IJetHostMixin x);
}
public interface JetBrains.Application.Environment.IActivate`1 {
    public abstract virtual bool ActivatorEnabled();
}
public interface JetBrains.Application.Environment.IActivateBase {
}
public interface JetBrains.Application.Environment.IActivatorDependsOn`1 {
}
public interface JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver {
    [NotNullAttribute]
public abstract virtual FileSystemPath GetDeployedPackageDirectory(IApplicationPackage package);
}
public interface JetBrains.Application.Environment.IInternalZonePreferenceStore {
    public abstract virtual bool IsInternalZone();
}
[ObsoleteAttribute("Hosts are not in use anymore, JetEnvironment is the terminal item.")]
public interface JetBrains.Application.Environment.IJetHost {
    [NotNullAttribute]
public JetEnvironment Environment { get; }
    public abstract virtual JetEnvironment get_Environment();
}
public static class JetBrains.Application.Environment.IJetHostEx : object {
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegated;
    [NotNullAttribute]
public static LifetimeDefinition EntangleGuardedLifetime(Lifetime lifetimeOuterUnguarded, string sIdentity, ReentrancyGuard guard, Action`1<Lifetime> FWithGuardedLifetime);
    public static void PumpOutLeftovers();
    [NotNullAttribute]
public static ProductCanBeStartedVerdict RunHostMessageLoop(IComponentContainer containerEnv);
    [CompilerGeneratedAttribute]
private static void <PumpOutLeftovers>b__c();
}
public interface JetBrains.Application.Environment.IProductCanBeStarted {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    [NotNullAttribute]
public abstract virtual IProperty`1<ProductCanBeStartedVerdict> CreateCanBeStarted(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.ITimebombExplosionReporter {
    public abstract virtual void ReportTimebombed(ICollection`1<ZonePart> zoneParts, ICollection`1<string> timebombedProducts);
}
public interface JetBrains.Application.Environment.ITimebombZoneFilter {
    public bool HasTimebombedPackages { get; }
    public abstract virtual bool get_HasTimebombedPackages();
    public abstract virtual bool IsZoneAllowed(ZonePart zonePart);
}
public class JetBrains.Application.Environment.JetEnvironment : object {
    [NotNullAttribute]
public JetEnvironmentAvailableZones ActiveEnvironmentZones;
    [NotNullAttribute]
public ComponentContainer Container;
    [NotNullAttribute]
public EnvironmentPartCatalogSet EnvironmentPartCatalogSet;
    [NotNullAttribute]
public FullPartCatalogSet FullPartCatalogSet;
    [GuardAttribute("1")]
private JetEnvironment(Lifetime lifetime, JetHostParametersCaller host);
    [GuardAttribute("1")]
public static ProductCanBeStartedVerdict CreateAndRun(Full hostparams);
    [GuardAttribute("1")]
[CanBeNullAttribute]
public static JetEnvironment CreateDontRun(Lifetime lifetime, JetHostParameters hostparams);
    [GuardAttribute("1")]
[NotNullAttribute]
public static JetEnvironment CreateDontRunGuarded(Lifetime lifetime, JetHostParameters hostparams);
    [GuardAttribute("1")]
private static ProductCanBeStartedVerdict InternalCreate(LifetimeDefinition lifetimeDefinition, JetHostParametersCaller host, JetEnvironment& environment);
    [GuardAttribute("1")]
private static void InternalDestroy(LifetimeDefinition lifetimeDefinition, JetHostParametersCaller host);
    [NotNullAttribute]
private static LifetimeDefinition InternalInitLifetime();
    [NotNullAttribute]
[GuardAttribute("1")]
[HandleProcessCorruptedStateExceptionsAttribute]
private static ProductCanBeStartedVerdict InternalRun(JetHostParametersCaller host, ComponentContainer containerEnv);
}
public class JetBrains.Application.Environment.JetEnvironmentAvailableZones : object {
    private static string IEnvironmentZoneFullName;
    [NotNullAttribute]
public ZonePart[] Zones;
    [CompilerGeneratedAttribute]
private static Func`2<TypeAttribute`1<AutoselectZoneByClrVersionAttribute>, PartCatalogType> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<TypeAttribute`1<AutoselectZoneByCpuArchitectureAttribute>, PartCatalogType> CS$<>9__CachedAnonymousMethodDelegate3;
    private JetEnvironmentAvailableZones(ZonePart[] configs);
    private static JetEnvironmentAvailableZones();
    [NotNullAttribute]
public static JetEnvironmentAvailableZones CreateFromEnvironmentModuleZoneAndStandardConfigs(FullPartCatalogSet catalog, ZonePart[] zonesEnvironment);
    public bool Equals(JetEnvironmentAvailableZones other);
    public virtual bool Equals(object obj);
    [NotNullAttribute]
public static ZonePart[] GetAllPossibleStandardConfigs(PartCatalog catalog);
    public virtual int GetHashCode();
    [NotNullAttribute]
public static ZonePart[] GetStandardConfigsForCurrentRuntime(FullPartCatalogSet catalog);
    [NotNullAttribute]
private static ZonePart GetCpuConfig(FullPartCatalogSet catalogset);
    [NotNullAttribute]
private static ZonePart GetRuntimeConfig(FullPartCatalogSet catalogset);
    private void TraceConfigurations(ZonePart[] configs);
    [CompilerGeneratedAttribute]
private static PartCatalogType <GetAllPossibleStandardConfigs>b__0(TypeAttribute`1<AutoselectZoneByClrVersionAttribute> tattr);
    [CompilerGeneratedAttribute]
private static PartCatalogType <GetAllPossibleStandardConfigs>b__1(TypeAttribute`1<AutoselectZoneByCpuArchitectureAttribute> tattr);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.JetEnvironmentZones : EnvironmentZones {
    private JetEnvironment myEnvironment;
    private IEnumerable`1<IActivateBase> myProductZonesActivators;
    private ILogger myLogger;
    private OneToSetMap`2<IActivateBase, ZonePart> myActivatedProductZones;
    private OneToSetMap`2<IActivateBase, ZonePart> myActivatorDependsOnZones;
    public JetEnvironmentZones(JetEnvironment environment, IEnumerable`1<IActivateBase> productZonesActivators, ILogger logger);
    private void BuildActivatorZones();
    public IEnumerable`1<ZonePart> ActivatorZones(JetHashSet`1<ZonePart> zonesNegativeByLicense, JetHashSet`1<ZonePart> allNegativeZones);
}
public static class JetBrains.Application.Environment.JetHost : object {
    [NotNullAttribute]
public static Empty New { get; }
    public static Empty get_New();
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.JetHostItems : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static ProductCanBeStartedVerdict CreateAndRun(Full input);
    [NotNullAttribute]
[ExtensionAttribute]
[PureAttribute]
public static Full CustomAdd(Full input, IJetHostMixin item);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full CustomRemove(Full input);
    [ExtensionAttribute]
[PureAttribute]
[NotNullAttribute]
public static Full CustomReplace(Full input, IJetHostMixin newitem);
    [CompilerGeneratedAttribute]
private static bool <CustomRemove>b__0(IJetHostMixin item);
    [CompilerGeneratedAttribute]
private static bool <CustomReplace>b__1(IJetHostMixin item);
}
public interface JetBrains.Application.Environment.LicenseCheck.IZoneLicenseChecker {
    public IEnumerable`1<string> Signatures { get; }
    public abstract virtual IEnumerable`1<string> get_Signatures();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.LicenseCheck.RestartShellOnZoneLicenseCheckChanges : object {
    private IProperty`1<ProductCanBeStartedVerdict> myCanBeStarted;
    public double Priority { get; }
    public RestartShellOnZoneLicenseCheckChanges(Lifetime lifetime, ZoneLicenseChecker zoneLicenseChecker, IThreading threading);
    public sealed virtual double get_Priority();
    public sealed virtual IProperty`1<ProductCanBeStartedVerdict> CreateCanBeStarted(Lifetime lifetime);
}
[AttributeUsageAttribute("1036")]
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
public class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    public string PublicKey { get; private set; }
    public ZoneLicenseAttribute(string PublicKey);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
private void set_PublicKey(string value);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseChecker : object {
    private ILogger myLogger;
    private bool myCheckersApplied;
    private IList`1<IZoneLicenseChecker> myCheckers;
    [CompilerGeneratedAttribute]
private ISimpleSignal <CheckersChanged>k__BackingField;
    public ISimpleSignal CheckersChanged { get; private set; }
    public ZoneLicenseChecker(Lifetime lifetime, License2CheckComponent licenseCheckComponent, ILogger logger);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_CheckersChanged();
    [CompilerGeneratedAttribute]
private void set_CheckersChanged(ISimpleSignal value);
    private static IList`1<IZoneLicenseChecker> ValidateCheckers(PropertyChangedEventArgs`1<IReadOnlyCollection`1<ILicensedEntity>> args);
    public IEnumerable`1<ZonePart> FilterZones(IEnumerable`1<ZonePart> zones);
    public bool IsZoneAllowed(ZonePart part);
    [CompilerGeneratedAttribute]
private bool <FilterZones>b__8(ZonePart part);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Settings for internal action to create ZoneLicensCheckers")]
public class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseCheckSettings : object {
    [SettingsIndexedEntryAttribute("P by Public Key")]
public IIndexedEntry`2<string, string> PublicKeyToP;
    [SettingsIndexedEntryAttribute("Q by Public Key")]
public IIndexedEntry`2<string, string> PublicKeyToQ;
}
public static class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseCheckSettingsEx : object {
    public static Pair`2<string, string> TryGetPandQ(string publicKey, ISettingsStore settingsStore);
    public static void SetPandQ(string publicKey, string p, string q, ISettingsStore settingsStore);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.LicenseCheck.ZonePartEx : object {
    [ExtensionAttribute]
public static bool DoesNotRequireLicense(ZonePart part);
    [ExtensionAttribute]
public static FrugalLocalList`1<string> GetLicensePublicKeys(ZonePart part);
}
public class JetBrains.Application.Environment.LicenseCheck.ZoneSignatureValidator : object {
    private static string SECRET_EXPONENT;
    private static Byte[] StringToBytes(string s);
    private static bool CompareBytes(Byte[] a, Byte[] b);
    public static bool IsApplicable(string zonePublicKey, string checkerFqn, string checkerSignature);
    public static string Encode(string checkerFqn, string p, string q);
    public static IList`1<string> Encode(ISettingsStore settingsStore, Type[] zoneTypes);
}
public class JetBrains.Application.Environment.PreviewShellPartCatalogSet : PartCatalogSet {
    public PreviewShellPartCatalogSet(IEnumerable`1<PartCatalog> initial);
    public PreviewShellPartCatalogSet(PartCatalog initial);
}
public static class JetBrains.Application.Environment.ProductCanBeStartedPriorityThresholds : object {
    public static double EnvironmentReady;
    public static double UserSuspend;
    public static double Licensing;
    private static ProductCanBeStartedPriorityThresholds();
}
public enum JetBrains.Application.Environment.ProductCanBeStartedResolution : Enum {
    public int value__;
    public static ProductCanBeStartedResolution Affirmative;
    public static ProductCanBeStartedResolution NegativeTemporary;
    public static ProductCanBeStartedResolution NegativePermanentGraceful;
    public static ProductCanBeStartedResolution NegativePermanentByError;
}
public class JetBrains.Application.Environment.ProductCanBeStartedVerdict : object {
    public ProductCanBeStartedResolution Resolution;
    [CanBeNullAttribute]
public string Comment;
    private ProductCanBeStartedVerdict(ProductCanBeStartedResolution resolution, string comment);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict Affirmative(string message);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict NegativeTemporary(string message);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict NegativePermanentGraceful(string message);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict NegativePermanentByError(string message);
    public sealed virtual bool Equals(ProductCanBeStartedVerdict other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ProductCanBeStartedVerdict left, ProductCanBeStartedVerdict right);
    public static bool op_Inequality(ProductCanBeStartedVerdict left, ProductCanBeStartedVerdict right);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.ProductCanBeStartedVerdictEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<ProductCanBeStartedVerdict, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static bool IsAffirmative(ProductCanBeStartedVerdict thіs);
    [ExtensionAttribute]
public static IProperty`1<bool> SelectShouldStartShell(IProperty`1<ProductCanBeStartedVerdict> thіs, Lifetime lifetime);
    [ExtensionAttribute]
public static bool ShouldStartShell(ProductCanBeStartedVerdict thіs);
    [ExtensionAttribute]
public static bool ShouldBeRunningStandaloneApplicationHost(ProductCanBeStartedVerdict thіs);
    [ExtensionAttribute]
public static bool IsWithErrors(ProductCanBeStartedVerdict thіs);
    [ExtensionAttribute]
public static bool IsNegativePermanent(ProductCanBeStartedVerdict thіs);
    [CompilerGeneratedAttribute]
private static bool <SelectShouldStartShell>b__0(ProductCanBeStartedVerdict verdict);
}
[AttributeUsageAttribute("192")]
public class JetBrains.Application.Environment.PublicStaticIntMainAttribute : PartAttribute {
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.ReportsProductsAllowedToRun : object {
    [NotNullAttribute]
public IProperty`1<ProductCanBeStartedVerdict> ProductCanBeStartedVerdict;
    public ReportsProductsAllowedToRun(Lifetime lifetime, IEnumerable`1<IProductCanBeStarted> canstart, IThreading threading, ILogger logger);
    [NotNullAttribute]
private static IProperty`1<ProductCanBeStartedVerdict> Init_ComposeProperty(Lifetime lifetime, ICollectionEvents`1<IProductCanBeStarted> productvalidators, IThreading threading);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.ReSharperInternalZonePreference : object {
    private FileSystemPath myZonesFile;
    public ReSharperInternalZonePreference(HostInfo hostInfo);
    public sealed virtual bool IsInternalZone();
    public void SetInternalZone(bool value);
    [CompilerGeneratedAttribute]
private bool <IsInternalZone>b__0();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.RunningProducts : object {
    [ObsoleteAttribute("We'll now have the single IProductNameAndVersion for all co-running products, so you should use the single ShellContainerComposed value.")]
[GuardAttribute("1")]
[NotNullAttribute]
public DictionaryEvents`2<IApplicationHost, IComponentContainer> ProductContainersComposed;
    [NotNullAttribute]
[ObsoleteAttribute("We'll now have the single IProductNameAndVersion for all co-running products, so you should use the single ShellContainerNonComposed value.")]
[GuardAttribute("1")]
public DictionaryEvents`2<IApplicationHost, IComponentContainer> ProductContainersNonComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> ShellContainerComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> ShellContainerNonComposed;
    public RunningProducts(Lifetime lifetime, IApplicationHost productForLegacyCollection, ILogger logger);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.RunsProducts : object {
    private static ReadonlyToken myReadonlyToken;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollection`1<ZonePart>> <TimebombedZones>k__BackingField;
    [NotNullAttribute]
public IProperty`1<ICollection`1<ZonePart>> TimebombedZones { get; private set; }
    public RunsProducts(Lifetime lifetime, JetEnvironmentZones zones, ReportsProductsAllowedToRun reportsProductsAllowedToRun, JetEnvironment environment, RunningProducts runningProducts, ILogger logger, ZoneLicenseChecker zoneLicenseChecker, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ITimebombZoneFilter timebombZoneFilter, IInitializationStrategyProvider initializationStrategyProvider, IThreading threading);
    private static RunsProducts();
    [CompilerGeneratedAttribute]
public IProperty`1<ICollection`1<ZonePart>> get_TimebombedZones();
    [CompilerGeneratedAttribute]
private void set_TimebombedZones(IProperty`1<ICollection`1<ZonePart>> value);
    private static JetHashSet`1<ZonePart> CollectModuleZonesForShell(JetEnvironmentZones zones, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ITimebombZoneFilter timebombZoneFilter, ZoneLicenseChecker zoneLicenseChecker, ILogger logger);
    [NotNullAttribute]
private static ICollection`1<ZonePart> CollectTimebombedShellZones(JetEnvironmentZones zones, ProductConfigurations productConfigurations, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ZoneLicenseChecker zoneLicenseChecker, ITimebombZoneFilter myTimebombZoneFilter, ILogger logger);
    private static void FilterPartCatalogSetByModuleZones(Lifetime lifetime, IPartCatalogSet catalogsetOriginal, IPartCatalogSet catalogsetFiltered, JetHashSet`1<ZonePart> zoneParts, ReadonlyToken reatokenPreviewShell);
    private static void RunProduct(Lifetime lifetimeProduct, JetEnvironment environment, JetEnvironmentZones zones, RunningProducts runningProducts, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ITimebombZoneFilter timebombZoneFilter, ZoneLicenseChecker zoneLicenseChecker, IInitializationStrategyProvider myInitializationStrategyProvider, IProperty`1<ICollection`1<ZonePart>> timebombedZones, ILogger logger);
}
[ShellComponentAttribute]
public class JetBrains.Application.Environment.RunsPublicStaticIntMain : object {
    public RunsPublicStaticIntMain(Lifetime lifetime, IComponentContainer containerParent, IThreading threading, ShellPartCatalogSet catalogset, ApplicationShutdownRequests shutdowner, ILogger logger);
}
public class JetBrains.Application.Environment.ShellPartCatalogSet : PartCatalogSet {
    [NotNullAttribute]
[ObsoleteAttribute("Use the object directly, the accessor just returns self.")]
public PartCatalogSet PartCatalogSet { get; }
    [NotNullAttribute]
[ObsoleteAttribute("Use the object directly, the accessor just returns self.")]
public PartCatalogSet PartsCatalogSet { get; }
    public ShellPartCatalogSet(Lifetime lifetime, PreviewShellPartCatalogSet origin);
    private ShellPartCatalogSet(PartCatalog initial);
    private ShellPartCatalogSet(IEnumerable`1<PartCatalog> initial);
    public PartCatalogSet get_PartCatalogSet();
    public PartCatalogSet get_PartsCatalogSet();
    public static ShellPartCatalogSet CreateCustom(IEnumerable`1<PartCatalog> initial);
    public static ShellPartCatalogSet CreateCustom(PartCatalog initial);
}
public static class JetBrains.Application.Environment.TeamCityExceptionReporting : object {
    public static void CreateAndInstallAll();
    public static void CreateAndInstallExceptionReporter();
    public static void CreateAndInstallLoggerListener();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.TimebombExplosionReporter : object {
    private static string ProductPresentableNamePropertyName;
    public TimebombExplosionReporter(Lifetime lifetime, RunsProducts runsProducts, ILogger logger, IEnumerable`1<ITimebombExplosionReporter> reporters);
    private static TimebombExplosionReporter();
    [CanBeNullAttribute]
private static string TryFetchProductName(ZonePart zonePart);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.TimebombZoneFilter : object {
    private ILogger myLogger;
    private JetHashSet`1<AssemblyNameInfo> myAllowedAssemblyNameInfos;
    private static string ProductPresentableNamePropName;
    [CompilerGeneratedAttribute]
private bool <HasTimebombedPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageFile, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool HasTimebombedPackages { get; private set; }
    public TimebombZoneFilter(Lifetime lifetime, ILogger logger, IEnumerable`1<ApplicationPackageArtifact> applicationPackages);
    private static TimebombZoneFilter();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasTimebombedPackages();
    [CompilerGeneratedAttribute]
private void set_HasTimebombedPackages(bool value);
    public sealed virtual bool IsZoneAllowed(ZonePart zonePart);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <.ctor>b__0(ApplicationPackageFile file);
}
[BaseTypeRequiredAttribute("JetBrains.Application.Environment.IActivate`1")]
public class JetBrains.Application.Environment.ZoneActivatorAttribute : EnvironmentComponentAttribute {
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.ZoneUserPreferenceChecker : object {
    public JetEnvironmentZones Zones;
    private ZoneUserPreferenceStore myZoneUserPreferenceStore;
    [CompilerGeneratedAttribute]
private List`1<CheckableZone> <CheckableZones>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ZonePart> <CheckableZonesSet>k__BackingField;
    public List`1<CheckableZone> CheckableZones { get; public set; }
    public HashSet`1<ZonePart> CheckableZonesSet { get; public set; }
    public ZoneUserPreferenceChecker(JetEnvironmentZones zones, ZoneUserPreferenceStore zoneUserPreferenceStore, EnvironmentZonesExtra zonesExtra, Lifetime lifeitme);
    [CompilerGeneratedAttribute]
public List`1<CheckableZone> get_CheckableZones();
    [CompilerGeneratedAttribute]
public void set_CheckableZones(List`1<CheckableZone> value);
    [CompilerGeneratedAttribute]
public HashSet`1<ZonePart> get_CheckableZonesSet();
    [CompilerGeneratedAttribute]
public void set_CheckableZonesSet(HashSet`1<ZonePart> value);
    public bool IsZoneExplicitlyExcluded(ZonePart zonePart);
    private bool IsDependent(CheckableZone zoneBase, CheckableZone zone);
    public void Save();
    [CompilerGeneratedAttribute]
private void <Save>b__5(Stream stream);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Environment.ZoneUserPreferenceStore : object {
    internal static string SerializedRootListName;
    [CompilerGeneratedAttribute]
private JetHashSet`1<StringSource> <DisabledZonesSet>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeFileThrowAwayAccess <Access>k__BackingField;
    internal JetHashSet`1<StringSource> DisabledZonesSet { get; private set; }
    internal SafeFileThrowAwayAccess Access { get; private set; }
    public ZoneUserPreferenceStore(HostInfo hostInfo);
    private static ZoneUserPreferenceStore();
    [CompilerGeneratedAttribute]
internal JetHashSet`1<StringSource> get_DisabledZonesSet();
    [CompilerGeneratedAttribute]
private void set_DisabledZonesSet(JetHashSet`1<StringSource> value);
    [CompilerGeneratedAttribute]
internal SafeFileThrowAwayAccess get_Access();
    [CompilerGeneratedAttribute]
private void set_Access(SafeFileThrowAwayAccess value);
    public bool IsZoneExplicitlyExcluded(ZonePart zonePart);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
}
[ShellComponentAttribute]
public class JetBrains.Application.EventBus.EventBusComponent : object {
    [NotNullAttribute]
private EventBusImpl myEventBus;
    public sealed virtual void Invoke(EventId`1<T> eventId, T args);
    public sealed virtual IEventContext InvokeStartFinish(EventId`1<TStartArgs> startEventId, EventId`1<TFinishArgs> finishEventId, TStartArgs args, Func`1<TFinishArgs> finishArgs);
    public sealed virtual IEventRef`1<T> Event(EventId`1<T> eventId);
    public sealed virtual IEventRef`1<T> Event();
    public sealed virtual void Dispose();
}
[ShellComponentAttribute]
public class JetBrains.Application.ExceptionReport.BuildDescriptionExceptionReportDataProvider : object {
    private Action`1<Exception> myFProvideExceptionData;
    public BuildDescriptionExceptionReportDataProvider(ProductConfigurations productConfigurations, IHostProductInfo hostProduct, SubProducts subProducts);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
}
public abstract class JetBrains.Application.ExceptionReport.ByOneExceptionSubmitterBase : ExceptionSubmitterBase {
    protected ByOneExceptionSubmitterBase(IIssueTracker issueTracker, IThreading threading);
    protected virtual void SubmitExceptionsInternal(ExceptionData[] exceptions, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, LoginInformation loginInformation, IProgressIndicator progressIndicator);
}
public enum JetBrains.Application.ExceptionReport.CredentialsVerificationResult : Enum {
    public int value__;
    public static CredentialsVerificationResult Ok;
    public static CredentialsVerificationResult UserNameProblem;
    public static CredentialsVerificationResult PasswordProblem;
    public static CredentialsVerificationResult UserNameOrPasswordProblem;
    public static CredentialsVerificationResult OtherProblem;
}
public class JetBrains.Application.ExceptionReport.DefaultExceptionReportService : object {
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Log(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Notify(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.RequireAction(ExceptionData exception);
}
internal class JetBrains.Application.ExceptionReport.DiffDataInt : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <Modified>k__BackingField;
    public int Length { get; private set; }
    public Int32[] Data { get; private set; }
    public Boolean[] Modified { get; private set; }
    internal DiffDataInt(Int32[] initData);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Int32[] value);
    [CompilerGeneratedAttribute]
public Boolean[] get_Modified();
    [CompilerGeneratedAttribute]
private void set_Modified(Boolean[] value);
}
public class JetBrains.Application.ExceptionReport.EditedExceptionText : object {
    [CompilerGeneratedAttribute]
private string <ExceptionText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SensitiveDataText>k__BackingField;
    public string ExceptionText { get; public set; }
    public string Summary { get; public set; }
    public string SensitiveDataText { get; public set; }
    public EditedExceptionText(string exceptionSummary, string exceptionText, string sensitiveDataText);
    [CompilerGeneratedAttribute]
public string get_ExceptionText();
    [CompilerGeneratedAttribute]
public void set_ExceptionText(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_SensitiveDataText();
    [CompilerGeneratedAttribute]
public void set_SensitiveDataText(string value);
}
public class JetBrains.Application.ExceptionReport.ExceptionData : PersistableExceptionData {
    public ISignal`1<ExceptionData> Changed;
    public ISimpleSignal ChangedSimple;
    public IProperty`1<EditedExceptionText> EditedTextProperty;
    private Exception myException;
    private LifetimeDefinition myExceptionLifetime;
    public IProperty`1<int> NumberOfTimesHappenedProperty;
    public IProperty`1<ExceptionSubmissionResult> ServerActionProperty;
    public IProperty`1<ExceptionDataStatus> StatusProperty;
    public IProperty`1<DateTime> WhenLastHappenedProperty;
    [CompilerGeneratedAttribute]
private static Func`2<int, DateTime> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    public Lifetime ExceptionLifetime { get; }
    public bool IsPending { get; }
    public string FullSensitiveData { get; }
    [CanBeNullAttribute]
public Exception Exception { get; public set; }
    public ExceptionData(Lifetime lifetime, Exception exception, JetSemanticVersion productVersion, Nullable`1<DateTime> whenHappened);
    public ExceptionData(Lifetime lifetime, PersistableExceptionData persistableExceptionData);
    public Lifetime get_ExceptionLifetime();
    public bool get_IsPending();
    public string get_FullSensitiveData();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    private void AddDataFromPreviousException();
    private void Init(Lifetime lifetime, Nullable`1<DateTime> whenHappened);
    public void TerminateLifetime();
    private void UpdateFields(PersistableExceptionData persistableExceptionData);
    public void UpdateWith(PersistableExceptionData persistableExceptionData);
    public PersistableExceptionData ToPersistableExceptionData();
    [CompilerGeneratedAttribute]
private static DateTime <Init>b__5(int i);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__6(PropertyChangedEventArgs`1<DateTime> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__7(PropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__8(PropertyChangedEventArgs`1<ExceptionDataStatus> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__9(PropertyChangedEventArgs`1<EditedExceptionText> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__a(PropertyChangedEventArgs`1<ExceptionSubmissionResult> args);
    [CompilerGeneratedAttribute]
private void <Init>b__b(PropertyChangedEventArgs`1<ExceptionSubmissionResult> args);
    [CompilerGeneratedAttribute]
private void <Init>b__c(PropertyChangedEventArgs`1<EditedExceptionText> args);
    [CompilerGeneratedAttribute]
private static bool <Init>b__d(ExceptionData data);
}
public class JetBrains.Application.ExceptionReport.ExceptionDataStatus : EnumPattern {
    public static ExceptionDataStatus Created;
    public static ExceptionDataStatus Read;
    public static ExceptionDataStatus Muted;
    public static ExceptionDataStatus SubmissionInProgress;
    public static ExceptionDataStatus Submited;
    public static ExceptionDataStatus SubmittedMuted;
    protected ExceptionDataStatus(string name);
    private static ExceptionDataStatus();
    public static ExceptionDataStatus FromString(string status);
}
public static class JetBrains.Application.ExceptionReport.ExceptionHelper : object {
    private static Regex myRegex;
    private static ExceptionHelper();
    public static string FilterExceptionString(string s);
    public static string GetExceptionHash(string excString);
    public static string GetExceptionHash(Exception exception);
    public static string FormatStackTrace(Exception e);
    public static string GetExceptionSummary(Exception e);
    private static MethodBase GetFailedMethod(Exception exception);
    private static string GetActualExceptionType(Exception exception);
    private static string GetSummary(Exception exception);
    private static string NormalizeSummaryString(string summaryString);
}
public class JetBrains.Application.ExceptionReport.ExceptionManager : RecursiveFileSystemChangeDeltaVisitor {
    public static int NumberOfExceptionsToStore;
    private Lifetime myLifetime;
    private ReentrancyGuard myGuard;
    private ICollectionEvents`1<ExceptionData> myExceptions;
    private Func`3<PersistableExceptionData, PersistableExceptionData, bool> myExceptionDataEqualityComparer;
    private ExceptionStackTraceCache myExceptionStackTraceCache;
    private ExceptionStorageLocator myStorageLocator;
    private Timer myLoadTimer;
    [CanBeNullAttribute]
private IHostProductInfo myHostProductInfo;
    [CanBeNullAttribute]
private IFileSystemTracker myFileSystemTracker;
    [CanBeNullAttribute]
private IProperty`1<bool> myWatchExceptionStorage;
    [CanBeNullAttribute]
private IExceptionStorageBehavior myExceptionStorageBehavior;
    private bool myIsUpToDate;
    public ISimpleSignal ExceptionsLoaded;
    [CompilerGeneratedAttribute]
private int <PendingCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnreadCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubmitInProgressCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<AddRemoveEventArgs`1<ExceptionData>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, PersistableExceptionData> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, PersistableExceptionData> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Comparison`1<ExceptionData> CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegate4b;
    public ICollectionEvents`1<ExceptionData> Exceptions { get; }
    private bool StoreExceptions { get; }
    public int PendingCountProperty { get; private set; }
    public int UnreadCountProperty { get; private set; }
    public int ReadCountProperty { get; private set; }
    public int SubmitInProgressCountProperty { get; private set; }
    public ExceptionManager(Lifetime lifetime, ExceptionStorageLocator storageLocator, IFileSystemTracker fileSystemTracker, IProperty`1<bool> watchExceptionStorage, IExceptionStorageBehavior exceptionStorageBehavior, IHostProductInfo hostProductInfo, Func`3<PersistableExceptionData, PersistableExceptionData, bool> exceptionComparer);
    public static Func`3<PersistableExceptionData, PersistableExceptionData, bool> CreateDefaultExceptionComparer(ExceptionStackTraceCache exceptionStackTraceCache);
    private void UpdateCounters();
    public virtual void Visit(FileSystemChangeDelta delta);
    private void OnFileSystemChanged(FileSystemChangeDelta fileSystemChange);
    public ICollectionEvents`1<ExceptionData> get_Exceptions();
    public ExceptionData CreateExceptionData(Exception exception);
    private JetSemanticVersion GetVersionForException();
    public bool Compare(PersistableExceptionData x, PersistableExceptionData y);
    private bool get_StoreExceptions();
    private void Load();
    private void ProcessAdd(ExceptionData newExceptionData);
    private static FileSystemPath GetRandomFileName(FileSystemPath storagePath);
    private void ProcessRemove(PersistableExceptionData oldExceptionData);
    private void DeleteExceptionData(PersistableExceptionData oldExceptionData);
    private void ProcessChange(ExceptionData exception);
    private void Cleanup();
    public ICollection`1<ExceptionData> GetNewExceptions();
    public ICollection`1<ExceptionData> GetPendingExceptions();
    private int PendingCount();
    [CompilerGeneratedAttribute]
public int get_PendingCountProperty();
    [CompilerGeneratedAttribute]
private void set_PendingCountProperty(int value);
    private int UnreadCount();
    [CompilerGeneratedAttribute]
public int get_UnreadCountProperty();
    [CompilerGeneratedAttribute]
private void set_UnreadCountProperty(int value);
    private int ReadCount();
    [CompilerGeneratedAttribute]
public int get_ReadCountProperty();
    [CompilerGeneratedAttribute]
private void set_ReadCountProperty(int value);
    private int SubmitInProgressCount();
    [CompilerGeneratedAttribute]
public int get_SubmitInProgressCountProperty();
    [CompilerGeneratedAttribute]
private void set_SubmitInProgressCountProperty(int value);
    private int ExceptionCount(Func`2<ExceptionData, bool> predicate);
    private static bool IsPending(ExceptionData e);
    private static bool IsUnread(ExceptionData e);
    private static bool IsSubmitInProgress(ExceptionData e);
    private static bool IsRead(ExceptionData e);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(AddRemoveEventArgs`1<ExceptionData> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object sender, ElapsedEventArgs args);
    [CompilerGeneratedAttribute]
private static PersistableExceptionData <Visit>b__e(Stream s);
    [CompilerGeneratedAttribute]
private static PersistableExceptionData <Visit>b__11(Stream s);
    [CompilerGeneratedAttribute]
private void <CreateExceptionData>b__21(ExceptionData data);
    [CompilerGeneratedAttribute]
private void <Load>b__2a(ExceptionData d);
    [CompilerGeneratedAttribute]
private void <Load>b__2b(AddRemoveEventArgs`1<ExceptionData> args);
    [CompilerGeneratedAttribute]
private static int <Cleanup>b__45(ExceptionData x, ExceptionData y);
    [CompilerGeneratedAttribute]
private static bool <GetNewExceptions>b__4a(ExceptionData e);
}
public class JetBrains.Application.ExceptionReport.ExceptionReporting : object {
    private IApplicationHost myApplicationHost;
    [NotNullAttribute]
private IList`1<StrategyDisposable> myStrategies;
    [CanBeNullAttribute]
private ExceptionManager myExceptionManager;
    [CanBeNullAttribute]
private ITaskHost myTaskHost;
    [CanBeNullAttribute]
private Lifetime myLifetime;
    private bool myReportIrrelevantExceptions;
    [NotNullAttribute]
private JetDispatcher myDispatcher;
    [NotNullAttribute]
private IEnumerable`1<IExceptionReportDataProvider> myExceptionReportDataProviders;
    [CompilerGeneratedAttribute]
private IExceptionReportService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskExecutor <TaskExecutor>k__BackingField;
    [NotNullAttribute]
public IExceptionReportService Service { get; private set; }
    [NotNullAttribute]
public ITaskExecutor TaskExecutor { get; private set; }
    [CanBeNullAttribute]
private IExceptionReportStrategy CurrentStrategy { get; }
    public ExceptionManager ExceptionManager { get; }
    public ExceptionReporting(IExceptionReportService exceptionReportService, ITaskExecutor taskexecutor, IEnumerable`1<IExceptionReportDataProvider> exceptionReportDataProviders, ExceptionManager exceptionManager, Lifetime lifetime, ITaskHost taskHost, IExceptionReportStrategy defaultStrategy, bool reportIrrelevantExceptions);
    [CompilerGeneratedAttribute]
public IExceptionReportService get_Service();
    [CompilerGeneratedAttribute]
private void set_Service(IExceptionReportService value);
    [CompilerGeneratedAttribute]
public ITaskExecutor get_TaskExecutor();
    [CompilerGeneratedAttribute]
private void set_TaskExecutor(ITaskExecutor value);
    public IDisposable SetStrategy(IExceptionReportStrategy strategy);
    private IExceptionReportStrategy get_CurrentStrategy();
    public ExceptionManager get_ExceptionManager();
    public bool IsRelevantException(Exception ex);
    public bool IsRelevantStackTrace(string stackTraceString);
    private bool IsRelevant(string text, string companyName, string productName);
    public void Process(Exception exception);
    private void ProcessExceptionInternal(Exception exception);
    private void CollectExceptionData(Exception exception);
    [NotNullAttribute]
public IDisposable AttachToLogger();
}
public class JetBrains.Application.ExceptionReport.ExceptionStackFrame : object {
    [CompilerGeneratedAttribute]
private string <FullyQualifiedTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnonymous>k__BackingField;
    public string FullyQualifiedTypeName { get; public set; }
    public string MethodName { get; public set; }
    public string Signature { get; public set; }
    public int Index { get; public set; }
    public int Id { get; public set; }
    public bool IsAnonymous { get; private set; }
    public ExceptionStackFrame(int id, string fullyQualifiedTypeName, string methodName, string signature, int index, bool isAnonymous);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedTypeName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public bool get_IsAnonymous();
    [CompilerGeneratedAttribute]
private void set_IsAnonymous(bool value);
    public string GetFrameType();
    public sealed virtual bool Equals(ExceptionStackFrame stackFrame);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class JetBrains.Application.ExceptionReport.ExceptionStackTrace : object {
    private FastIntDiffProvider myProvider;
    private IWeightedSimilarityProvider mySimilarityProvider;
    [CompilerGeneratedAttribute]
private List`1<ExceptionStackFrame> <Frames>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <FrameIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExceptionClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExceptionMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Int32[]> <ExceptionMessagesRaw>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<char, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public List`1<ExceptionStackFrame> Frames { get; public set; }
    public Int32[] FrameIds { get; public set; }
    public List`1<string> ExceptionClasses { get; public set; }
    protected List`1<string> ExceptionMessages { get; protected set; }
    protected List`1<Int32[]> ExceptionMessagesRaw { get; protected set; }
    [CompilerGeneratedAttribute]
public List`1<ExceptionStackFrame> get_Frames();
    [CompilerGeneratedAttribute]
public void set_Frames(List`1<ExceptionStackFrame> value);
    [CompilerGeneratedAttribute]
public Int32[] get_FrameIds();
    [CompilerGeneratedAttribute]
public void set_FrameIds(Int32[] value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExceptionClasses();
    [CompilerGeneratedAttribute]
public void set_ExceptionClasses(List`1<string> value);
    [CompilerGeneratedAttribute]
protected List`1<string> get_ExceptionMessages();
    [CompilerGeneratedAttribute]
protected void set_ExceptionMessages(List`1<string> value);
    [CompilerGeneratedAttribute]
protected List`1<Int32[]> get_ExceptionMessagesRaw();
    [CompilerGeneratedAttribute]
protected void set_ExceptionMessagesRaw(List`1<Int32[]> value);
    public void AddExceptionMessage(string message);
    public int ExceptionMessagesCount();
    public sealed virtual bool Equals(ExceptionStackTrace other);
    private bool CheckStackTraceEquality(ExceptionStackTrace other);
    private bool CheckMessageEquality(ExceptionStackTrace other);
    public static double GetSimilarity(IList`1<DiffFragment> fragments, int oldLength, int newLength, IWeightedSimilarityProvider similarityProvider);
    [CompilerGeneratedAttribute]
private static int <AddExceptionMessage>b__0(char ch);
}
public class JetBrains.Application.ExceptionReport.ExceptionStackTraceCache : object {
    private Dictionary`2<PersistableExceptionData, ExceptionStackTrace> myCache;
    private JetHashSet`1<ExceptionStackFrame> myFrameIndex;
    private int myCurrentId;
    [CompilerGeneratedAttribute]
private static Comparison`1<PersistableExceptionData> CS$<>9__CachedAnonymousMethodDelegatee;
    public ExceptionStackTraceCache(Lifetime lifetime, ExceptionManager exceptionManager);
    public sealed virtual void Dispose();
    public ExceptionStackFrame GetStackFrame(string fqtn, string method, string parameters, int index, bool isAnonymous);
    public ExceptionStackTrace GetStackTrace(PersistableExceptionData data);
    public void RemoveCachedStackTrace(PersistableExceptionData data);
    private void Cleanup();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(AddRemoveEventArgs`1<ExceptionData> args);
    [CompilerGeneratedAttribute]
private static int <Cleanup>b__d(PersistableExceptionData x, PersistableExceptionData y);
}
public static class JetBrains.Application.ExceptionReport.ExceptionStackTraceParser : object {
    private static string NEW_EXCEPTION_START;
    private static Regex ourExceptionClassesRegex;
    private static Regex ourExceptionMessagesRegex;
    private static Regex ourAnonymousFQTNRegex;
    private static Regex ourAnonymousMethodNameRegex;
    private static Regex ourAnonymousConstructorRegex;
    private static Regex ourNewExceptionStartRegex;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionStackFrame, int> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionStackFrame, int> CS$<>9__CachedAnonymousMethodDelegate9;
    private static ExceptionStackTraceParser();
    public static ExceptionStackTrace Parse(string text, bool needExceptionClasses, bool needExceptionMessages, ExceptionStackTraceCache exceptionStackTraceCache);
    private static void ParseExceptionNew(string text, ExceptionStackTrace stackTrace, bool needExceptionMessages, ExceptionStackTraceCache cache);
    private static void ParseExceptionOld(string text, ExceptionStackTrace stackTrace, ExceptionStackTraceCache cache);
    [CanBeNullAttribute]
public static ExceptionStackFrame[] Parse(string text);
    private static string DumpParameters(CompositeNode list);
    private static string MakeTypeName(IdentifierNode identifierNode);
    [CompilerGeneratedAttribute]
private static int <ParseExceptionNew>b__1(ExceptionStackFrame f);
    [CompilerGeneratedAttribute]
private static int <ParseExceptionOld>b__8(ExceptionStackFrame f);
}
public abstract class JetBrains.Application.ExceptionReport.ExceptionStorageLocator : object {
    protected static string ExceptionStorage;
    public bool StoresExceptions { get; }
    public virtual bool get_StoresExceptions();
    public abstract virtual FileSystemPath GetStorageLocation();
}
public enum JetBrains.Application.ExceptionReport.ExceptionSubmissionAction : Enum {
    public int value__;
    public static ExceptionSubmissionAction NewIssue;
    public static ExceptionSubmissionAction Comment;
}
public class JetBrains.Application.ExceptionReport.ExceptionSubmissionResult : object {
    [CompilerGeneratedAttribute]
private string <IssueId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IssueUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionSubmissionStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionSubmissionAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <WhenSubmitted>k__BackingField;
    public string IssueId { get; private set; }
    public Uri IssueUri { get; private set; }
    public string Message { get; public set; }
    public ExceptionSubmissionStatus Status { get; private set; }
    public ExceptionSubmissionAction Action { get; private set; }
    public DateTime WhenSubmitted { get; private set; }
    [CompilerGeneratedAttribute]
public string get_IssueId();
    [CompilerGeneratedAttribute]
private void set_IssueId(string value);
    [CompilerGeneratedAttribute]
public Uri get_IssueUri();
    [CompilerGeneratedAttribute]
private void set_IssueUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public ExceptionSubmissionStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ExceptionSubmissionStatus value);
    [CompilerGeneratedAttribute]
public ExceptionSubmissionAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(ExceptionSubmissionAction value);
    [CompilerGeneratedAttribute]
public DateTime get_WhenSubmitted();
    [CompilerGeneratedAttribute]
private void set_WhenSubmitted(DateTime value);
    public static ExceptionSubmissionResult CreateSuccess(string issueId, string message, ExceptionSubmissionAction action, Uri uri);
    public static ExceptionSubmissionResult CreateLoginProblem(string message);
    public static ExceptionSubmissionResult CreateConnectionProblem(string message);
    public static ExceptionSubmissionResult CreateContentProblem(string message);
}
public enum JetBrains.Application.ExceptionReport.ExceptionSubmissionStatus : Enum {
    public int value__;
    public static ExceptionSubmissionStatus Success;
    public static ExceptionSubmissionStatus LoginProblem;
    public static ExceptionSubmissionStatus ConnectionProblem;
    public static ExceptionSubmissionStatus ContentProblem;
}
public abstract class JetBrains.Application.ExceptionReport.ExceptionSubmitterBase : object {
    protected IIssueTracker myIssueTracker;
    [CanBeNullAttribute]
protected IThreading myThreading;
    protected ExceptionSubmitterBase(IIssueTracker issueTracker, IThreading theading);
    protected abstract virtual void OnBeforeExceptionsSubmitted(ExceptionData[] exceptions, string description);
    protected virtual void OnAfterExceptionsSubmitted(ExceptionData[] exceptions, Action`1<ExceptionData[]> afterExceptionsSubmitted);
    protected abstract virtual void SubmitExceptionsInternal(ExceptionData[] exceptions, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, LoginInformation loginInformation, IProgressIndicator progressIndicator);
    protected abstract virtual IProgressIndicator CreateProgressIndicator(int workItemCount);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionSubmitter.SubmitException(ExceptionData[] exceptions, string description, bool submitPrivately, bool attachSensitiveData, IWebProxy proxy, LoginInformation loginInformation, ICollection`1<FileSystemPath> filesToAttach, Action`1<ExceptionData[]> afterExceptionsSubmitted);
}
internal class JetBrains.Application.ExceptionReport.FastIntDiffProvider : object {
    public double GetSimilarityFast(Int32[] reportFrames, Int32[] problemFrames, IWeightedSimilarityProvider similarityProvider);
    private static void LCSInt(DiffDataInt reportData, int lowerReportData, int upperReportData, DiffDataInt problemData, int lowerProblemData, int upperProblemData, Int32[] downVector, Int32[] upVector);
    private static SMSRD SMSInt(DiffDataInt reportData, int lowerReportData, int upperReportData, DiffDataInt problemData, int lowerProblemData, int upperProblemData, Int32[] downVector, Int32[] upVector);
    private double CalculateSimilarity(DiffDataInt dataA, DiffDataInt dataB, IWeightedSimilarityProvider similarityProvider);
}
public interface JetBrains.Application.ExceptionReport.IExceptionReportDataProvider {
    public abstract virtual void ProvideExceptionData(Exception ex);
}
public interface JetBrains.Application.ExceptionReport.IExceptionReportService {
    public abstract virtual void Log(ExceptionData exception);
    public abstract virtual void Notify(ExceptionData exception);
    public abstract virtual void RequireAction(ExceptionData exception);
}
public interface JetBrains.Application.ExceptionReport.IExceptionReportStrategy {
    public abstract virtual void Process(ExceptionData exception, IExceptionReportService service, ITaskExecutor taskExecutor);
}
public interface JetBrains.Application.ExceptionReport.IExceptionStorageBehavior {
    public bool StoreExceptions { get; }
    public abstract virtual bool get_StoreExceptions();
}
public interface JetBrains.Application.ExceptionReport.IExceptionSubmitter {
    public abstract virtual void SubmitException(ExceptionData[] exceptions, string description, bool submitPrivately, bool attachSensitiveData, IWebProxy proxy, LoginInformation loginInformation, ICollection`1<FileSystemPath> filesToAttach, Action`1<ExceptionData[]> afterExeptionsSubmitted);
}
public interface JetBrains.Application.ExceptionReport.IIssueTracker {
    unknown bool IsInternal {public set; }
    public abstract virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public abstract virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator);
    public abstract virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    public abstract virtual Nullable`1<LoginInformation> Register();
    public abstract virtual CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    public abstract virtual Uri GetUrlForAttachmentsUpload();
    public abstract virtual void set_IsInternal(bool value);
}
[ShellComponentAttribute]
public class JetBrains.Application.ExceptionReport.IsModeReportExceptionsComponent : object {
    private Lazy`1<IProperty`1<bool>> myIsShowingExceptionsToUser;
    public static bool IsModeReportExceptionsCore;
    public IProperty`1<bool> IsShellStartedInInternalMode;
    [CompilerGeneratedAttribute]
private static Func`2<IExceptionReportingApplicationTrait, Type> CS$<>9__CachedAnonymousMethodDelegate4;
    public IProperty`1<bool> IsShowingExceptionsToUser { get; }
    public IsModeReportExceptionsComponent(Lifetime lifetime, IHostProductInfo hostproduct, ProductConfigurations configs, IEnumerable`1<IExceptionReportingApplicationTrait> enumExceptionReportingApplicationTraits, ILogger logger);
    private static IsModeReportExceptionsComponent();
    public static bool GetBasedOnAssembly(Func`1<Assembly> λGetAssembly, string sAssemblyHint, ILogger logger);
    public IProperty`1<bool> get_IsShowingExceptionsToUser();
    [CompilerGeneratedAttribute]
private static Type <.ctor>b__0(IExceptionReportingApplicationTrait o);
}
public interface JetBrains.Application.ExceptionReport.ISolutionLeakDataProvider {
    public abstract virtual IEnumerable`1<Pair`2<string, object>> GetData();
}
public class JetBrains.Application.ExceptionReport.LoginInformation : ValueType {
    private string myUserName;
    private string myPassword;
    [CompilerGeneratedAttribute]
private bool <SubmitAnonymously>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EMail>k__BackingField;
    public bool SubmitAnonymously { get; public set; }
    [NotNullAttribute]
public string UserName { get; public set; }
    [NotNullAttribute]
public string Password { get; public set; }
    [CanBeNullAttribute]
public string EMail { get; public set; }
    public bool IsEmpty { get; }
    [CompilerGeneratedAttribute]
public bool get_SubmitAnonymously();
    [CompilerGeneratedAttribute]
public void set_SubmitAnonymously(bool value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_EMail();
    [CompilerGeneratedAttribute]
public void set_EMail(string value);
    public bool get_IsEmpty();
}
public class JetBrains.Application.ExceptionReport.ManagedThreadNameExceptionReportDataProvider : object {
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
}
public class JetBrains.Application.ExceptionReport.MemoryLeakException : Exception {
    public MemoryLeakException(string message);
}
public class JetBrains.Application.ExceptionReport.NullExceptionStorageLocator : ExceptionStorageLocator {
    public bool StoresExceptions { get; }
    public virtual bool get_StoresExceptions();
    public virtual FileSystemPath GetStorageLocation();
}
public class JetBrains.Application.ExceptionReport.PersistableExceptionData : object {
    [NotNullAttribute]
protected string myHash;
    public static string ExternalDataKey;
    [CompilerGeneratedAttribute]
private DateTime <WhenLastHappened>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfTimesHappened>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionSubmissionResult <ServerAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PersistedFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private JetSemanticVersion <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionText <RenderedException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private EditedExceptionText <EditedText>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, IList`1<object>> <DataFromMatchedExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SensitiveData>k__BackingField;
    public DateTime WhenLastHappened { get; protected set; }
    public int NumberOfTimesHappened { get; protected set; }
    public string Status { get; public set; }
    public ExceptionSubmissionResult ServerAction { get; protected set; }
    public string PersistedFileName { get; public set; }
    [CanBeNullAttribute]
public JetSemanticVersion ProductVersion { get; protected set; }
    public ExceptionText RenderedException { get; protected set; }
    public string StackTrace { get; protected set; }
    public string Message { get; public set; }
    public IDictionary Data { get; protected set; }
    public EditedExceptionText EditedText { get; public set; }
    public IDictionary`2<object, IList`1<object>> DataFromMatchedExceptions { get; protected set; }
    public Type ExceptionType { get; protected set; }
    public string Hash { get; }
    public string Summary { get; protected set; }
    public string SensitiveData { get; protected set; }
    public string FullStacktrace { get; }
    public string FullSummary { get; }
    public string HeaderText { get; }
    public string TechnicalInformation { get; }
    public PersistableExceptionData(JetSemanticVersion productVersion, Nullable`1<DateTime> whenHappened);
    public PersistableExceptionData(Exception exception, JetSemanticVersion productVersion, Nullable`1<DateTime> whenHappened);
    public PersistableExceptionData(ExceptionData exceptionData);
    private static PersistableExceptionData();
    [CompilerGeneratedAttribute]
public DateTime get_WhenLastHappened();
    [CompilerGeneratedAttribute]
protected void set_WhenLastHappened(DateTime value);
    [CompilerGeneratedAttribute]
public int get_NumberOfTimesHappened();
    [CompilerGeneratedAttribute]
protected void set_NumberOfTimesHappened(int value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public ExceptionSubmissionResult get_ServerAction();
    [CompilerGeneratedAttribute]
protected void set_ServerAction(ExceptionSubmissionResult value);
    [CompilerGeneratedAttribute]
public string get_PersistedFileName();
    [CompilerGeneratedAttribute]
public void set_PersistedFileName(string value);
    [CompilerGeneratedAttribute]
public JetSemanticVersion get_ProductVersion();
    [CompilerGeneratedAttribute]
protected void set_ProductVersion(JetSemanticVersion value);
    [CompilerGeneratedAttribute]
public ExceptionText get_RenderedException();
    [CompilerGeneratedAttribute]
protected void set_RenderedException(ExceptionText value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
protected void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IDictionary get_Data();
    [CompilerGeneratedAttribute]
protected void set_Data(IDictionary value);
    [CompilerGeneratedAttribute]
public EditedExceptionText get_EditedText();
    [CompilerGeneratedAttribute]
public void set_EditedText(EditedExceptionText value);
    [CompilerGeneratedAttribute]
public IDictionary`2<object, IList`1<object>> get_DataFromMatchedExceptions();
    [CompilerGeneratedAttribute]
protected void set_DataFromMatchedExceptions(IDictionary`2<object, IList`1<object>> value);
    [CompilerGeneratedAttribute]
public Type get_ExceptionType();
    [CompilerGeneratedAttribute]
protected void set_ExceptionType(Type value);
    public string get_Hash();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
protected void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_SensitiveData();
    [CompilerGeneratedAttribute]
protected void set_SensitiveData(string value);
    public string get_FullStacktrace();
    public string get_FullSummary();
    public string get_HeaderText();
    public string get_TechnicalInformation();
    public static void AddExternalDataLine(Exception ex, string line);
    public ExceptionData ToExceptionData(Lifetime lifetime);
}
public class JetBrains.Application.ExceptionReport.ProductExceptionStorageLocator : ExceptionStorageLocator {
    private FileSystemPath myStoragePath;
    [CanBeNullAttribute]
private IProperty`1<bool> myStoreExceptions;
    public bool StoresExceptions { get; }
    public ProductExceptionStorageLocator(AnyProductSettingsLocation settingsLocation, IProperty`1<bool> storeExceptions);
    public virtual FileSystemPath GetStorageLocation();
    public virtual bool get_StoresExceptions();
}
public class JetBrains.Application.ExceptionReport.ReportAllExceptionReportStrategy : object {
    public sealed virtual void Process(ExceptionData exception, IExceptionReportService service, ITaskExecutor taskExecutor);
}
public class JetBrains.Application.ExceptionReport.RuntimeVersionExceptionReportDataProvider : object {
    public sealed virtual void ProvideExceptionData(Exception ex);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.ExceptionReport.SccRevisionExceptionReportDataProviderEnv : object {
    private ApplicationPackages myApppkgs;
    private JetEnvironment myEnvironment;
    private ILogger myLogger;
    private IEnumerable`1<SubplatformOriginalRevision> myRevs;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageArtifact, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5a`2<SubplatformName, string>, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, <>f__AnonymousType5a`2<SubplatformName, string>>, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5a`2<SubplatformName, string>, string> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType5a`2<SubplatformName, string>, string> CS$<>9__CachedAnonymousMethodDelegate11;
    public SccRevisionExceptionReportDataProviderEnv(IEnumerable`1<SubplatformOriginalRevision> revs, JetEnvironment environment, ApplicationPackages apppkgs, ILogger logger);
    [NotNullAttribute]
public static string RenderPackageRevisions(ICollection`1<ApplicationPackageArtifact> packages, IEnumerable`1<SubplatformOriginalRevision> revs);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
    [CompilerGeneratedAttribute]
private static string <RenderPackageRevisions>b__0(ApplicationPackageArtifact pkg);
    [CompilerGeneratedAttribute]
private static string <RenderPackageRevisions>b__4(<>f__AnonymousType5a`2<SubplatformName, string> tuple);
    [CompilerGeneratedAttribute]
private static string <RenderPackageRevisions>b__5(IGrouping`2<string, <>f__AnonymousType5a`2<SubplatformName, string>> g);
    [CompilerGeneratedAttribute]
private static string <RenderPackageRevisions>b__6(<>f__AnonymousType5a`2<SubplatformName, string> t);
    [CompilerGeneratedAttribute]
private static string <RenderPackageRevisions>b__7(<>f__AnonymousType5a`2<SubplatformName, string> t);
    [CompilerGeneratedAttribute]
private ApplicationPackageArtifact <JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData>b__12(ZonePart zone);
}
[ShellComponentAttribute]
public class JetBrains.Application.ExceptionReport.SccRevisionExceptionReportDataProviderShell : object {
    private ILogger myLogger;
    private IEnumerable`1<SubplatformOriginalRevision> myRevs;
    private IEnumerable`1<ISubProductInfo> mySubproducts;
    [CompilerGeneratedAttribute]
private static Func`2<ISubProductInfo, ApplicationPackageArtifact> CS$<>9__CachedAnonymousMethodDelegate1;
    public SccRevisionExceptionReportDataProviderShell(IEnumerable`1<SubplatformOriginalRevision> revs, IEnumerable`1<ISubProductInfo> subproducts, ILogger logger);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
    [CompilerGeneratedAttribute]
private static ApplicationPackageArtifact <JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData>b__0(ISubProductInfo sub);
}
public class JetBrains.Application.ExceptionReport.StoringExceptionReportService : object {
    [NotNullAttribute]
private CollectionEvents`1<ExceptionData> myExceptions;
    [NotNullAttribute]
public ICollectionEvents`1<ExceptionData> Exceptions { get; }
    public ICollectionEvents`1<ExceptionData> get_Exceptions();
    private void OnException(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Log(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Notify(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.RequireAction(ExceptionData exception);
}
public class JetBrains.Application.ExceptionReport.SubmitNothingExceptionReportStrategy : object {
    public sealed virtual void Process(ExceptionData exception, IExceptionReportService service, ITaskExecutor taskExecutor);
}
public class JetBrains.Application.ExceptionReport.TempFolderExceptionStorageLocator : ExceptionStorageLocator {
    private FileSystemPath myStoragePath;
    public TempFolderExceptionStorageLocator(string folderName);
    public virtual FileSystemPath GetStorageLocation();
}
public class JetBrains.Application.ExceptionReport.UIProgressIndicatorWrapper : object {
    private IProgressIndicator myProgressIndicator;
    private IThreading myThreading;
    unknown string CurrentItemText {public set; }
    public bool IsCanceled { get; }
    public string TaskName { get; public set; }
    public UIProgressIndicatorWrapper(IProgressIndicator progressIndicator, IThreading threading);
    public sealed virtual void Dispose();
    public sealed virtual void set_CurrentItemText(string value);
    public sealed virtual bool get_IsCanceled();
    public sealed virtual string get_TaskName();
    public sealed virtual void set_TaskName(string value);
    public sealed virtual void Advance(double units);
    public sealed virtual void Start(int totalWorkUnits);
    public sealed virtual void Stop();
    [CompilerGeneratedAttribute]
private void <Stop>b__c();
}
[ExtensionAttribute]
public static class JetBrains.Application.Extensions.AssemblyNameEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static AssemblyInfo GetAssemblyInfo(FileSystemPath fileSystemPath, AssemblyExistsService assemblyExistsService);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static AssemblyNameInfo GetAssemblyNameInfo(FileSystemPath fileSystemPath, AssemblyExistsService assemblyExistsService);
}
[ExtensionAttribute]
public static class JetBrains.Application.Extensions.DataFlowEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable AssertUiThreadFiring(ISignal`1<TValue> signal, IThreading getComponent);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable AssertUiThreadModifications(ICollectionEvents`1<T> collection, IThreading getComponent);
    [NotNullAttribute]
[ExtensionAttribute]
public static IDisposable AssertUiThreadModifications(IProperty`1<TValue> property, IThreading getComponent);
    [ExtensionAttribute]
public static void BeginSetGuarded(IProperty`1<TValue> property, TValue value, IThreading threading, object cookie);
    [ObsoleteAttribute("Use other overloads.")]
[NotNullAttribute]
[ExtensionAttribute]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, IThreading threading);
    [NotNullAttribute]
[ExtensionAttribute]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, Lifetime lifetime, ReentrancyGuard guard);
    [NotNullAttribute]
[ExtensionAttribute]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, Lifetime lifetime, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, ReentrancyGuard guard);
    [NotNullAttribute]
[ExtensionAttribute]
public static IProperty`1<TValue> EnsureGuarded(IProperty`1<TValue> property, Lifetime lifetime, ReentrancyGuard guard);
    [NotNullAttribute]
[ExtensionAttribute]
public static Signal`1<TValue> EnsureGuarded(Signal`1<TValue> signal, IThreading threading);
    [NotNullAttribute]
[ExtensionAttribute]
public static SimpleSignal EnsureGuarded(SimpleSignal signal, IThreading threading);
    [NotNullAttribute]
[ExtensionAttribute]
public static CollectionEvents`1<TValue> EnsureGuarded(CollectionEvents`1<TValue> coll, ReentrancyGuard guard);
    [NotNullAttribute]
[ExtensionAttribute]
public static DictionaryEvents`2<TKey, TValue> EnsureGuarded(DictionaryEvents`2<TKey, TValue> thіs, ReentrancyGuard guard);
    [NotNullAttribute]
[ExtensionAttribute]
public static Property`1<TValue> EnsurePrimaryThread(Property`1<TValue> property, IThreading threading);
    [ExtensionAttribute]
public static void FlowIntoGuarded_NoReplay(IProperty`1<TValue> source, Lifetime lifetime, IProperty`1<TValue> target, ReentrancyGuard guard, object cookie, bool bPushInitialValuesImmediately);
    [ExtensionAttribute]
public static void FlowIntoGuarded_NoReplay(ISignal`1<TValue> source, Lifetime lifetime, ISignal`1<TValue> target, ReentrancyGuard guard, object cookie);
    [ObsoleteAttribute("This method is not used in real code, will probably be removed.")]
[NotNullAttribute]
[ExtensionAttribute]
public static IDisposable FlowIntoGuarded_Replay(ICollectionEvents`1<TValue> source, ICollectionEvents`1<TValue> target, object cookie, bool bPushInitialValuesImmediately, UnguardedCallbackMerger merger, IThreading threading);
    [NotNullAttribute]
[ExtensionAttribute]
[ObsoleteAttribute("This method is not used in real code, will probably be removed.")]
public static IDisposable FlowIntoGuarded_Replay(ICollectionEvents`1<TValue> source, ICollectionEvents`1<TValue> target, object cookie, bool bPushInitialValuesImmediately, IThreading invocator);
    [ExtensionAttribute]
[NotNullAttribute]
private static IDisposable FlowIntoGuardedWithReplayCore(IReadonlyCollectionEvents`1<TValue> source, ICollectionEvents`1<TValue> target, object cookie, bool bPushInitialValuesImmediately, Action`1<Action> FExecuteOrQueue, IThreading threading);
}
public static class JetBrains.Application.Extensions.ExtensionManagerAction : object {
    public static string ActionID;
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.ExtensionManagerInstallNotification : object {
    private Lifetime myLifetime;
    private IUIApplicationSimple myUI;
    private IApplicationRestart myApplicationRestart;
    private UserNotifications myUserNotifications;
    public ExtensionManagerInstallNotification(Lifetime lifetime, IUIApplicationSimple ui, IApplicationRestart applicationRestart, UserNotifications userNotifications);
    public void RequestRestart();
    protected virtual void RequestRestart(LifetimeDefinition notificationLifetime);
    protected void Restart();
    [CompilerGeneratedAttribute]
private void <RequestRestart>b__0(INotification notification);
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.ExtensionManagerProviderSettings : object {
    private IProperty`1<Nullable`1<bool>> myIncludePrereleasePackages;
    public bool IncludePrereleasePackages { get; public set; }
    public ExtensionManagerProviderSettings(Lifetime lifetime, ISettingsStore settingsStore);
    public sealed virtual bool get_IncludePrereleasePackages();
    public sealed virtual void set_IncludePrereleasePackages(bool value);
    public static bool GetIncludePrereleasePackagesValue(Nullable`1<bool> includePrereleasePackages);
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.ExtensionsSettingsLoader : object {
    private static string SettingsFolderName;
    private Lifetime myLifetime;
    private ExtensionsSettingsMountPointProvider myExtensionsSettingsMountPointProvider;
    private IThreading myThreading;
    private IFileSystemTracker myFileSystemTracker;
    private IFileSettingsStorageBehavior myBehaviour;
    private UserInjectedSettingsLayers myUserInjectedSettingsLayers;
    private InternKeyPathComponent myInterned;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate4;
    public ExtensionsSettingsLoader(Lifetime lifetime, ApplicationPackagesFiles applicationPackagesFiles, ExtensionsSettingsMountPointProvider extensionsSettingsMountPointProvider, IThreading threading, IFileSystemTracker fileSystemTracker, IFileSettingsStorageBehavior behaviour, UserInjectedSettingsLayers userInjectedSettingsLayers, InternKeyPathComponent interned);
    private void LoadSettingsFile(string extensionId, FileSystemPath path);
    private void ExecuteOrQueue(Lifetime lifetime, Action action, string name);
    private void AddSettingsFile(Lifetime lifetime, string extensionId, FileSystemPath path);
    [CompilerGeneratedAttribute]
private static void <AddSettingsFile>b__3();
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.ExtensionsSettingsMountPointProvider : object {
    private IFileSettingsStorageBehavior myBehaviour;
    private Lazy`1<ISettingsStorageMountPoint> myExtensionsMountPoint;
    private IFileSystemTracker myFileSystemTracker;
    private Lazy`1<Identity> myId;
    private Lifetime myLifetime;
    private CollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private IThreading myThreading;
    private InternKeyPathComponent myInterned;
    private ProductSettingsLocation myProductSettingsLocation;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Icon>k__BackingField;
    public IProperty`1<IconId> Icon { get; private set; }
    public Identity Id { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    public ExtensionsSettingsMountPointProvider(Lifetime lifetime, IThreading threading, IFileSystemTracker fileSystemTracker, IFileSettingsStorageBehavior behaviour, InternKeyPathComponent interned, ProductSettingsLocation productSettingsLocation);
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IProperty`1<IconId> value);
    public Identity get_Id();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    private ISettingsStorageMountPoint CreateMountPoint();
    private Identity GetHostId();
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.ExtensionsUpdatesChecker : object {
    private IPackageRepositoryFactory myPackageRepositoryFactory;
    private IProviderSettings myProviderSettings;
    private ILogger myLogger;
    private PluginsRepository myPluginsRepository;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, IPackageName> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, IPackage> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, UpdateInfo> CS$<>9__CachedAnonymousMethodDelegate8;
    public ExtensionsUpdatesChecker(Lifetime lifetime, IPackageRepositoryFactory packageRepositoryFactory, IProviderSettings providerSettings, IApplicationHost applicationHost, ILogger logger);
    public sealed virtual IList`1<UpdateInfo> GetUpdates();
    public sealed virtual bool GetUpdateNotificationsAllowed();
    private static ProductInfo GetProductInfo(IPackageMetadata package);
    [CompilerGeneratedAttribute]
private static IPackageName <GetUpdates>b__3(IPackage _);
    [CompilerGeneratedAttribute]
private static IPackage <GetUpdates>b__4(IPackage _);
    [CompilerGeneratedAttribute]
private static UpdateInfo <GetUpdates>b__5(IPackage _);
}
public interface JetBrains.Application.Extensions.IProviderSettings {
    public bool IncludePrereleasePackages { get; public set; }
    public abstract virtual bool get_IncludePrereleasePackages();
    public abstract virtual void set_IncludePrereleasePackages(bool value);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Extensions.JetPackageRepositoryFactoryEnvironmentComponent : JetPackageRepositoryFactory {
    private string myUserAgent;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, KeyValuePair`2<string, string>, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<StringBuilder, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate3;
    public JetPackageRepositoryFactoryEnvironmentComponent(IProductInfo product, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetParameters(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public virtual IPackageRepository CreateRepository(string packageSource);
    [CompilerGeneratedAttribute]
private static StringBuilder <.ctor>b__0(StringBuilder builder, KeyValuePair`2<string, string> pair);
    [CompilerGeneratedAttribute]
private static StringBuilder <.ctor>b__1(StringBuilder builder);
    [CompilerGeneratedAttribute]
private void <CreateRepository>b__a(object sender, WebRequestEventArgs e);
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.JetPackageRepositoryFactoryShellComponent : JetPackageRepositoryFactoryEnvironmentComponent {
    private WebProxySettingsReader myProxySettingsReader;
    [CompilerGeneratedAttribute]
private static Func`2<ISubProductInfo, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate1;
    public JetPackageRepositoryFactoryShellComponent(IProductInfo product, SubProducts subProducts, WebProxySettingsReader proxySettingsReader);
    public virtual IPackageRepository CreateRepository(string packageSource);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <.ctor>b__0(ISubProductInfo subProduct);
    [CompilerGeneratedAttribute]
private void <CreateRepository>b__2(object sender, WebRequestEventArgs eventArgs);
}
public class JetBrains.Application.Extensions.JetPriorityPackageRepository : PackageRepositoryBase {
    private IPackageRepository _primaryRepository;
    private IPackageRepository _secondaryRepository;
    public string Source { get; }
    public bool SupportsPrereleasePackages { get; }
    public JetPriorityPackageRepository(IPackageRepository primaryRepository, IPackageRepository secondaryRepository);
    public virtual string get_Source();
    public virtual IQueryable`1<IPackage> GetPackages();
    public virtual bool get_SupportsPrereleasePackages();
    public sealed virtual bool Exists(string packageId, SemanticVersion version);
    public sealed virtual IPackage FindPackage(string packageId, SemanticVersion version);
    public sealed virtual IEnumerable`1<IPackage> FindPackagesById(string packageId);
    public sealed virtual IDisposable StartOperation(string operation, string mainPackageId, string mainPackageVersion);
    public virtual void AddPackage(IPackage package);
    public virtual void RemovePackage(IPackage package);
    public sealed virtual IQueryable`1<IPackage> Search(string searchTerm, IEnumerable`1<string> targetFrameworks, bool allowPrereleaseVersions);
    public sealed virtual IEnumerable`1<IPackage> GetUpdates(IEnumerable`1<IPackageName> packages, bool includePrerelease, bool includeAllVersions, IEnumerable`1<FrameworkName> targetFrameworks, IEnumerable`1<IVersionSpec> versionConstraints);
    public sealed virtual IPackage ResolveDependency(PackageDependency dependency, IPackageConstraintProvider constraintProvider, bool allowPrereleaseVersions, bool preferListedPackages, DependencyVersion dependencyVersion);
}
public class JetBrains.Application.Extensions.NullFileSystem : object {
    private static NullFileSystem _instance;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public static IFileSystem Instance { get; }
    public ILogger Logger { get; public set; }
    public string Root { get; }
    private static NullFileSystem();
    public static IFileSystem get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Logger(ILogger value);
    public sealed virtual string get_Root();
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual IEnumerable`1<string> GetFiles(string path, string filter, bool recursive);
    public sealed virtual IEnumerable`1<string> GetDirectories(string path);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void DeleteFiles(IEnumerable`1<IPackageFile> files, string rootDir);
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void AddFile(string path, Stream stream);
    public sealed virtual void AddFile(string path, Action`1<Stream> writeToStream);
    public sealed virtual void AddFiles(IEnumerable`1<IPackageFile> files, string rootDir);
    public sealed virtual Stream CreateFile(string path);
    public sealed virtual Stream OpenFile(string path);
    public sealed virtual DateTimeOffset GetLastModified(string path);
    public sealed virtual DateTimeOffset GetCreated(string path);
    public sealed virtual DateTimeOffset GetLastAccessed(string path);
    public sealed virtual void MakeFileWritable(string path);
    public sealed virtual void MoveFile(string source, string destination);
}
public class JetBrains.Application.Extensions.PackageRepositoryHelperEx : object {
    public static IPackage ResolvePackage(IPackageRepository sourceRepository, IPackageRepository localRepository, IPackageConstraintProvider constraintProvider, string packageId, IVersionSpec version, bool allowPrereleaseVersions, bool allowUnlisted);
}
public class JetBrains.Application.Extensions.ReadOnlyPackageRepository : PackageRepositoryBase {
    private IEnumerable`1<IPackage> myPackages;
    public string Source { get; }
    public bool SupportsPrereleasePackages { get; }
    public ReadOnlyPackageRepository(IEnumerable`1<IPackage> packages);
    public virtual string get_Source();
    public virtual bool get_SupportsPrereleasePackages();
    public virtual IQueryable`1<IPackage> GetPackages();
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.Settings.DefaultExtensionManagerSettings : HaveDefaultSettings {
    private HostInfo myHostInfo;
    public string Name { get; }
    public DefaultExtensionManagerSettings(ILogger logger, ISettingsSchema settingsSchema, HostInfo hostInfo);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public virtual string get_Name();
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.Settings.EnvironmentExtensionSourceProvider : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IExtensionSourceProvider> <Changed>k__BackingField;
    public ISignal`1<IExtensionSourceProvider> Changed { get; protected set; }
    public EnvironmentExtensionSourceProvider(Lifetime lifetime);
    public virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public virtual void DisablePackageSource(PackageSource source);
    public virtual bool IsPackageSourceEnabled(PackageSource source);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IExtensionSourceProvider> get_Changed();
    [CompilerGeneratedAttribute]
protected void set_Changed(ISignal`1<IExtensionSourceProvider> value);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "Extension manager options")]
public class JetBrains.Application.Extensions.Settings.ExtensionManagerSettings : object {
}
public class JetBrains.Application.Extensions.Settings.ExtensionSourceProvider : object {
    private IContextBoundSettingsStore myContextBoundSettingsStore;
    private ISettingsOptimization mySettingsOptimization;
    private ILogger myLogger;
    private SettingsIndexedKey mySourceSettingsKey;
    [CompilerGeneratedAttribute]
private ISignal`1<IExtensionSourceProvider> <Changed>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, PackageSourceSettings>, PackageSourceSettings> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<PackageSourceSettings, int> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<PackageSourceSettings, PackageSource> CS$<>9__CachedAnonymousMethodDelegate7;
    public ISignal`1<IExtensionSourceProvider> Changed { get; private set; }
    public ExtensionSourceProvider(Lifetime lifetime, IContextBoundSettingsStore contextBoundSettingsStore, ISettingsOptimization settingsOptimization, ILogger logger);
    public sealed virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public sealed virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public sealed virtual void DisablePackageSource(PackageSource source);
    public sealed virtual bool IsPackageSourceEnabled(PackageSource source);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IExtensionSourceProvider> get_Changed();
    [CompilerGeneratedAttribute]
private void set_Changed(ISignal`1<IExtensionSourceProvider> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static PackageSourceSettings <LoadPackageSources>b__2(Pair`2<string, PackageSourceSettings> _);
    [CompilerGeneratedAttribute]
private static int <LoadPackageSources>b__3(PackageSourceSettings _);
    [CompilerGeneratedAttribute]
private static PackageSource <LoadPackageSources>b__4(PackageSourceSettings settings);
}
public interface JetBrains.Application.Extensions.Settings.IExtensionSourceProvider {
    public ISignal`1<IExtensionSourceProvider> Changed { get; }
    public abstract virtual ISignal`1<IExtensionSourceProvider> get_Changed();
}
[SettingsIndexedKeyAttribute("JetBrains.Application.Extensions.Settings.ExtensionManagerSettings", "Package sources", "System.String")]
public class JetBrains.Application.Extensions.Settings.PackageSourceSettings : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Name")]
public string Name { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Source")]
public string Source { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "IsEnabled")]
public bool IsEnabled { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Order")]
public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public PackageSource ToPackageSource();
    public sealed virtual bool Equals(PackageSourceSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellComponentAttribute]
public class JetBrains.Application.Extensions.Settings.ShellExtensionSourceProvider : EnvironmentExtensionSourceProvider {
    private ExtensionSourceProvider myExtensionSourceProvider;
    public ShellExtensionSourceProvider(Lifetime lifetime, ISettingsStore settingsStore, ISettingsOptimization settingsOptimization, ILogger logger);
    public virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public virtual void DisablePackageSource(PackageSource source);
    public virtual bool IsPackageSourceEnabled(PackageSource source);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Application.FeaturesPage.CheckableZoneItem : object {
    private Lifetime myLifetime;
    private List`1<CheckableZoneItem> myReferencedZones;
    [CompilerGeneratedAttribute]
private CheckableZone <CheckableZone>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CheckedAtStartup>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UnavailableText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GroupOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <LanguageIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <LanguageText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <AvailableVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <UnavailableVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <NeedRestartVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Visibility> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Visibility> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableZoneItem, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableZoneItem, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableZoneItem, string> CS$<>9__CachedAnonymousMethodDelegate11;
    public CheckableZone CheckableZone { get; private set; }
    public IProperty`1<bool> Enabled { get; private set; }
    public IProperty`1<bool> Checked { get; private set; }
    public IProperty`1<bool> CheckedAtStartup { get; private set; }
    public IProperty`1<string> UnavailableText { get; private set; }
    public string GroupName { get; public set; }
    public int GroupOrder { get; public set; }
    public string NameOrder { get; public set; }
    public IconId LanguageIcon { get; private set; }
    public IProperty`1<string> LanguageText { get; private set; }
    public IProperty`1<Visibility> AvailableVisibility { get; private set; }
    public IProperty`1<Visibility> UnavailableVisibility { get; private set; }
    public IProperty`1<Visibility> NeedRestartVisibility { get; private set; }
    public string Description { get; private set; }
    public CheckableZoneItem(Lifetime lifetime, CheckableZone checkableZone);
    [CompilerGeneratedAttribute]
public CheckableZone get_CheckableZone();
    [CompilerGeneratedAttribute]
private void set_CheckableZone(CheckableZone value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
private void set_Checked(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CheckedAtStartup();
    [CompilerGeneratedAttribute]
private void set_CheckedAtStartup(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UnavailableText();
    [CompilerGeneratedAttribute]
private void set_UnavailableText(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public int get_GroupOrder();
    [CompilerGeneratedAttribute]
public void set_GroupOrder(int value);
    [CompilerGeneratedAttribute]
public string get_NameOrder();
    [CompilerGeneratedAttribute]
public void set_NameOrder(string value);
    public void SetDependencies(List`1<CheckableZoneItem> referencedZones);
    private void CalculateEnabled();
    public void Save();
    [CompilerGeneratedAttribute]
public IconId get_LanguageIcon();
    [CompilerGeneratedAttribute]
private void set_LanguageIcon(IconId value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_LanguageText();
    [CompilerGeneratedAttribute]
private void set_LanguageText(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_AvailableVisibility();
    [CompilerGeneratedAttribute]
private void set_AvailableVisibility(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_UnavailableVisibility();
    [CompilerGeneratedAttribute]
private void set_UnavailableVisibility(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_NeedRestartVisibility();
    [CompilerGeneratedAttribute]
private void set_NeedRestartVisibility(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
private static Visibility <.ctor>b__0(bool enabled);
    [CompilerGeneratedAttribute]
private static Visibility <.ctor>b__1(bool enabled);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime lt1, bool ch);
    [CompilerGeneratedAttribute]
private static bool <CalculateEnabled>b__c(CheckableZoneItem x);
    [CompilerGeneratedAttribute]
private static bool <CalculateEnabled>b__d(CheckableZoneItem x);
    [CompilerGeneratedAttribute]
private static string <CalculateEnabled>b__e(CheckableZoneItem x);
}
public enum JetBrains.Application.Feedback.Reports.AttachmentUploadMethod : Enum {
    public int value__;
    public static AttachmentUploadMethod XmlRpc;
    public static AttachmentUploadMethod Ftp;
}
public class JetBrains.Application.Feedback.Reports.ExceptionAnalyzerReport : ReportBase {
    private string myProduct;
    private IExceptionHandlingService myService;
    private IContextBoundSettingsStore mySettingsStore;
    private RequestType myType;
    [CompilerGeneratedAttribute]
private static Func`2<FileAttachmentBase, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, long>, FileAttachment> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, string> CS$<>9__CachedAnonymousMethodDelegate11;
    public ExceptionAnalyzerReport(string product, RequestType type, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore);
    public virtual string Send(UserIdentificator user, IProgressIndicator progressIndicator, String[]& errors);
    [CompilerGeneratedAttribute]
private static FileSystemPath <Send>b__5(FileAttachmentBase _);
    [CompilerGeneratedAttribute]
private static FileAttachment <Send>b__8(Pair`2<string, long> pair);
    [CompilerGeneratedAttribute]
private static string <Send>b__b(XmlNode _);
}
public interface JetBrains.Application.Feedback.Reports.IReport {
    public ICollection`1<FileAttachmentBase> FileAttachments { get; }
    public abstract virtual string Send(UserIdentificator user, IProgressIndicator progressIndicator, String[]& errors);
    public abstract virtual void AttachPart(Pair`2<string, string> part);
    public abstract virtual void AttachText(string key, string value);
    public abstract virtual void AttachFile(FileAttachmentBase fileAttachment);
    public abstract virtual ICollection`1<FileAttachmentBase> get_FileAttachments();
}
public interface JetBrains.Application.Feedback.Reports.IReportFactory {
    public abstract virtual IReport CreateReport(RequestType requestType);
}
public abstract class JetBrains.Application.Feedback.Reports.ReportBase : object {
    protected HashSet`1<FileAttachmentBase> myFileAttachments;
    protected HashSet`1<TextPart> myParts;
    protected HashSet`1<TextAttachment> myTextAttachments;
    private ICollection`1<FileAttachmentBase> JetBrains.Application.Feedback.Reports.IReport.FileAttachments { get; }
    public abstract virtual string Send(UserIdentificator user, IProgressIndicator progressIndicator, String[]& errors);
    public sealed virtual void AttachPart(Pair`2<string, string> part);
    public sealed virtual void AttachText(string key, string value);
    public sealed virtual void AttachFile(FileAttachmentBase fileAttachment);
    private sealed virtual override ICollection`1<FileAttachmentBase> JetBrains.Application.Feedback.Reports.IReport.get_FileAttachments();
}
[ShellComponentAttribute]
public class JetBrains.Application.Feedback.Reports.ReportFactory : object {
    private IApplicationHost myApplicationDescriptor;
    private IExceptionHandlingService myExceptionHandlingService;
    private ISettingsStore mySettingsStore;
    public ReportFactory(IApplicationHost applicationDescriptor, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore);
    public sealed virtual IReport CreateReport(RequestType requestType);
}
public class JetBrains.Application.FileSystemTracker.DirectoryRescanner : object {
    private ILogger myLogger;
    private Func`2<FileSystemPath, bool> myIsIgnoredFolderFunc;
    private Dictionary`2<FileSystemPath, ScanCookie> myCurrentlyScanning;
    public DirectoryRescanner(Lifetime lifetime, ILogger logger, Func`2<FileSystemPath, bool> isIgnoredFolderFunc);
    public void RescanFolder(JetFileSystemWatcher watcher, Action`2<JetFileSystemWatcher, FileSystemChangeDelta> commitAction);
    private static void ScanFolderTask(ScanCookie scanCookie, ILogger logger, Func`2<FileSystemPath, bool> isIgnoredFolderFunc);
    [CanBeNullAttribute]
private static FileSystemChangeDelta ScanFolderRec(FileSystemPath directory, ScanCookie scanCookie, ILogger logger, Func`2<FileSystemPath, bool> isIgnoredFolderFunc);
    public void CancelScan(FileSystemPath dir);
    public IDictionary`2<FileSystemPath, ScanCookie> GetCurrentlyScanned();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
public class JetBrains.Application.FileSystemTracker.FileSystemChangesPathTrie : FileSystemChangesPathTrieBase`1<FileSystemEvent> {
    private ILogger myLogger;
    public FileSystemChangesPathTrie(ILogger logger);
    private static FileSystemChangeType GetChangeType(FileSystemEventType watcherChangeType);
    protected virtual FileSystemChangeDelta CreateFileSystemChangeDelta(FileSystemEvent data, IList`1<FileSystemChangeDelta> childrenDeltas, FileSystemPath newPath);
    public IList`1<FileSystemChangeDelta> GetDeltas(FileSystemPath[] roots, Func`2<FileSystemPath, bool> isIgnoredFolder);
}
public abstract class JetBrains.Application.FileSystemTracker.FileSystemChangesPathTrieBase`1 : FileSystemPathTrie`1<T> {
    private FileSystemPathInternStrategy myInternStrategy;
    protected FileSystemChangesPathTrieBase`1(FileSystemPathInternStrategy internStrategy);
    [CanBeNullAttribute]
protected FileSystemChangeDelta Convert(string newPathKey, ITrieNode<T> node, Func`2<FileSystemPath, bool> isIgnoredFolder);
    protected abstract virtual FileSystemChangeDelta CreateFileSystemChangeDelta(T data, IList`1<FileSystemChangeDelta> childrenDeltas, FileSystemPath newPath);
    protected IList`1<FileSystemChangeDelta> GetDeltas(Func`2<FileSystemPath, bool> isIgnoredFolder);
    private void ProcessDeltasFromUncOrUnixAbsEntry(TrieEntry<T> uncEntry, IList`1<FileSystemChangeDelta> result, Func`2<FileSystemPath, bool> isIgnoredFolder);
}
public class JetBrains.Application.FileSystemTracker.FileSystemScanner : object {
    private Pattern[] myIncludePatterns;
    private Pattern[] myExcludePatterns;
    private FileSystemPathTrie`1<FileSystemEntryInfo> myTrie;
    private Hashtable mySearchDirectories;
    private JetHashSet`1<FileSystemPath> myScannedPaths;
    private List`1<FileSystemPath> myRootPaths;
    public FileSystemPathTrie`1<FileSystemEntryInfo> Trie { get; }
    public FileSystemPath[] RootPaths { get; }
    public FileSystemScanner(Pattern[] includePatterns, Pattern[] excludePatterns);
    public FileSystemPathTrie`1<FileSystemEntryInfo> get_Trie();
    public FileSystemPath[] get_RootPaths();
    private bool ScanDirectory(FileSystemPath path, bool recursive);
    private bool IsPathIncluded(FileSystemPath path);
    public void Scan();
}
[FlagsAttribute]
public enum JetBrains.Application.FileSystemTracker.FileSystemTrackerDumpFlags : Enum {
    public int value__;
    public static FileSystemTrackerDumpFlags WatchersState;
    public static FileSystemTrackerDumpFlags AccumulatedChanges;
    public static FileSystemTrackerDumpFlags PendingChanges;
    public static FileSystemTrackerDumpFlags All;
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.FileSystemTracker.FileSystemTrackerImpl : object {
    private Lifetime myLifetime;
    private ViewableCollection`1<FileSystemTrackerRequestCookie> myRootsViewable;
    private ILogger myLogger;
    private object myWatchersLock;
    private CompactMap`2<FileSystemTrackerRequestCookie, int> myRequestCookieCount;
    private CompactOneToSetMap`2<Watcher, FileSystemTrackerRequestCookie> myWatcherToRequestsMap;
    protected Dictionary`2<FileSystemTrackerRequestCookie, Watcher> myRequestToWatcher;
    protected object myAccumulatedChangesLock;
    protected FileSystemChangesPathTrie myAccumulatedChanges;
    private CountingSet`1<FileSystemPath> myIgnoredFolders;
    private CountingSet`1<FileSystemPath> myDoNotListenToFolders;
    private bool myIsEnabled;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsDisposing;
    private object myPendingChangesLock;
    private List`1<FileSystemChange> myPendingChanges;
    private object myPendingFolderRescansLock;
    private List`1<JetFileSystemWatcher> myPendingFolderRescans;
    private DirectoryRescanner myDirectoryRescanner;
    private bool myIsInInternalMode;
    private IProperty`1<bool> myAutoCommitAllowed;
    private IProperty`1<bool> myAutoCommitEnabled;
    private ICollectionEvents`1<object> myAutoCommitSuppressors;
    private ISignal`1<FileSystemChange> myChangedSignal;
    private OneToListMap`2<FileSystemPath, Action`1<FileSystemChangeDelta>> myMapSinks;
    private SortedOneToListMap`2<HandlingPriority, Action`1<FileSystemChange>> myPrioritySinks;
    private CommitThread myCommitThread;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemChangeDelta, string> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Comparison`1<KeyValuePair`2<Watcher, CompactSet`1<FileSystemTrackerRequestCookie>>> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemTrackerRequestCookie, string> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemTrackerRequestCookie, bool> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemTrackerRequestCookie, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemTrackerRequestCookie, bool> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemTrackerRequestCookie, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static Func`2<Watcher, bool> CS$<>9__CachedAnonymousMethodDelegate5a;
    [CompilerGeneratedAttribute]
private static Func`2<Watcher, Pair`2<Watcher, FileSystemPath>> CS$<>9__CachedAnonymousMethodDelegate5b;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<Watcher, FileSystemPath>, bool> CS$<>9__CachedAnonymousMethodDelegate5c;
    [CompilerGeneratedAttribute]
private static NodeMergeHandler<FileSystemEvent> CS$<>9__CachedAnonymousMethodDelegate5d;
    public bool Enabled { get; public set; }
    public IProperty`1<bool> AutoCommitEnabled { get; }
    public ISignal`1<FileSystemChange> Changed { get; }
    public FileSystemTrackerImpl(Lifetime lifetime, IThreading threading, ProductConfigurations conf);
    protected virtual void SetDefaultIgnoreAndDoNotListentToFolders(Lifetime lifetime);
    private void EvaluateAutoCommitAllowed();
    private void DisposeWatchers();
    public virtual void CheckConsistency();
    public sealed virtual void IgnoreChangesInFolder(Lifetime lifetime, FileSystemPath folderPath);
    public sealed virtual void DoNotListenToTheWholeFolder(Lifetime lifetime, FileSystemPath folderPath);
    [NotNullAttribute]
private static WatcherData AdjustWatcherData(WatcherData data, FileSystemTrackerRequestCookie cookie);
    private void AdjustWatcher(Watcher watcher, FileSystemTrackerRequestCookie newRequestCookie);
    protected virtual void TryInitFileSystemWatcher(Watcher watcher);
    protected void ClearChanges();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    private void ProcessNewDirectoryRecursively(FileSystemPathTrie`1<FileSystemEvent> changeAccumulator, FileSystemPath directoryPath, JetFileSystemWatcher watcher);
    private void DisposeWatcher(Watcher watcher);
    public virtual IProperty`1<bool> get_AutoCommitEnabled();
    private static void DumpFileSystemChange(FileSystemPath prefix, TextWriter writer, FileSystemChange change);
    public sealed virtual void SuppressAutoCommit(Lifetime lifetime, object suppressor);
    public virtual void DumpState(TextWriter writer, FileSystemPath prefix, FileSystemTrackerDumpFlags flags);
    private void Normalize(Watcher newWatcher);
    public void ViewRoots(Lifetime lifetime, Action`2<Lifetime, FileSystemTrackerRequestCookie> viewer);
    [NotNullAttribute]
private FileSystemTrackerRequestCookie AddToWatches(FileSystemPath path, bool isDirectory, bool watchRecursively);
    private void AddNewCookie(FileSystemTrackerRequestCookie requestCookie);
    private void RemoveCookiePath(FileSystemTrackerRequestCookie requestCookie);
    public virtual FileSystemTrackerRequestCookie AdviseFileChanges(FileSystemPath filePath);
    public virtual void AdviseFileChanges(Lifetime lifetime, FileSystemPath path, Action`1<FileSystemChangeDelta> onChangeAction);
    public sealed virtual void AdviseDirectoryChanges(Lifetime lifetime, FileSystemPath path, bool watchRecursively, Action`1<FileSystemChangeDelta> onChangeAction);
    public sealed virtual void RegisterPrioritySink(Lifetime lifetime, Action`1<FileSystemChange> handler, HandlingPriority priority);
    private void RegisterSink(Lifetime lifetime, FileSystemPath prefix, Action`1<FileSystemChangeDelta> onChangeAction);
    public virtual FileSystemTrackerRequestCookie AdviseFileChanges(Lifetime lifetime, FileSystemPath filePath);
    public virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(Lifetime lifetime, FileSystemPath directoryPath, bool watchRecursively);
    public virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(FileSystemPath directoryPath, bool watchRecursively);
    public virtual void UnadviseChanges(FileSystemTrackerRequestCookie[] requestCookies);
    public bool IsDirectoryBeingWatched(FileSystemPath directory);
    private void RepairSomeLostChanges();
    public IList`1<FileSystemChangeDelta> GetAccumulatedChangesAndFlush(FileSystemPath[] paths);
    protected IList`1<FileSystemChangeDelta> GetAccumulatedChanges(FileSystemPath[] paths);
    public void ProcessPendingRescans();
    private void RescanCommit(JetFileSystemWatcher watcher, FileSystemChangeDelta directoryChange);
    public void ProcessPendingWatchers();
    public virtual void CommitChanges(FileSystemPath[] paths);
    private void DoCommit(FileSystemPath[] paths);
    public virtual ISignal`1<FileSystemChange> get_Changed();
    private bool IsIgnoredFolder(FileSystemPath folderPath);
    private sealed virtual override void JetBrains.Util.JetFileSystemWatcher.IWatcherEvents.OnFileSystemChanged(FileSystemEvent[] events);
    public void DispatchChange(FileSystemChange change);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static string <DumpFileSystemChange>b__1d(FileSystemChangeDelta d);
    [CompilerGeneratedAttribute]
private static int <DumpState>b__21(KeyValuePair`2<Watcher, CompactSet`1<FileSystemTrackerRequestCookie>> p1, KeyValuePair`2<Watcher, CompactSet`1<FileSystemTrackerRequestCookie>> p2);
    [CompilerGeneratedAttribute]
private static string <DumpState>b__22(FileSystemTrackerRequestCookie x);
    [CompilerGeneratedAttribute]
private static bool <RepairSomeLostChanges>b__45(FileSystemTrackerRequestCookie x);
    [CompilerGeneratedAttribute]
private static FileSystemPath <RepairSomeLostChanges>b__46(FileSystemTrackerRequestCookie x);
    [CompilerGeneratedAttribute]
private static bool <RepairSomeLostChanges>b__47(FileSystemTrackerRequestCookie x);
    [CompilerGeneratedAttribute]
private static FileSystemPath <RepairSomeLostChanges>b__48(FileSystemTrackerRequestCookie x);
    [CompilerGeneratedAttribute]
private static bool <ProcessPendingWatchers>b__56(Watcher watcher);
    [CompilerGeneratedAttribute]
private static Pair`2<Watcher, FileSystemPath> <ProcessPendingWatchers>b__57(Watcher watcher);
    [CompilerGeneratedAttribute]
private static bool <ProcessPendingWatchers>b__58(Pair`2<Watcher, FileSystemPath> x);
    [CompilerGeneratedAttribute]
private static FileSystemEvent <ProcessPendingWatchers>b__59(ITrieNode<FileSystemEvent> first, ITrieNode<FileSystemEvent> second);
}
public class JetBrains.Application.FileSystemTracker.FileSystemTrackerRequestCookie : object {
    private FileSystemPath myPath;
    private FileSystemPath myPathDirectory;
    private bool myIsDirectory;
    private bool myIsRecursive;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public bool IsValid { get; internal set; }
    public bool IsRecursive { get; }
    public FileSystemPath Path { get; }
    internal FileSystemPath PathDirectory { get; }
    internal string CanonicalName { get; }
    public bool IsDirectory { get; }
    internal FileSystemTrackerRequestCookie(FileSystemPath pathToTrack, bool isDirectory, bool isRecursive);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
internal void set_IsValid(bool value);
    public bool get_IsRecursive();
    internal void Invalidate();
    public FileSystemPath get_Path();
    internal FileSystemPath get_PathDirectory();
    internal string get_CanonicalName();
    public bool get_IsDirectory();
    public void Dump(TextWriter writer, FileSystemPath volatilePrefix);
    public bool Equals(FileSystemTrackerRequestCookie obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.Application.FileSystemTracker.HandlingPriority : Enum {
    public int value__;
    public static HandlingPriority Existence;
    public static HandlingPriority Caching;
    public static HandlingPriority Other;
}
public interface JetBrains.Application.FileSystemTracker.IFileSystemTracker {
    public bool Enabled { get; public set; }
    [ObsoleteAttribute("Use SuppressAutoCommit instead")]
public IProperty`1<bool> AutoCommitEnabled { get; }
    public ISignal`1<FileSystemChange> Changed { get; }
    public abstract virtual FileSystemTrackerRequestCookie AdviseFileChanges(FileSystemPath filePath);
    public abstract virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(FileSystemPath directoryPath, bool watchRecursively);
    public abstract virtual void UnadviseChanges(FileSystemTrackerRequestCookie[] requestCookies);
    public abstract virtual FileSystemTrackerRequestCookie AdviseFileChanges(Lifetime lifetime, FileSystemPath filePath);
    public abstract virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(Lifetime lifetime, FileSystemPath directoryPath, bool watchRecursively);
    public abstract virtual void AdviseFileChanges(Lifetime lifetime, FileSystemPath path, Action`1<FileSystemChangeDelta> onChangeAction);
    public abstract virtual void AdviseDirectoryChanges(Lifetime lifetime, FileSystemPath path, bool watchRecursively, Action`1<FileSystemChangeDelta> onChangeAction);
    public abstract virtual void CommitChanges(FileSystemPath[] paths);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual IProperty`1<bool> get_AutoCommitEnabled();
    public abstract virtual void SuppressAutoCommit(Lifetime lifetime, object suppressor);
    public abstract virtual void DumpState(TextWriter writer, FileSystemPath prefix, FileSystemTrackerDumpFlags flags);
    public abstract virtual void CheckConsistency();
    public abstract virtual void IgnoreChangesInFolder(Lifetime lifetime, FileSystemPath folderPath);
    public abstract virtual void DoNotListenToTheWholeFolder(Lifetime lifetime, FileSystemPath folderPath);
    public abstract virtual ISignal`1<FileSystemChange> get_Changed();
    public abstract virtual void RegisterPrioritySink(Lifetime lifetime, Action`1<FileSystemChange> handler, HandlingPriority priority);
}
[CommandLineSwitchAttribute("Gallery", "1")]
public class JetBrains.Application.Gallery.GallerySettings : object {
    public static string Key;
}
public static class JetBrains.Application.Help.ReSharperHelpIds : object {
    public static string _NET_Core_Application_dotCover;
    public static string API_Reference;
    public static string API_Usage_Examples;
    public static string AccessToDisposedClosure;
    public static string AccessToForEachVariableInClosure;
    public static string AccessToModifiedClosure;
    public static string AccessToStaticMemberViaDerivedType;
    public static string Accessing_Decompiled_Files;
    public static string Actions_List;
    public static string Adding_Annotations_to_Snapshots;
    public static string Alternative_Way_of_Working_with_Memory;
    public static string Analysis_Overview_Page;
    public static string Analysis_Subject;
    public static string Analyzing_Async_Calls;
    public static string Analyzing_Changesets_Builds_Tests;
    public static string Analyzing_Concurrency_Profiling_Results_Timeline_;
    public static string Analyzing_GC_Roots;
    public static string Analyzing_Results;
    public static string Analyzing_Timeline_Profiling_Results_in_Visual_Studio;
    public static string Analyzing_Traffic;
    public static string Analyzing_an_Instance;
    public static string Analyzing_an_Object_Set;
    public static string Angular_Support;
    public static string AnnotationRedundancyAtValueType;
    public static string Application_Options;
    public static string Architecture__Project_Dependencies_Exploration;
    public static string Argument_Style;
    public static string ArrangeAccessorOwnerBody;
    public static string ArrangeAttributes;
    public static string ArrangeConstructorOrDestructorBody;
    public static string ArrangeLocalFunctionBody;
    public static string ArrangeMethodOrOperatorBody;
    public static string ArrangeMissingParentheses;
    public static string ArrangeModifiersOrder;
    public static string ArrangeRedundantParentheses;
    public static string ArrangeStaticMemberQualifier;
    public static string ArrangeThisQualifier;
    public static string ArrangeTypeMemberModifiers;
    public static string ArrangeTypeModifiers;
    public static string Arranging_Member_Qualifiers;
    public static string Arranging_Parentheses;
    public static string Asp_DeadCode;
    public static string Assemblies_from_Global_Assembly_Cache;
    public static string AssertTraffic_Attribute;
    public static string AssignNullToNotNullAttribute;
    public static string AssignmentInConditionalExpression;
    public static string Attributes_Style;
    public static string Auto_Deleting_Snapshots;
    public static string Auto_Deleting_Workspaces;
    public static string AutoPropertyCanBeMadeGetOnly_Global;
    public static string AutoPropertyCanBeMadeGetOnly_Local;
    public static string Automatically_import_namespaces;
    public static string Back_Traces;
    public static string Basic_Concepts;
    public static string Basic_Operations_with_Snapshots;
    public static string Bodies_of_Function_Members;
    public static string Braces_for_Single_Line_Statements;
    public static string Building_Solution;
    public static string BuiltInTypeReferenceStyle;
    public static string Built_In_Type_Naming;
    public static string CLR_Activity;
    public static string CSharpWarnings_CS0108_CS0114;
    public static string CSharpWarnings_CS0252_CS0253;
    public static string CSharpWarnings_CS0660_CS0661;
    public static string CSharpWarnings_CS1584_CS1711_CS1572_CS1581_CS1580;
    public static string Call_Stack;
    public static string Call_Stack0;
    public static string Call_Tree;
    public static string CanBeReplacedWithTryCastAndCheckForNull;
    public static string CannotApplyEqualityOperatorToType;
    public static string CheckNamespace;
    public static string Checking_Memory_Traffic;
    public static string Checking_for_Objects;
    public static string ClassNeverInstantiated_Global;
    public static string CoVariantArrayConversion;
    public static string Code_Analysis__Annotations_in_Source_Code;
    public static string Code_Analysis__Call_Tracking;
    public static string Code_Analysis__Code_Annotations;
    public static string Code_Analysis__Code_Inspections;
    public static string Code_Analysis__Configuring_Warnings;
    public static string Code_Analysis__Examples_of_Quick_Fixes;
    public static string Code_Analysis__External_Annotations;
    public static string Code_Analysis__Fix_in_Scope;
    public static string Code_Analysis__Index;
    public static string Code_Analysis__Inspect_This;
    public static string Code_Analysis__Investigations;
    public static string Code_Analysis__Performance_of_Solution_Wide_Analysis;
    public static string Code_Analysis__Project_Hierarchy;
    public static string Code_Analysis__Quick_Fixes;
    public static string Code_Analysis__Solution_Wide_Analysis;
    public static string Code_Analysis__Solution_Wide_Analysis__Configuring_Solution_Wide_Analysis;
    public static string Code_Analysis__Solution_Wide_Analysis__Enabling_Solution_Wide_Analysis;
    public static string Code_Analysis__Solution_Wide_Analysis__Solution_Wide_Code_Inspections;
    public static string Code_Analysis__Solution_Wide_Analysis__Viewing_Errors_In_Solution;
    public static string Code_Analysis__Status_Indicator;
    public static string Code_Analysis__String_Formatting_Methods;
    public static string Code_Analysis__Value_Analysis;
    public static string Code_Analysis__Value_Tracking;
    public static string Code_Analysis_in_CPP;
    public static string Code_Analysis_in_HTML;
    public static string Code_Analysis_in_VB_NET;
    public static string Code_Analysis_in_XML;
    public static string Code_Cleanup__Index;
    public static string Code_Cleanup__Usage_Scenarios__Reformatting_XML;
    public static string Code_Coverage_during_Manual_Testing;
    public static string Code_Formatting_Style;
    public static string Code_Generation_Deconstructors;
    public static string Code_Generation_Dispose_Pattern;
    public static string Code_Generation_Relational_Comparer;
    public static string Code_Generation_Relational_Members;
    public static string Code_Generation__Delegating_Members;
    public static string Code_Generation__Equality_Members;
    public static string Code_Generation__Formatting_Members;
    public static string Code_Generation__Generating_Code_from_Usage;
    public static string Code_Generation__Generating_Equality_Comparer;
    public static string Code_Generation__Implementing_Overriding_Methods;
    public static string Code_Generation__Index;
    public static string Code_Generation__Partial_Methods;
    public static string Code_Generation__Properties;
    public static string Code_Generation__Type_Constructors;
    public static string Code_Generation_in_CPP;
    public static string Code_Generation_in_TypeScript;
    public static string Code_Inspection__Creating_Custom_Inspections_and_QuickFixes;
    public static string Code_Outlining;
    public static string Code_Presentation_Options;
    public static string Code_Style_Assistance;
    public static string Code_Style_Assistance_in_ASP_NET;
    public static string Code_Style_Assistance_in_CPP;
    public static string Code_Style_Assistance_in_CSS;
    public static string Code_Style_Assistance_in_HTML;
    public static string Code_Style_Assistance_in_JavaScript;
    public static string Code_Style_Assistance_in_TypeScript;
    public static string Code_Style_Assistance_in_VB;
    public static string Code_Style_Assistance_in_XAML;
    public static string Code_Style_Assistance_in_XML;
    public static string Code_Syntax_Style;
    public static string Code_Templates_in_ASP_NET;
    public static string Code_Templates_in_CPP;
    public static string Code_Templates_in_HTML;
    public static string Code_Templates_in_TypeScript;
    public static string Code_Templates_in_VB;
    public static string Code_Viewer;
    public static string Code_inspections_with_non_matching_IDs;
    public static string Coding_Assistance_Code_Completion_Auto;
    public static string Coding_Assistance_Typing_Assistance;
    public static string Coding_Assistance__Code_Completion;
    public static string Coding_Assistance__Code_Completion__Double;
    public static string Coding_Assistance__Code_Completion__Generative;
    public static string Coding_Assistance__Code_Completion__Smart;
    public static string Coding_Assistance__Code_Completion__Symbol;
    public static string Coding_Assistance__Code_Completion__Type_Name;
    public static string Coding_Assistance__Color_Assistance;
    public static string Coding_Assistance__Comment_Uncomment_Code;
    public static string Coding_Assistance__Complete_Statement;
    public static string Coding_Assistance__Context_Actions;
    public static string Coding_Assistance__Duplicate_Line_Block;
    public static string Coding_Assistance__Extend_Shrink_Selection;
    public static string Coding_Assistance__INotifyPropertyChanged_Support;
    public static string Coding_Assistance__Importing_Namespaces;
    public static string Coding_Assistance__Index;
    public static string Coding_Assistance__Matching_Delimiters;
    public static string Coding_Assistance__Moving_Code_Elements;
    public static string Coding_Assistance__Multiple_Entries_Clipboard;
    public static string Coding_Assistance__Naming_Style;
    public static string Coding_Assistance__Parameter_Info;
    public static string Coding_Assistance__Quick_Documentation;
    public static string Coding_Assistance__Surrounding_with_Region;
    public static string Coding_Assistance__Syntax_Highlighting;
    public static string Coding_Assistance_for_Localization;
    public static string Coding_Assistance_in_ASP_NET;
    public static string Coding_Assistance_in_CPP;
    public static string Coding_Assistance_in_CSS;
    public static string Coding_Assistance_in_HTML;
    public static string Coding_Assistance_in_JavaScript;
    public static string Coding_Assistance_in_TypeScript;
    public static string Coding_Assistance_in_XAML;
    public static string Coding_Assistance_in_XML;
    public static string CoercedEqualsUsing;
    public static string CollectionNeverQueried_Global;
    public static string CollectionNeverQueried_Local;
    public static string CollectionNeverUpdated_Global;
    public static string CollectionNeverUpdated_Local;
    public static string Collection_Access_Analysis;
    public static string CompareNonConstrainedGenericWithNull;
    public static string CompareOfFloatsByEqualityOperator;
    public static string Comparing_Snapshots;
    public static string Comparing_Snapshots0;
    public static string Comparison_View;
    public static string Compatibility_with_Earlier_Versions;
    public static string Concurrency_Profiling_Timeline_;
    public static string ConditionIsAlwaysTrueOrFalse;
    public static string ConditionalTernaryEqualBranch;
    public static string Configuring_Caches_Location;
    public static string Configuring_Code_Viewer;
    public static string Configuring_Keyboard_Shortcuts;
    public static string Configuring_Path_to_Source_Files;
    public static string Configuring_Profiling_Process;
    public static string Configuring_Profiling_Session;
    public static string Configuring_Syntax_Highlighting;
    public static string Configuring_Unit_Testing_Support;
    public static string Configuring__Index;
    public static string Configuring_dotMemory_Unit;
    public static string Configuring_the_List_of_System_Modules;
    public static string ConstantNullCoalescingCondition;
    public static string ConstructorInitializerLoop;
    public static string Continuous_Testing;
    public static string ContractAnnotationNotParsed;
    public static string Contract_Annotations;
    public static string Controlling_Profiling_Process;
    public static string Controlling_Profiling_Process_Through_API;
    public static string ConvertClosureToMethodGroup;
    public static string ConvertConditionalTernaryToNullCoalescing;
    public static string ConvertIfStatementToConditionalTernaryExpression;
    public static string ConvertIfStatementToNullCoalescingExpression;
    public static string ConvertIfStatementToReturnStatement;
    public static string ConvertIfToOrExpression;
    public static string ConvertNullableToShortForm;
    public static string ConvertPropertyToExpressionBody;
    public static string ConvertToAutoProperty;
    public static string ConvertToLambdaExpression;
    public static string ConvertToLocalFunction;
    public static string Cookbook;
    public static string Copying_Snapshots_to_Another_Computer;
    public static string Copying_Symbol_Information_to_Clipboard;
    public static string CppRedundantAccessSpecifier;
    public static string Create_a_Decorator;
    public static string Creating_Reusable_Queries;
    public static string Creating_a_File_Template;
    public static string Creating_a_Live_Template;
    public static string Creation_Stack_Trace;
    public static string Creation_Stack_Trace_instance;
    public static string Cross_Workspace_Comparison_View;
    public static string Deal_with_a_lot_of_entries_in_resource_files;
    public static string Dealing_with_Different_Language_Versions;
    public static string Debug_Output;
    public static string Debugging_Assistance;
    public static string Debugging_Covering_Tests;
    public static string Debugging_Without_Source_Code;
    public static string DelegateSubtraction;
    public static string Deleting_Snapshots;
    public static string Design_time_Inspection;
    public static string Detect_code_issues_in_a_build_using_ReSharper_and_TeamCity;
    public static string Detect_possible_NullReferenceExceptions;
    public static string Domain_specific_ReSharper_tutorials;
    public static string DoubleNegationOperator;
    public static string EditorConfig_CPP_CppBlankLinesPageScheme;
    public static string EditorConfig_CPP_CppBracesPageScheme;
    public static string EditorConfig_CPP_CppIndentStylePageSchema;
    public static string EditorConfig_CPP_CppOtherPageScheme;
    public static string EditorConfig_CPP_CppSpacesPageScheme;
    public static string EditorConfig_CPP_CppWrappingPageScheme;
    public static string EditorConfig_CSHARP_BlankLinesPageScheme;
    public static string EditorConfig_CSHARP_BracesPageSchema;
    public static string EditorConfig_CSHARP_CSharpIndentStylePageSchema;
    public static string EditorConfig_CSHARP_LineBreaksPageSchema;
    public static string EditorConfig_CSHARP_OthersPageSchema;
    public static string EditorConfig_CSHARP_SpacesPageSchema;
    public static string EditorConfig_CSS_CodeLayoutPageSchema;
    public static string EditorConfig_CSS_CssIndentStylePageSchema;
    public static string EditorConfig_CSS_LineBreaksPageSchema;
    public static string EditorConfig_CSS_SpacesPageSchema;
    public static string EditorConfig_Generalized;
    public static string EditorConfig_HTML_HtmlCodeStylePageSchema;
    public static string EditorConfig_HTML_HtmlCodeStylePageStyleSchema;
    public static string EditorConfig_Index;
    public static string EditorConfig_JAVA_SCRIPT_BracesPageSchema;
    public static string EditorConfig_JAVA_SCRIPT_JavaScriptCodeStyleSchema;
    public static string EditorConfig_JAVA_SCRIPT_JavaScriptIndentStylePageSchema;
    public static string EditorConfig_JAVA_SCRIPT_JavaScriptOthersPageSchema;
    public static string EditorConfig_JAVA_SCRIPT_LineBreaksPageSchema;
    public static string EditorConfig_JAVA_SCRIPT_SpacesPageSchema;
    public static string EditorConfig_Properties;
    public static string EditorConfig_Protobuf_ProtobufFormattingPageSchema;
    public static string EditorConfig_TYPE_SCRIPT_TsBracesPageScheme;
    public static string EditorConfig_TYPE_SCRIPT_TsLineBreaksPageSchema;
    public static string EditorConfig_TYPE_SCRIPT_TsSpacesPageSchema;
    public static string EditorConfig_TYPE_SCRIPT_TypeScriptOthersPageSchema;
    public static string EditorConfig_VBASIC_BlankLinesPageSchema;
    public static string EditorConfig_VBASIC_LineBreaksPageSchema;
    public static string EditorConfig_VBASIC_OthersPageSchema;
    public static string EditorConfig_VBASIC_SpacesPageSchema;
    public static string EditorConfig_VBASIC_VBIndentStylePageSchema;
    public static string EditorConfig_XMLDOC_XmlDocCodeStylePageSchema;
    public static string EditorConfig_XML_XmlCodeStylePageSchema;
    public static string EmptyConstructor;
    public static string EmptyDestructor;
    public static string EmptyEmbeddedStatement;
    public static string EmptyForStatement;
    public static string EmptyGeneralCatchClause;
    public static string EmptyNamespace;
    public static string EmptyStatement;
    public static string Enforcing_Code_Formatting_Rules;
    public static string EnumUnderlyingTypeIsInt;
    public static string Establish_automated_NET_code_review;
    public static string Events_Window;
    public static string Events_Window_VS;
    public static string Examples;
    public static string Exceptions;
    public static string Excluding_Nodes_from_Coverage_Snapshot;
    public static string Executing_Analyzing_Tests;
    public static string Exploring_Assemblies;
    public static string Exploring_Assembly_Dependency_Diagram;
    public static string Exploring_Assembly_Metadata;
    public static string Exploring_Folders;
    public static string Exploring_Loaded_Assemblies;
    public static string Exploring_Type_Dependency_Graph;
    public static string Exporting_Assembly_to_Project;
    public static string Feedback_Center;
    public static string FieldCanBeMadeReadOnly_Local;
    public static string File_Header_Style;
    public static string File_I_O;
    public static string File_and_Type_Layout;
    public static string Filtering_by_Solution;
    public static string Filters;
    public static string Filters0;
    public static string Find_dead_code;
    public static string Finding_Code_Dependent_on_Modules;
    public static string Finding_Code_Issues;
    public static string Finding_Exploring_and_Installing_NuGet_Packages;
    public static string Finding_Usages_of_External_Symbols;
    public static string First_Look_at_the_dotMemory_s_User_Interface;
    public static string First_Steps;
    public static string Fix_inconsistent_namespace_naming;
    public static string Folding_Calls;
    public static string ForCanBeConvertedToForeach;
    public static string Forecasting_Performance_Timeline;
    public static string FunctionNeverReturns;
    public static string Generating_Code_with_Completion;
    public static string Generating_Null_Checking_Routines;
    public static string Generating_PDB_Files;
    public static string Generating_Type_Members;
    public static string Generations;
    public static string Get_Started;
    public static string Get_Started_with_Performance_Viewer;
    public static string Get_Started_with_Timeline_Profiling__Basic_;
    public static string Get_Started_with_Timeline_Viewer;
    public static string Get_assistance_in_migrating_to_new_CSharp_features;
    public static string Getting_Snapshots_by_Condition;
    public static string Getting_Started;
    public static string Getting_Started_with_dotCover;
    public static string Getting_Started_with_dotMemory;
    public static string HTTP_Requests;
    public static string Heap_Fragmentation;
    public static string Home_Window;
    public static string How_to_Find_a_Memory_Leak;
    public static string How_to_Optimize_Memory_Traffic;
    public static string IL_Viewer;
    public static string Icicles;
    public static string Importing_Process_Dumps;
    public static string Importing_and_Exporting_Workspaces;
    public static string Incoming_References;
    public static string InconsistentNaming;
    public static string InconsistentlySynchronizedField;
    public static string Indentation_Style;
    public static string Inline_refactorings;
    public static string InspectCode;
    public static string Inspect_the_Whole_Solution_for_Naming_Style_Compliance;
    public static string Inspecting_Code_in_Specific_Scope;
    public static string Inspections;
    public static string Installation_Guide;
    public static string Instances;
    public static string Interval_Filters;
    public static string IntroduceOptionalParameters_Local;
    public static string Introduction;
    public static string Introduction__Conventions;
    public static string Introduction__Feature_Map;
    public static string Introduction__Index;
    public static string Introduction__Network_Activity;
    public static string Introduction__Troubleshooting;
    public static string Introduction__Whats_New;
    public static string InvertIf;
    public static string InvocationIsSkipped;
    public static string IsExpressionAlwaysTrue;
    public static string JIT_Compilation;
    public static string JoinDeclarationAndInitializer;
    public static string JoinNullCheckWithUsage;
    public static string Joining_Lines;
    public static string Jumping_to_Line_of_Code;
    public static string Key_Retention_Paths;
    public static string Language_Independent_Context_Actions;
    public static string Language_Injections;
    public static string LocalVariableHidesMember;
    public static string Localization_Inspection;
    public static string LoopCanBeConvertedToQuery;
    public static string LoopVariableIsNeverChangedInsideLoop;
    public static string Main_Set_of_Refactorings;
    public static string Making_AutoProperties_GetOnly;
    public static string Making_Field_Readonly;
    public static string Managing_Assemblies;
    public static string Managing_Color_Themes;
    public static string Managing_Extensions;
    public static string Marking_an_Instance;
    public static string Matching_Coverage_Snapshot_with_Project_Structure;
    public static string MemberCanBeMadeStatic_Local;
    public static string MemberCanBePrivate_Global;
    public static string MemberCanBePrivate_Local;
    public static string MemberCanBeProtected_Global;
    public static string MemberCanBeProtected_Local;
    public static string MemberHidesStaticFromOuterClass;
    public static string MemberInitializerValueIgnored;
    public static string Memory_Allocation;
    public static string Memory_Traffic_View;
    public static string MergeConditionalExpression;
    public static string MergeSequentialChecks;
    public static string Merging_Coverage_Snapshots;
    public static string Modifiers_Style;
    public static string Monitoring_Memory_with_dotMemory_Unit;
    public static string MoreSpecificForeachVariableTypeAvailable;
    public static string Move_classes_into_separate_files_in_one_go;
    public static string Move_refactorings;
    public static string MultipleNullableAttributesUsage;
    public static string NET_Core_Applications;
    public static string NET_Core_Applications1;
    public static string NET_Memory_Management_Concepts;
    public static string Namespace_Imports_Style;
    public static string Native_Memory_Allocation;
    public static string Navigate_To_Exposing_APIs;
    public static string Navigating_Through_Navigation_History;
    public static string Navigating_from_Source_View_to_Visual_Studio;
    public static string Navigating_to_Action;
    public static string Navigating_to_String_LIterals;
    public static string Navigating_to_Type_Declaration;
    public static string Navigation;
    public static string Navigation_Go_To_Metadata_Token;
    public static string Navigation_and_Search_Go_to_File_Nearby;
    public static string Navigation_and_Search_Go_to_Text;
    public static string Navigation_and_Search_Structural_Navigation;
    public static string Navigation_and_Search__Bookmarks;
    public static string Navigation_and_Search__CamelHumps;
    public static string Navigation_and_Search__Context_Dependent_Navigation;
    public static string Navigation_and_Search__Finding_Usages;
    public static string Navigation_and_Search__Finding_Usages__Finding_Usages_Advanced;
    public static string Navigation_and_Search__Finding_Usages__Finding_Usages_of_a_Symbol;
    public static string Navigation_and_Search__Finding_Usages__Highlighting_Usages_in_File;
    public static string Navigation_and_Search__Finding_Usages__Optimizing_References;
    public static string Navigation_and_Search__Finding_Usages__Viewing_Filtering_and_Grouping_Results;
    public static string Navigation_and_Search__Go_to_Base;
    public static string Navigation_and_Search__Go_to_Containing_Declaration;
    public static string Navigation_and_Search__Go_to_Declaration;
    public static string Navigation_and_Search__Go_to_File;
    public static string Navigation_and_Search__Go_to_File_Member;
    public static string Navigation_and_Search__Go_to_Implementation;
    public static string Navigation_and_Search__Go_to_Inheritor;
    public static string Navigation_and_Search__Go_to_Next_Previous_Member;
    public static string Navigation_and_Search__Go_to_Related_Files;
    public static string Navigation_and_Search__Go_to_Symbol;
    public static string Navigation_and_Search__Go_to_Type;
    public static string Navigation_and_Search__Go_to_Type_Declaration;
    public static string Navigation_and_Search__Go_to_Usage;
    public static string Navigation_and_Search__Highlighting_Current_Line;
    public static string Navigation_and_Search__Index;
    public static string Navigation_and_Search__Locating_a_File_in_Solution_Explorer;
    public static string Navigation_and_Search__Navigate_from_Here;
    public static string Navigation_and_Search__Navigate_from_Here__Assembly_Explorer;
    public static string Navigation_and_Search__Navigate_from_Here__Conflicting_Declarations;
    public static string Navigation_and_Search__Navigate_from_Here__Control_Flow_Target;
    public static string Navigation_and_Search__Navigate_from_Here__Decompiled_Code;
    public static string Navigation_and_Search__Navigate_from_Here__Extension_Methods;
    public static string Navigation_and_Search__Navigate_from_Here__External_Source_File;
    public static string Navigation_and_Search__Navigate_from_Here__Function_Exits;
    public static string Navigation_and_Search__Navigate_from_Here__Generic_Substitutions;
    public static string Navigation_and_Search__Navigate_from_Here__Implementing_Members;
    public static string Navigation_and_Search__Navigate_from_Here__Member_Overloads;
    public static string Navigation_and_Search__Navigate_from_Here__Metadata_Sources;
    public static string Navigation_and_Search__Navigate_from_Here__Object_Browser;
    public static string Navigation_and_Search__Navigate_from_Here__Overriding_Members;
    public static string Navigation_and_Search__Navigate_from_Here__Parameter_Declaration;
    public static string Navigation_and_Search__Navigate_from_Here__Test_Explorer;
    public static string Navigation_and_Search__Navigate_from_Here__Todo_Explorer;
    public static string Navigation_and_Search__Navigating_Between_To_do_Items;
    public static string Navigation_and_Search__Navigating_to_Exception;
    public static string Navigation_and_Search__Navigating_to_External_Sources;
    public static string Navigation_and_Search__Navigating_to_Recent_Locations;
    public static string Navigation_and_Search__Navigation_from_Symbols;
    public static string Navigation_and_Search__Peek_Definition;
    public static string Navigation_and_Search__Search;
    public static string Navigation_and_Search__Structural_Search_and_Replace;
    public static string Navigation_and_Search__Viewing_File_Structure;
    public static string Navigation_and_Search__Viewing_Type_Hierarchy;
    public static string Navigation_and_Search_in_HTML;
    public static string Navigation_and_Search_in_XML;
    public static string Navigation_in_CPP;
    public static string Navigation_to_Covering_Tests;
    public static string NegativeEqualityExpression;
    public static string NonReadonlyMemberInGetHashCode;
    public static string NotAccessedField_Local;
    public static string NotNullMemberIsNotInitialized;
    public static string NotResolvedInText;
    public static string NuGet_Browser;
    public static string Opening_Assemblies_from_NuGet_Packages;
    public static string Opening_Assembly_Files;
    public static string Opening_Snapshots;
    public static string Optimize_App_Performance_and_Memory_Traffic;
    public static string Other_Profiling_Scenarios;
    public static string Outgoing_References;
    public static string ParameterHidesMember;
    public static string ParameterTypeCanBeEnumerable_Global;
    public static string ParameterTypeCanBeEnumerable_Local;
    public static string PartialMethodParameterNameMismatch;
    public static string PartialMethodWithSinglePart;
    public static string PartialTypeWithSinglePart;
    public static string Performance_Profiling;
    public static string Performance_Profiling__Profiling_Using_the_Command_Line;
    public static string Performance_Snapshots_Browser_Concepts;
    public static string Personal_Build;
    public static string Plain_List;
    public static string PolymorphicFieldLikeEventInvocation;
    public static string PossibleAssignmentToReadonlyField;
    public static string PossibleInfiniteInheritance;
    public static string PossibleInvalidCastExceptionInForeachLoop;
    public static string PossibleInvalidOperationException;
    public static string PossibleMultipleEnumeration;
    public static string PossibleMultipleWriteAccessInDoubleCheckLocking;
    public static string PossibleNullReferenceException;
    public static string PossibleUnintendedQueryableAsEnumerable;
    public static string PossibleUnintendedReferenceComparison;
    public static string Postfix_Templates;
    public static string PrivateFieldCanBeConvertedToLocalVariable;
    public static string Process_Overview;
    public static string Process_Overview0;
    public static string Profile__NET_Core_Application;
    public static string Profile_ASP_Web_Site;
    public static string Profile_NET_Process;
    public static string Profile_Running_Process;
    public static string Profile_Standalone_Application;
    public static string Profile_Static_Method;
    public static string Profile_WCF_Service;
    public static string Profile_Windows_Service;
    public static string Profiler_Options;
    public static string Profiling_Guidelines__Advanced_Profiling_Using_dotTrace_API;
    public static string Profiling_Guidelines__Choosing_the_Right_Profiling_Mode;
    public static string Profiling_Guidelines__Development_Server;
    public static string Profiling_Guidelines__IIS;
    public static string Profiling_Guidelines__IIS_Express;
    public static string Profiling_Guidelines__Index;
    public static string Profiling_Guidelines__Launching_and_Controlling_the_Profiling_Process;
    public static string Profiling_Guidelines__Profiling_Different_Kinds_of_Applications;
    public static string Profiling_Guidelines__Profiling_Unit_Tests;
    public static string Profiling_Guidelines__Profiling_Using_Current_Configuration;
    public static string Profiling_Guidelines__Setting_the_Right_Meter_Kind;
    public static string Profiling_Guidelines__Silverlight_Applications;
    public static string Profiling_Guidelines__Standalone_Applications;
    public static string Profiling_Guidelines__Starting_a_Profiling_Session;
    public static string Profiling_Guidelines__Transparent_Integration;
    public static string Profiling_Guidelines__WCF_Service_Libraries;
    public static string Profiling_Guidelines__Windows_Services;
    public static string Profiling_Guidelines__Windows_Store_Applications;
    public static string Profiling_Guidelines__XBAP;
    public static string Profiling_Guidelines__dotNET_Process;
    public static string Profiling_Methods_Overview;
    public static string Profiling_Process;
    public static string Profiling_Workflow_Overview;
    public static string Project_Level_Assistance;
    public static string Project_Level_Refactorings;
    public static string Providing_Feedback;
    public static string PublicConstructorInAbstractClass;
    public static string Quick_Start;
    public static string Quickly_create_a_type;
    public static string Quickly_internationalize_a_NET_application;
    public static string Quickly_introduce_using_statements_and_try_catch_blocks;
    public static string ReSharper_Command_Line_Tools;
    public static string ReSharper_by_Language_CPP;
    public static string ReSharper_by_Language_JSON;
    public static string ReSharper_by_Language_Protobuf;
    public static string ReSharper_by_Language__CSS;
    public static string ReSharper_by_Language__CSS__Code_Analysis_and_Coding_Assistance;
    public static string ReSharper_by_Language__CSS__Navigation;
    public static string ReSharper_by_Language__CSS__Refactorings;
    public static string ReSharper_by_Language__CSS__Templates;
    public static string ReSharper_by_Language__CSharp;
    public static string ReSharper_by_Language__HTML;
    public static string ReSharper_by_Language__Index;
    public static string ReSharper_by_Language__JavaScript;
    public static string ReSharper_by_Language__JavaScript__Code_Analysis_and_Coding_Assistance;
    public static string ReSharper_by_Language__JavaScript__Navigation;
    public static string ReSharper_by_Language__JavaScript__Refactorings;
    public static string ReSharper_by_Language__JavaScript__Templates;
    public static string ReSharper_by_Language__JavaScript__Unit_Testing;
    public static string ReSharper_by_Language__MSBuild;
    public static string ReSharper_by_Language__TypeScript;
    public static string ReSharper_by_Language__TypeScript__Code_Analysis_and_Coding_Assistance;
    public static string ReSharper_by_Language__TypeScript__Navigation;
    public static string ReSharper_by_Language__TypeScript__Refactorings;
    public static string ReSharper_by_Language__Visual_Basic;
    public static string ReSharper_by_Language__Visual_Basic__Code_Analysis_and_Coding_Assistance;
    public static string ReSharper_by_Language__Visual_Basic__Code_Generation_and_Templates;
    public static string ReSharper_by_Language__Visual_Basic__Navigation_and_Search;
    public static string ReSharper_by_Language__Visual_Basic__Refactorings;
    public static string ReSharper_by_Language__XAML;
    public static string ReSharper_by_Language__XAML__Code_Analysis_and_Coding_Assistance;
    public static string ReSharper_by_Language__XAML__Navigation_and_Search;
    public static string ReSharper_by_Language__XAML__Refactorings;
    public static string ReSharper_by_Language__XML;
    public static string ReSharper_for_Universal_Apps;
    public static string ReSharper_for_VSTO;
    public static string ReSharper_for_data_access;
    public static string ReadAccessInDoubleCheckLocking;
    public static string Reduce_Algorithm_Complexity_and_Promote_Modularity;
    public static string RedundantAssignment;
    public static string RedundantAttributeParentheses;
    public static string RedundantCaseLabel;
    public static string RedundantCast;
    public static string RedundantCatchClause;
    public static string RedundantDefaultMemberInitializer;
    public static string RedundantDelegateCreation;
    public static string RedundantEmptySwitchSection;
    public static string RedundantExplicitArrayCreation;
    public static string RedundantExplicitArraySize;
    public static string RedundantExtendsListEntry;
    public static string RedundantIfElseBlock;
    public static string RedundantJumpStatement;
    public static string RedundantLambdaParameterType;
    public static string RedundantLambdaSignatureParentheses;
    public static string RedundantLogicalConditionalExpressionOperand;
    public static string RedundantNameQualifier;
    public static string RedundantOverriddenMember;
    public static string RedundantStringFormatCall;
    public static string RedundantTypeSpecificationInDefaultExpression;
    public static string RedundantUsingDirective;
    public static string Refactor_This;
    public static string Refactorings_Invert_Boolean;
    public static string Refactorings_Make_Partial;
    public static string Refactorings_Transform_Parameters;
    public static string Refactorings__Adjust_Namespaces;
    public static string Refactorings__Change_Signature;
    public static string Refactorings__Convert_Abstract_Class_to_Interface;
    public static string Refactorings__Convert_Anonymous_to_Named_Type;
    public static string Refactorings__Convert_Extension_Method_to_Plain_Static;
    public static string Refactorings__Convert_Indexer_to_Method;
    public static string Refactorings__Convert_Interface_to_Abstract_Class;
    public static string Refactorings__Convert_Method_to_Indexer;
    public static string Refactorings__Convert_Method_to_Property;
    public static string Refactorings__Convert_Property_to_Auto_Property;
    public static string Refactorings__Convert_Property_to_Method;
    public static string Refactorings__Convert_Static_to_Extension_Method;
    public static string Refactorings__Copy_Type;
    public static string Refactorings__Encapsulate_Field;
    public static string Refactorings__Extract_Class;
    public static string Refactorings__Extract_Class_from_Parameters;
    public static string Refactorings__Extract_Interface;
    public static string Refactorings__Extract_Method;
    public static string Refactorings__Extract_Superclass;
    public static string Refactorings__Index;
    public static string Refactorings__Inline_Class;
    public static string Refactorings__Inline_Field;
    public static string Refactorings__Inline_Method;
    public static string Refactorings__Inline_Parameter;
    public static string Refactorings__Inline_Variable;
    public static string Refactorings__Inplace_Refactorings;
    public static string Refactorings__Introduce_Field;
    public static string Refactorings__Introduce_Parameter;
    public static string Refactorings__Introduce_Variable;
    public static string Refactorings__Introduce_Variable_for_Substring;
    public static string Refactorings__Make_Method_Non_Static;
    public static string Refactorings__Make_Method_Static;
    public static string Refactorings__Move_Types_into_Matching_Files;
    public static string Refactorings__Move__Instance_Method_to_Another_Type;
    public static string Refactorings__Move__Type_to_Another_File;
    public static string Refactorings__Move__Type_to_Another_Namespace;
    public static string Refactorings__Move__Type_to_Another_Type;
    public static string Refactorings__Move__Type_to_Folder;
    public static string Refactorings__Move__Type_to_Outer_Scope;
    public static string Refactorings__Pull_Members_Up;
    public static string Refactorings__Push_Members_Down;
    public static string Refactorings__Remove_Unused_References;
    public static string Refactorings__Rename;
    public static string Refactorings__Replace_Constructor_with_Factory_Method;
    public static string Refactorings__Resolving_Conflicts_in_Refactorings;
    public static string Refactorings__Safe_Delete;
    public static string Refactorings__Use_Base_Type_Where_Possible;
    public static string Refactorings_for_CPP;
    public static string Refactorings_for_HTML;
    public static string Reference;
    public static string Reference_Code_Inspection_Index;
    public static string Reference_Code_Inspections;
    public static string Reference_Comparing_Snapshots;
    public static string Reference_Compatibility_with_Visual_Studio;
    public static string Reference_Home_Window_Dialog_Boxes;
    public static string Reference_Options_Code_Editing_Language_Injections;
    public static string Reference_Options_Code_Editing_Third_Party_Code;
    public static string Reference_Options_Languages_CPP_Formatting_Style_Blank_Lines;
    public static string Reference_Options_Languages_JSON;
    public static string Reference_Options_Languages_JSON_Context_Actions;
    public static string Reference_Options_Languages_JSON_Inspections;
    public static string Reference_Options_Languages_JSON_Schema_Catalogs;
    public static string Reference_Options_Languages_JSON_Typing_Assistance;
    public static string Reference_Options_Languages_JSON_Value_Helpers;
    public static string Reference_Options_Languages_Protobuf;
    public static string Reference_Options_Languages_TypeScript_Generated_Code;
    public static string Reference_Options_Protobuf_Formatting_Style;
    public static string Reference_Options_TeamCity_External_Diff;
    public static string Reference_Options_TeamCity_File_System_Explorer;
    public static string Reference_Options_TeamCity_Source_Control;
    public static string Reference_Options_TeamCity_Source_Control_Perforce;
    public static string Reference_Options_TeamCity_Source_Control_Subversion;
    public static string Reference_Options_TeamCity_Source_Control_TFS;
    public static string Reference_Options_TeamCity_dotCover;
    public static string Reference_Options_Tools_Build_General;
    public static string Reference_Options_Tools_Build_Heuristics;
    public static string Reference_Options_Tools_Build_NuGet;
    public static string Reference_Options_Tools_Debugger;
    public static string Reference_Options_Tools_Unit_Testing_CPP_Tests;
    public static string Reference_Options_Tools_Unit_Testing_xUnit;
    public static string Reference_Options_dotCover_Filtering;
    public static string Reference_Options_dotTrace_Profiles;
    public static string Reference_Performance_Viewer;
    public static string Reference_TeamCity_Failed_Tests;
    public static string Reference_TeamCity_Local_Changes;
    public static string Reference_TeamCity_My_Changes;
    public static string Reference_Timeline_Viewer;
    public static string Reference_Timeline_Viewer_Keyboard_Shortcuts;
    public static string Reference_Timeline_Viewer_Legend;
    public static string Reference_Timeline_Viewer_in_Visual_Studio_Keyboard_Shortcuts;
    public static string Reference_Timeline_Viewer_in_Visual_Studio_Legend;
    public static string Reference_Timeline_Viewer_in_Visual_Studio_Options_General;
    public static string Reference_Windows_Build_Results;
    public static string Reference_Windows_Continuous_Testing_Session;
    public static string Reference_Windows_File_Format_Information;
    public static string Reference_Windows_ReSharper_Build;
    public static string Reference__Action_Bar;
    public static string Reference__Add_Coverage_Filter;
    public static string Reference__Add_Edit_Highlighting_Pattern;
    public static string Reference__Architecture_View;
    public static string Reference__Assembly_Explorer;
    public static string Reference__Choose_Macro;
    public static string Reference__Choose_Template;
    public static string Reference__Code_Annotation_Attributes;
    public static string Reference__Code_Cleanup;
    public static string Reference__Code_Inspections_ASPX;
    public static string Reference__Code_Inspections_ASXX;
    public static string Reference__Code_Inspections_CPP;
    public static string Reference__Code_Inspections_CSHARP;
    public static string Reference__Code_Inspections_CSS;
    public static string Reference__Code_Inspections_HTML;
    public static string Reference__Code_Inspections_JAVA_SCRIPT;
    public static string Reference__Code_Inspections_MSBUILD_BUILD_SCRIPT;
    public static string Reference__Code_Inspections_NANT_BUILD_SCRIPT;
    public static string Reference__Code_Inspections_RESX;
    public static string Reference__Code_Inspections_Razor;
    public static string Reference__Code_Inspections_TYPE_SCRIPT;
    public static string Reference__Code_Inspections_VBASIC;
    public static string Reference__Code_Inspections_Web_Config;
    public static string Reference__Code_Inspections_XAML;
    public static string Reference__Code_Style;
    public static string Reference__Completion_Filters;
    public static string Reference__Context_Actions;
    public static string Reference__Coverage_Results_Browser;
    public static string Reference__Create_Pattern;
    public static string Reference__Dialog_Boxes;
    public static string Reference__Dialog_Boxes__Add_Edit_Line_by_line_Filter;
    public static string Reference__Dialog_Boxes__Add_Formatting_for_Function;
    public static string Reference__Dialog_Boxes__Adjust_Time;
    public static string Reference__Dialog_Boxes__Bookmarks;
    public static string Reference__Dialog_Boxes__Edit_Symbol_Search_Policy;
    public static string Reference__Dialog_Boxes__Line_by_line_Filters;
    public static string Reference__Dialog_Boxes__Options;
    public static string Reference__Dialog_Boxes__Options__Decompiler;
    public static string Reference__Dialog_Boxes__Options__Filters;
    public static string Reference__Dialog_Boxes__Options__Folder_Substitutions;
    public static string Reference__Dialog_Boxes__Options__Source_Preview;
    public static string Reference__Dialog_Boxes__Options__Subsystems;
    public static string Reference__Dialog_Boxes__Options__Symbol_server_integration;
    public static string Reference__Dialog_Boxes__Options__System_Module_Folding;
    public static string Reference__Dialog_Boxes__Options__View;
    public static string Reference__Dialog_Boxes__Properties;
    public static string Reference__Dialog_Boxes__Subsystem_Definition;
    public static string Reference__Export_Data;
    public static string Reference__Extension_Manager;
    public static string Reference__Go_to_Line;
    public static string Reference__Hot_Spot_Session;
    public static string Reference__Index;
    public static string Reference__Keyboard_Shortcuts;
    public static string Reference__Legend_of_Performance_Profiling_Views;
    public static string Reference__License_Information;
    public static string Reference__Navigation_Log;
    public static string Reference__Obtain_Permanent_License;
    public static string Reference__Open_from_GAC;
    public static string Reference__Options;
    public static string Reference__Options_Decompiler;
    public static string Reference__Options_Symbol_Server;
    public static string Reference__Options__Code_Inspection;
    public static string Reference__Options__Code_Inspection__Code_Annotations;
    public static string Reference__Options__Code_Inspection__Custom_Patterns;
    public static string Reference__Options__Code_Inspection__Generated_Code;
    public static string Reference__Options__Code_Inspection__Inspection_Severity;
    public static string Reference__Options__Code_Inspection__Settings;
    public static string Reference__Options__Environment;
    public static string Reference__Options__Environment__Completing_Characters;
    public static string Reference__Options__Environment__Editor;
    public static string Reference__Options__Environment__Editor__Editor_Appearance;
    public static string Reference__Options__Environment__Editor__Editor_Behavior;
    public static string Reference__Options__Environment__Extension_Manager;
    public static string Reference__Options__Environment__Feedback;
    public static string Reference__Options__Environment__General;
    public static string Reference__Options__Environment__IntelliSense;
    public static string Reference__Options__Environment__IntelliSense__Autopopup;
    public static string Reference__Options__Environment__IntelliSense__Completion_Appearance;
    public static string Reference__Options__Environment__IntelliSense__Completion_Behavior;
    public static string Reference__Options__Environment__IntelliSense__General;
    public static string Reference__Options__Environment__IntelliSense__Parameter_Info;
    public static string Reference__Options__Environment__Languages;
    public static string Reference__Options__Environment__Performance_Guide;
    public static string Reference__Options__Environment__Plugins;
    public static string Reference__Options__Environment__Postfix_Templates;
    public static string Reference__Options__Environment__Search_and_Navigation;
    public static string Reference__Options__Environment__Updates;
    public static string Reference__Options__Environment__Visual_Studio_Integration;
    public static string Reference__Options__Environment__Web_Proxy_Settings;
    public static string Reference__Options__General_Formatter_Style;
    public static string Reference__Options__Languages;
    public static string Reference__Options__Languages__ASP_NET;
    public static string Reference__Options__Languages__ASP_NET__Context_Actions;
    public static string Reference__Options__Languages__ASP_NET__Other;
    public static string Reference__Options__Languages__ASP_NET__Web_Naming_Style;
    public static string Reference__Options__Languages__Build_Scripts__Context_Actions;
    public static string Reference__Options__Languages__CPP;
    public static string Reference__Options__Languages__CPP__Code_Completion;
    public static string Reference__Options__Languages__CPP__Code_Style;
    public static string Reference__Options__Languages__CPP__Context_Actions;
    public static string Reference__Options__Languages__CPP__Formatting_Style;
    public static string Reference__Options__Languages__CPP__Formatting_Style_Tabs_and_Indents;
    public static string Reference__Options__Languages__CPP__Formatting_Style__Braces_Layout;
    public static string Reference__Options__Languages__CPP__Formatting_Style__Indentation_and_Alignment;
    public static string Reference__Options__Languages__CPP__Formatting_Style__Spaces;
    public static string Reference__Options__Languages__CPP__Formatting_Style__Wrapping_and_Aligning;
    public static string Reference__Options__Languages__CPP__Inspections;
    public static string Reference__Options__Languages__CPP__Naming_Style;
    public static string Reference__Options__Languages__CPP__Performance;
    public static string Reference__Options__Languages__CSS;
    public static string Reference__Options__Languages__CSS__Context_Actions;
    public static string Reference__Options__Languages__CSS__Formatting_Style;
    public static string Reference__Options__Languages__CSS__Formatting_Style_Tabs_and_Indents;
    public static string Reference__Options__Languages__CSS__Formatting_Style__Code_Layout;
    public static string Reference__Options__Languages__CSS__Formatting_Style__Line_Breaks;
    public static string Reference__Options__Languages__CSS__Formatting_Style__Spaces;
    public static string Reference__Options__Languages__CSS__Inspections;
    public static string Reference__Options__Languages__CSharp;
    public static string Reference__Options__Languages__CSharp__CSharp_Naming_Style;
    public static string Reference__Options__Languages__CSharp__Context_Actions;
    public static string Reference__Options__Languages__CSharp__Formatting_Style;
    public static string Reference__Options__Languages__CSharp__Formatting_Style_Tabs_and_Indents;
    public static string Reference__Options__Languages__CSharp__Formatting_Style__Blank_Lines;
    public static string Reference__Options__Languages__CSharp__Formatting_Style__Braces_Layout;
    public static string Reference__Options__Languages__CSharp__Formatting_Style__Line_Breaks_and_Wrapping;
    public static string Reference__Options__Languages__CSharp__Formatting_Style__Other;
    public static string Reference__Options__Languages__CSharp__Formatting_Style__Spaces;
    public static string Reference__Options__Languages__CSharp__Localization;
    public static string Reference__Options__Languages__CSharp__Namespace_Imports;
    public static string Reference__Options__Languages__CSharp__Null_Checking;
    public static string Reference__Options__Languages__CSharp__Type_Members_Layout;
    public static string Reference__Options__Languages__Common__Code_Style_Sharing;
    public static string Reference__Options__Languages__Common__Context_Actions;
    public static string Reference__Options__Languages__Common__File_Header_Text;
    public static string Reference__Options__Languages__Common__Generated_Members;
    public static string Reference__Options__Languages__HTML;
    public static string Reference__Options__Languages__HTML__Code_Style;
    public static string Reference__Options__Languages__HTML__Context_Actions;
    public static string Reference__Options__Languages__HTML__Formatting_Style;
    public static string Reference__Options__Languages__HTML__Other;
    public static string Reference__Options__Languages__JavaScript;
    public static string Reference__Options__Languages__JavaScript__Code_Style;
    public static string Reference__Options__Languages__JavaScript__Context_Actions;
    public static string Reference__Options__Languages__JavaScript__Formatting_Style;
    public static string Reference__Options__Languages__JavaScript__Formatting_Style_Tabs_and_Indents;
    public static string Reference__Options__Languages__JavaScript__Formatting_Style__Braces_Layout;
    public static string Reference__Options__Languages__JavaScript__Formatting_Style__Line_Breaks;
    public static string Reference__Options__Languages__JavaScript__Formatting_Style__Other;
    public static string Reference__Options__Languages__JavaScript__Formatting_Style__Spaces;
    public static string Reference__Options__Languages__JavaScript__Inspections_Analysis;
    public static string Reference__Options__Languages__JavaScript__Naming_Style;
    public static string Reference__Options__Languages__Razor;
    public static string Reference__Options__Languages__Razor__Code_Style;
    public static string Reference__Options__Languages__Razor__Context_Actions;
    public static string Reference__Options__Languages__TypeScript;
    public static string Reference__Options__Languages__TypeScript_Naming_Style;
    public static string Reference__Options__Languages__TypeScript__Code_Style;
    public static string Reference__Options__Languages__TypeScript__Context_Actions;
    public static string Reference__Options__Languages__TypeScript__Formatting_Braces_Layout;
    public static string Reference__Options__Languages__TypeScript__Formatting_Line_Breaks;
    public static string Reference__Options__Languages__TypeScript__Formatting_Other;
    public static string Reference__Options__Languages__TypeScript__Formatting_Spaces;
    public static string Reference__Options__Languages__TypeScript__Formatting_Style;
    public static string Reference__Options__Languages__TypeScript__Formatting_Style_Tabs_and_Indents;
    public static string Reference__Options__Languages__TypeScript__Inspections;
    public static string Reference__Options__Languages__TypeScriptt__Import_Aliases;
    public static string Reference__Options__Languages__Visual_Basic__NET;
    public static string Reference__Options__Languages__Visual_Basic__NET__Code_Style;
    public static string Reference__Options__Languages__Visual_Basic__NET__Context_Actions;
    public static string Reference__Options__Languages__Visual_Basic__NET__Formatting_Style;
    public static string Reference__Options__Languages__Visual_Basic__NET__Formatting_Style_Tabs_and_Indents;
    public static string Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Blank_Lines;
    public static string Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Line_Breaks_and_Wrapping;
    public static string Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Other;
    public static string Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Spaces;
    public static string Reference__Options__Languages__Visual_Basic__NET__Inspections;
    public static string Reference__Options__Languages__Visual_Basic__NET__Namespace_Imports;
    public static string Reference__Options__Languages__Visual_Basic__NET__VB_Naming_Style;
    public static string Reference__Options__Languages__XAML;
    public static string Reference__Options__Languages__XAML__Context_Actions;
    public static string Reference__Options__Languages__XAML__Editor;
    public static string Reference__Options__Languages__XAML__Xaml_Naming_Style;
    public static string Reference__Options__Languages__XML;
    public static string Reference__Options__Languages__XML__Context_Actions;
    public static string Reference__Options__Languages__XML__Editor;
    public static string Reference__Options__Languages__XML__Formatting_Style;
    public static string Reference__Options__Tools;
    public static string Reference__Options__Tools__Code_Cleanup;
    public static string Reference__Options__Tools__External_Sources;
    public static string Reference__Options__Tools__Localization;
    public static string Reference__Options__Tools__ReSharper_Build;
    public static string Reference__Options__Tools__Stack_Trace_Explorer_Options;
    public static string Reference__Options__Tools__To_Do_Items;
    public static string Reference__Options__Tools__Unit_Testing;
    public static string Reference__Options__Tools__Unit_Testing__MSTest;
    public static string Reference__Options__Tools__Unit_Testing__NUnit;
    public static string Reference__Options__Tools__Unit_Testing__QUnit;
    public static string Reference__Options__XML_Doc_Comments;
    public static string Reference__Options__XML_Doc_Comments_Formatting_Style;
    public static string Reference__Options__dotCover;
    public static string Reference__Options__dotCover__Continuous_Testing;
    public static string Reference__Options__dotCover__General;
    public static string Reference__Options__dotCover__Remote_Coverage;
    public static string Reference__Performance_Viewer__Keyboard_Shortcuts;
    public static string Reference__Process_Explorer;
    public static string Reference__Project_PDB_Generation;
    public static string Reference__Project_Properties;
    public static string Reference__Properties;
    public static string Reference__Quick_Find;
    public static string Reference__Search_Properties;
    public static string Reference__Settings_Layers;
    public static string Reference__Symbol_Icons;
    public static string Reference__Template_Editor;
    public static string Reference__Templates_Explorer;
    public static string Reference__Templates_Explorer__File_Templates;
    public static string Reference__Templates_Explorer__File_Templates_ASP_NET__CSHARP_;
    public static string Reference__Templates_Explorer__File_Templates_ASP_NET__VB_;
    public static string Reference__Templates_Explorer__File_Templates_CPP;
    public static string Reference__Templates_Explorer__File_Templates_CSHARP;
    public static string Reference__Templates_Explorer__File_Templates_Razor__CSHARP_;
    public static string Reference__Templates_Explorer__File_Templates_TypeScript;
    public static string Reference__Templates_Explorer__File_Templates_VB_NET;
    public static string Reference__Templates_Explorer__File_Templates_XAML;
    public static string Reference__Templates_Explorer__File_Templates_XAML__CSHARP_;
    public static string Reference__Templates_Explorer__File_Templates_XAML__VB_;
    public static string Reference__Templates_Explorer__Live_Templates;
    public static string Reference__Templates_Explorer__Live_Templates_ASP_NET;
    public static string Reference__Templates_Explorer__Live_Templates_Angular_2_HTML;
    public static string Reference__Templates_Explorer__Live_Templates_CPP;
    public static string Reference__Templates_Explorer__Live_Templates_CSHARP;
    public static string Reference__Templates_Explorer__Live_Templates_CSS;
    public static string Reference__Templates_Explorer__Live_Templates_Global;
    public static string Reference__Templates_Explorer__Live_Templates_HTML;
    public static string Reference__Templates_Explorer__Live_Templates_HTML_Like;
    public static string Reference__Templates_Explorer__Live_Templates_JavaScript;
    public static string Reference__Templates_Explorer__Live_Templates_Razor;
    public static string Reference__Templates_Explorer__Live_Templates_Resx;
    public static string Reference__Templates_Explorer__Live_Templates_TypeScript;
    public static string Reference__Templates_Explorer__Live_Templates_VB_NET;
    public static string Reference__Templates_Explorer__Live_Templates_XML;
    public static string Reference__Templates_Explorer__Surround_Templates;
    public static string Reference__Templates_Explorer__Surround_Templates_ASP_NET_CSHARP_;
    public static string Reference__Templates_Explorer__Surround_Templates_ASP_NET_VB_NET_;
    public static string Reference__Templates_Explorer__Surround_Templates_ASP_NET;
    public static string Reference__Templates_Explorer__Surround_Templates_Angular_2_HTML;
    public static string Reference__Templates_Explorer__Surround_Templates_CPP;
    public static string Reference__Templates_Explorer__Surround_Templates_CSHARP;
    public static string Reference__Templates_Explorer__Surround_Templates_HTML;
    public static string Reference__Templates_Explorer__Surround_Templates_HTML_Like;
    public static string Reference__Templates_Explorer__Surround_Templates_JavaScript;
    public static string Reference__Templates_Explorer__Surround_Templates_Razor;
    public static string Reference__Templates_Explorer__Surround_Templates_TypeScript;
    public static string Reference__Templates_Explorer__Surround_Templates_VB_NET;
    public static string Reference__Templates_Explorer__Surround_Templates_XML;
    public static string Reference__Templates__Predefined;
    public static string Reference__Text_Editor_Features;
    public static string Reference__VS_Options_Page;
    public static string Reference__Validate_Regular_Expression;
    public static string Reference__Views_Legend;
    public static string Reference__Windows;
    public static string Reference__Windows__Analyze_References;
    public static string Reference__Windows__Errors_in_Solution;
    public static string Reference__Windows__File_Structure_Window;
    public static string Reference__Windows__Find_Results_Window;
    public static string Reference__Windows__Inspection_Results;
    public static string Reference__Windows__Stack_Trace_Explorer;
    public static string Reference__Windows__To_do_Explorer;
    public static string Reference__Windows__Type_Hierarchy_Window;
    public static string Reference__Windows__Unit_Test_Explorer;
    public static string Reference__Windows__Unit_Test_Sessions;
    public static string Reference__dotMemory_Keyboard_Shortcuts;
    public static string Reference__dotMemory_Options;
    public static string Reference_dotMemory_Options_General;
    public static string Regular_Expressions_Assistance;
    public static string Remote_Coverage_from_Visual_Studio;
    public static string Removing_Code_Redundancies;
    public static string Removing_Workspaces;
    public static string Renaming_Workspaces;
    public static string Reorder_code_without_the_copypaste_fuss;
    public static string ReplaceWithSingleAssignment_False;
    public static string ReplaceWithSingleAssignment_True;
    public static string ReplaceWithStringIsNullOrEmpty;
    public static string RequiredBaseTypesIsNotInherited;
    public static string Requirements_and_Compatibilities;
    public static string Resources__Index;
    public static string Resources__Navigation;
    public static string Resources__Navigation__Find_Usages;
    public static string Resources__Navigation__Navigation_between_Code_and_Resx_Files;
    public static string Resources__Navigation__Navigation_between_Cultures;
    public static string Resources__Navigation__Navigation_within_Rex_Files;
    public static string Resources__Refactorings;
    public static string Resources__Refactorings__Inline_Resource;
    public static string Resources__Refactorings__Move_Resource;
    public static string Resources__Refactorings__Move_to_Resource;
    public static string Resources__Refactorings__Rename_Resource;
    public static string Resources__Refactorings__Safe_Delete;
    public static string Retained_by;
    public static string ReturnTypeCanBeEnumerable_Global;
    public static string ReturnTypeCanBeEnumerable_Local;
    public static string ReturnValueOfPureMethodIsNotUsed;
    public static string Review_dependencies_between_projects;
    public static string Run_Configurations;
    public static string Running;
    public static string Running_Applications_under_dotCover_Control;
    public static string Running_Coverage_Analysis_from_the_Command_LIne;
    public static string Running_dotMemory;
    public static string SQL_Client;
    public static string Saving_and_Loading_Coverage_Snapshot;
    public static string Saving_and_Opening_Workspaces;
    public static string SealedMemberInSealedClass;
    public static string Selecting_Containing_Declarations;
    public static string Sharing_Configuration_Options;
    public static string Shortest_Path;
    public static string Shortest_Paths_to_Roots;
    public static string Silverlight_Applications;
    public static string Similar_Retention;
    public static string SimplifyConditionalTernaryExpression;
    public static string Simplify_Object_Creation;
    public static string Smart_Paste;
    public static string Snapshot_View;
    public static string Sort_out_a_mess_of_possible_method_signatures;
    public static string Source_Templates;
    public static string Source_View;
    public static string Source_View_and_Line_by_Line_Profiling;
    public static string SpecifyACultureInStringConversionExplicitly;
    public static string SpecifyStringComparison;
    public static string Specifying_License_Information;
    public static string Specifying_Location_for_Storing_Snapshots;
    public static string Speed_up_Creation_of_Unit_Tests;
    public static string Speeding_Up_ReSharper;
    public static string Splitting_Lines_with_String_Literals;
    public static string Standalone_Applications;
    public static string Starting_Local_Profiling_Session;
    public static string Starting_Local_Profiling_Session_VS;
    public static string Starting_Manual_Test_Session;
    public static string Starting_Manual_Test_Session_for_External_Applications;
    public static string Starting_Profiling_Process;
    public static string Starting_Recent_Profiling_Session;
    public static string Starting_Remote_Profiling_Process;
    public static string Starting_Remote_Profiling_Session;
    public static string StaticMemberInGenericType;
    public static string Studying_Profiling_Results__Adding_Annotations;
    public static string Studying_Profiling_Results__Back_Traces;
    public static string Studying_Profiling_Results__Bookmarks;
    public static string Studying_Profiling_Results__Call_Tree;
    public static string Studying_Profiling_Results__Color_Coding_Functions;
    public static string Studying_Profiling_Results__Comparing_Profiling_Data;
    public static string Studying_Profiling_Results__Configuring_Path_to_Source_Files;
    public static string Studying_Profiling_Results__Creating_and_Applying_Filters;
    public static string Studying_Profiling_Results__Different_Ways_of_Presenting_Snapshot_Data;
    public static string Studying_Profiling_Results__Finding_Application_Bottlenecks;
    public static string Studying_Profiling_Results__Finding_Out_Frequency_of_Function_Calls;
    public static string Studying_Profiling_Results__Folding_Calls_with_Small_Impact;
    public static string Studying_Profiling_Results__Folding_Filtered_Calls;
    public static string Studying_Profiling_Results__Folding_Recursive_Calls;
    public static string Studying_Profiling_Results__Formatting_Functions;
    public static string Studying_Profiling_Results__Hiding_Functions_that_Consume_Zero_Time;
    public static string Studying_Profiling_Results__Hot_Spots;
    public static string Studying_Profiling_Results__Identifying_and_Narrowing_an_Area_of_Interest;
    public static string Studying_Profiling_Results__Index;
    public static string Studying_Profiling_Results__Labeling_and_Formatting;
    public static string Studying_Profiling_Results__Navigating_Between_Function_Calls;
    public static string Studying_Profiling_Results__Navigating_to_Visual_Studio;
    public static string Studying_Profiling_Results__Navigation_and_Search;
    public static string Studying_Profiling_Results__Opening_in_a_New_Tab;
    public static string Studying_Profiling_Results__Overview;
    public static string Studying_Profiling_Results__Performance_Forecasting;
    public static string Studying_Profiling_Results__Plain_List;
    public static string Studying_Profiling_Results__Previewing_Source_Code;
    public static string Studying_Profiling_Results__Searching_for_Functions;
    public static string Studying_Profiling_Results__Sharing_Snapshot_Data;
    public static string Studying_Profiling_Results__Studying_Function_Timings;
    public static string Studying_Profiling_Results__Subsystems;
    public static string Studying_Profiling_Results__Threads_Tree;
    public static string Subsystems;
    public static string SuggestVarOrType_BuiltInTypes;
    public static string SuggestVarOrType_Elsewhere;
    public static string SuggestVarOrType_SimpleTypes;
    public static string Supported_Languages_and_Frameworks;
    public static string Supported_Unit_Testing_Frameworks;
    public static string TeamCIty_Getting_Started;
    public static string Template_Macros;
    public static string Templates__Applying_Templates;
    public static string Templates__Applying_Templates__Creating_Files_from_Templates;
    public static string Templates__Applying_Templates__Creating_Source_Code_Using_Live_Templates;
    public static string Templates__Applying_Templates__Surrounding_Code_Fragments_with_Templates;
    public static string Templates__Creating_and_Editing_Templates;
    public static string Templates__Creating_and_Editing_Templates__Creating_a_Live_Template_from_Source_Code;
    public static string Templates__Creating_and_Editing_Templates__Creating_a_Template;
    public static string Templates__Creating_and_Editing_Templates__Declaring_Variables;
    public static string Templates__Creating_and_Editing_Templates__Editing_a_Template;
    public static string Templates__Creating_and_Editing_Templates__Multifile;
    public static string Templates__Index;
    public static string Templates__Managing_Templates;
    public static string Templates__Managing_Templates__Editing_Quick_Access_List;
    public static string Templates__Managing_Templates__Importing_and_Exporting_Templates;
    public static string Templates__Managing_Templates__Organizing_Templates;
    public static string Templates__Managing_Templates__Sharing_Templates;
    public static string Templates__Template_Basics;
    public static string Templates__Template_Basics__Applicability_and_Storage_of_Templates;
    public static string Templates__Template_Basics__Template_Macros;
    public static string Templates__Template_Basics__Template_Types;
    public static string Templates__Template_Basics__Template_Variables;
    public static string Templates__Template_Scopes;
    public static string Test_Categories;
    public static string Third_Party_Software;
    public static string Third_Party_Software_Clt;
    public static string Third_Party_Software_Cpp;
    public static string Third_Party_Software_Index;
    public static string Third_Party_Software_Ultimate;
    public static string Third_Party_Software_dotPeek;
    public static string ThreadStaticAtInstanceField;
    public static string ThreadStaticFieldHasInitializer;
    public static string Thread_State;
    public static string Threads;
    public static string Threads_Diagram;
    public static string Time;
    public static string Timeline_Diagram;
    public static string Timeline_Viewer_Concepts;
    public static string Timeline_Viewer_in_Visual_Studio;
    public static string TooWideLocalVariableScope;
    public static string Traffic_Class;
    public static string Troubleshooting;
    public static string TryCastAlwaysSucceeds;
    public static string Turning_On_Off_Collecting_of_Allocation_Data;
    public static string Type_List;
    public static string Typical_Profiling_Workflow;
    public static string UI_Freeze;
    public static string Unable_to_Open_a_Snapshot;
    public static string Unit_Examples;
    public static string Unit_Testing__Analyzing_Code_Coverage_with_dotCover;
    public static string Unit_Testing__Index;
    public static string Unit_Testing__Profiling_Unit_Tests;
    public static string Unit_Testing_in_CPP;
    public static string Unit_Testing_in_Document;
    public static string Unit_Testing_in_Solution;
    public static string Unit_Testing_in_TypeScript;
    public static string UnsupportedRequiredBaseType;
    public static string UnusedLocalFunction;
    public static string UnusedMember_Global;
    public static string UnusedMember_Local;
    public static string UnusedParameterInPartialMethod;
    public static string UnusedVariable;
    public static string UseCollectionCountProperty;
    public static string UseMethodAny_0;
    public static string UseNameofExpression;
    public static string UseNullPropagation;
    public static string UseObjectOrCollectionInitializer;
    public static string UseStringInterpolation;
    public static string Use_Profiling_API;
    public static string Using_Auto_Properties;
    public static string Using_Clang_Format;
    public static string Using_EditorConfig;
    public static string Using_Filters_in_Code_Completion;
    public static string Using_Unit_Test_Sessions;
    public static string Using_dotMemory_Unit_Standalone_Runner;
    public static string Using_product_as_a_Symbol_Server;
    public static string Using_var_Keyword_in_Declarations;
    public static string ValueParameterNotUsed;
    public static string View_NET_Framework_source_code;
    public static string Viewing_Collected_Snapshots;
    public static string Viewing_Compiler_Generated_Code;
    public static string Viewing_Coverage_of_Particular_Unit_Test_Item;
    public static string Viewing_Intermediate_Language;
    public static string Viewing_Metadata_Tokens;
    public static string Viewing_References_Hierarchy;
    public static string VirtualMemberCallInContructor;
    public static string VirtualMemberNeverOverridden_Global;
    public static string Visual_Dependency_Analysis;
    public static string Visualizing_Code_Coverage;
    public static string WCF_Service_Library;
    public static string Waiting;
    public static string Web_Application_Using_IIS;
    public static string Web_Application_Using_IIS_Express;
    public static string Web_Application_Using_WebDev_Server;
    public static string Web_Development__ASP_NET_MVC;
    public static string Web_Development__Code_Analysis_and_Coding_Assistance;
    public static string Web_Development__Code_Generation_and_Templates;
    public static string Web_Development__Index;
    public static string Web_Development__Navigation;
    public static string Web_Development__Refactorings;
    public static string What_is_Coverage_Snapshot;
    public static string What_s_New_in_dotMemory;
    public static string Whats_New;
    public static string Whats_New_in_dotPeek;
    public static string Windows_Services;
    public static string Windows_Store_Applications;
    public static string Working_with_Code;
    public static string Working_with_Memory;
    public static string Working_with_Object_Sets;
    public static string Working_with_Traffic;
    public static string Working_with_Unsupported_Unit_Testing_Frameworks;
    public static string Working_with_Workspaces;
    public static string Working_with_dotMemory_Command_Line_Profiler;
    public static string Working_with_dotTrace_Integrated_in_Visual_Studio;
    public static string _NET_Process;
    public static string dotCover_Controller;
    public static string dotCover_Coverage_Configuration;
    public static string dotCover_Introduction;
    public static string dotCover_Manual__IIS;
    public static string dotCover_Manual__Silverlight_Applications;
    public static string dotCover_Manual__Standalone_Applications;
    public static string dotCover_Manual__WCF_Service_Libraries;
    public static string dotCover_Manual__Web_Development_Server;
    public static string dotCover_Manual__Windows_Services;
    public static string dotCover_Manual__Windows_Store_Application;
    public static string dotCover_Manual__dotNET_Process;
    public static string dotCover_Searching_Coverage_Tree;
    public static string dotCover__Analyzing_Test_Coverage;
    public static string dotCover__Basic_Concepts;
    public static string dotCover__Color_Scheme;
    public static string dotCover__Console_Runner_Commands;
    public static string dotCover__Console_Runner_Configuration;
    public static string dotCover__Coverage_Analysis_on_Third_Party_Server;
    public static string dotCover__Detecting_Hot_Spots;
    public static string dotCover__Exporting_Coverage_Results;
    public static string dotCover__Locating_Code_Items_in_Coverage_Tree;
    public static string dotCover__Referecne__Index;
    public static string dotCover__Reference_Coverage_Filters;
    public static string dotCover__Server_Test_Coverage;
    public static string dotCover__Setting_up_Coverage_Analysis_JetBrains_TeamCity;
    public static string dotCover__Setting_up_Coverage_Filters;
    public static string dotMemory_API_Reference;
    public static string dotMemory_API_Usage_Examples;
    public static string dotMemory_Call_Tree;
    public static string dotMemory_Dialog_Boxes;
    public static string dotMemory_Profiler_Options;
    public static string dotPeek_Getting_Started;
    public static string dotPeek_Introduction;
    public static string dotTrace_Whats_New;
    public static string dupFinder;
    public static string product_Standalone_Application;
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.Host.TeamCity.ITeamCityZone {
}
public class JetBrains.Application.Host.TeamCity.JetTeamCityHost : object {
    public static ILogger Logger;
    private static JetTeamCityHost();
    [PublicAPIAttribute]
public static void RunApplication(Func`2<Lifetime, SerializedValuesResolver> FResolve);
}
public class JetBrains.Application.Hosting.CommandLineAdapter : object {
    private ICommandLine myCommandLine;
    public ICommandLine CommandLine { get; }
    public CommandLineAdapter(ICommandLine commandLine);
    public ICommandLine get_CommandLine();
    public sealed virtual IEnumerable`1<CommandLineArgument> GetArguments(KeyDefinitionSet keyDefinitions);
}
public class JetBrains.Application.Hosting.CommandLineParameter : ValueType {
    [CanBeNullAttribute]
public string Key;
    [CanBeNullAttribute]
public string Value;
    public CommandLineParameter(string key, string value);
    public CommandLineParameter(string key);
    public virtual string ToString();
}
[AttributeUsageAttribute("12")]
public class JetBrains.Application.Hosting.CommandLineSwitchAttribute : PartAttribute {
    private string myName;
    private int myParametersCount;
    public string Name { get; }
    public int ParametersCount { get; }
    public CommandLineSwitchAttribute(string name, int parameterscount);
    public string get_Name();
    public int get_ParametersCount();
}
public class JetBrains.Application.Hosting.HostCommandLine : object {
    private IList`1<string> myKeys;
    private IList`1<string> myKeysAsReadonly;
    private IList`1<string> myNonKeyedParameters;
    private OneToListMap`2<string, string> myMapKeyToValues;
    private OneToListMap`2<string, string> myMapIgnoreCaseKeyToValues;
    private IListEvents`1<CommandLineParameter> myParameters;
    private IList`1<string> myNonKeyedParametersAsReadOnly;
    private IList`1<string> myOriginalArgsAsReadonly;
    private IList`1<string> myOriginalArgs;
    private FileSystemPath myStartupDirectory;
    private string myRawCommandLine;
    public IList`1<string> Keys { get; }
    public IList`1<string> NonKeyedParameters { get; }
    private bool JetBrains.Application.Hosting.IHostCommandLine.IsProductDecorationRequiredOnKeys { get; }
    private IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.Parameters { get; }
    private FileSystemPath JetBrains.Application.Hosting.ICommandLine.StartupDirectory { get; }
    [NotNullAttribute]
public IList`1<string> OriginalArgs { get; }
    public HostCommandLine(FileSystemPath startupDirectory, String[] args, string rawCommandLine);
    public HostCommandLine(FileSystemPath startupDirectory, String[] args);
    public HostCommandLine(FileSystemPath startupDirectory);
    public sealed virtual string GetNonKeyedTailRaw(int startNonKeyedParamIndex);
    public sealed virtual IList`1<string> get_Keys();
    public sealed virtual bool IsKeyDefined(string key, bool isCaseSensitive);
    public sealed virtual string TryGetKeyValue(string key, bool isCaseSensitive);
    public sealed virtual IList`1<string> GetKeyValues(string key, bool isCaseSensitive);
    public sealed virtual IList`1<string> get_NonKeyedParameters();
    private sealed virtual override string JetBrains.Application.Hosting.IHostCommandLine.MakeFullCommandLineKeyName(string keyWithProductDecoration);
    private sealed virtual override bool JetBrains.Application.Hosting.IHostCommandLine.get_IsProductDecorationRequiredOnKeys();
    private sealed virtual override IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.get_Parameters();
    private sealed virtual override FileSystemPath JetBrains.Application.Hosting.ICommandLine.get_StartupDirectory();
    public void AddParameters(String[] args);
    private void TossParsedParameters(IList`1<CommandLineParameter> parameters);
    [NotNullAttribute]
public static IList`1<CommandLineParameter> Parse(String[] args);
    private static bool IsKeyed(string arg);
    public IList`1<string> get_OriginalArgs();
    [NotNullAttribute]
public static string GetCommandLineParameterText(CommandLineParameter parameter, string sProductName, bool isOmittingDefaultProductName);
    [NotNullAttribute]
public static string GetCommandLineText(IEnumerable`1<CommandLineParameter> parameters, string sProductName, bool isOmittingDefaultProductName);
    [NotNullAttribute]
public static HostCommandLine CreateFromCurrentEnvironment(String[] args);
}
public interface JetBrains.Application.Hosting.ICommandLine {
    [NotNullAttribute]
public IList`1<string> Keys { get; }
    [NotNullAttribute]
public IList`1<string> NonKeyedParameters { get; }
    [NotNullAttribute]
public IListEvents`1<CommandLineParameter> Parameters { get; }
    [NotNullAttribute]
public FileSystemPath StartupDirectory { get; }
    public abstract virtual bool IsKeyDefined(string key, bool isCaseSensitive);
    [CanBeNullAttribute]
public abstract virtual string TryGetKeyValue(string key, bool isCaseSensitive);
    [NotNullAttribute]
public abstract virtual IList`1<string> GetKeyValues(string key, bool isCaseSensitive);
    public abstract virtual IList`1<string> get_Keys();
    public abstract virtual IList`1<string> get_NonKeyedParameters();
    public abstract virtual IListEvents`1<CommandLineParameter> get_Parameters();
    public abstract virtual FileSystemPath get_StartupDirectory();
}
[ExtensionAttribute]
public static class JetBrains.Application.Hosting.ICommandLineEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetArguments(ICommandLine commandLine, String[] keys);
    [ExtensionAttribute]
[ObsoleteAttribute("Remove it with Common.Util.Shell.CommanLineParser. Use ICommandLineMapper<> instead.")]
[NotNullAttribute]
public static string GetNonKeyedTail(ICommandLine commandLine, int startNonKeyedParamIndex);
}
public interface JetBrains.Application.Hosting.IHostCommandLine {
    public bool IsProductDecorationRequiredOnKeys { get; }
    public abstract virtual bool get_IsProductDecorationRequiredOnKeys();
    [NotNullAttribute]
public abstract virtual string MakeFullCommandLineKeyName(string sKeyWithProductDecoration);
}
[ExtensionAttribute]
public static class JetBrains.Application.Hosting.IHostCommandLineEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [ExtensionAttribute]
public static bool IsKeyDefinedInAnyProduct(IHostCommandLine thіs, string key, bool isCaseSensitive);
    [CompilerGeneratedAttribute]
private static string <IsKeyDefinedInAnyProduct>b__0(string s);
}
public interface JetBrains.Application.Hosting.IProductCommandLine {
    [NotNullAttribute]
public string KeyPrefix { get; }
    public bool IsKeyPrefixOptional { get; }
    public abstract virtual string get_KeyPrefix();
    public abstract virtual bool get_IsKeyPrefixOptional();
    [NotNullAttribute]
public abstract virtual string MakeFullCommandLineKeyName(string sShortKeyName);
}
public abstract class JetBrains.Application.Hosting.ParsedOptionsDataContainer`3 : object {
    private TResult myData;
    private IProperty`1<ProductCanBeStartedVerdict> myVerdict;
    public double Priority { get; }
    public TResult Data { get; }
    protected ParsedOptionsDataContainer`3(ILogger logger, ICommandLine commandLine);
    public sealed virtual double get_Priority();
    public sealed virtual IProperty`1<ProductCanBeStartedVerdict> CreateCanBeStarted(Lifetime lifetime);
    public TResult get_Data();
}
public static class JetBrains.Application.Hosting.ParserHelpers : object {
    public static TResult ParseOptionsWithFallback(ICommandLine commandLine, Action`1<string> displayHelp);
    public static TResult ParseOptions(ICommandLine commandLine, String& help);
    public static TResult ParseOptions(ICommandLine commandLine, Action`1<string> displayHelp);
    private static TResult ParseOptionsCore(ICommandLine commandLine, String& helpString);
    [CompilerGeneratedAttribute]
private static void <ParseOptionsCore>b__0(Builder config);
}
public class JetBrains.Application.Hosting.ProductCommandLine : object {
    private IHostCommandLine myCommandLineHost;
    private string myProductPrefix;
    private bool myIsKeyPrefixOptional;
    private IListEvents`1<CommandLineParameter> myParameters;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.Keys { get; }
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.NonKeyedParameters { get; }
    private string JetBrains.Application.Hosting.IProductCommandLine.KeyPrefix { get; }
    private bool JetBrains.Application.Hosting.IProductCommandLine.IsKeyPrefixOptional { get; }
    private IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.Parameters { get; }
    private FileSystemPath JetBrains.Application.Hosting.ICommandLine.StartupDirectory { get; }
    public ProductCommandLine(Lifetime lifetime, IHostCommandLine cmdlHost, string sProductPrefix, bool isKeyPrefixOptional);
    private sealed virtual override bool JetBrains.Application.Hosting.ICommandLine.IsKeyDefined(string key, bool isCaseSensitive);
    private static void AssertValidKey(string key);
    private string PrefixKey(string key);
    private sealed virtual override string JetBrains.Application.Hosting.ICommandLine.TryGetKeyValue(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.GetKeyValues(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_Keys();
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_NonKeyedParameters();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.get_KeyPrefix();
    private sealed virtual override bool JetBrains.Application.Hosting.IProductCommandLine.get_IsKeyPrefixOptional();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.MakeFullCommandLineKeyName(string sShortKeyName);
    private sealed virtual override IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.get_Parameters();
    private sealed virtual override FileSystemPath JetBrains.Application.Hosting.ICommandLine.get_StartupDirectory();
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.Hosting.ICommandLine.get_Keys>b__6(string key);
}
public class JetBrains.Application.Hosting.RawCommandLineAdapter : CommandLineAdapter {
    public RawCommandLineAdapter(ICommandLine commandLine);
    public sealed virtual string GetNonKeyedTailRaw(int startNonKeyedParamIndex);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.HostProductInfoComponent : object {
    private HostInfo myHostInfo;
    private Lazy`1<ApplicationPackageArtifact> myHostPackage;
    private Lazy`1<Icon> myProductIcon;
    [CompilerGeneratedAttribute]
private static Func`1<Icon> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate7;
    public ImageSource ProductAboutBoxImage { get; }
    public ImageSource ProductAboutBoxImageHighDpi { get; }
    public string HelpUrl { get; }
    public string ProductTechnicalName { get; }
    public string ProductPresentableName { get; }
    public string CompanyNameLegal { get; }
    public string CompanyName { get; }
    public JetSemanticVersion Version { get; }
    public string VersionMarketingString { get; }
    public string ProductUrl { get; }
    public string ProductTwitterUrl { get; }
    public string ProductUrlEvaluate { get; }
    public Icon ProductIcon { get; }
    public DateTime BuildDate { get; }
    public DateTime SubscriptionCheckDate { get; }
    public HostProductInfoComponent(Lifetime lifetime, HostInfo hostInfo, ApplicationPackages apppkgs, ILogger logger, Assembly assemblyInPackage);
    public virtual ImageSource get_ProductAboutBoxImage();
    public virtual ImageSource get_ProductAboutBoxImageHighDpi();
    public virtual string get_HelpUrl();
    public sealed virtual string get_ProductTechnicalName();
    public virtual string get_ProductPresentableName();
    public virtual string get_CompanyNameLegal();
    public virtual string get_CompanyName();
    public sealed virtual JetSemanticVersion get_Version();
    public virtual string get_VersionMarketingString();
    public virtual string get_ProductUrl();
    public virtual string get_ProductTwitterUrl();
    public virtual string get_ProductUrlEvaluate();
    public virtual Icon get_ProductIcon();
    public sealed virtual DateTime get_BuildDate();
    public sealed virtual DateTime get_SubscriptionCheckDate();
    [CompilerGeneratedAttribute]
private static Icon <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3();
}
public interface JetBrains.Application.IApplicationDescriptorUpdatesTmp {
    [CanBeNullAttribute]
public Uri UpdatesFilterUri { get; }
    public abstract virtual Uri get_UpdatesFilterUri();
}
public interface JetBrains.Application.IApplicationHost {
    public HostInfo HostInfo { get; }
    public IHostProductInfo HostProductInfo { get; }
    public abstract virtual HostInfo get_HostInfo();
    public abstract virtual IHostProductInfo get_HostProductInfo();
    public abstract virtual FileSystemPath GetHostFolder(HostFolderLifetime folderLifetime, ApplicationHostDetails hostDetails);
    public abstract virtual RelativePath GetHostRelativeFolder(ApplicationHostDetails hostDetails);
    public abstract virtual string HostIdentifier(ApplicationHostDetails hostDetails);
}
public interface JetBrains.Application.IApplicationHostImages {
    [NotNullAttribute]
public ImageSource ProductAboutBoxImage { get; }
    public abstract virtual ImageSource get_ProductAboutBoxImage();
}
public interface JetBrains.Application.IApplicationShortcutsTrait {
    public bool IsOobeChoosingAltKeyboardScheme { get; }
    public abstract virtual bool get_IsOobeChoosingAltKeyboardScheme();
}
public class JetBrains.Application.Icons.Animation.RotatedIconId : AnimatedIconId {
    [NotNullAttribute]
public IconId StaticIcon;
    public RotatedIconId(IconId iconidStatic);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.Animation.RotatedIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.ColorIcons.ColorIconIdOwner : object {
    public static Size IconSize;
    public static Size SwatchCornerRadii;
    public static Thickness SwatchPadding;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static ColorIconIdOwner();
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner : object {
    private static Comparison`1<IconPack> myFSortPacksByResName;
    private FrugalLocalLazy`1<Dictionary`2<string, Tuple`2<string, string>>> myHashAllNamesCaseInsensitive;
    private FrugalLocalLazy`1<Dictionary`2<string, string>> myHashAllNamesCaseSensitive;
    private Dictionary`2<CompiledIconPackIdentity, IconPack> myMapIconPacks;
    [CompilerGeneratedAttribute]
private static Comparison`1<IconPack> CS$<>9__CachedAnonymousMethodDelegate1b;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    public CompiledIconIdOwner(Lifetime lifetime, PreviewShellPartCatalogSet catalogset, IThreading threading, ILogger logger);
    private static CompiledIconIdOwner();
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertUniqueNames(Lifetime lifetime, string iconPackResName, Object[] names, ILogger logger);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    [CompilerGeneratedAttribute]
private object <JetBrains.Application.Icons.IIconIdOwner.TryGetImage>b__13();
    [CompilerGeneratedAttribute]
private static int <.cctor>b__1a(IconPack α, IconPack β);
}
[BaseTypeRequiredAttribute("JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsAttribute : PartAttribute {
}
public abstract class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass : AnyCompiledIconClass {
    [NotNullAttribute]
public abstract virtual ThemedIconThemeImage[] GetThemeImages();
}
public class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId : IconId {
    private static Type TypeofCompiledIconCsClass;
    [CanBeNullAttribute]
private Nullable`1<PartCatalogType> myIconClassCatalogType;
    [CanBeNullAttribute]
private Type myIconClassRuntimeType;
    [NotNullAttribute]
public string FullName { get; }
    public StringSource SimpleName { get; }
    public CompiledIconCsId(PartCatalogType typeofIconClass);
    public CompiledIconCsId(Type typeofIconClass);
    private static CompiledIconCsId();
    public string get_FullName();
    public StringSource get_SimpleName();
    [NotNullAttribute]
public Type BindToIconClassRuntimeType();
    public virtual bool Equals(object oo);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CanBeNullAttribute]
public Nullable`1<PartCatalogType> TryGetIconClassCatalogType();
    [CanBeNullAttribute]
public Type TryGetIconClassRuntimeType();
    public virtual int CompareTo(IconId otherRaw);
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner : object {
    private static ILogger Logger;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static CompiledIconCsIdOwner();
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.ComposedIcons.CompositeIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public class JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconId : IconId {
    public double Alpha;
    [NotNullAttribute]
public IconId BaseIcon;
    public double BlurRadius;
    public Nullable`1<Color> MonochromeColor;
    public EffectOnIconId(IconId baseicon, double alpha, Nullable`1<Color> colorMonochrome, double fBlurRadius);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static ImageSource ApplyEffectAlpha(ImageSource image, double alpha);
    [NotNullAttribute]
private static ImageSource ApplyEffectBlur(ImageSource image, double radius);
    [NotNullAttribute]
private static ImageSource ApplyEffectMonochrome(ImageSource image, Color colorMonochrome);
    private static bool ApplyEffectMonochrome_Brush(Brush brush, Color colorMonochrome);
    private static bool ApplyEffectMonochrome_Drawing(Drawing drawing, Color colorMonochrome);
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
}
[ExtensionAttribute]
public static class JetBrains.Application.Icons.Emitters.SvgThemedIconsTransferFormatParser : object {
    private static TiSolidColorBrush BrushFailedToParse;
    private static SvgThemedIconsTransferFormatParser();
    [NotNullAttribute]
public static TiBrush GetBrushFromResource(string refid, ParseContext ctx, IList`1<TiSegment> tiSegmentsNoShapeTransform, IList`1<TiSegment> tiSegmentsWithShapeTransform, Transform transformSegmentsInWorldCoords, OnError onerror);
    [NotNullAttribute]
public static TiPath MakeTiPathForShape(XElement xe, IList`1<TiSegment> tiSegmentsOriginal, IDictionary`2<string, Property> props, ParseContext ctx, OnError onerror);
    [NotNullAttribute]
public static TiImage ParseImage(Stream stream, OnError onerror);
    [NotNullAttribute]
private static TiBrush ApplyBrushOpacity(TiBrush brush, double fOpacity, ParseContext ctx, OnError onerror);
    private static Color ApplyBrushOpacity_Color(Color color, double fOpacity);
    private static FrugalLocalList`1<TiGradientStop> ApplyBrushOpacity_Stops(FrugalLocalList`1<TiGradientStop> stops, double fOpacity);
    private static void AssertKnownAttributes(XElement xmlElem, Attribute[] known, OnError onerror);
    private static void Circle(XElement xe, TiVectorImage tiimg, ParseContext ctx, OnError onerror);
    [NotNullAttribute]
private static Transform CreateWorldToBoundsRelativeTransform(IList`1<TiSegment> tiSegments, OnError onerror);
    private static void DefineResource(XElement xe, ParseContext ctx, OnError onerror, Attribute[] knownattrs, Element elementtype);
    private static void Defs(XElement xeDef, ParseContext ctx, OnError onerror);
    private static void Ellipse(XElement xe, TiVectorImage tiimg, ParseContext ctx, OnError onerror);
    private static TiBrush GetBrushFromResource_LinearGradient(string refid, Resource resource, IList`1<TiSegment> tiSegmentsNoShapeTransform, IList`1<TiSegment> tiSegmentsWithShapeTransform, Transform transformSegmentsInWorldCoords, OnError onerror);
    private static TiBrush GetBrushFromResource_RadialGradient(string refid, Resource resource, IList`1<TiSegment> tiSegmentsNoShapeTransform, IList`1<TiSegment> tiSegmentsWithShapeTransform, Transform transformSegmentsInWorldCoords, OnError onerror);
    [NotNullAttribute]
private static TiBrush GetFill(IDictionary`2<string, Property> props, ParseContext ctx, IList`1<TiSegment> tiSegmentsNoShapeTransform, IList`1<TiSegment> tiSegmentsWithShapeTransform, Transform transformSegmentsInWorldCoords, OnError onerror);
    private static double GetNumberOrNull(IDictionary`2<string, Property> props, Attribute attr, OnError onerror);
    private static double GetNumberOrNull(XElement xe, Attribute attr, OnError onerror);
    [ExtensionAttribute]
private static double GetNumberOrNull(Property prop, OnError onerror);
    private static IDictionary`2<string, Property> GetPropertiesFromAttributesAndStyle(XElement xe, Attribute[] attrsKnown, OnError onerror);
    private static IList`1<TiSegment> GetTiSegmentsForEllipse(Point center, Size axes);
    private static FrugalLocalList`1<TiGradientStop> GradientStops(IReadOnlyList`1<XElement> xeCollection, OnError onerror);
    private static Transform GradientTransform(IDictionary`2<string, Property> props, OnError onerror);
    private static GradientUnits GradientUnits(IDictionary`2<string, Property> props);
    private static void Group(XElement xe, TiVectorImage tiimg, ParseContext ctxOuter, OnError onerror);
    [NotNullAttribute]
private static Transform ParseTransformValue(string sTransformText, XElement xeForContext, OnError onerror);
    private static void Path(XElement xe, TiVectorImage tiimg, ParseContext ctx, OnError onerror);
    private static void Polygon(XElement xe, TiVectorImage tiimg, ParseContext ctx, OnError onerror);
    [NotNullAttribute]
private static Transform ReadShapeTransformProperty(IDictionary`2<string, Property> props, OnError onerror);
    private static void Rect(XElement xe, TiVectorImage tiimg, ParseContext ctx, OnError onerror);
    private static string ReportElement(XElement xe);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static Property TryGet(IDictionary`2<string, Property> props, Attribute attr);
    private static bool TryHandleDef(XElement xe, ParseContext ctx, OnError onerror);
    private static bool TryHandleGraphicsElement(XElement xe, TiVectorImage tiimg, ParseContext ctx, OnError onerror);
    [NotNullAttribute]
[PureAttribute]
private static IList`1<TiSegment> WithShapeFillRule(IList`1<TiSegment> tiSegments, IDictionary`2<string, Property> props, OnError onerror);
    [NotNullAttribute]
[PureAttribute]
private static IList`1<TiSegment> WithShapeTransform(IList`1<TiSegment> tiSegments, Transform transform);
}
public static class JetBrains.Application.Icons.Emitters.ThemedIconsCsEmitter : object {
    [NotNullAttribute]
public static CodeTypeReference TyperefThemedIconExtension;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<IconImage, string> CS$<>9__CachedAnonymousMethodDelegate24;
    private static ThemedIconsCsEmitter();
    [NotNullAttribute]
public static Emitted Run(IList`1<IconWithImages> icons, GeneratedNames generatedNames, IconPackFlags flags);
    [NotNullAttribute]
public static Emitted Run(List`1<IconWithImages> icons, IconPackInput iconPackInput);
    [NotNullAttribute]
private static CodeTypeDeclaration IconTypeofsClass(IList`1<IconWithImages> icons, GeneratedNames generatedNames, IconPackFlags flags);
    [NotNullAttribute]
private static CodeCommentStatement WriteComment(Action`1<XmlWriter> F);
    [NotNullAttribute]
private static string WriteXmlString(Action`1<XmlWriter> F);
    private static void XmlDocRemarks(XmlWriter writer, GeneratedNames generatedNames, string sSampleIconId);
    private static CodeAttributeDeclaration XmlnsDefinition(GeneratedNames generatedNames);
    [CompilerGeneratedAttribute]
private static string <IconTypeofsClass>b__d(string line);
    [CompilerGeneratedAttribute]
private static string <IconTypeofsClass>b__20(IconImage th);
}
public static class JetBrains.Application.Icons.Emitters.ThemedIconsCsValidator : object {
    private static DpiResolution[] ComparisonResolutionsToRenderInHiRes;
    private static DpiResolution ComparisonResolutionToDownscale;
    private static DpiResolution SampleRenderingHiRes;
    private static ThemedIconsCsValidator();
    public static void CheckIconImageRendering(IconImage iimg, FileSystemPath dirDumpRoot);
    public static bool CheckIconImageRendering(Parameters parameters);
    [NotNullAttribute]
private static string Abbrev(string s);
    [CanBeNullAttribute]
private static Bitmap AssertBitmapEquivalent(Bitmap bmpBlack, Bitmap bmpWhite, double fRelThreshold, byte nMedianCellRadius, OnError onerror);
    private static string DpiFactorString(DpiResolution dpi);
    private static Bitmap RenderTi(TiImage tiimg, TiRenderer tirenderer, DpiResolution dpi);
}
public static class JetBrains.Application.Icons.Emitters.ThemedIconsImport : object {
    public static string XamlFileExtension;
    [CompilerGeneratedAttribute]
private static Func`2<Stream, XDocument> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<UnnormalizedNameIconThemeImage, string> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4e`2<string, UnnormalizedNameIconThemeImage>, string> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, <>f__AnonymousType4e`2<string, UnnormalizedNameIconThemeImage>>, IconWithImages> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<IconWithImages, string> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType4e`2<string, UnnormalizedNameIconThemeImage>, IconImage> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<IconImage, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<IconInputTaskItem, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<UnnormalizedNameIconThemeImage, UnnormalizedNameIconThemeImage> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<UnnormalizedNameIconThemeImage, UnnormalizedNameIconThemeImage> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<UnnormalizedNameIconThemeImage, UnnormalizedNameIconThemeImage>, bool> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, string>, bool> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate3d;
    private static ThemedIconsImport();
    public static ICollection`1<LegacyProjectInputItems> CollectLegacyInputs(AllAssembliesOnSources allassSrc);
    public static IconImageFormat DetectXamlFormatV3Sw(FileSystemPath fileXaml);
    [NotNullAttribute]
public static FileSystemPath GetCompiledIconCsStaticOutputFile(DiskFolderIconPackInput folder);
    [NotNullAttribute]
public static FileSystemPath GetCompiledIconGeneratedOutputFile(DiskFolderIconPackInput folder, string sExtensionWithDot);
    public static List`1<IconWithImages> ImportIconImagesForIconPack(IconPackInput folder, ILogger logger);
    public static List`1<DiskFolderIconPackInput> TossDiskFolderInputItems(LegacyProjectInputItems inputs, ILogger logger);
    [NotNullAttribute]
private static List`1<UnnormalizedNameIconThemeImage> ConvertAllIcons(IconPackInput folder, ILogger logger);
    private static void ConvertAllIcons_CommonItemMetadata(IDictionary`2<string, string> metadata, BooleanMetadataValue& isIconNamesInPrivateSpace, BooleanMetadataValue& isPrivateAccessorTypes);
    private static void ConvertAllIcons_CommonItemMetadata_Boolean(IDictionary`2<string, string> metadata, string sMetadataName, BooleanMetadataValue& totalvalue);
    [NotNullAttribute]
private static UnnormalizedNameIconThemeImage ConvertAllIcons_Png(IconFileInput item, string sDiagnosticName);
    [NotNullAttribute]
private static UnnormalizedNameIconThemeImage ConvertAllIcons_Svg(IconFileInput item, string sDiagnosticName, ILogger logger);
    [NotNullAttribute]
private static UnnormalizedNameIconThemeImage ConvertAllIcons_XamlSw(IconFileInput item, string sDiagnosticName, ILogger logger);
    [NotNullAttribute]
private static IEnumerable`1<UnnormalizedNameIconThemeImage> ConvertAllIcons_XamlV3(IconFileInput item, string sDiagnosticName, ILogger logger);
    private static string GetNamespace(DiskFolderIconPackInput folder, string sProjectNamespace);
    private static void StripBackgroundPlaceholder(TiImage tiimg, string sName, string sDiagnosticName, ILogger logger);
    [CompilerGeneratedAttribute]
private static XDocument <DetectXamlFormatV3Sw>b__5(Stream stream);
    [CompilerGeneratedAttribute]
private static bool <DetectXamlFormatV3Sw>b__6(XElement e);
    [CompilerGeneratedAttribute]
private static string <DetectXamlFormatV3Sw>b__7(XElement nb);
    [CompilerGeneratedAttribute]
private static string <DetectXamlFormatV3Sw>b__8(XElement rc);
    [CompilerGeneratedAttribute]
private static string <ImportIconImagesForIconPack>b__d(UnnormalizedNameIconThemeImage icon);
    [CompilerGeneratedAttribute]
private static string <ImportIconImagesForIconPack>b__f(<>f__AnonymousType4e`2<string, UnnormalizedNameIconThemeImage> tuple);
    [CompilerGeneratedAttribute]
private static IconWithImages <ImportIconImagesForIconPack>b__10(IGrouping`2<string, <>f__AnonymousType4e`2<string, UnnormalizedNameIconThemeImage>> group);
    [CompilerGeneratedAttribute]
private static string <ImportIconImagesForIconPack>b__13(IconWithImages iwi);
    [CompilerGeneratedAttribute]
private static IconImage <ImportIconImagesForIconPack>b__11(<>f__AnonymousType4e`2<string, UnnormalizedNameIconThemeImage> tuple);
    [CompilerGeneratedAttribute]
private static string <ImportIconImagesForIconPack>b__12(IconImage ii);
    [CompilerGeneratedAttribute]
private static FileSystemPath <TossDiskFolderInputItems>b__1e(IconInputTaskItem fitem);
    [CompilerGeneratedAttribute]
private static UnnormalizedNameIconThemeImage <ConvertAllIcons>b__27(UnnormalizedNameIconThemeImage x);
    [CompilerGeneratedAttribute]
private static UnnormalizedNameIconThemeImage <ConvertAllIcons>b__28(UnnormalizedNameIconThemeImage icon);
    [CompilerGeneratedAttribute]
private static bool <ConvertAllIcons>b__29(IGrouping`2<UnnormalizedNameIconThemeImage, UnnormalizedNameIconThemeImage> g);
    [CompilerGeneratedAttribute]
private static string <ConvertAllIcons_XamlV3>b__2d(string s);
    [CompilerGeneratedAttribute]
private static bool <ConvertAllIcons_XamlV3>b__2e(string s);
    [CompilerGeneratedAttribute]
private static string <ConvertAllIcons_XamlV3>b__2f(string s);
    [CompilerGeneratedAttribute]
private static bool <ConvertAllIcons_XamlV3>b__30(IGrouping`2<string, string> group);
    [CompilerGeneratedAttribute]
private static bool <GetNamespace>b__38(string s);
    [CompilerGeneratedAttribute]
private static bool <GetNamespace>b__39(string s);
    [CompilerGeneratedAttribute]
private static string <GetNamespace>b__3a(string prev, string next);
}
public static class JetBrains.Application.Icons.Emitters.XamlThemedIconsTransferFormatParser : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Drawing, IEnumerable`1<Drawing>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Drawing, IEnumerable`1<int>>, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Drawing, double> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<Drawing, double> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<Drawing, double> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<Drawing, IEnumerable`1<Drawing>> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<Drawing, bool> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate27;
    public static DrawingGroup CanvasToDrawing(Canvas canvas, Transform transformFromParentContext, OnError onerror);
    [NotNullAttribute]
public static IEnumerable`1<IconXamlDrawingImageData> ConvertIcons(Stream streamXaml, List`1<string> columnthemes, bool isRemoveBackground, string sOriginPathForDiag, ILogger logger);
    [NotNullAttribute]
public static IEnumerable`1<IconXamlDrawingImageData> ConvertIcons(ResourceDictionary dictionaryRawInput, string sOriginPathForDiag, List`1<string> columnthemes, bool isRemoveBackground, ILogger logger);
    public static Nullable`1<Rect> StripBackgroundPlaceholder(DrawingGroup drawgroup, string sIconNameForDiagnostics, string sOriginPathForDiag, DrawingGroup groupOriginalForProtrudersDetection, string sMaskAreaForDiag, bool isReadonly, ILogger logger);
    [NotNullAttribute]
private static Drawing CanvasToDrawing_Shape(Shape shape, Transform transformOnCanvas, OnError onerror);
    [NotNullAttribute]
private static Drawing ConsumeNextImageByExpandingMask(List`1<Drawing> drawingsFlat, string sIconNameForDiagnostics, string sColumnNameForDiag, string sOriginPathForDiag, bool isRemoveBackground, DrawingGroup groupOriginalForProtrudersDetection, ILogger logger);
    private static IEnumerable`1<KeyValuePair`2<Drawing, IEnumerable`1<int>>> StripBackgroundPlaceholder_FindProtrudingChildren(DrawingGroup group, Geometry geomLimits, Func`2<Drawing, bool> FFilter);
    private static void StripClipMask(DrawingGroup drawingGroup, ILogger logger, string sId, string sOriginPathForDiag);
    [NotNullAttribute]
private static IEnumerable`1<IconXamlDrawingImageData> TryMakeIcon(DictionaryEntry dictentry, string sOriginPathForDiag, List`1<string> columnthemes, bool isRemoveBackground, ILogger logger);
    [CompilerGeneratedAttribute]
private static bool <ConvertIcons>b__1(string s);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Drawing> <StripBackgroundPlaceholder>b__3(Drawing d);
    [CompilerGeneratedAttribute]
private static bool <StripBackgroundPlaceholder>b__5(KeyValuePair`2<Drawing, IEnumerable`1<int>> pro);
    [CompilerGeneratedAttribute]
private static string <StripBackgroundPlaceholder>b__6(int x);
    [CompilerGeneratedAttribute]
private static string <StripBackgroundPlaceholder>b__7(string sPrev, string sNext);
    [CompilerGeneratedAttribute]
private static double <ConsumeNextImageByExpandingMask>b__10(Drawing drawing);
    [CompilerGeneratedAttribute]
private static double <ConsumeNextImageByExpandingMask>b__11(Drawing drawing);
    [CompilerGeneratedAttribute]
private static double <ConsumeNextImageByExpandingMask>b__12(Drawing drawing);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Drawing> <TryMakeIcon>b__22(Drawing drw);
    [CompilerGeneratedAttribute]
private static bool <TryMakeIcon>b__23(Drawing drw);
    [CompilerGeneratedAttribute]
private static string <TryMakeIcon>b__24(string ss, string sn);
}
public static class JetBrains.Application.Icons.IconPlaceholder : object {
    private static DrawingImage myIconPlaceholderAvalon;
    private static Bitmap myIconPlaceholderGdip;
    private static TiVectorImage myIconPlaceholderTi;
    [NotNullAttribute]
public static DrawingImage IconPlaceholderAvalon { get; }
    [NotNullAttribute]
public static Bitmap IconPlaceholderGdip { get; }
    [NotNullAttribute]
public static TiVectorImage IconPlaceholderTi { get; }
    public static DrawingImage get_IconPlaceholderAvalon();
    public static Bitmap get_IconPlaceholderGdip();
    public static TiVectorImage get_IconPlaceholderTi();
}
public interface JetBrains.Application.Icons.IIconIdOwner {
    [NotNullAttribute]
public Type IconIdType { get; }
    public abstract virtual Type get_IconIdType();
    [CanBeNullAttribute]
public abstract virtual ImageSource TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public interface JetBrains.Application.Icons.IIconIdOwner2 {
    [CanBeNullAttribute]
public abstract virtual TiImage TryGetImage2(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public class JetBrains.Application.Icons.ImageSourceIcons.ImageSourceIconId : IconId {
    private ImageSource myImageSource;
    public ImageSource ImageSource { get; }
    public ImageSourceIconId(ImageSource imageSource);
    public ImageSource get_ImageSource();
    public virtual string ToString();
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellComponentAttribute]
public class JetBrains.Application.Icons.ImageSourceIcons.ImageSourceIconIdOwner : object {
    public Type IconIdType { get; }
    public sealed virtual Type get_IconIdType();
    public sealed virtual ImageSource TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public interface JetBrains.Application.Icons.IThemedIconManager {
    [NotNullAttribute]
public IProperty`1<IconTheme> CurrentIconTheme { get; }
    public ThemedIconManagerIcons Icons { get; }
    public abstract virtual IProperty`1<IconTheme> get_CurrentIconTheme();
    public abstract virtual ThemedIconManagerIcons get_Icons();
    [NotNullAttribute]
public abstract virtual IThemedIconManagerRawApi GetRawApi();
}
[ExtensionAttribute]
public static class JetBrains.Application.Icons.IThemedIconManagerEx : object {
    [ExtensionAttribute]
public static ThemedIconLoader GetIcon(IThemedIconManager thіs);
}
public interface JetBrains.Application.Icons.IThemedIconManagerPerThemeCache {
    [NotNullAttribute]
public abstract virtual Bitmap GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    [NotNullAttribute]
public abstract virtual ImageSource GetIconImageSource(IconId iconid);
    [NotNullAttribute]
public abstract virtual TiImage GetIconTiImage(IconId iconid);
    [CanBeNullAttribute]
public abstract virtual ImageSource TryGetIconImageSource(IconId id);
    [CanBeNullAttribute]
public abstract virtual TiImage TryGetIconTiImage(IconId id);
}
public interface JetBrains.Application.Icons.IThemedIconManagerRawApi {
    [NotNullAttribute]
public abstract virtual Bitmap GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    [NotNullAttribute]
public abstract virtual IProperty`1<Bitmap> GetIconGdipBitmapLive(IconId iconId, RasterizationResolution resolution);
    [NotNullAttribute]
public abstract virtual ImageSource GetIconImageSource(IconId id);
    [NotNullAttribute]
public abstract virtual IProperty`1<ImageSource> GetIconImageSourceLive(IconId iconId);
    [NotNullAttribute]
public abstract virtual TiImage GetIconTiImage(IconId id);
    [NotNullAttribute]
public abstract virtual IProperty`1<TiImage> GetIconTiImageLive(IconId iconId);
    [CanBeNullAttribute]
public abstract virtual ImageSource TryGetIconImageSource(IconId id);
    [CanBeNullAttribute]
public abstract virtual TiImage TryGetIconTiImage(IconId id);
}
public class JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIcon : IconId {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public IReadOnlyList`1<ThemeImage> ThemeImages;
    public RuntimeTiIcon(string name, IReadOnlyList`1<ThemeImage> themeimages);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("1", "0", "2")]
public class JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIconOwner : object {
    [NotNullAttribute]
public static RuntimeTiIconOwner Default;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static RuntimeTiIconOwner();
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.Application.Icons.Settings.IconsForIconThemeSelectionSampleUi : object {
    private IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.SampleIcons { get; }
    private sealed virtual override IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.get_SampleIcons();
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "Controls theme selection for themed icons.")]
public class JetBrains.Application.Icons.Settings.ThemedIconSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Selects the icon theme to use when rendering application icons.")]
public IconThemeSelection IconThemeSelection;
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.Settings.ThemedIconSettingsLoader : object {
    private IProperty`1<IconThemeAspect[]> mySuggestedIconTheme;
    public IProperty`1<IconThemeAspect[]> SuggestedIconTheme { get; }
    public ThemedIconSettingsLoader(Lifetime lifetime, ISettingsStore store, IProperty`1<IconThemeAspect[]> propAutoSelectOverride);
    public sealed virtual IProperty`1<IconThemeAspect[]> get_SuggestedIconTheme();
}
public class JetBrains.Application.Icons.Settings.ThemedIconsPreviewAutomation : AAutomation {
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
private IconIdOwnersMap myIconIdOwners;
    [NotNullAttribute]
private IViewable`1<IThemedIconThemeOracle> myThemeOracles;
    [NotNullAttribute]
private IconId[] mySampleIcons;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private IProperty`1<IList`1<ImageSource>> mySampleImages;
    [NotNullAttribute]
private SequentialLifetimes myPresentLifetimes;
    [NotNullAttribute]
public IProperty`1<IList`1<ImageSource>> SampleImages { get; }
    public ThemedIconsPreviewAutomation(Lifetime lifetime, IThreading threading, IconIdOwnersMap iconIdOwners, IViewable`1<IThemedIconThemeOracle> themeOracles, IProperty`1<IconTheme> themeProperty, IEnumerable`1<IconId> sampleIcons, ILogger logger);
    public IProperty`1<IList`1<ImageSource>> get_SampleImages();
    private void ThemeChanged(PropertyChangedEventArgs`1<IconTheme> args);
    private void RenderIcons(IThemedIconManager themedIconManager);
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.Icons.Shell.ShellFileIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    [CanBeNullAttribute]
public static BitmapSource TryGetFileIconImage(string extension, bool isLargeIcon);
    private static Byte[] ByteFromIcon(Icon ic);
    public static Byte[] TryGetBytesFromImage(ShellFileIconId iconId);
    public static Byte[] TryGetBytesFromImage(string extension, bool isLargeIcon);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public class JetBrains.Application.Icons.ThemedIconLoader : ValueType {
    [NotNullAttribute]
public IconId IconId;
    [NotNullAttribute]
public IThemedIconManager ThemedIconManager;
    [ObsoleteAttribute("This method does not specify the desired image resolution, so it should not be used. No valid image is retrned by the current implementation.")]
[NotNullAttribute]
public Bitmap CurrentGdipBitmap { get; }
    [NotNullAttribute]
public Bitmap CurrentGdipBitmap96 { get; }
    [NotNullAttribute]
public Bitmap CurrentGdipBitmapScreenDpi { get; }
    [NotNullAttribute]
public ImageSource CurrentImageSource { get; }
    [NotNullAttribute]
public TiImage CurrentTiImage { get; }
    [NotNullAttribute]
[ObsoleteAttribute("For private use of DotCover only.")]
public IProperty`1<Bitmap> LiveGdipBitmap { get; }
    [NotNullAttribute]
public IProperty`1<Bitmap> LiveGdipBitmap96 { get; }
    [NotNullAttribute]
public IProperty`1<Bitmap> LiveGdipBitmapScreenDpi { get; }
    [NotNullAttribute]
public IProperty`1<ImageSource> LiveImageSource { get; }
    [NotNullAttribute]
public IProperty`1<TiImage> LiveTiImage { get; }
    public ThemedIconLoader(IconId iconId, IThemedIconManager themedIconManager);
    public Bitmap get_CurrentGdipBitmap();
    public Bitmap get_CurrentGdipBitmap96();
    public Bitmap get_CurrentGdipBitmapScreenDpi();
    public ImageSource get_CurrentImageSource();
    public TiImage get_CurrentTiImage();
    public IProperty`1<Bitmap> get_LiveGdipBitmap();
    public IProperty`1<Bitmap> get_LiveGdipBitmap96();
    public IProperty`1<Bitmap> get_LiveGdipBitmapScreenDpi();
    public IProperty`1<ImageSource> get_LiveImageSource();
    public IProperty`1<TiImage> get_LiveTiImage();
    private void AssertValid();
}
[ExtensionAttribute]
public static class JetBrains.Application.Icons.ThemedIconLoaderEx : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static Bitmap CurrentGdipBitmapNotSure(ThemedIconLoader thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static IProperty`1<Bitmap> LiveGdipBitmapNotSure(ThemedIconLoader thіs);
    [ExtensionAttribute]
public static Size MeasureGdip(ThemedIconLoader thіs, RasterizationResolution resolution);
    [ExtensionAttribute]
public static void PaintGdip(ThemedIconLoader thіs, Graphics g, Rectangle rectangle, RasterizationResolution resolution);
}
public class JetBrains.Application.Icons.ThemedIconManager : object {
    private IProperty`1<IconTheme> myCurrentIconTheme;
    private IProperty`1<ThemedIconManagerPerThemeCache> myCurrentThemeIconData;
    private ThemedIconManagerLiveImages myLiveImages;
    private Lifetime myLifetime;
    private IThreading myThreading;
    [NotNullAttribute]
private IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme { get; }
    private ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.Icons { get; }
    public ThemedIconManager(Lifetime lifeComponent, IThreading threading, IconIdOwnersMap iconowners, ILogger logger, IViewable`1<IThemedIconThemeOracle> themeoracles);
    private void Init_ThemeOracles(Lifetime lifeComponent, IViewable`1<IThemedIconThemeOracle> themeoracles);
    private sealed virtual override IThemedIconManagerRawApi JetBrains.Application.Icons.IThemedIconManager.GetRawApi();
    private sealed virtual override IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.get_CurrentIconTheme();
    private sealed virtual override ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.get_Icons();
    private sealed virtual override Bitmap JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    private sealed virtual override IProperty`1<Bitmap> JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconGdipBitmapLive(IconId iconId, RasterizationResolution resolution);
    private sealed virtual override ImageSource JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconImageSource(IconId id);
    private sealed virtual override IProperty`1<ImageSource> JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconImageSourceLive(IconId iconId);
    private sealed virtual override TiImage JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconTiImage(IconId id);
    private sealed virtual override IProperty`1<TiImage> JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconTiImageLive(IconId iconId);
    private sealed virtual override ImageSource JetBrains.Application.Icons.IThemedIconManagerRawApi.TryGetIconImageSource(IconId id);
    private sealed virtual override TiImage JetBrains.Application.Icons.IThemedIconManagerRawApi.TryGetIconTiImage(IconId id);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Icons.ThemedIconManagerIcons : ValueType {
    private IThemedIconManager myThicman;
    public ThemedIconLoader Item { get; }
    public ThemedIconManagerIcons(IThemedIconManager thicman);
    public ThemedIconLoader get_Item(IconId id);
}
internal class JetBrains.Application.Icons.ThemedIconManagerLiveImages : object {
    private StrongToWeakDictionary`2<IconId, IProperty`1<Bitmap>> myMapIdToGdipBitmap96;
    private StrongToWeakDictionary`2<IconId, IProperty`1<Bitmap>> myMapIdToGdipBitmapScreenDpi;
    private StrongToWeakDictionary`2<IconId, IProperty`1<ImageSource>> myMapIdToImageSource;
    private StrongToWeakDictionary`2<IconId, IProperty`1<TiImage>> myMapIdToTiImage;
    private IThemedIconManager myThemedIconManager;
    public ThemedIconManagerLiveImages(Lifetime lifetime, IThemedIconManager themedIconManager);
    [NotNullAttribute]
public IProperty`1<Bitmap> GetLiveGdipBitmap(IconId iconId, RasterizationResolution resolution);
    [NotNullAttribute]
public IProperty`1<ImageSource> GetLiveImageSource(IconId iconId);
    [NotNullAttribute]
public IProperty`1<TiImage> GetLiveTiImage(IconId iconId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
public class JetBrains.Application.Icons.ThemedIconManagerPerThemeCache : object {
    public static TimeSpan IconInfoExpiration;
    private ConcurrentDictionary`2<IconId, CachedIconInfo> myCache;
    private FreeThreadedGroupingEvent myGeventCheckCache;
    private IconIdOwnersMap myIconOwners;
    private OnError myOnerrorLogger;
    private IconTheme myTheme;
    public ThemedIconManagerPerThemeCache(Lifetime lifetime, IconTheme theme, IconIdOwnersMap iconowners, IThreading threading, ILogger logger);
    private static ThemedIconManagerPerThemeCache();
    [NotNullAttribute]
public sealed virtual Bitmap GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    [NotNullAttribute]
public sealed virtual ImageSource GetIconImageSource(IconId iconid);
    [NotNullAttribute]
public sealed virtual TiImage GetIconTiImage(IconId iconid);
    [CanBeNullAttribute]
public sealed virtual ImageSource TryGetIconImageSource(IconId id);
    [CanBeNullAttribute]
public sealed virtual TiImage TryGetIconTiImage(IconId id);
    [CanBeNullAttribute]
private TiImage ConvertAvalon2Ti(ImageSource avalonimage, IconId iconid, OnError onerror);
    [CanBeNullAttribute]
private ImageSource ConvertTi2Avalon(TiImage tiimage, IconId iconid, OnError onerror);
    private Bitmap CreateRasterizedBitmapCore(IconId iconid, RasterizationResolution resolution);
    [NotNullAttribute]
private CachedIconInfo GetCachedIconInfo(IconId iconid);
    private void TryCreateImageForIconCore(IconId iconid, bool isNeedTiNotAvalon, OnError onerror, TiImage& tiimage, ImageSource& avalonimage);
    private void TryCreateImageForIconCore_Owner1(IconId iconid, IIconIdOwner owner, bool isNeedTiNotAvalon, OnError onerror, TiImage& tiimage, ImageSource& avalonimage);
    private void TryCreateImageForIconCore_Owner2(IconId iconid, IIconIdOwner2 owner2, bool isNeedTiNotAvalon, OnError onerror, TiImage& tiimage, ImageSource& avalonimage);
    [AsyncStateMachineAttribute("JetBrains.Application.Icons.ThemedIconManagerPerThemeCache/<<.ctor>b__0>d__2")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task <.ctor>b__0();
}
public interface JetBrains.Application.IExceptionReportingApplicationTrait {
    [CanBeNullAttribute]
public IExceptionReportStrategy OverrideDefaultExceptionReportStrategy { get; }
    public Nullable`1<bool> OverrideModeReportExceptions { get; }
    public abstract virtual IExceptionReportStrategy get_OverrideDefaultExceptionReportStrategy();
    public abstract virtual Nullable`1<bool> get_OverrideModeReportExceptions();
}
public interface JetBrains.Application.IFeaturePartsContainer {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<T> GetFeatureParts(Func`2<T, bool> isApplicable);
}
public interface JetBrains.Application.IHostProductInfo {
    public string HelpUrl { get; }
    public abstract virtual string get_HelpUrl();
}
[ShellComponentAttribute]
public class JetBrains.Application.Infra.AssemblyExistsService : object {
    private Lifetime myLifetime;
    private bool myIsNoCache;
    private ConcurrentDictionary`2<FileSystemPath, CachedFileSystemData> myExistsMap;
    public AssemblyExistsService(Lifetime lifetime, IFileSystemTracker fileSystemTracker);
    protected AssemblyExistsService(Lifetime lifetime, IFileSystemTracker fileSystemTracker, bool isNoCache);
    [NotNullAttribute]
public CachedFileSystemData GetFileSystemData(FileSystemPath fileSystemPath);
    public bool AssemblyExists(FileSystemPath fileSystemPath);
    private void Remove(FileSystemPath oldPath);
    private void Refresh(FileSystemPath oldPath);
    private void ApplyExternalChange(FileSystemChange fsc);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
[ShellComponentAttribute]
public class JetBrains.Application.Infra.AssemblyInfoDatabase : object {
    private ILogger myLogger;
    private PlatformManager myPlatformManager;
    private IFileSystemTracker myTracker;
    private OptimizedPersistentSortedMap`2<FileSystemPath, AssemblyNameAndMvid> myAssemblyNameAndMvidMap;
    private OptimizedPersistentSortedMap`2<FileSystemPath, Pair`2<PlatformID, DateTime>> myPlatformIdMap;
    private OptimizedPersistentSortedMap`2<FileSystemPath, Pair`2<ICollection`1<AssemblyNameInfo>, DateTime>> myReferencedNamesMap;
    private static HashSet`1<string> ourExtensions;
    private EffectiveReferencedAssemblyNamesExtractor myAssemblyNamesExtractor;
    private IThreading myThreading;
    private Dictionary`2<FileSystemPath, bool> myBlessedAssemblies;
    private static object ourLockObj;
    private Dictionary`2<FileSystemPath, FileSystemTrackerRequestCookie> myCookies;
    [CompilerGeneratedAttribute]
private AssemblyExistsService <ExistsService>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameAndMvid, Nullable`1<Guid>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameAndMvid, Pair`2<AssemblyNameInfo, Guid>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameAndMvid, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static WriteDelegate`1<AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static ReadDelegate`1<AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegated;
    public AssemblyExistsService ExistsService { get; private set; }
    public AssemblyInfoDatabase(Lifetime lifetime, ILogger logger, ShellCaches shellCaches, PlatformManager platformManager, IFileSystemTracker tracker, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, AssemblyExistsService assemblyExistsService, IThreading threading);
    private static AssemblyInfoDatabase();
    [CompilerGeneratedAttribute]
public AssemblyExistsService get_ExistsService();
    [CompilerGeneratedAttribute]
private void set_ExistsService(AssemblyExistsService value);
    private Task`1<TResult> GetAsync(Lifetime lifetime, FileSystemPath path, Func`2<FileSystemPath, TCalculationResult> calculate, Func`2<TCalculationResult, TResult> transform);
    [NotNullAttribute]
public ICollection`1<AssemblyNameInfo> GetReferencedAssemblyNames(FileSystemPath fileSystemPath);
    private ICollection`1<AssemblyNameInfo> GetReferencedAssemblyNamesRaw(FileSystemPath fileSystemPath);
    [NotNullAttribute]
public PlatformID GetPlatformID(FileSystemPath fileSystemPath);
    public Nullable`1<Guid> GetMvid(FileSystemPath fileSystemPath);
    public Task`1<Nullable`1<Guid>> GetMvidAsync(Lifetime lifetime, FileSystemPath fileSystemPath);
    [CanBeNullAttribute]
private AssemblyNameAndMvid CalculateAssemblyNameAndMvid(FileSystemPath fileSystemPath);
    public Pair`2<AssemblyNameInfo, Guid> GetAssemblyNameAndMvid(FileSystemPath fileSystemPath);
    public Task`1<Pair`2<AssemblyNameInfo, Guid>> GetAssemblyNameAndMvidAsync(Lifetime lifetime, FileSystemPath fileSystemPath);
    [CanBeNullAttribute]
public AssemblyNameInfo GetAssemblyName(FileSystemPath fileSystemPath);
    public Task`1<AssemblyNameInfo> GetAssemblyNameAsync(Lifetime lifetime, FileSystemPath fileSystemPath);
    public bool AssemblyIsBroken(FileSystemPath assemblyPath);
    private bool IsBlessedAssembly(FileSystemPath fileSystemPath);
    private void WriteReferencedAssemblyNames(UnsafeWriter writer, Pair`2<ICollection`1<AssemblyNameInfo>, DateTime> pair);
    private Pair`2<ICollection`1<AssemblyNameInfo>, DateTime> ReadReferencedAssemblyNamesInfos(UnsafeReader reader);
    private void WritePlatformId(UnsafeWriter writer, Pair`2<PlatformID, DateTime> value);
    private Pair`2<PlatformID, DateTime> ReadPlatformIdStamp(UnsafeReader reader);
    protected void Invalidate(FileSystemPath newPath);
    private void AdviseForFileSystemChanges(FileSystemPath fileSystemPath);
    public void InvalidateNonBlessedAssemblies();
    private void ApplyExternalChange(FileSystemChange fscd);
    [CompilerGeneratedAttribute]
private static Nullable`1<Guid> <GetMvidAsync>b__3(AssemblyNameAndMvid result);
    [CompilerGeneratedAttribute]
private static Pair`2<AssemblyNameInfo, Guid> <GetAssemblyNameAndMvidAsync>b__5(AssemblyNameAndMvid result);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <GetAssemblyNameAsync>b__7(AssemblyNameAndMvid result);
    [CompilerGeneratedAttribute]
private static void <WriteReferencedAssemblyNames>b__a(UnsafeWriter unsafeWriter, AssemblyNameInfo info);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <ReadReferencedAssemblyNamesInfos>b__c(UnsafeReader unsafeReader);
}
[ShellComponentAttribute]
public class JetBrains.Application.Infra.AssemblyManager : object {
    private Dictionary`2<string, PartCatalog> myCatalogs;
    private IPartCatalogSet myCatalogSet;
    public AssemblyManager(FullPartCatalogSet catalogset);
    public void LoadAssemblies(string loadKey, IEnumerable`1<Assembly> assemblies);
    public void UnloadAssemblies(string loadKey, IEnumerable`1<Assembly> assemblies);
}
[ShellComponentAttribute]
public class JetBrains.Application.Infra.EffectiveReferencedAssemblyNamesExtractor : object {
    private IEnumerable`1<ICustomReferencedAssemblyNamesProvider> myProviders;
    public EffectiveReferencedAssemblyNamesExtractor(IEnumerable`1<ICustomReferencedAssemblyNamesProvider> providers);
    public IEnumerable`1<AssemblyNameInfo> GetReferencedAssemblies(IMetadataAssembly assembly);
    [CanBeNullAttribute]
public AssemblyNameInfo GetReferencedAssembly(IMetadataAssembly assembly, MetadataToken assemblyRefToken);
}
[ShellComponentAttribute]
public class JetBrains.Application.Infra.FileSystemPathAllowIntern : object {
    public FileSystemPathAllowIntern(Lifetime lifetime);
}
public interface JetBrains.Application.Infra.ICustomReferencedAssemblyNamesProvider {
    public abstract virtual ICollection`1<AssemblyNameInfo> PatchReferencedAssemblies(IMetadataAssembly assembly, ICollection`1<AssemblyNameInfo> references);
}
[ObsoleteAttribute("Should be removed from Platform.")]
public interface JetBrains.Application.Infra.IExternalSourcesDebugInfoProvider {
    public abstract virtual void Dump(TextWriter sw);
}
public class JetBrains.Application.Infra.StringAbbreviatorLive`1 : object {
    private ILogger Logger;
    private DictionaryEvents`2<TItem, Values<TItem>> mapItemToAbbreviation;
    private Func`2<TItem, string> myFItemToString;
    private Lifetime myLifetime;
    public IProperty`1<int> MaxChars;
    public StringAbbreviatorLive`1(Lifetime lifetime, IThreading threading, Func`2<TItem, string> FItemToString);
    [NotNullAttribute]
public IProperty`1<string> AbbreviateLive(Lifetime lifetime, TItem item);
    private string ItemToString(TItem item);
    private void ReAbbreviate();
}
public static class JetBrains.Application.Infra.TimeStamp : object {
    private static int ourCurrentValue;
    public static int NextValue { get; }
    private static TimeStamp();
    public static int get_NextValue();
}
[BaseTypeRequiredAttribute("JetBrains.Application.Install.IAssemblyAttributeInstaller`1")]
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.Install.AssemblyAttributeInstallerAttribute : InstallerAttributeBase {
    private Type myAttributeToInstall;
    public Type AttributeToInstall { get; }
    public AssemblyAttributeInstallerAttribute(Type typeAttributeToInstall, InstallerVsVersionAffinity vsversionaffinity);
    public Type get_AttributeToInstall();
}
public static class JetBrains.Application.Install.BindingRedirectionsInstaller : object {
    [BuildStepAttribute]
public static IEnumerable`1<InstalledFolder> Install(ProductPartCatalogForBuild productPartCatalogForBuild, HostInfo hostInfo);
    private static void CleanupOldEntries(HostInfo hostInfo, XmlDocument xmlConfig);
    [NotNullAttribute]
private static XmlDocument LoadConfigFile(InstallationSourceDirRoot sourceroot, string sSourceRelativePath, AssemblyNameInfo assname);
    private static void WriteNewEntries(Installer installer, XmlDocument xmlConfig, IApplicationHost product);
}
public static class JetBrains.Application.Install.BuildApp.BuildSystemAppTasks : object {
    [CompilerGeneratedAttribute]
private static Func`2<CleanLauncherPostCompileArtifact, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<CleanLauncherPostCompileArtifact, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnPackageEx, SubplatformName> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnPackageEx, NugetPackageFileItem> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<NugetPackageFileItem, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, ProductContentFile> CS$<>9__CachedAnonymousMethodDelegate12;
    [BuildStepAttribute]
public static BuildSystemExePackedGuiNuget MakeBuildSystemNugetGuiPackage(BuildSystemExePackedGui exePacked);
    [BuildStepAttribute]
public static BuildSystemExePackedForTeamCityNuget MakeBuildSystemNugetTeamCityPackage(BuildSystemExePackedForTeamCity exePacked);
    [BuildStepAttribute]
public static void PackBuildSystemExe(Lifetime lifetime, CleanLauncherPostCompileArtifact[] launchers, AllAssembliesOnEverything allassemblies, InputPackage[] inputs, ILogger logger, BuildSystemExePackedGui& buildSystemExePackedGui, BuildSystemExePackedForTeamCity& buildSystemExePackedForTeamCity, BuildSystemExeShallowRunner& buildSystemExeShallowRunner, BuildAppEnvironmentConfig buildAppEnvironmentConfig, AllAssembliesOnPackages allassPkg, IAuthenticodeSigningService signer, BuildVersionSuffix versuffix);
    [CompilerGeneratedAttribute]
private static bool <PackBuildSystemExe>b__6(CleanLauncherPostCompileArtifact la);
    [CompilerGeneratedAttribute]
private static bool <PackBuildSystemExe>b__7(CleanLauncherPostCompileArtifact la);
    [CompilerGeneratedAttribute]
private static SubplatformName <PackBuildSystemExe>b__9(SubplatformOnPackageEx sub);
    [CompilerGeneratedAttribute]
private static NugetPackageFileItem <PackBuildSystemExe>b__a(SubplatformOnPackageEx sub);
    [CompilerGeneratedAttribute]
private static string <PackBuildSystemExe>b__b(NugetPackageFileItem pkg);
    [CompilerGeneratedAttribute]
private static ProductContentFile <PackBuildSystemExe>b__c(InputPackage pkg);
}
public class JetBrains.Application.Install.DevEnv.VsExtensionsHelper : object {
    private static ILogger ourLogger;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private VsHive myVsHive;
    private bool myIsPerMachine;
    private bool myIsForceCreateMissingDetour;
    private bool myIsHiveTouched;
    [CanBeNullAttribute]
private Boxed`1<Nullable`1<RegistryHiveAccess>> myMaybeHiveAccess;
    [CanBeNullAttribute]
private VsRegEditWrapper myVsRegedit;
    [NotNullAttribute]
private static RelativePath DevEnvExtensionsRelPath;
    [NotNullAttribute]
private static RelativePath LocalAppDataVsComponentModelCacheFolderRelPath;
    [NotNullAttribute]
private static RelativePath MachineExtensionsConfigurationChangedFileRelPathSinceVs11;
    [NotNullAttribute]
private static BackSlashSeparatedRelativePath VsExtensionManagerRegistryPath;
    [NotNullAttribute]
private static BackSlashSeparatedRelativePath VsExtensionManagerEnabledExtensionsRegistryPath;
    [NotNullAttribute]
private static BackSlashSeparatedRelativePath VsExtensionManagerExtensionTypesRegistryPath;
    [NotNullAttribute]
private static string ConfigurationChangedRegistryValueNameSinceVs11;
    [NotNullAttribute]
private static string ExtensionsChangedRegistryValueNameSinceVs11;
    public VsExtensionsHelper(Lifetime lifetime, VsHive vshive, bool perMachine, bool forceCreateMissingDetour);
    private static VsExtensionsHelper();
    public void EnableVsExtension(string extensionName, FileSystemPath extensionFolder, OnError onError);
    public void DisableVsExtension(string extensionName, OnError onError);
    public void DisableVsExtension(HostInfo hostInfo, OnError onError);
    [NotNullAttribute]
public ICollection`1<Pair`2<string, string>> GetEnabledExtensions(OnError onError);
    public bool IsVsExtensionEnabled(HostInfo hostInfo, OnError onError);
    public void ResetVsMefCache(OnError onError);
    private void EnableVsExtensionInRegistry(string extensionName, FileSystemPath extensionFolder, OnError onError);
    private void DisableVsExtensionInRegistry(string extensionName, OnError onError);
    private void TouchVsConfigurationChangedFile(OnError onError);
    private void TouchVsConfigurationChangedInRegistry(OnError onError);
    private void WipeVsExtensionCaches(OnError onerror);
    private void ResetVsMefCacheClassic(OnError onError);
    private bool ResetVsMefCacheSinceVs15(OnError onError);
    [CanBeNullAttribute]
private string GetStringValue(BackSlashSeparatedRelativePath subkey, string dataname, OnError onerror);
    private bool SetStringValue(BackSlashSeparatedRelativePath subkey, string dataname, string datavalue, OnError onerror);
    private bool SetDwordValue(BackSlashSeparatedRelativePath subkey, string dataname, UInt32 datavalue, OnError onerror);
    private bool SetQwordValue(BackSlashSeparatedRelativePath subkey, string dataname, ulong datavalue, OnError onerror);
    private bool DeleteValue(BackSlashSeparatedRelativePath subkey, string dataname, OnError onerror);
    private Nullable`1<RegistryHiveAccess> GetRegistryHiveAccess(OnError onError);
    [CompilerGeneratedAttribute]
private bool <ResetVsMefCacheSinceVs15>b__17();
}
public static class JetBrains.Application.Install.DevEnv.VsHostInfo : object {
    public static string HostIdentifierPrefix;
    public static string IconName;
    public static string ExtensionCompanyPrefix;
    public static string HostIdentifier(Version2 vsVersion);
    public static string GetFullIdentifierName(VsHive hive, string rootSuffixOverride);
    public static HostInfo GetHostInfo(VsHive hive, string rootSuffix, UInt32 wave);
    [NotNullAttribute]
public static string GetExtensionIdentifier(HostInfo hostInfo);
    [NotNullAttribute]
public static string GetExtensionVersionString(HostInfo hostInfo);
    [NotNullAttribute]
public static string GetExtensionFullIdentifier(HostInfo hostInfo);
}
public class JetBrains.Application.Install.DevEnv.VsRegEditWrapper : object {
    private static string VsRegEditName;
    private static int VsRegEditTimeoutMs;
    private static ILogger ourLogger;
    private VsHive myVsHive;
    private FileSystemPath myRegeditPath;
    private Nullable`1<bool> myIsAvailable;
    [CompilerGeneratedAttribute]
private int <LastExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastOutput>k__BackingField;
    public bool IsAvailable { get; }
    public int LastExitCode { get; private set; }
    [CanBeNullAttribute]
public string LastOutput { get; private set; }
    public VsRegEditWrapper(VsHive vsHive);
    private static VsRegEditWrapper();
    public bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public int get_LastExitCode();
    [CompilerGeneratedAttribute]
private void set_LastExitCode(int value);
    [CompilerGeneratedAttribute]
public string get_LastOutput();
    [CompilerGeneratedAttribute]
private void set_LastOutput(string value);
    public bool SetStringValue(BackSlashSeparatedRelativePath keyName, string valueName, string value, OnError onError);
    public bool SetDwordValue(BackSlashSeparatedRelativePath keyName, string valueName, UInt32 value, OnError onError);
    [CanBeNullAttribute]
public string ReadStringValue(BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    public Nullable`1<UInt32> ReadDwordValue(BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    public bool DeleteValue(BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    public bool DeleteKey(BackSlashSeparatedRelativePath keyName, OnError onError);
    private bool SetValueCore(RegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, ValueType type, string value, OnError onError);
    [CanBeNullAttribute]
private string ReadValueCore(RegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, ValueType type, OnError onError);
    private bool DeleteValueCore(RegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    private bool DeleteKeyCore(RegHive regHive, BackSlashSeparatedRelativePath keyName, OnError onError);
    private bool IsOperational();
    [HandleProcessCorruptedStateExceptionsAttribute]
private int RunVsRegEdit(Operation operation, RegHive regHive, OnError onError, String& output, String[] args);
}
public static class JetBrains.Application.Install.DirectoryInstaller : object {
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    public static IList`1<InstalledFolder> Install(ProductPartCatalogForBuild productPartCatalogForBuild, InstallerSourceFoldersResolver installerSourceFoldersResolver);
    private static void ProcessDirectoriesRecursively(ICollection`1<InstalledFolder> result, InstallFromReferencesDirectoryAttribute attr, FileSystemPath directory, RelativePath localPath);
    [CompilerGeneratedAttribute]
private static bool <ProcessDirectoriesRecursively>b__0(FileSystemPath file);
}
public class JetBrains.Application.Install.FileAssociationHelper : object {
    private static BackSlashSeparatedRelativePath ClassesKey;
    private static BackSlashSeparatedRelativePath DefaultIconPath;
    private static BackSlashSeparatedRelativePath OpenCommandPath;
    private static FileAssociationHelper();
    public static void UpdateSystemFileAssociation();
    public static Pair`2<IEnumerable`1<InstalledRegistryKey>, IEnumerable`1<InstalledRegistryValue>> RegisterApplicationAssociation(string appId, FileSystemPath fullPath, string extension, string extDescription, int iconIndex);
    private static void AssociateExtension(ICollection`1<InstalledRegistryValue> values, ICollection`1<InstalledRegistryKey> keys, string extension, string appId);
    private static void RegisterApplication(ICollection`1<InstalledRegistryValue> values, ICollection`1<InstalledRegistryKey> keys, string appId, string applicationDescription, string fullPath, int iconIndex);
    private static void SHChangeNotify(HChangeNotifyEventID wEventId, HChangeNotifyFlags uFlags, IntPtr dwItem1, IntPtr dwItem2);
}
public static class JetBrains.Application.Install.FileInstaller : object {
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, InstalledFile> CS$<>9__CachedAnonymousMethodDelegate1;
    public static IEnumerable`1<InstalledFolder> Install(ProductPartCatalogForBuild productPartCatalogForBuild, InstallerSourceFoldersResolver installerSourceFoldersResolver);
    [CompilerGeneratedAttribute]
private static InstalledFile <Install>b__0(FileSystemPath file);
}
public class JetBrains.Application.Install.Guids.GuidEntry : object {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefineConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private GuidEntryKey <Key>k__BackingField;
    public Guid Guid { get; public set; }
    public bool IsDefineConstant { get; public set; }
    public GuidEntryKey Key { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IsDefineConstant();
    [CompilerGeneratedAttribute]
public void set_IsDefineConstant(bool value);
    [CompilerGeneratedAttribute]
public GuidEntryKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(GuidEntryKey value);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Application.Install.Guids.GuidEntryKeyConverter")]
public class JetBrains.Application.Install.Guids.GuidEntryKey : object {
    [NotNullAttribute]
private string myName;
    [NotNullAttribute]
public string Name { get; }
    public GuidEntryKey(string name);
    public string get_Name();
    public static bool op_Equality(GuidEntryKey left, GuidEntryKey right);
    [NotNullAttribute]
public static string op_Explicit(GuidEntryKey key);
    [NotNullAttribute]
public static GuidEntryKey op_Explicit(string name);
    public static bool op_Inequality(GuidEntryKey left, GuidEntryKey right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(GuidEntryKey other);
}
public class JetBrains.Application.Install.Guids.GuidEntryKeyConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public static class JetBrains.Application.Install.Guids.GuidEntryKeys : object {
}
public class JetBrains.Application.Install.Guids.GuidStore : object {
    private Guid NamespaceGuid;
    private List`1<GuidEntry> myEntries;
    private List`1<GuidEntry> myProposedEntries;
    [CompilerGeneratedAttribute]
private string <AutoGuidCategory>k__BackingField;
    [DesignerSerializationVisibilityAttribute("2")]
public string AutoGuidCategory { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public List`1<GuidEntry> Entries { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public List`1<GuidEntry> ProposedEntries { get; }
    [CompilerGeneratedAttribute]
public string get_AutoGuidCategory();
    [CompilerGeneratedAttribute]
public void set_AutoGuidCategory(string value);
    public List`1<GuidEntry> get_Entries();
    public List`1<GuidEntry> get_ProposedEntries();
    public Guid GetEntry(GuidEntryKey key);
    public Nullable`1<Guid> TryGetEntry(GuidEntryKey key);
    public Guid TryGetEntryOrPropose(GuidEntryKey key);
}
public class JetBrains.Application.Install.HttpFileSystem : object {
    private Uri myBaseUri;
    private Dictionary`2<string, MemoryStream> myStreams;
    public ILogger Logger { get; public set; }
    public string Root { get; }
    public HttpFileSystem(Uri baseUri);
    public sealed virtual Stream OpenFile(string path);
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual IEnumerable`1<string> GetFiles(string path, string filter, bool recursive);
    public sealed virtual IEnumerable`1<string> GetDirectories(string path);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void DeleteFiles(IEnumerable`1<IPackageFile> files, string rootDir);
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void AddFiles(IEnumerable`1<IPackageFile> files, string rootDir);
    public sealed virtual void MakeFileWritable(string path);
    public sealed virtual void MoveFile(string source, string destination);
    public sealed virtual Stream CreateFile(string path);
    public sealed virtual DateTimeOffset GetLastModified(string path);
    public sealed virtual DateTimeOffset GetCreated(string path);
    public sealed virtual DateTimeOffset GetLastAccessed(string path);
    public sealed virtual ILogger get_Logger();
    public sealed virtual void set_Logger(ILogger value);
    public sealed virtual string get_Root();
    public void AddFiles(IEnumerable files, string rootDir);
    public void AddFile(string path, Action writeToStream);
    public sealed virtual void AddFile(string path, Stream stream);
    public sealed virtual void AddFile(string path, Action`1<Stream> writeToStream);
    public void DeleteFiles(IEnumerable files, string rootDir);
}
public class JetBrains.Application.Install.HttpPackageGallery : object {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private bool <AllowPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private JetSemanticVersion <RemoteVersion>k__BackingField;
    public bool AllowPrerelease { get; private set; }
    public Uri GalleryUri { get; }
    public JetSemanticVersion RemoteVersion { get; private set; }
    public HttpPackageGallery(bool allowPrerelease);
    private static HttpPackageGallery();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPrerelease();
    [CompilerGeneratedAttribute]
private void set_AllowPrerelease(bool value);
    public sealed virtual Uri get_GalleryUri();
    [CompilerGeneratedAttribute]
public JetSemanticVersion get_RemoteVersion();
    [CompilerGeneratedAttribute]
private void set_RemoteVersion(JetSemanticVersion value);
    public sealed virtual IList`1<IGalleryPackage> Load(IProgressIndicator pi, OnError onerror);
}
[ObsoleteAttribute("Use build steps and artifacts of the installation data family. This interface won't be called anymore.")]
public interface JetBrains.Application.Install.IAssemblyAttributeInstaller`1 {
    [ObsoleteAttribute("Use build steps and artifacts of the installation data family. This interface won't be called anymore.")]
[CanBeNullAttribute]
public abstract virtual InstallationData Install(Installer installer, Assembly assembly, TAttribute attribute);
}
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.GalleryPackages>")]
[JsonObjectAttribute]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.GalleryPackages>")]
[DataContractAttribute]
public class JetBrains.Application.Install.Installable.GalleryPackages : object {
    [DataMemberAttribute]
public UInt32 Wave;
    [DataMemberAttribute]
[NotNullAttribute]
public HttpGalleryPackageInfo[] AllPackages;
    public void Write(TextWriter writer);
    public static GalleryPackages Read(StreamReader reader);
}
public class JetBrains.Application.Install.Installable.HttpGalleryPackage : object {
    private HttpGalleryPackageInfo myInstallablePackagInfo;
    private HttpFileSystem myHttpFileSystem;
    public string Id { get; }
    public SemanticVersion Version { get; }
    public InstallablePackage Installable { get; }
    public String[] DependencyIds { get; }
    public HttpGalleryPackage(HttpGalleryPackageInfo installablePackagInfo, Uri baseUri);
    public sealed virtual string get_Id();
    public sealed virtual SemanticVersion get_Version();
    public sealed virtual InstallablePackage get_Installable();
    public sealed virtual String[] get_DependencyIds();
    public sealed virtual IPackage GetPackage();
    private string Path(PackageMetadata packageMetadata);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.GalleryPackages>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.GalleryPackages>")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Install.Installable.HttpGalleryPackageInfo : object {
    [DataMemberAttribute]
[NotNullAttribute]
public InstallablePackage InstallablePackage;
    [DataMemberAttribute]
[NotNullAttribute]
public String[] DependencyIds;
}
public interface JetBrains.Application.Install.Installable.IGalleryPackage {
    public string Id { get; }
    public SemanticVersion Version { get; }
    public InstallablePackage Installable { get; }
    public String[] DependencyIds { get; }
    public abstract virtual string get_Id();
    public abstract virtual SemanticVersion get_Version();
    public abstract virtual InstallablePackage get_Installable();
    public abstract virtual String[] get_DependencyIds();
    public abstract virtual IPackage GetPackage();
}
[JsonObjectAttribute]
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.InstallableHost>")]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.InstallableHost>")]
public class JetBrains.Application.Install.Installable.InstallableHost : object {
    [DataMemberAttribute]
public int VsVersion;
    [DataMemberAttribute]
public UInt32 VsVersionMinor;
    [DataMemberAttribute]
[CanBeNullAttribute]
public HostInfo HostInfo;
    [DataMemberAttribute]
[CanBeNullAttribute]
public InstallablePackage[] Packages;
    [DataMemberAttribute]
[CanBeNullAttribute]
public string GalleryUrl;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    public Guid UpgradeCode { get; }
    [DataMemberAttribute]
[CanBeNullAttribute]
public string PresentableName { get; public set; }
    public InstallableHost(HostInfo hostInfo, InstallablePackage[] packages, string presentableName, int vsVersion, UInt32 vsVersionMinor);
    public Guid get_UpgradeCode();
    [CompilerGeneratedAttribute]
public string get_PresentableName();
    [CompilerGeneratedAttribute]
public void set_PresentableName(string value);
    [CanBeNullAttribute]
public static InstallableHost Read(StreamReader reader, OnError onerror);
    public void Write(TextWriter writer);
    public VsHive GetVsHive();
    [NotNullAttribute]
public string GetRootSuffix();
    public static Guid GetUpgradeCode(string hostIdentifierName);
}
public class JetBrains.Application.Install.Installable.InstallableHostInFolder : object {
    [NotNullAttribute]
public InstallableHost Host;
    [NotNullAttribute]
public FileSystemPath Folder;
    [NotNullAttribute]
public HostInfo HostInfo { get; }
    public InstallableHostInFolder(InstallableHost host, FileSystemPath folder);
    public HostInfo get_HostInfo();
}
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.InstallablePackage>")]
[JsonObjectAttribute]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.InstallablePackage>")]
[DataContractAttribute]
public class JetBrains.Application.Install.Installable.InstallablePackage : object {
    [DataMemberAttribute]
[NotNullAttribute]
public PackageMetadata PackageMetadata;
    [CanBeNullAttribute]
[DataMemberAttribute]
public JetSubplatformZoningSpecArtifact ZoningSpec2;
    [DataMemberAttribute]
[CanBeNullAttribute]
public ProductInfo ProductInfo;
    [CanBeNullAttribute]
[DataMemberAttribute]
public JetSubplatformSpec Spec;
    public static Regex PackageSpecRegex;
    [CompilerGeneratedAttribute]
private UInt32 <Wave>k__BackingField;
    public UInt32 Wave { get; public set; }
    private static InstallablePackage();
    [CompilerGeneratedAttribute]
public UInt32 get_Wave();
    [CompilerGeneratedAttribute]
public void set_Wave(UInt32 value);
    public bool IsAutoEnable(JetHashSet`1<string> allActivatedZones);
    public virtual string ToString();
    public string ToString(string indent);
}
public static class JetBrains.Application.Install.Installable.InstallablePackageEx : object {
    public static InstallablePackage FromPackageMetadata(IPackageMetadata package, ILogger logger);
    public static InstallablePackage FromPackageMetadata(IPackageMetadata package, WaveInfo waveInfo, ILogger logger);
}
public class JetBrains.Application.Install.Installable.InstallablePackageInHost : object {
    [NotNullAttribute]
public InstallableHost Host;
    [NotNullAttribute]
public InstallablePackage InstallablePackage;
    public InstallablePackageInHost(InstallableHost host, InstallablePackage package);
}
public class JetBrains.Application.Install.Installable.InstallablePackages : object {
    public PackageDependencies PackageDependencies;
    private Dictionary`2<string, InstallablePackage> myDistributivePackages;
    private OneToListMap`2<InstallablePackage, InstallablePackage> mySuccessorsMap;
    private OneToListMap`2<InstallablePackage, InstallablePackage> myPredecessorsMap;
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private WaveInfo <WaveInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IGalleryPackage> <GalleryPackageList>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<InstallablePackage> <InstallablePackageList>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<InstallablePackage, JetSubplatformZoningSpecArtifact> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<JetSubplatformZoningSpecArtifact, String[]> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<String[], IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<InstallablePackage, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<InstallablePackage, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<IGalleryPackage, string> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<IGalleryPackage, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    public WaveInfo WaveInfo { get; private set; }
    public List`1<IGalleryPackage> GalleryPackageList { get; private set; }
    public IList`1<InstallablePackage> InstallablePackageList { get; private set; }
    public InstallablePackages(List`1<IGalleryPackage> allPackages, WaveInfo waveInfo);
    private static InstallablePackages();
    [CompilerGeneratedAttribute]
public WaveInfo get_WaveInfo();
    [CompilerGeneratedAttribute]
private void set_WaveInfo(WaveInfo value);
    [CompilerGeneratedAttribute]
public List`1<IGalleryPackage> get_GalleryPackageList();
    [CompilerGeneratedAttribute]
private void set_GalleryPackageList(List`1<IGalleryPackage> value);
    [CompilerGeneratedAttribute]
public IList`1<InstallablePackage> get_InstallablePackageList();
    [CompilerGeneratedAttribute]
private void set_InstallablePackageList(IList`1<InstallablePackage> value);
    [CanBeNullAttribute]
public InstallablePackage GetByPackageId(string id);
    public IEnumerable`1<InstallablePackage> CollectRelatedPackages(InstallablePackage[] package);
    [MustUseReturnValueAttribute]
public IEnumerable`1<InstallablePackage> CollectRelatedPackages(HybridCollection`1<InstallablePackage> packages);
    public IEnumerable`1<InstallablePackage> GetMainProductPackages();
    [CanBeNullAttribute]
public InstallablePackage GetMainPackageByProduct(string productTechnicalName);
    public HybridCollection`1<InstallablePackage> GetOptionalRegistrationPackageByProduct(string productTechnicalName);
    [CanBeNullAttribute]
public IPackage Find(PackageMetadata packageMetadata);
    [CanBeNullAttribute]
public IGalleryPackage FindGalleryPackage(PackageMetadata packageMetadata);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static JetSubplatformZoningSpecArtifact <CollectRelatedPackages>b__0(InstallablePackage x);
    [CompilerGeneratedAttribute]
private static String[] <CollectRelatedPackages>b__1(JetSubplatformZoningSpecArtifact x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <CollectRelatedPackages>b__2(String[] x);
    [CompilerGeneratedAttribute]
private static bool <GetMainProductPackages>b__a(InstallablePackage x);
    [CompilerGeneratedAttribute]
private static string <GetOptionalRegistrationPackageByProduct>b__10(InstallablePackage x);
    [CompilerGeneratedAttribute]
private static string <Find>b__15(IGalleryPackage x);
    [CompilerGeneratedAttribute]
private static string <FindGalleryPackage>b__1a(IGalleryPackage x);
}
public class JetBrains.Application.Install.Installable.InstalledHostsDiscovery : object {
    private static ILogger ourLogger;
    private ICollection`1<InstallableHostInFolder> myHostsInFolders;
    public InstalledHostsDiscovery(LocalPaths localPaths);
    private static InstalledHostsDiscovery();
    public IEnumerable`1<InstallableHostInFolder> AllInstalledHosts();
    public IEnumerable`1<InstallablePackageInHost> InstalledPackageList(HostInfo hostInfo);
    public IEnumerable`1<FileSystemPath> FindHostFolders(string hostFullIdentifier);
    [NotNullAttribute]
public static ICollection`1<InstallableHostInFolder> DiscoverHosts(LocalPaths localPaths, bool skipInstallDirValidation);
    private static bool ValidateHostInstallDir(HostInfo hostInfo, FileSystemPath folder);
    private static bool ValidateHostContent(InstallableHost host);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Install.Installable.InstalledProductsDiscoveryComponent : object {
    private IApplicationHost myApplicationHost;
    private Lazy`1<bool> myIsLocalInstallation;
    private FileSystemPath myCurrentAssemblyFolder;
    private LocalPaths myLocalPaths;
    private IEnumerable`1<InstallableHostInFolder> myAllHosts;
    [CompilerGeneratedAttribute]
private static Func`2<InstallableHostInFolder, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate5;
    public InstalledProductsDiscoveryComponent(IAssemblyFolderLocator locator, IApplicationHost applicationHost);
    [CanBeNullAttribute]
public FileSystemPath GetInstalledHostFolder(string hostName);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetInstalledHostFolder>b__4(InstallableHostInFolder x);
}
public class JetBrains.Application.Install.Installable.NugetGalleryPackage : object {
    private static ILogger ourLogger;
    private IPackage myPackage;
    [CompilerGeneratedAttribute]
private static Func`2<PackageDependencySet, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<PackageDependency, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public string Id { get; }
    public SemanticVersion Version { get; }
    public InstallablePackage Installable { get; }
    public String[] DependencyIds { get; }
    public NugetGalleryPackage(IPackage package);
    private static NugetGalleryPackage();
    public sealed virtual string get_Id();
    public sealed virtual SemanticVersion get_Version();
    public sealed virtual InstallablePackage get_Installable();
    public sealed virtual String[] get_DependencyIds();
    public sealed virtual IPackage GetPackage();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <get_DependencyIds>b__0(PackageDependencySet x);
    [CompilerGeneratedAttribute]
private static string <get_DependencyIds>b__1(PackageDependency y);
}
public class JetBrains.Application.Install.Installable.PackageDependencies : object {
    private OneToListMap`2<string, string> myZoneToSuccessorsMap;
    private OneToListMap`2<string, string> myZoneToPredecessorsMap;
    private OneToListMap`2<string, string> myZoneToInheritorsMap;
    public HashSet`1<string> AllZoneParts;
    public IList`1<InstallablePackage> AllPackages;
    [CompilerGeneratedAttribute]
private static Func`2<InstallablePackage, JetSubplatformZoningSpecArtifact> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<JetSubplatformZoningSpecArtifact, JetZoneDefSpec[]> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<JetZoneDefSpec[], IEnumerable`1<JetZoneDefSpec>> CS$<>9__CachedAnonymousMethodDelegate5;
    public PackageDependencies(IList`1<InstallablePackage> allPackages);
    public void BuildRelations();
    private void BuildZoneRelations();
    private HashSet`1<string> BuildAllZoneParts(IList`1<InstallablePackage> installablePackages);
    public IEnumerable`1<string> Expand(ICollection`1<string> zones);
    private HashSet`1<string> ExpendToInherited(ICollection`1<string> zones);
    [CompilerGeneratedAttribute]
private static JetSubplatformZoningSpecArtifact <BuildZoneRelations>b__0(InstallablePackage x);
    [CompilerGeneratedAttribute]
private static JetZoneDefSpec[] <BuildZoneRelations>b__1(JetSubplatformZoningSpecArtifact x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<JetZoneDefSpec> <BuildZoneRelations>b__2(JetZoneDefSpec[] x);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.PackageMetadata>")]
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.PackageMetadata>")]
[JsonObjectAttribute]
public class JetBrains.Application.Install.Installable.PackageMetadata : object {
    [DataMemberAttribute]
public string Id;
    [DataMemberAttribute]
public JetSemanticVersion Version;
    [DataMemberAttribute]
public string Title;
    [DataMemberAttribute]
public Uri IconUrl;
    [DataMemberAttribute]
public string Description;
    [DataMemberAttribute]
public string Summary;
    [DataMemberAttribute]
public string ReleaseNotes;
    [DataMemberAttribute]
public String[] Authors;
    [DataMemberAttribute]
public string Copyright;
    [DataMemberAttribute]
public string Tags;
    [DataMemberAttribute]
public Uri ProjectUrl;
    [DataMemberAttribute]
public Uri LicenseUrl;
    public virtual string ToString();
}
internal static class JetBrains.Application.Install.Installable.PackageMetadataEx : object {
    public static PackageMetadata FromNugetMetadata(IPackageMetadata metadata);
}
[BuildHelperAttribute]
public class JetBrains.Application.Install.InstallationData.EmptyTransformInstallationData : object {
    private double JetBrains.Application.Install.InstallationData.ITransformInstallationData.Priority { get; }
    private sealed virtual override double JetBrains.Application.Install.InstallationData.ITransformInstallationData.get_Priority();
    private sealed virtual override InstallationDataTransform JetBrains.Application.Install.InstallationData.ITransformInstallationData.ApplyTransform(InstallationDataTransform installdata);
}
public abstract class JetBrains.Application.Install.InstallationData.InstallationData : object {
    public static ILogger Logger;
    [NotNullAttribute]
public IList`1<InstalledFolder> Folders;
    [NotNullAttribute]
public IList`1<SharedMsiArtifact> SharedMsies;
    [NotNullAttribute]
public IList`1<PostInstallExecutableArtifact> PostInstallExecutables;
    [NotNullAttribute]
public IList`1<InstalledRegistryKey> RegistryKeys;
    [NotNullAttribute]
public IList`1<InstalledRegistryValue> RegistryValues;
    [CompilerGeneratedAttribute]
private static Action`1<InstalledRegistryKey> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<InstalledRegistryValue> CS$<>9__CachedAnonymousMethodDelegate3;
    protected InstallationData(IStructuredStorage structuredStorage);
    private static InstallationData();
    public sealed virtual void GetObjectData(IStructuredStorage structuredStorage);
    public void AssertValid();
    public void MergeWith(InstallationData addon);
    public void RemoveDuplicates();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static void <AssertValid>b__0(InstalledRegistryKey key);
    [CompilerGeneratedAttribute]
private static void <AssertValid>b__1(InstalledRegistryValue value);
}
public static class JetBrains.Application.Install.InstallationData.InstallationDataBuildSteps : object {
    [CompilerGeneratedAttribute]
private static Func`2<ITransformInstallationData, double> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ITransformInstallationData, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<ITransformInstallationData, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [NotNullAttribute]
[BuildStepAttribute]
public static InstallationDataFinal ApplyTransform(InstallationDataOriginal original, ITransformInstallationData[] transformers, ILogger logger);
    [BuildStepAttribute]
public static InstallationDataOriginalPart PackFilesAndRegistryArtifactsIntoOrignialPart(InstalledRegistryKey[] keys, InstalledRegistryValue[] values, InstalledFolder[] files, SharedMsiArtifact[] sharedMsiArtifacts, PostInstallExecutableArtifact[] postInstallExecutables);
    [BuildStepAttribute]
public static InstallationDataOriginal PackTogetherOriginalParts(InstallationDataOriginalPart[] parts);
    [CompilerGeneratedAttribute]
private static double <ApplyTransform>b__0(ITransformInstallationData tr);
    [CompilerGeneratedAttribute]
private static string <ApplyTransform>b__1(ITransformInstallationData tr);
    [CompilerGeneratedAttribute]
private static string <ApplyTransform>b__2(ITransformInstallationData tr);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataFinal : InstallationData {
    public InstallationDataFinal(IStructuredStorage structuredStorage);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataOriginal : InstallationData {
    public InstallationDataOriginal(IStructuredStorage structuredStorage);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataOriginalPart : InstallationData {
    public InstallationDataOriginalPart(IStructuredStorage structuredStorage);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataTransform : InstallationData {
}
public enum JetBrains.Application.Install.InstallationData.InstallationMacroName : Enum {
    public int value__;
    public static InstallationMacroName PackageCodeBase;
    public static InstallationMacroName SystemDir;
    public static InstallationMacroName ProductBinariesDir;
    public static InstallationMacroName DateTime;
}
public enum JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot : Enum {
    public int value__;
    public static InstallationSourceDirRoot ProductBinariesDir;
    public static InstallationSourceDirRoot ReferencesDirectories;
}
public enum JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot : Enum {
    public int value__;
    public static InstallationTargetDirRoot InstallDir;
    public static InstallationTargetDirRoot StartMenuPrograms;
    public static InstallationTargetDirRoot DevEnvInstallDir;
    public static InstallationTargetDirRoot DevEnvRootDir;
}
[PublicAPIAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledFile : InstalledFileItemBase {
    public Lazy`1<PropertyBag> Metadata;
    [NotNullAttribute]
public SimpleFileItem SourceFile;
    [CompilerGeneratedAttribute]
private static Func`1<PropertyBag> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`1<PropertyBag> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`1<PropertyBag> CS$<>9__CachedAnonymousMethodDelegate5;
    public InstalledFile(IStructuredStorage structuredStorage);
    public InstalledFile(SimpleFileItem source, string sTargetName);
    public virtual void GetObjectData(IStructuredStorage storage);
    public static bool op_Equality(InstalledFile left, InstalledFile right);
    public static bool op_Inequality(InstalledFile left, InstalledFile right);
    private void AddExceptionData(Exception ex);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledFile>.CompareTo(InstalledFile other);
    public sealed virtual bool Equals(InstalledFile other);
    [CompilerGeneratedAttribute]
private static PropertyBag <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static PropertyBag <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static PropertyBag <.ctor>b__4();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__7();
}
public class JetBrains.Application.Install.InstallationData.InstalledFileAccessControl : object {
    public static PropertyId`1<InstalledFileAccessControl> AccessControl;
    public IList`1<AccessControlEntry> Entries;
    private static InstalledFileAccessControl();
}
public abstract class JetBrains.Application.Install.InstallationData.InstalledFileItemBase : object {
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [NotNullAttribute]
public string TargetName { get; private set; }
    protected InstalledFileItemBase(IStructuredStorage structuredStorage);
    public InstalledFileItemBase(string sTargetName);
    public virtual void GetObjectData(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
private void set_TargetName(string value);
    public static bool op_Equality(InstalledFileItemBase left, InstalledFileItemBase right);
    public static bool op_Inequality(InstalledFileItemBase left, InstalledFileItemBase right);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledFileItemBase>.CompareTo(InstalledFileItemBase other);
    public sealed virtual bool Equals(InstalledFileItemBase other);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledFolder : object {
    public static ILogger Logger;
    private IList`1<InstalledFileItemBase> myFiles;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <TargetDir>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationTargetDirRoot <TargetRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<InstalledFileItemBase> CS$<>9__CachedAnonymousMethodDelegate6;
    [NotNullAttribute]
public IList`1<InstalledFileItemBase> Files { get; }
    public string Id { get; private set; }
    public RelativePath TargetDir { get; private set; }
    public InstallationTargetDirRoot TargetRoot { get; private set; }
    public InstalledFolder(IStructuredStorage structuredStorage);
    public InstalledFolder(string id, InstallationTargetDirRoot targetRoot, RelativePath targetDir);
    private static InstalledFolder();
    public sealed virtual void GetObjectData(IStructuredStorage structuredStorage);
    public IList`1<InstalledFileItemBase> get_Files();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public RelativePath get_TargetDir();
    [CompilerGeneratedAttribute]
private void set_TargetDir(RelativePath value);
    [CompilerGeneratedAttribute]
public InstallationTargetDirRoot get_TargetRoot();
    [CompilerGeneratedAttribute]
private void set_TargetRoot(InstallationTargetDirRoot value);
    [NotNullAttribute]
public InstalledFolder AddFile(InstalledFileItemBase file);
    [NotNullAttribute]
public InstalledFolder AddFile(SimpleFileItem source, string sTargetName);
    public void AssertValid();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4(BinaryWriter writer);
    [CompilerGeneratedAttribute]
private static void <AssertValid>b__5(InstalledFileItemBase file);
}
public enum JetBrains.Application.Install.InstallationData.InstalledRegistryHive : Enum {
    public int value__;
    public static InstalledRegistryHive Hkcr;
    public static InstalledRegistryHive Hklm;
    public static InstalledRegistryHive Hkcu;
    public static InstalledRegistryHive Hkmu;
}
public abstract class JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase : object {
    public static string KeyName;
    [CompilerGeneratedAttribute]
private InstalledRegistryHive <Hive>k__BackingField;
    [CompilerGeneratedAttribute]
private BackSlashSeparatedRelativePath <Key>k__BackingField;
    public InstalledRegistryHive Hive { get; protected set; }
    [NotNullAttribute]
public BackSlashSeparatedRelativePath Key { get; protected set; }
    protected InstalledRegistryItemBase(IStructuredStorage structuredStorage);
    public InstalledRegistryItemBase(InstalledRegistryHive hive, BackSlashSeparatedRelativePath key);
    public virtual void GetObjectData(IStructuredStorage structuredStorage);
    [CompilerGeneratedAttribute]
public InstalledRegistryHive get_Hive();
    [CompilerGeneratedAttribute]
protected void set_Hive(InstalledRegistryHive value);
    [CompilerGeneratedAttribute]
public BackSlashSeparatedRelativePath get_Key();
    [CompilerGeneratedAttribute]
protected void set_Key(BackSlashSeparatedRelativePath value);
    public RegistryKey GetWindowsRegistryRootKey(IsolationOptions isolation);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase>.CompareTo(InstalledRegistryItemBase other);
    public sealed virtual bool Equals(InstalledRegistryItemBase other);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4(BinaryWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledRegistryKey : InstalledRegistryItemBase {
    public InstalledRegistryKey(InstalledRegistryHive hive, BackSlashSeparatedRelativePath key);
    public InstalledRegistryKey(IStructuredStorage structuredStorage);
    [NotNullAttribute]
public InstalledRegistryKey CreateKey(BackSlashSeparatedRelativePath relpath);
    [NotNullAttribute]
public InstalledRegistryValue CreateValue(string name, object value);
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledRegistryKey>.CompareTo(InstalledRegistryKey other);
    public sealed virtual bool Equals(InstalledRegistryKey registryKeyXml);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledRegistryValue : InstalledRegistryItemBase {
    public static string KeyName;
    private Byte[] myValueBinary;
    [CompilerGeneratedAttribute]
private bool <IsPermanent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private InstalledRegistryValueType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool IsPermanent { get; public set; }
    [CanBeNullAttribute]
public string Name { get; public set; }
    public InstalledRegistryValueType Type { get; public set; }
    public string Value { get; public set; }
    [CanBeNullAttribute]
public Byte[] ValueBinary { get; }
    public InstalledRegistryValue(IStructuredStorage structuredStorage);
    public InstalledRegistryValue(InstalledRegistryHive hive, BackSlashSeparatedRelativePath key, string name, object value);
    public virtual void GetObjectData(IStructuredStorage structuredStorage);
    [CompilerGeneratedAttribute]
public bool get_IsPermanent();
    [CompilerGeneratedAttribute]
public void set_IsPermanent(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public InstalledRegistryValueType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(InstalledRegistryValueType value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public Byte[] get_ValueBinary();
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledRegistryValue>.CompareTo(InstalledRegistryValue other);
    public sealed virtual bool Equals(InstalledRegistryValue registryValueXml);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4(BinaryWriter writer);
}
public enum JetBrains.Application.Install.InstallationData.InstalledRegistryValueType : Enum {
    public int value__;
    public static InstalledRegistryValueType Dword;
    public static InstalledRegistryValueType String;
    public static InstalledRegistryValueType Binary;
}
[PublicAPIAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile : InstalledFileItemBase {
    private static string StreamName;
    [CompilerGeneratedAttribute]
private FileTextEncoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <OriginalDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalName>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationTargetDirRoot <OriginalRoot>k__BackingField;
    public FileTextEncoding Encoding { get; private set; }
    public RelativePath OriginalDir { get; private set; }
    public string OriginalName { get; private set; }
    public InstallationTargetDirRoot OriginalRoot { get; private set; }
    public InstalledReplaceTextInFile(IStructuredStorage structuredStorage);
    public InstalledReplaceTextInFile(InstallationTargetDirRoot originalRoot, RelativePath originalDir, string originalName, string sTargetName, FileTextEncoding encoding);
    [CompilerGeneratedAttribute]
public FileTextEncoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(FileTextEncoding value);
    [CompilerGeneratedAttribute]
public RelativePath get_OriginalDir();
    [CompilerGeneratedAttribute]
private void set_OriginalDir(RelativePath value);
    [CompilerGeneratedAttribute]
public string get_OriginalName();
    [CompilerGeneratedAttribute]
private void set_OriginalName(string value);
    [CompilerGeneratedAttribute]
public InstallationTargetDirRoot get_OriginalRoot();
    [CompilerGeneratedAttribute]
private void set_OriginalRoot(InstallationTargetDirRoot value);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InstalledReplaceTextInFile other);
    [NotNullAttribute]
public static string FormatMacroReference(StandardMacrosForReplaceText macroForReplaceText);
    public virtual int GetHashCode();
    public virtual void GetObjectData(IStructuredStorage structuredStorage);
    public static bool op_Equality(InstalledReplaceTextInFile left, InstalledReplaceTextInFile right);
    public static bool op_Inequality(InstalledReplaceTextInFile left, InstalledReplaceTextInFile right);
    [CanBeNullAttribute]
public static Encoding ResolveEncoding(FileTextEncoding encoding);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private object <AssertValid>b__3();
    [CompilerGeneratedAttribute]
private object <AssertValid>b__4();
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__7(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__8(BinaryWriter writer);
}
[PublicAPIAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledShellLink : InstalledFileItemBase {
    private static string StreamName;
    [NotNullAttribute]
public RelativePath ShellLinkTargetDir;
    [NotNullAttribute]
public string ShellLinkTargetName;
    public InstallationTargetDirRoot ShellLinkTargetRoot;
    public InstalledShellLink(IStructuredStorage structuredStorage);
    public InstalledShellLink(string sShellLinkFileTargetName, InstallationTargetDirRoot shellLinkTargetRoot, RelativePath shellLinkTargetDir, string shellLinkTargetName);
    public virtual void GetObjectData(IStructuredStorage storage);
    public static bool op_Equality(InstalledShellLink left, InstalledShellLink right);
    public static bool op_Inequality(InstalledShellLink left, InstalledShellLink right);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(InstalledShellLink other);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4(BinaryWriter writer);
}
public interface JetBrains.Application.Install.InstallationData.ITransformInstallationData {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    [CanBeNullAttribute]
public abstract virtual InstallationDataTransform ApplyTransform(InstallationDataTransform installdata);
}
[BuildHelperAttribute]
internal class JetBrains.Application.Install.InstallationData.TransformInstallationData : object {
    public double Priority { get; }
    public sealed virtual double get_Priority();
    public sealed virtual InstallationDataTransform ApplyTransform(InstallationDataTransform installdata);
}
[AttributeUsageAttribute("1")]
public class JetBrains.Application.Install.InstallBindingRedirectionsConfigFileAttribute : PartAttribute {
    [CanBeNullAttribute]
private string mySourceRelativePath;
    private InstallationSourceDirRoot mySourceRoot;
    [NotNullAttribute]
private string myTargetConfigFileName;
    [CanBeNullAttribute]
public string SourceRelativePath { get; }
    public InstallationSourceDirRoot SourceRoot { get; }
    [NotNullAttribute]
public string TargetConfigFileName { get; }
    public InstallBindingRedirectionsConfigFileAttribute(string sTargetConfigFileName);
    public InstallBindingRedirectionsConfigFileAttribute(string sTargetConfigFileName, InstallationSourceDirRoot sourceroot, string sSourceRelativePath);
    [DebuggerStepThroughAttribute]
public string get_SourceRelativePath();
    [DebuggerStepThroughAttribute]
public InstallationSourceDirRoot get_SourceRoot();
    [DebuggerStepThroughAttribute]
public string get_TargetConfigFileName();
}
public static class JetBrains.Application.Install.InstallDirInstaller : object {
    public static string RegistryCompanyNameValueName;
    public static string RegistryInstallDirValueName;
    public static string RegistryProductDIsplayNameValueName;
    public static string RegistryProductFullNameValueName;
    public static string RegistryProductNameValueName;
    public static string RegistryProductVersionValueName;
    private static InstallDirInstaller();
    [BuildStepAttribute]
public static void EmitInstallDirIntoRegistry(HostInfo hostInfo, InstalledRegistryKey& key, IList`1& values);
    public static BackSlashSeparatedRelativePath GetHostRegistryKey(HostInfo hostInfo);
}
[ObsoleteAttribute("Being deleted.")]
public class JetBrains.Application.Install.Installer : object {
    private string myVsRootSuffix;
    private Version myVsVersion;
    [CompilerGeneratedAttribute]
private InstallerSourceFoldersResolver <SourceFoldersResolver>k__BackingField;
    [NotNullAttribute]
public InstallationData InstallationData { get; }
    public bool IsVsVersionNeutral { get; }
    [NotNullAttribute]
public InstallerSourceFoldersResolver SourceFoldersResolver { get; private set; }
    [NotNullAttribute]
public Version VsVersion { get; }
    public InstallationData get_InstallationData();
    public bool get_IsVsVersionNeutral();
    [CompilerGeneratedAttribute]
public InstallerSourceFoldersResolver get_SourceFoldersResolver();
    [CompilerGeneratedAttribute]
private void set_SourceFoldersResolver(InstallerSourceFoldersResolver value);
    public Version get_VsVersion();
    private void AssertVersionSpecific();
}
public abstract class JetBrains.Application.Install.InstallerAttributeBase : Attribute {
    private InstallerVsVersionAffinity myVsVersionAffinity;
    public InstallerVsVersionAffinity VsVersionAffinity { get; }
    public InstallerAttributeBase(InstallerVsVersionAffinity vsVersionAffinity);
    public InstallerVsVersionAffinity get_VsVersionAffinity();
}
public static class JetBrains.Application.Install.InstallerSingleInstanceHelper : object {
    [NotNullAttribute]
public static FileSystemPath GetLockFile();
    public static bool IsAnotherInstanceRunning();
}
public enum JetBrains.Application.Install.InstallerVsVersionAffinity : Enum {
    public int value__;
    public static InstallerVsVersionAffinity Neutral;
    public static InstallerVsVersionAffinity Specific;
    public static InstallerVsVersionAffinity CallAlways;
}
[AttributeUsageAttribute("1")]
[ObsoleteAttribute("The install-stage lookup of source files is not supported anymore. Any payload files should either be embedded in Subplatform package, or delivered in dependent Nuget packages.")]
public class JetBrains.Application.Install.InstallFileAttribute : PartAttribute {
    [NotNullAttribute]
private string myId;
    [NotNullAttribute]
private string mySourceRelativePath;
    private InstallationSourceDirRoot mySourceRoot;
    [NotNullAttribute]
private RelativePath myTargetRelativeDir;
    private InstallationTargetDirRoot myTargetRoot;
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public string SourceRelativePath { get; }
    public InstallationSourceDirRoot SourceRoot { get; }
    [NotNullAttribute]
public RelativePath TargetRelativeDir { get; }
    public InstallationTargetDirRoot TargetRoot { get; }
    public InstallFileAttribute(string id, InstallationTargetDirRoot targetroot, string sTargetRelativeDir, InstallationSourceDirRoot sourceroot, string sSourceRelativePath);
    public string get_Id();
    public string get_SourceRelativePath();
    public InstallationSourceDirRoot get_SourceRoot();
    public RelativePath get_TargetRelativeDir();
    public InstallationTargetDirRoot get_TargetRoot();
}
[ObsoleteAttribute("The install-stage lookup of source files is not supported anymore. Any payload files should either be embedded in Subplatform package, or delivered in dependent Nuget packages.")]
public class JetBrains.Application.Install.InstallFromReferencesDirectoryAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationTargetDirRoot <TargetRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <TargetRelativeDir>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <SourceRelativeDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRecursive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowEmpty>k__BackingField;
    public string Id { get; private set; }
    public InstallationTargetDirRoot TargetRoot { get; private set; }
    [NotNullAttribute]
public RelativePath TargetRelativeDir { get; private set; }
    [NotNullAttribute]
public RelativePath SourceRelativeDir { get; private set; }
    public bool IsRecursive { get; private set; }
    public bool AllowEmpty { get; private set; }
    public InstallFromReferencesDirectoryAttribute(string id, InstallationTargetDirRoot targetroot, string sTargetRelativeDir, string sSourceRelativeDir, Recursive recursive, bool allowEmpty);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public InstallationTargetDirRoot get_TargetRoot();
    [CompilerGeneratedAttribute]
private void set_TargetRoot(InstallationTargetDirRoot value);
    [CompilerGeneratedAttribute]
public RelativePath get_TargetRelativeDir();
    [CompilerGeneratedAttribute]
private void set_TargetRelativeDir(RelativePath value);
    [CompilerGeneratedAttribute]
public RelativePath get_SourceRelativeDir();
    [CompilerGeneratedAttribute]
private void set_SourceRelativeDir(RelativePath value);
    [CompilerGeneratedAttribute]
public bool get_IsRecursive();
    [CompilerGeneratedAttribute]
private void set_IsRecursive(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowEmpty();
    [CompilerGeneratedAttribute]
private void set_AllowEmpty(bool value);
}
public interface JetBrains.Application.Install.IPackageGallery {
    [CanBeNullAttribute]
public Uri GalleryUri { get; }
    public bool AllowPrerelease { get; }
    public abstract virtual IList`1<IGalleryPackage> Load(IProgressIndicator pi, OnError onerror);
    public abstract virtual Uri get_GalleryUri();
    public abstract virtual bool get_AllowPrerelease();
}
[ObsoleteAttribute("Use build steps and artifacts of the installation data family. This interface won't be called anymore.")]
public interface JetBrains.Application.Install.IStaticInstaller {
    [ObsoleteAttribute("Use build steps and artifacts of the installation data family. This interface won't be called anymore.")]
[CanBeNullAttribute]
public abstract virtual InstallationData InstallStatic(Installer installer);
}
[ObsoleteAttribute("Use build steps and artifacts of the installation data family. This interface won't be called anymore.")]
public interface JetBrains.Application.Install.ITypeAttributeInstaller {
    [ObsoleteAttribute("Use build steps and artifacts of the installation data family. This interface won't be called anymore.")]
[CanBeNullAttribute]
public abstract virtual InstallationData InstallInstance(Installer installer, Type attributeOwner, object attributeInstance);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.Launcher.CleanLauncherPostCompileArtifact : CleanLauncherArtifactBase {
    public CleanLauncherPostCompileArtifact(LauncherConfig config, SimpleFileItem executable, SimpleFileItem programDatabase);
    public CleanLauncherPostCompileArtifact(IStructuredStorage storage);
}
public static class JetBrains.Application.Install.Launcher.CleanLauncherTasksPostCompile : object {
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOnPackageEx, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static CtorDelegate`1<CleanLauncherPostCompileArtifact> CS$<>9__CachedAnonymousMethodDelegate3;
    [BuildStepAttribute]
public static CleanLauncherPostCompileArtifact[] ProduceCleanLauncherPostCompileArtifacts(SubplatformsInAllInputPackages inputs, ILogger logger);
    [CompilerGeneratedAttribute]
private static bool <ProduceCleanLauncherPostCompileArtifacts>b__0(SubplatformOnPackageEx sub);
    [CompilerGeneratedAttribute]
private static CleanLauncherPostCompileArtifact <ProduceCleanLauncherPostCompileArtifacts>b__1(LauncherConfig cfg, SimpleFileItem exe, SimpleFileItem pdb);
}
public static class JetBrains.Application.Install.LocalInstall.TmpLocalInstallDefaults : object {
    [BuildStepAttribute]
public static void GuessDefaultsForTests_LocalRegisterIsolationOptions(LocalRegisterIsolationOptionsArtifact& registerIsolationOptionsArtifact, Optional`1<LocalRegisterIsolationOptionsOverrideArtifact> overrideIsolationOptions);
    [BuildStepAttribute]
public static void GuessDefaultsForTests_Product(ProductNameAndVersionArtifact& product);
    [BuildStepAttribute]
public static void GuessDefaultsForTests_WindowBranding(ProductNameAndVersionArtifact product, WindowBrandingArtifact& windowBrandingArtifact);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.LocalInstallationPrerequirement : object {
}
public static class JetBrains.Application.Install.LocalInstaller : object {
    [CompilerGeneratedAttribute]
private static Func`2<LocalInstallerRegistryMacro, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<LocalInstallerRegistryMacro, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledFileItemBase, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [BuildStepAttribute]
public static LocalInstallPart Install(LocalRegisterIsolationOptionsArtifact localRegisterIsolationOptionsArtifact, ILogger logger, ResolvedInstallationTargetDirRoot[] targetdirs, LocalInstallerRegistryMacro[] macros, InstallationDataFinal data, LocalInstallationPrerequirement[] prerequirements, UninstallableFile[]& uninstallableFiles);
    [BuildStepAttribute]
public static LocalUninstallArtifact Uninstall(LocalRegisterIsolationOptionsArtifact localRegisterIsolationOptionsArtifact, ILogger logger, ResolvedInstallationTargetDirRoot[] targetdirs, LocalInstallerRegistryMacro[] macros, InstallationDataFinal data);
    [BuildStepAttribute]
public static LocalInstallWithPostInstallStepsPart ValidateOnLocalInstall(PostCompileValidationResult[] validated);
    private static void InstallCore(InstallationDataFinal data, RegistrationStage stage, LocalInstallerRegistryMacro[] macros, ResolvedInstallationTargetDirRoot[] targetdirs, ILogger logger, IsolationOptions isolation, UninstallableFile[]& uninstallableFiles);
    private static void InstallFiles(IList`1<InstalledFolder> dataxml, RegistrationStage stage, ILogger Logger, Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot, IsolationOptions isolationOptions, List`1<UninstallableFile> localUninstallable);
    private static void InstallFiles_File(InstalledFile filexml, FileSystemPath diTarget, RegistrationStage stage, ILogger Logger);
    private static void InstallFiles_ReplaceTextInFile(InstalledReplaceTextInFile replacement, FileSystemPath diTarget, RegistrationStage stage, Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot, Dictionary`2<string, string> macros, IsolationOptions isolationOptions, ILogger Logger);
    private static void InstallFiles_ShellLink(InstalledShellLink link, FileSystemPath diTarget, RegistrationStage stage, IsolationOptions isolationOptions, Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot, ILogger Logger, List`1<UninstallableFile> localUninstallable);
    private static void InstallRegistry(IList`1<InstalledRegistryKey> regkeys, IList`1<InstalledRegistryValue> regvalues, RegistrationStage registrationStage, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static Dictionary`2<string, string> PrepReplaceTextInFileMacros(Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot);
    private static void RegisterKey(InstalledRegistryKey key, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static void RegisterValue(InstalledRegistryValue value, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static void UnregisterKey(InstalledRegistryKey key, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static void UnregisterValue(InstalledRegistryValue value, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <InstallCore>b__2(LocalInstallerRegistryMacro macro);
    [CompilerGeneratedAttribute]
private static string <InstallCore>b__3(LocalInstallerRegistryMacro macro);
    [CompilerGeneratedAttribute]
private static bool <InstallFiles>b__a(InstalledFileItemBase fileitem);
}
public static class JetBrains.Application.Install.LocalInstallStandaloneLaunchers : object {
    public static FileSystemPath ProductBinariesDirMacros;
    [CompilerGeneratedAttribute]
private static Func`2<SerializedHostComponentItemArtifact, object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<LocalInstallRootSuffix, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<StuffedLauncherArtifact, RelativePath> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<StuffedLauncherArtifact, IEnumerable`1<SimpleFileItem>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<SimpleFileItem, InstalledFile> CS$<>9__CachedAnonymousMethodDelegate9;
    private static LocalInstallStandaloneLaunchers();
    [BuildStepAttribute]
public static void EmitInstallTimeLauncherHosts(StandaloneLauncherHostArtifact[] hosts, SerializedHostComponentItemArtifact[] hostcomponents, CleanLauncherPostCompileArtifact[] launchersClean, NativeResourceForLauncher[] resources, ILogger logger, IAuthenticodeSigningService signer, Optional`1<LocalInstallRootSuffix> rootSuffix, IList`1& stuffedlaunchers, IList`1& osintegrations);
    [BuildStepAttribute]
public static IEnumerable`1<InstalledFolder> InstallLauncherFiles(StuffedLauncherArtifact[] launchers, ILogger logger);
    [BuildStepAttribute]
public static InstallationDataOriginalPart InstallLauncherHostOsIntegration(IList`1<StandaloneLauncherHostOsIntegration> osintegrations, ILogger logger, Optional`1<SkipStandaloneHostOsIntegration> skiposint);
    [BuildStepAttribute]
public static IList`1<StandaloneLauncherHostOsIntegration> RetrieveCompileTimeLauncherHostOsIntegrations(Lifetime lifetime, AllAssembliesOnPackagesEx allassPkg, ILogger logger);
    private static void MakeLnkAndFileAssocForHost(StandaloneLauncherHostOsIntegration integration, InstallationData installdata, ILogger logger);
    [CanBeNullAttribute]
private static RelativePath MakeLnkAndFileAssocForHost_ChooseLauncher(StandaloneLauncherHostOsIntegration hosti, ILogger logger);
    [CompilerGeneratedAttribute]
private static object <EmitInstallTimeLauncherHosts>b__0(SerializedHostComponentItemArtifact item);
    [CompilerGeneratedAttribute]
private static string <EmitInstallTimeLauncherHosts>b__1(LocalInstallRootSuffix h);
    [CompilerGeneratedAttribute]
private static RelativePath <InstallLauncherFiles>b__4(StuffedLauncherArtifact l);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<SimpleFileItem> <InstallLauncherFiles>b__5(StuffedLauncherArtifact l);
    [CompilerGeneratedAttribute]
private static InstalledFile <InstallLauncherFiles>b__6(SimpleFileItem file);
}
public static class JetBrains.Application.Install.LocalInstallTasksSinceClr4 : object {
    [BuildStepAttribute]
public static LocalInstallPart Link_ExtractPackagesToBinDir_LocalInstall(ExtractPackagesToBinDir extract);
}
public class JetBrains.Application.Install.NoDefaultPackageSourceProvider : object {
    private IPackageSourceProvider myPackageSourceProvider;
    public NoDefaultPackageSourceProvider(IPackageSourceProvider packageSourceProvider);
    public sealed virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public sealed virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public sealed virtual void DisablePackageSource(PackageSource source);
    public sealed virtual bool IsPackageSourceEnabled(PackageSource source);
}
public class JetBrains.Application.Install.OptimizedMetadata : object {
    private PackageMetadata myPackageMetadata;
    public string Id { get; }
    public SemanticVersion Version { get; }
    public string Title { get; }
    public IEnumerable`1<string> Authors { get; }
    public IEnumerable`1<string> Owners { get; }
    public Uri IconUrl { get; }
    public Uri LicenseUrl { get; }
    public Uri ProjectUrl { get; }
    public bool RequireLicenseAcceptance { get; }
    public bool DevelopmentDependency { get; }
    public string Description { get; }
    public string Summary { get; }
    public string ReleaseNotes { get; }
    public string Language { get; }
    public string Tags { get; }
    public string Copyright { get; }
    public IEnumerable`1<FrameworkAssemblyReference> FrameworkAssemblies { get; }
    public ICollection`1<PackageReferenceSet> PackageAssemblyReferences { get; }
    public IEnumerable`1<PackageDependencySet> DependencySets { get; }
    public Version MinClientVersion { get; }
    public OptimizedMetadata(PackageMetadata packageMetadata);
    public sealed virtual string get_Id();
    public sealed virtual SemanticVersion get_Version();
    public sealed virtual string get_Title();
    public sealed virtual IEnumerable`1<string> get_Authors();
    public sealed virtual IEnumerable`1<string> get_Owners();
    public sealed virtual Uri get_IconUrl();
    public sealed virtual Uri get_LicenseUrl();
    public sealed virtual Uri get_ProjectUrl();
    public sealed virtual bool get_RequireLicenseAcceptance();
    public sealed virtual bool get_DevelopmentDependency();
    public sealed virtual string get_Description();
    public sealed virtual string get_Summary();
    public sealed virtual string get_ReleaseNotes();
    public sealed virtual string get_Language();
    public sealed virtual string get_Tags();
    public sealed virtual string get_Copyright();
    public sealed virtual IEnumerable`1<FrameworkAssemblyReference> get_FrameworkAssemblies();
    public sealed virtual ICollection`1<PackageReferenceSet> get_PackageAssemblyReferences();
    public sealed virtual IEnumerable`1<PackageDependencySet> get_DependencySets();
    public sealed virtual Version get_MinClientVersion();
}
public class JetBrains.Application.Install.PackageGallery : object {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private WaveInfo <WaveInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <GalleryUri>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, int> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, IGalleryPackage> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static EventHandler`1<WebRequestEventArgs> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, string> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, IEnumerable`1<PackageDependency>> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, string> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<PackageDependencySet, IEnumerable`1<PackageDependency>> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<PackageDependencySet, IEnumerable`1<PackageDependency>> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, string> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, IPackage>, IPackage> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, SemanticVersion> CS$<>9__CachedAnonymousMethodDelegate24;
    public WaveInfo WaveInfo { get; private set; }
    public bool AllowPrerelease { get; private set; }
    public Uri GalleryUri { get; private set; }
    public PackageGallery(Uri galleryUri, bool allowPrerelease, WaveInfo waveInfo);
    private static PackageGallery();
    [CompilerGeneratedAttribute]
public WaveInfo get_WaveInfo();
    [CompilerGeneratedAttribute]
private void set_WaveInfo(WaveInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPrerelease();
    [CompilerGeneratedAttribute]
private void set_AllowPrerelease(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_GalleryUri();
    [CompilerGeneratedAttribute]
private void set_GalleryUri(Uri value);
    public virtual IList`1<IGalleryPackage> Load(IProgressIndicator pi, OnError onerror);
    protected virtual List`1<IPackage> AllPackages();
    private void TracePackages(List`1<IPackage> packages, object spec);
    protected List`1<IPackage> FilterPackages(List`1<IPackage> packages);
    private List`1<IPackage> SelectLatestVersions(List`1<IPackage> packages);
    private MatchesBundleResult MatchesBundleVersionOrNonWavePackage(IPackage package);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <Load>b__0(IPackage x);
    [CompilerGeneratedAttribute]
private static bool <Load>b__1(IPackage x);
    [CompilerGeneratedAttribute]
private static int <Load>b__2(IPackage x);
    [CompilerGeneratedAttribute]
private static IGalleryPackage <Load>b__3(IPackage x);
    [CompilerGeneratedAttribute]
private static void <AllPackages>b__8(object sender, WebRequestEventArgs eventArgs);
    [CompilerGeneratedAttribute]
private bool <FilterPackages>b__10(IPackage x);
    [CompilerGeneratedAttribute]
private bool <FilterPackages>b__11(IPackage x);
    [CompilerGeneratedAttribute]
private static string <FilterPackages>b__12(IPackage x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PackageDependency> <FilterPackages>b__13(IPackage x);
    [CompilerGeneratedAttribute]
private static string <FilterPackages>b__15(IPackage x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PackageDependency> <FilterPackages>b__17(PackageDependencySet x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PackageDependency> <FilterPackages>b__14(PackageDependencySet y);
    [CompilerGeneratedAttribute]
private static string <SelectLatestVersions>b__1f(IPackage x);
    [CompilerGeneratedAttribute]
private static IPackage <SelectLatestVersions>b__20(IGrouping`2<string, IPackage> x);
    [CompilerGeneratedAttribute]
private static SemanticVersion <SelectLatestVersions>b__21(IPackage y);
}
public class JetBrains.Application.Install.PackageSourceIds : object {
    public static string WavePackageId;
    public static string IsProduct;
    public static string IsHost;
    public static string IsAutoEnable;
    public static string JetBrainsStable;
    public static string JetBrainsPreRelease;
    public static string JetBrainsLocal;
    public static string JetBrainsCommunity;
    public static string JetBrainsCommunityPreRelease;
    private static PackageSourceIds();
}
public class JetBrains.Application.Install.PluginsRepository : object {
    private IFileSystem mySharedFileSystem;
    private IPackagePathResolver mySharedPackagePathResolver;
    [CompilerGeneratedAttribute]
private IPackageRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private SharedPackageRepository <SharedRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackageRepository <InstallationRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackageSourceProvider <PackageSource>k__BackingField;
    public IPackageRepository Repository { get; private set; }
    public SharedPackageRepository SharedRepository { get; private set; }
    public IPackageRepository InstallationRepository { get; private set; }
    public IPackageSourceProvider PackageSource { get; private set; }
    public PluginsRepository(IPackageRepositoryFactory packageRepositoryFactory, LocalPaths localPaths, HostInfo hostInfo);
    [CompilerGeneratedAttribute]
public IPackageRepository get_Repository();
    [CompilerGeneratedAttribute]
private void set_Repository(IPackageRepository value);
    [CompilerGeneratedAttribute]
public SharedPackageRepository get_SharedRepository();
    [CompilerGeneratedAttribute]
private void set_SharedRepository(SharedPackageRepository value);
    [CompilerGeneratedAttribute]
public IPackageRepository get_InstallationRepository();
    [CompilerGeneratedAttribute]
private void set_InstallationRepository(IPackageRepository value);
    [CompilerGeneratedAttribute]
public IPackageSourceProvider get_PackageSource();
    [CompilerGeneratedAttribute]
private void set_PackageSource(IPackageSourceProvider value);
    public IPackageManager GetPackageManager(IPackageRepository sourceRepository, ILogger logger, IPackageRepository localRepository, bool handleEvents);
    [CompilerGeneratedAttribute]
private void <GetPackageManager>b__3(object sender, PackageOperationEventArgs args);
    [CompilerGeneratedAttribute]
private void <GetPackageManager>b__4(object sender, PackageOperationEventArgs args);
}
public class JetBrains.Application.Install.ProductContentResourcePackageGallery : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private bool <AllowPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IPackage, NugetGalleryPackage> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool AllowPrerelease { get; private set; }
    public Uri GalleryUri { get; }
    public ProductContentResourcePackageGallery(bool isAllowPrerelease, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPrerelease();
    [CompilerGeneratedAttribute]
private void set_AllowPrerelease(bool value);
    public sealed virtual Uri get_GalleryUri();
    private sealed virtual override IList`1<IGalleryPackage> JetBrains.Application.Install.IPackageGallery.Load(IProgressIndicator pi, OnError onerror);
    private IList`1<IPackage> LoadDeferred(IProgressIndicator pi, OnError onerror);
    private IList`1<IPackage> LoadStreaming(IProgressIndicator pi, OnError onerror);
    [CompilerGeneratedAttribute]
private static NugetGalleryPackage <JetBrains.Application.Install.IPackageGallery.Load>b__0(IPackage x);
}
[BuildHelperAttribute]
public class JetBrains.Application.Install.ProductPartCatalogFromPackages : ProductPartCatalogForBuild {
    [CompilerGeneratedAttribute]
private static Func`2<IAssemblyItem, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IAssemblyItem, AssemblyNameInfo> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<InputPackage, IEnumerable`1<IAssemblyItem>> CS$<>9__CachedAnonymousMethodDelegate7;
    public ProductPartCatalogFromPackages(Lifetime l, InputPackage[] b, IBuildTimeRealizedAssemblyItemUnification d, ILogger e, AllAssembliesOnEverything f);
    private static Tuple`2<PartCatalog, IAssemblyMasterBinder> GetProductPartsCatalogFromProductAssemblies(Lifetime lifetime, InputPackage[] ipkgs, IBuildTimeRealizedAssemblyItemUnification realizedAssemblyItemUnification, AllAssembliesOnEverything allass, ILogger logger);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <GetProductPartsCatalogFromProductAssemblies>b__0(IAssemblyItem ai);
    [CompilerGeneratedAttribute]
private static AssemblyNameInfo <GetProductPartsCatalogFromProductAssemblies>b__1(IAssemblyItem ai);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IAssemblyItem> <GetProductPartsCatalogFromProductAssemblies>b__4(InputPackage pkg);
}
public enum JetBrains.Application.Install.RegistrationStage : Enum {
    public int value__;
    public static RegistrationStage Register;
    public static RegistrationStage Unregister;
}
[BaseTypeRequiredAttribute("JetBrains.Application.Install.IStaticInstaller")]
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.Install.StaticInstallerAttribute : InstallerAttributeBase {
    public StaticInstallerAttribute(InstallerVsVersionAffinity vsversionaffinity);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.Install.ITypeAttributeInstaller")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.Install.TypeAttributeInstallerAttribute : InstallerAttributeBase {
    private Type myAttributeToInstall;
    public Type AttributeToInstall { get; }
    public TypeAttributeInstallerAttribute(Type typeAttributeToInstall, InstallerVsVersionAffinity vsversionaffinity);
    public Type get_AttributeToInstall();
}
[DataContractAttribute]
[BuildArtifactAttribute]
public class JetBrains.Application.Install.UninstallableFile : object {
    public static string KeyUninstallableFile;
    [DataMemberAttribute]
public string Path;
    public UninstallableFile(IStructuredStorage storage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4(BinaryWriter writer);
}
public static class JetBrains.Application.Install.ValidateWhenMakingInstallers : object {
    [CompilerGeneratedAttribute]
private static Func`2<PostCompileValidationResult, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate3;
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile RequireValidation(PostCompileValidationResult[] validateds, DeployedFilesNamingScheme naming);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <RequireValidation>b__0(PostCompileValidationResult v);
}
public static class JetBrains.Application.Install.WebInstallerConstants : object {
    private static string StagingUpdatesGuardEapURI;
    private static string ProductionUpdatesGuardEapURI;
    private static string StagingURI;
    private static string ProductionURI;
    private static string StagingUpdatesGuardURI;
    private static string ProductionUpdatesGuardURI;
    public static string StagingJsonName;
    public static string StagingJsonNameEap;
    private static string StagingUpdatesUri;
    private static string ProductionUpstesUri;
    private static string StagingUpdatesUriEap;
    private static string ProductionUpdatesUriEap;
    private static string StagingBaseUri;
    private static string ProductionBaseUri;
    private static string StagingBaseUriEap;
    private static string ProductionBaseUriEap;
    public static string LightInstallerName;
    public static string LightInstallerNameEap;
    public static string VersionJsonName;
    public static string VersionJsonNameEap;
    public static string StagingVersionJsonUri;
    public static string StagingVersionJsonUriEap;
    public static string ProductionVersionJsonUri;
    public static string ProductionVersionJsonUriEap;
    public static bool Staging;
    public static string UpdatesGuardURI;
    public static string UpdatesGuardEapURI;
    public static string NugetUri;
    public static string UpdatesJsonUri;
    public static string UpdatesJsonUriEap;
    public static string BaseDownloadUri;
    public static string BaseDownloadUriEap;
    public static string VersionJsonUri;
    public static string VersionJsonEapUri;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static WebInstallerConstants();
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__0();
}
public static class JetBrains.Application.Install.WebInstallerUtils : object {
    public static JetSemanticVersion GetRemoteVersion(string url, ILogger logger, IWebProxy proxy);
}
[GuidAttribute("E3403EA3-34BB-4689-9365-F875E55BC2BA")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IApplicationActiveStateChangeSink {
    public abstract virtual void OnApplicationActiveStateChanged(int isActive);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CCF6531D-A313-484D-B678-B7058974AD43")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IForegroundIdleSink {
    public abstract virtual void OnForegroundIdle();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6C225FA3-5BD4-4EA9-A418-794A726CB32D")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IInputMessageSink {
    public abstract virtual void OnInputMessage(Void* hwnd, UInt32 message, Void* wParam, Void* lParam, POINT* ppt);
}
[GuidAttribute("D8DA2488-FDDC-43CB-9C2F-12EEDB08397D")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IKeyboardMessageSink {
    public abstract virtual void OnKeyboardMessage(UInt32 virtualKeyCode, UInt32 keystrokeMessageFlags);
}
[GuidAttribute("1C7785EB-3E51-43FF-B7B7-C4377915D20D")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IMouseMessageSink {
    public abstract virtual void OnMouseMessage(UInt32 message, Void* hwnd, POINT pt, UInt32 wHitTestCode, UIntPtr dwExtraInfo);
}
[GuidAttribute("E56A4995-41BE-4977-9B9D-57E3D0141AE6")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.INativeHookHandler {
    public abstract virtual Void* AdviseWindowMessage(IWindowMessageSink sink, Void* hwnd, UInt32 dwMessage, int isIncludingParentWindows, int isDeferredProcessingAllowed);
    public abstract virtual void UnadviseWindowMessage(Void* pCookie);
    public abstract virtual Void* AdviseWindowClassMessage(IWindowMessageSink sink, string className, UInt32 dwMessage, int isDeferredProcessingAllowed);
    public abstract virtual void UnadviseWindowClassMessage(Void* pCookie);
    public abstract virtual Void* AdviseApplicationActiveStateChange(IApplicationActiveStateChangeSink sink);
    public abstract virtual void UnadviseApplicationActiveStateChange(Void* pCookie);
    public abstract virtual Void* AdviseWindowScreenCoordinatesChange(IWindowScreenCoordinatesChangeSink sink, Void* hwnd);
    public abstract virtual void UnadviseWindowScreenCoordinatesChange(Void* pCookie);
    public abstract virtual Void* AdviseWindowRootParentChange(IWindowRootParentChangeSink sink, Void* hwnd);
    public abstract virtual void UnadviseWindowRootParentChange(Void* pCookie);
    public abstract virtual Void* AdviseInputMessage(IInputMessageSink sink);
    public abstract virtual void UnadviseInputMessage(Void* pCookie);
    public abstract virtual Void* StartMouseWheelRedirectingToHoveredWindow();
    public abstract virtual void StopMouseWheelRedirectingToHoveredWindow(Void* pCookie);
    public abstract virtual Void* AdviseForegroundIdle(IForegroundIdleSink sink);
    public abstract virtual void UnadviseForegroundIdle(Void* pCookie);
    public abstract virtual Void* AdviseMouseMessage(IMouseMessageSink sink, int isIncludingNoRemove);
    public abstract virtual void UnadviseMouseMessage(Void* pCookie);
    public abstract virtual Void* AdviseKeyboardMessage(IKeyboardMessageSink sink, int isIncludingNoRemove);
    public abstract virtual void UnadviseKeyboardMessage(Void* pCookie);
}
[GuidAttribute("24FDE11D-94A4-4940-9A13-86826A21FBD7")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IWindowMessageSink {
    public abstract virtual void OnWindowMessage(Void* hwnd, UInt32 message, Void* wParam, Void* lParam, int isDeferred);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B374D21C-158B-4542-B917-19512AE65244")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IWindowRootParentChangeSink {
    public abstract virtual void OnWindowRootParentChanged(Void* hwnd, Void* hwndRootParent);
}
[GuidAttribute("C05526B9-5F0C-4C54-8286-53388DB2961C")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IWindowScreenCoordinatesChangeSink {
    public abstract virtual void OnWindowScreenCoordinatesChanged(Void* hwnd, RECT* pRect);
}
[GuidAttribute("2B2E9B1F-C279-4EE0-A0D2-A466504997FD")]
public class JetBrains.Application.Interop.NativeHook.ComImport.NativeHookHandler : object {
}
public class JetBrains.Application.Interop.NativeHook.DummyWindowsHookManager : WindowsHookManager {
    protected IWindowsHookManager Instance { get; }
    public IHookedWindowSelector Windows { get; }
    public DummyWindowsHookManager(Lifetime lifetime);
    protected virtual IWindowsHookManager get_Instance();
    public virtual IHookedWindowSelector get_Windows();
    public virtual void AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    public virtual IProperty`1<bool> AdviseApplicationActiveStateChange(Lifetime lifetime);
    public virtual IProperty`1<Rect> AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    public virtual IProperty`1<IntPtr> AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    public virtual void StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    public virtual void AdviseForegroundIdle(Lifetime lifetime, Action action);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Interop.NativeHook.HookedMessageSelector : object {
    private HookedWindow myWindow;
    public IHookedWindowAndMessage All { get; }
    public IHookedWindowAndMessage Item { get; }
    [NotNullAttribute]
public HookedWindow Window { get; }
    internal HookedMessageSelector(HookedWindow window);
    public sealed virtual IHookedWindowAndMessage get_All();
    public sealed virtual IHookedWindowAndMessage get_Item(WindowsMessages message);
    public HookedWindow get_Window();
}
public class JetBrains.Application.Interop.NativeHook.HookedWindow : object {
    private IWindowsHookManager myOwner;
    private IntPtr myWindowHandle;
    public IHookedMessageSelector Messages { get; }
    public IWindowsHookManager Owner { get; }
    public IntPtr Handle { get; }
    internal HookedWindow(IWindowsHookManager owner, IntPtr windowHandle);
    public sealed virtual IHookedMessageSelector get_Messages();
    public IWindowsHookManager get_Owner();
    public sealed virtual IntPtr get_Handle();
}
public class JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage : object {
    private WindowsMessages myMessage;
    private HookedWindow myWindow;
    [NotNullAttribute]
public IWindowsHookManager Owner { get; }
    public WindowsMessages Code { get; }
    public IHookedWindow Window { get; }
    internal HookedWindowAndMessage(HookedWindow window, WindowsMessages message);
    public IWindowsHookManager get_Owner();
    public sealed virtual WindowsMessages get_Code();
    public sealed virtual IHookedWindow get_Window();
    public sealed virtual void Advise(Lifetime lifetime, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Interop.NativeHook.HookedWindowSelector : object {
    private IWindowsHookManager myOwner;
    public IHookedWindow All { get; }
    public IHookedWindow Item { get; }
    public IHookedWindow Item { get; }
    public IHookedWindow Item { get; }
    public HookedWindowSelector(IWindowsHookManager owner);
    public sealed virtual IHookedWindow get_All();
    public sealed virtual IHookedWindow get_Item(IntPtr windowhandle);
    public sealed virtual IHookedWindow get_Item(IWin32Window window);
    public sealed virtual IHookedWindow get_Item(Void* windowhandle);
}
public class JetBrains.Application.Interop.NativeHook.HookEventArgs : ValueType {
    public int HookCode;
    public IntPtr lParam;
    public IntPtr wParam;
    public HookEventArgs(int hookCode, IntPtr wParam, IntPtr lParam);
    public CWPRETSTRUCT* GetCwpRetStruct();
    public CWPSTRUCT* GetCwpStruct();
    public MOUSEHOOKSTRUCT* GetMouseHookStruct();
    public MSG* GetMsgStruct();
    public MSLLHOOKSTRUCT* GetMsLlHookStruct();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.Interop.NativeHook.IHookedMessageSelector {
    [NotNullAttribute]
public IHookedWindowAndMessage All { get; }
    [NotNullAttribute]
public IHookedWindowAndMessage Item { get; }
    public abstract virtual IHookedWindowAndMessage get_All();
    public abstract virtual IHookedWindowAndMessage get_Item(WindowsMessages message);
}
public interface JetBrains.Application.Interop.NativeHook.IHookedWindow {
    [NotNullAttribute]
public IHookedMessageSelector Messages { get; }
    public abstract virtual IHookedMessageSelector get_Messages();
}
public interface JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage {
    public WindowsMessages Code { get; }
    [NotNullAttribute]
public IHookedWindow Window { get; }
    public abstract virtual WindowsMessages get_Code();
    public abstract virtual IHookedWindow get_Window();
    public abstract virtual void Advise(Lifetime lifetime, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.Interop.NativeHook.IHookedWindowSelector {
    [NotNullAttribute]
public IHookedWindow All { get; }
    [NotNullAttribute]
public IHookedWindow Item { get; }
    [NotNullAttribute]
public IHookedWindow Item { get; }
    [NotNullAttribute]
public IHookedWindow Item { get; }
    public abstract virtual IHookedWindow get_All();
    public abstract virtual IHookedWindow get_Item(IWin32Window window);
    public abstract virtual IHookedWindow get_Item(IntPtr windowhandle);
    public abstract virtual IHookedWindow get_Item(Void* windowhandle);
}
public interface JetBrains.Application.Interop.NativeHook.IWindowsHookManager {
    public IHookedWindowSelector Windows { get; }
    public abstract virtual IHookedWindowSelector get_Windows();
    public abstract virtual void AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public abstract virtual void AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public abstract virtual void AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    [NotNullAttribute]
public abstract virtual IProperty`1<bool> AdviseApplicationActiveStateChange(Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IProperty`1<Rect> AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    [NotNullAttribute]
public abstract virtual IProperty`1<IntPtr> AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    public abstract virtual void StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    public abstract virtual void AdviseForegroundIdle(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager : object {
    private WindowsHook myCwpRetHook;
    private WindowsHook myGetMsgHook;
    private JetDispatcher myDispatcher;
    protected Dictionary`2<IntPtr, Dictionary`2<WindowsMessages, WindowsMessageHookEntry[]>> myHookEntries;
    protected Dictionary`2<string, Dictionary`2<WindowsMessages, Action`1[]>> myClassHandlers;
    private static IEqualityComparer`1<WindowsMessageHookEntry> ourCompareHookEntriesByHandler;
    private WindowsHook myForegroundIdleHook;
    private HashSet`1<Action> myForegroundIdleActions;
    [CompilerGeneratedAttribute]
private static Func`2<Dictionary`2<WindowsMessages, WindowsMessageHookEntry[]>, IEnumerable`1<WindowsMessageHookEntry[]>> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<WindowsMessageHookEntry[], IEnumerable`1<WindowsMessageHookEntry>> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Action`2<LifetimeDefinition, Lifetime> CS$<>9__CachedAnonymousMethodDelegate41;
    [CompilerGeneratedAttribute]
private static HookEventHandler CS$<>9__CachedAnonymousMethodDelegate42;
    [CompilerGeneratedAttribute]
private static Func`3<WindowsMessageHookEntry, WindowsMessageHookEntry, bool> CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static Func`2<WindowsMessageHookEntry, int> CS$<>9__CachedAnonymousMethodDelegate4b;
    public JetDispatcher Dispatcher { get; }
    private IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.Windows { get; }
    public ManagedWindowsHookManager(Lifetime lifetimeOuter);
    private static ManagedWindowsHookManager();
    public JetDispatcher get_Dispatcher();
    public void Dump(XmlWriter writer);
    public string DumpToXaml();
    [ObsoleteAttribute("Never used. To be removed in the next release.")]
public void RemoveAll(object owner);
    private void AdviseWindowMessageInternal(Lifetime lifetime, Void* window, WindowsMessages message, Action`1<WindowsMessageEventArgs> action);
    protected void AddRemoveMessageHandler(Void* window, WindowsMessages message, Action`1<WindowsMessageEventArgs> action, Delegate handlerOriginal, bool includeparents, AddRemove addremove);
    protected void AddRemoveHookEntry(WindowsMessageHookEntry entry, AddRemove addremove);
    protected void AddRemoveClassMessageHandler(string className, WindowsMessages message, Action`1<WindowsMessageEventArgs> action, AddRemove addremove);
    protected IEnumerable`1<WindowsMessageHookEntry> EnumAllEntries();
    protected void HookUnhook();
    protected void HookUnhookForegroundIdle();
    protected bool OnHookedMessage(object sender, WindowsMessageEventArgs args);
    protected void RemoveAll();
    private sealed virtual override IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.get_Windows();
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowMessage(Lifetime parentLifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowClassMessage(Lifetime parentLifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseInputMessage(Lifetime parentLifetime, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseApplicationActiveStateChange(Lifetime parentLifetime);
    private sealed virtual override IProperty`1<Rect> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowScreenCoordinatesChange(Lifetime parentLifetime, IntPtr window);
    private sealed virtual override IProperty`1<IntPtr> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowRootParentChange(Lifetime parentLifetime, IntPtr window);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.StartMouseWheelRedirectingToHoveredWindow(Lifetime parentLifetime);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseForegroundIdle(Lifetime parentLifetime, Action action);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(LifetimeDefinition definition, Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <RemoveAll>b__b(WindowsMessageHookEntry entry);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<WindowsMessageHookEntry[]> <EnumAllEntries>b__19(Dictionary`2<WindowsMessages, WindowsMessageHookEntry[]> messages);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<WindowsMessageHookEntry> <EnumAllEntries>b__1a(WindowsMessageHookEntry[] entries);
    [CompilerGeneratedAttribute]
private bool <HookUnhook>b__1d(object sender, HookEventArgs args);
    [CompilerGeneratedAttribute]
private bool <HookUnhook>b__1e(object sender, HookEventArgs args);
    [CompilerGeneratedAttribute]
private bool <HookUnhookForegroundIdle>b__21(object sender, HookEventArgs args);
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.Interop.NativeHook.IWindowsHookManager.StartMouseWheelRedirectingToHoveredWindow>b__3f(LifetimeDefinition definition, Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.Interop.NativeHook.IWindowsHookManager.StartMouseWheelRedirectingToHoveredWindow>b__40(object sender, HookEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__48(WindowsMessageHookEntry α, WindowsMessageHookEntry β);
    [CompilerGeneratedAttribute]
private static int <.cctor>b__49(WindowsMessageHookEntry α);
}
public class JetBrains.Application.Interop.NativeHook.NativeWindowsHookManager : object {
    [NotNullAttribute]
private INativeHookHandler myNativeHooks;
    private JetDispatcher myDispatcher;
    public JetDispatcher Dispatcher { get; }
    private IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.Windows { get; }
    public NativeWindowsHookManager(Lifetime lifetimeOuter, INativeHookHandler nativehooks);
    public JetDispatcher get_Dispatcher();
    private sealed virtual override IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.get_Windows();
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseApplicationActiveStateChange(Lifetime lifetime);
    private sealed virtual override IProperty`1<Rect> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    private sealed virtual override IProperty`1<IntPtr> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseForegroundIdle(Lifetime lifetime, Action action);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(LifetimeDefinition definition, Lifetime lifetime);
}
[ObsoleteAttribute("Use WindowsHookManager.")]
public class JetBrains.Application.Interop.NativeHook.WindowsHook : object {
    private static Statistics Statistics;
    private HookEventHandler myHookEventHandler;
    private Void* myHookHandle;
    private HookType myHookType;
    private HOOKPROC myKeepAliveDelegateThunk;
    public WindowsHook(HookType code, HookEventHandler handler);
    protected WindowsHook(HookType code, HookEventHandler handler, HOOKPROC callback);
    private static WindowsHook();
    public static bool IsGlobalHook(HookType type);
    public void Release();
    protected IntPtr CoreHookProc(int code, IntPtr wParam, IntPtr lParam);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
}
[ShellComponentAttribute]
public class JetBrains.Application.Interop.NativeHook.WindowsHookManager : object {
    private static string NativeHooksDllName;
    private IWindowsHookManager myInstance;
    private Lifetime myLifetime;
    protected IWindowsHookManager Instance { get; }
    public IHookedWindowSelector Windows { get; }
    public WindowsHookManager(Lifetime lifetime);
    protected virtual IWindowsHookManager get_Instance();
    public virtual IHookedWindowSelector get_Windows();
    public virtual void AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    public virtual IProperty`1<bool> AdviseApplicationActiveStateChange(Lifetime lifetime);
    public virtual IProperty`1<Rect> AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    public virtual IProperty`1<IntPtr> AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    public virtual void StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    public virtual void AdviseForegroundIdle(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs : EventArgs {
    [NotNullAttribute]
public IWindowsHookManager WindowsHook;
    public Void* HWnd;
    public WindowsMessages Message;
    public IntPtr WParam;
    public IntPtr LParam;
    public IntPtr LResult;
    public Point Location;
    public IntPtr WindowHandle { get; }
    public WindowsMessageEventArgs(IWindowsHookManager hookman, CWPRETSTRUCT* pMessage);
    public WindowsMessageEventArgs(IWindowsHookManager hookman, CWPSTRUCT* pMessage);
    public WindowsMessageEventArgs(IWindowsHookManager hookman, MSG* pMessage);
    public WindowsMessageEventArgs(IWindowsHookManager hookman, Void* hwnd, UInt32 message, Void* wParam, Void* lParam, POINT* ppt);
    public IntPtr get_WindowHandle();
}
public interface JetBrains.Application.ISettingsApplicationTrait {
    public Nullable`1<bool> IsAdvancedSettingsLayersEditingSupported { get; }
    public abstract virtual Nullable`1<bool> get_IsAdvancedSettingsLayersEditingSupported();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<Tuple`2<FileSystemPath, Version>> GetLegacySettingsFiles();
}
public interface JetBrains.Application.IStandaloneApplicationTrait {
    [CanBeNullAttribute]
public RichText CommandLineHelpText { get; }
    public string MainMenuActionID { get; }
    public string MainToolbarActionID { get; }
    public SingleInstanceStandaloneProductBehaviorFlags SingleInstanceBehavior { get; }
    public abstract virtual RichText get_CommandLineHelpText();
    public abstract virtual string get_MainMenuActionID();
    public abstract virtual string get_MainToolbarActionID();
    public abstract virtual SingleInstanceStandaloneProductBehaviorFlags get_SingleInstanceBehavior();
}
public interface JetBrains.Application.ISubProductInfo {
    public ApplicationPackageArtifact OwnerPackage { get; }
    public abstract virtual ApplicationPackageArtifact get_OwnerPackage();
}
public interface JetBrains.Application.ISubProductPackage {
    public IApplicationPackage Package { get; }
    public IProductInfo SubProductInfo { get; }
    public abstract virtual IApplicationPackage get_Package();
    public abstract virtual IProductInfo get_SubProductInfo();
}
public class JetBrains.Application.JetBrainsShared.ConvertingSharedStorageAccess`1 : object {
    private ISharedStorageAccess`1<string> myAccess;
    private Func`2<string, T> myFromStringFunc;
    private Func`2<T, string> myToStringFunc;
    public ConvertingSharedStorageAccess`1(ISharedStorageAccess`1<string> access, Func`2<string, T> fromStringFunc, Func`2<T, string> toStringFunc);
    public sealed virtual T GetValue();
    public sealed virtual void SetValue(T newValue);
}
public class JetBrains.Application.JetBrainsShared.FileSharedStorageAccess : object {
    private RelativePath myRelativePath;
    private JetBrainsSharedStorage myStorage;
    public FileSharedStorageAccess(JetBrainsSharedStorage storage, RelativePath relativePath);
    public sealed virtual string GetValue();
    public sealed virtual void SetValue(string newValue);
}
public interface JetBrains.Application.JetBrainsShared.ISharedStorageAccess`1 {
    [CanBeNullAttribute]
public abstract virtual T GetValue();
    public abstract virtual void SetValue(T newValue);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.JetBrainsShared.JetBrainsSharedStorage : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private FileSystemPath <RootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private RegistryHiveAccess <RegistryHiveAccess>k__BackingField;
    public FileSystemPath RootFolder { get; private set; }
    public RegistryHiveAccess RegistryHiveAccess { get; private set; }
    public JetBrainsSharedStorage(ILogger logger);
    [CompilerGeneratedAttribute]
public FileSystemPath get_RootFolder();
    [CompilerGeneratedAttribute]
private void set_RootFolder(FileSystemPath value);
    [CompilerGeneratedAttribute]
public RegistryHiveAccess get_RegistryHiveAccess();
    [CompilerGeneratedAttribute]
private void set_RegistryHiveAccess(RegistryHiveAccess value);
    [CanBeNullAttribute]
public string GetStringValueFromRegistry(BackSlashSeparatedRelativePath subkey, string dataName);
    public void SetStringValueToRegistry(BackSlashSeparatedRelativePath subKey, string dataName, string value);
    [CanBeNullAttribute]
public string GetStringValueFromFile(RelativePath relativePath);
    public void SetStringValueToFile(RelativePath relativePath, string content);
}
public static class JetBrains.Application.JetBrainsShared.JetBrainsSharedStorageEx : object {
    [ObsoleteAttribute("Do not use the method. Inject the component.")]
public static JetBrainsSharedStorage Create();
}
public class JetBrains.Application.JetBrainsShared.MultipleSharedStorageAccess`1 : object {
    private IList`1<ISharedStorageAccess`1<T>> myAccesses;
    private Func`2<IDictionary`2<ISharedStorageAccess`1<T>, T>, T> myValueSelector;
    public MultipleSharedStorageAccess`1(IList`1<ISharedStorageAccess`1<T>> accesses, Func`2<IDictionary`2<ISharedStorageAccess`1<T>, T>, T> valueSelector);
    public MultipleSharedStorageAccess`1(Func`2<IDictionary`2<ISharedStorageAccess`1<T>, T>, T> valueSelector, ISharedStorageAccess`1[] accesses);
    private MultipleSharedStorageAccess`1<T> AddAccess(ISharedStorageAccess`1<T> access);
    public sealed virtual T GetValue();
    public sealed virtual void SetValue(T newValue);
}
public class JetBrains.Application.JetBrainsShared.RegistrySharedStorageAccess : object {
    private JetBrainsSharedStorage myStorage;
    private BackSlashSeparatedRelativePath mySubKey;
    private string myDataName;
    public RegistrySharedStorageAccess(JetBrainsSharedStorage storage, BackSlashSeparatedRelativePath subKey, string dataName);
    public sealed virtual string GetValue();
    public sealed virtual void SetValue(string newValue);
}
[ExtensionAttribute]
public static class JetBrains.Application.JetBrainsShared.SharedStorageAccess : object {
    public static BackSlashSeparatedRelativePath DotNetRegistryRootKeyId;
    public static BackSlashSeparatedRelativePath IdeaRegistryRootKeyId;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    private static SharedStorageAccess();
    private static Pair`2<BackSlashSeparatedRelativePath, string> FixKey(BackSlashSeparatedRelativePath rootPath, string key);
    [ExtensionAttribute]
public static FileSharedStorageAccess CreateFileAccess(JetBrainsSharedStorage storage, RelativePath relativePath);
    [ExtensionAttribute]
public static RegistrySharedStorageAccess CreateDotNetRegistryAccess(JetBrainsSharedStorage storage, string key);
    [ExtensionAttribute]
public static ISharedStorageAccess`1<string> CreateIdeaRegistryAccess(JetBrainsSharedStorage storage, string key);
    [ExtensionAttribute]
public static ISharedStorageAccess`1<T> ToConverting(ISharedStorageAccess`1<string> access, Func`2<string, T> fromString, Func`2<T, string> toString);
    public static MultipleSharedStorageAccess`1<T> CreateMultipleSharedStorageAccessWithPreference(ISharedStorageAccess`1[] accesses);
    public static MultipleSharedStorageAccess`1<T> CreateMultipleSharedStorageAccessWithMaxValue(ISharedStorageAccess`1[] accesses);
    public static T SelectMaxValue(IDictionary`2<ISharedStorageAccess`1<T>, T> values);
    public static T PreferValue(IDictionary`2<ISharedStorageAccess`1<T>, T> values, IList`1<ISharedStorageAccess`1<T>> preferrableAccesses);
    [CompilerGeneratedAttribute]
private static string <CreateIdeaRegistryAccess>b__0(string r);
    [CompilerGeneratedAttribute]
private static string <CreateIdeaRegistryAccess>b__1(string v);
    [CompilerGeneratedAttribute]
private static T <SelectMaxValue>b__7(KeyValuePair`2<ISharedStorageAccess`1<T>, T> pair);
    [CompilerGeneratedAttribute]
private static bool <SelectMaxValue>b__8(T v);
    [CompilerGeneratedAttribute]
private static T <PreferValue>b__9(KeyValuePair`2<ISharedStorageAccess`1<T>, T> pair);
    [CompilerGeneratedAttribute]
private static bool <PreferValue>b__a(T v);
}
public interface JetBrains.Application.License.ILicenseSupport {
    [NotNullAttribute]
public string ProductGuid { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    [CanBeNullAttribute]
public Uri BuyUrl { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public string ProductFamily { get; }
    public int Version { get; }
    public bool SendBuildDateAsVersionToOldServers { get; }
    public string JBProductCode { get; }
    public IEnumerable`1<ProductEdition> Editions { get; }
    [NotNullAttribute]
public abstract virtual LicenseData CreateLicenseData(string licenseKey, string userName, string companyName);
    public abstract virtual string get_ProductGuid();
    public abstract virtual int get_FreeTrialPeriod();
    public abstract virtual int get_FeedbackRequestPeriod();
    public abstract virtual int get_LeftDaysNotification();
    [CanBeNullAttribute]
public abstract virtual string GetLicenseAgreement(LicenseType licenseType);
    public abstract virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    public abstract virtual Uri get_BuyUrl();
    public abstract virtual bool get_DoCheckLicenseReuseOverNetwork();
    [CanBeNullAttribute]
public abstract virtual LicenseData LoadLicense(ISettingsTable settings, FileSystemPath installDir);
    public abstract virtual void SaveLicense(LicenseData license, ISettingsTable settings);
    public abstract virtual string get_ProductFamily();
    public abstract virtual int get_Version();
    public abstract virtual string GetLicenseServerEdition(ProductEdition edition);
    public abstract virtual bool get_SendBuildDateAsVersionToOldServers();
    public abstract virtual string get_JBProductCode();
    public abstract virtual ProductEdition DecodeProductEdition(string productCode, IApplicationHost descriptor);
    public abstract virtual IEnumerable`1<ProductEdition> get_Editions();
    public abstract virtual ProductEdition DecodeProductEdition(int editionCode, IApplicationHost descriptor);
}
public class JetBrains.Application.License.LicenseChecker : object {
    private BigInteger N;
    private bool myHasLicense;
    private string myUsername;
    private string myCompany;
    private BigInteger myCode;
    private static Func`2[] StringToByteConvertors;
    public bool HasLicense { get; }
    public bool IsChecksumOK { get; }
    public int Version { get; }
    public int Type { get; }
    public LicenseType LicenseType { get; }
    public DateTime GenerationDate { get; }
    public DateTime ExpirationDate { get; }
    public DateTime SubscriptionEndDate { get; }
    public int ProductVersion { get; }
    public int CustomerId { get; }
    public int Edition { get; }
    public LicenseChecker(BigInteger n, string username, string company, string license);
    public LicenseChecker(string publickey, string username, string company, string license);
    private static LicenseChecker();
    public bool get_HasLicense();
    public bool get_IsChecksumOK();
    public int get_Version();
    public int get_Type();
    public LicenseType get_LicenseType();
    public DateTime get_GenerationDate();
    public DateTime get_ExpirationDate();
    public DateTime get_SubscriptionEndDate();
    private DateTime GetDateTime(int offset);
    public int get_ProductVersion();
    public int get_CustomerId();
    public int get_Edition();
    private int UserHash();
    public static int CalculateUserHash(string userName, string companyName);
}
public class JetBrains.Application.License.LicenseCheckFailureException : ApplicationException {
    public LicenseCheckFailureException(string message);
}
public class JetBrains.Application.License.LicenseCheckResult : object {
    public string Message;
    public static LicenseCheckResult LICENSE_VALID;
    public static LicenseCheckResult LICENSE_INVALID;
    public static LicenseCheckResult LICENSE_EXPIRED;
    public static LicenseCheckResult UNSUITABLE_LICENSE;
    [StringFormatMethodAttribute("format")]
public LicenseCheckResult(string format, Object[] args);
    private static LicenseCheckResult();
}
public class JetBrains.Application.License.LicenseData : object {
    private static string LICENSE;
    private static string USERNAME;
    private static string COMPANY;
    private static string USER_NAME;
    private static string LICENSE_KEY;
    private string myPublicKey;
    private string myLicenseKey;
    private string myUserName;
    private string myCompanyName;
    private Nullable`1<DateTime> myExpirationDate;
    private Nullable`1<DateTime> myGenerationDate;
    private Nullable`1<DateTime> mySubscriptionEndDate;
    private Nullable`1<LicenseType> myLicenseType;
    private Nullable`1<int> myProductVersion;
    private Nullable`1<int> myCustomerId;
    private Nullable`1<int> myEditionCode;
    private AcceptLicenseDelegate myAcceptLicenseDelegate;
    private LicenseCheckResult myLicenseCheckResult;
    public LicenseType LicenseType { get; }
    public DateTime GenerationDate { get; }
    public DateTime ExpirationDate { get; }
    public DateTime SubscriptionEndDate { get; }
    public int ProductVersion { get; }
    [NotNullAttribute]
public Version ProductVersionAsVersion2 { get; }
    public int CustomerId { get; }
    public int EditionCode { get; public set; }
    public bool IsEndless { get; }
    public bool ContainsSubscription { get; }
    public string LicenseKey { get; public set; }
    public string UserName { get; public set; }
    public string CompanyName { get; public set; }
    public string PublicKey { get; }
    public LicenseData(string publicKey, string licenseKey, string userName, string companyName, AcceptLicenseDelegate acceptLicenseDelegate);
    public LicenseData(string publicKey, string licenseKey, string userName, string companyName);
    public sealed virtual bool Equals(LicenseData licenseData);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public LicenseType get_LicenseType();
    public DateTime get_GenerationDate();
    public DateTime get_ExpirationDate();
    public DateTime get_SubscriptionEndDate();
    public int get_ProductVersion();
    public Version get_ProductVersionAsVersion2();
    public int get_CustomerId();
    public int get_EditionCode();
    public void set_EditionCode(int value);
    public bool get_IsEndless();
    public bool get_ContainsSubscription();
    public string get_LicenseKey();
    public void set_LicenseKey(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_CompanyName();
    public void set_CompanyName(string value);
    [CanBeNullAttribute]
public static LicenseData GetLicenseDataFromUserSettings(string publicKey, AcceptLicenseDelegate acceptor, ISettingsTable settings);
    public static FileSystemPath GetEvaluationLicensePath(FileSystemPath installDir);
    public static LicenseData GetEvaluationLicenseDataFromFile(string publicKey, AcceptLicenseDelegate acceptor, FileSystemPath installDir);
    public void SaveToUserSettings(ISettingsTable settings);
    public string get_PublicKey();
    public LicenseCheckResult Check();
    private LicenseCheckResult CheckValidity();
    public ProductEdition GetEdition(ILicenseSupport licenseSupport, IApplicationHost host);
}
public enum JetBrains.Application.License.LicenseMode : Enum {
    public int value__;
    public static LicenseMode NOT_FOUND;
    public static LicenseMode NOT_CHECKED_YET;
    public static LicenseMode NOT_REQUIRED;
    public static LicenseMode EVALUATION;
    public static LicenseMode USER_LICENSE;
    public static LicenseMode LICENSE_SERVER_FLOATING;
    public static LicenseMode LICENSE_SERVER_PERMANENT;
    public static LicenseMode JB_ACCOUNT;
}
public abstract class JetBrains.Application.License.LicenseSupportBase : object {
    private DateTime myDateTimeForSubscriptionCheck;
    public string ProductGuid { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public Uri BuyUrl { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public string ProductFamily { get; }
    public int Version { get; }
    public bool SendBuildDateAsVersionToOldServers { get; }
    public IEnumerable`1<ProductEdition> Editions { get; }
    public string JBProductCode { get; }
    public virtual string get_ProductGuid();
    public virtual int get_FreeTrialPeriod();
    public virtual int get_FeedbackRequestPeriod();
    public virtual int get_LeftDaysNotification();
    public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    public sealed virtual Uri get_BuyUrl();
    public sealed virtual bool get_DoCheckLicenseReuseOverNetwork();
    public sealed virtual string get_ProductFamily();
    public sealed virtual int get_Version();
    public abstract virtual string GetLicenseAgreement(LicenseType licenseType);
    public abstract virtual LicenseData LoadLicense(ISettingsTable settings, FileSystemPath installDir);
    public abstract virtual void SaveLicense(LicenseData license, ISettingsTable settings);
    public abstract virtual LicenseData CreateLicenseData(string licenseKey, string userName, string companyName);
    public abstract virtual string GetLicenseServerEdition(ProductEdition edition);
    public abstract virtual bool get_SendBuildDateAsVersionToOldServers();
    public abstract virtual IEnumerable`1<ProductEdition> get_Editions();
    public abstract virtual ProductEdition DecodeProductEdition(int editionCode, IApplicationHost descriptor);
    public abstract virtual string get_JBProductCode();
    public abstract virtual ProductEdition DecodeProductEdition(string productCode, IApplicationHost descriptor);
}
public enum JetBrains.Application.License.LicenseType : Enum {
    public int value__;
    public static LicenseType INVALID;
    public static LicenseType COMMERCIAL;
    public static LicenseType NON_COMMERCIAL;
    public static LicenseType SITE;
    public static LicenseType OPENSOURCE;
    public static LicenseType PERSONAL;
    public static LicenseType ACADEMIC;
    public static LicenseType CLASSROOM;
    public static LicenseType FLOATING;
}
[ExtensionAttribute]
public static class JetBrains.Application.License.LicenseTypeEx : object {
    [ExtensionAttribute]
public static string GetLicenseRestrictions(LicenseType licenseType);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Accepted agreements")]
public class JetBrains.Application.License2.AcceptedAgreementSettings : object {
    [SettingsIndexedEntryAttribute("Sent accepted agreements per document")]
public IIndexedEntry`2<string, string> SentAcceptedAgreements;
}
public class JetBrains.Application.License2.ConsentOptions.AcceptedState : object {
    [CompilerGeneratedAttribute]
private Version <AcceptedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AcceptedTimeMillis>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<StringSlice, Pair`2<string, AcceptedState>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, AcceptedState>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public Version AcceptedVersion { get; public set; }
    public bool IsAccepted { get; public set; }
    public long AcceptedTimeMillis { get; public set; }
    public bool HasAcceptedTime { get; }
    public AcceptedState(Version acceptedVersion, bool isAccepted, DateTime dateTime);
    public AcceptedState(Version acceptedVersion, bool isAccepted, long acceptedTimeMillis);
    [CompilerGeneratedAttribute]
public Version get_AcceptedVersion();
    [CompilerGeneratedAttribute]
public void set_AcceptedVersion(Version value);
    [CompilerGeneratedAttribute]
public bool get_IsAccepted();
    [CompilerGeneratedAttribute]
public void set_IsAccepted(bool value);
    [CompilerGeneratedAttribute]
public long get_AcceptedTimeMillis();
    [CompilerGeneratedAttribute]
public void set_AcceptedTimeMillis(long value);
    public bool get_HasAcceptedTime();
    public virtual string ToString();
    protected bool Equals(AcceptedState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string ToProtocolString(string consentId);
    public static IReadOnlyList`1<Pair`2<string, AcceptedState>> FromProtocolString(string json);
    public static long DateTimeToMilliseconds(DateTime dateTime);
    public static DateTime MillisecondsToDateTime(long millis);
    [CompilerGeneratedAttribute]
private static Pair`2<string, AcceptedState> <FromProtocolString>b__0(StringSlice slice);
    [CompilerGeneratedAttribute]
private static bool <FromProtocolString>b__2(Pair`2<string, AcceptedState> pair);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.ConsentOptions.ConsentOptionsEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> GetConsentOptionValues(IConsentOptions consentOptions);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IConsentOption TryGetConsentOption(IConsentOptions consentOptions, string consentOptionId);
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.License2.ConsentOptions.ConsentOptionsStub : object {
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<IConsentOption>> <ConsentOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<IConsentOption>> <ConsentOptionsNeedToBeShownToUser>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ConsetOptionsChangeSource> <ConsentOptionValuesChanged>k__BackingField;
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptions { get; private set; }
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptionsNeedToBeShownToUser { get; private set; }
    public ISignal`1<ConsetOptionsChangeSource> ConsentOptionValuesChanged { get; private set; }
    public ConsentOptionsStub(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptions();
    [CompilerGeneratedAttribute]
private void set_ConsentOptions(IProperty`1<IReadOnlyCollection`1<IConsentOption>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptionsNeedToBeShownToUser();
    [CompilerGeneratedAttribute]
private void set_ConsentOptionsNeedToBeShownToUser(IProperty`1<IReadOnlyCollection`1<IConsentOption>> value);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ConsetOptionsChangeSource> get_ConsentOptionValuesChanged();
    [CompilerGeneratedAttribute]
private void set_ConsentOptionValuesChanged(ISignal`1<ConsetOptionsChangeSource> value);
    public virtual void OnConsentOptionsRecieved(string json);
    public virtual AcceptedState GetConsensetOptionAcceptedState(IConsentOption consentOption);
    public virtual void SetConsentOptions(IEnumerable`1<Pair`2<IConsentOption, bool>> consentOptionValues, ConsetOptionsChangeSource changeSource);
}
public enum JetBrains.Application.License2.ConsentOptions.ConsetOptionsChangeSource : Enum {
    public int value__;
    public static ConsetOptionsChangeSource NONE;
    public static ConsetOptionsChangeSource USER;
    public static ConsetOptionsChangeSource SERVER;
    public static ConsetOptionsChangeSource API;
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.ConsentOptions.ConstentOptionEx : object {
    [ExtensionAttribute]
public static bool IsDeletedOrInvalid(IConsentOption consentOption);
}
public interface JetBrains.Application.License2.ConsentOptions.IConsentOption {
    public string consentId { get; }
    public Version version { get; }
    public string printableName { get; }
    public string text { get; }
    public bool accepted { get; }
    public long acceptanceTime { get; }
    public bool deleted { get; }
    public abstract virtual string get_consentId();
    public abstract virtual Version get_version();
    public abstract virtual string get_printableName();
    public abstract virtual string get_text();
    public abstract virtual bool get_accepted();
    public abstract virtual long get_acceptanceTime();
    public abstract virtual bool get_deleted();
}
public interface JetBrains.Application.License2.ConsentOptions.IConsentOptions {
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptions { get; }
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptionsNeedToBeShownToUser { get; }
    public ISignal`1<ConsetOptionsChangeSource> ConsentOptionValuesChanged { get; }
    public abstract virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptions();
    public abstract virtual AcceptedState GetConsensetOptionAcceptedState(IConsentOption consentOption);
    public abstract virtual void SetConsentOptions(IEnumerable`1<Pair`2<IConsentOption, bool>> consentOptionValues, ConsetOptionsChangeSource changeSource);
    public abstract virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptionsNeedToBeShownToUser();
    public abstract virtual void OnConsentOptionsRecieved(string json);
    public abstract virtual ISignal`1<ConsetOptionsChangeSource> get_ConsentOptionValuesChanged();
}
public enum JetBrains.Application.License2.DocumentState : Enum {
    public int value__;
    public static DocumentState NONE;
    public static DocumentState UPDATED;
    public static DocumentState ACCEPTED;
    public static DocumentState REJECTED;
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.License2.DocumentsThatRequireUserConsent : object {
    private ILogger myLogger;
    private ICollectionEvents`1<IDocumentThatRequiresUserConsentProvider> myProviders;
    private Dictionary`2<IDocumentThatRequiresUserConsent, DocumentState> myDocuments;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> <DocumentsNeedToBeAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IDocumentThatRequiresUserConsent, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<IDocumentThatRequiresUserConsentProvider, IDocumentThatRequiresUserConsent> CS$<>9__CachedAnonymousMethodDelegate10;
    public IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> DocumentsNeedToBeAccepted { get; private set; }
    public DocumentsThatRequireUserConsent(Lifetime lifetime, ILogger logger, IViewable`1<IDocumentThatRequiresUserConsentProvider> providers);
    private void BindProvider(Lifetime providerLifetime, IDocumentThatRequiresUserConsentProvider provider);
    public void AddProviderIfNotExists(Lifetime providerLifetime, IDocumentThatRequiresUserConsentProvider provider);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> get_DocumentsNeedToBeAccepted();
    [CompilerGeneratedAttribute]
private void set_DocumentsNeedToBeAccepted(IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> value);
    public sealed virtual ICollection`1<IDocumentThatRequiresUserConsent> GetAllDocuments();
    public sealed virtual DocumentState GetDocumentState(IDocumentThatRequiresUserConsent document);
    private void RemoveDocument(IDocumentThatRequiresUserConsent document);
    public sealed virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
    private void SetDocumentStateImpl(IDocumentThatRequiresUserConsent document, DocumentState state);
    [CompilerGeneratedAttribute]
private void <BindProvider>b__0(PropertyChangedEventArgs`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> args);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentThatRequiresUserConsent> <SetDocumentState>b__9(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static string <SetDocumentState>b__b(IDocumentThatRequiresUserConsent d);
    [CompilerGeneratedAttribute]
private static IDocumentThatRequiresUserConsent <SetDocumentState>b__a(IDocumentThatRequiresUserConsentProvider p);
}
[ShellComponentAttribute]
internal class JetBrains.Application.License2.DocumentsThatRequireUserConsentShellComponent : object {
    public DocumentsThatRequireUserConsentShellComponent(Lifetime lifetime, DocumentsThatRequireUserConsent environmentDocumentsThatRequireUserConsent, IViewable`1<IDocumentThatRequiresUserConsentProvider> providers);
}
internal class JetBrains.Application.License2.DocumentThatRequiresUserConsent : object {
    private static string CssToAdd;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TechnicalName>k__BackingField;
    public string PresentableName { get; private set; }
    public Version Version { get; private set; }
    public string HtmlText { get; private set; }
    public string TechnicalName { get; private set; }
    public DocumentThatRequiresUserConsent(string technicalName, Version version, string htmlText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PresentableName();
    [CompilerGeneratedAttribute]
private void set_PresentableName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HtmlText();
    [CompilerGeneratedAttribute]
private void set_HtmlText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TechnicalName();
    [CompilerGeneratedAttribute]
private void set_TechnicalName(string value);
    [CanBeNullAttribute]
private static string FetchPresentableName(string htmlText);
    [CanBeNullAttribute]
public static IDocumentThatRequiresUserConsent TryCreateDocument(string technicalName, string content);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.Evaluation.EvaluationEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, Pair`2<ILicensedEntity, ISupportsEvaluation>> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<ILicensedEntity, ISupportsEvaluation>> WithEvaluationSupport(IEnumerable`1<ILicensedEntity> entities);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IEvaluationInfo TryGetInfo(IEnumerable`1<IEvaluationInfo> infos, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static bool ShouldTrackUsageOnEvaluationStart(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <WithEvaluationSupport>b__0(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static Pair`2<ILicensedEntity, ISupportsEvaluation> <WithEvaluationSupport>b__1(ILicensedEntity entity);
}
internal class JetBrains.Application.License2.Evaluation.EvaluationInfo : object {
    private static DateTime INSTALLER_TIME;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFeedbackRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotificationShown>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUsageDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActuallyUsedDays>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPaused>k__BackingField;
    public string Guid { get; private set; }
    public bool IsStarted { get; }
    public bool IsFeedbackRequested { get; public set; }
    public bool IsNotificationShown { get; public set; }
    public DateTime Started { get; private set; }
    public DateTime LastUsageDate { get; private set; }
    public int ActuallyUsedDays { get; private set; }
    public bool IsPaused { get; private set; }
    private static EvaluationInfo();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(string value);
    public sealed virtual bool get_IsStarted();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFeedbackRequested();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFeedbackRequested(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNotificationShown();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNotificationShown(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Started();
    [CompilerGeneratedAttribute]
private void set_Started(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastUsageDate();
    [CompilerGeneratedAttribute]
private void set_LastUsageDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ActuallyUsedDays();
    [CompilerGeneratedAttribute]
private void set_ActuallyUsedDays(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPaused();
    [CompilerGeneratedAttribute]
private void set_IsPaused(bool value);
    public sealed virtual void StartEvaluation();
    public sealed virtual void PauseEvaluation();
    public sealed virtual void ResumeEvaluation();
    public sealed virtual bool SetUsed(bool addCalendarDays);
    public static EvaluationInfo CreateInstallerValue(string guid);
    public static EvaluationInfo CreateExpiredValue(string guid);
    public static EvaluationInfo Merge(IEvaluationInfo older, IEvaluationInfo newer);
    private static DateTime MaxDate(DateTime a, DateTime b);
    private static DateTime MinDate(DateTime a, DateTime b);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.Evaluation.EvaluationInfoEx : object {
    [ExtensionAttribute]
public static bool IsRunning(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static int GetLeftDays(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static bool IsExpired(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static bool IsValid(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
}
internal class JetBrains.Application.License2.Evaluation.EvaluationInfoPersister : object {
    private ILogger myLogger;
    private IEnumerable`1<ILicensedEntity> myEntities;
    private SafeRegistryPersister`1<IList`1<string>> myLastRunEvalsPersister;
    public EvaluationInfoPersister(ILogger logger, IEnumerable`1<ILicensedEntity> entities);
    public sealed virtual IEnumerable`1<IEvaluationInfo> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<IEvaluationInfo> items);
    private static RegistryPersister`1<EvaluationInfo> CreateSerializer(ILogger logger, string guid, bool autoStart, bool trackUsageOnStart);
}
public class JetBrains.Application.License2.Evaluation.EvaluationLicenseViewSubmodel : object {
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private LicenseCheckResult`1<EvaluationLicenseViewSubmodel> myCheckResult;
    private bool myStoflGuard;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ILicensedEntity> <EntitiesToRequestFeedback>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ILicensedEntity> <EntitiesToShowExpirationNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEvaluationInfo> <EvaluationInfos>k__BackingField;
    public IProperty`1<bool> IsOn { get; private set; }
    public IProperty`1<LicenseViewModel> AllModel { get; private set; }
    private IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.LicenseData { get; }
    public ICollectionEvents`1<ILicensedEntity> EntitiesToRequestFeedback { get; private set; }
    public ICollectionEvents`1<ILicensedEntity> EntitiesToShowExpirationNotification { get; private set; }
    public IEnumerable`1<IEvaluationInfo> EvaluationInfos { get; private set; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public EvaluationLicenseViewSubmodel(Lifetime lifetime, string allModelName, ILicenseData data, ITaskHost taskHost, ILogger logger, EvaluationTracker evaluationTracker);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
private void set_IsOn(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    [CompilerGeneratedAttribute]
private void set_AllModel(IProperty`1<LicenseViewModel> value);
    private sealed virtual override IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.get_LicenseData();
    [CompilerGeneratedAttribute]
public ICollectionEvents`1<ILicensedEntity> get_EntitiesToRequestFeedback();
    [CompilerGeneratedAttribute]
private void set_EntitiesToRequestFeedback(ICollectionEvents`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
public ICollectionEvents`1<ILicensedEntity> get_EntitiesToShowExpirationNotification();
    [CompilerGeneratedAttribute]
private void set_EntitiesToShowExpirationNotification(ICollectionEvents`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IEvaluationInfo> get_EvaluationInfos();
    [CompilerGeneratedAttribute]
private void set_EvaluationInfos(IEnumerable`1<IEvaluationInfo> value);
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    public bool ShouldAutoPause(ILicensedEntity entity);
    private void AutoPauseEvaluationsWithLicenseEntered(ILogger logger);
    private void CheckLicensesAndFire();
    private void CheckLicensesAndQueueRechecks();
    public void OnFeedbackRequested(IEnumerable`1<ILicensedEntity> entities);
    public void OnExpirationWarningShown(IEnumerable`1<ILicensedEntity> entities);
    public void StartEvaluation(ILicensedEntity entity);
    public void PauseEvaluation(ILicensedEntity entity);
    public void ResumeEvaluation(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private bool <AutoPauseEvaluationsWithLicenseEntered>b__d(ILicensedEntity entity);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.Evaluation.EvaluationTracker : object {
    [CompilerGeneratedAttribute]
private ISignal`1<ILicensedEntity> <EntityUsedSignal>k__BackingField;
    public ISignal`1<ILicensedEntity> EntityUsedSignal { get; public set; }
    public EvaluationTracker(Lifetime lifetime, ILogger logger);
    [CompilerGeneratedAttribute]
public ISignal`1<ILicensedEntity> get_EntityUsedSignal();
    [CompilerGeneratedAttribute]
public void set_EntityUsedSignal(ISignal`1<ILicensedEntity> value);
}
public interface JetBrains.Application.License2.Evaluation.IEvaluationInfo {
    public string Guid { get; }
    public bool IsStarted { get; }
    public bool IsFeedbackRequested { get; public set; }
    public bool IsNotificationShown { get; public set; }
    public DateTime Started { get; }
    public DateTime LastUsageDate { get; }
    public int ActuallyUsedDays { get; }
    public bool IsPaused { get; }
    public abstract virtual string get_Guid();
    public abstract virtual bool get_IsStarted();
    public abstract virtual bool get_IsFeedbackRequested();
    public abstract virtual void set_IsFeedbackRequested(bool value);
    public abstract virtual bool get_IsNotificationShown();
    public abstract virtual void set_IsNotificationShown(bool value);
    public abstract virtual DateTime get_Started();
    public abstract virtual DateTime get_LastUsageDate();
    public abstract virtual int get_ActuallyUsedDays();
    public abstract virtual bool get_IsPaused();
    public abstract virtual void StartEvaluation();
    public abstract virtual void PauseEvaluation();
    public abstract virtual void ResumeEvaluation();
    public abstract virtual bool SetUsed(bool addCalendarDays);
}
public enum JetBrains.Application.License2.EvaluationUsageMode : Enum {
    public int value__;
    public static EvaluationUsageMode IMPLICITE_USAGE;
    public static EvaluationUsageMode IMPLICITE_USAGE_EVERY_CALENDAR_DAY;
    public static EvaluationUsageMode EXPLICITE_USAGE;
}
public interface JetBrains.Application.License2.IDocumentsThatRequireUserConsent {
    public IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> DocumentsNeedToBeAccepted { get; }
    public abstract virtual IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> get_DocumentsNeedToBeAccepted();
    public abstract virtual ICollection`1<IDocumentThatRequiresUserConsent> GetAllDocuments();
    public abstract virtual DocumentState GetDocumentState(IDocumentThatRequiresUserConsent document);
    public abstract virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
}
public interface JetBrains.Application.License2.IDocumentThatRequiresUserConsent {
    public string PresentableName { get; }
    public Version Version { get; }
    public string HtmlText { get; }
    public string TechnicalName { get; }
    public abstract virtual string get_PresentableName();
    public abstract virtual Version get_Version();
    public abstract virtual string get_HtmlText();
    public abstract virtual string get_TechnicalName();
}
public interface JetBrains.Application.License2.IDocumentThatRequiresUserConsentProvider {
    public IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> Document { get; public set; }
    public abstract virtual IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> get_Document();
    public abstract virtual void set_Document(IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> value);
    public abstract virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
}
public interface JetBrains.Application.License2.ILicense2CheckComponent {
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISignal`1<LicenseViewModel> LicenseViewModelSaved { get; }
    public abstract virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public abstract virtual void ShowLicenseDialog(string reason);
    public abstract virtual void RegisterShowLicenseDialogHandler(Lifetime lifetime, Func`2<LicenseDialogShowArgs, bool> handler, Func`2<LicenseViewModel, bool> forceShowDialog);
    public abstract virtual ISignal`1<LicenseViewModel> get_LicenseViewModelSaved();
    public abstract virtual void WithLicenseViewModel(Lifetime lifetime, Action`1<LicenseViewModel> action);
    public abstract virtual IEnumerable`1<string> GetValidLicensePresentation();
}
public interface JetBrains.Application.License2.ILicenseCheckInfo {
    public ILicensedEntity Entity { get; }
    public ResultWithDescription Result { get; }
    public abstract virtual ILicensedEntity get_Entity();
    public abstract virtual ResultWithDescription get_Result();
}
public interface JetBrains.Application.License2.ILicenseCheckInfo`1 {
    public T Data { get; }
    public abstract virtual T get_Data();
}
public interface JetBrains.Application.License2.ILicenseCheckResult {
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public abstract virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public abstract virtual ISimpleSignal get_ResultChanged();
    [CanBeNullAttribute]
public abstract virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
}
public interface JetBrains.Application.License2.ILicenseData {
    public bool IsFirstRun { get; public set; }
    public IEnumerable`1<ILicensedEntity> LastRunAllEntities { get; }
    public IEnumerable`1<ILicensedEntity> LastRunEnabledEntities { get; }
    public abstract virtual bool get_IsFirstRun();
    public abstract virtual void set_IsFirstRun(bool value);
    public abstract virtual IEnumerable`1<ILicensedEntity> get_LastRunAllEntities();
    public abstract virtual IEnumerable`1<ILicensedEntity> get_LastRunEnabledEntities();
    public abstract virtual IEnumerable`1<T> GetData();
}
public interface JetBrains.Application.License2.ILicenseDataItem {
}
public interface JetBrains.Application.License2.ILicensedEntity {
    [NotNullAttribute]
public string TechnicalName { get; }
    [NotNullAttribute]
public string PresentableName { get; }
    public Version EntityVersion { get; }
    public string EntityMarketingVersionString { get; }
    [CanBeNullAttribute]
public ISupportsEvaluation Evaluation { get; }
    [CanBeNullAttribute]
public ISupportsUserLicense UserLicense { get; }
    [NotNullAttribute]
public IEnumerable`1<ISupportsLicenseServer> LicenseServer { get; }
    [NotNullAttribute]
public IEnumerable`1<ISupportsJetBrainsAccount> JetBrainsAccount { get; }
    [CanBeNullAttribute]
public string PurchaseUrl { get; }
    [CanBeNullAttribute]
public string ProductCode { get; }
    public abstract virtual string get_TechnicalName();
    public abstract virtual string get_PresentableName();
    public abstract virtual Version get_EntityVersion();
    public abstract virtual string get_EntityMarketingVersionString();
    public abstract virtual ISupportsEvaluation get_Evaluation();
    public abstract virtual ISupportsUserLicense get_UserLicense();
    public abstract virtual IEnumerable`1<ISupportsLicenseServer> get_LicenseServer();
    public abstract virtual IEnumerable`1<ISupportsJetBrainsAccount> get_JetBrainsAccount();
    public abstract virtual string get_PurchaseUrl();
    public abstract virtual string get_ProductCode();
}
public interface JetBrains.Application.License2.ILicenseViewSubmodel {
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    public IEnumerable`1<ILicenseDataItem> LicenseData { get; }
    public abstract virtual IProperty`1<bool> get_IsOn();
    public abstract virtual IProperty`1<LicenseViewModel> get_AllModel();
    public abstract virtual IEnumerable`1<ILicenseDataItem> get_LicenseData();
}
public interface JetBrains.Application.License2.ISupportsEvaluation {
    [NotNullAttribute]
public string ProductGuid { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public EvaluationUsageMode Mode { get; }
    public abstract virtual string get_ProductGuid();
    public abstract virtual int get_FreeTrialPeriod();
    public abstract virtual int get_FeedbackRequestPeriod();
    public abstract virtual int get_LeftDaysNotification();
    public abstract virtual EvaluationUsageMode get_Mode();
}
public interface JetBrains.Application.License2.ISupportsJetBrainsAccount {
    public string ProductName { get; }
    public string ProductCode { get; }
    public string ProductEdition { get; }
    public int ProductVersion { get; }
    public abstract virtual string get_ProductName();
    public abstract virtual string get_ProductCode();
    public abstract virtual string get_ProductEdition();
    public abstract virtual int get_ProductVersion();
}
public interface JetBrains.Application.License2.ISupportsLicenseServer {
    public string ProductFamily { get; }
    public int LicenseServerVersion { get; }
    public string LicenseServerEdition { get; }
    public bool SendBuildDateAsVersionToOldServers { get; }
    [NotNullAttribute]
public string UrlToShowWhenLicenseServerIsBlacklisted { get; }
    public abstract virtual string get_ProductFamily();
    public abstract virtual int get_LicenseServerVersion();
    public abstract virtual string get_LicenseServerEdition();
    public abstract virtual bool get_SendBuildDateAsVersionToOldServers();
    public abstract virtual string get_UrlToShowWhenLicenseServerIsBlacklisted();
}
public interface JetBrains.Application.License2.ISupportsLicensesWithSubscription {
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public abstract virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
}
public interface JetBrains.Application.License2.ISupportsUserLicense {
    [NotNullAttribute]
public IEnumerable`1<UserLicenseChecker> UserLicenseCheckers { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public abstract virtual IEnumerable`1<UserLicenseChecker> get_UserLicenseCheckers();
    [CanBeNullAttribute]
public abstract virtual string GetLicenseAgreement(LicenseType licenseType);
    public abstract virtual bool get_DoCheckLicenseReuseOverNetwork();
}
public interface JetBrains.Application.License2.JBAccount.IJBAccountInfo {
    public bool IsPrimary { get; }
    public string Account { get; }
    public string UserId { get; }
    public IEnumerable`1<string> UsedAssetIds { get; }
    public IEnumerable`1<string> EncodedAssetDatas { get; }
    public DateTime NextCheckTime { get; }
    public DateTime ValidationDeadline { get; }
    public abstract virtual bool get_IsPrimary();
    public abstract virtual string get_Account();
    public abstract virtual string get_UserId();
    public abstract virtual IEnumerable`1<string> get_UsedAssetIds();
    public abstract virtual IEnumerable`1<string> get_EncodedAssetDatas();
    public abstract virtual DateTime get_NextCheckTime();
    public abstract virtual DateTime get_ValidationDeadline();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.JBAccount.JBAccountEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, IEnumerable`1<Pair`2<ILicensedEntity, ISupportsJetBrainsAccount>>> CS$<>9__CachedAnonymousMethodDelegate2;
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<ILicensedEntity, ISupportsJetBrainsAccount>> WithJBAccount(IEnumerable`1<ILicensedEntity> entities);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Pair`2<ILicensedEntity, ISupportsJetBrainsAccount>> <WithJBAccount>b__0(ILicensedEntity entity);
}
internal class JetBrains.Application.License2.JBAccount.JBAccountInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <UsedAssetIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EncodedAssetDatas>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextCheckTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ValidationDeadline>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, AssetData>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, AssetData>, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool IsPrimary { get; internal set; }
    public string Account { get; internal set; }
    public string UserId { get; internal set; }
    public IEnumerable`1<string> UsedAssetIds { get; internal set; }
    public IEnumerable`1<string> EncodedAssetDatas { get; internal set; }
    public DateTime NextCheckTime { get; internal set; }
    public DateTime ValidationDeadline { get; internal set; }
    public JBAccountInfo(bool isPrimary, string jbAccount, string jbUserId, IEnumerable`1<string> usedAssetIds, IEnumerable`1<string> encodedAssetDatas);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPrimary();
    [CompilerGeneratedAttribute]
internal void set_IsPrimary(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Account();
    [CompilerGeneratedAttribute]
internal void set_Account(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserId();
    [CompilerGeneratedAttribute]
internal void set_UserId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_UsedAssetIds();
    [CompilerGeneratedAttribute]
internal void set_UsedAssetIds(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_EncodedAssetDatas();
    [CompilerGeneratedAttribute]
internal void set_EncodedAssetDatas(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_NextCheckTime();
    [CompilerGeneratedAttribute]
internal void set_NextCheckTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ValidationDeadline();
    [CompilerGeneratedAttribute]
internal void set_ValidationDeadline(DateTime value);
    [CanBeNullAttribute]
public IList`1<string> Sqeeze(UserLicenseService userLicenseService);
    [CompilerGeneratedAttribute]
private static bool <Sqeeze>b__0(Pair`2<string, AssetData> p);
    [CompilerGeneratedAttribute]
private static string <Sqeeze>b__1(Pair`2<string, AssetData> p);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.JBAccount.JBAccountInfoEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<AssetData> GetAssetDatas(IJBAccountInfo info, UserLicenseService userLicenseService);
    [ExtensionAttribute]
public static IEnumerable`1<AssetData> GetUsedAssetDatas(IJBAccountInfo info, UserLicenseService userLicenseService);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static AssetData Decode(string encodedAssetData, UserLicenseService userLicenseService);
}
public class JetBrains.Application.License2.JBAccount.JBAccountInfoPersister : object {
    private SafeRegistryPersister`1<JBAccountInfo> myPersister;
    public JBAccountInfoPersister(ILogger logger, AnyProductSettingsLocation settingsLocation);
    public sealed virtual IEnumerable`1<IJBAccountInfo> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<IJBAccountInfo> items);
}
public class JetBrains.Application.License2.JBAccount.JBAccountSettings : object {
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    public bool IsOn { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
}
public class JetBrains.Application.License2.JBAccount.JBAccountSettingsPersister : object {
    private SafeRegistryPersister`1<JBAccountSettings> myPersister;
    public JBAccountSettingsPersister(ILogger logger, AnyProductSettingsLocation settingsLocation);
    public sealed virtual IEnumerable`1<JBAccountSettings> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<JBAccountSettings> items);
}
public enum JetBrains.Application.License2.JBAccount.JBAccountState : Enum {
    public int value__;
    public static JBAccountState NOT_LOGGED_IN;
    public static JBAccountState LOGGING_IN;
    public static JBAccountState LOGIN_FAILED;
    public static JBAccountState LOGIN_OK;
    public static JBAccountState NETWORK_ERROR;
}
public class JetBrains.Application.License2.JBAccount.JBAcountLicenseViewSubmodel : object {
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private ILogger myLogger;
    private IJetBrainsLicenseServerAccess myLicenseServerAccess;
    private UserNotifications myUserNotifications;
    private NewLicenseDataCache myNewLicenseDataCache;
    private LicenseCheckResult`1<string> myCheckResult;
    private JBAccountInfo myInfo;
    private SequentialLifetimes myAccountInaccessibleNotificationLifetimes;
    [CompilerGeneratedAttribute]
private UserLicenseService <UserLicenseService>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Pair`2<JBAccountState, string>> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<bool, IReadOnlyCollection`1<ILicensedEntity>, IReadOnlyCollection`1<ILicensedEntity>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<AuthenticateResponse, string> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<EncodedAsset, string> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<AssetDataValidationResult, DateTime> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Func`2<AssetDataValidationResult, DateTime> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Func`2<AssetDataValidationResult, bool> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, AssetData>, bool> CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, AssetData>, string> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<IJBAccountInfo, bool> CS$<>9__CachedAnonymousMethodDelegate5d;
    [CompilerGeneratedAttribute]
private static Func`2<IJBAccountInfo, bool> CS$<>9__CachedAnonymousMethodDelegate5e;
    public UserLicenseService UserLicenseService { get; private set; }
    public IProperty`1<Pair`2<JBAccountState, string>> State { get; private set; }
    public IJBAccountInfo AccountInfo { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; private set; }
    public ISimpleSignal ResultChanged { get; }
    public IProperty`1<bool> IsOn { get; private set; }
    public IProperty`1<LicenseViewModel> AllModel { get; private set; }
    public IEnumerable`1<ILicenseDataItem> LicenseData { get; }
    public bool IsAllowed { get; }
    public JBAcountLicenseViewSubmodel(Lifetime lifetime, string allModelName, ILicenseData data, ITaskHost taskHost, ILogger logger, IJetBrainsLicenseServerAccess licenseServerAccess, UserNotifications userNotifications, NewLicenseDataCache newLicenseDataCache, UserLicenseService userLicenseService);
    [CompilerGeneratedAttribute]
public UserLicenseService get_UserLicenseService();
    [CompilerGeneratedAttribute]
private void set_UserLicenseService(UserLicenseService value);
    [CompilerGeneratedAttribute]
public IProperty`1<Pair`2<JBAccountState, string>> get_State();
    [CompilerGeneratedAttribute]
private void set_State(IProperty`1<Pair`2<JBAccountState, string>> value);
    public IJBAccountInfo get_AccountInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    [CompilerGeneratedAttribute]
private void set_AllowedEntities(IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> value);
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
private void set_IsOn(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    [CompilerGeneratedAttribute]
private void set_AllModel(IProperty`1<LicenseViewModel> value);
    public sealed virtual IEnumerable`1<ILicenseDataItem> get_LicenseData();
    public bool get_IsAllowed();
    public void LogIn(string jbAccount, string password, string userId);
    private NetworkOperationResult`1<string> TryAuthenticate(string jbAccount, string password);
    private NetworkOperationResult`1<Tuple`2<ICollection`1<string>, DateTime>> TryGetEncodedAssetData(string userId);
    private NetworkOperationResult`1<IList`1<AssetDataValidationResult>> TryValidateAssets(IEnumerable`1<string> encodedAssets);
    public bool UseAsset(string assetId);
    public bool StopUsingAsset(string assetId);
    private void QuickCheckAndQueue();
    private bool IsMatch(AssetData data, ISupportsJetBrainsAccount supportsJetBrainsAccount);
    private NetworkOperationResult`1<AssetDataValidationResult> TryValidateAssetData(AssetData data, IDictionary`2<Pair`2<string, ISupportsJetBrainsAccount>, ValidateLicenseResponse> duplicateRequestsGuard);
    private static DateTime AdjustNextCheckTime(IEnumerable`1<DateTime> nextCheckTimes);
    public void ValidateAssets();
    private bool ReplaceAssetData(string assetId, string encodedAssetData);
    public void CheckForNewAssetsAsync();
    private void CheckForNewAssets();
    public IEnumerable`1<ILicenseCheckInfo> CheckAssetData(AssetData data, IEnumerable`1<ILicensedEntity> entities);
    [CanBeNullAttribute]
private ILicenseCheckInfo TryCheckAssetData(AssetData data, ILicensedEntity entity, ISupportsJetBrainsAccount supportsJetBrainsAccount);
    private void Enqueue(string actionName, Action action);
    private void Enqueue(string actionName, Action action, DateTime when);
    private JBAccountInfo GetInfo(ILicenseData data, Boolean& usingSharedLoginInfo);
    private JetBrainsSharedJBAccrountInfo TryGetValidSharedInfo(ILicenseData data);
    private JBAccountInfo WrapInfo(IJBAccountInfo info, JetBrainsSharedJBAccrountInfo sharedInfo, Boolean& isUsingShared);
    public void LogOut();
    public void TryUse(string loginName, string userId, IEnumerable`1<string> encodedAssetData, IEnumerable`1<string> usedAssetIds);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static IReadOnlyCollection`1<ILicensedEntity> <.ctor>b__3(bool isOn, IReadOnlyCollection`1<ILicensedEntity> entities);
    [CompilerGeneratedAttribute]
private static string <TryAuthenticate>b__23(AuthenticateResponse authenticateResponse);
    [CompilerGeneratedAttribute]
private static string <TryGetEncodedAssetData>b__25(EncodedAsset asset);
    [CompilerGeneratedAttribute]
private AssetData <TryValidateAssets>b__27(string s);
    [CompilerGeneratedAttribute]
private void <QuickCheckAndQueue>b__33();
    [CompilerGeneratedAttribute]
private static DateTime <ValidateAssets>b__36(AssetDataValidationResult result);
    [CompilerGeneratedAttribute]
private static DateTime <ValidateAssets>b__37(AssetDataValidationResult result);
    [CompilerGeneratedAttribute]
private static bool <ValidateAssets>b__38(AssetDataValidationResult result);
    [CompilerGeneratedAttribute]
private Pair`2<string, AssetData> <CheckForNewAssets>b__49(string s);
    [CompilerGeneratedAttribute]
private static bool <CheckForNewAssets>b__4a(Pair`2<string, AssetData> pair);
    [CompilerGeneratedAttribute]
private static string <CheckForNewAssets>b__4c(Pair`2<string, AssetData> pair);
    [CompilerGeneratedAttribute]
private static bool <GetInfo>b__5b(IJBAccountInfo info);
    [CompilerGeneratedAttribute]
private static bool <GetInfo>b__5c(IJBAccountInfo info);
}
internal class JetBrains.Application.License2.JBAccount.JetBrainsSharedJBAccrountInfo : object {
    [CompilerGeneratedAttribute]
private string <LoginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    public string LoginName { get; public set; }
    public string UserId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LoginName();
    [CompilerGeneratedAttribute]
public void set_LoginName(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
}
internal class JetBrains.Application.License2.JBAccount.JetBrainsSharedJBAccrountInfoPersister : object {
    private ISharedStorageAccess`1<string> myUserIdAccessAccess;
    private ISharedStorageAccess`1<string> myUserLoginAccessAccess;
    public JetBrainsSharedJBAccrountInfoPersister(JetBrainsSharedStorage storage);
    private static string ConvertToString(string s);
    private static string ConvertFromString(string s);
    public sealed virtual IEnumerable`1<JetBrainsSharedJBAccrountInfo> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<JetBrainsSharedJBAccrountInfo> items);
}
public class JetBrains.Application.License2.JBAccount.NetworkOperationResult`1 : object {
    [CompilerGeneratedAttribute]
private ResponseCode <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public ResponseCode Result { get; private set; }
    [CanBeNullAttribute]
public string Description { get; private set; }
    public T Value { get; private set; }
    public bool IsSuccessful { get; }
    public NetworkOperationResult`1(ResponseCode result, string description, T value);
    [CompilerGeneratedAttribute]
public ResponseCode get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(ResponseCode value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
    public bool get_IsSuccessful();
    public static NetworkOperationResult`1<T> Ok(T value);
    public static NetworkOperationResult`1<T> NotOk(AbstractResponse response);
    public static NetworkOperationResult`1<T> Error(AbstractResponse response);
    public static NetworkOperationResult`1<T> NetworkError(AbstractResponse response);
    public static NetworkOperationResult`1<T> Create(TResponse response, Func`2<TResponse, T> whenOk);
}
public class JetBrains.Application.License2.JBAccount.OldJBAccountInfoPersister : object {
    public sealed virtual IEnumerable`1<IJBAccountInfo> LoadItems();
    [CanBeNullAttribute]
private static IJBAccountInfo TryLoadInfo(string pathInRegistry);
    private static string Decode(string s);
    public sealed virtual void SaveItems(IEnumerable`1<IJBAccountInfo> items);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.License2CheckComponent : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private LicenseDataPersister myPersister;
    private IThreading myThreading;
    private IDocumentsThatRequireUserConsent myDocumentsThatRequireUserConsent;
    private IConsentOptions myConsentOptions;
    private IProperty`1<LicenseViewModel> myLicenseViewModel;
    private List`1<Func`2<LicenseDialogShowArgs, bool>> myAllowedEntitiesChangedHandlers;
    private IList`1<ShowDialogRequest> myShowDialogRequests;
    private bool myIsShowLicenseDialogEnqueued;
    private bool myIsLicenseDialogRequestedByApi;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<LicenseViewModel> <LicenseViewModelSaved>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseViewSubmodel, IEnumerable`1<ILicenseDataItem>> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<IDocumentThatRequiresUserConsent, string> CS$<>9__CachedAnonymousMethodDelegate36;
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; private set; }
    public ISignal`1<LicenseViewModel> LicenseViewModelSaved { get; private set; }
    public License2CheckComponent(Lifetime lifetime, ILogger logger, LicenseViewModelBuilder viewModelBuilder, LicenseDataPersister persister, IThreading threading, IDocumentsThatRequireUserConsent documentsThatRequireUserConsent, License2CheckComponentSettings settings, IConsentOptions consentOptions);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    [CompilerGeneratedAttribute]
private void set_AllowedEntities(IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> value);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<LicenseViewModel> get_LicenseViewModelSaved();
    [CompilerGeneratedAttribute]
private void set_LicenseViewModelSaved(ISignal`1<LicenseViewModel> value);
    private void RequestShowLicenseDialog(ShowDialogRequest request);
    private void EnqueueShowLicenseDialog();
    public sealed virtual void ShowLicenseDialog(string reason);
    public sealed virtual void RegisterShowLicenseDialogHandler(Lifetime lifetime, Func`2<LicenseDialogShowArgs, bool> handler, Func`2<LicenseViewModel, bool> forceShowDialog);
    public sealed virtual void WithLicenseViewModel(Lifetime lifetime, Action`1<LicenseViewModel> action);
    public sealed virtual IEnumerable`1<string> GetValidLicensePresentation();
    private ILicenseData CreateLicenseData(LicenseViewModel model);
    private void SetAllowedEntities(IReadOnlyCollection`1<ILicensedEntity> allowedEntities, bool emptyIfThereAreDocumentsToBeAccepted);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__a(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__b(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private void <EnqueueShowLicenseDialog>b__20(LicenseViewModel model);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ILicenseDataItem> <CreateLicenseData>b__33(ILicenseViewSubmodel submodel);
    [CompilerGeneratedAttribute]
private static string <SetAllowedEntities>b__35(IDocumentThatRequiresUserConsent document);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.License2CheckComponentEx : object {
    [ExtensionAttribute]
public static void OnLicenseViewModelSaved(ILicense2CheckComponent checkComponent, Lifetime lifetime, Action`1<T> handler);
    [ExtensionAttribute]
public static void WithLicenseViewSubmodel(ILicense2CheckComponent checkComponent, Lifetime lifetime, Action`1<T> handler);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.License2CheckComponentSettings : object {
    public bool DoSync { get; }
    public virtual bool get_DoSync();
}
public class JetBrains.Application.License2.LicenseCheckInfo : object {
    [CompilerGeneratedAttribute]
private ILicensedEntity <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultWithDescription <Result>k__BackingField;
    public ILicensedEntity Entity { get; private set; }
    public ResultWithDescription Result { get; private set; }
    public LicenseCheckInfo(ILicensedEntity entity, ResultWithDescription result);
    public LicenseCheckInfo(ILicensedEntity entity, Result result, string description);
    [StringFormatMethodAttribute("fmt")]
public LicenseCheckInfo(ILicensedEntity entity, Result result, string fmt, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual ILicensedEntity get_Entity();
    [CompilerGeneratedAttribute]
private void set_Entity(ILicensedEntity value);
    [CompilerGeneratedAttribute]
public sealed virtual ResultWithDescription get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(ResultWithDescription value);
}
public class JetBrains.Application.License2.LicenseCheckInfo`1 : LicenseCheckInfo {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; private set; }
    public LicenseCheckInfo`1(ILicensedEntity entity, T data, ResultWithDescription result);
    public LicenseCheckInfo`1(ILicensedEntity entity, T data, Result result, string description);
    public LicenseCheckInfo`1(ILicensedEntity entity, T data, Result result, string fmt, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(T value);
}
public class JetBrains.Application.License2.LicenseCheckResult`1 : object {
    private object myLockObject;
    private int myBulkOperationCount;
    private ILogger myLogger;
    private string myName;
    private Dictionary`2<ILicensedEntity, Dictionary`2<TChecker, ILicenseCheckInfo>> myResults;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ResultChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private static Predicate`1<TChecker> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<TChecker, ILicenseCheckInfo>, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; private set; }
    public ISimpleSignal ResultChanged { get; private set; }
    public LicenseCheckResult`1(Lifetime lifetime, ILogger logger, string name);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    [CompilerGeneratedAttribute]
private void set_AllowedEntities(IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> value);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ResultChanged();
    [CompilerGeneratedAttribute]
private void set_ResultChanged(ISimpleSignal value);
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    public ILicenseCheckInfo TryGetInfo(ILicensedEntity entity, Predicate`1<TChecker> includeChecker);
    public void BulkChanges(Action action);
    private IReadOnlyCollection`1<ILicensedEntity> GetAllowedEntities();
    private void UpdateResultsAndFireIfNecessary();
    public void ReplaceResult(ILicenseCheckInfo info, TChecker checker);
    public void AddResult(ILicenseCheckInfo info, TChecker checker);
    public void AddResults(TChecker checker, IEnumerable`1<ILicenseCheckInfo> infos);
    public void RemoveResult(ILicensedEntity entity, TChecker checker);
    public IList`1<ILicenseCheckInfo> GetCheckerResults(TChecker checker);
    public void RemoveResults(TChecker checker);
    public void RemoveAllResults();
    [CompilerGeneratedAttribute]
private static bool <TryGetInfo>b__0(TChecker checker);
    [CompilerGeneratedAttribute]
private static bool <GetAllowedEntities>b__6(KeyValuePair`2<TChecker, ILicenseCheckInfo> p2);
    [CompilerGeneratedAttribute]
private void <RemoveAllResults>b__17();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicenseCheckResultEx : object {
    [ExtensionAttribute]
public static bool IsLicenseEntityAllowed(ILicenseCheckResult model, ILicensedEntity entity);
    [ExtensionAttribute]
public static bool LicenseEntityWillBeShutdownIn30Min(ILicenseCheckResult model, ILicensedEntity entity);
}
public class JetBrains.Application.License2.LicenseData : object {
    private ArrayList myData;
    [CompilerGeneratedAttribute]
private bool <IsFirstRun>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastRunAllEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastRunEnabledEntities>k__BackingField;
    public bool IsFirstRun { get; public set; }
    public IEnumerable`1<ILicensedEntity> LastRunAllEntities { get; private set; }
    public IEnumerable`1<ILicensedEntity> LastRunEnabledEntities { get; private set; }
    public LicenseData(IEnumerable`1<ILicensedEntity> allEntities, IEnumerable`1<ILicensedEntity> enabledEntities, bool isFirstRun);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFirstRun();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFirstRun(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ILicensedEntity> get_LastRunAllEntities();
    [CompilerGeneratedAttribute]
private void set_LastRunAllEntities(IEnumerable`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ILicensedEntity> get_LastRunEnabledEntities();
    [CompilerGeneratedAttribute]
private void set_LastRunEnabledEntities(IEnumerable`1<ILicensedEntity> value);
    public sealed virtual IEnumerable`1<T> GetData();
    public void AppendData(T data);
    public void AppendDataRange(IEnumerable`1<T> datas);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicensedEntityEx : object {
    [ExtensionAttribute]
public static bool RequiresLicense(ILicensedEntity entity);
    [ExtensionAttribute]
public static string GetFullPresentableName(ILicensedEntity entity);
    [ExtensionAttribute]
public static string GetShortPresentableName(ILicensedEntity entity);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.License2.ILicensedEntity")]
public class JetBrains.Application.License2.LicensedEntityIconsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <IconType32x32>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <IconType16x16>k__BackingField;
    [NotNullAttribute]
public Type IconType32x32 { get; public set; }
    [NotNullAttribute]
public Type IconType16x16 { get; public set; }
    public LicensedEntityIconsAttribute(Type iconType32X32, Type iconType16X16);
    [CompilerGeneratedAttribute]
public Type get_IconType32x32();
    [CompilerGeneratedAttribute]
public void set_IconType32x32(Type value);
    [CompilerGeneratedAttribute]
public Type get_IconType16x16();
    [CompilerGeneratedAttribute]
public void set_IconType16x16(Type value);
}
public class JetBrains.Application.License2.LicenseDialogShowArgs : object {
    [CompilerGeneratedAttribute]
private string <ReasonToShow>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseViewModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocumentsThatRequireUserConsent <DocumentsThatRequireUserConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsentOptions <ConsentOptions>k__BackingField;
    public string ReasonToShow { get; private set; }
    public LicenseViewModel Model { get; private set; }
    public IDocumentsThatRequireUserConsent DocumentsThatRequireUserConsent { get; private set; }
    public IConsentOptions ConsentOptions { get; private set; }
    public LicenseDialogShowArgs(string reasonToShow, LicenseViewModel model, IDocumentsThatRequireUserConsent documentsThatRequireUserConsent, IConsentOptions consentOptions);
    [CompilerGeneratedAttribute]
public string get_ReasonToShow();
    [CompilerGeneratedAttribute]
private void set_ReasonToShow(string value);
    [CompilerGeneratedAttribute]
public LicenseViewModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(LicenseViewModel value);
    [CompilerGeneratedAttribute]
public IDocumentsThatRequireUserConsent get_DocumentsThatRequireUserConsent();
    [CompilerGeneratedAttribute]
private void set_DocumentsThatRequireUserConsent(IDocumentsThatRequireUserConsent value);
    [CompilerGeneratedAttribute]
public IConsentOptions get_ConsentOptions();
    [CompilerGeneratedAttribute]
private void set_ConsentOptions(IConsentOptions value);
}
public class JetBrains.Application.License2.LicenseServer.EntityInfo : object {
    [CompilerGeneratedAttribute]
private string <TechnicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoObtainTicketAutomatically>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private SupportsLicenseServer <SupportUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentTicketId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentTicketEmail>k__BackingField;
    public string TechnicalName { get; internal set; }
    public bool DoObtainTicketAutomatically { get; public set; }
    public DateTime LastUsed { get; internal set; }
    [CanBeNullAttribute]
public SupportsLicenseServer SupportUsed { get; internal set; }
    [CanBeNullAttribute]
public string PermanentTicketId { get; internal set; }
    [CanBeNullAttribute]
public string PermanentTicketEmail { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_TechnicalName();
    [CompilerGeneratedAttribute]
internal void set_TechnicalName(string value);
    [CompilerGeneratedAttribute]
public bool get_DoObtainTicketAutomatically();
    [CompilerGeneratedAttribute]
public void set_DoObtainTicketAutomatically(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUsed();
    [CompilerGeneratedAttribute]
internal void set_LastUsed(DateTime value);
    [CompilerGeneratedAttribute]
public SupportsLicenseServer get_SupportUsed();
    [CompilerGeneratedAttribute]
internal void set_SupportUsed(SupportsLicenseServer value);
    [CompilerGeneratedAttribute]
public string get_PermanentTicketId();
    [CompilerGeneratedAttribute]
internal void set_PermanentTicketId(string value);
    [CompilerGeneratedAttribute]
public string get_PermanentTicketEmail();
    [CompilerGeneratedAttribute]
internal void set_PermanentTicketEmail(string value);
}
public interface JetBrains.Application.License2.LicenseServer.ILicenseServerInfo {
    public string Url { get; }
    public IEnumerable`1<EntityInfo> Entities { get; }
    public abstract virtual string get_Url();
    public abstract virtual IEnumerable`1<EntityInfo> get_Entities();
}
public interface JetBrains.Application.License2.LicenseServer.ITaskResult {
    public string Name { get; }
    public TaskState State { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual TaskState get_State();
    public abstract virtual string get_Description();
    public abstract virtual void Cancel();
}
internal class JetBrains.Application.License2.LicenseServer.LicenseServerClientNew : object {
    private Lifetime myLifetime;
    private WebProxySettingsReader myProxySettingsReader;
    private ILogger myLogger;
    private ITaskHost myTaskHost;
    private UserNotifications myUserNotifications;
    private BlackListAndCrl myBlackListAndCrl;
    private LicenseCheckResult`1<LicenseServerClientNew> myCheckResult;
    private Dictionary`2<ILicensedEntity, EntityState> myStates;
    private SequentialLifetimes myServerInaccessibleNotificationLifetimes;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static Func`2<GetPermanentActivationResponse, bool> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<ILicensedEntity>, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate41;
    [CompilerGeneratedAttribute]
private static Func`2<ObtainPermanentTicketGroupResponse, bool> CS$<>9__CachedAnonymousMethodDelegate42;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<ILicensedEntity, EntityState>, bool> CS$<>9__CachedAnonymousMethodDelegate54;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<ILicensedEntity, EntityState>, bool> CS$<>9__CachedAnonymousMethodDelegate57;
    public LicenseCheckResult`1<LicenseServerClientNew> Result { get; }
    public string Url { get; private set; }
    public bool Enabled { get; public set; }
    public LicenseServerClientNew(Lifetime lifetime, WebProxySettingsReader proxySettingsReader, ILogger logger, ITaskHost taskHost, UserNotifications userNotifications, string url, BlackListAndCrl blackListAndCrl, IEnumerable`1<ILicensedEntity> entities);
    public LicenseCheckResult`1<LicenseServerClientNew> get_Result();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public virtual string ToString();
    private void WithState(ILicensedEntity entity, Action`1<EntityState> action);
    private T WithState(ILicensedEntity entity, Func`2<EntityState, T> action);
    private void NotifyLicenseServerInaccessible(ILicensedEntity entity, State oldState, EntityState state);
    public void ObtainFloatingTicket(ILicensedEntity entity, DateTime lastUsed, SupportsLicenseServer lastSupportUsed);
    private void QueueObtainFloatingTicket(ILicensedEntity entity, TimeSpan delay);
    private void SetStateOnErrorResponse(ILicensedEntity entity, string errorMessage);
    private void QueueProlongateFloatingTicket(ILicensedEntity entity, long prolongationPeriodInMilliseconds);
    public void ReleaseFloatingTicket(ILicensedEntity entity, bool doUpdateResult);
    public bool SetPermanentTicket(ILicensedEntity entity, string ticketId, DateTime lastUsed, string email, ISupportsLicenseServer support);
    private static ILicenseCheckInfo CreatePermanentTicketInfo(ILicensedEntity entity, string email);
    private void QueuePermanentTicketCheck(ILicensedEntity entity, TimeSpan timeout);
    [StringFormatMethodAttribute("fmt")]
private void Trace(string fmt, Object[] args);
    [StringFormatMethodAttribute("fmt")]
private void TraceResponse(AbstractResponse response, string fmt, Object[] args);
    private static SupportsLicenseServer ToClass(ISupportsLicenseServer s);
    public IList`1<EntityInfo> GetEntityInfos();
    public NetworkOperationResult`1<bool> RequestPermanentActivationCode(string email);
    public NetworkOperationResult`1<bool> ObtainPermanentTickets(string email, string activationCode);
    public NetworkOperationResult`1<bool> ReleasePermanentTickets();
    public bool HoldsFloatingTickets();
    public bool HoldsPermanentTickets();
    [CompilerGeneratedAttribute]
private static string <RequestPermanentActivationCode>b__37(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <RequestPermanentActivationCode>b__38(GetPermanentActivationResponse r);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <ObtainPermanentTickets>b__3c(IList`1<ILicensedEntity> list);
    [CompilerGeneratedAttribute]
private static bool <ObtainPermanentTickets>b__3e(ObtainPermanentTicketGroupResponse r);
    [CompilerGeneratedAttribute]
private static string <ObtainPermanentTickets>b__3d(ILicensedEntity e);
    [CompilerGeneratedAttribute]
private static string <ReleasePermanentTickets>b__4c(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <HoldsFloatingTickets>b__53(KeyValuePair`2<ILicensedEntity, EntityState> pair);
    [CompilerGeneratedAttribute]
private static bool <HoldsPermanentTickets>b__56(KeyValuePair`2<ILicensedEntity, EntityState> pair);
}
internal class JetBrains.Application.License2.LicenseServer.LicenseServerInfo : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<EntityInfo> <Entities>k__BackingField;
    public string Url { get; internal set; }
    public IEnumerable`1<EntityInfo> Entities { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<EntityInfo> get_Entities();
    [CompilerGeneratedAttribute]
internal void set_Entities(IEnumerable`1<EntityInfo> value);
}
public class JetBrains.Application.License2.LicenseServer.LicenseServerSettings : object {
    public static LicenseServerSettings Default;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAutodetectedLicenseServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlUsed>k__BackingField;
    public bool IsOn { get; internal set; }
    public bool UseAutodetectedLicenseServer { get; public set; }
    [CanBeNullAttribute]
public string UrlUsed { get; public set; }
    private static LicenseServerSettings();
    [CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
internal void set_IsOn(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseAutodetectedLicenseServer();
    [CompilerGeneratedAttribute]
public void set_UseAutodetectedLicenseServer(bool value);
    [CompilerGeneratedAttribute]
public string get_UrlUsed();
    [CompilerGeneratedAttribute]
public void set_UrlUsed(string value);
}
public class JetBrains.Application.License2.LicenseServer.LicenseServerViewSubmodel : object {
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private ILogger myLogger;
    private WebProxySettingsReader myProxySettingsReader;
    private UserNotifications myUserNotifications;
    private Dictionary`2<string, ILicenseServerInfo> myServerInfos;
    private LicenseCheckResult`1<LicenseServerClientNew> myCheckResult;
    private LicenseServerClientNew myClient;
    private OneToListMap`2<string, EntityInfo> mySavedDataForUnknownEntities;
    private bool myStoflGuard;
    [CompilerGeneratedAttribute]
private BlackListAndCrl <BlackListAndCrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CurrentLicenseServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <AutodetectedLicenseServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <UseAutodetecteLicenseServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, EntityInfo> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<EntityInfo, bool> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`2<EntityInfo, bool> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`2<EntityInfo, bool> CS$<>9__CachedAnonymousMethodDelegate57;
    [CompilerGeneratedAttribute]
private static Func`2<EntityInfo, string> CS$<>9__CachedAnonymousMethodDelegate5f;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate60;
    [CompilerGeneratedAttribute]
private static Func`2<EntityInfo, bool> CS$<>9__CachedAnonymousMethodDelegate63;
    public BlackListAndCrl BlackListAndCrl { get; private set; }
    public IProperty`1<string> CurrentLicenseServerUrl { get; private set; }
    public IProperty`1<string> AutodetectedLicenseServerUrl { get; private set; }
    public IProperty`1<bool> UseAutodetecteLicenseServerUrl { get; private set; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public IProperty`1<bool> IsOn { get; private set; }
    public IProperty`1<LicenseViewModel> AllModel { get; private set; }
    private IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.LicenseData { get; }
    public LicenseServerViewSubmodel(Lifetime lifetime, string allModelName, ILicenseData data, ITaskHost taskHost, ILogger logger, WebProxySettingsReader proxySettingsReader, UserNotifications userNotifications, SuspendResume suspendResume, BlackListAndCrl blackList);
    [CompilerGeneratedAttribute]
public BlackListAndCrl get_BlackListAndCrl();
    [CompilerGeneratedAttribute]
private void set_BlackListAndCrl(BlackListAndCrl value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CurrentLicenseServerUrl();
    [CompilerGeneratedAttribute]
private void set_CurrentLicenseServerUrl(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_AutodetectedLicenseServerUrl();
    [CompilerGeneratedAttribute]
private void set_AutodetectedLicenseServerUrl(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_UseAutodetecteLicenseServerUrl();
    [CompilerGeneratedAttribute]
private void set_UseAutodetecteLicenseServerUrl(IProperty`1<bool> value);
    private static OneToListMap`2<string, EntityInfo> SaveDataForUnknownEntities(ILogger logger, ILicenseData data, LicenseViewModel allModel);
    [NotNullAttribute]
private ILicenseServerInfo GetOrCreateInfo(string url);
    public void AutoDetectLicenseServers();
    private static bool IsLicenseEntityAllowedButNotByEval(LicenseViewModel model, ILicensedEntity entity);
    private void AutoObtainRemoveFloatingTickets(LicenseServerClientNew client, ILicenseServerInfo info);
    private void CheckPermanentTicket(LicenseServerClientNew client, ILicenseServerInfo info);
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
private void set_IsOn(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    [CompilerGeneratedAttribute]
private void set_AllModel(IProperty`1<LicenseViewModel> value);
    private sealed virtual override IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.get_LicenseData();
    public IList`1<string> GetAllServerUrls();
    public OneToListMap`2<string, ILicensedEntity> GetServersWithEntitiesThatDoNotRequireFloatingTicket();
    public void SetServersWithEntitiesThatDoNotRequireFloatingTicket(string licenseServerUrl, List`1<ILicensedEntity> uncheckedEntities);
    public void RemoveServers(IEnumerable`1<string> serversToRemove);
    [NotNullAttribute]
public string GetPreferredEmailForPermanentTickets();
    public bool HoldsFloatingTickets();
    public bool HoldsPermanentTickets(string licenseServerUrl);
    public NetworkOperationResult`1<bool> ObtainPermanentTickets(string email, string activationCode);
    public NetworkOperationResult`1<bool> RequestPermanentActivationCode(string email);
    public NetworkOperationResult`1<bool> ReleasePermanentTickets();
    [CompilerGeneratedAttribute]
private static EntityInfo <GetOrCreateInfo>b__25(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private void <AutoDetectLicenseServers>b__27();
    [CompilerGeneratedAttribute]
private static bool <AutoObtainRemoveFloatingTickets>b__28(EntityInfo entityInfo);
    [CompilerGeneratedAttribute]
private static bool <AutoObtainRemoveFloatingTickets>b__29(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <GetServersWithEntitiesThatDoNotRequireFloatingTicket>b__48(EntityInfo info);
    [CompilerGeneratedAttribute]
private static bool <RemoveServers>b__55(EntityInfo entityInfo);
    [CompilerGeneratedAttribute]
private static string <GetPreferredEmailForPermanentTickets>b__5d(EntityInfo info);
    [CompilerGeneratedAttribute]
private static bool <GetPreferredEmailForPermanentTickets>b__5e(string s);
    [CompilerGeneratedAttribute]
private static bool <HoldsPermanentTickets>b__62(EntityInfo entityInfo);
}
public static class JetBrains.Application.License2.LicenseServer.LisenseServerUtils : object {
    [CompilerGeneratedAttribute]
private static Func`1<NetworkInterface[]> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IPAddress, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate2c;
    public static IEnumerable`1<string> DetectLicenseServers(ILogger logger, IWebProxy proxy, BlackList blackList);
    private static IEnumerable`1<string> FindLicenseServerUrls(ILogger logger);
    private static IEnumerable`1<string> TryDnsRequests(string domain, IList`1<string> servers, ILogger logger);
    private static IEnumerable`1<string> TryDnsRequest(DnsRequest request, ILogger logger);
    private static string GetDefaultDnsSuffix(ILogger logger);
    [CompilerGeneratedAttribute]
private static NetworkInterface[] <FindLicenseServerUrls>b__6();
    [CompilerGeneratedAttribute]
private static string <FindLicenseServerUrls>b__7(IPAddress address);
    [CompilerGeneratedAttribute]
private static string <GetDefaultDnsSuffix>b__2b();
}
public class JetBrains.Application.License2.LicenseServer.RegistryLicenseServerInfoPersister : object {
    private RegistryPersister`1<IEnumerable`1<LicenseServerInfo>> myPersister;
    public RegistryLicenseServerInfoPersister(ILogger logger, AnyProductSettingsLocation settingsLocation, JetEnvironment environment);
    public sealed virtual IEnumerable`1<ILicenseServerInfo> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<ILicenseServerInfo> items);
}
public class JetBrains.Application.License2.LicenseServer.RegistryLicenseServerSettingsPersister : object {
    private RegistryPersister`1<LicenseServerSettings> myPersister;
    public RegistryLicenseServerSettingsPersister(ILogger logger, AnyProductSettingsLocation settingsLocation, JetEnvironment environment);
    public sealed virtual IEnumerable`1<LicenseServerSettings> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<LicenseServerSettings> items);
}
public class JetBrains.Application.License2.LicenseServer.SupportsLicenseServer : object {
    [CompilerGeneratedAttribute]
private DateTime <ProductBuiltDateUsedForSubscriptionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LicenseServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseServerEdition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendBuildDateAsVersionToOldServers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlToShowWhenLicenseServerIsBlacklisted>k__BackingField;
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; public set; }
    public string ProductFamily { get; public set; }
    public int LicenseServerVersion { get; public set; }
    public string LicenseServerEdition { get; public set; }
    public bool SendBuildDateAsVersionToOldServers { get; public set; }
    public string UrlToShowWhenLicenseServerIsBlacklisted { get; public set; }
    public SupportsLicenseServer(DateTime productBuiltDateUsedForSubscriptionCheck, string productFamily, int licenseServerVersion, string licenseServerEdition, bool sendBuildDateAsVersionToOldServers, string urlToShowWhenLicenseServerIsBlacklisted);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    [CompilerGeneratedAttribute]
public void set_ProductBuiltDateUsedForSubscriptionCheck(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductFamily();
    [CompilerGeneratedAttribute]
public void set_ProductFamily(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LicenseServerVersion();
    [CompilerGeneratedAttribute]
public void set_LicenseServerVersion(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseServerEdition();
    [CompilerGeneratedAttribute]
public void set_LicenseServerEdition(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SendBuildDateAsVersionToOldServers();
    [CompilerGeneratedAttribute]
public void set_SendBuildDateAsVersionToOldServers(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UrlToShowWhenLicenseServerIsBlacklisted();
    [CompilerGeneratedAttribute]
public void set_UrlToShowWhenLicenseServerIsBlacklisted(string value);
    protected bool Equals(SupportsLicenseServer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SupportsLicenseServer CreateForReSharperUltimate();
    [ObsoleteAttribute("The method is to be removed. Use the overload without parameters")]
public static SupportsLicenseServer CreateForReSharperUltimate(int version, DateTime productBuiltDateUsedForSubscriptionCheck);
}
public class JetBrains.Application.License2.LicenseServer.TaskResult : object {
    private LifetimeDefinition myLifetimeDefinition;
    private TaskState myState;
    private string myDescription;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public TaskState State { get; private set; }
    public string Description { get; private set; }
    public Lifetime Lifetime { get; }
    public TaskResult(Lifetime parentLifetime, string taskName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual TaskState get_State();
    private void set_State(TaskState value);
    public sealed virtual string get_Description();
    private void set_Description(string value);
    public Lifetime get_Lifetime();
    public sealed virtual void Cancel();
    public void SetState(TaskState state, string description);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void AdvisePropertyChanged(Lifetime lifetime, PropertyChangedEventHandler handler);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged(string propertyName);
}
public enum JetBrains.Application.License2.LicenseServer.TaskState : Enum {
    public int value__;
    public static TaskState NONE;
    public static TaskState OK;
    public static TaskState RUNNING;
    public static TaskState ERROR;
    public static TaskState WARNING;
    public static TaskState CANCELED;
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.AbstractObtainTicketRequest`1 : IntranetLicenseServerRequest`1<TResponse> {
    public string ProductFamilyId;
    public string Edition;
    public int Version;
    public int VersionNumber;
    public int BuildDate;
    private AbstractObtainTicketRequest`1(int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers);
    private AbstractObtainTicketRequest`1(long salt, string machineId, string hostName, string userName, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers);
    protected AbstractObtainTicketRequest`1(string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition);
    protected AbstractObtainTicketRequest`1(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition);
    public static int GetBuildDateNumber(DateTime buildDate);
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.AbstractRequest`1 : object {
    public long Salt;
    public string MachineId;
    public int ClientVersion;
    public string BuildNumber;
    [CompilerGeneratedAttribute]
private bool <IsGet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpectsSingleStringResponse>k__BackingField;
    public string ActionName { get; }
    public bool IsGet { get; protected set; }
    public bool ExpectsSingleStringResponse { get; protected set; }
    public IResponseSignatureVerifier SignatureVerifier { get; }
    protected AbstractRequest`1(long salt, string machineId);
    public abstract virtual string get_ActionName();
    [CompilerGeneratedAttribute]
public bool get_IsGet();
    [CompilerGeneratedAttribute]
protected void set_IsGet(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExpectsSingleStringResponse();
    [CompilerGeneratedAttribute]
protected void set_ExpectsSingleStringResponse(bool value);
    public abstract virtual IResponseSignatureVerifier get_SignatureVerifier();
}
public static class JetBrains.Application.License2.LicenseServerSupport.AbstractRequestDefaults : object {
    [CompilerGeneratedAttribute]
private static IHostProductInfo <HostProductInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <MachineId>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <BuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegateb;
    public static IHostProductInfo HostProductInfo { get; public set; }
    public static Lazy`1<string> UserName { get; private set; }
    public static Lazy`1<string> HostName { get; private set; }
    public static Lazy`1<string> MachineId { get; private set; }
    public static Lazy`1<string> BuildNumber { get; public set; }
    private static AbstractRequestDefaults();
    [CompilerGeneratedAttribute]
public static IHostProductInfo get_HostProductInfo();
    [CompilerGeneratedAttribute]
public static void set_HostProductInfo(IHostProductInfo value);
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_UserName();
    [CompilerGeneratedAttribute]
private static void set_UserName(Lazy`1<string> value);
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_HostName();
    [CompilerGeneratedAttribute]
private static void set_HostName(Lazy`1<string> value);
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_MachineId();
    [CompilerGeneratedAttribute]
private static void set_MachineId(Lazy`1<string> value);
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_BuildNumber();
    [CompilerGeneratedAttribute]
public static void set_BuildNumber(Lazy`1<string> value);
    private static string Caclculate(Func`1<string> calc);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__0();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__2();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__3();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__4();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__1();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__5();
}
public class JetBrains.Application.License2.LicenseServerSupport.AbstractResponse : object {
    public ResponseCode ResponseCode;
    public long Salt;
    public string Message;
    public string Action;
    public AbstractResponse(ResponseCode responseCode, string message, long salt);
    public LicenseAction GetLicenseAction();
    protected virtual LicenseAction GetDefaultLicenseAction();
    public static Dictionary`2<string, string> ParseTicketProperties(string ticketProperties);
    private static void FillResult(object result, XmlElement root);
    [NotNullAttribute]
public static Response CreateResponse(string xml);
    private static object ConvertValue(Type type, string value);
    public static string ConvertFieldName(string fieldName);
    public static Response Error(string message, long salt, Response originalResponse);
    public static Response NetworkError(string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataRequest : JetBrainsLicenseServerRequest`1<GenericDataResponse> {
    public string ProductCode;
    public string LicenseID;
    public string Uid;
    public string CrlVersion;
    public string BlVersion;
    public string ActionName { get; }
    public GenericDataRequest(string licenseID, string uid, string crlVersion, string blVersion, string productCode);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataResponse : AbstractResponse {
    public string Crl;
    public string Bl;
    public GenericDataResponse(ResponseCode responseCode, string message, long salt, string crl, string bl);
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest : JetBrainsLicenseServerRequest`1<ObtainAgreementResponse> {
    public string ProductCode;
    public string FileName;
    public string ExistingVersion;
    public string LicenseID;
    public string Uid;
    public string ConsentOptions;
    public string BuildDate;
    public bool Eap;
    private static Lazy`1<string> ourBuildDateCached;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<IConsentOption, AcceptedState>, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`1<DateTime> CS$<>9__CachedAnonymousMethodDelegate5;
    public string ActionName { get; }
    public ObtainAgreementRequest(string fileName, string existingVersion, string consentOptions, string licenseId, string userId, string productCode);
    public ObtainAgreementRequest(IDocumentThatRequiresUserConsent document, IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptionValues, string licenseId, string userId, string productCode);
    private static ObtainAgreementRequest();
    public virtual string get_ActionName();
    private static string ConsentOptionsToString(IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptions);
    private static DateTime RetrieveLinkerTimestamp(string filePath);
    [CompilerGeneratedAttribute]
private static string <ConsentOptionsToString>b__0(Pair`2<IConsentOption, AcceptedState> pair);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__2();
    [CompilerGeneratedAttribute]
private static DateTime <.cctor>b__3();
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementResponse : AbstractResponse {
    public string DocumentHtml;
    public string FileName;
    public string ConsentOptions;
    public ObtainAgreementResponse(string documentHtml);
    public ObtainAgreementResponse(ResponseCode responseCode, string message, long salt, string documentHtml);
}
public static class JetBrains.Application.License2.LicenseServerSupport.ClientUtil : object {
    public static string BlacklistedLicenseServerMessage;
    private static ILogger Logger { get; }
    private static ClientUtil();
    public static string CreateBlacklistedLicenseServerMessage(string url);
    private static ILogger get_Logger();
    public static HttpWebRequest CreateRequest(string fullUrl, bool isGet, IWebProxy proxy, int timeoutInMilliseconds);
    public static TResult ReadResponse(string url, bool isGet, IWebProxy proxy, Func`2<StreamReader, TResult> readFunc, int timeoutInMilliseconds);
    [CanBeNullAttribute]
private static string ExecuteRequest(string url, IResponseSignatureVerifier verifier, int timeoutInMilliseconds, IWebProxy proxy);
    [NotNullAttribute]
public static TResponse ExecuteRequest(string baseUrl, AbstractRequest`1<TResponse> request, IWebProxy proxy, BlackList blackList, int timeoutInMilliseconds);
    public static TResponse ToResponse(WebException we, string actionDescription);
    public static TResponse ToResponse(Exception e, string actionDescription);
    [CompilerGeneratedAttribute]
private static bool <ReadResponse>b__0(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors);
}
public class JetBrains.Application.License2.LicenseServerSupport.ClientVersions : object {
    public static int INITIAL_VERSION;
    public static int TOOLBOX_ACTIVATION_CODES_VERSION;
    public static int ACTTIONS_IN_JBA_RESPONSE;
    public static int ACTTIONS_IN_JBA_RESPONSE_CERTIFICATES_IN_FLS_RESPONSE;
    public static int CONSENT_OPTIONS_IN_GENERIC_DATA_REQUEST_RESPONSE;
    public static int LATEST;
    private static ClientVersions();
}
public class JetBrains.Application.License2.LicenseServerSupport.CombinedResponseSignatureVerifier : object {
    private IResponseSignatureVerifier[] myVerifiers;
    public CombinedResponseSignatureVerifier(IResponseSignatureVerifier[] verifiers);
    public sealed virtual SignatureVerificationResult VerifySignature(string xml, string signature);
}
public class JetBrains.Application.License2.LicenseServerSupport.GetPermanentActivationRequest : IntranetLicenseServerRequest`1<GetPermanentActivationResponse> {
    public string ProductFamilyId;
    public string Email;
    public string ActionName { get; }
    public GetPermanentActivationRequest(string productFamilyId, string email);
    public GetPermanentActivationRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, string email);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.GetPermanentActivationResponse : IntranetLicenseServerResponse {
    public GetPermanentActivationResponse(ResponseCode responseCode, string message, long salt);
    public virtual string ToString();
}
public interface JetBrains.Application.License2.LicenseServerSupport.ILicenseServerClient {
    public string LicenseServerUrl { get; }
    public string TicketId { get; }
    public abstract virtual LicenseServerResult DetectLicenseServer();
    public abstract virtual LicenseServerResult DetectLicenseServer(string serverUrl);
    public abstract virtual LicenseServerResult ObtainFloatingTicket(string productFamily, int version, string edition, DateTime buildDate, bool sendBuildDateAsVersionToOldServers);
    public abstract virtual LicenseServerResult ReleaseFloatingTicket();
    public abstract virtual LicenseServerResult RequestPermanentActivationCode(string productFamily, string email);
    public abstract virtual LicenseServerResult ObtainPermanentTicket(string productFamily, int version, string edition, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string email, string activationCode);
    public abstract virtual LicenseServerResult ReleasePermanentTicket();
    public abstract virtual LicenseServerResult CheckPermanentTicket(string productFamily, int version, string edition, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string ticketId);
    public abstract virtual string get_LicenseServerUrl();
    public abstract virtual string get_TicketId();
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.IntranetLicenseServerRequest`1 : AbstractRequest`1<TResponse> {
    public string HostName;
    public string UserName;
    public IResponseSignatureVerifier SignatureVerifier { get; }
    protected IntranetLicenseServerRequest`1(long salt, string machineId, string hostName, string userName);
    public virtual IResponseSignatureVerifier get_SignatureVerifier();
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.IntranetLicenseServerResponse : AbstractResponse {
    public string ServerUid;
    protected IntranetLicenseServerResponse(ResponseCode responseCode, string message, long salt);
}
public static class JetBrains.Application.License2.LicenseServerSupport.IntranetLicenseServerSignatureVerifier : object {
    private static UserLicenseService ourUserLicenseService;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`1<CertificateRevocationList> CS$<>9__CachedAnonymousMethodDelegate6;
    public static void Initialize(Lifetime lifetime, UserLicenseService userLicenseService);
    public static IResponseSignatureVerifier GetVerifier();
    [CompilerGeneratedAttribute]
private static void <Initialize>b__1();
    [CompilerGeneratedAttribute]
private static CertificateRevocationList <GetVerifier>b__5();
}
public interface JetBrains.Application.License2.LicenseServerSupport.IPublicKeys {
    public int Radix { get; }
    public string EncriptionModulus { get; }
    public string EncriptionExponent { get; }
    public abstract virtual int get_Radix();
    public abstract virtual string get_EncriptionModulus();
    public abstract virtual string get_EncriptionExponent();
}
public interface JetBrains.Application.License2.LicenseServerSupport.IResponseSignatureVerifier {
    public abstract virtual SignatureVerificationResult VerifySignature(string xml, string signature);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.AssetData : object {
    [CompilerGeneratedAttribute]
private string <AssetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicesedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SubscriptionEndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetectDuplicates>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLicenseData <NewLicenseData>k__BackingField;
    public string AssetId { get; public set; }
    public string LicesedTo { get; public set; }
    public string ProductCode { get; public set; }
    public int ProductVersion { get; public set; }
    public DateTime SubscriptionEndDate { get; public set; }
    public string LicenseRestrictions { get; public set; }
    public bool DetectDuplicates { get; public set; }
    [CanBeNullAttribute]
public NewLicenseData NewLicenseData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssetId();
    [CompilerGeneratedAttribute]
public void set_AssetId(string value);
    [CompilerGeneratedAttribute]
public string get_LicesedTo();
    [CompilerGeneratedAttribute]
public void set_LicesedTo(string value);
    [CompilerGeneratedAttribute]
public string get_ProductCode();
    [CompilerGeneratedAttribute]
public void set_ProductCode(string value);
    [CompilerGeneratedAttribute]
public int get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(int value);
    [CompilerGeneratedAttribute]
public DateTime get_SubscriptionEndDate();
    [CompilerGeneratedAttribute]
public void set_SubscriptionEndDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_LicenseRestrictions();
    [CompilerGeneratedAttribute]
public void set_LicenseRestrictions(string value);
    [CompilerGeneratedAttribute]
public bool get_DetectDuplicates();
    [CompilerGeneratedAttribute]
public void set_DetectDuplicates(bool value);
    [CompilerGeneratedAttribute]
public NewLicenseData get_NewLicenseData();
    [CompilerGeneratedAttribute]
public void set_NewLicenseData(NewLicenseData value);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.AuthenticateResponse : AbstractResponse {
    public string UserId;
    public AuthenticateResponse(string userId);
    public AuthenticateResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest : JetBrainsLicenseServerRequest`1<ExchangeKeyResponse> {
    public string ProductCode;
    public string OldLicenseKey;
    public string FirstName;
    public string LastName;
    public string Email;
    public string ActionName { get; }
    public ExchangeKeyRequest(string oldLicenseKey, string firstName, string lastName, string email, string productCode);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyResponse : AbstractResponse {
    public string NewLicenseKey;
    public ExchangeKeyResponse(ResponseCode responseCode, string message, long salt);
}
public interface JetBrains.Application.License2.LicenseServerSupport.JBAccount.IJetBrainsLicenseServerAccess {
    public string ProductCode { get; public set; }
    public string AuthenticationUri { get; }
    public string LicenseServerUri { get; }
    public string ResetPasswordUri { get; }
    public string AboutJetbrainsAccountdUri { get; }
    public bool IsConfigLoaded { get; }
    public bool Enabled { get; }
    public abstract virtual string get_ProductCode();
    public abstract virtual void set_ProductCode(string value);
    public abstract virtual string get_AuthenticationUri();
    public abstract virtual string get_LicenseServerUri();
    public abstract virtual string get_ResetPasswordUri();
    public abstract virtual string get_AboutJetbrainsAccountdUri();
    public abstract virtual bool get_IsConfigLoaded();
    public abstract virtual bool get_Enabled();
    public abstract virtual AuthenticateResponse TryAuthenticate(string jbAccount, string password);
    public abstract virtual ObtainLicenseResponse TryGetAssets(string userId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    public abstract virtual ValidateLicenseResponse TryValidateAsset(string userId, string assetId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck, string licenseHash);
    public abstract virtual ValidateKeyResponse TryValidateKey(string licenseKey, string licenseHash, string productCode);
    public abstract virtual ExchangeKeyResponse TryExchangeKey(string oldLicenseKey, string firstName, string lastName, string email);
    public abstract virtual ObtainAgreementResponse TryObtainNewDocumentVersion(IDocumentThatRequiresUserConsent document, IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> getConsentOptionValues, string licenceId, string userId);
    public abstract virtual GenericDataResponse TryObtainGenericData(string crlVersion, string blVersion, string licenceId, string userId);
    public abstract virtual IJetBrainsLicenseServerAccess CreateSandbox(string serverUri);
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerAccess : JetBrainsLicenseServerAccessImpl {
    private ProductSettingsLocation myProductSettingsLocation;
    public JetBrainsLicenseServerAccess(ILogger logger, WebProxySettingsReader proxySettingsReader, ProductSettingsLocation productSettingsLocation);
    protected virtual void EnsureConfigLoaded();
    private JetBrainsLicenseServerUriResponse LoadConfig();
    [CompilerGeneratedAttribute]
private JetBrainsLicenseServerUriResponse <LoadConfig>b__1(StreamReader reader);
}
internal class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerAccessImpl : object {
    public static string DisabledErrorMessage;
    public static string NetworkErrorMessage;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <ProxySettingsReader>k__BackingField;
    [CompilerGeneratedAttribute]
private JetBrainsLicenseServerUriResponse <ConfigLoadedResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<StreamReader, AuthenticateResponse> CS$<>9__CachedAnonymousMethodDelegate1;
    protected ILogger Logger { get; private set; }
    protected WebProxySettingsReader ProxySettingsReader { get; private set; }
    protected JetBrainsLicenseServerUriResponse ConfigLoadedResponse { get; protected set; }
    public string ProductCode { get; public set; }
    [CanBeNullAttribute]
public string AuthenticationUri { get; }
    public string LicenseServerUri { get; }
    public string ResetPasswordUri { get; }
    public string AboutJetbrainsAccountdUri { get; }
    public bool IsConfigLoaded { get; }
    public bool Enabled { get; }
    public JetBrainsLicenseServerAccessImpl(ILogger logger, WebProxySettingsReader proxySettingsReader);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
protected WebProxySettingsReader get_ProxySettingsReader();
    [CompilerGeneratedAttribute]
private void set_ProxySettingsReader(WebProxySettingsReader value);
    [CompilerGeneratedAttribute]
protected JetBrainsLicenseServerUriResponse get_ConfigLoadedResponse();
    [CompilerGeneratedAttribute]
protected void set_ConfigLoadedResponse(JetBrainsLicenseServerUriResponse value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProductCode(string value);
    public sealed virtual string get_AuthenticationUri();
    public sealed virtual string get_LicenseServerUri();
    public sealed virtual string get_ResetPasswordUri();
    public sealed virtual string get_AboutJetbrainsAccountdUri();
    public sealed virtual bool get_IsConfigLoaded();
    public sealed virtual bool get_Enabled();
    public virtual AuthenticateResponse TryAuthenticate(string jbAccount, string password);
    public virtual ObtainLicenseResponse TryGetAssets(string userId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    public virtual ValidateLicenseResponse TryValidateAsset(string userId, string assetId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck, string licenseHash);
    public virtual ValidateKeyResponse TryValidateKey(string licenseKey, string licenseHash, string productCode);
    public virtual ExchangeKeyResponse TryExchangeKey(string oldLicenseKey, string firstName, string lastName, string email);
    public virtual ObtainAgreementResponse TryObtainNewDocumentVersion(IDocumentThatRequiresUserConsent document, IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptionValues, string licenceId, string userId);
    public sealed virtual GenericDataResponse TryObtainGenericData(string crlVersion, string blVersion, string licenceId, string userId);
    public sealed virtual IJetBrainsLicenseServerAccess CreateSandbox(string serverUri);
    protected virtual void EnsureConfigLoaded();
    [CompilerGeneratedAttribute]
private static AuthenticateResponse <TryAuthenticate>b__0(StreamReader reader);
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerRequest`1 : AbstractRequest`1<TResponse> {
    public string HostName;
    public string UserName;
    public IResponseSignatureVerifier SignatureVerifier { get; }
    protected JetBrainsLicenseServerRequest`1(long salt, string machineId);
    public virtual IResponseSignatureVerifier get_SignatureVerifier();
}
internal class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerUriResponse : AbstractResponse {
    [CompilerGeneratedAttribute]
private string <AuthenticationUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseServerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResetPasswordUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AboutJetbrainsAccountdUri>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastSyncTicks>k__BackingField;
    [CanBeNullAttribute]
public string AuthenticationUri { get; public set; }
    [CanBeNullAttribute]
public string LicenseServerUri { get; public set; }
    [CanBeNullAttribute]
public string ResetPasswordUri { get; public set; }
    [CanBeNullAttribute]
public string AboutJetbrainsAccountdUri { get; public set; }
    public long LastSyncTicks { get; public set; }
    public JetBrainsLicenseServerUriResponse(ResponseCode responseCode, string message, long salt);
    [CompilerGeneratedAttribute]
public string get_AuthenticationUri();
    [CompilerGeneratedAttribute]
public void set_AuthenticationUri(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseServerUri();
    [CompilerGeneratedAttribute]
public void set_LicenseServerUri(string value);
    [CompilerGeneratedAttribute]
public string get_ResetPasswordUri();
    [CompilerGeneratedAttribute]
public void set_ResetPasswordUri(string value);
    [CompilerGeneratedAttribute]
public string get_AboutJetbrainsAccountdUri();
    [CompilerGeneratedAttribute]
public void set_AboutJetbrainsAccountdUri(string value);
    [CompilerGeneratedAttribute]
public long get_LastSyncTicks();
    [CompilerGeneratedAttribute]
public void set_LastSyncTicks(long value);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseRequest : JetBrainsLicenseServerRequest`1<ObtainLicenseResponse> {
    public string UserId;
    public string ProductCode;
    public string Edition;
    public int Version;
    public int BuildDate;
    public string ActionName { get; }
    public ObtainLicenseRequest(string userId, string productCode, string edition, int version, DateTime buildDate);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseResponse : AbstractResponse {
    public long ValidationPeriod;
    public List`1<EncodedAsset> Assets;
    public long ValidationDeadlinePeriod;
    public ObtainLicenseResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.RSADecoder : object {
    private static Byte[] EMPTY_BYTE_ARRAY;
    private BigInteger myDigitsMod;
    private BigInteger myPublicExponent;
    private BigInteger myPublicModulus;
    private int myDigitsPerChunk;
    public RSADecoder(BigInteger publicExponent, BigInteger publicModulus);
    protected RSADecoder(BigInteger publicExponent, BigInteger publicModulus, int alphabetSize);
    private static RSADecoder();
    public Byte[] Decode(string data);
    private static BigInteger DecodeChar(char c);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyRequest : JetBrainsLicenseServerRequest`1<ValidateKeyResponse> {
    public string ProductCode;
    public string LicenseKey;
    public string LicenseHash;
    public string ActionName { get; }
    public ValidateKeyRequest(string licenseKey, string licenseHash, string productCode);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyResponse : AbstractResponse {
    public long ValidationPeriod;
    public string NewLicenseKey;
    public ValidateKeyResponse(long validationPeriod);
    public ValidateKeyResponse(ResponseCode responseCode, string message, long salt, long validationPeriod);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest : JetBrainsLicenseServerRequest`1<ValidateLicenseResponse> {
    public string UserId;
    public string AssetId;
    public string ProductCode;
    public string Edition;
    public int Version;
    public int BuildDate;
    public string licenseHash;
    public string ActionName { get; }
    public ValidateLicenseRequest(string userId, string assetId, string productCode, string edition, int version, DateTime buildDate, string licenseHash);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseResponse : AbstractResponse {
    public long ValidationPeriod;
    public long ValidationDeadlinePeriod;
    public string NewEncodedAsset;
    public ValidateLicenseResponse(long validationPeriod);
    public ValidateLicenseResponse(ResponseCode responseCode, string message, long salt, long validationPeriod);
    protected virtual LicenseAction GetDefaultLicenseAction();
}
public enum JetBrains.Application.License2.LicenseServerSupport.LicenseAction : Enum {
    public int value__;
    public static LicenseAction NONE;
    public static LicenseAction WARNING;
    public static LicenseAction REVOKE;
}
public class JetBrains.Application.License2.LicenseServerSupport.LicenseServerResult : ValueType {
    [NotNullAttribute]
public ResponseCode ResponseCode;
    [NotNullAttribute]
public string Message;
    [CanBeNullAttribute]
public Exception Exception;
    public static LicenseServerResult Success;
    public bool Successful { get; }
    private LicenseServerResult(ResponseCode success, string message, Exception exception);
    private static LicenseServerResult();
    public bool get_Successful();
    public static LicenseServerResult Error(string message);
    public static LicenseServerResult NetworkError(string message);
    public static LicenseServerResult Error(AbstractResponse response);
    public static LicenseServerResult Error(string message, Exception e);
}
public class JetBrains.Application.License2.LicenseServerSupport.LicenseServerX509ResponseSignatureVerifier : X509ResponseSignatureVerifier {
    private static string SERVER_UID_PREFIX;
    private static string SERVER_UID_SUFFIX;
    public LicenseServerX509ResponseSignatureVerifier(X509Certificate2 rootCertificate, Func`1<CertificateRevocationList> getCurrentCrl);
    protected virtual bool VerifyPayload(string xml, X509Certificate2 signCert);
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketGroupRequest : AbstractObtainTicketRequest`1<ObtainPermanentTicketGroupResponse> {
    public string Email;
    public string ActivationCode;
    public string ProductSelectors;
    [CompilerGeneratedAttribute]
private static Func`2<ProductSelector, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ProductSelector, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ProductSelector, string> CS$<>9__CachedAnonymousMethodDelegate5;
    public string ActionName { get; }
    public ObtainPermanentTicketGroupRequest(string email, string activationCode, ICollection`1<ProductSelector> productSelectors);
    public ObtainPermanentTicketGroupRequest(long salt, string machineId, string hostName, string userName, string email, string activationCode, IList`1<ProductSelector> productSelectors);
    public virtual string get_ActionName();
    private static string GetProductFamilyIds(IEnumerable`1<ProductSelector> productSelectors);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(ProductSelector selector);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(ProductSelector selector);
    [CompilerGeneratedAttribute]
private static string <GetProductFamilyIds>b__4(ProductSelector selector);
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketGroupResponse : IntranetLicenseServerResponse {
    public List`1<ObtainedTicket> Tickets;
    [CompilerGeneratedAttribute]
private static Func`2<ObtainedTicket, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public ObtainPermanentTicketGroupResponse(ResponseCode responseCode, string message, long salt);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__0(ObtainedTicket ticket);
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketRequest : AbstractObtainTicketRequest`1<ObtainPermanentTicketResponse> {
    public string Email;
    public string ActivationCode;
    public string ActionName { get; }
    public ObtainPermanentTicketRequest(string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string email, string activationCode);
    public ObtainPermanentTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string email, string activationCode);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketResponse : IntranetLicenseServerResponse {
    public string TicketId;
    public string TicketProperties;
    public ObtainPermanentTicketResponse(ResponseCode responseCode, string message, long salt, string ticketId, string ticketProperties);
    public virtual string ToString();
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainTicketRequest : AbstractObtainTicketRequest`1<ObtainTicketResponse> {
    public string ActionName { get; }
    public ObtainTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition);
    public ObtainTicketRequest(string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainTicketResponse : IntranetLicenseServerResponse {
    public string TicketId;
    public string TicketProperties;
    public long ProlongationPeriod;
    public ObtainTicketResponse(string ticketId, ResponseCode responseCode, string ticketProperties, string message, long salt);
    public virtual string ToString();
}
public class JetBrains.Application.License2.LicenseServerSupport.PingRequest : IntranetLicenseServerRequest`1<PingResponse> {
    public string ActionName { get; }
    public PingRequest(long salt, string machineId, string hostName, string userName);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.PingResponse : IntranetLicenseServerResponse {
    public PingResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.ProductSelector : object {
    public string ProductFamilyId;
    public int Version;
    public int BuildDate;
    public string Edition;
    public ProductSelector(string productFamilyId, int version, DateTime buildDate, string edition);
    public virtual string ToString();
    protected bool Equals(ProductSelector other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.License2.LicenseServerSupport.ProlongTicketRequest : IntranetLicenseServerRequest`1<ProlongTicketResponse> {
    public string TicketId;
    public string ProductFamilyId;
    public string ActionName { get; }
    public ProlongTicketRequest(string ticketId, string productFamilyId);
    public ProlongTicketRequest(long salt, string machineId, string hostName, string userName, string ticketId, string productFamilyId);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.ProlongTicketResponse : IntranetLicenseServerResponse {
    public string TicketId;
    public ProlongTicketResponse(ResponseCode responseCode, string message, long salt, string ticketId);
    public virtual string ToString();
}
public static class JetBrains.Application.License2.LicenseServerSupport.PublicKeys : object {
    public static IPublicKeys JetBrainsLicenseServer;
    public static IPublicKeys IntranetLicenseServer;
    public static IPublicKeys Asset;
    public static string SIG_START;
    public static string SIG_END;
    private static PublicKeys();
}
public class JetBrains.Application.License2.LicenseServerSupport.PublicKeysResponseSignatureVerifier : object {
    private IPublicKeys myPublicKeys;
    public PublicKeysResponseSignatureVerifier(IPublicKeys publicKeys);
    public sealed virtual SignatureVerificationResult VerifySignature(string xml, string signature);
}
public class JetBrains.Application.License2.LicenseServerSupport.ReleaseTicketRequest : IntranetLicenseServerRequest`1<ReleaseTicketResponse> {
    public string ProductFamilyId;
    public string TicketId;
    public string ActionName { get; }
    public ReleaseTicketRequest(string productFamilyId, string ticketId);
    public ReleaseTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, string ticketId);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.ReleaseTicketResponse : IntranetLicenseServerResponse {
    public ReleaseTicketResponse(ResponseCode responseCode, string message, long salt);
}
public enum JetBrains.Application.License2.LicenseServerSupport.ResponseCode : Enum {
    public int value__;
    public static ResponseCode OK;
    public static ResponseCode ERROR;
    public static ResponseCode NETWORK_ERROR;
    public static ResponseCode SERVER_INTERNAL_ERROR;
}
public enum JetBrains.Application.License2.LicenseServerSupport.SignatureVerificationResult : Enum {
    public int value__;
    public static SignatureVerificationResult OK;
    public static SignatureVerificationResult INVALID_SIGNATURE;
    public static SignatureVerificationResult REVOKED_CERTIFICATE;
}
public class JetBrains.Application.License2.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient : object {
    private LifetimeDefinition myLifetimeDefinition;
    private bool myIsTerminateReqested;
    private bool myActionIsInProgress;
    private bool myIsTerminating;
    [CompilerGeneratedAttribute]
private static Action`1<Lifetime> CS$<>9__CachedAnonymousMethodDelegatea;
    public bool IsTerminated { get; }
    public SynchronizedLifetimeDefinitionForLicenseServerClient(string id);
    public SynchronizedLifetimeDefinitionForLicenseServerClient(string id, Lifetime otherThreadLifetime);
    public void Terminate();
    private void TerminateImpl();
    public bool DoIfAlive(Action`1<Lifetime> action);
    public bool get_IsTerminated();
    [CompilerGeneratedAttribute]
private void <TerminateImpl>b__3();
    [CompilerGeneratedAttribute]
private static void <get_IsTerminated>b__9(Lifetime lifetime);
}
public class JetBrains.Application.License2.LicenseServerSupport.X509ResponseSignatureVerifier : object {
    private static string PREFIX;
    private static char SEPARATOR;
    private X509Certificate2 myRootCertificate;
    private Func`1<CertificateRevocationList> myGetCurrentCrl;
    public X509ResponseSignatureVerifier(X509Certificate2 rootCertificate, Func`1<CertificateRevocationList> getCurrentCrl);
    public sealed virtual SignatureVerificationResult VerifySignature(string xml, string signatureString);
    protected virtual bool VerifyPayload(string xml, X509Certificate2 signCert);
    [CanBeNullAttribute]
private X509Certificate2 TryGetVerifiedSignCert(string xml, string signatureString, SignatureVerificationResult& verificationResult);
}
public class JetBrains.Application.License2.LicenseServerSupport.XPublicKeys : ValueType {
    [CompilerGeneratedAttribute]
private int <Radix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncriptionModulus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncriptionExponent>k__BackingField;
    public int Radix { get; public set; }
    public string EncriptionModulus { get; public set; }
    public string EncriptionExponent { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Radix();
    [CompilerGeneratedAttribute]
public void set_Radix(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EncriptionModulus();
    [CompilerGeneratedAttribute]
public void set_EncriptionModulus(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EncriptionExponent();
    [CompilerGeneratedAttribute]
public void set_EncriptionExponent(string value);
}
public class JetBrains.Application.License2.LicenseViewModel : object {
    private Lifetime myLifetime;
    private LicenseCheckResult`1<ILicenseViewSubmodel> myCheckResult;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILicenseData <OriginalLicenseData>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <DataNeedsToBesSaved>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ILicensedEntity> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicenseViewSubmodel> <Submodels>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ResultWithDescription> <OverallStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLicenseDataCache <NewLicenseDataCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastTimeAllEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastTimeEnabledEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo, ResultWithDescription> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`3<ResultWithDescription, ResultWithDescription, ResultWithDescription> CS$<>9__CachedAnonymousMethodDelegate15;
    public string Name { get; private set; }
    private ILicenseData OriginalLicenseData { get; private set; }
    public ISimpleSignal DataNeedsToBesSaved { get; private set; }
    public IList`1<ILicensedEntity> Entities { get; private set; }
    public IEnumerable`1<ILicenseViewSubmodel> Submodels { get; private set; }
    public IProperty`1<ResultWithDescription> OverallStatus { get; private set; }
    public NewLicenseDataCache NewLicenseDataCache { get; private set; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    private IEnumerable`1<ILicensedEntity> LastTimeAllEntities { get; private set; }
    private IEnumerable`1<ILicensedEntity> LastTimeEnabledEntities { get; private set; }
    public LicenseViewModel(Lifetime parentLifetime, ILogger logger, string name, ILicenseData data, IList`1<ILicensedEntity> entities, IList`1<Func`4<Lifetime, string, ILicenseData, ILicenseViewSubmodel>> submodelBuilders, NewLicenseDataCache newLicenseDataCache);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
private ILicenseData get_OriginalLicenseData();
    [CompilerGeneratedAttribute]
private void set_OriginalLicenseData(ILicenseData value);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_DataNeedsToBesSaved();
    [CompilerGeneratedAttribute]
private void set_DataNeedsToBesSaved(ISimpleSignal value);
    [CompilerGeneratedAttribute]
public IList`1<ILicensedEntity> get_Entities();
    [CompilerGeneratedAttribute]
private void set_Entities(IList`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ILicenseViewSubmodel> get_Submodels();
    [CompilerGeneratedAttribute]
private void set_Submodels(IEnumerable`1<ILicenseViewSubmodel> value);
    [CompilerGeneratedAttribute]
public IProperty`1<ResultWithDescription> get_OverallStatus();
    [CompilerGeneratedAttribute]
private void set_OverallStatus(IProperty`1<ResultWithDescription> value);
    [CompilerGeneratedAttribute]
public NewLicenseDataCache get_NewLicenseDataCache();
    [CompilerGeneratedAttribute]
private void set_NewLicenseDataCache(NewLicenseDataCache value);
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> get_LastTimeAllEntities();
    [CompilerGeneratedAttribute]
private void set_LastTimeAllEntities(IEnumerable`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> get_LastTimeEnabledEntities();
    [CompilerGeneratedAttribute]
private void set_LastTimeEnabledEntities(IEnumerable`1<ILicensedEntity> value);
    internal void ResetRecentEntitiesList();
    private void AddSubmodel(Lifetime submodelLifetime, TSubmodel submodel);
    private void UpdateSubmodelResults(TSubmodel submodel);
    [CanBeNullAttribute]
public TSubmodel TryGetSubmodel();
    private ResultWithDescription CalculateOverallStatus();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(bool args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private bool <CalculateOverallStatus>b__a(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CalculateOverallStatus>b__b(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private bool <CalculateOverallStatus>b__c(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static string <CalculateOverallStatus>b__d(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <CalculateOverallStatus>b__e(ILicenseCheckInfo info);
    [CompilerGeneratedAttribute]
private static ResultWithDescription <CalculateOverallStatus>b__f(ILicenseCheckInfo info);
    [CompilerGeneratedAttribute]
private static ResultWithDescription <CalculateOverallStatus>b__10(ResultWithDescription r1, ResultWithDescription r2);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.LicenseViewModelBuilder : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IThreading myThreading;
    private IList`1<ILicensedEntity> myLicensedEntities;
    private IJetBrainsLicenseServerAccess myLicenseServerAccess;
    private EvaluationTracker myEvaluationTracker;
    private WebProxySettingsReader myProxySettingsReader;
    private UserNotifications myUserNotifications;
    private SuspendResume mySuspendResume;
    private UserLicenseService myUserLicenseService;
    [CompilerGeneratedAttribute]
private bool <IsSandbox>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public IList`1<ILicensedEntity> LicensedEntities { get; }
    private bool IsSandbox { get; private set; }
    public LicenseViewModelBuilder(Lifetime lifetime, ILogger logger, IEnumerable`1<ILicensedEntity> licensedEntities, IThreading threading, IJetBrainsLicenseServerAccess licenseServerAccess, EvaluationTracker evaluationTracker, WebProxySettingsReader proxySettingsReader, UserNotifications userNotifications, SuspendResume suspendResume, UserLicenseService userLicenseService);
    public IList`1<ILicensedEntity> get_LicensedEntities();
    public LicenseViewModel CreateModel(Lifetime modelLifetime, string name, ILicenseData data, ILicense2CheckComponent license2CheckComponent);
    private static string CalculateProductCode(IList`1<ILicensedEntity> licensedEntities);
    private IList`1<Func`4<Lifetime, string, ILicenseData, ILicenseViewSubmodel>> CreateSubmodelBuilders(string name, ILicense2CheckComponent license2CheckComponent, NewLicenseDataCache newLicenseDataCache);
    [CompilerGeneratedAttribute]
private bool get_IsSandbox();
    [CompilerGeneratedAttribute]
private void set_IsSandbox(bool value);
    public LicenseViewModelBuilder CreateSandbox(Lifetime lifetime, string jbaLicenseServerUri);
    [CompilerGeneratedAttribute]
private static string <CalculateProductCode>b__3(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <CalculateProductCode>b__4(string productCode);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicenseViewModelEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<NewNamedLicenseData, NewLicenseData> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<AssetData, NewLicenseData> CS$<>9__CachedAnonymousMethodDelegate5;
    [ExtensionAttribute]
public static bool RequiresLicense(LicenseViewModel model);
    [ExtensionAttribute]
public static IEnumerable`1<NewLicenseData> GetAllLicenses(LicenseViewModel model);
    [CompilerGeneratedAttribute]
private static bool <RequiresLicense>b__0(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static NewLicenseData <GetAllLicenses>b__2(NewNamedLicenseData data);
    [CompilerGeneratedAttribute]
private static NewLicenseData <GetAllLicenses>b__3(AssetData data);
}
public class JetBrains.Application.License2.NewLicenses.BlackList : object {
    private Lazy`1<IList`1<Regex>> myRegexes;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public int Version { get; private set; }
    public BlackList(int version, string masks);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    public bool IsBlacklisted(string url);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.NewLicenses.BlackListAndCrl : object {
    private Certificates myCertificates;
    private Lazy`1<CertificateRevocationList> myBuiltInCrl;
    private Lazy`1<BlackList> myBuiltInBlackList;
    [CanBeNullAttribute]
private CertificateRevocationList myDownloadedCrl;
    [CanBeNullAttribute]
private BlackList myDownloadedBlackList;
    [CompilerGeneratedAttribute]
private IProperty`1<Ids> <UserIds>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<int, string, BlackList> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<int, string, CertificateRevocationList> CS$<>9__CachedAnonymousMethodDelegated;
    public IProperty`1<Ids> UserIds { get; private set; }
    [NotNullAttribute]
public CertificateRevocationList Crl { get; }
    [NotNullAttribute]
public BlackList BlackList { get; }
    public BlackListAndCrl(Lifetime lifetime, IJetBrainsLicenseServerAccess jetBrainsLicenseServerAccess, Certificates certificates, IThreading threading, ILogger logger, JetBrainsSharedStorage sharedStorage);
    [CompilerGeneratedAttribute]
public IProperty`1<Ids> get_UserIds();
    [CompilerGeneratedAttribute]
private void set_UserIds(IProperty`1<Ids> value);
    public CertificateRevocationList get_Crl();
    public BlackList get_BlackList();
    [NotNullAttribute]
private BlackList LoadBuiltInBlackList();
    [NotNullAttribute]
private CertificateRevocationList LoadBuiltInCrl();
    private T Decode(string response, CertificateRevocationList crl, Func`3<int, string, T> fetchData);
    [CanBeNullAttribute]
private BlackList DecodeBl(string responseBl);
    [CanBeNullAttribute]
private CertificateRevocationList DecodeCrl(string responseCrl, CertificateRevocationList crl);
    [CompilerGeneratedAttribute]
private static BlackList <DecodeBl>b__a(int version, string payload);
    [CompilerGeneratedAttribute]
private static CertificateRevocationList <DecodeCrl>b__c(int version, string payload);
}
public class JetBrains.Application.License2.NewLicenses.CertificateRevocationList : object {
    public static CertificateRevocationList Empty;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<RevokedCertificate> <RevokedCertificates>k__BackingField;
    public int Version { get; private set; }
    public ISet`1<RevokedCertificate> RevokedCertificates { get; private set; }
    private CertificateRevocationList(int version);
    public CertificateRevocationList(int version, Stream crlStream);
    public CertificateRevocationList(int version, string crlText);
    private static CertificateRevocationList();
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    [CompilerGeneratedAttribute]
public ISet`1<RevokedCertificate> get_RevokedCertificates();
    [CompilerGeneratedAttribute]
private void set_RevokedCertificates(ISet`1<RevokedCertificate> value);
    private ISet`1<RevokedCertificate> LoadFromStream(Stream crlStream);
    private static IList`1<RevokedCertificate> GetRevokedCertificates(Byte[] crlBytes);
    [NotNullAttribute]
private static string SerialNumberBlobToString(CRYPTOAPI_BLOB blob);
    [NotNullAttribute]
private static string IssuerBlobToString(CRYPTOAPI_BLOB blob);
    private static IList`1<Byte[]> GetCrlBytes(Stream crlStream);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.NewLicenses.Certificates : object {
    [CompilerGeneratedAttribute]
private Lazy`1<X509Certificate2> <RootCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<X509Certificate2> <LicenseServerRootCertificate>k__BackingField;
    [NotNullAttribute]
public Lazy`1<X509Certificate2> RootCertificate { get; private set; }
    [NotNullAttribute]
public Lazy`1<X509Certificate2> LicenseServerRootCertificate { get; private set; }
    [CompilerGeneratedAttribute]
public Lazy`1<X509Certificate2> get_RootCertificate();
    [CompilerGeneratedAttribute]
private void set_RootCertificate(Lazy`1<X509Certificate2> value);
    [CompilerGeneratedAttribute]
public Lazy`1<X509Certificate2> get_LicenseServerRootCertificate();
    [CompilerGeneratedAttribute]
private void set_LicenseServerRootCertificate(Lazy`1<X509Certificate2> value);
    [NotNullAttribute]
private X509Certificate2 LoadCertificate(string fileName, string thumbprint);
    [CompilerGeneratedAttribute]
private X509Certificate2 <.ctor>b__0();
    [CompilerGeneratedAttribute]
private X509Certificate2 <.ctor>b__1();
}
public class JetBrains.Application.License2.NewLicenses.NewLicenseData : object {
    [CompilerGeneratedAttribute]
private string <LicenseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssigneeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssigneeEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseRestriction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckConcurrentUse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoProlongated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GracePeriodDays>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ProductData> <Products>k__BackingField;
    public string LicenseId { get; public set; }
    public string LicenseeName { get; public set; }
    public string AssigneeName { get; public set; }
    public string AssigneeEmail { get; public set; }
    public string LicenseRestriction { get; public set; }
    public bool CheckConcurrentUse { get; public set; }
    public bool AutoProlongated { get; public set; }
    public string Hash { get; public set; }
    public int GracePeriodDays { get; public set; }
    public IList`1<ProductData> Products { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LicenseId();
    [CompilerGeneratedAttribute]
public void set_LicenseId(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseeName();
    [CompilerGeneratedAttribute]
public void set_LicenseeName(string value);
    [CompilerGeneratedAttribute]
public string get_AssigneeName();
    [CompilerGeneratedAttribute]
public void set_AssigneeName(string value);
    [CompilerGeneratedAttribute]
public string get_AssigneeEmail();
    [CompilerGeneratedAttribute]
public void set_AssigneeEmail(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseRestriction();
    [CompilerGeneratedAttribute]
public void set_LicenseRestriction(string value);
    [CompilerGeneratedAttribute]
public bool get_CheckConcurrentUse();
    [CompilerGeneratedAttribute]
public void set_CheckConcurrentUse(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoProlongated();
    [CompilerGeneratedAttribute]
public void set_AutoProlongated(bool value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public int get_GracePeriodDays();
    [CompilerGeneratedAttribute]
public void set_GracePeriodDays(int value);
    [CompilerGeneratedAttribute]
public IList`1<ProductData> get_Products();
    [CompilerGeneratedAttribute]
public void set_Products(IList`1<ProductData> value);
    [CanBeNullAttribute]
public static NewLicenseData FromJson(string json);
    public string ToJsonString();
    public virtual string ToString();
    protected bool Equals(NewLicenseData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.License2.NewLicenses.NewLicenseDataCache : object {
    private Lifetime myLifetime;
    private UserNotifications myUserNotifications;
    private ITaskHost myTaskHost;
    private ILogger myLogger;
    private IDictionary`2<Pair`2<NewLicenseData, ILicensedEntity>, NewNamedLicenseData> myData;
    private JetHashSet`1<NewNamedLicenseData> myLastWentOffLicenses;
    private LifetimeDefinition myShownNotificationsLifetimeDefinition;
    private OneToSetMap`2<DateTime, string> myShownNotifications;
    [CompilerGeneratedAttribute]
private ISimpleSignal <LicensesWentOff>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<InOutEventArgs`2<NewNamedLicenseData, bool>> <QueryIsLicenseDataUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseViewModel <Model>k__BackingField;
    public ISimpleSignal LicensesWentOff { get; private set; }
    public ISignal`1<InOutEventArgs`2<NewNamedLicenseData, bool>> QueryIsLicenseDataUsed { get; private set; }
    public LicenseViewModel Model { get; public set; }
    public NewLicenseDataCache(Lifetime lifetime, UserNotifications userNotifications, ITaskHost taskHost, ILogger logger);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_LicensesWentOff();
    [CompilerGeneratedAttribute]
private void set_LicensesWentOff(ISimpleSignal value);
    [CompilerGeneratedAttribute]
public ISignal`1<InOutEventArgs`2<NewNamedLicenseData, bool>> get_QueryIsLicenseDataUsed();
    [CompilerGeneratedAttribute]
private void set_QueryIsLicenseDataUsed(ISignal`1<InOutEventArgs`2<NewNamedLicenseData, bool>> value);
    [CompilerGeneratedAttribute]
public LicenseViewModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(LicenseViewModel value);
    public void Remove(NewLicenseData newLicenseData, ILicensedEntity entity);
    [CanBeNullAttribute]
public NewNamedLicenseData GetOrCreateLicenseData(NewLicenseData newLicenseData, ILicensedEntity entity);
    public void ScheduleCheckNewLicenses(DateTime checkTime);
    private void CleanNotificationsHistory();
    private bool IsLicenseUsed(NewNamedLicenseData licenseData);
    public IDictionary`2<string, Tuple`3<NewNamedLicenseData, ProductData, ProductDataApplicability>> GetBestUsedNotFullySuccessfulLicenses(DateTime today);
    private void CheckNewLicenses();
    private void ShowNotification(Lifetime lifetime, NotificationSeverity severity, string title, string body);
    private void ShowNotifications(List`1<Tuple`3<NotificationSeverity, string, string>> notifications);
    private Dictionary`2<string, Tuple`3<NewNamedLicenseData, ProductData, ProductDataApplicability>> FilterBestUsedLicenses(Dictionary`2<Pair`2<NewLicenseData, ILicensedEntity>, NewNamedLicenseData> newNamedLicenseDatas, DateTime today);
}
public class JetBrains.Application.License2.NewLicenses.NewNamedLicenseData : object {
    [CompilerGeneratedAttribute]
private NewLicenseData <LicenseData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <BuildDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseName>k__BackingField;
    public NewLicenseData LicenseData { get; public set; }
    public string ProductCode { get; private set; }
    public DateTime BuildDate { get; private set; }
    public string LicenseName { get; private set; }
    public string LicenseeName { get; }
    public string AssigneeName { get; }
    public string LicenseId { get; }
    public string LicenseHash { get; }
    public string LicenseRestrictions { get; }
    public DateTime ExpirationDate { get; }
    public bool CheckConcurrentUse { get; }
    public UserLicenseStatus Status { get; }
    [NotNullAttribute]
public IEnumerable`1<ProductData> ProductDatas { get; }
    [CanBeNullAttribute]
public ProductData ProductData { get; }
    public NewNamedLicenseData(string licenseName, NewLicenseData newLicenseData, string productCode, DateTime buildDate);
    [CompilerGeneratedAttribute]
public sealed virtual NewLicenseData get_LicenseData();
    [CompilerGeneratedAttribute]
public void set_LicenseData(NewLicenseData value);
    [CompilerGeneratedAttribute]
public string get_ProductCode();
    [CompilerGeneratedAttribute]
private void set_ProductCode(string value);
    [CompilerGeneratedAttribute]
public DateTime get_BuildDate();
    [CompilerGeneratedAttribute]
private void set_BuildDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseName();
    [CompilerGeneratedAttribute]
private void set_LicenseName(string value);
    public sealed virtual string get_LicenseeName();
    public sealed virtual string get_AssigneeName();
    public sealed virtual string get_LicenseId();
    public sealed virtual string get_LicenseHash();
    public sealed virtual string get_LicenseRestrictions();
    public sealed virtual DateTime get_ExpirationDate();
    public sealed virtual bool get_CheckConcurrentUse();
    public sealed virtual string DescribeValidLicense();
    public sealed virtual UserLicenseStatus get_Status();
    public IEnumerable`1<ProductData> get_ProductDatas();
    public ProductData get_ProductData();
    [CompilerGeneratedAttribute]
private bool <get_ProductDatas>b__0(ProductData data);
    [CompilerGeneratedAttribute]
private int <get_ProductDatas>b__1(ProductData d1, ProductData d2);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.NewLicenses.NewNamedLicenseDataEx : object {
    [ExtensionAttribute]
public static LicenseCheckInfo`1<INamedLicenseData> CreateLicenseCheckInfoFor(INamedLicenseData licenseData, ILicensedEntity entity);
}
public class JetBrains.Application.License2.NewLicenses.ProductData : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FallbackDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PaidUpTo>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ShutdownTime>k__BackingField;
    public string Code { get; public set; }
    public DateTime FallbackDate { get; public set; }
    public DateTime PaidUpTo { get; public set; }
    public DateTime ShutdownTime { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public DateTime get_FallbackDate();
    [CompilerGeneratedAttribute]
public void set_FallbackDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_PaidUpTo();
    [CompilerGeneratedAttribute]
public void set_PaidUpTo(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ShutdownTime();
    [CompilerGeneratedAttribute]
private void set_ShutdownTime(DateTime value);
    public ProductDataApplicability CheckApplicability(DateTime today, DateTime buildDate, int gracePeriodDays);
    public bool HasFallback();
    public bool HasSubscription();
    public bool IsFallbackApplicable(DateTime buildDate);
    public bool HasActiveSubscription(DateTime today);
    public bool HasEternalSubscription();
    protected bool Equals(ProductData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Application.License2.NewLicenses.ProductDataApplicability : Enum {
    public int value__;
    public static ProductDataApplicability OK_ETERNAL_SUBSCRIPTION;
    public static ProductDataApplicability OK_FALLBACK;
    public static ProductDataApplicability OK_ACTIVE_SUBSCRIPTION;
    public static ProductDataApplicability OK_SUBSCRIPTION_GRACE_PERIOD;
    public static ProductDataApplicability OK_30_MIN_TO_SHUTDOWN;
    public static ProductDataApplicability FAILED_SUBSCRIPTION_EXPIRED;
    public static ProductDataApplicability FAILED_FALLBACK_DOES_NOT_MATCH;
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.NewLicenses.ProductDataApplicabilityEx : object {
    [ExtensionAttribute]
public static bool IsSuccess(ProductDataApplicability applicability);
    [ExtensionAttribute]
public static bool IsSuccessNoShutdown(ProductDataApplicability applicability);
    [ExtensionAttribute]
public static bool IsFailed(ProductDataApplicability applicability);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.NewLicenses.UserLicenseService : object {
    private static char SEPARATOR;
    [CompilerGeneratedAttribute]
private Certificates <Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private BlackListAndCrl <BlackListAndCrl>k__BackingField;
    public Certificates Certificates { get; private set; }
    public BlackListAndCrl BlackListAndCrl { get; private set; }
    private X509Certificate2 RootCertificate { get; }
    public UserLicenseService(Certificates certificates, BlackListAndCrl blackListAndCrl);
    [CompilerGeneratedAttribute]
public Certificates get_Certificates();
    [CompilerGeneratedAttribute]
private void set_Certificates(Certificates value);
    [CompilerGeneratedAttribute]
public BlackListAndCrl get_BlackListAndCrl();
    [CompilerGeneratedAttribute]
private void set_BlackListAndCrl(BlackListAndCrl value);
    private X509Certificate2 get_RootCertificate();
    public NewLicenseData DecodeLicense(string base64);
    public static bool VerifySignature(string text, string signatureBase64, X509Certificate2 signer);
    private static bool VerifySignature(string text, string signatureBase64, RSACryptoServiceProvider csp);
    public static bool VerifyCertificate(CertificateRevocationList crl, X509Certificate2 primaryCert, X509Certificate2[] additionalCertificates);
}
public class JetBrains.Application.License2.NoLicenseRequiredLicenseViewSubmodel : object {
    private LicenseCheckResult`1<NoLicenseRequiredLicenseViewSubmodel> myCheckResult;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, LicenseCheckInfo> CS$<>9__CachedAnonymousMethodDelegate5;
    public IProperty`1<bool> IsOn { get; private set; }
    public IProperty`1<LicenseViewModel> AllModel { get; private set; }
    public IEnumerable`1<ILicenseDataItem> LicenseData { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public NoLicenseRequiredLicenseViewSubmodel(Lifetime lifetime, string allModelName, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
private void set_IsOn(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    [CompilerGeneratedAttribute]
private void set_AllModel(IProperty`1<LicenseViewModel> value);
    public sealed virtual IEnumerable`1<ILicenseDataItem> get_LicenseData();
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    private static IEnumerable`1<ILicenseCheckInfo> FilterEntitiesThatDoNotRequireLicenseCheck(LicenseViewModel allModel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime notNullLifetiem, LicenseViewModel allModel);
    [CompilerGeneratedAttribute]
private static bool <FilterEntitiesThatDoNotRequireLicenseCheck>b__2(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static LicenseCheckInfo <FilterEntitiesThatDoNotRequireLicenseCheck>b__3(ILicensedEntity entity);
}
public interface JetBrains.Application.License2.Persistence.ILicenseDataPersister`1 {
    public abstract virtual IEnumerable`1<T> LoadItems();
    public abstract virtual void SaveItems(IEnumerable`1<T> items);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.Persistence.LicenseDataPersister : object {
    private ILogger myLogger;
    private ISignal`1<LicenseData> myLoadSignal;
    private ISignal`1<ILicenseData> mySaveSignal;
    private SafeRegistryPersister`1<LicenseData> myPersister;
    [CompilerGeneratedAttribute]
private static Func`4<ITypeDescriptorContext, CultureInfo, ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public LicenseDataPersister(Lifetime lifetime, ILogger logger, IEnumerable`1<ILicensedEntity> entities, AnyProductSettingsLocation settingsLocation, JetEnvironment environment, JetBrainsSharedStorage sharedStorage);
    [NotNullAttribute]
public ILicenseData LoadLicenseData();
    public void SaveLicenseData(ILicenseData licenseData);
    private void AddPersister(Lifetime lifetime, ILicenseDataPersister`1<T> persister);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(ITypeDescriptorContext context, CultureInfo info, ILicensedEntity entity);
}
public class JetBrains.Application.License2.Persistence.RegistryPersister`1 : object {
    private string myKeyName;
    private BackSlashSeparatedRelativePath myRegistryRelativePath;
    private RegistryHiveAccess myRegistryHiveAccess;
    private JsonLikeSerializer mySerializer;
    [CompilerGeneratedAttribute]
private T <DefaultValue>k__BackingField;
    protected internal T DefaultValue { get; private set; }
    public RegistryPersister`1(string pathInRegistry, string keyName, JsonLikeSerializer serializer, T defaultValue);
    [CompilerGeneratedAttribute]
protected internal T get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(T value);
    public virtual T Load();
    public virtual void Save(T value);
}
public class JetBrains.Application.License2.Persistence.SafeRegistryPersister`1 : RegistryPersister`1<T> {
    private ILogger myLogger;
    public SafeRegistryPersister`1(ILogger logger, string pathInRegistry, string keyName, JsonLikeSerializer serializer, T defaultValue);
    public virtual T Load();
    public virtual void Save(T value);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod3(T );
}
public enum JetBrains.Application.License2.Result : Enum {
    public int value__;
    public static Result SUCCESS;
    public static Result SUCCESS_WITH_WARNING;
    public static Result SUCCESS_WITH_WARNING_DO_NOT_SHOW_DIALOG;
    public static Result SUCCESS_WITH_WARNING_30_MIN_TO_SHUTDOWN;
    public static Result FAILED;
    public static Result FAILED_DONT_SHOW_DIALOG;
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.ResultEx : object {
    private static Dictionary`2<Result, Dictionary`2<Result, Result>> ourCombineMatrix;
    public static ResultWithDescription Empty;
    public static ResultWithDescription ProperlyLicensed;
    public static ResultWithDescription NoLicenseFound;
    private static ResultEx();
    private static void AssertCombineMatrix(Dictionary`2<Result, Dictionary`2<Result, Result>> matrix);
    private static Dictionary`2<Result, Dictionary`2<Result, Result>> GetCombineMatrix();
    [ExtensionAttribute]
public static Result Combine(Result r1, Result r2);
    [ExtensionAttribute]
public static ResultWithDescription Combine(ResultWithDescription r1, ResultWithDescription r2);
    [ExtensionAttribute]
public static bool IsSuccessful(Result result);
    [ExtensionAttribute]
public static bool ContainsWarnings(Result result);
    [ExtensionAttribute]
public static bool Is30MinToShutdown(Result result);
    [ExtensionAttribute]
public static bool IsFailed(Result result);
}
public class JetBrains.Application.License2.ResultWithDescription : object {
    [CompilerGeneratedAttribute]
private Result <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Description>k__BackingField;
    public Result Result { get; private set; }
    public String[] Description { get; private set; }
    public ResultWithDescription(Result result, IEnumerable`1<string> description);
    [StringFormatMethodAttribute("fmt")]
public ResultWithDescription(Result result, string fmt, Object[] args);
    [CompilerGeneratedAttribute]
public Result get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(Result value);
    [CompilerGeneratedAttribute]
public String[] get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(String[] value);
    public virtual string ToString();
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.EnterLicenseAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <ActivationCode>k__BackingField;
    public string ActivationCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ActivationCode();
    [CompilerGeneratedAttribute]
public void set_ActivationCode(string value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
public static class JetBrains.Application.License2.Sandbox.LicenceViewModelSandbox : object {
    public static SandboxedLicenseViewModel CreateSandbox(Lifetime sandboxLifetime, LicenseViewModelBuilder modelBuilder, WebProxySettingsReader webProxySettingsReader, ILicense2CheckComponent licenseCheckComponent, string baseUrl);
    public static IList`1<LicenseTest> ParseTests(string json);
}
public class JetBrains.Application.License2.Sandbox.LicenseTestRun : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Name { get; private set; }
    [CanBeNullAttribute]
public Exception Exception { get; private set; }
    public bool IsSuccessful { get; }
    public LicenseTestRun(string name, Exception exception);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    public bool get_IsSuccessful();
}
public static class JetBrains.Application.License2.Sandbox.LicenseTestRunner : object {
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public static IList`1<TestSet> RunTests(LicenseTestRunnerArgs args, IProgressIndicator progressIndicator);
    private static IDictionary`2<string, ILicensedEntity> PrepareLicenseEntities(IList`1<ILicensedEntity> entities, IList`1<string> productCodes);
    [CompilerGeneratedAttribute]
private static string <RunTests>b__0(ILicensedEntity e);
}
public class JetBrains.Application.License2.Sandbox.LicenseTestRunnerArgs : object {
    public static string TestServerUrl;
    public static String[] AllProductCodes;
    public static String[] AllLicenseCodes;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <WebProxySettingsReader>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseViewModelBuilder <LicenseViewModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ILicense2CheckComponent <License2CheckComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ILicensedEntity> <LicensedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ProductCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <LicenseCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<int, LicenseTest, bool> <TestFilter>k__BackingField;
    public ILogger Logger { get; private set; }
    public WebProxySettingsReader WebProxySettingsReader { get; private set; }
    public LicenseViewModelBuilder LicenseViewModelBuilder { get; private set; }
    public ILicense2CheckComponent License2CheckComponent { get; private set; }
    public IList`1<ILicensedEntity> LicensedEntities { get; private set; }
    public string Url { get; private set; }
    public IList`1<string> ProductCodes { get; private set; }
    public IList`1<string> LicenseCodes { get; private set; }
    public StringBuilder StdOut { get; private set; }
    public Func`3<int, LicenseTest, bool> TestFilter { get; private set; }
    public LicenseTestRunnerArgs(string url, IList`1<string> productCodes, IList`1<string> licenseCodes, StringBuilder stdOut, IComponentContainer container, Func`3<int, LicenseTest, bool> testFilter);
    public LicenseTestRunnerArgs(string url, IList`1<string> productCodes, IList`1<string> licenseCodes, StringBuilder stdOut, IDataContext context, Func`3<int, LicenseTest, bool> testFilter);
    private static LicenseTestRunnerArgs();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public WebProxySettingsReader get_WebProxySettingsReader();
    [CompilerGeneratedAttribute]
private void set_WebProxySettingsReader(WebProxySettingsReader value);
    [CompilerGeneratedAttribute]
public LicenseViewModelBuilder get_LicenseViewModelBuilder();
    [CompilerGeneratedAttribute]
private void set_LicenseViewModelBuilder(LicenseViewModelBuilder value);
    [CompilerGeneratedAttribute]
public ILicense2CheckComponent get_License2CheckComponent();
    [CompilerGeneratedAttribute]
private void set_License2CheckComponent(ILicense2CheckComponent value);
    [CompilerGeneratedAttribute]
public IList`1<ILicensedEntity> get_LicensedEntities();
    [CompilerGeneratedAttribute]
private void set_LicensedEntities(IList`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ProductCodes();
    [CompilerGeneratedAttribute]
private void set_ProductCodes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_LicenseCodes();
    [CompilerGeneratedAttribute]
private void set_LicenseCodes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public StringBuilder get_StdOut();
    [CompilerGeneratedAttribute]
private void set_StdOut(StringBuilder value);
    [CompilerGeneratedAttribute]
public Func`3<int, LicenseTest, bool> get_TestFilter();
    [CompilerGeneratedAttribute]
private void set_TestFilter(Func`3<int, LicenseTest, bool> value);
    private void InitComponents(IComponentContainer context);
    private void InitComponents(IDataContext context);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.ObtainAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    public string Uid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
public class JetBrains.Application.License2.Sandbox.SandboxedLicenseViewModel : object {
    [CompilerGeneratedAttribute]
private LicenseViewModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <ProxySettingsReader>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public LicenseViewModel Model { get; private set; }
    public string BaseUri { get; private set; }
    public WebProxySettingsReader ProxySettingsReader { get; private set; }
    public ILogger Logger { get; private set; }
    public SandboxedLicenseViewModel(LicenseViewModel model, string baseUri, WebProxySettingsReader proxySettingsReader, ILogger logger);
    [CompilerGeneratedAttribute]
public LicenseViewModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(LicenseViewModel value);
    [CompilerGeneratedAttribute]
public string get_BaseUri();
    [CompilerGeneratedAttribute]
private void set_BaseUri(string value);
    [CompilerGeneratedAttribute]
public WebProxySettingsReader get_ProxySettingsReader();
    [CompilerGeneratedAttribute]
private void set_ProxySettingsReader(WebProxySettingsReader value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
}
public abstract class JetBrains.Application.License2.Sandbox.SandboxedLicenseViewModelAction : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual void Parse(IDictionary`2<string, object> token);
    public abstract virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
public class JetBrains.Application.License2.Sandbox.TestSet : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LicenseTestRun> <Tests>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<LicenseTestRun, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Url { get; private set; }
    public string Json { get; private set; }
    public IList`1<LicenseTestRun> Tests { get; private set; }
    public IList`1<LicenseTestRun> FailedTests { get; }
    public TestSet(string url, string json);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Json();
    [CompilerGeneratedAttribute]
private void set_Json(string value);
    [CompilerGeneratedAttribute]
public IList`1<LicenseTestRun> get_Tests();
    [CompilerGeneratedAttribute]
private void set_Tests(IList`1<LicenseTestRun> value);
    public IList`1<LicenseTestRun> get_FailedTests();
    [CompilerGeneratedAttribute]
private static bool <get_FailedTests>b__0(LicenseTestRun test);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.UpdateAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Params>k__BackingField;
    public string Method { get; public set; }
    public string Uri { get; public set; }
    public Dictionary`2<string, string> Params { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(Dictionary`2<string, string> value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.ValidateAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<ResultWithDescription, ILicenseCheckInfo`1<INamedLicenseData>, ResultWithDescription> CS$<>9__CachedAnonymousMethodDelegate1;
    public string Uid { get; public set; }
    public string ActivationCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_ActivationCode();
    [CompilerGeneratedAttribute]
public void set_ActivationCode(string value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
    [CompilerGeneratedAttribute]
private static ResultWithDescription <Do>b__0(ResultWithDescription r, ILicenseCheckInfo`1<INamedLicenseData> info);
}
public class JetBrains.Application.License2.SupportsJetBrainsAccount : object {
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ProductBuiltDateUsedForSubscriptionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductEdition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProductVersion>k__BackingField;
    public string ProductName { get; public set; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; private set; }
    public string ProductCode { get; private set; }
    public string ProductEdition { get; private set; }
    public int ProductVersion { get; private set; }
    public SupportsJetBrainsAccount(string productName, string productCode, string productEdition, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductName();
    [CompilerGeneratedAttribute]
public void set_ProductName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    [CompilerGeneratedAttribute]
private void set_ProductBuiltDateUsedForSubscriptionCheck(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductCode();
    [CompilerGeneratedAttribute]
private void set_ProductCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductEdition();
    [CompilerGeneratedAttribute]
private void set_ProductEdition(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProductVersion();
    [CompilerGeneratedAttribute]
private void set_ProductVersion(int value);
    public static SupportsJetBrainsAccount CreateForReSharperUltimate();
    [ObsoleteAttribute("The method is to be removed. Use the overload without parameters")]
public static SupportsJetBrainsAccount CreateForReSharperUltimate(int version, DateTime productBuiltDateUsedForSubscriptionCheck);
    private bool Equals(SupportsJetBrainsAccount other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SupportsJetBrainsAccount left, SupportsJetBrainsAccount right);
    public static bool op_Inequality(SupportsJetBrainsAccount left, SupportsJetBrainsAccount right);
}
public abstract class JetBrains.Application.License2.UIInteractive.BuiltInConsentOptionsProviderFromResource : object {
    private string myResourceFileName;
    protected BuiltInConsentOptionsProviderFromResource(string resourceFileName);
    public virtual IReadOnlyList`1<IConsentOption> LoadOptions();
}
public abstract class JetBrains.Application.License2.UIInteractive.BuiltInConsentOptionsProviderFromResourceWithSetting`1 : BuiltInConsentOptionsProviderFromResource {
    private Lifetime myLifetime;
    private IConsentOptions myConsentOptions;
    private ILogger myLogger;
    private string myConsentId;
    private Expression`1<Func`2<TSettingKey, bool>> myLambdaExpr;
    protected IContextBoundSettingsStoreLive myContextBoundSettingsStoreLive;
    protected BuiltInConsentOptionsProviderFromResourceWithSetting`1(Lifetime lifetime, ISettingsStore settingsStore, IConsentOptions consentOptions, ILogger logger, string resourceFileName, string consentId, Expression`1<Func`2<TSettingKey, bool>> lambdaExpr);
    public virtual IReadOnlyList`1<IConsentOption> LoadOptions();
    private void DoSync(Action`2<Nullable`1<bool>, bool> syncAction);
    private void SettingToConsentOption();
    private void ConsentOptionToSetting();
    private Nullable`1<bool> GetConsentOptionValue();
    private void SetConsentOptionValue(bool value);
    private bool GetSettingValue();
    protected virtual void SetSettingValue(bool value);
    [CompilerGeneratedAttribute]
private bool <LoadOptions>b__0(IConsentOption o);
    [CompilerGeneratedAttribute]
private void <LoadOptions>b__1(Lifetime valueLieftime, IReadOnlyCollection`1<IConsentOption> options);
    [CompilerGeneratedAttribute]
private void <SettingToConsentOption>b__5(Nullable`1<bool> consentValue, bool settingValue);
    [CompilerGeneratedAttribute]
private void <ConsentOptionToSetting>b__6(Nullable`1<bool> consentValue, bool settingValue);
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.License2.UIInteractive.CommonBuiltInConsentOptionsProvider : BuiltInConsentOptionsProviderFromResource {
}
public class JetBrains.Application.License2.UIInteractive.ConsentOption : object {
    [CompilerGeneratedAttribute]
private string <consentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <accepted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private long <acceptanceTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <printableName>k__BackingField;
    [NotNullAttribute]
public string consentId { get; public set; }
    public Version version { get; public set; }
    [NotNullAttribute]
public string text { get; public set; }
    public bool accepted { get; public set; }
    public bool deleted { get; public set; }
    public long acceptanceTime { get; public set; }
    [NotNullAttribute]
public string printableName { get; public set; }
    public ConsentOption(string consentId, Version version, string text, string printableName, bool accepted, bool deleted, long acceptedTime);
    [CompilerGeneratedAttribute]
public sealed virtual string get_consentId();
    [CompilerGeneratedAttribute]
public void set_consentId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_version();
    [CompilerGeneratedAttribute]
public void set_version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_text();
    [CompilerGeneratedAttribute]
public void set_text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_accepted();
    [CompilerGeneratedAttribute]
public void set_accepted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_deleted();
    [CompilerGeneratedAttribute]
public void set_deleted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_acceptanceTime();
    [CompilerGeneratedAttribute]
public void set_acceptanceTime(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_printableName();
    [CompilerGeneratedAttribute]
public void set_printableName(string value);
    protected bool Equals(ConsentOption other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ConsentOption left, ConsentOption right);
    public static bool op_Inequality(ConsentOption left, ConsentOption right);
    public virtual string ToString();
    [CanBeNullAttribute]
public static IConsentOption FromJson(string json);
    public static ConsentOption[] OptionsFromJson(string json);
    public static string ToJsonString(IConsentOption consentOption);
}
[ShellComponentAttribute]
internal class JetBrains.Application.License2.UIInteractive.ConsentOptionsShellComponent : object {
    public ConsentOptionsShellComponent(Lifetime lifetime, ConsentOptionsUIInteractive consentOptions, IEnumerable`1<IBuiltInConsentOptionsProvider> builtInConsentOptionsProviders);
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.License2.UIInteractive.ConsentOptionsUIInteractive : ConsentOptionsStub {
    private static string ourLastKnownConsentOptionsFileName;
    private static string ourAcceptedConsentOptionsFileName;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ILogger myLogger;
    private JetBrainsSharedStorage mySharedStorage;
    private AnyProductSettingsLocation myProductSettingsLocation;
    private object myLockObject;
    private IDictionary`2<string, IConsentOption> myConsentOptions;
    private IDictionary`2<string, AcceptedState> myConsentResults;
    private bool myAlwaysAccepted;
    [CompilerGeneratedAttribute]
private static Func`2<IConsentOption, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IConsentOption, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IConsentOption, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<IConsentOption, string> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, AcceptedState>, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<IConsentOption, IConsentOption> CS$<>9__CachedAnonymousMethodDelegate1f;
    internal bool AlwaysAccepted { get; internal set; }
    public ConsentOptionsUIInteractive(Lifetime lifetime, IThreading threading, ILogger logger, JetBrainsSharedStorage sharedStorage, AnyProductSettingsLocation productSettingsLocation);
    internal bool get_AlwaysAccepted();
    internal void set_AlwaysAccepted(bool value);
    internal void SetBuiltInOptionsProviders(Lifetime lifetime, IEnumerable`1<IBuiltInConsentOptionsProvider> builtInConsentOptionsProviders);
    private void ApplyAcceptedResults(IReadOnlyList`1<Pair`2<string, AcceptedState>> pairs);
    private void NormalizeAcceptedVersion();
    private void UpdateOptions();
    public virtual void OnConsentOptionsRecieved(string json);
    public virtual AcceptedState GetConsensetOptionAcceptedState(IConsentOption consentOption);
    private void SetConsentOptionsImpl(IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptionValues, ConsetOptionsChangeSource changeSource);
    public virtual void SetConsentOptions(IEnumerable`1<Pair`2<IConsentOption, bool>> consentOptionValues, ConsetOptionsChangeSource changeSource);
    private void MergeOptions(string title, IReadOnlyList`1<IConsentOption> options);
    [NotNullAttribute]
private IReadOnlyList`1<IConsentOption> LoadLastKnownConsentOptions();
    private void SaveLastKnownConsentOptions();
    private IReadOnlyList`1<Pair`2<string, AcceptedState>> LoadAccepted();
    private void SaveAccepted();
    private IReadOnlyList`1<IConsentOption> LoadBuiltInOptions(IEnumerable`1<IBuiltInConsentOptionsProvider> builtInConsentOptionsProviders);
    [CompilerGeneratedAttribute]
private static bool <UpdateOptions>b__6(IConsentOption option);
    [CompilerGeneratedAttribute]
private static string <UpdateOptions>b__7(IConsentOption option);
    [CompilerGeneratedAttribute]
private static string <UpdateOptions>b__8(IConsentOption option);
    [CompilerGeneratedAttribute]
private ConsentOption[] <LoadLastKnownConsentOptions>b__12();
    [CompilerGeneratedAttribute]
private static string <SaveLastKnownConsentOptions>b__14(IConsentOption option);
    [CompilerGeneratedAttribute]
private static string <SaveAccepted>b__1a(KeyValuePair`2<string, AcceptedState> pair);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IConsentOption> <LoadBuiltInOptions>b__1c(IBuiltInConsentOptionsProvider provider);
    [CompilerGeneratedAttribute]
private static IConsentOption <LoadBuiltInOptions>b__1e(IConsentOption _);
}
internal class JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor : object {
    [CompilerGeneratedAttribute]
private string <TechnicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <AcceptedVersionRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <CachedRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotnetAcceptedRegistryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAcceptedRegistryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ISharedStorageAccess`1<Version> <VersionAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private ISharedStorageAccess`1<string> <DocumentTextAccess>k__BackingField;
    public string TechnicalName { get; private set; }
    public RelativePath AcceptedVersionRelativePath { get; private set; }
    public RelativePath CachedRelativePath { get; private set; }
    public string DotnetAcceptedRegistryKey { get; private set; }
    public string SharedAcceptedRegistryKey { get; private set; }
    [NotNullAttribute]
public ISharedStorageAccess`1<Version> VersionAccess { get; private set; }
    [NotNullAttribute]
public ISharedStorageAccess`1<string> DocumentTextAccess { get; private set; }
    private DocumentStorageDescriptor(JetBrainsSharedStorage sharedStorage, string technicalName, RelativePath acceptedVersionRelativePath, RelativePath cachedRelativePath, string dotnetAcceptedRegistryKey, string sharedAcceptedRegistryKey);
    [CompilerGeneratedAttribute]
public string get_TechnicalName();
    [CompilerGeneratedAttribute]
private void set_TechnicalName(string value);
    [CompilerGeneratedAttribute]
public RelativePath get_AcceptedVersionRelativePath();
    [CompilerGeneratedAttribute]
private void set_AcceptedVersionRelativePath(RelativePath value);
    [CompilerGeneratedAttribute]
public RelativePath get_CachedRelativePath();
    [CompilerGeneratedAttribute]
private void set_CachedRelativePath(RelativePath value);
    [CompilerGeneratedAttribute]
public string get_DotnetAcceptedRegistryKey();
    [CompilerGeneratedAttribute]
private void set_DotnetAcceptedRegistryKey(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAcceptedRegistryKey();
    [CompilerGeneratedAttribute]
private void set_SharedAcceptedRegistryKey(string value);
    [CompilerGeneratedAttribute]
public ISharedStorageAccess`1<Version> get_VersionAccess();
    [CompilerGeneratedAttribute]
private void set_VersionAccess(ISharedStorageAccess`1<Version> value);
    [CompilerGeneratedAttribute]
public ISharedStorageAccess`1<string> get_DocumentTextAccess();
    [CompilerGeneratedAttribute]
private void set_DocumentTextAccess(ISharedStorageAccess`1<string> value);
    private ISharedStorageAccess`1<string> CreateDocumentTextAccess(JetBrainsSharedStorage sharedStorage);
    private static Version StringToVersion(string str);
    private static string VersionToString(Version version);
    private ISharedStorageAccess`1<Version> CreateVersionAccess(JetBrainsSharedStorage sharedStorage);
    public static DocumentStorageDescriptor Create(string technicalName, JetBrainsSharedStorage sharedStorage);
}
public interface JetBrains.Application.License2.UIInteractive.IBuiltInConsentOptionsProvider {
    public abstract virtual IReadOnlyList`1<IConsentOption> LoadOptions();
}
[ShellComponentAttribute]
public class JetBrains.Application.License2.UIInteractive.PrivacyPolicyProvider : object {
    public static string PrivacyPolicyTechnicalName;
    private ILogger myLogger;
    private JetBrainsSharedStorage mySharedStorage;
    private IJetBrainsLicenseServerAccess myServerAccess;
    private IConsentOptions myConsentOptions;
    private Lazy`1<RelativePath> myDocumentNameRelativePath;
    private Lazy`1<RelativePath> myEapDocumentNameRelativePath;
    private static Version AlwaysAccepted;
    [CompilerGeneratedAttribute]
private IProperty`1<CheckForUpdateAllowedArgs> <CheckForUpdateAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<RelativePath> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`1<RelativePath> CS$<>9__CachedAnonymousMethodDelegatea;
    public IProperty`1<CheckForUpdateAllowedArgs> CheckForUpdateAllowed { get; private set; }
    public IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> Document { get; public set; }
    public PrivacyPolicyProvider(Lifetime lifetime, ILogger logger, JetBrainsSharedStorage sharedStorage, IThreading threading, IJetBrainsLicenseServerAccess serverAccess, IConsentOptions consentOptions);
    private static PrivacyPolicyProvider();
    [CompilerGeneratedAttribute]
public IProperty`1<CheckForUpdateAllowedArgs> get_CheckForUpdateAllowed();
    [CompilerGeneratedAttribute]
private void set_CheckForUpdateAllowed(IProperty`1<CheckForUpdateAllowedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Document(IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> value);
    [ObsoleteAttribute("The method is intended to be used in tests setup only")]
public static void SetAlwaysAccepted();
    [ObsoleteAttribute("The method is intended to be used in tests setup only")]
public static void CleanAlwaysAccepted();
    public sealed virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
    private Pair`2<IDocumentThatRequiresUserConsent, DocumentState> GetCurrentDocument(JetBrainsSharedStorage sharedStorage);
    private void TryObtainNewVersion(CheckForUpdateAllowedArgs args);
    [CompilerGeneratedAttribute]
private static RelativePath <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static RelativePath <.ctor>b__1();
}
[ShellComponentAttribute]
public class JetBrains.Application.License2.UIInteractive.PrivacyPolicyProviderCheckForUpdateAllowance : object {
    public PrivacyPolicyProviderCheckForUpdateAllowance(Lifetime lifetime, ILicense2CheckComponent license2Check, PrivacyPolicyProvider privacyPolicyProvider, BlackListAndCrl blackListAndCrl, ILogger logger);
}
[ZoneMarkerAttribute]
public class JetBrains.Application.License2.UIInteractive.ZoneMarker : object {
}
[EnvironmentComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.License2.UiInteractiveLicense2CheckComponentSettings : License2CheckComponentSettings {
    public bool DoSync { get; }
    public virtual bool get_DoSync();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.License2.Usage.LicensedEntityUsageTracker : object {
    private ILogger myLogger;
    private Dictionary`2<string, DateTime> myEntitiesUsed;
    public TimeSpan TwoDays;
    private SafeRegistryPersister`1<Dictionary`2<string, DateTime>> myPersister;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, DateTime>, string> CS$<>9__CachedAnonymousMethodDelegatee;
    public LicensedEntityUsageTracker(Lifetime lifetime, ILogger logger, EvaluationTracker evaluationTracker, IThreading threading, AnyProductSettingsLocation settingsLocation);
    public IList`1<string> GetRecentlyUsedEntities(Nullable`1<TimeSpan> recentThreshold);
    public void ReportEntityUsed(ILicensedEntity entity);
    private void Load();
    private void Save();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
    [CompilerGeneratedAttribute]
private static string <GetRecentlyUsedEntities>b__d(KeyValuePair`2<string, DateTime> pair);
}
public class JetBrains.Application.License2.UserLicenseChecker : object {
    public static string ReSharper;
    public static string ReSharperUltimate;
    public static string ReSharperPublicKey;
    public static int FullEditionCode;
    public static int CSharpEditionCode;
    public static int VbEditionCode;
    public static int UltimateEditionCode;
    public static Dictionary`2<int, string> ReSharperEditionNames;
    [CompilerGeneratedAttribute]
private string <LicenseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private AcceptLicenseDelegate <AcceptLicenseDelegate>k__BackingField;
    [NotNullAttribute]
public string LicenseName { get; private set; }
    [NotNullAttribute]
public string PublicKey { get; private set; }
    [NotNullAttribute]
public string CompanyName { get; private set; }
    [CanBeNullAttribute]
public AcceptLicenseDelegate AcceptLicenseDelegate { get; private set; }
    public UserLicenseChecker(string licenseName, string publicKey, string companyName, AcceptLicenseDelegate acceptLicenseDelegate);
    private static UserLicenseChecker();
    [CompilerGeneratedAttribute]
public string get_LicenseName();
    [CompilerGeneratedAttribute]
private void set_LicenseName(string value);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
private void set_PublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
private void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public AcceptLicenseDelegate get_AcceptLicenseDelegate();
    [CompilerGeneratedAttribute]
private void set_AcceptLicenseDelegate(AcceptLicenseDelegate value);
    public static UserLicenseChecker CreateFor(string licenseName, string publicKey, int version, DateTime dateTimeForSubscriptionCheck, Func`2<LicenseData, LicenseCheckResult> additionalCheck);
    public static UserLicenseChecker CreateForReSharperEditions(string licenseName, int version, DateTime dateTimeForSubscriptionCheck, Int32[] expectedEditions);
    public static UserLicenseChecker CreateForReSharperUltimate();
    public static UserLicenseChecker CreateForReSharperClassroomAndOpenSource(string productName);
    [ObsoleteAttribute("The method is to be removed. Use the overload without parameters")]
public static UserLicenseChecker CreateForReSharperUltimate(int version, DateTime dateTimeForSubscriptionCheck);
    public static UserLicenseChecker CreateForReSharperRegular(int version, DateTime dateTimeForSubscriptionCheck);
}
public class JetBrains.Application.License2.UserLicenses.FileUserLicensePersister : object {
    private ILogger myLogger;
    private FileSystemPath myFolderToSearchLicensesPath;
    public FileUserLicensePersister(ILogger logger, AnyProductSettingsLocation settingsLocation);
    public sealed virtual IEnumerable`1<UserLicense> LoadItems();
    private void LoadLicensesFromFile(FileSystemPath filePath, JetHashSet`1<UserLicense> licenses);
    public sealed virtual void SaveItems(IEnumerable`1<UserLicense> items);
    [CompilerGeneratedAttribute]
private JetHashSet`1<UserLicense> <LoadItems>b__0();
}
public interface JetBrains.Application.License2.UserLicenses.INamedLicenseData {
    public string LicenseName { get; }
    public string LicenseeName { get; }
    public string AssigneeName { get; }
    public string LicenseId { get; }
    public string LicenseHash { get; }
    public string LicenseRestrictions { get; }
    public DateTime ExpirationDate { get; }
    public bool CheckConcurrentUse { get; }
    public UserLicenseStatus Status { get; }
    public abstract virtual string get_LicenseName();
    public abstract virtual string get_LicenseeName();
    public abstract virtual string get_AssigneeName();
    public abstract virtual string get_LicenseId();
    public abstract virtual string get_LicenseHash();
    public abstract virtual string get_LicenseRestrictions();
    public abstract virtual DateTime get_ExpirationDate();
    public abstract virtual bool get_CheckConcurrentUse();
    public abstract virtual string DescribeValidLicense();
    public abstract virtual UserLicenseStatus get_Status();
}
public interface JetBrains.Application.License2.UserLicenses.INamedLicenseData`1 {
    public TLicenseData LicenseData { get; }
    public abstract virtual TLicenseData get_LicenseData();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.UserLicenses.NamedLicenseDataEx : object {
    [ExtensionAttribute]
public static string GetTitle(INamedLicenseData data);
}
internal class JetBrains.Application.License2.UserLicenses.OldNamedLicenseData : object {
    [CompilerGeneratedAttribute]
private LicenseData <LicenseData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseName>k__BackingField;
    public LicenseData LicenseData { get; public set; }
    public string LicenseName { get; private set; }
    public string LicenseeName { get; }
    public string AssigneeName { get; }
    public string LicenseId { get; }
    public string LicenseHash { get; }
    public string LicenseRestrictions { get; }
    public DateTime ExpirationDate { get; }
    public bool CheckConcurrentUse { get; }
    public UserLicenseStatus Status { get; }
    public OldNamedLicenseData(string licenseName, LicenseData oldLicenseData);
    public OldNamedLicenseData(string licenseName, string publicKey, string licenseKey, string userName, string companyName, AcceptLicenseDelegate acceptLicenseDelegate);
    [CompilerGeneratedAttribute]
public sealed virtual LicenseData get_LicenseData();
    [CompilerGeneratedAttribute]
public void set_LicenseData(LicenseData value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseName();
    [CompilerGeneratedAttribute]
private void set_LicenseName(string value);
    public sealed virtual string get_LicenseeName();
    public sealed virtual string get_AssigneeName();
    public sealed virtual string get_LicenseId();
    public sealed virtual string get_LicenseHash();
    public sealed virtual string get_LicenseRestrictions();
    public sealed virtual DateTime get_ExpirationDate();
    public sealed virtual bool get_CheckConcurrentUse();
    public sealed virtual string DescribeValidLicense();
    public sealed virtual UserLicenseStatus get_Status();
}
public class JetBrains.Application.License2.UserLicenses.RegistryUserLicensePersister : object {
    private RegistryPersister`1<IEnumerable`1<UserLicense>> myPersister;
    public RegistryUserLicensePersister(ILogger logger, AnyProductSettingsLocation settingsLocation, JetEnvironment environment);
    public sealed virtual IEnumerable`1<UserLicense> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<UserLicense> items);
}
public class JetBrains.Application.License2.UserLicenses.RegistryUserLicenseSettingsPersister : object {
    private RegistryPersister`1<UserLicenseSettings> myPersister;
    public RegistryUserLicenseSettingsPersister(ILogger logger, AnyProductSettingsLocation settingsLocation, JetEnvironment environment);
    public sealed virtual IEnumerable`1<UserLicenseSettings> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<UserLicenseSettings> items);
}
public class JetBrains.Application.License2.UserLicenses.RegistryValidateKeyResultsPersister : object {
    private RegistryPersister`1<ValidateKeyResults> myPersister;
    public RegistryValidateKeyResultsPersister(ILogger logger, AnyProductSettingsLocation settingsLocation, JetEnvironment environment);
    public sealed virtual IEnumerable`1<ValidateKeyResults> LoadItems();
    public sealed virtual void SaveItems(IEnumerable`1<ValidateKeyResults> items);
}
public class JetBrains.Application.License2.UserLicenses.UserLicense : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseKey>k__BackingField;
    [NotNullAttribute]
public string UserName { get; private set; }
    [NotNullAttribute]
public string LicenseKey { get; private set; }
    public string LicenseId { get; }
    public UserLicense(string userName, string licenseKey);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseKey();
    [CompilerGeneratedAttribute]
private void set_LicenseKey(string value);
    public string get_LicenseId();
    protected bool Equals(UserLicense other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.UserLicenses.UserLicenseEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, Pair`2<ILicensedEntity, ISupportsUserLicense>> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<ILicensedEntity, ISupportsUserLicense>> WithUserLicenseSupport(IEnumerable`1<ILicensedEntity> entities);
    [CompilerGeneratedAttribute]
private static bool <WithUserLicenseSupport>b__0(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static Pair`2<ILicensedEntity, ISupportsUserLicense> <WithUserLicenseSupport>b__1(ILicensedEntity entity);
}
public class JetBrains.Application.License2.UserLicenses.UserLicenseSettings : object {
    public static UserLicenseSettings Default;
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserLicense> <SuspendedLicenses>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextKeyValidationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Pair`2<UserLicense, string>> <OldUserLicenseConversion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public bool IsOn { get; internal set; }
    public IEnumerable`1<UserLicense> SuspendedLicenses { get; internal set; }
    public DateTime NextKeyValidationTime { get; internal set; }
    public IList`1<Pair`2<UserLicense, string>> OldUserLicenseConversion { get; internal set; }
    public string FirstName { get; internal set; }
    public string LastName { get; internal set; }
    public string Email { get; internal set; }
    private static UserLicenseSettings();
    [CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
internal void set_IsOn(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<UserLicense> get_SuspendedLicenses();
    [CompilerGeneratedAttribute]
internal void set_SuspendedLicenses(IEnumerable`1<UserLicense> value);
    [CompilerGeneratedAttribute]
public DateTime get_NextKeyValidationTime();
    [CompilerGeneratedAttribute]
internal void set_NextKeyValidationTime(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<Pair`2<UserLicense, string>> get_OldUserLicenseConversion();
    [CompilerGeneratedAttribute]
internal void set_OldUserLicenseConversion(IList`1<Pair`2<UserLicense, string>> value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
internal void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
internal void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
internal void set_Email(string value);
}
public class JetBrains.Application.License2.UserLicenses.UserLicenseStatus : object {
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Is30MinToShutdown>k__BackingField;
    public NotificationSeverity Severity { get; private set; }
    public String[] Text { get; private set; }
    public bool Is30MinToShutdown { get; private set; }
    public UserLicenseStatus(NotificationSeverity severity, bool is30MinToShutdown, String[] text);
    [CompilerGeneratedAttribute]
public NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(NotificationSeverity value);
    [CompilerGeneratedAttribute]
public String[] get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Is30MinToShutdown();
    [CompilerGeneratedAttribute]
private void set_Is30MinToShutdown(bool value);
}
public class JetBrains.Application.License2.UserLicenses.UserLicenseViewSubmodel : object {
    private object myLock;
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private ILogger myLogger;
    private IJetBrainsLicenseServerAccess myLicenseServerAccess;
    private UserNotifications myUserNotifications;
    private ILicense2CheckComponent myLicense2CheckComponent;
    private NewLicenseDataCache myNewLicenseDataCache;
    private Dictionary`2<UserLicense, LicenseState> myAllLicenses;
    private ValidateKeyResults myValidateKeyResults;
    private LicenseCheckResult`1<UserLicense> myCheckResult;
    [CompilerGeneratedAttribute]
private UserLicenseService <UserLicenseService>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<UserLicense> <SuspendedLicenses>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextKeyValidationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<UserLicense, string> <myOldUserLicenseConversion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<UserLicense, string>, Pair`2<UserLicense, string>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo, ILicensedEntity> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`3<LicenseState, ILicenseCheckInfo, bool> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Func`3<LicenseState, ILicenseCheckInfo, bool> CS$<>9__CachedAnonymousMethodDelegate66;
    [CompilerGeneratedAttribute]
private static Func`2<LicenseCheckInfo`1<INamedLicenseData>, INamedLicenseData> CS$<>9__CachedAnonymousMethodDelegate6a;
    public UserLicenseService UserLicenseService { get; private set; }
    public IProperty`1<bool> IsOn { get; private set; }
    public IProperty`1<LicenseViewModel> AllModel { get; private set; }
    private ICollectionEvents`1<UserLicense> SuspendedLicenses { get; private set; }
    private DateTime NextKeyValidationTime { get; private set; }
    private Dictionary`2<UserLicense, string> myOldUserLicenseConversion { get; private set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Email { get; public set; }
    private IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.LicenseData { get; }
    public IEnumerable`1<UserLicense> AllLicenses { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; private set; }
    public ISimpleSignal ResultChanged { get; }
    public UserLicenseViewSubmodel(Lifetime lifetime, string allModelName, ILicenseData data, ITaskHost taskHost, ILogger logger, IJetBrainsLicenseServerAccess licenseServerAccess, UserNotifications userNotifications, ILicense2CheckComponent license2CheckComponent, NewLicenseDataCache newLicenseDataCache, UserLicenseService userLicenseService);
    [CompilerGeneratedAttribute]
public UserLicenseService get_UserLicenseService();
    [CompilerGeneratedAttribute]
private void set_UserLicenseService(UserLicenseService value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
private void set_IsOn(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    [CompilerGeneratedAttribute]
private void set_AllModel(IProperty`1<LicenseViewModel> value);
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<UserLicense> get_SuspendedLicenses();
    [CompilerGeneratedAttribute]
private void set_SuspendedLicenses(ICollectionEvents`1<UserLicense> value);
    [CompilerGeneratedAttribute]
private DateTime get_NextKeyValidationTime();
    [CompilerGeneratedAttribute]
private void set_NextKeyValidationTime(DateTime value);
    [CompilerGeneratedAttribute]
private Dictionary`2<UserLicense, string> get_myOldUserLicenseConversion();
    [CompilerGeneratedAttribute]
private void set_myOldUserLicenseConversion(Dictionary`2<UserLicense, string> value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
public void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
public void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    private sealed virtual override IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.get_LicenseData();
    public IEnumerable`1<UserLicense> get_AllLicenses();
    public LicenseState GetLicenseState(UserLicense userLicense);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    [CompilerGeneratedAttribute]
private void set_AllowedEntities(IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> value);
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    private IReadOnlyCollection`1<ILicensedEntity> CalculateAllowedEntities();
    private void InitSettings(ILicenseData data);
    private void ScheduleCheckAllLicenses();
    private void SetNextKeysValidation(DateTime nextKeyValidationTime);
    public void ValidateLicenseKey(UserLicense userLicense);
    private long ValidateLicenseKey(INamedLicenseData licenseData, long validationPeriod);
    public bool AddLicense(UserLicense userLicense, bool doCheckSynchronousely, bool validateLicenseKey);
    public void RemoveLicenseFromSuspended(UserLicense userLicense);
    public void RemoveLicense(UserLicense userLicense);
    public void SuspendLicense(UserLicense userLicense);
    private LicenseCheckInfo`1<INamedLicenseData> CreateInfoFor(ILicensedEntity entity, INamedLicenseData licenseData);
    public Nullable`1<Pair`2<LicenseState, string>> TryGetOldLicenseConversionStatus(INamedLicenseData licenseData);
    private Pair`2<LicenseState, string> GetOldLicenseConversionStatusOrNotApplicable(UserLicense userLicense);
    [CanBeNullAttribute]
private LicenseCheckInfo`1<INamedLicenseData> TryCreateInfoForOldLicenseData(ILicensedEntity entity, INamedLicenseData licenseData);
    private ValidateKeyResponse TryValidateUserLicense(INamedLicenseData licenseData, string productCode);
    private void ScheduleKeysExchange();
    public void TryExchangeKey(UserLicense userLicense, bool isSync);
    private void TryExchangeKey(UserLicense userLicense);
    private void CheckLicense(UserLicense userLicense);
    [CanBeNullAttribute]
public static INamedLicenseData CheckLicense(UserLicense license, ISupportsUserLicense supportsUserLicense);
    [CanBeNullAttribute]
private INamedLicenseData CheckLicense(UserLicense license, ILicensedEntity entity);
    public IReadOnlyCollection`1<INamedLicenseData> GetUsedLicenseDatas();
    private IReadOnlyCollection`1<INamedLicenseData> GetFilteredLicenseDatas(Func`3<LicenseState, ILicenseCheckInfo, bool> filter);
    public IList`1<ILicenseCheckInfo`1<INamedLicenseData>> GetResults(UserLicense userLicense);
    [CompilerGeneratedAttribute]
private static Pair`2<UserLicense, string> <JetBrains.Application.License2.ILicenseViewSubmodel.get_LicenseData>b__2(KeyValuePair`2<UserLicense, string> pair);
    [CompilerGeneratedAttribute]
private bool <TryGetInfo>b__b(UserLicense license);
    [CompilerGeneratedAttribute]
private static bool <CalculateAllowedEntities>b__11(ILicenseCheckInfo info);
    [CompilerGeneratedAttribute]
private static ILicensedEntity <CalculateAllowedEntities>b__12(ILicenseCheckInfo info);
    [CompilerGeneratedAttribute]
private void <ScheduleCheckAllLicenses>b__27();
    [CompilerGeneratedAttribute]
private void <SetNextKeysValidation>b__2c();
    [CompilerGeneratedAttribute]
private static bool <ValidateLicenseKey>b__2d(LicenseState state, ILicenseCheckInfo info);
    [CompilerGeneratedAttribute]
private static bool <GetUsedLicenseDatas>b__65(LicenseState state, ILicenseCheckInfo info);
    [CompilerGeneratedAttribute]
private static INamedLicenseData <GetFilteredLicenseDatas>b__69(LicenseCheckInfo`1<INamedLicenseData> info);
}
public class JetBrains.Application.License2.UserLicenses.ValidateKeyResults : object {
    [CompilerGeneratedAttribute]
private IList`1<KeyValuePair`2<string, string>> <LicenseKeyWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<KeyValuePair`2<string, string>> <LicenseKeyErrors>k__BackingField;
    public IList`1<KeyValuePair`2<string, string>> LicenseKeyWarnings { get; private set; }
    public IList`1<KeyValuePair`2<string, string>> LicenseKeyErrors { get; private set; }
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, string>> get_LicenseKeyWarnings();
    [CompilerGeneratedAttribute]
private void set_LicenseKeyWarnings(IList`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, string>> get_LicenseKeyErrors();
    [CompilerGeneratedAttribute]
private void set_LicenseKeyErrors(IList`1<KeyValuePair`2<string, string>> value);
    public bool ClearKeyResult(string licenseId);
    public void SetWarning(string licenseId, string warning);
    public void SetError(string licenseId, string error);
    public string TryGetError(string licenseId);
    public string TryGetWarning(string licenseId);
    public void ClearKeyResult(UserLicense userLicense);
}
public static class JetBrains.Application.License2.Util.AssetUtil : object {
    public static string DescribeValidAsset(string licensee, string licenseRestrictions, DateTime subscriptionEndDate, DateTime expirationDate);
}
public static class JetBrains.Application.License2.Util.EvaluationUtil : object {
    [ObsoleteAttribute("You ain't got a valid BVS at runtime, take the semver of your product package instead.")]
public static Guid MakeEvaluationGuid(Guid seed, BuildVersionSuffix version);
    public static Guid MakeEvaluationGuid(Guid seed, JetSemanticVersion version);
    public static Guid MakeEvaluationGuid(Guid seed, IApplicationPackage apppkg);
}
public class JetBrains.Application.License2.Util.FieldAccess : object {
    private FieldInfo myFieldInfo;
    public string Name { get; }
    public Type Type { get; }
    public FieldAccess(FieldInfo fieldInfo);
    public sealed virtual string get_Name();
    public sealed virtual Type get_Type();
    public sealed virtual object GetValue(object instance);
    public sealed virtual void SetValue(object instance, object value);
}
public interface JetBrains.Application.License2.Util.IPropertyAccess {
    public string Name { get; }
    public Type Type { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type get_Type();
    public abstract virtual object GetValue(object instance);
    public abstract virtual void SetValue(object instance, object value);
}
public class JetBrains.Application.License2.Util.JsonLikeSerializer : object {
    private char myLPar;
    private char myRPar;
    private char myComma;
    private char myColon;
    private List`1<Func`2<Type, TypeConverter>> myConverterFunctions;
    private List`1<Func`2<Type, IEnumerable`1<IPropertyAccess>>> myGetPropertyAccessFunctions;
    private bool myIsEncrypted;
    public static Func`2<Type, IEnumerable`1<IPropertyAccess>> PROPERTIES_ACCESS;
    public static Func`2<Type, IEnumerable`1<IPropertyAccess>> FIELDS_ACCESS;
    [CompilerGeneratedAttribute]
private static Func`2<Type, TypeConverter> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Type> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<Type, IEnumerable`1<IPropertyAccess>> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<Type, IEnumerable`1<IPropertyAccess>> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, bool> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, PropertyAccess> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<FieldInfo, FieldAccess> CS$<>9__CachedAnonymousMethodDelegate22;
    public JsonLikeSerializer(bool isEncrypted);
    public JsonLikeSerializer(char lPar, char rPar, char comma, char colon, bool isEncrypted);
    private static JsonLikeSerializer();
    private ICollection`1<IPropertyAccess> GetPropertyAccess(Type type);
    public JsonLikeSerializer AddTypeConverter(Func`2<Type, TypeConverter> converter);
    public JsonLikeSerializer AddPropertyAccess(Func`2<Type, IEnumerable`1<IPropertyAccess>> func);
    public void AddTypeConverter(Func`4<ITypeDescriptorContext, CultureInfo, T, string> FToString, Func`4<ITypeDescriptorContext, CultureInfo, string, T> FFromString);
    public string ObjectToString(object o);
    public T StringToOject(string value, bool ignoreEncryption);
    private object StringToOject(Type type, string value, Int32& pos);
    private static bool TryChar(string value, int pos, char expectedChar);
    private object FillObjectByEnumerable(string value, Int32& pos, object result, bool returnNullIfEmpty, Func`4<object, string, int, int> parseItem);
    private int ParseProperty(object result, string value, int pos, ICollection`1<IPropertyAccess> propertyAccess);
    private int ParseCollectionElement(object collection, Type itemType, string value, int pos);
    private static object StringToObjectByConverter(TypeConverter converter, string value);
    private static void AddItem(object result, object item, Type itemType);
    private object StringToCollection(Type type, Type itemType, string value, Int32& pos);
    private TypeConverter TryGetTypeConverter(Type t);
    private static Type IsGenericIEnumerable(Type type);
    private static Type TryGetGenericICollection(Type type);
    private static Type DoesImplementGenericIEnumerable(Type type);
    private StringBuilder AppendObject(object o, StringBuilder result);
    private StringBuilder AppendEnumerable(IEnumerable items, Action`2<T, StringBuilder> appendItem, StringBuilder result);
    [CompilerGeneratedAttribute]
private static TypeConverter <.ctor>b__2(Type type);
    [CompilerGeneratedAttribute]
private static Type <DoesImplementGenericIEnumerable>b__13(Type iface);
    [CompilerGeneratedAttribute]
private void <AppendObject>b__15(object item, StringBuilder sb);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IPropertyAccess> <.cctor>b__19(Type type);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IPropertyAccess> <.cctor>b__1c(Type type);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__1a(PropertyInfo info);
    [CompilerGeneratedAttribute]
private static PropertyAccess <.cctor>b__1b(PropertyInfo info);
    [CompilerGeneratedAttribute]
private static FieldAccess <.cctor>b__1d(FieldInfo info);
}
public class JetBrains.Application.License2.Util.PropertyAccess : object {
    private PropertyInfo myPropertyInfo;
    public string Name { get; }
    public Type Type { get; }
    public PropertyAccess(PropertyInfo propertyInfo);
    public sealed virtual string get_Name();
    public sealed virtual Type get_Type();
    public sealed virtual object GetValue(object instance);
    public sealed virtual void SetValue(object instance, object value);
}
public enum JetBrains.Application.Lifecycle : Enum {
    public int value__;
    public static Lifecycle Container;
    public static Lifecycle DemandReclaimable;
    public static Lifecycle OneCall;
    public static Lifecycle Demand;
    public static Lifecycle Deferred;
}
[ExtensionAttribute]
public static class JetBrains.Application.Logging.ILoggerShellEx : object {
    [ExtensionAttribute]
public static void WhenEnabled(ILogger logger, Lifetime lifetime, LoggingLevel level, IThreading threading, Action`1<Lifetime> action);
    [ExtensionAttribute]
public static void WhenTraceEnabled(ILogger logger, Lifetime lifetime, IThreading threading, Action`1<Lifetime> action);
    [ExtensionAttribute]
public static void WhenVerboseEnabled(ILogger logger, Lifetime lifetime, IThreading threading, Action`1<Lifetime> action);
}
public static class JetBrains.Application.Logging.ShellLoggerConfiguration : object {
    public static string LogConfigurationFileName;
    private static string LogConfigurationEnvironmentVariable;
    public static FileSystemPath LoggerConfigurationLocation(HostInfo hostInfo);
    public static FileSystemPath LoggerConfigurationFolder(HostInfo hostInfo);
}
public class JetBrains.Application.ModuleZonePartCatalogFilter : object {
    [NotNullAttribute]
private JetHashSet`1<ZonePart> myActiveModuleZoneValues;
    [CanBeNullAttribute]
private CachedPartsPerZone myCachedPartsPerZone;
    private PartCatalog myCatalog;
    [CanBeNullAttribute]
private PartCatalogZoneMapping myMapping;
    private Nullable`1<PartCatalogTraitOperations> myTraits;
    private PartCatalogTraitOperations JetBrains.Application.Catalogs.Filtering.IPartCatalogFilterRequiresTraits.Traits { get; }
    public ModuleZonePartCatalogFilter(JetHashSet`1<ZonePart> zones, PartCatalog catalog);
    private sealed virtual override CollectionSource`1<PartCatalogType> JetBrains.Application.Catalogs.Filtering.IPartCatalogFilter.GetParts(CollectionSource`1<PartCatalogType> parts);
    private IEnumerable`1<PartCatalogType> GetPartsCore(CollectionSource`1<PartCatalogType> parts);
    private sealed virtual override bool JetBrains.Application.Catalogs.Filtering.IPartCatalogFilter.IsPassing(PartCatalogType part);
    private bool IsPassingFirstCall(PartCatalogType part);
    private sealed virtual override PartCatalogTraitOperations JetBrains.Application.Catalogs.Filtering.IPartCatalogFilterRequiresTraits.get_Traits();
}
public interface JetBrains.Application.Notifications.INotification {
    public LifetimeDefinition LifetimeDefinition { get; }
    public NotificationSeverity Severity { get; }
    [CanBeNullAttribute]
public Type Icon { get; }
    public string Title { get; }
    public string Body { get; }
    public DateTime ExpirationTime { get; }
    public ISimpleSignal Executed { get; }
    public ISimpleSignal Dismissed { get; }
    public abstract virtual LifetimeDefinition get_LifetimeDefinition();
    public abstract virtual NotificationSeverity get_Severity();
    public abstract virtual Type get_Icon();
    public abstract virtual string get_Title();
    public abstract virtual string get_Body();
    public abstract virtual DateTime get_ExpirationTime();
    public abstract virtual ISimpleSignal get_Executed();
    public abstract virtual ISimpleSignal get_Dismissed();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Notification settings")]
public class JetBrains.Application.Notifications.NotificationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Show warning notifications for performance issues")]
public bool ShowPerformanceNotifications;
}
public enum JetBrains.Application.Notifications.NotificationSeverity : Enum {
    public int value__;
    public static NotificationSeverity INFO;
    public static NotificationSeverity WARNING;
    public static NotificationSeverity CRITICAL;
}
[ShellComponentAttribute]
public class JetBrains.Application.Notifications.PerformanceUserNotifications : object {
    private Lifetime myLifetime;
    private UserNotifications myUserNotifications;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowPerformanceNotifications>k__BackingField;
    public IProperty`1<bool> ShowPerformanceNotifications { get; private set; }
    public PerformanceUserNotifications(Lifetime lifetime, UserNotifications userNotifications, ISettingsStore settingsStore, ProductConfigurations productConfigurations);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowPerformanceNotifications();
    [CompilerGeneratedAttribute]
private void set_ShowPerformanceNotifications(IProperty`1<bool> value);
    public void TrackPerformance(Lifetime actionLifetime, TimeSpan performanceThreshold, string title, string body);
    public T WithPerformanceNotification(TimeSpan performanceThreshold, string title, string body, Func`1<T> action);
    public void WithPerformanceNotification(TimeSpan performanceThreshold, string title, string body, Action action);
}
[ActionAttribute("Show Notifications")]
public class JetBrains.Application.Notifications.ShowUserNotificationsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Notifications.UserNotifications : object {
    private ILogger myLogger;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private CollectionEvents`1<INotification> <AllNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <ShowNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private static Comparison`1<INotification> CS$<>9__CachedAnonymousMethodDelegate2;
    public CollectionEvents`1<INotification> AllNotifications { get; private set; }
    public SimpleSignal ShowNotifications { get; private set; }
    public UserNotifications(Lifetime lifetime, ILogger logger, IThreading threading);
    [CompilerGeneratedAttribute]
public CollectionEvents`1<INotification> get_AllNotifications();
    [CompilerGeneratedAttribute]
private void set_AllNotifications(CollectionEvents`1<INotification> value);
    [CompilerGeneratedAttribute]
public SimpleSignal get_ShowNotifications();
    [CompilerGeneratedAttribute]
private void set_ShowNotifications(SimpleSignal value);
    public INotification CreateNotification(Lifetime lifetime, NotificationSeverity severity, string title, string body, Action`1<INotification> executed, Action`1<INotification> dismissed, bool closeAfterExecution, Type icon);
    public INotification CreateNotification(Lifetime lifetime, TimeSpan expirationTimeSpan, NotificationSeverity severity, string title, string body, Action`1<INotification> executed, Action`1<INotification> dismissed, bool closeAfterExecution, Type icon);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__1(INotification n1, INotification n2);
}
public class JetBrains.Application.PerformanceGuide.Impl.CompositePerformanceSwitchHandler : object {
    private ILogger myLogger;
    private ConcurrentDictionary`2<IPerformanceSwitchHandler, PerformanceSwitchValue> myHandlers;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceSwitchHandlerGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecommendedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BadValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<IPerformanceSwitchHandler, PerformanceSwitchValue>, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`3<IPerformanceSwitchHandler, PerformanceSwitchValue, PerformanceSwitchValue> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceSwitchState, PerformanceSwitchState> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceSwitchState, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`3<Lifetime, IPerformanceSwitchHandler, Task`1<PerformanceSwitchValue>> CS$<>9__CachedAnonymousMethodDelegate14;
    public string Id { get; private set; }
    public PerformanceSwitchHandlerGroup Group { get; private set; }
    public string Title { get; private set; }
    public string RecommendedValue { get; private set; }
    private string BadValue { get; private set; }
    public string SettingPath { get; private set; }
    public bool CanSetState { get; }
    public CompositePerformanceSwitchHandler(string id, string title, string settingPath, string recommendedValue, string badValue, ILogger logger, IList`1<IPerformanceSwitchHandler> handlers);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PerformanceSwitchHandlerGroup get_Group();
    [CompilerGeneratedAttribute]
private void set_Group(PerformanceSwitchHandlerGroup value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RecommendedValue();
    [CompilerGeneratedAttribute]
private void set_RecommendedValue(string value);
    [CompilerGeneratedAttribute]
private string get_BadValue();
    [CompilerGeneratedAttribute]
private void set_BadValue(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SettingPath();
    [CompilerGeneratedAttribute]
private void set_SettingPath(string value);
    public sealed virtual bool get_CanSetState();
    public sealed virtual ISignal`1<PerformanceSwitchValue> MonitorExternalStateChanges(Lifetime lifetime);
    private PerformanceSwitchValue CalculatePerformanceSwitchValue();
    private Task`1<PerformanceSwitchValue> ExecuteAllHandlersAsync(Lifetime lifetime, string taskName, Func`3<Lifetime, IPerformanceSwitchHandler, Task`1<PerformanceSwitchValue>> func);
    public sealed virtual Task`1<PerformanceSwitchValue> UpdateStateAsync(Lifetime lifetime);
    public sealed virtual Task`1<PerformanceSwitchValue> SetStateAsync(Lifetime lifetime, PerformanceSwitchState newState);
    [CompilerGeneratedAttribute]
private static bool <get_CanSetState>b__0(KeyValuePair`2<IPerformanceSwitchHandler, PerformanceSwitchValue> pair);
    [CompilerGeneratedAttribute]
private static PerformanceSwitchValue <.ctor>b__2(IPerformanceSwitchHandler h, PerformanceSwitchValue v);
    [CompilerGeneratedAttribute]
private static PerformanceSwitchState <CalculatePerformanceSwitchValue>b__9(PerformanceSwitchState s);
    [CompilerGeneratedAttribute]
private static bool <CalculatePerformanceSwitchValue>b__a(PerformanceSwitchState s);
    [CompilerGeneratedAttribute]
private static Task`1<PerformanceSwitchValue> <UpdateStateAsync>b__13(Lifetime lt, IPerformanceSwitchHandler handler);
}
[ShellComponentAttribute]
public class JetBrains.Application.PerformanceGuide.Impl.PerformanceGuide : object {
    public static string SettingsPagePid;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IThreading myThreading;
    private UserNotifications myUserNotifications;
    private OptionsManager myOptionsManager;
    private IContextBoundSettingsStoreLive mySettingsStore;
    private IDictionary`2<string, IPerformanceSwitch> mySwitches;
    private IDictionary`2<IPerformanceSwitch, LifetimeDefinition> mySwitchNotificationLifetimes;
    public IReadOnlyCollection`1<IPerformanceSwitch> Switches { get; }
    public PerformanceGuide(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, IThreading threading, UserNotifications userNotifications, OptionsManager optionsManager, IViewable`1<IPerformanceSwitchHandlerProvider> providers);
    private void LoadSwitchSettings(IPerformanceSwitch switch);
    public sealed virtual void AddSwitchHandler(Lifetime lifetime, IPerformanceSwitchHandler switchHandler);
    private void BindSwitch(Lifetime lifetime, IPerformanceSwitch performanceSwitch);
    private void OnSwitchChanged(Lifetime lifetime, IPerformanceSwitch performanceSwitch);
    private void NotifyUser(IPerformanceSwitch performanceSwitch);
    private void ClearNotification(IPerformanceSwitch performanceSwitch);
    private void ClearNotifications();
    private void OpenSettings();
    private void OnSwitchStateChangedFromOutside(IPerformanceSwitch performanceSwitch, PerformanceSwitchValue newState);
    private Task`1<PerformanceSwitchValue> SetSwitchStateAsync(Lifetime lifetime, IPerformanceSwitch performanceSwitch, PerformanceSwitchState newState);
    private void UpdateSwitchStateAsync(Lifetime lifetime, IPerformanceSwitch performanceSwitch);
    public sealed virtual IReadOnlyCollection`1<IPerformanceSwitch> get_Switches();
    public sealed virtual void RefreshSwitchesStates(Lifetime lifetime);
    [AsyncStateMachineAttribute("JetBrains.Application.PerformanceGuide.Impl.PerformanceGuide/<FixSwitches>d__29")]
[DebuggerStepThroughAttribute]
public sealed virtual void FixSwitches(IPerformanceSwitch[] switches);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime providerLifetime, IPerformanceSwitchHandlerProvider provider);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <NotifyUser>b__1a(INotification notification);
    [CompilerGeneratedAttribute]
private void <NotifyUser>b__1b(INotification notification);
}
internal class JetBrains.Application.PerformanceGuide.Impl.PerformanceSwitch : object {
    [CompilerGeneratedAttribute]
private IPerformanceSwitchHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PerformanceSwitchValue> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PerformanceSwitchHandlerBehaviour> <Behaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PerformanceSwitchConflictResolutionMode> <ConflictResolutionMode>k__BackingField;
    public IPerformanceSwitchHandler Handler { get; private set; }
    public IProperty`1<PerformanceSwitchValue> State { get; private set; }
    public IProperty`1<PerformanceSwitchHandlerBehaviour> Behaviour { get; private set; }
    public IProperty`1<PerformanceSwitchConflictResolutionMode> ConflictResolutionMode { get; private set; }
    public PerformanceSwitch(Lifetime lifetime, IPerformanceSwitchHandler handler);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceSwitchHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(IPerformanceSwitchHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PerformanceSwitchValue> get_State();
    [CompilerGeneratedAttribute]
private void set_State(IProperty`1<PerformanceSwitchValue> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PerformanceSwitchHandlerBehaviour> get_Behaviour();
    [CompilerGeneratedAttribute]
private void set_Behaviour(IProperty`1<PerformanceSwitchHandlerBehaviour> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PerformanceSwitchConflictResolutionMode> get_ConflictResolutionMode();
    [CompilerGeneratedAttribute]
private void set_ConflictResolutionMode(IProperty`1<PerformanceSwitchConflictResolutionMode> value);
}
public abstract class JetBrains.Application.PerformanceGuide.Impl.ReSharperSettingPerformanceSwitchHandlerBase : object {
    private IContextBoundSettingsStoreLive myBoundSettingsStore;
    private IThreading myThreading;
    public string Id { get; }
    public PerformanceSwitchHandlerGroup Group { get; }
    public string Title { get; }
    public string RecommendedValue { get; }
    public string SettingPath { get; }
    public bool CanSetState { get; }
    public ReSharperSettingPerformanceSwitchHandlerBase(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    public abstract virtual string get_Id();
    public sealed virtual PerformanceSwitchHandlerGroup get_Group();
    public abstract virtual string get_Title();
    public abstract virtual string get_RecommendedValue();
    public abstract virtual string get_SettingPath();
    public sealed virtual bool get_CanSetState();
    public sealed virtual ISignal`1<PerformanceSwitchValue> MonitorExternalStateChanges(Lifetime lifetime);
    protected abstract virtual PerformanceSwitchValue GetState(IContextBoundSettingsStoreLive boundSettingsStore);
    protected abstract virtual PerformanceSwitchState SetNewState(IContextBoundSettingsStoreLive boundSettingsStore, PerformanceSwitchState newState);
    protected abstract virtual SettingsEntry GetSettingsEntry(IContextBoundSettingsStoreLive boundSettingsStore);
    public sealed virtual Task`1<PerformanceSwitchValue> UpdateStateAsync(Lifetime lifetime);
    public sealed virtual Task`1<PerformanceSwitchValue> SetStateAsync(Lifetime lifetime, PerformanceSwitchState newState);
    [CompilerGeneratedAttribute]
private PerformanceSwitchValue <UpdateStateAsync>b__3();
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceGuide {
    public IReadOnlyCollection`1<IPerformanceSwitch> Switches { get; }
    public abstract virtual void AddSwitchHandler(Lifetime lifetime, IPerformanceSwitchHandler switchHandler);
    public abstract virtual IReadOnlyCollection`1<IPerformanceSwitch> get_Switches();
    public abstract virtual void RefreshSwitchesStates(Lifetime lifetime);
    public abstract virtual void FixSwitches(IPerformanceSwitch[] switches);
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceSwitch {
    [NotNullAttribute]
public IPerformanceSwitchHandler Handler { get; }
    [NotNullAttribute]
public IProperty`1<PerformanceSwitchValue> State { get; }
    [NotNullAttribute]
public IProperty`1<PerformanceSwitchHandlerBehaviour> Behaviour { get; }
    [NotNullAttribute]
public IProperty`1<PerformanceSwitchConflictResolutionMode> ConflictResolutionMode { get; }
    public abstract virtual IPerformanceSwitchHandler get_Handler();
    public abstract virtual IProperty`1<PerformanceSwitchValue> get_State();
    public abstract virtual IProperty`1<PerformanceSwitchHandlerBehaviour> get_Behaviour();
    public abstract virtual IProperty`1<PerformanceSwitchConflictResolutionMode> get_ConflictResolutionMode();
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler {
    public string Id { get; }
    public PerformanceSwitchHandlerGroup Group { get; }
    public string Title { get; }
    public string RecommendedValue { get; }
    public string SettingPath { get; }
    public bool CanSetState { get; }
    public abstract virtual string get_Id();
    public abstract virtual PerformanceSwitchHandlerGroup get_Group();
    public abstract virtual string get_Title();
    public abstract virtual string get_RecommendedValue();
    public abstract virtual string get_SettingPath();
    public abstract virtual bool get_CanSetState();
    public abstract virtual ISignal`1<PerformanceSwitchValue> MonitorExternalStateChanges(Lifetime lifetime);
    public abstract virtual Task`1<PerformanceSwitchValue> UpdateStateAsync(Lifetime lifetime);
    public abstract virtual Task`1<PerformanceSwitchValue> SetStateAsync(Lifetime lifetime, PerformanceSwitchState newState);
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandlerProvider {
    public ISimpleSignal HandlersMightHaveChanged { get; }
    public abstract virtual IEnumerable`1<IPerformanceSwitchHandler> GetHandlers();
    public abstract virtual ISimpleSignal get_HandlersMightHaveChanged();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "PerformanceGuide")]
public class JetBrains.Application.PerformanceGuide.PerformanceGuideSettings : object {
    [SettingsIndexedEntryAttribute("How live the switch is")]
public IIndexedEntry`2<string, PerformanceSwitchHandlerBehaviour> SwitchBehaviour;
    [SettingsIndexedEntryAttribute("How switch behaves when conflict found")]
public IIndexedEntry`2<string, PerformanceSwitchConflictResolutionMode> SwitchConflictResolutionMode;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchConflictResolutionMode : Enum {
    public int value__;
    public static PerformanceSwitchConflictResolutionMode DO_NOTHING;
    public static PerformanceSwitchConflictResolutionMode AUTO_FIX;
    public static PerformanceSwitchConflictResolutionMode NOTIFY;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchHandlerBehaviour : Enum {
    public int value__;
    public static PerformanceSwitchHandlerBehaviour DO_NOTHING;
    public static PerformanceSwitchHandlerBehaviour LIVE_MONITOR;
    public static PerformanceSwitchHandlerBehaviour CHECK_ON_START;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchHandlerGroup : Enum {
    public int value__;
    public static PerformanceSwitchHandlerGroup RESHARPER;
    public static PerformanceSwitchHandlerGroup VISUAL_STUDIO;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchState : Enum {
    public int value__;
    public static PerformanceSwitchState NONE;
    public static PerformanceSwitchState OK;
    public static PerformanceSwitchState NOT_OK;
    public static PerformanceSwitchState FAILED_TO_OBTAIN;
    public static PerformanceSwitchState CHECKING;
    public static PerformanceSwitchState SETTING_STATE;
}
public class JetBrains.Application.PerformanceGuide.PerformanceSwitchValue : object {
    [CompilerGeneratedAttribute]
private PerformanceSwitchState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentValue>k__BackingField;
    public PerformanceSwitchState State { get; private set; }
    public string CurrentValue { get; private set; }
    public PerformanceSwitchValue(PerformanceSwitchState state, string currentValue);
    [CompilerGeneratedAttribute]
public PerformanceSwitchState get_State();
    [CompilerGeneratedAttribute]
private void set_State(PerformanceSwitchState value);
    [CompilerGeneratedAttribute]
public string get_CurrentValue();
    [CompilerGeneratedAttribute]
private void set_CurrentValue(string value);
    protected bool Equals(PerformanceSwitchValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PerformanceSwitchValue left, PerformanceSwitchValue right);
    public static bool op_Inequality(PerformanceSwitchValue left, PerformanceSwitchValue right);
    public virtual string ToString();
}
public interface JetBrains.Application.PerformanceTracking.IPerformanceTracking {
    public abstract virtual List`1<Report> PopResults();
    public abstract virtual void RecordValue(string actionId, double value);
    public abstract virtual void TrackActionRunDuration(string actionId, Action action);
}
[ShellComponentAttribute]
public class JetBrains.Application.PerformanceTracking.PerformanceTracking : object {
    private List`1<Report> _results;
    public sealed virtual void TrackActionRunDuration(string actionId, Action action);
    public sealed virtual void RecordValue(string actionId, double value);
    public sealed virtual List`1<Report> PopResults();
    private void Log(string result);
}
public class JetBrains.Application.PerformanceTracking.PerformanceTrackingCookie : object {
    private Stopwatch myStopwatch;
    private IPerformanceTracking myPerformanceTracking;
    private string myActionId;
    public PerformanceTrackingCookie(IComponentContainer componentContainer, string actionId);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.PerformanceTracking.Report : object {
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public string ActionId { get; private set; }
    public double Value { get; private set; }
    public Report(string actionId, double val);
    [CompilerGeneratedAttribute]
public string get_ActionId();
    [CompilerGeneratedAttribute]
private void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
}
internal class JetBrains.Application.PersistentMap.CachingEnumerator`2 : object {
    private IKeyValueEnumerator`2<TKey, TValue> mySourceEnumerator;
    private IDictionaryBasedCache`2<TKey, TValue> myCache;
    private object System.Collections.IEnumerator.Current { get; }
    private TKey System.Collections.Generic.IEnumerator<TKey>.Current { get; }
    public KeyValuePair`2<TKey, TValue> Current { get; }
    public TKey CurrentKey { get; }
    public TValue CurrentValue { get; }
    public CachingEnumerator`2(IKeyValueEnumerator`2<TKey, TValue> sourceEnumerator, IDictionaryBasedCache`2<TKey, TValue> cache);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override TKey System.Collections.Generic.IEnumerator<TKey>.get_Current();
    public sealed virtual KeyValuePair`2<TKey, TValue> get_Current();
    public sealed virtual TKey get_CurrentKey();
    public sealed virtual TValue get_CurrentValue();
    public sealed virtual void RemoveCurrent();
    public sealed virtual T ReinterprentCastValue(Func`2<RawValue, T> valueMarshaller);
    public sealed virtual void Dispose();
}
[ShellComponentAttribute]
public class JetBrains.Application.PersistentMap.DbDriverManager : object {
    public virtual IKeyValueDbDriver GetDriver();
}
public enum JetBrains.Application.PersistentMap.DbErrorDuringCreationAction : Enum {
    public int value__;
    public static DbErrorDuringCreationAction Exception;
    public static DbErrorDuringCreationAction Null;
    public static DbErrorDuringCreationAction ClearAndRetry;
}
public class JetBrains.Application.PersistentMap.DbException : Exception {
    [StringFormatMethodAttribute("str")]
public DbException(string str, Object[] p);
}
public enum JetBrains.Application.PersistentMap.DbMutexNotTakenAction : Enum {
    public int value__;
    public static DbMutexNotTakenAction OpenIndexed;
    public static DbMutexNotTakenAction OpenSecondaryUrl;
    public static DbMutexNotTakenAction Exception;
    public static DbMutexNotTakenAction Null;
}
public class JetBrains.Application.PersistentMap.DbOpenParams : object {
    public static string DefaultPrefix;
    public static string DefaultSubdir;
    private string myUrl;
    [CompilerGeneratedAttribute]
private ITaskHost <TaskHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subfolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParanoidChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private DbErrorDuringCreationAction <DbErrorDuringCreationAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidityCheckFailAction <ValidationFailAction>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Pair`2<Type, int>> <PolymorphicTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TakeMutex>k__BackingField;
    [CompilerGeneratedAttribute]
private DbMutexNotTakenAction <MutexNotTakenAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryUrl>k__BackingField;
    public string Url { get; }
    public ITaskHost TaskHost { get; private set; }
    [CanBeNullAttribute]
public string Subfolder { get; public set; }
    public bool ParanoidChecks { get; private set; }
    public DbErrorDuringCreationAction DbErrorDuringCreationAction { get; private set; }
    public string ExpectedVersion { get; private set; }
    public ValidityCheckFailAction ValidationFailAction { get; private set; }
    [CanBeNullAttribute]
public IEnumerable`1<Pair`2<Type, int>> PolymorphicTypes { get; private set; }
    public bool TakeMutex { get; private set; }
    public DbMutexNotTakenAction MutexNotTakenAction { get; private set; }
    [NotNullAttribute]
public string SecondaryUrl { get; private set; }
    private DbOpenParams(string url, ITaskHost taskHost);
    public string get_Url();
    [CompilerGeneratedAttribute]
public ITaskHost get_TaskHost();
    [CompilerGeneratedAttribute]
private void set_TaskHost(ITaskHost value);
    [CompilerGeneratedAttribute]
public string get_Subfolder();
    [CompilerGeneratedAttribute]
public void set_Subfolder(string value);
    [CompilerGeneratedAttribute]
public bool get_ParanoidChecks();
    [CompilerGeneratedAttribute]
private void set_ParanoidChecks(bool value);
    [CompilerGeneratedAttribute]
public DbErrorDuringCreationAction get_DbErrorDuringCreationAction();
    [CompilerGeneratedAttribute]
private void set_DbErrorDuringCreationAction(DbErrorDuringCreationAction value);
    [CompilerGeneratedAttribute]
public string get_ExpectedVersion();
    [CompilerGeneratedAttribute]
private void set_ExpectedVersion(string value);
    [CompilerGeneratedAttribute]
public ValidityCheckFailAction get_ValidationFailAction();
    [CompilerGeneratedAttribute]
private void set_ValidationFailAction(ValidityCheckFailAction value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Pair`2<Type, int>> get_PolymorphicTypes();
    [CompilerGeneratedAttribute]
private void set_PolymorphicTypes(IEnumerable`1<Pair`2<Type, int>> value);
    [CompilerGeneratedAttribute]
public bool get_TakeMutex();
    [CompilerGeneratedAttribute]
private void set_TakeMutex(bool value);
    [CompilerGeneratedAttribute]
public DbMutexNotTakenAction get_MutexNotTakenAction();
    [CompilerGeneratedAttribute]
private void set_MutexNotTakenAction(DbMutexNotTakenAction value);
    [CompilerGeneratedAttribute]
public string get_SecondaryUrl();
    [CompilerGeneratedAttribute]
private void set_SecondaryUrl(string value);
    public static DbOpenParams Create(FileSystemPath path, ITaskHost taskHost);
    public static DbOpenParams Create(string url, ITaskHost taskHost);
    public DbOpenParams WithDbOpenError(DbErrorDuringCreationAction action);
    public DbOpenParams WithValidityChecks(string expectedVersion, IEnumerable`1<Pair`2<Type, int>> polymorphicTypes, ValidityCheckFailAction versionMismatchAction);
    public DbOpenParams WithMutexAcquire(DbMutexNotTakenAction mutexNotTakenAction, string secondaryUrl);
    public DbOpenParams WithParanoidChecks();
    public DbOpenParams WithSubfolder(string subfolder);
    public virtual string ToString();
}
public class JetBrains.Application.PersistentMap.DbOpenResult : object {
    [CompilerGeneratedAttribute]
private IKeyValueDb <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clear>k__BackingField;
    public IKeyValueDb Db { get; private set; }
    public string Url { get; private set; }
    public bool Clear { get; private set; }
    public DbOpenResult(IKeyValueDb db, string url, bool cleared);
    [CompilerGeneratedAttribute]
public IKeyValueDb get_Db();
    [CompilerGeneratedAttribute]
private void set_Db(IKeyValueDb value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_Clear();
    [CompilerGeneratedAttribute]
private void set_Clear(bool value);
}
public interface JetBrains.Application.PersistentMap.IAutocommitTransaction {
    public int BatchSizeThreshold { get; public set; }
    public int AllocatedBytesThreshold { get; public set; }
    public TimeSpan AutocommitTime { get; public set; }
    public Signal`1<Pair`2<long, bool>> OnCommitFinished { get; }
    public abstract virtual int get_BatchSizeThreshold();
    public abstract virtual void set_BatchSizeThreshold(int value);
    public abstract virtual int get_AllocatedBytesThreshold();
    public abstract virtual void set_AllocatedBytesThreshold(int value);
    public abstract virtual TimeSpan get_AutocommitTime();
    public abstract virtual void set_AutocommitTime(TimeSpan value);
    public abstract virtual IDisposable AtomicCookie();
    public abstract virtual Signal`1<Pair`2<long, bool>> get_OnCommitFinished();
}
public interface JetBrains.Application.PersistentMap.IKeyValueDb {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    public KeyValueDbStatus Status { get; }
    public bool IsSnapshot { get; }
    public bool RemoveOnClose { get; public set; }
    public IAutocommitTransaction AutocommitTransaction { get; }
    [NotNullAttribute]
public abstract virtual IKeyValueDb OpenSnapshot(Lifetime lf);
    [NotNullAttribute]
public abstract virtual IKeyValueDbTransaction StartTransaction(Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IPersistentSortedMap`2<TKey, TValue> GetMap(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller, IUnsafeMarshaller`1<TValue> valueMarshaller, bool verifyTypes);
    [NotNullAttribute]
public abstract virtual ICollection`1<TKey> GetAsKeyCollection(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller);
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual KeyValueDbStatus get_Status();
    public abstract virtual bool get_IsSnapshot();
    public abstract virtual bool get_RemoveOnClose();
    public abstract virtual void set_RemoveOnClose(bool value);
    public abstract virtual IAutocommitTransaction get_AutocommitTransaction();
}
public interface JetBrains.Application.PersistentMap.IKeyValueDbDriver {
    public abstract virtual DbOpenResult OpenDb(Lifetime lifetime, DbOpenParams dbParams);
}
public interface JetBrains.Application.PersistentMap.IKeyValueDbTransaction {
    public abstract virtual IKeyValueDb GetDb();
    public abstract virtual void Clear();
    public abstract virtual void Rollback();
}
public interface JetBrains.Application.PersistentMap.IKeyValueEnumerator`2 {
    public abstract virtual void RemoveCurrent();
    public abstract virtual T ReinterprentCastValue(Func`2<RawValue, T> valueMarshaller);
}
public interface JetBrains.Application.PersistentMap.IPersistentSortedMap`2 {
    public abstract virtual IKeyValueDb GetDb();
    public abstract virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder);
    public abstract virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder, TKey fromKey);
    public abstract virtual IPersistentSortedMap`2<TKey, TValue> GetInSnapshot(IKeyValueDb snapshot);
    public abstract virtual IKeyValueEnumerator`2<TKey, TValue> GetCleaningEnumerator(Func`2<TKey, bool> cleanerPredicate);
    public abstract virtual void AddRaw(TKey key, RawValue value);
    public abstract virtual long SizeInBytes();
}
public interface JetBrains.Application.PersistentMap.ITransactionBase {
    public abstract virtual long Add(IPersistentSortedMap`2<TKey, TValue> map, TKey key, TValue value);
    public abstract virtual long Remove(IPersistentSortedMap`2<TKey, TValue> map, TKey key);
    public abstract virtual long Remove(ICollection`1<TKey> collection, TKey key);
    public abstract virtual long AddRaw(IPersistentSortedMap`2<TKey, TValue> map, TKey key, RawValue value);
    public abstract virtual long RemoveRaw(RawValue mapSidAndKey);
    public abstract virtual void Commit();
}
public enum JetBrains.Application.PersistentMap.KeyValueDbStatus : Enum {
    public int value__;
    public static KeyValueDbStatus Ready;
    public static KeyValueDbStatus Closed;
    public static KeyValueDbStatus Corrupted;
}
internal class JetBrains.Application.PersistentMap.LevelDb : SafeDisposable {
    private object myLock;
    private static ILogger ourLogger;
    private FileSystemPath myDbDir;
    private string mySubfolder;
    internal IntPtr DbPtr;
    internal IntPtr OptionsPtr;
    internal IntPtr ReadOptionsPtr;
    internal IntPtr WriteOptionsPtr;
    internal IntPtr SnapshotPtr;
    public static LevelDbMapSid SchemaSid;
    public static LevelDbMapSid PropertiesSid;
    public static LevelDbMapSid PolymorphicTypesSid;
    private IPersistentSortedMap`2<string, LevelDbMapSchema> mySchema;
    private IPersistentSortedMap`2<string, string> myProperties;
    private IPersistentSortedMap`2<string, int> myPolymorphicTypes;
    private LevelDbMapSid myNextAvailableSid;
    internal Lifetime AsyncOperationsLifetime;
    private IAutocommitTransaction myAutocommitTransaction;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOnClose>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<LevelDbMapSid, KeyValuePair`2<string, LevelDbMapSchema>, LevelDbMapSid> CS$<>9__CachedAnonymousMethodDelegate1;
    public Lifetime Lifetime { get; private set; }
    public bool RemoveOnClose { get; public set; }
    public IAutocommitTransaction AutocommitTransaction { get; }
    private FileSystemPath ActualDir { get; }
    internal IPersistentSortedMap`2<string, string> Properties { get; }
    internal IPersistentSortedMap`2<string, int> PolymorphicTypes { get; }
    public KeyValueDbStatus Status { get; }
    public bool IsSnapshot { get; }
    protected bool WarnOnSecondDispose { get; }
    internal LevelDb(Lifetime lifetime, ITaskHost taskHost, string dbDir, bool paranoidChecks, string subfolder);
    private LevelDb(Lifetime lifetime, LevelDb map, IntPtr snapshotPtr);
    private static LevelDb();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RemoveOnClose();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoveOnClose(bool value);
    public sealed virtual IAutocommitTransaction get_AutocommitTransaction();
    private FileSystemPath get_ActualDir();
    private void InitPtrs(bool paranoidChecks);
    internal IPersistentSortedMap`2<string, string> get_Properties();
    internal IPersistentSortedMap`2<string, int> get_PolymorphicTypes();
    private void InitSchema();
    public sealed virtual KeyValueDbStatus get_Status();
    public sealed virtual IKeyValueDb OpenSnapshot(Lifetime lifetime);
    public sealed virtual IKeyValueDbTransaction StartTransaction(Lifetime lifetime);
    private static string Fqn(Type type);
    public sealed virtual IPersistentSortedMap`2<TKey, TValue> GetMap(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller, IUnsafeMarshaller`1<TValue> valueMarshaller, bool verifyTypes);
    public sealed virtual ICollection`1<TKey> GetAsKeyCollection(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller);
    private bool CompareFqn(string type1, string type2);
    public sealed virtual bool get_IsSnapshot();
    protected virtual bool get_WarnOnSecondDispose();
    protected virtual void DisposeUnmanagedResources();
    [CompilerGeneratedAttribute]
private static LevelDbMapSid <InitSchema>b__0(LevelDbMapSid res, KeyValuePair`2<string, LevelDbMapSchema> p);
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__3();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__4();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__5();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__6();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__7();
}
internal class JetBrains.Application.PersistentMap.LevelDbAutocommitTransaction : LevelDbTransaction {
    public static int DefaultEntitiesCountThreshold;
    public static int DefaultAllocatedBytesThreshold;
    public static int TotalAllocatedBytesThreshold;
    private SingleThreadExecutorView myExecutor;
    private FreeThreadedGroupingEvent myGroupingEvent;
    public TimeSpan DefaultAutocommitTime;
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) AtomicyLevel;
    private IDisposable myAtomicCookie;
    private int myTotalAllocatedBytesInQueue;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private Signal`1<Pair`2<long, bool>> <OnCommitFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchSizeThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AllocatedBytesThreshold>k__BackingField;
    public Signal`1<Pair`2<long, bool>> OnCommitFinished { get; private set; }
    public int BatchSizeThreshold { get; public set; }
    public int AllocatedBytesThreshold { get; public set; }
    public TimeSpan AutocommitTime { get; public set; }
    internal LevelDbAutocommitTransaction(LevelDb db, ITaskHost taskHost);
    [CompilerGeneratedAttribute]
public sealed virtual Signal`1<Pair`2<long, bool>> get_OnCommitFinished();
    [CompilerGeneratedAttribute]
private void set_OnCommitFinished(Signal`1<Pair`2<long, bool>> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_BatchSizeThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BatchSizeThreshold(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AllocatedBytesThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllocatedBytesThreshold(int value);
    public sealed virtual TimeSpan get_AutocommitTime();
    public sealed virtual void set_AutocommitTime(TimeSpan value);
    public sealed virtual IDisposable AtomicCookie();
    protected virtual void TransactionContentChanged(int allocationBytesDiff, int entitiesDiff);
    private void FireCommit(long version, bool sync);
    private void Commit0(IntPtr transactionPtr, long version, int allocatedBytesInTransaction);
    public virtual void Commit();
    protected virtual void DisposeUnmanagedResources();
    public virtual void Clear();
    public virtual void Rollback();
    [CompilerGeneratedAttribute]
private void <.ctor>b__b();
}
public class JetBrains.Application.PersistentMap.LevelDbDriver : object {
    private static string LevelDbVersion;
    private static string LevelDbLockFilename;
    public static LevelDbDriver Instance;
    private ILogger myLogger;
    [NotNullAttribute]
public static RelativePath MutexFileName;
    [CompilerGeneratedAttribute]
private static Func`2<DirectoryEntryData, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<Type, int>, KeyValuePair`2<string, int>> CS$<>9__CachedAnonymousMethodDelegate3;
    private static LevelDbDriver();
    private static bool IsValidLocation(FileSystemPath path);
    public sealed virtual DbOpenResult OpenDb(Lifetime lifetime, DbOpenParams dbParams);
    private void OpenDb_WithMutex(Lifetime lifetime, DbOpenParams dbParams, String& url);
    private bool OpenDb_TryAcquireMutex(Lifetime lifetime, FileSystemPath dirdb);
    private DbOpenResult CheckOpenDb(string url, LevelDb db, DbOpenParams dbParams, bool cleared, SequentialLifetimes seqlf);
    private static string TypeToString(Type t);
    private void SetPolymorphicTypes(IPersistentSortedMap`2<string, int> map, IEnumerable`1<KeyValuePair`2<string, int>> expected);
    private void ComparePolymorphicTypes(IDictionary`2<string, int> expected, IPersistentSortedMap`2<string, int> current, Boolean& polymorphicCheckFail, Boolean& writeNewPolymorphocTypes);
    internal static Cookie NewWriterCookie(LevelDbMapSid mapUniqueId);
    [CompilerGeneratedAttribute]
private static bool <OpenDb>b__0(DirectoryEntryData child);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, int> <CheckOpenDb>b__2(Pair`2<Type, int> p);
}
[SuppressUnmanagedCodeSecurityAttribute]
public static class JetBrains.Application.PersistentMap.LevelDbInterop : object {
    private static string LevelDbDll;
    private static bool _inited;
    private static leveldb_open_delegate leveldb_open;
    public static leveldb_close_delegate leveldb_close;
    public static leveldb_put_delegate leveldb_put;
    public static leveldb_delete_delegate leveldb_delete;
    public static leveldb_write_delegate leveldb_write;
    public static leveldb_get_delegate leveldb_get;
    public static leveldb_create_iterator_delegate leveldb_create_iterator;
    public static leveldb_create_snapshot_delegate leveldb_create_snapshot;
    public static leveldb_release_snapshot_delegate leveldb_release_snapshot;
    public static leveldb_property_value_delegate leveldb_property_value;
    public static leveldb_approximate_sizes_delegate leveldb_approximate_sizes;
    public static leveldb_destroy_db_delegate leveldb_destroy_db;
    public static leveldb_repair_db_delegate leveldb_repair_db;
    public static leveldb_iter_destroy_delegate leveldb_iter_destroy;
    public static leveldb_iter_valid_delegate leveldb_iter_valid;
    public static leveldb_iter_seek_to_first_delegate leveldb_iter_seek_to_first;
    public static leveldb_iter_seek_to_last_delegate leveldb_iter_seek_to_last;
    public static leveldb_iter_seek_delegate leveldb_iter_seek;
    public static leveldb_iter_next_delegate leveldb_iter_next;
    public static leveldb_iter_prev_delegate leveldb_iter_prev;
    public static leveldb_iter_key_delegate leveldb_iter_key;
    public static leveldb_iter_value_delegate leveldb_iter_value;
    public static leveldb_iter_get_error_delegate leveldb_iter_get_error;
    public static leveldb_writebatch_create_delegate leveldb_writebatch_create;
    public static leveldb_writebatch_destroy_delegate leveldb_writebatch_destroy;
    public static leveldb_writebatch_clear_delegate leveldb_writebatch_clear;
    public static leveldb_writebatch_put_delegate leveldb_writebatch_put;
    public static leveldb_writebatch_delete_delegate leveldb_writebatch_delete;
    public static leveldb_options_create_delegate leveldb_options_create;
    public static leveldb_options_destroy_delegate leveldb_options_destroy;
    public static leveldb_options_set_comparator_delegate leveldb_options_set_comparator;
    public static leveldb_options_set_create_if_missing_delegate leveldb_options_set_create_if_missing;
    public static leveldb_options_set_error_if_exists_delegate leveldb_options_set_error_if_exists;
    public static leveldb_options_set_paranoid_checks_delegate leveldb_options_set_paranoid_checks;
    public static leveldb_options_set_env_delegate leveldb_options_set_env;
    public static leveldb_options_set_info_log_delegate leveldb_options_set_info_log;
    public static leveldb_options_set_write_buffer_size_delegate leveldb_options_set_write_buffer_size;
    public static leveldb_options_set_max_open_files_delegate leveldb_options_set_max_open_files;
    public static leveldb_options_set_cache_delegate leveldb_options_set_cache;
    public static leveldb_options_set_block_size_delegate leveldb_options_set_block_size;
    public static leveldb_options_set_block_restart_interval_delegate leveldb_options_set_block_restart_interval;
    public static leveldb_options_set_compression_delegate leveldb_options_set_compression;
    public static leveldb_comparator_destroy_delegate leveldb_comparator_destroy;
    public static leveldb_readoptions_create_delegate leveldb_readoptions_create;
    public static leveldb_readoptions_destroy_delegate leveldb_readoptions_destroy;
    public static leveldb_readoptions_set_verify_checksums_delegate leveldb_readoptions_set_verify_checksums;
    public static leveldb_readoptions_set_fill_cache_delegate leveldb_readoptions_set_fill_cache;
    public static leveldb_readoptions_set_snapshot_delegate leveldb_readoptions_set_snapshot;
    public static leveldb_writeoptions_create_delegate leveldb_writeoptions_create;
    public static leveldb_writeoptions_destroy_delegate leveldb_writeoptions_destroy;
    public static leveldb_writeoptions_set_sync_delegate leveldb_writeoptions_set_sync;
    public static leveldb_cache_create_lru_delegate leveldb_cache_create_lru;
    public static leveldb_cache_destroy_delegate leveldb_cache_destroy;
    public static leveldb_create_default_env_delegate leveldb_create_default_env;
    public static leveldb_env_destroy_delegate leveldb_env_destroy;
    public static leveldb_free_delegate leveldb_free;
    private static LevelDbInterop();
    public static IntPtr leveldb_open_database(IntPtr options, string name, Byte** errptr);
    public static void leveldb_destroy_database(IntPtr options, string name, Byte** errptr);
    public static void InitIfNecessary();
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.Application.PersistentMap.LevelDbMap`2 : object {
    internal IUnsafeMarshaller`1<TKey> KeyMarshaller;
    internal IUnsafeMarshaller`1<TValue> ValueMarshaller;
    internal LevelDb DbHandle;
    [CompilerGeneratedAttribute]
private LevelDbMapSid <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TKey, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public LevelDbMapSid Sid { get; private set; }
    internal LevelDbMap`2(IKeyValueDb db, LevelDbMapSid mapSid, IUnsafeMarshaller`1<TKey> keyMarshaller, IUnsafeMarshaller`1<TValue> valueMarshaller);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertState();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    [ThreadUnsafeAttribute]
public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    [CompilerGeneratedAttribute]
public LevelDbMapSid get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(LevelDbMapSid value);
    public sealed virtual IKeyValueDb GetDb();
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder, TKey fromKey);
    public sealed virtual IPersistentSortedMap`2<TKey, TValue> GetInSnapshot(IKeyValueDb snapshot);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetCleaningEnumerator(Func`2<TKey, bool> cleanerPredicate);
    public sealed virtual void AddRaw(TKey key, RawValue value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual long SizeInBytes();
    [CompilerGeneratedAttribute]
private static bool <Clear>b__0(TKey key);
}
internal class JetBrains.Application.PersistentMap.LevelDbMapEnumerator`2 : SafeDisposable {
    private IntPtr myIterPtr;
    private bool myStarted;
    private bool myStartKeyIsGiven;
    private LevelDbMap`2<TKey, TValue> myDict;
    private TKey myStartKey;
    private bool myReverseOrder;
    private Func`2<TKey, bool> myCleanerPredicate;
    private IAutocommitTransaction myTx;
    private UnsafeReader myReader;
    private TKey myCurrentKey;
    private object System.Collections.IEnumerator.Current { get; }
    private TKey System.Collections.Generic.IEnumerator<TKey>.Current { get; }
    public KeyValuePair`2<TKey, TValue> Current { get; }
    public TKey CurrentKey { get; }
    public TValue CurrentValue { get; }
    public int KeySizeInBytes { get; }
    public int ValueSizeInBytes { get; }
    internal LevelDbMapEnumerator`2(LevelDbMap`2<TKey, TValue> dict, TKey startKey, bool reversedOrder);
    internal LevelDbMapEnumerator`2(LevelDbMap`2<TKey, TValue> dict, bool reversedOrder, Func`2<TKey, bool> cleaner);
    private void Init();
    protected virtual void DisposeUnmanagedResources();
    public sealed virtual bool MoveNext();
    public sealed virtual void RemoveCurrent();
    public sealed virtual T ReinterprentCastValue(Func`2<RawValue, T> valueMarshaller);
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override TKey System.Collections.Generic.IEnumerator<TKey>.get_Current();
    public sealed virtual KeyValuePair`2<TKey, TValue> get_Current();
    public sealed virtual TKey get_CurrentKey();
    public sealed virtual TValue get_CurrentValue();
    public int get_KeySizeInBytes();
    public int get_ValueSizeInBytes();
}
internal class JetBrains.Application.PersistentMap.LevelDbMapSchema : object {
    internal static IUnsafeMarshaller`1<LevelDbMapSchema> Marshaller;
    [CompilerGeneratedAttribute]
private LevelDbMapSid <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyTypeFqn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueTypeFqn>k__BackingField;
    internal LevelDbMapSid Sid { get; private set; }
    internal string KeyTypeFqn { get; private set; }
    internal string ValueTypeFqn { get; private set; }
    public LevelDbMapSchema(LevelDbMapSid sid, string keyTypeFqn, string valueTypeFqn);
    private static LevelDbMapSchema();
    [CompilerGeneratedAttribute]
internal LevelDbMapSid get_Sid();
    [CompilerGeneratedAttribute]
private void set_Sid(LevelDbMapSid value);
    [CompilerGeneratedAttribute]
internal string get_KeyTypeFqn();
    [CompilerGeneratedAttribute]
private void set_KeyTypeFqn(string value);
    [CompilerGeneratedAttribute]
internal string get_ValueTypeFqn();
    [CompilerGeneratedAttribute]
private void set_ValueTypeFqn(string value);
    private static void Write(UnsafeWriter writer, LevelDbMapSchema value);
    private static LevelDbMapSchema Read(UnsafeReader reader);
}
public class JetBrains.Application.PersistentMap.LevelDbMapSid : ValueType {
    public static int Sizeof;
    private byte myValue;
    internal static LevelDbMapSid MinUserSid;
    internal static LevelDbMapSid UserSidSupremum;
    internal LevelDbMapSid(byte value);
    private static LevelDbMapSid();
    public void Write(UnsafeWriter writer);
    public static LevelDbMapSid From(UnsafeReader reader);
    public static LevelDbMapSid From(Byte* storage);
    public void Write(Byte* storage);
    public static bool op_Equality(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_Inequality(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_GreaterThanOrEqual(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_LessThanOrEqual(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_GreaterThan(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_LessThan(LevelDbMapSid left, LevelDbMapSid right);
    public LevelDbMapSid Next();
    [PureAttribute]
internal bool IsValidUserSid();
    public virtual string ToString();
    private bool Equals(LevelDbMapSid other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.Application.PersistentMap.LevelDbProjectedCollection`1 : ProjectedCollection`2<TKey, KeyValuePair`2<TKey, object>> {
    internal LevelDbMapSid Sid;
    internal IUnsafeMarshaller`1<TKey> KeyMarshaller;
    [CompilerGeneratedAttribute]
private static Func`2<TKey, KeyValuePair`2<TKey, object>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<TKey, object>, TKey> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerator`1<KeyValuePair`2<TKey, object>>, TKey> CS$<>9__CachedAnonymousMethodDelegate5;
    internal LevelDbProjectedCollection`1(IKeyValueDb db, string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller);
    public virtual bool Contains(TKey item);
    public virtual void Add(TKey item);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<TKey, object> <.ctor>b__0(TKey key);
    [CompilerGeneratedAttribute]
private static TKey <.ctor>b__1(KeyValuePair`2<TKey, object> kvpair);
    [CompilerGeneratedAttribute]
private static TKey <.ctor>b__2(IEnumerator`1<KeyValuePair`2<TKey, object>> enumerator);
}
internal class JetBrains.Application.PersistentMap.LevelDbTransaction : SafeDisposable {
    private LevelDb myDb;
    protected IntPtr TransactionPtr;
    protected long Version;
    protected bool TransactionFinished;
    protected object Lock;
    [CompilerGeneratedAttribute]
private int <EntitiesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AllocatedBytes>k__BackingField;
    protected int EntitiesCount { get; protected set; }
    protected int AllocatedBytes { get; protected set; }
    private static LevelDbTransaction();
    public LevelDbTransaction(LevelDb db, Lifetime lifetime);
    [CompilerGeneratedAttribute]
protected int get_EntitiesCount();
    [CompilerGeneratedAttribute]
protected void set_EntitiesCount(int value);
    [CompilerGeneratedAttribute]
protected int get_AllocatedBytes();
    [CompilerGeneratedAttribute]
protected void set_AllocatedBytes(int value);
    protected virtual void TransactionContentChanged(int allocationBytesDiff, int entitiesDiff);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertState();
    public sealed virtual long Remove(ICollection`1<TKey> collection, TKey key);
    public sealed virtual long RemoveRaw(RawValue rawKey);
    public virtual void Clear();
    public sealed virtual IKeyValueDb GetDb();
    protected virtual void DisposeUnmanagedResources();
    public sealed virtual long AddRaw(IPersistentSortedMap`2<TKey, TValue> map, TKey key, RawValue value);
    public sealed virtual long Add(IPersistentSortedMap`2<TKey, TValue> map, TKey key, TValue value);
    public sealed virtual long Remove(IPersistentSortedMap`2<TKey, TValue> map, TKey key);
    public virtual void Commit();
    protected void CommitNoLocks(IntPtr transactionPtr);
    public virtual void Rollback();
}
public enum JetBrains.Application.PersistentMap.OptimizationStrategy : Enum {
    public int value__;
    public static OptimizationStrategy ReadOptimized;
    public static OptimizationStrategy WriteOptimized;
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2 : object {
    private OptimizationStrategy modreq(System.Runtime.CompilerServices.IsVolatile) myOptimizationStrategy;
    private IDictionaryBasedCache`2<TKey, TValue> myCache;
    private TValue myMissingValueMarker;
    private long myLastEntryVersion;
    private long myLastCommitVersion;
    private IPersistentSortedMap`2<TKey, TValue> myMap;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myTransactionEntries;
    private IAutocommitTransaction myTransaction;
    private JetFastSemiReenterableRWLock myLock;
    [CompilerGeneratedAttribute]
private bool <UseCachingEnumerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackMissingKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TKey, string> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<TValue, string> CS$<>9__CachedAnonymousMethodDelegate5;
    public OptimizationStrategy OptimizationStrategy { get; public set; }
    public bool UseCachingEnumerator { get; public set; }
    [NotNullAttribute]
public IDictionaryBasedCache`2<TKey, TValue> Cache { get; public set; }
    public bool TrackMissingKeys { get; public set; }
    public IPersistentSortedMap`2<TKey, TValue> BackendMap { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public OptimizedPersistentSortedMap`2(Lifetime lifetime, IPersistentSortedMap`2<TKey, TValue> map, IEqualityComparer`1<TKey> keyEqualityComparer);
    public OptimizationStrategy get_OptimizationStrategy();
    public void set_OptimizationStrategy(OptimizationStrategy value);
    [CompilerGeneratedAttribute]
public bool get_UseCachingEnumerator();
    [CompilerGeneratedAttribute]
public void set_UseCachingEnumerator(bool value);
    public IDictionaryBasedCache`2<TKey, TValue> get_Cache();
    public void set_Cache(IDictionaryBasedCache`2<TKey, TValue> value);
    [CompilerGeneratedAttribute]
public bool get_TrackMissingKeys();
    [CompilerGeneratedAttribute]
public void set_TrackMissingKeys(bool value);
    private void Promote(Int64& toPromote, long newMax);
    private void Commit();
    public void Flush();
    public IPersistentSortedMap`2<TKey, TValue> get_BackendMap();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual IKeyValueDb GetDb();
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder, TKey fromKey);
    public sealed virtual IPersistentSortedMap`2<TKey, TValue> GetInSnapshot(IKeyValueDb snapshot);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetCleaningEnumerator(Func`2<TKey, bool> cleanerPredicate);
    public sealed virtual long SizeInBytes();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void AddRaw(TKey key, RawValue value);
    public sealed virtual bool Remove(TKey key);
    public void Dump(TextWriter writer, Func`2<TKey, string> renderKey, Func`2<TValue, string> renderValue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Pair`2<long, bool> versionAndState);
    [CompilerGeneratedAttribute]
private static string <Dump>b__2(TKey x);
    [CompilerGeneratedAttribute]
private static string <Dump>b__3(TValue x);
}
internal static class JetBrains.Application.PersistentMap.PersistentDbHelpers : object {
    public static void ThrowDbExceptionIfNeccessary(Byte* errmsg, Byte* memoryToFree);
    private static string Bytes2AnsiStr(Byte* bytes);
}
[ExtensionAttribute]
public static class JetBrains.Application.PersistentMap.PersistentSortedMapExtensions : object {
    [PureAttribute]
[ExtensionAttribute]
[NotNullAttribute]
public static OptimizedPersistentSortedMap`2<TKey, TValue> ToOptimized(IPersistentSortedMap`2<TKey, TValue> value, Lifetime lifetime, IEqualityComparer`1<TKey> comparer);
    [ObsoleteAttribute]
[ExtensionAttribute]
public static void ToOptimized(OptimizedPersistentSortedMap`2<TKey, TValue> value, Lifetime lifetime, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static void Clear(IPersistentSortedMap`2<TKey, TValue> map, Func`2<TKey, bool> keyPredicate, Action`1<TKey> onRemove);
}
[MeansImplicitUseAttribute("8")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.PersistentMap.PolymorphicMarshallerAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private int <HashMixin>k__BackingField;
    public int HashMixin { get; private set; }
    public PolymorphicMarshallerAttribute(int mixin);
    [CompilerGeneratedAttribute]
public int get_HashMixin();
    [CompilerGeneratedAttribute]
private void set_HashMixin(int value);
}
[DefaultMemberAttribute("Item")]
[ShellComponentAttribute]
public class JetBrains.Application.PersistentMap.PolymorphicMarshallers : object {
    public static int NullId;
    private static string ReadDelegateField;
    private static string WriteDelegateField;
    private IDictionary`2<int, ReadDelegate`1<object>> myReaders;
    private IDictionary`2<Type, Pair`2<int, WriteDelegate`1<object>>> myWriters;
    [CompilerGeneratedAttribute]
private static PolymorphicMarshallers <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Type, Pair`2<int, WriteDelegate`1<object>>>, Pair`2<Type, int>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate7;
    public static PolymorphicMarshallers Instance { get; private set; }
    public Pair`2<int, WriteDelegate`1<object>> Item { get; }
    public ReadDelegate`1<object> Item { get; }
    public IEnumerable`1<Pair`2<Type, int>> TypeSids { get; }
    public PolymorphicMarshallers(Lifetime lifetime, ShellPartCatalogSet catalogSet);
    [CompilerGeneratedAttribute]
public static PolymorphicMarshallers get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(PolymorphicMarshallers value);
    private int CalcHash(Type type, PolymorphicMarshallerAttribute attr);
    public Pair`2<int, WriteDelegate`1<object>> get_Item(Type clazz);
    public ReadDelegate`1<object> get_Item(int typeHash);
    public IEnumerable`1<Pair`2<Type, int>> get_TypeSids();
    private void Error(string arg, Type t);
    [CompilerGeneratedAttribute]
private static Pair`2<Type, int> <get_TypeSids>b__0(KeyValuePair`2<Type, Pair`2<int, WriteDelegate`1<object>>> p);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3();
}
[ShellComponentAttribute]
public class JetBrains.Application.PersistentMap.ShellCaches : object {
    private static string ShellCachesVersion;
    private object myLock;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private DbDriverManager myDbDriverManager;
    private PolymorphicMarshallers myPolymorphicMarshallers;
    private ITaskHost myTaskHost;
    private IApplicationHost myApplicationHost;
    private IKeyValueDb modreq(System.Runtime.CompilerServices.IsVolatile) myDb;
    private FileSystemPath myLocation;
    protected bool StoreInAppdata { get; }
    protected bool PersistCaches { get; }
    public FileSystemPath Location { get; }
    public IKeyValueDb Db { get; }
    public ShellCaches(Lifetime lifetime, ILogger logger, DbDriverManager dbDriverManager, IApplicationHost applicationHost, PolymorphicMarshallers polymorphicMarshallers, IShellLocks locks);
    private void LazyInit();
    protected virtual bool get_StoreInAppdata();
    protected virtual bool get_PersistCaches();
    private IKeyValueDb CreateDb();
    public FileSystemPath get_Location();
    public IKeyValueDb get_Db();
}
internal enum JetBrains.Application.PersistentMap.TransactionEntryState : Enum {
    public int value__;
    public static TransactionEntryState Removed;
    public static TransactionEntryState Added;
}
[ExtensionAttribute]
public static class JetBrains.Application.PersistentMap.UnsafeMarshallersEx : object {
    [ExtensionAttribute]
public static void WritePolymorphic(UnsafeWriter writer, object value);
    [ExtensionAttribute]
public static T ReadPolymorphic(UnsafeReader reader);
}
public enum JetBrains.Application.PersistentMap.ValidityCheckFailAction : Enum {
    public int value__;
    public static ValidityCheckFailAction Clear;
    public static ValidityCheckFailAction Exception;
    public static ValidityCheckFailAction Null;
}
internal class JetBrains.Application.PersistentMap.ValueWithVersionId`1 : object {
    [CompilerGeneratedAttribute]
private TransactionEntryState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    internal TransactionEntryState State { get; private set; }
    internal long Version { get; private set; }
    internal TValue Value { get; private set; }
    public ValueWithVersionId`1(TransactionEntryState state, long version, TValue value);
    [CompilerGeneratedAttribute]
internal TransactionEntryState get_State();
    [CompilerGeneratedAttribute]
private void set_State(TransactionEntryState value);
    [CompilerGeneratedAttribute]
internal long get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(long value);
    [CompilerGeneratedAttribute]
internal TValue get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(TValue value);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.CompactPlatformsProvider : object {
    private static Byte[] CompactFrameworkPublicToken;
    private static PublicKeyToken CompactFrameworkPublicToken2;
    private FrameworkLocationService myFrameworkLocationService;
    public CompactPlatformsProvider(FrameworkLocationService frameworkLocationService);
    private static CompactPlatformsProvider();
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
}
[ShellComponentAttribute]
public class JetBrains.Application.platforms.DefaultPlatformConfigProvider : object {
    private Lifetime myLifetime;
    private PlatformManager myPlatformManager;
    protected ConcurrentDictionary`2<PlatformID, IProperty`1<FileSystemPath>> WebConfigPaths;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegate4;
    public DefaultPlatformConfigProvider(Lifetime lifetime, PlatformManager platformManager);
    public virtual IProperty`1<FileSystemPath> GetRootWebConfigPath(PlatformID platformID);
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <GetRootWebConfigPath>b__0(PlatformID id);
    [CompilerGeneratedAttribute]
private static bool <GetRootWebConfigPath>b__1(PlatformInfo info);
    [CompilerGeneratedAttribute]
private static Version <GetRootWebConfigPath>b__2(PlatformInfo info);
}
public static class JetBrains.Application.platforms.DefaultPlatformUtil : object {
    public static IComparer`1<PlatformID> DefaultPlatformIDComparer;
    public static IEqualityComparer`1<PlatformID> IgnoreRuntimeAndDefaultProfilesComparer;
    public static IComparer`1<PlatformInfo> DefaultPlatformInfoComparer;
    private static DefaultPlatformUtil();
    private static int CalcHashCodeWithoutProfile(PlatformID platformID);
    private static bool CompareIgnoringRuntimeAndDefaultProfiles(PlatformID x, PlatformID y);
    private static int GetFrameworkIdentifierWeight(FrameworkIdentifier frameworkIdentifier);
    private static int GetProfileWeight(ProfileIdentifier profile);
    private static int RuntimeAndDefaultHaveSameWeight(ProfileIdentifier profile);
    private static int CompareIdCandidates(PlatformID x, PlatformID y);
    private static int ComparePlatformIdFields(PlatformID x, PlatformID y, Func`2<ProfileIdentifier, int> profileWeight);
    private static int CompareInfoCandidates(PlatformInfo x, PlatformInfo y);
}
public class JetBrains.Application.platforms.DotNetCliCreationResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <IntallationFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IDotNetCoreCli <Cli>k__BackingField;
    public bool Success { get; private set; }
    [NotNullAttribute]
public string ErrorMessage { get; private set; }
    public FileSystemPath IntallationFolder { get; private set; }
    [CanBeNullAttribute]
public IDotNetCoreCli Cli { get; private set; }
    private DotNetCliCreationResult(bool success, string errorMessage, FileSystemPath intallationFolder, IDotNetCoreCli cli);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_IntallationFolder();
    [CompilerGeneratedAttribute]
private void set_IntallationFolder(FileSystemPath value);
    [CompilerGeneratedAttribute]
public IDotNetCoreCli get_Cli();
    [CompilerGeneratedAttribute]
private void set_Cli(IDotNetCoreCli value);
    public static DotNetCliCreationResult CreateSuccess(FileSystemPath installationFolder, IDotNetCoreCli cli);
    public static DotNetCliCreationResult CreateFail(FileSystemPath installationFolder, string errorMessage);
    [NotNullAttribute]
public IDotNetCoreCli GetCliOrThrow();
    public void Log(ILogger logger, LoggingLevel loggingLevel);
    private static string CliToString(IDotNetCoreCli cli);
}
public class JetBrains.Application.platforms.DotNetCoreCli : object {
    private FileSystemPath mySdksFolder;
    [CompilerGeneratedAttribute]
private FileSystemPath <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <InstallationFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<DotNetCoreSdk> <Sdks>k__BackingField;
    [NotNullAttribute]
public FileSystemPath ExePath { get; private set; }
    [NotNullAttribute]
public FileSystemPath InstallationFolder { get; private set; }
    [NotNullAttribute]
public IReadOnlyCollection`1<DotNetCoreSdk> Sdks { get; private set; }
    private DotNetCoreCli(FileSystemPath sdksFolder, FileSystemPath exePath, FileSystemPath installationFolder, IReadOnlyCollection`1<DotNetCoreSdk> sdks);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_ExePath();
    [CompilerGeneratedAttribute]
private void set_ExePath(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_InstallationFolder();
    [CompilerGeneratedAttribute]
private void set_InstallationFolder(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<DotNetCoreSdk> get_Sdks();
    [CompilerGeneratedAttribute]
private void set_Sdks(IReadOnlyCollection`1<DotNetCoreSdk> value);
    [NotNullAttribute]
public static DotNetCliCreationResult Create(FileSystemPath installationFolder);
    [NotNullAttribute]
public sealed virtual FileSystemPath GetSdkDirectory(DotNetCoreSdk sdk);
    public sealed virtual Process CreateProcess(string command, IEnumerable`1<string> arguments, FileSystemPath workingDirectory, bool redirectOutput);
    public virtual string ToString();
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.DotNetCorePlatformsProvider : object {
    private List`1<PlatformInfo> myPlatforms;
    [CompilerGeneratedAttribute]
private ISimpleSignal <HasChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<NuGetFramework, PlatformInfo> CS$<>9__CachedAnonymousMethodDelegatea;
    public ISimpleSignal HasChanged { get; private set; }
    public DotNetCorePlatformsProvider(Lifetime lifetime);
    public void Invalidate();
    [NotNullAttribute]
protected virtual List`1<PlatformInfo> CollectPlatforms();
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    [NotNullAttribute]
protected static List`1<PlatformInfo> GetPlatformBasedOnDotNetCliExe(IDotNetCoreCli dotNetCli);
    protected static IEnumerable`1<PlatformInfo> GetNetStandardPlatforms();
    private static PlatformInfo GetPlatformInfo(NuGetFramework nugetFramework, NuGetVersion nugetVersion, FileSystemPath runtimePath);
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_HasChanged();
    [CompilerGeneratedAttribute]
private void set_HasChanged(ISimpleSignal value);
    [CompilerGeneratedAttribute]
private static PlatformInfo <GetNetStandardPlatforms>b__9(NuGetFramework framework);
}
public class JetBrains.Application.platforms.DotNetCoreSdk : object {
    public static DotNetCoreSdk v1_0_1;
    public static DotNetCoreSdk v1_0_3;
    public static DotNetCoreSdk v1_0_4;
    public static DotNetCoreSdk v1_1_4;
    public static DotNetCoreSdk v1_1_5;
    public static DotNetCoreSdk v2_0_0;
    public static DotNetCoreSdk v2_0_2;
    public static DotNetCoreSdk v2_0_3;
    public static DotNetCoreSdk v2_1_x;
    public static DotNetCoreSdk v2_1_2;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    public NuGetVersion Version { get; private set; }
    [NotNullAttribute]
public string FodlerName { get; }
    public DotNetCoreSdk(NuGetVersion version);
    private static DotNetCoreSdk();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(NuGetVersion value);
    public string get_FodlerName();
    public virtual string ToString();
    private bool Equals(DotNetCoreSdk other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_Inequality(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_GreaterThan(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_LessThan(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_GreaterThanOrEqual(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_LessThanOrEqual(DotNetCoreSdk left, DotNetCoreSdk right);
}
public abstract class JetBrains.Application.platforms.FrameworkLocationHelperBase : object {
    protected static IDictionary`2<string, FrameworkIdentifier> KnownFrameworks;
    [CompilerGeneratedAttribute]
private static Func`2<XAttribute, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<XAttribute, string> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, bool> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, bool> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, bool> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, bool> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, bool> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, bool> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Func`2<Version, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, bool> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`2<ReferenceAssemblyFolder, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<FrameworkIdentifier, string> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<FrameworkIdentifier, FrameworkIdentifier> CS$<>9__CachedAnonymousMethodDelegate36;
    private static FrameworkLocationHelperBase();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetSilverlightPlatforms();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetCompactPlatforms();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetThirdPartyFrameworks();
    protected IEnumerable`1<PlatformInfo> GetFrameworksFromReferenceAssembliesFolder(FileSystemPath path, Func`2<PlatformID, IList`1<FileSystemPath>> getAssemblyFolders, Func`2<PlatformID, FileSystemPath> getRuntimeDir, Func`2<FileSystemPath, bool> checkFramework);
    protected IEnumerable`1<PlatformInfo> ProcessFrameworksFromReferenceAssembliesFolder(PlatformID platformId, FileSystemPath frameworkDir, Func`2<PlatformID, IList`1<FileSystemPath>> getAssemblyFolders, Func`2<FileSystemPath, bool> checkFramework);
    [CanBeNullAttribute]
private PlatformInfo GetPlatformInfoFromFrameworkDir(FileSystemPath frameworkDir, PlatformID platformID, Func`2<PlatformID, IList`1<FileSystemPath>> getAssemblyFolders, Func`2<FileSystemPath, bool> checkFramework);
    protected FileSystemPath GetFrameworkListPath(FileSystemPath frameworkDir);
    protected bool CheckFrameworkListPath(FileSystemPath frameworkDir);
    protected bool CheckFrameworkMscorlibPath(FileSystemPath frameworkDir);
    [CanBeNullAttribute]
private FileSystemPath GetBaseFrameworkDir(FileSystemPath frameworkDir);
    protected abstract virtual IEnumerable`1<FileSystemPath> GetExtensionSdksFolders();
    protected IReadOnlyCollection`1<SdkInfo> GetExtensionSdks(FileSystemPath sdkRoot, string targetPlatformIdentifier, string targetPlatformVersion);
    protected IList`1<SdkInfo> GetExtensionSdks(FileSystemPath sdkRoot);
    protected FileSystemPath GetRuntimeDir(Version version);
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetDotNetFrameworkPlatforms();
    protected virtual ILookup`2<Version, ReferenceAssemblyFolder> GetReferenceAssembliesLookup();
    protected virtual Func`2<Version, FileSystemPath> GetInstallationFolderLookup();
    private void AddPlatforms(List`1<PlatformInfo> ret, Version version, IList`1<ReferenceAssemblyFolder> folders, bool isClient, FileSystemPath installationFolder);
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetWindowsSdk();
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetDotNetSdk();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetMicroFrameworkPlatforms();
    public abstract virtual FileSystemPath GetNetPortableReferenceAssembliesPath();
    public abstract virtual FileSystemPath GetReferenceAssembliesNetCore45XFrameworkPath(Version netCoreVersion);
    public abstract virtual FileSystemPath GetReferenceAssembliesWindowsPhonePath();
    public abstract virtual FileSystemPath GetReferenceAssembliesPathWindowsPhoneApp();
    public abstract virtual FileSystemPath GetWindows8PlatfromSdkFolder(Version version);
    public abstract virtual FileSystemPath GetPlatfromSdkWindowsPhonePath(Version version);
    public abstract virtual FileSystemPath GetPlatfromSdkWindowsPhoneAppPath(Version version);
    public abstract virtual FileSystemPath GetSharepointFilesPath(JetHashSet`1& numberFolders);
    public abstract virtual IReadOnlyCollection`1<FileSystemPath> GetNetFrameworkGlobalAssemblyFolders();
    public abstract virtual FileSystemPath GetNetFrameworkDirectory(Version version);
    public abstract virtual Version[] EnumerateInstalledNetFrameworks();
    public abstract virtual FileSystemPath GacPath40();
    public abstract virtual FileSystemPath GacPath();
    [CompilerGeneratedAttribute]
private static bool <GetBaseFrameworkDir>b__16(XAttribute a);
    [CompilerGeneratedAttribute]
private static string <GetBaseFrameworkDir>b__17(XAttribute a);
    [CompilerGeneratedAttribute]
private static bool <GetDotNetFrameworkPlatforms>b__21(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static bool <GetDotNetFrameworkPlatforms>b__22(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static bool <GetDotNetFrameworkPlatforms>b__23(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static bool <GetDotNetFrameworkPlatforms>b__24(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static bool <GetDotNetFrameworkPlatforms>b__25(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static bool <GetDotNetFrameworkPlatforms>b__26(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetInstallationFolderLookup>b__2d(Version version);
    [CompilerGeneratedAttribute]
private static bool <AddPlatforms>b__2f(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static FileSystemPath <AddPlatforms>b__30(ReferenceAssemblyFolder x);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__33(FrameworkIdentifier _);
    [CompilerGeneratedAttribute]
private static FrameworkIdentifier <.cctor>b__34(FrameworkIdentifier _);
}
[ShellComponentAttribute]
public class JetBrains.Application.platforms.FrameworkLocationService : object {
    private IProperty`1<IFrameworkLocationHelper> myHelper;
    public IProperty`1<IFrameworkLocationHelper> Current { get; }
    public FrameworkLocationService(Lifetime lifetime);
    public IProperty`1<IFrameworkLocationHelper> get_Current();
    public void SetHelper(IFrameworkLocationHelper value);
}
[ShellComponentAttribute]
public class JetBrains.Application.platforms.GacCacheController : object {
    public GacCacheController(Lifetime lifetime, IFileSystemTracker fileSystemTracker);
    private static void CreateCacheOnFolder(Lifetime lifetime, IFileSystemTracker fileSystemTracker, FileSystemPath gacPath);
}
public interface JetBrains.Application.platforms.IAdvancedGuessMatcher {
    public abstract virtual bool IsMatch(FileSystemPath path);
}
public interface JetBrains.Application.platforms.IDotNetCoreCli {
    public FileSystemPath ExePath { get; }
    public FileSystemPath InstallationFolder { get; }
    public IReadOnlyCollection`1<DotNetCoreSdk> Sdks { get; }
    public abstract virtual FileSystemPath get_ExePath();
    public abstract virtual FileSystemPath get_InstallationFolder();
    public abstract virtual IReadOnlyCollection`1<DotNetCoreSdk> get_Sdks();
    public abstract virtual FileSystemPath GetSdkDirectory(DotNetCoreSdk sdk);
    public abstract virtual Process CreateProcess(string command, IEnumerable`1<string> arguments, FileSystemPath workingDirectory, bool redirectOutput);
}
public interface JetBrains.Application.platforms.IFrameworkLocationHelper {
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetDotNetFrameworkPlatforms();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetSilverlightPlatforms();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetCompactPlatforms();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetThirdPartyFrameworks();
    public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetMicroFrameworkPlatforms();
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetWindowsSdk();
    public abstract virtual IReadOnlyCollection`1<SdkInfo> GetDotNetSdk();
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetReferenceAssembliesNetCore45XFrameworkPath(Version netCoreVersion);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetWindows8PlatfromSdkFolder(Version version);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetPlatfromSdkWindowsPhonePath(Version version);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetPlatfromSdkWindowsPhoneAppPath(Version version);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetReferenceAssembliesWindowsPhonePath();
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetReferenceAssembliesPathWindowsPhoneApp();
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetNetFrameworkDirectory(Version version);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetNetPortableReferenceAssembliesPath();
    [CanBeNullAttribute]
public abstract virtual FileSystemPath GetSharepointFilesPath(JetHashSet`1& numberFolders);
    public abstract virtual IReadOnlyCollection`1<FileSystemPath> GetNetFrameworkGlobalAssemblyFolders();
    public abstract virtual Version[] EnumerateInstalledNetFrameworks();
    public abstract virtual FileSystemPath GacPath();
    public abstract virtual FileSystemPath GacPath40();
}
public interface JetBrains.Application.platforms.ILivePlatformsProvider {
    public ISimpleSignal HasChanged { get; }
    public abstract virtual ISimpleSignal get_HasChanged();
}
public interface JetBrains.Application.platforms.IPlatformConfigProvider {
    [NotNullAttribute]
public abstract virtual IProperty`1<FileSystemPath> GetRootWebConfigPath(PlatformID platformID);
}
public interface JetBrains.Application.platforms.IPlatformsProvider {
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    [CanBeNullAttribute]
public abstract virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    [NotNullAttribute]
public abstract virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.NetCore45Provider : object {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    [NotNullAttribute]
private static Dictionary`2<Version, Version> ourCoreToSdkVersionsMap;
    private static string ourSystemRuntimeDll;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, PlatformID> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformID, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    public NetCore45Provider(FrameworkLocationService frameworkLocationService);
    private static NetCore45Provider();
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public static FileSystemPath GetMscorlibSubstituentPath(PlatformInfo platformInfo);
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__0(AssemblyNameInfo info);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__1(PlatformInfo info);
    [CompilerGeneratedAttribute]
private static PlatformID <DetectPlatformIdByReferences>b__2(PlatformInfo info);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__3(PlatformID x);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.NetMicroFrameworksProvider : object {
    private FrameworkLocationService myFrameworkLocationService;
    public NetMicroFrameworksProvider(FrameworkLocationService frameworkLocationService);
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.NetPlatformsProvider : object {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    public NetPlatformsProvider(FrameworkLocationService frameworkLocationService);
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo cr, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
}
public class JetBrains.Application.platforms.NetPlatformsProviderUtil : object {
    public static Byte[] NetFrameworkPublicToken;
    private static PublicKeyToken NetFrameworkPublicToken2;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, PlatformID> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<AssemblyNameInfo, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegatef;
    private static NetPlatformsProviderUtil();
    public static PlatformID DetectPlatformIdByReferences(AssemblyNameInfo cr, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    [CanBeNullAttribute]
public static FileSystemPath ParseTargetFolder(FileSystemPath child);
    private static PlatformID FindPlatformForCorlibReference(Version mscorlibVersion, IReadOnlyCollection`1<PlatformInfo> platforms);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__0(AssemblyNameInfo info);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__1(PlatformInfo p);
    [CompilerGeneratedAttribute]
private static Version <DetectPlatformIdByReferences>b__2(PlatformInfo p);
    [CompilerGeneratedAttribute]
private static PlatformID <DetectPlatformIdByReferences>b__3(PlatformInfo p);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__5(AssemblyNameInfo x);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__6(PlatformInfo p);
    [CompilerGeneratedAttribute]
private static Version <DetectPlatformIdByReferences>b__7(PlatformInfo p);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.NetPortableProvider : object {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    [NotNullAttribute]
private static Dictionary`2<Version, Version> PortableToFrameworkVersion;
    private FileSystemPath myNugetDirectory;
    private FileSystemPath myDnxDirectory;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, <>f__AnonymousType54`2<ProfileIdentifier, FileSystemPath>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegate4;
    public NetPortableProvider(FrameworkLocationService frameworkLocationService);
    private static NetPortableProvider();
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    [CanBeNullAttribute]
private static Version ParseVersionFromFolderName(string input);
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType54`2<ProfileIdentifier, FileSystemPath> <GetPlatforms>b__0(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static Version <GetAdvancedPlatformMatchers>b__2(PlatformInfo info);
}
[ExtensionAttribute]
public static class JetBrains.Application.platforms.PlatformDetectionUtils : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static OneToListMap`2<FileSystemPath, PlatformID> ToPlatformFoldersPrefixes(IEnumerable`1<PlatformInfo> platforms);
    [ExtensionAttribute]
public static PlatformID FindPlatform(IEnumerable`1<PlatformInfo> platforms, FrameworkIdentifier identifier, Version version, ProfileIdentifier profile);
}
public class JetBrains.Application.platforms.PlatformInfo : object {
    public static string MscorlibDllName;
    [CompilerGeneratedAttribute]
private FileSystemPath <TargetFrameworkFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FileSystemPath> <AdditionalAssemblyFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <MscorlibPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<FileSystemPath> <PlatformFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <NuGetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformID <PlatformID>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <InstalltionFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public FileSystemPath TargetFrameworkFolder { get; private set; }
    public ICollection`1<FileSystemPath> AdditionalAssemblyFolders { get; private set; }
    public FileSystemPath MscorlibPath { get; private set; }
    public ICollection`1<FileSystemPath> PlatformFolders { get; private set; }
    public FrameworkIdentifier Identifier { get; }
    public Version Version { get; }
    public NuGetVersion NuGetVersion { get; private set; }
    public ProfileIdentifier Profile { get; }
    public PlatformID PlatformID { get; private set; }
    public FileSystemPath InstalltionFolder { get; private set; }
    public PlatformInfo(PlatformID platformID, FileSystemPath targetFrameworkFolder, IEnumerable`1<FileSystemPath> platformFolders, ICollection`1<FileSystemPath> additionalAssemblyFolders, FileSystemPath installtionFolder, NuGetVersion nuGetVersion);
    private static PlatformInfo();
    [CompilerGeneratedAttribute]
public FileSystemPath get_TargetFrameworkFolder();
    [CompilerGeneratedAttribute]
private void set_TargetFrameworkFolder(FileSystemPath value);
    [CompilerGeneratedAttribute]
public ICollection`1<FileSystemPath> get_AdditionalAssemblyFolders();
    [CompilerGeneratedAttribute]
private void set_AdditionalAssemblyFolders(ICollection`1<FileSystemPath> value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_MscorlibPath();
    [CompilerGeneratedAttribute]
private void set_MscorlibPath(FileSystemPath value);
    [CompilerGeneratedAttribute]
public ICollection`1<FileSystemPath> get_PlatformFolders();
    [CompilerGeneratedAttribute]
private void set_PlatformFolders(ICollection`1<FileSystemPath> value);
    public FrameworkIdentifier get_Identifier();
    public Version get_Version();
    [CompilerGeneratedAttribute]
public NuGetVersion get_NuGetVersion();
    [CompilerGeneratedAttribute]
private void set_NuGetVersion(NuGetVersion value);
    public ProfileIdentifier get_Profile();
    [CompilerGeneratedAttribute]
public PlatformID get_PlatformID();
    [CompilerGeneratedAttribute]
private void set_PlatformID(PlatformID value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_InstalltionFolder();
    [CompilerGeneratedAttribute]
private void set_InstalltionFolder(FileSystemPath value);
    public bool IsFrameworkAssembly(FileSystemPath assemblyPath);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static FileSystemPath <.ctor>b__1(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(FileSystemPath path);
}
[ExtensionAttribute]
public static class JetBrains.Application.platforms.PlatformInfoEx : object {
    [ExtensionAttribute]
public static FileSystemPath MicrosoftVisualBasicPath(PlatformInfo platformInfo);
    [ExtensionAttribute]
public static FileSystemPath FindInPlatformFolders(PlatformInfo platformInfo, string fileOrFolderName);
}
public class JetBrains.Application.platforms.PlatformInfoVersionComparer : object {
    public static PlatformInfoVersionComparer Instance;
    private static PlatformInfoVersionComparer();
    public sealed virtual int Compare(PlatformInfo x, PlatformInfo y);
}
[ShellComponentAttribute]
public class JetBrains.Application.platforms.PlatformManager : object {
    private IEnumerable`1<IPlatformsProvider> myProviders;
    private PlatformInfo myDefaultPlatformInfo;
    private PlatformInfo myLatestNetFramework1;
    private PlatformInfo myLatestNetFramework2;
    private PlatformInfo myLatestNetFramework4;
    protected IList`1<PlatformInfo> myAllPlatforms;
    protected IDictionary`2<IPlatformsProvider, IReadOnlyCollection`1<PlatformInfo>> myPlatformsByProvider;
    private IDictionary`2<IPlatformsProvider, IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID>> myPlatformGuessMatchersByProvider;
    protected IList`1<KeyValuePair`2<IAdvancedGuessMatcher, PlatformID>> myPlatformGuessMatchers;
    protected OneToListMap`2<FileSystemPath, PlatformID> myPlatformFoldersPrefixes;
    private ILogger myLogger;
    private FrameworkLocationService myFrameworkLocationService;
    private bool myRecalculateNeeded;
    [CompilerGeneratedAttribute]
private static Func`2<IReadOnlyCollection`1<PlatformInfo>, IEnumerable`1<PlatformInfo>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID>, IEnumerable`1<KeyValuePair`2<IAdvancedGuessMatcher, PlatformID>>> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, PlatformID> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, NuGetFramework> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformID, Version> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, string> CS$<>9__CachedAnonymousMethodDelegate33;
    public FrameworkLocationService FrameworkLocationService { get; }
    public PlatformManager(Lifetime lifetime, ILogger logger, FrameworkLocationService frameworkLocationService, IEnumerable`1<IPlatformsProvider> providers);
    protected void ReloadPlatforms();
    private void AddRuntimeFolders(OneToListMap`2<FileSystemPath, PlatformID> prefixes);
    private void AddRuntimeFolder(OneToListMap`2<FileSystemPath, PlatformID> prefixes, FileSystemPath secondaryPath, Version version);
    protected virtual List`1<KeyValuePair`2<IAdvancedGuessMatcher, PlatformID>> CalcPlatformFoldersPrefixes();
    private static void CollectPlatformsFromProvider(IPlatformsProvider provider, IDictionary`2<IPlatformsProvider, IReadOnlyCollection`1<PlatformInfo>> platformsByProvider, OneToListMap`2<FileSystemPath, PlatformID> prefixes, IDictionary`2<IPlatformsProvider, IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID>> platformGuessMatchersByProvider);
    public virtual PlatformID GetRunTimePlatformId(PlatformID compileTimePlatformId);
    [CanBeNullAttribute]
private static ReferencesAndTargetFramework GetReferences(FileSystemPath assemblyPath);
    [NotNullAttribute]
public virtual PlatformID GetAssemblyPlatformId(FileSystemPath assemblyPath);
    [CanBeNullAttribute]
private PlatformID GuessPlatformIdByPathInNuGetPackage(IPath assemblyPath);
    private PlatformID GuessPlatformIdByCorlib(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences);
    public virtual bool IsPlatformFolder(FileSystemPath path);
    private PlatformID GuessPlatformIdByPath(FileSystemPath assemblyPath);
    public virtual void Dump(TextWriter writer, FileSystemPath rootPath, FileSystemPath replacePath);
    public virtual bool IsFrameworkAssembly(FileSystemPath fileSystemPath);
    public virtual IEnumerable`1<PlatformInfo> GetAllPlatformInfos();
    public static bool IsNuGetReferenceAssembly(TargetFrameworkId targetFrameworkId, FileSystemPath assemblyPath);
    [ObsoleteAttribute("Use verload with TargetFrameworkId")]
public static bool IsNuGetReferenceAssembly(PlatformID platformID, FileSystemPath assemblyPath);
    public PlatformInfo GetPlatformInfo(TargetFrameworkId targetFrameworkId);
    [ObsoleteAttribute("Use overload with TargetFrameworkId")]
public virtual PlatformInfo GetPlatformInfo(PlatformID platformID);
    public virtual FrameworkLocationService get_FrameworkLocationService();
    public virtual PlatformInfo GetDefaultPlatformInfo();
    private sealed virtual override void JetBrains.Application.Infra.IExternalSourcesDebugInfoProvider.Dump(TextWriter sw);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(bool x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Lifetime lt, IFrameworkLocationHelper helper);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PlatformInfo> <ReloadPlatforms>b__5(IReadOnlyCollection`1<PlatformInfo> x);
    [CompilerGeneratedAttribute]
private static bool <ReloadPlatforms>b__6(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static Version <ReloadPlatforms>b__7(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static bool <ReloadPlatforms>b__8(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static Version <ReloadPlatforms>b__9(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static bool <ReloadPlatforms>b__a(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static Version <ReloadPlatforms>b__b(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static bool <ReloadPlatforms>b__c(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static Version <ReloadPlatforms>b__d(PlatformInfo x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<KeyValuePair`2<IAdvancedGuessMatcher, PlatformID>> <CalcPlatformFoldersPrefixes>b__1a(IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> _);
    [CompilerGeneratedAttribute]
private static PlatformID <GetRunTimePlatformId>b__1c(PlatformInfo info);
    [CompilerGeneratedAttribute]
private static NuGetFramework <GuessPlatformIdByPathInNuGetPackage>b__26(PlatformInfo info);
    [CompilerGeneratedAttribute]
private static Version <GuessPlatformIdByPath>b__2e(PlatformID x);
    [CompilerGeneratedAttribute]
private static string <Dump>b__31(PlatformInfo x);
}
[BaseTypeRequiredAttribute("JetBrains.Application.platforms.IPlatformsProvider")]
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.platforms.PlatformsProviderAttribute : ShellComponentAttribute {
}
public static class JetBrains.Application.platforms.PlatformUtils : object {
    [NotNullAttribute]
public static PlatformID CreatePlatformId(ICollection`1<Guid> projectTypeGuids, PlatformID defaultPlatform, Version targetFrameworkVersion);
    [NotNullAttribute]
public static FileSystemPath GetProgramFiles86();
    [NotNullAttribute]
public static FileSystemPath GetProgramFiles();
    [NotNullAttribute]
public static FileSystemPath GetReferencedAssembliesDir();
}
public static class JetBrains.Application.platforms.ProjectTypesGuid : object {
    public static Guid Vs2005WebSite;
    public static Guid VsPerformanceAnalyzerProject;
    public static Guid InstallShieldProject;
    public static Guid InstallShieldProjectLight;
    public static Guid SilverlightProject;
    public static Guid WorkflowProject;
    public static Guid DBProject;
    public static Guid WindowsPhone;
    public static Guid VBLangService;
    public static Guid CSharpLangService;
    public static Guid SolutionItemsProject;
    public static Guid VBSmartDevice;
    public static Guid FSharp;
    public static Guid UnloadedProject;
    public static Guid ExtensibilityProject;
    public static Guid WpfGuid;
    public static Guid CpsGuid;
    public static Guid WindowsCSharp;
    public static Guid MetroStyleAppGuid;
    public static Guid SqlServerDatabaseProject;
    public static Guid AzureProject;
    public static Guid RegularProjectAsWebsiteForTests;
    public static Guid IUnknown;
    public static Guid PerformanceAnalyzerGuid;
    public static Guid StoreAppUniversalGuid;
    public static Guid Window10UniversalAppGuid;
    public static Guid OpenFolderSelectionHierarchyGuid;
    public static Guid CppGuid;
    public static Guid MonoDevelop_IPhone_IPhoneProjectGuid;
    public static Guid MonoDevelop_IPhone_IPhoneBindingProjectGuid;
    public static Guid MonoDevelop_MonoDroid_MonoDroidProjectGuid;
    public static Guid MonoDevelop_MonoDroid_MonoDroidBindingProjectGuid;
    public static JetHashSet`1<Guid> XamarinGuids;
    private static ProjectTypesGuid();
}
internal class JetBrains.Application.platforms.ReferencesAndTargetFramework : object {
    private AssemblyNameInfo[] myReferencedAssemblyInfos;
    private PlatformID myPlatformID;
    [CanBeNullAttribute]
public PlatformID PlatformID { get; }
    public AssemblyNameInfo[] ReferencedAssemblyInfos { get; }
    public ReferencesAndTargetFramework(AssemblyNameInfo[] referencedAssemblyInfos, PlatformID platformID);
    public PlatformID get_PlatformID();
    public AssemblyNameInfo[] get_ReferencedAssemblyInfos();
}
public class JetBrains.Application.platforms.SdkIdentifier : object {
    public static SdkIdentifier WindowsSdk;
    public static SdkIdentifier DotNetSdk;
    [NotNullAttribute]
private string myIdentifier;
    public SdkIdentifier(string identifier);
    private static SdkIdentifier();
    public sealed virtual bool Equals(SdkIdentifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(SdkIdentifier left, SdkIdentifier right);
    public static bool op_Inequality(SdkIdentifier left, SdkIdentifier right);
}
public class JetBrains.Application.platforms.SdkInfo : object {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkIdentifier <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SdkInfo> <ExtensionSDKs>k__BackingField;
    public Version Version { get; private set; }
    public FileSystemPath Root { get; private set; }
    public SdkIdentifier Identifier { get; private set; }
    public IReadOnlyCollection`1<SdkInfo> ExtensionSDKs { get; public set; }
    public SdkInfo(SdkIdentifier identifier, Version version, FileSystemPath root, IReadOnlyCollection`1<SdkInfo> extensionSDKs);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(FileSystemPath value);
    [CompilerGeneratedAttribute]
public SdkIdentifier get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(SdkIdentifier value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SdkInfo> get_ExtensionSDKs();
    [CompilerGeneratedAttribute]
public void set_ExtensionSDKs(IReadOnlyCollection`1<SdkInfo> value);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.SilverlightPlatformsProvider : object {
    private static Byte[] SilverlightPublicToken;
    private static PublicKeyToken SilverlightPublicToken2;
    private FrameworkLocationService myFrameworkLocationService;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, Version> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformInfo, PlatformID> CS$<>9__CachedAnonymousMethodDelegate5;
    public SilverlightPlatformsProvider(FrameworkLocationService frameworkLocationService);
    private static SilverlightPlatformsProvider();
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
    [CompilerGeneratedAttribute]
private static bool <DetectPlatformIdByReferences>b__0(PlatformInfo platform);
    [CompilerGeneratedAttribute]
private static Version <DetectPlatformIdByReferences>b__1(PlatformInfo platform);
    [CompilerGeneratedAttribute]
private static PlatformID <DetectPlatformIdByReferences>b__2(PlatformInfo platform);
}
public class JetBrains.Application.platforms.SystemFrameworkLocationHelper : FrameworkLocationHelperBase {
    private static String[] ourExcludedAssemblyFolders;
    private static Version our81Version;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformID, IList`1<FileSystemPath>> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<PlatformID, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<DotNetRuntime, Version> CS$<>9__CachedAnonymousMethodDelegatef;
    private static SystemFrameworkLocationHelper();
    public static Version ExtractSdkVersion(string key);
    protected virtual IEnumerable`1<FileSystemPath> GetExtensionSdksFolders();
    public virtual IReadOnlyCollection`1<SdkInfo> GetWindowsSdk();
    public virtual IReadOnlyCollection`1<SdkInfo> GetDotNetSdk();
    public virtual IReadOnlyCollection`1<PlatformInfo> GetMicroFrameworkPlatforms();
    public virtual IReadOnlyCollection`1<PlatformInfo> GetCompactPlatforms();
    public virtual IReadOnlyCollection`1<PlatformInfo> GetThirdPartyFrameworks();
    public virtual IReadOnlyCollection`1<PlatformInfo> GetSilverlightPlatforms();
    public virtual FileSystemPath GetNetPortableReferenceAssembliesPath();
    public virtual FileSystemPath GetReferenceAssembliesNetCore45XFrameworkPath(Version netCoreVersion);
    public virtual FileSystemPath GetReferenceAssembliesWindowsPhonePath();
    public virtual FileSystemPath GetReferenceAssembliesPathWindowsPhoneApp();
    [NotNullAttribute]
public virtual FileSystemPath GetWindows8PlatfromSdkFolder(Version version);
    [NotNullAttribute]
public virtual FileSystemPath GetPlatfromSdkWindowsPhonePath(Version version);
    public virtual FileSystemPath GetPlatfromSdkWindowsPhoneAppPath(Version version);
    public virtual FileSystemPath GetSharepointFilesPath(JetHashSet`1& numberFolders);
    private IReadOnlyCollection`1<FileSystemPath> LoadAdditionalAssemblyFolders(string assemblyFoldersKeyPath, String[] excludedKeys);
    private static IReadOnlyCollection`1<FileSystemPath> LoadAdditionalAssemblyFolders(RegistryKey assemblyFoldersKey, String[] excludedKeys);
    private static void LoadRegistryKey(RegistryKey assemblyFolderKey, ICollection`1<FileSystemPath> folders);
    public virtual IReadOnlyCollection`1<FileSystemPath> GetNetFrameworkGlobalAssemblyFolders();
    public virtual FileSystemPath GetNetFrameworkDirectory(Version version);
    public virtual Version[] EnumerateInstalledNetFrameworks();
    public virtual FileSystemPath GacPath40();
    public virtual FileSystemPath GacPath();
    [CanBeNullAttribute]
private FileSystemPath GetReferenceAssembliesDirectory(string directoryName);
    [CompilerGeneratedAttribute]
private static IList`1<FileSystemPath> <GetThirdPartyFrameworks>b__6(PlatformID id);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetThirdPartyFrameworks>b__7(PlatformID id);
    [CompilerGeneratedAttribute]
private static Version <EnumerateInstalledNetFrameworks>b__e(DotNetRuntime x);
}
public enum JetBrains.Application.platforms.TargetDotNetFrameworkVersion : Enum {
    public int value__;
    public static TargetDotNetFrameworkVersion Version11;
    public static TargetDotNetFrameworkVersion Version20;
    public static TargetDotNetFrameworkVersion Version30;
    public static TargetDotNetFrameworkVersion Version35;
    public static TargetDotNetFrameworkVersion Version40;
    public static TargetDotNetFrameworkVersion VersionLatest;
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.ThirdPartyFrameworksProvider : object {
    private FrameworkLocationService myFrameworkLocationService;
    public ThirdPartyFrameworksProvider(FrameworkLocationService frameworkLocationService);
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
}
public class JetBrains.Application.platforms.UserNugetDotnetMatcher : object {
    private FileSystemPath myNugetDirectory;
    private string myID;
    public UserNugetDotnetMatcher(FileSystemPath nugetDirectory, string id);
    public sealed virtual bool Equals(IAdvancedGuessMatcher other);
    public sealed virtual bool IsMatch(FileSystemPath path);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.WindowsPhoneAppProvider : object {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public WindowsPhoneAppProvider(FrameworkLocationService frameworkLocationService);
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
    [CompilerGeneratedAttribute]
private static bool <GetPlatforms>b__0(FileSystemPath x);
}
[PlatformsProviderAttribute]
public class JetBrains.Application.platforms.WindowsPhoneProvider : object {
    [NotNullAttribute]
private FrameworkLocationService myFrameworkLocationService;
    [NotNullAttribute]
private static Dictionary`2<Version, Version> ourCoreToSdkVersionsMap;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public WindowsPhoneProvider(FrameworkLocationService frameworkLocationService);
    private static WindowsPhoneProvider();
    public sealed virtual IReadOnlyCollection`1<PlatformInfo> GetPlatforms();
    public sealed virtual PlatformID DetectPlatformIdByReferences(AssemblyNameInfo corlibReference, IReadOnlyCollection`1<AssemblyNameInfo> otherReferences, IReadOnlyCollection`1<PlatformInfo> platforms);
    public sealed virtual IReadOnlyDictionary`2<IAdvancedGuessMatcher, PlatformID> GetAdvancedPlatformMatchers(IReadOnlyCollection`1<PlatformInfo> platforms);
    [CompilerGeneratedAttribute]
private static bool <GetPlatforms>b__0(FileSystemPath x);
}
public interface JetBrains.Application.Processes.IProcessStartInfoPatcher {
    [NotNullAttribute]
public abstract virtual ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeRequest request);
}
public interface JetBrains.Application.Processes.IShellProcessStartInfoPatcher {
}
public interface JetBrains.Application.Processes.ISolutionProcessStartInfoPatcher {
}
public class JetBrains.Application.Processes.JetProcessRuntimeFrameworkRequest : JetProcessRuntimeRequest {
    [CompilerGeneratedAttribute]
private bool <UseInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMono>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MonoDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MonoPrefer64Bit>k__BackingField;
    public bool UseInternal { get; private set; }
    public bool UseMono { get; private set; }
    public bool MonoDebugMode { get; private set; }
    public bool MonoPrefer64Bit { get; private set; }
    public JetProcessRuntimeFrameworkRequest(bool useInternal, bool useMono, bool monoDebugMode, bool monoPrefer64Bit);
    [CompilerGeneratedAttribute]
public bool get_UseInternal();
    [CompilerGeneratedAttribute]
private void set_UseInternal(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseMono();
    [CompilerGeneratedAttribute]
private void set_UseMono(bool value);
    [CompilerGeneratedAttribute]
public bool get_MonoDebugMode();
    [CompilerGeneratedAttribute]
private void set_MonoDebugMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_MonoPrefer64Bit();
    [CompilerGeneratedAttribute]
private void set_MonoPrefer64Bit(bool value);
    public virtual string ToString();
}
public class JetBrains.Application.Processes.JetProcessRuntimeRequest : object {
    private static JetProcessRuntimeRequest ourCoreRequest;
    private static JetProcessRuntimeRequest ourDirectRequest;
    [CompilerGeneratedAttribute]
private JetProcessRuntimeType <RuntimeType>k__BackingField;
    public JetProcessRuntimeType RuntimeType { get; private set; }
    protected JetProcessRuntimeRequest(JetProcessRuntimeType runtimeType);
    private static JetProcessRuntimeRequest();
    [CompilerGeneratedAttribute]
public JetProcessRuntimeType get_RuntimeType();
    [CompilerGeneratedAttribute]
private void set_RuntimeType(JetProcessRuntimeType value);
    public static JetProcessRuntimeRequest CreateCore();
    public static JetProcessRuntimeRequest CreateFramework(bool useInternal, bool useMono, bool monoDebugMode, bool monoPrefer64Bit);
    public static JetProcessRuntimeRequest CreateInternalFramework(bool useMono, bool monoDebugMode, bool monoPrefer64Bit);
    public static JetProcessRuntimeRequest CreateDirect();
    public virtual string ToString();
}
public enum JetBrains.Application.Processes.JetProcessRuntimeType : Enum {
    public int value__;
    public static JetProcessRuntimeType FullFramework;
    public static JetProcessRuntimeType DotNetCore;
    public static JetProcessRuntimeType Direct;
}
public class JetBrains.Application.Processes.JetProcessStartInfo : object {
    private ProcessStartInfo myInfo;
    private bool myIsPatched;
    [CompilerGeneratedAttribute]
private static Action`1<ProcessStartInfo> CS$<>9__CachedAnonymousMethodDelegate6;
    public string FileName { get; }
    public string Arguments { get; }
    public string WorkingDirectory { get; }
    private JetProcessStartInfo(ProcessStartInfo info);
    public JetProcessStartInfo(string fileName, string arguments, string workingDirectory);
    public JetProcessStartInfo(string fileName, IEnumerable`1<string> arguments, string workingDirectory);
    private static ProcessStartInfo Clone(ProcessStartInfo info);
    public static JetProcessStartInfo CopyFrom(ProcessStartInfo info);
    public static JetProcessStartInfo CopyFrom(JetProcessStartInfo info);
    [NotNullAttribute]
public JetProcessStartInfo Patch(Action`1<ProcessStartInfo> patchAction);
    public void Patch(string fileName, string arguments);
    public JetProcessStartInfo EmptyPatch();
    [NotNullAttribute]
public ProcessStartInfo ToProcessStartInfo();
    public string get_FileName();
    public string get_Arguments();
    public string get_WorkingDirectory();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static void <EmptyPatch>b__5(ProcessStartInfo info);
}
public class JetBrains.Application.Processes.JetProcessStartInfoPatch : object {
    [NotNullAttribute]
private IProcessStartInfoPatcher myPatcher;
    [NotNullAttribute]
private JetProcessRuntimeRequest myRequest;
    public JetProcessStartInfoPatch(IProcessStartInfoPatcher patcher, JetProcessRuntimeRequest request);
    [NotNullAttribute]
public ProcessStartInfoPatchResult Apply(JetProcessStartInfo info);
}
public class JetBrains.Application.Processes.ProcessStartInfoDotNetCorePatcher : object {
    [NotNullAttribute]
public static string NotFoundMessage;
    [CanBeNullAttribute]
protected virtual string GetCliPath();
    public ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeRequest request);
}
public class JetBrains.Application.Processes.ProcessStartInfoMonoPatcher : object {
    [NotNullAttribute]
public static string NotFoundMessage;
    [CanBeNullAttribute]
protected virtual string GetMonoPath(JetProcessRuntimeFrameworkRequest request);
    [NotNullAttribute]
protected virtual string GetMonoArguments(JetProcessRuntimeFrameworkRequest request);
    public ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeFrameworkRequest request);
}
public class JetBrains.Application.Processes.ProcessStartInfoPatcherBase : object {
    protected ILogger Logger;
    private ProcessStartInfoDotNetCorePatcher myCorePatcher;
    private ProcessStartInfoMonoPatcher myMonoPatcher;
    protected ProcessStartInfoDotNetCorePatcher DotNetCorePatcher { get; }
    protected ProcessStartInfoMonoPatcher MonoPatcher { get; }
    public ProcessStartInfoPatcherBase(ILogger logger);
    protected virtual ProcessStartInfoDotNetCorePatcher get_DotNetCorePatcher();
    protected virtual ProcessStartInfoMonoPatcher get_MonoPatcher();
    protected virtual bool IsNativeFrameworkAvailable();
    public virtual ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeRequest request);
    [NotNullAttribute]
private ProcessStartInfoPatchResult PatchFullFramework(JetProcessStartInfo info, JetProcessRuntimeFrameworkRequest request);
}
public class JetBrains.Application.Processes.ProcessStartInfoPatchResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private JetProcessStartInfo <OriginalProcessStartInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private JetProcessStartInfo <PatchedProcessStartInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private JetProcessRuntimeRequest <RuntimeRequest>k__BackingField;
    public bool Success { get; private set; }
    [NotNullAttribute]
public string ErrorMessage { get; private set; }
    public JetProcessStartInfo OriginalProcessStartInfo { get; private set; }
    [CanBeNullAttribute]
public JetProcessStartInfo PatchedProcessStartInfo { get; private set; }
    [NotNullAttribute]
public JetProcessRuntimeRequest RuntimeRequest { get; private set; }
    private ProcessStartInfoPatchResult(JetProcessStartInfo originalInfo, JetProcessRuntimeRequest runtimeRequest, bool success, string errorMessage, JetProcessStartInfo patchedInfo);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public JetProcessStartInfo get_OriginalProcessStartInfo();
    [CompilerGeneratedAttribute]
private void set_OriginalProcessStartInfo(JetProcessStartInfo value);
    [CompilerGeneratedAttribute]
public JetProcessStartInfo get_PatchedProcessStartInfo();
    [CompilerGeneratedAttribute]
private void set_PatchedProcessStartInfo(JetProcessStartInfo value);
    [CompilerGeneratedAttribute]
public JetProcessRuntimeRequest get_RuntimeRequest();
    [CompilerGeneratedAttribute]
private void set_RuntimeRequest(JetProcessRuntimeRequest value);
    public static ProcessStartInfoPatchResult CreateSuccess(JetProcessStartInfo originalInfo, JetProcessRuntimeRequest runtimeRequest, JetProcessStartInfo patchedInfo);
    public static ProcessStartInfoPatchResult CreateFail(JetProcessStartInfo originalInfo, JetProcessRuntimeRequest runtimeRequest, string errorMessage);
    [NotNullAttribute]
public JetProcessStartInfo GetPatchedInfoOrThrow();
    public void Log(ILogger logger, LoggingLevel loggingLevel);
    private static string InfoToString(JetProcessStartInfo info);
}
public interface JetBrains.Application.ProcessRunner.IInternalProcessesRegistry {
    public IList`1<int> AllRegisteredProcesses { get; }
    public abstract virtual IList`1<int> get_AllRegisteredProcesses();
    public abstract virtual void RegisterProcess(int pid, Lifetime lifetime);
}
[ShellComponentAttribute]
public class JetBrains.Application.ProcessRunner.InternalProcessesRegistry : object {
    private ConcurrentSet`1<int> myPids;
    public IList`1<int> AllRegisteredProcesses { get; }
    public virtual IList`1<int> get_AllRegisteredProcesses();
    public virtual void RegisterProcess(int pid, Lifetime lifetime);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.ProductComponentAttribute : ComponentAttribute {
}
public static class JetBrains.Application.ProductDialogHeaderImage : object {
    public static Image Placeholder;
    private static ProductDialogHeaderImage();
}
[ObsoleteAttribute("Has no meaning anymore.")]
public class JetBrains.Application.ProductEdition : object {
}
[ExtensionAttribute]
public static class JetBrains.Application.ProductInfoExtensions : object {
    [ExtensionAttribute]
public static MasterDetailInfo PresentableInfoForAboutBox(IProductInfo productInfo);
    [ExtensionAttribute]
public static MasterDetailInfo PresentableInfoForAboutBox(HostInfo hostinfo);
    [ExtensionAttribute]
public static string PresentableName(IProductInfo productInfo, ProductNameFlags flags);
    private static string PresentProductName(IProductInfo productInfo, ProductNameFlags flags);
    public static JetSemanticVersion MakePackageVersionFromProduct(IProductInfo productInfo, JetSemanticVersion packageVersion, int fieldCount);
    public static JetSemanticVersion MakePackageVersionFromProduct(JetSemanticVersion productVersion, JetSemanticVersion packageVersion, int fieldCount);
}
public class JetBrains.Application.Progress.CommandLineProgressIndicator : ProgressIndicatorBase {
    private int myCurrentPercentage;
    private int myCurrentStep;
    private Timer myWindTimer;
    private object obj;
    unknown string CurrentItemText {public set; }
    unknown string TaskName {public set; }
    public CommandLineProgressIndicator(string taskName);
    private void myWindTimer_Elapsed(object sender, ElapsedEventArgs e);
    private void Render();
    public virtual void Advance(double units);
    public virtual void Start(int totalWorkUnits);
    public virtual void Stop();
    public virtual void set_CurrentItemText(string value);
    public virtual void set_TaskName(string value);
}
public class JetBrains.Application.Progress.CommandLineTaskExecutor : object {
    public sealed virtual bool ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
}
public interface JetBrains.Application.Progress.ITaskExecutor {
    public abstract virtual bool ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
}
public static class JetBrains.Application.Progress.ProgressIndicatorMarshalled : object {
    [NotNullAttribute]
public static IProgressIndicatorModel Create(Lifetime lifetime, IProgressIndicatorModel modelFree, IThreading threading);
    [NotNullAttribute]
public static IProgressIndicatorModel CreateWithoutSafeThreadCheck(Lifetime lifetime, IProgressIndicatorModel modelFree, IThreading invocator);
}
public class JetBrains.Application.Progress.RunningTaskExecutor : object {
    [NotNullAttribute]
public string ExecutionName;
    [NotNullAttribute]
public IProgressIndicatorModel Progress;
    public RunningTaskExecutor(string name, IProgressIndicatorModel progress);
}
public class JetBrains.Application.Progress.SimpleTaskExecutor : object {
    [NotNullAttribute]
public static SimpleTaskExecutor Instance;
    [CanBeNullAttribute]
private TaskExecutorNotification myNotify;
    public SimpleTaskExecutor(TaskExecutorNotification notify);
    private static SimpleTaskExecutor();
    [NotNullAttribute]
public static IDisposable PushProgressCanceledInterruptableCookie(IProgressIndicator pi);
    private sealed virtual override bool JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
    private static bool ExecuteTaskNotify(string name, Action`1<IProgressIndicator> task, TaskExecutorNotification notify);
    private static bool ExecuteTaskTrivial(Action`1<IProgressIndicator> task);
}
public enum JetBrains.Application.Progress.TaskCancelable : Enum {
    public int value__;
    public static TaskCancelable No;
    public static TaskCancelable Yes;
}
public class JetBrains.Application.Progress.TaskExecutorNotification : MulticastDelegate {
    public TaskExecutorNotification(object object, IntPtr method);
    public virtual void Invoke(Lifetime lifetime, RunningTaskExecutor session);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, RunningTaskExecutor session, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class JetBrains.Application.Res.CoreImages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static UnmanagedMemoryStream ProductAboutBox { get; }
    public static UnmanagedMemoryStream ProductIcon { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static UnmanagedMemoryStream get_ProductAboutBox();
    public static UnmanagedMemoryStream get_ProductIcon();
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class JetBrains.Application.Res.StringTable : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionCantInsertAnchorNotInGroup { get; }
    internal static string ActionCantInsertCantLoad { get; }
    internal static string ActionCantInsertConflictingAnchor { get; }
    internal static string ActionCantInsertIntoNonexistentGroup { get; }
    internal static string ActionCantInsertIntoNonGroupAction { get; }
    internal static string ActionCantInsertInvalidAnchor { get; }
    internal static string ActionCantInsertInvalidRelativePosition { get; }
    internal static string ActionCantInsertMissingAnchor { get; }
    internal static string ActionCantLoad { get; }
    internal static string ActionUnnamedXmlElementName { get; }
    internal static string ExceptionBrowserForm_Close { get; }
    internal static string ExceptionBrowserForm_Copy_To_Clipboard { get; }
    internal static string ExceptionBrowserForm_Copy_URL { get; }
    internal static string ExceptionBrowserForm_Created_new_issue { get; }
    internal static string ExceptionBrowserForm_Do_Not_Show { get; }
    internal static string ExceptionBrowserForm_Double_Click { get; }
    internal static string ExceptionBrowserForm_Forget { get; }
    internal static string ExceptionBrowserForm_Message { get; }
    internal static string ExceptionBrowserForm_Mute_Selected { get; }
    internal static string ExceptionBrowserForm_Please_Describe { get; }
    internal static string ExceptionBrowserForm_Please_Note { get; }
    internal static string ExceptionBrowserForm_Remove_Selected { get; }
    internal static string ExceptionBrowserForm_Submit_Selected { get; }
    internal static string JetPopupMenuMainThread { get; }
    internal static string JetPopupMenuNoItemsBanner { get; }
    internal static string MenuAlreadyVisible { get; }
    internal static string MenuItemKeyMustBeNonNull { get; }
    internal static string NoItemsCaseShouldHaveBeenCutOffEarlier { get; }
    internal static string PendingView_Initialize_Error_Summary { get; }
    internal static string PendingView_Initialize_When_Happened { get; }
    internal static string SubmittedView_Initialize_Issue_Key { get; }
    internal static string SubmittedView_Initialize_Result { get; }
    internal static string SubmittedView_Initialize_Submitted { get; }
    internal static string UpdAllowDownloadCheckbox { get; }
    internal static string UpdAllowDownloadComment { get; }
    internal static string UpdAreNewPluginVersionsAvailable { get; }
    internal static string UpdAreNewProductVersionsAvailable { get; }
    internal static string UpdDownloadLink { get; }
    internal static string UpdEstimatedPrice { get; }
    internal static string UpdFree { get; }
    internal static string UpdIsNewPluginVersionAvailable { get; }
    internal static string UpdIsNewProductVersionAvailable { get; }
    internal static string UpdKindFeatures { get; }
    internal static string UpdKindGeneric { get; }
    internal static string UpdKindPreview { get; }
    internal static string UpdKindService { get; }
    internal static string UpdNoUpdatesAvailable { get; }
    internal static string UpdNoUpdatesAvailableForProduct { get; }
    internal static string UpdPluginUpdates { get; }
    internal static string UpdProductUpdates { get; }
    internal static string UpdReadMoreLink { get; }
    internal static string UpdThisUpdateInstallsInstalls { get; }
    internal static string UpdThisUpdateInstallsPre { get; }
    internal static string UpdUnidentifiedProduct { get; }
    internal static string UpdUnknownCompany { get; }
    internal static string UpdUntitledUpdate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionCantInsertAnchorNotInGroup();
    internal static string get_ActionCantInsertCantLoad();
    internal static string get_ActionCantInsertConflictingAnchor();
    internal static string get_ActionCantInsertIntoNonexistentGroup();
    internal static string get_ActionCantInsertIntoNonGroupAction();
    internal static string get_ActionCantInsertInvalidAnchor();
    internal static string get_ActionCantInsertInvalidRelativePosition();
    internal static string get_ActionCantInsertMissingAnchor();
    internal static string get_ActionCantLoad();
    internal static string get_ActionUnnamedXmlElementName();
    internal static string get_ExceptionBrowserForm_Close();
    internal static string get_ExceptionBrowserForm_Copy_To_Clipboard();
    internal static string get_ExceptionBrowserForm_Copy_URL();
    internal static string get_ExceptionBrowserForm_Created_new_issue();
    internal static string get_ExceptionBrowserForm_Do_Not_Show();
    internal static string get_ExceptionBrowserForm_Double_Click();
    internal static string get_ExceptionBrowserForm_Forget();
    internal static string get_ExceptionBrowserForm_Message();
    internal static string get_ExceptionBrowserForm_Mute_Selected();
    internal static string get_ExceptionBrowserForm_Please_Describe();
    internal static string get_ExceptionBrowserForm_Please_Note();
    internal static string get_ExceptionBrowserForm_Remove_Selected();
    internal static string get_ExceptionBrowserForm_Submit_Selected();
    internal static string get_JetPopupMenuMainThread();
    internal static string get_JetPopupMenuNoItemsBanner();
    internal static string get_MenuAlreadyVisible();
    internal static string get_MenuItemKeyMustBeNonNull();
    internal static string get_NoItemsCaseShouldHaveBeenCutOffEarlier();
    internal static string get_PendingView_Initialize_Error_Summary();
    internal static string get_PendingView_Initialize_When_Happened();
    internal static string get_SubmittedView_Initialize_Issue_Key();
    internal static string get_SubmittedView_Initialize_Result();
    internal static string get_SubmittedView_Initialize_Submitted();
    internal static string get_UpdAllowDownloadCheckbox();
    internal static string get_UpdAllowDownloadComment();
    internal static string get_UpdAreNewPluginVersionsAvailable();
    internal static string get_UpdAreNewProductVersionsAvailable();
    internal static string get_UpdDownloadLink();
    internal static string get_UpdEstimatedPrice();
    internal static string get_UpdFree();
    internal static string get_UpdIsNewPluginVersionAvailable();
    internal static string get_UpdIsNewProductVersionAvailable();
    internal static string get_UpdKindFeatures();
    internal static string get_UpdKindGeneric();
    internal static string get_UpdKindPreview();
    internal static string get_UpdKindService();
    internal static string get_UpdNoUpdatesAvailable();
    internal static string get_UpdNoUpdatesAvailableForProduct();
    internal static string get_UpdPluginUpdates();
    internal static string get_UpdProductUpdates();
    internal static string get_UpdReadMoreLink();
    internal static string get_UpdThisUpdateInstallsInstalls();
    internal static string get_UpdThisUpdateInstallsPre();
    internal static string get_UpdUnidentifiedProduct();
    internal static string get_UpdUnknownCompany();
    internal static string get_UpdUntitledUpdate();
}
public class JetBrains.Application.Resources.IdeThemedIcons : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.Application.Resources.VsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AggregateSourceName { get; }
    internal static string AmbiguousProjectLevelUninstal { get; }
    internal static string AmbiguousUninstall { get; }
    internal static string AmbiguousUpdate { get; }
    internal static string AskForRestoreMessage { get; }
    internal static string AskForUpdateMessage { get; }
    internal static string Console_DisclaimerText { get; }
    internal static string Console_HelpText { get; }
    internal static string Console_InitializeHostFails { get; }
    internal static string Debug_AddedFileToProject { get; }
    internal static string Debug_AddReference { get; }
    internal static string Debug_RemovedFile { get; }
    internal static string Debug_RemovedFileFromFolder { get; }
    internal static string Debug_RemovedFolder { get; }
    internal static string Debug_RemoveReference { get; }
    internal static string Dialog_DisclaimerText { get; }
    internal static string DialogTitle { get; }
    internal static string DoNotRemindAgain { get; }
    internal static string DTE_InvalidProject { get; }
    internal static string DTE_ProjectUnsupported { get; }
    internal static string ErrorReadingFile { get; }
    internal static string ExecutingScript { get; }
    internal static string FailedToAddGacReference { get; }
    internal static string FailedToAddReference { get; }
    internal static string FailedToRemoveReference { get; }
    internal static string FileConflictTitle { get; }
    internal static string IgnoreUpgrade { get; }
    internal static string Log_PackageAlreadyInstalled { get; }
    internal static string NoActivePackageSource { get; }
    internal static string NoUpdatesAvailable { get; }
    internal static string OfficialSourceName { get; }
    internal static string OperationFailed { get; }
    internal static string PackageCannotBeRemovedBecauseItIsInUse { get; }
    internal static string PackageNotInstalledInAnyProject { get; }
    internal static string PackageRestoreCompleted { get; }
    internal static string PackageRestoreConfirmation { get; }
    internal static string PackageRestoreDownloadPackageFailed { get; }
    internal static string PackageRestoreErrorMessage { get; }
    internal static string PackageRestoreErrorTryAgain { get; }
    internal static string PackageRestoreProgressMessage { get; }
    internal static string PackageRestoreSkipForProject { get; }
    internal static string PackageRestoreSkipForSolution { get; }
    internal static string PackageRestoreWaitMessage { get; }
    internal static string PackageSource_Invalid { get; }
    internal static string PackageUpdatedSuccessfully { get; }
    internal static string ProjectNotSpecified { get; }
    internal static string ReinstallProjectPackage { get; }
    internal static string ReinstallSolutionPackage { get; }
    internal static string RequestRestartToCompleteUninstall { get; }
    internal static string RestartNow { get; }
    internal static string RestoreButtonLabel { get; }
    internal static string ShowDetails { get; }
    internal static string SolutionDirectoryNotAvailable { get; }
    internal static string SolutionNotAvailable { get; }
    internal static string TemplateWizard_ErrorDialogTitle { get; }
    internal static string TemplateWizard_ExtensionManagerError { get; }
    internal static string TemplateWizard_FailedToInstallPackage { get; }
    internal static string TemplateWizard_InvalidExtensionId { get; }
    internal static string TemplateWizard_InvalidPackageElementAttributes { get; }
    internal static string TemplateWizard_InvalidRegistryValue { get; }
    internal static string TemplateWizard_InvalidRepositoryAttribute { get; }
    internal static string TemplateWizard_InvalidWizardRunKind { get; }
    internal static string TemplateWizard_MissingExtensionId { get; }
    internal static string TemplateWizard_MissingRegistryKeyName { get; }
    internal static string TemplateWizard_PackageInstallStatus { get; }
    internal static string TemplateWizard_RegistryKeyError { get; }
    internal static string TemplateWizard_VersionConflict { get; }
    internal static string UnableToFindPackageFromSource { get; }
    internal static string UnknownPackage { get; }
    internal static string UnknownPackageInProject { get; }
    internal static string VisualStudioExpressForWindows8SourceName { get; }
    internal static string Warning_DirectoryNotEmpty { get; }
    internal static string Warning_FailedToAddBindingRedirects { get; }
    internal static string Warning_FailedToDeleteMarkedPackageDirectories { get; }
    internal static string Warning_FailedToDeleteMarkedPackageDirectory { get; }
    internal static string Warning_FailedToFindMatchForRemoveReference { get; }
    internal static string Warning_FailedToMarkPackageDirectoryForDeletion { get; }
    internal static string Warning_FileAlreadyExists { get; }
    internal static string Warning_NoExactMatchForReference { get; }
    internal static string Warning_PackageNotReferencedByAnyProject { get; }
    internal static string Warning_RollingBack { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AggregateSourceName();
    internal static string get_AmbiguousProjectLevelUninstal();
    internal static string get_AmbiguousUninstall();
    internal static string get_AmbiguousUpdate();
    internal static string get_AskForRestoreMessage();
    internal static string get_AskForUpdateMessage();
    internal static string get_Console_DisclaimerText();
    internal static string get_Console_HelpText();
    internal static string get_Console_InitializeHostFails();
    internal static string get_Debug_AddedFileToProject();
    internal static string get_Debug_AddReference();
    internal static string get_Debug_RemovedFile();
    internal static string get_Debug_RemovedFileFromFolder();
    internal static string get_Debug_RemovedFolder();
    internal static string get_Debug_RemoveReference();
    internal static string get_Dialog_DisclaimerText();
    internal static string get_DialogTitle();
    internal static string get_DoNotRemindAgain();
    internal static string get_DTE_InvalidProject();
    internal static string get_DTE_ProjectUnsupported();
    internal static string get_ErrorReadingFile();
    internal static string get_ExecutingScript();
    internal static string get_FailedToAddGacReference();
    internal static string get_FailedToAddReference();
    internal static string get_FailedToRemoveReference();
    internal static string get_FileConflictTitle();
    internal static string get_IgnoreUpgrade();
    internal static string get_Log_PackageAlreadyInstalled();
    internal static string get_NoActivePackageSource();
    internal static string get_NoUpdatesAvailable();
    internal static string get_OfficialSourceName();
    internal static string get_OperationFailed();
    internal static string get_PackageCannotBeRemovedBecauseItIsInUse();
    internal static string get_PackageNotInstalledInAnyProject();
    internal static string get_PackageRestoreCompleted();
    internal static string get_PackageRestoreConfirmation();
    internal static string get_PackageRestoreDownloadPackageFailed();
    internal static string get_PackageRestoreErrorMessage();
    internal static string get_PackageRestoreErrorTryAgain();
    internal static string get_PackageRestoreProgressMessage();
    internal static string get_PackageRestoreSkipForProject();
    internal static string get_PackageRestoreSkipForSolution();
    internal static string get_PackageRestoreWaitMessage();
    internal static string get_PackageSource_Invalid();
    internal static string get_PackageUpdatedSuccessfully();
    internal static string get_ProjectNotSpecified();
    internal static string get_ReinstallProjectPackage();
    internal static string get_ReinstallSolutionPackage();
    internal static string get_RequestRestartToCompleteUninstall();
    internal static string get_RestartNow();
    internal static string get_RestoreButtonLabel();
    internal static string get_ShowDetails();
    internal static string get_SolutionDirectoryNotAvailable();
    internal static string get_SolutionNotAvailable();
    internal static string get_TemplateWizard_ErrorDialogTitle();
    internal static string get_TemplateWizard_ExtensionManagerError();
    internal static string get_TemplateWizard_FailedToInstallPackage();
    internal static string get_TemplateWizard_InvalidExtensionId();
    internal static string get_TemplateWizard_InvalidPackageElementAttributes();
    internal static string get_TemplateWizard_InvalidRegistryValue();
    internal static string get_TemplateWizard_InvalidRepositoryAttribute();
    internal static string get_TemplateWizard_InvalidWizardRunKind();
    internal static string get_TemplateWizard_MissingExtensionId();
    internal static string get_TemplateWizard_MissingRegistryKeyName();
    internal static string get_TemplateWizard_PackageInstallStatus();
    internal static string get_TemplateWizard_RegistryKeyError();
    internal static string get_TemplateWizard_VersionConflict();
    internal static string get_UnableToFindPackageFromSource();
    internal static string get_UnknownPackage();
    internal static string get_UnknownPackageInProject();
    internal static string get_VisualStudioExpressForWindows8SourceName();
    internal static string get_Warning_DirectoryNotEmpty();
    internal static string get_Warning_FailedToAddBindingRedirects();
    internal static string get_Warning_FailedToDeleteMarkedPackageDirectories();
    internal static string get_Warning_FailedToDeleteMarkedPackageDirectory();
    internal static string get_Warning_FailedToFindMatchForRemoveReference();
    internal static string get_Warning_FailedToMarkPackageDirectoryForDeletion();
    internal static string get_Warning_FileAlreadyExists();
    internal static string get_Warning_NoExactMatchForReference();
    internal static string get_Warning_PackageNotReferencedByAnyProject();
    internal static string get_Warning_RollingBack();
}
public interface JetBrains.Application.ResultList.IResultListHandler {
    [CanBeNullAttribute]
public abstract virtual Action GoToNextLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    [CanBeNullAttribute]
public abstract virtual Action GoToPrevLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
}
[FlagsAttribute]
public enum JetBrains.Application.Settings.BindToContextFlags : Enum {
    public int value__;
    public static BindToContextFlags Normal;
    public static BindToContextFlags IgnoreReadonlyFlag;
}
[ObsoleteAttribute("Use ISettingsStore::BindToContextTransient or ISettingsStore::BindToContextLive.")]
public class JetBrains.Application.Settings.ContextBoundSettingsStore : object {
    private Lifetime myLifetime;
    private SettingsStorageOnMountPoints myStorageLayered;
    private ISettingsStore myStore;
    private bool myIsIgnoringReadonlyFlag;
    private ISettingsStorageTransactionContext myTransaction;
    private ISettingsSchema JetBrains.Application.Settings.IContextBoundSettingsStore.Schema { get; }
    private IEnumerable`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints { get; }
    private bool JetBrains.Application.Settings.IContextBoundSettingsStore.IsIgnoringReadonlyFlag { get; private set; }
    public ISettingsStore SettingsStore { get; }
    public ContextBoundSettingsStore(Lifetime lifetimeLimit, SettingsStorageOnMountPoints storageLayered, ISettingsStore store, ISettingsStorageTransactionContext transaction);
    [PureAttribute]
public sealed virtual object GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
[CanBeNullAttribute]
public sealed virtual object GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public sealed virtual void RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
[NotNullAttribute]
public IEnumerable`1<object> EnumEntryIndices(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[PureAttribute]
public IEnumerable`1<object> EnumKeyIndices(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices);
    public sealed virtual void CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual bool IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override ISettingsSchema JetBrains.Application.Settings.IContextBoundSettingsStore.get_Schema();
    private sealed virtual override IEnumerable`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStore.get_InvolvedMountPoints();
    private sealed virtual override bool JetBrains.Application.Settings.IContextBoundSettingsStore.get_IsIgnoringReadonlyFlag();
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.set_IsIgnoringReadonlyFlag(bool value);
    public sealed virtual ISettingsStore get_SettingsStore();
    public void CopyTo(IContextBoundSettingsStore target, ILogger logger);
    public sealed virtual SettingsStoreChangeArgs GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IDictionary`2<object, object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IEnumerable`1<object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
    private sealed virtual override Object[] JetBrains.Application.Settings.IContextBoundSettingsStore.GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.ContextBoundSettingStoreEx : object {
    [ObsoleteAttribute("Slow. Use EnumIndexedValues instead.")]
[ExtensionAttribute]
public static IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> EnumerateIndexedEntry(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Not reviewed yet, likely to change.")]
[ExtensionAttribute]
public static void SetIndexedValues(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Not reviewed yet, likely to change.")]
public static void ResetIndexedValues(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Not reviewed yet, likely to change.")]
[ExtensionAttribute]
public static void AppendIndexedValues(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.Settings.ContextRange : object {
    [NotNullAttribute]
public Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext;
    [CanBeNullAttribute]
public Func`3<Lifetime, DataContexts, IDataContext> FGetWideContext;
    [CompilerGeneratedAttribute]
private static Func`3<Lifetime, DataContexts, IDataContext> CS$<>9__CachedAnonymousMethodDelegate1;
    public static ContextRange ApplicationWide { get; }
    protected ContextRange(Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext, Func`3<Lifetime, DataContexts, IDataContext> FGetWideContext);
    public static ContextRange get_ApplicationWide();
    public static ContextRange Smart(Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext);
    public static ContextRange Custom(Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext, Func`3<Lifetime, DataContexts, IDataContext> FGetWideContext);
    public static ContextRange ManuallyRestrictWritesToOneContext(Func`3<Lifetime, DataContexts, IDataContext> FGetContext);
    [CompilerGeneratedAttribute]
private static IDataContext <get_ApplicationWide>b__0(Lifetime lifetime, DataContexts contexts);
}
public interface JetBrains.Application.Settings.Extentions.ICachedSettingsReader`1 {
    public SettingsKey KeyExposed { get; }
    public abstract virtual TData ReadData(IContextBoundSettingsStore store);
    public abstract virtual SettingsKey get_KeyExposed();
}
public interface JetBrains.Application.Settings.Extentions.ISettingsCache {
    [CanBeNullAttribute]
public abstract virtual TData GetData(Lifetime lifetime, ICachedSettingsReader`1<TData> reader, Action`1<TData> onFirstRead);
}
public abstract class JetBrains.Application.Settings.Extentions.SettingsCacheBase : object {
    private Lifetime myLifetime;
    private ISettingsStore mySettingsStore;
    [CanBeNullAttribute]
private SettingsCacheBase myParentCache;
    private ConcurrentDictionary`2<object, object> myCachedData;
    [CompilerGeneratedAttribute]
private Func`3<Lifetime, DataContexts, IDataContext> <FContext>k__BackingField;
    private Func`3<Lifetime, DataContexts, IDataContext> FContext { get; private set; }
    protected SettingsCacheBase(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheBase parentCache, Func`3<Lifetime, DataContexts, IDataContext> fContext);
    protected SettingsCacheBase(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheBase parentCache, IDataContext dataContext);
    private SettingsCacheBase(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheBase parentCache);
    [CompilerGeneratedAttribute]
private Func`3<Lifetime, DataContexts, IDataContext> get_FContext();
    [CompilerGeneratedAttribute]
private void set_FContext(Func`3<Lifetime, DataContexts, IDataContext> value);
    private static bool ContextsHaveDifferences(Func`3<Lifetime, DataContexts, IDataContext> dc1, Func`3<Lifetime, DataContexts, IDataContext> dc2, SettingsKey key);
    protected virtual bool ContextsHaveDifferencesInternal(Func`3<Lifetime, DataContexts, IDataContext> dc1, Func`3<Lifetime, DataContexts, IDataContext> dc2, SettingsKey key);
    public sealed virtual T GetData(Lifetime lifetime, ICachedSettingsReader`1<T> reader, Action`1<T> onFirstRead);
}
[TypeConverterAttribute("JetBrains.Application.Settings.GuidIndex/GuidIndexConverter")]
[ValueSerializerAttribute("JetBrains.Application.Settings.GuidIndex/GuidIndexValueSerializer")]
public class JetBrains.Application.Settings.GuidIndex : ValueType {
    private static int BytesInGuid;
    private static int DwordsInGuid;
    [FixedBufferAttribute("System.Byte", "16")]
private <myData>e__FixedBuffer1 myData;
    private UInt32 myDwData0;
    private UInt32 myDwData1;
    private UInt32 myDwData2;
    private UInt32 myDwData3;
    public static GuidIndex Empty;
    public GuidIndex(Guid guid);
    public GuidIndex(string s);
    public GuidIndex(Byte[] data);
    private GuidIndex(SerializationInfo info, StreamingContext context);
    private static GuidIndex();
    public static GuidIndex Parse(string s);
    public static GuidIndex NewGuid();
    public virtual string ToString();
    public Guid ToGuid();
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(GuidIndex other);
    public sealed virtual bool Equals(GuidIndex other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(GuidIndex left, GuidIndex right);
    public static bool op_Inequality(GuidIndex left, GuidIndex right);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public interface JetBrains.Application.Settings.IContextBoundSettingsStore {
    [NotNullAttribute]
public IEnumerable`1<ISettingsStorageMountPoint> InvolvedMountPoints { get; }
    [ObsoleteAttribute("Cannot now be changing readability on a running context-bound.")]
public bool IsIgnoringReadonlyFlag { get; public set; }
    [NotNullAttribute]
public ISettingsStore SettingsStore { get; }
    [NotNullAttribute]
public ISettingsSchema Schema { get; }
    [PureAttribute]
public abstract virtual object GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual Object[] GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual object GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public abstract virtual void RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
public abstract virtual bool IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IEnumerable`1<ISettingsStorageMountPoint> get_InvolvedMountPoints();
    public abstract virtual bool get_IsIgnoringReadonlyFlag();
    public abstract virtual void set_IsIgnoringReadonlyFlag(bool value);
    public abstract virtual ISettingsStore get_SettingsStore();
    public abstract virtual ISettingsSchema get_Schema();
    [PureAttribute]
[NotNullAttribute]
public abstract virtual SettingsStoreChangeArgs GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
[NotNullAttribute]
public abstract virtual IDictionary`2<object, object> EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<object> EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
}
public interface JetBrains.Application.Settings.IContextBoundSettingsStoreLive {
    [NotNullAttribute]
public IListEvents`1<ISettingsStorageMountPoint> InvolvedMountPointsLive { get; }
    public abstract virtual IProperty`1<TValue> GetValueProperty(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IListEvents`1<ISettingsStorageMountPoint> get_InvolvedMountPointsLive();
}
public interface JetBrains.Application.Settings.IHaveDefaultSettings {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public abstract virtual string get_Name();
}
public interface JetBrains.Application.Settings.IHaveDefaultSettingsStream {
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public abstract virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
    public abstract virtual string get_Name();
}
public interface JetBrains.Application.Settings.IIndexedEntry`2 {
    public abstract virtual bool ContainsIndex(TIndex index);
    [NotNullAttribute]
public abstract virtual TIndexedValue Get(TIndex index, TIndexedValue defaultvalue);
    [CanBeNullAttribute]
public abstract virtual TIndexedValue TryGet(TIndex index);
    public abstract virtual bool TryGet(TIndex index, TIndexedValue& value);
    public abstract virtual void SnapshotAndFreeze();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<TIndex> EnumPossibleIndices();
    public abstract virtual IEnumerable`1<KeyValuePair`2<TIndex, TIndexedValue>> EnumIndexedValues();
}
public interface JetBrains.Application.Settings.IIsAvailable {
    public abstract virtual bool IsAvailable(IDataContext context);
}
public interface JetBrains.Application.Settings.IIsAvailableOptimization {
    [NotNullAttribute]
public abstract virtual IIsAvailableOptimizedGroup CreateEmptyGroup();
}
public interface JetBrains.Application.Settings.IIsAvailableOptimizedGroup {
    public IEnumerable`1<object> Items { get; }
    public abstract virtual bool TryAddItem(Lifetime lifetime, object item, IIsAvailable availability);
    public abstract virtual void EvaluateItems(IList items, IDataContext context);
    public abstract virtual IEnumerable`1<object> get_Items();
}
public class JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive : ContextBoundSettingsStoreTransient {
    private Lifetime myLifetime;
    private ValuePropertiesSupport myValuePropertiesSupport;
    private ClientInfo myChangesClient;
    private IListEvents`1<ISettingsStorageMountPoint> myInvolvedMountPointsLive;
    internal static TimeSpan myTimeoutSyncLock;
    private ISignal`1<SettingsStoreChangeArgs> JetBrains.Application.Settings.ISettingsChangedEventSource.Changed { get; }
    private IListEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStoreLive.InvolvedMountPointsLive { get; }
    public ContextBoundSettingsStoreLive(Lifetime lifetime, ISettingsStore store, IContextBoundMountsInfoLive mountsinfo, BindToContextFlags flags, ISettingsStorageTransactionContext transaction, SettingsStoreChangeSink changes, ISettingsChangeDispatch changedispatch, ILogger logger);
    private static ContextBoundSettingsStoreLive();
    private sealed virtual override IProperty`1<TValue> JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override ISignal`1<SettingsStoreChangeArgs> JetBrains.Application.Settings.ISettingsChangedEventSource.get_Changed();
    private sealed virtual override IListEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStoreLive.get_InvolvedMountPointsLive();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3a(SettingsStoreChangeArgs args);
}
public class JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreTransient : object {
    private OuterLifetime myLifetime;
    protected ISettingsStore myStore;
    private IContextBoundMountsInfo myMountsInfo;
    private SettingsStorageOnMountPoints myStorageLayered;
    private SetFlags myIsIgnoringReadonlyFlag;
    [CanBeNullAttribute]
private ISettingsStorageTransactionContext myTransaction;
    private ISettingsChangeDispatch myChangeDispatch;
    protected IExceptionThrowingLogger myLogger;
    private bool myForceWriteDefaultValues;
    private Func`2<KeyPathComponents, bool> myFFillKeyPathComponentsAndCheckIsDefined_CheckKey;
    private Func`2<KeyPathComponents, bool> myFCreateIndexedKey_DefineKey;
    [CanBeNullAttribute]
[ThreadStaticAttribute]
private static KeyPathComponentsCached myKeyPathComponentsCache;
    private IEnumerable`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints { get; }
    private bool JetBrains.Application.Settings.IContextBoundSettingsStore.IsIgnoringReadonlyFlag { get; private set; }
    private ISettingsStore JetBrains.Application.Settings.IContextBoundSettingsStore.SettingsStore { get; }
    private ISettingsSchema JetBrains.Application.Settings.IContextBoundSettingsStore.Schema { get; }
    [NotNullAttribute]
protected static KeyPathComponentsCached KeyPathComponentsCache { get; }
    public ContextBoundSettingsStoreTransient(OuterLifetime lifetime, ISettingsStore store, IContextBoundMountsInfo mountsinfo, BindToContextFlags flags, ISettingsStorageTransactionContext transaction, ISettingsChangeDispatch changedispatch, ILogger logger, bool forceWriteDefaultValues);
    private sealed virtual override object JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override Object[] JetBrains.Application.Settings.IContextBoundSettingsStore.GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(KeyPathComponents keyPathComponents, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices);
    private void FillKeyPathComponentsWithoutChecking(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined_CheckKey(KeyPathComponents keyPathComponents);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override object JetBrains.Application.Settings.IContextBoundSettingsStore.GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    private void SetIndexedValueCore(KeyPathComponents keyPathComponents, SettingsIndexedEntry entry, object entryIndex, object value, bool isRemovingIndexedValue);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IDictionary`2<object, object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
private sealed virtual override IEnumerable`1<object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private bool CreateIndexedKey_DefineKey(KeyPathComponents keyPathComponents);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override bool JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IEnumerable`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStore.get_InvolvedMountPoints();
    private sealed virtual override bool JetBrains.Application.Settings.IContextBoundSettingsStore.get_IsIgnoringReadonlyFlag();
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.set_IsIgnoringReadonlyFlag(bool value);
    private sealed virtual override ISettingsStore JetBrains.Application.Settings.IContextBoundSettingsStore.get_SettingsStore();
    private sealed virtual override ISettingsSchema JetBrains.Application.Settings.IContextBoundSettingsStore.get_Schema();
    private sealed virtual override SettingsStoreChangeArgs JetBrains.Application.Settings.IContextBoundSettingsStore.GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    protected static KeyPathComponentsCached get_KeyPathComponentsCache();
}
public class JetBrains.Application.Settings.Implementation.DefaultIsAvailableOptimizedGroup : object {
    private object myItem;
    private IIsAvailable myAvailability;
    private Object[] myItemArrayWhenPresent;
    private IEnumerable`1<object> JetBrains.Application.Settings.IIsAvailableOptimizedGroup.Items { get; }
    public DefaultIsAvailableOptimizedGroup(object item, IIsAvailable availability);
    private sealed virtual override bool JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(Lifetime lifetime, object item, IIsAvailable availability);
    private sealed virtual override void JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItems(IList items, IDataContext context);
    private sealed virtual override IEnumerable`1<object> JetBrains.Application.Settings.IIsAvailableOptimizedGroup.get_Items();
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem>b__0();
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem>b__1();
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints : object {
    private DefaultSettingsComposedStorage myDefaultSettingsComposedStorage;
    private FreeThreadedGroupingEvent myGeventCompose;
    private InternKeyPathComponent myInterned;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ICollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private ICollectionEvents`1<ISettingsStorage> myStorages;
    private IThreading myThreading;
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    public DefaultSettingsMountPoints(Lifetime lifetime, ISettingsLogger logging, IViewable`1<IHaveDefaultSettingsStream> streamProviders, IViewable`1<IHaveDefaultSettings> settingsProviders, IThreading threading, InternKeyPathComponent interned);
    public void LoadFromResources(Lifetime lifetime, Assembly assembly, string resname);
    public void LoadFromStream(Lifetime lifetime, string name, Stream stream, StorageCacheIdentity identity);
    private void AttachDefaultSettingsStorage(Lifetime lifetime, string name, Func`3<Lifetime, string, ISettingsStorage> storager, Action`1<ISettingsStorageMountPoint> initializer);
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    private StorageCacheIdentity TryGetIdentityFromStreamer(IHaveDefaultSettingsStream streamer, Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime lifeProvider, IHaveDefaultSettings provider);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(Lifetime lifeStreamer, IHaveDefaultSettingsStream streamer);
    [CompilerGeneratedAttribute]
private ISettingsStorage <.ctor>b__3(Lifetime lt, string name);
    [CompilerGeneratedAttribute]
private void <AttachDefaultSettingsStorage>b__1d();
}
public abstract class JetBrains.Application.Settings.Implementation.HaveDefaultSettings : object {
    private ILogger myLogger;
    private ISettingsSchema mySettingsSchema;
    public string Name { get; }
    protected HaveDefaultSettings(ILogger logger, ISettingsSchema settingsSchema);
    protected void SetValue(ISettingsStorageMountPoint mount, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    protected void SetIndexedValue(ISettingsStorageMountPoint mount, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex index, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    protected void SetIndexedValue(ISettingsStorageMountPoint mount, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndexValue, TEntryIndexValue>>> lambdaexpression, TEntryIndexValue indexValue, IDictionary`2<SettingsKey, object> keyIndices);
    protected void SetIndexedKey(ISettingsStorageMountPoint mount, TKey key, object keyIndex);
    public abstract virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public abstract virtual string get_Name();
}
public class JetBrains.Application.Settings.Implementation.IsAvailable : object {
    [NotNullAttribute]
public static IIsAvailable Always;
    [NotNullAttribute]
public static IIsAvailable Never;
    private Func`2<IDataContext, bool> myFIsAvailable;
    public IsAvailable(Func`2<IDataContext, bool> FIsAvailable);
    private static IsAvailable();
    private sealed virtual override bool JetBrains.Application.Settings.IIsAvailable.IsAvailable(IDataContext context);
    [NotNullAttribute]
public static IIsAvailable Create(Func`2<IDataContext, bool> FIsAvailable);
}
public class JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1 : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
public DataConstant`1<TDataConstant> Constant;
    [NotNullAttribute]
public TDataConstant Value;
    private IShellLocks myLocks;
    private static int myReadLockTimeout;
    public IsAvailableByDataConstant`1(Lifetime lifetime, DataConstant`1<TDataConstant> constant, TDataConstant value, IShellLocks locks);
    private static IsAvailableByDataConstant`1();
    private sealed virtual override bool JetBrains.Application.Settings.IIsAvailable.IsAvailable(IDataContext context);
    private sealed virtual override IIsAvailableOptimizedGroup JetBrains.Application.Settings.IIsAvailableOptimization.CreateEmptyGroup();
}
public interface JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch {
    [NotNullAttribute]
public abstract virtual Action RegisterForDispatch(Lifetime lifetime, Action FDispatch);
    public abstract virtual void SuppressThreadDispatch();
    public abstract virtual void ResumeThreadDispatch();
}
public class JetBrains.Application.Settings.Implementation.Provider`1 : object {
    private ICollectionEvents`1<TItem> myItems;
    [NotNullAttribute]
public ICollectionEvents`1<TItem> Items { get; }
    public Provider`1(Lifetime lifetime, string name);
    public sealed virtual ICollectionEvents`1<TItem> get_Items();
}
public static class JetBrains.Application.Settings.Implementation.ReadonlyXmlStreamSettingsStorage : object {
    [NotNullAttribute]
public static ISettingsStorage ReadFromXmlStream(Lifetime lifetime, string name, Stream stream, ILogger logger, InternKeyPathComponent interned, StorageCacheIdentity identity);
}
public static class JetBrains.Application.Settings.Implementation.ScalarSettingsStoreAccess : object {
    public static void SetValue(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, object value, bool isWritingDefaultValues, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void ResetValue(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    [CanBeNullAttribute]
public static object GetValue(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object GetIndexedValue(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    public static void SetIndexedValue(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, object value, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void RemoveIndexedValue(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, bool isForcingRemovalRecord, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static void SetIndexedValueCore(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, object value, bool isForcingRemovalRecord, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    public static bool IsIndexedKeyDefined(ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void CreateIndexedKey(ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void DeleteIndexedKey(ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, bool isForcingRemovalRecord, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, ISettingsStorageMountPoint mount, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    private static bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static bool FillKeyPathComponentsAndCheckIsDefined_CheckKey(KeyPathComponents keyPathComponents, ISettingsStorageMountPoint mount, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static void FillKeyPathComponentsWithoutChecking(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices, IExceptionThrowingLogger logger);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Implementation.SettingsChangeDispatch : object {
    private bool myIsAsyncProhibited;
    private int mySuspendCount;
    private FreeThreadedGroupingEvent myGeventSettingsChanged;
    public static TimeSpan OptionChangeGroupingInterval;
    private SpinWaitLock myLockDispatchRequests;
    private SpinWaitLock myLockNoDispatchReentrancy;
    private JetHashSet`1<Action> myHashDispatchRequests;
    private ILogger myLogger;
    private static IEqualityComparer`1<Action> myDelegateComparer;
    private SynchronizedLifetime myLifetime;
    public SettingsChangeDispatch(SynchronizedLifetime lifetime, ISettingsLogger settingsLogger, IThreading threading, Nullable`1<bool> isAsyncProhibited);
    private static SettingsChangeDispatch();
    private void GroupingEventDispatchChanges();
    private sealed virtual override Action JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.RegisterForDispatch(Lifetime lifetime, Action FDispatch);
    private void DispatchRequested(Action FClient);
    protected virtual void GroupingEventRequestDispatch();
    private sealed virtual override void JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.SuppressThreadDispatch();
    private sealed virtual override void JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.ResumeThreadDispatch();
    protected void CommitPendingChangesCore();
    [CompilerGeneratedAttribute]
private void <GroupingEventDispatchChanges>b__0();
}
public static class JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization : object {
    [CanBeNullAttribute]
public static object DeserializeStorageValueToEntryValue(SettingsScalarEntry entry, object valueInStorage, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object DeserializeStorageValueToEntryValue(SettingsIndexedEntry entry, object valueInStorage, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object SerializeEntryValueToStorageValue(SettingsScalarEntry entry, object valueInEntry, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static object SerializeEntryValueToStorageValue(SettingsIndexedEntry entry, object valueInEntry, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static object SerializeEntryIndexToStorageValue(SettingsIndexedEntry entry, object valueIndexAtRuntime, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object DeserializeStorageKeyToEntryIndex(SettingsIndexedEntry entry, string subkey, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object DeserializeStorageKeyToKeyIndex(SettingsIndexedKey key, string subkey, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static string SerializeEntryIndexToStorageKey(SettingsIndexedEntry entry, object valueOfIndex, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static string SerializeKeyIndexToStorageKey(SettingsIndexedKey key, object valueOfIndex, IExceptionThrowingLogger logger);
}
public class JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint : object {
    private ISettingsStorage myStorage;
    private MountPath myPathInStorage;
    private double myPriority;
    private IIsAvailable myIsAvailable;
    private string myName;
    private MountPointFlags myFlags;
    private IPropertyBag myMetadata;
    private IIsAvailable JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable { get; }
    private string JetBrains.Application.Settings.ISettingsStorageMountPoint.Name { get; }
    private double JetBrains.Application.Settings.ISettingsStorageMountPoint.Priority { get; }
    private ISettingsStorage JetBrains.Application.Settings.ISettingsStorageMountPoint.Storage { get; }
    private MountPath JetBrains.Application.Settings.ISettingsStorageMountPoint.PathInStorage { get; }
    private MountPointFlags JetBrains.Application.Settings.ISettingsStorageMountPoint.Flags { get; }
    private IPropertyBag JetBrains.Application.Settings.ISettingsStorageMountPoint.Metadata { get; }
    public SettingsStorageMountPoint(ISettingsStorage storage, MountPath pathInStorage, MountPointFlags flags, double priority, IIsAvailable isAvailable, string name);
    private sealed virtual override IIsAvailable JetBrains.Application.Settings.ISettingsStorageMountPoint.get_IsAvailable();
    private sealed virtual override string JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Name();
    private sealed virtual override double JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Priority();
    private sealed virtual override ISettingsStorage JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Storage();
    private sealed virtual override MountPath JetBrains.Application.Settings.ISettingsStorageMountPoint.get_PathInStorage();
    public virtual string ToString();
    private sealed virtual override MountPointFlags JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Flags();
    private sealed virtual override IPropertyBag JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Metadata();
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints : object {
    private Lifetime myLifetimeComponent;
    [NotNullAttribute]
public IEnumerable`1<ISettingsStorageMountPoint> EnumMountPointsLiveOrdered;
    [NotNullAttribute]
public ICollectionEvents`1<ISettingsStorageMountPoint> MountPoints;
    private IList`1<MountsGrouped> myMountsGroupedByAvailabilityLocked;
    private SpinWaitLock myLockMountsGroupedByAvailabilityLocked;
    private MountsGrouped[] myMountsGroupedByAvailabilityLockFree;
    private IExceptionThrowingLogger myLogger;
    private static Func`2<MountsGrouped, double> myFGetGroupPriority;
    public static SettingsStorageMountPoints Empty;
    private SelfCheckControl mySelfCheckControl;
    [CompilerGeneratedAttribute]
private static Comparison`1<ISettingsStorageMountPoint> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<MountsGrouped, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<MountsGrouped, IEnumerable`1<object>> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<MountsGrouped, double> CS$<>9__CachedAnonymousMethodDelegate1e;
    public SettingsStorageMountPoints(Lifetime lifetime, IViewable`1<IProvider`1<ISettingsStorageMountPoint>> mounts, IThreading threading, ISettingsLogger logging, SelfCheckControl selfCheckControl);
    private static SettingsStorageMountPoints();
    private void Init_ForEachMount(Lifetime lifetime, ISettingsStorageMountPoint mount, IThreading threading, IExceptionThrowingLogger logger);
    private void Init_ForEachMount_TryAddToExistingGroup(Lifetime lifetime, ISettingsStorageMountPoint mount, IExceptionThrowingLogger logger, Boxed`1<IIsAvailableOptimizedGroup> groupAddedToBox, Int32& nInsertNewGroupAtIndex);
    private void Init_ForEachMount_AddToNewGroup(Lifetime lifetime, ISettingsStorageMountPoint mount, int nInsertNewGroupAtIndex, Boxed`1<IIsAvailableOptimizedGroup> groupAddedToBox);
    private void Init_ForEachMount_CleanupEmptyGroup(ISettingsStorageMountPoint mount, ILogger logger, Boxed`1<IIsAvailableOptimizedGroup> groupAddedToBox);
    [NotNullAttribute]
public IEnumerable`1<ISettingsStorageMountPoint> FilterMountsByContext(IDataContext context);
    private void AssertConsistentSlow();
    [CompilerGeneratedAttribute]
private static int <.ctor>b__1(ISettingsStorageMountPoint α, ISettingsStorageMountPoint β);
    [CompilerGeneratedAttribute]
private void <Init_ForEachMount>b__b();
    [CompilerGeneratedAttribute]
private static bool <AssertConsistentSlow>b__10(MountsGrouped grouped);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<object> <AssertConsistentSlow>b__11(MountsGrouped grouped);
    [CompilerGeneratedAttribute]
private void <AssertConsistentSlow>b__13(MountsGrouped grouped);
    [CompilerGeneratedAttribute]
private double <AssertConsistentSlow>b__15(double prev, ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private static double <.cctor>b__1d(MountsGrouped group);
}
public class JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints : object {
    private string myName;
    private IContextBoundMountsInfo myMountsInfo;
    private IExceptionThrowingLogger myLogger;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, ISettingsStorage> CS$<>9__CachedAnonymousMethodDelegate13;
    public string Name { get; }
    public SettingsStorageOnMountPoints(string name, IContextBoundMountsInfo mountsinfo, IExceptionThrowingLogger logger);
    [ObsoleteAttribute]
[CanBeNullAttribute]
public object GetObsolete(string key, ISettingsStorageTransactionContext transaction);
    [CanBeNullAttribute]
public object GetRaw(KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction);
    [ObsoleteAttribute]
[CanBeNullAttribute]
public ValueFromMount GetExObsolete(string key, ISettingsStorageTransactionContext transaction);
    public ValueFromMount GetExRaw(KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ObsoleteAttribute]
public void SetObsolete(string key, object value, bool isIgnoreReadonlyFlag, ISettingsStorageTransactionContext transaction);
    public void SetRaw(KeyPathComponents keyPathComponentsWithEmptySlot, object value, bool isIgnoreReadonlyFlag, ISettingsStorageTransactionContext transaction);
    public SetSmartResult SetSmartRaw(KeyPathComponents keyPathComponentsWithEmptySlot, object valuePrimary, SetFlags flags, ISettingsStorageTransactionContext transaction);
    public SetSmartResult SetSmartRaw(KeyPathComponents keyPathComponentsWithEmptySlot, object valuePrimary, SetFlags flags, ISettingsStorageTransactionContext transaction, KeyPathComponent& componentSecondary, object valueSecondary);
    [ObsoleteAttribute]
[NotNullAttribute]
public ICollection`1<string> EnumKeysObsolete(string keyPrefix, ISettingsStorageTransactionContext transaction);
    [ObsoleteAttribute]
public void CopyToObsolete(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transactionThis, ISettingsStorageTransactionContext transactionTarget, ILogger logger, string sRootKey);
    public sealed virtual string get_Name();
    public virtual string ToString();
    public void EraseObsolete(string key, bool isIgnoringReadonlyFlag, ISettingsStorageTransactionContext transaction);
    [CanBeNullAttribute]
public void EraseRaw(KeyPathComponents keyPathComponentsWithEmptySlot, bool isIgnoringReadonlyFlag, ISettingsStorageTransactionContext transaction);
    [CanBeNullAttribute]
public void EraseSlow(KeyPathComponents keyPathComponentsExact, bool isIgnoringReadonlyFlag, ISettingsStorageTransactionContext transaction);
    public static bool IsMountWritable(ISettingsStorageMountPoint mount, bool isIgnoringReadonlyFlag);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    [CanBeNullAttribute]
public void EnumRaw(KeyPathComponents keyPathComponentsWithEmptySlot, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    [CompilerGeneratedAttribute]
private static bool <SetObsolete>b__2(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private static bool <SetObsolete>b__3(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private static bool <SetRaw>b__6(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private static bool <SetRaw>b__7(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private static ISettingsStorage <JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction>b__12(ISettingsStorageMountPoint mount);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Implementation.SettingsStore : object {
    private Lifetime myLifetime;
    private SettingsStorageMountPoints myMountPoints;
    [NotNullAttribute]
private ISettingsSchema mySchema;
    [CanBeNullAttribute]
private ISettingsStorageTransactionContext myTransactionContext;
    private ISettingsChangeDispatch myChangeDispatch;
    [NotNullAttribute]
private DataContexts myDataContexts;
    private SettingsStoreChangeSink myChangeSink;
    private ClientInfo myChangeSinkAllMountsClient;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, ISettingsStorage> CS$<>9__CachedAnonymousMethodDelegate8;
    [NotNullAttribute]
public ISettingsSchema Schema { get; }
    [NotNullAttribute]
public DataContexts DataContexts { get; }
    [NotNullAttribute]
public SettingsStorageMountPoints MountPoints { get; }
    public ISignal`1<SettingsStoreChangeArgs> Changed { get; }
    private ISettingsStorageTransactionContext JetBrains.Application.Settings.ISettingsStore.MountingPointsTransaction { get; }
    public SettingsStore(Lifetime lifetime, ISettingsSchema schema, SettingsStorageMountPoints mountpoints, DataContexts dataContexts, ISettingsStorageTransactionContext transaction, ISettingsLogger logging, ISettingsChangeDispatch changedispatch);
    [DebuggerStepThroughAttribute]
public sealed virtual ISettingsSchema get_Schema();
    [DebuggerStepThroughAttribute]
public sealed virtual DataContexts get_DataContexts();
    [NotNullAttribute]
public sealed virtual IContextBoundSettingsStore BindToContext(IDataContext context);
    public sealed virtual IContextBoundSettingsStore BindToContexts(IDataContext contextNarrow, IDataContext contextWide);
    public sealed virtual SettingsStorageMountPoints get_MountPoints();
    public sealed virtual ISignal`1<SettingsStoreChangeArgs> get_Changed();
    public sealed virtual ISettingsStoreInTransaction CreateNestedTransaction(Lifetime lifetime, string name);
    public sealed virtual IEnumerable`1<ISettingsStorageMountPoint> GetOrderedMountPointsInContext(IDataContext context);
    public sealed virtual IContextBoundSettingsStoreLive BindToContextLive(Lifetime lifetime, ContextRange contextrange, BindToContextFlags flags);
    public sealed virtual IContextBoundSettingsStore BindToContextTransient(ContextRange contextrange, BindToContextFlags flags);
    public sealed virtual IContextBoundSettingsStore BindToMountPoints(IEnumerable`1<ISettingsStorageMountPoint> mounts, ISettingsStorageMountPoint mountLastInWideContext, BindToContextFlags flags);
    public sealed virtual IContextBoundSettingsStore BindToMountPointWithForcedDefaultValueWrites(ISettingsStorageMountPoint mount);
    public sealed virtual IContextBoundSettingsStoreLive BindToMountPoints(Lifetime lifetime, IListEvents`1<ISettingsStorageMountPoint> mounts, IProperty`1<ISettingsStorageMountPoint> mountLastInWideContext, BindToContextFlags flags);
    private sealed virtual override void JetBrains.Application.Settings.ISettingsStoreInTransaction.CommitTransaction();
    private sealed virtual override void JetBrains.Application.Settings.ISettingsStoreInTransaction.RevertTransaction();
    private sealed virtual override ISettingsStorageTransactionContext JetBrains.Application.Settings.ISettingsStore.get_MountingPointsTransaction();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static ISettingsStorage <CreateNestedTransaction>b__7(ISettingsStorageMountPoint mount);
}
public class JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink : object {
    private Lifetime myLifetime;
    private ISettingsStore myStore;
    private Action myFRequestDispatch;
    private SpinWaitLockRef myLock;
    private OneToSetMap`2<ClientInfo, KeyPathComponents> myMapClientsToSimpleChanges;
    private OneToSetMap`2<ClientInfo, ISettingsStorageMountPoint> myMapClientsToWholeMountChanges;
    private OneToSetMap`2<ISettingsStorageMountPoint, ClientInfo> myMapMountToClients;
    private Action`4<Lifetime, ClientInfo, ISettingsStorageMountPoint, bool> myFRegisterMount;
    private ILogger myLogger;
    public SettingsStoreChangeSink(Lifetime lifetime, ISettingsStore store, ISettingsStorageTransactionContext transaction, ILogger logger, ISettingsChangeDispatch changedispatch);
    private void Init_Logging(Lifetime lifetime, ILogger logger, ISettingsStore store);
    private void RegisterMount(Lifetime lifeClientMount, ClientInfo client, ISettingsStorageMountPoint mount, bool isWithAddAcknowledgement);
    private void DispatchChanges();
    [NotNullAttribute]
public ClientInfo RegisterClientForMounts(Lifetime lifetime, IEnumerable`1<ISettingsStorageMountPoint> mountsInitial);
    [NotNullAttribute]
public ClientInfo RegisterClientForMountsLive(Lifetime lifetime, ICollectionEvents`1<ISettingsStorageMountPoint> mountsLive);
    private void SinkMountChanges(Lifetime lifetime, ISettingsStorageMountPoint mount, ISettingsStorageTransactionContext transaction, ILogger logger);
}
public static class JetBrains.Application.Settings.Implementation.StoreToStorageTranslation : object {
    [NotNullAttribute]
public static string SettingsEntry_To_StorageKey(SettingsEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger);
    [NotNullAttribute]
public static string SettingsEntryValueAttribute_To_StorageKey(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> mappingKeys, ILogger logger);
    [NotNullAttribute]
public static string SettingsKey_To_StorageKey(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static string AppendIndex(string sKeyBase, SettingsIndexedKey key, object index, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static string AppendIndex(string sKeyBase, SettingsIndexedEntry entry, object index, ILogger logger);
    [NotNullAttribute]
public static string AppendMetadata(string sKeyBase, string sMetadataName);
    [NotNullAttribute]
public static string AppendLocalName(string sKeyBase, string sLocalName);
    [NotNullAttribute]
public static IList`1<SettingsKeyInstance> ParseStorageKeys(JetHashSetSorted`1<KeyPathComponents> keys, ISettingsSchema schema, ILogger logger);
    private static void ParseStorageKeys_Key(IList`1<SettingsKeyInstance> rootinstances, KeyPathComponents change, ISettingsSchema schema, List`1<StorageKeyParsedComponent> parsercache, IExceptionThrowingLogger logger);
    private static void ParseStorageKeys_Key_Metadata(SettingsEntryInstance chParentEntry, SettingsKeyInstance chParentKey, KeyPathComponent pathcomponent, IList`1<KeyPathComponent> tokens, int nParserPos);
    public static bool FillKeyPathComponents(KeyPathComponents keyPathComponents, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger, Func`2<KeyPathComponents, bool> FCallAfterEachIndexedKey);
    public static void AppendEntryKeyPathComponent(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices, IExceptionThrowingLogger logger);
}
public class JetBrains.Application.Settings.IndexedEntry`2 : object {
    [CanBeNullAttribute]
private IContextBoundSettingsStore myStore;
    private SettingsIndexedEntry myEntry;
    private IDictionary`2<SettingsKey, object> myKeyIndices;
    private ILogger myLogger;
    [CanBeNullAttribute]
private Dictionary`2<TIndex, TIndexedValue> mySnapshot;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<KeyValuePair`2<TIndex, TIndexedValue>>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<KeyValuePair`2<TIndex, TIndexedValue>>, KeyValuePair`2<TIndex, TIndexedValue>> CS$<>9__CachedAnonymousMethodDelegate5;
    public IndexedEntry`2(IContextBoundSettingsStore store, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger);
    private sealed virtual override bool JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.ContainsIndex(TIndex index);
    private void Set(TIndex index, TIndexedValue value);
    private sealed virtual override TIndexedValue JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.Get(TIndex index, TIndexedValue defaultvalue);
    private sealed virtual override TIndexedValue JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.TryGet(TIndex index);
    private sealed virtual override bool JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.TryGet(TIndex index, TIndexedValue& value);
    private bool TryGetCore(TIndex index, TIndexedValue& value);
    private void Remove(TIndex index);
    public sealed virtual void SnapshotAndFreeze();
    [NotNullAttribute]
public sealed virtual IEnumerable`1<TIndex> EnumPossibleIndices();
    public sealed virtual IEnumerable`1<KeyValuePair`2<TIndex, TIndexedValue>> EnumIndexedValues();
    [CompilerGeneratedAttribute]
private Nullable`1<KeyValuePair`2<TIndex, TIndexedValue>> <EnumIndexedValues>b__0(TIndex index);
    [CompilerGeneratedAttribute]
private static bool <EnumIndexedValues>b__1(Nullable`1<KeyValuePair`2<TIndex, TIndexedValue>> x);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<TIndex, TIndexedValue> <EnumIndexedValues>b__2(Nullable`1<KeyValuePair`2<TIndex, TIndexedValue>> x);
}
public interface JetBrains.Application.Settings.IProvider`1 {
    public ICollectionEvents`1<TItem> Items { get; }
    public abstract virtual ICollectionEvents`1<TItem> get_Items();
}
public interface JetBrains.Application.Settings.ISettingsChangedEventSource {
    [NotNullAttribute]
public ISignal`1<SettingsStoreChangeArgs> Changed { get; }
    public abstract virtual ISignal`1<SettingsStoreChangeArgs> get_Changed();
}
public interface JetBrains.Application.Settings.ISettingsOptimization {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual object GetKey(IContextBoundSettingsStore store, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetKey(IContextBoundSettingsStore store, SettingsKey key, object value, IDictionary`2<SettingsKey, object> keyIndices);
}
public interface JetBrains.Application.Settings.ISettingsSchema {
    [NotNullAttribute]
public IEnumerable`1<SettingsKey> RootKeys { get; }
    [NotNullAttribute]
public abstract virtual SettingsKey GetKey(Type typeSettingsClass);
    [NotNullAttribute]
public abstract virtual SettingsKey GetKey();
    [NotNullAttribute]
public abstract virtual SettingsIndexedKey GetIndexedKey();
    [NotNullAttribute]
public abstract virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, object>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsEntry GetEntry(Type typeSettingsClass, string membername);
    public abstract virtual IEnumerable`1<SettingsKey> get_RootKeys();
    [NotNullAttribute]
public abstract virtual SettingsScalarEntry GetScalarEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression);
}
public interface JetBrains.Application.Settings.ISettingsStorageMountPoint {
    public string Name { get; }
    [NotNullAttribute]
public IIsAvailable IsAvailable { get; }
    public double Priority { get; }
    public MountPointFlags Flags { get; }
    [NotNullAttribute]
public IPropertyBag Metadata { get; }
    [NotNullAttribute]
public ISettingsStorage Storage { get; }
    [NotNullAttribute]
public MountPath PathInStorage { get; }
    public abstract virtual string get_Name();
    public abstract virtual IIsAvailable get_IsAvailable();
    public abstract virtual double get_Priority();
    public abstract virtual MountPointFlags get_Flags();
    public abstract virtual IPropertyBag get_Metadata();
    public abstract virtual ISettingsStorage get_Storage();
    public abstract virtual MountPath get_PathInStorage();
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.ISettingsStorageMountPointEx : object {
    [CanBeNullAttribute]
[ObsoleteAttribute]
[ExtensionAttribute]
public static object MountGetObsolete(ISettingsStorageMountPoint mount, string sPathInMount, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static object MountGetRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static object MountGetSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsExact, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ObsoleteAttribute]
[ExtensionAttribute]
public static void MountSetObsolete(ISettingsStorageMountPoint mount, string sPathInMount, object value, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
public static void MountSetRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, object value, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
public static void MountEraseRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
public static void MountSetSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsExact, object value, ISettingsStorageTransactionContext transaction, ILogger logger);
    [NotNullAttribute]
[ExtensionAttribute]
[ObsoleteAttribute("Ask Baltic why is this obsolete")]
public static IEnumerable`1<string> MountEnumKeysObsolete(ISettingsStorageMountPoint mount, string sPathInMount, ISettingsStorageTransactionContext transaction);
    [NotNullAttribute]
[ExtensionAttribute]
public static void MountEnumRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction, ILogger logger);
    [NotNullAttribute]
[ExtensionAttribute]
public static void MountEnumSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponents, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
public static void MountCopyTo(ISettingsStorageMountPoint thіs, ISettingsStorageMountPoint target, ISettingsStorageTransactionContext transactionThis, ISettingsStorageTransactionContext transactionTarget, ILogger logger, string sRootKey);
    [ExtensionAttribute]
[NotNullAttribute]
public static void MountErase(ISettingsStorageMountPoint mount, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
public static void MountEraseSubtreeSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsExact, ISettingsStorageTransactionContext transaction, ILogger logger);
    [NotNullAttribute]
[ExtensionAttribute]
public static void MountEraseSubtreeRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
}
public interface JetBrains.Application.Settings.ISettingsStore {
    [NotNullAttribute]
public ISettingsSchema Schema { get; }
    [NotNullAttribute]
public DataContexts DataContexts { get; }
    [NotNullAttribute]
public SettingsStorageMountPoints MountPoints { get; }
    [CanBeNullAttribute]
public ISettingsStorageTransactionContext MountingPointsTransaction { get; }
    [DebuggerStepThroughAttribute]
public abstract virtual ISettingsSchema get_Schema();
    [DebuggerStepThroughAttribute]
public abstract virtual DataContexts get_DataContexts();
    public abstract virtual SettingsStorageMountPoints get_MountPoints();
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindToContext(IDataContext context);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindToContexts(IDataContext contextNarrow, IDataContext contextWide);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStoreLive BindToContextLive(Lifetime lifetime, ContextRange contextrange, BindToContextFlags flags);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindToContextTransient(ContextRange contextrange, BindToContextFlags flags);
    [NotNullAttribute]
public abstract virtual ISettingsStoreInTransaction CreateNestedTransaction(Lifetime lifetime, string name);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ISettingsStorageMountPoint> GetOrderedMountPointsInContext(IDataContext context);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindToMountPoints(IEnumerable`1<ISettingsStorageMountPoint> mounts, ISettingsStorageMountPoint mountLastInWideContext, BindToContextFlags flags);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindToMountPointWithForcedDefaultValueWrites(ISettingsStorageMountPoint mount);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStoreLive BindToMountPoints(Lifetime lifetime, IListEvents`1<ISettingsStorageMountPoint> mounts, IProperty`1<ISettingsStorageMountPoint> mountLastInWideContext, BindToContextFlags flags);
    public abstract virtual ISettingsStorageTransactionContext get_MountingPointsTransaction();
}
public interface JetBrains.Application.Settings.ISettingsStoreInTransaction {
    public abstract virtual void CommitTransaction();
    public abstract virtual void RevertTransaction();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Settings.ListWithoutPrefix`1 : object {
    private IList`1<T> myBody;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public ListWithoutPrefix`1(IList`1<T> body);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public void SetBody(IList`1<T> body);
    [CompilerGeneratedAttribute]
private object <CopyTo>b__1();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Settings.ListWithPrefix`1 : object {
    private TItem myPrefix;
    private IList`1<TItem> myBody;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TItem Item { get; public set; }
    public ListWithPrefix`1(TItem prefix, IList`1<TItem> body);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    public sealed virtual void Add(TItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TItem item);
    public sealed virtual void CopyTo(TItem[] array, int arrayIndex);
    public sealed virtual bool Remove(TItem item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(TItem item);
    public sealed virtual void Insert(int index, TItem item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TItem get_Item(int index);
    public sealed virtual void set_Item(int index, TItem value);
}
public interface JetBrains.Application.Settings.Logging.ISettingsLogger {
    [NotNullAttribute]
public IExceptionThrowingLogger Logger { get; }
    public abstract virtual IExceptionThrowingLogger get_Logger();
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Logging.SettingsLogging : object {
    private FilterOuterWorldExceptionsLogger mySettingsLogger;
    private IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.Logger { get; }
    [NotNullAttribute]
public FilterOuterWorldExceptionsLogger CollectedSettingsExceptions { get; }
    public SettingsLogging(Lifetime lifetime, ILogger loggerSystem, IThreading threading, ProductConfigurations config);
    private sealed virtual override IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.get_Logger();
    [NotNullAttribute]
protected virtual IExceptionThrowingLogger GetLoggerCore();
    public FilterOuterWorldExceptionsLogger get_CollectedSettingsExceptions();
}
public class JetBrains.Application.Settings.Logging.WrapLoggerForSettings : object {
    private IExceptionThrowingLogger myLogger;
    private IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.Logger { get; }
    public WrapLoggerForSettings(ILogger logger);
    private sealed virtual override IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.get_Logger();
}
[FlagsAttribute]
public enum JetBrains.Application.Settings.MountPointFlags : Enum {
    public int value__;
    public static MountPointFlags None;
    public static MountPointFlags IsDefaultValues;
    public static MountPointFlags IsWritable;
}
public class JetBrains.Application.Settings.OneToSetSettingAccessor`3 : object {
    private IContextBoundSettingsStore myContextBoundSettingsStore;
    private SettingsIndexedKey mySettingsKey;
    private Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> myExpression;
    [CompilerGeneratedAttribute]
private static Func`2<TValue, Pair`2<TValue, bool>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<TValue, bool>, TValue> CS$<>9__CachedAnonymousMethodDelegate4;
    private OneToSetSettingAccessor`3(IContextBoundSettingsStore contextBoundSettingsStore, SettingsIndexedKey settingsKey, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> expression);
    public void Add(TIndex index, TValue[] values);
    public void Remove(TIndex index, TValue value);
    public void RemoveIndex(TIndex index);
    public void Clear();
    public IEnumerable`1<TIndex> GetIndicesWithValues();
    public IEnumerable`1<TValue> GetValues(TIndex index);
    public static OneToSetSettingAccessor`3<TKeyClass, TIndex, TValue> Create(ISettingsStore settingsStore, IDataContext dataContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> expression);
    public static OneToSetSettingAccessor`3<TKeyClass, TIndex, TValue> Create(IContextBoundSettingsStore contextBoundSettingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> expression);
    [CompilerGeneratedAttribute]
private static Pair`2<TValue, bool> <Add>b__0(TValue v);
    [CompilerGeneratedAttribute]
private bool <GetIndicesWithValues>b__2(TIndex index);
    [CompilerGeneratedAttribute]
private static TValue <GetValues>b__3(Pair`2<TValue, bool> pair);
}
internal class JetBrains.Application.Settings.SchemaStorageKeyPathComponent : ValueType {
    public KeyPathComponent Component;
    public SettingsIndexedKey IndexRequired;
}
public class JetBrains.Application.Settings.SettingsEntry : object {
    [NotNullAttribute]
public string LocalName;
    [NotNullAttribute]
public string SettingsKeyClassMemberName;
    [NotNullAttribute]
public StringSource myDescription;
    [NotNullAttribute]
public PartCatalogType SettingsKeyClassMemberClrType;
    [NotNullAttribute]
public PartCatalogTypeMember ClrMember;
    internal SchemaStorageKeyPathComponent[] CachedPathComponents;
    [CompilerGeneratedAttribute]
private SettingsKey <Parent>k__BackingField;
    [NotNullAttribute]
public SettingsKey Parent { get; private set; }
    [NotNullAttribute]
public string Description { get; }
    public bool IsIndexed { get; }
    protected SettingsEntry(string localName, SettingsKey parent, StringSource description, PartCatalogType typeEntryMember, string sSettingsKeyClassMemberName, PartCatalogTypeMember clrMember);
    [CompilerGeneratedAttribute]
public SettingsKey get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(SettingsKey value);
    public string get_Description();
    public virtual bool get_IsIndexed();
    public virtual string ToString();
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("384")]
public class JetBrains.Application.Settings.SettingsEntryAttribute : SettingsEntryAttributeBase {
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CanBeNullAttribute]
public object DefaultValue { get; public set; }
    public SettingsEntryAttribute(object DefaultValue, string Description);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
}
public abstract class JetBrains.Application.Settings.SettingsEntryAttributeBase : PartAttribute {
    [NotNullAttribute]
private string myDescription;
    [CompilerGeneratedAttribute]
private string <EntryNameOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsStoreSerializerType <ValueSerializer>k__BackingField;
    [CanBeNullAttribute]
public string EntryNameOverride { get; public set; }
    [NotNullAttribute]
public string Description { get; }
    public SettingsStoreSerializerType ValueSerializer { get; public set; }
    protected SettingsEntryAttributeBase(string Description);
    [CompilerGeneratedAttribute]
public string get_EntryNameOverride();
    [CompilerGeneratedAttribute]
public void set_EntryNameOverride(string value);
    public string get_Description();
    [CompilerGeneratedAttribute]
public SettingsStoreSerializerType get_ValueSerializer();
    [CompilerGeneratedAttribute]
public void set_ValueSerializer(SettingsStoreSerializerType value);
}
public class JetBrains.Application.Settings.SettingsIndexedEntry : SettingsEntry {
    public SettingsStoreSerializerType IndexSerializer;
    public SettingsStoreSerializerType IndexedValueSerializer;
    public StorageValueTypeId SettingsStorageIndexedValueType;
    public StorageValueTypeId SettingsStorageIndexType;
    [NotNullAttribute]
public PartCatalogType IndexClrType;
    [NotNullAttribute]
public PartCatalogType IndexedValueClrType;
    public bool IsIndexed { get; }
    internal SettingsIndexedEntry(string localName, SettingsKey parent, StringSource description, PartCatalogType typeEntryMember, string sSettingsKeyClassMemberName, SettingsStoreSerializerType serializerIndex, SettingsStoreSerializerType serializerIndexedValue, StorageValueTypeId typeSettingsStorageIndex, StorageValueTypeId typeSettingsStorageIndexedValue, PartCatalogType typeIndex, PartCatalogType typeIndexedValue, PartCatalogTypeMember clrMember);
    public virtual bool get_IsIndexed();
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("384")]
public class JetBrains.Application.Settings.SettingsIndexedEntryAttribute : SettingsEntryAttributeBase {
    [CompilerGeneratedAttribute]
private SettingsStoreSerializerType <KeySerializer>k__BackingField;
    public SettingsStoreSerializerType KeySerializer { get; public set; }
    public SettingsIndexedEntryAttribute(string Description);
    [CompilerGeneratedAttribute]
public SettingsStoreSerializerType get_KeySerializer();
    [CompilerGeneratedAttribute]
public void set_KeySerializer(SettingsStoreSerializerType value);
}
public class JetBrains.Application.Settings.SettingsIndexedKey : SettingsKey {
    public PartCatalogType IndexClrType;
    public SettingsStoreSerializerType IndexSerializer;
    public bool IsIndexed { get; }
    internal SettingsIndexedKey(PartCatalogType typeSettingsKeyClass, StringSource description, string localName, Nullable`1<TypeInWeakAssembly> parentSettingsKeyClassType, PartCatalogType typeIndexClr, SettingsStoreSerializerType serializerIndex, ILogger logger);
    public virtual bool get_IsIndexed();
}
[AttributeUsageAttribute("1036")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.Settings.SettingsIndexedKeyAttribute : SettingsKeyAttributeBase {
    [NotNullAttribute]
private Type myIndexType;
    [CompilerGeneratedAttribute]
private SettingsStoreSerializerType <IndexSerializer>k__BackingField;
    [NotNullAttribute]
public Type IndexType { get; }
    public SettingsStoreSerializerType IndexSerializer { get; public set; }
    public SettingsIndexedKeyAttribute(Type Parent, string Description, Type IndexType);
    public Type get_IndexType();
    [CompilerGeneratedAttribute]
public SettingsStoreSerializerType get_IndexSerializer();
    [CompilerGeneratedAttribute]
public void set_IndexSerializer(SettingsStoreSerializerType value);
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.SettingsIndexedKeyUtil : object {
    public static IDictionary`2<SettingsKey, object> CreateKeyIndices(ISettingsStore store, TIndex index);
    public static IDictionary`2<SettingsKey, object> CreateKeyIndices(SettingsKey settingsKey, TIndex index);
    [ExtensionAttribute]
public static IDictionary`2<SettingsKey, object> AddKey(IDictionary`2<SettingsKey, object> dictionary, SettingsKey settingsKey, TIndex index);
}
public class JetBrains.Application.Settings.SettingsKey : object {
    private List`1<SettingsKey> myChildren;
    private List`1<SettingsEntry> myEntriesTmp;
    private SettingsEntry[] myEntriesFrozenSorted;
    [NotNullAttribute]
public PartCatalogType SettingsKeyClassClrType;
    internal Nullable`1<TypeInWeakAssembly> ParentSettingsKeyClassClrType;
    internal ILogger myLogger;
    [CanBeNullAttribute]
private SettingsKey myParent;
    [NotNullAttribute]
public string LocalName;
    private static Func`2<SettingsEntry, string> myFGetEntryKeyClassMemberName;
    internal SchemaStorageKeyPathComponent[] CachedPathComponents;
    private StringSource myDescription;
    [CompilerGeneratedAttribute]
private static Comparison`1<SettingsEntry> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<SettingsEntry, string> CS$<>9__CachedAnonymousMethodDelegate30;
    [NotNullAttribute]
public ReadOnlyCollection`1<SettingsKey> Children { get; }
    [NotNullAttribute]
public IList`1<SettingsEntry> Entries { get; }
    [NotNullAttribute]
public string Description { get; }
    public bool IsIndexed { get; }
    [CanBeNullAttribute]
public SettingsKey Parent { get; internal set; }
    internal SettingsKey(PartCatalogType typeSettingsKeyClass, StringSource description, string localName, Nullable`1<TypeInWeakAssembly> parentSettingsKeyClassType, ILogger logger);
    private static SettingsKey();
    public ReadOnlyCollection`1<SettingsKey> get_Children();
    public IList`1<SettingsEntry> get_Entries();
    public string get_Description();
    public virtual bool get_IsIndexed();
    public SettingsKey get_Parent();
    internal void set_Parent(SettingsKey value);
    public virtual string ToString();
    internal void FreezeEntries();
    internal void AddEntry(SettingsEntry entry);
    [NotNullAttribute]
internal SettingsEntry GetEntryByMemberName(string sMemberName);
    [CanBeNullAttribute]
public SettingsEntry TryFindEntryByMemberName(string sMemberName);
    [CompilerGeneratedAttribute]
private object <get_Entries>b__0();
    [CompilerGeneratedAttribute]
private static int <FreezeEntries>b__1(SettingsEntry α, SettingsEntry β);
    [CompilerGeneratedAttribute]
private object <FreezeEntries>b__2();
    [CompilerGeneratedAttribute]
private object <FreezeEntries>b__5();
    [CompilerGeneratedAttribute]
private object <FreezeEntries>b__9();
    [CompilerGeneratedAttribute]
private object <AddEntry>b__1f();
    [CompilerGeneratedAttribute]
private object <AddEntry>b__21();
    [CompilerGeneratedAttribute]
private object <GetEntryByMemberName>b__28();
    [CompilerGeneratedAttribute]
private object <TryFindEntryByMemberName>b__2c();
    [CompilerGeneratedAttribute]
private static string <.cctor>b__2f(SettingsEntry entry);
}
[AttributeUsageAttribute("1036")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.Settings.SettingsKeyAttribute : SettingsKeyAttributeBase {
    public SettingsKeyAttribute(Type Parent, string Description);
}
public class JetBrains.Application.Settings.SettingsKeyAttributeBase : PartAttribute {
    [NotNullAttribute]
private Type myParent;
    [NotNullAttribute]
private string myDescription;
    [CompilerGeneratedAttribute]
private string <KeyNameOverride>k__BackingField;
    [NotNullAttribute]
public string Description { get; }
    [NotNullAttribute]
public Type Parent { get; }
    public string KeyNameOverride { get; public set; }
    public SettingsKeyAttributeBase(Type Parent, string Description);
    public string get_Description();
    public Type get_Parent();
    [CompilerGeneratedAttribute]
public string get_KeyNameOverride();
    [CompilerGeneratedAttribute]
public void set_KeyNameOverride(string value);
}
public static class JetBrains.Application.Settings.SettingsOptimization : object {
    public static ISettingsOptimization DoMeSlowly;
    public static ISettingsOptimization OptimizeDefault;
    private static SettingsOptimization();
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.SettingsOptimizationComponent : object {
    public SettingsOptimizationComponent(ISettingsLogger wrapLoggerForSettings);
    private sealed virtual override object JetBrains.Application.Settings.ISettingsOptimization.GetKey(IContextBoundSettingsStore store, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override void JetBrains.Application.Settings.ISettingsOptimization.SetKey(IContextBoundSettingsStore store, SettingsKey key, object value, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.Settings.SettingsScalarEntry : SettingsEntry {
    [CanBeNullAttribute]
public object RawDefaultValue;
    public SettingsStoreSerializerType ValueSerializer;
    public StorageValueTypeId SettingsStorageEntryType;
    [NotNullAttribute]
public PartCatalogType ValueClrType;
    internal SettingsScalarEntry(string localName, SettingsKey parent, StringSource description, PartCatalogType typeEntryMember, string sSettingsKeyClassMemberName, StorageValueTypeId typeSettingsStorageEntry, object rawDefaultValue, SettingsStoreSerializerType valueSerializer, PartCatalogTypeMember clrMember);
    [CanBeNullAttribute]
public object GetDefaultValueInEntryMemberType();
    public static TValue GetDefaultValue(ISettingsStore settings, Expression`1<Func`2<TKeyClass, TValue>> lambdaexpression, ILogger logger);
    [CompilerGeneratedAttribute]
private object <GetDefaultValueInEntryMemberType>b__0();
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.SettingsSchema : object {
    private SettingsSchemaCollector myCollector;
    [NotNullAttribute]
public IEnumerable`1<SettingsKey> RootKeys { get; }
    public SettingsSchema(SettingsSchemaCollector collector);
    [NotNullAttribute]
public sealed virtual SettingsKey GetKey(Type typeSettingsClass);
    [NotNullAttribute]
public sealed virtual SettingsKey GetKey();
    [NotNullAttribute]
public sealed virtual SettingsIndexedKey GetIndexedKey();
    [NotNullAttribute]
public sealed virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public sealed virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, object>> lambdaexpression);
    [NotNullAttribute]
public sealed virtual SettingsEntry GetEntry(Type typeSettingsClass, string membername);
    public sealed virtual IEnumerable`1<SettingsKey> get_RootKeys();
    [NotNullAttribute]
public sealed virtual SettingsScalarEntry GetScalarEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public sealed virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public sealed virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression);
    [CompilerGeneratedAttribute]
private static object <GetIndexedKey>b__0();
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.SettingsSchemaCollector : object {
    [ThreadStaticAttribute]
private static Dictionary`2<Assembly, string> myCacheAssemblyNames;
    [NotNullAttribute]
private InternKeyPathComponent myInterned;
    private Lifetime myLifetime;
    private LockObject myLockSettingsKeyTypesFromCatalogs;
    private ILogger myLogger;
    private Tuple`2<bool, Dictionary`2<TypeInWeakAssembly, SettingsKey>> myMapTypeToSettingsKey;
    private Dictionary`2<TypeInWeakAssembly, PartCatalogType> mySettingsKeyTypesFromCatalogs;
    private TimeSpan OptionLockTimeout;
    [CompilerGeneratedAttribute]
private static Func`2<SettingsKey, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    public SettingsSchemaCollector(Lifetime lifetime, PreviewShellPartCatalogSet catalogset, IThreading threading, InternKeyPathComponent interned, ISettingsLogger settingsLogger);
    [NotNullAttribute]
public SettingsKey GetKey(Type typeSettingsClass);
    [NotNullAttribute]
public SettingsKey GetKey(PartCatalogType typeSettingsClass);
    [NotNullAttribute]
public IEnumerable`1<SettingsKey> GetRootKeys();
    [NotNullAttribute]
private Dictionary`2<TypeInWeakAssembly, SettingsKey> EnsureValidCache();
    [NotNullAttribute]
private static string GetCachedRuntimeAssemblyName(Assembly assembly);
    private void InvalidateCache();
    [CompilerGeneratedAttribute]
private static bool <GetRootKeys>b__10(SettingsKey key);
}
public static class JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses : object {
    public static double AmbientStorage;
    public static double GlobalAllProductStorage;
    public static double GlobalPerProductStorage;
    public static double HierarchyStorage;
    public static double TemporaryOverrideWriteOperations;
    public static double SyntheticPriorityOfSmartLayer;
    private static SettingsStorageMountPointPriorityClasses();
}
public class JetBrains.Application.Settings.SettingsStoreChangeArgs : object {
    [NotNullAttribute]
public IList`1<SettingsKeyInstance> RootKeys;
    [NotNullAttribute]
public JetHashSetSorted`1<KeyPathComponents> ChangedStorageKeys;
    [NotNullAttribute]
public ISettingsSchema Schema;
    [NotNullAttribute]
public JetHashSet`1<SettingsKey> ChangedKeys;
    [NotNullAttribute]
public JetHashSet`1<SettingsEntry> ChangedEntries;
    public SettingsStoreChangeArgs(JetHashSetSorted`1<KeyPathComponents> changedStorageKeys, ISettingsSchema schema, ILogger logger);
    private void RemoveUnchangedThingsAndCollectLists(ILogger logger);
    private bool RemoveUnchangedThingsAndCollectLists_Key(SettingsKeyInstance chKey, ILogger logger);
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.SettingsStoreChangeArgsEx_Visit : object {
    [ExtensionAttribute]
public static void Visit(SettingsStoreChangeArgs thіs, Action`3<SettingsKeyInstance, SettingsIndexedKey, Dictionary`2<SettingsKey, object>> FIndexedKey, Action`3<SettingsEntryInstance, SettingsScalarEntry, Dictionary`2<SettingsKey, object>> FScalarEntry, Action`4<SettingsEntryInstance, SettingsIndexedEntry, object, Dictionary`2<SettingsKey, object>> FIndexedEntry, ILogger logger);
    private static void Visit_Key(SettingsKeyInstance keyinstance, VisitContext context);
    private static void Visit_Key_Entry(SettingsEntryInstance entryinstance, VisitContext context);
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.SettingsStoreEx : object {
    [ExtensionAttribute]
public static TEntryValue GetValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static TEntryValue GetValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static TEntryValue GetValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static object GetValue(ISettingsStore thіs, IDataContext context, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetValue(ISettingsStore thіs, IDataContext context, SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void ResetValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static void ResetValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, object>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void ResetValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, object>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static void ResetValue(ISettingsStore thіs, IDataContext context, SettingsScalarEntry source, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[ExtensionAttribute]
public static TSettingsKeyClass GetKey(IContextBoundSettingsStore thіs, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetKey(IContextBoundSettingsStore thіs, TSettingsKeyClass settingsKeyValue, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
[ExtensionAttribute]
public static TSettingsKeyClass GetKey(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FDataContext, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
[ExtensionAttribute]
public static TSettingsKeyClass GetKey(ISettingsStore thіs, IDataContext context, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static IContextBoundSettingsStore BindToContext(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, bool isForWriting);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
[ExtensionAttribute]
public static IContextBoundSettingsStore BindToContexts(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContextNarrow, Func`3<Lifetime, DataContexts, IDataContext> FContextWide);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TEntryValue GetIndexedValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static TEntryValue GetIndexedValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [CanBeNullAttribute]
[ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static TEntryValue GetIndexedValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [CanBeNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static object GetIndexedValue(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetIndexedValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static void SetIndexedValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static void SetIndexedValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetIndexedValue(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, object entryIndex, object value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void RemoveIndexedValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static void RemoveIndexedValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static void RemoveIndexedValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void RemoveIndexedValue(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TEntryIndex> EnumEntryIndices(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<TEntryIndex> EnumEntryIndices(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<TEntryIndex> EnumEntryIndices(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static IEnumerable`1<object> EnumEntryIndices(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<TKeyIndex> EnumKeyIndices(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static IEnumerable`1<TKeyIndex> EnumKeyIndices(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<TKeyIndex> EnumKeyIndices(ISettingsStore thіs, IDataContext context, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<object> EnumKeyIndices(ISettingsStore thіs, IDataContext context, SettingsIndexedKey settkey, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<Pair`2<TKeyIndex, TKeyClass>> EnumIndexedKeys(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> parentKeyIndices, ISettingsOptimization settingsOptimization);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<Pair`2<TKeyIndex, TKeyClass>> EnumIndexedKeys(IContextBoundSettingsStore thіs, SettingsIndexedKey settingsKey, IDictionary`2<SettingsKey, object> parentKeyIndices, ISettingsOptimization settingsOptimization);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<TEntryValue> EnumIndexedValues(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static object CreateIndexedEntryAccess(IContextBoundSettingsStore thіs, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Does not work anymore. Use a transaction.")]
public static ContextBoundSettingsStore BoundToContextForTemporaryChanges(ISettingsStore settingsStore, Lifetime lifetime, IDataContext dataContext, InternKeyPathComponent interned);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> EnumerateIndexedEntry(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[ExtensionAttribute]
public static void SetIndexedValues(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void ResetIndexedValues(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void AppendIndexedValues(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[ObsoleteAttribute("Use IContextBoundSettingsStoreLive::GetValueProperty.")]
[ExtensionAttribute]
public static IProperty`1<TEntryMemberType> GetValuePropertyTmp(IContextBoundSettingsStoreLive thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, IProperty`1<TEntryMemberType> propTarget, IDictionary`2<SettingsKey, object> keyindices);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, SettingsScalarEntry entry, IProperty`1<TEntryMemberType> propTarget, IDictionary`2<SettingsKey, object> keyindices);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, SettingsIndexedEntry entry, object entryIndex, IProperty`1<TEntryMemberType> propTarget, TEntryMemberType defaultValue, IDictionary`2<SettingsKey, object> keyindices);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, DependencyObject taregtobj, DependencyProperty targetprop);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, SettingsScalarEntry entry, DependencyObject taregtobj, DependencyProperty targetprop);
    [ExtensionAttribute]
public static void CreateIndexedKey(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static bool IsIndexedKeyDefined(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> keyIndices);
    [ObsoleteAttribute("Bind to context live and use GetValueProperty, which is also writable.")]
[ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TEntryMemberType> GetValueLive(ISettingsStore thіs, Lifetime lifetime, Func`3<Lifetime, DataContexts, IDataContext> FDataContext, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, IThreading threading);
    [NotNullAttribute]
[ExtensionAttribute]
[ObsoleteAttribute("Bind to context live and use GetValueProperty, which is also writable.")]
public static IProperty`1<TEntryMemberType> GetValueLive(ISettingsStore thіs, Lifetime lifetime, Func`3<Lifetime, DataContexts, IDataContext> FDataContext, SettingsScalarEntry entry, IThreading threading);
    [NotNullAttribute]
[ExtensionAttribute]
public static IProperty`1<TEntryMemberType> GetValueProperty(IContextBoundSettingsStoreLive thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void AdviseChange(ISettingsChangedEventSource thіs, Lifetime lifetime, SettingsEntry entry, Action FOnChange);
    [ExtensionAttribute]
public static void AdviseChange(ISettingsChangedEventSource thіs, Lifetime lifetime, SettingsKey key, Action FOnChange);
    [ExtensionAttribute]
public static void CopyTo(IContextBoundSettingsStore thіs, IContextBoundSettingsStore target, ILogger logger, SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    private static void CopyTo_Key(IContextBoundSettingsStore thіs, SettingsKeyInstance keyinstance, Dictionary`2<SettingsKey, object> keyindices, IContextBoundSettingsStore target, ILogger logger);
    private static void CopyTo_Key_Entry(IContextBoundSettingsStore thіs, SettingsEntryInstance entryinstance, Dictionary`2<SettingsKey, object> keyindices, IContextBoundSettingsStore target, ILogger logger);
    [NotNullAttribute]
[PureAttribute]
[ExtensionAttribute]
[ObsoleteAttribute("Use EnumIndexedValues().Keys")]
public static IEnumerable`1<object> EnumEntryIndices(IContextBoundSettingsStore thіs, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
[ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use EnumIndexedKey()")]
public static IEnumerable`1<object> EnumKeyIndices(IContextBoundSettingsStore thіs, SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static object GetKey(IContextBoundSettingsStore thіs, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsOptimization optimization);
    [ExtensionAttribute]
public static void SetKey(IContextBoundSettingsStore thіs, SettingsKey key, object value, IDictionary`2<SettingsKey, object> keyIndices, ISettingsOptimization optimization);
    [CompilerGeneratedAttribute]
private static object <EnumKeyIndices>b__1e();
    [CompilerGeneratedAttribute]
private static object <EnumKeyIndices>b__20();
    [CompilerGeneratedAttribute]
private static object <GetValueLive>b__3a();
}
public enum JetBrains.Application.Settings.SettingsStoreSerializerType : Enum {
    public int value__;
    public static SettingsStoreSerializerType Auto;
    public static SettingsStoreSerializerType Primitive;
    public static SettingsStoreSerializerType TypeConverterToInvariantString;
    public static SettingsStoreSerializerType XmlSerializer;
    public static SettingsStoreSerializerType XamlSerializer;
    public static SettingsStoreSerializerType BinaryFormatter;
}
public class JetBrains.Application.Settings.Storage.ContentSubstring : ValueType {
    public short RawOffset;
    public short RawLengthPlus1;
    public int RawValue;
    public bool IsWhole { get; }
    public static ContentSubstring Whole { get; }
    public ContentSubstring(int offset, int length);
    public bool get_IsWhole();
    public static ContentSubstring get_Whole();
    [PureAttribute]
public int GetLength(int nTotalLen);
    [PureAttribute]
public bool GetOffsetAndLength(int nTotalLen, UInt32& nOffset, UInt32& nLength);
    [PureAttribute]
[NotNullAttribute]
public string ApplyTo(string content);
    [PureAttribute]
public void WriteTo(string content, StringBuilder sb);
    [PureAttribute]
public virtual string ToString();
    [PureAttribute]
public bool AssertValid(int nTotalLen, OnError onerror);
    [PureAttribute]
public char GetFirstChar(string content);
}
public abstract class JetBrains.Application.Settings.Storage.DefaultBody.FileSettingsStorageProviderBase : object {
    private ICollectionEvents`1<ISettingsStorage> myStorages;
    private ICollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    [NotNullAttribute]
public XmlFileSettingsStorage XmlFileStorage;
    [NotNullAttribute]
public ISettingsStorageMountPoint MountPoint;
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    protected FileSettingsStorageProviderBase(Lifetime lifetime, string name, IProperty`1<FileSystemPath> path, bool isWritable, double priority, IIsAvailable isAvailable, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, IEnumerable`1<KeyValuePair`2<PropertyId, object>> metadata);
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(KeyValuePair`2<PropertyId, object> pair);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent : object {
    [NotNullAttribute]
public ConcurrentDictionary`2<KeyPathComponent, KeyPathComponent> Interned;
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase : object {
    [CanBeNullAttribute]
private Dictionary`2<string, object> myDiffToStream;
    [NotNullAttribute]
private Dictionary`2<string, object> myEntriesInStream;
    private ReaderWriterLockSlim myLockEntriesInStream;
    private ReaderWriterLockSlim myLockDiffToStream;
    private IProperty`1<bool> myIsDirty;
    private object myLockSerialization;
    private static TimeSpan OptionLockTimeout;
    private static int OptionLockTimeoutMs;
    private string myName;
    private ILogger myLogger;
    private Action`1[] myChangeSinks;
    private SpinWaitLock myLockChangeSinksWrite;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, string> CS$<>9__CachedAnonymousMethodDelegate13;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    public string Name { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    public SettingsStorageBase(Lifetime lifetime, string name, ILogger logger);
    private static SettingsStorageBase();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private static void CommitDiffToStream(IDictionary`2<string, object> main, IDictionary`2<string, object> diff);
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    public sealed virtual string get_Name();
    private object Get(string key, ISettingsStorageTransactionContext transaction);
    private void Set(string key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private void SetBatchWithDiffWriteLocked(ICollection`1<KeyValuePair`2<string, object>> items, List`1<string> keysChanged);
    private ICollection`1<string> EnumStringKeysCore(string keyPrefix, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    public sealed virtual void EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private void FireChange(SettingsStorageChangeArgs args, bool isGettingDirty);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static bool <EnumStringKeysCore>b__d(KeyValuePair`2<string, object> pair);
    [CompilerGeneratedAttribute]
private static string <EnumStringKeysCore>b__e(KeyValuePair`2<string, object> pair);
}
public static class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFactory : object {
    [NotNullAttribute]
public static ISettingsStorageSerializable CreateStorage(Lifetime lifetime, string name, ILogger logger, InternKeyPathComponent interned);
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat : object {
    private string myName;
    [CanBeNullAttribute]
private Dictionary`2<KeyPathComponents, object> myDiffToStream;
    [NotNullAttribute]
private Dictionary`2<KeyPathComponents, object> myEntriesInStream;
    private ReaderWriterLockSlim myLockEntriesInStream;
    private ReaderWriterLockSlim myLockDiffToStream;
    private object myLockSerialization;
    private IProperty`1<bool> myIsDirty;
    private static TimeSpan OptionLockTimeout;
    private static int OptionLockTimeoutMs;
    private ChunkHashSet`1<KeyPathComponent> myInterned;
    private Action`1[] myChangeSinks;
    private SpinWaitLock myLockChangeSinksWrite;
    private ILogger myLogger;
    private SimpleTrie`2<KeyPathComponent, ChildLevel2Enumeration> myCacheChildLevel2Enumerations;
    private SpinWaitLock myLockCacheChildLevel2Enumerations;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<KeyPathComponents, object>, KeyValuePair`2<string, object>> CS$<>9__CachedAnonymousMethodDelegate1a;
    private string JetBrains.Application.Settings.Storage.ISettingsStorage.Name { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    public SettingsStorageFlat(string name, ILogger logger);
    private static SettingsStorageFlat();
    private void OnResetCacheChildLevel2Enumerations(SettingsStorageChangeArgs args);
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorage.get_Name();
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private void Enum_Calculate(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback);
    private void Enum_Level2Cached(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback);
    private static void Enum_Level2Cached_ReturnCachedValue(Action`2<KeyPathComponents, object> fCallback, KeyValuePair`2[] cachedvalue);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    private void FireChange(SettingsStorageChangeArgs args, bool isGettingDirty);
    private static void CommitDiffToStream(Dictionary`2<KeyPathComponents, object> main, Dictionary`2<KeyPathComponents, object> diff);
    private void SetBatchWithDiffWriteLocked(ICollection`1<KeyValuePair`2<KeyPathComponents, object>> items, List`1<KeyPathComponents> keysChanged);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, object> <JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy>b__19(KeyValuePair`2<KeyPathComponents, object> pair);
}
public static class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers : object {
    public static BidirectionalMapOnDictionary`2<StorageValueTypeId, Type> MapTypeIds;
    public static Dictionary`2<Type, StorageValueTypeId> MapPrimitiveTypesToStorageTypesWithCoersion;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<StorageValueTypeId, string> CS$<>9__CachedAnonymousMethodDelegatee;
    private static SettingsStorageHelpers();
    public static void AssertValidLocalName(string sKeyLocalName);
    public static bool IsValidLocalName(string sKeyLocalName, OnError onerror);
    private static void PostError(OnError onerror, string sKeyLocalName, UnicodeCategory category, char c);
    public static void AssertValidStoreType(Type type);
    public static void AssertValidStoreType(StorageValueTypeId type);
    public static bool ValueEquals(object α, object β);
    public static SettingsStoreSerializerType ResolveAutoSerializer(SettingsStoreSerializerType serializer, StringSource sTypeFullName);
    [NotNullAttribute]
public static StorageValueTypeId GetSettingsStorageSerializedType(StringSource sClrTypeFullName, SettingsStoreSerializerType valueSerializer);
    [CanBeNullAttribute]
public static object CoerceEntryDefaultValueToRuntimeType(object oValue, Type typeTarget, ILogger logger);
    [NotNullAttribute]
public static object GetStorageDefaultValue(StorageValueTypeId typeid);
    [CompilerGeneratedAttribute]
private static object <PostError>b__3();
    [CompilerGeneratedAttribute]
private static object <AssertValidStoreType>b__7();
    [CompilerGeneratedAttribute]
private static string <AssertValidStoreType>b__8(Type t);
    [CompilerGeneratedAttribute]
private static object <AssertValidStoreType>b__b();
    [CompilerGeneratedAttribute]
private static string <AssertValidStoreType>b__c(StorageValueTypeId id);
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero : object {
    private static Func`2<KeyValuePair`2<string, object>, KeyValuePair`2<KeyPathComponents, object>> myFCacheParseKeyValuePairComponent;
    private KeyValuePair`2[] myChangeSinks;
    private Hierarchy myHierarchy;
    [NotNullAttribute]
private ConcurrentDictionary`2<KeyPathComponent, KeyPathComponent> myInterned;
    private IProperty`1<bool> myIsDirty;
    private SpinWaitLock myLockChangeSinksWrite;
    private object myLockSerialization;
    private ILogger myLogger;
    private string myName;
    [CompilerGeneratedAttribute]
private static Func`3<KeyPathComponents, HNode, WalkState> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, object>, KeyValuePair`2<KeyPathComponents, object>> CS$<>9__CachedAnonymousMethodDelegate2c;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    private string JetBrains.Application.Settings.Storage.ISettingsStorage.Name { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    public SettingsStorageHiero(string name, InternKeyPathComponent internKeyPathComponent, ILogger logger);
    private static SettingsStorageHiero();
    private static void CommitDiffToStream(Dictionary`2<KeyPathComponents, object> main, Dictionary`2<KeyPathComponents, object> diff);
    private void FireChange(SettingsStorageChangeArgs args, bool isGettingDirty);
    private void SaveCore(Func`2<Dictionary`2<string, object>, bool> FSave, BinaryWriter writer);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.FirstTimeLoadFromCache(Func`1<Dictionary`2<string, object>> FReadEntries, BinaryReader reader);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.SaveToCache(Func`2<Dictionary`2<string, object>, bool> FSaveEntries, BinaryWriter writer);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorage.get_Name();
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
    [CompilerGeneratedAttribute]
private static WalkState <SaveCore>b__4(KeyPathComponents key, HNode node);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<KeyPathComponents, object> <.cctor>b__2b(KeyValuePair`2<string, object> pair);
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid : object {
    private static TimeSpan OptionLockTimeout;
    private static int OptionLockTimeoutMs;
    private static Func`2<HierarchicalKeyPathComponent, KeyPathComponent> myFHierarchicalKeyPathComponentGetComponent;
    private Action`1[] myChangeSinks;
    [CanBeNullAttribute]
private Dictionary`2<KeyPathComponents, object> myDiffToStream;
    [NotNullAttribute]
private Dictionary`2<KeyPathComponents, object> myEntriesInStream;
    private HierarchicalKeyPathComponent myHierarchyRoot;
    private ChunkHashSet`1<KeyPathComponent> myInterned;
    private IProperty`1<bool> myIsDirty;
    private SpinWaitLock myLockChangeSinksWrite;
    private ReaderWriterLockSlim myLockDiffToStream;
    private ReaderWriterLockSlim myLockEntriesInStream;
    private SpinWaitLock myLockHierarchy;
    private object myLockSerialization;
    private ILogger myLogger;
    private string myName;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<KeyPathComponents, object>, KeyValuePair`2<string, object>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<HierarchicalKeyPathComponent, KeyPathComponent> CS$<>9__CachedAnonymousMethodDelegate16;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    private string JetBrains.Application.Settings.Storage.ISettingsStorage.Name { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    public SettingsStorageHybrid(string name, ILogger logger);
    private static SettingsStorageHybrid();
    private static void CommitDiffToStream(Dictionary`2<KeyPathComponents, object> main, Dictionary`2<KeyPathComponents, object> diff);
    private void FireChange(SettingsStorageChangeArgs args, bool isGettingDirty);
    [NotNullAttribute]
private HierarchicalKeyPathComponent GetOrCreateHierarchyRoot();
    private void HierarchyAddKey(KeyPathComponents components);
    private void HierarchyEnumKeysAndValues(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback);
    private void HierarchyRemoveKey(KeyPathComponents components);
    private void OnUpdateHierarchy(SettingsStorageChangeArgs args);
    private void SetBatchWithDiffWriteLocked(ICollection`1<KeyValuePair`2<KeyPathComponents, object>> items, List`1<KeyPathComponents> keysChanged);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorage.get_Name();
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, object> <JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy>b__5(KeyValuePair`2<KeyPathComponents, object> pair);
    [CompilerGeneratedAttribute]
private static KeyPathComponent <.cctor>b__15(HierarchicalKeyPathComponent hiero);
}
public enum JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag : Enum {
    public int value__;
    public static SettingsStorageLoadFlag FirstTime;
    public static SettingsStorageLoadFlag SecondTime;
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageProvidersCollection : object {
    private ICollectionEvents`1<ISettingsStorage> myStorages;
    private ICollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ISettingsStorage> Storages { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ISettingsStorageMountPoint> MountPoints { get; }
    public SettingsStorageProvidersCollection(Lifetime lifetime);
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    [DebuggerStepThroughAttribute]
public ICollectionEvents`1<ISettingsStorage> get_Storages();
    [DebuggerStepThroughAttribute]
public ICollectionEvents`1<ISettingsStorageMountPoint> get_MountPoints();
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageTransactionContext : object {
    private Lifetime myLifetime;
    private IDictionary`2<ISettingsStorage, ISettingsStorageTransactionData> myMapStorageToTransactionData;
    private SpinWaitLock myLockStorageTransactionDataWrite;
    [CanBeNullAttribute]
private ISettingsStorageTransactionContext myOuterTransaction;
    private ILogger myLogger;
    private string myName;
    private string JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.Name { get; }
    public SettingsStorageTransactionContext(Lifetime lifetime, string name, ISettingsStorageTransactionContext transactionOuter, ILogger logger);
    [NotNullAttribute]
public sealed virtual TData GetTransactionData(ISettingsStorage storage);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.AttachStorages(IEnumerable`1<ISettingsStorage> storages);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.RevertAllStorages();
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.CommitAllStorages();
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.get_Name();
    public virtual string ToString();
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalPerProductStorage : FileSettingsStorageProviderBase {
    public static string LayerId;
    private static Func`2<IApplicationHost, Dictionary`2<PropertyId, object>> myMountsMetadata;
    [CompilerGeneratedAttribute]
private static Func`2<IApplicationHost, Dictionary`2<PropertyId, object>> CS$<>9__CachedAnonymousMethodDelegate2;
    public GlobalPerProductStorage(Lifetime lifetime, AnyProductSettingsLocation settingsLocation, IThreading threading, IFileSystemTracker filetracker, IApplicationHost product, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, GlobalSettingsSanboxing globalSettingsSanboxing);
    private static GlobalPerProductStorage();
    private static Property`1<FileSystemPath> GetPath(Lifetime lifetime, AnyProductSettingsLocation settingsLocation, IApplicationHost product, GlobalSettingsSanboxing globalSettingsSanboxing);
    [CompilerGeneratedAttribute]
private static Dictionary`2<PropertyId, object> <.cctor>b__1(IApplicationHost product);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings : object {
    [NotNullAttribute]
public Identity ProductGlobalLayerId;
    [NotNullAttribute]
public Func`1<IContextBoundSettingsStore> BindForWritingToAllProducts;
    public GlobalSettings(GlobalPerProductStorage perProductStorage, ISettingsStore store);
    [NotNullAttribute]
public static Func`1<IContextBoundSettingsStore> BindForSmartWritingToReadonlyContext(ISettingsStore store, ISettingsStorageMountPoint mountReadonly, ContextRange contextrangeWithReadonlyMount);
}
[TypeConverterAttribute("JetBrains.Application.Settings.Storage.Format.Base64BlobConverter")]
[ValueSerializerAttribute("JetBrains.Application.Settings.Storage.Format.Base64BlobValueSerializer")]
[DefaultPropertyAttribute("Content")]
[ContentPropertyAttribute("Content")]
public class JetBrains.Application.Settings.Storage.Format.Base64Blob : object {
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    [DesignerSerializationVisibilityAttribute("0")]
public Byte[] Content { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(Byte[] value);
    public virtual string ToString();
    public bool Equals(Byte[] other);
    public bool Equals(Base64Blob other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.Settings.Storage.Format.Base64BlobConverter : TypeConverterBase`1<Base64Blob> {
    [CompilerGeneratedAttribute]
private static Func`4<CultureInfo, Base64Blob, ILogger, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`4<CultureInfo, string, ILogger, Base64Blob> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(CultureInfo context, Base64Blob blob, ILogger logger);
    [CompilerGeneratedAttribute]
private static Base64Blob <.ctor>b__3(CultureInfo cultureInfo, string s, ILogger logger);
}
public class JetBrains.Application.Settings.Storage.Format.Base64BlobValueSerializer : ValueSerializerBase`1<Base64Blob> {
    [CompilerGeneratedAttribute]
private static Func`3<Base64Blob, ILogger, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`3<string, ILogger, Base64Blob> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(Base64Blob blob, ILogger logger);
    [CompilerGeneratedAttribute]
private static Base64Blob <.ctor>b__3(string s, ILogger logger);
}
internal static class JetBrains.Application.Settings.Storage.Format.Xmlns : object {
    public static string XmlNamespaceUri;
    public static string ClrNamespace;
    public static string DefaultNamespacePrefix;
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorage {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    [CanBeNullAttribute]
public abstract virtual object Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    public abstract virtual void Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    public abstract virtual void AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    public abstract virtual void Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    [NotNullAttribute]
public abstract virtual ISettingsStorageTransactionData AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    public abstract virtual void EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
}
[ObsoleteAttribute]
[ExtensionAttribute]
public static class JetBrains.Application.Settings.Storage.ISettingsStorageEx_Obsolete : object {
    [ObsoleteAttribute]
[ExtensionAttribute]
[CanBeNullAttribute]
public static object GetObsolete(ISettingsStorage thіs, string key, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void SetObsolete(ISettingsStorage thіs, string key, object value, ISettingsStorageTransactionContext transaction);
    [ObsoleteAttribute]
[ExtensionAttribute]
[NotNullAttribute]
public static ICollection`1<string> EnumKeysObsolete(ISettingsStorage thіs, string keyPrefix, ISettingsStorageTransactionContext transaction);
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorageSerializable {
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void AttachStorages(IEnumerable`1<ISettingsStorage> storages);
    public abstract virtual void RevertAllStorages();
    public abstract virtual void CommitAllStorages();
    [NotNullAttribute]
public abstract virtual TData GetTransactionData(ISettingsStorage storage);
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData {
    [NotNullAttribute]
public ISettingsStorage Storage { get; }
    public abstract virtual ISettingsStorage get_Storage();
    public abstract virtual void Commit();
    public abstract virtual void Revert();
}
public class JetBrains.Application.Settings.Storage.KeyPathComponent : ValueType {
    public string Content;
    public ContentSubstring ContentSubstring;
    public char ContentPrefix;
    private int myCachedHashCode;
    public static IEqualityComparer`1<KeyPathComponent> EqualityComparer;
    public bool IsNull { get; }
    public int Length { get; }
    public KeyPathComponent(string content, char prefix, ContentSubstring substring);
    private static KeyPathComponent();
    public string GetPathComponentSlow();
    public void Write(StringBuilder sb);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(string s);
    public sealed virtual bool Equals(KeyPathComponent other);
    public static bool op_Equality(KeyPathComponent a, KeyPathComponent b);
    public static bool op_Inequality(KeyPathComponent a, KeyPathComponent b);
    private bool EqualsCore(KeyPathComponent other);
    public static KeyPathComponent FromString(string s);
    public static KeyPathComponent FromSubstring(string s, int offset, int length, char prefix);
    public virtual string ToString();
    public bool AssertValid(OnError onerror);
    public bool get_IsNull();
    public int get_Length();
    public char GetFirstChar();
    [NotNullAttribute]
public string GetTextWithoutFirstCharSlow();
    public sealed virtual int CompareTo(KeyPathComponent other);
    public static KeyPathComponent AsNormalized(KeyPathComponent unnormalized);
    public bool IsEmpty();
    private int CalcHashCode();
}
public class JetBrains.Application.Settings.Storage.KeyPathComponents : ValueType {
    [CanBeNullAttribute]
public IList`1<KeyPathComponent> Components;
    public static char PathSeparatorChar;
    public static string PathSeparatorString;
    internal static char WellKnownPrefixChar;
    public KeyPathComponents(IList`1<KeyPathComponent> components);
    private static KeyPathComponents();
    public static KeyPathComponents Parse(string s);
    public static KeyPathComponents ParseInterned(string s, ChunkHashSet`1<KeyPathComponent> interneds);
    [NotNullAttribute]
public string RenderToStringSlow(bool isAddingLeadingSlash);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(KeyPathComponents other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public KeyPathComponents Intern(ChunkHashSet`1<KeyPathComponent> interneds);
    public bool StartsWith(KeyPathComponents prefix);
    private sealed virtual override int System.IComparable<JetBrains.Application.Settings.Storage.KeyPathComponents>.CompareTo(KeyPathComponents other);
    public KeyPathComponents Clone();
}
public class JetBrains.Application.Settings.Storage.Persistence.EntriesReader : object {
    private XmlReader myXmlReader;
    private LocationAwareXmlReader myLocationAwareXmlReader;
    private IProperty`1<State> myState;
    public Dictionary`2<string, object> Entries;
    public List`1<Pair`2<string, NodePosition>> EntryPositions;
    public List`1<NodePosition> ResourceDictionaryPositions;
    private StringBuilder mySharedContentBuilder;
    private ReadEntryValueData myReadEntryValueData;
    private static Regex myRegexNonPreserveSpaceEnds;
    private static Regex myRegexNonPreserveSpaceMiddle;
    private XmlNamespaceDescriptions myXmlNamespaceDescriptions;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private static Action`1<StringBuilder> CS$<>9__CachedAnonymousMethodDelegatef;
    public EntriesReader(ILogger logger);
    private static EntriesReader();
    [NotNullAttribute]
public EntriesReader Run(XmlReader reader, EntryPositionsFlag entryPositionsFlag);
    private void Step();
    private void Step_ReadEntryValueNodes();
    private void Step_ReadEntryValueEndClear();
    private void Step_ReadEntryValueEndError();
    private void Step_ReadEntryValueEndNewEntry();
    private void Step_ReadEntryValueEnd_CommitContent();
    private void Step_ReadEntryValueEnd_CommitContent_WarnIfDuplicate(object value);
    private void Step_ReadEntryValueBegin();
    private void Step_ReadEntryElementStart();
    [CanBeNullAttribute]
private string Step_ReadEntryElementStart_GetEntryKey();
    private StorageValueTypeId Step_Any_GetEntryTypeId();
    private void Step_GenericRead();
    private bool Step_Any_IsResourceDictionaryElement();
    private void Step_GenericRead_SkipToElement();
    private Nullable`1<StorageValueTypeId> Step_Any_TryGetEntryTypeId();
    [NotNullAttribute]
private object Step_ReadEntryValueEnd_CommitContent_ParseValue(string sContent, StorageValueTypeId typeid, XmlSpace xmlSpace);
    [CompilerGeneratedAttribute]
private object <Run>b__0();
    [CompilerGeneratedAttribute]
private object <Step_ReadEntryValueEnd_CommitContent>b__2();
    [CompilerGeneratedAttribute]
private object <Step_ReadEntryValueEnd_CommitContent>b__3();
    [CompilerGeneratedAttribute]
private object <Step_ReadEntryValueEnd_CommitContent_WarnIfDuplicate>b__6();
    [CompilerGeneratedAttribute]
private object <Step_ReadEntryValueEnd_CommitContent_WarnIfDuplicate>b__7();
    [CompilerGeneratedAttribute]
private static void <Step_ReadEntryElementStart>b__e(StringBuilder sb);
}
public static class JetBrains.Application.Settings.Storage.Persistence.EntriesWriter : object {
    [CompilerGeneratedAttribute]
private static Comparison`1<NodePosition> CS$<>9__CachedAnonymousMethodDelegate8;
    public static RunResult Run(Dictionary`2<string, object> entries, Action`1<Action`1<XmlReader>> FCreateReader, Action`1<Action`1<XmlWriter>> FCreateWriter, ILogger loggerForReading, ILogger loggerForWriting);
    private static RunResult Run_UpdateExistingXml(Dictionary`2<string, object> entries, Action`1<Action`1<XmlReader>> FCreateReader, Action`1<Action`1<XmlWriter>> FCreateWriter, EntriesReader enreader, ILogger logger);
    private static void Run_UpdateExistingXml_WriteThruSingleNode(XmlWriter xmlwriter, XmlReader xmlreader, ILogger logger);
    private static void Run_UpdateExistingXml_WriteEntries(XmlWriter xmlwriter, Dictionary`2<string, object> entries, IEnumerable`1<string> keysToWrite, ILogger logger);
    private static void Run_UpdateExistingXml_WriteThroughElementOpeningTag(LocationAwareXmlReader xmlreader, XmlWriter xmlwriter);
    private static bool Run_UpdateExistingXml_IsElementWithEntriesInside(List`1<PositionAction> elementactions, int nIndexInElementActions, NodePosition position, ILogger logger);
    private static bool Run_UpdateExistingXml_IsElementEntrysFirstChild(List`1<PositionAction> elementactions, int nIndexInElementActions, NodePosition position);
    private static bool Run_UpdateExistingXml_TryGetEntryElementAction(List`1<PositionAction> elementactions, NodePosition currentpos, Int32& nIndexInElementActions, EntryElementAction& action, String& sKey, ILogger logger);
    private static bool Run_UpdateExistingXml_TryGetEntryElementAction_TryGetEntryElementAction_Index(List`1<PositionAction> elementactions, NodePosition currentpos, Int32& nIndexInElementActions, ILogger logger);
    [CanBeNullAttribute]
private static EntriesReader Run_ReadExistingXmlForPositions(Action`1<Action`1<XmlReader>> FCreateReader, ILogger loggerForReading, ILogger loggerForWriting);
    private static RunResult Run_WriteFromScratch(Dictionary`2<string, object> entries, Action`1<Action`1<XmlWriter>> FCreateWriter, ILogger logger);
    private static void Run_AllScenarios_WriteXmlSpacePreserveAttr(XmlWriter xmlwriter);
    private static void Run_AllScenarios_WriteResourceDictionaryElementOpeningTag(XmlWriter xmlwriter);
    private static void Run_AllScenarios_WriteEntry(XmlWriter xmlwriter, string sKey, Dictionary`2<string, object> entries, ILogger logger);
    private static void XX_GetValueAndTypeId(string key, IDictionary`2<string, object> entries, StorageValueTypeId& typeid, Object& value);
    private static string X_GetEntryContent(object value, StorageValueTypeId typeid, ILogger logger);
    [CompilerGeneratedAttribute]
private static int <Run_UpdateExistingXml>b__0(NodePosition a, NodePosition b);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior : object {
    private IFileSettingsStorageBehaviorProvider[] myBehaviorProviders;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <DiskOperationSuppression>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDiskOperationAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSaveToDiskAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <SaveToDiskSuppression>k__BackingField;
    [NotNullAttribute]
public ICollectionEvents`1<object> DiskOperationSuppression { get; private set; }
    [NotNullAttribute]
public IProperty`1<bool> IsDiskOperationAllowed { get; private set; }
    [NotNullAttribute]
public IProperty`1<bool> IsSaveToDiskAllowed { get; private set; }
    [NotNullAttribute]
public ILogger Logger { get; private set; }
    [NotNullAttribute]
public ICollectionEvents`1<object> SaveToDiskSuppression { get; private set; }
    public FileSettingsStorageBehavior(Lifetime lifetime, IViewable`1<IFileSettingsStorageBehaviorProvider> behaviorproviders, ISettingsLogger logging, IThreading threading);
    public virtual bool QueryEditFile(FileSystemPath path);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_DiskOperationSuppression();
    [CompilerGeneratedAttribute]
private void set_DiskOperationSuppression(ICollectionEvents`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsDiskOperationAllowed();
    [CompilerGeneratedAttribute]
private void set_IsDiskOperationAllowed(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsSaveToDiskAllowed();
    [CompilerGeneratedAttribute]
private void set_IsSaveToDiskAllowed(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_SaveToDiskSuppression();
    [CompilerGeneratedAttribute]
private void set_SaveToDiskSuppression(ICollectionEvents`1<object> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lifeProvider, IFileSettingsStorageBehaviorProvider provider);
}
public interface JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior {
    [NotNullAttribute]
public ICollectionEvents`1<object> DiskOperationSuppression { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsDiskOperationAllowed { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsSaveToDiskAllowed { get; }
    [NotNullAttribute]
public ILogger Logger { get; }
    [NotNullAttribute]
public ICollectionEvents`1<object> SaveToDiskSuppression { get; }
    public abstract virtual ICollectionEvents`1<object> get_DiskOperationSuppression();
    public abstract virtual IProperty`1<bool> get_IsDiskOperationAllowed();
    public abstract virtual IProperty`1<bool> get_IsSaveToDiskAllowed();
    public abstract virtual ILogger get_Logger();
    public abstract virtual ICollectionEvents`1<object> get_SaveToDiskSuppression();
    public abstract virtual bool QueryEditFile(FileSystemPath path);
}
public interface JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehaviorProvider {
    public abstract virtual void Bind(Lifetime lifetime, IFileSettingsStorageBehavior behavior);
    public abstract virtual bool QueryEditFile(FileSystemPath path);
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization {
    public abstract virtual void Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    public abstract virtual void Save(Func`2<Dictionary`2<string, object>, bool> FSave);
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached {
    public abstract virtual bool FirstTimeLoadFromCache(Func`1<Dictionary`2<string, object>> FReadEntries, BinaryReader reader);
    public abstract virtual void SaveToCache(Func`2<Dictionary`2<string, object>, bool> FSaveEntries, BinaryWriter writer);
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsDirty { get; }
    public Nullable`1<bool> IsEmpty { get; }
    public abstract virtual string get_Name();
    [NotNullAttribute]
public abstract virtual Dictionary`2<string, object> GetInMemoryChangesDiffCopy();
    public abstract virtual IProperty`1<bool> get_IsDirty();
    public abstract virtual Nullable`1<bool> get_IsEmpty();
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization {
    public abstract virtual void Load(SettingsStorageLoadFlag flag, Action`1<Action`1<Stream>> FWithStream, ILogger logger);
    public abstract virtual Nullable`1<RunResult> Save(Action`1<Action`1<Stream>> FWithReadStream, Action`1<Action`1<Stream>> FWithWriteStream, ILogger loggerForReading, ILogger loggerForWriting);
}
public class JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader : XmlReader {
    private XmlReader myUnderlyingReader;
    private IXmlLineInfo myUnderlyingLineInfo;
    private int myNodeAbsoluteIndex;
    private NodePosition myCurrentNodePosition;
    private bool myIsCloseCalled;
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    public int NodeAbsoluteIndex { get; }
    public XmlReaderSettings Settings { get; }
    public string Name { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    public LocationAwareXmlReader(XmlReader underlyingReader);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    private void Read_AdvancePosition();
    public virtual void Close();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual int get_AttributeCount();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    public NodePosition CurrentPositionSnapshot();
    public NodePosition CurrentPositionVolatile();
    public int get_NodeAbsoluteIndex();
    public virtual string ToString();
    public virtual XmlReaderSettings get_Settings();
    public virtual string get_Name();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual bool get_CanResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_HasAttributes();
    protected virtual void Dispose(bool disposing);
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
}
public class JetBrains.Application.Settings.Storage.Persistence.MockFileSettingsStorageBehavior : object {
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <DiskOperationSuppression>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDiskOperationAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSaveToDiskAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <SaveToDiskSuppression>k__BackingField;
    public ICollectionEvents`1<object> DiskOperationSuppression { get; private set; }
    public IProperty`1<bool> IsDiskOperationAllowed { get; private set; }
    public IProperty`1<bool> IsSaveToDiskAllowed { get; private set; }
    public ILogger Logger { get; private set; }
    public ICollectionEvents`1<object> SaveToDiskSuppression { get; private set; }
    public MockFileSettingsStorageBehavior(Lifetime lifetime, Save save);
    public sealed virtual bool QueryEditFile(FileSystemPath path);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_DiskOperationSuppression();
    [CompilerGeneratedAttribute]
private void set_DiskOperationSuppression(ICollectionEvents`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsDiskOperationAllowed();
    [CompilerGeneratedAttribute]
private void set_IsDiskOperationAllowed(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsSaveToDiskAllowed();
    [CompilerGeneratedAttribute]
private void set_IsSaveToDiskAllowed(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_SaveToDiskSuppression();
    [CompilerGeneratedAttribute]
private void set_SaveToDiskSuppression(ICollectionEvents`1<object> value);
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache : object {
    private static string CacheFileExtensionWithDot;
    private static string CacheFolderLocalName;
    private static UInt32 SignatureDword;
    private static Encoding myEncodingForBinaryStrings;
    private static SettingsStorageBinaryCache();
    [NotNullAttribute]
public static BinaryWriter CreateWriterOnStream(Stream stream);
    [CanBeNullAttribute]
public static BinaryReader TryGetCachedStorageReader(StorageCacheIdentity identity, ILogger logger);
    [CanBeNullAttribute]
public static BinaryWriter TryGetCachedStorageWriter(StorageCacheIdentity identity, ILogger logger);
    [NotNullAttribute]
private static FileSystemPath GetBinaryCacheFilePath(StorageCacheIdentity identity);
    public static void CleanupCachedStorage(StorageCacheIdentity identity, ILogger logger);
}
public static class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers : object {
    [NotNullAttribute]
public static XmlReaderSettings XmlReaderSettingsRecommended;
    [NotNullAttribute]
public static XmlWriterSettings XmlWriterSettingsRecommended;
    private static SettingsStorageXmlHelpers();
    [NotNullAttribute]
public static string GetXmlElementLocalNameByValueTypeId(StorageValueTypeId typeid);
    [NotNullAttribute]
public static string GetXmlNamespaceUriByValueTypeId(StorageValueTypeId typeid);
    [NotNullAttribute]
public static string GetXmlNamespaceUriForKeyAttribute();
    [NotNullAttribute]
public static string GetXmlKeyAttributeLocalName();
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerialization : object {
    [NotNullAttribute]
private ISettingsStorageEntriesSerialization myStorage;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    public SettingsStorageXmlStreamSerialization(Lifetime lifetime, ISettingsStorageEntriesSerialization storage);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization.Load(SettingsStorageLoadFlag flag, Action`1<Action`1<Stream>> FWithStream, ILogger logger);
    private sealed virtual override Nullable`1<RunResult> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization.Save(Action`1<Action`1<Stream>> FWithReadStream, Action`1<Action`1<Stream>> FWithWriteStream, ILogger loggerForReading, ILogger loggerForWriting);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching : object {
    [NotNullAttribute]
private ISettingsStorageEntriesSerialization myStorage;
    [CompilerGeneratedAttribute]
private static Func`2<Dictionary`2<string, object>, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    public SettingsStorageXmlStreamSerializationWithBinaryCaching(Lifetime lifetime, ISettingsStorageEntriesSerialization storage);
    public LoadResult Load(SettingsStorageLoadFlag flag, Action`1<Action`1<Stream>> FWithStream, StorageCacheIdentity identity, ILogger logger);
    public SaveResult Save(Action`1<Action`1<Stream>> FWithReadStream, Action`1<Action`1<Stream>> FWithWriteStream, ILogger loggerForReading, ILogger loggerForWriting);
    [CompilerGeneratedAttribute]
private static bool <Load>b__8(Dictionary`2<string, object> objects);
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile : object {
    private Lifetime myLifetime;
    private ISettingsStorageSerializable myStorage;
    private SettingsStorageXmlStreamSerializationWithBinaryCaching myStorageXmlStreamSerialization;
    [NotNullAttribute]
public IProperty`1<FileSystemPath> Path;
    private IThreading myThreading;
    private IFileSettingsStorageBehavior myBehavior;
    private IProperty`1<bool> myIsReloadReschedulled;
    private IProperty`1<bool> myIsSaveReschedulled;
    private LockObject myLockSerialization;
    private Pair`2<FileSystemPath, DateTime> myLastLoadedStamp;
    private Nullable`1<DateTime> myUtcTimeFileDisappeared;
    private TimeSpan OptionWaitForDisappearedFileTimeout;
    private bool myIsStorageCorruptedOnLoad;
    private TimeSpan OptionSaveWhenDirtyInterval;
    private TimeSpan OptionLockTimeout;
    private ILogger myLogger;
    private static int StreamAccessRetryInitialMs;
    private static int MaxReadStreamAccessWaitMs;
    private static TimeSpan RescheduleOnFailedSaveOrReloadInterval;
    private bool myIsFileEverSeenExisting;
    [CompilerGeneratedAttribute]
private SavingEmptyContent <FileWhenNoContent>k__BackingField;
    public SavingEmptyContent FileWhenNoContent { get; private set; }
    public SettingsStoreSerializationToXmlDiskFile(Lifetime lifetime, ISettingsStorageSerializable storage, IProperty`1<FileSystemPath> path, SavingEmptyContent whenNoContent, IFileSystemTracker filetracker, IThreading threading, IFileSettingsStorageBehavior behavior);
    private static SettingsStoreSerializationToXmlDiskFile();
    private void Init_FirstLoadLastSave(Lifetime lifetime, IFileSettingsStorageBehavior behavior);
    private void Init_SynchronizeLifetimeTerminationWithSerialization(Lifetime lifetime);
    private void Init_SaveOnDirty(Lifetime lifetime, ISettingsStorageSerializable storage, IThreading threading, IFileSettingsStorageBehavior behavior);
    private void Init_ReschedulledSaveOrReload(Lifetime lifetime, IThreading threading);
    public void SaveRequested();
    private void Init_OnPathChange(Lifetime lifetime, IProperty`1<FileSystemPath> path, IFileSettingsStorageBehavior behavior);
    [CompilerGeneratedAttribute]
public SavingEmptyContent get_FileWhenNoContent();
    [CompilerGeneratedAttribute]
private void set_FileWhenNoContent(SavingEmptyContent value);
    private void Init_FileTracker(Lifetime lifetime, IFileSystemTracker filetracker, IProperty`1<FileSystemPath> path, IFileSettingsStorageBehavior behavior);
    public void ReloadOnFileChangeRequested();
    public void Reload(ReloadReason reason);
    private void ReloadReschedulled(bool newstate);
    private void SaveReschedulled(bool newstate);
    [PureAttribute]
private bool Reload_IsWaitingForMissedFile(FileSystemPath path, ReloadReason reason);
    private void Reload_ReadStream(FileSystemPath path, Action`1<Stream> F);
    private Pair`2<FileSystemPath, DateTime> GetFileStamp(FileSystemPath path);
    public void Save(SaveDiffFlags flagsDiff, SaveForcedFlags flagsForced);
    private bool Save_QueryEditFile();
    private void Save_WriteFile(SaveDiffFlags flagsDiff, SaveForcedFlags flagsForced);
    [CanBeNullAttribute]
private FileStream Save_WriteFile_OpenStreamAndTakeLock(Lifetime lifeFileAccess, FileSystemPath path, SaveForcedFlags flagsForced, bool isRecursing);
    private void Save_WriteFile_PromoteWriteCache(FileStream filestream, ChunkedMemoryStream streamInMemoryWrite, Action`1<StorageCacheIdentity> FFlushBinaryCache, FileSystemPath path);
    private void Save_WriteFile_BackupOldCorruptedFile(FileSystemPath path);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    [CompilerGeneratedAttribute]
private void <Init_FirstLoadLastSave>b__1();
    [CompilerGeneratedAttribute]
private void <Init_SynchronizeLifetimeTerminationWithSerialization>b__4();
    [CompilerGeneratedAttribute]
private void <SaveRequested>b__f();
    [CompilerGeneratedAttribute]
private void <SaveRequested>b__10();
    [CompilerGeneratedAttribute]
private void <ReloadOnFileChangeRequested>b__1a();
}
public class JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage : object {
    [NotNullAttribute]
public ISettingsStorageSerializable Storage;
    [NotNullAttribute]
private SettingsStoreSerializationToXmlDiskFile DiskFile;
    public static string SettingsStorageFileExtensionNoDot;
    public static string SettingsStorageFileExtensionWithDot;
    public SavingEmptyContent FileWhenNoContent { get; }
    [NotNullAttribute]
public IProperty`1<FileSystemPath> Path { get; }
    public XmlFileSettingsStorage(Lifetime lifetime, string name, IProperty`1<FileSystemPath> path, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    public XmlFileSettingsStorage(Lifetime lifetime, string name, FileSystemPath path, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    private static XmlFileSettingsStorage();
    public SavingEmptyContent get_FileWhenNoContent();
    public void ReloadFromDiskRequested();
    public void ReloadFromDiskNow();
    public void SaveToDiskRequested();
    public void SaveToDiskNow();
    public IProperty`1<FileSystemPath> get_Path();
    public virtual string ToString();
}
public class JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs : ValueType {
    [NotNullAttribute]
public FrugalLocalList`1<KeyPathComponents> Keys;
    public SettingsStorageChangeArgs(FrugalLocalList`1<KeyPathComponents> keys);
}
public class JetBrains.Application.Settings.Storage.Substring : ValueType {
    public string Content;
    public ContentSubstring ContentSubstring;
    private Substring(string content, ContentSubstring substring);
    public static Substring FromString(string s);
    public static Substring FromSubstring(string s, int offset, int length);
    public virtual string ToString();
    [NotNullAttribute]
private string CommitToString();
    public sealed virtual bool Equals(Substring other);
    private sealed virtual override int System.IComparable<JetBrains.Application.Settings.Storage.Substring>.CompareTo(Substring other);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
}
public interface JetBrains.Application.Settings.Upgrade.IMigrateSettings {
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public abstract virtual void Migrate(IContextBoundSettingsStore store);
}
[BaseTypeRequiredAttribute("JetBrains.Application.Settings.Upgrade.IMigrateSettings")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.Settings.Upgrade.MigrateSettingsAttribute : PartAttribute {
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.Upgrade.SettingsMigrationManager : object {
    public static PropertyId`1<bool> DisableMigration;
    public SettingsMigrationManager(Lifetime lifetimeUnsync, ISettingsStore store, ISettingsLogger settingslogger, ShellPartCatalogSet catalogset, IComponentContainer container, IThreading threading, ManualOverride manualOverride);
    private static SettingsMigrationManager();
    private static void ApplyMigratorToMount(MigratorAndLifetime migrator, MigratorRuntimeData migratordata, MountAndLifetime mount, IMigrateSettings migratorInstance, ISettingsStore store, IComponentContainer container, ILogger logger);
    private static bool ApplyMigratorToMount_IsAnythingToMigrate(MigratorAndLifetime migrator, MigratorRuntimeData migratordata, MountAndLifetime mount, ILogger logger);
    private static bool ApplyMigratorToMount_IsAnythingToMigrate_Entry(MigratorAndLifetime migrator, SettingsEntry entry, KeyPathComponents components, MountAndLifetime mount, ILogger logger);
    private static bool ApplyMigratorToMount_IsAnythingToMigrate_Key(MigratorAndLifetime migrator, SettingsKey key, KeyPathComponents components, MountAndLifetime mount, ILogger logger);
    private static bool ApplyMigratorToMount_IsNotUsed(MigratorAndLifetime migrator, IContextBoundSettingsStore bound, MountAndLifetime mount, ILogger logger);
    private static void ApplyMigratorToMount_Run(MigratorAndLifetime migrator, IMigrateSettings migratorInstance, IContextBoundSettingsStore bound, MountAndLifetime mount, ILogger logger);
    [NotNullAttribute]
private static IMigrateSettings CreateMigratorInstance(Lifetime lifeMigratorInstance, PartCatalogType migratorType, IComponentContainer container, ILogger logger);
    [NotNullAttribute]
private static MigratorRuntimeData GetMigratorData(IMigrateSettings migratorInstance, ISettingsStore store, ILogger logger);
    private static bool GetMigratorData_AssertNonIndexedKeys(IMigrateSettings migratorInstance, SettingsKey key, object keyorentry, ILogger logger);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "Stores the settings migration status for each of the settings layers. Should only be present if a settings migration case was detected, and the migration procedure has run.")]
public class JetBrains.Application.Settings.Upgrade.SettingsMigrationSettingsKey : object {
    public static Expression`1<Func`2<SettingsMigrationSettingsKey, IIndexedEntry`2<string, bool>>> Expression_IsMigratorApplied;
    [SettingsIndexedEntryAttribute("If the specified migrator object, identified by the full class name (without assembly name), has already been run for the mount point in which this information is written.")]
public IIndexedEntry`2<string, bool> IsMigratorApplied;
    private static SettingsMigrationSettingsKey();
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.Upgrade.UpgradeSettingsTableUtil : object {
    [ExtensionAttribute]
public static void UpgradeBoolSetting(SettingsTableBase table, string propertyName, bool defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, bool>> targetExpr);
    [ExtensionAttribute]
public static void UpgradeBoolSetting(SettingsTableBase table, string propertyName, bool defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TValueClass>> targetExpr, Func`2<bool, TValueClass> converterFunc);
    [ExtensionAttribute]
public static void UpgradeIntSetting(SettingsTableBase table, string propertyName, int defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, int>> targetExpr);
    [ExtensionAttribute]
public static void UpgradeIntSetting(SettingsTableBase table, string propertyName, int defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TValueClass>> targetExpr, Func`2<int, TValueClass> converter);
    [ExtensionAttribute]
public static void UpgradeStringSetting(SettingsTableBase table, string propertyName, string defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, string>> targetExpr);
    [ExtensionAttribute]
public static void UpgradeEnumSetting(SettingsTableBase table, string propertyName, TEnumValue defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TEnumValue>> targetExpr);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayers : object {
    private RegisterInjectedMounts myRegistrar;
    public FileInjectedLayers(RegisterInjectedMounts registrar);
    public bool IsLayerInjected(Identity host, FileSystemPath file);
    public void InjectLayer(Identity host, IPath file);
}
[SettingsIndexedKeyAttribute("JetBrains.Application.Settings.UserInterface.InjectedLayersSettingsKey", "An injected layer created over a file path.", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayerSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Specifies the absolute path to the file-based user-injected layer disk file. Optional. The RelativePath (if applicable) has priority over this value.")]
public FileSystemPath AbsolutePath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Specifies the relative path to the file-based user-injected layer disk file, relatively to its hosting layer (NOTE: the file itself, not the directory). Optional. This is only available when the hosting layer is also file-based and has its path available, and these paths are off the same root. When defined, this path should be preferred for restoring the mounted layer in the new session.")]
public RelativePath RelativePath;
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts : object {
    private IThreading myThreading;
    private DictionaryEvents`2<UserFriendlySettingsLayer, CollectionEvents`1<FileInjectedLayerInstance>> myMapHostToInjected;
    private Dictionary`2<Identity, UserFriendlySettingsLayer> myMapHostIdToHostLayer;
    private Dictionary`2<Identity, int> myMapHostToSyncResultsGeneration;
    private SpinWaitLockRef myLockMapHostToSyncResultsGeneration;
    private SettingsIndexedKey mySchemaKey;
    private ILogger myLogger;
    private ReaderWriterLockSlim mySynchronizeReadHostLayerCurrentData;
    private Lifetime myLifetimeComponent;
    public RegisterInjectedMounts(Lifetime lifetimeComponentUnsynchronized, UserInjectedSettingsLayers injections, IThreading threading, ISettingsLogger logging, SettingsSchema schema, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    [GuardAttribute("1")]
private void ForEachHostingLayer(Lifetime lifeHost, UserFriendlySettingsLayer layerHost);
    [GuardAttribute("-1")]
private void SynchronizeHostLayer(UserFriendlySettingsLayer layerHost);
    [NotNullAttribute]
private JetHashSet`1<FileInjectedLayerInstance> SynchronizeHostLayer_ReadCurrent(UserFriendlySettingsLayer layerHost);
    [CanBeNullAttribute]
private static FileSystemPath TryGetHostLayerBasePath(UserFriendlySettingsLayer layerHost);
    [GuardAttribute("1")]
public void Synchronize();
    internal bool IsLayerInjected(Identity host, FileSystemPath file);
    internal void InjectLayer(Identity host, IPath file);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "User-injected layers list stored in the injections host layer.")]
public class JetBrains.Application.Settings.UserInterface.InjectedLayersSettingsKey : object {
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.UserInterface.ResetSettings : object {
    private ISettingsStore myStore;
    private SettingsStorageMountPoints myMounts;
    private UserInjectedSettingsLayers myInjector;
    public ISignal`1<EventArgs`1<Identity>> BeforeResetSettings;
    public ISignal`1<EventArgs`1<Identity>> AfterResetSettings;
    private ILogger myLogger;
    public ResetSettings(Lifetime lifetime, ISettingsStore store, ISettingsLogger settingslogging, SettingsStorageMountPoints mounts, UserInjectedSettingsLayers injector);
    public void Reset(Identity layerid, IEnumerable`1<Tuple`2<SettingsKey, IDictionary`2<SettingsKey, object>>> keys);
    public void ResetAllSettings();
    [CompilerGeneratedAttribute]
private bool <ResetAllSettings>b__c(ISettingsStorageMountPoint mount);
}
public class JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer : object {
    public Identity Id;
    public IProperty`1<string> OriginText;
    public double Priority;
    public IPropertyBag Metadata;
    public IProperty`1<string> DisplayName;
    public IProperty`1<IconId> Icon;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStoreLive <SettingsStoreContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public string Name { get; }
    public IContextBoundSettingsStoreLive SettingsStoreContext { get; private set; }
    public bool IsDefault { get; }
    internal UserFriendlySettingsLayer(Lifetime lifetime, Identity id, ISettingsStore store);
    public string get_Name();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStoreLive get_SettingsStoreContext();
    [CompilerGeneratedAttribute]
private void set_SettingsStoreContext(IContextBoundSettingsStoreLive value);
    public bool get_IsDefault();
    [NotNullAttribute]
private static IContextBoundSettingsStoreLive ContextFromIdentity(Lifetime lifetime, Identity id, ISettingsStore store);
    private static double PriorityFromIdentity(Lifetime lifetime, Identity id);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__1(string s);
    [CompilerGeneratedAttribute]
private string <.ctor>b__2(string s);
    [CompilerGeneratedAttribute]
private static bool <ContextFromIdentity>b__6(ISettingsStorageMountPoint mount);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers : object {
    [NotNullAttribute]
public ISettingsStore SettingsStore;
    public UserFriendlySettingsLayer DefaultLayer;
    public ListEvents`1<UserFriendlySettingsLayer> UserEditableLayers;
    public ListEvents`1<UserFriendlySettingsLayer> VisibleLayers;
    public static PropertyId`1<bool> IsHiddenFromUserFriendlyLayers;
    public static PropertyId`1<bool> IsNonUserEditable;
    public static PropertyId`1<string> Origin;
    public static PropertyId`1<FileSystemPath> DiskFilePath;
    public static PropertyId`1<string> DisplayName;
    public static PropertyId`1<string> LayerId;
    public static PropertyId`1<IconId> Icon;
    public static string DefaultLayerOriginText;
    public UserFriendlySettingsLayers(Lifetime lifetime, ISettingsStore store, Flags flags);
    private static UserFriendlySettingsLayers();
    [CanBeNullAttribute]
public UserFriendlySettingsLayer TryGetLayerById(Identity identity);
    [NotNullAttribute]
public UserFriendlySettingsLayer GetLayerById(Identity identity);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BeforeAddRemoveIndexEventArgs`1<UserFriendlySettingsLayer> args);
}
[ShellComponentAttribute]
public class JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers : object {
    private Lifetime myLifetime;
    private SettingsStorageMountPoints myRegisteredMounts;
    private SettingsStorageProvidersCollection myProvidersCollection;
    public static PropertyId`1<bool> IsHostingUserInjections;
    public static PropertyId`1<bool> IsUserInjected;
    private static PropertyId`1<UserInjectedLayerDescriptor> InjectedLayerDescriptor;
    public CollectionEvents`1<UserFriendlySettingsLayer> LayersHostingUserInjections;
    private Dictionary`2<ISettingsStorageMountPoint, UserInjectedLayerRuntimeInfo> myMapInjectedMountToInjectedLayer;
    private Dictionary`2<ISettingsStorageMountPoint, HostingLayerRuntimeInfo> myMapHostMountToHostingLayer;
    private ILogger myLogger;
    private UserFriendlySettingsLayers myUserFriendlySettingsLayers;
    private CollectionEvents`1<HostingLayerRuntimeInfo> myLayersHostingUserInjectionsInternal;
    [CompilerGeneratedAttribute]
private static Func`2<UserInjectedLayerRuntimeInfo, ISettingsStorageMountPoint> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<UserInjectedLayerRuntimeInfo, ISettingsStorageMountPoint> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, double> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, double> CS$<>9__CachedAnonymousMethodDelegate2a;
    public UserInjectedSettingsLayers(Lifetime lifetime, SettingsStorageMountPoints mounts, ISettingsLogger logging, SettingsStorageProvidersCollection providersCollection, ISettingsStore store, IThreading threading);
    private static UserInjectedSettingsLayers();
    public void RegisterUserInjectedLayer(Lifetime lifetimeInjection, UserInjectedLayerDescriptor descriptor);
    public bool IsUserInjectedLayer(Identity layerPossiblyInjected);
    public bool IsHostingUserInjectedLayers(Identity layerPossiblyHostingInjections);
    [CanBeNullAttribute]
public UserFriendlySettingsLayer TryGetLayerHostingUserInjectedLayer(Identity layerPossiblyInjected);
    [NotNullAttribute]
public UserFriendlySettingsLayer GetLayerHostingUserInjectedLayer(Identity layerInjected);
    private void Init_WatchForHostingLayers(Lifetime lifetime, SettingsStorageMountPoints mounts, UserFriendlySettingsLayers layers, IThreading threading, ILogger logger);
    private void Init_AssertValidFlags(Lifetime lifetime, SettingsStorageMountPoints mounts, ILogger logger);
    [NotNullAttribute]
public List`1<UserFriendlySettingsLayer> GetAllUserInjectedLayers();
    [NotNullAttribute]
public IList`1<UserFriendlySettingsLayer> GetUserInjectedLayersFromHost(Identity layerHost);
    public void DeleteUserInjectedLayer(Identity layerInjected);
    public bool TurnInjectedLayerOnOff(Identity layerInjected, Nullable`1<bool> desired);
    public bool IsInjectedLayerOn(Identity layerInjected);
    private IEnumerable`1<ISettingsStorageMountPoint> Get(ISettingsStorageMountPoint mount);
    [CanBeNullAttribute]
private static ISettingsStorageMountPoint TryGetMountFromLayer(Identity idlayer);
    [NotNullAttribute]
private static ISettingsStorageMountPoint GetMountFromLayer(Identity idlayer);
    public bool CanReorderInjectedLayers(Identity layerToMove, ReorderInjectedLayersFlags how);
    public void ReorderInjectedLayers(Identity layerToMove, ReorderInjectedLayersFlags how, Identity other);
    [CompilerGeneratedAttribute]
private bool <IsUserInjectedLayer>b__3(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private UserInjectedLayerRuntimeInfo <TryGetLayerHostingUserInjectedLayer>b__4(ISettingsStorageMountPoint mountInjected);
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayer <TryGetLayerHostingUserInjectedLayer>b__5(UserInjectedLayerRuntimeInfo runinfo);
    [CompilerGeneratedAttribute]
private void <Init_WatchForHostingLayers>b__e(Lifetime lifeHost, HostingLayerRuntimeInfo host);
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserFriendlySettingsLayer> <GetAllUserInjectedLayers>b__1c(HostingLayerRuntimeInfo host);
    [CompilerGeneratedAttribute]
private static ISettingsStorageMountPoint <GetAllUserInjectedLayers>b__1d(UserInjectedLayerRuntimeInfo runinfo);
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayer <GetAllUserInjectedLayers>b__1e(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private static ISettingsStorageMountPoint <GetUserInjectedLayersFromHost>b__20(UserInjectedLayerRuntimeInfo runinfo);
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayer <GetUserInjectedLayersFromHost>b__21(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private static double <CanReorderInjectedLayers>b__27(ISettingsStorageMountPoint x);
    [CompilerGeneratedAttribute]
private static double <CanReorderInjectedLayers>b__28(ISettingsStorageMountPoint x);
}
[SettingsKeyAttribute("System.Reflection.Missing", "Application environment settings. Generally should not be shared with the solution within a team.")]
public class JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings : object {
}
[SettingsKeyAttribute("System.Reflection.Missing", "Application housekeeping settings. Generally should not be shared with the solution within a team.")]
public class JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings : object {
}
[ShellComponentAttribute]
public class JetBrains.Application.Shell.AddProductIdentityToLogs : object {
    private IApplicationHost myNameAndVersion;
    private IEnumerable`1<IApplicationPackage> myPackages;
    private ProductConfigurations myProductConfigurations;
    private SubProducts myProducts;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private static Func`2<ISubProductInfo, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ZonePart, StringSource> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IApplicationPackage, string> CS$<>9__CachedAnonymousMethodDelegate9;
    public AddProductIdentityToLogs(Lifetime lifetime, IApplicationHost nameAndVersion, IEnumerable`1<IApplicationPackage> packages, ProductConfigurations productConfigurations, SubProducts products, ILogger logger);
    public void AddIdentityToLog(LoggingLevel loggingLevel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static string <AddIdentityToLog>b__4(ISubProductInfo spi);
    [CompilerGeneratedAttribute]
private static StringSource <AddIdentityToLog>b__5(ZonePart zone);
    [CompilerGeneratedAttribute]
private static string <AddIdentityToLog>b__6(IApplicationPackage apppkg);
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.Shell.AdjustSystemTraceListeners : object {
    private ShellTraceListener myTraceListener;
    public AdjustSystemTraceListeners(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Shell.ApplyCommandLineKeysToLogger : object {
    public static string SwitchLogInfo;
    public static string SwitchLogNormal;
    public static string SwitchLogVerbose;
    public static string SwitchLogTrace;
    public static string SwitchLog;
    public static string SwitchLogFile;
    public static string SwitchLogLevel;
    public ApplyCommandLineKeysToLogger(IProductCommandLine cmdline);
}
[EnvironmentComponentAttribute]
internal class JetBrains.Application.Shell.AssertShellLocksAreGuarded : object {
    public AssertShellLocksAreGuarded(Lifetime lifetime, IShellLocks locks);
}
[ShellComponentAttribute]
public class JetBrains.Application.Shell.DelayedInitialization : object {
    public virtual void Schedule(Lifetime lifetime, Action action);
}
[ShellComponentAttribute]
public class JetBrains.Application.Shell.HostCulture : object {
    [NotNullAttribute]
public CultureInfo Culture { get; }
    public virtual CultureInfo get_Culture();
}
[ObsoleteAttribute("Use ITearDown, and in tests assemblies only.")]
public interface JetBrains.Application.Shell.IObsoleteTearDown {
    public abstract virtual void TearDown();
}
public interface JetBrains.Application.Shell.IOneTimeInitializationHandler {
    public abstract virtual void PerformOneTimeInitialization();
}
public static class JetBrains.Application.Shell.OneTimeInitializationChecker : object {
    public static string IdentityRegistryValueName;
    public static string GenerationRegistryValueName;
    private static OneTimeInitializationChecker();
    public static bool IsInitializationNeeded(string identity, bool bMarkAsDone, Action`1<Exception> failed, ProductSettingsLocation productSettingsLocation);
    public static string GetActualIdentity(IApplicationHost applicationDescriptor);
}
public abstract class JetBrains.Application.Shell.OneTimeInitializationManager : object {
    private IViewable`1<IOneTimeInitializationHandler> myHandlers;
    private ProductSettingsLocation myProductSettingsLocation;
    private IApplicationHost myProduct;
    private bool myIsOneTimeInitializationRequiredForCurrentUser;
    private IProductCommandLine myProductCommandLine;
    [CompilerGeneratedAttribute]
private static Action`2<Lifetime, IOneTimeInitializationHandler> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsOneTimeInitializationRequiredForCurrentUser { get; }
    protected bool IsOneTimeInitAllowed { get; }
    protected OneTimeInitializationManager(IViewable`1<IOneTimeInitializationHandler> handlers, ProductSettingsLocation productSettingsLocation, IApplicationHost product, IProductCommandLine productCommandLine);
    public bool get_IsOneTimeInitializationRequiredForCurrentUser();
    protected abstract virtual bool get_IsOneTimeInitAllowed();
    protected virtual bool IsInitializationNeeded(bool markAsDone);
    protected void OneTimeInitialize(Lifetime lifetime);
    protected abstract virtual void OnCheckFailed(Exception exception);
    [CompilerGeneratedAttribute]
private static void <OneTimeInitialize>b__0(Lifetime lt, IOneTimeInitializationHandler handler);
}
internal class JetBrains.Application.Shell.ShellTraceListener : TraceListener {
    private static void WriteCore(string message);
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.ShellComponentAttribute : ProductComponentAttribute {
    public ShellComponentAttribute(Lifecycle lifecycle, Creation creation, Access access);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.ShellFeaturePartAttribute : PartAttribute {
}
[ZoneMarkerAttribute]
[ShellComponentAttribute]
public class JetBrains.Application.ShellFeaturePartsContainer : object {
    private IComponentContainer myContainer;
    public ShellFeaturePartsContainer(Lifetime lifetime, ShellPartCatalogSet catalogueSet, IComponentContainer parentContainer);
    public sealed virtual IEnumerable`1<T> GetFeatureParts(Func`2<T, bool> isApplicable);
}
[TypeConverterAttribute("JetBrains.Application.Shortcuts.ActionShortcutConverter")]
[ValueSerializerAttribute("JetBrains.Application.Shortcuts.ActionShortcut/ActionShortcutSerializer")]
public abstract class JetBrains.Application.Shortcuts.ActionShortcut : object {
    public KeyboardShortcut[] KeyboardShortcuts { get; }
    public bool IsChord { get; }
    public abstract virtual KeyboardShortcut[] get_KeyboardShortcuts();
    public abstract virtual bool get_IsChord();
    public abstract virtual string ToString();
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.Shortcuts.ActionShortcutConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class JetBrains.Application.Shortcuts.DoubleShortcut : ActionShortcut {
    private KeyboardShortcut[] myShortcuts;
    public KeyboardShortcut FirstShortcut { get; }
    public KeyboardShortcut SecondShortcut { get; }
    public KeyboardShortcut[] KeyboardShortcuts { get; }
    public bool IsChord { get; }
    public DoubleShortcut(KeyboardShortcut firstShortcut, KeyboardShortcut secondShortcut);
    public KeyboardShortcut get_FirstShortcut();
    public KeyboardShortcut get_SecondShortcut();
    public virtual KeyboardShortcut[] get_KeyboardShortcuts();
    public virtual bool get_IsChord();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[FlagsAttribute]
public enum JetBrains.Application.Shortcuts.KeyboardModifiers : Enum {
    public int value__;
    public static KeyboardModifiers None;
    public static KeyboardModifiers ShiftLeft;
    public static KeyboardModifiers ShiftRight;
    public static KeyboardModifiers ControlLeft;
    public static KeyboardModifiers ControlRight;
    public static KeyboardModifiers AltLeft;
    public static KeyboardModifiers AltRight;
    public static KeyboardModifiers Shift;
    public static KeyboardModifiers Control;
    public static KeyboardModifiers Alt;
    public static KeyboardModifiers ShiftMask;
    public static KeyboardModifiers ControlsMask;
    public static KeyboardModifiers AltMask;
}
public static class JetBrains.Application.Shortcuts.KeyboardModifiersUtils : object {
    public static Keys[] ModifierKeys;
    public static KeyboardModifiers[] Modifiers;
    public static Keys[] ModifierKeysMasks;
    public static KeyboardModifiers[] ModifierMasks;
    private static KeyboardModifiersUtils();
    public static KeyboardModifiers FetchModifiers(Keys& keys);
    public static KeyboardModifiers FetchModifiersMask(Keys keys);
    public static bool Match(KeyboardModifiers pattern, KeyboardModifiers modifiers);
    public static KeyboardModifiers[] DependentModifiers(KeyboardModifiers genericModifier);
    public static KeyboardModifiers[] GenericModifiers(KeyboardModifiers modifiers);
    public static KeyboardModifiers GetKeyboardModifiersState();
}
public class JetBrains.Application.Shortcuts.KeyboardParseException : Exception {
    public KeyboardParseException(string message, Exception innerException);
}
[ValueSerializerAttribute("JetBrains.Application.Shortcuts.KeyboardShortcutSerializer")]
[TypeConverterAttribute("JetBrains.Application.Shortcuts.KeyboardShortcutConverter")]
public class JetBrains.Application.Shortcuts.KeyboardShortcut : ValueType {
    private Keys myKey;
    private KeyboardModifiers myModifiers;
    public static KeyboardShortcut Invalid;
    public Keys Key { get; }
    public KeyboardModifiers Modifiers { get; }
    public KeyboardShortcut(Keys keys);
    public KeyboardShortcut(Keys keys, KeyboardModifiers keyboardModifiers);
    private static KeyboardShortcut();
    public Keys get_Key();
    public KeyboardModifiers get_Modifiers();
    private void UpdateModifiers();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string Format(KeyboardModifiers[] preferrableModifiers);
    public virtual string ToString();
    public static KeyboardShortcut Parse(string shortcut, KeyboardShortcut& secondShortcut);
    private static KeyboardShortcut Parse(string s);
    private static Keys ParseKeys(string s);
    private static KeyboardModifiers ParseModifiers(string s);
    public static bool op_Equality(KeyboardShortcut left, KeyboardShortcut right);
    public static bool op_Inequality(KeyboardShortcut left, KeyboardShortcut right);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.Shortcuts.KeyboardShortcutConverter : TypeConverterBase`1<KeyboardShortcut> {
    [CompilerGeneratedAttribute]
private static Func`4<ITypeDescriptorContext, CultureInfo, KeyboardShortcut, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`4<ITypeDescriptorContext, CultureInfo, string, KeyboardShortcut> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(ITypeDescriptorContext context, CultureInfo info, KeyboardShortcut shortcut);
    [CompilerGeneratedAttribute]
private static KeyboardShortcut <.ctor>b__1(ITypeDescriptorContext context, CultureInfo info, string s);
}
public class JetBrains.Application.Shortcuts.KeyboardShortcutSerializer : ValueSerializerBase`1<KeyboardShortcut> {
    [CompilerGeneratedAttribute]
private static Func`3<IValueSerializerContext, KeyboardShortcut, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`3<IValueSerializerContext, string, KeyboardShortcut> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(IValueSerializerContext context, KeyboardShortcut shortcut);
    [CompilerGeneratedAttribute]
private static KeyboardShortcut <.ctor>b__1(IValueSerializerContext context, string s);
}
public enum JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope : Enum {
    public int value__;
    public static ShortcutScope Global;
    public static ShortcutScope TextEditor;
}
public class JetBrains.Application.Shortcuts.ShortcutScheme : EnumPattern {
    public static string NOT_SET_NAME;
    public static string NONE_NAME;
    public static ShortcutScheme NotSet;
    public static ShortcutScheme None;
    public static ShortcutScheme Idea;
    public static ShortcutScheme VS;
    protected ShortcutScheme(string name);
    private static ShortcutScheme();
    public static ShortcutScheme Parse(string name);
}
[ShellComponentAttribute]
public class JetBrains.Application.Shortcuts.ShortcutScopeMonitor : object {
    public IProperty`1<ShortcutScope[]> ActiveShortcutScopes;
    protected static ShortcutScope[] DefaultScopes;
    protected static ShortcutScope[] TextControlScopes;
    protected static ReadonlyToken ReadonlyToken;
    private static ShortcutScopeMonitor();
}
[LocalizableAttribute("False")]
public static class JetBrains.Application.Shortcuts.ShortcutUtil : object {
    private static string DELIMETER;
    private static Regex ourWinFormToVSKeyRegex;
    private static Regex ourVSToWinFormKeyRegex;
    private static Dictionary`2<string, string> ourWinFormToVSKeyNames;
    private static Dictionary`2<string, string> ourVSToWinFormKeyNames;
    private static Pair`2[] ourWinFormAndVSKeyPairs;
    [CompilerGeneratedAttribute]
private static Func`2<IDictionary`2<string, string>, Regex> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, string, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<StringBuilder, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<KeyboardShortcut, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static MatchEvaluator CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static MatchEvaluator CS$<>9__CachedAnonymousMethodDelegateb;
    private static ShortcutUtil();
    [NotNullAttribute]
public static string GetBindingsString(ActionShortcut shortcut);
    [NotNullAttribute]
private static string ConvertToBindingString(string shortcutString);
    [NotNullAttribute]
private static string ConvertToKeyboardShortcutString(string bindingsString);
    [CanBeNullAttribute]
public static ActionShortcut BindingsToShortcut(string bindingsString);
    [CanBeNullAttribute]
public static ActionShortcut ParseKeyboardShortcut(string text);
    public static bool HasConflict(ActionShortcut a, ActionShortcut b);
    [CompilerGeneratedAttribute]
private static Regex <.cctor>b__0(IDictionary`2<string, string> dictionary);
    [CompilerGeneratedAttribute]
private static StringBuilder <.cctor>b__1(StringBuilder builder, string s);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__2(StringBuilder builder);
    [CompilerGeneratedAttribute]
private static string <GetBindingsString>b__6(KeyboardShortcut s);
    [CompilerGeneratedAttribute]
private static string <ConvertToBindingString>b__8(Match match);
    [CompilerGeneratedAttribute]
private static string <ConvertToKeyboardShortcutString>b__a(Match match);
}
public class JetBrains.Application.Shortcuts.SingleShortcut : ActionShortcut {
    public KeyboardShortcut Shortcut;
    public KeyboardShortcut[] KeyboardShortcuts { get; }
    public bool IsChord { get; }
    public SingleShortcut(KeyboardShortcut keyboardShortcut);
    public virtual KeyboardShortcut[] get_KeyboardShortcuts();
    public virtual bool get_IsChord();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[FlagsAttribute]
public enum JetBrains.Application.Shortcuts.StructuralNavigationBehavior : Enum {
    public int value__;
    public static StructuralNavigationBehavior DisabledOnIndenting;
    public static StructuralNavigationBehavior DisabledAtLineEnd;
    public static StructuralNavigationBehavior DisabledOnSelection;
    public static StructuralNavigationBehavior DisabledInCommentsAndStringLiterals;
    public static StructuralNavigationBehavior Forced;
    public static StructuralNavigationBehavior Default;
}
[ExtensionAttribute]
public static class JetBrains.Application.Shortcuts.StructuralNavigationBehaviorExtensions : object {
    [ExtensionAttribute]
public static bool HasFlag(StructuralNavigationBehavior value, StructuralNavigationBehavior flag);
}
[ExtensionAttribute]
public static class JetBrains.Application.SinceClr4.BuildScript.Compile.BoostTestMarkerUtil : object {
    private static string Extension;
    private static RelativePath ourDirectory;
    private static BoostTestMarkerUtil();
    [ExtensionAttribute]
public static bool IsBoostTestMarkerFile(RelativePath file);
    [NotNullAttribute]
public static RelativePath GetBoostTestMarkerFile();
}
public enum JetBrains.Application.SinceClr4.BuildScript.Compile.PdbMarker : Enum {
    public int value__;
    public static PdbMarker Native;
    public static PdbMarker Managed;
}
[ExtensionAttribute]
public static class JetBrains.Application.SinceClr4.BuildScript.Compile.PdbMarkerUtil : object {
    private static string Extension;
    private static RelativePath ourDirectory;
    private static PdbMarkerUtil();
    [ExtensionAttribute]
public static bool IsPdbMarkerFile(RelativePath file, PdbMarker marker);
    [NotNullAttribute]
private static RelativePath GetMarkerFile(PdbMarker marker);
    [NotNullAttribute]
public static SimpleFileItem CreateMarkerFile(PdbMarker marker);
}
[FlagsAttribute]
public enum JetBrains.Application.SingleInstanceStandaloneProductBehaviorFlags : Enum {
    public int value__;
    public static SingleInstanceStandaloneProductBehaviorFlags None;
    public static SingleInstanceStandaloneProductBehaviorFlags PassCommandLine;
    public static SingleInstanceStandaloneProductBehaviorFlags MakeMainWindowVisible;
}
public class JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons : object {
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.Application.StdApplicationUI.About.AboutBox : object {
    [CompilerGeneratedAttribute]
private Action <Show>k__BackingField;
    [NotNullAttribute]
public Action Show { get; protected set; }
    public AboutBox(IUIApplicationSimple environment, IApplicationHost host, IEnumerable`1<ApplicationPackageArtifact> apppkgs, IEnumerable`1<IPopulateAboutBox> populators);
    [CompilerGeneratedAttribute]
public Action get_Show();
    [CompilerGeneratedAttribute]
protected void set_Show(Action value);
}
[ActionAttribute("About")]
public class JetBrains.Application.StdApplicationUI.About.AboutBoxAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.Application.StdApplicationUI.About.ExposeDeploymentPackagingIdentityInAboutBox : object {
    private InstalledProductsDiscoveryComponent myDisco;
    private HostInfo myHostinfo;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private static Func`2<StreamReader, string> CS$<>9__CachedAnonymousMethodDelegate1;
    private string JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.ClipboardData { get; }
    private RichText JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.DisplayText { get; }
    public ExposeDeploymentPackagingIdentityInAboutBox(InstalledProductsDiscoveryComponent disco, HostInfo hostinfo, ILogger logger);
    private sealed virtual override string JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_ClipboardData();
    private sealed virtual override RichText JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_DisplayText();
    [CompilerGeneratedAttribute]
private static string <JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_ClipboardData>b__0(StreamReader reader);
}
public interface JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox {
    [CanBeNullAttribute]
public string ClipboardData { get; }
    [CanBeNullAttribute]
public RichText DisplayText { get; }
    public abstract virtual string get_ClipboardData();
    public abstract virtual RichText get_DisplayText();
}
public interface JetBrains.Application.StdApplicationUI.IMainWindow {
    [NotNullAttribute]
public IProperty`1<IWin32Window> PrimaryWindow { get; }
    [NotNullAttribute]
public IProperty`1<IWin32Window> ActiveWindow { get; }
    [NotNullAttribute]
public ICollectionEvents`1<IWin32Window> TopLevelWindows { get; }
    public abstract virtual IProperty`1<IWin32Window> get_PrimaryWindow();
    public abstract virtual IProperty`1<IWin32Window> get_ActiveWindow();
    public abstract virtual ICollectionEvents`1<IWin32Window> get_TopLevelWindows();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.StdApplicationUI.OpensUri : object {
    public virtual bool IsInternetConnected();
    public virtual void OpenUri(Uri uri);
    public static void OpenUriImpl(Uri uri);
}
[ExtensionAttribute]
public static class JetBrains.Application.StdApplicationUI.OpensUriEx : object {
    [ExtensionAttribute]
public static bool ShowOnlineHelp(OpensUri opensUri, IHostProductInfo hostProductInfo, string keyword);
}
public interface JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar {
    [NotNullAttribute]
public ICollectionEvents`1<JetStatusBarIndicator> Indicators { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsVisible { get; }
    [NotNullAttribute]
public IProperty`1<string> Text { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsEmphasized { get; }
    public abstract virtual ICollectionEvents`1<JetStatusBarIndicator> get_Indicators();
    public abstract virtual IProperty`1<bool> get_IsVisible();
    public abstract virtual IProperty`1<string> get_Text();
    public abstract virtual IProperty`1<bool> get_IsEmphasized();
}
[ExtensionAttribute]
public static class JetBrains.Application.StdApplicationUI.StatusBars.IStatusBarEx : object {
    [CompilerGeneratedAttribute]
private static Comparison`1<JetStatusBarIndicator> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static void ClearText(IStatusBar thіs);
    [ExtensionAttribute]
public static void SetText(IStatusBar thіs, string text, bool isEmphisized);
    [NotNullAttribute]
[ExtensionAttribute]
public static string GetCurrentText(IStatusBar thіs, SubclassedStatusBar subclassedStatusBar);
    [ExtensionAttribute]
public static IListEvents`1<JetStatusBarIndicator> OrderByPriorityLive(ICollectionEvents`1<JetStatusBarIndicator> indicators, Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static int <OrderByPriorityLive>b__0(JetStatusBarIndicator x1, JetStatusBarIndicator x2);
}
public class JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator : object {
    [NotNullAttribute]
private Signal`1<MouseEventArgs> myClick;
    [NotNullAttribute]
private IProperty`1<IAutomation> myContent;
    [NotNullAttribute]
private ISignal`1<ContextMenuEventArgs> myContextMenu;
    [NotNullAttribute]
private ISimpleSignal myContextMenuRequested;
    [NotNullAttribute]
private Lazy`1<Property`1<Cursor>> myCursor;
    [NotNullAttribute]
private Signal`1<MouseEventArgs> myDoubleClick;
    [NotNullAttribute]
private Property`1<bool> myIsHot;
    [NotNullAttribute]
private IProperty`1<Padding> myMargin;
    [NotNullAttribute]
private ISignal`1<OutEventArgs`1<IPopupWindowContext>> myPopupWindowContextRequested;
    private double myPriority;
    [NotNullAttribute]
private ISignal`1<OutEventArgs`1<RichTextBlock>> myTooltipRequested;
    [NotNullAttribute]
public ISignal`1<MouseEventArgs> Click { get; }
    [NotNullAttribute]
public IProperty`1<IAutomation> Content { get; }
    [NotNullAttribute]
public ISignal`1<ContextMenuEventArgs> ContextMenu { get; }
    [NotNullAttribute]
public ISimpleSignal ContextMenuRequested { get; }
    [NotNullAttribute]
public IProperty`1<Cursor> Cursor { get; }
    [NotNullAttribute]
public ISignal`1<MouseEventArgs> DoubleClick { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsHot { get; }
    public IProperty`1<Padding> Margin { get; }
    public ISignal`1<OutEventArgs`1<IPopupWindowContext>> PopupWindowContextRequested { get; }
    public double Priority { get; }
    [NotNullAttribute]
public ISignal`1<OutEventArgs`1<RichTextBlock>> TooltipRequested { get; }
    public JetStatusBarIndicator(Lifetime lifetime, ILogger logger, double priority);
    public ISignal`1<MouseEventArgs> get_Click();
    public IProperty`1<IAutomation> get_Content();
    public ISignal`1<ContextMenuEventArgs> get_ContextMenu();
    public ISimpleSignal get_ContextMenuRequested();
    public IProperty`1<Cursor> get_Cursor();
    public ISignal`1<MouseEventArgs> get_DoubleClick();
    public IProperty`1<bool> get_IsHot();
    public IProperty`1<Padding> get_Margin();
    public ISignal`1<OutEventArgs`1<IPopupWindowContext>> get_PopupWindowContextRequested();
    public double get_Priority();
    public ISignal`1<OutEventArgs`1<RichTextBlock>> get_TooltipRequested();
}
[ShellComponentAttribute]
public class JetBrains.Application.StdApplicationUI.StatusBars.StatusBar : object {
    private ICollectionEvents`1<JetStatusBarIndicator> myIndicators;
    private IProperty`1<bool> myIsVisible;
    private IProperty`1<string> myText;
    private IProperty`1<bool> myIsEmphasized;
    private ICollectionEvents`1<JetStatusBarIndicator> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.Indicators { get; }
    private IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.IsVisible { get; }
    private IProperty`1<string> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.Text { get; }
    private IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.IsEmphasized { get; }
    public StatusBar(Lifetime lifetime);
    private sealed virtual override ICollectionEvents`1<JetStatusBarIndicator> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_Indicators();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_IsVisible();
    private sealed virtual override IProperty`1<string> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_Text();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_IsEmphasized();
}
public interface JetBrains.Application.StdApplicationUI.TaskBar.ITaskBarManager {
    public abstract virtual void AddProgress(Lifetime lifetime, IProgressIndicatorModel indicatorModel);
    public abstract virtual void SetProgressState(TaskBarProgressState state);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.StdApplicationUI.TaskBar.TaskBarManager : object {
    private sealed virtual override void JetBrains.Application.StdApplicationUI.TaskBar.ITaskBarManager.AddProgress(Lifetime lifetime, IProgressIndicatorModel indicatorModel);
    protected virtual void AddProgressCore(Lifetime lifetime, IProgressIndicatorModel indicatorModel);
    private sealed virtual override void JetBrains.Application.StdApplicationUI.TaskBar.ITaskBarManager.SetProgressState(TaskBarProgressState state);
    protected virtual void SetProgressStateCore(TaskBarProgressState state);
}
public enum JetBrains.Application.StdApplicationUI.TaskBar.TaskBarProgressState : Enum {
    public int value__;
    public static TaskBarProgressState NoProgress;
    public static TaskBarProgressState Indeterminate;
    public static TaskBarProgressState Normal;
    public static TaskBarProgressState Error;
    public static TaskBarProgressState Paused;
}
internal class JetBrains.Application.SubProductPackage : object {
    [CompilerGeneratedAttribute]
private IApplicationPackage <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private IProductInfo <SubProductInfo>k__BackingField;
    public IApplicationPackage Package { get; private set; }
    public IProductInfo SubProductInfo { get; private set; }
    public SubProductPackage(IApplicationPackage package, IProductInfo subProductInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IApplicationPackage get_Package();
    [CompilerGeneratedAttribute]
private void set_Package(IApplicationPackage value);
    [CompilerGeneratedAttribute]
public sealed virtual IProductInfo get_SubProductInfo();
    [CompilerGeneratedAttribute]
private void set_SubProductInfo(IProductInfo value);
}
[ShellComponentAttribute]
public class JetBrains.Application.SubProducts : object {
    private IList`1<ISubProductInfo> mySubProducts;
    private static ILogger Logger;
    public IEnumerable`1<ISubProductInfo> SubProductsInfos { get; }
    public SubProducts(EnvironmentZonesExtra environmentZonesExtra, ProductConfigurations configurations, ApplicationPackages apppkgs);
    private static SubProducts();
    public IEnumerable`1<ISubProductInfo> get_SubProductsInfos();
    public static string GetPriorityString(IProductInfo productInfo);
    public static string GetPriorityString(string productTechnicalName);
}
public class JetBrains.Application.SynchronizationPoint.SynchronizationPoint : Reasons`1<string> {
    public SynchronizationPoint(Lifetime lifetime, string name, ILogger logger);
}
[ShellComponentAttribute]
public class JetBrains.Application.SynchronizationPoint.SynchronizationPoints : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IThreading myThreading;
    private IDictionary`2<string, SynchronizationPoint> mySynchronizationPoints;
    private Reasons`1<string> myAllSyncPoinsSuppressor;
    [CompilerGeneratedAttribute]
private static Func`2<SynchronizationPoint, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    public IProperty`1<bool> AllSyncPointsReached { get; }
    public SynchronizationPoints(Lifetime lifetime, ILogger logger, IThreading threading);
    public SynchronizationPoint GetOrCreateSyncPoint(string name);
    public IList`1<SynchronizationPoint> GetAllSyncPoints();
    public IProperty`1<bool> get_AllSyncPointsReached();
    public IList`1<SynchronizationPoint> GetNotReachedSyncPoints();
    [CompilerGeneratedAttribute]
private static bool <GetNotReachedSyncPoints>b__7(SynchronizationPoint point);
}
[ExtensionAttribute]
public static class JetBrains.Application.SynchronizationPoint.SynchronizationPointsEx : object {
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, SynchronizationPoint, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<StringBuilder, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static string GetNotReachedSyncPointsReasons(SynchronizationPoints synchronizationPoints);
    [CompilerGeneratedAttribute]
private static StringBuilder <GetNotReachedSyncPointsReasons>b__0(StringBuilder sb, SynchronizationPoint point);
    [CompilerGeneratedAttribute]
private static StringBuilder <GetNotReachedSyncPointsReasons>b__1(StringBuilder builder);
}
public class JetBrains.Application.Threading.ApplicationMutex : object {
    private static Dictionary`2<string, ApplicationMutex> ourMap;
    private Mutex myMutex;
    private string myMutexName;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myOwned;
    private ILogger myLogger;
    private ApplicationMutex(string mutexName);
    private static ApplicationMutex();
    public static ApplicationMutex CreateMutex(string mutexName);
    public bool TryAquire();
    public void Release();
    private static void ExecuteDispatcherThread(Action action);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <Release>b__4();
}
public static class JetBrains.Application.Threading.AsyncBuilder : object {
    public static AsyncBuilderResult`2<TMainResult, TBackgroundResult> BuildWithTimeOut(TParams parameters, Func`2<TParams, TMainResult> mainBuildFunc, Func`2<TParams, TBackgroundResult> backgroundBuildFunc, int timeout, IShellLocks locks);
}
public class JetBrains.Application.Threading.AsyncBuilderResult`2 : object {
    [CompilerGeneratedAttribute]
private TBackgroundResult <BackgroundResult>k__BackingField;
    [CompilerGeneratedAttribute]
private TMainResult <MainResult>k__BackingField;
    [CanBeNullAttribute]
public TBackgroundResult BackgroundResult { get; private set; }
    [NotNullAttribute]
public TMainResult MainResult { get; private set; }
    public AsyncBuilderResult`2(TBackgroundResult backgroundResult, TMainResult mainResult);
    [CompilerGeneratedAttribute]
public TBackgroundResult get_BackgroundResult();
    [CompilerGeneratedAttribute]
private void set_BackgroundResult(TBackgroundResult value);
    [CompilerGeneratedAttribute]
public TMainResult get_MainResult();
    [CompilerGeneratedAttribute]
private void set_MainResult(TMainResult value);
}
public class JetBrains.Application.Threading.AsyncProcessing.AsyncItemsProcessor`1 : object {
    private SynchronizedLifetime myLifetime;
    private IAsyncScheduler myScheduler;
    [CompilerGeneratedAttribute]
private IItemsToProcess`1<T> <ItemsToProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<T> <ProcessItemAction>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IItemsToProcess`1<T> ItemsToProcess { get; public set; }
    [NotNullAttribute]
private Action`1<T> ProcessItemAction { get; private set; }
    private ILogger Logger { get; private set; }
    public AsyncItemsProcessor`1(Lifetime lifetime, Action`1<T> processItemAction, IItemsToProcess`1<T> itemsToProcess, IAsyncScheduler scheduler, ILogger logger);
    [CompilerGeneratedAttribute]
public IItemsToProcess`1<T> get_ItemsToProcess();
    [CompilerGeneratedAttribute]
public void set_ItemsToProcess(IItemsToProcess`1<T> value);
    [CompilerGeneratedAttribute]
private Action`1<T> get_ProcessItemAction();
    [CompilerGeneratedAttribute]
private void set_ProcessItemAction(Action`1<T> value);
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    private void ProcessItems();
    private void ProcessItemsInternal();
}
public static class JetBrains.Application.Threading.AsyncProcessing.AsyncItemsProcessorEx : object {
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate7;
    public static AsyncItemsProcessor`1<T> CreateFreeThreadedEx(Lifetime lifetime, IShellLocks locks, ILogger logger, LockingMode lockingMode, Action`1<T> processItem, Func`1<bool> checkForInterrupt);
    public static AsyncItemsProcessor`1<Action> CreateBatchWriteActions(Lifetime lifetime, IShellLocks locks, ILogger logger, Action`1<Action> wrapProcessItemsAction);
    [CompilerGeneratedAttribute]
private static void <CreateBatchWriteActions>b__6(Action action);
}
public class JetBrains.Application.Threading.AsyncProcessing.FreeThreadedGrouppingEventScheduler : object {
    private FreeThreadedGroupingEvent myEvent;
    private Action myAction;
    private IShellLocks myShellLocks;
    private LockingMode myLockingMode;
    private Func`1<bool> myCheckForInterrupt;
    public FreeThreadedGrouppingEventScheduler(Lifetime lifetime, IShellLocks shellLocks, LockingMode lockingMode, Func`1<bool> checkForInterrupt, double milliseconds, GroupingEventProlongation groupingEventProlongation);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    [CompilerGeneratedAttribute]
private void <Schedule>b__0();
    [CompilerGeneratedAttribute]
private void <Schedule>b__1(bool b);
    [CompilerGeneratedAttribute]
private bool <Schedule>b__2();
}
public interface JetBrains.Application.Threading.AsyncProcessing.IAsyncScheduler {
    public abstract virtual void Schedule(Lifetime lifetime, Action action);
}
public interface JetBrains.Application.Threading.AsyncProcessing.IItemsToProcess`1 {
    public IProperty`1<bool> IsEmpty { get; }
    public abstract virtual IProperty`1<bool> get_IsEmpty();
    public abstract virtual void Add(T item);
    public abstract virtual void Remove(T item);
    [CanBeNullAttribute]
public abstract virtual T TryGetNextItem();
    public abstract virtual void OnProcessingFinished(T item);
    public abstract virtual void OnProcessingInterrupted(T item);
}
public class JetBrains.Application.Threading.AsyncProcessing.ItemsToProcess`1 : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<T, ItemState<T>> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEmpty>k__BackingField;
    private IDictionary`2<T, ItemState<T>> Items { get; private set; }
    private ILogger Logger { get; private set; }
    public IProperty`1<bool> IsEmpty { get; private set; }
    public ItemsToProcess`1(Lifetime liefetime, ILogger logger);
    [CompilerGeneratedAttribute]
private IDictionary`2<T, ItemState<T>> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IDictionary`2<T, ItemState<T>> value);
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    private void UpdateIsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEmpty();
    [CompilerGeneratedAttribute]
private void set_IsEmpty(IProperty`1<bool> value);
    public sealed virtual void Add(T item);
    public sealed virtual void Remove(T item);
    public sealed virtual T TryGetNextItem();
    public sealed virtual void OnProcessingFinished(T item);
    public sealed virtual void OnProcessingInterrupted(T item);
}
public class JetBrains.Application.Threading.AsyncProcessing.SyncScheduler : object {
    public static IAsyncScheduler Instance;
    private static SyncScheduler();
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Threading.AsyncProcessing.TaskScheduler : object {
    private Func`1<bool> myCheckForInterrupt;
    private Scheduling myScheduling;
    private TaskCreationOptions myTaskCreationOptions;
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private TaskJetProperties myTaskProperties;
    public TaskScheduler(Lifetime lifetime, ITaskHost taskHost, Scheduling scheduling, Func`1<bool> checkForInterrupt, TaskCreationOptions taskCreationOptions, TaskJetProperties taskProperties);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Threading.AsyncProcessing.UIThreadWithReadLockScheduler : object {
    private IShellLocks myShellLocks;
    public UIThreadWithReadLockScheduler(IShellLocks shellLocks);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Threading.AsyncProcessing.WriteActionScheduler : object {
    private IShellLocks myShellLocks;
    private Action`1<Action> myWrapAction;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate1;
    public WriteActionScheduler(IShellLocks shellLocks, Action`1<Action> wrapAction);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(Action action);
}
public class JetBrains.Application.Threading.BeforeAcquiringWriteLockEventArgs : EventArgs {
    public static BeforeAcquiringWriteLockEventArgs AcquireInstance;
    public static BeforeAcquiringWriteLockEventArgs TryAcquireInstance;
    public bool IsTryAcquire;
    private BeforeAcquiringWriteLockEventArgs(bool isTryAcquire);
    private static BeforeAcquiringWriteLockEventArgs();
}
public class JetBrains.Application.Threading.ContentModelReadWriteLock : object {
    private static double Debug_LongWait_Threshold;
    private static Statistics Statistics;
    [ThreadStaticAttribute]
private static int myReadWriteLockAcquisitionForbidden;
    private double Debug_LongWait_StartedWaitingReadLock;
    private double Debug_LongWait_StartedWaitingWriteLock;
    private MethodInvoker myAfterReadLockReleased;
    private ISimpleSignal myAfterWriteLockReleased;
    private FrugalLocalList`1<MethodInvoker> myBeforeAcquiringReadLock;
    private List`1<EventHandler`1<BeforeAcquiringWriteLockEventArgs>> myBeforeAcquiringWriteLockHandlers;
    private EventHandler`1[] myBeforeAcquiringWriteLockHandlersCached;
    [NotNullAttribute]
private JetDispatcher myDispatcher;
    [NotNullAttribute]
private ReentrantWriterPreferenceReadWriteLock myRWLock;
    [CanBeNullAttribute]
private Thread myThreadWithGrantedWriteAccess;
    private EventHandler WriteLockRequested;
    [CompilerGeneratedAttribute]
private int <WriteLockTimestamp>k__BackingField;
    [NotNullAttribute]
public ISimpleSignal AfterWriteLockReleased { get; }
    public bool IsReadAccessAllowed { get; }
    public bool IsReadLockHeld { get; }
    public bool IsWriteAccessAllowed { get; }
    public bool IsWriteLockHeld { get; }
    public bool IsWriteLockRequested { get; }
    public int WriteLockTimestamp { get; private set; }
    private static ContentModelReadWriteLock();
    public static void BeginReadWriteLockAcquisitionForbiddenState();
    public static void EndReadWriteLockAcquisitionForbiddenState();
    public ISimpleSignal get_AfterWriteLockReleased();
    public sealed virtual bool get_IsReadAccessAllowed();
    public sealed virtual bool get_IsReadLockHeld();
    public sealed virtual bool get_IsWriteAccessAllowed();
    public sealed virtual bool get_IsWriteLockHeld();
    public sealed virtual bool get_IsWriteLockRequested();
    public sealed virtual void AcquireReadLock();
    public sealed virtual void AcquireWriteLock();
    public void GrantWriteAccess(Thread thread);
    public sealed virtual void ReleaseReadLock();
    public sealed virtual void ReleaseWriteLock();
    public void RestoreWriteLock();
    public void RevokeWriteAccess(Thread thread);
    public void TransferWriteLock(Thread anotherThread);
    public sealed virtual bool TryAcquireReadLock(int timeout);
    public sealed virtual bool TryAcquireWriteLock(int timeout);
    public void add_AfterReadLockReleased(MethodInvoker value);
    public void remove_AfterReadLockReleased(MethodInvoker value);
    public void add_BeforeAcquiringReadLock(MethodInvoker value);
    public void remove_BeforeAcquiringReadLock(MethodInvoker value);
    public void add_BeforeAcquiringWriteLock(EventHandler`1<BeforeAcquiringWriteLockEventArgs> value);
    public void remove_BeforeAcquiringWriteLock(EventHandler`1<BeforeAcquiringWriteLockEventArgs> value);
    [ConditionalAttribute("Debug_LongWait")]
private void Debug_LongWait_AfterWaitForReadLock();
    [ConditionalAttribute("Debug_LongWait")]
private void Debug_LongWait_AfterWaitForWriteLock();
    [ConditionalAttribute("Debug_LongWait")]
private void Debug_LongWait_BeforeReleaseReadLock();
    [ConditionalAttribute("Debug_LongWait")]
private void Debug_LongWait_BeforeReleaseWriteLock();
    [ConditionalAttribute("Debug_LongWait")]
private void Debug_LongWait_BeforeWaitForReadLock();
    [ConditionalAttribute("Debug_LongWait")]
private void Debug_LongWait_BeforeWaitForWriteLock();
    private void FireBeforeAcquiringReadLock();
    private void FireBeforeAcquiringWriteLock(BeforeAcquiringWriteLockEventArgs args);
    public void add_WriteLockRequested(EventHandler value);
    public void remove_WriteLockRequested(EventHandler value);
    [CompilerGeneratedAttribute]
public int get_WriteLockTimestamp();
    [CompilerGeneratedAttribute]
private void set_WriteLockTimestamp(int value);
}
internal class JetBrains.Application.Threading.CountingLatch : object {
    private int myActiveParties;
    private object myLock;
    public int Count { get; }
    public int get_Count();
    public void Acquire();
    public void Release();
    public void Touch();
    public void Wait(Func`1<bool> terminationCondition, Action`2<int, int> actionOnChange);
}
internal class JetBrains.Application.Threading.CountingLatchCookie : object {
    private CountingLatch myLatch;
    internal CountingLatchCookie(CountingLatch latch);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.Threading.ExecuteOrQueueSingular : object {
    [NotNullAttribute]
private Action`1<Action> myFExecuteOrQueue;
    private Lifetime myLifetime;
    private Action myFUserAction;
    private int myIsPendingExecution;
    [CanBeNullAttribute]
private string myName;
    public ExecuteOrQueueSingular(Lifetime lifetime, string name, Action FUserAction, IThreading threading);
    public ExecuteOrQueueSingular(Lifetime lifetime, Action FUserAction, Action`1<Action> FExecuteOrQueue);
    public void ExecuteOrQueue();
    private void OnExecute();
}
internal class JetBrains.Application.Threading.GroupingEvents.BackgroundThreadGroupingEventWrapper : object {
    private FreeThreadedGroupingEvent myEv;
    public BackgroundThreadGroupingEventWrapper(FreeThreadedGroupingEvent ev, Lifetime lifetime, Action handler);
    public sealed virtual void Fire();
}
[ShellComponentAttribute]
internal class JetBrains.Application.Threading.GroupingEvents.GroupingEventFactory : object {
    private IThreading myThreading;
    public GroupingEventFactory(IThreading threading);
    public sealed virtual IGroupingEvent Create(Lifetime lifetime, string name, TimeSpan period, GroupingEventProlongation prolongationPolicy, ThreadingPolicy threadingPolicy, Action handler);
}
public interface JetBrains.Application.Threading.GroupingEvents.IGroupingEvent {
    public abstract virtual void Fire();
}
public interface JetBrains.Application.Threading.GroupingEvents.IGroupingEventFactory {
    [NotNullAttribute]
public abstract virtual IGroupingEvent Create(Lifetime lifetime, string name, TimeSpan period, GroupingEventProlongation prolongationPolicy, ThreadingPolicy threadingPolicy, Action handler);
}
internal class JetBrains.Application.Threading.GroupingEvents.MainThreadGroupingEventWrapper : object {
    private Action myFire;
    public MainThreadGroupingEventWrapper(GroupingEvent ev, GroupingEventProlongation prolongationPolicy);
    public sealed virtual void Fire();
}
public enum JetBrains.Application.Threading.GroupingEvents.ThreadingPolicy : Enum {
    public int value__;
    public static ThreadingPolicy MainThread;
    public static ThreadingPolicy Background;
}
public interface JetBrains.Application.Threading.IMultiCoreFibers {
    public abstract virtual void EnqueueJob(Action action);
    public abstract virtual void EnqueuePriorityJob(Action action);
}
public abstract class JetBrains.Application.Threading.InterruptableReadActivity : object {
    public static Func`1<bool> Empty;
    private IShellLocks myShellLocks;
    [CanBeNullAttribute]
private Func`1<bool> myParentContextForInterrupt;
    [CanBeNullAttribute]
private Func`1<bool> myCheckForInterrupt;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsInterrupted;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myOnInterruptCalled;
    private bool myIsDoStartCalled;
    private Lifetime myLifetime;
    [CanBeNullAttribute]
private string myCreationStacktrace;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [NotNullAttribute]
protected string ThreadName { get; }
    private bool IsInterrupted { get; }
    protected InterruptableReadActivity(Lifetime lifetime, IShellLocks shellLocks, Func`1<bool> checkForInterrupt);
    private static InterruptableReadActivity();
    protected abstract virtual void Start();
    protected abstract virtual void Work();
    protected abstract virtual void Finish();
    protected virtual void OnInterrupt();
    private void Interrupt(object o, BeforeAcquiringWriteLockEventArgs args);
    protected abstract virtual string get_ThreadName();
    private void WorkerThreadProc();
    private bool get_IsInterrupted();
    private void FinishingProc();
    private void OnInterruptImpl();
    private void DoWork();
    public void DoSynch();
    public void DoStart();
    [CompilerGeneratedAttribute]
private void <OnInterruptImpl>b__0();
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__6();
}
public class JetBrains.Application.Threading.InterruptableReadActivityThe : InterruptableReadActivity {
    [NotNullAttribute]
private Action myFuncCancelled;
    [NotNullAttribute]
private Action myFuncCompleted;
    [NotNullAttribute]
private Action`1<bool> myFuncCompletedOrCancelled;
    [NotNullAttribute]
private Action myFuncRun;
    [NotNullAttribute]
private Action myFuncStart;
    [NotNullAttribute]
private string myName;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [NotNullAttribute]
public Action FuncCancelled { get; public set; }
    [NotNullAttribute]
public Action FuncCompleted { get; public set; }
    [NotNullAttribute]
public Action`1<bool> FuncCompletedOrCancelled { get; public set; }
    [NotNullAttribute]
public Action FuncRun { get; public set; }
    [NotNullAttribute]
public Action FuncStart { get; public set; }
    [NotNullAttribute]
[LocalizationRequiredAttribute("False")]
public string Name { get; public set; }
    protected string ThreadName { get; }
    public InterruptableReadActivityThe(Lifetime lifetime, IShellLocks shellLocks, Func`1<bool> funcIsCancelled);
    public Action get_FuncCancelled();
    public void set_FuncCancelled(Action value);
    public Action get_FuncCompleted();
    public void set_FuncCompleted(Action value);
    public Action`1<bool> get_FuncCompletedOrCancelled();
    public void set_FuncCompletedOrCancelled(Action`1<bool> value);
    public Action get_FuncRun();
    public void set_FuncRun(Action value);
    public Action get_FuncStart();
    public void set_FuncStart(Action value);
    public string get_Name();
    public void set_Name(string value);
    protected virtual void Finish();
    protected virtual void OnInterrupt();
    protected virtual void Start();
    protected virtual void Work();
    protected virtual string get_ThreadName();
    public static void ExecuteRestartOnInterruptActivity(Lifetime lifetime, IShellLocks locks, Action activity, bool isTestShell);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static bool <ExecuteRestartOnInterruptActivity>b__7();
}
public class JetBrains.Application.Threading.Invocator : object {
    [NotNullAttribute]
private JetDispatcher myDispatcher;
    [NotNullAttribute]
private GroupingEventHosts myGroupingEvents;
    [NotNullAttribute]
private IProperty`1<bool> myIsRecurringActivityAllowed;
    [NotNullAttribute]
private ReentrancyGuard myReentrancyGuard;
    [NotNullAttribute]
private ITaskHost myTaskHost;
    [NotNullAttribute]
private TimedActionsHost myTimedActionsHost;
    [NotNullAttribute]
public JetDispatcher Dispatcher { get; }
    public GroupingEventHosts GroupingEvents { get; }
    public IProperty`1<bool> IsRecurringActivityAllowed { get; }
    [NotNullAttribute]
public ReentrancyGuard ReentrancyGuard { get; }
    public ITaskHost Tasks { get; }
    [ObsoleteAttribute("Use Tasks.")]
public ThreadManager ThreadManager { get; }
    [NotNullAttribute]
public TimedActionsHost TimedActions { get; }
    public Invocator(Lifetime lifetime);
    public sealed virtual JetDispatcher get_Dispatcher();
    public sealed virtual GroupingEventHosts get_GroupingEvents();
    public sealed virtual IProperty`1<bool> get_IsRecurringActivityAllowed();
    public sealed virtual ReentrancyGuard get_ReentrancyGuard();
    public sealed virtual ITaskHost get_Tasks();
    public sealed virtual ThreadManager get_ThreadManager();
    public sealed virtual TimedActionsHost get_TimedActions();
}
public interface JetBrains.Application.Threading.IShellLocks {
    [NotNullAttribute]
public ContentModelReadWriteLock ContentModelLocks { get; }
    public abstract virtual ContentModelReadWriteLock get_ContentModelLocks();
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.IShellLocksEx : object {
    [ExtensionAttribute]
[GuardAttribute("1")]
public static void AllowNestedExecutionAndReleaseLocks(IShellLocks thіs, string name, Action F);
    [ExtensionAttribute]
public static bool ExecuteOrQueueReadLock(IShellLocks thіs, string name, Action F);
    [ExtensionAttribute]
public static bool ExecuteOrQueueReadLockEx(IShellLocks thіs, string name, Action F);
    [ExtensionAttribute]
public static void ExecuteOrQueueReadLock(IShellLocks thіs, Lifetime lifetime, string name, Action F);
    [ExtensionAttribute]
public static void ExecuteOrQueueReadLockEx(IShellLocks thіs, Lifetime lifetime, string name, Action F);
    [ExtensionAttribute]
public static void QueueReadLock(IShellLocks thіs, string name, Action F);
    [ExtensionAttribute]
public static void QueueReadLock(IShellLocks thіs, Lifetime lifetime, string name, Action F);
    [ConditionalAttribute("JET_MODE_ASSERT")]
[ExtensionAttribute]
public static void AssertReadAccessAllowed(IShellLocks thіs);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertWriteAccessAllowed(IShellLocks thіs);
    [ExtensionAttribute]
public static void ExecuteWithLocksReleased(IShellLocks thіs, Action action);
    [ExtensionAttribute]
public static void ExecuteWithReadLock(IShellLocks thіs, Action F);
    [ExtensionAttribute]
public static TValue ExecuteWithReadLock(IShellLocks thіs, Func`1<TValue> F);
    [ExtensionAttribute]
public static bool TryExecuteWithReadLock(IShellLocks thіs, Action F);
    [ExtensionAttribute]
public static void ExecuteWithWriteLock(IShellLocks thіs, Action F);
    [ExtensionAttribute]
public static void ExecuteWithWriteLockWhenAvailable(IShellLocks thіs, Lifetime lifetime, string name, Action F, int retryCount);
    [ExtensionAttribute]
public static void ExecuteOrQueueWithReadLockWhenReadLockAvailable(IShellLocks locks, Lifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueWithReadLockWhenReadLockAvailable(IShellLocks locks, Lifetime lifetime, string name, TimeSpan interval, Action F);
    [ExtensionAttribute]
public static void HideReadLocks(IShellLocks locks, Lifetime lifetime);
    [ExtensionAttribute]
public static UndoUsingReadLock UsingReadLock(IShellLocks locks);
    [ExtensionAttribute]
public static UndoUsingReadLock UsingReadLock(ContentModelReadWriteLock locks);
    [ExtensionAttribute]
public static UndoUsingWriteLock UsingWriteLock(IShellLocks locks);
    [ExtensionAttribute]
public static UndoUsingWriteLock UsingWriteLock(ContentModelReadWriteLock locks);
    [ExtensionAttribute]
public static bool IsReadAccessAllowed(IShellLocks locks);
    [ExtensionAttribute]
public static bool IsWriteAccessAllowed(IShellLocks locks);
    [ExtensionAttribute]
public static bool IsWriteLockHeld(IShellLocks locks);
}
public interface JetBrains.Application.Threading.IThreading {
    [NotNullAttribute]
public JetDispatcher Dispatcher { get; }
    [NotNullAttribute]
public GroupingEventHosts GroupingEvents { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsRecurringActivityAllowed { get; }
    [NotNullAttribute]
public ReentrancyGuard ReentrancyGuard { get; }
    [NotNullAttribute]
public ITaskHost Tasks { get; }
    [NotNullAttribute]
public ThreadManager ThreadManager { get; }
    [NotNullAttribute]
public TimedActionsHost TimedActions { get; }
    public abstract virtual JetDispatcher get_Dispatcher();
    public abstract virtual GroupingEventHosts get_GroupingEvents();
    public abstract virtual IProperty`1<bool> get_IsRecurringActivityAllowed();
    public abstract virtual ReentrancyGuard get_ReentrancyGuard();
    public abstract virtual ITaskHost get_Tasks();
    public abstract virtual ThreadManager get_ThreadManager();
    public abstract virtual TimedActionsHost get_TimedActions();
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.IThreading_DataFlowEx : object {
    [ExtensionAttribute]
public static void ForValuesGuarded(IProperty`1<TValue> property, Lifetime lifetime, IThreading threading, Action`2<Lifetime, TValue> FHandler);
    [ExtensionAttribute]
public static void WhenTrueGuarded(IProperty`1<bool> property, Lifetime lifetime, IThreading threading, Action`1<Lifetime> FHandler);
    [ExtensionAttribute]
public static void WhenFalseGuarded(IProperty`1<bool> property, Lifetime lifetime, IThreading threading, Action`1<Lifetime> FHandler);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.IThreadingEx : object {
    [ExtensionAttribute]
[GuardAttribute("1")]
public static void LogAssertGuarded(IThreading thіs);
    [ExtensionAttribute]
public static bool ExecuteOrQueue(IThreading thіs, string name, Action action);
    [ExtensionAttribute]
public static bool ExecuteOrQueueEx(IThreading thіs, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void ExecuteOrQueue(IThreading thіs, Lifetime lifetime, string name, Action action);
    [ExtensionAttribute]
public static void ExecuteOrQueueEx(IThreading thіs, Lifetime lifetime, string name, Action action);
    [ExtensionAttribute]
public static void Queue(IThreading thіs, Lifetime lifetime, string name, Action F);
    [ObsoleteAttribute("Use an overload with lifetime.")]
[ExtensionAttribute]
public static void Queue(IThreading thіs, string name, Action action);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use an overload with lifetime.")]
public static IDisposable QueueAt(IThreading thіs, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueAt(IThreading thіs, Lifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueAt_NoReentrancyGuarding(IThreading thіs, Lifetime lifetime, string name, TimeSpan interval, Action action);
    [NotNullAttribute]
[ExtensionAttribute]
public static GroupingEvent CreateGroupingEvent(IThreading thіs, Lifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload with lifetime.")]
public static IDisposable QueueRecurring(IThreading thіs, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueRecurring(IThreading thіs, Lifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void ExecuteOrQueueWhenNotGuarded(IThreading thіs, Lifetime lifetime, string name, Action F);
    [ExtensionAttribute]
public static void AssertMainThread(IThreading threading);
}
public enum JetBrains.Application.Threading.LockAffinity : Enum {
    public int value__;
    public static LockAffinity NoLock;
    public static LockAffinity ReadLock;
    public static LockAffinity WriteLock;
}
public enum JetBrains.Application.Threading.LockKind : Enum {
    public byte value__;
    public static LockKind Read;
    public static LockKind Write;
    public static LockKind FullWrite;
    public static LockKind Full;
}
public class JetBrains.Application.Threading.MapReduceJob`4 : object {
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMapResults;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myReduceResults;
    private MapReduceStatus modreq(System.Runtime.CompilerServices.IsVolatile) myStatus;
    private object myStatusLock;
    private IShellLocks myShellLocks;
    private Func`1<bool> myIncomingCheckForInterrupt;
    private Action`1<MapReduceJob`4<K1, V1, K2, V2>> myOnSuccessAction;
    private Action`1<MapReduceJob`4<K1, V1, K2, V2>> myOnInterruptAction;
    private LockAffinity mySuccessAndInterruptLock;
    private Func`3<K1, V1, IList`1<KeyValuePair`2<K2, V2>>> myMapFunction;
    private TaskAffinity myMapTaskAffinity;
    private LockAffinity myMapLockAffinity;
    private int myMapBatchSize;
    private JetBarrier myMapBarrier;
    private Func`3<K2, ICollection`1<V2>, IList`1<V2>> myReduceFunction;
    private IEqualityComparer`1<K2> myKey2EqualityComparer;
    private TaskAffinity myReduceTaskAffinity;
    private LockAffinity myReduceLockAffinity;
    private int myReduceBatchSize;
    private JetBarrier myReduceBarrier;
    private CountingLatch myContinuousLockingReduceLatch;
    private IList`1<IEnumerable`1<KeyValuePair`2<K2, MultimapValueCollection`2<K2, V2>>>> myReduceActivityInput;
    [CompilerGeneratedAttribute]
private static Func`2<MapReduceStatus, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Action`1<MapReduceJob`4<K1, V1, K2, V2>> CS$<>9__CachedAnonymousMethodDelegated;
    public IDictionary`2<K1, IList`1<KeyValuePair`2<K2, V2>>> MapResults { get; }
    public IDictionary`2<K2, IList`1<V2>> ReduceResults { get; }
    public MapReduceStatus Status { get; private set; }
    private bool ContinuousLocking { get; }
    public MapReduceJob`4(IShellLocks shellLocks, Func`1<bool> checkForInterrupt, Action`1<MapReduceJob`4<K1, V1, K2, V2>> onSuccessAction, Action`1<MapReduceJob`4<K1, V1, K2, V2>> onInterruptAction, LockAffinity successAndInterruptLock, Func`3<K1, V1, IList`1<KeyValuePair`2<K2, V2>>> mapFunction, IEqualityComparer`1<K1> key1EqualityComparer, TaskAffinity mapTaskAffinity, LockAffinity mapLockAffinity, int mapBatchSize, Func`3<K2, ICollection`1<V2>, IList`1<V2>> reduceFunction, IEqualityComparer`1<K2> key2EqualityComparer, TaskAffinity reduceTaskAffinity, LockAffinity reduceLockAffinity, int reduceBatchSize, IEnumerable`1<KeyValuePair`2<K1, IList`1<KeyValuePair`2<K2, V2>>>> precalculatedMapResults, bool continuousLocking);
    public IDictionary`2<K1, IList`1<KeyValuePair`2<K2, V2>>> get_MapResults();
    public IDictionary`2<K2, IList`1<V2>> get_ReduceResults();
    public MapReduceStatus get_Status();
    private void set_Status(MapReduceStatus value);
    private void ValidateInput();
    private IDisposable GetLockCookie(LockAffinity affinity);
    private bool CheckForInterrupt();
    private bool IsReduceSync();
    private static IList`1<IEnumerable`1<T>> Split(IEnumerable`1<T> enumerable, int partSize);
    private void ExecuteOnThread(Action`1<K> action, TaskAffinity affinity, K key);
    public bool IsCreatedOrInProgress();
    public void WaitForStatusChange(Func`2<MapReduceStatus, bool> finishWaitCondition, Action`1<MapReduceJob`4<K1, V1, K2, V2>> actionToExecuteUnderLock, bool pump);
    public void WaitFinishAndStealReduce();
    private bool get_ContinuousLocking();
    internal void Execute(IEnumerable`1<KeyValuePair`2<K1, V1>> mapInput);
    private void StartMap(IEnumerable`1<KeyValuePair`2<K1, V1>> mapInput);
    private bool CheckUnsuccessfulExecution(bool executeInterruptActivity);
    private void InterruptActivity(MapReduceJob`4<K1, V1, K2, V2> job);
    private void ContinuousLockingActivity(object trash);
    private void MapActivity(IEnumerable`1<KeyValuePair`2<K1, V1>> mapActivityInput);
    private void StartReduce();
    private void FinalActionActivity();
    private IDisposable GetReduceLock();
    private void ReduceActivity(IEnumerable`1<KeyValuePair`2<K2, MultimapValueCollection`2<K2, V2>>> reduceActivityInput);
    [CompilerGeneratedAttribute]
private static bool <Execute>b__a(MapReduceStatus status);
    [CompilerGeneratedAttribute]
private static void <Execute>b__b(MapReduceJob`4<K1, V1, K2, V2> _);
    [CompilerGeneratedAttribute]
private bool <ContinuousLockingActivity>b__e(MapReduceStatus status);
    [CompilerGeneratedAttribute]
private IDisposable <GetReduceLock>b__15();
    [CompilerGeneratedAttribute]
private IDisposable <GetReduceLock>b__16();
    [CompilerGeneratedAttribute]
private IDisposable <GetReduceLock>b__17();
}
public class JetBrains.Application.Threading.MapReducer : object {
    public void Execute(MapReduceJob`4<K1, V1, K2, V2> job, IEnumerable`1<KeyValuePair`2<K1, V1>> mapInput);
    public MapReduceJob`4<TBuildInput, object, TBuildInput, TBuildResult> ExecuteBuildMerge(IShellLocks shellLocks, Func`1<bool> checkForInterrupt, Func`2<TBuildInput, TBuildResult> build, Action`2<TBuildInput, TBuildResult> merge, Action`1<MapReduceJob`4<TBuildInput, object, TBuildInput, TBuildResult>> finalAction, Action`1<MapReduceJob`4<TBuildInput, object, TBuildInput, TBuildResult>> interruptAction, IEnumerable`1<TBuildInput> buildInput, bool sync);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<TBuildInput, object> <ExecuteBuildMerge>b__2(TBuildInput _);
}
public enum JetBrains.Application.Threading.MapReduceStatus : Enum {
    public int value__;
    public static MapReduceStatus NotStarted;
    public static MapReduceStatus Started;
    public static MapReduceStatus ContinuosActivityAquiredReadLock;
    public static MapReduceStatus MapInProgress;
    public static MapReduceStatus PreparingReduceInput;
    public static MapReduceStatus ReduceInProgress;
    public static MapReduceStatus ReduceStolen;
    public static MapReduceStatus Interrupted;
    public static MapReduceStatus FinalActionInProgress;
    public static MapReduceStatus InterruptionInProgress;
    public static MapReduceStatus Finished;
    public static MapReduceStatus InterruptionCompleted;
    public static MapReduceStatus Failure;
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.MapReduceStatusEx : object {
    [ExtensionAttribute]
public static bool IsCreatedOrInProgress(MapReduceStatus status);
    [ExtensionAttribute]
public static bool IsTerminated(MapReduceStatus status);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.MultiCoreFibersEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<Action, Action> CS$<>9__CachedAnonymousMethodDelegate4;
    [ExtensionAttribute]
public static void EnqueueDependentJobs(IMultiCoreFibers fibers, IEnumerable`1<Action> actionsEnumerable, OneToSetMap`2<Action, Action> actionToExecuteBefore);
    [CompilerGeneratedAttribute]
private static Action <EnqueueDependentJobs>b__1(Action _);
}
public class JetBrains.Application.Threading.MultiCoreFibersPool : object {
    public static MultiCoreFiberStrategy Strategy;
    private bool myIsEnabled;
    private IShellLocks myLocks;
    private ProductConfigurations myConfigurations;
    private bool myTakeReadLock;
    private List`1<Thread> myFiberThreads;
    private ConcurrentActionQueue myQueue;
    [ObsoleteAttribute("Use TaskHost.CreateBarrier() instead")]
public MultiCoreFibersPool(string name, IShellLocks locks, ProductConfigurations configurations, bool isEnabled, bool takeReadLock);
    private static MultiCoreFibersPool();
    public sealed virtual void Dispose();
    public IMultiCoreFibers Create(string activityDescription);
    private void FiberProc();
    private bool CanUseFibers();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
public enum JetBrains.Application.Threading.MultiCoreFiberStrategy : Enum {
    public int value__;
    [DescriptionAttribute("Do not use multi-core fibers")]
public static MultiCoreFiberStrategy Disable;
    [DescriptionAttribute("Regular fiber usage. Number of fibers equals to processur number")]
public static MultiCoreFiberStrategy Normal;
    [DescriptionAttribute("Aggressive fiber usage. Number od fibers is twice processor count")]
public static MultiCoreFiberStrategy Aggressive;
}
public class JetBrains.Application.Threading.NoContentLockInsideReadWriteLock : object {
    private SyncWrapper myReadLock;
    private SyncWrapper myWriteLock;
    public ISync ReadLock { get; }
    public ISync WriteLock { get; }
    public int WaitingReadCount { get; }
    public int WaitingWriteCount { get; }
    public NoContentLockInsideReadWriteLock(ReentrantWriterPreferenceReadWriteLock innerLock, IShellLocks contentLock);
    public sealed virtual ISync get_ReadLock();
    public sealed virtual ISync get_WriteLock();
    public int get_WaitingReadCount();
    public int get_WaitingWriteCount();
}
public class JetBrains.Application.Threading.ReleaseLockCookie : ValueType {
    private IShellLocks myLocks;
    private byte myReadLockReleasedCount;
    private byte myWriteLockReleasedCount;
    private LockKind myLockKind;
    public ReleaseLockCookie(IShellLocks locks, LockKind lockKind);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.Threading.SeldomInterruptChecker : object {
    private static int CHECK_TIME;
    private Func`1<bool> myCheckForInterrupt;
    private int myCheckCount;
    private SeldomInterruptChecker(Func`1<bool> checkForInterrupt);
    public void CheckForInterrupt();
}
public class JetBrains.Application.Threading.SeldomInterruptCheckerWithCheckTime : object {
    private int myCheckTime;
    private Func`1<bool> myCheckForInterrupt;
    private int myCheckCount;
    public SeldomInterruptCheckerWithCheckTime(int checkTime);
    private SeldomInterruptCheckerWithCheckTime(Func`1<bool> checkForInterrupt, int checkTime);
    public void CheckForInterrupt();
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.Threading.ShellLocks : object {
    [NotNullAttribute]
private ContentModelReadWriteLock myContentModelReadWriteLock;
    [NotNullAttribute]
private JetDispatcher myDispatcher;
    [NotNullAttribute]
private GroupingEventHosts myGroupingEvents;
    [NotNullAttribute]
private IProperty`1<bool> myIsRecurringActivityAllowed;
    [NotNullAttribute]
private ReentrancyGuard myReentrancyGuard;
    [NotNullAttribute]
private ITaskHost myTaskHost;
    [NotNullAttribute]
private TimedActionsHost myTimedActionsHost;
    public ContentModelReadWriteLock ContentModelLocks { get; }
    public JetDispatcher Dispatcher { get; }
    public GroupingEventHosts GroupingEvents { get; }
    public IProperty`1<bool> IsRecurringActivityAllowed { get; }
    public ReentrancyGuard ReentrancyGuard { get; }
    public ITaskHost Tasks { get; }
    public ThreadManager ThreadManager { get; }
    public TimedActionsHost TimedActions { get; }
    public ShellLocks(Lifetime lifetime);
    public sealed virtual ContentModelReadWriteLock get_ContentModelLocks();
    public sealed virtual JetDispatcher get_Dispatcher();
    public sealed virtual GroupingEventHosts get_GroupingEvents();
    public sealed virtual IProperty`1<bool> get_IsRecurringActivityAllowed();
    public sealed virtual ReentrancyGuard get_ReentrancyGuard();
    public sealed virtual ITaskHost get_Tasks();
    public sealed virtual ThreadManager get_ThreadManager();
    public sealed virtual TimedActionsHost get_TimedActions();
}
public class JetBrains.Application.Threading.SyncWrapper : object {
    private int myWaitersCount;
    private ISync myInnerSync;
    private ContentModelReadWriteLock myContentLock;
    public int WaitersCount { get; }
    public SyncWrapper(ISync sync, IShellLocks contentLock);
    public int get_WaitersCount();
    public sealed virtual void Acquire();
    public sealed virtual bool TryAcquire(int timeout);
    public sealed virtual void Release();
    public sealed virtual bool HasWriteAccess(Thread thread);
    public sealed virtual bool HasReadAccess(Thread thread);
}
public class JetBrains.Application.Threading.Tasks.LimitedNumberOfConcurrentTasksBarrier : object {
    private TaskBarrier myTaskBarrier;
    private int myMaxTasks;
    private int myTaskCount;
    private ConcurrentQueue`1<Action> myActions;
    public LimitedNumberOfConcurrentTasksBarrier(TaskBarrier taskBarrier, int maxTasks);
    public void EnqueueJob(Action job);
    private void DoTask();
    private void ScheduleTasks();
    public sealed virtual void Dispose();
}
public class JetBrains.Application.Threading.Tasks.SingleThreadExecutorView : TaskScheduler {
    private Thread myThread;
    private Lifetime myLifetime;
    private CancellationTokenSource myCts;
    private ITaskHost myTasks;
    private ILogger myLogger;
    private string myName;
    private BlockingPriorityQueue`1<OrderedTask> myQueue;
    private bool myAsyncBehaviorProhibited;
    [NotNullAttribute]
[PublicAPIAttribute]
public IProperty`1<Task> CurrentlyExecuting;
    [PublicAPIAttribute]
[NotNullAttribute]
public IProperty`1<bool> Idle;
    private Action`1 modreq(System.Runtime.CompilerServices.IsVolatile) mySyncContinuationAction;
    private long myPreliminaryExecutionIdGen;
    private CancellationTokenSource mySequentialCts;
    [PublicAPIAttribute]
public int Count { get; }
    [PublicAPIAttribute]
public Action`1<Task> SyncContinuationAction { get; public set; }
    public SingleThreadExecutorView(Lifetime lifetime, ITaskHost tasks, string name);
    private void ThreadProc();
    [HandleProcessCorruptedStateExceptionsAttribute]
private bool InternalExecute(Task task);
    [PublicAPIAttribute]
public Task Queue(Action action, TaskPriority priority, bool sync);
    [PublicAPIAttribute]
public Task`1<T> Queue(Func`1<T> action, TaskPriority priority, bool sync);
    [PublicAPIAttribute]
public bool ManagesCurrentTask();
    public int get_Count();
    [PublicAPIAttribute]
public void ClearQueue();
    [CanBeNullAttribute]
public Action`1<Task> get_SyncContinuationAction();
    public void set_SyncContinuationAction(Action`1<Task> value);
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.Tasks.TaskBarrierEx : object {
    [ExtensionAttribute]
public static LimitedNumberOfConcurrentTasksBarrier RestrictConcurrentTaskCount(TaskBarrier taskBarrier, int maxTasks);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.Tasks.TaskHostEx : object {
    [ExtensionAttribute]
public static void WaitUiTasks(IThreading threading, Lifetime lifetime, Func`1<bool> checkForInterrupt);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ContinueWithDelay(Task thіs, Lifetime lifetime, IThreading threading, TimeSpan span);
}
public static class JetBrains.Application.Threading.TryReadLockCookie : object {
    public static Undo Create(IProgressIndicator progress, IShellLocks shellLocks, Func`1<bool> checkForInterruptAction, bool releaseOnlyWhenLockHeld);
    public static Undo CreateCore(IProgressIndicator progress, IReaderWriterLock shellLocks, Func`1<bool> checkForInterruptAction, bool releaseOnlyWhenLockHeld);
    private static void CheckForInterrupt(IProgressIndicator progress, Func`1<bool> checkForInterruptAction);
}
public class JetBrains.Application.Threading.TryWriteLockCookie : SafeDisposable {
    private ContentModelReadWriteLock myLocks;
    private Action myCheckForInterrupt;
    private int myMaxMillisToHeldSinceLastAcquire;
    private int myLastAcquireTime;
    private TryWriteLockCookie(ContentModelReadWriteLock locks, Action checkForInterrupt, int maxMillisToHeldSinceLastAcquire);
    private static void CheckForInterrupt(IProgressIndicator progress, Func`1<bool> checkForInterruptAction);
    [NotNullAttribute]
public static TryWriteLockCookie Create(IProgressIndicator progress, IShellLocks shellLocks, Func`1<bool> checkForInterruptAction, int maxMillisToHeldSinceLastAcquire);
    public void ReleaseConditionally();
    private void TryAcquire();
    public void ReleaseAndSleep(int millisToSleep);
    protected virtual void DisposeUnmanagedResources();
}
internal abstract class JetBrains.Application.Threading.UnguardedAlarm : object {
    private static Hashtable ourRequests;
    private List`1<AlarmActionHandle> myRequests;
    private static Timer ourTimer;
    private static object LOCK;
    private static UnguardedAlarm();
    public static void Init();
    public static void Terminate();
    public AlarmActionHandle AddRequest(Action request, int delay);
    public bool CancelRequest(AlarmActionHandle actionHandle);
    public int CancelAllRequests();
    private static void OnTimer(object sender, EventArgs e);
}
public class JetBrains.Application.Threading.WorkerThread : object {
    private bool mySynchronous;
    private WaitHandle mySyncWaitHandle;
    private Thread myThread;
    private Queue`1<JobInfo> myQueue;
    private EventWaitHandle myJobAddedEvent;
    private bool myTerminating;
    [CompilerGeneratedAttribute]
private static WaitHandle CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static WaitHandle CS$<>9__CachedAnonymousMethodDelegate9;
    private bool Terminating { get; private set; }
    public WorkerThread(string name, bool synchronous);
    private void AssertCorrectThread();
    public void Dispose();
    public WaitHandle ExecuteAsync(Action job);
    public WaitHandle AllCurrentJobsToFinish();
    public void ExecuteSync(Action job);
    public void ExecuteSync(Action job, Func`1<bool> checkForInterrupt);
    private JobInfo PopJob();
    private void set_Terminating(bool value);
    private bool get_Terminating();
    private void ThreadProc();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static void <AllCurrentJobsToFinish>b__8();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.ActionBarInjectEx : object {
    [ExtensionAttribute]
public static ActionLabel InjectLabel(IActionBar bar, int index, string text, Lifetime lifetime, Action accessKeyPressed);
    [ExtensionAttribute]
public static ActionSeparator InjectSeparator(IActionBar bar, int index);
    [ExtensionAttribute]
public static ActionComboBox InjectComboBox(IActionBar bar, int index, IEnumerable itemSource);
}
public class JetBrains.Application.UI.Actions.ActionComboBox : ComboBox {
    public static DependencyProperty AllowFocusRestoringProperty;
    private FocusRestoringChain myFocusRestoringChain;
    public bool AllowFocusRestoring { get; public set; }
    private static ActionComboBox();
    public bool get_AllowFocusRestoring();
    public void set_AllowFocusRestoring(bool value);
    protected virtual void OnDropDownOpened(EventArgs e);
    protected virtual void OnDropDownClosed(EventArgs e);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod3(EventArgs );
}
public class JetBrains.Application.UI.Actions.ActionLabel : Label {
    private AccessKeyPressedEventHandler AccessKeyPressed;
    private static ActionLabel();
    public void add_AccessKeyPressed(AccessKeyPressedEventHandler value);
    public void remove_AccessKeyPressed(AccessKeyPressedEventHandler value);
    private void OnAccessKeyPressed(object sender, AccessKeyPressedEventArgs e);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Actions.ActionManager.ActionManager : object {
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private DataContexts <DataContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionDefs <Defs>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionHandlers <Handlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionShortcuts <Shortcuts>k__BackingField;
    public IShellLocks Locks { get; private set; }
    public DataContexts DataContexts { get; private set; }
    public IActionDefs Defs { get; private set; }
    public IActionHandlers Handlers { get; private set; }
    public IActionShortcuts Shortcuts { get; private set; }
    public ActionManager(DataContexts dataContexts, IActionDefs defs, IActionHandlers handlers, IActionShortcuts shortcuts, IShellLocks locks);
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
private void set_Locks(IShellLocks value);
    [CompilerGeneratedAttribute]
public sealed virtual DataContexts get_DataContexts();
    [CompilerGeneratedAttribute]
private void set_DataContexts(DataContexts value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionDefs get_Defs();
    [CompilerGeneratedAttribute]
private void set_Defs(IActionDefs value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionHandlers get_Handlers();
    [CompilerGeneratedAttribute]
private void set_Handlers(IActionHandlers value);
    [CompilerGeneratedAttribute]
public sealed virtual IActionShortcuts get_Shortcuts();
    [CompilerGeneratedAttribute]
private void set_Shortcuts(IActionShortcuts value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.ActionManager.ActionManagerCommandBindingsEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ICommand GetCommand(IActionManagerCommandBindings actionManagerCommandBindings, string sActionId);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICommand GetCommand(IActionManagerCommandBindings actionManagerCommandBindings);
}
public class JetBrains.Application.UI.Actions.ActionManager.ActionManagerContextMenu : object {
    [NotNullAttribute]
public Lifetime Lifetime;
    [NotNullAttribute]
public IActionBarManager ActionBarManager;
    [NotNullAttribute]
public string ActionGroupId;
    [NotNullAttribute]
public IThreading Threading;
    public ActionManagerContextMenu(Lifetime lifetime, IActionBarManager actionbarman, string sActionGroupId, IThreading threading);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.ActionManager.ActionManagerEx : object {
    [ExtensionAttribute]
public static bool IsAvailable(IActionManager actionManager, IDataContext dataContext);
    [ExtensionAttribute]
public static void ExecuteAction(IActionManager actionManager, IDataContext dataContext);
    [NotNullAttribute]
[ExtensionAttribute]
public static Task ExecuteActionAsync(IActionManager actionman, Lifetime limit);
    [ExtensionAttribute]
public static void ExecuteActionGuarded(IActionManager actionManager, Lifetime lifetime, string name, IDataContext dataContext);
}
public interface JetBrains.Application.UI.Actions.ActionManager.IActionManager {
    public IShellLocks Locks { get; }
    public DataContexts DataContexts { get; }
    public IActionDefs Defs { get; }
    public IActionHandlers Handlers { get; }
    public IActionShortcuts Shortcuts { get; }
    public abstract virtual IShellLocks get_Locks();
    public abstract virtual DataContexts get_DataContexts();
    public abstract virtual IActionDefs get_Defs();
    public abstract virtual IActionHandlers get_Handlers();
    public abstract virtual IActionShortcuts get_Shortcuts();
}
public interface JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindings {
    public IActionManager ActionManager { get; }
    public abstract virtual ICommand GetCommand(IActionDefWithId action);
    public abstract virtual IActionManager get_ActionManager();
}
public interface JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindingsFactory {
    public abstract virtual IActionManagerCommandBindings Create(Lifetime lifetime);
}
public class JetBrains.Application.UI.Actions.ActionPresentation : object {
    [NotNullAttribute]
public static ActionPresentation Empty;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayStyles <DisplayStyle>k__BackingField;
    [CanBeNullAttribute]
public string Description { get; public set; }
    [CanBeNullAttribute]
public string Text { get; public set; }
    [CanBeNullAttribute]
public IconId Image { get; public set; }
    public bool Visible { get; public set; }
    public DisplayStyles DisplayStyle { get; public set; }
    public ActionPresentation(StandartPresentation standartPresentation);
    private static ActionPresentation();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public IconId get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(IconId value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public DisplayStyles get_DisplayStyle();
    [CompilerGeneratedAttribute]
public void set_DisplayStyle(DisplayStyles value);
}
public class JetBrains.Application.UI.Actions.ActionSeparator : Separator {
    private static ActionSeparator();
}
public class JetBrains.Application.UI.Actions.AutomationProviderActionPresentation : ActionPresentation {
    [CompilerGeneratedAttribute]
private Func`1<IAutomation> <FAutomaton>k__BackingField;
    public Func`1<IAutomation> FAutomaton { get; public set; }
    public AutomationProviderActionPresentation(StandartPresentation standartPresentation);
    [CompilerGeneratedAttribute]
public Func`1<IAutomation> get_FAutomaton();
    [CompilerGeneratedAttribute]
public void set_FAutomaton(Func`1<IAutomation> value);
}
public class JetBrains.Application.UI.Actions.Automations.ActionAutomation : AAutomation {
    private Lifetime myLifetime;
    private IActionAutomation myParent;
    private IActionBarManager myManager;
    private Nullable`1<bool> myShowDisabledItems;
    private bool myVisibleIfNoChildren;
    private bool myEvaluatedVisibility;
    [CompilerGeneratedAttribute]
private IActionNodeDef <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <ShowHeaderAlways>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Shortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<IActionAutomation> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<IActionAutomation> <AllItems>k__BackingField;
    public IActionNodeDef Action { get; private set; }
    public Property`1<object> Icon { get; private set; }
    public Property`1<object> Header { get; private set; }
    public Property`1<bool> ShowHeaderAlways { get; private set; }
    public Property`1<object> ToolTip { get; private set; }
    public Property`1<object> Shortcut { get; private set; }
    public Property`1<bool> IsEnabled { get; private set; }
    public Property`1<bool> IsVisible { get; private set; }
    public IListEvents`1<IActionAutomation> Items { get; private set; }
    public ListEvents`1<IActionAutomation> AllItems { get; private set; }
    public bool ShowDisabledItems { get; }
    protected ActionAutomation(Lifetime lifetime, IActionBarManager manager, IActionNodeDef definition, IActionAutomation parent, bool visibleIfNoChildren);
    [CompilerGeneratedAttribute]
public IActionNodeDef get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(IActionNodeDef value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_ShowHeaderAlways();
    [CompilerGeneratedAttribute]
private void set_ShowHeaderAlways(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_ToolTip();
    [CompilerGeneratedAttribute]
private void set_ToolTip(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Shortcut();
    [CompilerGeneratedAttribute]
private void set_Shortcut(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsVisible();
    [CompilerGeneratedAttribute]
private void set_IsVisible(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IListEvents`1<IActionAutomation> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IListEvents`1<IActionAutomation> value);
    [CompilerGeneratedAttribute]
public ListEvents`1<IActionAutomation> get_AllItems();
    [CompilerGeneratedAttribute]
private void set_AllItems(ListEvents`1<IActionAutomation> value);
    private void OnIsVisibleChanged(PropertyChangedEventArgs`1<bool> obj);
    public virtual void Update(EvaluatedAction evaluated);
    private void UpdateVisibility();
    private string GetToolTip(EvaluatedAction evaluatedAction, string shortcutText);
    public virtual bool get_ShowDisabledItems();
    protected string GetShortcutText();
    protected void InvalidateChildren();
    protected virtual void UpdateChildren();
    public virtual IDataContext CreateDataContext(Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.Automations.ActionAutomationExtensions : object {
    [ExtensionAttribute]
public static void Update(ActionAutomation item, IActionBarManager manager, IDataContext context);
    [ExtensionAttribute]
public static void UpdateAsynchronously(ActionAutomation item, Lifetime lifetime, IShellLocks locks, IActionsAvailabilityService service, Func`2<Lifetime, IDataContext> getContext);
    private static void AppendAsyncUpdateListRecursively(ActionAutomation item, IShellLocks locks, AsyncUpdateList list);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.Automations.ActionAutomationHelpers : object {
    [ExtensionAttribute]
public static IEnumerable`1<IActionAutomation> ToAutomations(IEnumerable`1<IActionNodeDef> actions, Lifetime lifetime, IActionAutomation parent, IActionBarManager manager);
    [ExtensionAttribute]
public static ICommand ToCommand(IActionDefWithId action, IActionBarManager manager, Func`2<Lifetime, IDataContext> createDataContext);
    [ExtensionAttribute]
public static bool IsSeparator(IActionAutomation automation);
    public static string ReplaceAmpersandAccessKeyToUnderline(string text);
}
public class JetBrains.Application.UI.Actions.Automations.ActionBarAutomation : ActionRootAutomation {
    public ActionBarAutomation(Lifetime lifetime, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
}
public class JetBrains.Application.UI.Actions.Automations.ActionCheckableAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Execute>k__BackingField;
    public Property`1<bool> IsChecked { get; private set; }
    public ICommand Execute { get; private set; }
    public ActionCheckableAutomation(Lifetime lifetime, IActionBarManager manager, IActionDefWithId definition, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
private void set_IsChecked(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_Execute();
    [CompilerGeneratedAttribute]
private void set_Execute(ICommand value);
    public virtual void Update(EvaluatedAction evaluated);
}
public class JetBrains.Application.UI.Actions.Automations.ActionContextMenuAutomation : ActionRootAutomation {
    private LifetimeDefinition myLifetimeDefinition;
    private ReentrancyGuard myReentrancyGuard;
    public ISignal`1<ShowRequestedEventArgs> OnShowRequested;
    public bool ShowDisabledItems { get; }
    public ActionContextMenuAutomation(LifetimeDefinition lifetimeDefinition, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
    public sealed virtual void BeginShow(Point ptScreen);
    public virtual bool get_ShowDisabledItems();
    [CompilerGeneratedAttribute]
private void <BeginShow>b__0();
}
public class JetBrains.Application.UI.Actions.Automations.ActionCustomAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private Property`1<object> <Content>k__BackingField;
    public Property`1<object> Content { get; private set; }
    public ActionCustomAutomation(Lifetime lifetime, IActionBarManager manager, IActionDefWithId definition, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(Property`1<object> value);
    public virtual void Update(EvaluatedAction evaluated);
}
public class JetBrains.Application.UI.Actions.Automations.ActionExecutableAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private ICommand <Execute>k__BackingField;
    public ICommand Execute { get; private set; }
    public ActionExecutableAutomation(Lifetime lifetime, IActionBarManager manager, IActionDefWithId definition, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_Execute();
    [CompilerGeneratedAttribute]
private void set_Execute(ICommand value);
}
public class JetBrains.Application.UI.Actions.Automations.ActionGroupAutomation : ActionAutomation {
    public ActionGroupAutomation(Lifetime lifetime, IActionBarManager manager, IActionNodeDef definition, IActionAutomation parent);
}
public class JetBrains.Application.UI.Actions.Automations.ActionMenuAutomation : ActionRootAutomation {
    public ActionMenuAutomation(Lifetime lifetime, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
}
public class JetBrains.Application.UI.Actions.Automations.ActionRootAutomation : ActionAutomation {
    protected Lifetime myLifetime;
    protected IActionBarManager myManager;
    protected Func`2<Lifetime, IDataContext> myGetDataContext;
    private EitherControl myControl;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionGroupDef <ActionGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferMenuItems>k__BackingField;
    public Property`1<bool> IsVertical { get; private set; }
    public IActionGroupDef ActionGroup { get; private set; }
    public EitherControl Control { get; }
    public bool PreferMenuItems { get; private set; }
    public bool Visible { get; }
    public ActionRootAutomation(Lifetime lifetime, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsVertical();
    [CompilerGeneratedAttribute]
private void set_IsVertical(Property`1<bool> value);
    protected void UpdateOrQueue();
    [CompilerGeneratedAttribute]
public sealed virtual IActionGroupDef get_ActionGroup();
    [CompilerGeneratedAttribute]
private void set_ActionGroup(IActionGroupDef value);
    public virtual IDataContext CreateDataContext(Lifetime lifetime);
    public sealed virtual void UpdateAsync(IActionsAvailabilityService availabilityService);
    public sealed virtual void Update(IDataContext context);
    public sealed virtual EitherControl get_Control();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreferMenuItems();
    [CompilerGeneratedAttribute]
private void set_PreferMenuItems(bool value);
    public sealed virtual bool get_Visible();
    [ObsoleteAttribute]
public sealed virtual ICustomStripComboBox InsertComboBox(int index);
    [ObsoleteAttribute]
public sealed virtual ICustomStripLabel InsertLabel(int index, string title, Image image);
    [ObsoleteAttribute]
public sealed virtual ICustomStripSeparator InsertSplitter(int index);
    [ObsoleteAttribute]
public sealed virtual ICustomStripProgressBar InsertProgressBar(int index);
    public sealed virtual void RemoveCustom(object item);
    public sealed virtual void InjectCustom(int index, object item);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private IDataContext <.ctor>b__2(Lifetime _);
}
public class JetBrains.Application.UI.Actions.Automations.ActionSeparatorAutomation : ActionAutomation {
    public ActionSeparatorAutomation(Lifetime lifetime, IActionBarManager manager, IActionNodeDef definition, IActionAutomation parent);
}
public class JetBrains.Application.UI.Actions.Automations.CustomInjectableAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private Property`1<object> <Content>k__BackingField;
    public Property`1<object> Content { get; private set; }
    public CustomInjectableAutomation(Lifetime lifetime, IActionBarManager manager, object content, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(Property`1<object> value);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Actions.Automations.DefaultActionBarItemAutomationProvider : object {
    public sealed virtual IActionAutomation ProvideItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionBarManager manager, IActionAutomation parent);
}
public interface JetBrains.Application.UI.Actions.Automations.IActionAutomation {
    public Property`1<object> Icon { get; }
    public Property`1<object> Header { get; }
    public Property`1<bool> ShowHeaderAlways { get; }
    public Property`1<object> ToolTip { get; }
    public Property`1<object> Shortcut { get; }
    public Property`1<bool> IsEnabled { get; }
    public Property`1<bool> IsVisible { get; }
    public IListEvents`1<IActionAutomation> Items { get; }
    public abstract virtual Property`1<object> get_Icon();
    public abstract virtual Property`1<object> get_Header();
    public abstract virtual Property`1<bool> get_ShowHeaderAlways();
    public abstract virtual Property`1<object> get_ToolTip();
    public abstract virtual Property`1<object> get_Shortcut();
    public abstract virtual Property`1<bool> get_IsEnabled();
    public abstract virtual Property`1<bool> get_IsVisible();
    public abstract virtual IListEvents`1<IActionAutomation> get_Items();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionBarItemAutomationProvider {
    public abstract virtual IActionAutomation ProvideItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionBarManager manager, IActionAutomation parent);
}
public interface JetBrains.Application.UI.Actions.Automations.IActionCheckableAutomation {
    public Property`1<bool> IsChecked { get; }
    public abstract virtual Property`1<bool> get_IsChecked();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionCustomAutomation {
    public Property`1<object> Content { get; }
    public abstract virtual Property`1<object> get_Content();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionExecutableAutomation {
    public ICommand Execute { get; }
    public abstract virtual ICommand get_Execute();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionSeparatorAutomation {
}
public class JetBrains.Application.UI.Actions.CheckedActionPresentation : ActionPresentation {
    [CompilerGeneratedAttribute]
private bool <Checked>k__BackingField;
    public bool Checked { get; public set; }
    public CheckedActionPresentation(StandartPresentation standartPresentation);
    [CompilerGeneratedAttribute]
public bool get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(bool value);
}
public class JetBrains.Application.UI.Actions.DelegateActionHandler : object {
    [NotNullAttribute]
private Func`4<IDataContext, ActionPresentation, DelegateUpdate, bool> myFUpdate;
    [NotNullAttribute]
private Action`2<IDataContext, DelegateExecute> myFExecute;
    public DelegateActionHandler(Func`4<IDataContext, ActionPresentation, DelegateUpdate, bool> FUpdate, Action`2<IDataContext, DelegateExecute> FExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.UI.Actions.DelegateExecute : MulticastDelegate {
    public DelegateExecute(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Actions.DelegateUpdate : MulticastDelegate {
    public DelegateUpdate(object object, IntPtr method);
    public virtual bool Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[ActionGroupAttribute("ReSharper.Help.Twitter", "1")]
public class JetBrains.Application.UI.Actions.MenuGroups.GotoTwitterMenu : object {
    public GotoTwitterMenu(ProductGotoTwitterAction showTwitterAction);
}
[ActionGroupAttribute("ReSharper.Help.Web", "1")]
public class JetBrains.Application.UI.Actions.MenuGroups.GotoWebMenu : object {
    public GotoWebMenu(ProductGoToWebAction showTwitterAction);
}
[ActionGroupAttribute("ReSharper.Help", "1")]
public class JetBrains.Application.UI.Actions.MenuGroups.HelpMenu : object {
    public HelpMenu(ShowHelpAction showHelpAction, Separator sep, GotoWebMenu webMenu, GotoTwitterMenu twitterMenu, HelpMenuSubmeetFeedpackPlaceholderActionGroup feedbacks, Separator sep1, ShowLogAction showLogAction, Separator sep2, ShowEnterLicenseAction showEnterLicenseAction, ShowUserNotificationsAction showUserNotifications, AboutBoxAction aboutBoxAction);
}
[ActionGroupAttribute("0")]
public class JetBrains.Application.UI.Actions.MenuGroups.HelpMenuSubmeetFeedpackPlaceholderActionGroup : object {
}
[ActionGroupAttribute("Internal", "1")]
public class JetBrains.Application.UI.Actions.MenuGroups.InternalMenu : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IPresentableAction.Update(IDataContext context, ActionPresentation actionPresentation);
}
[ActionGroupAttribute("0")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuCodeAwareFeaturesGroup : object {
}
[ActionGroupAttribute("0")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuFeaturesGroup : object {
    public MainMenuFeaturesGroup(MainMenuCodeAwareFeaturesGroup codeAwareFeatures, MainMenuIntegratedToolsGoup integratedToolsGoup);
}
[ActionGroupAttribute("1")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsBuildGoup : object {
}
[ActionGroupAttribute("1")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsCoverGoup : object {
}
[ActionGroupAttribute("0")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsGoup : object {
    public MainMenuIntegratedToolsGoup(MainMenuIntegratedToolsCoverGoup cover, MainMenuIntegratedToolsProfileGoup profile, MainMenuIntegratedToolsBuildGoup build);
}
[ActionGroupAttribute("1")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsProfileGoup : object {
}
[ActionGroupAttribute("0")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuOptionsGroup : object {
}
[ActionGroupAttribute("0")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuToolsGroup : object {
}
[ActionGroupAttribute("ReSharper", "0")]
public class JetBrains.Application.UI.Actions.MenuGroups.VsMainMenuGroup : object {
    public VsMainMenuGroup(WhyProductIsDisabledAction disabledEntities, Separator sep0, MainMenuFeaturesGroup featuresGroup, Separator sep1, MainMenuToolsGroup toolsGroup, MainMenuOptionsGroup optionsGroup, Separator sep2, WindowsMenu windowsMenu, HelpMenu helpMenu, Separator sep3, InternalMenu internalGroup);
}
[ActionGroupAttribute("ReSharper.Windows", "1")]
public class JetBrains.Application.UI.Actions.MenuGroups.WindowsMenu : object {
}
[ActionAttribute("&License Information…")]
public class JetBrains.Application.UI.Actions.ShowEnterLicenseAction : object {
    private static string NORMAL_TEXT;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Why ReSharper is disabled")]
public class JetBrains.Application.UI.Actions.WhyProductIsDisabledAction : object {
    private int myIndex;
    public WhyProductIsDisabledAction(int index);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionsRevised.Handlers.ActionEvents : object {
    private ISignal`1<ActionEventArgs> myExecuteAction;
    private ISignal`1<IActionDefWithId> myAddRemoveHandler;
    public ActionEvents(Lifetime lifetime);
    public void AdviseExecuteAction(Lifetime lifetime, Action`1<ActionEventArgs> handler);
    public void AdviseAddRemoveHandler(Lifetime lifetime, Action`1<IActionDefWithId> handler);
    internal void FireExecuteAction(Lifetime execLifetime, IActionDefWithId selectedAction, IDataContext context);
    internal void FireAddRemoveHandler(IActionDefWithId actionDef);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Handlers.ActionHandlerEx : object {
    [ExtensionAttribute]
public static void AddHandler(IActionHandlers handlers, Lifetime lifetime, IActionDefWithId action, IAction hanadler);
    [ExtensionAttribute]
public static ExecutedAction EvaluateAndExecute(IActionDefWithId actionDef, IActionHandlers handlers, DataContexts dataContexts, IDataContext dataContext);
    [ExtensionAttribute]
public static EvaluatedAction Evaluate(IActionDefWithId actionDef, IActionHandlers handlers, DataContexts dataContexts);
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.ActionsRevised.Handlers.ActionHandlers : object {
    private IShellLocks myShellLocks;
    private RequirementsManager myRequirementsManager;
    private IEnumerable`1<IActionEvaluator> myEvaluators;
    private ProductConfigurations myConfigurations;
    private ActionEvents myEvents;
    private CompactMap`2<IActionDefWithId, IBoundAction> myBoundActions;
    public RequirementsManager RequirementsManager { get; }
    public ActionEvents Events { get; }
    public ActionHandlers(IShellLocks shellLocks, RequirementsManager requirementsManager, IEnumerable`1<IActionEvaluator> evaluators, ProductConfigurations configurations, ActionEvents events);
    public sealed virtual RequirementsManager get_RequirementsManager();
    public sealed virtual ActionEvents get_Events();
    public sealed virtual void AddHandler(IActionDefWithId action, IAction handlers);
    public sealed virtual void RemoveHandler(IActionDefWithId action, IAction handlers);
    public sealed virtual EvaluatedAction Evaluate(IActionDefWithId action, IDataContext context);
    public sealed virtual EvaluatedAction StaticEvaluate(IActionDefWithId actionDef);
    public sealed virtual IBoundAction BindActionDef(IActionDefWithId actionDefWithId);
    [NotNullAttribute]
private IBoundAction BindInternal(IActionDefWithId actionDefWithId);
    private IBoundAction CreateActionNodeInstance(IActionDefWithId actionDefWithId);
    private IBoundAction ToActionNode(IActionDefWithId actionDefWithId, object instance);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Handlers.ActionHandlersEx : object {
    [ExtensionAttribute]
public static EvaluatedAction Evaluate(IActionDefWithId actionDef, IActionManager actions, IDataContext dataContext);
    [ExtensionAttribute]
public static ExecutedAction EvaluateAndExecute(IActionDefWithId actionDef, IActionManager actions, IDataContext dataContext);
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.ActionsRevised.Handlers.AutomationProviderActionEvaluator : object {
    private RequirementsManager myRequirementsManager;
    private IShellLocks myLocks;
    public AutomationProviderActionEvaluator(RequirementsManager requirementsManager, IShellLocks locks);
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual bool IsApplicable(IAction action);
    public sealed virtual bool Execute(IAction action, List`1<IAction> allActions, IDataContext dataContext);
    public sealed virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.AutomationProviderCustomPresentation : object {
    [CompilerGeneratedAttribute]
private Func`1<IAutomation> <FAutomaton>k__BackingField;
    public Func`1<IAutomation> FAutomaton { get; public set; }
    [CompilerGeneratedAttribute]
public Func`1<IAutomation> get_FAutomaton();
    [CompilerGeneratedAttribute]
public void set_FAutomaton(Func`1<IAutomation> value);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.BoundAction : object {
    private IconId myIconId;
    private List`1<IAction> myOtherHandlers;
    [CompilerGeneratedAttribute]
private IActionDefWithId <Def>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionHandlers <ActionHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionEvaluator <Evaluator>k__BackingField;
    [CompilerGeneratedAttribute]
private IAction <PrimaryHandler>k__BackingField;
    public IActionDefWithId Def { get; private set; }
    public IActionHandlers ActionHandlers { get; private set; }
    public IActionEvaluator Evaluator { get; private set; }
    public IAction PrimaryHandler { get; private set; }
    public BoundAction(IActionDefWithId actionDef, IAction primaryHandler, IActionEvaluator evaluator, IActionHandlers actionHandlers);
    [CompilerGeneratedAttribute]
public IActionDefWithId get_Def();
    [CompilerGeneratedAttribute]
private void set_Def(IActionDefWithId value);
    [CompilerGeneratedAttribute]
public IActionHandlers get_ActionHandlers();
    [CompilerGeneratedAttribute]
private void set_ActionHandlers(IActionHandlers value);
    [CompilerGeneratedAttribute]
public IActionEvaluator get_Evaluator();
    [CompilerGeneratedAttribute]
private void set_Evaluator(IActionEvaluator value);
    [CompilerGeneratedAttribute]
public sealed virtual IAction get_PrimaryHandler();
    [CompilerGeneratedAttribute]
private void set_PrimaryHandler(IAction value);
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    public sealed virtual EvaluatedAction StaticEvaluate();
    public IEnumerable`1<IAction> AllActions();
    private EvaluatedAction CreateDefaultEvaluated();
    public sealed virtual void AddHandler(IAction handler);
    public sealed virtual void RemoveHandler(IAction hanadler);
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.ActionsRevised.Handlers.CheckableActionEvaluator : object {
    private RequirementsManager myRequirementsManager;
    private IShellLocks myLocks;
    public CheckableActionEvaluator(RequirementsManager requirementsManager, IShellLocks locks);
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual bool IsApplicable(IAction action);
    public sealed virtual bool Execute(IAction action, List`1<IAction> allActions, IDataContext dataContext);
    public sealed virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.EvaluatedAction : object {
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ICustomActionPresentation <CustomPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAction <BoundAction>k__BackingField;
    [CompilerGeneratedAttribute]
private StandartPresentation <StandartPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private IAction <SelectedAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldFallBack>k__BackingField;
    [CanBeNullAttribute]
public IDataContext DataContext { get; public set; }
    [CanBeNullAttribute]
public ICustomActionPresentation CustomPresentation { get; public set; }
    [CanBeNullAttribute]
public BoundAction BoundAction { get; public set; }
    public StandartPresentation StandartPresentation { get; public set; }
    [CanBeNullAttribute]
public IAction SelectedAction { get; public set; }
    public bool ShouldFallBack { get; public set; }
    public EvaluationStatus Status { get; }
    public bool IsAvailable { get; }
    public bool IsVisible { get; }
    public string Text { get; }
    public IconId Icon { get; }
    public string Description { get; }
    public DisplayStyles DisplayStyle { get; }
    [CompilerGeneratedAttribute]
public IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public void set_DataContext(IDataContext value);
    [CompilerGeneratedAttribute]
public ICustomActionPresentation get_CustomPresentation();
    [CompilerGeneratedAttribute]
public void set_CustomPresentation(ICustomActionPresentation value);
    [CompilerGeneratedAttribute]
public BoundAction get_BoundAction();
    [CompilerGeneratedAttribute]
public void set_BoundAction(BoundAction value);
    [CompilerGeneratedAttribute]
public StandartPresentation get_StandartPresentation();
    [CompilerGeneratedAttribute]
public void set_StandartPresentation(StandartPresentation value);
    [CompilerGeneratedAttribute]
public IAction get_SelectedAction();
    [CompilerGeneratedAttribute]
public void set_SelectedAction(IAction value);
    public ExecutedAction PrepareRequirementsAsync(OuterLifetime lifetime, Func`1<bool> executeWhenRequirementsReady, Action`1<FailWithKind> failWith);
    public ExecutedAction Execute();
    public bool ExecuteWithoutRequirements();
    [CompilerGeneratedAttribute]
public bool get_ShouldFallBack();
    [CompilerGeneratedAttribute]
public void set_ShouldFallBack(bool value);
    public EvaluationStatus get_Status();
    public bool get_IsAvailable();
    public bool get_IsVisible();
    public string get_Text();
    public IconId get_Icon();
    public string get_Description();
    public DisplayStyles get_DisplayStyle();
    [CompilerGeneratedAttribute]
private bool <ExecuteWithoutRequirements>b__a(Lifetime lt);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionsRevised.Handlers.ExececutableActionEvaluator : object {
    private RequirementsManager myActionsAsyncEvaluator;
    private IShellLocks myShellLocks;
    public ExececutableActionEvaluator(RequirementsManager requirementsManager, IShellLocks shellLocks);
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual bool IsApplicable(IAction action);
    public sealed virtual bool Execute(IAction action, List`1<IAction> allActions, IDataContext dataContext);
    public virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.ExecutedAction : object {
    public EvaluatedAction EvaluatedAction;
    public bool CallNext;
}
public interface JetBrains.Application.UI.ActionsRevised.Handlers.IActionEvaluator {
    public abstract virtual ICustomActionPresentation NewCustomPresentation();
    public abstract virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
    public abstract virtual bool Execute(IAction action, List`1<IAction> allActions, IDataContext dataContext);
    public abstract virtual bool IsApplicable(IAction action);
}
public interface JetBrains.Application.UI.ActionsRevised.Handlers.IActionHandlers {
    [NotNullAttribute]
public RequirementsManager RequirementsManager { get; }
    public ActionEvents Events { get; }
    public abstract virtual void AddHandler(IActionDefWithId action, IAction handlers);
    public abstract virtual void RemoveHandler(IActionDefWithId actionDef, IAction handlers);
    [NotNullAttribute]
public abstract virtual EvaluatedAction Evaluate(IActionDefWithId action, IDataContext context);
    [NotNullAttribute]
public abstract virtual EvaluatedAction StaticEvaluate(IActionDefWithId actionDef);
    [NotNullAttribute]
public abstract virtual IBoundAction BindActionDef(IActionDefWithId actionDefWithId);
    public abstract virtual RequirementsManager get_RequirementsManager();
    public abstract virtual ActionEvents get_Events();
}
public interface JetBrains.Application.UI.ActionsRevised.Handlers.IBoundAction {
    public IAction PrimaryHandler { get; }
    public abstract virtual IAction get_PrimaryHandler();
    public abstract virtual EvaluatedAction Evaluate(IDataContext context);
    public abstract virtual EvaluatedAction StaticEvaluate();
    public abstract virtual void AddHandler(IAction handler);
    public abstract virtual void RemoveHandler(IAction hanadler);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.InvisibleBound : object {
    public static InvisibleBound Instance;
    public IAction PrimaryHandler { get; }
    private static InvisibleBound();
    public sealed virtual IAction get_PrimaryHandler();
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    private static EvaluatedAction DefaultEvaluated();
    public sealed virtual EvaluatedAction StaticEvaluate();
    public sealed virtual void AddHandler(IAction handler);
    public sealed virtual void RemoveHandler(IAction hanadler);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionsRevised.Handlers.LicensedEntityActionEventsTracker : object {
    private ILogger myLogger;
    private ShellPartCatalogSet myShellPartCatalogSet;
    private EnvironmentZonesExtra myZonesExtra;
    private LicensedEntityUsageTracker myTracker;
    private IEnumerable`1<ILicensedEntity> myEntities;
    private IList`1<PartCatalogZoneMapping> myMappings;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, PartCatalogZoneMapping> CS$<>9__CachedAnonymousMethodDelegate3;
    public LicensedEntityActionEventsTracker(Lifetime lifetime, ILogger logger, ActionEvents actionEvents, ShellPartCatalogSet shellPartCatalogSet, EnvironmentZonesExtra zonesExtra, LicensedEntityUsageTracker tracker, IEnumerable`1<ILicensedEntity> entities);
    private IList`1<PartCatalogZoneMapping> GetPartCatalogZoneMappings();
    public void ReportProductIsUsed(PartCatalogType type);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(ActionEventArgs args);
    [CompilerGeneratedAttribute]
private static PartCatalogZoneMapping <GetPartCatalogZoneMappings>b__2(PartCatalog catalog);
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.ActionsRevised.Handlers.PresentableActionEvaluator : object {
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
    public sealed virtual bool Execute(IAction action, List`1<IAction> allActions, IDataContext dataContext);
    public sealed virtual bool IsApplicable(IAction action);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.StandartPresentation : object {
    [CompilerGeneratedAttribute]
private EvaluationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayStyles <DisplayStyle>k__BackingField;
    public EvaluationStatus Status { get; public set; }
    public bool IsAvailable { get; }
    public bool IsVisible { get; }
    public string Text { get; public set; }
    public IconId Icon { get; public set; }
    public string Description { get; public set; }
    public DisplayStyles DisplayStyle { get; public set; }
    [CompilerGeneratedAttribute]
public EvaluationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EvaluationStatus value);
    public bool get_IsAvailable();
    public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public DisplayStyles get_DisplayStyle();
    [CompilerGeneratedAttribute]
public void set_DisplayStyle(DisplayStyles value);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.StaticBound : object {
    private IAction myNode;
    private EvaluatedAction myEvaluatedAction;
    public IAction PrimaryHandler { get; }
    public StaticBound(IActionDefWithId actionDef, IAction node);
    public sealed virtual IAction get_PrimaryHandler();
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    public sealed virtual EvaluatedAction StaticEvaluate();
    public sealed virtual void AddHandler(IAction handler);
    public sealed virtual void RemoveHandler(IAction hanadler);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.UnsupportedBound : object {
    public static UnsupportedBound Instance;
    public IAction PrimaryHandler { get; }
    private static UnsupportedBound();
    public sealed virtual IAction get_PrimaryHandler();
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    private static EvaluatedAction DefaultEvaluated();
    public sealed virtual EvaluatedAction StaticEvaluate();
    public sealed virtual void AddHandler(IAction handler);
    public sealed virtual void RemoveHandler(IAction hanadler);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.UI.ActionsRevised.Install.ShortcutConflictsArtifact : object {
    public bool HasConflicts;
    public SimpleFileItem Conflicts;
    public ShortcutConflictsArtifact(bool hasConflicts, SimpleFileItem conflicts);
}
public static class JetBrains.Application.UI.ActionsRevised.Install.ShortcutConflictsReporter : object {
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalogType, string> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<TypeAttribute`1<ZoneDefinitionAttribute>, ZonePart> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<IActionDefWithId, String[]> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<IActionDefWithId, String[]> CS$<>9__CachedAnonymousMethodDelegate1d;
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ReportShortcutConflictsDeploy(ShortcutConflictsArtifact conflictsart, ILogger logger);
    [BuildStepAttribute]
public static LocalInstallWithPostInstallStepsPart ReportShortcutConflictsArtOfBuild(ProductBinariesDirArtifact bindir, ShortcutConflictsArtifact conflictsart, ILogger logger);
    [BuildStepAttribute]
public static ShortcutConflictsArtifact ReportShortcutConflictsCore(ProductPartCatalogForBuild catalogart, ILogger logger);
    private static bool CollectConflicts(PartCatalog catalog, TextWriter writer, ILogger logger);
    private static IList`1<PartCatalogType> TraceParts(string text, IList`1<PartCatalogType> oldTypes, IEnumerable`1<PartCatalogType> newTypes, TextWriter writer);
    private static IEnumerable`1<PartCatalogType> GetLeafUiInteractiveZones(PartCatalog catalog);
    private static JetHashSet`1<ZonePart> GetAllowedActivatorZones(IEnumerable`1<PartCatalogType> productZonesActivators, ILogger logger);
    private static bool ReportActionSchemeConflicts(ActionsScheme actionsScheme, TextWriter writer);
    private static List`1<string> DetectConflicts(ICollection`1<IActionDefWithId> actionDefs, Func`2<IActionDefWithId, String[]> selector);
    private static string ActionToString(IActionDefWithId actionDef);
    [CompilerGeneratedAttribute]
private static string <TraceParts>b__16(PartCatalogType t);
    [CompilerGeneratedAttribute]
private static ZonePart <GetLeafUiInteractiveZones>b__18(TypeAttribute`1<ZoneDefinitionAttribute> x);
    [CompilerGeneratedAttribute]
private static String[] <ReportActionSchemeConflicts>b__1a(IActionDefWithId def);
    [CompilerGeneratedAttribute]
private static String[] <ReportActionSchemeConflicts>b__1b(IActionDefWithId def);
}
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionDef : object {
    public static Guid NamespaceGuid;
    [CompilerGeneratedAttribute]
private int <MultiIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private PartCatalogType <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PartCatalogType> <IconType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultShortcutText>k__BackingField;
    [CompilerGeneratedAttribute]
private ShortcutScope <ShortcutScope>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VsShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IdeaShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CustomVisualStudioId>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<StringSource, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<StringSource, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public int MultiIndex { get; private set; }
    public PartCatalogType Part { get; private set; }
    public string ActionId { get; private set; }
    public string Text { get; public set; }
    public string Description { get; private set; }
    public Nullable`1<PartCatalogType> IconType { get; private set; }
    public string DefaultShortcutText { get; private set; }
    public ShortcutScope ShortcutScope { get; private set; }
    public String[] VsShortcuts { get; private set; }
    public String[] IdeaShortcuts { get; private set; }
    public bool IsInternal { get; private set; }
    public Nullable`1<int> CustomVisualStudioId { get; private set; }
    public ActionDef(PartCatalogType part, PartCatalogAttribute attribute, int multiIndex);
    private static ActionDef();
    [CompilerGeneratedAttribute]
public int get_MultiIndex();
    [CompilerGeneratedAttribute]
private void set_MultiIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual PartCatalogType get_Part();
    [CompilerGeneratedAttribute]
private void set_Part(PartCatalogType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    [CompilerGeneratedAttribute]
private void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PartCatalogType> get_IconType();
    [CompilerGeneratedAttribute]
private void set_IconType(Nullable`1<PartCatalogType> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultShortcutText();
    [CompilerGeneratedAttribute]
private void set_DefaultShortcutText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScope get_ShortcutScope();
    [CompilerGeneratedAttribute]
private void set_ShortcutScope(ShortcutScope value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_VsShortcuts();
    [CompilerGeneratedAttribute]
private void set_VsShortcuts(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_IdeaShortcuts();
    [CompilerGeneratedAttribute]
private void set_IdeaShortcuts(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInternal();
    [CompilerGeneratedAttribute]
private void set_IsInternal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CustomVisualStudioId();
    [CompilerGeneratedAttribute]
private void set_CustomVisualStudioId(Nullable`1<int> value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(StringSource ss);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(StringSource ss);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionDefs : object {
    private Dictionary`2<string, IActionDefWithId> myActionIdToNodes;
    private Dictionary`2<object, IActionDefWithId> myPartTypeToNodes;
    public ActionDefs(ActionsScheme scheme);
    private void ApplyAcceleratorsForMenuActions();
    public sealed virtual IActionDefWithId GetActionDefById(string id);
    public sealed virtual IActionDefWithId TryGetActionDefById(string id);
    public sealed virtual IActionDefWithId GetActionDef();
    public sealed virtual IActionDefWithId GetActionDef(Type actionType);
    public sealed virtual IActionDefWithId TryGetActionDef();
    private IActionDefWithId TryGetActionDef(Type actionType);
    public sealed virtual IEnumerable`1<IActionDefWithId> GetAllActionDefs();
}
internal class JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDef : object {
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private PartCatalogType <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultShortcutText>k__BackingField;
    [CompilerGeneratedAttribute]
private ShortcutScope <ShortcutScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PartCatalogType> <IconType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VsShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IdeaShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CustomVisualStudioId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionGroupInsertStyles <InsertionStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IActionNodeDef> <RawChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public bool IsInternal { get; private set; }
    public string ActionId { get; private set; }
    public PartCatalogType Part { get; private set; }
    public string DefaultShortcutText { get; private set; }
    public ShortcutScope ShortcutScope { get; private set; }
    public string Description { get; private set; }
    public Nullable`1<PartCatalogType> IconType { get; private set; }
    public string Text { get; public set; }
    public String[] VsShortcuts { get; private set; }
    public String[] IdeaShortcuts { get; private set; }
    public Nullable`1<int> CustomVisualStudioId { get; private set; }
    public ActionGroupInsertStyles InsertionStyle { get; private set; }
    public IList`1<IActionNodeDef> RawChildren { get; private set; }
    public int Priority { get; public set; }
    public IEnumerable`1<IActionNodeDef> MenuChildren { get; }
    public ActionGroupDef(PartCatalogType part);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInternal();
    [CompilerGeneratedAttribute]
private void set_IsInternal(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    [CompilerGeneratedAttribute]
private void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PartCatalogType get_Part();
    [CompilerGeneratedAttribute]
private void set_Part(PartCatalogType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultShortcutText();
    [CompilerGeneratedAttribute]
private void set_DefaultShortcutText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScope get_ShortcutScope();
    [CompilerGeneratedAttribute]
private void set_ShortcutScope(ShortcutScope value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PartCatalogType> get_IconType();
    [CompilerGeneratedAttribute]
private void set_IconType(Nullable`1<PartCatalogType> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_VsShortcuts();
    [CompilerGeneratedAttribute]
private void set_VsShortcuts(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_IdeaShortcuts();
    [CompilerGeneratedAttribute]
private void set_IdeaShortcuts(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CustomVisualStudioId();
    [CompilerGeneratedAttribute]
private void set_CustomVisualStudioId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual ActionGroupInsertStyles get_InsertionStyle();
    [CompilerGeneratedAttribute]
private void set_InsertionStyle(ActionGroupInsertStyles value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IActionNodeDef> get_RawChildren();
    [CompilerGeneratedAttribute]
private void set_RawChildren(IList`1<IActionNodeDef> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    public sealed virtual IEnumerable`1<IActionNodeDef> get_MenuChildren();
    private IEnumerable`1<IActionNodeDef> MenuChildrenImpl();
    private int TryGetChildNodeIndex(IActionNodeDef def);
    public bool InsertBefore(IActionNodeDef def, IActionNodeDef tag);
    public bool InsertAfter(IActionNodeDef def, IActionNodeDef tag);
    public void InsertLast(IActionNodeDef def);
    public void InsertFirst(IActionNodeDef def);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDefEx : object {
    [ExtensionAttribute]
public static bool IsMenu(IActionGroupDef actionGroupDef);
    [ExtensionAttribute]
public static bool IsGroup(IActionGroupDef actionGroupDef);
    [ExtensionAttribute]
public static bool IsSeparated(IActionGroupDef actionGroupDef);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionsScheme : object {
    private static ILogger Logger;
    private IEnumerable`1<ICustomActionDefFactory> myActionDefFactories;
    public Dictionary`2<string, IActionDefWithId> ActionIdToNodes;
    public Dictionary`2<PartCatalogType, IActionDefWithId> PartTypeToNodes;
    private CompactOneToListMap`2<PartCatalogType, IActionDefWithId> myPartTypeToMultinodes;
    private List`1<MyNodeInsertion> myPostponedInsertions;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, IEnumerable`1<PartCatalogType>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<PartCatalog, IEnumerable`1<PartCatalogType>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Comparison`1<PartCatalogType> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Comparison`1<PartCatalogType> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<MyNodeInsertion, string> CS$<>9__CachedAnonymousMethodDelegateb;
    public ActionsScheme(ShellPartCatalogSet productcatalogs, IEnumerable`1<ICustomActionDefFactory> actionDefFactories);
    private static ActionsScheme();
    private void AddActionsFromParts(List`1<PartCatalogType> actionParts, List`1<PartCatalogType> groupParts);
    private void AddActionOrMultiAction(PartCatalogType part);
    protected virtual ActionDef CreateActionDef(PartCatalogType part, PartCatalogAttribute attribute, int i);
    private void IterateUnresolvedInsertions();
    private void AddAction(IActionDefWithId actionNode, bool indexByPart);
    private void ProcessInsertion(IActionDefWithId actionNode);
    private void ProcessSingleInsertion(PartCatalogType baseType, IActionDefWithId actionNode);
    private void ProcessOwnChildren(ActionGroupDef actionGroup);
    private T FindNodeForInsertion(PartCatalogType nodeType);
    public void Dump(StreamWriter writer);
    private void DumpImpl(StreamWriter writer, string indent, IActionNodeDef actionNodeDef);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PartCatalogType> <.ctor>b__0(PartCatalog catalog);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<PartCatalogType> <.ctor>b__1(PartCatalog catalog);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__2(PartCatalogType x, PartCatalogType y);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__3(PartCatalogType x, PartCatalogType y);
    [CompilerGeneratedAttribute]
private static string <IterateUnresolvedInsertions>b__9(MyNodeInsertion o);
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDef {
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDefs {
    [NotNullAttribute]
public abstract virtual IActionDefWithId GetActionDefById(string id);
    [CanBeNullAttribute]
public abstract virtual IActionDefWithId TryGetActionDefById(string id);
    [NotNullAttribute]
public abstract virtual IActionDefWithId GetActionDef(Type actionType);
    [NotNullAttribute]
public abstract virtual IActionDefWithId GetActionDef();
    [CanBeNullAttribute]
public abstract virtual IActionDefWithId TryGetActionDef();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IActionDefWithId> GetAllActionDefs();
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId {
    public bool IsInternal { get; }
    public PartCatalogType Part { get; }
    public Nullable`1<PartCatalogType> IconType { get; }
    public string ActionId { get; }
    public string Text { get; public set; }
    public string Description { get; }
    public Nullable`1<int> CustomVisualStudioId { get; }
    public String[] VsShortcuts { get; }
    public String[] IdeaShortcuts { get; }
    [NotNullAttribute]
public string DefaultShortcutText { get; }
    public ShortcutScope ShortcutScope { get; }
    public abstract virtual bool get_IsInternal();
    public abstract virtual PartCatalogType get_Part();
    public abstract virtual Nullable`1<PartCatalogType> get_IconType();
    public abstract virtual string get_ActionId();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_Description();
    public abstract virtual Nullable`1<int> get_CustomVisualStudioId();
    public abstract virtual String[] get_VsShortcuts();
    public abstract virtual String[] get_IdeaShortcuts();
    public abstract virtual string get_DefaultShortcutText();
    public abstract virtual ShortcutScope get_ShortcutScope();
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef {
    public ActionGroupInsertStyles InsertionStyle { get; }
    public int Priority { get; public set; }
    public IList`1<IActionNodeDef> RawChildren { get; }
    public IEnumerable`1<IActionNodeDef> MenuChildren { get; }
    public abstract virtual ActionGroupInsertStyles get_InsertionStyle();
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual IList`1<IActionNodeDef> get_RawChildren();
    public abstract virtual IEnumerable`1<IActionNodeDef> get_MenuChildren();
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.ICustomActionDefFactory {
    public abstract virtual bool IsApplicable(PartCatalogType part, PartCatalogAttribute attribute);
    public abstract virtual ActionDef Create(PartCatalogType part, PartCatalogAttribute attribute, int i);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
public class JetBrains.Application.UI.ActionsRevised.Menu.ActionAttribute : ProductComponentAttribute {
    public string ActionId;
    public string Text;
    public String[] VsShortcuts;
    public String[] IdeaShortcuts;
    public static string ActionAttribute_ActionId;
    public static string ActionAttribute_Text;
    public static string ActionAttribute_Id;
    public static string ActionAttribute_IdRangeLength;
    public static string ActionAttribute_Description;
    public static string ActionAttribute_Icon;
    public static string ActionAttribute_ShortcutScope;
    public static string ActionAttribute_VsShortcuts;
    public static string ActionAttribute_IdeaShortcuts;
    public static string ActionAttribute_DefaultShortcutText;
    public static string ShortName;
    public static string FullName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdRangeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ShortcutScope <ShortcutScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultShortcutText>k__BackingField;
    public int Id { get; public set; }
    public int IdRangeLength { get; public set; }
    public string Description { get; public set; }
    public Type Icon { get; public set; }
    public ShortcutScope ShortcutScope { get; public set; }
    public string DefaultShortcutText { get; public set; }
    public ActionAttribute(string Text);
    [EditorBrowsableAttribute("1")]
public ActionAttribute(string ActionId, string Text);
    private static ActionAttribute();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_IdRangeLength();
    [CompilerGeneratedAttribute]
public void set_IdRangeLength(int value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Type value);
    [CompilerGeneratedAttribute]
public ShortcutScope get_ShortcutScope();
    [CompilerGeneratedAttribute]
public void set_ShortcutScope(ShortcutScope value);
    [CompilerGeneratedAttribute]
public string get_DefaultShortcutText();
    [CompilerGeneratedAttribute]
public void set_DefaultShortcutText(string value);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.IAutomationProviderAction {
    public abstract virtual bool Execute(IDataContext context);
    public abstract virtual bool Update(IDataContext context, AutomationProviderActionPresentation presentation);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.ICheckableAction {
    public abstract virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public abstract virtual void Execute(IDataContext context);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction {
    public abstract virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.IPresentableAction {
    public abstract virtual bool Update(IDataContext context, ActionPresentation actionPresentation);
}
public interface JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts {
    public ShortcutScheme CurrentScheme { get; }
    public abstract virtual ShortcutScheme get_CurrentScheme();
    public abstract virtual void SelectShortcutScheme(ShortcutScheme scheme);
    public abstract virtual IList`1<ActionShortcut> GetShortcuts(IActionDefWithId actionDef);
    public abstract virtual void AddShortcut(ShortcutScheme scheme, IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public abstract virtual void RemoveShortcut(ShortcutScheme scheme, IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public abstract virtual IList`1<Pair`2<ActionShortcut, ShortcutScope>> GetShortcutsWithScopes(IActionDefWithId action);
}
public abstract class JetBrains.Application.UI.ActionSystem.Action.OverridingActionHandler : object {
    private String[] myBaseActionIds;
    protected OverridingActionHandler(String[] baseActionIds);
    public void RegisterActionHandler(Lifetime lifetime, IActionManager actionManager);
    public abstract virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.Application.UI.ActionSystem.Action.SimpleOverridingActionHandler : OverridingActionHandler {
    protected SimpleOverridingActionHandler(String[] baseActionIds);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual bool IsAvailable(IDataContext context);
    protected abstract virtual void ExecuteInternal(IDataContext context);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionSystem.ActionBar.ActionsAsyncAvailability : object {
    private GroupingEvent myPushAsyncUpdateEvent;
    private SequentialLifetimes myUpdateLifetimes;
    private IActionManager myActionManager;
    private RequirementsManager myRequirementsManager;
    protected IShellLocks myLocks;
    protected ICollection`1<AsyncUpdateList> myAsyncUpdateList;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsUpdateInProgress;
    [CompilerGeneratedAttribute]
private static Func`2<AsyncUpdateList, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public ActionsAsyncAvailability(IShellLocks locks, Lifetime lifetime, IActionManager actionManager, RequirementsManager requirementsManager, DataContexts dataContexts);
    protected void UpdateAsyncCore();
    private void Prepare(Lifetime lifetimeDef, List`1<AsyncUpdateList> asyncUpdateLists);
    protected virtual void PrecalculateAllDataRules(IDataContext context);
    public virtual void PushAsyncUpdate(AsyncUpdateList asyncUpdateList);
    [CompilerGeneratedAttribute]
private static bool <UpdateAsyncCore>b__1(AsyncUpdateList aul);
    [CompilerGeneratedAttribute]
private bool <UpdateAsyncCore>b__4();
}
public class JetBrains.Application.UI.ActionSystem.ActionBar.AsyncActionEvaluationData : object {
    private EvaluatedAction myResult;
    [CompilerGeneratedAttribute]
private IActionDefWithId <ActionDefWithId>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<EvaluatedAction> <ContinueOnUiThread>k__BackingField;
    public IActionDefWithId ActionDefWithId { get; private set; }
    public Action`1<EvaluatedAction> ContinueOnUiThread { get; private set; }
    public EvaluatedAction Result { get; }
    public AsyncActionEvaluationData(IActionDefWithId actionDefWithId, Action`1<EvaluatedAction> continueOnUiThreadAction);
    [CompilerGeneratedAttribute]
public IActionDefWithId get_ActionDefWithId();
    [CompilerGeneratedAttribute]
private void set_ActionDefWithId(IActionDefWithId value);
    [CompilerGeneratedAttribute]
public Action`1<EvaluatedAction> get_ContinueOnUiThread();
    [CompilerGeneratedAttribute]
private void set_ContinueOnUiThread(Action`1<EvaluatedAction> value);
    public void SetResult(EvaluatedAction evaluatedAction);
    public EvaluatedAction get_Result();
}
public class JetBrains.Application.UI.ActionSystem.ActionBar.AsyncUpdateList : object {
    private Lifetime myLifetime;
    private Func`2<Lifetime, IDataContext> myGetDataContextFunc;
    private List`1<AsyncActionEvaluationData> myListToUpdate;
    private IDataContext myContext;
    public List`1<AsyncActionEvaluationData> ListToUpdate { get; }
    public IDataContext Context { get; }
    public bool IsAlive { get; }
    public AsyncUpdateList(Lifetime lifetime, Func`2<Lifetime, IDataContext> getDataContextFunc);
    public List`1<AsyncActionEvaluationData> get_ListToUpdate();
    public IDataContext get_Context();
    public bool get_IsAlive();
    public void PrepareContext(Lifetime lifetime);
    public virtual string ToString();
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager : object {
    protected IActionManager myActionman;
    private IEnumerable`1<IActionBarItemAutomationProvider> myAutomationProvides;
    private IThemedIconManager myIconman;
    private IActionManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.ActionManager { get; }
    private IThemedIconManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.ThemedIconManager { get; }
    public DummyActionBarManager(IActionManager actionman, IThemedIconManager iconman, IEnumerable`1<IActionBarItemAutomationProvider> automationProvides);
    public sealed virtual void RegisterActionBar(Lifetime lifetime, IActionBar actionBar, bool autoUpdate);
    private sealed virtual override IActionManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.get_ActionManager();
    public virtual IActionBar CreateActionBar(Lifetime lifetime, IActionGroupDef def, bool autoUpdate, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    public virtual IActionContextMenu CreateActionContextMenu(LifetimeDefinition lifetimeDefinition, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    private sealed virtual override IActionMenu JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionMenu(Lifetime lifetime, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    private sealed virtual override IActionAutomation JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionAutomation parent);
    private sealed virtual override IThemedIconManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.get_ThemedIconManager();
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar {
    [NotNullAttribute]
public IActionGroupDef ActionGroup { get; }
    public EitherControl Control { get; }
    public bool Visible { get; }
    public abstract virtual IActionGroupDef get_ActionGroup();
    [NotNullAttribute]
public abstract virtual IDataContext CreateDataContext(Lifetime lifetime);
    public abstract virtual EitherControl get_Control();
    public abstract virtual bool get_Visible();
    public abstract virtual void Update(IDataContext context);
    public abstract virtual void UpdateAsync(IActionsAvailabilityService availabilityService);
    public abstract virtual ICustomStripComboBox InsertComboBox(int index);
    public abstract virtual ICustomStripLabel InsertLabel(int index, string title, Image image);
    public abstract virtual ICustomStripSeparator InsertSplitter(int index);
    public abstract virtual ICustomStripProgressBar InsertProgressBar(int index);
    public abstract virtual void InjectCustom(int index, object item);
    public abstract virtual void RemoveCustom(object item);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager {
    [NotNullAttribute]
public IActionManager ActionManager { get; }
    [NotNullAttribute]
public IThemedIconManager ThemedIconManager { get; }
    public abstract virtual IActionManager get_ActionManager();
    public abstract virtual IThemedIconManager get_ThemedIconManager();
    [NotNullAttribute]
public abstract virtual IActionBar CreateActionBar(Lifetime lifetime, IActionGroupDef def, bool autoUpdate, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    [NotNullAttribute]
public abstract virtual IActionContextMenu CreateActionContextMenu(LifetimeDefinition lifetimeDefinition, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    [NotNullAttribute]
public abstract virtual IActionMenu CreateActionMenu(Lifetime lifetime, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    [CanBeNullAttribute]
public abstract virtual IActionAutomation CreateItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionAutomation parent);
    public abstract virtual void RegisterActionBar(Lifetime lifetime, IActionBar actionBar, bool autoUpdate);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManagerEx : object {
    [GuardAttribute("1")]
[ExtensionAttribute]
public static void ShowPopupMenu(IActionBarManager thіs, Lifetime lifetime, IThreading threading, IActionGroupDef group, Func`1<IEnumerable`1<IDataRule>> FGetDataRules, Point ptScreen);
    [ExtensionAttribute]
[GuardAttribute("1")]
public static void ShowPopupMenu(IActionBarManager thіs, LifetimeDefinition lifetimeDefinition, IThreading threading, IActionGroupDef group, Func`1<IEnumerable`1<IDataRule>> FGetDataRules, Point ptScreen);
    [GuardAttribute("1")]
[ExtensionAttribute]
public static void Update(IActionBar thіs);
    public static Func`2<Lifetime, IDataContext> ToGetDataContext(IActionManager actionManager, Func`1<IEnumerable`1<IDataRule>> fGetDataRules);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionContextMenu {
    public abstract virtual void BeginShow(Point ptScreen);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionItemParent {
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public abstract virtual bool get_PreferMenuItems();
    public abstract virtual bool get_ShowDisabledItems();
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionMenu {
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionsAvailabilityService {
    public abstract virtual void PushAsyncUpdate(AsyncUpdateList asyncUpdateList);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripComboBox {
    [NotNullAttribute]
public ComboBox ComboBox { get; }
    public int Width { get; public set; }
    public abstract virtual ComboBox get_ComboBox();
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripItem {
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripLabel {
    public string Text { get; public set; }
    public string ToolTipText { get; public set; }
    public Image Image { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_ToolTipText();
    public abstract virtual void set_ToolTipText(string value);
    public abstract virtual Image get_Image();
    public abstract virtual void set_Image(Image value);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar {
    public string Text { get; public set; }
    public int Value { get; public set; }
    public int Minimum { get; public set; }
    public int Maximum { get; public set; }
    public Color ProgressColor { get; public set; }
    public ProgressBar ProgressBar { get; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual int get_Value();
    public abstract virtual void set_Value(int value);
    public abstract virtual int get_Minimum();
    public abstract virtual void set_Minimum(int value);
    public abstract virtual int get_Maximum();
    public abstract virtual void set_Maximum(int value);
    public abstract virtual Color get_ProgressColor();
    public abstract virtual void set_ProgressColor(Color value);
    public abstract virtual ProgressBar get_ProgressBar();
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripSeparator {
}
public class JetBrains.Application.UI.ActionSystem.ActionLoader.ActionLoaderConstants : object {
    public static string ACTION_TAG_NAME;
    public static string ACTION_GROUP_TAG_NAME;
    public static string ACTION_WITH_GROUP_TAG_NAME;
    public static string SEPARATOR_TAG_NAME;
    public static string ACTION_REF_TAG_NAME;
    public static string AttrEmbed;
    public static string INSERT_TAG_NAME;
    public static string ATTR_ID;
    public static string ATTR_POSITION;
    public static string ATTR_INSERT_ANCHOR_ID;
    public static string ATTR_GROUP_ID;
    public static string ATTR_INTERNAL;
    public static string ATTR_DESCRIPTION;
    public static string ATTR_SHORTCUT;
    public static string ATTR_VS_SHORTCUT;
    public static string ATTR_TEXT;
    public static string ATTR_IMAGE;
    public static string ATTR_TYPE;
    public static string ATTR_CHECKED;
    public static string ATTR_RADIOCHECK;
    public static string TYPE_CHECKBOX;
    public static string TYPE_COMBOBOX;
    public static string SHORTCUT_ELEMENT;
    public static string VS_SHORTCUT_ELEMENT;
    public static string ATTR_MOUSE_SHORTCUT;
    public static string ATTR_SCOPE;
    public static string ATTR_OVERRIDES;
    public static string ATTR_SHOW_CONFLICT;
    public static string UpdatesActions;
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerCommandBindingsFactory : object {
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private IThreading myThreading;
    public ActionManagerCommandBindingsFactory(IActionManager actionManager, IThreading threading);
    public virtual IActionManagerCommandBindings Create(Lifetime lifetime);
}
public class JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerSimpleCommand : object {
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
public IActionDefWithId Action;
    public ActionManagerSimpleCommand(Lifetime lifetime, IActionDefWithId action, IActionManager actionManager, IThreading threading);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    [CompilerGeneratedAttribute]
private void <System.Windows.Input.ICommand.Execute>b__3();
}
public class JetBrains.Application.UI.ActionSystem.ActionManager.DummyActionManagerCommandBindings : object {
    private Lifetime myLifetime;
    private IDictionaryEvents`2<IActionDefWithId, ActionManagerSimpleCommand> myMapActionToCommand;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private IActionManager <ActionManager>k__BackingField;
    public IActionManager ActionManager { get; private set; }
    public DummyActionManagerCommandBindings(Lifetime lifetime, IActionManager actionManager, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual IActionManager get_ActionManager();
    [CompilerGeneratedAttribute]
private void set_ActionManager(IActionManager value);
    [NotNullAttribute]
private sealed virtual override ICommand JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindings.GetCommand(IActionDefWithId action);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionSystem.ActionManager.ShortcutManagerEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<KeyboardShortcut[], long> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ActionShortcut, KeyGesture> CS$<>9__CachedAnonymousMethodDelegate6;
    [ExtensionAttribute]
public static string GetPresentableShortcutText(IActionDefWithId node, IActionShortcuts shortcuts);
    [ExtensionAttribute]
public static string GetPresentableShortcutText(IActionManager actionManager);
    [ExtensionAttribute]
public static string GetHowToExecuteText(IActionManager actionManager);
    [ExtensionAttribute]
public static string GetHowToExecuteText(IActionDefWithId actionDef, IActionManager actionManager);
    [ExtensionAttribute]
public static string GetHowToExecuteText(IActionManager actionManager, IActionDefWithId actionNode);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetShortcutString(IActionShortcuts shortcutManager, IActionDefWithId action);
    [CanBeNullAttribute]
public static ActionShortcut SelectShortcutForPresentation(IList`1<ActionShortcut> shortcuts);
    [NotNullAttribute]
[ExtensionAttribute]
public static InputGestureCollection GetInputGestures(IActionShortcuts thіs, IActionDefWithId action);
    [CompilerGeneratedAttribute]
private static long <SelectShortcutForPresentation>b__0(KeyboardShortcut[] keyboardShortcuts);
    [CompilerGeneratedAttribute]
private static KeyGesture <GetInputGestures>b__5(ActionShortcut shortcut);
}
public static class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll : object {
    public static string ActionGroupId;
    public static ICloseAllItems EmptyItemsList;
    private static CloseAll();
}
[ActionAttribute("Close All")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseAllAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CompilerGeneratedAttribute]
private static bool <Update>b__0(ICloseAllItem x);
}
[ActionAttribute("Close All But Pinned")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseAllButPinnedAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute>b__0(ICloseAllItem x);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update>b__2(ICloseAllItem x);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update>b__3(ICloseAllItem x);
}
[ActionAttribute("Close All But This")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseAllButThisAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute>b__0(ICloseAllItem x);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update>b__2(ICloseAllItem x);
}
[ActionAttribute("Close")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseThisAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ICloseAllItem, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute>b__0(ICloseAllItem x);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update>b__2(ICloseAllItem x);
}
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAllItem : object {
    public Action Close;
    public bool IsCloseable;
    public bool IsCurrent;
    public string Text;
    public CloseAllItem(string text, bool isCurrent, Action FClose);
}
public interface JetBrains.Application.UI.ActionSystem.Actions.CloseAll.ICloseAllItem {
    public string Title { get; }
    public bool CanClose { get; }
    public bool QueryClose { get; }
    public bool IsCurrentItem { get; }
    public bool IsPinned { get; }
    public abstract virtual string get_Title();
    public abstract virtual bool get_CanClose();
    public abstract virtual bool get_QueryClose();
    public abstract virtual bool get_IsCurrentItem();
    public abstract virtual bool get_IsPinned();
}
public interface JetBrains.Application.UI.ActionSystem.Actions.CloseAll.ICloseAllItems {
    [NotNullAttribute]
public IReadOnlyList`1<ICloseAllItem> Items { get; }
    public abstract virtual IReadOnlyList`1<ICloseAllItem> get_Items();
    public abstract virtual void QueryClose(IEnumerable`1<ICloseAllItem> items);
}
[ActionAttribute("Goto Product &Twitter")]
public class JetBrains.Application.UI.ActionSystem.Actions.ProductInfo.ProductGotoTwitterAction : ProductGoToWebActionBase {
    public ProductGotoTwitterAction(int index);
    protected virtual string GetProductUrl(ISubProductInfo productInfo);
}
[ActionAttribute("Goto Product &Web Page")]
public class JetBrains.Application.UI.ActionSystem.Actions.ProductInfo.ProductGoToWebAction : ProductGoToWebActionBase {
    public ProductGoToWebAction(int index);
    protected virtual string GetProductUrl(ISubProductInfo productInfo);
}
public abstract class JetBrains.Application.UI.ActionSystem.Actions.ProductInfo.ProductGoToWebActionBase : object {
    private int myIndex;
    private string myName;
    [CompilerGeneratedAttribute]
private static Comparison`1<ISubProductInfo> CS$<>9__CachedAnonymousMethodDelegate1;
    public ProductGoToWebActionBase(int index, string name);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private ISubProductInfo GetProductInfo(IEnumerable`1<ISubProductInfo> subProductsInfos);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual string GetProductUrl(ISubProductInfo productInfo);
    [CompilerGeneratedAttribute]
private static int <GetProductInfo>b__0(ISubProductInfo x, ISubProductInfo y);
}
[ActionAttribute("Online &Help")]
public class JetBrains.Application.UI.ActionSystem.Actions.ShowHelpAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("Show Log")]
public class JetBrains.Application.UI.ActionSystem.Actions.ShowLogAction : object {
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.CheckableCustomPresentation : object {
    [CompilerGeneratedAttribute]
private bool <IsChecked>k__BackingField;
    public bool IsChecked { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsChecked();
    [CompilerGeneratedAttribute]
public void set_IsChecked(bool value);
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus : Enum {
    public int value__;
    public static EvaluationStatus Available;
    public static EvaluationStatus Unavailable;
    public static EvaluationStatus Invisible;
    public static EvaluationStatus Unsupported;
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.ExecutableCustomActionPresentation : object {
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.ExecutionState : Enum {
    public int value__;
    public static ExecutionState Undefined;
    public static ExecutionState WaitingForRequirement;
    public static ExecutionState CompletedOrInterrupted;
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.ICustomActionPresentation {
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.PresentableCustomActionPresentation : object {
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.RequirementExecutionStatus : object {
    public ExecutionState ExecutionState;
    public string Description;
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.RequirementsManager : object {
    private IShellLocks myLocks;
    private ILogger myLogger;
    private GroupingEvent myPushRequirementEvent;
    private JetHashSet`1<IActionRequirement> myPendingRequirements;
    private Signal`1<RequirementExecutionStatus> myWaitingForRequirementSignal;
    public Signal`1<RequirementExecutionStatus> WaitingForRequirementSignal { get; }
    public RequirementsManager(IShellLocks locks, Lifetime lifetime, ILogger logger);
    public Signal`1<RequirementExecutionStatus> get_WaitingForRequirementSignal();
    public void GetReadyCore();
    public void ForceThatAllRequirementIsReady();
    public void PushRequirement(IActionRequirement requirement, Action`1<IActionRequirement> subscribeAction);
    public virtual void ExecuteActionAsync(IActionRequirement requirement, Action continueWith, Action failWith, bool reSharperIsThinking);
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.RequirementState : Enum {
    public int value__;
    public static RequirementState Undefined;
    public static RequirementState Completed;
    public static RequirementState Interrupted;
}
public static class JetBrains.Application.UI.ActionSystem.ActionsRevised.Loader.ActionDefines : object {
    public static string SeparatorNodeName;
    public static string InsertBefore;
    public static string InsertAfter;
    public static string InsertFirst;
    public static string InsertLast;
    private static ActionDefines();
    [NotNullAttribute]
public static string GetIdFromName(StringSource typeName);
    [NotNullAttribute]
public static string GetIdFromNameImpl(StringSource typeName);
    [CanBeNullAttribute]
public static string TryGetActionIDFromActionHandlerTypeName(string typename);
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Loader.ActionSeparator : object {
    public static IActionNodeDef Separator;
    private static ActionSeparator();
    public virtual string ToString();
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Loader.IActionNodeDef {
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionGroupAttribute : ProductComponentAttribute {
    public int Priority;
    public static string ActionGroupAttribute_ActionId;
    public static string ActionGroupAttribute_Style;
    public static string ActionGroupAttribute_Icon;
    public static string ActionGroupAttribute_Text;
    public static string ActionGroupAttribute_Description;
    public static string ActionGroupAttribute_Id;
    public static string ActionGroupAttribute_Priority;
    public static string ActionGroupAttribute_UpdatesActions;
    public static string ShortName;
    public static string FullName;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionGroupInsertStyles <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdatesActions>k__BackingField;
    public string ActionId { get; public set; }
    public ActionGroupInsertStyles Style { get; public set; }
    public Type Icon { get; public set; }
    public int Id { get; public set; }
    public string Text { get; public set; }
    public string Description { get; public set; }
    public bool UpdatesActions { get; public set; }
    public ActionGroupAttribute(ActionGroupInsertStyles Style);
    [EditorBrowsableAttribute("1")]
public ActionGroupAttribute(string ActionId, ActionGroupInsertStyles Style);
    private static ActionGroupAttribute();
    [CompilerGeneratedAttribute]
public string get_ActionId();
    [CompilerGeneratedAttribute]
public void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public ActionGroupInsertStyles get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(ActionGroupInsertStyles value);
    [CompilerGeneratedAttribute]
public Type get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Type value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdatesActions();
    [CompilerGeneratedAttribute]
public void set_UpdatesActions(bool value);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionGroupInsertStyles : Enum {
    public int value__;
    public static ActionGroupInsertStyles Embedded;
    public static ActionGroupInsertStyles Submenu;
    public static ActionGroupInsertStyles Separated;
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionHandler : PartAttribute {
    [CompilerGeneratedAttribute]
private Type <ActionType>k__BackingField;
    public Type ActionType { get; public set; }
    public ActionHandler(Type ActionType);
    [CompilerGeneratedAttribute]
public Type get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(Type value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionRequirementEx : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static IActionRequirement GetActionExecuteRequirement(IAction action, IDataContext dataContext);
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.EmptyRequirement : object {
    [NotNullAttribute]
private static EmptyRequirement ourEmptyRequirement;
    private Signal`1<RequirementState> myDone;
    [NotNullAttribute]
public static EmptyRequirement Instance { get; }
    public bool IsReady { get; }
    public ISignal`1<RequirementState> Done { get; }
    public string Description { get; }
    private static EmptyRequirement();
    public static EmptyRequirement get_Instance();
    public sealed virtual bool get_IsReady();
    public sealed virtual void GetReady();
    public sealed virtual ISignal`1<RequirementState> get_Done();
    public sealed virtual string get_Description();
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction {
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionRequirement {
    public bool IsReady { get; }
    [NotNullAttribute]
public ISignal`1<RequirementState> Done { get; }
    public string Description { get; }
    public abstract virtual bool get_IsReady();
    public abstract virtual void GetReady();
    public abstract virtual ISignal`1<RequirementState> get_Done();
    public abstract virtual string get_Description();
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithExecuteRequirement {
    [NotNullAttribute]
public abstract virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithFallback {
    public abstract virtual bool ShouldFallBack(IDataContext context);
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithUpdateRequirement {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertAfter`2 {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertBefore`2 {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertFirst`1 {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertLast`1 {
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.INeedMainThreadToUpdateAction {
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.InsertionPosition : Enum {
    public int value__;
    public static InsertionPosition First;
    public static InsertionPosition Last;
    public static InsertionPosition Before;
    public static InsertionPosition After;
}
[ObsoleteAttribute("Zoning is the primary means for hiding internal-only features. Place internal actions within internal module zones.")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.InternalActionAttribute : PartAttribute {
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IRefactoringAction {
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.Separator : object {
}
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute : PartAttribute {
    public string VsOverriddenAction;
    public static string VsOverriddenActionProperty;
    public static string HideVsCommandProperty;
    public static string FallBackOnlyProperty;
    [CompilerGeneratedAttribute]
private bool <HideVsCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FallBackOnly>k__BackingField;
    public bool HideVsCommand { get; public set; }
    public bool FallBackOnly { get; public set; }
    public VsOverrideActionAttribute(string VsOverriddenAction);
    private static VsOverrideActionAttribute();
    [CompilerGeneratedAttribute]
public bool get_HideVsCommand();
    [CompilerGeneratedAttribute]
public void set_HideVsCommand(bool value);
    [CompilerGeneratedAttribute]
public bool get_FallBackOnly();
    [CompilerGeneratedAttribute]
public void set_FallBackOnly(bool value);
}
[ActionAttribute("")]
public class JetBrains.Application.UI.ActionSystem.EscapeActionHandler : object {
    public static string ActionId;
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public abstract class JetBrains.Application.UI.ActionSystem.EscapeActionHandlerBase : OneOfaListActionHandler {
    public IActionDefWithId ActionId { get; }
    protected EscapeActionHandlerBase(IActionManager actionManager);
    public virtual IActionDefWithId get_ActionId();
}
public interface JetBrains.Application.UI.ActionSystem.Menu.INamedUiItem {
    public bool CanHaveMnemonic { get; }
    public string Text { get; public set; }
    public abstract virtual bool get_CanHaveMnemonic();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public class JetBrains.Application.UI.ActionSystem.Menu.MnemonicProcessor : object {
    private static char NO_MNEMONIC;
    private List`1<char> myMnemonics;
    [NotNullAttribute]
private static Int32[] CONSONANTS;
    private static MnemonicProcessor();
    private bool TryUseMnemonic(char c);
    [NotNullAttribute]
private static Int32[] FillConsonantsList();
    private static bool IsConsonant(char c);
    private static void SplitWord(string word, Char& firstChar, Char[]& consonants, Char[]& other);
    private static IList`1<char> GetPossibleMnemonics(string text);
    private static char GetMnemonic(string text);
    public void UpdateMnemonics(IEnumerable`1<INamedUiItem> allItems, ICollection`1<INamedUiItem> targetItems);
}
public abstract class JetBrains.Application.UI.ActionSystem.OneOfaListActionHandler : object {
    private LifetimeDefinition mySubscribedLifetime;
    protected IActionManager myActionManager;
    public IActionDefWithId ActionId { get; }
    public bool IsSubscribed { get; }
    protected OneOfaListActionHandler(IActionManager actionManager);
    public abstract virtual IActionDefWithId get_ActionId();
    public bool get_IsSubscribed();
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public void Subscribe(Lifetime lifetime);
    public void Unsubscribe();
    protected abstract virtual bool IsAvailable(IDataContext dataContext);
    protected abstract virtual void Execute(IDataContext dataContext);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__0();
}
public interface JetBrains.Application.UI.ActionSystem.ShortcutManager.ISchemeEntry {
    public ShortcutScheme Scheme { get; }
    public abstract virtual void AddShortcut(IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public abstract virtual void RemoveShortcut(IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public abstract virtual IEnumerable`1<Pair`2<ActionShortcut, ShortcutScope>> GetShortcuts(IActionDefWithId action);
    public abstract virtual IEnumerable`1<IActionDefWithId> GetActionsWithShortcuts();
    public abstract virtual ShortcutScheme get_Scheme();
}
public class JetBrains.Application.UI.ActionSystem.ShortcutManager.SchemeEntry : object {
    private OneToSetMap`2<IActionDefWithId, Pair`2<ActionShortcut, ShortcutScope>> myActions;
    [CompilerGeneratedAttribute]
private ShortcutScheme <Scheme>k__BackingField;
    public ShortcutScheme Scheme { get; private set; }
    public SchemeEntry(ShortcutScheme scheme);
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScheme get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(ShortcutScheme value);
    public virtual void AddShortcut(IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public virtual void RemoveShortcut(IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public sealed virtual IEnumerable`1<Pair`2<ActionShortcut, ShortcutScope>> GetShortcuts(IActionDefWithId action);
    public sealed virtual IEnumerable`1<IActionDefWithId> GetActionsWithShortcuts();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ActionSystem.ShortcutManager.ShortcutManager : object {
    private Dictionary`2<ShortcutScheme, ISchemeEntry> mySchemes;
    [CompilerGeneratedAttribute]
private ShortcutScheme <CurrentScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<ActionShortcut, ShortcutScope>, ActionShortcut> CS$<>9__CachedAnonymousMethodDelegate5;
    public ShortcutScheme CurrentScheme { get; protected set; }
    protected ISchemeEntry CurrentEntry { get; }
    public ShortcutManager(IActionDefs defs);
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScheme get_CurrentScheme();
    [CompilerGeneratedAttribute]
protected void set_CurrentScheme(ShortcutScheme value);
    protected virtual ISchemeEntry CreateSchemeEntry(ShortcutScheme scheme);
    protected ISchemeEntry GetEntry(ShortcutScheme scheme);
    protected ISchemeEntry get_CurrentEntry();
    public virtual void AddShortcut(ShortcutScheme scheme, IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public virtual void RemoveShortcut(ShortcutScheme scheme, IActionDefWithId action, ShortcutScope scope, ActionShortcut shortcut);
    public sealed virtual IList`1<Pair`2<ActionShortcut, ShortcutScope>> GetShortcutsWithScopes(IActionDefWithId action);
    public virtual IList`1<ActionShortcut> GetShortcuts(IActionDefWithId action);
    public virtual void SelectShortcutScheme(ShortcutScheme scheme);
    [CompilerGeneratedAttribute]
private static ActionShortcut <GetShortcuts>b__4(Pair`2<ActionShortcut, ShortcutScope> x);
}
[ActionAttribute("Tab Left")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:5)")]
public class JetBrains.Application.UI.ActionSystem.Text.TabLeftActionHandler : object {
    public static string ACTION_ID;
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public static class JetBrains.Application.UI.ActionSystem.Text.TextControlActions : object {
    public static string ACTION_PREFIX;
    public static string SELECTION_SUFFIX;
    public static string BACKSPACE;
    public static string BACKSPACE_ACTION_ID;
    public static string DELETE;
    public static string DELETE_ACTION_ID;
    public static string ENTER;
    public static string ENTER_ACTION_ID;
    public static string TAB;
    public static string TAB_ACTION_ID;
    public static string UP;
    public static string UP_ACTION_ID;
    public static string DOWN;
    public static string DOWN_ACTION_ID;
    public static string PAGE_UP;
    public static string PAGE_UP_ACTION_ID;
    public static string PAGE_DOWN;
    public static string PAGE_DOWN_ACTION_ID;
    public static string CUT;
    public static string CUT_ACTION_ID;
    public static string COPY;
    public static string COPY_ACTION_ID;
    public static string PASTE;
    public static string PASTE_ACTION_ID;
    public static string UNDO;
    public static string UNDO_ACTION_ID;
    public static string REDO;
    public static string REDO_ACTION_ID;
    public static string SELECT_ALL;
    public static string SELECT_ALL_ACTION_ID;
    public static string LEFT;
    public static string LEFT_ACTION_ID;
    public static string RIGHT;
    public static string RIGHT_ACTION_ID;
    public static string HOME;
    public static string HOME_ACTION_ID;
    public static string END;
    public static string END_ACTION_ID;
    public static string DOCUMENT_HOME;
    public static string DOCUMENT_HOME_ACTION_ID;
    public static string DOCUMENT_END;
    public static string DOCUMENT_END_ACTION_ID;
    public static string PREVIOUS_WORD;
    public static string WordPreviousActionId;
    public static string WordPreviousExtendActionId;
    public static string NEXT_WORD;
    public static string WordNextActionId;
    public static string WordNextExtendActionId;
    public static string WordDeleteToEnd;
    public static string WordDeleteToEndActionId;
    public static string WordDeleteToStart;
    public static string WordDeleteToStartActionId;
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Automation.AutomationViewsRegistry : object {
    protected Lazy`1<DictionaryEvents`2<ViewKey, Type>> myRegisteredViews;
    private static ReadonlyToken myReadonlyToken;
    [CompilerGeneratedAttribute]
private IComponentContainer <DefaultParentComponentContainer>k__BackingField;
    public IComponentContainer DefaultParentComponentContainer { get; private set; }
    private DictionaryEvents`2<ViewKey, Type> JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisteredViews { get; }
    public AutomationViewsRegistry(Lifetime lifetime, ShellPartCatalogSet catalogset, IComponentContainer componentContainer, ILogger logger);
    private static AutomationViewsRegistry();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentContainer get_DefaultParentComponentContainer();
    [CompilerGeneratedAttribute]
private void set_DefaultParentComponentContainer(IComponentContainer value);
    private sealed virtual override DictionaryEvents`2<ViewKey, Type> JetBrains.Application.UI.Automation.IAutomationViewsRegistry.get_RegisteredViews();
    private sealed virtual override void JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisterManually(Lifetime lifetime, Type typeAutomation, Type typeView, ViewKind viewkind);
    private sealed virtual override void JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisterManually(Lifetime lifetime, ViewKind viewkind);
}
[ObsoleteAttribute("Should not be in the viewmodel. But for now it's used on Rider side.")]
[ShellComponentAttribute]
public class JetBrains.Application.UI.Automation.DefaultWinFormsControlViews : object {
    protected IAutomationViewsRegistry AutomationViewsRegistry;
    public DefaultWinFormsControlViews(IAutomationViewsRegistry automationViewsRegistry);
    public virtual IViewModelPresenter CreateWinFormsView(Lifetime lifetime, IAutomation oAutomation);
}
public interface JetBrains.Application.UI.Automation.IAutomationViewsRegistry {
    public IComponentContainer DefaultParentComponentContainer { get; }
    [NotNullAttribute]
public DictionaryEvents`2<ViewKey, Type> RegisteredViews { get; }
    public abstract virtual IComponentContainer get_DefaultParentComponentContainer();
    public abstract virtual DictionaryEvents`2<ViewKey, Type> get_RegisteredViews();
    public abstract virtual void RegisterManually(Lifetime lifetime, Type typeAutomation, Type typeView, ViewKind viewkind);
    public abstract virtual void RegisterManually(Lifetime lifetime, ViewKind viewkind);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Automation.IAutomationViewsRegistryEx : object {
    [CanBeNullAttribute]
[ExtensionAttribute]
public static TRes TryCreateViewBy(IAutomationViewsRegistry thіs, Lifetime lifetime, IAutomation oAutomation, ViewKind kind, IComponentContainer containerForFactoring);
    [ExtensionAttribute]
[NotNullAttribute]
public static TRes CreateViewBy(IAutomationViewsRegistry thіs, Lifetime lifetime, IAutomation oAutomation, ViewKind kind, IComponentContainer containerForFactoring);
    [NotNullAttribute]
private static TRes CreateView(Lifetime lifetime, Type typeView, IComponentContainer containerForFactoring, IAutomation oAutomation);
    [CompilerGeneratedAttribute]
private static string <CreateViewBy>b__5(KeyValuePair`2<ViewKey, Type> pair);
}
public interface JetBrains.Application.UI.Automation.IView {
}
public interface JetBrains.Application.UI.Automation.IView`1 {
}
public interface JetBrains.Application.UI.Automation.IViewModelPresenter {
    public abstract virtual void ShowView();
}
[BaseTypeRequiredAttribute("JetBrains.Application.UI.Automation.IView`1")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.Automation.ViewAttribute : PartAttribute {
    public ViewKind Kind;
    public ViewAttribute(ViewKind kind);
}
public class JetBrains.Application.UI.Automation.ViewKey : ValueType {
    private Type myAutomationType;
    private ViewKind myViewKind;
    public Type AutomationType { get; }
    public ViewKind ViewKind { get; }
    public ViewKey(Type automationType, ViewKind viewKind);
    public Type get_AutomationType();
    public ViewKind get_ViewKind();
    public sealed virtual bool Equals(ViewKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ViewKey left, ViewKey right);
    public static bool op_Inequality(ViewKey left, ViewKey right);
    public virtual string ToString();
}
public enum JetBrains.Application.UI.Automation.ViewKind : Enum {
    public int value__;
    public static ViewKind Wpf;
    public static ViewKind WindowlessControl;
    public static ViewKind WinForms;
    public static ViewKind OutOfProcess;
    public static ViewKind Unattended;
}
public enum JetBrains.Application.UI.Automation.WindowModality : Enum {
    public int value__;
    public static WindowModality Nonmodal;
    public static WindowModality Modal;
    public static WindowModality ModalThisStack;
}
public static class JetBrains.Application.UI.Automation.WindowModalityDataConstants : object {
    public static DataConstant`1<Boxed`1<WindowModality>> ShowDialogModality;
    private static WindowModalityDataConstants();
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.Aggregator`2 : AggregatorBase`2<TSource, TResult> {
    protected Aggregator`2(IBindableView`1<TSource> sourceCollection);
    protected virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.AggregatorBase`2 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    private TResult myValue;
    private int mySuspendCount;
    [CompilerGeneratedAttribute]
private IBindableView`1<TSource> <SourceCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEvaluated>k__BackingField;
    protected IBindableView`1<TSource> SourceCollection { get; private set; }
    public bool IsDisposed { get; private set; }
    public bool IsEvaluated { get; private set; }
    public TResult Value { get; public set; }
    public bool IsSuspended { get; }
    protected AggregatorBase`2(IBindableView`1<TSource> sourceCollection);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected IBindableView`1<TSource> get_SourceCollection();
    [CompilerGeneratedAttribute]
private void set_SourceCollection(IBindableView`1<TSource> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEvaluated();
    [CompilerGeneratedAttribute]
private void set_IsEvaluated(bool value);
    public virtual TResult get_Value();
    public virtual void set_Value(TResult value);
    public sealed virtual void Evaluate();
    protected abstract virtual TResult EvaluateValue();
    protected abstract virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected abstract virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private void SubscribeToDependency(IDependencyDefinition definition);
    public virtual void Refresh();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual void Dispose();
    public virtual string ToString();
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    [CompilerGeneratedAttribute]
private void <SubscribeToDependency>b__1(object o);
    [CompilerGeneratedAttribute]
private void <SubscribeToDependency>b__2(object o, string _);
}
public static class JetBrains.Application.UI.BindableLinq.Aggregators.AverageAggregator`1 : object {
}
internal class JetBrains.Application.UI.BindableLinq.Aggregators.CountAggregator`1 : Aggregator`2<TElement, int> {
    public CountAggregator`1(IBindableView`1<TElement> sourceCollection);
    protected virtual int EvaluateValue();
}
internal class JetBrains.Application.UI.BindableLinq.Aggregators.CustomAggregator`2 : Aggregator`2<TSource, TResult> {
    private Func`1<TResult> mySeedGetter;
    private Func`3<TResult, TSource, TResult> myAggregator;
    public CustomAggregator`2(IBindableView`1<TSource> sourceCollection, Func`1<TResult> seed, Func`3<TResult, TSource, TResult> aggregator);
    public CustomAggregator`2(IBindableView`1<TSource> sourceCollection, TResult seed, Func`3<TResult, TSource, TResult> aggregator);
    protected virtual TResult EvaluateValue();
}
internal class JetBrains.Application.UI.BindableLinq.Aggregators.ElementAtAggregator`1 : Aggregator`2<TElement, TElement> {
    private int myIndex;
    public ElementAtAggregator`1(IBindableView`1<TElement> source, int index);
    protected virtual TElement EvaluateValue();
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingAggregator`2 : Aggregator`2<TSource, TResult> {
    [NotNullAttribute]
private IFreeThreadedThrottlingGroupingEvent myRefreshEvent;
    protected FreeThreadedThrottlingAggregator`2(IBindableView`1<TSource> sourceCollection, IFreeThreadedThrottlingGroupingEvent refreshEvent);
    public virtual void Refresh();
    public sealed virtual void RefreshCore();
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingAggregatorWithDefaultValue`2 : FreeThreadedThrottlingAggregator`2<TSource, TResult> {
    public TResult Value { get; public set; }
    protected TResult DefaultValue { get; }
    protected FreeThreadedThrottlingAggregatorWithDefaultValue`2(IBindableView`1<TSource> sourceCollection, IFreeThreadedThrottlingGroupingEvent refreshEvent);
    public virtual TResult get_Value();
    public virtual void set_Value(TResult value);
    protected virtual TResult get_DefaultValue();
}
public class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingGroupingEvent : FreeThreadedGroupingEvent {
    private ISync myLock;
    private OrderedHashSet`1<IFreeThreadedThrottlingAggregator> myAggregators;
    private object myAggregatorsSync;
    public bool IsBusy { get; }
    public FreeThreadedThrottlingGroupingEvent(Lifetime lifetime, ITaskHost taskHost, GroupingEventProlongation prolongation, TimeSpan waitTime, ISync lock);
    public sealed virtual bool get_IsBusy();
    public sealed virtual void FireIncoming(IFreeThreadedThrottlingAggregator aggregator);
    private void RefreshAggregators();
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingGroupingEventFactory : object {
    private IThreading myThreading;
    public FreeThreadedThrottlingGroupingEventFactory(IThreading threading);
    public sealed virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, GroupingEventProlongation prolongation, TimeSpan waitTime, ISync lock);
    public sealed virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, ISync lock);
}
public interface JetBrains.Application.UI.BindableLinq.Aggregators.IFreeThreadedThrottlingAggregator {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void RefreshCore();
}
public interface JetBrains.Application.UI.BindableLinq.Aggregators.IFreeThreadedThrottlingGroupingEvent {
    public bool IsBusy { get; }
    public abstract virtual bool get_IsBusy();
    public abstract virtual void FireIncoming(IFreeThreadedThrottlingAggregator aggregator);
}
public interface JetBrains.Application.UI.BindableLinq.Aggregators.IFreeThreadedThrottlingGroupingEventFactory {
    public abstract virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, GroupingEventProlongation prolongation, TimeSpan waitTime, ISync lock);
    public abstract virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, ISync lock);
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.OptimizableAggregator`2 : AggregatorBase`2<TSource, TResult> {
    protected OptimizableAggregator`2(IBindableView`1<TSource> sourceCollection);
    protected virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected abstract virtual void ReactToAdd(int index, TSource item);
    protected abstract virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected abstract virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected abstract virtual void ReactToRemove(int index, TSource removedItem);
    protected abstract virtual void ReactToReset();
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.OptimizedAggregator`3 : OptimizableAggregator`2<TSource, TResult> {
    private Func`2<TSource, TInterim> myValueSelector;
    private Func`3<TResult, TInterim, TResult> myAddOperation;
    private Func`3<TResult, TInterim, TResult> mySubOperation;
    private Func`1<TResult> mySeedGetter;
    protected OptimizedAggregator`3(IBindableView`1<TSource> sourceCollection, Func`1<TResult> seed, Func`2<TSource, TInterim> valueSelector, Func`3<TResult, TInterim, TResult> addOperation, Func`3<TResult, TInterim, TResult> subOperation);
    protected virtual TResult EvaluateValue();
    protected virtual void ReactToAdd(int index, TSource item);
    protected virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected virtual void ReactToRemove(int index, TSource removedItem);
    protected virtual void ReactToReset();
}
public static class JetBrains.Application.UI.BindableLinq.Aggregators.SumAggregator`1 : object {
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.ThrottlingAggregator`2 : Aggregator`2<TSource, TResult> {
    private GroupingEvent myRefreshEvent;
    private LifetimeDefinition myLifetime;
    protected ThrottlingAggregator`2(Lifetime lifetime, IBindableView`1<TSource> sourceCollection, GroupingEventHosts hosts, TimeSpan updateInternal, Rgc guarding);
    public virtual void Dispose();
    public virtual void Refresh();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
}
public class JetBrains.Application.UI.BindableLinq.Aggregators.ThrottlingSumAggregator`1 : ThrottlingAggregator`2<TSource, int> {
    [NotNullAttribute]
private Func`2<TSource, int> myValueSelector;
    [NotNullAttribute]
private Func`1<bool> myCheckingValidator;
    public ThrottlingSumAggregator`1(Lifetime lifetime, IBindableView`1<TSource> sourceCollection, Func`2<TSource, int> valueSelector, Func`1<bool> checkingValidator, GroupingEventHosts hosts, TimeSpan updateInternal, Rgc guarding);
    protected virtual int EvaluateValue();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.BindableCollection`1 : BindableCollectionBase`1<T> {
    private List`1<T> myItems;
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public T Item { get; public set; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public BindableCollection`1(IEnumerable`1<T> items);
    public BindableCollection`1(ISync readLock);
    public BindableCollection`1(IEnumerable`1<T> items, ISync readLock, ISync writeLock);
    private BindableCollection`1(List`1<T> items, ISync readLock, ISync writeLock);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(T item);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    public sealed virtual bool Contains(T item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int index);
    protected void CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    public sealed virtual void Add(T item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual void Insert(int index, T item);
    public void Replace(int index, T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public virtual string ToString();
}
public abstract class JetBrains.Application.UI.BindableLinq.Collections.BindableCollectionBase`1 : object {
    private NotifyCollectionChangedEventHandler CollectionChanged;
    private PropertyChangedEventHandler PropertyChanged;
    private IEnumerable`1<T> myItems;
    private SimpleMonitor<T> myMonitor;
    private ISync myReadLock;
    private ISync myWriteLock;
    public ISync Lock { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    protected BindableCollectionBase`1(IEnumerable`1<T> items, ISync readLock, ISync writeLock);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual ISync get_Lock();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumeratorUnsafe();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    public virtual void Dispose();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected IDisposable BlockReentrancy();
    protected SyncLockCookie ReadLock();
    protected void AssertWriteLockAcquired();
    protected virtual IDisposable WriteLock();
    protected virtual void CheckReentrancy();
}
public class JetBrains.Application.UI.BindableLinq.Collections.BindableHashSet`1 : JetHashSet`1<TElement> {
    private NotifyCollectionChangedEventHandler CollectionChanged;
    private PropertyChangedEventHandler PropertyChanged;
    private SimpleMonitor<TElement> myMonitor;
    private List`1<TElement> myList;
    private ISync myReadLock;
    private ISync myWriteLock;
    [CompilerGeneratedAttribute]
private static Func`2<BindableHashSet`1<TElement>, IEnumerator`1<TElement>> CS$<>9__CachedAnonymousMethodDelegate1;
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public ISync Lock { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    private TElement JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<TElement>.Item { get; }
    public BindableHashSet`1(IEqualityComparer`1<TElement> comparer);
    public BindableHashSet`1(IEqualityComparer`1<TElement> comparer, ISync readLock);
    public BindableHashSet`1(ISync readLock);
    public BindableHashSet`1(ISync readLock, ISync writeLock);
    public BindableHashSet`1(IEnumerable`1<TElement> items);
    public BindableHashSet`1(IEnumerable`1<TElement> items, ISync readLock);
    public BindableHashSet`1(IEnumerable`1<TElement> items, ISync readLock, ISync writeLock);
    public BindableHashSet`1(IEnumerable`1<TElement> items, IEqualityComparer`1<TElement> comparer, ISync readLock, ISync writeLock);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual ISync get_Lock();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator`1<TElement> GetEnumerator();
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
    public virtual bool Add(TElement element);
    public virtual bool Remove(TElement element);
    public virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<TElement> items);
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    private SyncLockCookie WriteLock();
    private SyncLockCookie ReadLock();
    protected IDisposable BlockReentrancy();
    protected void CheckReentrancy();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override TElement JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<TElement>.get_Item(int index);
    public sealed virtual int IndexOf(object item);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    [CompilerGeneratedAttribute]
private static IEnumerator`1<TElement> <GetEnumerator>b__0(BindableHashSet`1<TElement> x);
    [CompilerGeneratedAttribute]
private bool <>n__FabricatedMethod4(TElement );
    [CompilerGeneratedAttribute]
private bool <Reset>b__2(TElement item);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.BindableSetCollectionWithoutIndexTracking`1 : BindableCollectionBase`1<T> {
    private HashSet`1<T> myItems;
    public IBindableView RootView { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public T Item { get; }
    public BindableSetCollectionWithoutIndexTracking`1(ISync readLock);
    public BindableSetCollectionWithoutIndexTracking`1(IEnumerable`1<T> items, ISync readLock);
    public BindableSetCollectionWithoutIndexTracking`1(ISync readLock, IEqualityComparer`1<T> equalityComparer);
    public BindableSetCollectionWithoutIndexTracking`1(IEnumerable`1<T> items, ISync readLock, ISync writeLock, IEqualityComparer`1<T> equalityComparer);
    private BindableSetCollectionWithoutIndexTracking`1(HashSet`1<T> items, ISync readLock, ISync writeLock);
    public sealed virtual IBindableView get_RootView();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    public sealed virtual void Add(T item);
    public void AddRange(IEnumerable`1<T> items);
    public sealed virtual bool Remove(T item);
    public void RemoveRange(IEnumerable`1<T> items);
    public sealed virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual T get_Item(int index);
    [CompilerGeneratedAttribute]
private bool <Reset>b__1(T i);
}
public class JetBrains.Application.UI.BindableLinq.Collections.EmptyBindableCollection`1 : EmptyList`1<TElement> {
    public static EmptyBindableCollection`1<TElement> Instance;
    private ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    private static EmptyBindableCollection`1();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.IndexOf(object item);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    private sealed virtual override ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual void Reset(IEnumerable`1<TElement> items);
    public void Replace(int index, TElement item);
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
}
public class JetBrains.Application.UI.BindableLinq.Collections.FakeBindableList`1 : List`1<TElement> {
    private ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    public FakeBindableList`1(IEnumerable`1<TElement> items);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.IndexOf(object item);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    private sealed virtual override ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual void Reset(IEnumerable`1<TElement> items);
    public void Replace(int index, TElement item);
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
}
public static class JetBrains.Application.UI.BindableLinq.Collections.LazyLockingEnumerator : object {
    public static IEnumerator`1<E> FromEnumerable(IEnumerable`1<E> enumerable, ISync lock);
    public static IEnumerator`1<E> FromCustomType(C items, Func`2<C, IEnumerator`1<E>> enumeratorExtracter, ISync lock);
    private static IEnumerator`1<E> EnumeratorExtracter(C arg);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.ReadOnlyBindableCollectionProxy`1 : object {
    [NotNullAttribute]
private IBindableView`1<T> myInner;
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    public IBindableView RootView { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; }
    public ReadOnlyBindableCollectionProxy`1(IBindableView`1<T> inner);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual ISync get_Lock();
    public sealed virtual IBindableView get_RootView();
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual T get_Item(int index);
    public sealed virtual IEnumerator`1<T> GetEnumeratorUnsafe();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.SortedBindableCollection`1 : BindableCollectionBase`1<T> {
    private List`1<T> myItems;
    private IComparer`1<T> myComparer;
    public IBindableView RootView { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public T Item { get; }
    public SortedBindableCollection`1(IComparer`1<T> comparer);
    public SortedBindableCollection`1(IEnumerable`1<T> items, IComparer`1<T> comparer);
    public SortedBindableCollection`1(IEnumerable`1<T> items, IComparer`1<T> comparer, ISync readLock, ISync writeLock);
    private SortedBindableCollection`1(List`1<T> items, IComparer`1<T> comparer, ISync readLock, ISync writeLock);
    public sealed virtual IBindableView get_RootView();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private int BinarySearch(T item);
    public sealed virtual void Add(T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual T get_Item(int index);
}
public class JetBrains.Application.UI.BindableLinq.Collections.SyncLockCookie : ValueType {
    private ISync myLock;
    public SyncLockCookie(ISync lock);
    public sealed virtual void Dispose();
}
public static class JetBrains.Application.UI.BindableLinq.CommonEventArgsCache : object {
    public static NotifyCollectionChangedEventArgs Reset;
    public static PropertyChangedEventArgs Count;
    public static PropertyChangedEventArgs Item;
    public static PropertyChangedEventArgs Value;
    public static PropertyChangedEventArgs Children;
    public static PropertyChangedEventArgs IsEvaluated;
    private static CommonEventArgsCache();
}
public static class JetBrains.Application.UI.BindableLinq.Configuration.BindingConfigurations : object {
    private static IBindingConfiguration ourDefault;
    private static IBindingConfiguration ourExplicitDependenciesOnly;
    public static IBindingConfiguration Default { get; }
    public static IBindingConfiguration ExplicitDependenciesOnly { get; }
    private static BindingConfigurations();
    public static IBindingConfiguration get_Default();
    public static IBindingConfiguration get_ExplicitDependenciesOnly();
}
internal class JetBrains.Application.UI.BindableLinq.Configuration.DefaultBindingConfiguration : object {
    private IExpressionAnalyzer myExpressionAnalyzer;
    private IPathNavigator myPathNavigator;
    public sealed virtual IExpressionAnalyzer CreateExpressionAnalyzer();
    public sealed virtual IPathNavigator CreatePathNavigator();
}
internal class JetBrains.Application.UI.BindableLinq.Configuration.ExplicitBindingConfiguration : object {
    private IExpressionAnalyzer myExpressionAnalyzer;
    private IPathNavigator myPathNavigator;
    public sealed virtual IExpressionAnalyzer CreateExpressionAnalyzer();
    public sealed virtual IPathNavigator CreatePathNavigator();
}
public interface JetBrains.Application.UI.BindableLinq.Configuration.IBindingConfiguration {
    public abstract virtual IExpressionAnalyzer CreateExpressionAnalyzer();
    public abstract virtual IPathNavigator CreatePathNavigator();
}
public static class JetBrains.Application.UI.BindableLinq.DataFlow.Bindable : object {
    [NotNullAttribute]
public static IBindable`1<TResult> QuickFrom(Func`1<TResult> valueProvider);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.DataFlow.BindableExtensions : object {
    [ExtensionAttribute]
public static void FlowInto(IBindable`1<T> source, Lifetime lifetime, IProperty`1<T> target);
    [ExtensionAttribute]
public static void FlowInto(IBindable`1<T> source, Lifetime lifetime, IBindable`1<T> target);
    [ExtensionAttribute]
public static void FlowInto(IBindable`1<TSource> source, Lifetime lifetime, IProperty`1<TResult> target, Func`2<TSource, TResult> converter);
    [ExtensionAttribute]
public static void FlowInto(IProperty`1<T> source, Lifetime lifetime, IBindable`1<T> target);
    [NotNullAttribute]
[ExtensionAttribute]
public static IProperty`1<T> ToProperty(IBindable`1<T> bindable, Lifetime lifetime);
}
public class JetBrains.Application.UI.BindableLinq.DataFlow.MultiBindingValue`2 : object {
    private Func`2<IBindable`1[], TOut> myOutput;
    [NotNullAttribute]
private IBindable`1[] myBindables;
    private object myLock;
    private TOut myValue;
    private int mySuspendCount;
    protected bool IsDisposed;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private bool <IsEvaluated>k__BackingField;
    public bool IsEvaluated { get; private set; }
    public bool IsSuspended { get; }
    public TOut Value { get; public set; }
    public MultiBindingValue`2(Func`2<IBindable`1[], TOut> output, IBindable`1<TItem> item1, IBindable`1<TItem> item2, IBindable`1[] itemn);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void Dispose();
    public virtual void AcceptDependency(IDependencyDefinition definition);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEvaluated();
    [CompilerGeneratedAttribute]
private void set_IsEvaluated(bool value);
    public virtual void Evaluate();
    protected virtual void ReactToPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    public virtual void Refresh();
    protected virtual TOut EvaluateValue();
    public sealed virtual TOut get_Value();
    public sealed virtual void set_Value(TOut value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <Evaluate>b__1(IBindable`1<TItem> i);
}
public class JetBrains.Application.UI.BindableLinq.DataFlow.ThrottlingMultiBindingValue`2 : MultiBindingValue`2<TItem, TOut> {
    private LifetimeDefinition myLifetime;
    private IGroupingEvent myRefreshEvent;
    public ThrottlingMultiBindingValue`2(Lifetime lifetime, IGroupingEventFactory groupingEventFactory, Func`2<IBindable`1[], TOut> output, IBindable`1<TItem> item1, IBindable`1<TItem> item2, IBindable`1[] itemn);
    protected virtual void ReactToPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    public virtual void Dispose();
    public virtual void Refresh();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Application.UI.BindableLinq.DataFlow.VolatileValueProvider`1 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private Func`1<TValue> myValueProvider;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    private TValue myValue;
    private int mySuspendCount;
    [CompilerGeneratedAttribute]
private bool <IsEvaluated>k__BackingField;
    public bool IsEvaluated { get; private set; }
    public TValue Value { get; public set; }
    public bool IsSuspended { get; }
    public VolatileValueProvider`1(Func`1<TValue> valueProvider);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEvaluated();
    [CompilerGeneratedAttribute]
private void set_IsEvaluated(bool value);
    public sealed virtual TValue get_Value();
    public sealed virtual void set_Value(TValue value);
    public sealed virtual void Evaluate();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private void Refresh();
    public sealed virtual void Dispose();
    private void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual string ToString();
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    [CompilerGeneratedAttribute]
private void <AcceptDependency>b__1(object o);
    [CompilerGeneratedAttribute]
private void <AcceptDependency>b__2(object o, string _);
}
internal class JetBrains.Application.UI.BindableLinq.DefaultComparer`1 : object {
    public sealed virtual int Compare(TCompared left, TCompared right);
    public sealed virtual bool Equals(TCompared x, TCompared y);
    public sealed virtual int GetHashCode(TCompared obj);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Definitions.ExternalDependencyDefinition : object {
    [CompilerGeneratedAttribute]
private string <PropertyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    public string PropertyPath { get; public set; }
    public object TargetObject { get; public set; }
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public ExternalDependencyDefinition(string propertyPath, object targetObject);
    [CompilerGeneratedAttribute]
public string get_PropertyPath();
    [CompilerGeneratedAttribute]
public void set_PropertyPath(string value);
    [CompilerGeneratedAttribute]
public object get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(object value);
    public sealed virtual bool get_AppliesToCollections();
    public sealed virtual bool get_AppliesToSingleElement();
    public sealed virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public sealed virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
    public virtual string ToString();
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Definitions.ItemDependencyDefinition : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyPath>k__BackingField;
    [CanBeNullAttribute]
public string ParameterName { get; public set; }
    public string PropertyPath { get; public set; }
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public ItemDependencyDefinition(string propertyPath);
    public ItemDependencyDefinition(string propertyPath, string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyPath();
    [CompilerGeneratedAttribute]
public void set_PropertyPath(string value);
    public sealed virtual bool get_AppliesToCollections();
    public sealed virtual bool get_AppliesToSingleElement();
    public sealed virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public sealed virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
    public virtual string ToString();
}
public static class JetBrains.Application.UI.BindableLinq.Dependencies.Dependency : object {
    [NotNullAttribute]
public static IDependencyDefinition FromProperty(IProperty`1<TValue> property);
    [NotNullAttribute]
public static IDependencyDefinition FromBindable(IBindable`1<TValue> bindable);
    [NotNullAttribute]
public static IDependencyDefinition FromSignal(ISignal`1<TValue> signal);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.Dependencies.DependencyExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDependency SetElementCallback(IDependency dependency, Action`2<object, string> action);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDependency SetCallback(IDependency dependency, Action`1<object> action);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.ExpressionAnalyzer : object {
    private static IEqualityComparer`1<IDependencyDefinition> ourComparer;
    private IDependencyExtractor[] myExtractors;
    public ExpressionAnalyzer(IDependencyExtractor[] extractors);
    private static ExpressionAnalyzer();
    public sealed virtual IEnumerable`1<IDependencyDefinition> DiscoverDependencies(Expression expression, ParameterExpression itemParameter);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.ExpressionFlattener : object {
    private List`1<Expression> myExpressions;
    private ExpressionType[] myStopAt;
    [CompilerGeneratedAttribute]
private static Func`2<ElementInit, IEnumerable`1<Expression>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, Expression> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, IEnumerable`1<IEnumerable`1<Expression>>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<MemberBinding, IEnumerable`1<Expression>> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<ElementInit, IEnumerable`1<Expression>> CS$<>9__CachedAnonymousMethodDelegatef;
    public IEnumerable`1<Expression> Expressions { get; }
    public ExpressionFlattener(Expression expression, ExpressionType[] stopAt);
    public IEnumerable`1<Expression> get_Expressions();
    private void TraverseExpressions(IEnumerable expressions);
    private void TraverseExpression(Expression expression);
    private void TraverseBinaryExpression(BinaryExpression binaryExpression);
    private void TraverseConditionalExpression(ConditionalExpression conditionalExpression);
    private void TraverseConstantExpression(ConstantExpression constantExpression);
    private void TraverseInvocationExpression(InvocationExpression invocationExpression);
    private void TraverseLambdaExpression(LambdaExpression lambdaExpression);
    private void TraverseListInitExpression(ListInitExpression listInitExpression);
    private void TraverseMemberExpression(MemberExpression memberExpression);
    private void TraverseMemberInitExpression(MemberInitExpression memberInitExpression);
    private void TraverseMethodCallExpression(MethodCallExpression methodCallExpression);
    private void TraverseNewArrayExpression(NewArrayExpression newArrayExpression);
    private void TraverseNewExpression(NewExpression newExpression);
    private void TraverseParameterExpression(ParameterExpression parameterExpression);
    private void TraverseTypeBinaryExpression(TypeBinaryExpression typeBinaryExpression);
    private void TraverseUnaryExpression(UnaryExpression unaryExpression);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Expression> <TraverseListInitExpression>b__0(ElementInit i);
    [CompilerGeneratedAttribute]
private static bool <TraverseMemberInitExpression>b__2(MemberBinding b);
    [CompilerGeneratedAttribute]
private static Expression <TraverseMemberInitExpression>b__3(MemberBinding b);
    [CompilerGeneratedAttribute]
private static bool <TraverseMemberInitExpression>b__4(MemberBinding b);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IEnumerable`1<Expression>> <TraverseMemberInitExpression>b__5(MemberBinding b);
    [CompilerGeneratedAttribute]
private static bool <TraverseMemberInitExpression>b__7(MemberBinding b);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Expression> <TraverseMemberInitExpression>b__8(MemberBinding b);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<Expression> <TraverseMemberInitExpression>b__6(ElementInit i);
}
internal abstract class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.DependencyExtractor : object {
    public sealed virtual IEnumerable`1<IDependencyDefinition> Extract(Expression expression);
    protected abstract virtual IDependencyDefinition ExtractFromRoot(Expression rootExpression, string propertyPath);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.ExternalDependencyExtractor : DependencyExtractor {
    protected virtual IDependencyDefinition ExtractFromRoot(Expression rootExpression, string propertyPath);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.IDependencyExtractor {
    public abstract virtual IEnumerable`1<IDependencyDefinition> Extract(Expression expression);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.ItemDependencyExtractor : DependencyExtractor {
    protected virtual IDependencyDefinition ExtractFromRoot(Expression rootExpression, string propertyPath);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.IExpressionAnalyzer {
    public abstract virtual IEnumerable`1<IDependencyDefinition> DiscoverDependencies(Expression expression, ParameterExpression itemParameter);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies {
    public abstract virtual void AcceptDependency(IDependencyDefinition definition);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.IDependency {
    public abstract virtual void SetReevaluateElementCallback(Action`2<object, string> action);
    public abstract virtual void SetReevaluateCallback(Action`1<object> action);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition {
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public abstract virtual bool get_AppliesToCollections();
    public abstract virtual bool get_AppliesToSingleElement();
    public abstract virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public abstract virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
}
public static class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.Actioner : object {
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, Action handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, Action`1<string> handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(T item, Expression`1<Func`2<T, TProperty>> reference, Action handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(T item, Expression`1<Func`2<T, TProperty>> reference, Action`1<string> handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, string propertyName, Action handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, string propertyName, Action`1<string> handler, bool executeImmediately);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ElementActioner`1 : ElementActionerBase`1<TElement> {
    private Action`1<TElement> myAddAction;
    private Action`1<TElement> myRemoveAction;
    private static ConstructorInfo ourElementActionerCtor;
    private ElementActioner`1(IBindableView`1<TElement> collection, Action`1<TElement> addAction, Action`1<TElement> removeAction, bool handleRemoveOnDispose);
    private static ElementActioner`1();
    public static ElementActioner`1<TElement> Create(IBindableView`1<TElement> collection, Action`1<TElement> addAction, Action`1<TElement> removeAction, bool handleRemoveOnDispose, bool handleAddOnInit);
    public static ElementActioner`1<TElement> CreateUninitializedObject(IBindableView`1<TElement> collection, Action`1<TElement> addAction, Action`1<TElement> removeAction, bool handleRemoveOnDispose, bool handleAddOnInit);
    protected virtual void HandleAdd(IEnumerable newItems);
    protected virtual void HandleRemove(IEnumerable oldItems);
}
public abstract class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ElementActionerBase`1 : object {
    private IBindableView`1<TElement> myCollection;
    private bool myHandleRemoveOnDispose;
    private int myIsDisposed;
    protected ElementActionerBase`1(IBindableView`1<TElement> collection, bool handleRemoveOnDispose);
    protected abstract virtual void HandleAdd(IEnumerable newItems);
    protected abstract virtual void HandleRemove(IEnumerable oldItems);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ElementCollectionActioner`1 : ElementActionerBase`1<TElement> {
    private Action`1<IEnumerable`1<TElement>> myAddAction;
    private Action`1<IEnumerable`1<TElement>> myRemoveAction;
    private ElementCollectionActioner`1(IBindableView`1<TElement> collection, Action`1<IEnumerable`1<TElement>> addAction, Action`1<IEnumerable`1<TElement>> removeAction, bool handleRemoveOnDispose);
    public static ElementCollectionActioner`1<TElement> Create(IBindableView`1<TElement> collection, Action`1<IEnumerable`1<TElement>> addAction, Action`1<IEnumerable`1<TElement>> removeAction, bool handleRemoveOnDispose, bool handleAddOnInit);
    protected virtual void HandleAdd(IEnumerable newItems);
    protected virtual void HandleRemove(IEnumerable oldItems);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ExternalDependency : object {
    private IToken myRootMonitor;
    private Action`1<object> myElementChangedCallback;
    public ExternalDependency(object targetObject, string propertyPath, IPathNavigator pathNavigator);
    public sealed virtual void SetReevaluateElementCallback(Action`2<object, string> action);
    public sealed virtual void SetReevaluateCallback(Action`1<object> action);
    public sealed virtual void Dispose();
    private void Element_PropertyChanged(object element, string propertyPath);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ItemActioner`1 : object {
    private ElementActioner`1<T> myInner;
    private Action`1<T> myOnAdded;
    private Action`2<T, string> myOnChanged;
    private Action`1<T> myOnRemoved;
    private void OnItemAdded(T item);
    private void OnItemRemoved(T item);
    private void OnItemChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual void Dispose();
    public IDisposable ForCollection(IBindableView`1<T> collection, bool addOnInit, bool removeOnDispose);
    public ItemActioner`1<T> OnItemAdded(Action action);
    public ItemActioner`1<T> OnItemAdded(Action`1<T> action);
    public ItemActioner`1<T> OnItemRemoved(Action action);
    public ItemActioner`1<T> OnItemRemoved(Action`1<T> action);
    public ItemActioner`1<T> OnItemChanged(Action action, string property);
    public ItemActioner`1<T> OnItemChanged(Action`1<T> action, string property);
    public ItemActioner`1<T> OnItemChanged(Action`2<T, string> action, string property);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ItemDependency`1 : object {
    private ElementActioner`1<TElement> myActioner;
    private object mySyncRoot;
    private IPathNavigator myPathNavigator;
    private string myPropertyPath;
    private Dictionary`2<TElement, IToken> mySourceElementObservers;
    private Action`2<object, string> myReevaluateElementCallback;
    public ItemDependency`1(string propertyPath, IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    private void AddItem(TElement addedItem);
    private void RemoveItem(TElement removedItem);
    private void Element_PropertyChanged(object element, string propertyPath);
    public sealed virtual void SetReevaluateElementCallback(Action`2<object, string> action);
    public sealed virtual void SetReevaluateCallback(Action`1<object> action);
    public sealed virtual void Dispose();
}
public static class JetBrains.Application.UI.BindableLinq.Dependencies.ItemDependency : object {
    public static IDependencyDefinition FromProperty(Expression`1<Func`2<T, object>> reference);
    public static IDependencyDefinition FromBindable(Expression`1<Func`2<T, IBindable>> reference);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPathNavigator {
    public abstract virtual IToken TraverseNext(object target, string propertyPath, Action`2<object, string> callback);
}
internal interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPropertyReader`1 {
    public abstract virtual TCast GetValue(object input);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.PathNavigator : object {
    private ITokenFactory[] myTraversers;
    public PathNavigator(ITokenFactory[] traversers);
    public sealed virtual IToken TraverseNext(object target, string propertyPath, Action`2<object, string> callback);
}
internal static class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.PropertyReaderFactory : object {
    private static Dictionary`2<string, object> ourReaders;
    private static PropertyReaderFactory();
    public static IPropertyReader`1<TCast> Create(Type objectType, string propertyName);
    private static object CreateReader(Type objectType, string propertyName, string key);
    private static object TryCreateFieldReader(Type objectType, string propertyName, string key);
    private static object TryCreatePropertyReader(Type objectType, string propertyName, string key);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.ClrMemberTokenFactory : object {
    public sealed virtual IToken ParseNext(object target, string propertyPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.ITokenFactory {
    public abstract virtual IToken ParseNext(object target, string propertyPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.WpfMemberTokenFactory : object {
    public sealed virtual IToken ParseNext(object target, string propertyPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.ClrMemberToken : MemberToken {
    private EventHandler`1<PropertyChangedEventArgs> myActualHandler;
    private WeakEventProxy`1<PropertyChangedEventArgs> myWeakHandler;
    private PropertyChangedEventHandler myWeakHandlerWrapper;
    private IPropertyReader`1<object> myPropertyReader;
    public ClrMemberToken(object objectToObserve, string propertyName, string remainingPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
    protected virtual void DiscardCurrentTargetOverride();
    protected virtual void MonitorCurrentTargetOverride();
    protected virtual object ReadCurrentPropertyValueOverride();
    private void CurrentTarget_PropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void DisposeOverride();
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.IToken {
    public IToken NextToken { get; }
    public abstract virtual IToken get_NextToken();
    public abstract virtual void AcquireTarget(object target);
}
internal abstract class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken : object {
    private Action`2<object, string> myChangeDetectedCallback;
    private IPathNavigator myPathNavigator;
    private object myPropertyMonitorLock;
    private string myPropertyName;
    private string myRemainingPath;
    private object myCurrentTarget;
    private IToken myNextMonitor;
    public string RemainingPath { get; }
    public string PropertyName { get; }
    protected object CurrentTarget { get; }
    protected object PropertyMonitorLock { get; }
    protected IPathNavigator PathNavigator { get; }
    public IToken NextToken { get; private set; }
    protected MemberToken(string propertyName, string remainingPath, Action`2<object, string> changeDetectedCallback, IPathNavigator traverser);
    public string get_RemainingPath();
    public string get_PropertyName();
    protected object get_CurrentTarget();
    protected object get_PropertyMonitorLock();
    protected IPathNavigator get_PathNavigator();
    public sealed virtual IToken get_NextToken();
    private void set_NextToken(IToken value);
    public sealed virtual void AcquireTarget(object target);
    public sealed virtual void Dispose();
    protected abstract virtual void DiscardCurrentTargetOverride();
    protected abstract virtual void MonitorCurrentTargetOverride();
    protected abstract virtual object ReadCurrentPropertyValueOverride();
    private void NextMonitor_ChangeDetected(object changedObject, string propertyName);
    protected void HandleCurrentTargetPropertyValueChanged();
    private void ChangeDetected(string propertyName);
    protected abstract virtual void DisposeOverride();
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.WpfMemberToken : MemberToken {
    private DependencyProperty myDependencyProperty;
    public WpfMemberToken(DependencyObject objectToObserve, DependencyProperty dependencyProperty, string propertyName, string remainingPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
    protected virtual void DiscardCurrentTargetOverride();
    protected virtual void MonitorCurrentTargetOverride();
    protected virtual object ReadCurrentPropertyValueOverride();
    public void CurrentTarget_PropertyChanged(object sender, EventArgs e);
    protected virtual void DisposeOverride();
}
public enum JetBrains.Application.UI.BindableLinq.DependencyDiscovery : Enum {
    public int value__;
    public static DependencyDiscovery Enabled;
    public static DependencyDiscovery Disabled;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.Extensions.BindableEnumerable : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<double> Average(IBindableView`1<TSource> source, Func`2<TSource, double> valueSelector);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TSource> ForEach(IBindableView`1<TSource> source, Action`1<TSource> evaluateOnEachItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, TResult seed, Expression`1<Func`3<TResult, TSource, TResult>> func);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`1<TResult>> seed, Expression`1<Func`3<TResult, TSource, TResult>> func);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<TSource> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, TResult seed, Expression`1<Func`3<TResult, TSource, TResult>> func, DependencyDiscovery dependencyAnalysisMode);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`1<TResult>> seed, Expression`1<Func`3<TResult, TSource, TResult>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> QuickAggregate(IBindableView`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<TResult> QuickAggregate(IBindableView`1<TSource> source, TResult seed, Func`3<TResult, TSource, TResult> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> QuickAggregate(IBindableView`1<TSource> source, Func`1<TResult> seed, Func`3<TResult, TSource, TResult> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> Count(IBindableView`1<TSource> source);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<int> Count(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<TSource> ElementAtOrDefault(IBindableView`1<TSource> source, int index);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> FirstOrDefault(IBindableView`1<TSource> source);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<TSource> FirstOrDefault(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<int> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, int>> func);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<int> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, int>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TimeSpan> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TimeSpan>> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TimeSpan> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TimeSpan>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> QuickSum(IBindableView`1<TSource> source, Func`2<TSource, int> func);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindable`1<TimeSpan> QuickSum(IBindableView`1<TSource> source, Func`2<TSource, TimeSpan> func);
    [ExtensionAttribute]
public static TResult DependsOn(TResult query, Expression`1<Func`2<TElement, TProperty>> expression);
    [NotNullAttribute]
[ExtensionAttribute]
public static TResult DependsOn(TResult query, Expression expression, ParameterExpression itemParameter);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, object externalObject, string propertyPath);
    [NotNullAttribute]
[ExtensionAttribute]
public static TResult DependsOn(TResult query, DependencyObject dependencyObject, DependencyProperty dependencyProperty);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, string propertyPath);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, IDependencyDefinition definition);
    [NotNullAttribute]
[ExtensionAttribute]
public static TResult DependsOn(TResult query, IEnumerable`1<IDependencyDefinition> definitions);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TResult> Cast(IBindableView`1<TSource> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, DependencyDiscovery dependencyAnalysisMode);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Into(IBindableView`1<IBindableGrouping`2<TKey, TElement>> source, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [NotNullAttribute]
[ExtensionAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, DependencyDiscovery dependencyAnalysisMode);
    [NotNullAttribute]
[ExtensionAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [NotNullAttribute]
[ExtensionAttribute]
public static IOrderedBindableView`1<TSource> QuickOrderBy(IBindableView`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> QuickOrderByWhere(IBindableView`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Select(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Select(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, DependencyDiscovery dependencyAnalysisMode);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TSource> Skip(IBindableView`1<TSource> source, int count);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TSource> Where(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TSource> Where(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> QuickWhere(IBindableView`1<TSource> source, Func`2<TSource, bool> predicate);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableView`1<TSource> QuickWhereWithoutIndexTracking(IBindableView`1<TSource> source, Func`2<TSource, bool> predicate);
    [CompilerGeneratedAttribute]
private static TResult <DependsOn>b__0(TResult q, IDependencyDefinition x);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.Extensions.Extensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> GetRef(IBindableView`1<TSource> source);
    [NotNullAttribute]
[ExtensionAttribute]
public static T WithLifetime(T source, Lifetime lifetime);
    [ExtensionAttribute]
public static int IndexOf(IBindableView`1<T> list, T item, IEqualityComparer`1<T> comparer, int startSearchFromElement, int howManyElementsToSearch);
    [NotNullAttribute]
[ExtensionAttribute]
public static IBindableCollection`1<T> AsReadOnlyCollection(IBindableView`1<T> view);
}
internal class JetBrains.Application.UI.BindableLinq.Helpers.Weak : object {
    public static WeakEvent`1<TEventArgs> Event(EventHandler`1<TEventArgs> eventHandler);
}
internal class JetBrains.Application.UI.BindableLinq.Helpers.WeakEvent`1 : object {
    private EventHandler`1<TEventArgs> myOriginalHandler;
    private WeakEventProxy`1<TEventArgs> myWeakProxy;
    public WeakEventProxy`1<TEventArgs> HandlerProxy { get; }
    public WeakEvent`1(EventHandler`1<TEventArgs> originalHandler);
    public WeakEventProxy`1<TEventArgs> get_HandlerProxy();
}
internal class JetBrains.Application.UI.BindableLinq.Helpers.WeakEventProxy`1 : object {
    private WeakReference myCallbackReference;
    public WeakEventProxy`1(EventHandler`1<TEventArgs> callback);
    public void Handler(object sender, TEventArgs e);
}
public class JetBrains.Application.UI.BindableLinq.Interfaces.BindableConstant`1 : object {
    private TValue myValue;
    public bool IsEvaluated { get; }
    public bool IsSuspended { get; }
    public TValue Value { get; public set; }
    public BindableConstant`1(TValue value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    public sealed virtual TValue get_Value();
    public sealed virtual void set_Value(TValue value);
}
public class JetBrains.Application.UI.BindableLinq.Interfaces.BindableProperty`1 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private TValue myValue;
    private int mySuspendCount;
    public TValue Value { get; public set; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    public bool IsSuspended { get; }
    public BindableProperty`1(TValue value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual TValue get_Value();
    public sealed virtual void set_Value(TValue value);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
}
public class JetBrains.Application.UI.BindableLinq.Interfaces.BulkUpdate : ValueType {
    private ISuspendable mySuspendable;
    private BulkUpdate(ISuspendable suspendable);
    public sealed virtual void Dispose();
    public static IDisposable For(ISuspendable suspendable);
    public static IDisposable For(ISuspendable suspendable, int affectedElementsCount);
    public static IDisposable For(ISuspendable suspendable, NotifyCollectionChangedEventArgs e);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindable {
    public bool IsEvaluated { get; }
    public abstract virtual bool get_IsEvaluated();
    public abstract virtual void Evaluate();
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindable`1 {
    [CanBeNullAttribute]
public TValue Value { get; public set; }
    public abstract virtual TValue get_Value();
    public abstract virtual void set_Value(TValue value);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Reset(IEnumerable`1<TElement> items);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableGrouping`2 {
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableHashSet`1 {
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView {
    [CanBeNullAttribute]
public ISync Lock { get; }
    [NotNullAttribute]
public IBindableView RootView { get; }
    public abstract virtual ISync get_Lock();
    public abstract virtual IBindableView get_RootView();
    public abstract virtual int IndexOf(object item);
    public abstract virtual bool Contains(object item);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView`1 {
    public int Count { get; }
    public TElement Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual TElement get_Item(int index);
    public abstract virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IOrderedBindableView`1 {
    [NotNullAttribute]
public abstract virtual IOrderedBindableView`1<TResult> CreateOrderedIterator(Func`2<TResult, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.ISuspendable {
    public bool IsSuspended { get; }
    public abstract virtual bool get_IsSuspended();
    public abstract virtual void Suspend();
    public abstract virtual void Resume();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Iterators.CastIterator`2 : object {
    private IBindableView`1<TSource> mySourceCollection;
    public int Count { get; }
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    public IBindableView RootView { get; }
    public TResult Item { get; }
    public CastIterator`2(IBindableView`1<TSource> sourceCollection);
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TResult> GetEnumeratorUnsafe();
    public sealed virtual int get_Count();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual ISync get_Lock();
    public sealed virtual IBindableView get_RootView();
    public sealed virtual TResult get_Item(int index);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual string ToString();
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.EvaluateOnceForEachItemIterator`1 : Iterator`2<TElement, TElement> {
    [NotNullAttribute]
private Action`1<TElement> myEvaluateOnEachItem;
    public EvaluateOnceForEachItemIterator`1(IBindableView`1<TElement> sourceCollection, Action`1<TElement> evaluateOnEachItem);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToReplace(int index, TElement oldItem, TElement newItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int index, TElement removedItem);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.GroupByIterator`3 : Iterator`2<TSource, IBindableGrouping`2<TKey, TElement>> {
    private Expression`1<Func`2<TSource, TElement>> myElementSelector;
    private IEqualityComparer`1<TKey> myKeyComparer;
    private Expression`1<Func`2<TSource, TKey>> myKeySelector;
    private Func`2<TSource, TKey> myKeySelectorCompiled;
    public GroupByIterator`3(IBindableView`1<TSource> sourceCollection, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> keyComparer);
    protected virtual IEnumerable`1<IBindableGrouping`2<TKey, TElement>> EvaluateSourceCollection();
    public TKey KeySelector(TSource sourceItem);
    private bool CompareKeys(TKey lhs, TKey rhs);
    private bool FindGroup(TKey key, IEnumerable`1<IBindableGrouping`2<TKey, TElement>> groups);
    private void EnsureGroupsExists(TSource element, ICollection`1<IBindableGrouping`2<TKey, TElement>> groups);
    protected virtual void ReactToAdd(int sourceStartingIndex, TSource addedItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected virtual void ReactToRemove(int oldIndex, TSource removedItem);
    protected virtual void ReactToReplace(int oldIndex, TSource oldItem, TSource newItem);
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
    private void Group_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual void Dispose();
}
internal abstract class JetBrains.Application.UI.BindableLinq.Iterators.ItemSorter`1 : object {
    public abstract virtual int Compare(T left, T right);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.ItemSorter`2 : ItemSorter`1<T> {
    private ItemSorter`1<T> mySuperior;
    private Func`2<T, TKey> myKeySelector;
    private IComparer`1<TKey> myComparer;
    private bool myAscending;
    public ItemSorter`2(ItemSorter`1<T> superior, Func`2<T, TKey> keySelector, IComparer`1<TKey> comparer, bool ascending);
    public virtual int Compare(T left, T right);
}
[DefaultMemberAttribute("Item")]
public abstract class JetBrains.Application.UI.BindableLinq.Iterators.Iterator`2 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    [CompilerGeneratedAttribute]
private IBindableCollection`1<TResult> <ResultCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindableView`1<TSource> <SourceCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEvaluated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [NotNullAttribute]
protected IBindableCollection`1<TResult> ResultCollection { get; private set; }
    [NotNullAttribute]
protected IBindableView`1<TSource> SourceCollection { get; private set; }
    public ISync Lock { get; }
    public IBindableView RootView { get; }
    public int Count { get; }
    public bool IsEvaluated { get; private set; }
    protected bool IsDisposed { get; private set; }
    public TResult Item { get; }
    protected Iterator`2(IBindableView`1<TSource> sourceCollection);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected IBindableCollection`1<TResult> get_ResultCollection();
    [CompilerGeneratedAttribute]
private void set_ResultCollection(IBindableCollection`1<TResult> value);
    [CompilerGeneratedAttribute]
protected IBindableView`1<TSource> get_SourceCollection();
    [CompilerGeneratedAttribute]
private void set_SourceCollection(IBindableView`1<TSource> value);
    public virtual ISync get_Lock();
    public sealed virtual IBindableView get_RootView();
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEvaluated();
    [CompilerGeneratedAttribute]
private void set_IsEvaluated(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual TResult get_Item(int index);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public virtual void Evaluate();
    [NotNullAttribute]
protected virtual IBindableCollection`1<TResult> CreateResultCollection(ISync readlock, IEnumerable`1<TResult> items);
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TResult> GetEnumeratorUnsafe();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private void SubscribeToDependency(IDependencyDefinition definition);
    private void ReevaluateElement(object element, string propertyName);
    private void ReevaluateCollection(object obj);
    protected void ReactToReset();
    protected virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected abstract virtual IEnumerable`1<TResult> EvaluateSourceCollection();
    protected abstract virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
    protected abstract virtual void ReactToAdd(int index, TSource item);
    protected abstract virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected abstract virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected abstract virtual void ReactToRemove(int index, TSource removedItem);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual void Dispose();
    public virtual string ToString();
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.OrderByIterator`2 : Iterator`2<TElement, TElement> {
    private ItemSorter`2<TElement, TKey> myItemSorter;
    public OrderByIterator`2(IBindableView`1<TElement> source, ItemSorter`2<TElement, TKey> itemSorter);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int oldIndex, TElement removedItem);
    protected virtual void ReactToReplace(int oldIndex, TElement oldItem, TElement newItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    public sealed virtual IOrderedBindableView`1<TElement> CreateOrderedIterator(Func`2<TElement, TNewKey> keySelector, IComparer`1<TNewKey> comparer, bool descending);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.OrderByWhereIterator`2 : Iterator`2<TElement, TElement> {
    private ItemSorter`2<TElement, TKey> myItemSorter;
    private Func`2<TElement, bool> myPredicate;
    public OrderByWhereIterator`2(IBindableView`1<TElement> source, ItemSorter`2<TElement, TKey> itemSorter, Func`2<TElement, bool> predicate);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    public bool Filter(TElement element);
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int oldIndex, TElement removedItem);
    protected virtual void ReactToReplace(int oldIndex, TElement oldItem, TElement newItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    public sealed virtual IOrderedBindableView`1<TElement> CreateOrderedIterator(Func`2<TElement, TNewKey> keySelector, IComparer`1<TNewKey> comparer, bool descending);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Iterators.QuickWhereWithoutIndexTracking`1 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    private IBindableView`1<TElement> mySourceCollection;
    private Func`2<TElement, bool> myPredicate;
    private HashSet`1<TElement> myElements;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    [CompilerGeneratedAttribute]
private bool <IsEvaluated>k__BackingField;
    public int Count { get; }
    public bool IsEvaluated { get; private set; }
    public ISync Lock { get; }
    public IBindableView RootView { get; }
    public TElement Item { get; }
    public QuickWhereWithoutIndexTracking`1(IBindableView`1<TElement> sourceCollection, Func`2<TElement, bool> predicate);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
    public sealed virtual int get_Count();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEvaluated();
    [CompilerGeneratedAttribute]
private void set_IsEvaluated(bool value);
    public sealed virtual void Evaluate();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private void SubscribeToDependency(IDependencyDefinition definition);
    private void ReevaluateElement(object element, string propertyName);
    private void ReevaluateCollection(object obj);
    protected void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected void ReactToReset();
    private void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual ISync get_Lock();
    public sealed virtual IBindableView get_RootView();
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual bool Contains(TElement item);
    public sealed virtual TElement get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Iterators.RefIterator`1 : object {
    private IBindableView`1<TElement> mySourceCollection;
    public IBindableView`1<TElement> SourceCollection { get; }
    public int Count { get; }
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    public IBindableView RootView { get; }
    public TElement Item { get; }
    public RefIterator`1(IBindableView`1<TElement> sourceCollection);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
    public IBindableView`1<TElement> get_SourceCollection();
    public sealed virtual int get_Count();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual ISync get_Lock();
    public sealed virtual IBindableView get_RootView();
    public sealed virtual TElement get_Item(int index);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual string ToString();
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.SelectIterator`2 : Iterator`2<TSource, TResult> {
    private Func`2<TSource, TResult> mySelector;
    private BindableCollection`1<TResult> ResultCollection { get; }
    public SelectIterator`2(IBindableView`1<TSource> sourceCollection, Func`2<TSource, TResult> selector);
    private BindableCollection`1<TResult> get_ResultCollection();
    protected virtual IEnumerable`1<TResult> EvaluateSourceCollection();
    protected virtual void ReactToAdd(int index, TSource item);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected virtual void ReactToRemove(int index, TSource removedItem);
    protected virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
}
public class JetBrains.Application.UI.BindableLinq.Iterators.SkipIterator`1 : Iterator`2<TElement, TElement> {
    private int mySkipCount;
    private BindableCollection`1<TElement> ResultCollection { get; }
    public SkipIterator`1(IBindableView`1<TElement> sourceCollection, int skipCount);
    private BindableCollection`1<TElement> get_ResultCollection();
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToReplace(int index, TElement oldItem, TElement newItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int index, TElement removedItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.WhereIterator`1 : Iterator`2<TElement, TElement> {
    private Func`2<TElement, bool> myPredicate;
    public WhereIterator`1(IBindableView`1<TElement> sourceCollection, Func`2<TElement, bool> predicate);
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    public bool Filter(TElement element);
    protected virtual void ReactToAdd(int insertionIndex, TElement addedItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int index, TElement removedItem);
    protected virtual void ReactToReplace(int index, TElement oldItem, TElement newItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
}
public abstract class JetBrains.Application.UI.Commands.Command`1 : CommandMixin {
    public abstract virtual void Execute(T parameter);
    public abstract virtual bool CanExecute(T parameter);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
}
public abstract class JetBrains.Application.UI.Commands.CommandMixin : object {
    private JetDispatcher myDispatcher;
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    protected void RaiseCanExecuteChangedOnCorrectThread();
}
public class JetBrains.Application.UI.Commands.DelegateCommand : CommandMixin {
    private Action`1<object> myExecute;
    private Predicate`1<object> myCanExecute;
    public DelegateCommand(Action`1<object> execute, Predicate`1<object> canExecute);
    public DelegateCommand(Action execute, Func`1<bool> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    public void RaiseCanExecuteChanged();
}
public class JetBrains.Application.UI.Commands.DelegateCommand`1 : Command`1<T> {
    private Action`1<T> myExecute;
    private Predicate`1<T> myCanExecute;
    public DelegateCommand`1(Action`1<T> execute, Predicate`1<T> canExecute);
    public virtual void Execute(T parameter);
    public virtual bool CanExecute(T parameter);
    public void RaiseCanExecuteChanged();
}
public interface JetBrains.Application.UI.Commands.ICommand`1 {
    public abstract virtual void Execute(T param);
    public abstract virtual bool CanExecute(T param);
}
public class JetBrains.Application.UI.Commands.OpenUriCommand : UICommand {
    public OpenUriCommand(Lifetime lifetime, OpensUri opensUri, Uri uri, object icon, object title, object description, Predicate`1<object> canExecute);
}
public class JetBrains.Application.UI.Commands.SignalCommand : object {
    private EventHandler _CanExecuteChanged;
    private IProperty`1<bool> myCanExecute;
    [NotNullAttribute]
private Signal`1<EventArgs`1<object>> mySignal;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate7;
    public IProperty`1<bool> IsCanExecute { get; }
    private IUntypedSignal JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<System.Object>>.AsUntyped { get; }
    private PropertyId`1<EventArgs`1<object>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<System.Object>>.Id { get; }
    private IProperty`1<EventArgs`1<object>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<System.Object>>.Property { get; }
    public SignalCommand(Lifetime lifetime, string sSignalName, Action FFirstHandler);
    public SignalCommand(Lifetime lifetime, string sSignalName, Action`1<object> FFirstHandler);
    public IProperty`1<bool> get_IsCanExecute();
    public void Fire();
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    public sealed virtual void Advise(Lifetime lifetime, Action`1<EventArgs`1<object>> handler);
    public sealed virtual void Fire(EventArgs`1<object> value);
    public sealed virtual void Fire(EventArgs`1<object> value, object cookie);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override IUntypedSignal JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<System.Object>>.get_AsUntyped();
    private sealed virtual override PropertyId`1<EventArgs`1<object>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<System.Object>>.get_Id();
    private sealed virtual override IProperty`1<EventArgs`1<object>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<System.Object>>.get_Property();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__4(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5();
}
public class JetBrains.Application.UI.Commands.SimpleCommand : CommandMixin {
    private Action myExecute;
    private bool myCanExecute;
    private bool CanExecute { get; public set; }
    public SimpleCommand(Action execute, bool canExecute);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private bool get_CanExecute();
    public void set_CanExecute(bool value);
}
public class JetBrains.Application.UI.Commands.SimpleCommand`1 : CommandMixin {
    private ICommand`1<T> myThis;
    private Action`1<T> myAction;
    private bool myCanExecute;
    private bool CanExecute { get; public set; }
    public SimpleCommand`1(Action`1<T> action, bool canExecute);
    private sealed virtual override void JetBrains.Application.UI.Commands.ICommand<T>.Execute(T param);
    private sealed virtual override bool JetBrains.Application.UI.Commands.ICommand<T>.CanExecute(T param);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private bool get_CanExecute();
    public void set_CanExecute(bool value);
}
public class JetBrains.Application.UI.Commands.UICommand : DelegateCommand {
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Description>k__BackingField;
    public IProperty`1<object> Icon { get; private set; }
    public IProperty`1<object> Title { get; private set; }
    public IProperty`1<object> Description { get; private set; }
    public UICommand(Lifetime lifetime, Action`1<object> execute, Predicate`1<object> canExecute, object icon, object title, object description);
    public UICommand(Lifetime lifetime, Action execute, Predicate`1<object> canExecute, object icon, object title, object description);
    [CompilerGeneratedAttribute]
public IProperty`1<object> get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IProperty`1<object> value);
    [CompilerGeneratedAttribute]
public IProperty`1<object> get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(IProperty`1<object> value);
    [CompilerGeneratedAttribute]
public IProperty`1<object> get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(IProperty`1<object> value);
}
public class JetBrains.Application.UI.Commands.UiCommandAutomation : AAutomation {
    public SignalCommand Command;
    public Property`1<RichText> DisplayText;
    public IProperty`1<IAutomation> Tooltip;
    public IProperty`1<bool> IsEnabled;
    public UiCommandAutomation(Lifetime lifetime, RichText displaytext, Action λOnCommand, RichText tooltip);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.Clipboard : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    public Clipboard(Lifetime lifetime, IThreading threading);
    [CanBeNullAttribute]
public virtual IDataObject GetDataObject();
    [CanBeNullAttribute]
public virtual string GetText();
    public virtual void SetText(string text);
    [CanBeNullAttribute]
public virtual object GetData(string format);
    [CanBeNullAttribute]
public virtual IDataObject SetDataObject(object data);
    [CanBeNullAttribute]
public static string GetText(int maxLength);
    [MustUseReturnValueAttribute]
private static bool OpenClipboard(int retryCount);
    [MustUseReturnValueAttribute]
private static IntPtr GetClipboardText(int retryCount);
}
public static class JetBrains.Application.UI.Components.Dumping : object {
    public static void DumpObjectSimple(object o, XmlWriter writer);
}
public class JetBrains.Application.UI.Components.Fonts.AvalonFont : object {
    private string myFontFamilyName;
    private float mySize;
    private FontWeight myWeight;
    private FontStyle myStyle;
    public FontFamily FontFamily { get; }
    public string FontFamilyName { get; }
    public float Size { get; }
    public FontWeight Weight { get; }
    public FontStyle Style { get; }
    public AvalonFont(string fontFamilyName, float size, FontWeight weight, FontStyle style);
    public FontFamily get_FontFamily();
    public string get_FontFamilyName();
    public float get_Size();
    public FontWeight get_Weight();
    public FontStyle get_Style();
}
public class JetBrains.Application.UI.Components.Fonts.EitherFont : object {
    private AvalonFont myAvalonFont;
    private Font mySystemDrawingFont;
    public Font SystemDrawingFont { get; }
    public AvalonFont AvalonFont { get; }
    public EitherFont(Font font);
    public EitherFont(AvalonFont font);
    private static FontStyle GetSystemDrawingFontStyle(AvalonFont font);
    public Font GetSystemDrawingFont(DpiResolution dpi);
    public Font get_SystemDrawingFont();
    public AvalonFont get_AvalonFont();
    public static Font op_Implicit(EitherFont either);
    public static AvalonFont op_Implicit(EitherFont either);
    public static EitherFont op_Implicit(Font font);
    public static EitherFont op_Implicit(AvalonFont font);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.Fonts.EitherFontEx : object {
    [ExtensionAttribute]
public static void ApplyTo(EitherFont eitherFont, Control element);
    [ExtensionAttribute]
public static void ApplyTo(EitherFont eitherFont, TextBlock element);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.Fonts.FontsManager : object {
    private Lazy`1<IProperty`1<EitherFont>> myDefaultCodeFont;
    private Lazy`1<IProperty`1<EitherFont>> myLookupFont;
    private Lazy`1<IProperty`1<EitherFont>> myListFont;
    private Lazy`1<IProperty`1<EitherFont>> myTipFont;
    private Lazy`1<IProperty`1<EitherFont>> myDialogFont;
    private Lazy`1<IProperty`1<EitherFont>> myMenuFont;
    private static string ConsolasFontFamily;
    [CompilerGeneratedAttribute]
private static Func`1<Font> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`1<Font> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`1<Font> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`1<Font> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`1<Font> CS$<>9__CachedAnonymousMethodDelegate9;
    public IProperty`1<EitherFont> DefaultCodeFont { get; }
    public IProperty`1<EitherFont> LookupFont { get; }
    public IProperty`1<EitherFont> ListFont { get; }
    public IProperty`1<EitherFont> TipFont { get; }
    public IProperty`1<EitherFont> DialogFont { get; }
    public IProperty`1<EitherFont> MenuFont { get; }
    public FontsManager(Lifetime lifetime);
    private static FontsManager();
    private static Lazy`1<IProperty`1<EitherFont>> CreateLazyFontProperty(Lifetime lifetime, string name, Func`1<Font> getter);
    public IProperty`1<EitherFont> get_DefaultCodeFont();
    public IProperty`1<EitherFont> get_LookupFont();
    public IProperty`1<EitherFont> get_ListFont();
    public IProperty`1<EitherFont> get_TipFont();
    public IProperty`1<EitherFont> get_DialogFont();
    public IProperty`1<EitherFont> get_MenuFont();
    public void AllowFormAutoScaling(Form form);
    private static Font GetFont(Lifetime lifetime, Func`1<Font> getter);
    private static Font GetCodeFont();
    [CompilerGeneratedAttribute]
private static Font <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static Font <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static Font <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static Font <.ctor>b__3();
    [CompilerGeneratedAttribute]
private static Font <.ctor>b__4();
}
public static class JetBrains.Application.UI.Components.Fonts.GdipFontFamilyEx : object {
    [NotNullAttribute]
public static FontFamily CreateFontFamily(string fontFamilyName, GenericFontFamilies fontFamilies);
}
public interface JetBrains.Application.UI.Components.Fonts.IFontsManager {
    public IProperty`1<EitherFont> DefaultCodeFont { get; }
    public IProperty`1<EitherFont> DialogFont { get; }
    public IProperty`1<EitherFont> MenuFont { get; }
    public IProperty`1<EitherFont> TipFont { get; }
    public abstract virtual IProperty`1<EitherFont> get_DefaultCodeFont();
    public abstract virtual IProperty`1<EitherFont> get_DialogFont();
    public abstract virtual IProperty`1<EitherFont> get_MenuFont();
    public abstract virtual IProperty`1<EitherFont> get_TipFont();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.GetCursorPosWowFix : object {
    private static byte InstructionCodeJmp;
    private static int SizeofJmpInstruction;
    private static List`1<Delegate> myCacheDelegates;
    private static bool myIsEverHooked;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate6;
    private static GetCursorPosWowFix();
    public static bool IsEnvironmentAffected();
    private static int GetCursorPos(POINT* lpPoint);
    private static void InstallIatHook();
    private static void InstallRewriteHook();
    private static void MakeJmp(Void* addr, Void* to);
    private static Void* SpliceHookAddr(Void* pfnExisting, Void* pfnNew, int nBytesToMove);
    private static Void* SpliceHookFunc(string sModuleToHook, string sFuncToHook, Void* pfnNewFunc, int nBytesToMove);
    [CompilerGeneratedAttribute]
private static object <SpliceHookAddr>b__4();
}
public interface JetBrains.Application.UI.Components.IIsApplicationActiveState {
    [NotNullAttribute]
public IProperty`1<bool> IsEnabled { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsApplicationActive { get; }
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    public abstract virtual IProperty`1<bool> get_IsApplicationActive();
}
public static class JetBrains.Application.UI.Components.Interop.AvalonOperationCrisp : object {
    private static object myCookie;
    private static bool myExecuted;
    private static AvalonOperationCrisp();
    public static void Execute();
    private static void Execute_InstallHook();
    private static void Execute_InvalidateMil();
    private static int OnSystemParametersInfoW(UInt32 uiAction, UInt32 uiParam, Void* pvParam, UInt32 fWinIni);
}
public class JetBrains.Application.UI.Components.Interop.AvalonOperationCrispComponent : object {
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.IsApplicationActiveState : object {
    protected Lifetime myLifetimeComponent;
    private static ReadonlyToken myReadonlyToken;
    private JetDispatcher Dispatcher;
    private IProperty`1<bool> myIsApplicationActive;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    public IProperty`1<bool> IsEnabled { get; private set; }
    public IProperty`1<bool> IsApplicationActive { get; }
    public IsApplicationActiveState(Lifetime lifetimeComponent, IWindowsHookManager windowsHookManager);
    private static IsApplicationActiveState();
    protected virtual void Init();
    private void UpdateActive(IProperty`1<bool> property);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(IProperty`1<bool> value);
    public sealed virtual IProperty`1<bool> get_IsApplicationActive();
}
public class JetBrains.Application.UI.Components.IsApplicationActiveStateDummy : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsApplicationActive>k__BackingField;
    public IProperty`1<bool> IsEnabled { get; private set; }
    public IProperty`1<bool> IsApplicationActive { get; private set; }
    public IsApplicationActiveStateDummy(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsApplicationActive();
    [CompilerGeneratedAttribute]
private void set_IsApplicationActive(IProperty`1<bool> value);
}
public interface JetBrains.Application.UI.Components.IUIApplication {
    [NotNullAttribute]
public ICommonFileDialogs FileDialogs { get; }
    [NotNullAttribute]
public ISettingsStore Settings { get; }
    [NotNullAttribute]
public IShellLocks ShellLocks { get; }
    [NotNullAttribute]
public IApplicationModalState ApplicationModalState { get; }
    public abstract virtual ICommonFileDialogs get_FileDialogs();
    public abstract virtual ISettingsStore get_Settings();
    public abstract virtual IShellLocks get_ShellLocks();
    public abstract virtual IApplicationModalState get_ApplicationModalState();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.IUIApplicationEx : object {
    [ExtensionAttribute]
public static void OpenUri(IUIApplicationSimple thіs, Uri uri);
}
public interface JetBrains.Application.UI.Components.IUIApplicationSimple {
    [NotNullAttribute]
public ISimpleSignal Idle { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsApplicationActive { get; }
    public bool IsInternalMode { get; }
    [CanBeNullAttribute]
public IMainWindow MainWindow { get; }
    [NotNullAttribute]
public OpensUri OpensUri { get; }
    public OuterLifetime OuterLifetime { get; }
    [NotNullAttribute]
public ITheming Theming { get; }
    [NotNullAttribute]
public IThreading Threading { get; }
    [NotNullAttribute]
public IWindowBranding WindowBranding { get; }
    public abstract virtual ISimpleSignal get_Idle();
    public abstract virtual IProperty`1<bool> get_IsApplicationActive();
    public abstract virtual bool get_IsInternalMode();
    public abstract virtual IMainWindow get_MainWindow();
    public abstract virtual OpensUri get_OpensUri();
    public abstract virtual OuterLifetime get_OuterLifetime();
    public abstract virtual ITheming get_Theming();
    public abstract virtual IThreading get_Threading();
    public abstract virtual IWindowBranding get_WindowBranding();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.IUIApplicationSimpleEx : object {
    [ExtensionAttribute]
public static void OpenUri(IUIApplicationSimple thіs, string uri);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.UI.Components.NonInteractiveMessageBoxHandler : object {
    public NonInteractiveMessageBoxHandler(Lifetime lifetime, ILogger logger, bool isSuppress);
}
[ShellComponentAttribute("4", "0", "0")]
public class JetBrains.Application.UI.Components.SuspendFileSystemTrackerWhenInactive : object {
    public SuspendFileSystemTrackerWhenInactive(Lifetime lifetime, IFileSystemTracker filetracker, IIsApplicationActiveState activestate);
}
[ShellComponentAttribute("0", "0", "0")]
internal class JetBrains.Application.UI.Components.SuspendInvocatorOnAppInactive : object {
    public SuspendInvocatorOnAppInactive(Lifetime lifetime, IThreading threading, IIsApplicationActiveState isApplicationActiveState);
}
public class JetBrains.Application.UI.Components.Theming.ColorTheme : object {
    private IDictionary`2<ThemeColor, Byte[]> myARGBColors;
    [NotNullAttribute]
public Byte[] GetARGBColor(ThemeColor color);
    public void SetGDIColor(ThemeColor color, Color v);
    public void SetRawColor(ThemeColor color, Byte[] argb);
    public Color GetGDIColor(ThemeColor color);
    public void PopulateResourceDictionary(ResourceDictionary dict);
    private void PopulateGradientBrushes(ResourceDictionary dict);
    private void PopulateColorsAndSolidBrushes(ResourceDictionary dict);
    public Color GetWPFColor(ThemeColor themeColor);
    public Color GetGDIColorBlended(ThemeColor source, ThemeColor destination, double alpha);
    [CompilerGeneratedAttribute]
private GradientStop <PopulateGradientBrushes>b__0(ThemedGradientStop s);
}
public static class JetBrains.Application.UI.Components.Theming.DummyThemingAggregator : object {
    [NotNullAttribute]
public static ITheming CreateDummyThemingInstance(Lifetime lifetime, IThreading threading, ILogger logger, Assembly[] assembliesWithIcons);
}
public class JetBrains.Application.UI.Components.Theming.EitherColor : ValueType {
    private Byte[] myArgb;
    public Color GDIColor { get; }
    public Byte[] ARGB { get; }
    public Color WpfColor { get; }
    public EitherColor(Byte[] argb);
    public EitherColor(Color color);
    public Color get_GDIColor();
    public Byte[] get_ARGB();
    public Color get_WpfColor();
    public sealed virtual bool Equals(EitherColor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.Application.UI.Components.Theming.IColorThemeManager {
    public ISimpleSignal ColorThemeChanged { get; }
    public abstract virtual ISimpleSignal get_ColorThemeChanged();
    public abstract virtual ColorTheme GetCurrentColorTheme();
    public abstract virtual IProperty`1<EitherColor> CreateLiveColor(Lifetime lifetime, ThemeColor themeColor);
    public abstract virtual void PrepareWinForm(Lifetime lifetime, Void* hWnd);
    public abstract virtual void PrepareFrameworkElement(FrameworkElement element);
}
public interface JetBrains.Application.UI.Components.Theming.IScreenResolution {
    public DpiResolution ScreenResolution { get; }
    public abstract virtual DpiResolution get_ScreenResolution();
}
public interface JetBrains.Application.UI.Components.Theming.IStatusBarColorsManager {
    public Pair`2<IProperty`1<EitherColor>, IProperty`1<EitherColor>> CurrentStatusBarColors { get; }
    public abstract virtual Pair`2<IProperty`1<EitherColor>, IProperty`1<EitherColor>> get_CurrentStatusBarColors();
}
public interface JetBrains.Application.UI.Components.Theming.IThemeColorFiller {
    public abstract virtual void FillColorTheme(ColorTheme theme);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.Theming.IThemeManagerEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<EitherColor, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> IsDarkTheme(IColorThemeManager thіs, Lifetime lifetime);
    public static bool IsDarkColor(Color color);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> IsMonochromeTheme(IColorThemeManager thіs, Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static bool <IsDarkTheme>b__0(EitherColor color);
}
public interface JetBrains.Application.UI.Components.Theming.ITheming {
    [NotNullAttribute]
public ISimpleSignal ColorThemeChanged { get; }
    [NotNullAttribute]
public IColorThemeManager ColorThemeManager { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsDarkTheme { get; }
    [NotNullAttribute]
public IStatusBarColorsManager StatusBarColors { get; }
    public abstract virtual ISimpleSignal get_ColorThemeChanged();
    public abstract virtual IColorThemeManager get_ColorThemeManager();
    public abstract virtual IProperty`1<bool> get_IsDarkTheme();
    public abstract virtual IStatusBarColorsManager get_StatusBarColors();
    [NotNullAttribute]
public abstract virtual IProperty`1<EitherColor> CreateLiveColor(Lifetime lifetime, ThemeColor themeColor);
    [NotNullAttribute]
public abstract virtual ColorTheme GetCurrentColorTheme();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.Theming.StatusBarColorsManager : object {
    private Pair`2<IProperty`1<EitherColor>, IProperty`1<EitherColor>> myCurrentStatusBarColors;
    public Pair`2<IProperty`1<EitherColor>, IProperty`1<EitherColor>> CurrentStatusBarColors { get; }
    public StatusBarColorsManager(Lifetime lifetime, IColorThemeManager themeManager);
    public virtual Pair`2<IProperty`1<EitherColor>, IProperty`1<EitherColor>> get_CurrentStatusBarColors();
}
public enum JetBrains.Application.UI.Components.Theming.SystemColor : Enum {
    public int value__;
    public static SystemColor ScrollBar;
    public static SystemColor Desktop;
    public static SystemColor ActiveCaption;
    public static SystemColor InactiveCaption;
    public static SystemColor Menu;
    public static SystemColor Window;
    public static SystemColor WindowFrame;
    public static SystemColor MenuText;
    public static SystemColor WindowText;
    public static SystemColor ActiveCaptionText;
    public static SystemColor ActiveBorder;
    public static SystemColor InactiveBorder;
    public static SystemColor AppWorkspace;
    public static SystemColor Highlight;
    public static SystemColor HighlightText;
    public static SystemColor Control;
    public static SystemColor ControlDark;
    public static SystemColor GrayText;
    public static SystemColor ControlText;
    public static SystemColor InactiveCaptionText;
    public static SystemColor ControlLightLight;
    public static SystemColor ControlDarkDark;
    public static SystemColor ControlLight;
    public static SystemColor InfoText;
    public static SystemColor Info;
    public static SystemColor HotTrack;
    public static SystemColor GradientActiveCaption;
    public static SystemColor GradientInactiveCaption;
    public static SystemColor MenuHighlight;
    public static SystemColor MenuBar;
}
public class JetBrains.Application.UI.Components.Theming.ThemeColor : EnumPattern {
    private static IList`1<ThemeColor> ourColorList;
    private object myBrushKey;
    public static ThemeColor TextBoxBackground;
    public static ThemeColor ControlLinkText;
    public static ThemeColor ControlLinkTextPressed;
    public static ThemeColor Highlight;
    public static ThemeColor HighlightText;
    public static ThemeColor Background;
    public static ThemeColor Window;
    public static ThemeColor WindowText;
    public static ThemeColor DisabledText;
    public static ThemeColor ScrollBarBackground;
    public static ThemeColor Control;
    public static ThemeColor Info;
    public static ThemeColor InfoText;
    public static ThemeColor ActiveBorder;
    public static object InfoBrushKey;
    public static object InfoTextBrushKey;
    public static object ActiveBorderBrushKey;
    public static object WindowBrushKey;
    public static object WindowTextBrushKey;
    public static object DisabledTextBrushKey;
    public static ThemeColor ThemedAccentBackground;
    public static ThemeColor ThemedAccentForeground;
    public static ThemeColor ThemedAccentSelection;
    public static ThemeColor ThemedAccentHighlight;
    public static ThemeColor ThemedAccentAccent;
    public static ThemeColor TabStripBackground;
    public static ThemeColor TabStripForeground;
    public static ThemeColor TabStripItemBackground;
    public static ThemeColor TabStripItemForeground;
    public static ThemeColor TabStripItemBorder;
    public static ThemeColor TabStripItemMouseOverBackground;
    public static ThemeColor TabStripItemMouseOverForeground;
    public static ThemeColor TabStripItemMouseOverBorder;
    public static ThemeColor TabStripItemSelectedInactiveBackground;
    public static ThemeColor TabStripItemSelectedInactiveForeground;
    public static ThemeColor TabStripItemSelectedInactiveBorder;
    public static ThemeColor TabStripItemSelectedActiveBackground;
    public static ThemeColor TabStripItemSelectedActiveForeground;
    public static ThemeColor TabStripItemSelectedActiveBorder;
    public static ThemeColor TabStripButtonBackground;
    public static ThemeColor TabStripButtonForeground;
    public static ThemeColor TabStripButtonBorder;
    public static ThemeColor TabStripButtonMouseOverBackground;
    public static ThemeColor TabStripButtonMouseOverForeground;
    public static ThemeColor TabStripButtonMouseOverBorder;
    public static ThemeColor TabStripButtonMousePressedBackground;
    public static ThemeColor TabStripButtonMousePressedForeground;
    public static ThemeColor TabStripButtonMousePressedBorder;
    public static object TabStripBackgroundBrushKey;
    public static object TabStripForegroundBrushKey;
    public static object TabStripItemBackgroundBrushKey;
    public static object TabStripItemForegroundBrushKey;
    public static object TabStripItemBorderBrushKey;
    public static object TabStripItemMouseOverBackgroundBrushKey;
    public static object TabStripItemMouseOverForegroundBrushKey;
    public static object TabStripItemMouseOverBorderBrushKey;
    public static object TabStripItemSelectedInactiveBackgroundBrushKey;
    public static object TabStripItemSelectedInactiveForegroundBrushKey;
    public static object TabStripItemSelectedInactiveBorderBrushKey;
    public static object TabStripItemSelectedActiveBackgroundBrushKey;
    public static object TabStripItemSelectedActiveForegroundBrushKey;
    public static object TabStripItemSelectedActiveBorderBrushKey;
    public static object TabStripButtonBackgroundBrushKey;
    public static object TabStripButtonForegroundBrushKey;
    public static object TabStripButtonBorderBrushKey;
    public static object TabStripButtonMouseOverBackgroundBrushKey;
    public static object TabStripButtonMouseOverForegroundBrushKey;
    public static object TabStripButtonMouseOverBorderBrushKey;
    public static object TabStripButtonMousePressedBackgroundBrushKey;
    public static object TabStripButtonMousePressedForegroundBrushKey;
    public static object TabStripButtonMousePressedBorderBrushKey;
    public static ThemeColor ToolbarBackgroundGradientBegin;
    public static object ToolbarBackgroundGradientBeginBrushKey;
    public static ThemeColor ToolbarBackgroundGradientMiddle;
    public static object ToolbarBackgroundGradientMiddleKey;
    public static ThemeColor ToolbarBackgroundGradientEnd;
    public static ThemeColor ToolbarForeground;
    public static object ToolbarForegroundKey;
    public static ThemeColor ToolbarSeparatorDark;
    public static ThemeColor ToolbarSeparatorLight;
    public static ThemeColor ToolbarItemPressedBackgroundGradientBegin;
    public static object ToolbarItemPressedBackgroundGradientBeginBrushKey;
    public static ThemeColor ToolbarItemPressedBackgroundGradientEnd;
    public static ThemeColor ToolbarItemPressedForeground;
    public static ThemeColor ToolbarItemPressedBorder;
    public static ThemeColor ToolbarItemHoveredBackgroundGradientBegin;
    public static object ToolbarItemHoveredBackgroundGradientBeginBrushKey;
    public static ThemeColor ToolbarItemHoveredBackgroundGradientEnd;
    public static object ToolbarItemHoveredBackgroundGradientEndKey;
    public static ThemeColor ToolbarItemHoveredForeground;
    public static ThemeColor ToolbarItemHoveredBorder;
    public static object ToolbarItemHoveredBorderKey;
    public static ThemeColor ToolbarItemCheckedBackgroundGradientBegin;
    public static ThemeColor ToolbarItemCheckedBackgroundGradientEnd;
    public static object ToolbarItemCheckedBackgroundGradientEndKey;
    public static ThemeColor ToolbarItemCheckedForeground;
    public static ThemeColor ToolbarItemCheckedBorder;
    public static object ToolbarItemCheckedBorderKey;
    public static ThemeColor ToolbarComboBoxBackground;
    public static ThemeColor ToolbarComboBoxForeground;
    public static ThemeColor ToolbarComboBoxBorder;
    public static ThemeColor ToolbarComboBoxPopupBackground;
    public static ThemeColor ToolbarComboBoxPopupForeground;
    public static ThemeColor ToolbarComboBoxPopupBorder;
    public static ThemeColor ToolbarComboBoxCheckedBackground;
    public static ThemeColor ToolbarComboBoxCheckedForeground;
    public static ThemeColor ToolbarComboBoxCheckedBorder;
    public static ThemeColor ToolbarComboBoxHoveredBackground;
    public static ThemeColor ToolbarComboBoxHoveredForeground;
    public static ThemeColor ToolbarComboBoxHoveredBorder;
    public static ThemeColor ToolbarComboBoxItemSelectedForeground;
    public static ThemeColor ToolbarComboBoxItemSelectedBackground;
    public static ThemeColor ToolbarComboBoxItemSelectedBorder;
    public static ThemeColor ContextMenuBorder;
    public static ThemeColor ContextMenuForeground;
    public static ThemeColor ContextMenuForegroundMouseOver;
    public static ThemeColor ContextMenuForegroundInactive;
    public static ThemeColor ContextMenuBackgroundGradientBegin;
    public static ThemeColor ContextMenuBackgroundGradientEnd;
    public static ThemeColor ContextMenuSeparator;
    public static ThemeColor ContextMenuItemMouseOverBorder;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientBegin;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientMiddle1;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientMiddle2;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientEnd;
    public static ThemeColor ContextMenuItemPressedBorder;
    public static ThemeColor ContextMenuItemPressedBackgroundGradientBegin;
    public static ThemeColor ContextMenuItemPressedBackgroundGradientMiddle;
    public static ThemeColor ContextMenuItemPressedBackgroundGradientEnd;
    public static ThemeColor ContextMenuIconBackgroundGradientBegin;
    public static ThemeColor ContextMenuIconBackgroundGradientMiddle;
    public static ThemeColor ContextMenuIconBackgroundGradientEnd;
    public static ThemeColor TooltipBackground;
    public static ThemeColor TooltipForeground;
    public static ThemeColor TooltipBorder;
    public static ThemeColor ToolWindowBackground;
    public static ThemeColor ToolWindowForeground;
    public static ThemeColor TreeViewBackground;
    public static ThemeColor TreeViewForeground;
    public static ThemeColor TreeViewItemHoverBackground;
    public static ThemeColor TreeViewItemHoverBorder;
    public static ThemeColor TreeViewItemSelectedActiveBackground;
    public static ThemeColor TreeViewItemSelectedActiveBorder;
    public static ThemeColor TreeViewItemSelectedActiveForeground;
    public static ThemeColor TreeViewItemSelectedInactiveBackground;
    public static ThemeColor TreeViewItemSelectedInactiveBorder;
    public static ThemeColor TreeViewItemSelectedInactiveForeground;
    public static ThemeColor ToolWindowTreeBackground;
    public static ThemeColor ToolWindowTreeForeground;
    public static ThemeColor ToolWindowSelectedActiveTreeItemBackground;
    public static ThemeColor ToolWindowSelectedActiveTreeItemBorder;
    public static ThemeColor ToolWindowSelectedActiveTreeItemForeground;
    public static ThemeColor ToolWindowSelectedInactiveTreeItemBackground;
    public static ThemeColor ToolWindowSelectedInactiveTreeItemBorder;
    public static ThemeColor ToolWindowSelectedInactiveTreeItemForeground;
    public static ThemeColor TreeViewCellFocusedBorder;
    public static ThemeColor TreeViewColumnBackground;
    public static ThemeColor TreeViewColumnForeground;
    public static ThemeColor TreeViewColumnBorder;
    public static ThemeColor TreeViewColumnMouseOverBackground;
    public static ThemeColor TreeViewColumnMouseOverForeground;
    public static ThemeColor TreeViewColumnMouseOverBorder;
    public static object TreeViewBackgroundBrush;
    public static object TreeViewForegroundBrush;
    public static object TreeViewItemHoverBackgroundBrush;
    public static object TreeViewItemHoverBorderBrush;
    public static object TreeViewItemSelectedActiveBackgroundBrush;
    public static object TreeViewItemSelectedActiveBorderBrush;
    public static object TreeViewItemSelectedActiveForegroundBrush;
    public static object TreeViewItemSelectedInactiveBackgroundBrush;
    public static object TreeViewItemSelectedInactiveBorderBrush;
    public static object TreeViewItemSelectedInactiveForegroundBrush;
    public static object TreeViewColumnBackgroundBrush;
    public static object TreeViewColumnForegroundBrush;
    public static object TreeViewColumnBorderBrush;
    public static object TreeViewColumnMouseOverBackgroundBrush;
    public static object TreeViewColumnMouseOverForegroundBrush;
    public static object TreeViewColumnMouseOverBorderBrush;
    public static ThemeColor ToolWindowTreeHeaderBackground;
    public static ThemeColor ToolWindowTreeHeaderBorder;
    public static ThemeColor ToolWindowTreeHeaderForeground;
    public static ThemeColor ToolWindowTreeHeaderHoverBackground;
    public static ThemeColor ToolWindowTreeHeaderHoverForeground;
    public static ThemeColor ToolWindowTreeHeaderPressedBackground;
    public static ThemeColor ToolWindowTreeHeaderPressedForeground;
    public static ThemeColor ToolWindowTreeHeaderGlyph;
    public static ThemeColor ToolWindowTreeHeaderHoverGlyph;
    public static ThemeColor ToolWindowTreeHeaderPressedGlyph;
    public static object TreeViewCellFocusedBorderBrush;
    public static ThemeColor DialogFooterBackground;
    public static ThemeColor DialogFooterForeground;
    public static object DialogFooterBackgroundBrushKey;
    public static object DialogFooterForegroundBrushKey;
    public static ThemeColor StatusBarBackground;
    public static ThemeColor StatusBarForeground;
    public static ThemeColor EnvironmentBackground;
    public static ThemeColor FileTabInactiveTop;
    public static ThemeColor FileTabInactiveBottom;
    public static object FileTabInactiveTopBrushKey;
    public static object FileTabInactiveBottomBrushKey;
    public static ThemeColor ActiProDockSiteBackground;
    public static ThemeColor SearchHighlightBackground;
    public static ThemeColor SearchHighlightForeground;
    public static object SearchHighlightBackgroundBrush;
    public static object SearchHighlightForegroundBrush;
    [CompilerGeneratedAttribute]
private bool <AlphaAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <DefaultColor>k__BackingField;
    public bool AlphaAllowed { get; private set; }
    public Byte[] DefaultColor { get; private set; }
    public object BrushKey { get; }
    public ThemeColor(string name, bool alphaAllowed, bool isBrushNeeded);
    public ThemeColor(string name, Color defaultColor, bool alphaAllowed, bool isBrushNeeded);
    private static ThemeColor();
    [CompilerGeneratedAttribute]
public bool get_AlphaAllowed();
    [CompilerGeneratedAttribute]
private void set_AlphaAllowed(bool value);
    public static IEnumerable`1<ThemeColor> EnumerateColors();
    [CompilerGeneratedAttribute]
public Byte[] get_DefaultColor();
    [CompilerGeneratedAttribute]
private void set_DefaultColor(Byte[] value);
    public object get_BrushKey();
}
public class JetBrains.Application.UI.Components.Theming.ThemedGradientBrush : EnumPattern {
    private static IList`1<ThemedGradientBrush> ourAllBrushes;
    [CompilerGeneratedAttribute]
private Point <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <End>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ThemedGradientStop> <GradientStops>k__BackingField;
    public Point Start { get; private set; }
    public Point End { get; private set; }
    public IEnumerable`1<ThemedGradientStop> GradientStops { get; private set; }
    public static IEnumerable`1<ThemedGradientBrush> All { get; }
    public ThemedGradientBrush(string name, Point start, Point end, ThemedGradientStop[] gradientStops);
    private static ThemedGradientBrush();
    [CompilerGeneratedAttribute]
public Point get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(Point value);
    [CompilerGeneratedAttribute]
public Point get_End();
    [CompilerGeneratedAttribute]
private void set_End(Point value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ThemedGradientStop> get_GradientStops();
    [CompilerGeneratedAttribute]
private void set_GradientStops(IEnumerable`1<ThemedGradientStop> value);
    public static IEnumerable`1<ThemedGradientBrush> get_All();
}
public class JetBrains.Application.UI.Components.Theming.ThemedGradientStop : object {
    [CompilerGeneratedAttribute]
private ThemeColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    public ThemeColor Color { get; private set; }
    public double Offset { get; private set; }
    public ThemedGradientStop(ThemeColor color, double offset);
    [CompilerGeneratedAttribute]
public ThemeColor get_Color();
    [CompilerGeneratedAttribute]
private void set_Color(ThemeColor value);
    [CompilerGeneratedAttribute]
public double get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(double value);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.Theming.ThemeManager : object {
    private IThreading myThreading;
    private ColorTheme myCachedColorTheme;
    private IEnumerable`1<IThemeColorFiller> myFillersList;
    private DateTime myLastChanged;
    private ISimpleSignal myColorThemeChanged;
    protected static ISignal`1<Pair`2<DependencyObject, ThemingAwareness>> ThemingAwareChanged;
    public static DependencyProperty ThemingAwareProperty;
    public ISimpleSignal ColorThemeChanged { get; }
    public ThemeManager(Lifetime lifetime, IThreading threading, IViewable`1<IThemeColorFiller> fillers);
    private static ThemeManager();
    protected virtual ColorTheme CreateTheme();
    private static Color Modify(HSB accent, double hueFactor, double saturationFactor, double brightnessFactor);
    public sealed virtual ISimpleSignal get_ColorThemeChanged();
    public virtual ColorTheme GetCurrentColorTheme();
    public sealed virtual IProperty`1<EitherColor> CreateLiveColor(Lifetime lifetime, ThemeColor themeColor);
    public virtual void PrepareWinForm(Lifetime lifetime, Void* hWnd);
    public virtual void PrepareFrameworkElement(FrameworkElement element);
    protected void FireColorThemeChanged(bool fireImediatelly);
    private void FireColorThemeChangedInt();
    private Byte[] GetCurrentARGBColor(ThemeColor themeColor);
    public static void SetThemingAware(FrameworkElement element, ThemingAwareness value);
    public static ThemingAwareness GetThemingAware(FrameworkElement element);
    private static void PropertyChangedCallback(DependencyObject obj, DependencyPropertyChangedEventArgs args);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.Theming.ThemingAggregator : object {
    private IColorThemeManager myColorThemeManager;
    private FontsManager myFontsManager;
    private IStatusBarColorsManager myStatusBarColorsManager;
    private IThemedIconManager myThemedIconManager;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDarkTheme>k__BackingField;
    public IColorThemeManager ColorThemeManager { get; }
    public IProperty`1<bool> IsDarkTheme { get; private set; }
    private ISimpleSignal JetBrains.Application.UI.Components.Theming.ITheming.ColorThemeChanged { get; }
    private IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme { get; }
    private IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.DefaultCodeFont { get; }
    private IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.DialogFont { get; }
    private ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.Icons { get; }
    private IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.MenuFont { get; }
    private DpiResolution JetBrains.Application.UI.Components.Theming.IScreenResolution.ScreenResolution { get; }
    private IStatusBarColorsManager JetBrains.Application.UI.Components.Theming.ITheming.StatusBarColors { get; }
    private IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.TipFont { get; }
    public ThemingAggregator(Lifetime lifetime, IThreading threading, IconIdOwnersMap iconowners, ILogger logger, IViewable`1<IThemedIconThemeOracle> themeoracles, IStatusBarColorsManager statusBarColorsManager, IColorThemeManager colorThemeManager, FontsManager fontsman);
    public sealed virtual IColorThemeManager get_ColorThemeManager();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsDarkTheme();
    [CompilerGeneratedAttribute]
private void set_IsDarkTheme(IProperty`1<bool> value);
    private sealed virtual override IProperty`1<EitherColor> JetBrains.Application.UI.Components.Theming.ITheming.CreateLiveColor(Lifetime lifetime, ThemeColor themeColor);
    private sealed virtual override ColorTheme JetBrains.Application.UI.Components.Theming.ITheming.GetCurrentColorTheme();
    private sealed virtual override IThemedIconManagerRawApi JetBrains.Application.Icons.IThemedIconManager.GetRawApi();
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Components.Theming.ITheming.get_ColorThemeChanged();
    private sealed virtual override IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.get_CurrentIconTheme();
    private sealed virtual override IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_DefaultCodeFont();
    private sealed virtual override IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_DialogFont();
    private sealed virtual override ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.get_Icons();
    private sealed virtual override IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_MenuFont();
    private sealed virtual override DpiResolution JetBrains.Application.UI.Components.Theming.IScreenResolution.get_ScreenResolution();
    private sealed virtual override IStatusBarColorsManager JetBrains.Application.UI.Components.Theming.ITheming.get_StatusBarColors();
    private sealed virtual override IProperty`1<EitherFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_TipFont();
}
[ShellComponentAttribute("3", "0", "2")]
public class JetBrains.Application.UI.Components.TrackFocus : object {
    public static int LogLengthLimit;
    private static ICollection`1<string> RemoveServiceFramesFromCallStack_AvalonMethodNames;
    public ISimpleSignal FocusChanged;
    public IProperty`1<FocusedItem> Focused;
    public IProperty`1<bool> IsEnabled;
    public IProperty`1<bool> IsLoggingAvalon;
    public IProperty`1<bool> IsLoggingFullChain;
    public IProperty`1<bool> IsLoggingStackTraces;
    [NotNullAttribute]
public ListEvents`1<LogEntry> Log;
    [CompilerGeneratedAttribute]
private static Func`2<StackFrame, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public TrackFocus(Lifetime lifetimeGlobal);
    private static TrackFocus();
    [NotNullAttribute]
public static IList`1<StackFrame> RemoveServiceFramesFromCallStack(IList`1<StackFrame> frames);
    public static void ReportFocusedWindowToString(Void* hwndReport, StringBuilder sb, bool isDumpingStackTraces);
    [CompilerGeneratedAttribute]
private static bool <RemoveServiceFramesFromCallStack>b__0(StackFrame frame);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.UIApplication.ApplicationModalState : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInModalState>k__BackingField;
    public IProperty`1<bool> IsInModalState { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsInModalState();
    [CompilerGeneratedAttribute]
private void set_IsInModalState(IProperty`1<bool> value);
    public virtual void AdvertiseModalState(Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.UIApplication.ApplicationModalStateEx : object {
    [ExtensionAttribute]
public static T WithModalState(IApplicationModalState appModalState, Func`1<T> modalAction);
}
public interface JetBrains.Application.UI.Components.UIApplication.IApplicationModalState {
    public IProperty`1<bool> IsInModalState { get; }
    public abstract virtual IProperty`1<bool> get_IsInModalState();
    public abstract virtual void AdvertiseModalState(Lifetime lifetime);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.UIApplication.UIApplication : UIApplicationSimple {
    [CompilerGeneratedAttribute]
private ICommonFileDialogs <FileDialogs>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <ShellLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private IApplicationModalState <ApplicationModalState>k__BackingField;
    public ICommonFileDialogs FileDialogs { get; private set; }
    public ISettingsStore Settings { get; private set; }
    public IShellLocks ShellLocks { get; private set; }
    public IApplicationModalState ApplicationModalState { get; private set; }
    public UIApplication(Lifetime lifetime, ProductConfigurations configurations, IShellLocks locks, ISettingsStore settings, IIsApplicationActiveState isApplicationActiveState, ApplicationIdleEvent applicationIdleEvent, OpensUri opensUri, ICommonFileDialogs filedlg, IMainWindow mainwin, IWindowsHookManager hookman, ITheming theming, IWindowBranding windowBranding, ILogger logger, IApplicationModalState modelState);
    [CompilerGeneratedAttribute]
public sealed virtual ICommonFileDialogs get_FileDialogs();
    [CompilerGeneratedAttribute]
private void set_FileDialogs(ICommonFileDialogs value);
    [CompilerGeneratedAttribute]
public sealed virtual ISettingsStore get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(ISettingsStore value);
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_ShellLocks();
    [CompilerGeneratedAttribute]
private void set_ShellLocks(IShellLocks value);
    [CompilerGeneratedAttribute]
public sealed virtual IApplicationModalState get_ApplicationModalState();
    [CompilerGeneratedAttribute]
private void set_ApplicationModalState(IApplicationModalState value);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple : object {
    private static ReadonlyToken myReadonlyToken;
    private InternalMode myInternalMode;
    private Lifetime myLifetime;
    [NotNullAttribute]
private OpensUri myOpensUri;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Idle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsApplicationActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IMainWindow <MainWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private ITheming <Theming>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowBranding <WindowBranding>k__BackingField;
    [NotNullAttribute]
public ISimpleSignal Idle { get; private set; }
    [NotNullAttribute]
public IProperty`1<bool> IsApplicationActive { get; private set; }
    public bool IsInternalMode { get; }
    [CanBeNullAttribute]
public IMainWindow MainWindow { get; private set; }
    public OpensUri OpensUri { get; }
    public OuterLifetime OuterLifetime { get; }
    [NotNullAttribute]
public ITheming Theming { get; private set; }
    [NotNullAttribute]
public IThreading Threading { get; private set; }
    public IWindowBranding WindowBranding { get; private set; }
    public UIApplicationSimple(Lifetime lifetime, ProductConfigurations configurations, IThreading threading, IIsApplicationActiveState isApplicationActiveState, ApplicationIdleEvent applicationIdleEvent, OpensUri opensUri, IMainWindow mainwin, IWindowsHookManager hookman, ITheming theming, IWindowBranding windowBranding, ILogger logger);
    private static UIApplicationSimple();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Idle();
    [CompilerGeneratedAttribute]
private void set_Idle(ISimpleSignal value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsApplicationActive();
    [CompilerGeneratedAttribute]
private void set_IsApplicationActive(IProperty`1<bool> value);
    public sealed virtual bool get_IsInternalMode();
    [CompilerGeneratedAttribute]
public sealed virtual IMainWindow get_MainWindow();
    [CompilerGeneratedAttribute]
private void set_MainWindow(IMainWindow value);
    public sealed virtual OpensUri get_OpensUri();
    public sealed virtual OuterLifetime get_OuterLifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ITheming get_Theming();
    [CompilerGeneratedAttribute]
private void set_Theming(ITheming value);
    [CompilerGeneratedAttribute]
public sealed virtual IThreading get_Threading();
    [CompilerGeneratedAttribute]
private void set_Threading(IThreading value);
    [CompilerGeneratedAttribute]
public sealed virtual IWindowBranding get_WindowBranding();
    [CompilerGeneratedAttribute]
private void set_WindowBranding(IWindowBranding value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Components.UserActivityMonitor : object {
    private static TimeSpan IncomingContextSwitchDeferTime;
    private static TimeSpan StartupContextSwitchDeferTime;
    public SimpleSignal IncomingUserContextSwitchDetected;
    [NotNullAttribute]
public ISimpleSignal UserContextSwitch;
    public UserActivityMonitor(Lifetime lifetime, IThreading invocator, IIsApplicationActiveState appactive, ILogger logger);
    private static UserActivityMonitor();
    protected virtual void Init(Lifetime lifetime, IThreading invocator, IIsApplicationActiveState appactive, ILogger logger);
    private void Init_AttachContextSwitchEvents(Lifetime lifetime, ILogger Logger);
    private void Init_RawUserContextSwitchDetected(Lifetime lifetime, IIsApplicationActiveState appactive, ILogger logger);
}
public class JetBrains.Application.UI.Controls.Browser.Interop.COMRECT : object {
    public int bottom;
    public int left;
    public int right;
    public int top;
    public COMRECT(Rectangle r);
    public COMRECT(int left, int top, int right, int bottom);
    public static COMRECT FromXYWH(int x, int y, int width, int height);
    public virtual string ToString();
}
[ComConversionLossAttribute]
public class JetBrains.Application.UI.Controls.Browser.Interop.DOCHOSTUIINFO : ValueType {
    public UInt32 cbSize;
    public UInt32 dwDoubleClick;
    public UInt32 dwFlags;
    [ComConversionLossAttribute]
public IntPtr pchHostCss;
    [ComConversionLossAttribute]
public IntPtr pchHostNS;
}
[GuidAttribute("79EAC9EE-BAF9-11CE-8C82-00AA004BA90B")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
public interface JetBrains.Application.UI.Controls.Browser.Interop.IInternetSecurityManager {
    public abstract virtual int SetSecuritySite(IntPtr pSite);
    public abstract virtual int GetSecuritySite(IntPtr& pSite);
    public abstract virtual int MapUrlToZone(string pwszUrl, UInt32& pdwZone, UInt32 dwFlags);
    public abstract virtual int GetSecurityId(string pwszUrl, IntPtr pbSecurityId, UInt32& pcbSecurityId, UInt32& dwReserved);
    public abstract virtual int ProcessUrlAction(string pwszUrl, UInt32 dwAction, IntPtr pPolicy, UInt32 cbPolicy, IntPtr pContext, UInt32 cbContext, UInt32 dwFlags, UInt32 dwReserved);
    public abstract virtual int QueryCustomPolicy(string pwszUrl, Guid& guidKey, IntPtr& ppPolicy, UInt32& pcbPolicy, IntPtr pContext, UInt32 cbContext, UInt32 dwReserved);
    public abstract virtual int SetZoneMapping(UInt32 dwZone, string lpszPattern, UInt32 dwFlags);
    public abstract virtual int GetZoneMappings(UInt32 dwZone, IEnumString& ppenumString, UInt32 dwFlags);
}
public static class JetBrains.Application.UI.Controls.Browser.Interop.InterfacesID : object {
    public static string InternetSecurityManager;
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("6d5140c1-7436-11ce-8034-00aa006009fa")]
public interface JetBrains.Application.UI.Controls.Browser.Interop.IServiceProvider {
    public abstract virtual int QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject);
}
public class JetBrains.Application.UI.Controls.Browser.Interop.MSG : ValueType {
    public IntPtr hwnd;
    public IntPtr lParam;
    public int message;
    public int pt_x;
    public int pt_y;
    public int time;
    public IntPtr wParam;
}
public enum JetBrains.Application.UI.Controls.Browser.Interop.UrlPolicy : Enum {
    public UInt32 value__;
    public static UrlPolicy ALLOW;
    public static UrlPolicy QUERY;
    public static UrlPolicy DISALLOW;
    public static UrlPolicy ACTIVEX_CHECK_LIST;
    public static UrlPolicy CREDENTIALS_SILENT_LOGON_OK;
    public static UrlPolicy CREDENTIALS_MUST_PROMPT_USER;
    public static UrlPolicy CREDENTIALS_CONDITIONAL_PROMPT;
    public static UrlPolicy CREDENTIALS_ANONYMOUS_ONLY;
    public static UrlPolicy AUTHENTICATE_CLEARTEXT_OK;
    public static UrlPolicy AUTHENTICATE_CHALLENGE_RESPONSE;
    public static UrlPolicy AUTHENTICATE_MUTUAL_ONLY;
    public static UrlPolicy JAVA_PROHIBIT;
    public static UrlPolicy JAVA_HIGH;
    public static UrlPolicy JAVA_MEDIUM;
    public static UrlPolicy JAVA_LOW;
    public static UrlPolicy JAVA_CUSTOM;
    public static UrlPolicy CHANNEL_SOFTDIST_PROHIBIT;
    public static UrlPolicy CHANNEL_SOFTDIST_PRECACHE;
    public static UrlPolicy CHANNEL_SOFTDIST_AUTOINSTALL;
    public static UrlPolicy NOTIFY_ON_ALLOW;
    public static UrlPolicy NOTIFY_ON_DISALLOW;
    public static UrlPolicy LOG_ON_ALLOW;
    public static UrlPolicy LOG_ON_DISALLOW;
    public static UrlPolicy DONTCHECKDLGBOX;
}
public static class JetBrains.Application.UI.Controls.BulbMenu.Anchors.BulbMenuAnchors : object {
    [NotNullAttribute]
public static InvisibleAnchor FirstClassContextItems;
    [NotNullAttribute]
public static InvisibleAnchor PermanentItem;
    [NotNullAttribute]
public static InvisibleAnchor SecondClassContextItems;
    [NotNullAttribute]
public static InvisibleAnchor PermanentBackgroundItems;
    [NotNullAttribute]
public static InvisibleAnchor PermanentRoslynItems;
    private static BulbMenuAnchors();
}
public interface JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor {
    [CanBeNullAttribute]
public IAnchorPosition Position { get; }
    [CanBeNullAttribute]
public IAnchor ParentAnchor { get; }
    public abstract virtual IAnchorPosition get_Position();
    public abstract virtual IAnchor get_ParentAnchor();
    [NotNullAttribute]
public abstract virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey key, IAnchor& groupingAnchor);
    public abstract virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
}
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.InvisibleAnchor : object {
    [CompilerGeneratedAttribute]
private IAnchor <ParentAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchorPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Separate>k__BackingField;
    [NotNullAttribute]
public IAnchor ParentAnchor { get; private set; }
    [NotNullAttribute]
public IAnchorPosition Position { get; private set; }
    public bool Separate { get; private set; }
    public InvisibleAnchor(IAnchor parentAnchor, bool separate);
    public InvisibleAnchor(IAnchor parentAnchor, IAnchorPosition position, bool separate);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchor get_ParentAnchor();
    [CompilerGeneratedAttribute]
private void set_ParentAnchor(IAnchor value);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchorPosition get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(IAnchorPosition value);
    [CompilerGeneratedAttribute]
public bool get_Separate();
    [CompilerGeneratedAttribute]
private void set_Separate(bool value);
    [PureAttribute]
[NotNullAttribute]
public InvisibleAnchor CreateNext(bool separate);
    public sealed virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey key, IAnchor& groupingAnchor);
    public sealed virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.RootAnchor : object {
    [NotNullAttribute]
public static IAnchor Instance;
    public IAnchorPosition Position { get; }
    public IAnchor ParentAnchor { get; }
    private static RootAnchor();
    public sealed virtual IAnchorPosition get_Position();
    public sealed virtual IAnchor get_ParentAnchor();
    public sealed virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey key, IAnchor& groupingAnchor);
    public sealed virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.SubmenuAnchor : object {
    [CompilerGeneratedAttribute]
private IAnchor <ParentAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchorPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private SubmenuBehavior <Behavior>k__BackingField;
    [NotNullAttribute]
public IAnchor ParentAnchor { get; private set; }
    public IAnchorPosition Position { get; private set; }
    [NotNullAttribute]
public SubmenuBehavior Behavior { get; private set; }
    public SubmenuAnchor(IAnchor parentAnchor, SubmenuBehavior behavior);
    public SubmenuAnchor(IAnchor parentAnchor, RichText text, IconId icon);
    public SubmenuAnchor(IAnchor parentAnchor, SubmenuBehavior behavior, IAnchorPosition position);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchor get_ParentAnchor();
    [CompilerGeneratedAttribute]
private void set_ParentAnchor(IAnchor value);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchorPosition get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(IAnchorPosition value);
    [CompilerGeneratedAttribute]
public SubmenuBehavior get_Behavior();
    [CompilerGeneratedAttribute]
private void set_Behavior(SubmenuBehavior value);
    public sealed virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey parentKey, IAnchor& groupingAnchor);
    public sealed virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.SubmenuBehavior : object {
    [NotNullAttribute]
public static SubmenuBehavior Executable;
    [NotNullAttribute]
public static SubmenuBehavior ExecutableDuplicateFirst;
    [CanBeNullAttribute]
private RichText myText;
    [CanBeNullAttribute]
private IconId myIcon;
    private bool myExecutable;
    private bool myRemoveFirst;
    public SubmenuBehavior(RichText text, IconId icon, bool executable, bool removeFirst);
    private static SubmenuBehavior();
    [NotNullAttribute]
[PureAttribute]
public static SubmenuBehavior Static(RichText text, IconId icon);
    internal void PostInit(BulbActionKey menuKey);
}
public class JetBrains.Application.UI.Controls.BulbMenu.AnchorsTrieNode : object {
    [NotNullAttribute]
private Dictionary`2<IAnchor, AnchorsTrieNode> myChildrenAnchors;
    [CompilerGeneratedAttribute]
private List`1<IAnchor> <SortedAnchors>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private AnchorsTrieNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <ChildrenItems>k__BackingField;
    [CompilerGeneratedAttribute]
private static Predicate`1<IAnchor> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<IAnchor, IAnchor, Nullable`1<int>> CS$<>9__CachedAnonymousMethodDelegate4;
    [NotNullAttribute]
public List`1<IAnchor> SortedAnchors { get; private set; }
    [CanBeNullAttribute]
public IAnchor Anchor { get; private set; }
    [CanBeNullAttribute]
public AnchorsTrieNode Parent { get; private set; }
    [NotNullAttribute]
public List`1<object> ChildrenItems { get; private set; }
    [NotNullAttribute]
public IEnumerable`1<IAnchor> Anchors { get; }
    public AnchorsTrieNode(IAnchor anchor);
    [CompilerGeneratedAttribute]
public List`1<IAnchor> get_SortedAnchors();
    [CompilerGeneratedAttribute]
private void set_SortedAnchors(List`1<IAnchor> value);
    [CompilerGeneratedAttribute]
public IAnchor get_Anchor();
    [CompilerGeneratedAttribute]
private void set_Anchor(IAnchor value);
    [CompilerGeneratedAttribute]
public AnchorsTrieNode get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(AnchorsTrieNode value);
    [CompilerGeneratedAttribute]
public List`1<object> get_ChildrenItems();
    [CompilerGeneratedAttribute]
private void set_ChildrenItems(List`1<object> value);
    public IEnumerable`1<IAnchor> get_Anchors();
    [NotNullAttribute]
public AnchorsTrieNode GetOrCreateChild(IAnchor anchor);
    [NotNullAttribute]
public AnchorsTrieNode GetChildNode(IAnchor anchor);
    public void SortAnchors();
    [CompilerGeneratedAttribute]
private static bool <SortAnchors>b__1(IAnchor anchor);
    [CompilerGeneratedAttribute]
private static Nullable`1<int> <SortAnchors>b__2(IAnchor anchor1, IAnchor anchor2);
}
public static class JetBrains.Application.UI.Controls.BulbMenu.BulbKeysBuilder : object {
    [NotNullAttribute]
public static ICollection`1<BulbActionKey> BuildMenuKeys(IEnumerable`1<BulbMenuItem> menuItems);
    private static void ApplySorting(AnchorsTrieNode node);
    private static void BuildMenuKeys(AnchorsTrieNode node, BulbActionKey key, IAnchor ownerGroupingAnchor);
    [NotNullAttribute]
private static AnchorsTrieNode BuildAnchorsTrie(IEnumerable`1<BulbMenuItem> menuItems);
    [NotNullAttribute]
private static List`1<IAnchor> GetPathFromRoot(IBulbMenuItem item);
}
public class JetBrains.Application.UI.Controls.BulbMenu.FeatureSuggestionBulbItems : object {
    [NotNullAttribute]
public static InvisibleAnchor Anchor;
    private LocalList`1<BulbMenuItem> myItems;
    private static FeatureSuggestionBulbItems();
    public void Add(BulbMenuItem item);
    public void AddRange(BulbMenuItem[] items);
    [ItemNotNullAttribute]
[NotNullAttribute]
public BulbMenuItem[] ToArray();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Controls.BulbMenu.FeatureSuggestionBulbItemsProvider : object {
    private static ReadonlyToken ourCookie;
    [CompilerGeneratedAttribute]
private IProperty`1<FeatureSuggestionBulbItems> <Items>k__BackingField;
    [NotNullAttribute]
public IProperty`1<FeatureSuggestionBulbItems> Items { get; private set; }
    public FeatureSuggestionBulbItemsProvider(Lifetime lifetime);
    private static FeatureSuggestionBulbItemsProvider();
    [CompilerGeneratedAttribute]
public IProperty`1<FeatureSuggestionBulbItems> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IProperty`1<FeatureSuggestionBulbItems> value);
    [NotNullAttribute]
[ItemNotNullAttribute]
public BulbMenuItem[] CollectItems(Lifetime menuLifetime);
}
public interface JetBrains.Application.UI.Controls.BulbMenu.IRichTextBulbAction {
    [NotNullAttribute]
public RichText RichText { get; }
    public abstract virtual RichText get_RichText();
}
[DebuggerDisplayAttribute("{RichText.ToString(),nq}")]
public class JetBrains.Application.UI.Controls.BulbMenu.Items.BulbMenuItem : object {
    [CompilerGeneratedAttribute]
private bool <AutoExecuteSingleItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutableItem <ExecutableItem>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    public bool AutoExecuteSingleItem { get; private set; }
    public IExecutableItem ExecutableItem { get; private set; }
    public RichText RichText { get; private set; }
    public IconId IconId { get; private set; }
    public IAnchor Anchor { get; private set; }
    public BulbMenuItem(IExecutableItem bulbAction, RichText richText, IconId iconId, IAnchor anchor, bool autoExecuteSingleItem);
    [CompilerGeneratedAttribute]
public bool get_AutoExecuteSingleItem();
    [CompilerGeneratedAttribute]
private void set_AutoExecuteSingleItem(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutableItem get_ExecutableItem();
    [CompilerGeneratedAttribute]
private void set_ExecutableItem(IExecutableItem value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_RichText();
    [CompilerGeneratedAttribute]
private void set_RichText(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_IconId();
    [CompilerGeneratedAttribute]
private void set_IconId(IconId value);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchor get_Anchor();
    [CompilerGeneratedAttribute]
private void set_Anchor(IAnchor value);
}
public class JetBrains.Application.UI.Controls.BulbMenu.Items.ExecutableItem : object {
    [NotNullAttribute]
private Action myAction;
    public ExecutableItem(Action action);
    public sealed virtual void Execute();
}
public interface JetBrains.Application.UI.Controls.BulbMenu.Items.IBulbMenuItem {
    [NotNullAttribute]
public IExecutableItem ExecutableItem { get; }
    [NotNullAttribute]
public RichText RichText { get; }
    [NotNullAttribute]
public IAnchor Anchor { get; }
    [CanBeNullAttribute]
public IconId IconId { get; }
    public abstract virtual IExecutableItem get_ExecutableItem();
    public abstract virtual RichText get_RichText();
    public abstract virtual IAnchor get_Anchor();
    public abstract virtual IconId get_IconId();
}
public interface JetBrains.Application.UI.Controls.BulbMenu.Items.IExecutableItem {
    public abstract virtual void Execute();
}
public class JetBrains.Application.UI.Controls.BulbMenu.Keys.BulbActionKey : object {
    [CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private BulbActionKey <ParentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutableItem <Executable>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BulbActionKey> <Subitems>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchor <GroupingAnchor>k__BackingField;
    [NotNullAttribute]
public IAnchor Anchor { get; private set; }
    [CanBeNullAttribute]
public BulbActionKey ParentKey { get; public set; }
    [CanBeNullAttribute]
public IExecutableItem Executable { get; public set; }
    [CanBeNullAttribute]
public RichText RichText { get; public set; }
    [CanBeNullAttribute]
public IconId IconId { get; public set; }
    public bool IsSeparator { get; public set; }
    [NotNullAttribute]
public List`1<BulbActionKey> Subitems { get; private set; }
    [CanBeNullAttribute]
public IAnchor GroupingAnchor { get; public set; }
    public BulbActionKey(BulbActionKey ownerKey, IAnchor anchor);
    [CompilerGeneratedAttribute]
public IAnchor get_Anchor();
    [CompilerGeneratedAttribute]
private void set_Anchor(IAnchor value);
    [CompilerGeneratedAttribute]
public BulbActionKey get_ParentKey();
    [CompilerGeneratedAttribute]
public void set_ParentKey(BulbActionKey value);
    [CompilerGeneratedAttribute]
public IExecutableItem get_Executable();
    [CompilerGeneratedAttribute]
public void set_Executable(IExecutableItem value);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
public void set_RichText(RichText value);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public void set_IconId(IconId value);
    [CompilerGeneratedAttribute]
public bool get_IsSeparator();
    [CompilerGeneratedAttribute]
public void set_IsSeparator(bool value);
    [CompilerGeneratedAttribute]
public List`1<BulbActionKey> get_Subitems();
    [CompilerGeneratedAttribute]
private void set_Subitems(List`1<BulbActionKey> value);
    [CompilerGeneratedAttribute]
public IAnchor get_GroupingAnchor();
    [CompilerGeneratedAttribute]
public void set_GroupingAnchor(IAnchor value);
    public void WriteTo(TextWriter writer, string indent);
    public void DescribeOn(IMenuItemDescriptor descriptor);
    public void Clicked();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.BulbMenu.Positions.AnchorPosition : object {
    [NotNullAttribute]
public static IAnchorPosition BasePosition;
    [CompilerGeneratedAttribute]
private static Func`2<IAnchor, IAnchor> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<IAnchor, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IAnchor, IAnchorPosition> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IAnchorPosition, string> CS$<>9__CachedAnonymousMethodDelegate7;
    private static AnchorPosition();
    [PureAttribute]
[NotNullAttribute]
[ExtensionAttribute]
internal static string PresentPositionInRoot(IAnchor anchor);
    [NotNullAttribute]
public static List`1<long> GetSerializableOrderVector(IAnchor anchor);
    [CompilerGeneratedAttribute]
private static IAnchor <PresentPositionInRoot>b__0(IAnchor a);
    [CompilerGeneratedAttribute]
private static bool <PresentPositionInRoot>b__1(IAnchor a);
    [CompilerGeneratedAttribute]
private static IAnchorPosition <PresentPositionInRoot>b__2(IAnchor a);
    [CompilerGeneratedAttribute]
private static string <PresentPositionInRoot>b__3(IAnchorPosition p);
}
internal class JetBrains.Application.UI.Controls.BulbMenu.Positions.AnchorPositionNumeric : object {
    [NotNullAttribute]
public static IAnchorPosition BasePosition;
    [NotNullAttribute]
private static IAnchorPosition ourPosition2;
    [NotNullAttribute]
private static IAnchorPosition ourPosition3;
    [NotNullAttribute]
private static IAnchorPosition ourPosition4;
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    public long Position { get; private set; }
    private AnchorPositionNumeric(long position);
    private static AnchorPositionNumeric();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(long value);
    [PureAttribute]
public sealed virtual IAnchorPosition GetNext();
    public sealed virtual int CompareTo(IAnchorPosition other);
    public virtual string ToString();
}
public interface JetBrains.Application.UI.Controls.BulbMenu.Positions.IAnchorPosition {
    public long Position { get; }
    public abstract virtual long get_Position();
    [PureAttribute]
[NotNullAttribute]
public abstract virtual IAnchorPosition GetNext();
}
public static class JetBrains.Application.UI.Controls.Caption.CaptionUtil : object {
    private static int Ceiling(double d);
    public static Size GetStringRect(string s, Graphics g, Font f);
    public static string CalculateString(string s, Graphics g, Font f, int maxWidth);
    public static string CalculateSpaces(int width, Graphics g, Font f);
}
public class JetBrains.Application.UI.Controls.CheckBoxAutomation : object {
    private static object myTokenSettingTextFromContent;
    private IProperty`1<bool> myIsAppearingChecked;
    private IProperty`1<bool> myIsCheckedLogically;
    private Property`1<bool> myIsEnabled;
    private Property`1<bool> myIsVisible;
    private IProperty`1<RichText> myText;
    private IProperty`1<Nullable`1<bool>> myIsCheckedForChildControl;
    private IProperty`1<bool> myShouldBeDisabled;
    private IProperty`1<bool> myShouldBeHidden;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public IProperty`1<RichText> Text { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsCheckedLogically { get; }
    public IProperty`1<bool> IsAppearingChecked { get; }
    private IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxAutomation.IsCheckedForChildControl { get; }
    public IProperty`1<bool> ShouldBeHidden { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public CheckBoxAutomation(Lifetime lifetime);
    public CheckBoxAutomation(Lifetime lifetime, RichText text);
    private static CheckBoxAutomation();
    private void InitBinding(Lifetime lifetime);
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<RichText> get_Text();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsVisible();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckedLogically();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsAppearingChecked();
    private sealed virtual override IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxAutomation.get_IsCheckedForChildControl();
    public sealed virtual IProperty`1<bool> get_ShouldBeHidden();
    public sealed virtual IProperty`1<bool> get_ShouldBeDisabled();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <InitBinding>b__1(bool b);
    [CompilerGeneratedAttribute]
private static bool <InitBinding>b__2(Nullable`1<bool> mb);
}
internal class JetBrains.Application.UI.Controls.Common.PopupService : object {
}
internal class JetBrains.Application.UI.Controls.Common.Spinner : object {
}
public class JetBrains.Application.UI.Controls.ContextMenuEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Point <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MouseEvent>k__BackingField;
    public Point Location { get; private set; }
    public bool MouseEvent { get; private set; }
    public ContextMenuEventArgs(Point location, bool mouseEvent);
    [CompilerGeneratedAttribute]
public Point get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(Point value);
    [CompilerGeneratedAttribute]
public bool get_MouseEvent();
    [CompilerGeneratedAttribute]
private void set_MouseEvent(bool value);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Controls.Dialogs.DummyPromptWinForms : object {
    public virtual string Prompt(IWin32Window parentWindow, string title, string label, string defaultValue, Func`2<string, string> validator);
}
public interface JetBrains.Application.UI.Controls.Dialogs.IPromptWinForm {
    [CanBeNullAttribute]
public abstract virtual string Prompt(IWin32Window parentWindow, string title, string label, string defaultValue, Func`2<string, string> validator);
}
public enum JetBrains.Application.UI.Controls.DrawMode : Enum {
    public int value__;
    public static DrawMode Normal;
    public static DrawMode Selected;
    public static DrawMode Highlighted;
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Controls.DummyCommonDialogs : object {
    public sealed virtual void EnterStringAsync(Lifetime lifetime, IDataContext context, string title, string label, string initialValue, Action`1<string> callback, Func`2[] validators);
}
public class JetBrains.Application.UI.Controls.EmptyVirtualListBoxItemProvider`2 : object {
    public static EmptyVirtualListBoxItemProvider`2<TListItem, TTag> Instance;
    public int ItemsToDisplay { get; }
    public int ItemCount { get; }
    private static EmptyVirtualListBoxItemProvider`2();
    public sealed virtual int get_ItemsToDisplay();
    public sealed virtual int get_ItemCount();
    public sealed virtual void GetItemsRangeAsync(int start, int end, Action`1<TListItem[]> onItemsAvailable);
    public sealed virtual int GetItemIndex(TTag item);
    public sealed virtual TTag GetItem(int index);
}
public static class JetBrains.Application.UI.Controls.EnumDescriptionCache : object {
    private static Dictionary`2<Type, Object[]> ourValues;
    private static Dictionary`2<Type, Object[]> ourSkippedEnumValues;
    private static Func`3<FieldInfo, Type, bool> ourFieldMatcher;
    [CompilerGeneratedAttribute]
private static Func`2<FieldInfo, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<FieldInfo, Type, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    private static EnumDescriptionCache();
    public static Object[] GetValues(Type type);
    private static object Presentation(FieldInfo field);
    private static object PresentationFromString(FieldInfo field, bool fromString);
    public static object GetValue(Type type, object value, bool toString);
    private static object GetValue(object value, bool toString);
    public static object GetValueBack(Type type, object value, bool fromString);
    [CompilerGeneratedAttribute]
private static bool <GetValues>b__1(FieldInfo f);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__d(FieldInfo f, Type type);
}
public enum JetBrains.Application.UI.Controls.FileSystem.AllowMultipleFiles : Enum {
    public int value__;
    public static AllowMultipleFiles Yes;
    public static AllowMultipleFiles No;
}
public class JetBrains.Application.UI.Controls.FileSystem.ChooseFileType : ValueType {
    public static ChooseFileType AllFiles;
    public static ChooseFileType[] AllFilesOnly;
    [CanBeNullAttribute]
public string DisplayName;
    public string Extension;
    public ChooseFileType(string extension, string displayname);
    private static ChooseFileType();
    [NotNullAttribute]
public static ChooseFileType[] Add(string extension, string displayname);
    public sealed virtual bool Equals(ChooseFileType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ChooseFileType left, ChooseFileType right);
    public static bool op_Inequality(ChooseFileType left, ChooseFileType right);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs : object {
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForFolder(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForFoldersWithMultiselect(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenFile(string windowtitle, ChooseFileType[] filetypes);
    private sealed virtual override ICollection`1<FileSystemPath> JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenMultipleFiles(string windowtitle, ChooseFileType[] filetypes);
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForSaveFile(string windowtitle, ChooseFileType[] filetypes);
}
public interface JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs {
    [CanBeNullAttribute]
public abstract virtual FileSystemPath BrowseForFolder(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    [CanBeNullAttribute]
[ObsoleteAttribute("Must be upgraded to use FileSystemPath.")]
public abstract virtual IEnumerable`1<string> BrowseForFoldersWithMultiselect(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath BrowseForOpenFile(string windowtitle, ChooseFileType[] filetypes);
    [CanBeNullAttribute]
public abstract virtual ICollection`1<FileSystemPath> BrowseForOpenMultipleFiles(string windowtitle, ChooseFileType[] filetypes);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath BrowseForSaveFile(string windowtitle, ChooseFileType[] filetypes);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogsEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<ChooseFileType, string> CS$<>9__CachedAnonymousMethodDelegate14;
    [NotNullAttribute]
[ExtensionAttribute]
public static ChooseFileType[] Add(ChooseFileType[] this, string extension, string displayname);
    [NotNullAttribute]
[ExtensionAttribute]
public static ChooseFileType[] AddAllFiles(ChooseFileType[] this);
    [ExtensionAttribute]
public static void BrowseForOpenFileStreams(ICommonFileDialogs this, string windowtitle, ChooseFileType[] filetypes, AllowMultipleFiles allowmultiple, Action`1<Stream> reader);
    [ExtensionAttribute]
public static void BrowseForSaveFileStream(ICommonFileDialogs this, string title, ChooseFileType[] filetypes, Action`1<Stream> writer);
    [ExtensionAttribute]
public static TResult BrowseForSaveFileStream(ICommonFileDialogs this, string title, ChooseFileType[] filetypes, Func`2<Stream, TResult> writer);
    [NotNullAttribute]
public static string GetDefaultExt(ChooseFileType[] filetypesNormalized);
    [NotNullAttribute]
public static string GetDisplayName(ChooseFileType cft);
    [NotNullAttribute]
public static string GetExtensionTrimmed(ChooseFileType chooseFileType);
    [NotNullAttribute]
public static string MakeFilter(ChooseFileType[] filetypesNormalized);
    [NotNullAttribute]
public static ChooseFileType[] Normalized(ChooseFileType[] filetypes);
    [CompilerGeneratedAttribute]
private static string <MakeFilter>b__13(ChooseFileType cft);
}
public interface JetBrains.Application.UI.Controls.FileSystem.IWindowOwner {
}
public class JetBrains.Application.UI.Controls.FileSystem.WindowsWindowOwner : object {
    [CompilerGeneratedAttribute]
private Window <OwnerAvalon>k__BackingField;
    [CompilerGeneratedAttribute]
private IWin32Window <OwnerWin32>k__BackingField;
    [CanBeNullAttribute]
public Window OwnerAvalon { get; private set; }
    [CanBeNullAttribute]
public IWin32Window OwnerWin32 { get; private set; }
    public WindowsWindowOwner(Window ownerAvalon, IWin32Window ownerWin32);
    [CompilerGeneratedAttribute]
public Window get_OwnerAvalon();
    [CompilerGeneratedAttribute]
private void set_OwnerAvalon(Window value);
    [CompilerGeneratedAttribute]
public IWin32Window get_OwnerWin32();
    [CompilerGeneratedAttribute]
private void set_OwnerWin32(IWin32Window value);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.UI.Controls.GotoByName.BulbMenuComponent : object {
    [NotNullAttribute]
public ISignal`1<bool> BeforeMenuShow;
    [NotNullAttribute]
public ISignal`1<bool> BeforeActionExecuted;
    [NotNullAttribute]
protected Lifetime myLifetime;
    [NotNullAttribute]
private JetPopupMenus myJetPopupMenus;
    [NotNullAttribute]
protected IShellLocks myLocks;
    [NotNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
private FeatureSuggestionBulbItemsProvider myFeatureSuggestionItemsProvider;
    [CompilerGeneratedAttribute]
private IProperty`1<JetPopupMenu> <MenuReady>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionManager <ActionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<DescribeItemEventArgs> CS$<>9__CachedAnonymousMethodDelegatea;
    public Size IconMargin { get; }
    [NotNullAttribute]
public IProperty`1<JetPopupMenu> MenuReady { get; private set; }
    [NotNullAttribute]
public IUIApplication Environment { get; private set; }
    [NotNullAttribute]
public IActionManager ActionManager { get; private set; }
    public BulbMenuComponent(Lifetime lifetime, IUIApplication environment, JetPopupMenus jetPopupMenus, IShellLocks locks, IActionManager actionManager, UsageStatistics usageStatistics, FeatureSuggestionBulbItemsProvider featureSuggestionItemsProvider);
    public virtual Size get_IconMargin();
    [CompilerGeneratedAttribute]
public IProperty`1<JetPopupMenu> get_MenuReady();
    [CompilerGeneratedAttribute]
private void set_MenuReady(IProperty`1<JetPopupMenu> value);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    [CompilerGeneratedAttribute]
public IActionManager get_ActionManager();
    [CompilerGeneratedAttribute]
private void set_ActionManager(IActionManager value);
    public void ShowBulbMenu(IEnumerable`1<BulbMenuItem> menuItems, PopupWindowContextSource context, IAutomation captionAutomation, Action`1<Lifetime> beforeShow, LifetimeDefinition viewLifetimeDefinition);
    public virtual void ShowBulbMenuAdvanced(IEnumerable`1<BulbMenuItem> menuItems, PopupWindowContextSource contextSource, GotoByNameModel gotoByNameModel, Action`1<GotoByNameModel> modelInitHandler, LifetimeDefinition viewLifetimeDefinition, IAutomation captionAutomation, Action`1<Lifetime> beforeShow);
    public void ShowBulbMenu(ICollection`1<BulbActionKey> keys, PopupWindowContextSource context, IAutomation captionControl, Action`1<Lifetime> beforeShow, LifetimeDefinition viewLifetimeDefinition);
    [NotNullAttribute]
public IAutomation GetIconAutomation(IconId iconId);
    protected virtual IAutomation GetCaptionControl(IAutomation menuCaptionAutomation, ICollection`1<BulbActionKey> rootKeys);
    protected void ShowMenuOnKeys(LifetimeDefinition viewLifetimeDefinition, PopupWindowContextSource context, ICollection`1<BulbActionKey> rootItems, IAutomation menuCaptionAutomation, Action`1<Lifetime> beforeShow, ShowWhen showWhen);
    protected virtual void InitMenuGeneral(JetPopupMenu menu, ICollection`1<BulbActionKey> rootItems, LifetimeDefinition viewModelDefinition);
    protected void InitMenuGeneral(JetPopupMenu menu, ICollection`1<BulbActionKey> rootItems, LifetimeDefinition viewModelDefinition, bool terminateAllViewModels);
    [NotNullAttribute]
protected static ICollection`1<BulbActionKey> InsertSeparators(IEnumerable`1<BulbActionKey> subitems);
    [CompilerGeneratedAttribute]
private void <ShowBulbMenuAdvanced>b__0(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <ShowBulbMenuAdvanced>b__2();
    [CompilerGeneratedAttribute]
private static void <InitMenuGeneral>b__9(DescribeItemEventArgs args);
}
public abstract class JetBrains.Application.UI.Controls.GotoByName.GotoByNameController : object {
    protected Property`1<bool> IsComplete;
    protected Property`1<bool> IsNotRunningAsyncAction;
    private GotoByNameModel myModel;
    private IShellLocks myLocks;
    private ReadonlyToken myReadonlyCookie;
    public static object EtcItemKey;
    [NotNullAttribute]
public Property`1<Action> FuncEtcItemExecute;
    [NotNullAttribute]
public ISimpleSignal ItemsGottenDirty;
    private Property`1<AsyncState> myAsyncState;
    private Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private IconId <EtcItemIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<AsyncState, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    public int MenuItemsCountLimit { get; }
    [NotNullAttribute]
public IconId EtcItemIcon { get; protected set; }
    [NotNullAttribute]
public GotoByNameModel Model { get; }
    protected Lifetime Lifetime { get; }
    protected GotoByNameController(Lifetime lifetime, GotoByNameModel model, IShellLocks locks);
    private static GotoByNameController();
    public virtual int get_MenuItemsCountLimit();
    [CompilerGeneratedAttribute]
public IconId get_EtcItemIcon();
    [CompilerGeneratedAttribute]
protected void set_EtcItemIcon(IconId value);
    public GotoByNameModel get_Model();
    protected Lifetime get_Lifetime();
    public JetPopupMenuItem CreateEtcItem();
    protected virtual void BeforeUpdateItems();
    protected abstract virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    public bool ExecuteSelectedItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    protected abstract virtual bool UpdateItems(string filterString, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> itemsConsumer);
    public virtual void GetModelItems(Lifetime querylifetime, string filterString, Action`1<List`1<JetPopupMenuItem>> onCompleted, Action onCancelled);
    private void Init();
    protected virtual void InitDefaultAsyncAction();
    private void OnGottenDirty();
    protected virtual void ScheduleAfterCommit();
    protected virtual void SpawnInterruptableActivity();
    private void AsyncRun(string sFilterText, SynchronizedLifetime lifetime, GroupingEvent itemsAddedEvent);
    private void AsyncStart();
    protected virtual void AppendToModel(AddItemsBehavior behavior, List`1<JetPopupMenuItem> arItems, string sFilterText);
    private void InitDataFlow();
    private void InitLogging();
    protected virtual void InternalExecuteItem(JetPopupMenuItem item, IShellLocks locks);
    [CompilerGeneratedAttribute]
private static bool <InitDefaultAsyncAction>b__9(AsyncState state);
    [CompilerGeneratedAttribute]
private void <InitDefaultAsyncAction>b__a();
    [CompilerGeneratedAttribute]
private void <InitDefaultAsyncAction>b__b();
    [CompilerGeneratedAttribute]
private bool <SpawnInterruptableActivity>b__d();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__1c();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__1d(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__1e(Lifetime lifeFExec, Action FExec);
}
public static class JetBrains.Application.UI.Controls.GotoByName.GotoByNameDataConstants : object {
    public static DataConstant`1<SearchTextData> CurrentSearchText;
    private static GotoByNameDataConstants();
}
public class JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel : object {
    public static bool OptionTrace;
    [NotNullAttribute]
public IProperty`1<string> CaptionText;
    [NotNullAttribute]
public IProperty`1<string> CheckBoxText;
    [NotNullAttribute]
public IProperty`1<string> LabelText;
    [NotNullAttribute]
public IProperty`1<string> FilterText;
    [NotNullAttribute]
public IProperty`1<int> SelectedIndex;
    [NotNullAttribute]
public IProperty`1<bool> AutoselectFirstItem;
    [NotNullAttribute]
public ISignal`1<JetPopupMenuItem> IncomingExecuteItem;
    [NotNullAttribute]
public IProperty`1<bool> IsCheckBoxChecked;
    [NotNullAttribute]
public IProperty`1<bool> IsCheckBoxCheckerVisible;
    [NotNullAttribute]
public IProperty`1<bool> IsCheckBoxVisible;
    [NotNullAttribute]
public IProperty`1<bool> IsReady;
    [NotNullAttribute]
public IListEvents`1<JetPopupMenuItem> Items;
    [NotNullAttribute]
public IProperty`1<string> NotReadyMessage;
    [NotNullAttribute]
public ISignal`1<bool> CloseBeforeExecute;
    [NotNullAttribute]
public IListEvents`1<IToolBarItemInfo> ToolbarButtons;
    [NotNullAttribute]
public IProperty`1<bool> CloseOnExecute;
    [NotNullAttribute]
public Property`1<string> CueBannerText;
    public GotoByNameModel(Lifetime lifetime);
    private static GotoByNameModel();
    private void InitLogging(Lifetime lifetime);
}
public static class JetBrains.Application.UI.Controls.GotoByName.GotoByNameUtil : object {
    public static TextStyle HighlightingStyle;
    private static GotoByNameUtil();
    public static void HighlightMatchingChars(RichText text, MatchingInfo matchingInfo);
    public static void HighlightMatchingChars(IMenuItemDescriptor descriptor, MatchingInfo matchingInfo);
    public static void HighlightMatchingChars(JetPopupMenuItem jpmItem, MatchingInfo matchingInfo);
}
public class JetBrains.Application.UI.Controls.GotoByName.SwitchToGotoActionController : object {
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private JetPopupMenu myMenu;
    [NotNullAttribute]
private JetPopupMenuDoc myDocument;
    [NotNullAttribute]
private JetHashSet`1<JetPopupMenuItem> myDefaultItems;
    [NotNullAttribute]
private JetHashSet`1<JetPopupMenuItem> myDefaultItemsPlain;
    [NotNullAttribute]
private Action`1<GotoByNameModel> myModelInitHandler;
    [NotNullAttribute]
private GotoByNameModel myAdvancedSearchModel;
    [NotNullAttribute]
private IAutomation myDefaultCaption;
    [CanBeNullAttribute]
private LifetimeDefinition myDataFlowLifetimeDef;
    private bool myModelInitialized;
    [NotNullAttribute]
private IIdentifierMatcher myIdentifierMatcher;
    [NotNullAttribute]
private IMenuItemsContainer myItemsContainer;
    [NotNullAttribute]
private RichTextAutomation myAdvancedCaption;
    [NotNullAttribute]
private ToolbarItemInfo myDefaultToolbarItemInfo;
    [CanBeNullAttribute]
private MenuItemsFilter myFilter;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AdvancedSearchIsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<BulbActionKey, BulbActionKey> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<BulbActionKey, IExecutableItem> CS$<>9__CachedAnonymousMethodDelegate10;
    [NotNullAttribute]
public IProperty`1<bool> AdvancedSearchIsActive { get; private set; }
    public SwitchToGotoActionController(LifetimeDefinition lifetimeDefinition, JetPopupMenu menu, Action`1<GotoByNameModel> modelInitHandler, GotoByNameModel advancedSearchModel, IAutomation defaultCaption);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AdvancedSearchIsActive();
    [CompilerGeneratedAttribute]
private void set_AdvancedSearchIsActive(IProperty`1<bool> value);
    private void Init();
    public void InitAdvancedSearch();
    private ICollection`1<BulbActionKey> TraverseBreadthFirst(List`1<BulbActionKey> roots);
    private void AdjustMatcher(BeforePropertyChangedEventArgs`1<string> beforePropertyChangedEventArgs);
    private void DescribeDefaultItems(PropertyChangedEventArgs`1<string> propertyChangedEventArgs);
    private void InitDefaultMenu();
    private double MatchWithPriority(JetPopupMenuItem item, Func`2<string, double> pieceOfIt);
    [PureAttribute]
private static bool ShouldShowInAdvancedSearchMode(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <Init>b__2(bool value);
    [CompilerGeneratedAttribute]
private void <Init>b__3(Lifetime lifetimePredicate, Func`2<string, double> prioFunc);
    [CompilerGeneratedAttribute]
private void <Init>b__6(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <Init>b__7(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <Init>b__8(Lifetime lt);
    [CompilerGeneratedAttribute]
private void <InitAdvancedSearch>b__b();
    [CompilerGeneratedAttribute]
private static BulbActionKey <TraverseBreadthFirst>b__d(BulbActionKey k);
    [CompilerGeneratedAttribute]
private static IExecutableItem <TraverseBreadthFirst>b__e(BulbActionKey f);
}
public interface JetBrains.Application.UI.Controls.ICheckBoxAutomation {
    public IProperty`1<RichText> Text { get; }
    public IProperty`1<bool> ShouldBeHidden { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsCheckedLogically { get; }
    public IProperty`1<bool> IsAppearingChecked { get; }
    public IProperty`1<Nullable`1<bool>> IsCheckedForChildControl { get; }
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<RichText> get_Text();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeHidden();
    public abstract virtual IProperty`1<bool> get_IsVisible();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeDisabled();
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsCheckedLogically();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsAppearingChecked();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<Nullable`1<bool>> get_IsCheckedForChildControl();
}
public interface JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel {
    public IProperty`1<RichText> Text { get; }
    public IProperty`1<bool> ShouldBeHidden { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsCheckedLogically { get; }
    public IProperty`1<bool> IsAppearingChecked { get; }
    public IProperty`1<Nullable`1<bool>> IsCheckedForChildControl { get; }
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<RichText> get_Text();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeHidden();
    public abstract virtual IProperty`1<bool> get_IsVisible();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeDisabled();
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsCheckedLogically();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsAppearingChecked();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<Nullable`1<bool>> get_IsCheckedForChildControl();
}
public interface JetBrains.Application.UI.Controls.IClosableViewModel {
    public IProperty`1<bool> IsClosed { get; }
    public abstract virtual IProperty`1<bool> get_IsClosed();
    public abstract virtual void Close();
}
public interface JetBrains.Application.UI.Controls.ICommonDialogs {
    public abstract virtual void EnterStringAsync(Lifetime lifetime, IDataContext context, string title, string label, string initialValue, Action`1<string> callback, Func`2[] validators);
}
public class JetBrains.Application.UI.Controls.IconAndTooltipAutomation : AAutomation {
    public IconId IconId;
    public RichText Tooltip;
    public IconAndTooltipAutomation(IconId icon, RichText tooltip);
    [NotNullAttribute]
public static IconAndTooltipAutomation Create(RichText tooltip);
}
public interface JetBrains.Application.UI.Controls.IConstrainableControl {
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public abstract virtual bool get_AutoActivate();
    public abstract virtual void set_AutoActivate(bool value);
    public abstract virtual ISimpleSignal get_WantsResize();
    public abstract virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public abstract virtual void SetLayout(LayoutResult layout);
}
public interface JetBrains.Application.UI.Controls.IHaveRenderParams {
    [NotNullAttribute]
public IProperty`1<RenderParams> RenderParams { get; }
    public abstract virtual IProperty`1<RenderParams> get_RenderParams();
}
public interface JetBrains.Application.UI.Controls.IItemPainter`1 {
    public abstract virtual bool IsHandled(T item);
    public abstract virtual Size GetSize(T item, IGraphicsContainer g);
    public abstract virtual void Draw(T item, Graphics g, Rectangle rect, DrawMode drawMode, bool hovered);
}
public interface JetBrains.Application.UI.Controls.ITopLevelOwner {
    public abstract virtual bool GetTopLevel();
}
public interface JetBrains.Application.UI.Controls.IVirtualListBoxItemProvider`2 {
    public int ItemsToDisplay { get; }
    public int ItemCount { get; }
    public abstract virtual int get_ItemsToDisplay();
    public abstract virtual int get_ItemCount();
    public abstract virtual void GetItemsRangeAsync(int start, int end, Action`1<TListItem[]> onItemsAvailable);
    public abstract virtual int GetItemIndex(TTag item);
    public abstract virtual TTag GetItem(int index);
}
public interface JetBrains.Application.UI.Controls.IWindowlessControl {
    public Rectangle Bounds { get; }
    public ISimpleSignal GottenDirty { get; }
    public abstract virtual Rectangle get_Bounds();
    public abstract virtual ISimpleSignal get_GottenDirty();
    public abstract virtual void Paint(Graphics g);
    public abstract virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
}
public class JetBrains.Application.UI.Controls.JetLoaderAnimationAutomation : AAutomation {
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ApproveItemEventArgs : ItemEventArgs {
    protected bool myApproved;
    public bool Approved { get; public set; }
    public ApproveItemEventArgs(JetPopupMenu menu, object key);
    public bool get_Approved();
    public void set_Approved(bool value);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.DescribeItemEventArgs : ItemEventArgs {
    [NotNullAttribute]
protected IMenuItemDescriptor myDescriptor;
    [NotNullAttribute]
public IMenuItemDescriptor Descriptor { get; }
    public DescribeItemEventArgs(JetPopupMenu menu, object key, IMenuItemDescriptor descriptor);
    public IMenuItemDescriptor get_Descriptor();
}
public static class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.FixedSizeViewport : object {
    public static IMenuItemsFilter CreateFilter(Lifetime lifetime, int maxSize, JetPopupMenuItem etcItem);
    public static IMenuItemsFilter CreateFilter(Lifetime lifetime, int maxSize, Func`1<JetPopupMenuItem> getEtcItem);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IFixedSizeMarker {
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner {
    public abstract virtual void AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsContainer {
    public IListEvents`1<IMenuItemsFilter> Filters { get; }
    public abstract virtual IListEvents`1<IMenuItemsFilter> get_Filters();
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter {
    public ISignal`1<JetPopupMenuItem> IncomingDelete { get; }
    public ISignal`1<JetPopupMenuItem> IncomingExecute { get; }
    public Signal`1<JetPopupMenuItem> IncomingExpand { get; }
    public IListEvents`1<JetPopupMenuItem> InputItems { get; }
    public IProperty`1<bool> IsBusy { get; }
    public IListEvents`1<JetPopupMenuItem> OutputItems { get; }
    public abstract virtual ISignal`1<JetPopupMenuItem> get_IncomingDelete();
    public abstract virtual ISignal`1<JetPopupMenuItem> get_IncomingExecute();
    public abstract virtual Signal`1<JetPopupMenuItem> get_IncomingExpand();
    public abstract virtual IListEvents`1<JetPopupMenuItem> get_InputItems();
    public abstract virtual IProperty`1<bool> get_IsBusy();
    public abstract virtual IListEvents`1<JetPopupMenuItem> get_OutputItems();
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuColumnId : Enum {
    public int value__;
    public static JetPopupMenuColumnId Icon;
    public static JetPopupMenuColumnId Label;
    public static JetPopupMenuColumnId MAX;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc : object {
    [NotNullAttribute]
private static ReadonlyToken myReadonlyCookie;
    public ISignal`1<ItemExpandedEventExArgs> ItemExpanded;
    public IProperty`1<bool> ArrowKeysWrapAroundEnds;
    public IProperty`1<bool> AutoselectFirstItem;
    public ISimpleSignal BeforeExecuteAction;
    [NotNullAttribute]
public IListEvents`1<JetPopupMenuItem> CurrentItems;
    public ISignal`1<ItemIndexEventArgs> ItemChanged;
    [NotNullAttribute]
public IMenuItemsContainer ItemsContainer;
    [NotNullAttribute]
public IProperty`1<KeyboardAccelerationFlags> KeyboardAcceleration;
    public IProperty`1<JetPopupMenuItem> LastSelectedItem;
    [NotNullAttribute]
public MnemonicStore Mnemonics;
    [NotNullAttribute]
public SearchHost QuickSearch;
    [NotNullAttribute]
public IProperty`1<int> SelectedIndex;
    public IProperty`1<JetPopupMenuItem> SelectedItem;
    [NotNullAttribute]
public IListEvents`1<IToolBarItemInfo> ToolbarButtons;
    [CompilerGeneratedAttribute]
private static Action`1<ItemIndexEventArgs> CS$<>9__CachedAnonymousMethodDelegatef;
    public JetPopupMenuDoc(Lifetime lifetime, ISettingsStore settings);
    private static JetPopupMenuDoc();
    public List`1<JetPopupMenuItem> ApplyCurrentPassFilter(ICollection`1<JetPopupMenuItem> raw);
    public bool DeleteSelectedItem();
    public string DumpItemsToString();
    public void DumpItemsToXaml(XmlWriter writer);
    public bool ExecuteMnemonic(char ch, Boolean& bMnemonicWasAccepted);
    public bool ExecuteSelectedItem();
    public bool ExpandSelectedItem();
    public int GetNextIndex(int nOriginalIndex, NextItemDir direction, EndBehavior endbehavior, AllowedItems alloweditems);
    public void SelectNextItem(NextItemDir direction);
    private void InitDataFlow(Lifetime lifetime);
    private void InitLogging(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private bool <ApplyCurrentPassFilter>b__0(JetPopupMenuItem candidate);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__1(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__5(BeforePropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__6(PropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__7(PropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__8();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__9(PropertyChangedEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__a(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__b();
    [CompilerGeneratedAttribute]
private static void <InitLogging>b__e(ItemIndexEventArgs args);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem : object {
    protected RichText myDisplayName;
    protected IconId myIcon;
    protected object myKey;
    protected Nullable`1<char> myMnemonic;
    protected RichText myShortcutText;
    protected MenuItemStyle myStyle;
    protected object myTag;
    protected IconId myTailGlyph;
    protected RichText myTooltipText;
    [CanBeNullAttribute]
private string myManualMnemonic;
    private static IconId ourExpandableMenuItemTailGlyph;
    public static string StubText { get; }
    public RichText DisplayName { get; }
    public IconId Icon { get; }
    public bool IsEnabled { get; }
    public bool IsWithActions { get; }
    public bool IsExpandable { get; }
    public bool IsGroupHeader { get; }
    public bool IsSeparator { get; }
    public object Key { get; }
    [CanBeNullAttribute]
public string ManualMnemonic { get; }
    public Nullable`1<char> Mnemonic { get; public set; }
    public RichText ShortcutText { get; }
    public MenuItemStyle Style { get; }
    public object Tag { get; }
    public IconId TailGlyph { get; }
    public RichText TooltipText { get; }
    public JetPopupMenuItem(object key, IMenuItemDescriptor descriptor);
    private static JetPopupMenuItem();
    public static string get_StubText();
    public RichText get_DisplayName();
    public IconId get_Icon();
    public bool get_IsEnabled();
    public bool get_IsWithActions();
    public bool get_IsExpandable();
    public bool get_IsGroupHeader();
    public bool get_IsSeparator();
    public object get_Key();
    public string get_ManualMnemonic();
    public Nullable`1<char> get_Mnemonic();
    public void set_Mnemonic(Nullable`1<char> value);
    public RichText get_ShortcutText();
    public MenuItemStyle get_Style();
    public object get_Tag();
    public IconId get_TailGlyph();
    public RichText get_TooltipText();
    public void DumpToXaml(XmlWriter writer);
    protected void Init(IMenuItemDescriptor descriptor);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemNoAdornmentAdorner : object {
    public static IJetPopupMenuItemAdorner Default;
    private static JetPopupMenuItemNoAdornmentAdorner();
    public sealed virtual void AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewHitTestResult : Enum {
    public int value__;
    public static JetPopupMenuItemViewHitTestResult Above;
    public static JetPopupMenuItemViewHitTestResult Below;
    public static JetPopupMenuItemViewHitTestResult Bulk;
    public static JetPopupMenuItemViewHitTestResult ActiveTailGlyph;
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags : Enum {
    public int value__;
    public static JetPopupMenuItemViewPresentationFlags None;
    public static JetPopupMenuItemViewPresentationFlags IsSelected;
    public static JetPopupMenuItemViewPresentationFlags ExcludeUpperMargin;
    public static JetPopupMenuItemViewPresentationFlags IsExpanded;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsContainer : MenuItemsFilter {
    private IListEvents`1<IMenuItemsFilter> myFilters;
    private SequentialLifetimes myPushFilterLinks;
    [CompilerGeneratedAttribute]
private static Func`2<IMenuItemsFilter, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    public IListEvents`1<IMenuItemsFilter> Filters { get; }
    public MenuItemsContainer(Lifetime lifetime);
    private void InitDataFlow(Lifetime lifetime);
    public sealed virtual IListEvents`1<IMenuItemsFilter> get_Filters();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__0(AddRemoveIndexEventArgs`1<IMenuItemsFilter> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__2(Lifetime lifeFilter, IMenuItemsFilter filter);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__4();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__1(Lifetime lifeNext);
    [CompilerGeneratedAttribute]
private static bool <InitDataFlow>b__5(IMenuItemsFilter filter);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter : object {
    [NotNullAttribute]
private PropertyId`1<IMenuItemsFilter> myId;
    private ISignal`1<JetPopupMenuItem> myIncomingDelete;
    private ISignal`1<JetPopupMenuItem> myIncomingExecute;
    private Signal`1<JetPopupMenuItem> myIncomingExpand;
    private IListEvents`1<JetPopupMenuItem> myInputItems;
    private IProperty`1<bool> myIsBusy;
    private IListEvents`1<JetPopupMenuItem> myOutputItems;
    [NotNullAttribute]
public PropertyId`1<IMenuItemsFilter> Id { get; }
    public ISignal`1<JetPopupMenuItem> IncomingDelete { get; }
    public ISignal`1<JetPopupMenuItem> IncomingExecute { get; }
    public Signal`1<JetPopupMenuItem> IncomingExpand { get; }
    public IListEvents`1<JetPopupMenuItem> InputItems { get; }
    public IProperty`1<bool> IsBusy { get; }
    public IListEvents`1<JetPopupMenuItem> OutputItems { get; }
    public MenuItemsFilter(Lifetime lifetime, string id);
    public PropertyId`1<IMenuItemsFilter> get_Id();
    public sealed virtual ISignal`1<JetPopupMenuItem> get_IncomingDelete();
    public sealed virtual ISignal`1<JetPopupMenuItem> get_IncomingExecute();
    public sealed virtual Signal`1<JetPopupMenuItem> get_IncomingExpand();
    public sealed virtual IListEvents`1<JetPopupMenuItem> get_InputItems();
    public sealed virtual IProperty`1<bool> get_IsBusy();
    public sealed virtual IListEvents`1<JetPopupMenuItem> get_OutputItems();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore : object {
    [NotNullAttribute]
protected BidirectionalMapOnDictionary`2<JetPopupMenuItem, char> myMapMnemonicToItem;
    public static char PreprocessMnemonic(char ch);
    public static string RemoveMnemonicMark(string text);
    public static void RemoveMnemonicMark(string escaped, String& stripped, Int32& nEscapedMnemonicIndex, Int32& nStrippedMnemonicIndex);
    [NotNullAttribute]
public IList`1<JetPopupMenuItem> GetItemsByMnemonic(char ch);
    public bool IsMnemonicUsed(char ch);
    public char RegisterMnemonic(char ch, JetPopupMenuItem item);
    public char RegisterMnemonicAndHighlight(char ch, JetPopupMenuItem item, int index);
    [CanBeNullAttribute]
public JetPopupMenuItem TryGetItemByMnemonic(char ch);
    public Nullable`1<char> TryGetMnemonicByItem(JetPopupMenuItem item);
    public bool TryUnregister(JetPopupMenuItem item);
    public void Watch(Lifetime lifetime, IListEvents`1<JetPopupMenuItem> items);
    protected void AssignMnemonic_Auto(JetPopupMenuItem item);
    protected void AssignMnemonic_Manual(JetPopupMenuItem item);
    protected void AssignMnemonic_Manual_Free(JetPopupMenuItem item, string sManualMnemonic);
    protected void AssignMnemonic_Manual_Positioned(JetPopupMenuItem item, String& sManualMnemonic);
    [CompilerGeneratedAttribute]
private void <Watch>b__0(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <Watch>b__1(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <Watch>b__2(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost : object {
    private Lifetime myLifetime;
    private PropertyBindingDeferred`1<string> myBindingPendingInput;
    private bool myCreatedFilter;
    private ReadonlyToken myReadonlyCookie;
    public Property`1<string> InputString;
    public Property`1<bool> IsActive;
    public Property`1<bool> IsAlwaysActive;
    public Property`1<bool> IsAlwaysActiveCaption;
    public Property`1<bool> IsPending;
    public Property`1<bool> IsValid;
    public Property`1<Func`2<string, double>> SearchPredicate;
    public Property`1<string> SearchString;
    public Property`1<IdentifierMatcher> Matcher;
    public Property`1<IJetPopupMenuItemAdorner> SearchHitAdorner;
    public Property`1<string> HintText;
    [CompilerGeneratedAttribute]
private static Func`2<string, double> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<string, double> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Action`1<BeforePropertyChangedEventArgs`1<bool>> CS$<>9__CachedAnonymousMethodDelegate18;
    public SearchHost(Lifetime lifetime, ISettingsStore settings);
    private static double MatchWithPriority(JetPopupMenuItem item, Func`2<string, double> predicate);
    [CanBeNullAttribute]
private static Tuple`3<Func`2<string, double>, IdentifierMatcher, IJetPopupMenuItemAdorner> ProcessSearchString(string searchstring);
    public void CommitPendingChanges();
    public IMenuItemsFilter CreateFilter(Lifetime filterLt);
    private void InitDataFlow(Lifetime lifetime, ISettingsStore settings);
    [CompilerGeneratedAttribute]
private static double <.ctor>b__0(string _);
    [CompilerGeneratedAttribute]
private void <CreateFilter>b__d();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__12(Lifetime lifetime1, string s);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__14(Lifetime lifetimeIsAlwaysActive);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__16();
    [CompilerGeneratedAttribute]
private static double <InitDataFlow>b__13(string o);
    [CompilerGeneratedAttribute]
private static void <InitDataFlow>b__15(BeforePropertyChangedEventArgs`1<bool> args);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHostMatcherHitHighlightAdorner : object {
    private IDictionary`2<Pair`2<JetPopupMenuItem, Pair`2<string, string>>, Pair`2<RichText, RichText>> myCacheAdornments;
    [NotNullAttribute]
private IdentifierMatcher myMatcher;
    public SearchHostMatcherHitHighlightAdorner(IdentifierMatcher matcher);
    private sealed virtual override void JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner.AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHostRegexHitHighlightAdorner : object {
    private IDictionary`2<Pair`2<JetPopupMenuItem, Pair`2<string, string>>, Pair`2<RichText, RichText>> myCacheAdornments;
    [NotNullAttribute]
public Regex Regex;
    [CompilerGeneratedAttribute]
private static Func`2<Group, TextRange> CS$<>9__CachedAnonymousMethodDelegate1;
    public SearchHostRegexHitHighlightAdorner(Regex regex);
    private sealed virtual override void JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner.AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
    [CompilerGeneratedAttribute]
private static TextRange <JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner.AdornItemText>b__0(Group g);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.IJetPopupMenuOverlordView {
    public abstract virtual void Show(bool isModal);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor {
    [CanBeNullAttribute]
public IconId Icon { get; public set; }
    [CanBeNullAttribute]
public string Mnemonic { get; public set; }
    [CanBeNullAttribute]
public RichText ShortcutText { get; public set; }
    public MenuItemStyle Style { get; public set; }
    [CanBeNullAttribute]
public object Tag { get; public set; }
    [CanBeNullAttribute]
public IconId TailGlyph { get; public set; }
    [NotNullAttribute]
public RichText Text { get; public set; }
    [CanBeNullAttribute]
public RichText Tooltip { get; public set; }
    public abstract virtual IconId get_Icon();
    public abstract virtual void set_Icon(IconId value);
    public abstract virtual string get_Mnemonic();
    public abstract virtual void set_Mnemonic(string value);
    public abstract virtual RichText get_ShortcutText();
    public abstract virtual void set_ShortcutText(RichText value);
    public abstract virtual MenuItemStyle get_Style();
    public abstract virtual void set_Style(MenuItemStyle value);
    public abstract virtual object get_Tag();
    public abstract virtual void set_Tag(object value);
    public abstract virtual IconId get_TailGlyph();
    public abstract virtual void set_TailGlyph(IconId value);
    public abstract virtual RichText get_Text();
    public abstract virtual void set_Text(RichText value);
    public abstract virtual RichText get_Tooltip();
    public abstract virtual void set_Tooltip(RichText value);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ItemEventArgs : EventArgs {
    protected object myKey;
    protected JetPopupMenu myMenu;
    public object Key { get; }
    public JetPopupMenu Menu { get; }
    public ItemEventArgs(JetPopupMenu menu, object key);
    public object get_Key();
    public JetPopupMenu get_Menu();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ItemExpandedEventArgs : ItemEventArgs {
    [NotNullAttribute]
public Lifetime SubmenuLifetime;
    [NotNullAttribute]
public JetPopupMenu Submenu;
    public ItemExpandedEventArgs(Lifetime lifetimeSubmenu, JetPopupMenu menu, object key, JetPopupMenu submenu);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ItemExpandedEventExArgs : ItemExpandedEventArgs {
    public JetPopupMenuItem ExpandedItem;
    public ItemExpandedEventExArgs(Lifetime lifetimeSubmenu, JetPopupMenu menu, JetPopupMenuItem item, JetPopupMenu submenu);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo {
    public ISignal`1<JetPopupMenuDoc> Clicked { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IProperty`1<IPresentableItem> Presentation { get; }
    [NotNullAttribute]
public Keys[] Shortcuts { get; }
    public RichText TooltipText { get; }
    public abstract virtual ISignal`1<JetPopupMenuDoc> get_Clicked();
    public abstract virtual IProperty`1<bool> get_IsChecked();
    public abstract virtual IProperty`1<IPresentableItem> get_Presentation();
    public abstract virtual Keys[] get_Shortcuts();
    public abstract virtual RichText get_TooltipText();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu : object {
    private bool myCloseOnExecute;
    private Lazy`1<JetPopupMenuDoc> myMenuDocument;
    [NotNullAttribute]
private IAutomation myNoItemsBanner;
    [NotNullAttribute]
private IListEvents`1<IToolBarItemInfo> myToolbarButtons;
    [NotNullAttribute]
private IProperty`1<IAutomation> myCaption;
    [NotNullAttribute]
private ISignal`1<ItemExpandedEventArgs> myItemExpanded;
    [NotNullAttribute]
private IListEvents`1<object> myItemKeys;
    private ReadonlyToken myReadonlyCookie;
    [NotNullAttribute]
public Signal`1<DescribeItemEventArgs> DescribeItem;
    [NotNullAttribute]
public Signal`1<object> ItemClicked;
    [NotNullAttribute]
public Signal`1<ApproveItemEventArgs> ItemDeleted;
    public Property`1<KeyboardAccelerationFlags> KeyboardAcceleration;
    public IProperty`1<object> SelectedItemKey;
    private IProperty`1<bool> myCaptureMouseInitially;
    [CanBeNullAttribute]
private ITooltipManager myTooltipManager;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    private IUIApplicationSimple myUiApp;
    [CanBeNullAttribute]
public IWindowsHookManager WindowsHookManager;
    [CanBeNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
public IProperty`1<bool> IsHighlightingSearchHostResults;
    [CompilerGeneratedAttribute]
private IPopupWindowContext <PopupWindowContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupWindowContextSource <PopupWindowContextSource>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<DescribeItemEventArgs> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<object> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`1<ItemExpandedEventArgs> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`1<SimpleMenuItem> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Action`1<BeforeAddRemoveIndexEventArgs`1<object>> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<JetPopupMenuItem, object> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<ItemExpandedEventExArgs, ItemExpandedEventArgs> CS$<>9__CachedAnonymousMethodDelegate1c;
    public IProperty`1<IAutomation> Caption { get; }
    public IProperty`1<bool> CaptureMouseInitially { get; }
    public bool CloseOnExecute { get; public set; }
    [CanBeNullAttribute]
public JetPopupMenuDoc Document { get; }
    public ISignal`1<ItemExpandedEventArgs> ItemExpanded { get; }
    public IListEvents`1<object> ItemKeys { get; }
    [NotNullAttribute]
public IAutomation NoItemsBanner { get; public set; }
    [CanBeNullAttribute]
public IPopupWindowContext PopupWindowContext { get; public set; }
    [CanBeNullAttribute]
public PopupWindowContextSource PopupWindowContextSource { get; public set; }
    public IListEvents`1<IToolBarItemInfo> ToolbarButtons { get; }
    public JetPopupMenu(OuterLifetime lifetime, IUIApplicationSimple uiapp, IIsApplicationActiveState isApplicationActiveState, ITooltipManager tooltipman, IWindowsHookManager windowsHookManager, ISettingsStore settstore);
    public IProperty`1<IAutomation> get_Caption();
    public IProperty`1<bool> get_CaptureMouseInitially();
    public bool get_CloseOnExecute();
    public void set_CloseOnExecute(bool value);
    public JetPopupMenuDoc get_Document();
    public ISignal`1<ItemExpandedEventArgs> get_ItemExpanded();
    public IListEvents`1<object> get_ItemKeys();
    public IAutomation get_NoItemsBanner();
    public void set_NoItemsBanner(IAutomation value);
    [CompilerGeneratedAttribute]
public IPopupWindowContext get_PopupWindowContext();
    [CompilerGeneratedAttribute]
public void set_PopupWindowContext(IPopupWindowContext value);
    [CompilerGeneratedAttribute]
public PopupWindowContextSource get_PopupWindowContextSource();
    [CompilerGeneratedAttribute]
public void set_PopupWindowContextSource(PopupWindowContextSource value);
    public IListEvents`1<IToolBarItemInfo> get_ToolbarButtons();
    public void CaptureIfMouseDown();
    public void SetItems(SimpleMenuItem[] menuitems);
    public JetPopupMenuStatusAndViewDef InitViewModel(ShowWhen when, LifetimeDefinition lifetimeDefinitionOptional);
    private void CheckThread();
    private void OnMenuItemDeleted(JetPopupMenuItem item);
    private JetPopupMenuStatus ShowCore_CutoffEarly(ShowWhen when, ICollection`1<object> keys);
    private JetPopupMenuStatus ShowCore_CutoffLate(ShowWhen when, ICollection`1<JetPopupMenuItem> items);
    [CompilerGeneratedAttribute]
private JetPopupMenuDoc <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static void <SetItems>b__2(DescribeItemEventArgs args);
    [CompilerGeneratedAttribute]
private static void <SetItems>b__4(object key);
    [CompilerGeneratedAttribute]
private static void <SetItems>b__6(ItemExpandedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <SetItems>b__5(SimpleMenuItem item);
    [CompilerGeneratedAttribute]
private static void <InitViewModel>b__10(BeforeAddRemoveIndexEventArgs`1<object> args);
    [CompilerGeneratedAttribute]
private JetPopupMenuItem <InitViewModel>b__14(object key);
    [CompilerGeneratedAttribute]
private static object <InitViewModel>b__17(JetPopupMenuItem arg);
    [CompilerGeneratedAttribute]
private static ItemExpandedEventArgs <InitViewModel>b__18(ItemExpandedEventExArgs args);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet : object {
    public static double WindowToGradientHigh;
    public static double WindowToMenuBack;
    public static double WindowToSelectionBody;
    public static double SelectionToChecked;
    public Color Text;
    public Color Background;
    public Color EditboxBackground;
    public Color Border;
    public Color EditboxBorder;
    public Color SelectedText;
    public Color DisabledText;
    public Color EditboxText;
    public Color EditboxHighlightedText;
    public Color EditboxErrorText;
    public Color IconColumnLeft;
    public Color IconColumnRight;
    public Color IconColumnMiddle;
    public Color ScrollArrowDisabled;
    public Color ScrollArrowEnabled;
    public Color SelectionBorder;
    public bool SelectionFillHasAlpha;
    public Color SelectionFillTop;
    public Color SelectionFillCenterTop;
    public Color SelectionFillCenterBottom;
    public Color SelectionFillBottom;
    public Color Separator;
    public Color TitleRowBottom;
    public Color TitleRowTop;
    public Color CheckedAndSelectedFillTop;
    public Color CheckedAndSelectedFillCenter;
    public Color CheckedAndSelectedFillBottom;
    public Color TitleRowCenter;
    public Color SearchHitText;
    public Color SearchHitFill;
    public JetPopupMenuColorSet(ITheming thememan);
    private static JetPopupMenuColorSet();
    private void AssertIsOpaque();
    public static Color Blend(Color a, Color b, double factor, Graphics g);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus : object {
    protected Lifetime Lifetime;
    protected IIsApplicationActiveState myIsApplicationActiveState;
    protected ISettingsStore mySettstore;
    protected IUIApplicationSimple myUiapp;
    protected ITooltipManager Tooltipman;
    protected IWindowsHookManager WindowsHookManager;
    public JetPopupMenus(Lifetime lifetime, IUIApplicationSimple uiapp, IIsApplicationActiveState isApplicationActiveState, ITooltipManager tooltipman, IWindowsHookManager windowsHookManager, ISettingsStore settstore);
    [NotNullAttribute]
public JetPopupMenu Create();
    [NotNullAttribute]
public JetPopupMenu CreateWithLifetime(Lifetime lifetime);
    public void Show(Lifetime lifetime, ShowWhen when, Action`2<Lifetime, JetPopupMenu> FFillMenu);
    public void Show(JetPopupMenu menu, LifetimeDefinition lifetimeDefinitionOptional);
    public void Show(JetPopupMenu menu, ShowWhen when, LifetimeDefinition lifetimeDefinitionOptional);
    public void ShowIfMultiple(JetPopupMenu menu, LifetimeDefinition lifetimeDefinitionOptional);
    public void ShowModal(JetPopupMenu menu, ShowWhen when, LifetimeDefinition lifetimeDefinitionOptional);
    public void ShowModal(ShowWhen when, Action`2<Lifetime, JetPopupMenu> FFillMenu);
    protected void CreateSubmenu(Lifetime lifeShow, JetPopupMenu parentMenu, IJetPopupMenuOverlordView parentView, JetPopupMenuItem expandedItem);
    protected virtual IJetPopupMenuOverlordView CreateView(LifetimeDefinition defShowView, JetPopupMenu menu, IJetPopupMenuOverlordView parentView);
    protected virtual void ShowCore(JetPopupMenu menu, ShowWhen when, bool isModal, LifetimeDefinition lifetimeDefinitionOptional, IJetPopupMenuOverlordView parentView);
    protected virtual void ShowNoItemsBanner(JetPopupMenu menu);
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuStatus : Enum {
    public int value__;
    public static JetPopupMenuStatus ShowPopup;
    public static JetPopupMenuStatus BannerNoItems;
    public static JetPopupMenuStatus AutoExecute;
    public static JetPopupMenuStatus Error;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuStatusAndViewDef : ValueType {
    [CanBeNullAttribute]
public LifetimeDefinition ViewLifetimeDefinition;
    public JetPopupMenuStatus Status;
    public JetPopupMenuStatusAndViewDef(LifetimeDefinition viewLifetimeDefinition, JetPopupMenuStatus status);
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags : Enum {
    public int value__;
    public static KeyboardAccelerationFlags QuickSearch;
    public static KeyboardAccelerationFlags Mnemonics;
    public static KeyboardAccelerationFlags CustomSearch;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor : object {
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ShortcutText>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuItemStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <TailGlyph>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Tooltip>k__BackingField;
    public IconId Icon { get; public set; }
    public string Mnemonic { get; public set; }
    public RichText ShortcutText { get; public set; }
    public MenuItemStyle Style { get; public set; }
    public object Tag { get; public set; }
    public IconId TailGlyph { get; public set; }
    public RichText Text { get; public set; }
    public RichText Tooltip { get; public set; }
    public MenuItemDescriptor(object data);
    public void DumpToXaml(XmlWriter writer);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Mnemonic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Mnemonic(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_ShortcutText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShortcutText(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual MenuItemStyle get_Style();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Style(MenuItemStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tag(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_TailGlyph();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TailGlyph(IconId value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Tooltip();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tooltip(RichText value);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle : Enum {
    public int value__;
    public static MenuItemStyle None;
    public static MenuItemStyle Enabled;
    public static MenuItemStyle Separator;
    public static MenuItemStyle GroupHeader;
    public static MenuItemStyle CanExpand;
}
public static class JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyleValidator : object {
    public static void AssertValid(MenuItemStyle style);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem : MenuItemDescriptor {
    public ISimpleSignal Executed;
    public ISignal`1<ItemExpandedEventArgs> Expanded;
    public SimpleMenuItem(RichText text, IconId icon, Action FOnExecute);
    public static SimpleMenuItem CreateSeparator();
    internal void Describe(IMenuItemDescriptor descriptor);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo : object {
    private ISignal`1<JetPopupMenuDoc> myClicked;
    [NotNullAttribute]
private IProperty`1<bool> myIsChecked;
    private IProperty`1<IPresentableItem> myPresentation;
    [NotNullAttribute]
private Keys[] myShortcuts;
    private RichText myTooltipText;
    public ISignal`1<JetPopupMenuDoc> Clicked { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IProperty`1<IPresentableItem> Presentation { get; }
    public Keys[] Shortcuts { get; }
    public RichText TooltipText { get; }
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys[] shortcuts, bool checked, Action`1<JetPopupMenuDoc> clickHandler);
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys shortcut, bool checked, Action`1<JetPopupMenuDoc> clickHandler);
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys shortcut, bool checked, Action clickHandler);
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys shortcut, bool checked);
    public sealed virtual ISignal`1<JetPopupMenuDoc> get_Clicked();
    public sealed virtual IProperty`1<bool> get_IsChecked();
    public sealed virtual IProperty`1<IPresentableItem> get_Presentation();
    public sealed virtual Keys[] get_Shortcuts();
    public sealed virtual RichText get_TooltipText();
}
public interface JetBrains.Application.UI.Controls.LayoutDesigner.Components.ILayoutDesignerSerializer {
    public abstract virtual string Serialize(object value);
    public abstract virtual object Deserialize(string value);
}
public class JetBrains.Application.UI.Controls.MemoryUsageIndicatorContentAutomation : AAutomation {
    private InternalMode myInternalMode;
    public IProperty`1<bool> IsAccurateValue;
    public IProperty`1<long> MemoryUsageBytes;
    public Property`1<string> MemoryUsageText;
    public IStatusBarColorsManager StatusBarColorsManager;
    [CompilerGeneratedAttribute]
private static Func`2<IMemoryGrave, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public MemoryUsageIndicatorContentAutomation(Lifetime lifetime, InternalMode internalmode, IStatusBarColorsManager statusBarColorsManager);
    [NotNullAttribute]
public RichText GetTooltipText();
    [CompilerGeneratedAttribute]
private static int <GetTooltipText>b__0(IMemoryGrave g);
}
public class JetBrains.Application.UI.Controls.Misc.FilterController`1 : ObservableObject {
    private List`1<FilterItemType> myFilterOptions;
    private bool myAllowMultipleActiveItems;
    private Action FiltersChanged;
    private List`1<FilterItem<FilterItemType>> myFilterItems;
    private List`1<FilterItemType> myAppliedFilters;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<FilterItemType, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<FilterItem<FilterItemType>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<FilterItem<FilterItemType>, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    public bool AllowMultipleActiveItems { get; public set; }
    public IEnumerable`1<FilterItem<FilterItemType>> FilterItems { get; }
    [NotNullAttribute]
public IEnumerable`1<FilterItem<FilterItemType>> ActiveFilterItems { get; }
    public IEnumerable`1<FilterItemType> AppliedFilters { get; }
    public FilterController`1(IEnumerable`1<FilterItemType> filterOptions, Func`2<FilterItemType, string> displayText);
    private bool OnGet(FilterItem<FilterItemType> filterItem);
    private void OnSet(FilterItem<FilterItemType> filterItem, bool newValue);
    public bool get_AllowMultipleActiveItems();
    public void set_AllowMultipleActiveItems(bool value);
    public void add_FiltersChanged(Action value);
    public void remove_FiltersChanged(Action value);
    public IEnumerable`1<FilterItem<FilterItemType>> get_FilterItems();
    public IEnumerable`1<FilterItem<FilterItemType>> get_ActiveFilterItems();
    public IEnumerable`1<FilterItemType> get_AppliedFilters();
    public bool CheckAny(IEnumerable`1<FilterItemType> toCheck);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(FilterItemType _);
    [CompilerGeneratedAttribute]
private static void <OnSet>b__8(FilterItem<FilterItemType> view);
    [CompilerGeneratedAttribute]
private static bool <get_ActiveFilterItems>b__a(FilterItem<FilterItemType> item);
}
public class JetBrains.Application.UI.Controls.Misc.SearchModelEventHandler : MulticastDelegate {
    public SearchModelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs`1<string> args);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs`1<string> args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.PresentableItemAutomation : AAutomation {
    [NotNullAttribute]
public IPresentableItem PresentableItem;
    [NotNullAttribute]
public RenderParams RenderParams;
    public PresentableItemAutomation(IPresentableItem presentableItem, RenderParams renderParams);
    public PresentableItemAutomation(IPresentableItem presentableItem);
    public PresentableItemAutomation(RichText text);
    public PresentableItemAutomation(string text);
    public PresentableItemAutomation(IconId icon, RichText label);
    public PresentableItemAutomation(RichText richText, IList`1<PresentableItemImage> images);
}
public interface JetBrains.Application.UI.Controls.RadioGroup.IRadioGroupButtonViewModel {
    public IProperty`1<object> Label { get; }
    public IProperty`1<object> ToolTip { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IListEvents`1<object> DependentItems { get; }
    public IProperty`1<double> IndendDependentItems { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public IProperty`1<PanelOrientation> PanelOrientation { get; }
    public abstract virtual IProperty`1<object> get_Label();
    public abstract virtual IProperty`1<object> get_ToolTip();
    public abstract virtual IProperty`1<bool> get_IsChecked();
    public abstract virtual IListEvents`1<object> get_DependentItems();
    public abstract virtual IProperty`1<double> get_IndendDependentItems();
    public abstract virtual IProperty`1<bool> get_ShouldBeDisabled();
    public abstract virtual IProperty`1<PanelOrientation> get_PanelOrientation();
}
public interface JetBrains.Application.UI.Controls.RadioGroup.IRadioGroupViewModel {
    public IListEvents`1<IRadioGroupButtonViewModel> RadioButtonViewModels { get; }
    public IProperty`1<RichText> Label { get; }
    public IProperty`1<bool> IsCheckBoxCheckedLogically { get; }
    public IProperty`1<bool> IsCheckBoxCheckedVisually { get; }
    public IProperty`1<double> IndentRadioButtons { get; }
    public IProperty`1<bool> IsCheckBoxVisible { get; }
    public IProperty`1<bool> IsLabelVisible { get; }
    public IProperty`1<PanelOrientation> PanelOrientation { get; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public abstract virtual IListEvents`1<IRadioGroupButtonViewModel> get_RadioButtonViewModels();
    public abstract virtual IProperty`1<RichText> get_Label();
    public abstract virtual IProperty`1<bool> get_IsCheckBoxCheckedLogically();
    public abstract virtual IProperty`1<bool> get_IsCheckBoxCheckedVisually();
    public abstract virtual IProperty`1<double> get_IndentRadioButtons();
    public abstract virtual IProperty`1<bool> get_IsCheckBoxVisible();
    public abstract virtual IProperty`1<bool> get_IsLabelVisible();
    public abstract virtual IProperty`1<PanelOrientation> get_PanelOrientation();
    public abstract virtual IProperty`1<bool> get_IsEnabledProperty();
}
public enum JetBrains.Application.UI.Controls.RadioGroup.PanelOrientation : Enum {
    public int value__;
    public static PanelOrientation Horizontal;
    public static PanelOrientation Vertical;
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupButtonViewModel`1 : object {
    private RadioButtonModel<TValue> myButtonModel;
    [CompilerGeneratedAttribute]
private IProperty`1<PanelOrientation> <PanelOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<object> <DependentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <IndendDependentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldBeDisabled>k__BackingField;
    public IProperty`1<PanelOrientation> PanelOrientation { get; private set; }
    public RadioButtonModel<TValue> ButtonModel { get; }
    public IProperty`1<object> Label { get; private set; }
    public IProperty`1<object> ToolTip { get; private set; }
    public IProperty`1<bool> IsChecked { get; private set; }
    public IListEvents`1<object> DependentItems { get; private set; }
    public IProperty`1<double> IndendDependentItems { get; private set; }
    public IProperty`1<bool> ShouldBeDisabled { get; private set; }
    public RadioGroupButtonViewModel`1(Lifetime lifetime, IRadioGroupViewModel modelParent, RadioButtonModel<TValue> modelButton);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PanelOrientation> get_PanelOrientation();
    [CompilerGeneratedAttribute]
private void set_PanelOrientation(IProperty`1<PanelOrientation> value);
    private void InitLogging(Lifetime lifetime);
    public RadioButtonModel<TValue> get_ButtonModel();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<object> get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(IProperty`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<object> get_ToolTip();
    [CompilerGeneratedAttribute]
private void set_ToolTip(IProperty`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
private void set_IsChecked(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IListEvents`1<object> get_DependentItems();
    [CompilerGeneratedAttribute]
private void set_DependentItems(IListEvents`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<double> get_IndendDependentItems();
    [CompilerGeneratedAttribute]
private void set_IndendDependentItems(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShouldBeDisabled();
    [CompilerGeneratedAttribute]
private void set_ShouldBeDisabled(IProperty`1<bool> value);
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1 : object {
    private Lifetime myLifetime;
    public Property`1<bool> HasCheckbox;
    public IProperty`1<RichText> LabelText;
    public Property`1<TValue> NothingSelectedValue;
    public Property`1<TValue> Value;
    [NotNullAttribute]
public ListEvents`1<RadioButtonModel<TValue>> RadioButtons;
    public Lifetime Lifetime { get; }
    public RadioGroupModel`1(Lifetime lifetime);
    private void InitLogging(Lifetime lifetime);
    [ObsoleteAttribute("Do the adds on the radio button object returned from AddRadioButton call.")]
public void AddComment(RichText text);
    [ObsoleteAttribute("Do the adds on the radio button object returned from AddRadioButton call.")]
public void AddDependent(object control);
    [NotNullAttribute]
public RadioButtonModel<TValue> AddRadioButton(RichText text, TValue value, string toolTip);
    private void InitDataFlow(Lifetime lifetime);
    [DebuggerStepThroughAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__3(BeforeAddRemoveIndexEventArgs`1<RadioButtonModel<TValue>> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__5(AddRemoveIndexEventArgs`1<RadioButtonModel<TValue>> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__6(BeforePropertyChangedEventArgs`1<TValue> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__8();
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IListEvents`1<IRadioGroupButtonViewModel> <RadioButtonViewModels>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<RichText> <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCheckBoxCheckedLogically>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCheckBoxCheckedVisually>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <IndentRadioButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCheckBoxVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsLabelVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PanelOrientation> <PanelOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    public IListEvents`1<IRadioGroupButtonViewModel> RadioButtonViewModels { get; private set; }
    public IProperty`1<RichText> Label { get; private set; }
    public IProperty`1<bool> IsCheckBoxCheckedLogically { get; private set; }
    public IProperty`1<bool> IsCheckBoxCheckedVisually { get; private set; }
    public IProperty`1<double> IndentRadioButtons { get; private set; }
    public IProperty`1<bool> IsCheckBoxVisible { get; private set; }
    public IProperty`1<bool> IsLabelVisible { get; private set; }
    public IProperty`1<PanelOrientation> PanelOrientation { get; private set; }
    public IProperty`1<bool> IsEnabledProperty { get; private set; }
    public RadioGroupViewModel(Lifetime lifetime, IProperty`1<RichText> labelText);
    [CompilerGeneratedAttribute]
public sealed virtual IListEvents`1<IRadioGroupButtonViewModel> get_RadioButtonViewModels();
    [CompilerGeneratedAttribute]
private void set_RadioButtonViewModels(IListEvents`1<IRadioGroupButtonViewModel> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<RichText> get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(IProperty`1<RichText> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckBoxCheckedLogically();
    [CompilerGeneratedAttribute]
private void set_IsCheckBoxCheckedLogically(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckBoxCheckedVisually();
    [CompilerGeneratedAttribute]
private void set_IsCheckBoxCheckedVisually(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<double> get_IndentRadioButtons();
    [CompilerGeneratedAttribute]
private void set_IndentRadioButtons(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckBoxVisible();
    [CompilerGeneratedAttribute]
private void set_IsCheckBoxVisible(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsLabelVisible();
    [CompilerGeneratedAttribute]
private void set_IsLabelVisible(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PanelOrientation> get_PanelOrientation();
    [CompilerGeneratedAttribute]
private void set_PanelOrientation(IProperty`1<PanelOrientation> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
private void set_IsEnabledProperty(IProperty`1<bool> value);
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupViewModel`1 : RadioGroupViewModel {
    private RadioGroupModel`1<TValue> myModel;
    private ListEvents`1<RadioGroupButtonViewModel`1<TValue>> myRadioButtonViewModelsEx;
    [CompilerGeneratedAttribute]
private static Func`2<RadioGroupButtonViewModel`1<TValue>, IRadioGroupButtonViewModel> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<RichText, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    public RadioGroupModel`1<TValue> Model { get; }
    public RadioGroupViewModel`1(Lifetime lifetime, RadioGroupModel`1<TValue> model);
    private void InitLogging(Lifetime lifetime);
    private void InitButtonViewModels(Lifetime lifetime, RadioGroupModel`1<TValue> model);
    private void InitDataFlow(Lifetime lifetime);
    [DebuggerStepThroughAttribute]
public RadioGroupModel`1<TValue> get_Model();
    [CompilerGeneratedAttribute]
private static IRadioGroupButtonViewModel <InitButtonViewModels>b__2(RadioGroupButtonViewModel`1<TValue> modelButton);
    [CompilerGeneratedAttribute]
private static bool <InitDataFlow>b__6(RichText text);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__8(Lifetime lifeButton, RadioGroupButtonViewModel`1<TValue> button);
    [CompilerGeneratedAttribute]
private bool <InitDataFlow>b__b(TValue val);
}
public class JetBrains.Application.UI.Controls.RichTextAutomation : AAutomation {
    private IProperty`1<RenderParams> myRenderParams;
    private IProperty`1<RichTextBlock> myRichTextBlock;
    [NotNullAttribute]
public IProperty`1<RichTextBlock> RichTextBlock { get; }
    [NotNullAttribute]
public IProperty`1<RenderParams> RenderParams { get; }
    public RichTextAutomation(RichText richText);
    public RichTextAutomation(RichTextBlock block, RenderParams renderParams);
    public RichTextAutomation(RichTextBlock block);
    public IProperty`1<RichTextBlock> get_RichTextBlock();
    public IProperty`1<RenderParams> get_RenderParams();
}
public class JetBrains.Application.UI.Controls.RichTextTipPainter : object {
    protected Rectangle myBounds;
    protected Nullable`1<Size> myDesiredBlockSize;
    protected RichTextBlock myReflowedRichTextBlock;
    protected bool myReflowedRichTextBlockUpToDate;
    protected IProperty`1<RenderParams> myRenderParams;
    protected IProperty`1<RichTextBlock> myRichTextBlock;
    protected int myWidthConstraint;
    private SimpleSignal myGottenDirty;
    private ISimpleSignal myWantsResize;
    public static Size BorderSize;
    [NotNullAttribute]
public IProperty`1<RichTextBlock> RichTextBlock { get; }
    [NotNullAttribute]
public IProperty`1<RenderParams> RenderParams { get; }
    public bool AutoActivate { get; public set; }
    public Rectangle Bounds { get; }
    public ISimpleSignal GottenDirty { get; }
    public ISimpleSignal WantsResize { get; }
    public RichTextTipPainter(RichText richText);
    public RichTextTipPainter(RichTextBlock block, RenderParams renderParams);
    public RichTextTipPainter(RichTextBlock block);
    private static RichTextTipPainter();
    public IProperty`1<RichTextBlock> get_RichTextBlock();
    protected RichTextBlock GetReflowedRichTextBlock(Graphics g);
    private void Init();
    public virtual string ToString();
    public sealed virtual IProperty`1<RenderParams> get_RenderParams();
    public virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public virtual void Paint(Graphics g);
    public sealed virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
    public sealed virtual void SetLayout(LayoutResult layout);
    public sealed virtual bool get_AutoActivate();
    public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual Rectangle get_Bounds();
    public sealed virtual ISimpleSignal get_GottenDirty();
    public sealed virtual ISimpleSignal get_WantsResize();
    [CompilerGeneratedAttribute]
private void <Init>b__0();
}
public class JetBrains.Application.UI.Controls.RichTextWithProgressAutomation : AAutomation {
    public IProperty`1<double> Value;
    public IProperty`1<RichTextBlock> Text;
    public RichTextWithProgressAutomation(RichTextBlock richText);
}
public static class JetBrains.Application.UI.Controls.SafeControlManager : object {
    private static WeakToStrongDictionary`2<Control, ControlData> ourWatchedControls;
    private static Nullable`1<bool> ourShouldTrack;
    private static SafeControlManager();
    private static bool GetShouldTrack(IUIApplicationSimple environment);
    public static void Register(TControl control, IUIApplicationSimple environment);
    private static void ParentChanged(object sender, EventArgs e);
    public static void ControlDisposed(Control control, bool disposing, IUIApplicationSimple environment);
    private static void LogProblem(string format, Object[] args);
}
public abstract class JetBrains.Application.UI.Controls.SafeFlowLayoutPanel : FlowLayoutPanel {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; private set; }
    protected SafeFlowLayoutPanel(IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public abstract class JetBrains.Application.UI.Controls.SafePanel : Panel {
    [CanBeNullAttribute]
private IUIApplicationSimple myUiapp;
    protected SafePanel(IUIApplicationSimple uiapp);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public class JetBrains.Application.UI.Controls.SafeTableLayoutPanel : TableLayoutPanel {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; private set; }
    protected SafeTableLayoutPanel(IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public abstract class JetBrains.Application.UI.Controls.SafeUserControl : UserControl {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; private set; }
    protected SafeUserControl(IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public class JetBrains.Application.UI.Controls.SizeConstraint : object {
    public static SizeConstraint Empty;
    private int myMaxWidth;
    private int myMaxHeight;
    public int MaxWidth { get; }
    public int MaxHeight { get; }
    public bool IsEmpty { get; }
    public Size ConstrainingSize { get; }
    public SizeConstraint(Size size);
    public SizeConstraint(int maxWidth, int maxHeight);
    private static SizeConstraint();
    public int get_MaxWidth();
    public int get_MaxHeight();
    public bool get_IsEmpty();
    public Size get_ConstrainingSize();
    public bool Satisfies(Size size);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Size op_Explicit(SizeConstraint constraint);
    public static SizeConstraint op_Explicit(Size size);
}
public class JetBrains.Application.UI.Controls.SpinningTrefoilAutomation : AAutomation {
    public IProperty`1<NextItemDir> Direction;
    public IProperty`1<bool> IsHot;
    public IProperty`1<bool> IsInverted;
    public SpinningTrefoilAutomation(Lifetime lifetime);
}
public class JetBrains.Application.UI.Controls.StaticBitmapAutomation : AAutomation {
    public Image Image;
    public StaticBitmapAutomation(Image image);
}
public class JetBrains.Application.UI.Controls.StatusBarProgressIndicator : object {
    [NotNullAttribute]
public IProperty`1<IconId> Icon;
    [NotNullAttribute]
public JetStatusBarIndicator Indicator;
    [NotNullAttribute]
public IProperty`1<string> Text;
    [NotNullAttribute]
public IProperty`1<double> Value;
    public StatusBarProgressIndicator(Lifetime lifetime, IStatusBar statusBar, IconId icon, string text);
}
public class JetBrains.Application.UI.Controls.StatusBarProgressIndicatorContentAutomation : AAutomation {
    public static string DefaultText;
    public IProperty`1<IconId> Icon;
    public IProperty`1<string> Text;
    public IProperty`1<double> Value;
    private static StatusBarProgressIndicatorContentAutomation();
}
public abstract class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.ButtonProviderBase : ObservableObject {
    [CompilerGeneratedAttribute]
private ButtonViewModel <DoubleClickHandlingButton>k__BackingField;
    public ButtonViewModel DoubleClickHandlingButton { get; protected set; }
    public abstract virtual IEnumerable`1<ButtonViewModel> GetButtons();
    [CompilerGeneratedAttribute]
public sealed virtual ButtonViewModel get_DoubleClickHandlingButton();
    [CompilerGeneratedAttribute]
protected void set_DoubleClickHandlingButton(ButtonViewModel value);
    public virtual void HandleViewKeyPress(Key k);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.ButtonViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <Command>k__BackingField;
    public IconId IconId { get; private set; }
    public RichText Text { get; private set; }
    public IProperty`1<bool> IsEnabledProperty { get; public set; }
    public DelegateCommand Command { get; private set; }
    public ButtonViewModel(IconId iconId, string text, IProperty`1<bool> isEnabledProperty, DelegateCommand command);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
private void set_IconId(IconId value);
    [CompilerGeneratedAttribute]
public RichText get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(RichText value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
public void set_IsEnabledProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(DelegateCommand value);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProvider : DefaultButtonProviderBase {
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private Func`2<string, string> myValidator;
    private IPromptWinForm myPromptWinForm;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    public DefaultButtonProvider(Lifetime lifetime, ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IPromptWinForm promptWinForm, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, Func`2<string, string> validator, DefaultButtonProviderCaptions defaultButtonProviderCaptions);
    protected virtual void AddButtonHandler();
    protected virtual void EditButtonHandler();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__6(string s);
}
public abstract class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProviderBase : ButtonProviderBase {
    private List`1<ButtonViewModel> myButtons;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollectionEditItemViewModel> <SelectedItemProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<ICollectionEditItemViewModel> <Items>k__BackingField;
    protected IProperty`1<ICollectionEditItemViewModel> SelectedItemProperty { get; private set; }
    protected ObservableCollection`1<ICollectionEditItemViewModel> Items { get; private set; }
    protected DefaultButtonProviderBase(Lifetime lifetime, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, ObservableCollection`1<ICollectionEditItemViewModel> items, DefaultButtonProviderCaptions defaultButtonProviderCaptions);
    [CompilerGeneratedAttribute]
protected IProperty`1<ICollectionEditItemViewModel> get_SelectedItemProperty();
    [CompilerGeneratedAttribute]
private void set_SelectedItemProperty(IProperty`1<ICollectionEditItemViewModel> value);
    [CompilerGeneratedAttribute]
protected ObservableCollection`1<ICollectionEditItemViewModel> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(ObservableCollection`1<ICollectionEditItemViewModel> value);
    public virtual IEnumerable`1<ButtonViewModel> GetButtons();
    protected abstract virtual void AddButtonHandler();
    protected abstract virtual void EditButtonHandler();
    protected virtual void RemoveButtonHandler();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProviderCaptions : object {
    public static DefaultButtonProviderCaptions Default;
    [CompilerGeneratedAttribute]
private IconIdAndText <AddButtonInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IconIdAndText <EditButtonInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IconIdAndText <RemoveButtonInfo>k__BackingField;
    public IconIdAndText AddButtonInfo { get; private set; }
    public IconIdAndText EditButtonInfo { get; private set; }
    public IconIdAndText RemoveButtonInfo { get; private set; }
    public DefaultButtonProviderCaptions(IconIdAndText addButtonInfo, IconIdAndText editButtonInfo, IconIdAndText removeButtonInfo);
    public DefaultButtonProviderCaptions(string addButtonText, IconId addButtonIconId, string editButtonText, IconId editButtonIconId, string removeButtonText, IconId removeButtonIconId);
    private static DefaultButtonProviderCaptions();
    [CompilerGeneratedAttribute]
public IconIdAndText get_AddButtonInfo();
    [CompilerGeneratedAttribute]
private void set_AddButtonInfo(IconIdAndText value);
    [CompilerGeneratedAttribute]
public IconIdAndText get_EditButtonInfo();
    [CompilerGeneratedAttribute]
private void set_EditButtonInfo(IconIdAndText value);
    [CompilerGeneratedAttribute]
public IconIdAndText get_RemoveButtonInfo();
    [CompilerGeneratedAttribute]
private void set_RemoveButtonInfo(IconIdAndText value);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProviderFactory : object {
    private Lifetime myLifetime;
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private Func`2<string, string> myValidator;
    private DefaultButtonProviderCaptions myDefaultButtonProviderCaptions;
    private IPromptWinForm myPromptWinForms;
    public DefaultButtonProviderFactory(Lifetime lifetime, IPromptWinForm promptWinForms, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, Func`2<string, string> validator, DefaultButtonProviderCaptions defaultButtonProviderCaptions);
    public sealed virtual IButtonProvider GetButtonProvider(ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> selectedMultipleItemsProperty);
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.IButtonProvider {
    [CanBeNullAttribute]
public ButtonViewModel DoubleClickHandlingButton { get; }
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ButtonViewModel> GetButtons();
    public abstract virtual ButtonViewModel get_DoubleClickHandlingButton();
    public abstract virtual void HandleViewKeyPress(Key k);
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.IButtonProviderFactory {
    public abstract virtual IButtonProvider GetButtonProvider(ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> selectedMultipleItemsProperty);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.IconIdAndText : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    public string Text { get; private set; }
    public IconId IconId { get; private set; }
    public IconIdAndText(string text, IconId iconId);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
private void set_IconId(IconId value);
}
public abstract class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.CollectionEditItemViewModelBase : ObservableObject {
    public IconId IconId { get; }
    public RichText PresentableName { get; }
    public abstract virtual IconId get_IconId();
    public abstract virtual RichText get_PresentableName();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.DefaultCollectionEditItemViewModelFactory : object {
    private IconId myIconId;
    public DefaultCollectionEditItemViewModelFactory(IconId iconId);
    public sealed virtual ICollectionEditItemViewModel GetCollectionEditItemViewModel(string presentableName, IconId iconId, object behindValue);
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.ICollectionEditItemViewModel {
    public IconId IconId { get; }
    public RichText PresentableName { get; }
    public abstract virtual IconId get_IconId();
    public abstract virtual RichText get_PresentableName();
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.ICollectionEditItemViewModelFactory {
    public abstract virtual ICollectionEditItemViewModel GetCollectionEditItemViewModel(string presentableName, IconId iconId, object behindValue);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.StringCollectionEditItemViewModel : CollectionEditItemViewModelBase {
    private IconId myIconId;
    private string myPresentableName;
    public IconId IconId { get; }
    public RichText PresentableName { get; }
    public StringCollectionEditItemViewModel(string presentableName, IconId iconId);
    public virtual IconId get_IconId();
    public virtual RichText get_PresentableName();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.PairStringCollectionEditViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private StringCollectionEditViewModel <LeftViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private StringCollectionEditViewModel <RightViewModel>k__BackingField;
    public StringCollectionEditViewModel LeftViewModel { get; public set; }
    public StringCollectionEditViewModel RightViewModel { get; public set; }
    public PairStringCollectionEditViewModel(StringCollectionEditViewModel leftViewModel, StringCollectionEditViewModel rightViewModel);
    [CompilerGeneratedAttribute]
public StringCollectionEditViewModel get_LeftViewModel();
    [CompilerGeneratedAttribute]
public void set_LeftViewModel(StringCollectionEditViewModel value);
    [CompilerGeneratedAttribute]
public StringCollectionEditViewModel get_RightViewModel();
    [CompilerGeneratedAttribute]
public void set_RightViewModel(StringCollectionEditViewModel value);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.StringCollectionEditViewModel : ObservableObject {
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private bool myAllowMultiselect;
    [CompilerGeneratedAttribute]
private IButtonProvider <ButtonProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private ISortDescription <SortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<ICollectionEditItemViewModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollectionEditItemViewModel> <SelectedItemProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> <SelectedMultipleItemsProperty>k__BackingField;
    public SelectionMode SelectionMode { get; }
    public IButtonProvider ButtonProvider { get; private set; }
    public string Caption { get; private set; }
    public ISortDescription SortDescription { get; private set; }
    public ObservableCollection`1<ICollectionEditItemViewModel> Items { get; private set; }
    public IProperty`1<ICollectionEditItemViewModel> SelectedItemProperty { get; private set; }
    public IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> SelectedMultipleItemsProperty { get; private set; }
    public StringCollectionEditViewModel(Lifetime lifetime, string caption, IButtonProviderFactory buttonProviderFactory, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, ISortDescription sortDescription, bool allowMultiselect);
    public SelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public IButtonProvider get_ButtonProvider();
    [CompilerGeneratedAttribute]
private void set_ButtonProvider(IButtonProvider value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
private void set_Caption(string value);
    [CompilerGeneratedAttribute]
public ISortDescription get_SortDescription();
    [CompilerGeneratedAttribute]
private void set_SortDescription(ISortDescription value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<ICollectionEditItemViewModel> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(ObservableCollection`1<ICollectionEditItemViewModel> value);
    [CompilerGeneratedAttribute]
public IProperty`1<ICollectionEditItemViewModel> get_SelectedItemProperty();
    [CompilerGeneratedAttribute]
private void set_SelectedItemProperty(IProperty`1<ICollectionEditItemViewModel> value);
    [CompilerGeneratedAttribute]
public IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> get_SelectedMultipleItemsProperty();
    [CompilerGeneratedAttribute]
private void set_SelectedMultipleItemsProperty(IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> value);
    public void AddItem(string presentableName, IconId iconId, object behindValue);
}
public enum JetBrains.Application.UI.Controls.TabStrip.TabStripPageAlignment : Enum {
    public int value__;
    public static TabStripPageAlignment Top;
    public static TabStripPageAlignment Bottom;
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripClosedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TabStripItem[] <Items>k__BackingField;
    public TabStripItem[] Items { get; private set; }
    public TabStripClosedEventArgs(TabStripItem[] items);
    [CompilerGeneratedAttribute]
public TabStripItem[] get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(TabStripItem[] value);
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripClosingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private TabStripItem[] <Items>k__BackingField;
    public TabStripItem[] Items { get; private set; }
    public TabStripClosingEventArgs(TabStripItem[] items, bool cancel);
    [CompilerGeneratedAttribute]
public TabStripItem[] get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(TabStripItem[] value);
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripItem : object {
    private EventHandler IsPinnedChanged;
    private EventHandler IsSelectedChanged;
    private DelegateCommand myShowCommand;
    private DelegateCommand myCloseCommand;
    private bool myIsSelected;
    private object myHeader;
    private object myContent;
    private TabStripViewModel myViewModel;
    private bool myIsPinned;
    private bool myPinnable;
    private bool myClosable;
    private object myTooltip;
    private PropertyChangedEventHandler PropertyChanged;
    public object Header { get; public set; }
    public object Content { get; public set; }
    public object Tooltip { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsPinned { get; public set; }
    public bool Pinnable { get; public set; }
    public bool Closable { get; public set; }
    public ICommand CloseCommand { get; }
    public ICommand ShowCommand { get; }
    public TabStripItem(TabStripViewModel viewModel);
    public void add_IsPinnedChanged(EventHandler value);
    public void remove_IsPinnedChanged(EventHandler value);
    public void add_IsSelectedChanged(EventHandler value);
    public void remove_IsSelectedChanged(EventHandler value);
    public object get_Header();
    public void set_Header(object value);
    public object get_Content();
    public void set_Content(object value);
    public object get_Tooltip();
    public void set_Tooltip(object value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsPinned();
    public void set_IsPinned(bool value);
    public bool get_Pinnable();
    public void set_Pinnable(bool value);
    public bool get_Closable();
    public void set_Closable(bool value);
    public ICommand get_CloseCommand();
    private void OnCloseCommandInvoked();
    public ICommand get_ShowCommand();
    private void OnShowCommandInvoked();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <get_CloseCommand>b__0();
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripItemCollection : ObservableCollection`1<TabStripItem> {
    private int GetIndexAfterLastPinnedOrZero();
    public void InsertAfterPinned(TabStripItem tabStripItem);
}
public enum JetBrains.Application.UI.Controls.TabStripView.TabStripOpenTabMode : Enum {
    public int value__;
    public static TabStripOpenTabMode AtBeginning;
    public static TabStripOpenTabMode AtEnd;
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripViewModel : object {
    private EventHandler SelectedItemChanged;
    private EventHandler SelectedItemChanging;
    private EventHandler Activated;
    private bool myHasRecentItems;
    private TabStripItem mySelectedItem;
    private TabStripOpenTabMode myOpenTabMode;
    private IProperty`1<bool> myContextMenuVisible;
    private PropertyChangedEventHandler PropertyChanged;
    private DelegateCommand myCloseAllCommand;
    private IProperty`1<bool> myCloseAllTabsVisible;
    private DelegateCommand myCloseAllButThisCommand;
    private IProperty`1<bool> myCloseAllButThisVisible;
    private DelegateCommand myCloseAllButPinnedCommand;
    private IProperty`1<bool> myCloseAllButPinnedVisible;
    private DelegateCommand myCloseSelectedItemCommand;
    private bool myAllowRecentItems;
    private IProperty`1<bool> myCloseTabVisible;
    private IProperty`1<ICommand> myAddNewTabCommand;
    private IProperty`1<object> myAddNewTabTooltip;
    private IProperty`1<bool> myAddNewTabAvailable;
    private IProperty`1<bool> myManageTabActivation;
    private EventHandler`1<TabStripClosingEventArgs> Closing;
    private EventHandler`1<TabStripClosedEventArgs> Closed;
    [CompilerGeneratedAttribute]
private TabStripItemCollection <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private TabStripItemCollection <RecentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    public TabStripItemCollection Items { get; private set; }
    public TabStripItemCollection RecentItems { get; private set; }
    public bool HasRecentItems { get; private set; }
    public TabStripOpenTabMode OpenTabMode { get; public set; }
    public bool AllowRecentItems { get; public set; }
    public TabStripItem SelectedItem { get; public set; }
    public ICommand CloseAllCommand { get; }
    public IProperty`1<bool> CloseAllTabsVisible { get; }
    public IProperty`1<bool> CloseAllButThisVisible { get; }
    public ICommand CloseAllButThisCommand { get; }
    public ICommand CloseAllButPinnedCommand { get; }
    public IProperty`1<bool> CloseAllButPinnedVisible { get; }
    public IProperty`1<bool> CloseTabVisible { get; }
    public ICommand CloseSelectedItemCommand { get; }
    public IProperty`1<ICommand> AddNewTabCommand { get; }
    public IProperty`1<object> AddNewTabTooltip { get; }
    public IProperty`1<bool> AddNewTabAvailable { get; }
    public IProperty`1<bool> ManageTabActivation { get; }
    public IProperty`1<bool> ContextMenuVisible { get; }
    public void add_SelectedItemChanged(EventHandler value);
    public void remove_SelectedItemChanged(EventHandler value);
    public void add_SelectedItemChanging(EventHandler value);
    public void remove_SelectedItemChanging(EventHandler value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    [CompilerGeneratedAttribute]
public TabStripItemCollection get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(TabStripItemCollection value);
    [CompilerGeneratedAttribute]
public TabStripItemCollection get_RecentItems();
    [CompilerGeneratedAttribute]
private void set_RecentItems(TabStripItemCollection value);
    public bool get_HasRecentItems();
    private void set_HasRecentItems(bool value);
    public TabStripOpenTabMode get_OpenTabMode();
    public void set_OpenTabMode(TabStripOpenTabMode value);
    public bool get_AllowRecentItems();
    public void set_AllowRecentItems(bool value);
    public TabStripItem get_SelectedItem();
    public void set_SelectedItem(TabStripItem value);
    protected virtual void OnSelectedItemChanged();
    protected void RaiseSelectedItemChanged();
    public void Open(TabStripItem tabStripItem);
    public virtual void Activate();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    public ICommand get_CloseAllCommand();
    private void OnCloseAllCommandInvoked();
    public IProperty`1<bool> get_CloseAllTabsVisible();
    public IProperty`1<bool> get_CloseAllButThisVisible();
    public ICommand get_CloseAllButThisCommand();
    private void OnCloseAllButThisCommandInvoked();
    public ICommand get_CloseAllButPinnedCommand();
    private void OnCloseAllButPinnedCommandInvoked();
    public IProperty`1<bool> get_CloseAllButPinnedVisible();
    public IProperty`1<bool> get_CloseTabVisible();
    public ICommand get_CloseSelectedItemCommand();
    private void OnCloseSelectedItemCommandInvoked();
    public IProperty`1<ICommand> get_AddNewTabCommand();
    public IProperty`1<object> get_AddNewTabTooltip();
    public IProperty`1<bool> get_AddNewTabAvailable();
    public IProperty`1<bool> get_ManageTabActivation();
    public void add_Closing(EventHandler`1<TabStripClosingEventArgs> value);
    public void remove_Closing(EventHandler`1<TabStripClosingEventArgs> value);
    public void add_Closed(EventHandler`1<TabStripClosedEventArgs> value);
    public void remove_Closed(EventHandler`1<TabStripClosedEventArgs> value);
    private bool PrepareClosing(TabStripItem[] items);
    public bool Close(IEnumerable`1<TabStripItem> items);
    public IProperty`1<bool> get_ContextMenuVisible();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object s, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <get_CloseAllCommand>b__4();
    [CompilerGeneratedAttribute]
private static bool <get_CloseAllCommand>b__5(TabStripItem item);
    [CompilerGeneratedAttribute]
private static bool <OnCloseAllCommandInvoked>b__7(TabStripItem item);
    [CompilerGeneratedAttribute]
private bool <get_CloseAllButThisCommand>b__9();
    [CompilerGeneratedAttribute]
private bool <get_CloseAllButThisCommand>b__a(TabStripItem item);
    [CompilerGeneratedAttribute]
private bool <OnCloseAllButThisCommandInvoked>b__b(TabStripItem item);
    [CompilerGeneratedAttribute]
private static bool <OnCloseAllButPinnedCommandInvoked>b__c(TabStripItem item);
    [CompilerGeneratedAttribute]
private bool <get_CloseSelectedItemCommand>b__e();
    [CompilerGeneratedAttribute]
private static bool <Close>b__f(TabStripItem item);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeGrid.ActionInvokatorExtensions : object {
    [ExtensionAttribute]
public static bool ExecuteOrQueue(IActionInvocator actionInvocator, Action action);
}
public class JetBrains.Application.UI.Controls.TreeGrid.CachedFilterDescriptor : object {
    private WeakToStrongDictionary`2<object, Nullable`1<bool>> mySelfVisibilityCache;
    private WeakHashSet`1<object> myStronglyVisibleSet;
    private IFilterDescriptor myFilterDescription;
    private Func`2<object, object> myFGetParent;
    private FilteringMode myMode;
    private EventHandler Invalidated;
    public CachedFilterDescriptor(IFilterDescriptor filterDescriptor, FilteringMode mode, Func`2<object, object> getParent);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.Cancellable : object {
    public static ICancellable Empty;
    private Action myCancel;
    public Cancellable(Action cancel);
    private static Cancellable();
    public sealed virtual void Cancel();
}
public class JetBrains.Application.UI.Controls.TreeGrid.CancellableAction : object {
    private Action myAction;
    private bool myTrapExceptions;
    private bool myCancelled;
    public CancellableAction(Action action, bool trapExceptions);
    public void Do();
    public sealed virtual void Cancel();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ChainedJobQueue : object {
    private JetPriorityQueue`1<IChainedJob> myQueue;
    [CompilerGeneratedAttribute]
private static Comparison`1<IChainedJob> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsEmpty { get; }
    public void Enqueue(IChainedJob chainedJob);
    public void Clear();
    public bool get_IsEmpty();
    public void Pump();
    public void Pump(TimeSpan timeLimit);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__0(IChainedJob a, IChainedJob b);
}
public class JetBrains.Application.UI.Controls.TreeGrid.ChainedJobScheduler : object {
    private TimeSpan myTimeBudget;
    private Action`1<Action> myDispatch;
    private ChainedJobQueue myChainedJobQueue;
    private bool myIsPumpOnceScheduled;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsProcessing>k__BackingField;
    public Property`1<bool> IsProcessing { get; private set; }
    public TimeSpan TimeBudget { get; public set; }
    public Action`1<Action> Dispatch { get; public set; }
    public ChainedJobScheduler(TimeSpan timeBudget, Action`1<Action> dispatch, ChainedJobQueue chainedJobQueue);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsProcessing();
    [CompilerGeneratedAttribute]
private void set_IsProcessing(Property`1<bool> value);
    public TimeSpan get_TimeBudget();
    public void set_TimeBudget(TimeSpan value);
    public Action`1<Action> get_Dispatch();
    public void set_Dispatch(Action`1<Action> value);
    public void Schedule(IChainedJob job);
    private void UpdateIsProcessing();
    private void SchedulePumpOnce();
    public void Pump();
    public void Pump(TimeSpan timeLimit);
    [CompilerGeneratedAttribute]
private void <SchedulePumpOnce>b__0();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ChildrenProviders.ChildrenProvider`1 : object {
    [NotNullAttribute]
private Func`2<T, IEnumerable> myGetChildren;
    [NotNullAttribute]
private Func`2<T, bool> myHasChildren;
    [CompilerGeneratedAttribute]
private bool <IsObservable>k__BackingField;
    public bool IsObservable { get; private set; }
    public ChildrenProvider`1(Func`2<T, IEnumerable> getChildren, Func`2<T, bool> hasChildren, bool observable);
    public ChildrenProvider`1(Func`2<T, IEnumerable> getChildren, bool observable);
    private bool HashChildren(T data);
    public sealed virtual IEnumerable GetChildren(object data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsObservable();
    [CompilerGeneratedAttribute]
private void set_IsObservable(bool value);
    public sealed virtual bool HasChildren(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.CombiningFilterDescriptor : object {
    private EventHandler Invalidated;
    private IFilterDescriptor[] myFilters;
    private Operation myOperation;
    public CombiningFilterDescriptor(IEnumerable`1<IFilterDescriptor> filters, Operation operation);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public void Invalidate();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor.IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.DefaultActionInvocator : object {
    private Dispatcher myDispatcher;
    public DefaultActionInvocator(Dispatcher dispatcher);
    public sealed virtual ICancellable Queue(Action action);
    public sealed virtual bool TryExecute(Action action);
    public sealed virtual void AssertAccess();
}
public class JetBrains.Application.UI.Controls.TreeGrid.DefaultExpansionProvider : object {
    public static DefaultExpansionProvider Instance;
    private static DefaultExpansionProvider();
    public sealed virtual bool Collapsable(object item);
    public sealed virtual bool Expandable(object item);
    public sealed virtual bool IsExpanded(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.DelegateItemFilter`1 : object {
    private Func`2<T, Nullable`1<bool>> myFunction;
    private EventHandler Invalidated;
    public DelegateItemFilter`1(Func`2<T, Nullable`1<bool>> function);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
internal class JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue : object {
    private EventHandler`1<ValueChangedEventArgs`1<bool>> IsBusyChanged;
    private bool myIsBusy;
    private Queue`1<Action> myActions;
    private Queue`1<Action> myPostActions;
    private ICancellable myQueuedAction;
    private Func`2<Action, ICancellable> myQueuer;
    private DispatcherPriority myPriority;
    private TimeSpan myTimeLimit;
    private DispatcherOperation myPreDispatchedOperation;
    public bool IsBusy { get; private set; }
    public DispatchedQueue(Func`2<Action, ICancellable> queuer, DispatcherPriority priority, TimeSpan timelimit);
    public void add_IsBusyChanged(EventHandler`1<ValueChangedEventArgs`1<bool>> value);
    public void remove_IsBusyChanged(EventHandler`1<ValueChangedEventArgs`1<bool>> value);
    public bool get_IsBusy();
    private void set_IsBusy(bool value);
    private void UpdateIsBusy();
    public void Queue(Action action);
    public void QueuePostaction(Action action);
    private void SchedulePump();
    private void OnPreInvoke();
    private void OnInvoked();
    public void Pump();
    public bool Pump(TimeSpan timelimit);
    private static bool Pump(Queue`1<Action> queue, TimeSpan timelimit);
    public void Cancel();
}
public class JetBrains.Application.UI.Controls.TreeGrid.EventBasedItemFilter : object {
    private EventHandler Invalidated;
    private EventHandler`1<FilterEventArgs> Filter;
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public void add_Filter(EventHandler`1<FilterEventArgs> value);
    public void remove_Filter(EventHandler`1<FilterEventArgs> value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ExpansionProvider`1 : object {
    private Func`2<T, bool> myCollapsable;
    private Func`2<T, bool> myExpandable;
    private Func`2<T, bool> myIsExpanded;
    public ExpansionProvider`1(Func`2<T, bool> collapsable, Func`2<T, bool> expandable, Func`2<T, bool> expanded);
    private sealed virtual override bool JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider.Collapsable(object item);
    private sealed virtual override bool JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider.Expandable(object item);
    private sealed virtual override bool JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider.IsExpanded(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.FilterEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public Nullable`1<bool> IsAccepted { get; public set; }
    public object Item { get; private set; }
    public FilterEventArgs(object item);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAccepted();
    [CompilerGeneratedAttribute]
public void set_IsAccepted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
}
public enum JetBrains.Application.UI.Controls.TreeGrid.FilteringMode : Enum {
    public int value__;
    public static FilteringMode AcceptedOnly;
    public static FilteringMode AcceptedWithDescendats;
}
public class JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection : object {
    [NotNullAttribute]
public IProperty`1<IFilterDescriptor> CombinedFilter;
    [NotNullAttribute]
public IDictionaryEvents`2<ReadonlyToken, IFilterDescriptor> Filters;
    public FiltersCollection(Lifetime lifetime, Operation operation);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Current>k__BackingField;
    public T Previous { get; private set; }
    public T Current { get; private set; }
    public ValueChangedEventArgs`1(T previous, T current);
    [CompilerGeneratedAttribute]
public T get_Previous();
    [CompilerGeneratedAttribute]
private void set_Previous(T value);
    [CompilerGeneratedAttribute]
public T get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(T value);
}
public class JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventHandler`1 : MulticastDelegate {
    public ValueChangedEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, ValueChangedEventArgs`1<T> args);
    public virtual IAsyncResult BeginInvoke(object sender, ValueChangedEventArgs`1<T> args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeGrid.Helpers.WeakCollectionChangedListener : object {
    private INotifyCollectionChanged mySource;
    private WeakReference myHandler;
    public WeakCollectionChangedListener(INotifyCollectionChanged source, NotifyCollectionChangedEventHandler handler);
    public static WeakCollectionChangedListener Create(INotifyCollectionChanged source, NotifyCollectionChangedEventHandler handler);
    public void Disconnect();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IActionInvocator {
    public abstract virtual ICancellable Queue(Action action);
    public abstract virtual bool TryExecute(Action action);
    public abstract virtual void AssertAccess();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.ICancellable {
    public abstract virtual void Cancel();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IChainedJob {
    public int Priority { get; }
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IChainedJob> Do();
    public abstract virtual int get_Priority();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IChildrenProvider {
    public bool IsObservable { get; }
    public abstract virtual IEnumerable GetChildren(object item);
    public abstract virtual bool get_IsObservable();
    public abstract virtual bool HasChildren(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider {
    public abstract virtual bool Collapsable(object item);
    public abstract virtual bool Expandable(object item);
    public abstract virtual bool IsExpanded(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor {
    public abstract virtual void add_Invalidated(EventHandler value);
    public abstract virtual void remove_Invalidated(EventHandler value);
    public abstract virtual Nullable`1<bool> IsAccepted(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.ISortDescription {
}
public interface JetBrains.Application.UI.Controls.TreeGrid.ITreeGridItemFilter {
    public abstract virtual bool IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPair`1 : object {
    public T Object;
    public int Index;
    public ObjectIndexPair`1(T object, int index);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPath`1 : List`1<ObjectIndexPair`1<T>> {
    public T Target { get; }
    public ObjectIndexPath`1(int capacity);
    public T get_Target();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ObjectPath`1 : List`1<T> {
    public T Target { get; }
    public ObjectPath`1(int capacity);
    public ObjectPath`1(IEnumerable`1<T> enumerable);
    public T get_Target();
}
public class JetBrains.Application.UI.Controls.TreeGrid.PredicateItemFilter`1 : object {
    private EventHandler Invalidated;
    private bool myFinalValue;
    [CompilerGeneratedAttribute]
private Predicate`1<T> <Predicate>k__BackingField;
    public Predicate`1<T> Predicate { get; private set; }
    public PredicateItemFilter`1(Predicate`1<T> predicate, bool finalValue);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public Predicate`1<T> get_Predicate();
    [CompilerGeneratedAttribute]
private void set_Predicate(Predicate`1<T> value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ReentrancyGuardedActionInvocator : object {
    private ReentrancyGuard myReentrancyGuard;
    public ReentrancyGuardedActionInvocator(ReentrancyGuard reentrancyGuard);
    public sealed virtual ICancellable Queue(Action action);
    public sealed virtual bool TryExecute(Action action);
    public sealed virtual void AssertAccess();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.ChildrenProvider`1 : object {
    [NotNullAttribute]
private Func`2<T, IEnumerable> myGetChildren;
    [NotNullAttribute]
private Func`2<T, bool> myHasChildren;
    [NotNullAttribute]
private IEnumerable myRoots;
    public ChildrenProvider`1(IEnumerable roots, Func`2<T, IEnumerable> getChildren, Func`2<T, bool> hasChildren);
    private bool HasChildrenFallback(T item);
    public sealed virtual IEnumerable`1<object> FetchChildren(object data, int index, int count);
    private static IEnumerable`1<object> FetchList(IList list, int index, int count);
    public sealed virtual bool HasChildren(object item);
    public sealed virtual int IndexOf(object parent, object child);
    public sealed virtual INotifyCollectionChanged GetChangeProvider(object node);
    public sealed virtual int FetchCount(object item);
}
public enum JetBrains.Application.UI.Controls.TreeGrid.Revised.EnumerateDirection : Enum {
    public int value__;
    public static EnumerateDirection Forward;
    public static EnumerateDirection Backward;
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Controls.TreeGrid.Revised.EnumerateOptions : Enum {
    public int value__;
    public static EnumerateOptions None;
    public static EnumerateOptions CoerceExpansion;
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.CombiningFilterDescriptor : object {
    private EventHandler Invalidated;
    private IFilterDescriptor[] myFilters;
    private Operation myOperation;
    public CombiningFilterDescriptor(IEnumerable`1<IFilterDescriptor> filters, Operation operation);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public void Invalidate();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.UI.Controls.TreeGrid.Revised.IFilterDescriptor.IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.DelegateFilterDescriptor`1 : object {
    private Func`2<T, Nullable`1<bool>> myFunction;
    private EventHandler Invalidated;
    public DelegateFilterDescriptor`1(Func`2<T, Nullable`1<bool>> function);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection : object {
    [NotNullAttribute]
public IProperty`1<IFilterDescriptor> CombinedFilter;
    [NotNullAttribute]
public IDictionaryEvents`2<ReadonlyToken, IFilterDescriptor> Filters;
    public FiltersCollection(Lifetime lifetime, Operation operation);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.PredicateFilterDescriptor`1 : object {
    private EventHandler Invalidated;
    private bool myFinalValue;
    [CompilerGeneratedAttribute]
private Predicate`1<T> <Predicate>k__BackingField;
    public Predicate`1<T> Predicate { get; private set; }
    public PredicateFilterDescriptor`1(Predicate`1<T> predicate, bool finalValue);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public Predicate`1<T> get_Predicate();
    [CompilerGeneratedAttribute]
private void set_Predicate(Predicate`1<T> value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Helpers.GroupingEvent : object {
    private static TimeSpan ourEpsilon;
    private Action Fired;
    private Dispatcher myDispatcher;
    private DispatcherPriority myPriority;
    private TimeSpan myTimeSpan;
    private DispatcherTimer myTimer;
    private object myLock;
    private DateTime myDueTime;
    public TimeSpan Interval { get; public set; }
    public GroupingEvent(Dispatcher dispatcher, DispatcherPriority priority, TimeSpan timeSpan, Action fired);
    private static GroupingEvent();
    public void add_Fired(Action value);
    public void remove_Fired(Action value);
    public TimeSpan get_Interval();
    public void set_Interval(TimeSpan value);
    public void Fire(bool prolong);
    private bool IsScheduled();
    private void SetDueTimeIn(TimeSpan interval);
    private void ScheduleTickIn(TimeSpan interval);
    private void DisposeTimer();
    private void OnTick(object sender, EventArgs e);
    public void Prolong();
    public void Abort();
}
public static class JetBrains.Application.UI.Controls.TreeGrid.Revised.Helpers.IndexOf : object {
    public static int Calculate(IEnumerable`1<T> source, T value, IEqualityComparer`1<T> comparer);
    public static int Calculate(IEnumerable source, object value, IEqualityComparer comparer);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider {
    public abstract virtual int FetchCount(object node);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<object> FetchChildren(object node, int index, int count);
    public abstract virtual bool HasChildren(object node);
    public abstract virtual int IndexOf(object parent, object child);
    [CanBeNullAttribute]
public abstract virtual INotifyCollectionChanged GetChangeProvider(object node);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.IFilterDescriptor {
    public abstract virtual void add_Invalidated(EventHandler value);
    public abstract virtual void remove_Invalidated(EventHandler value);
    public abstract virtual Nullable`1<bool> IsAccepted(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection {
    public abstract virtual void Add(object item);
    public abstract virtual void SelectTo(object item);
    public abstract virtual void Select(object item);
    public abstract virtual void Invert(object item);
    public abstract virtual void SelectAll();
    public abstract virtual bool IsSelected(object item);
    public abstract virtual void Clear();
    public abstract virtual void ExpandTo(object item);
    public abstract virtual void Invalidate();
    public abstract virtual void Reevaluate();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.ISortDescription {
    public abstract virtual void add_Invalidated(EventHandler value);
    public abstract virtual void remove_Invalidated(EventHandler value);
}
public class JetBrains.Application.UI.Controls.TreeGrid.SortDescription : object {
    private IComparer myCustomComparer;
    private String[] myPropertyPath;
    private Func`2<object, object> myGetter;
    private Dictionary`2<Type, PropertyInfo> myPropertyInfoCache;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate5;
    public SortDescription(string propertyPath);
    public SortDescription(string propertyPath, IComparer comparer);
    public SortDescription(Func`2<object, object> getter, IComparer comparer);
    public SortDescription(IComparer comparer);
    public sealed virtual int Compare(object x, object y);
    private int CompareCore(object x, object y);
    private object ResolvePropertyPath(object target, IEnumerable`1<string> propertyPath);
    private object GetPropertyValue(object target, string propertyName);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__0(object o);
    [CompilerGeneratedAttribute]
private object <.ctor>b__1(object o);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__4(object o);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeGrid.UIChainedJobExtensions : object {
    [ExtensionAttribute]
public static void Pump(IChainedJob chainedJob);
    [ExtensionAttribute]
public static void Pump(IChainedJob chainedJob, TimeSpan timeLimit);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.DelegateFilterDescriptor : object {
    [CompilerGeneratedAttribute]
private Predicate`1<object> <Predicate>k__BackingField;
    public Predicate`1<object> Predicate { get; public set; }
    public DelegateFilterDescriptor(Predicate`1<object> predicate);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Predicate`1<object> value);
    public sealed virtual bool PassesFilter(object target);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.DelegateFilterDescriptor`1 : object {
    [CompilerGeneratedAttribute]
private Predicate`1<TItem> <Predicate>k__BackingField;
    public Predicate`1<TItem> Predicate { get; public set; }
    public DelegateFilterDescriptor`1(Predicate`1<TItem> predicate);
    [CompilerGeneratedAttribute]
public Predicate`1<TItem> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Predicate`1<TItem> value);
    public sealed virtual bool PassesFilter(object target);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.DelegateSortDescriptor : object {
    [CompilerGeneratedAttribute]
private Func`2<object, Comparison`1<object>> <ComparitionFactory>k__BackingField;
    public Func`2<object, Comparison`1<object>> ComparitionFactory { get; public set; }
    public DelegateSortDescriptor(Comparison`1<object> comparition);
    public DelegateSortDescriptor(Func`2<object, Comparison`1<object>> comparitionFactory);
    [CompilerGeneratedAttribute]
public Func`2<object, Comparison`1<object>> get_ComparitionFactory();
    [CompilerGeneratedAttribute]
public void set_ComparitionFactory(Func`2<object, Comparison`1<object>> value);
    public sealed virtual Comparison`1<object> GetComparision(object parent);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.IFilterDescriptor {
    public abstract virtual bool PassesFilter(object target);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.IFilterSortController {
    public abstract virtual bool SupportsSort();
    public abstract virtual void ApplySort(ISortDescriptor sortDescriptor, SortOrder sortOrder);
    public abstract virtual void RemoveSort();
    public abstract virtual bool SupportsFilter();
    public abstract virtual void ApplyFilter(IFilterDescriptor filterDescriptor);
    public abstract virtual void RemoveFilter();
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.IIterativeTreeModelChangeTracker {
    public abstract virtual void add_NotifyInsert(InsertRemoveChangeDelegate value);
    public abstract virtual void remove_NotifyInsert(InsertRemoveChangeDelegate value);
    public abstract virtual void add_NotifyRemove(InsertRemoveChangeDelegate value);
    public abstract virtual void remove_NotifyRemove(InsertRemoveChangeDelegate value);
    public abstract virtual void add_NotifyReplace(ReplaceChangeDelegate value);
    public abstract virtual void remove_NotifyReplace(ReplaceChangeDelegate value);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.INodeState {
    public ITreeNodeStateProvider Provider { get; }
    public int Level { get; }
    public bool HasChildren { get; }
    public bool IsExpanded { get; }
    public INodeState Parent { get; }
    public int Index { get; }
    public object SourceObject { get; }
    public IEnumerable`1<INodeState> Children { get; }
    public IEnumerable`1<INodeState> FilteredChildren { get; }
    public abstract virtual ITreeNodeStateProvider get_Provider();
    public abstract virtual int get_Level();
    public abstract virtual bool get_HasChildren();
    public abstract virtual bool get_IsExpanded();
    public abstract virtual INodeState get_Parent();
    public abstract virtual int get_Index();
    public abstract virtual object get_SourceObject();
    public abstract virtual IEnumerable`1<INodeState> get_Children();
    public abstract virtual IEnumerable`1<INodeState> get_FilteredChildren();
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.InsertRemoveChangeDelegate : MulticastDelegate {
    public InsertRemoveChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    public virtual IAsyncResult BeginInvoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ISelectionManager {
    public IEnumerable`1<INodeState> SelectedNodes { get; }
    public abstract virtual void SetSelection(INodeState start, INodeState finish, SelectionOperation operation);
    public abstract virtual void Clear();
    public abstract virtual bool IsSelected(INodeState node);
    public abstract virtual IEnumerable`1<INodeState> get_SelectedNodes();
    public abstract virtual void add_SelectionChangeBegin(SelectionChangedDelegate value);
    public abstract virtual void remove_SelectionChangeBegin(SelectionChangedDelegate value);
    public abstract virtual void add_SelectionChangeEnd(SelectionChangedDelegate value);
    public abstract virtual void remove_SelectionChangeEnd(SelectionChangedDelegate value);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ISortDescriptor {
    public abstract virtual Comparison`1<object> GetComparision(object parent);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITrackingAware {
    public abstract virtual void StartTracking(object item);
    public abstract virtual void FinishTracking(object item);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelChangeTracker {
    public abstract virtual void add_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    public abstract virtual void remove_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    public abstract virtual void add_NotifyReset(ResetChangeDelegate value);
    public abstract virtual void remove_NotifyReset(ResetChangeDelegate value);
    public abstract virtual void add_ModelChanged(Action`1<ITreeModelChangeTracker> value);
    public abstract virtual void remove_ModelChanged(Action`1<ITreeModelChangeTracker> value);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelProvider {
    [NotNullAttribute]
public object Root { get; }
    public abstract virtual object get_Root();
    public abstract virtual bool HasChildren(object model);
    [CanBeNullAttribute]
public abstract virtual IList GetChildren(object parent);
    [CanBeNullAttribute]
public abstract virtual ITreeModelChangeTracker GetChangeTracker();
    [CanBeNullAttribute]
public abstract virtual IEqualityComparer`1<object> GetCustomComparer();
    [CanBeNullAttribute]
public abstract virtual ITreeStateRestoreSupportSimple GetStateRestoreSupport();
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeNodeStateProvider {
    public INodeState Root { get; }
    public TreeNodeStateProviderOptions Options { get; public set; }
    public int VisibleNodeCount { get; }
    public ITreeModelProvider Model { get; public set; }
    public ISelectionManager SelectionManager { get; }
    public IFilterSortController FilterSortController { get; }
    public IDisposable ModificationCookie { get; }
    public abstract virtual INodeState get_Root();
    public abstract virtual void set_Options(TreeNodeStateProviderOptions value);
    public abstract virtual TreeNodeStateProviderOptions get_Options();
    public abstract virtual void SetIsExpanded(INodeState nodeState, bool state);
    public abstract virtual void ExpandAll(INodeState node, Predicate`1<INodeState> expandDescendants);
    public abstract virtual void CollapseAll(INodeState node);
    public abstract virtual IEnumerable`1<INodeState> FetchRange(int offset, int count);
    public abstract virtual int TraverseIndex(INodeState node);
    [CanBeNullAttribute]
public abstract virtual INodeState ByIndexPath(IEnumerable`1<int> indexPath);
    [CanBeNullAttribute]
public abstract virtual INodeState ByObjectPath(IEnumerable`1<object> objectPath);
    public abstract virtual int get_VisibleNodeCount();
    public abstract virtual void add_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    public abstract virtual void remove_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    public abstract virtual ITreeModelProvider get_Model();
    public abstract virtual void set_Model(ITreeModelProvider value);
    public abstract virtual ISelectionManager get_SelectionManager();
    public abstract virtual IFilterSortController get_FilterSortController();
    public abstract virtual IDisposable get_ModificationCookie();
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<object> FromIdentity(object identity);
    public abstract virtual object GetParent(object model);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportSimple {
    [NotNullAttribute]
public abstract virtual object GetIdentity(object model);
    [CanBeNullAttribute]
public abstract virtual ITreeStateRestoreSupportAdvanced GetAdvanced();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeListView.Contracts.NodeStateUtils : object {
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, INodeState> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, INodeState> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
public static IEnumerable`1<INodeState> ParentPath(INodeState node);
    [ExtensionAttribute]
public static IEnumerable`1<INodeState> SelfAndParentPath(INodeState node);
    [CompilerGeneratedAttribute]
private static INodeState <ParentPath>b__0(INodeState state);
    [CompilerGeneratedAttribute]
private static INodeState <SelfAndParentPath>b__2(INodeState state);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.ProviderSavedState : object {
    private JetHashSet`1<SerializableSelection> mySelected;
    private OrderedHashSet`1<object> myExpanded;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, IEnumerable`1<INodeState>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ITreeStateRestoreSupportSimple, ITreeStateRestoreSupportAdvanced> CS$<>9__CachedAnonymousMethodDelegate9;
    public ProviderSavedState(ITreeNodeStateProvider provider);
    private static object GetIdentity(object model, ITreeModelProvider modelProvider);
    public void ApplyTo(ITreeNodeStateProvider nodeStateProvider);
    private void ApplyByRemapping(ITreeNodeStateProvider nodeStateProvider, ITreeStateRestoreSupportAdvanced stateAdvanced);
    private void ApplyByVisitingNewTree(ITreeNodeStateProvider nodeStateProvider);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<INodeState> <.ctor>b__2(INodeState o);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(INodeState state);
    [CompilerGeneratedAttribute]
private static ITreeStateRestoreSupportAdvanced <ApplyTo>b__8(ITreeStateRestoreSupportSimple _);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeListView.Contracts.ProviderUtils : object {
    [CompilerGeneratedAttribute]
private static Func`2<ITreeNodeStateProvider, ISelectionManager> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, INodeState> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, int> CS$<>9__CachedAnonymousMethodDelegate10;
    [ExtensionAttribute]
public static bool IsSelected(INodeState node);
    [ExtensionAttribute]
public static void ExpandAll(ITreeNodeStateProvider provider);
    [ExtensionAttribute]
public static void CollapseAll(ITreeNodeStateProvider provider);
    [ExtensionAttribute]
public static void SetIsExpanded(ITreeNodeStateProvider provider, bool state, Object[] path);
    [ExtensionAttribute]
public static void SetIsExpanded(ITreeNodeStateProvider provider, IEnumerable`1<object> path, bool isExpanded);
    [ExtensionAttribute]
public static void SetIsExpanded(ITreeNodeStateProvider provider, IEnumerable`1<int> path, bool isExpanded);
    [ExtensionAttribute]
public static IndexPath GetIndexPath(INodeState node);
    [ExtensionAttribute]
public static int TraverseIndex(ITreeNodeStateProvider provider, IEnumerable`1<int> path);
    [ExtensionAttribute]
public static int TraverseIndex(ITreeNodeStateProvider provider, IEnumerable`1<object> path);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEqualityComparer`1<object> GetCustomEqualityComparerOrDefault(ITreeModelProvider model);
    public static bool CustomEquals(ITreeModelProvider model, object a, object b);
    [CompilerGeneratedAttribute]
private static ISelectionManager <IsSelected>b__0(ITreeNodeStateProvider _);
    [CompilerGeneratedAttribute]
private static INodeState <GetIndexPath>b__b(INodeState n);
    [CompilerGeneratedAttribute]
private static bool <GetIndexPath>b__c(INodeState n);
    [CompilerGeneratedAttribute]
private static int <GetIndexPath>b__d(INodeState n);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.ReplaceChangeDelegate : MulticastDelegate {
    public ReplaceChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    public virtual IAsyncResult BeginInvoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.ResetChangeDelegate : MulticastDelegate {
    public ResetChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(ITreeModelChangeTracker tracker, object owner, ResetType resetType);
    public virtual IAsyncResult BeginInvoke(ITreeModelChangeTracker tracker, object owner, ResetType resetType, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.Application.UI.Controls.TreeListView.Contracts.ResetType : Enum {
    public int value__;
    public static ResetType ResetChildren;
    public static ResetType ResetSubtree;
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.SelectionChangedDelegate : MulticastDelegate {
    public SelectionChangedDelegate(object object, IntPtr method);
    public virtual void Invoke(ISelectionManager sender);
    public virtual IAsyncResult BeginInvoke(ISelectionManager sender, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.Application.UI.Controls.TreeListView.Contracts.SelectionOperation : Enum {
    public int value__;
    public static SelectionOperation Add;
    public static SelectionOperation Remove;
    public static SelectionOperation Toggle;
    public static SelectionOperation Set;
}
public static class JetBrains.Application.UI.Controls.TreeListView.Contracts.SortDescriptor : object {
    public static ISortDescriptor IComparableSortDescriptor;
    [CompilerGeneratedAttribute]
private static Func`3<IComparable, IComparable, int> CS$<>9__CachedAnonymousMethodDelegate4;
    private static SortDescriptor();
    [NotNullAttribute]
public static ISortDescriptor Create(Func`3<TItem, TItem, int> FComparer);
    [CompilerGeneratedAttribute]
private static int <.cctor>b__3(IComparable α, IComparable β);
}
public enum JetBrains.Application.UI.Controls.TreeListView.Contracts.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.TreeNodeStateProviderOptions : object {
    public bool AutoExpandSingleChild;
    private Func`2<object, bool> myExpandNodeInitially;
    [NotNullAttribute]
public Func`2<object, bool> ExpandNodeInitially { get; }
    public TreeNodeStateProviderOptions(bool autoExpandSingleChild, Func`2<object, bool> expandNodeInitially);
    public Func`2<object, bool> get_ExpandNodeInitially();
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.ExpandNodesVisitor : ModelVisitor {
    private ITreeNodeStateProvider myTreeNodeStateProvider;
    private Func`2<object, bool> myShouldExpand;
    public ExpandNodesVisitor(ITreeNodeStateProvider treeNodeStateProvider, Func`2<object, bool> shouldExpand);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.FindPathVisitor : ModelVisitor {
    private object myTarget;
    [CompilerGeneratedAttribute]
private List`1<object> <Path>k__BackingField;
    [CanBeNullAttribute]
public List`1<object> Path { get; private set; }
    public FindPathVisitor(object target);
    [CompilerGeneratedAttribute]
public List`1<object> get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(List`1<object> value);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.IndexPath : object {
    private IList`1<int> myIndexes;
    private int myHash;
    public int Item { get; public set; }
    public int Count { get; }
    public IndexPath(IList`1<int> path);
    public IndexPath(IEnumerable`1<int> path, bool isReversed);
    private int GetHash();
    public bool Equals(IndexPath other);
    public sealed virtual int CompareTo(IndexPath other);
    public virtual bool Equals(object obj);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    public virtual int GetHashCode();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static bool op_Equality(IndexPath left, IndexPath right);
    public static bool op_Inequality(IndexPath left, IndexPath right);
    public int get_Item(int index);
    public void set_Item(int index, int value);
    public int get_Count();
}
public abstract class JetBrains.Application.UI.Controls.TreeListView.Implementation.ModelVisitor : object {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<object> <Comparer>k__BackingField;
    protected IEqualityComparer`1<object> Comparer { get; private set; }
    [CompilerGeneratedAttribute]
protected IEqualityComparer`1<object> get_Comparer();
    [CompilerGeneratedAttribute]
private void set_Comparer(IEqualityComparer`1<object> value);
    public void Visit(ITreeModelProvider model);
    private VisitResult Visit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
    protected virtual VisitResult OnBeforeVisit(object root, ITreeModelProvider model, List`1<object> parentPath, HashSet`1<object> visited);
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.SelectNodesVisitor : ModelVisitor {
    private ITreeNodeStateProvider myTreeNodeStateProvider;
    private Func`2<object, bool> myShouldSelect;
    private HashSet`1<object> myOnceSelected;
    public SelectNodesVisitor(ITreeNodeStateProvider treeNodeStateProvider, Func`2<object, bool> shouldSelect);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
    protected virtual VisitResult OnBeforeVisit(object root, ITreeModelProvider model, List`1<object> parentPath, HashSet`1<object> visited);
}
public abstract class JetBrains.Application.UI.Controls.TreeListView.Implementation.TreeModelChangeTrackerBase : object {
    private Action`1<ITreeModelChangeTracker> ModelChanging;
    private InsertRemoveChangeDelegate NotifyInsert;
    private InsertRemoveChangeDelegate NotifyRemove;
    private ReplaceChangeDelegate NotifyReplace;
    private ResetChangeDelegate NotifyReset;
    private Action`1<ITreeModelChangeTracker> ModelChanged;
    public abstract virtual void StartTracking(object item);
    public abstract virtual void FinishTracking(object item);
    public sealed virtual void add_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    public sealed virtual void remove_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    protected virtual void OnModelChanging();
    public sealed virtual void add_NotifyInsert(InsertRemoveChangeDelegate value);
    public sealed virtual void remove_NotifyInsert(InsertRemoveChangeDelegate value);
    protected virtual void OnNotifyInsert(object owner, int offset, int count);
    public sealed virtual void add_NotifyRemove(InsertRemoveChangeDelegate value);
    public sealed virtual void remove_NotifyRemove(InsertRemoveChangeDelegate value);
    protected virtual void OnNotifyRemove(object owner, int offset, int count);
    public sealed virtual void add_NotifyReplace(ReplaceChangeDelegate value);
    public sealed virtual void remove_NotifyReplace(ReplaceChangeDelegate value);
    protected virtual void OnNotifyReplace(object owner, int offset, int count);
    public sealed virtual void add_NotifyReset(ResetChangeDelegate value);
    public sealed virtual void remove_NotifyReset(ResetChangeDelegate value);
    protected virtual void OnNotifyReset(object owner, ResetType arg);
    public sealed virtual void add_ModelChanged(Action`1<ITreeModelChangeTracker> value);
    public sealed virtual void remove_ModelChanged(Action`1<ITreeModelChangeTracker> value);
    protected virtual void OnModelChanged();
}
[DebuggerDisplayAttribute("{Count}")]
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.TreeToListAdapter : ReadOnlyListAdapterBase`1<INodeState> {
    private static int CacheListCount;
    private Dictionary`2<int, CacheItem> myCache;
    private bool myUseCaching;
    private int myCacheTimestamp;
    private int myCacheThreshold;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private ITreeNodeStateProvider <Provider>k__BackingField;
    public ITreeNodeStateProvider Provider { get; private set; }
    public INodeState Item { get; public set; }
    public int Count { get; }
    public bool UseCaching { get; public set; }
    public int CacheThreshold { get; public set; }
    public TreeToListAdapter(ITreeNodeStateProvider treeNodeStateProvider);
    [CompilerGeneratedAttribute]
public ITreeNodeStateProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(ITreeNodeStateProvider value);
    private void RedrawRequired();
    public virtual int IndexOf(INodeState item);
    public virtual bool Contains(object value);
    public virtual bool Contains(INodeState item);
    public virtual INodeState get_Item(int index);
    public virtual void set_Item(int index, INodeState value);
    private void RemoveMinTime();
    public virtual int get_Count();
    public bool get_UseCaching();
    public void set_UseCaching(bool value);
    public int get_CacheThreshold();
    public void set_CacheThreshold(int value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(ITreeNodeStateProvider provider);
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.VirtualData.RangeSetTracker : object {
    private List`1<TextRange> myRanges;
    public IList`1<TextRange> Ranges { get; }
    public IList`1<TextRange> get_Ranges();
    public void SetOn(TextRange range);
    public void SetOff(TextRange range);
    public void Invert(TextRange range);
    private void TryJoinNext(int startIndex);
    private int BinarySearch(TextRange range, Func`3<TextRange, TextRange, int> comparer);
    private int BinarySearch(TextRange range, Func`3<TextRange, TextRange, int> comparer, Boolean& found);
    private static int RelativeToStart(TextRange inCollection, TextRange searched);
    private static int RelativeToEnd(TextRange inCollection, TextRange searched);
    internal static void Split(TextRange textRange, TextRange range, List`1<TextRange> result);
    public static void Split(TextRange textRange, TextRange range, Nullable`1& leftR, Nullable`1& rightR);
    public bool Contains(int index);
    public void Clear();
    public void UpdateRange(TextRange oldRange, TextRange newRange);
    public void UpdateRange(int offset, int oldLen, int newLen);
    private void InsertRange(TextRange newRange);
    private void RemoveRange(TextRange oldRange);
}
public class JetBrains.Application.UI.Controls.TreeListView.ObservableAutomation : ObservableObject {
}
public class JetBrains.Application.UI.Controls.TreeListView.ObservableObject : object {
    private PropertyChangedEventHandler PropertyChanged;
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
public void OnPropertyChanged(string name);
    [NotifyPropertyChangedInvocatorAttribute("propertyName")]
protected bool SetField(T& field, T newValue, string propertyName);
}
[DefaultMemberAttribute("Item")]
public abstract class JetBrains.Application.UI.Controls.TreeListView.ReadOnlyListAdapterBase`1 : object {
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public T Item { get; public set; }
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private IEnumerable`1<T> Enumerate();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual int Add(object value);
    public abstract virtual bool Contains(object value);
    public virtual void Clear();
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual void CopyTo(Array array, int index);
    public abstract virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public abstract virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public abstract virtual void set_Item(int index, T value);
    public abstract virtual T get_Item(int index);
}
public class JetBrains.Application.UI.Controls.TreeView.DragResponse : object {
    public static DragResponse Empty;
    [CompilerGeneratedAttribute]
private DragDropEffects <BeforeEffects>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <AfterEffects>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <IntoEffects>k__BackingField;
    public DragDropEffects BeforeEffects { get; public set; }
    public DragDropEffects AfterEffects { get; public set; }
    public DragDropEffects IntoEffects { get; public set; }
    private static DragResponse();
    [CompilerGeneratedAttribute]
public DragDropEffects get_BeforeEffects();
    [CompilerGeneratedAttribute]
public void set_BeforeEffects(DragDropEffects value);
    [CompilerGeneratedAttribute]
public DragDropEffects get_AfterEffects();
    [CompilerGeneratedAttribute]
public void set_AfterEffects(DragDropEffects value);
    [CompilerGeneratedAttribute]
public DragDropEffects get_IntoEffects();
    [CompilerGeneratedAttribute]
public void set_IntoEffects(DragDropEffects value);
}
public interface JetBrains.Application.UI.Controls.TreeView.IPreviewControl {
}
public interface JetBrains.Application.UI.Controls.TreeView.IPreviewControlWithView {
    [NotNullAttribute]
public EitherControl View { get; }
    public abstract virtual EitherControl get_View();
}
public interface JetBrains.Application.UI.Controls.TreeView.IPreviewControlWithViewModel {
    [NotNullAttribute]
public IAutomation Model { get; }
    public abstract virtual IAutomation get_Model();
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeModelVisitor {
    public abstract virtual void VisitTreeModel(TreeModel modelNode, IProgressIndicator progress);
    public abstract virtual void VisitTreeModelNode(TreeModelNode modelNode, IProgressIndicator progress);
    public abstract virtual void VisitPresentableItemBlock(PresentableItemBlock presentableItemBlock, IProgressIndicator progress);
    public abstract virtual void VisitPresentableItem(IPresentableItem presentableItem, IProgressIndicator progress);
    public abstract virtual void VisitPresentableItemImage(PresentableItemImage presentableItemImage, IProgressIndicator progress);
    public abstract virtual void VisitRichTextBlock(RichTextBlock richTextBlock, IProgressIndicator progress);
    public abstract virtual void VisitRichText(RichText richText, IProgressIndicator progress);
    public abstract virtual void VisitRichString(RichString richString, IProgressIndicator progress);
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeViewController {
    public bool VisibilitySupported { get; }
    public bool QuickSearchSupported { get; }
    public QuickSearchVisibilityBehavior QuickSearchVisibilityBehavior { get; }
    public bool SupportMultiSelection { get; }
    public bool RootNodesCollapsable { get; }
    public bool AutoExpandSingleChild { get; }
    public bool AutoExpandAllOnQuickSearch { get; }
    public bool UpdateColumnWidthsOnNodeCreation { get; }
    public bool DragDropSupported { get; }
    public bool GuardActions { get; }
    public bool UseAutoContrastFontColorForPrimaryColumn { get; }
    public FilteringMode FilteringMode { get; }
    public IProperty`1<bool> IsBusy { get; }
    public IProperty`1<Nullable`1<double>> Progress { get; }
    public abstract virtual bool get_VisibilitySupported();
    public abstract virtual bool get_QuickSearchSupported();
    public abstract virtual QuickSearchVisibilityBehavior get_QuickSearchVisibilityBehavior();
    public abstract virtual bool get_SupportMultiSelection();
    public abstract virtual bool get_RootNodesCollapsable();
    public abstract virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public abstract virtual bool get_AutoExpandSingleChild();
    public abstract virtual bool get_AutoExpandAllOnQuickSearch();
    public abstract virtual bool get_UpdateColumnWidthsOnNodeCreation();
    [ObsoleteAttribute("You should implement IsQuickSearchAccepted and GetQuickSearchHighlightings. QuickSearchMatches is obsolete and will be removed soon.")]
public abstract virtual bool QuickSearchMatches(TreeModelNode modelNode, string filter);
    public abstract virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode modelNode, string filter);
    public abstract virtual Task`1<bool> PrepareQuickSearch(string filter, Func`1<bool> checkForInterrupt);
    public abstract virtual IEnumerable`1<HighlightedRange> GetQuickSearchHighlightings(TreeModelNode modelNode, int column, string text, string quickSearchText);
    public abstract virtual bool VisibilityState(TreeModelNode modelNode);
    public abstract virtual bool get_DragDropSupported();
    public abstract virtual bool get_GuardActions();
    public abstract virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    public abstract virtual bool get_UseAutoContrastFontColorForPrimaryColumn();
    public abstract virtual FilteringMode get_FilteringMode();
    public abstract virtual IProperty`1<bool> get_IsBusy();
    public abstract virtual IProperty`1<Nullable`1<double>> get_Progress();
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithDragAndDrop {
    public abstract virtual DragDropEffects DragStarting(IList`1<TreeModelNode> selectedNodes, IDataObject dataObject);
    public abstract virtual DragResponse Dragging(TreeModelNode node, DragEventArgs data);
    public abstract virtual void DragDrop(TreeModelNode node, RelativeLocation location, DragEventArgs data);
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview {
    public PreviewSupport PreviewSupport { get; }
    public abstract virtual PreviewSupport get_PreviewSupport();
    public abstract virtual IPreviewControl PreviewCreateControl(Lifetime lifetime, WindowFrame framePreview);
    public abstract virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
}
public class JetBrains.Application.UI.Controls.TreeView.PresentationCallback`2 : MulticastDelegate {
    public PresentationCallback`2(object object, IntPtr method);
    public virtual void Invoke(object value, TPresentableItem item, TStructureElement structureElement, PresentationState state);
    public virtual IAsyncResult BeginInvoke(object value, TPresentableItem item, TStructureElement structureElement, PresentationState state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeView.PresentationCallback`3 : MulticastDelegate {
    public PresentationCallback`3(object object, IntPtr method);
    public virtual void Invoke(T value, TPresentableItem item, TStructureElement structureElement, PresentationState state);
    public virtual IAsyncResult BeginInvoke(T value, TPresentableItem item, TStructureElement structureElement, PresentationState state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeView.PresentationState : object {
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Focused>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    public bool Expanded { get; public set; }
    public bool Focused { get; public set; }
    public bool Selected { get; public set; }
    public PresentationState(PresentationState state);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public bool get_Focused();
    [CompilerGeneratedAttribute]
public void set_Focused(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    protected bool Equals(PresentationState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Application.UI.Controls.TreeView.PreviewSupport : Enum {
    public int value__;
    public static PreviewSupport NotSupported;
    public static PreviewSupport Supported;
    public static PreviewSupport SupportedAndVisibleByDefault;
    public static PreviewSupport Virtual;
}
public enum JetBrains.Application.UI.Controls.TreeView.QuickSearchVisibilityBehavior : Enum {
    public int value__;
    public static QuickSearchVisibilityBehavior UserDefined;
    public static QuickSearchVisibilityBehavior AutoHide;
    public static QuickSearchVisibilityBehavior ShowAlways;
}
public enum JetBrains.Application.UI.Controls.TreeView.RelativeLocation : Enum {
    public int value__;
    public static RelativeLocation None;
    public static RelativeLocation Into;
    public static RelativeLocation Before;
    public static RelativeLocation After;
}
public class JetBrains.Application.UI.Controls.TreeView.StructuredPresenter`2 : object {
    private static StructuredPresenter`2<TStructureElement, IPresentableItem> ourDefaultPresenter;
    private TypeHierarchyMap`1<IStructuredPresenter<TStructureElement, TPresentableItem>> myPresenters;
    private bool myLocked;
    private PresentationCallback`2<TStructureElement, TPresentableItem> PresentAdorements;
    [CompilerGeneratedAttribute]
private static PresentationCallback`3<TStructureElement, IPresentableItem, object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static PresentationCallback`3<TStructureElement, IPresentableItem, TreeSection> CS$<>9__CachedAnonymousMethodDelegate3;
    public static StructuredPresenter`2<TStructureElement, IPresentableItem> Default { get; }
    public static StructuredPresenter`2<TStructureElement, IPresentableItem> get_Default();
    public void add_PresentAdorements(PresentationCallback`2<TStructureElement, TPresentableItem> value);
    public void remove_PresentAdorements(PresentationCallback`2<TStructureElement, TPresentableItem> value);
    public void UpdateItem(TStructureElement structureElement, TPresentableItem item, PresentationState state);
    public virtual void UpdateItem(object value, TStructureElement structureElement, TPresentableItem item, PresentationState state);
    public Type GetRegisteredType(object value);
    public void Present(PresentationCallback`3<TStructureElement, TPresentableItem, T> callback);
    private void Lock();
    [CompilerGeneratedAttribute]
private static void <get_Default>b__0(object dataValue, IPresentableItem item, TStructureElement structureElement, PresentationState state);
    [CompilerGeneratedAttribute]
private static void <get_Default>b__1(TreeSection value, IPresentableItem item, TStructureElement structureElement, PresentationState state);
}
public class JetBrains.Application.UI.Controls.TreeView.TreeViewController : AAutomation {
    private bool myAutoExpandSingleChild;
    private bool myRootNodesCollapsable;
    [CompilerGeneratedAttribute]
private bool <SupportMultiSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<double>> <Progress>k__BackingField;
    public bool AutoExpandAllOnQuickSearch { get; }
    public bool UpdateColumnWidthsOnNodeCreation { get; }
    public bool DragDropSupported { get; }
    public bool GuardActions { get; }
    public bool VisibilitySupported { get; }
    public bool QuickSearchSupported { get; }
    public QuickSearchVisibilityBehavior QuickSearchVisibilityBehavior { get; }
    public bool SupportMultiSelection { get; public set; }
    public bool RootNodesCollapsable { get; public set; }
    public bool AutoExpandSingleChild { get; public set; }
    [CanBeNullAttribute]
public IAutomation SummaryAutomation { get; }
    public IProperty`1<bool> IsBusy { get; private set; }
    public IProperty`1<Nullable`1<double>> Progress { get; private set; }
    public FilteringMode FilteringMode { get; }
    public bool UseAutoContrastFontColorForPrimaryColumn { get; }
    public static TreeViewController GetDefault();
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual bool get_AutoExpandAllOnQuickSearch();
    public virtual bool get_UpdateColumnWidthsOnNodeCreation();
    public virtual bool QuickSearchMatches(TreeModelNode modelNode, string quickSearchText);
    public virtual bool VisibilityState(TreeModelNode modelNode);
    public virtual bool get_DragDropSupported();
    public virtual bool get_GuardActions();
    public virtual bool get_VisibilitySupported();
    public virtual bool get_QuickSearchSupported();
    public virtual QuickSearchVisibilityBehavior get_QuickSearchVisibilityBehavior();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportMultiSelection();
    [CompilerGeneratedAttribute]
public void set_SupportMultiSelection(bool value);
    public sealed virtual bool get_RootNodesCollapsable();
    public void set_RootNodesCollapsable(bool value);
    public sealed virtual bool get_AutoExpandSingleChild();
    public void set_AutoExpandSingleChild(bool value);
    public virtual IAutomation get_SummaryAutomation();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsBusy();
    [CompilerGeneratedAttribute]
private void set_IsBusy(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Nullable`1<double>> get_Progress();
    [CompilerGeneratedAttribute]
private void set_Progress(IProperty`1<Nullable`1<double>> value);
    public virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    public virtual IEnumerable`1<HighlightedRange> GetQuickSearchHighlightings(TreeModelNode modelNode, int column, string text, string quickSearchText);
    public virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode modelNode, string filter);
    public virtual Task`1<bool> PrepareQuickSearch(string filter, Func`1<bool> checkForInterrupt);
    public virtual FilteringMode get_FilteringMode();
    public virtual bool get_UseAutoContrastFontColorForPrimaryColumn();
}
public interface JetBrains.Application.UI.Controls.Utils.ICachedPresentation {
    public abstract virtual void ResetCache();
}
public enum JetBrains.Application.UI.Controls.Utils.ImagePlacement : Enum {
    public int value__;
    public static ImagePlacement LEFT;
    public static ImagePlacement RIGHT;
}
public class JetBrains.Application.UI.Controls.Utils.InitCookie : object {
    private ISupportInitialize myControl;
    public InitCookie(ISupportInitialize control);
    public sealed virtual void Dispose();
}
public interface JetBrains.Application.UI.Controls.Utils.IPresentableItem {
    [NotNullAttribute]
public RichText RichText { get; public set; }
    [NotNullAttribute]
public PresentableItemImageCollection Images { get; }
    public abstract virtual void Clear();
    public abstract virtual RichText get_RichText();
    public abstract virtual void set_RichText(RichText value);
    public abstract virtual PresentableItemImageCollection get_Images();
}
public interface JetBrains.Application.UI.Controls.Utils.IPresentableItemImageOwner {
    public abstract virtual void NotifyImageCollectionChanged();
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItem : object {
    private PresentableItemImageCollection myImages;
    private RichText myRichText;
    private UIElement myElement;
    public RichText RichText { get; public set; }
    public PresentableItemImageCollection Images { get; }
    public UIElement CustomUiElement { get; public set; }
    public PresentableItem(string text);
    public PresentableItem(RichText richText);
    public PresentableItem(RichText richText, IList`1<PresentableItemImage> images);
    public PresentableItem(IconId icon);
    public PresentableItem(IconId icon, RichText label);
    public PresentableItem(IPresentableItem other);
    public sealed virtual void Clear();
    protected virtual void UpdateItem();
    public sealed virtual RichText get_RichText();
    public sealed virtual void set_RichText(RichText value);
    public sealed virtual PresentableItemImageCollection get_Images();
    public sealed virtual void NotifyImageCollectionChanged();
    public UIElement get_CustomUiElement();
    public void set_CustomUiElement(UIElement value);
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItemBlock : object {
    private PresentableItemImageCollection myImages;
    private RichTextBlock myRichText;
    public RichTextBlock RichText { get; public set; }
    public PresentableItemImageCollection Images { get; }
    public PresentableItemBlock(string text);
    public PresentableItemBlock(RichText richText);
    public PresentableItemBlock(RichTextBlock richTextBlock, IList`1<PresentableItemImage> images);
    public PresentableItemBlock(IconId icon);
    public PresentableItemBlock(IconId icon, RichTextBlock label);
    public PresentableItemBlock(PresentableItemBlock other);
    public void Clear();
    protected virtual void UpdateItem();
    public RichTextBlock get_RichText();
    public void set_RichText(RichTextBlock value);
    public PresentableItemImageCollection get_Images();
    public sealed virtual void NotifyImageCollectionChanged();
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItemDumper : object {
    [CompilerGeneratedAttribute]
private static Func`2<PresentableItemImage, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<PresentableItemImage, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public static string PresentableItemToString(IPresentableItem item);
    private static void BuildImage(StringBuilder builder, PresentableItemImage image);
    [CompilerGeneratedAttribute]
private static bool <PresentableItemToString>b__0(PresentableItemImage image);
    [CompilerGeneratedAttribute]
private static bool <PresentableItemToString>b__2(PresentableItemImage image);
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItemImage : object {
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private ImagePlacement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [NotNullAttribute]
public IconId Icon { get; private set; }
    public RichText ToolTipText { get; private set; }
    public ImagePlacement Placement { get; private set; }
    [CanBeNullAttribute]
public object Tag { get; public set; }
    private PresentableItemImage(IconId icon, RichText toolTipText, ImagePlacement placement);
    public static PresentableItemImage Create(IconId icon, RichText toolTipText, ImagePlacement placement);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public RichText get_ToolTipText();
    [CompilerGeneratedAttribute]
private void set_ToolTipText(RichText value);
    [CompilerGeneratedAttribute]
public ImagePlacement get_Placement();
    [CompilerGeneratedAttribute]
private void set_Placement(ImagePlacement value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    protected bool Equals(PresentableItemImage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.Utils.PresentableItemImageCache : object {
    private static int MaximumCacheSize;
    private static IEqualityComparer`1<PresentableItemImage> ourIconToolTipTextPlacementComparerInstance;
    private static JetHashSet`1<PresentableItemImage> ourCache;
    private static object ourLock;
    public static IEqualityComparer`1<PresentableItemImage> InternComparer { get; }
    private static PresentableItemImageCache();
    public static IEqualityComparer`1<PresentableItemImage> get_InternComparer();
    public static void ClearCache();
    [ExtensionAttribute]
[NotNullAttribute]
public static PresentableItemImage Intern(PresentableItemImage value);
    private static void AssertCacheIsSmall();
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItemImageCollection : Collection`1<PresentableItemImage> {
    private IPresentableItemImageOwner myOwner;
    private bool myShouldNotifyOnResume;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    public bool IsSuspended { get; private set; }
    public PresentableItemImageCollection(IList`1<PresentableItemImage> images);
    public PresentableItemImageCollection(IPresentableItemImageOwner owner);
    public PresentableItemImageCollection(IPresentableItemImageOwner owner, IList`1<PresentableItemImage> images);
    public void Add(IconId icon);
    public void Add(IconId icon, RichText toolTipText);
    public void Add(IconId icon, RichText toolTipText, ImagePlacement imagePlacement);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, PresentableItemImage item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, PresentableItemImage item);
    public void Insert(int index, IconId icon);
    private void Notify();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
}
public class JetBrains.Application.UI.Controls.ValidationAggregator : object {
    private IEnumerable`1<Func`2<string, string>> myValidators;
    public ValidationAggregator(Func`2[] validators);
    [CanBeNullAttribute]
public string GetError(string input);
}
public static class JetBrains.Application.UI.Controls.WindowlessControlAutomation : object {
    [NotNullAttribute]
public static IAutomation Create(string text);
    [NotNullAttribute]
public static IAutomation Create(IPresentableItem presentableItem);
    [NotNullAttribute]
public static IAutomation Create(IPresentableItem presentableItem, RenderParams renderParams);
    public static IAutomation Create(RichTextBlock block);
    public static IAutomation Create(RichTextBlock block, RenderParams renderParams);
    public static IAutomation Create(RichText richText);
    public static IAutomation Create(Image bitmap);
    private static IconId IsPresentableItemSingleImageOnly(IPresentableItem presentableItem);
    private static bool IsPresentableItemEmpty(IPresentableItem presentableItem);
    private static RichText IsPresentableItemTextOnly(IPresentableItem presentableItem);
}
public static class JetBrains.Application.UI.DataContext.UIDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<PopupWindowContextSource> PopupWindowContextSource;
    [NotNullAttribute]
public static DataConstant`1<ICloseAllItems> CloseAllItems;
    public static DataConstant`1<SettingsLayersDialogAutomation> SettingsLayersDialogAutomation;
    private static UIDataConstants();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.DataContext.UIDataConstantsAssertMainThread : object {
    public UIDataConstantsAssertMainThread(Lifetime lifetime, DataContexts contexts, IThreading mainThread);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.DataContext.UIDataConstantsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ICloseAllItems GetCloseAllItems(IDataContext dataContext);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Diagramming.API.DependencyType : Enum {
    public int value__;
    public static DependencyType Direct;
    public static DependencyType Transitive;
    public static DependencyType Unresolved;
    public static DependencyType Invalid;
    public static DependencyType Output;
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Diagramming.API.GraphViewerStub : object {
    public virtual Control GetDiagramControl(string name, IDiagramGraph graph, Lifetime lifetime);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraph {
    [NotNullAttribute]
public ICollection`1<IDiagramGraphNode> Nodes { get; }
    [NotNullAttribute]
public ICollection`1<IDiagramGraphEdge> Edges { get; }
    public Dictionary`2<object, IDiagramGraphElement> CustomElements { get; }
    public IEnumerable`1<IDiagramGroupNode> GroupNodes { get; }
    public int GroupingDepth { get; public set; }
    public abstract virtual ICollection`1<IDiagramGraphNode> get_Nodes();
    public abstract virtual ICollection`1<IDiagramGraphEdge> get_Edges();
    public abstract virtual Dictionary`2<object, IDiagramGraphElement> get_CustomElements();
    public abstract virtual IEnumerable`1<IDiagramGroupNode> get_GroupNodes();
    public abstract virtual int get_GroupingDepth();
    public abstract virtual void set_GroupingDepth(int value);
    public abstract virtual void AddElement(IDiagramGraphElement element);
    public abstract virtual bool RemoveElement(IDiagramGraphElement element);
    [CanBeNullAttribute]
public abstract virtual IDiagramGroupNode GetImmediateParent(IDiagramGraphElement element);
    public abstract virtual IDiagramGraph Clone();
    public abstract virtual void Dump(TextWriter writer);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge {
    [NotNullAttribute]
public IDiagramGraphNode Source { get; }
    [CanBeNullAttribute]
public IDiagramGraphNode Target { get; }
    public abstract virtual IDiagramGraphNode get_Source();
    public abstract virtual IDiagramGraphNode get_Target();
    public abstract virtual void Dump(TextWriter writer);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraphElement {
    public string Name { get; }
    public bool IsValid { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsValid();
    public abstract virtual void set_IsValid(bool value);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraphNode {
    [NotNullAttribute]
public ICollection`1<IDiagramGraphEdge> Outcoming { get; }
    [NotNullAttribute]
public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public abstract virtual ICollection`1<IDiagramGraphEdge> get_Outcoming();
    public abstract virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
    public abstract virtual void Dump(TextWriter writer);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGroupNode {
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public int Level { get; public set; }
    public abstract virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    public abstract virtual int get_Level();
    public abstract virtual void set_Level(int value);
}
public interface JetBrains.Application.UI.Diagramming.API.IGraphViewer {
    public abstract virtual Control GetDiagramControl(string name, IDiagramGraph graph, Lifetime lifetime);
}
public class JetBrains.Application.UI.Diagramming.DiagramGraphBase : object {
    protected JetHashSet`1<IDiagramGraphNode> myNodes;
    protected JetHashSet`1<IDiagramGraphEdge> myEdges;
    protected Dictionary`2<object, IDiagramGraphElement> myCustomElements;
    private Dictionary`2<IDiagramGraphElement, IDiagramGroupNode> myHierarchyMap;
    [CompilerGeneratedAttribute]
private int <GroupingDepth>k__BackingField;
    public ICollection`1<IDiagramGraphNode> Nodes { get; }
    public ICollection`1<IDiagramGraphEdge> Edges { get; }
    public Dictionary`2<object, IDiagramGraphElement> CustomElements { get; }
    public IEnumerable`1<IDiagramGroupNode> GroupNodes { get; }
    public int GroupingDepth { get; public set; }
    public Dictionary`2<IDiagramGraphElement, IDiagramGroupNode> HierarchyMap { get; }
    public sealed virtual ICollection`1<IDiagramGraphNode> get_Nodes();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Edges();
    public sealed virtual Dictionary`2<object, IDiagramGraphElement> get_CustomElements();
    public virtual IEnumerable`1<IDiagramGroupNode> get_GroupNodes();
    [CompilerGeneratedAttribute]
public virtual int get_GroupingDepth();
    [CompilerGeneratedAttribute]
public virtual void set_GroupingDepth(int value);
    public Dictionary`2<IDiagramGraphElement, IDiagramGroupNode> get_HierarchyMap();
    public virtual bool RemoveElement(IDiagramGraphElement element);
    public virtual void AddNode(IDiagramGraphNode node);
    public virtual void AddEdge(IDiagramGraphEdge edge);
    public virtual void AddElement(IDiagramGraphElement element);
    public virtual bool RemoveNode(IDiagramGraphNode node);
    public virtual bool RemoveEdge(IDiagramGraphEdge edge);
    [CanBeNullAttribute]
public sealed virtual IDiagramGroupNode GetImmediateParent(IDiagramGraphElement element);
    public virtual IDiagramGraph Clone();
    public virtual void Dump(TextWriter writer);
}
public abstract class JetBrains.Application.UI.Diagramming.DiagramGraphNode : object {
    private ICollection`1<IDiagramGraphEdge> myIncoming;
    private ICollection`1<IDiagramGraphEdge> myOutgoing;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementKind <Kind>k__BackingField;
    public ICollection`1<IDiagramGraphEdge> Outcoming { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ElementKind Kind { get; public set; }
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outcoming();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
    public sealed virtual void Dump(TextWriter writer);
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public ElementKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(ElementKind value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Diagramming.DiagramGraphNodeExtentions : object {
    [ExtensionAttribute]
public static bool RemoveEdge(IDiagramGraphNode node, IDiagramGraphEdge edge);
    [ExtensionAttribute]
public static void AddEdge(IDiagramGraphNode node, IDiagramGraphEdge edge);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Diagramming.ElementKind : Enum {
    public int value__;
    public static ElementKind Normal;
    public static ElementKind New;
    public static ElementKind Removed;
    public static ElementKind VB;
    public static ElementKind CSharp;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Diagramming.GraphUtils : object {
    [ObsoleteAttribute("Use 'Copy' method instead")]
public static void CopyInto(DiagramGraphBase source, DiagramGraphBase target, Func`2<IDiagramGraphElement, bool> shouldFlowFilter);
    public static void GraphDfs(IDiagramGraphNode node, IDiagramGraph graph, Func`2<IDiagramGraphNode, bool> nodeFunc, Func`2<IDiagramGraphEdge, bool> edgeAction, Action`1<IDiagramGraphNode> afterVisitedAction);
    [ExtensionAttribute]
public static bool ContainsNode(IDiagramGraph graph, IDiagramGraphNode node);
    [ExtensionAttribute]
public static bool ContainsNodeOrGroup(IDiagramGraph graph, IDiagramGraphNode node);
    [ExtensionAttribute]
public static bool ContainsEdge(IDiagramGraph graph, IDiagramGraphEdge edge);
    [ExtensionAttribute]
public static bool Contains(IDiagramGraph graph, IDiagramGraphElement element);
    [ExtensionAttribute]
public static IEnumerable`1<IDiagramGraphElement> Elements(IDiagramGraph graph);
    public static void FilterGraph(IDiagramGraph upToDateGraph, Func`2<IDiagramGraphElement, bool> shouldRemainFilter);
    [ExtensionAttribute]
public static void ProcessTransitiveEdges(IDiagramGraph graph, bool includeTransitive, Func`2<IDiagramGraphEdge, bool> shouldProcessEdge, Action`1<IDiagramGraphEdge> processTransitiveEdge);
    public static ICollection`1<IDiagramGraphElement> GetRelatedElements(ICollection`1<IDiagramGraphNode> nodesToRemove);
    public static int GetNestedItemsCount(IDiagramGroupNode initialGroupNode);
}
public interface JetBrains.Application.UI.Diagramming.IDiagramDescriptor {
}
public class JetBrains.Application.UI.Diagramming.SimpleDiagramGraph : DiagramGraphBase {
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Diagramming.ViewModelGraphExtensions : object {
    [ExtensionAttribute]
public static void GetParentsChain(IDiagramGraph graph, IDiagramGraphNode target, ICollection`1<IDiagramGroupNode> result);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.AvalonEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegate6;
    public static Visibility ConvertBoolToVisibility(bool visible);
    [NotNullAttribute]
[ExtensionAttribute]
[PureAttribute]
public static BitmapSource EditDpiValue(BitmapSource bmpSrc, DpiResolution dpiTarget);
    [ExtensionAttribute]
public static TFreezable Freezed(TFreezable thіs);
    [ExtensionAttribute]
public static DpiResolution GetResolution(BitmapSource bmp);
    [ExtensionAttribute]
public static DpiResolution GetResolution(Bitmap bmp);
    [ExtensionAttribute]
public static Size GetSize(ImageSource thіs);
    [ExtensionAttribute]
public static Size GetSizeLogical(Bitmap thіs);
    [ExtensionAttribute]
public static Size GetSizePhysical(BitmapSource thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static Transform InverseTransform(Transform tx);
    [ContractAnnotationAttribute("null=>true")]
[ExtensionAttribute]
public static bool IsNullOrIdentity(GeneralTransform tx);
    [NotNullAttribute]
[ExtensionAttribute]
public static DrawingBrush MakeGeometryBrush(Geometry geometry, SolidColorBrush brush, Pen pen);
    [ExtensionAttribute]
[NotNullAttribute]
public static BitmapSource Rasterize(ImageSource image, DpiResolution resolution, Nullable`1<Size> sizeLogical);
    [ExtensionAttribute]
[NotNullAttribute]
public static RenderTargetBitmap RasterizeDrawing(Drawing drawing, DpiResolution resolution, Nullable`1<Size> size);
    [NotNullAttribute]
public static Bitmap RasterizeDrawingGdip(DrawingGroup group, DpiResolution resolution, Nullable`1<Size> size);
    [NotNullAttribute]
[ExtensionAttribute]
public static BitmapSource Resample(BitmapSource bitmap, DpiResolution resolution);
    [ExtensionAttribute]
[NotNullAttribute]
public static Bitmap Resample(Bitmap bitmap, DpiResolution resolution);
    [NotNullAttribute]
[ExtensionAttribute]
[PureAttribute]
public static BitmapSource SetLogicalSize(BitmapSource bmpSrc, Size sizeLogical);
    [ExtensionAttribute]
[NotNullAttribute]
public static Bitmap ToGdiPlusBitmap(BitmapSource bmpAvalon);
    [ExtensionAttribute]
public static Vector Transform(GeneralTransform transform, Vector vector);
    private static Brush RasterizeDrawingGdip_Brush(Brush avalonbrush, HashSet`1<string> segfault);
    private static void RasterizeDrawingGdip_Dispatch(Drawing drawing, Graphics g, HashSet`1<string> segfault);
    private static void RasterizeDrawingGdip_GeometryDrawing(GeometryDrawing drawgeom, Graphics g, HashSet`1<string> segfault);
    [CompilerGeneratedAttribute]
private static string <RasterizeDrawingGdip>b__3(string x);
    [CompilerGeneratedAttribute]
private static string <RasterizeDrawingGdip>b__4(string s, string t);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.ColorEx : object {
    [ExtensionAttribute]
public static SolidBrush ToBrush(Color color);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.CustomAttributeProviderExtensions : object {
    [CanBeNullAttribute]
[ExtensionAttribute]
public static T GetAttribute(ICustomAttributeProvider provider, bool inherit);
    [NotNullAttribute]
[ExtensionAttribute]
public static T[] GetAttributes(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider, Type attributeType, bool inherit);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.DispatcherEx : object {
    [ExtensionAttribute]
public static void AssertAccess(Dispatcher dispatcher);
    [ExtensionAttribute]
public static void BeginOrInvoke(Dispatcher dispatcher, Action action);
    [ExtensionAttribute]
public static DispatcherOperation BeginInvoke(Dispatcher dispatcher, Action action);
    [ExtensionAttribute]
public static DispatcherOperation BeginInvoke(Dispatcher dispatcher, DispatcherPriority priority, Action action);
    [ExtensionAttribute]
public static void DelayInvoke(Dispatcher dispatcher, DispatcherPriority priority, Action action, TimeSpan delay);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.DispatcherExtensions : object {
    [ExtensionAttribute]
public static void DelayInvoke(Dispatcher dispatcher, DispatcherPriority priority, Action action, TimeSpan delay);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.ImageEx : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static Bitmap ToGrayscale(Image thіs, Lifetime lifetime);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.LayoutSettings", "Window persistence data.")]
public class JetBrains.Application.UI.Extensions.PersistenceBehaviorSettings : object {
    [SettingsIndexedEntryAttribute("Window bounds")]
public IIndexedEntry`2<string, string> WindowBounds;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsGenericDefinedAs(Type type, Type template, bool recursive);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type type);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<Type> GetHierarchy(Type type, bool includeSelf);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetInterfaces(Type type, bool includeSelf);
    [ExtensionAttribute]
public static bool Inherits(Type type);
    [ExtensionAttribute]
public static bool Inherits(Type type, Type parentType);
    [ExtensionAttribute]
public static bool Implements(Type type);
    [ExtensionAttribute]
public static bool Implements(Type type, Type interface);
    [ExtensionAttribute]
[NotNullAttribute]
public static Type[] GetGenericArgumentsOf(Type type, Type template);
}
public static class JetBrains.Application.UI.Extensions.UriHelpers : object {
    [ObsoleteAttribute("Use MakeUri method instead")]
public static Uri MakeUriToExecutingAssemplyResource(string path, Assembly assembly);
    public static Uri MakeUri(string path, Assembly assembly);
}
public class JetBrains.Application.UI.Help.ExceptionReport.Charisma.CharismaConnector : object {
    private Uri myServerBaseUrl;
    private IApplicationHost myApplicationDescriptor;
    private string myProjectName;
    private string mySubmitSubsystem;
    private Uri myLogin;
    private Uri myIssue;
    private Uri myGotoIssue;
    private Uri myCharismaRegister;
    private IExceptionHandlingService myExceptionHandlingService;
    public Uri RegisterUri { get; }
    public CharismaConnector(IApplicationHost applicationDescriptor, Uri server, string projectName, string submitSubsystem, IExceptionHandlingService exceptionHandlingService);
    public Uri get_RegisterUri();
    public void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, IWebProxy proxy, IProgressIndicator progressIndicator, bool isInternalMode);
    public CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    private static void CheckLogin(Pair`2<HttpWebResponse, string> responce);
    private static Pair`2<HttpWebResponse, string> SendRequest(Uri uri, IWebProxy proxy, IEnumerable`1<Cookie> cookies, IEnumerable`1<Pair`2<string, string>> pairs, IEnumerable`1<Pair`2<HttpRequestHeader, string>> headers);
    private static void WriteRequestKeys(WebRequest req, Encoding requestEncoding, IEnumerable`1<Pair`2<string, string>> pairs);
}
public class JetBrains.Application.UI.Help.ExceptionReport.Charisma.CharismaExceptionReportModel : object {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Login { get; public set; }
    public string Password { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public string Summary { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Help.ExceptionReport.CollectionEventsEx : object {
    [ObsoleteAttribute("Use CollectionBridge")]
[NotNullAttribute]
[ExtensionAttribute]
public static ICollectionEvents`1<TValue> WhereEvents(ICollectionEvents`1<TValue> sourceCollection, Lifetime lifetime, Predicate`1<TValue> filter);
    [NotNullAttribute]
[ExtensionAttribute]
public static ICollectionEvents`1<TValue> WhereEvents(ICollectionEvents`1<TValue> sourceCollection, Lifetime lifetime, Predicate`1<TValue> filter, Func`2<TValue, ISimpleSignal> getChangeSignal);
}
public class JetBrains.Application.UI.Help.ExceptionReport.CombinedIssueTracker : object {
    private IIssueTracker myInternalIssueTracker;
    private IIssueTracker myNormalIssueTracker;
    private string myUrl;
    private bool myReportOOMExceptions;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    private bool IsInternal { get; public set; }
    public CombinedIssueTracker(IIssueTracker internalIssueTracker, IIssueTracker normalIssueTracker);
    public CombinedIssueTracker(IIssueTracker internalIssueTracker, IIssueTracker normalIssueTracker, string url, bool reportOOMExceptions);
    public sealed virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public sealed virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    private void SubmitOOMException(ExceptionData exception);
    public sealed virtual Nullable`1<LoginInformation> Register();
    public sealed virtual CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    public sealed virtual Uri GetUrlForAttachmentsUpload();
    [CompilerGeneratedAttribute]
private bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInternal(bool value);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.ExceptionReport.DefaultIssueTracker : ExceptionAnalyzerTracker {
    public DefaultIssueTracker(OpensUri opensUri, IApplicationHost host, IExceptionHandlingService exceptionHandlingService, SubProducts products, ISettingsStore settingsStore);
    public DefaultIssueTracker(OpensUri opensUri, IssueTrackerBuildDescription builddesc, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerConnector : object {
    public static string GlobalProductName;
    private IExceptionHandlingService myService;
    private Regex myServerSideErrorMessageMatcher;
    private bool myIsGlobalConnector;
    private IssueTrackerBuildDescription myBuildDescription;
    [CompilerGeneratedAttribute]
private static Func`2<Action, bool> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, Action, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, long>, string> CS$<>9__CachedAnonymousMethodDelegate26;
    public ExceptionAnalyzerConnector(IssueTrackerBuildDescription builddesc, IExceptionHandlingService exceptionHandlingService, bool isGlobalConnector);
    private static ExceptionAnalyzerConnector();
    public string GetRegisterUri();
    public void SubmitException(ExceptionData exceptionData, string description, bool submitPrivately, bool attachSensitiveData, LoginInformation loginInformation, String[] attachmentUrls, IProgressIndicator progressIndicator);
    [NotNullAttribute]
private static IEnumerable`1<RequestParameter> GetSensitiveData(ExceptionData exceptionData);
    private static string GetMessage(ResponseBody response, ICollection`1<Action> actions, string key);
    public CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    private string ExtractErrorMessage(Exception ex);
    private static string RenderErrors(IEnumerable`1<string> errors);
    private static string StripInvalidXmlSymbols(Char[] in);
    public Uri GetUrlForAttachmentsUpload();
    public String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator, ISettingsStore settingsStore);
    [CompilerGeneratedAttribute]
private string <SubmitException>b__9();
    [CompilerGeneratedAttribute]
private static bool <GetMessage>b__18(Action a);
    [CompilerGeneratedAttribute]
private static StringBuilder <GetMessage>b__19(StringBuilder builder, Action action);
    [CompilerGeneratedAttribute]
private static bool <StripInvalidXmlSymbols>b__1c(char ch);
    [CompilerGeneratedAttribute]
private static void <UploadAttachments>b__21(string m);
    [CompilerGeneratedAttribute]
private static void <UploadAttachments>b__22(string e);
    [CompilerGeneratedAttribute]
private static string <UploadAttachments>b__23(Pair`2<string, long> _);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerTracker : object {
    private OpensUri myOpensUri;
    private ExceptionAnalyzerConnector myConnector;
    [CanBeNullAttribute]
private ISettingsStore mySettingsStore;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    private bool IsInternal { get; public set; }
    public ExceptionAnalyzerTracker(OpensUri opensUri, IssueTrackerBuildDescription builddesc, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore, bool isGlobalTracker);
    public sealed virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public sealed virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual Nullable`1<LoginInformation> Register();
    public sealed virtual CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    public sealed virtual Uri GetUrlForAttachmentsUpload();
    [CompilerGeneratedAttribute]
private bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInternal(bool value);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerUtil : object {
    public static ICollection`1<Pair`2<string, long>> UploadFileAttachmentsAlternative(IExceptionHandlingService service, string reportId, ICollection`1<FileSystemPath> fileAttachments, IProgressIndicator progressIndicator, IContextBoundSettingsStore settingsStore, Action`1<string> logMessage, Action`1<string> logError, IWebProxy proxy);
    private static string UploadFileAlternative(IExceptionHandlingService service, IContextBoundSettingsStore settingsStore, string reportId, FileSystemPath path, IProgressIndicator indicator, Action`1<string> logMessage, Action`1<string> logError);
    public static ICollection`1<Pair`2<string, long>> UploadFileAttachments(string reportId, ICollection`1<FileSystemPath> fileAttachments, Uri uploadUriBase, IProgressIndicator progressIndicator, IWebProxy proxy, Action`1<string> logMessage, Action`1<string> logError);
    public static Uri Combine(Uri baseUri, string path, Action`1<string> logMessage);
    public static ICollection`1<Pair`2<string, long>> UploadAttachments(string reportId, ICollection`1<FileSystemPath> filesToAttach, IProgressIndicator progressIndicator, Action`1<string> logMessage, Action`1<string> logError, IExceptionHandlingService service, IContextBoundSettingsStore settingStore);
}
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.TextAttachment")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.FileAttachment")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.Attachment : object {
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.FileAttachment : Attachment {
    [CompilerGeneratedAttribute]
private string <FileUri>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public string FileUri { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileUri();
    [CompilerGeneratedAttribute]
public void set_FileUri(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.RequestBody : object {
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TextPart> <TextParts>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentificator <User>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Attachment> <Attachments>k__BackingField;
    public string Product { get; public set; }
    public RequestType Type { get; public set; }
    public List`1<TextPart> TextParts { get; public set; }
    public UserIdentificator User { get; public set; }
    public List`1<Attachment> Attachments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [CompilerGeneratedAttribute]
public RequestType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RequestType value);
    [CompilerGeneratedAttribute]
public List`1<TextPart> get_TextParts();
    [CompilerGeneratedAttribute]
public void set_TextParts(List`1<TextPart> value);
    [CompilerGeneratedAttribute]
public UserIdentificator get_User();
    [CompilerGeneratedAttribute]
public void set_User(UserIdentificator value);
    [CompilerGeneratedAttribute]
public List`1<Attachment> get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(List`1<Attachment> value);
}
public enum JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.RequestType : Enum {
    public int value__;
    public static RequestType Performance;
    public static RequestType BugReport;
    public static RequestType Feedback;
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.ResponseBody : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    public string Text { get; public set; }
    public List`1<string> Errors { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.TextAttachment : Attachment {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.TextPart : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Title { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.YouTrackUserIdentificator")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.UserNameIdentificator")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.UserIdentificator : object {
    [XmlIgnoreAttribute]
public static string UserIdentificatorKey;
    [CompilerGeneratedAttribute]
private bool <IsAnonymous>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public bool IsAnonymous { get; public set; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public bool get_IsAnonymous();
    [CompilerGeneratedAttribute]
public void set_IsAnonymous(bool value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.UserNameIdentificator : UserIdentificator {
    [XmlIgnoreAttribute]
public static string UserNameIdentificatorKey;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EMail>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public string UserName { get; public set; }
    public string EMail { get; public set; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_EMail();
    [CompilerGeneratedAttribute]
public void set_EMail(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v1.YouTrackUserIdentificator : UserIdentificator {
    [XmlIgnoreAttribute]
public static string YouTrackIdentificatorKey;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public string Login { get; public set; }
    public string Password { get; public set; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.TextAttachment")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.FileAttachment")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.Attachment : object {
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.FileAttachment : Attachment {
    [CompilerGeneratedAttribute]
private string <FileUri>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    public string FileUri { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileUri();
    [CompilerGeneratedAttribute]
public void set_FileUri(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.RequestBody : object {
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MainProduct>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RelatedProducts>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TextPart> <TextParts>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentificator <User>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Attachment> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    public string Product { get; public set; }
    public string MainProduct { get; public set; }
    public String[] RelatedProducts { get; public set; }
    public RequestType Type { get; public set; }
    public List`1<TextPart> TextParts { get; public set; }
    public UserIdentificator User { get; public set; }
    public List`1<Attachment> Attachments { get; public set; }
    public string Log { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [CompilerGeneratedAttribute]
public string get_MainProduct();
    [CompilerGeneratedAttribute]
public void set_MainProduct(string value);
    [CompilerGeneratedAttribute]
public String[] get_RelatedProducts();
    [CompilerGeneratedAttribute]
public void set_RelatedProducts(String[] value);
    [CompilerGeneratedAttribute]
public RequestType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RequestType value);
    [CompilerGeneratedAttribute]
public List`1<TextPart> get_TextParts();
    [CompilerGeneratedAttribute]
public void set_TextParts(List`1<TextPart> value);
    [CompilerGeneratedAttribute]
public UserIdentificator get_User();
    [CompilerGeneratedAttribute]
public void set_User(UserIdentificator value);
    [CompilerGeneratedAttribute]
public List`1<Attachment> get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(List`1<Attachment> value);
    [CompilerGeneratedAttribute]
public string get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(string value);
}
public enum JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.RequestType : Enum {
    public int value__;
    public static RequestType Performance;
    public static RequestType BugReport;
    public static RequestType Feedback;
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.ResponseBody : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    public string Text { get; public set; }
    public List`1<string> Errors { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.TextAttachment : Attachment {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.TextPart : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Title { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserNameIdentificator")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.YouTrackUserIdentificator")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserIdentificator : object {
    [XmlIgnoreAttribute]
public static string UserIdentificatorKey;
    [CompilerGeneratedAttribute]
private bool <IsAnonymous>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public bool IsAnonymous { get; public set; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public bool get_IsAnonymous();
    [CompilerGeneratedAttribute]
public void set_IsAnonymous(bool value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserNameIdentificator : UserIdentificator {
    [XmlIgnoreAttribute]
public static string UserNameIdentificatorKey;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EMail>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public string UserName { get; public set; }
    public string EMail { get; public set; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_EMail();
    [CompilerGeneratedAttribute]
public void set_EMail(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.YouTrackUserIdentificator : UserIdentificator {
    [XmlIgnoreAttribute]
public static string YouTrackIdentificatorKey;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public string Login { get; public set; }
    public string Password { get; public set; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.FileUploader : object {
    private FileSystemPath myFilePath;
    private IWebProxy myProxy;
    private Timer myTimer;
    private Uri myUploadUri;
    private int myBytesTransferred;
    private Action`1<int> TransferSpeedChanged;
    public FileUploader(Uri uploadUri, FileSystemPath filePath, IWebProxy proxy);
    public void add_TransferSpeedChanged(Action`1<int> value);
    public void remove_TransferSpeedChanged(Action`1<int> value);
    public void Upload(IProgressIndicator indicator, Action`1<string> logMessage, Action`1<string> logError);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, ElapsedEventArgs args);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.Action : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    public string Text { get; public set; }
    public string Key { get; public set; }
    public int Code { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public int get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(int value);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionCodes : object {
    public static int NewException;
    public static int MatchedExistingException;
    public static int CommentedException;
    public static int ChangedStorage;
    public static int Error;
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionCollection : object {
    [CompilerGeneratedAttribute]
private List`1<Action> <Actions>k__BackingField;
    public List`1<Action> Actions { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Action> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<Action> value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionResult : object {
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Issue> <Issues>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <Actions>k__BackingField;
    public string Guid { get; public set; }
    public List`1<Issue> Issues { get; public set; }
    public List`1<string> Errors { get; public set; }
    public List`1<Action> Actions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public List`1<Issue> get_Issues();
    [CompilerGeneratedAttribute]
public void set_Issues(List`1<Issue> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Action> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<Action> value);
}
public enum JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionType : Enum {
    public int value__;
    public static ActionType Submit;
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameter : RequestParameter {
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Guid { get; public set; }
    public string Summary { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithAttachments : ExceptionParameterWithCommentAndOptions {
    [CompilerGeneratedAttribute]
private String[] <AttachmentUrls>k__BackingField;
    public String[] AttachmentUrls { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AttachmentUrls();
    [CompilerGeneratedAttribute]
public void set_AttachmentUrls(String[] value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithComment : ExceptionParameter {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithCommentAndOptions : ExceptionParameterWithComment {
    [CompilerGeneratedAttribute]
private bool <Private>k__BackingField;
    public bool Private { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(bool value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.Issue : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    public string Key { get; public set; }
    public string Url { get; public set; }
    public string Guid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.RequestAction : object {
    [CompilerGeneratedAttribute]
private ActionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RequestParameter> <Parameters>k__BackingField;
    public ActionType Type { get; public set; }
    public string Guid { get; public set; }
    public List`1<RequestParameter> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public ActionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ActionType value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public List`1<RequestParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<RequestParameter> value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.RequestBody : object {
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EMail>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RequestAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubmitAnonymously>k__BackingField;
    public string Product { get; public set; }
    public string ProductVersion { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string EMail { get; public set; }
    public List`1<RequestAction> Actions { get; public set; }
    public bool SubmitAnonymously { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [CompilerGeneratedAttribute]
public string get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_EMail();
    [CompilerGeneratedAttribute]
public void set_EMail(string value);
    [CompilerGeneratedAttribute]
public List`1<RequestAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<RequestAction> value);
    [CompilerGeneratedAttribute]
public bool get_SubmitAnonymously();
    [CompilerGeneratedAttribute]
public void set_SubmitAnonymously(bool value);
}
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameter")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.SensitiveDataParameter")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithCommentAndOptions")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithAttachments")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithComment")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.TagParameter")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.RequestParameter : object {
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ResponseBody : object {
    [CompilerGeneratedAttribute]
private List`1<ActionResult> <ActionResults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Info>k__BackingField;
    public List`1<ActionResult> ActionResults { get; public set; }
    public List`1<string> Errors { get; public set; }
    public string Info { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ActionResult> get_ActionResults();
    [CompilerGeneratedAttribute]
public void set_ActionResults(List`1<ActionResult> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.SensitiveDataParameter : RequestParameter {
    [CompilerGeneratedAttribute]
private string <SensitiveData>k__BackingField;
    public string SensitiveData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SensitiveData();
    [CompilerGeneratedAttribute]
public void set_SensitiveData(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.TagParameter : RequestParameter {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionHandlingService : object {
    public static string ConfigUrl;
    private XmlRpcExceptionHandlingService myService;
    private TimeSpan myTimeout;
    [CanBeNullAttribute]
private WebProxySettingsReader myProxyReader;
    [NotNullAttribute]
private ILogger myLogger;
    [CanBeNullAttribute]
private IWebProxy myProxy;
    private XmlRpcExceptionHandlingService Service { get; }
    [CanBeNullAttribute]
public IWebProxy Proxy { get; }
    public ExceptionHandlingService(WebProxySettingsReader proxyReader, ILogger logger);
    private XmlRpcExceptionHandlingService get_Service();
    private Pair`2<string, string> getServiceInfo();
    public sealed virtual IWebProxy get_Proxy();
    public sealed virtual string HandleException(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string GetRegisterUri(string product, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string VerifyCredentials(string userName, string password, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string SendReport(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string GetFileUploadUrl(Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public virtual string GetSelfProfilingToolConfiguration(Func`1<bool> checkForInterrput, Action`1<Exception> onException);
    public sealed virtual void BeginFileUpload(string reportId, string fileName);
    public sealed virtual void UploadFilePart(string reportId, string fileName, string data);
    public sealed virtual string EndFileUpload(string reportId, string fileName, string bytesTransferred);
    private static T ExecuteAsync(Func`1<XmlRpcAsyncResult> fBegin, Func`2<XmlRpcAsyncResult, T> fEnd, Func`1<bool> fAbort, Action`1<Exception> onException, TimeSpan timeout, ILogger logger);
    [CompilerGeneratedAttribute]
private string <HandleException>b__2(XmlRpcAsyncResult ar);
    [CompilerGeneratedAttribute]
private string <GetRegisterUri>b__6(XmlRpcAsyncResult ar);
    [CompilerGeneratedAttribute]
private string <VerifyCredentials>b__a(XmlRpcAsyncResult ar);
    [CompilerGeneratedAttribute]
private string <SendReport>b__e(XmlRpcAsyncResult ar);
    [CompilerGeneratedAttribute]
private XmlRpcAsyncResult <GetFileUploadUrl>b__11();
    [CompilerGeneratedAttribute]
private string <GetFileUploadUrl>b__12(XmlRpcAsyncResult ar);
    [CompilerGeneratedAttribute]
private XmlRpcAsyncResult <GetSelfProfilingToolConfiguration>b__13();
    [CompilerGeneratedAttribute]
private string <GetSelfProfilingToolConfiguration>b__14(XmlRpcAsyncResult ar);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Feedback submitter settings")]
public class JetBrains.Application.UI.Help.ExceptionReport.FeedbackReportSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "User identificator string")]
public string UserIdentificatorString;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Selected user identificator")]
public string SelectedUserIdentificator;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Keep attachments")]
public bool KeepTextAndAttachments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Path to file with stored state")]
public string StateFilePath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Self Profiling Tool version")]
public int SelfProfilingToolVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Self Profiling Tool location")]
public string SelfProfilingToolLocation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "User is informed about anonymous submission")]
public bool InformedUserIsAnonymous;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "User is informed about sending code to JetBrains")]
public bool InformedAboutSendingCode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "File upload buffer size")]
public int FileUploadBufferSize;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Attachment upload method")]
public AttachmentUploadMethod AttachmentUploadMethod;
}
public interface JetBrains.Application.UI.Help.ExceptionReport.IExceptionHandlingService {
    public IWebProxy Proxy { get; }
    public abstract virtual string HandleException(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string GetRegisterUri(string product, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string VerifyCredentials(string userName, string password, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string SendReport(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string GetFileUploadUrl(Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string GetSelfProfilingToolConfiguration(Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual void BeginFileUpload(string reportId, string fileName);
    public abstract virtual void UploadFilePart(string reportId, string fileName, string data);
    public abstract virtual string EndFileUpload(string reportId, string fileName, string bytesTransferred);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.ExceptionReport.IsInternalDetectionComponent : object {
    public IsInternalDetectionComponent(IIssueTracker tracker, ProductConfigurations productConfigurations);
}
public class JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService : object {
    [NotNullAttribute]
private static LocalReentrancyGuard mySingleMessageBox;
    private static DateTime myTimeLastShown;
    private static DateTime myLastRequestedIgnore;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    public string ProductName { get; public set; }
    public MessageBoxExceptionReportService(string sProductName);
    private static MessageBoxExceptionReportService();
    [CompilerGeneratedAttribute]
public string get_ProductName();
    [CompilerGeneratedAttribute]
public void set_ProductName(string value);
    public static void ShowException(Exception exception, string sProductName);
    public static void ShowException(ExceptionData exdata, string sProductName);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Log(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Notify(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.RequireAction(ExceptionData exception);
}
public class JetBrains.Application.UI.Help.ExceptionReport.MockIssueTracker : object {
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    private bool IsInternal { get; public set; }
    public sealed virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public sealed virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual Nullable`1<LoginInformation> Register();
    public sealed virtual CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    public sealed virtual Uri GetUrlForAttachmentsUpload();
    [CompilerGeneratedAttribute]
private bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInternal(bool value);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ControlApiScripts : object {
    private static Type GetProfiler(Assembly profilerWindowsApiAssembly, SnapshotType snapshotKind);
    private static void InvokeStaticMethod(Type profiler, ILogger logger, string methodName);
    public static void MakeDotMemorySnapshotAndDetach(ILogger logger, Assembly profilerWindowsApiAssembly);
    public static void StartPerformanceSnapshot(ILogger logger, Assembly profilerWindowsApiAssembly, SnapshotType snapshotType);
    public static void StopPerformanceSnapshot(ILogger logger, Assembly profilerWindowsApiAssembly, SnapshotType snapshotType);
    public static void Detach(ILogger logger, Assembly profilerWindowsApiAssembly, SnapshotType snapshotType);
}
public enum JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ControlKind : Enum {
    public int value__;
    public static ControlKind Manual;
    public static ControlKind Api;
}
public class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SelfProfilingTool : object {
    public static string PackagesDescriptorFile;
    private ILogger myLogger;
    private IExceptionHandlingService myService;
    private IContextBoundSettingsStore mySettingsStore;
    [CompilerGeneratedAttribute]
private static Func`2<Package, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public SelfProfilingTool(IExceptionHandlingService service, IContextBoundSettingsStore settingsStore);
    public bool StartAndAttach(IProgressIndicator progressIndicator, SnapshotType snapshotType, ControlKind controlKind, Action`1<string> onSnapshotAvailable, Action`1<string> onError, Action`2<ILogger, Assembly> onAttached);
    private bool AttachWithApi(PackageList packageList, FileSystemPath snapshotStorage, SnapshotType snapshotType, ControlKind controlKind, Action`1<string> onSnapshotAvailable, Action`2<ILogger, Assembly> onAttached, IProgressIndicator progressIndicator);
    private static string SnapshotTypeToString(SnapshotType type);
    private static string ControlKindToString(ControlKind kind);
    private static String[] GetAvailableSnapshots(FileSystemPath listFile);
    private static bool AttachWithExternalExecutable(PackageList packages, FileSystemPath snapshotStorage);
    private bool UnpackPackagesIfNecessary(PackageList packages, IProgressIndicator progressIndicator);
    private PackageList DownloadPackagesIfNecessary(IProgressIndicator progressIndicator);
    [CanBeNullAttribute]
private XmlDocument GetPackagesDescriptor();
    [CompilerGeneratedAttribute]
private static bool <DownloadPackagesIfNecessary>b__3(Package _);
}
public enum JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SnapshotType : Enum {
    public int value__;
    public static SnapshotType PerformanceSampling;
    public static SnapshotType PerformanceTimeline;
    public static SnapshotType Memory;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ZipInputStreamEx : object {
    [ExtensionAttribute]
public static void EnumerateEntry(ZipInputStream zipStream, Func`3<ZipInputStream, ZipEntry, bool> entry);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.ShellLessExceptionReportingHelpers : object {
    public static IssueTrackerBuildDescription CreateBuildDescriptionFormatter_Environment(IApplicationHost host, SubProducts products);
    public static IssueTrackerBuildDescription CreateBuildDescriptionFormatter_ShellLess(HostInfo hostInfo, Lazy`1<IEnumerable`1<JetPackageMetadata>> specs);
    [NotNullAttribute]
public static ExceptionReporting CreateDeadEnd();
}
public class JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService : object {
    private bool myUseConsoleColor;
    private ConsoleColor myErrorColor;
    private DetailsLevel myLevelStdErr;
    private DetailsLevel myLevelStdOut;
    [CanBeNullAttribute]
private string myPrefixOnMessage;
    public StdErrExceptionReportService(DetailsLevel levelStdErr, DetailsLevel levelStdOut, string sPrefixOnMessage, ConsoleColor errorColor);
    public StdErrExceptionReportService(DetailsLevel levelStdErr, DetailsLevel levelStdOut, string sPrefixOnMessage);
    private void OnException(ExceptionData ex);
    private void OnException_Stream(ExceptionData ex, TextWriter output, DetailsLevel level);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Log(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Notify(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.RequireAction(ExceptionData exception);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Exception submitter settings")]
public class JetBrains.Application.UI.Help.ExceptionReport.SubmitToTrackerExceptionReportServiceSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Tracker username")]
public string Username;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Tracker password")]
public string Password;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether to submit anonymously")]
public bool SubmitAnonymously;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Show form after submission")]
public bool ShowBrowserFormAfterSubmission;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Submit all exceptions automatically")]
public bool SubmitAutomatically;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Persist exceptions")]
public bool PersistExceptions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Watch exception storage")]
public bool WatchExceptionStorage;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "UserComment")]
public string UserComment;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "SubmitPrivately")]
public bool SubmitPrivately;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Attach Sensitive Data")]
public bool AttachSensitiveData;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Report Non-Product Exceptions")]
public bool ReportIrrelevantExceptions;
}
[GlobalSettingsUpgraderAttribute]
public class JetBrains.Application.UI.Help.ExceptionReport.SubmitToTrackerExceptionReportServiceUpgrader : SettingTablesUpgrader {
    public SubmitToTrackerExceptionReportServiceUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public abstract class JetBrains.Application.UI.Help.Feedback.AccountBase : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
public class JetBrains.Application.UI.Help.Feedback.AnonymousAccount : object {
}
[ActionGroupAttribute("OptionalAttachmentsManager.AvailableProviders", "1")]
public class JetBrains.Application.UI.Help.Feedback.AvailableProvidersActionGroup : object {
    public static string GroupId;
}
public class JetBrains.Application.UI.Help.Feedback.EMailAccount : object {
}
public class JetBrains.Application.UI.Help.Feedback.ExceptionEmbeddedFileAttachment : FileAttachmentBase {
    public string Prefix { get; }
    public ExceptionEmbeddedFileAttachment(FileSystemPath localFilePath);
    public virtual string get_Prefix();
}
public class JetBrains.Application.UI.Help.Feedback.FeedbackPartAttribute : PartAttribute {
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.Feedback.FeedbackPartsContainer : object {
    private ComponentContainer myComponentContainer;
    public FeedbackPartsContainer(Lifetime lifetime, ShellPartCatalogSet set, IComponentContainer parentContainer);
    public IEnumerable`1<T> GetParts();
}
public static class JetBrains.Application.UI.Help.Feedback.FeedbackUtil : object {
    public static void AttachRequired(ReportAttachmentPartsContainer reportAttachmentParts, IReport report);
}
public abstract class JetBrains.Application.UI.Help.Feedback.FileAttachmentBase : ReportAttachmentBase {
    private FileSystemPath myLocalFilePath;
    public bool CanBeDeleted { get; }
    public IconId Image { get; }
    public string Prefix { get; }
    public bool IsOpenLocationSupported { get; }
    public bool IsOpenSupported { get; }
    public FileSystemPath LocalFilePath { get; }
    public string Name { get; }
    protected FileAttachmentBase(FileSystemPath localFilePath, string providerName);
    public virtual bool get_CanBeDeleted();
    public virtual IconId get_Image();
    public abstract virtual string get_Prefix();
    public virtual bool get_IsOpenLocationSupported();
    public virtual bool get_IsOpenSupported();
    public FileSystemPath get_LocalFilePath();
    public virtual void OpenLocation();
    public virtual void Open();
    public virtual string get_Name();
    public virtual void Attach(IReport report, IProgressIndicator progressIndicator);
}
public class JetBrains.Application.UI.Help.Feedback.FileAttachmentDisposable : object {
    private FileAttachmentBase myFileAttachment;
    private Func`1<bool> myFShouldDisposeAttachment;
    public FileAttachmentDisposable(FileAttachmentBase fileAttachment, Func`1<bool> fShouldDisposeAttachment);
    public sealed virtual void Dispose();
}
public abstract class JetBrains.Application.UI.Help.Feedback.FileAttachmentProviderBase : object {
    public string Name { get; }
    public string Id { get; }
    public bool HideWindowDuringAttach { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public sealed virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    public sealed virtual IReportAttachment RestoreFrom(XmlElement element);
    protected abstract virtual IReportAttachment RestoreFromPath(FileSystemPath path);
    public abstract virtual string get_Id();
    public virtual bool IsAvailable();
    public virtual bool get_HideWindowDuringAttach();
}
public interface JetBrains.Application.UI.Help.Feedback.IAccount {
}
public interface JetBrains.Application.UI.Help.Feedback.IEnvironmentInfoAttachment {
}
public interface JetBrains.Application.UI.Help.Feedback.IEnvironmentInfoAttachmentProvider {
}
public interface JetBrains.Application.UI.Help.Feedback.IOptionalReportAttachmentProvider {
    public string Id { get; }
    public bool HideWindowDuringAttach { get; }
    public abstract virtual string get_Id();
    public abstract virtual bool IsAvailable();
    public abstract virtual bool get_HideWindowDuringAttach();
}
public interface JetBrains.Application.UI.Help.Feedback.IReportAttachment {
    public string Id { get; }
    public string Name { get; }
    public string ProviderId { get; }
    public IconId Image { get; }
    public bool IsOpenLocationSupported { get; }
    public bool IsOpenSupported { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_ProviderId();
    public abstract virtual IconId get_Image();
    public abstract virtual void Attach(IReport report, IProgressIndicator progressIndicator);
    public abstract virtual bool get_IsOpenLocationSupported();
    public abstract virtual bool get_IsOpenSupported();
    public abstract virtual void OpenLocation();
    public abstract virtual void Open();
}
public interface JetBrains.Application.UI.Help.Feedback.IReportAttachmentProvider {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public abstract virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    [CanBeNullAttribute]
public abstract virtual IReportAttachment RestoreFrom(XmlElement element);
}
public interface JetBrains.Application.UI.Help.Feedback.IRequiredReportAttachmentProvider {
}
public class JetBrains.Application.UI.Help.Feedback.JetBrainsAccount : AccountBase {
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.Feedback.OptionalAttachmentsManager : object {
    private Dictionary`2<string, IOptionalReportAttachmentProvider> myProviders;
    public OptionalAttachmentsManager(ReportAttachmentPartsContainer attachmentParts);
    public IOptionalReportAttachmentProvider GetProvider(string id);
}
public class JetBrains.Application.UI.Help.Feedback.PerformanceSnapshotAttachment : FileAttachmentBase {
    public string Prefix { get; }
    public PerformanceSnapshotAttachment(FileSystemPath localFilePath, string providerId);
    public virtual string get_Prefix();
}
public abstract class JetBrains.Application.UI.Help.Feedback.ReportAttachmentBase : object {
    private string myId;
    private string myProviderId;
    public string Id { get; }
    public IconId Image { get; }
    public string ProviderId { get; }
    public bool IsOpenLocationSupported { get; }
    public bool IsOpenSupported { get; }
    public string Name { get; }
    protected ReportAttachmentBase(string providerId);
    public sealed virtual string get_Id();
    public virtual IconId get_Image();
    public sealed virtual string get_ProviderId();
    protected bool Equals(ReportAttachmentBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool get_IsOpenLocationSupported();
    public virtual bool get_IsOpenSupported();
    public virtual void OpenLocation();
    public virtual void Open();
    public abstract virtual string get_Name();
    public abstract virtual void Attach(IReport report, IProgressIndicator progressIndicator);
}
public class JetBrains.Application.UI.Help.Feedback.ReportAttachmentPartAttribute : PartAttribute {
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.Feedback.ReportAttachmentPartsContainer : object {
    private ComponentContainer myComponentContainer;
    public ReportAttachmentPartsContainer(Lifetime lifetime, ShellPartCatalogSet set, IComponentContainer parentContainer);
    public IEnumerable`1<T> GetParts();
}
public class JetBrains.Application.UI.Help.Feedback.UserIdentificatorPartAttribute : PartAttribute {
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.Feedback.UserIdentificatorPartsContainer : object {
    private ComponentContainer myComponentContainer;
    public UserIdentificatorPartsContainer(Lifetime lifetime, ShellPartCatalogSet set, IComponentContainer parentContainer);
    public IEnumerable`1<T> GetParts();
}
public class JetBrains.Application.UI.Help.Feedback.UserNameAccount : object {
}
public class JetBrains.Application.UI.Help.Feedback.YouTrackAccount : AccountBase {
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.HelpSystem : object {
    private IEnumerable`1<IShowHelp> myShowHelps;
    [CompilerGeneratedAttribute]
private static Func`2<IShowHelp, double> CS$<>9__CachedAnonymousMethodDelegate3;
    public HelpSystem(IEnumerable`1<IShowHelp> showhelps);
    public virtual void ShowHelp(string keyword, HelpKind kind);
    [CompilerGeneratedAttribute]
private static double <ShowHelp>b__1(IShowHelp x);
}
public interface JetBrains.Application.UI.Help.IShowHelp {
    public double Priority { get; }
    public HelpKind[] SupportedKinds { get; }
    public abstract virtual double get_Priority();
    public abstract virtual HelpKind[] get_SupportedKinds();
    public abstract virtual bool ShowHelp(string keyword, HelpKind kind);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Help.ShowOnlineHelpHandler : object {
    private OpensUri myOpensUri;
    private IApplicationHost myProduct;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public bool IsDisabled { get; public set; }
    private double JetBrains.Application.UI.Help.IShowHelp.Priority { get; }
    private HelpKind[] JetBrains.Application.UI.Help.IShowHelp.SupportedKinds { get; }
    public ShowOnlineHelpHandler(IApplicationHost product, OpensUri opensUri);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_IsDisabled(bool value);
    private sealed virtual override bool JetBrains.Application.UI.Help.IShowHelp.ShowHelp(string keyword, HelpKind kind);
    private sealed virtual override double JetBrains.Application.UI.Help.IShowHelp.get_Priority();
    private sealed virtual override HelpKind[] JetBrains.Application.UI.Help.IShowHelp.get_SupportedKinds();
}
public abstract class JetBrains.Application.UI.Icons.Animation.AnimatedIconId : IconId {
}
public class JetBrains.Application.UI.Icons.ColorIcons.ColorIconId : IconId {
    public Color Color;
    public ColorIconId(Color color);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons : object {
}
public abstract class JetBrains.Application.UI.Icons.CompiledIcons.AnyCompiledIconClass : object {
    private static Type TypeofCompiledIconClass;
    private static Type TypeofCompiledIconCsClass;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate7;
    private static AnyCompiledIconClass();
    public static IconId TryGetAnyCompiledIconClassId(Type type, OnError onerror);
    public static IconId TryGetAnyCompiledIconClassId(PartCatalogType pctype, OnError onerror);
    [CompilerGeneratedAttribute]
private static object <TryGetAnyCompiledIconClassId>b__1();
    [CompilerGeneratedAttribute]
private static object <TryGetAnyCompiledIconClassId>b__6();
}
public class JetBrains.Application.UI.Icons.CompiledIcons.CompiledIconPackIdentity : object {
    private static Func`2<string, CompiledIconPackIdentity> myFCreator;
    private static ConcurrentDictionary`2<string, CompiledIconPackIdentity> myMapInterner;
    public string Value;
    [CompilerGeneratedAttribute]
private static Func`2<string, CompiledIconPackIdentity> CS$<>9__CachedAnonymousMethodDelegate1;
    private CompiledIconPackIdentity(string value);
    private static CompiledIconPackIdentity();
    [NotNullAttribute]
public static CompiledIconPackIdentity Create(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static CompiledIconPackIdentity <.cctor>b__0(string s);
}
public class JetBrains.Application.UI.Icons.ComposedIcons.CompositeIconId : IconId {
    public IconId[] Parts;
    internal CompositeIconId(IconId[] parts);
    [NotNullAttribute]
public static IconId Compose(IconId part0, IconId part1);
    [NotNullAttribute]
public static IconId Compose(IconId[] parts);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.Emitters.NameNormalizer : object {
    private Dictionary`2<string, string> myMapNameToNormalization;
    private Dictionary`2<string, List`1<string>> myMapNormalizedToOrigins;
    [CompilerGeneratedAttribute]
private static Func`2<List`1<string>, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, List`1<string>>, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, List`1<string>>, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<string, string, string> CS$<>9__CachedAnonymousMethodDelegatec;
    public NameNormalizer(IEnumerable`1<string> expected);
    [NotNullAttribute]
public NameNormalizer AssertNoConflicts();
    [NotNullAttribute]
public string Denormalize(string normalized);
    [NotNullAttribute]
public IEnumerable`1<string> GetNormalizedNames();
    [NotNullAttribute]
public string Normalize(string name);
    [CompilerGeneratedAttribute]
private static bool <AssertNoConflicts>b__0(List`1<string> list);
    [CompilerGeneratedAttribute]
private static bool <AssertNoConflicts>b__1(KeyValuePair`2<string, List`1<string>> o);
    [CompilerGeneratedAttribute]
private static string <AssertNoConflicts>b__2(KeyValuePair`2<string, List`1<string>> o);
    [CompilerGeneratedAttribute]
private static string <AssertNoConflicts>b__4(KeyValuePair`2<string, string> o);
    [CompilerGeneratedAttribute]
private static string <AssertNoConflicts>b__5(string s);
    [CompilerGeneratedAttribute]
private static string <AssertNoConflicts>b__6(string ss, string s);
}
public class JetBrains.Application.UI.Icons.Emitters.ThemedIconsCsInjector : object {
    [NotNullAttribute]
public static string WriteCodeOfClass(CodeTypeDeclaration codetype, string sExtensionWithDot);
    [NotNullAttribute]
public static string WriteCodeOfFile(CodeCompileUnit codefile, string sExtensionWithDot);
    public static void WriteCodeToFile(CodeCompileUnit codefile, string sExtensionWithDot, TextWriter writer);
}
public static class JetBrains.Application.UI.Icons.GenericIconThemeAspect : object {
    [NotNullAttribute]
public static IconThemeAspect Color;
    [NotNullAttribute]
public static IconThemeAspect Gray;
    [NotNullAttribute]
public static IconThemeAspect GrayDark;
    private static GenericIconThemeAspect();
}
public class JetBrains.Application.UI.Icons.IconTheme : object {
    public static IconTheme Default;
    [NotNullAttribute]
public IconThemeAspect[] Aspects;
    [CompilerGeneratedAttribute]
private static Comparison`1<IconThemeAspect> CS$<>9__CachedAnonymousMethodDelegate7;
    private IconTheme(IconThemeAspect[] aspects);
    private static IconTheme();
    [NotNullAttribute]
public static IconTheme FromAspectsUnsorted(IEnumerable`1<IconThemeAspect> aspects1);
    [NotNullAttribute]
public static IconTheme FromSingleAspect(IconThemeAspect aspect);
    public static bool op_Equality(IconTheme left, IconTheme right);
    public static bool op_Inequality(IconTheme left, IconTheme right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(IconTheme other);
    [CompilerGeneratedAttribute]
private static int <FromAspectsUnsorted>b__6(IconThemeAspect α, IconThemeAspect β);
}
public class JetBrains.Application.UI.Icons.IconThemeAspect : object {
    [NotNullAttribute]
public string AspectName;
    public double AspectPriority;
    [NotNullAttribute]
public string AspectValue;
    public IconThemeAspect(string aspectName, double aspectPriority, string aspectValue);
    public static bool op_Equality(IconThemeAspect left, IconThemeAspect right);
    public static bool op_Inequality(IconThemeAspect left, IconThemeAspect right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(IconThemeAspect other);
}
public static class JetBrains.Application.UI.Icons.Images.TiImageConverter : object {
    private static bool OptionCheckTiBoundBoxCalculation;
    private static DependencyProperty[] PropsBezierSegment;
    private static DependencyProperty[] PropsDrawingGroup;
    private static DependencyProperty[] PropsGeometryDrawing;
    private static DependencyProperty[] PropsGradientStop;
    private static DependencyProperty[] PropsLinearGradientBrush;
    private static DependencyProperty[] PropsLineSegment;
    private static DependencyProperty[] PropsPathFigure;
    private static DependencyProperty[] PropsPolyBezierSegment;
    private static DependencyProperty[] PropsPolyLineSegment;
    private static DependencyProperty[] PropsRagialGradientBrush;
    private static DependencyProperty[] PropsSolidColorBrush;
    public static DependencyProperty TiImageProperty;
    [CompilerGeneratedAttribute]
private static Func`2<TransformGroup, RotateTransform> CS$<>9__CachedAnonymousMethodDelegatef;
    private static TiImageConverter();
    [NotNullAttribute]
public static TiRasterImage FromAvalonBitmap(BitmapSource bitmap);
    [NotNullAttribute]
public static TiVectorImage FromAvalonDrawing(Drawing drawing, OnError onerror);
    [NotNullAttribute]
public static TiImage FromAvalonImageSource(ImageSource imagesource, OnError onerror);
    public static TiImage FromCanonicalSExpression(Byte[] data);
    public static TiImage FromCanonicalSExpression(UInt32[] data);
    public static TiImage FromCanonicalSExpressionAsciiString(string text);
    [NotNullAttribute]
public static TiRasterImage FromGdipBitmap(Bitmap bitmap);
    [NotNullAttribute]
public static IList`1<string> ToAsciiLines(TiImage image, Size charsize, bool isDarkForeground);
    [NotNullAttribute]
public static string ToAsciiText(TiImage image, Size charsize, bool isDarkForeground);
    [NotNullAttribute]
public static BitmapSource ToAvalonBitmap(TiRasterImage tiraster);
    [NotNullAttribute]
public static Drawing ToAvalonDrawing(TiVectorImage tiimage);
    [NotNullAttribute]
public static ImageSource ToAvalonImage(TiImage tiimage);
    [NotNullAttribute]
public static Bitmap ToGdipBitmap(TiImage tiimage, DpiResolution resolution, Nullable`1<Size> size);
    [NotNullAttribute]
public static Bitmap ToGdipBitmap(TiRasterImage tiraster);
    [NotNullAttribute]
public static Bitmap ToGdipBitmapAvalonRendered(TiImage tiimage, DpiResolution resolution, Nullable`1<Size> size);
    [NotNullAttribute]
public static Bitmap ToGdipBitmapManuallyRendered(TiImage tiimage, DpiResolution resolution, Nullable`1<Size> size);
    [NotNullAttribute]
public static Action`1<Graphics> ToGdipPainting(TiImage tiimage);
    [NotNullAttribute]
public static XDocument ToSvgImage(TiImage tiimage, OnError onerror);
    private static void AssertKnownProperties(DependencyObject dobj, DependencyProperty[] prop, OnError onerror);
    [NotNullAttribute]
private static PathGeometry FromAvalonDrawing_ConvertToPathAndPremulTransform(Geometry geometryOriginal, Transform transformToOrigin);
    private static TiBrush FromAvalonDrawing_Geometry_Brush(Brush brush, Rect boundsGeometry, OnError onerror);
    private static bool FromAvalonDrawing_Geometry_Brush_IsRelativeTransformRadialTrivial(RadialGradientBrush radial);
    private static void FromAvalonDrawing_GeometryDrawing(GeometryDrawing geometry, TiVectorImage image, TranslateTransform transformToOrigin, OnError onerror);
    private static void FromAvalonDrawing_Match(Drawing drawing, TiVectorImage image, TranslateTransform transformToOrigin, bool isTopLevel, OnError onerror);
    private static void FromAvalonDrawing_PathGeometry(PathGeometry apath, IList`1<TiSegment> tisegments, OnError onerror);
    [CanBeNullAttribute]
private static Brush ToAvalonDrawing_Brush(TiBrush fill);
    [NotNullAttribute]
private static StreamGeometry ToAvalonDrawing_StreamGeometry(IList`1<TiSegment> tisegments);
    [NotNullAttribute]
private static GraphicsPath ToGdipPainting_GraphicsPath(IList`1<TiSegment> tisegments);
    private static void ToGdipPainting_Vector(TiVectorImage tiimage, Graphics g);
    private static void ToGdipPainting_Vector_PaintPath(TiPath tipath, Graphics graphics);
    [NotNullAttribute]
private static ColorBlend ToGdipPainting_Vector_PaintPath_Blend(TiGradientBrush gradbrush, bool isReversed);
    private static Matrix ToGdipPainting_Vector_PaintPath_Matrix(Matrix m);
    [CompilerGeneratedAttribute]
private static RotateTransform <FromAvalonDrawing_Geometry_Brush_IsRelativeTransformRadialTrivial>b__e(TransformGroup tg);
}
public enum JetBrains.Application.UI.Icons.RasterizationResolution : Enum {
    public int value__;
    public static RasterizationResolution DeviceIndependent96dpi;
    public static RasterizationResolution ScreenResolution;
    public static RasterizationResolution NotSure;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Icons.RasterizationResolutionEx : object {
    [ExtensionAttribute]
public static DpiResolution ToDpi(RasterizationResolution thіs);
}
public enum JetBrains.Application.UI.Icons.Settings.IconThemeSelection : Enum {
    public int value__;
    public static IconThemeSelection Automatic;
    public static IconThemeSelection Color;
    public static IconThemeSelection Gray;
    public static IconThemeSelection GrayDark;
}
public interface JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample {
    public IEnumerable`1<IconId> SampleIcons { get; }
    public abstract virtual IEnumerable`1<IconId> get_SampleIcons();
}
public interface JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle {
    [NotNullAttribute]
public IProperty`1<IconThemeAspect[]> SuggestedIconTheme { get; }
    public abstract virtual IProperty`1<IconThemeAspect[]> get_SuggestedIconTheme();
}
public static class JetBrains.Application.UI.Icons.Shell.ShellFileIcon : object {
    [NotNullAttribute]
public static IconId Create(FileSystemPath path, IconSize iconsize);
    [NotNullAttribute]
public static IconId Create(string extension, IconSize iconsize);
}
public class JetBrains.Application.UI.Icons.Shell.ShellFileIconId : IconId {
    public string ExtensionWithDot;
    public IconSize Size;
    internal ShellFileIconId(string extensionWithDot, IconSize size);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons : object {
}
public class JetBrains.Application.UI.Icons.ThemedIconAutomation : AAutomation {
    [NotNullAttribute]
public IconId IconId;
    public Nullable`1<Size> Margin;
    public ThemedIconAutomation(IconId iconId, Nullable`1<Size> margin);
    [NotNullAttribute]
public static ThemedIconAutomation Create();
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.CompiledIconsViewerAutomation : AAutomation {
    public MasterDetailHelperAutomation Body;
    public IProperty`1<IconViewerIconWithItsThemes[]> SelectedIcons;
    public IProperty`1<CompiledIconsViewMode> ViewMode;
    private IProperty`1<IconViewerIconWithItsThemes[]> JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerAutomation.IIconsViewer.SelectedIcons { get; }
    public CompiledIconsViewerAutomation(Lifetime lifeGlobal, IconViewerCompiledIconsDiscover disco, UITaskExecutor tasker, IThemedIconManager iconman, IThreading threading);
    private sealed virtual override IProperty`1<IconViewerIconWithItsThemes[]> JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerAutomation.IIconsViewer.get_SelectedIcons();
}
[ActionAttribute("Export All Icons…")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.ExportAllThemedIconsAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerAutomation : AAutomation {
    public static DataConstant`1<IconViewerAutomation> DataConstant;
    public static DataConstant`1<IconViewerIconWithItsThemes[]> SelectedIcons;
    public ActionBarAutomation ActionBar;
    public IProperty`1<IIconsViewer> Body;
    public IProperty`1<ViewMode> CurrentViewMode;
    [CompilerGeneratedAttribute]
private static Func`2<IIconsViewer, IconViewerIconWithItsThemes[]> CS$<>9__CachedAnonymousMethodDelegatec;
    public IconViewerAutomation(Lifetime lifetime, IThemedIconManager iconman, ShellPartCatalogSet catalogset, IconIdOwnersMap iconowners, UITaskExecutor tasker, IActionBarManager barman, IFileSystemTracker filewatcher, IThreading threading, ICommonFileDialogs filedlg, IUIApplication uiapp);
    private static IconViewerAutomation();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDataRule> <.ctor>b__3();
    [CompilerGeneratedAttribute]
private static IconViewerIconWithItsThemes[] <.ctor>b__4(IIconsViewer viewer);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerCompiledIconsDiscover : object {
    [NotNullAttribute]
public CollectionEvents`1<IconViewerIconWithItsThemes> CompiledIcons;
    [NotNullAttribute]
public IListEvents`1<IconViewerThemeColumnHeaderAutomation> CompiledIconThemes;
    [CompilerGeneratedAttribute]
private static Func`3<Lifetime, string, IconViewerThemeColumnHeaderAutomation> CS$<>9__CachedAnonymousMethodDelegate16;
    public IconViewerCompiledIconsDiscover(Lifetime lifetime, ShellPartCatalogSet catalogset, IconIdOwnersMap iconowners);
    [NotNullAttribute]
private static CollectionEvents`1<IconViewerIconWithItsThemes> CreateCompiledIconIdsList(Lifetime lifetime, ShellPartCatalogSet catalogset, IconIdOwnersMap iconowners);
    [NotNullAttribute]
private static IListEvents`1<IconViewerThemeColumnHeaderAutomation> CreateLiveThemesList(Lifetime lifetime, CollectionEvents`1<IconViewerIconWithItsThemes> allicons);
    [CompilerGeneratedAttribute]
private static IconViewerThemeColumnHeaderAutomation <CreateLiveThemesList>b__15(Lifetime lifeTheme, string theme);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerDetailsAutomation : AAutomation {
    public string IconId;
    public bool IsNoThemeListAvailable;
    public IList`1<DetailsIconLargePreviewAutomation> LargePreviews;
    public RichText OwnerNameIfAvail;
    public IList`1<DetailsThemeSectionAutomation> ThemeSections;
    [CompilerGeneratedAttribute]
private static Func`2<string, IconThemeAspect> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IconThemeAspect, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IconThemeAspect, <>f__AnonymousType58`2<string, IconTheme>> CS$<>9__CachedAnonymousMethodDelegate7;
    public IconViewerDetailsAutomation(Lifetime lifetime, UITaskExecutor taskExecutor, IconViewerIconWithItsThemes icon);
    [CompilerGeneratedAttribute]
private static IconThemeAspect <.ctor>b__0(string s);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(IconThemeAspect theme);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType58`2<string, IconTheme> <.ctor>b__2(IconThemeAspect aspect);
}
[ActionGroupAttribute("Export…", "1")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerExportActionGroup : object {
    public IconViewerExportActionGroup(IconViewerExportThemedIconSingleAction a, IconViewerExportThemedIconPackAction b, IconViewerExportPngAction c, IconViewerExportSvgAction d);
    public sealed virtual bool Update(IDataContext context, ActionPresentation actionPresentation);
}
[ActionAttribute("Export PNG…")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerExportPngAction : object {
    public static void ExportAll(ICommonFileDialogs filedlg, UITaskExecutor taskexecutor, ShellPartCatalogSet catalogset, IconIdOwnersMap iconowners);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExportAll_IconDpi(IconViewerIconWithItsThemes iconrow, DpiResolution dpi, string resolutionname, FileSystemPath pathFolder);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("Export SVG…")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerExportSvgAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private void ExportAll_IconDpi(TiIconForExport icon, FileSystemPath pathFolder);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("Export C# Code — Create New Icon Pack File…")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerExportThemedIconPackAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<TiIconForExport, IconWithImages> CS$<>9__CachedAnonymousMethodDelegate2;
    public static Emitted EmitIcons(ICollection`1<TiIconForExport> tiicons);
    public static List`1<TiIconForExport> GetTiIconsData(IDataContext context);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CompilerGeneratedAttribute]
private static IconWithImages <EmitIcons>b__0(TiIconForExport icon);
}
[ActionAttribute("Export C# Code — Insert into Existing Icon Pack File…")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerExportThemedIconSingleAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerGroupByOwnerRowAutomation : AAutomation {
    private static Regex myRegexAssemblyNameInPack;
    private static Regex myRegexShortNameInPack;
    public RichText GroupNameInUi;
    public IListEvents`1<IconViewerRowAutomation> IconsInGroup;
    public LifetimeDefinition LifetimeDefinition;
    public string OwnerName;
    [CompilerGeneratedAttribute]
private static Comparison`1<IconViewerRowAutomation> CS$<>9__CachedAnonymousMethodDelegate1;
    public IconViewerGroupByOwnerRowAutomation(LifetimeDefinition def, string sOwnerName, IEnumerable`1<IconViewerRowAutomation> initialitems);
    private static IconViewerGroupByOwnerRowAutomation();
    [NotNullAttribute]
public static RichText FormatOwnerName(string sOwnerName);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__0(IconViewerRowAutomation a, IconViewerRowAutomation b);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerIconTooltipAutomation : AAutomation {
    public IProperty`1<ImageSource> CurrentImageSource;
    public IProperty`1<Size> CurrentImageSourceSize;
    public IProperty`1<ImageSourceType> CurrentImageSourceType;
    [CanBeNullAttribute]
public PresentableItemAutomation ErrorStatus;
    public string Icon;
    public string OwnerNameIfAvail;
    [CompilerGeneratedAttribute]
private static Func`2<ImageSource, Size> CS$<>9__CachedAnonymousMethodDelegate1;
    public IconViewerIconTooltipAutomation(Lifetime lifetime, IconViewerIconWithItsThemes icon, IThemedIconManager themedIconManager, PresentableItemAutomation statusmessage);
    [CompilerGeneratedAttribute]
private static Size <.ctor>b__0(ImageSource source);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerIconWithItsThemes : object {
    [NotNullAttribute]
public IconId IconId;
    [NotNullAttribute]
public IIconIdOwner IconIdOwner;
    [NotNullAttribute]
public BuildLogRecord[] IconMessages;
    [CanBeNullAttribute]
public string OwnerNameIfAvail;
    [NotNullAttribute]
public String[] ThemeAspectValues;
    public IconViewerIconWithItsThemes(IconId iconId, String[] themes, IIconIdOwner iconowner, string ownerNameIfAvail, BuildLogRecord[] messages);
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerIconWithItsThemes>.CompareTo(IconViewerIconWithItsThemes other);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerImportProcess : object {
    private static String[] ExtensionsForImport;
    public IListEvents`1<IconViewerRowAutomation> ImportedIconsForIconViewer;
    public IListEvents`1<IconViewerThemeColumnHeaderAutomation> KnownThemeColumnsForIconViewer;
    public ICollectionEvents`1<RawImportedIcon> RawImportedIcons;
    public IProperty`1<FileSystemPath> WatchedDirectoryForImport;
    public IDictionaryEvents`2<FileSystemPath, SimpleFileItem> WatchedFiles;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemChangeDelta, IEnumerable`1<FileSystemChangeDelta>> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<SingleImportedIconImage, <>f__AnonymousType59`2<SingleImportedIconImage, Byte[]>> CS$<>9__CachedAnonymousMethodDelegate3e;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType59`2<SingleImportedIconImage, Byte[]>, Byte[]> CS$<>9__CachedAnonymousMethodDelegate3f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType59`2<SingleImportedIconImage, Byte[]>, SingleImportedIconImage> CS$<>9__CachedAnonymousMethodDelegate40;
    public IconViewerImportProcess(Lifetime lifeGlobal, IFileSystemTracker filewatcher, IThreading threading, IThemedIconManager iconman);
    private static IconViewerImportProcess();
    private void InitDiskWatching(Lifetime lifeGlobal, IFileSystemTracker filewatcher, IThreading threading);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerImportProcess/<InitDiskWatching_OnChange>d__10")]
private static Task InitDiskWatching_OnChange(SynchronizedLifetime lifetime, FileSystemPath dirOrFile, ConcurrentQueue`1<FileSystemChangeDelta> deltasPending, Dictionary`2<FileSystemPath, SimpleFileItem> dictFreeThreaded, IDictionaryEvents`2<FileSystemPath, SimpleFileItem> watchedFiles, IThreading threading);
    private void InitKnownThemes(Lifetime lifeGlobal);
    private void InitRawImport(Lifetime lifeGlobal);
    private void InitViewerRows(Lifetime lifeGlobal, IThemedIconManager iconman);
    private static SingleImportedIconImage[] StableSortImages(ISet`1<SingleImportedIconImage> images);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<FileSystemChangeDelta> <InitDiskWatching_OnChange>b__b(FileSystemChangeDelta cd);
    [CompilerGeneratedAttribute]
private void <InitRawImport>b__1b(Lifetime lifeFile, KeyValuePair`2<FileSystemPath, SimpleFileItem> pair);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType59`2<SingleImportedIconImage, Byte[]> <StableSortImages>b__3b(SingleImportedIconImage image);
    [CompilerGeneratedAttribute]
private static Byte[] <StableSortImages>b__3c(<>f__AnonymousType59`2<SingleImportedIconImage, Byte[]> t);
    [CompilerGeneratedAttribute]
private static SingleImportedIconImage <StableSortImages>b__3d(<>f__AnonymousType59`2<SingleImportedIconImage, Byte[]> t);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerImportSourceAutomation : AAutomation {
    public SignalCommand IncomingBrowse;
    public IProperty`1<FileSystemPath> WatchedDirectoryForImportParsed;
    public IProperty`1<string> WatchedDirectoryForImportRaw;
    public IconViewerImportSourceAutomation(Lifetime lifetime, ICommonFileDialogs filedlg, IUIApplication uiapp);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerRowAutomation : AAutomation {
    private Dictionary`2<string, IconInThemeCellAutomation> myMapThemeToCell;
    public IProperty`1<ImageSource> CurrentImage;
    public IconViewerSizeCellAutomation Size;
    public IconViewerIconTooltipAutomation Tooltip;
    [CompilerGeneratedAttribute]
private IconViewerIconWithItsThemes <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<BuildLogRecord, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<BuildLogRecord, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<BuildLogRecord, LoggingLevel> CS$<>9__CachedAnonymousMethodDelegate5;
    public IconViewerIconWithItsThemes Icon { get; private set; }
    public PresentableItemAutomation StatusLong { get; }
    public PresentableItemAutomation StatusShort { get; }
    public IconViewerRowAutomation(Lifetime lifetime, IconViewerIconWithItsThemes icon, IThemedIconManager iconman);
    [CompilerGeneratedAttribute]
public IconViewerIconWithItsThemes get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IconViewerIconWithItsThemes value);
    public PresentableItemAutomation get_StatusLong();
    public PresentableItemAutomation get_StatusShort();
    public static ImageSourceType ImageSourceToType(ImageSource source);
    public static RichText SizeToText(Size size);
    [CanBeNullAttribute]
public IconInThemeCellAutomation TryGetTheme(IconViewerThemeColumnHeaderAutomation theme);
    [CompilerGeneratedAttribute]
private static bool <get_StatusLong>b__0(BuildLogRecord lr);
    [CompilerGeneratedAttribute]
private static bool <get_StatusLong>b__1(BuildLogRecord lr);
    [CompilerGeneratedAttribute]
private static LoggingLevel <get_StatusShort>b__4(BuildLogRecord lr);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "Settings for the Themed Icons Viewer")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "This directory is watched for importable icon files. The collected files are listed in the Themed Icons Viewer Import window.")]
public FileSystemPath ImportSourceDirectory;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "MRU View Mode")]
public ViewMode MruViewMode;
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerSizeCellAutomation : AAutomation {
    private Lazy`1<RichText> myCommonSizeText;
    public IProperty`1<Size> CurrentSize;
    public IProperty`1<RichText> CurrentSizeText;
    [CompilerGeneratedAttribute]
private static Func`2<ImageSource, Size> CS$<>9__CachedAnonymousMethodDelegate4;
    public RichText CommonSizeText { get; }
    public IconViewerSizeCellAutomation(Lifetime lifetime, IconViewerIconWithItsThemes icon, IThemedIconManager themedIconManager);
    public RichText get_CommonSizeText();
    [CompilerGeneratedAttribute]
private static Size <.ctor>b__0(ImageSource src);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerThemeColumnHeaderAutomation : AAutomation {
    public IconTheme Theme;
    public string ThemeName;
    public IconViewerThemeColumnHeaderAutomation(string themename);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerTileAutomation : AAutomation {
    public IProperty`1<ImageSource> CurrentImage;
    public IconViewerIconWithItsThemes Icon;
    public IconViewerIconTooltipAutomation Tooltip;
    public IconViewerTileAutomation(Lifetime lifetime, IconViewerIconWithItsThemes icon, IThemedIconManager iconman);
}
[ActionGroupAttribute("1")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerToolbarActionGroup : object {
    public IconViewerToolbarActionGroup(IconViewerViewModeTiles x, IconViewerViewModeFlatList y, IconViewerViewModeGroupedByOwners z, Separator ss, IconViewerViewModeImport u, Separator s);
}
public abstract class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerViewModeSwitchActions : object {
    private ViewMode myViewMode;
    protected IconViewerViewModeSwitchActions(ViewMode viewMode);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.ICheckableAction.Execute(IDataContext context);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.ICheckableAction.Update(IDataContext context, CheckedActionPresentation presentation);
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.ImportedIconsViewerAutomation : AAutomation {
    public IProperty`1<IAutomation> Details;
    public ImportListAutomation ImportList;
    public IListEvents`1<IconViewerRowAutomation> ImportListItems;
    public LogAutomation ImportLog;
    public IconViewerImportSourceAutomation ImportSource;
    public IProperty`1<bool> IsImportCueBannerVisible;
    public IProperty`1<bool> IsTreeGridVisible;
    public RichTextAutomation NoIconsCueBanner;
    [CompilerGeneratedAttribute]
private static Func`4<int, int, IconViewerIconWithItsThemes[], RichTextBlock> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<IconViewerIconWithItsThemes, int> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<BuildLogRecord, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    private IProperty`1<IconViewerIconWithItsThemes[]> JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerAutomation.IIconsViewer.SelectedIcons { get; }
    public ImportedIconsViewerAutomation(Lifetime lifetime, IFileSystemTracker filewatcher, IThreading threading, IThemedIconManager iconman, ICommonFileDialogs filedlg, UITaskExecutor tasker, IUIApplication uiapp);
    private sealed virtual override IProperty`1<IconViewerIconWithItsThemes[]> JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerAutomation.IIconsViewer.get_SelectedIcons();
    [CompilerGeneratedAttribute]
private static RichTextBlock <.ctor>b__4(int nIcons, int nErrors, IconViewerIconWithItsThemes[] sel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8(Lifetime lifeItems, IconViewerIconWithItsThemes[] items);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__5(IconViewerIconWithItsThemes item);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(BuildLogRecord lr);
    [CompilerGeneratedAttribute]
private void <.ctor>b__c();
}
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.MasterDetailHelperAutomation : AAutomation {
    public IProperty`1<IAutomation> Detail;
    public IProperty`1<Dock> DetailDockSide;
    public IProperty`1<IAutomation> Master;
}
[ActionAttribute("Show Themed Icon Viewer")]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.ShowThemedIconsViewerToolWindowAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ToolWindowDescriptorAttribute]
public class JetBrains.Application.UI.Icons.ThemedIconsToolWindow.ThemedIconViewerToolWindow : ToolWindowDescriptor {
    public ThemedIconViewerToolWindow(IApplicationHost host);
}
public static class JetBrains.Application.UI.License.BroadcastUtil : object {
    public static string UNKNOWN_USER;
    public static Byte[] MakeBytes(int code, String[] strings);
    public static IList`1<string> DecodeStrings(int code, Byte[] data);
    public static void CopyArray(Byte[] dst, Int32& pos, Byte[] data);
    public static Byte[] IntToBytes(int i);
    public static int BytesToInt(Byte[] data, int pos);
    public static string GetWindowsUserName();
}
public class JetBrains.Application.UI.License.FreeEvaluationInfo : object {
    private static char SEPARATOR;
    public static DateTime INSTALLER_TIME;
    public static string ROOT_GUID;
    public static string ROOT_KEY;
    public DateTime TrialStart;
    public bool IsFeedbackRequested;
    public DateTime RecentExipartionNotification;
    public bool IsNotStarted { get; }
    private FreeEvaluationInfo(DateTime trialStart, bool isFeedbackRequested, DateTime recentExipartionNotification);
    private static FreeEvaluationInfo();
    public bool get_IsNotStarted();
    [CanBeNullAttribute]
public static FreeEvaluationInfo CreateInfo(string registryValue);
    protected string GetRegistryString();
    [CanBeNullAttribute]
public static FreeEvaluationInfo GetFreeTrialInfo(string productGuid, string rootKeyName);
    public static void SetFreeTrialInfo(string productGuid, FreeEvaluationInfo info, string rootKeyName);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.License.FreeEvaluationInfoEx : object {
    [ExtensionAttribute]
public static int GetUsedDaysCount(FreeEvaluationInfo info);
    [ExtensionAttribute]
public static int GetDaysLeftCount(FreeEvaluationInfo info, int freeTrialInfoPeriod);
    [ExtensionAttribute]
public static bool IsValid(FreeEvaluationInfo info);
}
public class JetBrains.Application.UI.License.License2.AtLeastOneAllowedLicensedEntityRequired : object {
    public sealed virtual bool DoShowLicenseDialog(LicenseViewModel model);
    private static bool ThereAreNoAllowedEntities(LicenseViewModel model);
    public sealed virtual bool DoShutdownShell(LicenseViewModel model);
}
public abstract class JetBrains.Application.UI.License.License2.Common.NotifyPropertyChanged : object {
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CanBeNullAttribute]
protected ILogger Logger { get; private set; }
    protected NotifyPropertyChanged(ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
public static class JetBrains.Application.UI.License.License2.Common.WpfUtil : object {
    public static void ExecuteOnUIThread(Action action);
}
public interface JetBrains.Application.UI.License.License2.Conflict.ILicenseConflictChecker {
    public ICollectionEvents`1<Byte[]> DataToBroadcast { get; }
    public abstract virtual ICollectionEvents`1<Byte[]> get_DataToBroadcast();
    public abstract virtual LicenseConflictDescriptor IsConflictingLicenseReceived(Byte[] data);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.License.License2.Conflict.JetBrainsAccountLicenseConflictChecker : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ILicense2CheckComponent myCheckComponent;
    private IThreading myThreading;
    private IReadOnlyCollection`1<AssetData> myAssetDatas;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<Byte[]> <DataToBroadcast>k__BackingField;
    public ICollectionEvents`1<Byte[]> DataToBroadcast { get; private set; }
    private byte ProductId { get; }
    public JetBrainsAccountLicenseConflictChecker(Lifetime lifetime, ILogger logger, ILicense2CheckComponent checkComponent, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<Byte[]> get_DataToBroadcast();
    [CompilerGeneratedAttribute]
private void set_DataToBroadcast(ICollectionEvents`1<Byte[]> value);
    private void RefreshUserLicenses(JBAcountLicenseViewSubmodel model);
    private byte get_ProductId();
    private Byte[] TryCreateBytesToBroadcast(string jbAccount, AssetData assetData);
    public sealed virtual LicenseConflictDescriptor IsConflictingLicenseReceived(Byte[] data);
}
public class JetBrains.Application.UI.License.License2.Conflict.LicenseConflictDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <TurnLicenseOffAction>k__BackingField;
    public string Description { get; private set; }
    private Action TurnLicenseOffAction { get; private set; }
    public LicenseConflictDescriptor(string description, Action turnLicenseOffAction);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
private Action get_TurnLicenseOffAction();
    [CompilerGeneratedAttribute]
private void set_TurnLicenseOffAction(Action value);
    public void TurnLicenseOff();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.License.License2.Conflict.UserLicenseConflictChecker : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ILicense2CheckComponent myCheckComponent;
    private IThreading myThreading;
    private ICollection`1<UserLicense> myUserLicenses;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<Byte[]> <DataToBroadcast>k__BackingField;
    public ICollectionEvents`1<Byte[]> DataToBroadcast { get; private set; }
    private byte ProductId { get; }
    public UserLicenseConflictChecker(Lifetime lifetime, ILogger logger, ILicense2CheckComponent checkComponent, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<Byte[]> get_DataToBroadcast();
    [CompilerGeneratedAttribute]
private void set_DataToBroadcast(ICollectionEvents`1<Byte[]> value);
    private void RefreshUserLicenses(LicenseViewModel model);
    private byte get_ProductId();
    private Byte[] CreateBytesFromUserLicense(UserLicense userLicense);
    [CanBeNullAttribute]
protected UserLicense GetUserLicense(Byte[] data, String& windowsUserName);
    public sealed virtual LicenseConflictDescriptor IsConflictingLicenseReceived(Byte[] data);
}
public interface JetBrains.Application.UI.License.License2.ILicenseCheckPolicy {
    public abstract virtual bool DoShowLicenseDialog(LicenseViewModel model);
    public abstract virtual bool DoShutdownShell(LicenseViewModel model);
}
public enum JetBrains.Application.UI.License.License2.ManageWindow.ItemState : Enum {
    public int value__;
    public static ItemState EDITABLE_INVALID;
    public static ItemState EDITABLE_VALID;
    public static ItemState ADDED;
    public static ItemState ADDED_CHANGED;
    public static ItemState SUSPENDED;
    public static ItemState REMOVED;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.License.License2.ManageWindow.ItemStateEx : object {
    [ExtensionAttribute]
public static bool IsEditable(ItemState itemState);
}
internal static class JetBrains.Application.UI.License.LicenseServerMessage : object {
    public static string NO_LICENSE_AVAILABLE;
    public static string LICENSE_USED;
    public static string LICENSE_USED_OLD;
    public static string LICENSE_UNUSED;
    public static string LICENSE_REQUEST;
    public static string LICENSE_POLL;
    public static string SERVER_POLL;
    public static string SERVER_RESPONSE;
    public static string LICENSE;
    public static string LICENSE_OLD;
    public static string ID;
    public static string TAG_OLD;
    public static string LICENSE_RESPONSE;
    public static string NAME;
    public static string NAME_OLD;
    public static string KEY;
    public static string KEY_OLD;
    public static string VERSION;
    public static string APP_VERSION;
    public static string PRODUCT_ID;
    public static int PROTOCOL_VERSION;
    private static LicenseServerMessage();
    public static Byte[] CreateLicenseRequest(string id, int productId, int appVersion);
    private static XmlElement CreateRootElement(string elementName, string id);
    private static Byte[] CreateBytes(XmlElement element);
    [CanBeNullAttribute]
private static XmlDocument DecodeReceivedBytes(Byte[] receivedBytes);
    public static bool DecodeLicense(Byte[] receivedBytes, String& userName, String& licenseKey);
    public static Byte[] CreateLicenseUsedMessage(string id, LicenseData licenseData);
    public static Byte[] CreateLicenseUnusedMessage(string id, LicenseData licenseData);
    public static bool DecodeLicensePoll(Byte[] receivedBytes);
}
public class JetBrains.Application.UI.License.ProductEditionValue : object {
    [CanBeNullAttribute]
private ProductEdition myEdition;
    private bool myLicenseCheckPassed;
    public static ProductEditionValue LicenseCheckFailed;
    public static ProductEditionValue LicensedNoEditions;
    [CanBeNullAttribute]
public ProductEdition Edition { get; }
    private ProductEditionValue(ProductEdition edition, bool licenseCheckPassed);
    private static ProductEditionValue();
    public ProductEdition get_Edition();
    public static ProductEditionValue CreateLicensedValue(ProductEdition edition);
    public bool Equals(ProductEditionValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.UI.MsoComponentManager.DummyMsoComponentManager : object {
    private static int True;
    private static int False;
    private Dictionary`2<IntPtr, ComponentInfo> myComponents;
    private UInt32 myNextComponentId;
    private IMsoComponent myActiveComponent;
    private IMsoComponent myTrackingComponent;
    private UInt32 myCurrentState;
    [NotNullAttribute]
private ComponentInfo GetComponentInfo(IntPtr id);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.QueryService(Guid& guidService, Guid& iid, Object& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wParam, IntPtr lParam);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRegisterComponent(IMsoComponent component, MSOCRINFO[] pcrinfo, IntPtr& dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRevokeComponent(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FUpdateComponentRegistration(IntPtr dwComponentId, MSOCRINFO[] pcrinfo);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentActivate(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FSetTrackingComponent(IntPtr dwComponentId, int fTrack);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.OnComponentEnterState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentExitState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FInState(UInt32 uStateId, IntPtr pvoid);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FContinueIdle();
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentId, int uReason, Void* pvLoopData);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FCreateSubComponentManager(object punkOuter, object punkServProv, Guid& riid, IntPtr& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetParentComponentManager(Object& ppicm);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetActiveComponent(UInt32 dwgac, Object[] ppic, MSOCRINFO[] pcrinfo, UInt32 dwReserved);
}
public static class JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader : object {
    private static string JetComponentManagerDllName;
    private static LocalReentrancyGuard ourReentrancyGuard;
    private static Guid SID_MsoComponentManager;
    private static Guid IID_IMsoComponentManager;
    private static Lazy`1<IJetComponentManagerRegistrar> ourRegistrar;
    [CompilerGeneratedAttribute]
private static Func`1<IJetComponentManagerRegistrar> CS$<>9__CachedAnonymousMethodDelegatea;
    private static JetMsoComponentManagerLoader();
    private static int CoRegisterMessageFilter(IntPtr newFilter, IntPtr& oldMsgFilter);
    public static Action InstallNativeJetComponentManager();
    [CanBeNullAttribute]
public static IMsoComponentManager GetNativeComponentManager();
    [NotNullAttribute]
public static IMsoComponent CreateComponentWrapper(IMsoComponent managedComponent);
    private static IntPtr TryGetInstalledComponentManagerPtr();
    [CompilerGeneratedAttribute]
private static IJetComponentManagerRegistrar <.cctor>b__9();
}
public class JetBrains.Application.UI.MsoComponentManager.MsoComponentBase : object {
    [CanBeNullAttribute]
private ILogger myLogger;
    protected MsoComponentBase(ILogger logger);
    public virtual int FPreTranslateMessage(MSG[] msg);
    public virtual void OnEnterState(UInt32 uStateId, int fEnter);
    public virtual void OnAppActivate(int fActive, UInt32 dwOtherThreadId);
    public virtual void OnLoseActivation();
    public virtual void OnActivationChange(object component, int fSameComponent, MSOCRINFO* pcrinfo, int fHostIsActivating, MSOCHOSTINFO* pchostinfo, UInt32 dwReserved);
    public virtual int FDoIdle(UInt32 grfidlef);
    public virtual int FContinueMessageLoop(UInt32 uReason, Void* pvLoopData, MSG[] pMsgPeeked);
    public virtual int FQueryTerminate(int fPromptUser);
    public virtual void Terminate();
    public virtual Void* HwndGetWindow(UInt32 dwWhich, UInt32 dwReserved);
    public virtual int FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wParam, IntPtr lParam);
}
public class JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy : MarshalByRefObject {
    private static int True;
    private static int False;
    private JetDispatcher myDispatcher;
    private IMsoComponentManager myNativeComponentManager;
    private IMsoComponent myNativeComponent;
    private IntPtr myComponentId;
    private Dictionary`2<IntPtr, IMsoComponent> myComponents;
    [CanBeNullAttribute]
private IMsoComponent myActiveComponent;
    [CanBeNullAttribute]
private IMsoComponent myTrackingComponent;
    private UInt32 myNextComponentId;
    private Stack`1<IProperty`1<bool>> myMessageLoops;
    [CompilerGeneratedAttribute]
private static Action`1<IMsoComponent> CS$<>9__CachedAnonymousMethodDelegate2f;
    private bool IsRegistered { get; }
    public NativeComponentManagerProxy(Lifetime lifetime, IMsoComponentManager nativeComponentManager, JetDispatcher dispatcher);
    public void PushMessageLoop(int uReason, IProperty`1<bool> continueLoop);
    [CanBeNullAttribute]
private IProperty`1<bool> TryGetContinueLoopProperty(Void* pvLoopData);
    private bool get_IsRegistered();
    private bool EnsureRegistered();
    private void ForEachComponent(Action`1<IMsoComponent> action);
    public virtual object InitializeLifetimeService();
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.QueryService(Guid& guidService, Guid& iid, Object& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wparam, IntPtr lparam);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRegisterComponent(IMsoComponent component, MSOCRINFO[] pcrinfo, IntPtr& dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRevokeComponent(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FUpdateComponentRegistration(IntPtr dwComponentId, MSOCRINFO[] pcrinfo);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentActivate(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FSetTrackingComponent(IntPtr dwComponentId, int fTrack);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.OnComponentEnterState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentExitState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FInState(UInt32 uStateId, IntPtr pvoid);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FContinueIdle();
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentId, int uReason, Void* pvLoopData);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FCreateSubComponentManager(object punkOuter, object punkServProv, Guid& riid, IntPtr& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetParentComponentManager(Object& ppicm);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetActiveComponent(UInt32 dwgac, Object[] ppic, MSOCRINFO[] pcrinfo, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FDebugMessage(IntPtr hinst, UInt32 msg, IntPtr wparam, IntPtr lparam);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FPreTranslateMessage(MSG[] msg);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnEnterState(UInt32 uStateId, int fEnter);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnAppActivate(int fActive, UInt32 dwOtherThreadId);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnLoseActivation();
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnActivationChange(object msoComponent, int fSameComponent, MSOCRINFO* pcrinfo, int fHostIsActivating, MSOCHOSTINFO* pchostinfo, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FDoIdle(UInt32 grfidlef);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FContinueMessageLoop(UInt32 uReason, Void* pvLoopData, MSG[] pMsgPeeked);
    private sealed virtual override Void* JetBrains.Interop.WinApi.Interfaces.IMsoComponent.HwndGetWindow(UInt32 dwWhich, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FQueryTerminate(int fPromptUser);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.Terminate();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnLoseActivation>b__19();
    [CompilerGeneratedAttribute]
private void <JetBrains.Interop.WinApi.Interfaces.IMsoComponent.Terminate>b__2d();
    [CompilerGeneratedAttribute]
private static void <JetBrains.Interop.WinApi.Interfaces.IMsoComponent.Terminate>b__2e(IMsoComponent component);
}
[ActionAttribute("&Options…")]
public class JetBrains.Application.UI.Options.Actions.ShowOptionsAction : ShowOptionsActionBase {
}
public class JetBrains.Application.UI.Options.Actions.ShowOptionsActionBase : object {
    public static DataConstant`1<string> ShowOptionsPage;
    public static DataConstant`1<Identity> ShowOptionsForLayer;
    private static ShowOptionsActionBase();
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.UI.Options.ClassOptionIdExtractor : object {
    public static string GetOptionId(Type type);
    public static OptionIdAndAddVerticalScrollFlag GetOptionIdAndAddVerticalScrollFlag(Type type);
    private static OptionsPageAttribute GetOptionsPageAttribute(Type type);
}
public enum JetBrains.Application.UI.Options.Defaultness : Enum {
    public int value__;
    public static Defaultness AllInDefault;
    public static Defaultness SomeSetExplicitlyToDefaultValue;
    public static Defaultness SomeSetToNonDefault;
}
public class JetBrains.Application.UI.Options.DependentSettingsState : object {
    public bool IsActive;
    public Dirtiness Dirtiness;
    public Defaultness Defaultness;
    [NotNullAttribute]
public static DependentSettingsState Empty;
    public DependentSettingsState(bool isActive, Dirtiness dirtiness, Defaultness defaultness);
    private static DependentSettingsState();
}
public enum JetBrains.Application.UI.Options.Dirtiness : Enum {
    public int value__;
    public static Dirtiness AllClean;
    public static Dirtiness SomeDirty;
}
public class JetBrains.Application.UI.Options.HiddenOptionsPageKeyword : OptionsPageKeyword {
    [CompilerGeneratedAttribute]
private OptionsPageKeyword <VislbleKeyword>k__BackingField;
    [NotNullAttribute]
public OptionsPageKeyword VislbleKeyword { get; private set; }
    public HiddenOptionsPageKeyword(string word, OptionsPageKeyword vislbleKeyword);
    [CompilerGeneratedAttribute]
public OptionsPageKeyword get_VislbleKeyword();
    [CompilerGeneratedAttribute]
private void set_VislbleKeyword(OptionsPageKeyword value);
}
public interface JetBrains.Application.UI.Options.IDependentSettings {
    [NotNullAttribute]
public IProperty`1<DependentSettingsState> State { get; }
    public abstract virtual IProperty`1<DependentSettingsState> get_State();
    [CanBeNullAttribute]
public abstract virtual Action RevertAction();
    [CanBeNullAttribute]
public abstract virtual Action ResetAction();
    [CanBeNullAttribute]
public abstract virtual Action ForceDefaultValueAction();
}
public interface JetBrains.Application.UI.Options.IDependentSettingsComposite {
}
public interface JetBrains.Application.UI.Options.IFilterable {
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    public abstract virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
}
public interface JetBrains.Application.UI.Options.IOptionPagesList {
    [NotNullAttribute]
public abstract virtual ICollection`1<OptionsPageEntity> GetOptionPages();
    public abstract virtual void AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
}
public interface JetBrains.Application.UI.Options.IOptionsAutomation1 {
    [CanBeNullAttribute]
public ICollection`1<SettingsSchemaInstance> Settings { get; }
    [CanBeNullAttribute]
public ICollection`1<IOptionsAutomation1> Children { get; }
    [CanBeNullAttribute]
public OptionsSettingsSmartContext Store { get; }
    public abstract virtual ICollection`1<SettingsSchemaInstance> get_Settings();
    public abstract virtual ICollection`1<IOptionsAutomation1> get_Children();
    public abstract virtual OptionsSettingsSmartContext get_Store();
}
public interface JetBrains.Application.UI.Options.IOptionsAutomation2 {
    [CanBeNullAttribute]
public IDependentSettings DependentSettings { get; }
    [CanBeNullAttribute]
public IAutomation Content { get; }
    public SettingsStateIndicatorAutomation Indicator { get; }
    [CanBeNullAttribute]
public ICollection`1<IOptionsAutomation2> Children { get; }
    public abstract virtual IDependentSettings get_DependentSettings();
    public abstract virtual IAutomation get_Content();
    public abstract virtual SettingsStateIndicatorAutomation get_Indicator();
    public abstract virtual ICollection`1<IOptionsAutomation2> get_Children();
}
public interface JetBrains.Application.UI.Options.IOptionsPage {
    [CanBeNullAttribute]
public EitherControl Control { get; }
    [NotNullAttribute]
public string Id { get; }
    public abstract virtual EitherControl get_Control();
    public abstract virtual string get_Id();
    public abstract virtual bool OnOk();
}
public interface JetBrains.Application.UI.Options.ISearchablePage {
    public abstract virtual OptionsPageKeywords GetKeywords();
    public abstract virtual void HighLightKeyword(OptionsFilterResult text);
    public abstract virtual IEnumerable`1<string> GetTagKeywordsForPage();
}
public interface JetBrains.Application.UI.Options.ITreeGridViewFilterPage {
    [NotNullAttribute]
public abstract virtual IFilterDescriptor GetFilter();
}
public interface JetBrains.Application.UI.Options.Marshalling.IMarshalledOptionsPage {
    [NotNullAttribute]
public abstract virtual IMarshalledViewModel GetViewModel();
}
public interface JetBrains.Application.UI.Options.Marshalling.IMarshalledViewModel {
    public string Id { get; }
    public abstract virtual string get_Id();
}
public class JetBrains.Application.UI.Options.ObsoletePageSearchableStub : object {
    public static ObsoletePageSearchableStub Instance;
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    private static ObsoletePageSearchableStub();
    public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    public sealed virtual OptionsPageKeywords GetKeywords();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    public sealed virtual IEnumerable`1<string> GetTagKeywordsForPage();
}
public class JetBrains.Application.UI.Options.OptionIdAndAddVerticalScrollFlag : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddVerticalScroll>k__BackingField;
    public string Id { get; private set; }
    public bool AddVerticalScroll { get; private set; }
    public OptionIdAndAddVerticalScrollFlag(string id, bool addVerticalScroll);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_AddVerticalScroll();
    [CompilerGeneratedAttribute]
private void set_AddVerticalScroll(bool value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionPageDescriptorEx : object {
    [ExtensionAttribute]
public static bool IsInline(OptionsPageDescriptor descriptor);
    [ExtensionAttribute]
public static bool AlignWithParent(OptionsPageDescriptor descriptor);
}
public enum JetBrains.Application.UI.Options.OptionPageNestingType : Enum {
    public int value__;
    public static OptionPageNestingType Child;
    public static OptionPageNestingType Inline;
}
public class JetBrains.Application.UI.Options.OptionPages.AOptionsPage : object {
    private string myPid;
    private List`1<Action> myFlowBackOnOK;
    private SequentialLifetimes mySequenceOfAutomations;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private EitherControl <Control>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<Action> CS$<>9__CachedAnonymousMethodDelegate1;
    public Lifetime Lifetime { get; private set; }
    public IUIApplication Environment { get; private set; }
    protected EitherControl Control { get; protected set; }
    [CanBeNullAttribute]
protected IAutomation Automation { get; protected set; }
    private EitherControl JetBrains.Application.UI.Options.IOptionsPage.Control { get; }
    private string JetBrains.Application.UI.Options.IOptionsPage.Id { get; }
    public AOptionsPage(Lifetime lifetime, IUIApplication environment, string pid);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    [CompilerGeneratedAttribute]
protected EitherControl get_Control();
    [CompilerGeneratedAttribute]
protected void set_Control(EitherControl value);
    protected IAutomation get_Automation();
    protected void set_Automation(IAutomation value);
    private sealed virtual override EitherControl JetBrains.Application.UI.Options.IOptionsPage.get_Control();
    private sealed virtual override string JetBrains.Application.UI.Options.IOptionsPage.get_Id();
    public virtual bool OnOk();
    public virtual bool ValidatePage();
    protected void Bind(IPropertyBinding binding);
    protected void Bind(IProperty`1<TValue> source, IProperty`1<TValue> target);
    protected void Bind(IProperty`1<TValue> source, DependencyObject taregtobj, DependencyProperty targetprop);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private static void <OnOk>b__0(Action x);
}
public class JetBrains.Application.UI.Options.OptionPages.CompositeOptionPage : AOptionsPage {
    public OptionPagesDiagnostics Diagnostics;
    public bool IsAlignWithParent;
    public IList`1<IOptionsPage> Pages;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<string, IOptionsPage>, IOptionsPage> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`3<bool, IOptionsPage, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public IProperty`1<OptionsFilterResult> SearchFilter { get; private set; }
    public CompositeOptionPage(Lifetime lifetime, IUIApplication environment, OptionPagesDiagnostics diagnostics, IList`1<Pair`2<string, IOptionsPage>> pages, bool isAlignWithParent);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    [CompilerGeneratedAttribute]
private void set_SearchFilter(IProperty`1<OptionsFilterResult> value);
    public virtual bool OnOk();
    public sealed virtual OptionsPageKeywords GetKeywords();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    public sealed virtual IEnumerable`1<string> GetTagKeywordsForPage();
    [CompilerGeneratedAttribute]
private static IOptionsPage <.ctor>b__0(Pair`2<string, IOptionsPage> pair);
    [CompilerGeneratedAttribute]
private static bool <OnOk>b__2(bool current, IOptionsPage page);
}
[OptionsPageAttribute("Environment", "Environment", "")]
public class JetBrains.Application.UI.Options.OptionPages.EnvironmentPage : AEmptyOptionsPage {
    public static string Pid;
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.UI.Options.OptionPages.IToolsOptionsPageImplZone {
}
public class JetBrains.Application.UI.Options.OptionPages.OptionsDialogSelectionMru : object {
    public OptionsDialogSelectionMru(Lifetime lifetime, OptionsDialogSettingsContext settings, OptionsDialogModel model, OptionsSessionDefinition session);
}
public class JetBrains.Application.UI.Options.OptionPages.OptionsSessionDefinition : object {
    public OptionPagesDiagnostics Diagnostics;
    [CanBeNullAttribute]
public Identity InitialLayerId;
    [CanBeNullAttribute]
public string InitialPageId;
    [NotNullAttribute]
public LifetimeDefinition LifetimeDefinition;
    public OptionsSessionDefinition(LifetimeDefinition lifetimeDefinition, string initialPageId, Identity initialLayerId, OptionPagesDiagnostics diagnostics);
}
[OptionsPageAttribute("EnvironmentGeneral", "General", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.Application.UI.Options.OptionPages.PlatformEnvironmentGeneralPage : SimpleOptionsPage {
    public static string PID;
    public PlatformEnvironmentGeneralPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("PlatformEnvironmentGeneralPageIcons", "Platform General Icons", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.Application.UI.Options.OptionPages.PlatformEnvironmentGeneralPageIcons : CustomSimpleOptionsPage {
    public static string PID;
    [CompilerGeneratedAttribute]
private static Func`2<IIconsForIconThemeSelectionSample, IEnumerable`1<IconId>> CS$<>9__CachedAnonymousMethodDelegate1;
    public PlatformEnvironmentGeneralPageIcons(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IEnumerable`1<IIconsForIconThemeSelectionSample> samples, IThreading threading, IconIdOwnersMap iconIdOwners, IViewable`1<IThemedIconThemeOracle> themeOracles, ILogger logger);
    [CanBeNullAttribute]
private static IconTheme IconSelectionToTheme(IconThemeSelection selection);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IconId> <.ctor>b__0(IIconsForIconThemeSelectionSample sample);
}
[OptionsPageAttribute("Root", "Options", "")]
public class JetBrains.Application.UI.Options.OptionPages.RootOptionsPage : object {
    public static string PID;
    public EitherControl Control { get; }
    public string Id { get; }
    internal static OptionsPageDescriptor CreateDescriptor();
    public sealed virtual bool OnOk();
    public sealed virtual EitherControl get_Control();
    public sealed virtual string get_Id();
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OptionsPageAttribute("Tools", "Tools", "")]
public class JetBrains.Application.UI.Options.OptionPages.ToolsPage : AEmptyOptionsPage {
    public static string PID;
}
public class JetBrains.Application.UI.Options.OptionPages.WebProxyCustomSettingsViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <HostnameProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <PortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UsernameProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <PasswordProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsVisibleProperty>k__BackingField;
    [UsedImplicitlyAttribute]
public IProperty`1<string> HostnameProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<int> PortProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<string> UsernameProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<string> PasswordProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<bool> IsVisibleProperty { get; public set; }
    public WebProxyCustomSettingsViewModel(IProperty`1<string> hostnameProperty, IProperty`1<int> portProperty, IProperty`1<string> usernameProperty, IProperty`1<string> passwordProperty);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_HostnameProperty();
    [CompilerGeneratedAttribute]
private void set_HostnameProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_PortProperty();
    [CompilerGeneratedAttribute]
private void set_PortProperty(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UsernameProperty();
    [CompilerGeneratedAttribute]
private void set_UsernameProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_PasswordProperty();
    [CompilerGeneratedAttribute]
private void set_PasswordProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsVisibleProperty();
    [CompilerGeneratedAttribute]
public void set_IsVisibleProperty(IProperty`1<bool> value);
    public void CopyValuesFromSystemSettings();
    [NotNullAttribute]
private static Tuple`2<string, int> ReadSystemProxySettings();
    public sealed virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
}
public class JetBrains.Application.UI.Options.OptionPages.WebProxyCustomUsingViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCustomProxyProperty>k__BackingField;
    [UsedImplicitlyAttribute]
public IProperty`1<bool> IsCustomProxyProperty { get; public set; }
    public WebProxyCustomUsingViewModel(IProperty`1<bool> isCustomProxyProperty);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsCustomProxyProperty();
    [CompilerGeneratedAttribute]
public void set_IsCustomProxyProperty(IProperty`1<bool> value);
    public sealed virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
}
[OptionsPageAttribute("WebProxySettings", "Web Proxy Settings", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/ConnectionSettings")]
public class JetBrains.Application.UI.Options.OptionPages.WebProxySettingsPage : WebProxySettingsPageBase {
    public WebProxySettingsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
public class JetBrains.Application.UI.Options.OptionPages.WebProxySettingsPageBase : CustomSimpleOptionsPage {
    public static string Pid;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate3;
    public WebProxySettingsPageBase(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    private static void OpenSystemWebProxySettings();
    [CompilerGeneratedAttribute]
private static object <.ctor>b__0(object x);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__1(object x);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Options.OptionPagesDiagnostics : Enum {
    public int value__;
    public static OptionPagesDiagnostics None;
    public static OptionPagesDiagnostics HighlightInlinePages;
    public static OptionPagesDiagnostics NestInlinePagesAsChilderen;
    public static OptionPagesDiagnostics ShowInlineInPageTitle;
    public static OptionPagesDiagnostics ShowInternalInPageTitle;
    public static OptionPagesDiagnostics ShowZonesInPageTitle;
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Options.OptionPagesList : object {
    private PartCatalogSet myCatalogSet;
    private ProductConfigurations myProductConfigurations;
    protected IList`1<OptionsPageEntity> myManuallyAddedPages;
    public OptionPagesList(ShellPartCatalogSet catalogueSet, ProductConfigurations productConfigurations);
    protected virtual CatalogAttributeFilter CreateCatalogAttributeFilter();
    [NotNullAttribute]
public virtual ICollection`1<OptionsPageEntity> GetOptionPages();
    protected virtual IEnumerable`1<OptionsPageEntity> GetAllOptionsPageEntities();
    public virtual void AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
    protected virtual bool IsPageInConfiguration(OptionsPageAttribute attribute, ProductConfigurations productConfigurations);
    [CompilerGeneratedAttribute]
private bool <GetOptionPages>b__0(OptionsPageEntity pageEntity);
}
public class JetBrains.Application.UI.Options.OptionPagesTree : object {
    private OptionsPageDescriptor myRootElement;
    private Dictionary`2<string, OptionsPageDescriptor> myMapIdToDescriptor;
    [CompilerGeneratedAttribute]
private static Func`2<OptionsPageEntity, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, OptionsPageEntity>, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`1<IGrouping`2<string, OptionsPageEntity>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, OptionsPageEntity>, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, OptionsPageEntity>, OptionsPageEntity> CS$<>9__CachedAnonymousMethodDelegated;
    [NotNullAttribute]
public OptionsPageDescriptor RootElement { get; }
    public OptionPagesTree(IEnumerable`1<OptionsPageEntity> optionpages, OptionPagesDiagnostics diagnostics);
    private static Dictionary`2<string, OptionsPageEntity> Init_MapIdToEntity(IEnumerable`1<OptionsPageEntity> optionpages);
    private void Init_PageDescriptorsTree(Dictionary`2<string, OptionsPageEntity> mapIdToEntity, OptionPagesDiagnostics diagnostics);
    private void ModifyDescriptorAccordingToDiagnostics(OptionsPageDescriptor descriptor, OptionPagesDiagnostics diagnostics);
    public OptionsPageDescriptor get_RootElement();
    [NotNullAttribute]
public OptionsPageDescriptor GetElementByID(string id);
    public bool IsValidID(string id);
    [CompilerGeneratedAttribute]
private static string <Init_MapIdToEntity>b__1(OptionsPageEntity e);
    [CompilerGeneratedAttribute]
private static bool <Init_MapIdToEntity>b__2(IGrouping`2<string, OptionsPageEntity> g);
    [CompilerGeneratedAttribute]
private static void <Init_MapIdToEntity>b__3(IGrouping`2<string, OptionsPageEntity> duplicate);
    [CompilerGeneratedAttribute]
private static string <Init_MapIdToEntity>b__7(IGrouping`2<string, OptionsPageEntity> g);
    [CompilerGeneratedAttribute]
private static OptionsPageEntity <Init_MapIdToEntity>b__8(IGrouping`2<string, OptionsPageEntity> g);
}
public class JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons : object {
}
public class JetBrains.Application.UI.Options.OptionsAutomationBase : object {
    private IAutomation myContent;
    [CanBeNullAttribute]
private IDependentSettings myDependentSettings;
    private SettingsStateIndicatorAutomation myIndicator;
    [NotNullAttribute]
protected ICollectionEvents`1<IOptionsAutomation2> Children;
    private IProperty`1<DependentSettingsState> myCompositeState;
    [CompilerGeneratedAttribute]
private static Func`2<IDependentSettings, Action> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IDependentSettings, Action> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IDependentSettings, Action> CS$<>9__CachedAnonymousMethodDelegatec;
    private IDependentSettings JetBrains.Application.UI.Options.IOptionsAutomation2.DependentSettings { get; }
    private IAutomation JetBrains.Application.UI.Options.IOptionsAutomation2.Content { get; }
    public SettingsStateIndicatorAutomation Indicator { get; }
    private ICollection`1<IOptionsAutomation2> JetBrains.Application.UI.Options.IOptionsAutomation2.Children { get; }
    public IProperty`1<DependentSettingsState> State { get; }
    public OptionsAutomationBase(Lifetime lifetime, IDependentSettings dependentSettings, IAutomation content);
    private void Init_CompositeState(Lifetime lifetime);
    private void Init_CompositeState_Renew();
    private sealed virtual override IDependentSettings JetBrains.Application.UI.Options.IOptionsAutomation2.get_DependentSettings();
    private sealed virtual override IAutomation JetBrains.Application.UI.Options.IOptionsAutomation2.get_Content();
    public sealed virtual SettingsStateIndicatorAutomation get_Indicator();
    private sealed virtual override ICollection`1<IOptionsAutomation2> JetBrains.Application.UI.Options.IOptionsAutomation2.get_Children();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual IProperty`1<DependentSettingsState> get_State();
    public sealed virtual Action RevertAction();
    public sealed virtual Action ResetAction();
    public sealed virtual Action ForceDefaultValueAction();
    [CanBeNullAttribute]
private Action AggregateActions(Func`2<IDependentSettings, Action> FGetChildAction);
    [CompilerGeneratedAttribute]
private void <Init_CompositeState>b__0(Lifetime lifeChild, IOptionsAutomation2 child);
    [CompilerGeneratedAttribute]
private static Action <RevertAction>b__7(IDependentSettings settings);
    [CompilerGeneratedAttribute]
private static Action <ResetAction>b__9(IDependentSettings settings);
    [CompilerGeneratedAttribute]
private static Action <ForceDefaultValueAction>b__b(IDependentSettings settings);
}
public class JetBrains.Application.UI.Options.OptionsDialog.AEmptyOptionsPage : object {
    private string myPid;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    public EitherControl Control { get; }
    public string Id { get; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; private set; }
    public sealed virtual bool OnOk();
    public bool ValidatePage();
    public sealed virtual EitherControl get_Control();
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    [CompilerGeneratedAttribute]
private void set_SearchFilter(IProperty`1<OptionsFilterResult> value);
    public sealed virtual OptionsPageKeywords GetKeywords();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    public virtual IEnumerable`1<string> GetTagKeywordsForPage();
}
public class JetBrains.Application.UI.Options.OptionsDialog.ChildrenOnlyOptionsAutomation : OptionsAutomationBase {
    [NotNullAttribute]
public ICollectionEvents`1<IOptionsAutomation2> Children { get; }
    public ChildrenOnlyOptionsAutomation(Lifetime lifetime);
    public ICollectionEvents`1<IOptionsAutomation2> get_Children();
}
public class JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogAutomation : AAutomation {
    private CopySettingsDialogModel myModel;
    public ISignal`1<string> HelpRequested;
    public ISignal`1<bool> CloseRequested;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandShowError>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandOk>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsSnapshotTreeAutomationBase <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <BannerIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Exception> <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ErrorFullText>k__BackingField;
    public Lifetime Lifetime { get; private set; }
    public ICommand CommandShowError { get; private set; }
    public ICommand CommandCancel { get; private set; }
    public ICommand CommandHelp { get; private set; }
    public ICommand CommandOk { get; private set; }
    public SettingsSnapshotTreeAutomationBase Tree { get; private set; }
    public string ModeName { get; private set; }
    public string ModeDescription { get; private set; }
    public IconId BannerIcon { get; private set; }
    public IProperty`1<Exception> Error { get; private set; }
    public IProperty`1<string> ErrorFullText { get; private set; }
    public CopySettingsDialogAutomation(Lifetime lifetime, CopySettingsDialogModel model, string modeName, string modeDescription, IconId bannerIcon, SettingsSnapshotTreeAutomationBase tree);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandShowError();
    [CompilerGeneratedAttribute]
private void set_CommandShowError(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandCancel();
    [CompilerGeneratedAttribute]
private void set_CommandCancel(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandHelp();
    [CompilerGeneratedAttribute]
private void set_CommandHelp(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandOk();
    [CompilerGeneratedAttribute]
private void set_CommandOk(ICommand value);
    [CompilerGeneratedAttribute]
public SettingsSnapshotTreeAutomationBase get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(SettingsSnapshotTreeAutomationBase value);
    [CompilerGeneratedAttribute]
public string get_ModeName();
    [CompilerGeneratedAttribute]
private void set_ModeName(string value);
    [CompilerGeneratedAttribute]
public string get_ModeDescription();
    [CompilerGeneratedAttribute]
private void set_ModeDescription(string value);
    [CompilerGeneratedAttribute]
public IconId get_BannerIcon();
    [CompilerGeneratedAttribute]
private void set_BannerIcon(IconId value);
    [CompilerGeneratedAttribute]
public IProperty`1<Exception> get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(IProperty`1<Exception> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ErrorFullText();
    [CompilerGeneratedAttribute]
private void set_ErrorFullText(IProperty`1<string> value);
    public void WriteToLayer(UserFriendlySettingsLayer layerTo);
    public void WriteToFile(FileSystemPath fileTo);
    private static void ShowException(Exception exception, string title);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(string helpid);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4();
}
public class JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel : object {
    [CanBeNullAttribute]
private ISettingsStorageMountPoint myMountWithData;
    public IProperty`1<Exception> Error;
    public SettingsSnapshotTreeModel Tree;
    private SequentialLifetimes mySequenceWriteTo;
    private SequentialLifetimes mySequenceMountWithData;
    private ISettingsStore mySettingsStore;
    private IThreading myThreading;
    private WebProxySettingsReader myWebProxySettingsReader;
    private InternKeyPathComponent myInterned;
    public CopySettingsDialogModel(Lifetime lifetime, SettingsSourceModel source, bool isAllSelectedInitially, IThreading threading, WebProxySettingsReader webProxySettingsReader, InternKeyPathComponent interned);
    private void BeginReadFromSource(Lifetime lifetime, SettingsSourceModel source, bool isAllSelectedInitially);
    public void WriteToLayer(UserFriendlySettingsLayer layerTo);
    public void WriteToFile(FileSystemPath fileTo);
    private void WriteCore(Action`1<SettingsSourceModel> FSetTarget);
    private void CopySelectedKeys(IList`1<ItemModel> rootitems, ISettingsStorageMountPoint mountSource, ISettingsStorageMountPoint mountTarget, RecordingLogger logger);
    private void CopySelectedKeys_Item(ItemModel item, ISettingsStorageMountPoint mountSource, ISettingsStorageMountPoint mountTarget, RecordingLogger logger);
    private void CopySelectedKeys_Item_CopyPhysicalSubtree(ItemModel item, ISettingsStorageMountPoint mountSource, ISettingsStorageMountPoint mountTarget, RecordingLogger logger);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.CustomSimpleOptionsPage : SimpleOptionsPage {
    private IList`1<OptionsPageKeyword> myRegisteredWords;
    protected CustomSimpleOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    public virtual OptionsPageKeywords GetKeywords();
    protected IOptionEntity AddCustomOption(IAutomation automation);
    protected IOptionEntity AddSingleRadioOption(IProperty`1<T> sourceProperty, T value, string groupName, string text, string toolTip);
    protected void RegisterWord(string word);
    protected void RegisterWord(OptionsPageKeyword optionsPageKeyword);
    protected void RegisterWord(IEnumerable`1<OptionsPageKeyword> optionsPageKeywords);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.IOptionPagesViewModel {
    public IViewable`1<WrappedOptionPage> Pages { get; }
    public abstract virtual void SelectPage(string pageId);
    public abstract virtual IViewable`1<WrappedOptionPage> get_Pages();
}
public interface JetBrains.Application.UI.Options.OptionsDialog.IOptionsDialogViewOwner {
    public abstract virtual void Show(WindowModality modality, string page, Identity layer, LifetimeDefinition lifetimeDefinition, OptionPagesDiagnostics diagnostics);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.ISettingsSnapshotTreeAutomationFactory {
    public abstract virtual SettingsSnapshotTreeAutomationBase Create(Lifetime lifetime, SettingsSnapshotTreeModel model);
}
[ActionAttribute("Copy Layer To Layer")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.CopyLayerToLayer_Item_XxAction : object {
    private static int IdRangeLength;
    private static string StringUnavailable;
    private static string StringMoar;
    private int myActionIndex;
    [CompilerGeneratedAttribute]
private static Func`2<UserFriendlySettingsLayer, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<UserFriendlySettingsLayer, double> CS$<>9__CachedAnonymousMethodDelegate3;
    public CopyLayerToLayer_Item_XxAction(int index);
    private void AnalyzeThis(Identity source, UserFriendlySettingsLayers layerman, ActionDisposition& disposition, UserFriendlySettingsLayer& layer);
    [NotNullAttribute]
private static IList`1<UserFriendlySettingsLayer> GetAllLayers(UserFriendlySettingsLayers layerman);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(IDataContext context, ActionDisposition disposition, Lifetime lt, UserFriendlySettingsLayers layerman, Identity source, UserFriendlySettingsLayer layerOfThisAction);
    private static void CopyTo(Lifetime lifetime, UserFriendlySettingsLayer layerFrom, UserFriendlySettingsLayer layerTo, UserFriendlySettingsLayers layerman, WebProxySettingsReader webProxySettingsReader, InternKeyPathComponent interned, IThreading threading, ISettingsSnapshotTreeAutomationFactory treeFactory, ISettingsCopier copier, IDataContext context);
    [CompilerGeneratedAttribute]
private static bool <GetAllLayers>b__0(UserFriendlySettingsLayer x);
    [CompilerGeneratedAttribute]
private static double <GetAllLayers>b__1(UserFriendlySettingsLayer x);
}
[ActionGroupAttribute("CopyLayerToLayer", "1")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.CopyLayerToLayerActionGroup : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IPresentableAction.Update(IDataContext context, ActionPresentation presentation);
}
[ActionAttribute("Copy Settings File Path")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.CopySettingsLayerDiskFilePathAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Remove")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.DeleteInjectedLayerAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static bool CanDelete(ISettingsStorageMountPoint mountPoint);
}
[ActionAttribute("Edit Layer")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.EditSettingsLayerOptionsAction : object {
    public static DataConstant`1<string> ShowOptionsPage;
    private static EditSettingsLayerOptionsAction();
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static bool CanExecute(IDataContext context, Identity selectedLayer);
}
[ActionAttribute("Export to File")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ExportSettingsToFileAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context);
}
[ActionAttribute("Import from File…")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ImportSettingsFromFileAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context, FileSystemPath path);
}
[ActionAttribute("Import from URL…")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ImportSettingsFromUrlAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context);
    private static void ImportFromUri(Lifetime lifetime, Uri uri, IDataContext context, Identity selected);
}
[ActionAttribute("Open Settings File…")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.InjectExistingFileLayerIntoInjectedLayersHostAction : InjectExistingFileLayerIntoInjectedLayersHostActionBase {
    protected virtual void ProcessWithPath(IDataContext context, Action`1<FileSystemPath> callback);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.InjectExistingFileLayerIntoInjectedLayersHostActionBase : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual void ProcessWithPath(IDataContext context, Action`1<FileSystemPath> callback);
}
[ActionAttribute("Create Settings File…")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.InjectNewFileLayerIntoInjectedLayersHostAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ISettingsCopier {
    public abstract virtual void ShowMoarDialog(Lifetime lifetime, UserFriendlySettingsLayer sourceLayer, UserFriendlySettingsLayers layerman, IList`1<UserFriendlySettingsLayer> allLayers, WebProxySettingsReader webProxySettingsReader, IUIApplication application, InternKeyPathComponent interned, IDataContext context, Action`2<UserFriendlySettingsLayer, IDataContext> copyTo);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ISettingsLayersModificationDialogOwner {
    public abstract virtual void ShowDialog(Lifetime lifetime, CopySettingsDialogAutomation viewModel, IDataContext context, Action onSuccess);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.MoveInjectedLayerActionBase : object {
    protected ReorderInjectedLayersFlags MoveType { get; }
    protected abstract virtual ReorderInjectedLayersFlags get_MoveType();
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Move Down")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.MoveInjectedLayerDownAction : MoveInjectedLayerActionBase {
    protected ReorderInjectedLayersFlags MoveType { get; }
    protected virtual ReorderInjectedLayersFlags get_MoveType();
}
[ActionAttribute("Move Up")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.MoveInjectedLayerUpAction : MoveInjectedLayerActionBase {
    protected ReorderInjectedLayersFlags MoveType { get; }
    protected virtual ReorderInjectedLayersFlags get_MoveType();
}
[ActionAttribute("Open Containing Folder")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.OpenSettingsLayerContainingFolderAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Rename")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.RenameInjectedLayerAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<UserInjectedSettingsLayer, Identity> CS$<>9__CachedAnonymousMethodDelegate4;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [CompilerGeneratedAttribute]
private static Identity <Execute>b__0(UserInjectedSettingsLayer box);
}
[ActionAttribute("Reset All Settings")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ResetAllSettingsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Reset")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ResetSelectedSettingsLayersAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context);
    private static bool CanReset(ISettingsStorageMountPoint mountPoint);
    private static void InvertModelSelection(CopySettingsDialogModel model);
    private static void InvertNode(ItemModel node);
}
[ActionGroupAttribute("SettingsLayersDialogContext_ImportFrom", "1")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogContext_ImportFromActionGroup : object {
    public SettingsLayersDialogContext_ImportFromActionGroup(ImportSettingsFromFileAction importSettingsFromFileAction, ImportSettingsFromUrlAction importSettingsFromUrlAction);
}
[ActionGroupAttribute("SettingsLayersDialogContextMenu", "0")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogContextMenuActionGroup : object {
    public SettingsLayersDialogContextMenuActionGroup(EditSettingsLayerOptionsAction editSettingsLayerOptionsAction, SettingsLayersDialogToolbar_AddLayerAction settingsLayersDialogToolbarAddLayerActionGroup, Separator sep, SettingsLayersDialogContext_ImportFromActionGroup settingsLayersDialogContextImportFromActionGroup, ExportSettingsToFileAction exportSettingsToFileAction, CopyLayerToLayerActionGroup copyLayerToLayerAction, Separator sep1, CopySettingsLayerDiskFilePathAction copySettingsLayerDiskFilePathAction, OpenSettingsLayerContainingFolderAction openSettingsLayerContainingFolderAction, Separator sep2, RenameInjectedLayerAction renameInjectedLayerAction, Separator sep3, ResetSelectedSettingsLayersAction resetSelectedSettingsLayersAction, DeleteInjectedLayerAction deleteInjectedLayerAction);
}
[ActionGroupAttribute("SettingsLayersDialogRightHandToolbar", "1")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogRightHandToolbarActionGroup : object {
    public SettingsLayersDialogRightHandToolbarActionGroup(ResetAllSettingsAction resetAllSettingsAction);
}
[ActionGroupAttribute("SettingsLayersDialogToolbar.AddLayer", "1")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogToolbar_AddLayerAction : object {
    public SettingsLayersDialogToolbar_AddLayerAction(InjectNewFileLayerIntoInjectedLayersHostAction injectNewFileLayerIntoInjectedLayersHostAction, InjectExistingFileLayerIntoInjectedLayersHostAction injectExistingFileLayerIntoInjectedLayersHostAction);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation);
}
[ActionGroupAttribute("1")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogToolbarActionGroup : object {
    public SettingsLayersDialogToolbarActionGroup(SettingsLayersDialogToolbarImportExportMenuAction settingsLayersDialogToolbarImportExportMenuActionGroup, CopyLayerToLayerActionGroup copyLayerToLayerAction, Separator sep);
}
[ActionGroupAttribute("1")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogToolbarImportExportMenuAction : object {
    public SettingsLayersDialogToolbarImportExportMenuAction(ImportSettingsFromFileAction importSettingsFromFileAction, ImportSettingsFromUrlAction importSettingsFromUrlAction, Separator sep, ExportSettingsToFileAction exportSettingsToFileAction);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.UriValidator : object {
    [CanBeNullAttribute]
public string Check(string input);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.Layers.ISettingsLayersDialogToolbarProvider {
    public abstract virtual IAutomation CreateToolBar(IActionBarManager actionBarManager, string sActionGroupId);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomation : AAutomation {
    private IActionManager myActionManager;
    private IThreading myThreading;
    public ISignal`1<string> HelpRequested;
    public ISimpleSignal CloseRequested;
    [CompilerGeneratedAttribute]
private ICommand <CommandMoveUp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandMoveDown>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandRename>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandChangeIsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandClose>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandBack>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<UserFriendlySettingsLayerForLayersDialogAutomation> <SettingsLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UserFriendlySettingsLayerForLayersDialogAutomation> <SelectedSettingsLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBackToOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IAutomation <MainToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private IAutomation <RightHandToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionManagerCommandBindings <ActionManagerCommandBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<IDataContext, ActionPresentation, DelegateUpdate, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Action`1<UserFriendlySettingsLayerForLayersDialogAutomation> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<UserInjectedSettingsLayer, Identity> CS$<>9__CachedAnonymousMethodDelegate14;
    public ICommand CommandMoveUp { get; private set; }
    public ICommand CommandMoveDown { get; private set; }
    public ICommand CommandRename { get; private set; }
    public ICommand CommandEdit { get; private set; }
    public ICommand CommandChangeIsActive { get; private set; }
    public ICommand CommandClose { get; private set; }
    public ICommand CommandBack { get; private set; }
    public ICommand CommandHelp { get; private set; }
    public Lifetime Lifetime { get; private set; }
    public ListEvents`1<UserFriendlySettingsLayerForLayersDialogAutomation> SettingsLayers { get; private set; }
    public IProperty`1<UserFriendlySettingsLayerForLayersDialogAutomation> SelectedSettingsLayer { get; private set; }
    public bool CanBackToOptions { get; private set; }
    public string Title { get; private set; }
    [CanBeNullAttribute]
public IAutomation MainToolbar { get; private set; }
    [CanBeNullAttribute]
public IAutomation RightHandToolbar { get; private set; }
    public IActionManagerCommandBindings ActionManagerCommandBindings { get; private set; }
    public SettingsLayersDialogAutomation(Lifetime lifetime, IActionManagerCommandBindingsFactory actionManagerCommandBindingsFactory, IUIApplication environment, SettingsLayersDialogModel model, IActionBarManager actionBarManager, UserInjectedSettingsLayers injector, IActionManager actionManager, IThreading threading, IAutomation mainToolbar, IAutomation rightHandToolbar, bool canBackToOptions);
    [CompilerGeneratedAttribute]
public ICommand get_CommandMoveUp();
    [CompilerGeneratedAttribute]
private void set_CommandMoveUp(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandMoveDown();
    [CompilerGeneratedAttribute]
private void set_CommandMoveDown(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandRename();
    [CompilerGeneratedAttribute]
private void set_CommandRename(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandEdit();
    [CompilerGeneratedAttribute]
private void set_CommandEdit(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandChangeIsActive();
    [CompilerGeneratedAttribute]
private void set_CommandChangeIsActive(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandClose();
    [CompilerGeneratedAttribute]
private void set_CommandClose(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandBack();
    [CompilerGeneratedAttribute]
private void set_CommandBack(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_CommandHelp();
    [CompilerGeneratedAttribute]
private void set_CommandHelp(ICommand value);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public ListEvents`1<UserFriendlySettingsLayerForLayersDialogAutomation> get_SettingsLayers();
    [CompilerGeneratedAttribute]
private void set_SettingsLayers(ListEvents`1<UserFriendlySettingsLayerForLayersDialogAutomation> value);
    [CompilerGeneratedAttribute]
public IProperty`1<UserFriendlySettingsLayerForLayersDialogAutomation> get_SelectedSettingsLayer();
    [CompilerGeneratedAttribute]
private void set_SelectedSettingsLayer(IProperty`1<UserFriendlySettingsLayerForLayersDialogAutomation> value);
    [CompilerGeneratedAttribute]
public bool get_CanBackToOptions();
    [CompilerGeneratedAttribute]
private void set_CanBackToOptions(bool value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
    [CompilerGeneratedAttribute]
public IAutomation get_MainToolbar();
    [CompilerGeneratedAttribute]
private void set_MainToolbar(IAutomation value);
    [CompilerGeneratedAttribute]
public IAutomation get_RightHandToolbar();
    [CompilerGeneratedAttribute]
private void set_RightHandToolbar(IAutomation value);
    [CompilerGeneratedAttribute]
public IActionManagerCommandBindings get_ActionManagerCommandBindings();
    [CompilerGeneratedAttribute]
private void set_ActionManagerCommandBindings(IActionManagerCommandBindings value);
    private bool OnFuncFilter(UserFriendlySettingsLayer f);
    private void OnExecuteRenameInjectedLayer(IDataContext context, DelegateExecute nextExecute);
    private void OnRename();
    private void OnBackToOptions();
    public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(AddRemoveIndexEventArgs`1<UserFriendlySettingsLayerForLayersDialogAutomation> args);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(string helpid);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5(object x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7(IDataContext context, ActionPresentation presentation, DelegateUpdate FNext);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__6(UserFriendlySettingsLayerForLayersDialogAutomation layer);
    [CompilerGeneratedAttribute]
private static Identity <OnExecuteRenameInjectedLayer>b__12(UserInjectedSettingsLayer box);
    [CompilerGeneratedAttribute]
private void <OnBackToOptions>b__18();
    [CompilerGeneratedAttribute]
private IList`1<Identity> <GetDataRules>b__19(IDataContext dc);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomationFactory : object {
    private ISettingsStore myStore;
    private IActionManagerCommandBindingsFactory myActionManagerCommandBindingsFactory;
    private IUIApplication myEnvironment;
    private IActionBarManager myActionBarManager;
    private UserInjectedSettingsLayers myInjector;
    private IActionManager myActionman;
    private IShellLocks myLocks;
    private InternKeyPathComponent myInterned;
    private ISettingsLogger mySettingsLogger;
    private ResetSettings myResetSettings;
    private WebProxySettingsReader myWebProxySettingsReader;
    private ISettingsLayersDialogToolbarProvider myToolbarProvider;
    public SettingsLayersDialogAutomationFactory(ISettingsStore store, IActionManagerCommandBindingsFactory actionManagerCommandBindingsFactory, IUIApplication environment, IActionBarManager actionBarManager, UserInjectedSettingsLayers injector, IActionManager actionman, IShellLocks locks, InternKeyPathComponent interned, ISettingsLogger settingsLogger, ResetSettings resetSettings, WebProxySettingsReader webProxySettingsReader, ISettingsLayersDialogToolbarProvider toolbarProvider);
    public SettingsLayersDialogAutomation Create(Lifetime lifetime);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogModel : object {
    private IThreading myThreading;
    private WebProxySettingsReader myWebProxySettingsReader;
    private InternKeyPathComponent myInterned;
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayers <UserLayers>k__BackingField;
    public UserFriendlySettingsLayers UserLayers { get; private set; }
    public SettingsLayersDialogModel(Lifetime lifetime, ISettingsStore store, IThreading threading, WebProxySettingsReader webProxySettingsReader, ResetSettings resetSettings, ISettingsLogger settingsLogger, InternKeyPathComponent interned);
    [CompilerGeneratedAttribute]
public UserFriendlySettingsLayers get_UserLayers();
    [CompilerGeneratedAttribute]
private void set_UserLayers(UserFriendlySettingsLayers value);
    public CopySettingsDialogModel CreateCopySettingsDialogModel_FromUri(Lifetime lifetime, Uri uriFrom);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.UserFriendlySettingsLayerForLayersDialogAutomation : UserFriendlySettingsLayerAutomation {
    [NotNullAttribute]
private UserFriendlySettingsLayer myModel;
    [CompilerGeneratedAttribute]
private ICommand <CommandEditLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <ShellLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionManagerContextMenu <AddLayerContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsPathAccessible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsRenameModeActive>k__BackingField;
    public ICommand CommandEditLayer { get; private set; }
    public IShellLocks ShellLocks { get; private set; }
    public ActionManagerContextMenu AddLayerContextMenu { get; private set; }
    public IProperty`1<bool> IsPathAccessible { get; private set; }
    public IProperty`1<bool> IsActive { get; private set; }
    public IProperty`1<bool> IsRenameModeActive { get; private set; }
    public UserFriendlySettingsLayerForLayersDialogAutomation(Lifetime lifetime, IShellLocks shellLocks, UserFriendlySettingsLayer model, UserInjectedSettingsLayers injector, IActionManager actionman, IActionBarManager barman);
    [CompilerGeneratedAttribute]
public ICommand get_CommandEditLayer();
    [CompilerGeneratedAttribute]
private void set_CommandEditLayer(ICommand value);
    [CompilerGeneratedAttribute]
public IShellLocks get_ShellLocks();
    [CompilerGeneratedAttribute]
private void set_ShellLocks(IShellLocks value);
    [CompilerGeneratedAttribute]
public ActionManagerContextMenu get_AddLayerContextMenu();
    [CompilerGeneratedAttribute]
private void set_AddLayerContextMenu(ActionManagerContextMenu value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsPathAccessible();
    [CompilerGeneratedAttribute]
private void set_IsPathAccessible(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsRenameModeActive();
    [CompilerGeneratedAttribute]
private void set_IsRenameModeActive(IProperty`1<bool> value);
    public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation : AAutomation {
    public IProperty`1<UserFriendlySettingsLayer> SelectedSettingsLayer_Model;
    private TagHighlightingInfoStorage myTagHighlightingInfoStorage;
    private TreeHighlightingInfoStorage myTreeHighlightingInfoStorage;
    public IList`1<OptionsPageWithoutContextAutomation> TopLevelPagesInTree;
    public Property`1<OptionsPageDescriptor> SelectedPage_Model;
    public Property`1<OptionsPageWithoutContextAutomation> SelectedPageForTree;
    public Property`1<OptionsPageInOptionsContextAutomation> SelectedPageInContextForPreview;
    public IProperty`1<UserFriendlySettingsLayerAutomation> SelectedSettingsLayer;
    public IListEvents`1<UserFriendlySettingsLayerAutomation> SettingsLayersForTabs;
    public IListEvents`1<UserFriendlySettingsLayerAutomation> SettingsLayersForAddTabMenu;
    public IListEvents`1<UserFriendlySettingsLayerAutomation> SettingsLayersAllAvailable;
    public UserFriendlySettingsLayerAutomation DefaultSelectedSettingsLayer;
    public SignalCommand CommandImportExport;
    public SignalCommand CommandManageSettingsFiles;
    public SignalCommand CommandTroubleshoot;
    public ISimpleSignal ResetRequested;
    public ISignal`1<CancelEventArgs`1<UserFriendlySettingsLayerAutomation>> ApplyRequested;
    public ISignal`1<string> SearchRequested;
    public IProperty`1<bool> IsSearching;
    public ISignal`1<IFilterDescriptor> UpdateTreeLayout;
    public IProperty`1<bool> NeedToShowSearchHelpOptionPage;
    private Action`1<string> mySelectPage;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMode <Internalmode>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<UserFriendlySettingsLayerAutomation> <SaveToLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private ChildrenOnlyOptionsAutomation <ChildrenOnlyOptionsAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private IViewable`1<WrappedOptionPage> <Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<UserFriendlySettingsLayerAutomation, bool> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Comparison`1<UserFriendlySettingsLayerAutomation> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Action`1<Lifetime> CS$<>9__CachedAnonymousMethodDelegate39;
    public IShellLocks Locks { get; private set; }
    public InternalMode Internalmode { get; private set; }
    public IListEvents`1<UserFriendlySettingsLayerAutomation> SaveToLayers { get; private set; }
    public ChildrenOnlyOptionsAutomation ChildrenOnlyOptionsAutomation { get; private set; }
    public IViewable`1<WrappedOptionPage> Pages { get; private set; }
    public OptionsAutomation(Lifetime lifetime, OptionsModel model, IShellLocks locks, UserInjectedSettingsLayers injector, InternalMode internalmode, UsageStatistics activityTracking);
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
private void set_Locks(IShellLocks value);
    [CompilerGeneratedAttribute]
public InternalMode get_Internalmode();
    [CompilerGeneratedAttribute]
private void set_Internalmode(InternalMode value);
    private void HandleSearchRequest(Lifetime currentSearchLifetime, OptionsModel model, IShellLocks locks, string searchText, IProperty`1<OptionsPageInOptionsContextAutomationFactory> propFactoryPagesInContext, OptionsPageWithoutContextAutomationFactory factoryPagesWithoutContext, StaticKeywordsPerPageKeeper staticKeywordsPerPageKeeper, UsageStatistics activityTracking);
    private ISearchablePage GetSearchablePage(OptionsPageWithoutContextAutomationFactory factoryPagesWithoutContext, OptionsPageWithoutContextAutomation node, OptionsPageInOptionsContextAutomationFactory fact, UserFriendlySettingsLayer optContext, IContextBoundSettingsStoreLive trans);
    private List`1<NodeWithParent> GetNodeWithParents(NodeWithParent grandParent, OptionsPageWithoutContextAutomation parent);
    private OptionsPageDescriptor GetFirstLeaf(OptionsPageWithoutContextAutomationFactory factory);
    private void OnBeforeCommit(IThreading threading, BeforeCommitEventArgs args, IProperty`1<OptionsPageInOptionsContextAutomationFactory> propFactoryPagesInContext);
    [CompilerGeneratedAttribute]
public IListEvents`1<UserFriendlySettingsLayerAutomation> get_SaveToLayers();
    [CompilerGeneratedAttribute]
private void set_SaveToLayers(IListEvents`1<UserFriendlySettingsLayerAutomation> value);
    [CompilerGeneratedAttribute]
public ChildrenOnlyOptionsAutomation get_ChildrenOnlyOptionsAutomation();
    [CompilerGeneratedAttribute]
private void set_ChildrenOnlyOptionsAutomation(ChildrenOnlyOptionsAutomation value);
    public TagHighlightingInfo GetTagHighlightingInfo(IOptionsPage page);
    public TreeHighlightingInfo GetTreeHighlightingInfo();
    public sealed virtual void SelectPage(string pageId);
    [CompilerGeneratedAttribute]
public sealed virtual IViewable`1<WrappedOptionPage> get_Pages();
    [CompilerGeneratedAttribute]
private void set_Pages(IViewable`1<WrappedOptionPage> value);
    private static IEnumerable`1<OptionsPageWithoutContextAutomation> GetAllOptionsPages(IEnumerable`1<OptionsPageWithoutContextAutomation> pages);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(PropertyChangedEventArgs`1<UserFriendlySettingsLayer> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8(AddRemoveIndexEventArgs`1<UserFriendlySettingsLayerAutomation> args);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__9(UserFriendlySettingsLayerAutomation automationLayer);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__a(UserFriendlySettingsLayerAutomation automation, UserFriendlySettingsLayerAutomation layerAutomation);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16(Lifetime lifeFactory, OptionsPageInOptionsContextAutomationFactory factory);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1a();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1c();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1d();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(UserFriendlySettingsLayer layer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17(Lifetime lifetimePageInContext, OptionsPageInOptionsContextAutomation pageInContext);
    [CompilerGeneratedAttribute]
private void <.ctor>b__18(Lifetime lifePageAutomation, IOptionsPage pageMaybeWithAutomation);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1b(Lifetime lifeWnd);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsComponentAttribute : ComponentAttribute {
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation : AAutomation {
    private HelpSystem helpSystem;
    private Lazy`1<ImageSource> myLazyIcon;
    [CompilerGeneratedAttribute]
private OptionsDialogModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandSave>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand`1<UserFriendlySettingsLayerAutomation> <CommandSaveTo>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandApply>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandClose>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandManage>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <CloseRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <WindowTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SaveButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsAutomation <OptionsAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEditingNonDefaultLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsManageButtonIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSaveToButtonIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UserFriendlySettingsLayerAutomation> <EditedSettingsLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <PendingChangesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <PendingChangesMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasPendingChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<UserFriendlySettingsLayerAutomation, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`3<bool, bool, bool> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<bool, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    public OptionsDialogModel Model { get; private set; }
    public IUIApplication Environment { get; public set; }
    public Lifetime Lifetime { get; private set; }
    public DelegateCommand CommandSave { get; private set; }
    public DelegateCommand`1<UserFriendlySettingsLayerAutomation> CommandSaveTo { get; private set; }
    public DelegateCommand CommandApply { get; private set; }
    public DelegateCommand CommandCancel { get; private set; }
    public DelegateCommand CommandClose { get; private set; }
    public DelegateCommand CommandHelp { get; private set; }
    public DelegateCommand CommandManage { get; private set; }
    public ISimpleSignal CloseRequested { get; private set; }
    public IProperty`1<string> WindowTitle { get; private set; }
    public IProperty`1<string> SaveButtonTitle { get; private set; }
    public OptionsAutomation OptionsAutomation { get; private set; }
    public IProperty`1<bool> IsEditingNonDefaultLayer { get; private set; }
    public IProperty`1<bool> IsManageButtonIncluded { get; private set; }
    public IProperty`1<bool> IsSaveToButtonIncluded { get; private set; }
    public IProperty`1<UserFriendlySettingsLayerAutomation> EditedSettingsLayer { get; private set; }
    public IProperty`1<int> PendingChangesCount { get; private set; }
    public IProperty`1<string> PendingChangesMessage { get; private set; }
    public IProperty`1<bool> HasPendingChanges { get; private set; }
    public ImageSource Icon { get; }
    public OptionsDialogAutomation(IUIApplication environment, Lifetime lifetime, OptionsDialogModel model, IShellLocks locks, UserInjectedSettingsLayers injector, HelpSystem helpSystem, ProductConfigurations productConfigurations, AdvancedSettingsLayersEditingTrait advancedSettingsLayersEditingTrait, IApplicationRestart restart, UsageStatistics activityTracking);
    [CompilerGeneratedAttribute]
public OptionsDialogModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(OptionsDialogModel value);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(IUIApplication value);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandSave();
    [CompilerGeneratedAttribute]
private void set_CommandSave(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand`1<UserFriendlySettingsLayerAutomation> get_CommandSaveTo();
    [CompilerGeneratedAttribute]
private void set_CommandSaveTo(DelegateCommand`1<UserFriendlySettingsLayerAutomation> value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandApply();
    [CompilerGeneratedAttribute]
private void set_CommandApply(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandCancel();
    [CompilerGeneratedAttribute]
private void set_CommandCancel(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandClose();
    [CompilerGeneratedAttribute]
private void set_CommandClose(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandHelp();
    [CompilerGeneratedAttribute]
private void set_CommandHelp(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandManage();
    [CompilerGeneratedAttribute]
private void set_CommandManage(DelegateCommand value);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_CloseRequested();
    [CompilerGeneratedAttribute]
private void set_CloseRequested(ISimpleSignal value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_WindowTitle();
    [CompilerGeneratedAttribute]
private void set_WindowTitle(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SaveButtonTitle();
    [CompilerGeneratedAttribute]
private void set_SaveButtonTitle(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public OptionsAutomation get_OptionsAutomation();
    [CompilerGeneratedAttribute]
private void set_OptionsAutomation(OptionsAutomation value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEditingNonDefaultLayer();
    [CompilerGeneratedAttribute]
private void set_IsEditingNonDefaultLayer(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsManageButtonIncluded();
    [CompilerGeneratedAttribute]
private void set_IsManageButtonIncluded(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsSaveToButtonIncluded();
    [CompilerGeneratedAttribute]
private void set_IsSaveToButtonIncluded(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<UserFriendlySettingsLayerAutomation> get_EditedSettingsLayer();
    [CompilerGeneratedAttribute]
private void set_EditedSettingsLayer(IProperty`1<UserFriendlySettingsLayerAutomation> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_PendingChangesCount();
    [CompilerGeneratedAttribute]
private void set_PendingChangesCount(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_PendingChangesMessage();
    [CompilerGeneratedAttribute]
private void set_PendingChangesMessage(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_HasPendingChanges();
    [CompilerGeneratedAttribute]
private void set_HasPendingChanges(IProperty`1<bool> value);
    public ImageSource get_Icon();
    [NotNullAttribute]
private static ImageSource ToImageSource(Icon icon);
    private void OnContextHelp();
    [NotNullAttribute]
private static string GetPendingChangesMessage(int count);
    public Nullable`1<bool> Close(string title);
    private void OnManage();
    public void RefreshPendingChanges();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__c(int x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__d(UserFriendlySettingsLayerAutomation automation);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__e(bool isAdvancedLayerEditingOn, bool isEditingNonDefaultLayer);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__f(bool isAdvancedLayerEditingOn);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogModel : object {
    private IActionManager myActionManager;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private OptionsModel <Options>k__BackingField;
    public OptionsModel Options { get; private set; }
    public OptionsDialogModel(Lifetime lifetime, ISettingsStore settingsStore, IOptionPagesList optionpages, IComponentContainer containerForPageViews, HelpSystem helpSystem, ILogger logger, IActionManager actionman, IThreading threading, OptionPagesDiagnostics diagnostics);
    [CompilerGeneratedAttribute]
public OptionsModel get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(OptionsModel value);
    public void ShowSettingsLayers();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <ShowSettingsLayers>b__2();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogOwner : object {
    private ISettingsLogger mySettingsLogger;
    private DataContexts myDatacontexts;
    private UserFriendlySettingsLayers myLayers;
    public OptionsDialogOwner(Lifetime lifetime, ISettingsLogger settingsLogger, DataContexts datacontexts, UserFriendlySettingsLayers layers);
    public OptionsDialogAutomation Create(Lifetime lifetime, string layerName);
    [CompilerGeneratedAttribute]
private ComponentContainerForFactoring <Create>b__1(Lifetime lifeDC);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Options dialog logical settings")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "MRU selected page.")]
public string SelectedPageId;
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogSettingsContext : object {
    public IContextBoundSettingsStoreLive BoundContext;
    public OptionsDialogSettings InitialSettings;
    public OptionsDialogSettingsContext(Lifetime lifetime, ISettingsStore store, ISettingsOptimization settingsOptimization);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogViewOwnerStub : object {
    public virtual void Show(WindowModality modality, string page, Identity layer, LifetimeDefinition lifetimeDefinition, OptionPagesDiagnostics diagnostics);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsManager : object {
    private IOptionPagesList myOptionPagesList;
    private IOptionsDialogViewOwner myOptionsDialogOwner;
    private ISettingsStore mySettingsStore;
    public OptionsManager(IOptionPagesList optionPagesList, IOptionsDialogViewOwner optionsDialogOwner, ISettingsStore settingsStore);
    [NotNullAttribute]
public ICollection`1<OptionsPageEntity> GetOptionPages();
    public void AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
    [NotNullAttribute]
public OptionPagesTree CreateOptionPagesTree();
    [GuardAttribute("1")]
public void ShowOptionsModal(string pageId);
    [GuardAttribute("-1")]
public void BeginShowOptions(string pageId);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsModel : object {
    internal static bool OptionIsForcingWriteOfDefaultValuesOnSaveTo;
    public OptionPagesTree OptionPagesTree;
    public ISettingsStore SettingsStore;
    public ISignal`1<BeforeCommitEventArgs> BeforeCommit;
    public IProperty`1<OptionsPageDescriptor> SelectPageRequested;
    public IProperty`1<UserFriendlySettingsLayer> SelectLayerRequested;
    public ISignal`1<OptionsPageDescriptor> PageSelected;
    public IProperty`1<int> PendingChangesCount;
    private ISettingsStoreInTransaction mySettingsStoreTransactionForChanges;
    [NotNullAttribute]
public UserFriendlySettingsLayers SettingsLayers;
    public ISimpleSignal EverythingWasReset;
    public IComponentContainer ContainerForPageViews;
    private ILogger myLogger;
    private IDictionary`2<UserFriendlySettingsLayer, IContextBoundSettingsStoreLive> myMapLayerToItsClearTransaction;
    private IProperty`1<ISettingsStoreInTransaction> mySettingsStoreTransactionCleanSnapshot;
    private SequentialLifetimes mySequenceSettingsStoreTransactionCleanSnapshots;
    private JetDispatcher DispatcherMainThread;
    private SynchronizedLifetime myLifetimeForStoreTransactionForChanges;
    private SynchronizedLifetime myLifetimeForStoreTransactionCleanSnapshot;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    public OptionsModel(Lifetime lifetime, ISettingsStore settingsStore, IOptionPagesList optionpages, IComponentContainer containerForPageViews, IThreading threading, ILogger logger, OptionPagesDiagnostics diagnostics);
    private static OptionsModel();
    public void RecalculatePendingChangesCount();
    private int RecalculatePendingChangesCountCore();
    public bool Commit();
    [GuardAttribute("1")]
private bool CommitOptionPagesViewModels();
    public void Revert();
    public bool CommitToContext(UserFriendlySettingsLayer ctx, IProgressIndicator progress);
    [NotNullAttribute]
public IContextBoundSettingsStoreLive GetCleanTransactionForLayer(UserFriendlySettingsLayer layer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime lifeStoreClean, ISettingsStoreInTransaction storeClean);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Lifetime lifeCleanSnapshotUnsync);
    [CompilerGeneratedAttribute]
private int <RecalculatePendingChangesCountCore>b__11();
    [CompilerGeneratedAttribute]
private int <RecalculatePendingChangesCountCore>b__12();
    [CompilerGeneratedAttribute]
private static bool <CommitToContext>b__13(ISettingsStorageMountPoint mount);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory : object {
    private Lifetime myLifetime;
    private IList`1<object> myDummyInjecttions;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<OptionsPageDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    public OptionsPageFactory(Lifetime lifetime);
    [NotNullAttribute]
public IOptionsPage CreateOptionsPage(OptionsPageDescriptor pagedescriptor, IComponentContainer containerParent, OptionsSettingsSmartContext injectSettingsStoreSmartContext, IShellLocks locks);
    private Object[] GetInjections(Lifetime lifetime, OptionsSettingsSmartContext injectSettingsStoreSmartContext, IShellLocks locks);
    private static void GetInjections_Useful(List`1<object> injections, OptionsSettingsSmartContext injectSettingsStoreSmartContext, IShellLocks locks);
    private static IList`1<object> CreateInjections_DummyToPreventImporting(Lifetime lifetime, ISettingsSchema schema, IShellLocks shellLocks);
    [CompilerGeneratedAttribute]
private static object <CreateOptionsPage>b__2();
    [CompilerGeneratedAttribute]
private static bool <CreateOptionsPage>b__3(OptionsPageDescriptor x);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomation : AAutomation {
    private Lifetime myLifetime;
    private OptionsPageDescriptor OptionsPageModel;
    private UserFriendlySettingsLayer OptionsContextModel;
    private IContextBoundSettingsStoreLive myStoreCleanTransactionForLayer;
    private IComponentContainer myContainerForPageViews;
    private IShellLocks myLocks;
    private OptionsPageFactory myOptionsPageFactory;
    public string Title;
    [NotNullAttribute]
public IProperty`1<IOptionsPage> CreatedOptionsPage;
    public bool HasContent { get; }
    public OptionsPageInOptionsContextAutomation(Lifetime lifetime, OptionsPageDescriptor modelPage, UserFriendlySettingsLayer modelContext, IContextBoundSettingsStoreLive storeCleanTransactionForLayer, IComponentContainer containerForPageViews, IShellLocks locks);
    public Type GetPageType();
    public bool get_HasContent();
    [CanBeNullAttribute]
private EitherControl GetControlFromExistingOptionsPage();
    [NotNullAttribute]
public IOptionsPage GetOrCreateOptionsPage();
    [CanBeNullAttribute]
public IOptionsPage TryGetOptionsPage();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomationFactory : AAutomation {
    private Lifetime myLifetime;
    private IComponentContainer myContainerForPageViews;
    private IShellLocks myLocks;
    private BidirectionalMapOnDictionary`2<Pair`2<OptionsPageDescriptor, UserFriendlySettingsLayer>, OptionsPageInOptionsContextAutomation> mapModelToAutomation;
    private BidirectionalMapOnDictionary`2<UserFriendlySettingsLayer, IComponentContainer> myContainers;
    [NotNullAttribute]
public CollectionEvents`1<OptionsPageInOptionsContextAutomation> CreatedPageInContextAutomationObjects;
    public OptionsPageInOptionsContextAutomationFactory(Lifetime lifetime, IComponentContainer containerForPageViews, IShellLocks locks);
    [NotNullAttribute]
public OptionsPageInOptionsContextAutomation GetOrCreate(OptionsPageDescriptor page, UserFriendlySettingsLayer opcontext, IContextBoundSettingsStoreLive storeCleanTransactionForLayer);
    [NotNullAttribute]
public IList`1<KeyValuePair`2<Pair`2<OptionsPageDescriptor, UserFriendlySettingsLayer>, OptionsPageInOptionsContextAutomation>> EnumCreatedPages();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageWithoutContextAutomation : AAutomation {
    private Lazy`1<List`1<OptionsPageWithoutContextAutomation>> myChildren;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ChildrenOnlyOptionsAutomation <OptionsAutomation>k__BackingField;
    public List`1<OptionsPageWithoutContextAutomation> Children { get; }
    public string Name { get; private set; }
    public IconId Icon { get; private set; }
    [NotNullAttribute]
public ChildrenOnlyOptionsAutomation OptionsAutomation { get; private set; }
    public OptionsPageWithoutContextAutomation(Lifetime lifetime, OptionsPageDescriptor descriptor, OptionsPageWithoutContextAutomationFactory factory, InternalMode internalmode);
    [DebuggerStepThroughAttribute]
public List`1<OptionsPageWithoutContextAutomation> get_Children();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public ChildrenOnlyOptionsAutomation get_OptionsAutomation();
    [CompilerGeneratedAttribute]
private void set_OptionsAutomation(ChildrenOnlyOptionsAutomation value);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageWithoutContextAutomationFactory : AAutomation {
    private Lifetime myLifetime;
    private BidirectionalMapOnDictionary`2<OptionsPageDescriptor, OptionsPageWithoutContextAutomation> myMapModelToViewModel;
    public IList`1<OptionsPageWithoutContextAutomation> TopLevelViewModels;
    public OptionsPageDescriptor RootModel;
    public OptionsPageWithoutContextAutomation RootAutomation;
    private InternalMode myInternalMode;
    public OptionsPageWithoutContextAutomationFactory(Lifetime lifetime, OptionPagesTree tree, InternalMode internalMode);
    public OptionsPageWithoutContextAutomation ModelToViewModel(OptionsPageDescriptor model);
    public OptionsPageDescriptor ViewModelToModel(OptionsPageWithoutContextAutomation viewmodel);
    [CompilerGeneratedAttribute]
private OptionsPageWithoutContextAutomation <ModelToViewModel>b__0(OptionsPageDescriptor descriptor);
}
public static class JetBrains.Application.UI.Options.OptionsDialog.OptionsSettingsDiffScript : object {
    private static IEqualityComparer`1<SettingsKeyInstance> myKeyInstanceIndexComparer;
    private static IEqualityComparer`1<SettingsEntryInstance> myEntryInstanceIndexComparer;
    [CompilerGeneratedAttribute]
private static Func`3<SettingsKeyInstance, SettingsKeyInstance, bool> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<SettingsKeyInstance, int> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`3<SettingsEntryInstance, SettingsEntryInstance, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<SettingsEntryInstance, int> CS$<>9__CachedAnonymousMethodDelegate1c;
    private static OptionsSettingsDiffScript();
    [NotNullAttribute]
public static List`1<IScriptAction> Emit(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, ILogger logger);
    [NotNullAttribute]
public static List`1<IScriptAction> Emit2(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, SettingsStoreChangeArgs snapshotClean, SettingsStoreChangeArgs snapshotChanged, ILogger logger);
    private static void DiffKeysList(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, IList`1<SettingsKeyInstance> keysClean, IList`1<SettingsKeyInstance> keysChanged, Dictionary`2<SettingsKey, object> keyIndices, List`1<IScriptAction> script, ILogger logger);
    private static void DiffKeysList_Key(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, SettingsKeyInstance keyClean, SettingsKeyInstance keyChanged, Dictionary`2<SettingsKey, object> keyIndices, List`1<IScriptAction> script, ILogger logger);
    private static void WithKeyIndex(SettingsKeyInstance keyinstance, Dictionary`2<SettingsKey, object> keyIndices, Action F, ILogger logger);
    private static void DiffEntriesList(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, IList`1<SettingsEntryInstance> entriesClean, IList`1<SettingsEntryInstance> entriesChanged, Dictionary`2<SettingsKey, object> keyIndices, List`1<IScriptAction> script);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__15(SettingsKeyInstance a, SettingsKeyInstance b);
    [CompilerGeneratedAttribute]
private static int <.cctor>b__16(SettingsKeyInstance k);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__17(SettingsEntryInstance a, SettingsEntryInstance b);
    [CompilerGeneratedAttribute]
private static int <.cctor>b__18(SettingsEntryInstance k);
}
public class JetBrains.Application.UI.Options.OptionsDialog.PredefinedFilter : object {
    private IEnumerable`1<object> myItems;
    private EventHandler Invalidated;
    public PredefinedFilter(IEnumerable`1<object> items);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.NodeWithParent : object {
    [CompilerGeneratedAttribute]
private OptionsPageWithoutContextAutomation <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeWithParent <Parent>k__BackingField;
    public OptionsPageWithoutContextAutomation Node { get; private set; }
    public NodeWithParent Parent { get; private set; }
    public NodeWithParent(OptionsPageWithoutContextAutomation node, NodeWithParent parent);
    [CompilerGeneratedAttribute]
public OptionsPageWithoutContextAutomation get_Node();
    [CompilerGeneratedAttribute]
private void set_Node(OptionsPageWithoutContextAutomation value);
    [CompilerGeneratedAttribute]
public NodeWithParent get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(NodeWithParent value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsDialog.Search.NodeWithParentEx : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<OptionsPageWithoutContextAutomation> GetNodesFromThisToRoot(NodeWithParent nodeWithParent);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.OptionKeywordRegistrator : object {
    private IList`1<OptionsPageKeyword> myKeywords;
    public string GetRegisteredString(string source);
    public void AddKeyword(OptionsPageKeyword optionsPageKeyword);
    public OptionsPageKeywords GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.OptionsFinder : object {
    public static OptionsFilterResult FilterPage(string searchText, IEnumerable`1<OptionsPageKeyword> allKeywords, string pageTitlePath);
    private static bool ProcessTreeItemOptionsPageKeyword(TreeItemOptionsPageKeyword keyword, IEnumerable`1<string> remainingPatterns, IEnumerable`1<TreeItemOptionsPageKeyword> treeItemsToRoot, IEnumerable`1<HiddenOptionsPageKeyword> hiddenKeywordsToRoot, JetHashSet`1<object> filteredTreeItems, JetHashSet`1<HiddenOptionsPageKeyword> hiddenKeywords);
    private static bool ProcessMatchedTreeItemOptionsPageKeyword(TreeItemOptionsPageKeyword keyword, IEnumerable`1<string> remainingPatterns, IEnumerable`1<TreeItemOptionsPageKeyword> treeItemsToRoot, IEnumerable`1<HiddenOptionsPageKeyword> hiddenKeywordsToRoot, JetHashSet`1<object> filteredTreeItems, JetHashSet`1<HiddenOptionsPageKeyword> hiddenKeywords, bool isLeaf);
    private static void AddAllKeywordsToTreeFilter(TreeItemOptionsPageKeyword keyword, JetHashSet`1<object> filteredTreeItems, IEnumerable`1<TreeItemOptionsPageKeyword> treeItemsToRoot);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.SearchHelpOptionViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    public RichText Text { get; private set; }
    [CompilerGeneratedAttribute]
public RichText get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(RichText value);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.StaticKeywordsPerPageKeeper : object {
    private CompactOneToListMap`2<ISearchablePage, OptionsPageKeyword> myKeywordsByPages;
    [CompilerGeneratedAttribute]
private static Func`2<string, TagOptionsPageKeyword> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<TagOptionsPageKeyword, OptionsPageKeyword> CS$<>9__CachedAnonymousMethodDelegate3;
    public IEnumerable`1<OptionsPageKeyword> GetKeywords(ISearchablePage searchablePage, IEnumerable`1<ISearchablePage> pagesToRoot);
    [CompilerGeneratedAttribute]
private static TagOptionsPageKeyword <GetKeywords>b__0(string x);
    [CompilerGeneratedAttribute]
private static OptionsPageKeyword <GetKeywords>b__1(TagOptionsPageKeyword x);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.TagHighlightingInfoStorage : object {
    private CompactMap`2<ISearchablePage, TagHighlightingInfo> myTagInfoByPages;
    public void Clear();
    public void Add(ISearchablePage page, TagHighlightingInfo info);
    public TagHighlightingInfo Get(IOptionsPage page);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.TextInOptionsFinder : object {
    public static bool IsWordApplicable(string searchText, string word);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.TreeHighlightingInfoStorage : object {
    private List`1<string> myHighlightingWords;
    public void Clear();
    public void Add(TreeHighlightingInfo treeHighlightingInfo);
    public TreeHighlightingInfo Get();
}
public static class JetBrains.Application.UI.Options.OptionsDialog.Search.UsageStatisticsGroups : object {
    public static string SucceededSearchRequest;
    public static string FailedSearchRequest;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsDialog.Search.UsageStatisticsInOptionsEx : object {
    [ExtensionAttribute]
public static void TrackSearchRequest(UsageStatistics activityTracking, bool isSucceeded, string request);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase : AAutomation {
    public IProperty`1<bool> IsAnythingChecked;
    [CompilerGeneratedAttribute]
private IProperty`1<IList`1<ItemAutomation>> <RootItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CueBannerText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <CueBannerVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsItemsAssigned>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, Visibility> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<ItemAutomation>, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<ItemAutomation>, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<ItemAutomation, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    public IProperty`1<IList`1<ItemAutomation>> RootItems { get; private set; }
    public IProperty`1<string> CueBannerText { get; private set; }
    public IProperty`1<Visibility> CueBannerVisibility { get; private set; }
    public IProperty`1<bool> IsItemsAssigned { get; private set; }
    public SettingsSnapshotTreeAutomationBase(Lifetime lifetime, SettingsSnapshotTreeModel model);
    private void UpdateIsAnythingChecked();
    private bool GetIsAnythingChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<IList`1<ItemAutomation>> get_RootItems();
    [CompilerGeneratedAttribute]
private void set_RootItems(IProperty`1<IList`1<ItemAutomation>> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CueBannerText();
    [CompilerGeneratedAttribute]
private void set_CueBannerText(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_CueBannerVisibility();
    [CompilerGeneratedAttribute]
private void set_CueBannerVisibility(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsItemsAssigned();
    [CompilerGeneratedAttribute]
private void set_IsItemsAssigned(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
private static Visibility <.ctor>b__0(string s);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(IList`1<ItemAutomation> x);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__4(IList`1<ItemAutomation> x);
    [CompilerGeneratedAttribute]
private static bool <GetIsAnythingChecked>b__e(ItemAutomation x);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationFactoryBase : object {
    public virtual SettingsSnapshotTreeAutomationBase Create(Lifetime lifetime, SettingsSnapshotTreeModel model);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel : object {
    public IProperty`1<IList`1<ItemModel>> RootItems;
    public SettingsSnapshotTreeModel(Lifetime lifetime);
    [NotNullAttribute]
public IEnumerable`1<Tuple`2<SettingsKey, IDictionary`2<SettingsKey, object>>> GetSelectedItems();
    [NotNullAttribute]
private IEnumerable`1<Tuple`2<SettingsKey, IDictionary`2<SettingsKey, object>>> GetSelectedItems_Recurse(IEnumerable`1<ItemModel> items, Dictionary`2<SettingsKey, object> keyindices);
}
public enum JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.BindingStyle : Enum {
    public int value__;
    public static BindingStyle IsEnabledProperty;
    public static BindingStyle IsVisibleProperty;
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.CustomOption : object {
    [CompilerGeneratedAttribute]
private IAutomation <Automation>k__BackingField;
    public IAutomation Automation { get; private set; }
    public CustomOption(IAutomation automation);
    [CompilerGeneratedAttribute]
public IAutomation get_Automation();
    [CompilerGeneratedAttribute]
private void set_Automation(IAutomation value);
    public sealed virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
}
public interface JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.IOptionCanBeEnabled {
    public IProperty`1<bool> IsEnabledProperty { get; }
    public abstract virtual IProperty`1<bool> get_IsEnabledProperty();
}
public interface JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.IOptionCanBeVisible {
    public IProperty`1<bool> IsVisibleProperty { get; }
    public abstract virtual IProperty`1<bool> get_IsVisibleProperty();
}
public interface JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.IOptionEntity {
    public abstract virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public abstract virtual IAutomation GetAutomation();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.MultiPropertyBoolValueCalculator : object {
    private List`1<Func`1<bool>> sourceValues;
    [CompilerGeneratedAttribute]
private static Func`2<Func`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public void Add(Func`1<object> getPropertyValue, Func`2<object, object> convertFunc);
    public bool GetCurrentValue();
    [CompilerGeneratedAttribute]
private static bool <GetCurrentValue>b__3(Func`1<bool> x);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.OptionEntityEx : object {
    [ExtensionAttribute]
public static IProperty`1<bool> GetIsEnabledProperty(IOptionEntity option);
    [ExtensionAttribute]
public static IProperty`1<bool> GetIsVisibleProperty(IOptionEntity option);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.OptionEntityPrimitive : ObservableObject {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsVisibleProperty>k__BackingField;
    public IProperty`1<bool> IsEnabledProperty { get; private set; }
    public IProperty`1<bool> IsVisibleProperty { get; private set; }
    protected OptionEntityPrimitive(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
private void set_IsEnabledProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsVisibleProperty();
    [CompilerGeneratedAttribute]
private void set_IsVisibleProperty(IProperty`1<bool> value);
    public abstract virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.SimpleOptionsPageInternal : AAutomation {
    [CompilerGeneratedAttribute]
private IList`1<IOptionEntity> <OptionEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IOptionEntity, int> <OptionIndents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddVerticalScroll>k__BackingField;
    public IList`1<IOptionEntity> OptionEntities { get; private set; }
    public IDictionary`2<IOptionEntity, int> OptionIndents { get; private set; }
    public bool AddVerticalScroll { get; private set; }
    public SimpleOptionsPageInternal(IList`1<IOptionEntity> optionEntities, IDictionary`2<IOptionEntity, int> optionIndents, bool addVerticalScroll);
    [CompilerGeneratedAttribute]
public IList`1<IOptionEntity> get_OptionEntities();
    [CompilerGeneratedAttribute]
private void set_OptionEntities(IList`1<IOptionEntity> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IOptionEntity, int> get_OptionIndents();
    [CompilerGeneratedAttribute]
private void set_OptionIndents(IDictionary`2<IOptionEntity, int> value);
    [CompilerGeneratedAttribute]
public bool get_AddVerticalScroll();
    [CompilerGeneratedAttribute]
private void set_AddVerticalScroll(bool value);
}
public enum JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.Tutorial.MyTutorialEnum : Enum {
    public int value__;
    public static MyTutorialEnum One;
    public static MyTutorialEnum Two;
    public static MyTutorialEnum Three;
}
public enum JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.Tutorial.MyTutorialEnumWithDescription : Enum {
    public int value__;
    [DescriptionAttribute("Eins")]
public static MyTutorialEnumWithDescription One;
    [DescriptionAttribute("Zwei")]
public static MyTutorialEnumWithDescription Two;
    [DescriptionAttribute("Drei")]
public static MyTutorialEnumWithDescription Three;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "Tutorial settings")]
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.Tutorial.TutorialSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some bool option")]
public bool MyBoolOption;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some string option")]
public string MyStringOption;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some enum option")]
public MyTutorialEnum MyEnumOption;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some enum option 2")]
public MyTutorialEnumWithDescription MyEnumOptionWithDescribedValues;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some bool option for bind 1")]
public bool BoolBindingSource;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some bool option for bind s")]
public bool BoolBindingTarget;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some bool option for visible")]
public bool MyBoolOptionForVisibleProperty;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some bool option for showing visibility")]
public bool MyBoolOptionForShowingVisibility;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Some bool option for enabled")]
public bool MyBoolOptionForEnabledProperty;
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.BoolOptionViewModel : OptionEntityPrimitive {
    private string myCaption;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CheckedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    public IProperty`1<bool> CheckedProperty { get; public set; }
    public RichText RichText { get; private set; }
    public string ToolTipText { get; private set; }
    private IProperty`1<RichText> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.Text { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeHidden { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsVisible { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeDisabled { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsEnabled { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsCheckedLogically { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsAppearingChecked { get; }
    private IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsCheckedForChildControl { get; }
    public BoolOptionViewModel(Lifetime lifetime, IProperty`1<bool> checkedProperty, RichText richText, string toolTipText);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CheckedProperty();
    [CompilerGeneratedAttribute]
public void set_CheckedProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
private void set_RichText(RichText value);
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
private void set_ToolTipText(string value);
    private sealed virtual override IProperty`1<RichText> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_Text();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_ShouldBeHidden();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsVisible();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_ShouldBeDisabled();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsEnabled();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsCheckedLogically();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsAppearingChecked();
    private sealed virtual override IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsCheckedForChildControl();
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ButtonOptionViewModel : OptionEntityPrimitive {
    private string myText;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <Command>k__BackingField;
    public RichText RichText { get; private set; }
    public DelegateCommand Command { get; private set; }
    public ButtonOptionViewModel(Lifetime lifetime, string text, DelegateCommand command);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
private void set_RichText(RichText value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(DelegateCommand value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboEnumWithCaptionViewModel`1 : ComboEnumWithCaptionViewModelBase {
    private Type myType;
    private IEnumerable`1<string> myAllPresentedValues;
    [CompilerGeneratedAttribute]
private IProperty`1<T> <ValueProperty>k__BackingField;
    public IProperty`1<T> ValueProperty { get; private set; }
    public IEnumerable`1<string> AllPresentedValues { get; }
    public ComboEnumWithCaptionViewModel`1(Lifetime lifetime, RichText prefixCaption, RichText postfixCaption, IProperty`1<T> valueProperty, Type type);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    [CompilerGeneratedAttribute]
public IProperty`1<T> get_ValueProperty();
    [CompilerGeneratedAttribute]
private void set_ValueProperty(IProperty`1<T> value);
    public virtual IEnumerable`1<string> get_AllPresentedValues();
    private string GetValuePresentation(object original);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboEnumWithCaptionViewModelBase : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private RichText <PrefixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <PostfixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <AutomationName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <PresentedValue>k__BackingField;
    public RichText PrefixCaption { get; private set; }
    public RichText PostfixCaption { get; private set; }
    public RichText AutomationName { get; private set; }
    public IProperty`1<string> PresentedValue { get; private set; }
    public IEnumerable`1<string> AllPresentedValues { get; }
    protected ComboEnumWithCaptionViewModelBase(Lifetime lifetime, string prefixCaption, string postfixCaption, Type type);
    [CompilerGeneratedAttribute]
public RichText get_PrefixCaption();
    [CompilerGeneratedAttribute]
private void set_PrefixCaption(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_PostfixCaption();
    [CompilerGeneratedAttribute]
private void set_PostfixCaption(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_AutomationName();
    [CompilerGeneratedAttribute]
private void set_AutomationName(RichText value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_PresentedValue();
    [CompilerGeneratedAttribute]
private void set_PresentedValue(IProperty`1<string> value);
    public abstract virtual IEnumerable`1<string> get_AllPresentedValues();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboOptionViewModel : OptionEntityPrimitive {
    private IProperty`1<object> myValueProperty;
    [CompilerGeneratedAttribute]
private RichText <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<RadioOptionPoint> <Points>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SelectedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <AllPossibleValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllPossibleToolTips>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Refresh>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<RadioOptionPoint, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<RadioOptionPoint, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<RadioOptionPoint, string> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<RadioOptionPoint, string> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<RadioOptionPoint, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    public RichText Prefix { get; private set; }
    public RichText Suffix { get; private set; }
    public RichText Tooltip { get; private set; }
    public IEnumerable`1<RadioOptionPoint> Points { get; private set; }
    public IProperty`1<string> SelectedValue { get; private set; }
    public ObservableCollection`1<string> AllPossibleValues { get; private set; }
    public IEnumerable`1<string> AllPossibleToolTips { get; private set; }
    public ISimpleSignal Refresh { get; private set; }
    public ComboOptionViewModel(RichText prefix, RichText suffix, RichText tooltip, IEnumerable`1<RadioOptionPoint> points, IProperty`1<object> valueProperty, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public RichText get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_Suffix();
    [CompilerGeneratedAttribute]
private void set_Suffix(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_Tooltip();
    [CompilerGeneratedAttribute]
private void set_Tooltip(RichText value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<RadioOptionPoint> get_Points();
    [CompilerGeneratedAttribute]
private void set_Points(IEnumerable`1<RadioOptionPoint> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SelectedValue();
    [CompilerGeneratedAttribute]
private void set_SelectedValue(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<string> get_AllPossibleValues();
    [CompilerGeneratedAttribute]
private void set_AllPossibleValues(ObservableCollection`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllPossibleToolTips();
    [CompilerGeneratedAttribute]
private void set_AllPossibleToolTips(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_Refresh();
    [CompilerGeneratedAttribute]
private void set_Refresh(ISimpleSignal value);
    public void UpdateModel(IEnumerable`1<RadioOptionPoint> points, object newValue);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(RadioOptionPoint x);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(RadioOptionPoint x);
    [CompilerGeneratedAttribute]
private static string <UpdateModel>b__11(RadioOptionPoint x);
    [CompilerGeneratedAttribute]
private static string <UpdateModel>b__12(RadioOptionPoint x);
    [CompilerGeneratedAttribute]
private static bool <UpdateModel>b__14(RadioOptionPoint p);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.FileChooserViewModel : PathChooserViewModel {
    private ICommonFileDialogs myCommonFileDialogs;
    public FileChooserViewModel(Lifetime lifetime, IProperty`1<FileSystemPath> pathSetting, string goodCaseTooltip, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty);
    protected virtual FileSystemPath TryGetPath(FileSystemPath initialPath);
    protected virtual string AdditionalTryGetError(FileSystemPath path);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.FolderChooserViewModel : PathChooserViewModel {
    private ICommonFileDialogs myCommonFileDialogs;
    public FolderChooserViewModel(Lifetime lifetime, IProperty`1<FileSystemPath> pathSetting, string goodCaseTooltip, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty);
    protected virtual FileSystemPath TryGetPath(FileSystemPath initialPath);
    protected virtual string AdditionalTryGetError(FileSystemPath path);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.HeaderOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    public string Text { get; private set; }
    public string Tooltip { get; private set; }
    public HeaderOptionViewModel(Lifetime lifetime, string text, string tooltip);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
private void set_Tooltip(string value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.IntOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private RichText <PrefixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <PostfixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <IntValueProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Step>k__BackingField;
    public RichText PrefixCaption { get; private set; }
    public RichText PostfixCaption { get; private set; }
    public string ToolTipText { get; private set; }
    public IProperty`1<int> IntValueProperty { get; private set; }
    public int MinValue { get; private set; }
    public int MaxValue { get; private set; }
    public int Step { get; private set; }
    public IntOptionViewModel(Lifetime lifetime, IProperty`1<int> intValueProperty, RichText prefixCaption, RichText postfixCaption, string toolTipText, int minValue, int maxValue, int step);
    [CompilerGeneratedAttribute]
public RichText get_PrefixCaption();
    [CompilerGeneratedAttribute]
private void set_PrefixCaption(RichText value);
    [CompilerGeneratedAttribute]
public RichText get_PostfixCaption();
    [CompilerGeneratedAttribute]
private void set_PostfixCaption(RichText value);
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
private void set_ToolTipText(string value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_IntValueProperty();
    [CompilerGeneratedAttribute]
private void set_IntValueProperty(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public int get_MinValue();
    [CompilerGeneratedAttribute]
private void set_MinValue(int value);
    [CompilerGeneratedAttribute]
public int get_MaxValue();
    [CompilerGeneratedAttribute]
private void set_MaxValue(int value);
    [CompilerGeneratedAttribute]
public int get_Step();
    [CompilerGeneratedAttribute]
private void set_Step(int value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.PathChooserViewModel : OptionEntityPrimitive {
    private bool myCanBeEmpty;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <PathSetting>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <InitialValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <TextIsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <BrowseCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanReset>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ResetButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ResetCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [NotNullAttribute]
public IProperty`1<FileSystemPath> PathSetting { get; private set; }
    public FileSystemPath InitialValue { get; private set; }
    public IProperty`1<bool> TextIsValid { get; private set; }
    public RichText ButtonText { get; private set; }
    public IProperty`1<string> ToolTipText { get; private set; }
    public DelegateCommand BrowseCommand { get; private set; }
    public bool CanReset { get; private set; }
    public RichText ResetButtonText { get; private set; }
    public DelegateCommand ResetCommand { get; private set; }
    public IProperty`1<string> Path { get; private set; }
    public IProperty`1<bool> IsReadOnly { get; private set; }
    protected PathChooserViewModel(Lifetime lifetime, IProperty`1<FileSystemPath> pathSetting, string goodCaseTooltip, FileSystemPath initialValue, FileSystemPath defaultValue, bool canBeEmpty);
    [CompilerGeneratedAttribute]
public IProperty`1<FileSystemPath> get_PathSetting();
    [CompilerGeneratedAttribute]
private void set_PathSetting(IProperty`1<FileSystemPath> value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_InitialValue();
    [CompilerGeneratedAttribute]
private void set_InitialValue(FileSystemPath value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_TextIsValid();
    [CompilerGeneratedAttribute]
private void set_TextIsValid(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public RichText get_ButtonText();
    [CompilerGeneratedAttribute]
private void set_ButtonText(RichText value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ToolTipText();
    [CompilerGeneratedAttribute]
private void set_ToolTipText(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_BrowseCommand();
    [CompilerGeneratedAttribute]
private void set_BrowseCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public bool get_CanReset();
    [CompilerGeneratedAttribute]
private void set_CanReset(bool value);
    [CompilerGeneratedAttribute]
public RichText get_ResetButtonText();
    [CompilerGeneratedAttribute]
private void set_ResetButtonText(RichText value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ResetCommand();
    [CompilerGeneratedAttribute]
private void set_ResetCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
private void set_IsReadOnly(IProperty`1<bool> value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    protected abstract virtual FileSystemPath TryGetPath(FileSystemPath path);
    private FileSystemPath GetInitialPath();
    protected virtual string AdditionalTryGetError(FileSystemPath initialPath);
    [CanBeNullAttribute]
private string TryGetError(FileSystemPath path, string pathstr);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__1(FileSystemPath p);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RadioOptionPoint : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FallbackPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Comment>k__BackingField;
    public object Value { get; private set; }
    public bool IsFallbackValue { get; private set; }
    public string FallbackPrefix { get; private set; }
    [NotNullAttribute]
public string Text { get; private set; }
    [CanBeNullAttribute]
public string ToolTipText { get; private set; }
    [CanBeNullAttribute]
public RichText Comment { get; private set; }
    public RadioOptionPoint(object val, string text, string toolTipText, RichText comment, bool isFallbackValue, string fallbackPrefix);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    [CompilerGeneratedAttribute]
public bool get_IsFallbackValue();
    [CompilerGeneratedAttribute]
private void set_IsFallbackValue(bool value);
    [CompilerGeneratedAttribute]
public string get_FallbackPrefix();
    [CompilerGeneratedAttribute]
private void set_FallbackPrefix(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
private void set_ToolTipText(string value);
    [CompilerGeneratedAttribute]
public RichText get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(RichText value);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RadioOptionViewModel : OptionEntityPrimitive {
    private string myCaption;
    private IEnumerable`1<RadioOptionPoint> myValues;
    [CompilerGeneratedAttribute]
private RadioGroupViewModel`1<object> <RadioGroupViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsScalarEntry <SettingsScalarEntry>k__BackingField;
    public RadioGroupViewModel`1<object> RadioGroupViewModel { get; public set; }
    public SettingsScalarEntry SettingsScalarEntry { get; public set; }
    public RadioOptionViewModel(Lifetime lifetime, SettingsScalarEntry settingsScalarEntry, string caption, IEnumerable`1<RadioOptionPoint> values, RadioGroupViewModel`1<object> radioGroupViewModel);
    [CompilerGeneratedAttribute]
public RadioGroupViewModel`1<object> get_RadioGroupViewModel();
    [CompilerGeneratedAttribute]
public void set_RadioGroupViewModel(RadioGroupViewModel`1<object> value);
    [CompilerGeneratedAttribute]
public SettingsScalarEntry get_SettingsScalarEntry();
    [CompilerGeneratedAttribute]
public void set_SettingsScalarEntry(SettingsScalarEntry value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RichTextOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    public RichText RichText { get; private set; }
    public RichTextOptionViewModel(Lifetime lifetime, RichText richText);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
private void set_RichText(RichText value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.SingleRadioViewModel`1 : SingleRadioViewModelBase {
    private IProperty`1<T> mySourceProperty;
    private T myValue;
    public bool IsChecked { get; public set; }
    public SingleRadioViewModel`1(Lifetime lifetime, IProperty`1<T> sourceProperty, T value, string groupName, string text, string toolTip);
    public virtual bool get_IsChecked();
    public virtual void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.SingleRadioViewModelBase : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public bool IsChecked { get; public set; }
    public string GroupName { get; private set; }
    public string Text { get; private set; }
    public string ToolTip { get; private set; }
    protected SingleRadioViewModelBase(Lifetime lifetime, string groupName, string text, string toolTip);
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
private void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
private void set_ToolTip(string value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.StringOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private SettingsScalarEntry <SettingsScalarEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <StringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsReturn>k__BackingField;
    public SettingsScalarEntry SettingsScalarEntry { get; private set; }
    public Property`1<string> StringProperty { get; public set; }
    public RichText Text { get; private set; }
    public string ToolTipText { get; private set; }
    public bool AcceptsReturn { get; private set; }
    public StringOptionViewModel(Lifetime lifetime, IContextBoundSettingsStoreLive context, SettingsScalarEntry settingsScalarEntry, string text, string toolTipText, bool acceptsReturn);
    [CompilerGeneratedAttribute]
public SettingsScalarEntry get_SettingsScalarEntry();
    [CompilerGeneratedAttribute]
private void set_SettingsScalarEntry(SettingsScalarEntry value);
    [CompilerGeneratedAttribute]
public Property`1<string> get_StringProperty();
    [CompilerGeneratedAttribute]
public void set_StringProperty(Property`1<string> value);
    [CompilerGeneratedAttribute]
public RichText get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(RichText value);
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
private void set_ToolTipText(string value);
    [CompilerGeneratedAttribute]
public bool get_AcceptsReturn();
    [CompilerGeneratedAttribute]
private void set_AcceptsReturn(bool value);
    public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptionsPage : object {
    private static List`1<StringSource> ourAllowedTypeNamesForRadioList;
    private JetHashSet`1<IOptionEntity> myIgnoredInSearchOptions;
    private Dictionary`2<IProperty`1<bool>, MultiPropertyBoolValueCalculator> myEnableMultiPropertyBoolValues;
    protected Lifetime myLifetime;
    private EitherControl myControl;
    [CompilerGeneratedAttribute]
private OptionsSettingsSmartContext <OptionsSettingsSmartContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IOptionEntity> <OptionEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IOptionEntity, int> <OptionIndents>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleOptionsPageInternal <SimpleOptionsPageInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    public OptionsSettingsSmartContext OptionsSettingsSmartContext { get; private set; }
    public IList`1<IOptionEntity> OptionEntities { get; private set; }
    public IDictionary`2<IOptionEntity, int> OptionIndents { get; private set; }
    public SimpleOptionsPageInternal SimpleOptionsPageInternal { get; private set; }
    public EitherControl Control { get; }
    public string Id { get; private set; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; private set; }
    protected SimpleOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    private static SimpleOptionsPage();
    [CompilerGeneratedAttribute]
public OptionsSettingsSmartContext get_OptionsSettingsSmartContext();
    [CompilerGeneratedAttribute]
private void set_OptionsSettingsSmartContext(OptionsSettingsSmartContext value);
    [CompilerGeneratedAttribute]
public IList`1<IOptionEntity> get_OptionEntities();
    [CompilerGeneratedAttribute]
private void set_OptionEntities(IList`1<IOptionEntity> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<IOptionEntity, int> get_OptionIndents();
    [CompilerGeneratedAttribute]
private void set_OptionIndents(IDictionary`2<IOptionEntity, int> value);
    [CompilerGeneratedAttribute]
public SimpleOptionsPageInternal get_SimpleOptionsPageInternal();
    [CompilerGeneratedAttribute]
private void set_SimpleOptionsPageInternal(SimpleOptionsPageInternal value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual EitherControl get_Control();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    public virtual bool OnOk();
    public bool ValidatePage();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    [CompilerGeneratedAttribute]
private void set_SearchFilter(IProperty`1<OptionsFilterResult> value);
    public virtual OptionsPageKeywords GetKeywords();
    public virtual IEnumerable`1<string> GetTagKeywordsForPage();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    protected void DeleteOptionFromSearch(IOptionEntity option);
    protected IOptionEntity AddHeader(string text, string tooltip);
    protected RichTextOptionViewModel AddRichText(RichText richText);
    protected IOptionEntity AddText(String[] texts);
    protected IOptionEntity AddEmptyLine();
    protected void FinishPage();
    protected IOptionEntity AddButton(string text, DelegateCommand command);
    protected BoolOptionViewModel AddBoolOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, RichText text, string toolTipText);
    protected BoolOptionViewModel AddBoolOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, TEntryMemberType trueValue, TEntryMemberType falseValue, RichText text, string toolTipText);
    protected BoolOptionViewModel AddBoolOption(IProperty`1<bool> checkedProperty, RichText richText, string toolTipText);
    protected IntOptionViewModel AddIntOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string text, string toolTipText, int minValue, int step, int maxValue, string postfixText);
    protected IOptionEntity AddStringOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string text, string toolTipText, bool acceptsReturn);
    protected PathChooserViewModel AddFolderChooserOption(IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty);
    protected PathChooserViewModel AddFileChooserOption(IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty);
    protected IOptionEntity AddRadioOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, object defaultValue, RadioOptionPoint[] values);
    protected IOptionEntity AddComboEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption);
    protected IOptionEntity AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string prefix, RadioOptionPoint[] values);
    protected IOptionEntity AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string prefix, string suffix, RadioOptionPoint[] values);
    protected ComboOptionViewModel AddComboOption(IProperty`1<object> valueProperty, string prefix, RadioOptionPoint[] values);
    protected ComboOptionViewModel AddComboOption(IProperty`1<object> valueProperty, string prefix, string suffix, RadioOptionPoint[] values);
    protected ComboOptionViewModel AddComboOption(IProperty`1<object> valueProperty, string prefix, string suffix, string tooltip, RadioOptionPoint[] values);
    protected void AddBinding(IOptionEntity target, BindingStyle bindingStyle, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, Func`2<object, object> convertFunc);
    protected void AddBinding(IOptionEntity target, BindingStyle bindingStyle, IProperty`1<TEntryMemberType> sourceProperty, Func`2<object, object> convertFunc);
    protected void SetIndent(IOptionEntity widthOption, int indent);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static bool <AddRadioOption>b__6(FieldInfo x);
    [CompilerGeneratedAttribute]
private static string <AddRadioOption>b__8(DescriptionAttribute attr);
}
public class JetBrains.Application.UI.Options.OptionsDialog.TagHighlightingInfo : object {
    public static TagHighlightingInfo EmptyInstance;
    [CompilerGeneratedAttribute]
private string <TagText>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TextHighlightings>k__BackingField;
    public string TagText { get; private set; }
    public IEnumerable`1<string> TextHighlightings { get; private set; }
    public TagHighlightingInfo(string tagText, IEnumerable`1<string> textHighlightings);
    private static TagHighlightingInfo();
    [CompilerGeneratedAttribute]
public string get_TagText();
    [CompilerGeneratedAttribute]
private void set_TagText(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TextHighlightings();
    [CompilerGeneratedAttribute]
private void set_TextHighlightings(IEnumerable`1<string> value);
}
public class JetBrains.Application.UI.Options.OptionsDialog.TreeHighlightingInfo : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TextHighlightings>k__BackingField;
    public IEnumerable`1<string> TextHighlightings { get; private set; }
    public TreeHighlightingInfo(IEnumerable`1<string> textHighlightings);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TextHighlightings();
    [CompilerGeneratedAttribute]
private void set_TextHighlightings(IEnumerable`1<string> value);
}
public class JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation : ObservableAutomation {
    private Lifetime myLifetime;
    private double myPriority;
    private UserFriendlySettingsLayer myModel;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <OriginText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanAddLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanEditLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IconId, IconId> CS$<>9__CachedAnonymousMethodDelegate7;
    [NotNullAttribute]
public UserFriendlySettingsLayer Model { get; }
    public bool IsAlive { get; }
    public IProperty`1<string> DisplayName { get; private set; }
    public IProperty`1<string> OriginText { get; private set; }
    public bool IsDefault { get; }
    public bool IsLocked { get; private set; }
    public IProperty`1<bool> CanAddLayer { get; private set; }
    public IProperty`1<bool> CanEditLayer { get; private set; }
    public double Priority { get; }
    public IProperty`1<IconId> Icon { get; private set; }
    public UserFriendlySettingsLayerAutomation(Lifetime lifetime, UserFriendlySettingsLayer model, UserInjectedSettingsLayers injector);
    public UserFriendlySettingsLayer get_Model();
    public bool get_IsAlive();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_OriginText();
    [CompilerGeneratedAttribute]
private void set_OriginText(IProperty`1<string> value);
    public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
private void set_IsLocked(bool value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanAddLayer();
    [CompilerGeneratedAttribute]
private void set_CanAddLayer(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanEditLayer();
    [CompilerGeneratedAttribute]
private void set_CanEditLayer(IProperty`1<bool> value);
    public double get_Priority();
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IProperty`1<IconId> value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static string <.ctor>b__2(string s);
    [CompilerGeneratedAttribute]
private static IconId <.ctor>b__3(IconId icon);
}
public class JetBrains.Application.UI.Options.OptionsDialog.WrappedOptionPage : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptionsPage <Page>k__BackingField;
    [NotNullAttribute]
public string Id { get; private set; }
    [CanBeNullAttribute]
public string Comment { get; private set; }
    [CanBeNullAttribute]
public IOptionsPage Page { get; private set; }
    private WrappedOptionPage(string id, IOptionsPage page, string comment);
    public static WrappedOptionPage CreateValidPage(string id, IOptionsPage page);
    public static WrappedOptionPage CreateInvalidPage(string id, string comment);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
    [CompilerGeneratedAttribute]
public IOptionsPage get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(IOptionsPage value);
}
public class JetBrains.Application.UI.Options.OptionsFilterResult : object {
    [CompilerGeneratedAttribute]
private bool <IsPageApplicable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <VisibleHighlightings>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HiddenOptionsPageKeyword> <HiddenOptionsPageKeywords>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <FilteredTreeItems>k__BackingField;
    [CompilerGeneratedAttribute]
private TagOptionsPageKeyword <SingleTagOptionsPageKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeHighlightingInfo <TreeHighlightingInfo>k__BackingField;
    public bool IsPageApplicable { get; private set; }
    public string Text { get; private set; }
    public IEnumerable`1<string> VisibleHighlightings { get; private set; }
    public IList`1<HiddenOptionsPageKeyword> HiddenOptionsPageKeywords { get; public set; }
    public IEnumerable`1<object> FilteredTreeItems { get; public set; }
    public TagOptionsPageKeyword SingleTagOptionsPageKeyword { get; private set; }
    public TreeHighlightingInfo TreeHighlightingInfo { get; private set; }
    public OptionsFilterResult(bool isPageApplicable, string text, IEnumerable`1<string> visibleHighlightings, IEnumerable`1<string> treeHighlighings, IList`1<HiddenOptionsPageKeyword> hiddenOptionsPageKeywords, IEnumerable`1<object> filteredTreeItems, TagOptionsPageKeyword singleTagOptionsPageKeyword);
    [CompilerGeneratedAttribute]
public bool get_IsPageApplicable();
    [CompilerGeneratedAttribute]
private void set_IsPageApplicable(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_VisibleHighlightings();
    [CompilerGeneratedAttribute]
private void set_VisibleHighlightings(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<HiddenOptionsPageKeyword> get_HiddenOptionsPageKeywords();
    [CompilerGeneratedAttribute]
public void set_HiddenOptionsPageKeywords(IList`1<HiddenOptionsPageKeyword> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_FilteredTreeItems();
    [CompilerGeneratedAttribute]
public void set_FilteredTreeItems(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public TagOptionsPageKeyword get_SingleTagOptionsPageKeyword();
    [CompilerGeneratedAttribute]
private void set_SingleTagOptionsPageKeyword(TagOptionsPageKeyword value);
    [CompilerGeneratedAttribute]
public TreeHighlightingInfo get_TreeHighlightingInfo();
    [CompilerGeneratedAttribute]
private void set_TreeHighlightingInfo(TreeHighlightingInfo value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsFilterResultExt : object {
    [ExtensionAttribute]
public static string GetText(OptionsFilterResult optionsFilterResult);
}
[BaseTypeRequiredAttribute("JetBrains.Application.UI.Options.IOptionsPage")]
[MeansImplicitUseAttribute("8")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.Options.OptionsPageAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionPageNestingType <NestingType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlignedWithParent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddVerticalScroll>k__BackingField;
    [CanBeNullAttribute]
public string HelpKeyword { get; public set; }
    [NotNullAttribute]
public string Id { get; private set; }
    [CanBeNullAttribute]
public IconId Icon { get; private set; }
    [ObsoleteAttribute("Use Zoning")]
public bool Internal { get; public set; }
    [NotNullAttribute]
public string Name { get; public set; }
    [CanBeNullAttribute]
public string ParentId { get; public set; }
    public double Sequence { get; public set; }
    public OptionPageNestingType NestingType { get; public set; }
    public bool IsAlignedWithParent { get; public set; }
    public bool AddVerticalScroll { get; public set; }
    public OptionsPageAttribute(string id, string name, Type typeofIcon);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public bool get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(string value);
    [CompilerGeneratedAttribute]
public double get_Sequence();
    [CompilerGeneratedAttribute]
public void set_Sequence(double value);
    [CompilerGeneratedAttribute]
public OptionPageNestingType get_NestingType();
    [CompilerGeneratedAttribute]
public void set_NestingType(OptionPageNestingType value);
    [CompilerGeneratedAttribute]
public bool get_IsAlignedWithParent();
    [CompilerGeneratedAttribute]
public void set_IsAlignedWithParent(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddVerticalScroll();
    [CompilerGeneratedAttribute]
public void set_AddVerticalScroll(bool value);
    public sealed virtual int CompareTo(OptionsPageAttribute other);
}
public class JetBrains.Application.UI.Options.OptionsPageDescriptor : object {
    [NotNullAttribute]
private List`1<OptionsPageDescriptor> myChildren;
    [CompilerGeneratedAttribute]
private OptionsPageAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PageType>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsPageDescriptor <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<OptionsPageDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<OptionsPageDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Comparison`1<OptionsPageDescriptor> CS$<>9__CachedAnonymousMethodDelegate8;
    [NotNullAttribute]
public OptionsPageAttribute Attribute { get; private set; }
    [NotNullAttribute]
public IList`1<OptionsPageDescriptor> Children { get; }
    [NotNullAttribute]
public IList`1<OptionsPageDescriptor> InlineChildren { get; }
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public Type PageType { get; private set; }
    [CanBeNullAttribute]
public OptionsPageDescriptor Parent { get; private set; }
    public OptionsPageDescriptor(OptionsPageEntity entity, OptionsPageDescriptor parent);
    [CompilerGeneratedAttribute]
public OptionsPageAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(OptionsPageAttribute value);
    public IList`1<OptionsPageDescriptor> get_Children();
    public IList`1<OptionsPageDescriptor> get_InlineChildren();
    public string get_Id();
    [CompilerGeneratedAttribute]
public Type get_PageType();
    [CompilerGeneratedAttribute]
private void set_PageType(Type value);
    [CompilerGeneratedAttribute]
public OptionsPageDescriptor get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(OptionsPageDescriptor value);
    [NotNullAttribute]
public string GetFullPath();
    [NotNullAttribute]
public Image GetIcon1(IUIApplication environment);
    [NotNullAttribute]
public IconId GetIcon(InternalMode internalmode);
    [CanBeNullAttribute]
public OptionsPageDescriptor TryGetNext();
    [CanBeNullAttribute]
public OptionsPageDescriptor TryGetPrevious();
    internal void Sort();
    private void AppendChild(OptionsPageDescriptor descriptor);
    [CompilerGeneratedAttribute]
private static bool <get_Children>b__0(OptionsPageDescriptor descriptor);
    [CompilerGeneratedAttribute]
private static bool <get_InlineChildren>b__2(OptionsPageDescriptor descriptor);
    [CompilerGeneratedAttribute]
private static int <Sort>b__7(OptionsPageDescriptor x, OptionsPageDescriptor y);
}
public class JetBrains.Application.UI.Options.OptionsPageEntity : object {
    [CompilerGeneratedAttribute]
private OptionsPageAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PageType>k__BackingField;
    [NotNullAttribute]
public OptionsPageAttribute Attribute { get; private set; }
    [NotNullAttribute]
public Type PageType { get; private set; }
    public OptionsPageEntity(Type pageType, OptionsPageAttribute attribute);
    [CompilerGeneratedAttribute]
public OptionsPageAttribute get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(OptionsPageAttribute value);
    [CompilerGeneratedAttribute]
public Type get_PageType();
    [CompilerGeneratedAttribute]
private void set_PageType(Type value);
}
public class JetBrains.Application.UI.Options.OptionsPageKeyword : object {
    [CompilerGeneratedAttribute]
private string <Word>k__BackingField;
    public string Word { get; private set; }
    public OptionsPageKeyword(string word);
    [CompilerGeneratedAttribute]
public string get_Word();
    [CompilerGeneratedAttribute]
private void set_Word(string value);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Options.OptionsPageKeywords : object {
    public static OptionsPageKeywords EmptyInstance;
    [CompilerGeneratedAttribute]
private IEnumerable`1<OptionsPageKeyword> <Keywords>k__BackingField;
    public IEnumerable`1<OptionsPageKeyword> Keywords { get; private set; }
    public OptionsPageKeywords(IEnumerable`1<OptionsPageKeyword> keywords);
    private static OptionsPageKeywords();
    [CompilerGeneratedAttribute]
public IEnumerable`1<OptionsPageKeyword> get_Keywords();
    [CompilerGeneratedAttribute]
private void set_Keywords(IEnumerable`1<OptionsPageKeyword> value);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Options.OptionsPageViewFactoryManager : object {
    public ICollectionEvents`1<FactoryEntry> Factories;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    public OptionsPageViewFactoryManager(Lifetime lifetime, IShellLocks locks);
    [GuardAttribute("1")]
[NotNullAttribute]
public Func`2<Type, object> GetFactoryFunction(Lifetime lifetime, IDataContext dc, IEnumerable`1<object> injections);
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.Options.OptionsPageViewFactoryShell : object {
    private static double ourPriority;
    public OptionsPageViewFactoryShell(Lifetime lifetime, IComponentContainer containerParent, OptionsPageViewFactoryManager optionsPageViewFactoryManager);
}
public class JetBrains.Application.UI.Options.OptionsSectionDescriptor : OptionsPageDescriptor {
    public OptionsSectionDescriptor(OptionsPageEntity entity, OptionsPageDescriptor parent);
}
public class JetBrains.Application.UI.Options.OptionsSettingsSmartContext : object {
    [NotNullAttribute]
public IContextBoundSettingsStoreLive StoreOptionsTransactionContext;
    [NotNullAttribute]
public IContextBoundSettingsStoreLive StoreUnchangedSnapshotContext;
    public IEnumerable`1<ISettingsStorageMountPoint> InvolvedMountPoints { get; }
    public bool IsIgnoringReadonlyFlag { get; public set; }
    public ISettingsSchema Schema { get; }
    public ISettingsStore SettingsStore { get; }
    public ISignal`1<SettingsStoreChangeArgs> Changed { get; }
    private IListEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStoreLive.InvolvedMountPointsLive { get; }
    public OptionsSettingsSmartContext(IContextBoundSettingsStoreLive storeOptionsTransaction, IContextBoundSettingsStoreLive storeUnchangedSnapshot);
    public sealed virtual object GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual object GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public sealed virtual void RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual bool IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IEnumerable`1<ISettingsStorageMountPoint> get_InvolvedMountPoints();
    public sealed virtual bool get_IsIgnoringReadonlyFlag();
    public sealed virtual void set_IsIgnoringReadonlyFlag(bool value);
    public sealed virtual ISettingsSchema get_Schema();
    public sealed virtual ISettingsStore get_SettingsStore();
    public void CopyTo(IContextBoundSettingsStore target, ILogger logger);
    public sealed virtual IProperty`1<TValue> GetValueProperty(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual ISignal`1<SettingsStoreChangeArgs> get_Changed();
    private sealed virtual override SettingsStoreChangeArgs JetBrains.Application.Settings.IContextBoundSettingsStore.GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IDictionary`2<object, object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IEnumerable`1<object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
    private sealed virtual override Object[] JetBrains.Application.Settings.IContextBoundSettingsStore.GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IListEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IContextBoundSettingsStoreLive.get_InvolvedMountPointsLive();
}
[ObsoleteAttribute("Import OptionsSettingsSmartContext and use its SettingsStore property.")]
public class JetBrains.Application.UI.Options.OptionsSettingsStore : object {
    private ISettingsStore myUnderlying;
    public ISettingsSchema Schema { get; }
    public DataContexts DataContexts { get; }
    private SettingsStorageMountPoints JetBrains.Application.Settings.ISettingsStore.MountPoints { get; }
    private ISignal`1<SettingsStoreChangeArgs> JetBrains.Application.Settings.ISettingsChangedEventSource.Changed { get; }
    private ISettingsStorageTransactionContext JetBrains.Application.Settings.ISettingsStore.MountingPointsTransaction { get; }
    public OptionsSettingsStore(ISettingsStore underlying);
    public sealed virtual ISettingsSchema get_Schema();
    public sealed virtual DataContexts get_DataContexts();
    public sealed virtual IContextBoundSettingsStore BindToContext(IDataContext context);
    public sealed virtual IContextBoundSettingsStore BindToContexts(IDataContext contextNarrow, IDataContext contextWide);
    public sealed virtual ISettingsStoreInTransaction CreateNestedTransaction(Lifetime lifetime, string name);
    public sealed virtual IEnumerable`1<ISettingsStorageMountPoint> GetOrderedMountPointsInContext(IDataContext context);
    public sealed virtual IContextBoundSettingsStoreLive BindToContextLive(Lifetime lifetime, ContextRange contextrange, BindToContextFlags flags);
    public sealed virtual IContextBoundSettingsStore BindToContextTransient(ContextRange contextrange, BindToContextFlags flags);
    private sealed virtual override SettingsStorageMountPoints JetBrains.Application.Settings.ISettingsStore.get_MountPoints();
    private sealed virtual override IContextBoundSettingsStore JetBrains.Application.Settings.ISettingsStore.BindToMountPoints(IEnumerable`1<ISettingsStorageMountPoint> mounts, ISettingsStorageMountPoint mountLastInWideContext, BindToContextFlags flags);
    public sealed virtual IContextBoundSettingsStore BindToMountPointWithForcedDefaultValueWrites(ISettingsStorageMountPoint mount);
    private sealed virtual override IContextBoundSettingsStoreLive JetBrains.Application.Settings.ISettingsStore.BindToMountPoints(Lifetime lifetime, IListEvents`1<ISettingsStorageMountPoint> mounts, IProperty`1<ISettingsStorageMountPoint> mountLastInWideContext, BindToContextFlags flags);
    private sealed virtual override ISignal`1<SettingsStoreChangeArgs> JetBrains.Application.Settings.ISettingsChangedEventSource.get_Changed();
    private sealed virtual override ISettingsStorageTransactionContext JetBrains.Application.Settings.ISettingsStore.get_MountingPointsTransaction();
}
[ShellComponentAttribute("1", "1", "0")]
public class JetBrains.Application.UI.Options.SettingsLayersDialogOwner : object {
    public virtual void Show(WindowModality modality);
}
public abstract class JetBrains.Application.UI.Options.SettingsSchemaEntryInstance : SettingsSchemaInstance {
    [NotNullAttribute]
public SettingsEntry Entry;
    protected SettingsSchemaEntryInstance(SettingsEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaIndexedEntryInstance : SettingsSchemaEntryInstance {
    public SettingsIndexedEntry Entry;
    public object EntryIndex;
    public SettingsSchemaIndexedEntryInstance(SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaIndexedKeyInstance : SettingsSchemaKeyInstance {
    public SettingsIndexedKey Key;
    public SettingsSchemaIndexedKeyInstance(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
}
public abstract class JetBrains.Application.UI.Options.SettingsSchemaInstance : object {
    [CanBeNullAttribute]
public IDictionary`2<SettingsKey, object> KeyIndices;
    protected SettingsSchemaInstance(IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaKeyInstance : SettingsSchemaInstance {
    public SettingsKey Key;
    public SettingsSchemaKeyInstance(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaScalarEntryInstance : SettingsSchemaEntryInstance {
    public SettingsScalarEntry Entry;
    public SettingsSchemaScalarEntryInstance(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsStateIndicatorAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private IDependentSettings <Data>k__BackingField;
    [NotNullAttribute]
public IDependentSettings Data { get; private set; }
    public SettingsStateIndicatorAutomation(IDependentSettings data);
    [CompilerGeneratedAttribute]
public IDependentSettings get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(IDependentSettings value);
}
[ActionAttribute("&Manage Options…")]
public class JetBrains.Application.UI.Options.ShowSettingsLayersDialogAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.UI.Options.StaticOptionPagesList : object {
    public ICollectionEvents`1<OptionsPageEntity> PagesList;
    public StaticOptionPagesList(Lifetime lifetime);
    private sealed virtual override ICollection`1<OptionsPageEntity> JetBrains.Application.UI.Options.IOptionPagesList.GetOptionPages();
    private sealed virtual override void JetBrains.Application.UI.Options.IOptionPagesList.AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
}
public class JetBrains.Application.UI.Options.TagOptionsPageKeyword : OptionsPageKeyword {
    public TagOptionsPageKeyword(string word);
}
public class JetBrains.Application.UI.Options.TreeItemOptionsPageKeyword : OptionsPageKeyword {
    [CompilerGeneratedAttribute]
private OptionsPageKeyword <VislbleKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<HiddenOptionsPageKeyword> <HiddenOptionsPageKeywords>k__BackingField;
    [CompilerGeneratedAttribute]
private object <KeywordContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TreeItemOptionsPageKeyword> <Children>k__BackingField;
    public OptionsPageKeyword VislbleKeyword { get; private set; }
    public IEnumerable`1<HiddenOptionsPageKeyword> HiddenOptionsPageKeywords { get; private set; }
    public object KeywordContainer { get; public set; }
    public IEnumerable`1<TreeItemOptionsPageKeyword> Children { get; private set; }
    public TreeItemOptionsPageKeyword(OptionsPageKeyword vislbleKeyword, IEnumerable`1<TreeItemOptionsPageKeyword> children, IEnumerable`1<HiddenOptionsPageKeyword> hiddenOptionsPageKeywords, object keywordContainer);
    [CompilerGeneratedAttribute]
public OptionsPageKeyword get_VislbleKeyword();
    [CompilerGeneratedAttribute]
private void set_VislbleKeyword(OptionsPageKeyword value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<HiddenOptionsPageKeyword> get_HiddenOptionsPageKeywords();
    [CompilerGeneratedAttribute]
private void set_HiddenOptionsPageKeywords(IEnumerable`1<HiddenOptionsPageKeyword> value);
    [CompilerGeneratedAttribute]
public object get_KeywordContainer();
    [CompilerGeneratedAttribute]
public void set_KeywordContainer(object value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TreeItemOptionsPageKeyword> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IEnumerable`1<TreeItemOptionsPageKeyword> value);
}
public static class JetBrains.Application.UI.Options.TreeKeywordBuilder : object {
    public static IEnumerable`1<TreeItemOptionsPageKeyword> GetTreeKeywords(IEnumerable`1<T> items, Func`2<T, string> getVisibleTextFunc, Func`2<T, IEnumerable`1<T>> getChildrenFunc, Func`2<T, IEnumerable`1<string>> getHiddenTextsFunc);
    private static TreeItemOptionsPageKeyword GetTreeItemKeyword(T item, Func`2<T, string> getVisibleTextFunc, Func`2<T, IEnumerable`1<T>> getChildrenFunc, Func`2<T, IEnumerable`1<string>> getHiddenTextsFunc);
    public static IEnumerable`1<TreeItemOptionsPageKeyword> GetTreeKeywords(IEnumerable`1<TGroup> groups, Func`2<TGroup, string> getGroupVisibleTextFunc, Func`2<TItem, string> getItemVisibleTextFunc, Func`2<TGroup, IEnumerable`1<TItem>> getChildrenFunc, Func`2<TItem, IEnumerable`1<string>> getHiddenTextsFunc);
    private static TreeItemOptionsPageKeyword GetTreeItemKeyword(TGroup item, Func`2<TGroup, string> getGroupVisibleTextFunc, Func`2<TItem, string> getItemVisibleTextFunc, Func`2<TGroup, IEnumerable`1<TItem>> getChildrenFunc, Func`2<TItem, IEnumerable`1<string>> getHiddenTextsFunc);
}
public interface JetBrains.Application.UI.PersistableDocument.IPersistableView {
    public PersistableDocument Document { get; }
    public string ViewCaption { get; public set; }
    public WindowFrame WindowFrame { get; }
    public abstract virtual PersistableDocument get_Document();
    public abstract virtual string get_ViewCaption();
    public abstract virtual void set_ViewCaption(string value);
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual WindowFrame get_WindowFrame();
}
public class JetBrains.Application.UI.PersistableDocument.PersistableDocument : object {
    [NotNullAttribute]
public IProperty`1<IconId> Icon;
    [NotNullAttribute]
public IProperty`1<bool> IsDirty;
    [NotNullAttribute]
public string Moniker;
    [NotNullAttribute]
public ISimpleSignal SaveRequested;
    public PersistableDocument(string moniker);
}
public class JetBrains.Application.UI.PopupLayout.AnchoringRect : object {
    protected Lifetime myLifetime;
    private IProperty`1<Rect> myRectangle;
    public IProperty`1<Rect> Rectangle { get; }
    public AnchoringRect(Lifetime lifetime);
    public virtual string ToString();
    public sealed virtual IProperty`1<Rect> get_Rectangle();
}
public class JetBrains.Application.UI.PopupLayout.DockingLayouter : PopupLayouter {
    protected StickyDisposition myDispositions;
    protected int myPadding;
    protected bool mySuppressLayout;
    protected bool myUseStickyDispositions;
    [NotNullAttribute]
public IProperty`1<IAnchoringRect> Anchor;
    public ICollection`1<Anchoring2D> Dispositions { get; public set; }
    public int Padding { get; public set; }
    public bool UseStickyDispositions { get; public set; }
    public DockingLayouter(Lifetime lifetime, IAnchoringRect anchor);
    public DockingLayouter(Lifetime lifetime, IAnchoringRect anchor, ICollection`1<Anchoring2D> dispositions, int padding, bool stickydispositions);
    public ICollection`1<Anchoring2D> get_Dispositions();
    public void set_Dispositions(ICollection`1<Anchoring2D> value);
    public int get_Padding();
    public void set_Padding(int value);
    public bool get_UseStickyDispositions();
    public void set_UseStickyDispositions(bool value);
    public virtual Rectangle GetScreenBounds(Rectangle rectAnchor);
    protected virtual void UpdateLayout();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(PropertyChangedEventArgs`1<LayoutResult> args);
}
public enum JetBrains.Application.UI.PopupLayout.FormHideMethod : Enum {
    public int value__;
    public static FormHideMethod Visibility;
    public static FormHideMethod Closing;
    public static FormHideMethod FocusingAndClosing;
}
public interface JetBrains.Application.UI.PopupLayout.IAnchoringRect {
    public IProperty`1<Rect> Rectangle { get; }
    public abstract virtual IProperty`1<Rect> get_Rectangle();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.PopupLayout.IAnchoringRectEx : object {
    [ExtensionAttribute]
public static TransformedAnchoringRect Transform(IAnchoringRect anchor, Lifetime lifetime, Vector offset);
    [ExtensionAttribute]
public static TransformedAnchoringRect Transform(IAnchoringRect anchor, Lifetime lifetime, Vector offset, Anchoring2D collapseto);
    [ExtensionAttribute]
public static LastKnownGoodAnchoringRect KeepLastKnownGoodRect(IAnchoringRect anchor, Lifetime lifetime, Func`2<Rect, bool> predicate);
}
public interface JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext {
    [NotNullAttribute]
public PopupWindowContextSource Source { get; }
    public abstract virtual PopupWindowContextSource get_Source();
    [NotNullAttribute]
public abstract virtual IPopupWindowContext Create(Lifetime lifetime);
    public abstract virtual IPopupWindowContext CreateCentered(Lifetime lifetime);
}
public interface JetBrains.Application.UI.PopupLayout.IPopupLayouter {
    public IProperty`1<LayoutResult> Layout { get; }
    public IProperty`1<Size> Size { get; }
    public abstract virtual IProperty`1<LayoutResult> get_Layout();
    public abstract virtual IProperty`1<Size> get_Size();
}
public interface JetBrains.Application.UI.PopupLayout.IPopupWindow {
    public IPopupWindowContext Context { get; }
    public FormHideMethod HideMethod { get; public set; }
    public bool IsDisposed { get; }
    public PopupWindowLayoutMode LayoutMode { get; public set; }
    [NotNullAttribute]
public PopupWindowMutex Mutex { get; }
    public bool Visible { get; }
    public abstract virtual IPopupWindowContext get_Context();
    public abstract virtual FormHideMethod get_HideMethod();
    public abstract virtual void set_HideMethod(FormHideMethod value);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual PopupWindowLayoutMode get_LayoutMode();
    public abstract virtual void set_LayoutMode(PopupWindowLayoutMode value);
    public abstract virtual PopupWindowMutex get_Mutex();
    public abstract virtual bool get_Visible();
    public abstract virtual void HideWindow();
    public abstract virtual bool ShowWindow();
    public abstract virtual void add_Closed(EventHandler value);
    public abstract virtual void remove_Closed(EventHandler value);
}
public interface JetBrains.Application.UI.PopupLayout.IPopupWindowContext {
    [NotNullAttribute]
public abstract virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    public abstract virtual void FireAnyOtherAction();
    public abstract virtual void FireDeactivated();
    public abstract virtual void FireScroll();
    public abstract virtual void FireSelectionChanged();
    public abstract virtual void add_AnyOtherAction(EventHandler value);
    public abstract virtual void remove_AnyOtherAction(EventHandler value);
    public abstract virtual void add_Deactivated(EventHandler value);
    public abstract virtual void remove_Deactivated(EventHandler value);
    public abstract virtual void add_EscapePressed(EventHandler value);
    public abstract virtual void remove_EscapePressed(EventHandler value);
    public abstract virtual void add_Scroll(EventHandler value);
    public abstract virtual void remove_Scroll(EventHandler value);
    public abstract virtual void add_SelectionChanged(EventHandler value);
    public abstract virtual void remove_SelectionChanged(EventHandler value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.PopupLayout.IPopupWindowContextEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IPopupWindowContext OverrideLayouter(IPopupWindowContext thіs, Lifetime lifetime, Func`2<Lifetime, IPopupLayouter> FCreateLayouter);
    [NotNullAttribute]
[ExtensionAttribute]
public static PopupWindowContextSource OverrideLayouter(PopupWindowContextSource thіs, Func`2<Lifetime, IPopupLayouter> FCreateLayouter);
}
public class JetBrains.Application.UI.PopupLayout.LastKnownGoodAnchoringRect : AnchoringRect {
    public LastKnownGoodAnchoringRect(Lifetime lifetime, IAnchoringRect underlyingRect, Func`2<Rect, bool> predicate);
}
public class JetBrains.Application.UI.PopupLayout.LayoutResult : ValueType {
    public static LayoutResult Empty;
    public Rectangle AnchoringRect;
    public Rectangle Bounds;
    public Anchoring2D Disposition;
    public Rectangle Room;
    public Point Location { get; }
    public Size Size { get; }
    public LayoutResult(Rectangle room, Rectangle bounds, Rectangle anchor, Anchoring2D disposition);
    public Point get_Location();
    public Size get_Size();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(LayoutResult α, LayoutResult β);
    public static bool op_Inequality(LayoutResult ξ, LayoutResult η);
}
public class JetBrains.Application.UI.PopupLayout.LazyPopupWindowContextUnused : object {
    private Func`1<IPopupWindowContext> myFactory;
    private IPopupWindowContext myPopupWindowContext;
    public LazyPopupWindowContextUnused(Func`1<IPopupWindowContext> factory);
    public sealed virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireAnyOtherAction();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireDeactivated();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireScroll();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireSelectionChanged();
    public sealed virtual void add_AnyOtherAction(EventHandler value);
    public sealed virtual void remove_AnyOtherAction(EventHandler value);
    public sealed virtual void add_Deactivated(EventHandler value);
    public sealed virtual void remove_Deactivated(EventHandler value);
    public sealed virtual void add_EscapePressed(EventHandler value);
    public sealed virtual void remove_EscapePressed(EventHandler value);
    public sealed virtual void add_Scroll(EventHandler value);
    public sealed virtual void remove_Scroll(EventHandler value);
    public sealed virtual void add_SelectionChanged(EventHandler value);
    public sealed virtual void remove_SelectionChanged(EventHandler value);
    private void EnsureWindowContext();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Dispose();
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.UI.PopupLayout.MainWindowPopupWindowContext : object {
    private PopupWindowContextSource mySource;
    [CompilerGeneratedAttribute]
private static Func`2<Lifetime, IPopupWindowContext> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Lifetime, IPopupLayouter> CS$<>9__CachedAnonymousMethodDelegate3;
    private PopupWindowContextSource JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext.Source { get; }
    private sealed virtual override PopupWindowContextSource JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext.get_Source();
    protected virtual PopupWindowContextSource GetSourceCore();
    private sealed virtual override IPopupWindowContext JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext.Create(Lifetime lifetime);
    protected virtual IPopupWindowContext CreateCore(Lifetime lifetime);
    private sealed virtual override IPopupWindowContext JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext.CreateCentered(Lifetime lifetime);
    protected virtual IPopupWindowContext CreateCenteredCore(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static IPopupWindowContext <.ctor>b__0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static IPopupLayouter <.ctor>b__1(Lifetime llay);
}
public class JetBrains.Application.UI.PopupLayout.MousePositionPopupWindowContext : PopupWindowContext {
    public MousePositionPopupWindowContext(Lifetime lifetime);
    public virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
}
public class JetBrains.Application.UI.PopupLayout.NestedAnchoringRect : AnchoringRect {
    public IProperty`1<IAnchoringRect> Nested;
    public IProperty`1<IAnchoringRect> Outer;
    public NestedAnchoringRect(Lifetime lifetime, IAnchoringRect nested, IAnchoringRect outer);
    public NestedAnchoringRect(Lifetime lifetime);
    private void UpdateAnchor();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(IProperty`1<IAnchoringRect> entity);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Lifetime lifetimeAnchor, IAnchoringRect anchor);
}
public class JetBrains.Application.UI.PopupLayout.PopupLayouter : object {
    protected Lifetime myLifetime;
    private Property`1<LayoutResult> myLayout;
    private Property`1<Size> mySize;
    public IProperty`1<LayoutResult> Layout { get; }
    public IProperty`1<Size> Size { get; }
    public PopupLayouter(Lifetime lifetime);
    public sealed virtual IProperty`1<LayoutResult> get_Layout();
    public sealed virtual IProperty`1<Size> get_Size();
}
public abstract class JetBrains.Application.UI.PopupLayout.PopupWindowContext : UserDataHolder {
    private static Statistics Statistics;
    private PopupWindowContextSpecificEscapeActionHandler myEscapeActionHandler;
    private EventHandler myDelegateEscapePressed;
    protected Lifetime myLifetime;
    private SequentialLifetimes myEscapeHandlerLifetimesSequence;
    [CanBeNullAttribute]
private IActionManager myActionManager;
    private EventHandler AnyOtherAction;
    private EventHandler Deactivated;
    private EventHandler Scroll;
    private EventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate3;
    protected PopupWindowContext(Lifetime lifetime, IActionManager actionManager);
    private static PopupWindowContext();
    public sealed virtual void add_AnyOtherAction(EventHandler value);
    public sealed virtual void remove_AnyOtherAction(EventHandler value);
    public sealed virtual void add_Deactivated(EventHandler value);
    public sealed virtual void remove_Deactivated(EventHandler value);
    public virtual void add_EscapePressed(EventHandler value);
    public virtual void remove_EscapePressed(EventHandler value);
    public sealed virtual void add_Scroll(EventHandler value);
    public sealed virtual void remove_Scroll(EventHandler value);
    public sealed virtual void add_SelectionChanged(EventHandler value);
    public sealed virtual void remove_SelectionChanged(EventHandler value);
    public abstract virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    public sealed virtual void FireAnyOtherAction();
    public sealed virtual void FireDeactivated();
    public sealed virtual void FireScroll();
    public sealed virtual void FireSelectionChanged();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.PopupLayout.PopupWindowContextFromDataContextEx : object {
    private static object ourMarker;
    private static Key`1<object> ourKeyMarker;
    private static PopupWindowContextFromDataContextEx();
    [ExtensionAttribute]
public static IPopupWindowContext MarkAsOriginatedFromDataContext(IPopupWindowContext that);
    [ExtensionAttribute]
public static bool IsOriginatedFromDataContext(IPopupWindowContext that);
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowContextSource : object {
    [NotNullAttribute]
private Func`2<Lifetime, IPopupWindowContext> myFCreate;
    public PopupWindowContextSource(Func`2<Lifetime, IPopupWindowContext> FCreate);
    [NotNullAttribute]
public IPopupWindowContext Create(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private object <Create>b__0();
    [CompilerGeneratedAttribute]
private object <Create>b__1();
    [CompilerGeneratedAttribute]
private object <Create>b__2();
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowContextSpecificEscapeActionHandler : EscapeActionHandlerBase {
    private EventHandler myEscapeHandler;
    private IPopupWindowContext myPopupWindowContext;
    public PopupWindowContextSpecificEscapeActionHandler(IPopupWindowContext popupWindowContext, EventHandler escapeHandler, IActionManager actionManager);
    protected virtual void Execute(IDataContext dataContext);
    protected virtual bool IsAvailable(IDataContext dataContext);
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowContextWithAnotherLayouter : object {
    private Lifetime myLifetime;
    private IPopupWindowContext myOriginal;
    private Func`2<Lifetime, IPopupLayouter> myFCreateLayouter;
    public PopupWindowContextWithAnotherLayouter(Lifetime lifetime, IPopupWindowContext original, Func`2<Lifetime, IPopupLayouter> FCreateLayouter);
    private sealed virtual override IPopupLayouter JetBrains.Application.UI.PopupLayout.IPopupWindowContext.CreateLayouter(Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireAnyOtherAction();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireDeactivated();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireScroll();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireSelectionChanged();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_AnyOtherAction(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_AnyOtherAction(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_Deactivated(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_Deactivated(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_EscapePressed(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_EscapePressed(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_Scroll(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_Scroll(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_SelectionChanged(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_SelectionChanged(EventHandler value);
}
public enum JetBrains.Application.UI.PopupLayout.PopupWindowLayoutMode : Enum {
    public int value__;
    public static PopupWindowLayoutMode None;
    public static PopupWindowLayoutMode Full;
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowMutex : object {
    [CompilerGeneratedAttribute]
private static Action`1<IPopupWindow> CS$<>9__CachedAnonymousMethodDelegate2;
    public virtual void WindowAdded(IPopupWindow window, IEnumerable`1<IPopupWindow> arSameMutexWindows, ICollectionEvents`1<IPopupWindow> arAllWindows);
    public virtual void WindowRemoved(IPopupWindow window, IEnumerable`1<IPopupWindow> arSameMutexWindows, ICollectionEvents`1<IPopupWindow> arAllWindows);
    [CompilerGeneratedAttribute]
private static void <WindowAdded>b__1(IPopupWindow other);
}
public class JetBrains.Application.UI.PopupLayout.RectangleDocker : ValueType {
    private ICollection`1<Anchoring2D> myAllowedDispositions;
    private Rectangle myAnchoringRect;
    private Anchoring2D myCandidateDisposition;
    private int myCandidateRatio;
    private Rectangle myCandidateRect;
    private Rectangle myCandidateRoom;
    private int myPadding;
    private Rectangle myScreen;
    private Size mySize;
    public ICollection`1<Anchoring2D> AllowedDispositions { get; }
    public Rectangle AnchoringRect { get; }
    public Anchoring2D CandidateDisposition { get; }
    public int CandidateRatio { get; }
    public Rectangle CandidateRect { get; }
    public Rectangle CandidateRoom { get; }
    public int Padding { get; }
    public LayoutResult Result { get; }
    public Rectangle Screen { get; }
    public Size Size { get; }
    public RectangleDocker(Rectangle rectAnchor, Size size, ICollection`1<Anchoring2D> dispositionsAllowed, Rectangle screen);
    public RectangleDocker(Rectangle rectAnchor, Size size, ICollection`1<Anchoring2D> dispositionsAllowed, Rectangle screen, int padding);
    public ICollection`1<Anchoring2D> get_AllowedDispositions();
    public Rectangle get_AnchoringRect();
    public Anchoring2D get_CandidateDisposition();
    public int get_CandidateRatio();
    public Rectangle get_CandidateRect();
    public Rectangle get_CandidateRoom();
    public int get_Padding();
    public LayoutResult get_Result();
    public Rectangle get_Screen();
    public Size get_Size();
    private void Attach();
    private bool AttachRect(Rectangle rectAnchor, Anchoring2D disposition);
    private bool AttachRectInside(Rectangle rectAnchorPadded, Anchoring2D disposition);
    private bool AttachRectMiddle(Anchoring2D disposition, Rectangle rectAnchor);
    private bool AttachRectOutside(Rectangle rectAnchorPadded, Anchoring2D dispositionAttachment, Anchoring2D dispositionOriginal);
    private void CenterHorizontally(Point ptCenter, Rectangle& rectCandidate);
    private void CenterVertically(Point ptCenter, Rectangle& rectCandidate);
    private bool CheckCandidate(Rectangle& rectCandidate, Rectangle rectRoom, Anchoring2D disposition);
}
public class JetBrains.Application.UI.PopupLayout.SimplePopupWindowContext : PopupWindowContext {
    private Func`2<Lifetime, IPopupLayouter> myFactory;
    public SimplePopupWindowContext(Lifetime lifetime, Func`2<Lifetime, IPopupLayouter> factory);
    public virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
}
public class JetBrains.Application.UI.PopupLayout.StaticAnchoringRect : AnchoringRect {
    public StaticAnchoringRect(Lifetime lifetime, Point location);
    public StaticAnchoringRect(Lifetime lifetime, Rect anchor);
    public static StaticAnchoringRect FromCurrentMousePosition(Lifetime lifetime);
    public static StaticAnchoringRect FromCurrentMousePosition(Lifetime lifetime, Size offset);
    public static Rect GetCurrentMousePositionRect(Size offset);
}
public class JetBrains.Application.UI.PopupLayout.StickyDisposition : object {
    protected List`1<Anchoring2D> myDispositions;
    public ICollection`1<Anchoring2D> Dispositions { get; public set; }
    public StickyDisposition(ICollection`1<Anchoring2D> dispositions);
    public ICollection`1<Anchoring2D> get_Dispositions();
    public void set_Dispositions(ICollection`1<Anchoring2D> value);
    public void Promote(Anchoring2D disposition);
    public virtual string ToString();
}
public class JetBrains.Application.UI.PopupLayout.TransformedAnchoringRect : AnchoringRect {
    public Anchoring2D CollapseTo;
    public Vector Offset;
    [NotNullAttribute]
public IAnchoringRect UnderlyingAnchor;
    public TransformedAnchoringRect(Lifetime lifetime, IAnchoringRect underlying, Vector offset, Anchoring2D collapseto);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected void UpdateAnchor();
}
public class JetBrains.Application.UI.PopupLayout.UndisposableAnchoringRect : AnchoringRect {
    public UndisposableAnchoringRect(Lifetime lifetime, IAnchoringRect undisposable);
}
public enum JetBrains.Application.UI.Progress.TaskThreadAffinity : Enum {
    public int value__;
    public static TaskThreadAffinity Primary;
    public static TaskThreadAffinity Free;
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.UI.Progress.UITaskExecutor : object {
    private Lazy`1<UITaskExecutorSwitchingImplementation> mySwitchingImplementation;
    [NotNullAttribute]
public ITaskExecutor FreeThreaded { get; }
    [NotNullAttribute]
public ICollectionEvents`1<RunningTaskExecutor> RunningTaskExecutors { get; }
    [NotNullAttribute]
public ITaskExecutor SingleThreaded { get; }
    public UITaskExecutor(Lazy`1<UITaskExecutorSwitchingImplementation> switchingImplementation);
    public ITaskExecutor get_FreeThreaded();
    public ICollectionEvents`1<RunningTaskExecutor> get_RunningTaskExecutors();
    public ITaskExecutor get_SingleThreaded();
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.UI.Progress.UITaskExecutorSwitchingImplementation : object {
    [NotNullAttribute]
protected TaskExecutorNotification myTaskExecutorNotification;
    [NotNullAttribute]
public ICollectionEvents`1<RunningTaskExecutor> RunningTaskExecutors;
    public UITaskExecutorSwitchingImplementation(IThreading invocator);
    public virtual ITaskExecutor CreateExecutor(TaskThreadAffinity threading, IWin32Window mainWindow);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lifetime, RunningTaskExecutor session);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Progress.WorkerThreadShop : object {
    private ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
    private CollectionEvents`1<JetDispatcher> myThreads;
    [CompilerGeneratedAttribute]
private static Action`1<AddRemoveEventArgs`1<JetDispatcher>> CS$<>9__CachedAnonymousMethodDelegate1;
    [NotNullAttribute]
public JetDispatcher Create(Lifetime lifetime, string name);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(AddRemoveEventArgs`1<JetDispatcher> args);
}
public class JetBrains.Application.UI.Settings.AnchorSettingsLayerDataConstant : object {
    [NotNullAttribute]
public Identity Value;
    public static DataConstant`1<AnchorSettingsLayerDataConstant> DataConstant;
    public AnchorSettingsLayerDataConstant(Identity value);
    private static AnchorSettingsLayerDataConstant();
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Settings.DataConstants : object {
    public static DataConstant`1<Identity> SingleSelectedUserFriendlySettingsLayer;
    public static DataConstant`1<UserInjectedSettingsLayer> SingleSelectedUserInjectedSettingsLayer;
    public static DataConstant`1<IList`1<Identity>> SelectedUserFriendlySettingsLayers;
    public static DataConstant`1<UserInjectedLayersHostData> InjectedLayersHost_IncludingHostItself;
    public static DataConstant`1<UserInjectedLayersHostData> InjectedLayersHost_ExcludeHostItself;
    public static DataConstant`1<Lifetime> ManageLayersDialogLifetime;
    [CompilerGeneratedAttribute]
private static Func`2<IDataContext, Identity> CS$<>9__CachedAnonymousMethodDelegate4;
    public DataConstants(Lifetime lifetime, DataContexts dcs, UserInjectedSettingsLayers injections);
    private static DataConstants();
    [CompilerGeneratedAttribute]
private static Identity <.ctor>b__0(IDataContext dc);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.LayoutSettings", "MRU positions and sizes of application windows.")]
public class JetBrains.Application.UI.Settings.DialogWindowsSettings : object {
}
public class JetBrains.Application.UI.Settings.ImportExport.Automation.SourceSelectionAutomation : object {
    public IProperty`1<int> SelectedSourceIndex;
    public StoreMode Store;
    public MountingPointMode MountingPoint;
    public FileStorageMode FileStorage;
    public AllModesCommon Common;
    [CompilerGeneratedAttribute]
private static Func`2<SourceKind, int> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<int, SourceKind> CS$<>9__CachedAnonymousMethodDelegate3;
    public SourceSelectionAutomation(Lifetime lifetime, SettingsSourceModel model, bool isForWriting);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__0(SourceKind kind);
    [CompilerGeneratedAttribute]
private static SourceKind <.ctor>b__1(int n);
}
public class JetBrains.Application.UI.Settings.ImportExport.Model.ImportExportRun : object {
    public static void Run(SettingsSourceModel from, SettingsSourceModel to, IExceptionThrowingLogger logger, InternKeyPathComponent interned, Action`1<ISettingsStorageMountPoint> FFilter);
}
public class JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel : object {
    public IProperty`1<SourceKind> SelectedSource;
    public StoreMode Store;
    public MountingPointMode MountingPoint;
    public FileStorageMode FileStorage;
    public AllModesCommon Common;
    public ISettingsStore SettingsStore;
    public SettingsSourceModel(Lifetime lifetime, ISettingsStore store, WebProxySettingsReader webProxySettingsReader, InternKeyPathComponent interned);
    public void ReadFromSelectedSource(ISettingsStorageMountPoint mountReadInto, IExceptionThrowingLogger logger);
    public void WriteToSelectedSource(ISettingsStorageMountPoint mountWriteFrom, IExceptionThrowingLogger logger);
    [CompilerGeneratedAttribute]
private object <ReadFromSelectedSource>b__0();
    [CompilerGeneratedAttribute]
private object <WriteToSelectedSource>b__2();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "Layout of the customized user interface.")]
public class JetBrains.Application.UI.Settings.LayoutSettings : object {
}
[ShellComponentAttribute("4", "0", "0")]
public class JetBrains.Application.UI.StdApplicationUI.StatusBar.MemoryUsageIndicatorBase : object {
    [NotNullAttribute]
[GuardAttribute("-1")]
public ISimpleSignal GarbageCollectionRequested;
    public MemoryUsageIndicatorBase(Lifetime lifetime);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "Memory usage indicator (in the status bar).")]
public class JetBrains.Application.UI.StdApplicationUI.StatusBar.MemoryUsageIndicatorSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether to show the Memory Usage Indicator in the status bar of the application main window.")]
public bool IsVisible;
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.StdApplicationUI.StatusBar.SubclassedStatusBar : object {
    public ISimpleSignal UpdateStatusBarRequested;
    public SubclassedStatusBar(Lifetime lifetime);
}
public interface JetBrains.Application.UI.Theming.IApplicationThemingConfig {
    public IProperty`1<bool> UseMainWindowChrome { get; }
    public IProperty`1<Theme> CurrentTheme { get; }
    public IProperty`1<bool> SyncToVsTheme { get; }
    public abstract virtual IProperty`1<bool> get_UseMainWindowChrome();
    public abstract virtual IProperty`1<Theme> get_CurrentTheme();
    public abstract virtual IProperty`1<bool> get_SyncToVsTheme();
}
public enum JetBrains.Application.UI.Theming.Theme : Enum {
    public int value__;
    public static Theme Default;
    public static Theme Dark;
    public static Theme Light;
}
public interface JetBrains.Application.UI.Tooltips.ITooltipInfo {
    [CanBeNullAttribute]
public IPopupLayouter Layouter { get; }
    [NotNullAttribute]
public IWindowlessControl Painter { get; }
    [CanBeNullAttribute]
public IPopupWindowContext PopupWindowContext { get; }
    public abstract virtual IPopupLayouter get_Layouter();
    public abstract virtual IWindowlessControl get_Painter();
    public abstract virtual IPopupWindowContext get_PopupWindowContext();
    public abstract virtual bool HitTestToolArea(Point pt);
}
public interface JetBrains.Application.UI.Tooltips.ITooltipManager {
    public Size ContentMargin { get; }
    public TimeSpan HoverDelay { get; }
    [NotNullAttribute]
public PopupWindowMutex PopupWindowMutex { get; }
    [NotNullAttribute]
public RenderParams RenderParams { get; }
    [ObsoleteAttribute("why is this here?")]
public IUIApplication Environment { get; }
    public abstract virtual Size get_ContentMargin();
    public abstract virtual TimeSpan get_HoverDelay();
    public abstract virtual PopupWindowMutex get_PopupWindowMutex();
    public abstract virtual RenderParams get_RenderParams();
    public abstract virtual IUIApplication get_Environment();
    [CanBeNullAttribute]
public abstract virtual IPopupWindow Show(LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context, HideFlags hideflags, TimeSpan timeout);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Tooltips.ITooltipManagerEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPopupWindow Show(ITooltipManager manager, LifetimeDefinition lifetimeDefinition, string text, IPopupWindowContext context);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IPopupWindow Show(ITooltipManager manager, LifetimeDefinition lifetimeDefinition, RichText text, IPopupWindowContext context);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPopupWindow Show(ITooltipManager manager, LifetimeDefinition lifetimeDefinition, RichTextBlock text, IPopupWindowContext context, TimeSpan timeout);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IPopupWindow Show(ITooltipManager manager, string text, Func`2<Lifetime, IPopupWindowContext> FGetContext);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPopupWindow Show(ITooltipManager manager, RichText text, Func`2<Lifetime, IPopupWindowContext> FGetContext);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPopupWindow Show(ITooltipManager manager, RichTextBlock text, Func`2<Lifetime, IPopupWindowContext> FGetContext);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IPopupWindow Show(ITooltipManager manager, string text, PopupWindowContextSource contextsource);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IPopupWindow Show(ITooltipManager manager, RichText text, PopupWindowContextSource contextsource);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IPopupWindow Show(ITooltipManager manager, RichTextBlock text, PopupWindowContextSource contextsource);
    [ExtensionAttribute]
public static bool ShowIfPopupWindowContext(ITooltipManager tooltipman, string message, IDataContext context);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IPopupWindow Show(ITooltipManager manager, LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPopupWindow Show(ITooltipManager manager, IAutomation automation, PopupWindowContextSource contextsource);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IPopupWindow Show(ITooltipManager manager, IAutomation painter, Func`2<Lifetime, IPopupWindowContext> FGetContext);
}
public interface JetBrains.Application.UI.Tooltips.ITooltipProvider {
    [CanBeNullAttribute]
public abstract virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
}
public static class JetBrains.Application.UI.Tooltips.TooltipConfig : object {
    public static TimeSpan myDefaultTimeout;
    public static HideFlags HideFlagsDefault;
    public static TimeSpan DefaultTimeout { get; }
    private static TooltipConfig();
    public static TimeSpan get_DefaultTimeout();
    public static bool GetCanShowTooltips(IIsApplicationActiveState isApplicationActiveState);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.Application.UI.Tooltips.TooltipManagerComponent : object {
    private IUIApplication myUiapp;
    protected static PopupWindowMutex myPopupWindowMutex;
    private Size JetBrains.Application.UI.Tooltips.ITooltipManager.ContentMargin { get; }
    private TimeSpan JetBrains.Application.UI.Tooltips.ITooltipManager.HoverDelay { get; }
    private PopupWindowMutex JetBrains.Application.UI.Tooltips.ITooltipManager.PopupWindowMutex { get; }
    private RenderParams JetBrains.Application.UI.Tooltips.ITooltipManager.RenderParams { get; }
    private IUIApplication JetBrains.Application.UI.Tooltips.ITooltipManager.Environment { get; }
    public TooltipManagerComponent(IUIApplication uiapp);
    private static TooltipManagerComponent();
    private sealed virtual override IPopupWindow JetBrains.Application.UI.Tooltips.ITooltipManager.Show(LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context, HideFlags hideflags, TimeSpan timeout);
    protected virtual IPopupWindow ShowCore(LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context, HideFlags hideflags, TimeSpan timeout);
    private sealed virtual override Size JetBrains.Application.UI.Tooltips.ITooltipManager.get_ContentMargin();
    protected virtual Size GetContentMarginCore();
    private sealed virtual override TimeSpan JetBrains.Application.UI.Tooltips.ITooltipManager.get_HoverDelay();
    private sealed virtual override PopupWindowMutex JetBrains.Application.UI.Tooltips.ITooltipManager.get_PopupWindowMutex();
    private sealed virtual override RenderParams JetBrains.Application.UI.Tooltips.ITooltipManager.get_RenderParams();
    protected virtual RenderParams GetRenderParamsCore();
    private sealed virtual override IUIApplication JetBrains.Application.UI.Tooltips.ITooltipManager.get_Environment();
}
public class JetBrains.Application.UI.ToolWindowManagement.ActivateToolWindowActionHandler`1 : object {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[InternalActionAttribute]
[ActionAttribute("Dump tool windows state")]
public class JetBrains.Application.UI.ToolWindowManagement.DumpToolWindowStateActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.UI.ToolWindowManagement.FactorToolWindowContent : object {
    private IComponentContainer myContainerShell;
    private DataContexts myDatacontexts;
    public FactorToolWindowContent(IComponentContainer containerShell, DataContexts datacontexts);
    [NotNullAttribute]
public TAutomation FactorEmptyContent(Lifetime lifetime);
    [NotNullAttribute]
public TAutomation FactorInstanceContent(Lifetime lifetime, ToolWindowInstance twi);
    [NotNullAttribute]
private TAutomation FactorCore(Lifetime lifetime, ToolWindowInstance twi);
    [CompilerGeneratedAttribute]
private ComponentContainerForFactoring <FactorCore>b__0(Lifetime lifeDc);
}
public class JetBrains.Application.UI.ToolWindowManagement.QueryCloseInstancesArgs : object {
    public List`1<ToolWindowInstance> InstancesToClose;
    public bool Cancel;
}
[DebuggerDisplayAttribute("Descriptor:{Descriptor}")]
public class JetBrains.Application.UI.ToolWindowManagement.SingleInstanceToolWindowClass : ToolWindowClass {
    private ToolWindowInstanceInfo mySingleInstance;
    public ToolWindowInstance[] Instances { get; }
    public SingleInstanceToolWindowClass(Lifetime lifetime, ToolWindowDescriptor descriptor, TopLevelToolWindowFrameFactory toolWindowFrameFactory, IUIApplication environment, Lazy`1<FactorToolWindowContent> contentfactory);
    public virtual ToolWindowInstance[] get_Instances();
    public virtual ToolWindowInstance RegisterInstance(Lifetime lifetime, string title, IconId icon, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    protected virtual void AdjustToplevelFrameContent();
    internal virtual void CloseInstance(ToolWindowInstance instance);
    internal virtual void ShowInstance(ToolWindowInstance instance, bool activate);
    internal virtual void EnsureControlCreated(ToolWindowInstance toolWindowInstance);
    internal virtual void UpdateInstanceContentFactory(ToolWindowInstance instance, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    public virtual void DumpState(IndentedTextWriter tw);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11();
    [CompilerGeneratedAttribute]
private string <RegisterInstance>b__14(string instanceTitle);
    [CompilerGeneratedAttribute]
private void <RegisterInstance>b__17();
}
public class JetBrains.Application.UI.ToolWindowManagement.TabbedToolWindowClass : ToolWindowClass {
    private ICollectionEvents`1<ToolWindowInstanceInfo> myInstances;
    private TabbedToolWindowTabStripAutomation myTabStrip;
    private SequentialLifetimes myTopLevelContentLifetime;
    private ToolWindowContent myTopLevelContent;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstanceInfo, ToolWindowInstance> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstanceInfo, TabStripPageFrame> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstanceInfo, ToolWindowInstance> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstanceInfo, bool> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstanceInfo, ToolWindowInstance> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstance, bool> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstance, bool> CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static Func`2<ToolWindowInstance, bool> CS$<>9__CachedAnonymousMethodDelegate3a;
    public ToolWindowInstance[] Instances { get; }
    public TabbedToolWindowClass(Lifetime lifetime, ToolWindowDescriptor descriptor, TabbedToolWindowOptions options, TopLevelToolWindowFrameFactory toolWindowFrameFactory, TabRenamePrompt tabRenamePrompt, IActionBarManager actionBarManager, IUIApplication environment, Lazy`1<FactorToolWindowContent> contentfactory);
    private void InitTabRename(Lifetime lifetime, TabRenamePrompt tabRenamePrompt);
    private void CloseInstance(ToolWindowInstanceInfo twi);
    public virtual ToolWindowInstance[] get_Instances();
    public TabStripPageFrame GetFrame(ToolWindowInstance instance);
    public ToolWindowInstance[] GetTabInstanceSequence();
    public virtual ToolWindowInstance RegisterInstance(Lifetime parentLifetime, string title, IconId icon, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    private ToolWindowInstance[] QueryClose(ToolWindowInstance[] instances);
    protected virtual void AdjustToplevelFrameContent();
    private ToolWindowContent EnsureTopLevelContent();
    internal virtual void CloseInstance(ToolWindowInstance instance);
    internal virtual void ShowInstance(ToolWindowInstance instance, bool activate);
    internal virtual void EnsureControlCreated(ToolWindowInstance instance);
    internal virtual void UpdateInstanceContentFactory(ToolWindowInstance instance, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    public virtual void DumpState(IndentedTextWriter tw);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lt, TabStripOpenTabMode mode);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object o, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(object sender, TabStripClosingEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(TabStripItem x);
    [CompilerGeneratedAttribute]
private ToolWindowInstance <.ctor>b__4(TabStripItem item);
    [CompilerGeneratedAttribute]
private static ToolWindowInstance <get_Instances>b__1f(ToolWindowInstanceInfo x);
    [CompilerGeneratedAttribute]
private static TabStripPageFrame <GetFrame>b__22(ToolWindowInstanceInfo twi);
    [CompilerGeneratedAttribute]
private int <GetTabInstanceSequence>b__26(ToolWindowInstanceInfo a);
    [CompilerGeneratedAttribute]
private static ToolWindowInstance <GetTabInstanceSequence>b__27(ToolWindowInstanceInfo b);
    [CompilerGeneratedAttribute]
private string <RegisterInstance>b__2a(string instanceTitle);
    [CompilerGeneratedAttribute]
private void <RegisterInstance>b__2b();
    [CompilerGeneratedAttribute]
private static bool <RegisterInstance>b__2c(ToolWindowInstanceInfo x);
    [CompilerGeneratedAttribute]
private static ToolWindowInstance <RegisterInstance>b__2d(ToolWindowInstanceInfo x);
    [CompilerGeneratedAttribute]
private static bool <QueryClose>b__35(ToolWindowInstance x);
    [CompilerGeneratedAttribute]
private static bool <QueryClose>b__36(ToolWindowInstance x);
    [CompilerGeneratedAttribute]
private static bool <QueryClose>b__37(ToolWindowInstance x);
    [CompilerGeneratedAttribute]
private void <EnsureTopLevelContent>b__3b(LifetimeDefinition definition, Lifetime lifetime);
    [CompilerGeneratedAttribute]
private IAutomation <EnsureTopLevelContent>b__3c(Lifetime controlLifetime, ToolWindowFrameBase frame);
    [CompilerGeneratedAttribute]
private string <EnsureTopLevelContent>b__3d(ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private void <EnsureTopLevelContent>b__3e();
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.Application.UI.ToolWindowManagement.TabbedToolWindowOptions : object {
    [CompilerGeneratedAttribute]
private IProperty`1<TabStripOpenTabMode> <OpenTabBehaviour>k__BackingField;
    public IProperty`1<TabStripOpenTabMode> OpenTabBehaviour { get; protected set; }
    public TabbedToolWindowOptions(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<TabStripOpenTabMode> get_OpenTabBehaviour();
    [CompilerGeneratedAttribute]
protected void set_OpenTabBehaviour(IProperty`1<TabStripOpenTabMode> value);
}
public class JetBrains.Application.UI.ToolWindowManagement.TabRenamePrompt : object {
    public virtual string Prompt(string sourcename, string instanceName, String[] otherInstancesNames);
}
public class JetBrains.Application.UI.ToolWindowManagement.TabStripPageFrame : ToolWindowFrameBase {
    private ToolWindowFrameBase myTopLevelFrame;
    private TabStripItem myTabItem;
    private ToolWindowInstance myToolWindowInstance;
    private TabStripViewModel myTabStripViewModel;
    private ISimpleSignal myClosed;
    private IProperty`1<bool> myIsPinned;
    public ISimpleSignal Closed { get; }
    public IProperty`1<bool> IsPinned { get; }
    public TabStripItem TabStripItem { get; }
    public ToolWindowInstance ToolWindowInstance { get; }
    public TabStripPageFrame(Lifetime lifetime, ToolWindowInstance toolWindowInstance, ToolWindowFrameBase topLevelFrame, ToolWindowContent tabStripContent, TabStripViewModel tabStripViewModel, bool pinnable, IUIApplication uiapp);
    private void DetachTabItem();
    private void AdjustVisibleAndActive();
    public virtual void Show(bool activate);
    public virtual void Close();
    public ISimpleSignal get_Closed();
    public IProperty`1<bool> get_IsPinned();
    public TabStripItem get_TabStripItem();
    public ToolWindowInstance get_ToolWindowInstance();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9();
    [CompilerGeneratedAttribute]
private void <.ctor>b__a(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__d(Lifetime lt, IAutomation control);
    [CompilerGeneratedAttribute]
private void <.ctor>b__e(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11(object sender, TabStripClosedEventArgs args);
    [CompilerGeneratedAttribute]
private void <AdjustVisibleAndActive>b__1b();
}
public abstract class JetBrains.Application.UI.ToolWindowManagement.ToolWindowClass : object {
    protected ToolWindowDescriptor myDescriptor;
    private Lazy`1<FactorToolWindowContent> myContentfactory;
    protected Lifetime myLifetime;
    protected TopLevelToolWindowFrameFactory ToolWindowFrameFactory;
    protected TopLevelToolWindowFrameBase myToplevelFrame;
    protected IProperty`1<ToolWindowContent> myEmptyContent;
    protected IProperty`1<bool> myActive;
    protected IProperty`1<bool> myVisible;
    protected IProperty`1<ToolWindowInstance> myActiveInstance;
    protected ISignal`1<QueryCloseInstancesArgs> myQueryCloseInstances;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; private set; }
    public ToolWindowDescriptor Descriptor { get; }
    [NotNullAttribute]
public ToolWindowInstance[] Instances { get; }
    [CanBeNullAttribute]
public TopLevelToolWindowFrameBase Frame { get; }
    public IProperty`1<bool> Active { get; }
    public IProperty`1<bool> Visible { get; }
    public IProperty`1<ToolWindowInstance> ActiveInstance { get; }
    public ISignal`1<QueryCloseInstancesArgs> QueryCloseInstances { get; }
    protected ToolWindowClass(Lifetime lifetime, TopLevelToolWindowFrameFactory toolWindowFrameFactory, ToolWindowDescriptor descriptor, IUIApplication environment, Lazy`1<FactorToolWindowContent> contentfactory);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    private ToolWindowContent CreateDefaultEmptyContent();
    public void EnsureFrame();
    public void Show(bool activate);
    public void Close();
    public virtual void DumpState(IndentedTextWriter tw);
    public ToolWindowDescriptor get_Descriptor();
    [ObsoleteAttribute("Use the overload which produces an Automation Object, and yield your ViewModel as one instead of factoring the view.")]
public ToolWindowInstance RegisterInstance(Lifetime lifetime, string title, IconId icon, Func`3<Lifetime, ToolWindowInstance, EitherControl> contentFactory);
    public ToolWindowInstance RegisterInstance(Lifetime lifetime, string title, IconId icon);
    public abstract virtual ToolWindowInstance RegisterInstance(Lifetime lifetime, string title, IconId icon, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    public abstract virtual ToolWindowInstance[] get_Instances();
    protected abstract virtual void AdjustToplevelFrameContent();
    protected void QueueAdjustToplevelFrameContent();
    public void RegisterEmptyContent(Lifetime lifetime);
    public void RegisterEmptyContent(Lifetime lifetime, Func`2<Lifetime, IAutomation> emptyContentFactory);
    [ObsoleteAttribute("Use the overload which produces an Automation Object, and yield your ViewModel as one instead of factoring the view.")]
public void RegisterEmptyContent(Lifetime lifetime, Func`2<Lifetime, EitherControl> emptyContentFactory);
    internal abstract virtual void CloseInstance(ToolWindowInstance instance);
    internal abstract virtual void ShowInstance(ToolWindowInstance instance, bool activate);
    internal abstract virtual void EnsureControlCreated(ToolWindowInstance toolWindowInstance);
    internal abstract virtual void UpdateInstanceContentFactory(ToolWindowInstance instance, Func`3<Lifetime, ToolWindowInstance, IAutomation> func);
    public TopLevelToolWindowFrameBase get_Frame();
    public IProperty`1<bool> get_Active();
    public IProperty`1<bool> get_Visible();
    public IProperty`1<ToolWindowInstance> get_ActiveInstance();
    public ISignal`1<QueryCloseInstancesArgs> get_QueryCloseInstances();
    [CompilerGeneratedAttribute]
private IAutomation <CreateDefaultEmptyContent>b__5(Lifetime lt, ToolWindowFrameBase frame);
    [CompilerGeneratedAttribute]
private IAutomation <RegisterInstance>b__9(Lifetime lifeTwi, ToolWindowInstance twi);
    [CompilerGeneratedAttribute]
private IAutomation <RegisterEmptyContent>b__a(Lifetime ltContent);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowClasses : object {
    private List`1<ToolWindowClass> myClasses;
    private IProperty`1<ToolWindowInstance> myLastActiveInstance;
    private HashSet`1<ToolWindowInstance> mySeenInstances;
    public ToolWindowClass[] Classes { get; }
    public ToolWindowClass Item { get; }
    public IProperty`1<ToolWindowInstance> LastActiveInstance { get; }
    public ToolWindowClasses(Lifetime lifetime, IViewable`1<ToolWindowDescriptor> descriptors, TopLevelToolWindowFrameFactory topLevelToolWindowFrameFactory, TabRenamePrompt tabRenamePrompt, TabbedToolWindowOptions tabbedToolWindowOptions, IActionBarManager actionBarManager, IUIApplication environment, Lazy`1<FactorToolWindowContent> contentfactory);
    private void SetLastActiveInstance(ToolWindowInstance inst);
    public ToolWindowClass[] get_Classes();
    public ToolWindowClass get_Item(ToolWindowDescriptor id);
    public IProperty`1<ToolWindowInstance> get_LastActiveInstance();
    public void DumpState(IndentedTextWriter tw);
    private void DumpClasses(IndentedTextWriter tw, bool visible, bool dumpOnlyId);
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowContent : object {
    private Lifetime myLifetime;
    private Func`3<Lifetime, ToolWindowFrameBase, IAutomation> myControlFactory;
    private IProperty`1<IconId> myIcon;
    private IProperty`1<string> myTitle;
    private LifetimeDefinition myControlLifetimeDefinition;
    private IProperty`1<IAutomation> myControl;
    private IProperty`1<ToolWindowContentState> myState;
    public IProperty`1<string> Title { get; }
    public IProperty`1<IconId> Icon { get; }
    public IProperty`1<IAutomation> Control { get; }
    public IProperty`1<ToolWindowContentState> State { get; }
    public ToolWindowContent(Lifetime lifetime, Func`3<Lifetime, ToolWindowFrameBase, IAutomation> controlFactory);
    public IProperty`1<string> get_Title();
    public IProperty`1<IconId> get_Icon();
    public IProperty`1<IAutomation> get_Control();
    public IProperty`1<ToolWindowContentState> get_State();
    private IAutomation CreateControl(Lifetime lifetime, ToolWindowFrameBase frame);
    public void Load(ToolWindowFrameBase frame);
    public void Load(ToolWindowFrameBase frame, Func`3<Lifetime, ToolWindowFrameBase, IAutomation> contentFactory);
    public void Unload();
    public void DumpState(IndentedTextWriter tw);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <Load>b__7();
    [CompilerGeneratedAttribute]
private void <Load>b__8();
    [CompilerGeneratedAttribute]
private void <Load>b__9();
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowContentState : Enum {
    public int value__;
    public static ToolWindowContentState NotLoaded;
    public static ToolWindowContentState Loaded;
    public static ToolWindowContentState Unloaded;
    public static ToolWindowContentState Restored;
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowDefaultEmptyContentAutomation : AAutomation {
    public ITheming Theming;
    public ToolWindowDefaultEmptyContentAutomation(ITheming theming);
}
[DebuggerDisplayAttribute("Id:{Id}")]
public abstract class JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor : object {
    private ToolWindowDescriptorAttribute myDescriptorAttribute;
    private LocalLazy`2<IconId, Type> myIcon;
    private ToolWindowId myId;
    private Func`2<Type, IconId> myCachedIconIdFactory;
    [CompilerGeneratedAttribute]
private static Func`2<Type, IconId> CS$<>9__CachedAnonymousMethodDelegate1;
    public ToolWindowId Id { get; }
    public string Text { get; }
    [CanBeNullAttribute]
public IconId Icon { get; }
    public ToolWindowType Type { get; }
    public ToolWindowVisibilityPersistenceScope VisibilityPersistenceScope { get; }
    public ToolWindowInitialDocking InitialDocking { get; }
    public int InitialWidth { get; }
    public int InitialHeight { get; }
    public bool MultiInstanceTabRenameAllowed { get; }
    public bool MultiInstanceTabRenameDuplicateNamesNotAllowed { get; }
    public bool MultiInstanceStayAfterClosingLastTab { get; }
    public string MultiInstanceToolWindowSingleInstanceName { get; }
    public bool MultiInstanceRecentItemsAllowed { get; }
    public bool MultiInstanceTabPinningAllowed { get; }
    public bool MultiInstanceTabReorderingAllowed { get; }
    public bool MultiInstanceOverflowTabsAllowed { get; }
    public ToolWindowOpenTabBehaviour MultiInstanceOpenTabBehaviour { get; }
    public string ContextMenuActionGroupId { get; }
    protected ToolWindowDescriptor(IApplicationHost host, IWindowBranding branding);
    protected ToolWindowDescriptor(IApplicationHost host);
    public ToolWindowId get_Id();
    public string get_Text();
    public IconId get_Icon();
    public ToolWindowType get_Type();
    public ToolWindowVisibilityPersistenceScope get_VisibilityPersistenceScope();
    public ToolWindowInitialDocking get_InitialDocking();
    public int get_InitialWidth();
    public int get_InitialHeight();
    public bool get_MultiInstanceTabRenameAllowed();
    public bool get_MultiInstanceTabRenameDuplicateNamesNotAllowed();
    public bool get_MultiInstanceStayAfterClosingLastTab();
    public string get_MultiInstanceToolWindowSingleInstanceName();
    public bool get_MultiInstanceRecentItemsAllowed();
    public bool get_MultiInstanceTabPinningAllowed();
    public bool get_MultiInstanceTabReorderingAllowed();
    public bool get_MultiInstanceOverflowTabsAllowed();
    public ToolWindowOpenTabBehaviour get_MultiInstanceOpenTabBehaviour();
    public string get_ContextMenuActionGroupId();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static IconId <.ctor>b__0(Type type);
}
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute : ShellComponentAttribute {
    private bool myMultiInstanceOverflowTabsAllowed;
    private bool myMultiInstanceTabReorderingAllowed;
    private bool myMultiInstanceTabPinningAllowed;
    public static string ArgNameProductNeutralId;
    public static string ArgNameIcon;
    [CompilerGeneratedAttribute]
private string <ProductNeutralId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowVisibilityPersistenceScope <VisibilityPersistenceScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowInitialDocking <InitialDocking>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceTabRenameAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceTabRenameDuplicateNamesNotAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceStayAfterClosingLastTab>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceRecentItemsAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowOpenTabBehaviour <MultiInstanceOpenTabBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstancePresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextMenuActionGroupId>k__BackingField;
    public string ProductNeutralId { get; public set; }
    public string Text { get; public set; }
    public Type Icon { get; public set; }
    public ToolWindowType Type { get; public set; }
    public ToolWindowVisibilityPersistenceScope VisibilityPersistenceScope { get; public set; }
    public ToolWindowInitialDocking InitialDocking { get; public set; }
    public int InitialWidth { get; public set; }
    public int InitialHeight { get; public set; }
    public bool MultiInstanceTabRenameAllowed { get; public set; }
    public bool MultiInstanceTabRenameDuplicateNamesNotAllowed { get; public set; }
    public bool MultiInstanceStayAfterClosingLastTab { get; public set; }
    public bool MultiInstanceTabPinningAllowed { get; public set; }
    public bool MultiInstanceTabReorderingAllowed { get; public set; }
    public bool MultiInstanceRecentItemsAllowed { get; public set; }
    public ToolWindowOpenTabBehaviour MultiInstanceOpenTabBehaviour { get; public set; }
    public bool MultiInstanceOverflowTabsAllowed { get; public set; }
    public string InstancePresentableName { get; public set; }
    public string ContextMenuActionGroupId { get; public set; }
    private static ToolWindowDescriptorAttribute();
    [CompilerGeneratedAttribute]
public string get_ProductNeutralId();
    [CompilerGeneratedAttribute]
public void set_ProductNeutralId(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Type get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Type value);
    [CompilerGeneratedAttribute]
public ToolWindowType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ToolWindowType value);
    [CompilerGeneratedAttribute]
public ToolWindowVisibilityPersistenceScope get_VisibilityPersistenceScope();
    [CompilerGeneratedAttribute]
public void set_VisibilityPersistenceScope(ToolWindowVisibilityPersistenceScope value);
    [CompilerGeneratedAttribute]
public ToolWindowInitialDocking get_InitialDocking();
    [CompilerGeneratedAttribute]
public void set_InitialDocking(ToolWindowInitialDocking value);
    [CompilerGeneratedAttribute]
public int get_InitialWidth();
    [CompilerGeneratedAttribute]
public void set_InitialWidth(int value);
    [CompilerGeneratedAttribute]
public int get_InitialHeight();
    [CompilerGeneratedAttribute]
public void set_InitialHeight(int value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceTabRenameAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceTabRenameAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceTabRenameDuplicateNamesNotAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceTabRenameDuplicateNamesNotAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceStayAfterClosingLastTab();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceStayAfterClosingLastTab(bool value);
    public bool get_MultiInstanceTabPinningAllowed();
    public void set_MultiInstanceTabPinningAllowed(bool value);
    public bool get_MultiInstanceTabReorderingAllowed();
    public void set_MultiInstanceTabReorderingAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceRecentItemsAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceRecentItemsAllowed(bool value);
    [CompilerGeneratedAttribute]
public ToolWindowOpenTabBehaviour get_MultiInstanceOpenTabBehaviour();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceOpenTabBehaviour(ToolWindowOpenTabBehaviour value);
    public bool get_MultiInstanceOverflowTabsAllowed();
    public void set_MultiInstanceOverflowTabsAllowed(bool value);
    [CompilerGeneratedAttribute]
public string get_InstancePresentableName();
    [CompilerGeneratedAttribute]
public void set_InstancePresentableName(string value);
    [CompilerGeneratedAttribute]
public string get_ContextMenuActionGroupId();
    [CompilerGeneratedAttribute]
public void set_ContextMenuActionGroupId(string value);
}
public abstract class JetBrains.Application.UI.ToolWindowManagement.ToolWindowFrameBase : object {
    protected Lifetime myLifetime;
    protected IThreading myLocks;
    protected IProperty`1<ToolWindowContent> myContent;
    protected IProperty`1<IAutomation> myCurrentControl;
    protected WindowFrame myWindowFrame;
    protected IProperty`1<string> myTitle;
    protected Property`1<IconId> myIcon;
    private IProperty`1<bool> myVisible;
    private IProperty`1<bool> myActive;
    public IProperty`1<bool> Visible { get; }
    public IProperty`1<bool> Active { get; }
    public IProperty`1<ToolWindowContent> Content { get; }
    public WindowFrame WindowFrame { get; }
    protected ToolWindowFrameBase(Lifetime lifetime, IThreading locks);
    public IProperty`1<bool> get_Visible();
    public IProperty`1<bool> get_Active();
    public IProperty`1<ToolWindowContent> get_Content();
    public void EnsureControlCreated();
    public void UpdateControl(Func`3<Lifetime, ToolWindowFrameBase, IAutomation> controlFactory);
    public WindowFrame get_WindowFrame();
    public abstract virtual void Show(bool activate);
    public abstract virtual void Close();
    public virtual void DumpState(IndentedTextWriter tw);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime lt, ToolWindowContent content);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(Lifetime _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowFrameContentPlaceholderAutomation : AAutomation {
    public IProperty`1<IAutomation> ContentControl;
    [NotNullAttribute]
public ToolWindowFrameBase Frame;
    [NotNullAttribute]
public IProperty`1<bool> IsAllowAutorestore;
    public IProperty`1<bool> IsReloadAvailable;
    [NotNullAttribute]
public Lifetime Lifetime;
    public IProperty`1<string> NoContentCueBanner;
    [NotNullAttribute]
public IUIApplication UIApplication;
    public ToolWindowFrameContentPlaceholderAutomation(Lifetime lifeGlobal, ToolWindowFrameBase frame, IUIApplication uiapp);
    public void Restore();
    private void InitCueBanner(Lifetime lifeGlobal, ToolWindowFrameBase frame);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lfrc, ToolWindowContent frc);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Lifetime lc, IAutomation c);
    [CompilerGeneratedAttribute]
private void <Restore>b__3();
}
public static class JetBrains.Application.UI.ToolWindowManagement.ToolWindowGuidGenerator : object {
    private static Guid ToolWindowGuidNamespace;
    private static ToolWindowGuidGenerator();
    public static Guid GetToolWindowGuid(ToolWindowId id);
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowId : object {
    private string myProductNeutralId;
    private string myProductName;
    [NotNullAttribute]
public string ProductName { get; }
    [NotNullAttribute]
public string ProductNeutralId { get; }
    [NotNullAttribute]
public string StringId { get; }
    public ToolWindowId(string productName, string productNeutralId);
    public string get_ProductName();
    public string get_ProductNeutralId();
    public string get_StringId();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ToolWindowId left, ToolWindowId right);
    public static bool op_Inequality(ToolWindowId left, ToolWindowId right);
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowInitialDocking : Enum {
    public int value__;
    public static ToolWindowInitialDocking NotSpecified;
    public static ToolWindowInitialDocking Left;
    public static ToolWindowInitialDocking Right;
    public static ToolWindowInitialDocking Bottom;
    public static ToolWindowInitialDocking Top;
    public static ToolWindowInitialDocking Floating;
    public static ToolWindowInitialDocking TabbedDocument;
    public static ToolWindowInitialDocking SolutionExplorer;
    public static ToolWindowInitialDocking OutputWindow;
    public static ToolWindowInitialDocking ToolBox;
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowInstance : object {
    private IProperty`1<string> myTitle;
    private IProperty`1<IconId> myIcon;
    private Lifetime myLifetime;
    private ToolWindowClass myClass;
    private WindowFrame myWindowFrame;
    private IProperty`1<bool> myQueryClose;
    private IProperty`1<bool> myVisible;
    private IProperty`1<bool> myActive;
    private IProperty`1<bool> myCanClose;
    public IProperty`1<bool> QueryClose { get; }
    public IProperty`1<string> Title { get; }
    public IProperty`1<IconId> Icon { get; }
    public IProperty`1<bool> Visible { get; }
    public IProperty`1<bool> CanClose { get; }
    public IProperty`1<bool> Active { get; }
    public ToolWindowClass Class { get; }
    public WindowFrame WindowFrame { get; }
    public Lifetime Lifetime { get; }
    public ToolWindowInstance(Lifetime lifetime, string initialTitle, IconId icon, ToolWindowClass cls, IThreading threading);
    public IProperty`1<bool> get_QueryClose();
    public IProperty`1<string> get_Title();
    public IProperty`1<IconId> get_Icon();
    public IProperty`1<bool> get_Visible();
    public IProperty`1<bool> get_CanClose();
    public IProperty`1<bool> get_Active();
    public ToolWindowClass get_Class();
    public WindowFrame get_WindowFrame();
    public Lifetime get_Lifetime();
    public virtual void Show(bool activate);
    public virtual void Close();
    public virtual ToolWindowInstance EnsureControlCreated();
    public virtual void DumpState(IndentedTextWriter tw);
    [ObsoleteAttribute("This crazy piece of API will be dropped.")]
public virtual void UpdateContentFactory(Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowManager : object {
    private ToolWindowClasses myClasses;
    public ToolWindowClasses Classes { get; }
    public IProperty`1<ToolWindowInstance> LastActiveInstance { get; }
    public ToolWindowManager(Lifetime lifetime, IViewable`1<ToolWindowDescriptor> descriptors, TopLevelToolWindowFrameFactory topLevelToolWindowFrameFactory, IActionBarManager actionBarManager, Lazy`1<FactorToolWindowContent> contentfactory, TabRenamePrompt tabRenamePrompt, TabbedToolWindowOptions options, IUIApplication environment);
    public ToolWindowClasses get_Classes();
    public IProperty`1<ToolWindowInstance> get_LastActiveInstance();
    public void DumpState(IndentedTextWriter textWriter);
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowOpenTabBehaviour : Enum {
    public int value__;
    public static ToolWindowOpenTabBehaviour Default;
    public static ToolWindowOpenTabBehaviour ReplaceUnpinned;
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowType : Enum {
    public int value__;
    public static ToolWindowType Undefined;
    public static ToolWindowType SingleInstance;
    public static ToolWindowType MultiInstance;
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowVisibilityPersistenceScope : Enum {
    public int value__;
    public static ToolWindowVisibilityPersistenceScope None;
    public static ToolWindowVisibilityPersistenceScope Solution;
    public static ToolWindowVisibilityPersistenceScope Global;
}
public abstract class JetBrains.Application.UI.ToolWindowManagement.TopLevelToolWindowFrameBase : ToolWindowFrameBase {
    protected TopLevelToolWindowFrameBase(Lifetime lifetime, IThreading locks);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory : object {
    private ISignal`1<ToolWindowId> myFrameRequired;
    protected IShellLocks myLocks;
    public ISignal`1<ToolWindowId> FrameRequired { get; }
    public TopLevelToolWindowFrameFactory(Lifetime lifetime, IShellLocks locks);
    public ISignal`1<ToolWindowId> get_FrameRequired();
    public virtual TopLevelToolWindowFrameBase CreateTopLevelFrame(Lifetime lifetime, ToolWindowDescriptor toolWindowDescriptor);
    public virtual bool IsFrameRequired(ToolWindowDescriptor toolWindowDescriptor);
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.TreeBrowser.ExportTreeManager : object {
    private IEnumerable`1<IExportTreeProvider> myExportTreeProviders;
    [CompilerGeneratedAttribute]
private static Comparison`1<IExportTreeProvider> CS$<>9__CachedAnonymousMethodDelegate1;
    public ExportTreeManager(Lifetime lifetime, IViewable`1<IExportTreeProvider> exportTreeProviders, IActionManager actionManager);
    public sealed virtual bool IsAvailable(IDataContext context, ExportTreeViewFormat exportFormat);
    public sealed virtual void Export(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
    public sealed virtual Action`2<IProgressIndicator, Stream> GetExporter(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__0(IExportTreeProvider a, IExportTreeProvider b);
}
public abstract class JetBrains.Application.UI.TreeBrowser.ExportTreeViewBase : object {
    protected ExportTreeViewFormat ExportFormat { get; }
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual ExportTreeViewFormat get_ExportFormat();
}
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewFormat : EnumPattern {
    public static ExportTreeViewFormat Text;
    public static ExportTreeViewFormat Xml;
    public static ExportTreeViewFormat Html;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileFilter>k__BackingField;
    public string Extension { get; private set; }
    public string FileFilter { get; private set; }
    public ExportTreeViewFormat(string name, string extension, string fileFilter);
    private static ExportTreeViewFormat();
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
private void set_Extension(string value);
    [CompilerGeneratedAttribute]
public string get_FileFilter();
    [CompilerGeneratedAttribute]
private void set_FileFilter(string value);
}
public abstract class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionAction : object {
    public ExportTreeViewFormat ExportFormat { get; }
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual ExportTreeViewFormat get_ExportFormat();
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("TreeModelBrowser.ExportSelection.Html", "Export to HTML")]
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionHtmlAction : ExportTreeViewSelectionAction {
    public ExportTreeViewFormat ExportFormat { get; }
    public virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.ExportSelection.Text", "Export to Text")]
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionTextAction : ExportTreeViewSelectionAction {
    public ExportTreeViewFormat ExportFormat { get; }
    public virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.ExportSelection.Xml", "Export to XML")]
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionXmlAction : ExportTreeViewSelectionAction {
    public ExportTreeViewFormat ExportFormat { get; }
    public virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.Preview.Horizontal", "Bottom")]
public class JetBrains.Application.UI.TreeBrowser.HorizontalCodeViewAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public interface JetBrains.Application.UI.TreeBrowser.IAsyncUpdatingContent {
    public IProperty`1<bool> IsUpdatingContent { get; }
    public abstract virtual IProperty`1<bool> get_IsUpdatingContent();
}
public interface JetBrains.Application.UI.TreeBrowser.IExportTreeManager {
    public abstract virtual bool IsAvailable(IDataContext context, ExportTreeViewFormat exportFormat);
    public abstract virtual void Export(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
    public abstract virtual Action`2<IProgressIndicator, Stream> GetExporter(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
}
public interface JetBrains.Application.UI.TreeBrowser.IExportTreeProvider {
    public int Priority { get; }
    public abstract virtual bool IsApplicable(IDataContext context, ExportTreeViewFormat exportFormat);
    public abstract virtual int get_Priority();
    public abstract virtual bool Export(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
    [ContractAnnotationAttribute("=>null,title:null;=>notnull,title:notnull")]
[CanBeNullAttribute]
public abstract virtual ITreeExporter GetExporter(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively, String& title, IWin32Window& uiParent);
}
public interface JetBrains.Application.UI.TreeBrowser.ITreeExporter {
    public abstract virtual void PrepareData(Action afterPrepare);
    public abstract virtual void Export(IProgressIndicator progressIndicator, Stream stream);
}
public interface JetBrains.Application.UI.TreeBrowser.ITreePanelActions {
    public bool PreviewSupported { get; }
    public bool PreviewVisible { get; public set; }
    public Orientation PreviewOrientation { get; public set; }
    public string PreviewActionName { get; }
    public abstract virtual void ExpandAll();
    public abstract virtual void CollapseAll();
    public abstract virtual bool get_PreviewSupported();
    public abstract virtual bool get_PreviewVisible();
    public abstract virtual void set_PreviewVisible(bool value);
    public abstract virtual Orientation get_PreviewOrientation();
    public abstract virtual void set_PreviewOrientation(Orientation value);
    public abstract virtual string get_PreviewActionName();
    public abstract virtual void FocusOn(TreeModelNode node);
}
public interface JetBrains.Application.UI.TreeBrowser.ITreeViewCellPresentationsProvider {
    public abstract virtual IPresentableItem[] GetCellPresentations(TreeModelNode treeModelNode);
}
[ActionGroupAttribute("1")]
public class JetBrains.Application.UI.TreeBrowser.TogglePreviewAction : object {
    public TogglePreviewAction(VerticalCodeViewAction verticalCodeViewAction, HorizontalCodeViewAction horizontalCodeViewAction);
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public static class JetBrains.Application.UI.TreeBrowser.TreeModelBrowser : object {
    public static DataConstant`1<IResultListHandler> NAVIGATE_OCCURRENCE_PROVIDER;
    public static DataConstant`1<ITreeViewController> TREE_MODEL_DESCRIPTOR;
    public static DataConstant`1<ITreePanelActions> TREE_ACTIONS;
    public static DataConstant`1<IList`1<TreeModelNode>> TREE_MODEL_NODES;
    public static DataConstant`1<TreeModelNode> TREE_MODEL_NODE;
    public static DataConstant`1<ITreeViewCellPresentationsProvider> TREE_VIEW_CELL_PRESENTATIONS_PROVIDER;
    private static TreeModelBrowser();
}
[ActionAttribute("TreeModelBrowser.CollapseAll", "Collapse All")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserCollapseAllAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[VsOverrideActionAttribute("({5efc7975-14bc-11cf-9b2b-00aa00573819}:15)")]
[ActionAttribute("TreeModelBrowser.Copy", "Copy")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserCopyActionHandler : SimpleOverridingActionHandler {
    protected virtual bool IsAvailable(IDataContext context);
    protected virtual void ExecuteInternal(IDataContext context);
}
[ActionGroupAttribute("TreeModelBrowser.Selection.Debugger", "2")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserDebuggerActionGroup : object {
}
[ActionAttribute("TreeModelBrowser.ExpandAll", "Expand All")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExpandAllAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("TreeModelBrowser.Export", "1")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportGroup : object {
    public TreeModelBrowserExportGroup(TreeModelBrowserExportText treeModelBrowserExportText, TreeModelBrowserExportXml treeModelBrowserExportXml, TreeModelBrowserExportHtml treeModelBrowserExportHtml);
}
[ActionAttribute("TreeModelBrowser.Export.Html", "HTML")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportHtml : ExportTreeViewBase {
    protected ExportTreeViewFormat ExportFormat { get; }
    protected virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.Export.Text", "Text")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportText : ExportTreeViewBase {
    protected ExportTreeViewFormat ExportFormat { get; }
    protected virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.Export.Xml", "XML")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportXml : ExportTreeViewBase {
    protected ExportTreeViewFormat ExportFormat { get; }
    protected virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.NextOccurrence", "Go to Next Item")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserNextAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    [CompilerGeneratedAttribute]
private static string <Update>b__0(string t);
}
[ActionAttribute("TreeModelBrowser.PreviousOccurrence", "Go to Previous Item")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserPreviousAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
    [CompilerGeneratedAttribute]
private static string <Update>b__0(string t);
}
[ShellComponentAttribute]
internal class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserRules : object {
    [CompilerGeneratedAttribute]
private static Func`2<IDataContext, TreeModelNode> CS$<>9__CachedAnonymousMethodDelegate1;
    public TreeModelBrowserRules(Lifetime lifetime, IActionManager actionManager);
    [CompilerGeneratedAttribute]
private static TreeModelNode <.ctor>b__0(IDataContext dc);
}
[ActionGroupAttribute("TreeModelBrowser.Selection", "0")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserSelectionActionGroup : object {
    public TreeModelBrowserSelectionActionGroup(TreeModelBrowserCopyActionHandler treeModelBrowserCopyActionHandler, TreeModelBrowserSelectionExportActionGroup treeModelBrowserSelectionExportActionGroup, TreeModelBrowserDebuggerActionGroup debugActions);
}
[ActionGroupAttribute("TreeModelBrowser.Selection.Export", "1")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserSelectionExportActionGroup : object {
    public TreeModelBrowserSelectionExportActionGroup(ExportTreeViewSelectionTextAction text, ExportTreeViewSelectionXmlAction xml, ExportTreeViewSelectionHtmlAction html);
}
[ActionGroupAttribute("TreeModelBrowser.Standard", "0")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserStandardActionGroup : object {
    public TreeModelBrowserStandardActionGroup(TreeModelBrowserExpandAllAction treeModelBrowserExpandAllAction, TreeModelBrowserCollapseAllAction treeModelBrowserCollapseAllAction, TreeModelBrowserPreviousAction treeModelBrowserPreviousAction, TreeModelBrowserNextAction treeModelBrowserNextAction, TogglePreviewAction togglePreviewAction, TreeModelBrowserExportGroup exportTreeViewAction);
}
[ActionAttribute("TreeModelBrowser.Preview.Vertical", "Right")]
public class JetBrains.Application.UI.TreeBrowser.VerticalCodeViewAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public class JetBrains.Application.UI.TreeModels.CascadeGroup : object {
    public static CascadeGroup Empty;
    private IEnumerable myGroups;
    [NotNullAttribute]
public IEnumerable Groups { get; }
    public CascadeGroup(IEnumerable groups);
    private static CascadeGroup();
    public IEnumerable get_Groups();
}
public interface JetBrains.Application.UI.TreeModels.IAsyncRegroupingController`1 {
    public abstract virtual void RegroupAsync(Lifetime lifetime, NoContentLockInsideReadWriteLock lock, IBindableView`1<TItem> items, Action`1<TItem> onItemAdded, Action`1<TItem> onItemRemoved);
}
public interface JetBrains.Application.UI.TreeModels.IPrecomputeTreeGroupProvider`1 {
    public abstract virtual void Precompute(IEnumerable`1<TItem> items);
    public abstract virtual void Drop();
}
public interface JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1 {
    public abstract virtual object ExtractGroupObject(TItem item);
}
public class JetBrains.Application.UI.TreeModels.LiveTreeModelGrouping`1 : AAutomation {
    [NotNullAttribute]
public static LiveTreeModelGrouping`1<T> Empty;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<VolatileTreeGroupProvider<T>> <Providers>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<VolatileTreeGroupProvider<T>> Providers { get; private set; }
    public LiveTreeModelGrouping`1(string name, VolatileTreeGroupProvider[] providers);
    public LiveTreeModelGrouping`1(string name, IEnumerable`1<VolatileTreeGroupProvider<T>> providers);
    private static LiveTreeModelGrouping`1();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<VolatileTreeGroupProvider<T>> get_Providers();
    [CompilerGeneratedAttribute]
private void set_Providers(IEnumerable`1<VolatileTreeGroupProvider<T>> value);
    public virtual string ToString();
}
public class JetBrains.Application.UI.TreeModels.New.ActivityTimeoutTracker : object {
    private static int MaxTimeout;
    private Stopwatch myStopwatch;
    public bool ShouldStop { get; }
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual bool get_ShouldStop();
}
public class JetBrains.Application.UI.TreeModels.New.AndLiveFilter : object {
    private List`1<ILiveTreeModelFilter> myFilters;
    [CompilerGeneratedAttribute]
private static Func`2<ILiveTreeModelFilter, IEnumerable`1<IDependencyDefinition>> CS$<>9__CachedAnonymousMethodDelegate2;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public AndLiveFilter(ILiveTreeModelFilter filter, ILiveTreeModelFilter anotherFilter, ILiveTreeModelFilter[] otherFilters);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual bool Matches(ITreeModelNode node);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDependencyDefinition> <get_Dependencies>b__1(ILiveTreeModelFilter liveTreeModelFilter);
}
public class JetBrains.Application.UI.TreeModels.New.AsyncNodeChildrenUpdater`1 : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IMainThreadExecutor myMainThreadExecutor;
    [NotNullAttribute]
private ISync myBgWriteLock;
    [NotNullAttribute]
private IActivityTimeoutTracker myActivityTimeoutTracker;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ReadWriteLock myUiLock;
    [NotNullAttribute]
private Func`3<TNode, ITreeModel, TNode> myTempNodeFactory;
    [NotNullAttribute]
private WeakToStrongDictionary`2<ITreeModelNode, IThrottlingIteratorWithNode<TNode>> myAllIterators;
    [NotNullAttribute]
private WeakToStrongDictionary`2<ITreeModelNode, ITreeModelNode> myParentMapping;
    [NotNullAttribute]
private JetHashSet`1<IThrottlingIteratorWithNode<TNode>> myIteratorsToProcess;
    [NotNullAttribute]
private object myIteratorsToProcessLock;
    [NotNullAttribute]
private ConcurrentDictionary`2<ITreeModelNode, NodesStorage<TNode>> myUpdatersToProcess;
    [NotNullAttribute]
private IGroupingEvent myUpdateNodesEvent;
    [NotNullAttribute]
private SyncNodeChildrenUpdater mySyncUpdater;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Idle>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IThrottlingIteratorWithNode<TNode>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ITreeModelNode, NodesStorage<TNode>> CS$<>9__CachedAnonymousMethodDelegatee;
    public IProperty`1<bool> Idle { get; private set; }
    public bool IsSync { get; }
    public AsyncNodeChildrenUpdater`1(Lifetime lifetime, IMainThreadExecutor mainThreadExecutor, ISync bgWriteLock, ReadWriteLock uiLock, IGroupingEventFactory groupingEventFactory, Func`3<TNode, ITreeModel, TNode> tempNodeFactory, GroupingEventProlongation prolongationPolicy, IActivityTimeoutTracker activityTimeoutTracker);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Idle();
    [CompilerGeneratedAttribute]
private void set_Idle(IProperty`1<bool> value);
    public sealed virtual bool get_IsSync();
    public sealed virtual void Clean();
    protected virtual void UpdateChangedChildrenCollections();
    public sealed virtual IBindableView`1<T> UpdateNode(ITreeModelNode node, IBindableView`1<T> children);
    public sealed virtual void AttachNodeToParent(ITreeModelNode node, ITreeModelNode parent);
    public sealed virtual void DetachNodeFromParent(ITreeModelNode node);
    public sealed virtual void DisposeNode(ITreeModelNode node);
    private ITreeModelNode SelfOrRootKey(ITreeModelNode node);
    public sealed virtual void RequestReset(IThrottlingIterator toReset);
    public sealed virtual void ChangeParentMapping(ITreeModelNode node, IEnumerable`1<object> evaluatedSourceCollection);
    private sealed virtual override ITreeModelNode JetBrains.Application.UI.TreeModels.New.IParentProvider.GetParent(ITreeModelNode node);
    public sealed virtual void Dump(StreamWriter writer);
    [CompilerGeneratedAttribute]
private static bool <Clean>b__1(IThrottlingIteratorWithNode<TNode> x);
    [CompilerGeneratedAttribute]
private static NodesStorage<TNode> <DisposeNode>b__d(ITreeModelNode _);
}
public class JetBrains.Application.UI.TreeModels.New.AsyncNodeChildrenUpdaterFactory`1 : object {
    [NotNullAttribute]
private IGroupingEventFactory myGroupingEventFactory;
    private IThreading myThreading;
    [NotNullAttribute]
private Func`3<T, ITreeModel, T> myTempNodeFactory;
    public AsyncNodeChildrenUpdaterFactory`1(IGroupingEventFactory groupingEventFactory, IThreading threading, Func`3<T, ITreeModel, T> tempNodeFactory);
    public sealed virtual INodeChildrenUpdater Create(Lifetime lifetime, ISync bgReadLock, ReadWriteLock uiLock, GroupingEventProlongation prolongationPolicy);
}
public interface JetBrains.Application.UI.TreeModels.New.IActivityTimeoutTracker {
    public bool ShouldStop { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual bool get_ShouldStop();
}
public interface JetBrains.Application.UI.TreeModels.New.IAsyncChildrenBuildingSettings {
    public bool ShouldDelay { get; public set; }
    public abstract virtual bool get_ShouldDelay();
    public abstract virtual void set_ShouldDelay(bool value);
}
public interface JetBrains.Application.UI.TreeModels.New.ICanStopGrouping {
    public bool IsStop { get; }
    public abstract virtual bool get_IsStop();
}
public interface JetBrains.Application.UI.TreeModels.New.ICleanableModel {
    public abstract virtual void CleanAll();
}
public interface JetBrains.Application.UI.TreeModels.New.ICompositeNode {
}
public interface JetBrains.Application.UI.TreeModels.New.IDumpable {
    public abstract virtual void Dump(StreamWriter writer);
}
public interface JetBrains.Application.UI.TreeModels.New.IEvaluatedOnDemandTreeModel {
    public abstract virtual void BeginEvaluate(object node, bool recursive, Action afterEvaluation);
}
public interface JetBrains.Application.UI.TreeModels.New.ILiveTreeModelComparer {
    [NotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
}
public interface JetBrains.Application.UI.TreeModels.New.ILiveTreeModelFilter {
    [NotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public abstract virtual bool Matches(ITreeModelNode node);
}
public interface JetBrains.Application.UI.TreeModels.New.IMainThreadExecutor {
    public abstract virtual void Execute(Lifetime lifetime, string name, Action action);
}
public interface JetBrains.Application.UI.TreeModels.New.INodeChildrenUpdater {
    public IProperty`1<bool> Idle { get; }
    public bool IsSync { get; }
    [NotNullAttribute]
public abstract virtual IBindableView`1<T> UpdateNode(ITreeModelNode node, IBindableView`1<T> children);
    public abstract virtual void AttachNodeToParent(ITreeModelNode node, ITreeModelNode parent);
    public abstract virtual void DetachNodeFromParent(ITreeModelNode node);
    public abstract virtual void DisposeNode(ITreeModelNode node);
    public abstract virtual IProperty`1<bool> get_Idle();
    public abstract virtual bool get_IsSync();
    public abstract virtual void Clean();
}
public interface JetBrains.Application.UI.TreeModels.New.INodeChildrenUpdaterFactory {
    [NotNullAttribute]
public abstract virtual INodeChildrenUpdater Create(Lifetime lifetime, ISync bgWriteLock, ReadWriteLock uiLock, GroupingEventProlongation prolongationPolicy);
}
public interface JetBrains.Application.UI.TreeModels.New.IParentProvider {
    [CanBeNullAttribute]
public abstract virtual ITreeModelNode GetParent(ITreeModelNode node);
}
public interface JetBrains.Application.UI.TreeModels.New.ITempNodeValue {
}
public interface JetBrains.Application.UI.TreeModels.New.IThrottlingIterator {
    public abstract virtual void CheckEvaluated();
    public abstract virtual void Reset();
}
internal interface JetBrains.Application.UI.TreeModels.New.IThrottlingIteratorResetService {
    public abstract virtual void RequestReset(IThrottlingIterator toReset);
    public abstract virtual void ChangeParentMapping(ITreeModelNode node, IEnumerable`1<object> evaluatedSourceCollection);
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModel {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ReadWriteLock Lock { get; }
    [NotNullAttribute]
public ReadWriteLock UILock { get; }
    [NotNullAttribute]
public IBindableView`1<ITreeModelNode> Children { get; }
    [NotNullAttribute]
public IBindableCollection`1<ITreeModelNode> ChildrenRaw { get; }
    [NotNullAttribute]
public IProperty`1<ILiveTreeModelFilter> Filter { get; }
    [NotNullAttribute]
public IProperty`1<ILiveTreeModelComparer> Comparer { get; }
    [NotNullAttribute]
public INodeChildrenUpdater NodeChildrenUpdater { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ReadWriteLock get_Lock();
    public abstract virtual ReadWriteLock get_UILock();
    public abstract virtual IBindableView`1<ITreeModelNode> get_Children();
    public abstract virtual IBindableCollection`1<ITreeModelNode> get_ChildrenRaw();
    public abstract virtual IProperty`1<ILiveTreeModelFilter> get_Filter();
    public abstract virtual IProperty`1<ILiveTreeModelComparer> get_Comparer();
    public abstract virtual INodeChildrenUpdater get_NodeChildrenUpdater();
    [ItemNotNullAttribute]
[NotNullAttribute]
public abstract virtual ICollection`1<ITreeModelNode> GetNodes(object dataValue);
    public abstract virtual void EvaluateNodeViewModel(ITreeModelNode node);
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNode {
    [NotNullAttribute]
public ITreeModel Model { get; }
    [CanBeNullAttribute]
public ITreeModelNode Parent { get; public set; }
    [NotNullAttribute]
public object DataValue { get; }
    [NotNullAttribute]
public IBindableView`1<ITreeModelNode> Children { get; }
    [NotNullAttribute]
public IBindableView`1<ITreeModelNode> ChildrenFiltered { get; }
    [NotNullAttribute]
public IBindableCollection`1<ITreeModelNode> ChildrenRaw { get; }
    public bool IsDisposed { get; }
    public abstract virtual ITreeModel get_Model();
    public abstract virtual ITreeModelNode get_Parent();
    public abstract virtual void set_Parent(ITreeModelNode value);
    public abstract virtual object get_DataValue();
    public abstract virtual IBindableView`1<ITreeModelNode> get_Children();
    public abstract virtual IBindableView`1<ITreeModelNode> get_ChildrenFiltered();
    public abstract virtual IBindableCollection`1<ITreeModelNode> get_ChildrenRaw();
    public abstract virtual void add_Disposed(EventHandler`1<EventArgs> value);
    public abstract virtual void remove_Disposed(EventHandler`1<EventArgs> value);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void Reinitialize();
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNode`1 {
    [NotNullAttribute]
public IBindableView`1<T> Children { get; }
    [NotNullAttribute]
public IBindableCollection`1<T> ChildrenRaw { get; }
    public abstract virtual IBindableView`1<T> get_Children();
    public abstract virtual IBindableCollection`1<T> get_ChildrenRaw();
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNodeCollection {
    [CanBeNullAttribute]
public ITreeModelNode Owner { get; }
    public abstract virtual ITreeModelNode get_Owner();
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNodeWithUnitialize {
    public abstract virtual void Uninitialize();
}
public class JetBrains.Application.UI.TreeModels.New.LeafLiveTreeNode`1 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private EventHandler`1<EventArgs> Disposed;
    [CompilerGeneratedAttribute]
private ITreeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeModelNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeModelNodeModifiers <JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public ITreeModel Model { get; protected set; }
    public object DataValue { get; protected set; }
    public ITreeModelNode Parent { get; public set; }
    private TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.Model { get; }
    private TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.Parent { get; }
    private object JetBrains.Util.IPresentableStructureElement.PresentationObject { get; }
    private IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.Children { get; }
    private IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.ChildrenUnsorted { get; }
    private bool JetBrains.Application.UI.TreeModels.TreeModelNode.HasChildren { get; }
    private TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers { get; private set; }
    public IBindableView`1<T> Children { get; }
    public IBindableCollection`1<T> ChildrenRaw { get; }
    public bool IsDisposed { get; private set; }
    private IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenRaw { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenFiltered { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.Children { get; }
    protected bool IsInitialized { get; }
    public LeafLiveTreeNode`1(LiveTreeModel model, object dataValue);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModel get_Model();
    [CompilerGeneratedAttribute]
protected void set_Model(ITreeModel value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_DataValue();
    [CompilerGeneratedAttribute]
protected void set_DataValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModelNode get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(ITreeModelNode value);
    private sealed virtual override TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.get_Model();
    private sealed virtual override TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.get_Parent();
    private sealed virtual override object JetBrains.Util.IPresentableStructureElement.get_PresentationObject();
    private sealed virtual override IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_Children();
    private sealed virtual override IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_ChildrenUnsorted();
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModelNode.get_HasChildren();
    [CompilerGeneratedAttribute]
private sealed virtual override TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.get_Modifiers();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModelNode.set_Modifiers(TreeModelNodeModifiers value);
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    public sealed virtual IBindableView`1<T> get_Children();
    public sealed virtual IBindableCollection`1<T> get_ChildrenRaw();
    public sealed virtual void add_Disposed(EventHandler`1<EventArgs> value);
    public sealed virtual void remove_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    private sealed virtual override IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenRaw();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenFiltered();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_Children();
    protected bool get_IsInitialized();
    public sealed virtual void Reinitialize();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual string ToString();
    public sealed virtual void Dispose();
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeGroupModel`1 : LiveTreeModel {
    [CanBeNullAttribute]
private IEqualityComparer`1<object> myComparer;
    private DependencyStore<TItem> myDependencies;
    private IProperty`1<IBindableView`1<TItem>> myItems;
    private IProperty`1<IEnumerable`1<VolatileTreeGroupProvider<TItem>>> myGroupProviders;
    private SequentialLifetimes myGroupingSequentialLifetimes;
    private Lifetime myCurrentItemsLifetime;
    [CanBeNullAttribute]
private LifetimeDefinition myCurrentRegrouping;
    private ICollection`1<TItem> myMeaningfullItemsToAdd;
    private TItem myCurrentlyRemovingItem;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsGroupingChanging>k__BackingField;
    [NotNullAttribute]
public IBindableView`1<TItem> Items { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<VolatileTreeGroupProvider<TItem>> GroupProviders { get; public set; }
    [NotNullAttribute]
public IProperty`1<bool> IsGroupingChanging { get; private set; }
    public LiveTreeGroupModel`1(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> comparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter, IAsyncRegroupingController`1<TItem> regroupingController, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    public IBindableView`1<TItem> get_Items();
    public void set_Items(IBindableView`1<TItem> value);
    public IEnumerable`1<VolatileTreeGroupProvider<TItem>> get_GroupProviders();
    public void set_GroupProviders(IEnumerable`1<VolatileTreeGroupProvider<TItem>> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsGroupingChanging();
    [CompilerGeneratedAttribute]
private void set_IsGroupingChanging(IProperty`1<bool> value);
    protected void ForceRegrouping();
    private static Lifetime DisposingUnderWriteLockLifetime(Lifetime parentLifetime, ISync writeLock);
    private void Initialize(Lifetime lifetime);
    protected virtual bool IsMeaningfulItem(TItem item);
    private GroupManagementCallbacks<TItem> GroupManagementCallbacks(IEnumerable`1<TItem> items);
    protected virtual void OnNodeCreated(ITreeModelNode node, ITreeModelNode parent);
    protected void OnItemsAdded(IEnumerable`1<TItem> items);
    protected void OnItemAdded(TItem item);
    protected void OnItemRemoved(TItem item);
    protected virtual void BeforeInitialize();
    protected virtual void AfterInitialize();
    protected internal virtual void OnChildRemoved(ITreeModelNode parent, ITreeModelNode child);
    protected void OnItemsRemoved(IEnumerable`1<TItem> items);
    [CompilerGeneratedAttribute]
private void <.ctor>b__21(BeforePropertyChangedEventArgs`1<IBindableView`1<TItem>> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22();
    [CompilerGeneratedAttribute]
private void <.ctor>b__23(BeforePropertyChangedEventArgs`1<IEnumerable`1<VolatileTreeGroupProvider<TItem>>> e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__24(PropertyChangedEventArgs`1<IEnumerable`1<VolatileTreeGroupProvider<TItem>>> args);
    [CompilerGeneratedAttribute]
private void <ForceRegrouping>b__2d();
    [CompilerGeneratedAttribute]
private void <Initialize>b__32();
    [CompilerGeneratedAttribute]
private void <Initialize>b__33();
}
public abstract class JetBrains.Application.UI.TreeModels.New.LiveTreeGroupModel`2 : LiveTreeGroupModel`1<TItem> {
    [NotNullAttribute]
protected TRoot Root { get; }
    protected LiveTreeGroupModel`2(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> comparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter, IAsyncRegroupingController`1<TItem> regroupingController, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    protected TRoot get_Root();
    protected virtual ITreeModelNode InitializeRoot();
    protected abstract virtual TRoot InitializeTypedRoot();
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeModel : object {
    [NotNullAttribute]
private IThreading myThreading;
    private ITreeModelNode myRoot;
    [CanBeNullAttribute]
private IParentProvider myParentProvider;
    [NotNullAttribute]
protected OneToSetMap`2<object, ITreeModelNode> NodeMap;
    [NotNullAttribute]
protected IDictionary`2<object, ITreeModelNode> NodeByKey;
    [NotNullAttribute]
protected OneToSetMap`2<ITreeModelNode, object> KeysByNode;
    protected IProperty`1<bool> IsBusy;
    private bool myShouldDelay;
    private object myShouldDelayLock;
    private PropertyChangedEventHandler PropertyChanged;
    private int mySuspendCount;
    private Action OnSuspendedEvent;
    private Action OnResumedEvent;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadWriteLock <Lock>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadWriteLock <UILock>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ILiveTreeModelFilter> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ILiveTreeModelComparer> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<ITreeModelNode> <NodeComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private INodeChildrenUpdater <NodeChildrenUpdater>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ITreeModelNode, object> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Action`1<ITreeModelNode> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Action`1<ITreeModelNode> CS$<>9__CachedAnonymousMethodDelegate12;
    private IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.Roots { get; }
    private IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.RootsUnsorted { get; }
    private bool JetBrains.Application.UI.TreeModels.TreeModel.InUpdate { get; }
    private IComparer`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.Comparer { get; private set; }
    private IEqualityComparer`1<object> JetBrains.Application.UI.TreeModels.TreeModel.EqualityComparer { get; }
    [NotNullAttribute]
protected ITreeModelNode Root { get; }
    public IBindableCollection`1<ITreeModelNode> ChildrenRaw { get; }
    public IBindableView`1<ITreeModelNode> Children { get; }
    public Lifetime Lifetime { get; private set; }
    public ReadWriteLock Lock { get; private set; }
    public ReadWriteLock UILock { get; private set; }
    public IProperty`1<ILiveTreeModelFilter> Filter { get; private set; }
    public IProperty`1<ILiveTreeModelComparer> Comparer { get; private set; }
    public IEqualityComparer`1<ITreeModelNode> NodeComparer { get; private set; }
    public INodeChildrenUpdater NodeChildrenUpdater { get; private set; }
    public IBindableView`1<ITreeModelNode> Roots { get; }
    public bool SuspendDuringModelChanging { get; }
    public bool ShouldDelay { get; public set; }
    public bool IsSuspended { get; }
    public LiveTreeModel(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> comparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    private sealed virtual override IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_Roots();
    private sealed virtual override IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_RootsUnsorted();
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModel.get_InUpdate();
    private sealed virtual override IComparer`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_Comparer();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.set_Comparer(IComparer`1<TreeModelNode> value);
    private sealed virtual override IEqualityComparer`1<object> JetBrains.Application.UI.TreeModels.TreeModel.get_EqualityComparer();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.Update();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.BeginUpdate();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.EndUpdate();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.add_Updating(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.remove_Updating(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.add_Updated(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.remove_Updated(EventHandler value);
    private sealed virtual override TreeModelNode JetBrains.Application.UI.TreeModels.TreeModel.GetNodeContainer(TreeModelNode node);
    private sealed virtual override IList`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.GetNodes(object dataValue);
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModel.NeedUpdateChildren(TreeModelNode node);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.UpdateChildren(TreeModelNode node, List`1<TreeModelNode> children);
    private sealed virtual override IDisposable JetBrains.Application.UI.TreeModels.TreeModel.UpdateCookie();
    private sealed virtual override IEnumerable`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.GetDescendants();
    protected ITreeModelNode get_Root();
    public sealed virtual IBindableCollection`1<ITreeModelNode> get_ChildrenRaw();
    public sealed virtual IBindableView`1<ITreeModelNode> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public sealed virtual ReadWriteLock get_Lock();
    [CompilerGeneratedAttribute]
private void set_Lock(ReadWriteLock value);
    [CompilerGeneratedAttribute]
public sealed virtual ReadWriteLock get_UILock();
    [CompilerGeneratedAttribute]
private void set_UILock(ReadWriteLock value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ILiveTreeModelFilter> get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(IProperty`1<ILiveTreeModelFilter> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ILiveTreeModelComparer> get_Comparer();
    [CompilerGeneratedAttribute]
private void set_Comparer(IProperty`1<ILiveTreeModelComparer> value);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<ITreeModelNode> get_NodeComparer();
    [CompilerGeneratedAttribute]
private void set_NodeComparer(IEqualityComparer`1<ITreeModelNode> value);
    [CompilerGeneratedAttribute]
public sealed virtual INodeChildrenUpdater get_NodeChildrenUpdater();
    [CompilerGeneratedAttribute]
private void set_NodeChildrenUpdater(INodeChildrenUpdater value);
    public IBindableView`1<ITreeModelNode> get_Roots();
    public virtual bool get_SuspendDuringModelChanging();
    public sealed virtual bool get_ShouldDelay();
    public sealed virtual void set_ShouldDelay(bool value);
    protected virtual ITreeModelNode InitializeRootAndSubscribe();
    protected virtual ITreeModelNode InitializeRoot();
    protected virtual ITreeModelNode CreateNode(object dataItem);
    protected internal virtual void OnChildAdded(ITreeModelNode parent, ITreeModelNode child);
    protected internal virtual void OnChildRemoved(ITreeModelNode parent, ITreeModelNode child);
    [CanBeNullAttribute]
public ITreeModelNode GetByKey(object key);
    public void RegisterKey(ITreeModelNode node, object key);
    [NotNullAttribute]
protected ITreeModelNode Insert(object dataValue, ITreeModelNode parent);
    [NotNullAttribute]
protected ITreeModelNode Insert(ITreeModelNode node, ITreeModelNode parent);
    protected virtual void OnNodeCreated(ITreeModelNode node, ITreeModelNode parent);
    protected void Detach(ITreeModelNode node);
    protected void Remove(ITreeModelNode node);
    protected void Remove(object dataValue);
    [NotNullAttribute]
[ItemNotNullAttribute]
public sealed virtual ICollection`1<ITreeModelNode> GetNodes(object dataValue);
    public virtual void EvaluateNodeViewModel(ITreeModelNode node);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual void CleanAll();
    public sealed virtual void BeginEvaluate(object node, bool recursive, Action afterEvaluation);
    private void EvaluateNode(ITreeModelNode node, bool recursive);
    public virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    protected virtual void OnSuspended();
    protected virtual void OnResumed();
    public void add_OnSuspendedEvent(Action value);
    public void remove_OnSuspendedEvent(Action value);
    public void add_OnResumedEvent(Action value);
    public void remove_OnResumedEvent(Action value);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__9(ITreeModelNode n);
    [CompilerGeneratedAttribute]
private void <.ctor>b__a(PropertyChangedEventArgs`1<ILiveTreeModelFilter> _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__c(PropertyChangedEventArgs`1<ILiveTreeModelComparer> _);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__b(ITreeModelNode n);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__d(ITreeModelNode n);
    [CompilerGeneratedAttribute]
private void <InitializeRootAndSubscribe>b__15();
    [CompilerGeneratedAttribute]
private void <InitializeRootAndSubscribe>b__16();
}
public abstract class JetBrains.Application.UI.TreeModels.New.LiveTreeModel`1 : LiveTreeModel {
    [NotNullAttribute]
protected TRoot Root { get; }
    protected LiveTreeModel`1(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> comparer);
    protected TRoot get_Root();
    protected virtual ITreeModelNode InitializeRoot();
    protected abstract virtual TRoot InitializeTypedRoot();
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeNode : LiveTreeNode`1<ITreeModelNode> {
    public LiveTreeNode(LiveTreeModel model, object dataValue);
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeNode`1 : object {
    private ILogger myLogger;
    public static IDependencyDefinition ChildrenCountDependency;
    private PropertyChangedEventHandler PropertyChanged;
    private EventHandler`1<EventArgs> Disposed;
    private LiveTreeNodeCollection`1<T, T> myChildrenRaw;
    private IBindableView`1<T> myChildren;
    private IBindableView`1<T> myChildrenFiltered;
    [CompilerGeneratedAttribute]
private ITreeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeModelNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeModelNodeModifiers <JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<T, ITreeModelNode> CS$<>9__CachedAnonymousMethodDelegate6;
    public ITreeModel Model { get; protected set; }
    public object DataValue { get; protected set; }
    public ITreeModelNode Parent { get; public set; }
    public bool IsDisposed { get; private set; }
    private TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.Model { get; }
    private TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.Parent { get; }
    private object JetBrains.Util.IPresentableStructureElement.PresentationObject { get; }
    private IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.Children { get; }
    private IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.ChildrenUnsorted { get; }
    private bool JetBrains.Application.UI.TreeModels.TreeModelNode.HasChildren { get; }
    private TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers { get; private set; }
    public IBindableView`1<T> Children { get; }
    public IBindableView`1<T> ChildrenFiltered { get; }
    public IBindableCollection`1<T> ChildrenRaw { get; }
    private IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenRaw { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.Children { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenFiltered { get; }
    public bool IsInitialized { get; }
    public LiveTreeNode`1(LiveTreeModel model, object dataValue);
    private static LiveTreeNode`1();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void add_Disposed(EventHandler`1<EventArgs> value);
    public sealed virtual void remove_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModel get_Model();
    [CompilerGeneratedAttribute]
protected void set_Model(ITreeModel value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_DataValue();
    [CompilerGeneratedAttribute]
protected void set_DataValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModelNode get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(ITreeModelNode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    private sealed virtual override TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.get_Model();
    private sealed virtual override TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.get_Parent();
    private sealed virtual override object JetBrains.Util.IPresentableStructureElement.get_PresentationObject();
    private sealed virtual override IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_Children();
    private sealed virtual override IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_ChildrenUnsorted();
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModelNode.get_HasChildren();
    [CompilerGeneratedAttribute]
private sealed virtual override TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.get_Modifiers();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModelNode.set_Modifiers(TreeModelNodeModifiers value);
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    public sealed virtual IBindableView`1<T> get_Children();
    public IBindableView`1<T> get_ChildrenFiltered();
    public sealed virtual IBindableCollection`1<T> get_ChildrenRaw();
    private sealed virtual override IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenRaw();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_Children();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenFiltered();
    public bool get_IsInitialized();
    public sealed virtual void Reinitialize();
    private string DumpTree(ITreeModel model);
    private string DumpBranch(ITreeModelNode node);
    private void DumpNode(ITreeModelNode node, StringBuilder builder, string indent);
    protected virtual void InitAggregators(IBindableView`1<T> filteredChildrenRaw);
    private IBindableView`1<T> InitializeFilteredChildren();
    private IBindableView`1<T> Initialize();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual string ToString();
    public virtual void Dispose();
    public virtual void Uninitialize();
    [CompilerGeneratedAttribute]
private static ITreeModelNode <Initialize>b__5(T x);
}
public class JetBrains.Application.UI.TreeModels.New.MainThreadExecutor : object {
    private IThreading myThreading;
    public MainThreadExecutor(IThreading threading);
    public sealed virtual void Execute(Lifetime lifetime, string name, Action action);
}
public enum JetBrains.Application.UI.TreeModels.New.NodeChildrenUpdatePolicy : Enum {
    public int value__;
    public static NodeChildrenUpdatePolicy Sync;
    public static NodeChildrenUpdatePolicy Async;
}
public class JetBrains.Application.UI.TreeModels.New.OrLiveFilter : object {
    private List`1<ILiveTreeModelFilter> myFilters;
    [CompilerGeneratedAttribute]
private static Func`2<ILiveTreeModelFilter, IEnumerable`1<IDependencyDefinition>> CS$<>9__CachedAnonymousMethodDelegate2;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public OrLiveFilter(ILiveTreeModelFilter filter, ILiveTreeModelFilter anotherFilter, ILiveTreeModelFilter[] otherFilters);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual bool Matches(ITreeModelNode node);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDependencyDefinition> <get_Dependencies>b__1(ILiveTreeModelFilter liveTreeModelFilter);
}
internal class JetBrains.Application.UI.TreeModels.New.SyncNodeChildrenUpdater : object {
    private ISync myModelLock;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Idle>k__BackingField;
    public IProperty`1<bool> Idle { get; private set; }
    public bool IsSync { get; }
    public SyncNodeChildrenUpdater(Lifetime lifetime, ISync modelLock);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Idle();
    [CompilerGeneratedAttribute]
private void set_Idle(IProperty`1<bool> value);
    public sealed virtual bool get_IsSync();
    public sealed virtual void Clean();
    public sealed virtual IBindableView`1<T> UpdateNode(ITreeModelNode node, IBindableView`1<T> children);
    public sealed virtual void DetachNodeFromParent(ITreeModelNode node);
    public sealed virtual void AttachNodeToParent(ITreeModelNode node, ITreeModelNode parent);
    public sealed virtual void DisposeNode(ITreeModelNode node);
}
public class JetBrains.Application.UI.TreeModels.New.SyncNodeChildrenUpdaterFactory : object {
    public sealed virtual INodeChildrenUpdater Create(Lifetime lifetime, ISync bgWriteLock, ReadWriteLock uiLock, GroupingEventProlongation prolongationPolicy);
}
public class JetBrains.Application.UI.TreeModels.OccurrenceFlexibleTreeModelGrouping`1 : object {
    private ICollection`1<TreeGroupFeatureExtractor`1<TItem>> myExtractors;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; private set; }
    public OccurrenceFlexibleTreeModelGrouping`1(TreeGroupFeatureExtractor`1[] extractors);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
}
public enum JetBrains.Application.UI.TreeModels.RecursionPreventionStyle : Enum {
    public int value__;
    public static RecursionPreventionStyle None;
    public static RecursionPreventionStyle StopOnOccurrence;
    public static RecursionPreventionStyle StopOnChain;
}
public abstract class JetBrains.Application.UI.TreeModels.TreeDemandModel : TreeModelBase {
    [CompilerGeneratedAttribute]
private RecursionPreventionStyle <RecursionPrevention>k__BackingField;
    public RecursionPreventionStyle RecursionPrevention { get; public set; }
    [CompilerGeneratedAttribute]
public RecursionPreventionStyle get_RecursionPrevention();
    [CompilerGeneratedAttribute]
public void set_RecursionPrevention(RecursionPreventionStyle value);
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    protected virtual void PerformUpdate();
    protected void BuildRoots();
    private void BuildChildren(TreeDemandNode node);
    protected abstract virtual bool HasChildren(TreeModelNode modelNode);
    protected abstract virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
public class JetBrains.Application.UI.TreeModels.TreeDemandModel2 : TreeDemandModel {
    private EventHandler`1<ChildrenWantedEventArgs> ChildrenWanted;
    public TreeDemandModel2(Func`2<object, IEnumerable> children);
    public TreeDemandModel2(Func`2<object, IEnumerable> children, int expandToLevel);
    public void add_ChildrenWanted(EventHandler`1<ChildrenWantedEventArgs> value);
    public void remove_ChildrenWanted(EventHandler`1<ChildrenWantedEventArgs> value);
    public void Expand(int levels);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
    protected IEnumerable FireChildrenWanted(object dataValue);
    public IEnumerable`1<TreeModelNode> GetAllNodes(int levels);
    protected virtual bool HasChildren(TreeModelNode modelNode);
}
public class JetBrains.Application.UI.TreeModels.TreeGroupFeatureExtractor`1 : object {
    private string myTitle;
    private ITreeGroupProvider`1<TTT> myGroupProvider;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    public string Title { get; }
    public bool IsEnabled { get; public set; }
    public bool IsVisible { get; public set; }
    public TreeGroupFeatureExtractor`1(string title, ITreeGroupProvider`1<TTT> groupProvider);
    public string get_Title();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    public sealed virtual object ExtractGroupObject(TTT item);
    public virtual string ToString();
}
public class JetBrains.Application.UI.TreeModels.TreeGroupModel`1 : TreeModelBase {
    private Predicate`1<TItem> myFilter;
    private int myFilteredCount;
    private ICollection`1<ITreeGroupProvider`1<TItem>> myGroupProviders;
    private IList`1<TItem> myItems;
    private int myTotalCount;
    public IEnumerable`1<TItem> Items { get; public set; }
    public int TotalCount { get; }
    public int FilteredCount { get; }
    public Predicate`1<TItem> Filter { get; public set; }
    public ICollection`1<ITreeGroupProvider`1<TItem>> GroupProviders { get; public set; }
    public TreeGroupModel`1(IEqualityComparer`1<object> equalityComparer);
    public IEnumerable`1<TItem> get_Items();
    public void set_Items(IEnumerable`1<TItem> value);
    public int get_TotalCount();
    public int get_FilteredCount();
    public Predicate`1<TItem> get_Filter();
    public void set_Filter(Predicate`1<TItem> value);
    public ICollection`1<ITreeGroupProvider`1<TItem>> get_GroupProviders();
    public void set_GroupProviders(ICollection`1<ITreeGroupProvider`1<TItem>> value);
    public void MoveNodeUp(TreeModelNode node);
    public void MoveNodeDown(TreeModelNode node);
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    protected virtual void PerformUpdate();
    private bool FilterItem(TItem item);
    protected virtual void ProcessItem(TItem item);
}
public interface JetBrains.Application.UI.TreeModels.TreeModel {
    [NotNullAttribute]
public IEqualityComparer`1<object> EqualityComparer { get; }
    public IBindableView`1<TreeModelNode> Roots { get; }
    public IBindableCollection`1<TreeModelNode> RootsUnsorted { get; }
    public bool InUpdate { get; }
    [NotNullAttribute]
public IComparer`1<TreeModelNode> Comparer { get; public set; }
    public abstract virtual IEqualityComparer`1<object> get_EqualityComparer();
    public abstract virtual IBindableView`1<TreeModelNode> get_Roots();
    public abstract virtual IBindableCollection`1<TreeModelNode> get_RootsUnsorted();
    public abstract virtual bool get_InUpdate();
    public abstract virtual IComparer`1<TreeModelNode> get_Comparer();
    public abstract virtual void set_Comparer(IComparer`1<TreeModelNode> value);
    public abstract virtual void Update();
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
    public abstract virtual void add_Updating(EventHandler value);
    public abstract virtual void remove_Updating(EventHandler value);
    public abstract virtual void add_Updated(EventHandler value);
    public abstract virtual void remove_Updated(EventHandler value);
    public abstract virtual TreeModelNode GetNodeContainer(TreeModelNode node);
    public abstract virtual IList`1<TreeModelNode> GetNodes(object dataValue);
    public abstract virtual bool NeedUpdateChildren(TreeModelNode node);
    public abstract virtual void UpdateChildren(TreeModelNode node, List`1<TreeModelNode> children);
    public abstract virtual IDisposable UpdateCookie();
    public abstract virtual IEnumerable`1<TreeModelNode> GetDescendants();
}
public abstract class JetBrains.Application.UI.TreeModels.TreeModelBase : object {
    private OneToListMap`2<object, TreeModelNode> myNodeMap;
    private FakeBindableList`1<TreeModelNode> myRoots;
    private JetHashSet`1<TreeModelNode> myChangedNodeContents;
    private IComparer`1<TreeModelNode> myComparer;
    private bool myDirty;
    private bool myChangedRoots;
    private int myUpdateCount;
    private EventHandler Updating;
    private EventHandler Updated;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<object> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<object> EqualityComparer { get; private set; }
    public IBindableView`1<TreeModelNode> Roots { get; }
    public IBindableCollection`1<TreeModelNode> RootsUnsorted { get; }
    public bool InUpdate { get; }
    public IComparer`1<TreeModelNode> Comparer { get; public set; }
    protected TreeModelBase(IEqualityComparer`1<object> equalityComparer);
    [CompilerGeneratedAttribute]
public sealed virtual IEqualityComparer`1<object> get_EqualityComparer();
    [CompilerGeneratedAttribute]
private void set_EqualityComparer(IEqualityComparer`1<object> value);
    public sealed virtual IBindableView`1<TreeModelNode> get_Roots();
    public sealed virtual IBindableCollection`1<TreeModelNode> get_RootsUnsorted();
    public sealed virtual bool get_InUpdate();
    public sealed virtual IComparer`1<TreeModelNode> get_Comparer();
    public sealed virtual void set_Comparer(IComparer`1<TreeModelNode> value);
    public sealed virtual void Update();
    public sealed virtual IDisposable UpdateCookie();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    protected void NeedUpdate();
    private void DoUpdate();
    public sealed virtual void add_Updating(EventHandler value);
    public sealed virtual void remove_Updating(EventHandler value);
    public sealed virtual void add_Updated(EventHandler value);
    public sealed virtual void remove_Updated(EventHandler value);
    protected virtual void OnUpdating();
    protected virtual void OnUpdated();
    protected abstract virtual void PerformUpdate();
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    protected TreeModelNode Insert(TreeModelNode parent, object dataValue);
    protected void Remove(TreeModelNode modelNode);
    protected void Remove(object dataValue);
    public virtual TreeModelNode GetNodeContainer(TreeModelNode node);
    public virtual IList`1<TreeModelNode> GetNodes(object dataValue);
    protected virtual void Clear();
    internal void SortRoots(IComparer`1<TreeModelNode> comparer);
    public virtual IEnumerable`1<TreeModelNode> GetDescendants();
    public sealed virtual bool NeedUpdateChildren(TreeModelNode node);
    public sealed virtual void UpdateChildren(TreeModelNode node, List`1<TreeModelNode> children);
}
public class JetBrains.Application.UI.TreeModels.TreeModelGrouping`1 : object {
    private ICollection`1<ITreeGroupProvider`1<T>> myGroups;
    private string myName;
    public string Name { get; }
    public ICollection`1<ITreeGroupProvider`1<T>> Groups { get; }
    public TreeModelGrouping`1(string name);
    public TreeModelGrouping`1(string name, ITreeGroupProvider`1[] groups);
    public TreeModelGrouping`1(string name, ICollection`1<ITreeGroupProvider`1<T>> groups);
    public string get_Name();
    public ICollection`1<ITreeGroupProvider`1<T>> get_Groups();
}
public interface JetBrains.Application.UI.TreeModels.TreeModelNode {
    public TreeModel Model { get; }
    public TreeModelNode Parent { get; }
    public object DataValue { get; }
    public IBindableView`1<TreeModelNode> Children { get; }
    public IBindableCollection`1<TreeModelNode> ChildrenUnsorted { get; }
    public bool HasChildren { get; }
    public TreeModelNodeModifiers Modifiers { get; public set; }
    public abstract virtual TreeModel get_Model();
    public abstract virtual TreeModelNode get_Parent();
    public abstract virtual object get_DataValue();
    public abstract virtual IBindableView`1<TreeModelNode> get_Children();
    public abstract virtual IBindableCollection`1<TreeModelNode> get_ChildrenUnsorted();
    public abstract virtual bool get_HasChildren();
    public abstract virtual TreeModelNodeModifiers get_Modifiers();
    public abstract virtual void set_Modifiers(TreeModelNodeModifiers value);
    public abstract virtual int GetItemCount();
    public abstract virtual int GetItemCount();
}
public class JetBrains.Application.UI.TreeModels.TreeModelNodeBase : object {
    private TreeModel myModel;
    private TreeModelNode myParent;
    private object myDataValue;
    private FakeBindableList`1<TreeModelNode> myChildren;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private TreeModelNodeModifiers <Modifiers>k__BackingField;
    public TreeModel Model { get; }
    public TreeModelNode Parent { get; }
    public object DataValue { get; }
    public IBindableView`1<TreeModelNode> Children { get; }
    public IBindableCollection`1<TreeModelNode> ChildrenUnsorted { get; }
    public bool HasChildren { get; }
    public TreeModelNodeModifiers Modifiers { get; public set; }
    private object JetBrains.Util.IPresentableStructureElement.PresentationObject { get; }
    public TreeModelNodeBase(TreeModel model, TreeModelNode parent, object dataValue);
    public sealed virtual TreeModel get_Model();
    public sealed virtual TreeModelNode get_Parent();
    public sealed virtual object get_DataValue();
    public virtual IBindableView`1<TreeModelNode> get_Children();
    public virtual IBindableCollection`1<TreeModelNode> get_ChildrenUnsorted();
    public virtual bool get_HasChildren();
    [CompilerGeneratedAttribute]
public sealed virtual TreeModelNodeModifiers get_Modifiers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Modifiers(TreeModelNodeModifiers value);
    private sealed virtual override object JetBrains.Util.IPresentableStructureElement.get_PresentationObject();
    public virtual int GetItemCount();
    public virtual int GetItemCount();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.TreeModels.TreeModelNodeEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable GetBrackets(TreeModelNode node);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<TreeModelNode> GetDescendants(TreeModelNode node);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TreeModelNode> GetSelfAndDescendants(TreeModelNode node);
    private static Nullable`1<bool> CheckIsNewModel(TreeModelNode node);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.TreeModels.TreeModelNodeModifiers : Enum {
    public int value__;
    public static TreeModelNodeModifiers None;
    public static TreeModelNodeModifiers Recursive;
}
public class JetBrains.Application.UI.TreeModels.TreeSection : object {
    private TreeModel myModel;
    private string myTitle;
    public string Title { get; }
    public TreeModel Model { get; }
    public TreeSection(TreeModel model, string title);
    public virtual string get_Title();
    public TreeModel get_Model();
    public virtual string ToString();
    protected bool Equals(TreeSection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.UI.TreeModels.TreeSectionModel : TreeModelBase {
    private IList`1<TreeSection> mySections;
    public IList`1<TreeSection> Sections { get; public set; }
    public IList`1<TreeSection> get_Sections();
    public void set_Sections(IList`1<TreeSection> value);
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    public virtual TreeModelNode GetNodeContainer(TreeModelNode node);
    public virtual IList`1<TreeModelNode> GetNodes(object dataValue);
    protected virtual void Clear();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    private void SubModelUpdating(object sender, EventArgs e);
    private void SubModelUpdated(object sender, EventArgs e);
    protected virtual void PerformUpdate();
}
public class JetBrains.Application.UI.TreeModels.TreeSeparator : object {
    private string myTitle;
    public string Title { get; public set; }
    public TreeSeparator(string title);
    public string get_Title();
    public void set_Title(string value);
    public virtual string ToString();
}
public class JetBrains.Application.UI.TreeModels.TreeSimpleModel : TreeModelBase {
    public void Insert(object parentValue, object childValue);
    public void Remove(object childValue);
    protected virtual void PerformUpdate();
}
public abstract class JetBrains.Application.UI.UIAutomation.AAutomation : object {
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Application.UI.UIAutomation.AutomationWrapper : AAutomation {
    [CanBeNullAttribute]
public object Content;
    public AutomationWrapper(object content);
}
public class JetBrains.Application.UI.UIAutomation.EitherControl : object {
    private Control myControl;
    private UIElement myElement;
    private JetElementHost myElementHost;
    private DockedWindowsFormsHost myWindowsFormsHost;
    private IAutomation myAutomation;
    private bool myIsDisposed;
    public Control Control { get; }
    public UIElement Element { get; }
    [CanBeNullAttribute]
public IAutomation Automation { get; }
    public bool IsAvalon { get; }
    public bool IsWinForms { get; }
    public bool IsAutomation { get; }
    public bool IsWrapperCreated { get; }
    public bool HasUiElement { get; }
    public bool IsDisposed { get; }
    public EitherControl(Control control);
    public EitherControl(Lifetime lifetime, Control control);
    public EitherControl(UIElement element);
    public EitherControl(Lifetime lifetime, UIElement element);
    public EitherControl(IAutomation automation);
    public EitherControl(Lifetime lifetime, IAutomation automation);
    public Control get_Control();
    public UIElement get_Element();
    public IAutomation get_Automation();
    public bool get_IsAvalon();
    public bool get_IsWinForms();
    public bool get_IsAutomation();
    public bool get_IsWrapperCreated();
    public bool get_HasUiElement();
    public bool get_IsDisposed();
    public static EitherControl FromObject(object either);
    [ContractAnnotationAttribute("automation:null => null; automation:notnull => notnull")]
public static EitherControl FromAutomation(IAutomation automation);
    [ContractAnnotationAttribute("automation:null => null; automation:notnull => notnull")]
public static EitherControl FromAutomation(Lifetime lifetime, IAutomation automation);
    public static Control op_Implicit(EitherControl either);
    public static UIElement op_Implicit(EitherControl either);
    public static EitherControl op_Implicit(Control control);
    public static EitherControl op_Implicit(UIElement element);
    public virtual string ToString();
    public EitherControl BindToLifetime(Lifetime lifetime);
    public sealed virtual void Dispose();
    public static EitherControl CreateFocusableWindowsFormsHost(Lifetime lifetime, Control winFormsControl);
}
public class JetBrains.Application.UI.UIAutomation.EitherControlAutomation : AAutomation {
    [NotNullAttribute]
public EitherControl EitherControl;
    public EitherControlAutomation(EitherControl eithercontrol);
    [ContractAnnotationAttribute("eithercontrol:null => null; notnull => notnull")]
public static IAutomation FromEitherControl(EitherControl eithercontrol);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.UIAutomation.EitherControlEx : object {
    [ExtensionAttribute]
public static void AddChild(EitherControl parent, UIElement child, OnError onError);
    [ExtensionAttribute]
public static void AddChild(EitherControl parent, Control child, OnError onError);
    [ExtensionAttribute]
public static Control GetWinFormsControlWithViewsRegistrySupport(EitherControl eithercontrol, Lifetime lifetime, IAutomationViewsRegistry viewsreg, DataContexts datacontexts);
}
public interface JetBrains.Application.UI.UIAutomation.IAutomation {
}
public static class JetBrains.Application.UI.Updates.UpdateFilterRunner : object {
    [CompilerGeneratedAttribute]
private static Func`2<XmlReader, IList`1<UpdateInfo>> CS$<>9__CachedAnonymousMethodDelegateb;
    private static MemoryStream CopyStream(Stream input);
    [NotNullAttribute]
public static IList`1<UpdateInfo> RunFilter(Stream streamFilter, Action`1<XmlWriter> FWriteLocalEnvironmentData, UpdateXsltTestResult testResult);
    [NotNullAttribute]
public static XslCompiledTransform StreamToXslt(Stream stream);
    private static Func`1<IList`1<UpdateInfo>> GetPipeRunner(Action`1<Action`1<XmlReader>> FPipe, Func`2<XmlReader, IList`1<UpdateInfo>> FParse);
    [NotNullAttribute]
private static Func`2<XmlReader, IList`1<UpdateInfo>> GetResultParser();
    [NotNullAttribute]
private static Action`2<XmlReader, XmlWriter> GetXslTransformer(Stream streamFilter);
    [CompilerGeneratedAttribute]
private static IList`1<UpdateInfo> <GetResultParser>b__a(XmlReader reader);
}
[XmlTypeAttribute]
[XmlRootAttribute]
public class JetBrains.Application.UI.Updates.UpdateInfo : object {
    public static string RootElementName;
    [XmlElementAttribute]
public string CompanyName;
    [XmlElementAttribute]
public string Description;
    [XmlElementAttribute]
public string DownloadUri;
    [XmlElementAttribute]
public string IconData;
    [XmlElementAttribute]
public string InformationUri;
    [XmlElementAttribute]
public bool IsFree;
    [XmlElementAttribute]
public string PriceTag;
    [XmlElementAttribute]
public string ProductFullName;
    [XmlElementAttribute]
public string ProductName;
    [XmlElementAttribute]
public string ProductVersion;
    [XmlAnyAttributeAttribute]
public XmlAttribute[] ReservedA;
    [XmlAnyElementAttribute]
public XmlElement[] ReservedE;
    [XmlElementAttribute]
public string Title;
    [XmlElementAttribute]
public string UpdateKind;
    [NotNullAttribute]
[XmlIgnoreAttribute]
public string Identity { get; }
    private static UpdateInfo();
    public string get_Identity();
    public void AssertVaild();
}
[GlobalSettingsUpgraderAttribute]
public class JetBrains.Application.UI.Updates.UpdatesManagerSettingsUpgrader : object {
    private IContextBoundSettingsStore myStore;
    public sealed virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "UpdatesManager settings")]
public class JetBrains.Application.UI.Updates.UpdatesMangerSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "DeferInitDownloadTime")]
public TimeSpan DeferInitDownloadTime;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Last Update Check")]
public DateTime LastUpdateCheck;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether to download the data for new updates.")]
public bool IsDownloadUpdateDataAllowed;
    [SettingsIndexedEntryAttribute("Annotation namespaces")]
public IIndexedEntry`2<string, string> DismissedProductAndVersions;
}
public class JetBrains.Application.UI.Updates.Utils.UpdateXsltTestResult : object {
    [CompilerGeneratedAttribute]
private string <Xslt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterableData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Xml>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Xslt { get; public set; }
    public string FilterableData { get; public set; }
    public string Xml { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Xslt();
    [CompilerGeneratedAttribute]
public void set_Xslt(string value);
    [CompilerGeneratedAttribute]
public string get_FilterableData();
    [CompilerGeneratedAttribute]
public void set_FilterableData(string value);
    [CompilerGeneratedAttribute]
public string get_Xml();
    [CompilerGeneratedAttribute]
public void set_Xml(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
public static class JetBrains.Application.UI.Utils.FlowDocumentUtil : object {
    [NotNullAttribute]
private static Dictionary`2<Regex, string> ourReplaceDictionary;
    [CompilerGeneratedAttribute]
private static RequestNavigateEventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    private static FlowDocumentUtil();
    [NotNullAttribute]
public static Span ConvertDescriptionToSpan(string description);
    [NotNullAttribute]
[PureAttribute]
private static string ConvertHtmlTagsToXamlTags(string html);
    [CompilerGeneratedAttribute]
private static void <ConvertDescriptionToSpan>b__0(object sender, RequestNavigateEventArgs e);
}
public class JetBrains.Application.UI.Utils.FocusRestoringChain : object {
    private WeakCollection`1<IInputElement> myPreservedElements;
    public FocusRestoringChain(IEnumerable`1<IInputElement> chain);
    public static FocusRestoringChain Preserve();
    public void Restore();
    private bool IsValid(IInputElement element);
}
public class JetBrains.Application.UI.Utils.HighlightedRange : ValueType {
    public static HighlightedRange Empty;
    public int Start;
    public int Count;
    public HighlightedRange(int start, int count);
    private static HighlightedRange();
}
public interface JetBrains.Application.UI.Utils.IColorResourseDictionaryNotifier {
    public ISimpleSignal ColorsUpdated { get; }
    public abstract virtual ISimpleSignal get_ColorsUpdated();
}
public class JetBrains.Application.UI.Utils.MatchingInfo : object {
    private string myIdentifier;
    private Int32[] modreq(System.Runtime.CompilerServices.IsVolatile) myMatches;
    public int ResultScore;
    private bool myMatchingIndiciesAreCorrect;
    private int myDistanceToIdentifier;
    [CanBeNullAttribute]
public MatchingInfo PreviousMatchingInfo;
    [CompilerGeneratedAttribute]
private object <ContextData>k__BackingField;
    public object ContextData { get; public set; }
    public bool MatchingIndiciesAreCorrect { get; }
    public string Identifier { get; }
    [CanBeNullAttribute]
public Int32[] Matches { get; }
    private MatchingInfo(string identifier, Int32[] indices, MatcherScore score, bool matchingIndiciesAreCorrect, Func`2<MatcherScore, int> adjustmentFunc, int distanceToIdentifier);
    public MatchingInfo(IIdentifierMatcher matcher, string identifier, bool matchingIndiciesAreCorrect, Func`2<MatcherScore, int> adjustmentFunc, int distanceToIdentifier);
    [CompilerGeneratedAttribute]
public object get_ContextData();
    [CompilerGeneratedAttribute]
public void set_ContextData(object value);
    public static MatchingInfo CreateFakeMatchingInfo(string text, Func`2<MatcherScore, int> adjustmentFunc, MatcherScore score);
    public static MatchingInfo CreateSubstringMatchingInfo(string text, int substringStartIndex, int substringLength, MatcherScore score, Func`2<MatcherScore, int> adjustmentFunc);
    public MatchingInfo CloneWithAdjustmentFunc(Func`2<MatcherScore, int> adjustmentFunc);
    public bool get_MatchingIndiciesAreCorrect();
    public string get_Identifier();
    protected bool Equals(MatchingInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Int32[] get_Matches();
    public int GetDistanceToIdentifier();
    public void AssignNewMatchingIndicies(Int32[] matchingIndicies);
    public void SetMatchingIndiciesInvalid();
}
public static class JetBrains.Application.UI.Utils.ScreenUtil : object {
    private static bool ourIsRunningUnderWindows;
    [CompilerGeneratedAttribute]
private static Func`2<Screen, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public static Rectangle PrimaryScreenBounds { get; }
    public static Rectangle PrimaryScreenWorkingArea { get; }
    private static ScreenUtil();
    public static Rectangle get_PrimaryScreenBounds();
    public static Rectangle get_PrimaryScreenWorkingArea();
    public static int GetBitsPerPixel();
    public static Rectangle GetBounds(IWin32Window window);
    public static Rectangle GetWorkingArea(IWin32Window window);
    public static Rectangle GetBounds(Point point);
    public static Rectangle GetBounds(Rectangle rect);
    public static Rectangle GetBounds(IntPtr hwnd);
    public static Rectangle GetWorkingArea(Point point);
    public static Rectangle GetWorkingArea(Rectangle rect);
    public static Rectangle GetWorkingArea(IntPtr hwnd);
    [CompilerGeneratedAttribute]
private static int <GetBitsPerPixel>b__0(Screen x);
}
public class JetBrains.Application.UI.Utils.ThemedColorTable : ProfessionalColorTable {
    private ColorTheme myColorTheme;
    public Color ToolStripGradientBegin { get; }
    public Color ToolStripGradientEnd { get; }
    public Color ToolStripGradientMiddle { get; }
    public Color ToolStripPanelGradientBegin { get; }
    public Color ToolStripPanelGradientEnd { get; }
    public Color ToolStripContentPanelGradientBegin { get; }
    public Color ToolStripContentPanelGradientEnd { get; }
    public Color ToolStripBorder { get; }
    public Color RaftingContainerGradientBegin { get; }
    public Color RaftingContainerGradientEnd { get; }
    public Color GripDark { get; }
    public Color GripLight { get; }
    public Color SeparatorDark { get; }
    public Color SeparatorLight { get; }
    public Color ButtonCheckedGradientBegin { get; }
    public Color ButtonCheckedGradientEnd { get; }
    public Color ButtonCheckedGradientMiddle { get; }
    public Color ButtonCheckedHighlight { get; }
    public Color ButtonCheckedHighlightBorder { get; }
    public Color ButtonPressedBorder { get; }
    public Color ButtonPressedGradientBegin { get; }
    public Color ButtonPressedGradientEnd { get; }
    public Color ButtonPressedGradientMiddle { get; }
    public Color ButtonPressedHighlight { get; }
    public Color ButtonPressedHighlightBorder { get; }
    public Color ButtonSelectedBorder { get; }
    public Color ButtonSelectedGradientBegin { get; }
    public Color ButtonSelectedGradientEnd { get; }
    public Color ButtonSelectedGradientMiddle { get; }
    public Color ButtonSelectedHighlight { get; }
    public Color ButtonSelectedHighlightBorder { get; }
    public Color CheckBackground { get; }
    public Color CheckPressedBackground { get; }
    public Color CheckSelectedBackground { get; }
    public Color MenuBorder { get; }
    public Color MenuStripGradientBegin { get; }
    public Color MenuStripGradientEnd { get; }
    public Color MenuItemBorder { get; }
    public Color ImageMarginGradientBegin { get; }
    public Color ImageMarginGradientMiddle { get; }
    public Color ImageMarginGradientEnd { get; }
    public Color ImageMarginRevealedGradientBegin { get; }
    public Color ImageMarginRevealedGradientEnd { get; }
    public Color ImageMarginRevealedGradientMiddle { get; }
    public Color MenuItemSelected { get; }
    public Color MenuItemPressedGradientBegin { get; }
    public Color MenuItemPressedGradientMiddle { get; }
    public Color MenuItemPressedGradientEnd { get; }
    public Color MenuItemSelectedGradientBegin { get; }
    public Color MenuItemSelectedGradientEnd { get; }
    public Color ToolStripDropDownBackground { get; }
    public Color OverflowButtonGradientBegin { get; }
    public Color OverflowButtonGradientEnd { get; }
    public Color OverflowButtonGradientMiddle { get; }
    public ThemedColorTable(ColorTheme colorTheme);
    public virtual Color get_ToolStripGradientBegin();
    public virtual Color get_ToolStripGradientEnd();
    public virtual Color get_ToolStripGradientMiddle();
    public virtual Color get_ToolStripPanelGradientBegin();
    public virtual Color get_ToolStripPanelGradientEnd();
    public virtual Color get_ToolStripContentPanelGradientBegin();
    public virtual Color get_ToolStripContentPanelGradientEnd();
    public virtual Color get_ToolStripBorder();
    public virtual Color get_RaftingContainerGradientBegin();
    public virtual Color get_RaftingContainerGradientEnd();
    public virtual Color get_GripDark();
    public virtual Color get_GripLight();
    public virtual Color get_SeparatorDark();
    public virtual Color get_SeparatorLight();
    public virtual Color get_ButtonCheckedGradientBegin();
    public virtual Color get_ButtonCheckedGradientEnd();
    public virtual Color get_ButtonCheckedGradientMiddle();
    public virtual Color get_ButtonCheckedHighlight();
    public virtual Color get_ButtonCheckedHighlightBorder();
    public virtual Color get_ButtonPressedBorder();
    public virtual Color get_ButtonPressedGradientBegin();
    public virtual Color get_ButtonPressedGradientEnd();
    public virtual Color get_ButtonPressedGradientMiddle();
    public virtual Color get_ButtonPressedHighlight();
    public virtual Color get_ButtonPressedHighlightBorder();
    public virtual Color get_ButtonSelectedBorder();
    public virtual Color get_ButtonSelectedGradientBegin();
    public virtual Color get_ButtonSelectedGradientEnd();
    public virtual Color get_ButtonSelectedGradientMiddle();
    public virtual Color get_ButtonSelectedHighlight();
    public virtual Color get_ButtonSelectedHighlightBorder();
    public virtual Color get_CheckBackground();
    public virtual Color get_CheckPressedBackground();
    public virtual Color get_CheckSelectedBackground();
    public virtual Color get_MenuBorder();
    public virtual Color get_MenuStripGradientBegin();
    public virtual Color get_MenuStripGradientEnd();
    public virtual Color get_MenuItemBorder();
    public virtual Color get_ImageMarginGradientBegin();
    public virtual Color get_ImageMarginGradientMiddle();
    public virtual Color get_ImageMarginGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientBegin();
    public virtual Color get_ImageMarginRevealedGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientMiddle();
    public virtual Color get_MenuItemSelected();
    public virtual Color get_MenuItemPressedGradientBegin();
    public virtual Color get_MenuItemPressedGradientMiddle();
    public virtual Color get_MenuItemPressedGradientEnd();
    public virtual Color get_MenuItemSelectedGradientBegin();
    public virtual Color get_MenuItemSelectedGradientEnd();
    public virtual Color get_ToolStripDropDownBackground();
    public virtual Color get_OverflowButtonGradientBegin();
    public virtual Color get_OverflowButtonGradientEnd();
    public virtual Color get_OverflowButtonGradientMiddle();
}
[ObsoleteAttribute("A weird collection of helpers, toss to appropriate places.")]
public class JetBrains.Application.UI.Utils.TypeUtilities : object {
    [CompilerGeneratedAttribute]
private static Func`2<object, Type> CS$<>9__CachedAnonymousMethodDelegate1;
    public static IEnumerable CreateDynamicallyTypedList(IEnumerable source);
    public static Type GetCommonBaseClass(IEnumerable e);
    public static Type GetCommonBaseClass(Type[] types);
    [CompilerGeneratedAttribute]
private static Type <GetCommonBaseClass>b__0(object o);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "General settings of the application user interface.")]
public class JetBrains.Application.UI.Utils.UserInterfaceSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Interval of time for which the text input changes are deferred before they are committed. Helps to process considerable amounts of user input, rather than react to each keystroke.")]
public TimeSpan UserInputDeferTime;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether keyboard selection in lists should wrap around ends: pressing Up Arrow on the first item selects the last one, and vice versa.")]
public bool CyclicSelectionInLists;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "True: always show modal dialog when exception occurs. False: exception notification in status bar, collecting exceptions in background (if possible).")]
public bool AlwaysShowExceptionReporterDialog;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "True: mouse wheel messages are forced to be processed by the control under cursor. False: no behavior enforced; usually, this means the focused control is scrolled instead of the hovered one.")]
public bool IsFixingMouseWheel;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Shortcuts scheme")]
public string ShortcutSchemeName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether to use VS icons instead of R#. True: use VS icons, False: use R# icons.")]
public bool UseVsIcons;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether to hide VS menus. True: hide.")]
public bool HideVsMenus;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether to override VS refactorings. True: override.")]
public bool OverrideVsRefactorings;
}
public class JetBrains.Application.UI.Utils.ViewModelUtil.CommandSink : object {
    private Dictionary`2<ICommand, CommandCallbacks> myCommandToCallbacksMap;
    public void AddHandler(ICommand command, Action`1<T> execute, Predicate`1<T> canExecute);
    public void AddHandler(ICommand command, Action`1<object> execute, Predicate`1<object> canExecute);
    public void RemoveHandler(ICommand command);
    public virtual bool CanExecuteCommand(ICommand command, object parameter, Boolean& handled);
    public virtual void ExecuteCommand(ICommand command, object parameter, Boolean& handled);
}
public interface JetBrains.Application.UI.Utils.ViewModelUtil.ICommandSink {
    public abstract virtual bool CanExecuteCommand(ICommand command, object parameter, Boolean& handled);
    public abstract virtual void ExecuteCommand(ICommand command, object parameter, Boolean& handled);
}
public class JetBrains.Application.UI.Utils.VsFlatColorTable : ProfessionalColorTable {
    private Dictionary`2<KnownColors, Color> tanRGB;
    public Color ButtonCheckedGradientBegin { get; }
    public Color ButtonCheckedGradientEnd { get; }
    public Color ButtonCheckedGradientMiddle { get; }
    public Color ButtonPressedBorder { get; }
    public Color ButtonPressedGradientBegin { get; }
    public Color ButtonPressedGradientEnd { get; }
    public Color ButtonPressedGradientMiddle { get; }
    public Color ButtonSelectedBorder { get; }
    public Color ButtonSelectedGradientBegin { get; }
    public Color ButtonSelectedGradientEnd { get; }
    public Color ButtonSelectedGradientMiddle { get; }
    public Color CheckBackground { get; }
    public Color CheckPressedBackground { get; }
    public Color CheckSelectedBackground { get; }
    internal static string ColorScheme { get; }
    private Dictionary`2<KnownColors, Color> ColorTable { get; }
    public Color GripDark { get; }
    public Color GripLight { get; }
    public Color ImageMarginGradientBegin { get; }
    public Color ImageMarginGradientEnd { get; }
    public Color ImageMarginGradientMiddle { get; }
    public Color ImageMarginRevealedGradientBegin { get; }
    public Color ImageMarginRevealedGradientEnd { get; }
    public Color ImageMarginRevealedGradientMiddle { get; }
    public Color MenuBorder { get; }
    public Color MenuItemBorder { get; }
    public Color MenuItemPressedGradientBegin { get; }
    public Color MenuItemPressedGradientEnd { get; }
    public Color MenuItemPressedGradientMiddle { get; }
    public Color MenuItemSelected { get; }
    public Color MenuItemSelectedGradientBegin { get; }
    public Color MenuItemSelectedGradientEnd { get; }
    public Color MenuStripGradientBegin { get; }
    public Color MenuStripGradientEnd { get; }
    public Color OverflowButtonGradientBegin { get; }
    public Color OverflowButtonGradientEnd { get; }
    public Color OverflowButtonGradientMiddle { get; }
    public Color RaftingContainerGradientBegin { get; }
    public Color RaftingContainerGradientEnd { get; }
    public Color SeparatorDark { get; }
    public Color SeparatorLight { get; }
    public Color ToolStripBorder { get; }
    public Color ToolStripDropDownBackground { get; }
    public Color ToolStripGradientBegin { get; }
    public Color ToolStripGradientEnd { get; }
    public Color ToolStripGradientMiddle { get; }
    private bool UseBaseColorTable { get; }
    internal Color FromKnownColor(KnownColors color);
    internal static void InitTanLunaColors(Dictionary`2& rgbTable);
    public virtual Color get_ButtonCheckedGradientBegin();
    public virtual Color get_ButtonCheckedGradientEnd();
    public virtual Color get_ButtonCheckedGradientMiddle();
    public virtual Color get_ButtonPressedBorder();
    public virtual Color get_ButtonPressedGradientBegin();
    public virtual Color get_ButtonPressedGradientEnd();
    public virtual Color get_ButtonPressedGradientMiddle();
    public virtual Color get_ButtonSelectedBorder();
    public virtual Color get_ButtonSelectedGradientBegin();
    public virtual Color get_ButtonSelectedGradientEnd();
    public virtual Color get_ButtonSelectedGradientMiddle();
    public virtual Color get_CheckBackground();
    public virtual Color get_CheckPressedBackground();
    public virtual Color get_CheckSelectedBackground();
    internal static string get_ColorScheme();
    private Dictionary`2<KnownColors, Color> get_ColorTable();
    public virtual Color get_GripDark();
    public virtual Color get_GripLight();
    public virtual Color get_ImageMarginGradientBegin();
    public virtual Color get_ImageMarginGradientEnd();
    public virtual Color get_ImageMarginGradientMiddle();
    public virtual Color get_ImageMarginRevealedGradientBegin();
    public virtual Color get_ImageMarginRevealedGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientMiddle();
    public virtual Color get_MenuBorder();
    public virtual Color get_MenuItemBorder();
    public virtual Color get_MenuItemPressedGradientBegin();
    public virtual Color get_MenuItemPressedGradientEnd();
    public virtual Color get_MenuItemPressedGradientMiddle();
    public virtual Color get_MenuItemSelected();
    public virtual Color get_MenuItemSelectedGradientBegin();
    public virtual Color get_MenuItemSelectedGradientEnd();
    public virtual Color get_MenuStripGradientBegin();
    public virtual Color get_MenuStripGradientEnd();
    public virtual Color get_OverflowButtonGradientBegin();
    public virtual Color get_OverflowButtonGradientEnd();
    public virtual Color get_OverflowButtonGradientMiddle();
    public virtual Color get_RaftingContainerGradientBegin();
    public virtual Color get_RaftingContainerGradientEnd();
    public virtual Color get_SeparatorDark();
    public virtual Color get_SeparatorLight();
    public virtual Color get_ToolStripBorder();
    public virtual Color get_ToolStripDropDownBackground();
    public virtual Color get_ToolStripGradientBegin();
    public virtual Color get_ToolStripGradientEnd();
    public virtual Color get_ToolStripGradientMiddle();
    private bool get_UseBaseColorTable();
    public static Color GetAlphaBlendedColor(Graphics g, Color src, Color dest, int alpha);
    public static Color GetAlphaBlendedColorHighRes(Graphics graphics, Color src, Color dest, int alpha);
}
public class JetBrains.Application.UI.Utils.VsSpecialColorTable : ProfessionalColorTable {
    [NotNullAttribute]
private static Dictionary`2<KnownColors, Color> myColors;
    public static Nullable`1<bool> OverrideUseBaseColorTable;
    public Color ButtonCheckedGradientBegin { get; }
    public Color ButtonCheckedGradientEnd { get; }
    public Color ButtonCheckedGradientMiddle { get; }
    public Color ButtonPressedBorder { get; }
    public Color ButtonPressedGradientBegin { get; }
    public Color ButtonPressedGradientEnd { get; }
    public Color ButtonPressedGradientMiddle { get; }
    public Color ButtonSelectedBorder { get; }
    public Color ButtonSelectedGradientBegin { get; }
    public Color ButtonSelectedGradientEnd { get; }
    public Color ButtonSelectedGradientMiddle { get; }
    public Color CheckBackground { get; }
    public Color CheckPressedBackground { get; }
    public Color CheckSelectedBackground { get; }
    internal static string ColorScheme { get; }
    [NotNullAttribute]
public static Dictionary`2<KnownColors, Color> ColorTable { get; }
    public Color GripDark { get; }
    public Color GripLight { get; }
    public Color ImageMarginGradientBegin { get; }
    public Color ImageMarginGradientEnd { get; }
    public Color ImageMarginGradientMiddle { get; }
    public Color ImageMarginRevealedGradientBegin { get; }
    public Color ImageMarginRevealedGradientEnd { get; }
    public Color ImageMarginRevealedGradientMiddle { get; }
    public Color MenuBorder { get; }
    public Color MenuItemBorder { get; }
    public Color MenuItemPressedGradientBegin { get; }
    public Color MenuItemPressedGradientEnd { get; }
    public Color MenuItemPressedGradientMiddle { get; }
    public Color MenuItemSelected { get; }
    public Color MenuItemSelectedGradientBegin { get; }
    public Color MenuItemSelectedGradientEnd { get; }
    public Color MenuStripGradientBegin { get; }
    public Color MenuStripGradientEnd { get; }
    public Color OverflowButtonGradientBegin { get; }
    public Color OverflowButtonGradientEnd { get; }
    public Color OverflowButtonGradientMiddle { get; }
    public Color RaftingContainerGradientBegin { get; }
    public Color RaftingContainerGradientEnd { get; }
    public Color SeparatorDark { get; }
    public Color SeparatorLight { get; }
    public Color ToolStripBorder { get; }
    public Color ToolStripDropDownBackground { get; }
    public Color ToolStripGradientBegin { get; }
    public Color ToolStripGradientEnd { get; }
    public Color ToolStripGradientMiddle { get; }
    public Color StatusBar { get; }
    public Color StatusBarText { get; }
    protected bool UseBaseColorTable { get; }
    private static VsSpecialColorTable();
    internal Color FromKnownColor(KnownColors color);
    internal static void InitColors(Dictionary`2<KnownColors, Color> rgbTable);
    public virtual Color get_ButtonCheckedGradientBegin();
    public virtual Color get_ButtonCheckedGradientEnd();
    public virtual Color get_ButtonCheckedGradientMiddle();
    public virtual Color get_ButtonPressedBorder();
    public virtual Color get_ButtonPressedGradientBegin();
    public virtual Color get_ButtonPressedGradientEnd();
    public virtual Color get_ButtonPressedGradientMiddle();
    public virtual Color get_ButtonSelectedBorder();
    public virtual Color get_ButtonSelectedGradientBegin();
    public virtual Color get_ButtonSelectedGradientEnd();
    public virtual Color get_ButtonSelectedGradientMiddle();
    public virtual Color get_CheckBackground();
    public virtual Color get_CheckPressedBackground();
    public virtual Color get_CheckSelectedBackground();
    internal static string get_ColorScheme();
    public static Dictionary`2<KnownColors, Color> get_ColorTable();
    public virtual Color get_GripDark();
    public virtual Color get_GripLight();
    public virtual Color get_ImageMarginGradientBegin();
    public virtual Color get_ImageMarginGradientEnd();
    public virtual Color get_ImageMarginGradientMiddle();
    public virtual Color get_ImageMarginRevealedGradientBegin();
    public virtual Color get_ImageMarginRevealedGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientMiddle();
    public virtual Color get_MenuBorder();
    public virtual Color get_MenuItemBorder();
    public virtual Color get_MenuItemPressedGradientBegin();
    public virtual Color get_MenuItemPressedGradientEnd();
    public virtual Color get_MenuItemPressedGradientMiddle();
    public virtual Color get_MenuItemSelected();
    public virtual Color get_MenuItemSelectedGradientBegin();
    public virtual Color get_MenuItemSelectedGradientEnd();
    public virtual Color get_MenuStripGradientBegin();
    public virtual Color get_MenuStripGradientEnd();
    public virtual Color get_OverflowButtonGradientBegin();
    public virtual Color get_OverflowButtonGradientEnd();
    public virtual Color get_OverflowButtonGradientMiddle();
    public virtual Color get_RaftingContainerGradientBegin();
    public virtual Color get_RaftingContainerGradientEnd();
    public virtual Color get_SeparatorDark();
    public virtual Color get_SeparatorLight();
    public virtual Color get_ToolStripBorder();
    public virtual Color get_ToolStripDropDownBackground();
    public virtual Color get_ToolStripGradientBegin();
    public virtual Color get_ToolStripGradientEnd();
    public virtual Color get_ToolStripGradientMiddle();
    public Color get_StatusBar();
    public Color get_StatusBarText();
    protected bool get_UseBaseColorTable();
    public static Color GetAlphaBlendedColor(Graphics g, Color src, Color dest, int alpha);
    public static Color GetAlphaBlendedColorHighRes(Graphics graphics, Color src, Color dest, int alpha);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Utils.WaitCursorCookieAdapter : object {
    public virtual IDisposable CreateCookie();
}
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.Validation.ControlListenerProviderAttribute : Attribute {
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.Validation.FormValidators : object {
    public virtual IFormValidator GetOrCreate(Control control);
}
public interface JetBrains.Application.UI.Validation.IFormValidator {
    public Form Form { get; }
    public ICollectionEvents`1<IValidator> Validators { get; }
    public ICollectionEvents`1<IValidatorProvider> ValidatorProviders { get; }
    public ValidatorSeverity Severity { get; }
    public abstract virtual Form get_Form();
    public abstract virtual ICollectionEvents`1<IValidator> get_Validators();
    public abstract virtual ICollectionEvents`1<IValidatorProvider> get_ValidatorProviders();
    public abstract virtual ValidatorSeverity get_Severity();
    public abstract virtual void Update();
    public abstract virtual ValidatorSeverity ShowMessage();
    public abstract virtual void add_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    public abstract virtual void remove_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
}
public interface JetBrains.Application.UI.Validation.IValidator {
    public ValidatorSeverity Severity { get; }
    [NotNullAttribute]
public RichText Message { get; }
    [NotNullAttribute]
public IPopupLayouter Layouter { get; }
    [CanBeNullAttribute]
public IWindowlessControl WindowlessControl { get; }
    public abstract virtual ValidatorSeverity get_Severity();
    public abstract virtual RichText get_Message();
    public abstract virtual IPopupLayouter get_Layouter();
    public abstract virtual IWindowlessControl get_WindowlessControl();
    public abstract virtual void Update();
    public abstract virtual void add_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    public abstract virtual void remove_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    public abstract virtual void add_MessageChanged(EventHandler`1<PropertyChangedEventArgs`2<string, RichText>> value);
    public abstract virtual void remove_MessageChanged(EventHandler`1<PropertyChangedEventArgs`2<string, RichText>> value);
    public abstract virtual void add_LayouterChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IPopupLayouter>> value);
    public abstract virtual void remove_LayouterChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IPopupLayouter>> value);
    public abstract virtual void add_WindowlessControlChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IWindowlessControl>> value);
    public abstract virtual void remove_WindowlessControlChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IWindowlessControl>> value);
}
public interface JetBrains.Application.UI.Validation.IValidatorProvider {
    [NotNullAttribute]
public IEnumerable`1<IValidator> Validators { get; }
    public abstract virtual IEnumerable`1<IValidator> get_Validators();
}
public enum JetBrains.Application.UI.Validation.ValidatorSeverity : Enum {
    public int value__;
    public static ValidatorSeverity None;
    public static ValidatorSeverity Warning;
    public static ValidatorSeverity ImportantWarning;
    public static ValidatorSeverity Error;
}
public static class JetBrains.Application.UI.Validation.ValidatorSeverityHelper : object {
    public static string MessageBoxTitle;
    public static string IgnoreSuffix;
    private static ValidatorSeverityHelper();
    public static bool CanIgnore(ValidatorSeverity severity);
    public static string SeverityToMessagePrefix(ValidatorSeverity severity);
    public static ShowValidatorMessages SeverityToMessageDisplay(ValidatorSeverity severity);
}
public static class JetBrains.Application.UI.Validation.ValidatorUtil : object {
    public static IDataContext GetDataContext(object host);
}
[ShellComponentAttribute]
public class JetBrains.Application.UI.WindowManagement.FrameFocusHelper : object {
    public virtual void KeepCurrentFrame(Action nested);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.WindowManagement.FrameFocusHelperEx : object {
    [ExtensionAttribute]
public static T KeepCurrentFrame(IFrameFocusHelper frameFocusHelper, Func`1<T> nested);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.WindowManagement.HideFlags : Enum {
    public UInt32 value__;
    public static HideFlags None;
    public static HideFlags Scrolling;
    public static HideFlags Escape;
    public static HideFlags AnyOtherAction;
    public static HideFlags SelectionChanged;
    public static HideFlags FocusLoss;
    public static HideFlags Deactivated;
    public static HideFlags All;
}
public interface JetBrains.Application.UI.WindowManagement.IFrameFocusHelper {
    public abstract virtual void KeepCurrentFrame(Action nested);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.WindowManagement.ShellWindowUtil : object {
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, Window ownerwin);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, IWin32Window ownerwin);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, IntPtr handle);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, Void* handle);
    [ExtensionAttribute]
public static void SetOwner(Window window, IntPtr handle);
    [ExtensionAttribute]
public static void SetOwner(Window window, IWin32Window ownerwin);
    private static void FixCenterOwner(Window window, WindowInteropHelper helper);
}
public class JetBrains.Application.UI.WindowManagement.WindowAnchoringRect : AnchoringRect {
    private Void* myWindow;
    public Void* WindowHandle { get; }
    public WindowAnchoringRect(Lifetime lifetime, Void* window, IWindowsHookManager windowsHookManager);
    public WindowAnchoringRect(Lifetime lifetime, IWin32Window window, IWindowsHookManager windowsHookManager);
    public Void* get_WindowHandle();
    public void Update();
    [NotNullAttribute]
public static AnchoringRect AnchorToPrimaryMainWindowSafe(Lifetime lifetime, IMainWindow mainwin, IWindowsHookManager windowsHookManager);
    [NotNullAttribute]
public static AnchoringRect AnchorToActiveMainWindowSafe(Lifetime lifetime, IMainWindow mainwin, IWindowsHookManager windowsHookManager);
    [NotNullAttribute]
private static AnchoringRect AnchorToWindowSafe(Lifetime lifetime, IWin32Window window, IWindowsHookManager windowsHookManager);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Application.UI.WindowManagement.WindowClientAnchoringRect : AnchoringRect {
    public WindowClientAnchoringRect(Lifetime lifetime, Void* hwnd, RECT clientRect, IWindowsHookManager hookman);
}
public class JetBrains.Application.UI.WindowManagement.WindowFrame : object {
    private static PropertyId`1<string> ourDebugName;
    private static ILogger ourLogger;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
public IPropertyBag Bag;
    [NotNullAttribute]
public ISimpleSignal Closed;
    [NotNullAttribute]
public ISimpleSignal SwitchToFrameRequested;
    [NotNullAttribute]
public IProperty`1<bool> IsVisibleOnScreen;
    public IProperty`1<IntPtr> RootParentHwnd;
    public IProperty`1<EitherControl> UiElement;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [NotNullAttribute]
public IThreading Threading { get; private set; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    public WindowFrame(IThreading threading);
    private static WindowFrame();
    [CompilerGeneratedAttribute]
public IThreading get_Threading();
    [CompilerGeneratedAttribute]
private void set_Threading(IThreading value);
    public Lifetime get_Lifetime();
    [NotNullAttribute]
public static WindowFrame CreateDummyFrame(IThreading threading);
    private void InitLogging();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.WindowManagement.WindowFrameEx : object {
    public static PropertyId`1<WindowFrame> ParentWindowFrame;
    private static WindowFrameEx();
    [ExtensionAttribute]
[NotNullAttribute]
public static WindowFrame CreateChildFrame(WindowFrame thіs);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.WindowManagement.WindowFrameInteractiveEx : object {
    [ExtensionAttribute]
public static WindowFrame AttachToHwndStatic(WindowFrame frame, IWin32Window hwnd);
    [ExtensionAttribute]
public static void AttachToRootParentLive(WindowFrame frame, Lifetime lifetime, Void* hwndSampleWithinFrame, IWindowsHookManager hookman);
    public static WindowFrame CreateAvalonFrame(IThreading threading, UIElement element);
}
[ActionAttribute("Check for updates…")]
public class JetBrains.Application.Updates.CheckUpdatesManuallyAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ShellComponentAttribute]
public class JetBrains.Application.Updates.DefaultInProcessUpdater : object {
    public virtual IList`1<UpdateInfo> GetUpdates();
    public virtual bool GetUpdateNotificationsAllowed();
}
public interface JetBrains.Application.Updates.IInProcessUpdatesChecker {
    public abstract virtual IList`1<UpdateInfo> GetUpdates();
    public abstract virtual bool GetUpdateNotificationsAllowed();
}
public interface JetBrains.Application.Updates.ISupportUpdates {
    public abstract virtual bool UpdatesAreSupported();
}
[ShellComponentAttribute]
public class JetBrains.Application.Updates.SupportUpdates : object {
    private IEnumerable`1<ISupportUpdates> myUpdateses;
    [CompilerGeneratedAttribute]
private static Func`2<ISupportUpdates, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public SupportUpdates(IEnumerable`1<ISupportUpdates> updateses);
    public bool UpdatesAreSupported();
    [CompilerGeneratedAttribute]
private static bool <UpdatesAreSupported>b__0(ISupportUpdates x);
}
public class JetBrains.Application.Updates.UpdateInfo : object {
    public UpdateVerdicts UpdateVerdict;
    public IProductInfo SubProductPackage;
    public string NewVersion;
    public UInt32 Wave;
}
[ShellComponentAttribute]
public class JetBrains.Application.Updates.UpdatesChecker : object {
    private HostInfo myHostinInfo;
    private IHostProductInfo myHostProductInfo;
    private IProductCommandLine myProductCommandLine;
    public UpdatesChecker(HostInfo hostInfo, IHostProductInfo hostProductInfo, IProductCommandLine productCommandLine);
    public void StartCheckerWithUI();
}
public static class JetBrains.Application.Updates.UpdatesUtil : object {
    public static void StartCheckerWithUI(HostInfo hostInfo, IHostProductInfo hostProductInfo, IProductCommandLine productCommandLine);
}
public class JetBrains.Application.WindowBranding : object {
    private LocalLazy`2<IProperty`1<Icon>, Lazy`1<Icon>> myWindowIcon;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Lazy`1<Icon>, IProperty`1<Icon>> CS$<>9__CachedAnonymousMethodDelegate1;
    public string CompanyName { get; private set; }
    public string ProductDisplayName { get; private set; }
    public IProperty`1<Icon> WindowIcon { get; }
    public WindowBranding(string companyname, string productdisplayname, Lazy`1<Icon> producticon);
    public WindowBranding(string companyname, string productdisplayname, Icon producticon);
    public WindowBranding(string companyname, string productdisplayname, Stream producticon);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CompanyName();
    [CompilerGeneratedAttribute]
private void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductDisplayName();
    [CompilerGeneratedAttribute]
private void set_ProductDisplayName(string value);
    public sealed virtual IProperty`1<Icon> get_WindowIcon();
    public sealed virtual string MakeWindowCaption(string caption);
    [CompilerGeneratedAttribute]
private static IProperty`1<Icon> <.ctor>b__0(Lazy`1<Icon> lazy);
}
[EnvironmentComponentAttribute]
public class JetBrains.Application.WindowBrandingComponent : WindowBranding {
    public WindowBrandingComponent(IHostProductInfo hostProductInfo, Optional`1<WindowBrandingArtifact> wba, ILogger logger);
}
public static class JetBrains.Application.XmlRpc.XmlRpcEx : object {
    public static T CreateService();
    [CanBeNullAttribute]
[ObsoleteAttribute("Use Task.Factory.FromAsync on the IAsyncResult.")]
public static T AsyncExecuteTimeout(Func`1<XmlRpcAsyncResult> begin, Func`2<XmlRpcAsyncResult, T> end, Func`1<bool> abort, TimeSpan timeout);
    [CanBeNullAttribute]
public static bool AsyncExecuteTimeout(Func`1<XmlRpcAsyncResult> begin, Action`1<XmlRpcAsyncResult> end, Func`1<bool> abort, TimeSpan timeout);
}
[ZoneMarkerAttribute]
public class JetBrains.Application.ZoneMarker : object {
}
[FlagsAttribute]
public enum JetBrains.UI.Controls.Implication : Enum {
    public int value__;
    public static Implication None;
    public static Implication Highlight;
    public static Implication Important;
    public static Implication Clickable;
}
public class JetBrains.UI.Controls.TreeGrid.BindingChildrenProvider : object {
    [CompilerGeneratedAttribute]
private Binding <ChildrenBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private Binding <HasChildrenBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObservable>k__BackingField;
    public Binding ChildrenBinding { get; public set; }
    public Binding HasChildrenBinding { get; public set; }
    public bool IsObservable { get; private set; }
    [CompilerGeneratedAttribute]
public Binding get_ChildrenBinding();
    [CompilerGeneratedAttribute]
public void set_ChildrenBinding(Binding value);
    [CompilerGeneratedAttribute]
public Binding get_HasChildrenBinding();
    [CompilerGeneratedAttribute]
public void set_HasChildrenBinding(Binding value);
    public sealed virtual IEnumerable GetChildren(object data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsObservable();
    [CompilerGeneratedAttribute]
private void set_IsObservable(bool value);
    public sealed virtual bool HasChildren(object item);
}
public class JetBrains.UI.Controls.TreeGrid.Helpers.DataBinder : FrameworkElement {
    private static DependencyProperty EvaluatorProperty;
    private static DataBinder();
    public static object Eval(object source, string propertyPath);
    public static T Eval(object source, BindingBase binding);
    public static object Eval(object source, BindingBase binding);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.DataBinder : FrameworkElement {
    private static DependencyProperty EvaluatorProperty;
    private static DataBinder();
    public static object Eval(object source, string propertyPath);
    public static T Eval(object source, BindingBase binding);
    public static object Eval(object source, BindingBase binding);
}
public class JetBrains.UI.Controls.TreeGrid.SelfreferenceChildrenProvider : object {
    private Type myChildType;
    private Dictionary`2<Type, PropertyInfo> myChildrenPropertyCache;
    [CompilerGeneratedAttribute]
private bool <IsObservable>k__BackingField;
    public bool IsObservable { get; public set; }
    public sealed virtual IEnumerable GetChildren(object data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsObservable();
    [CompilerGeneratedAttribute]
public void set_IsObservable(bool value);
    public sealed virtual bool HasChildren(object item);
    private PropertyInfo FindChildrenProperty(Type type);
    private bool IsChildrenProperty(Type propertyType);
    private bool IsChildType(Type type);
    [CompilerGeneratedAttribute]
private bool <FindChildrenProperty>b__0(PropertyInfo x);
}
public class JetBrains.UI.Controls.UIText : object {
    public static UIText Empty;
    private EventHandler Changed;
    private PropertyChangedEventHandler PropertyChanged;
    private ObservableCollection`1<UITextDefinition> myDefinitions;
    private StringBuilder myStringBuilder;
    private string myCachedText;
    [CompilerGeneratedAttribute]
private static Func`2<UITextDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<UITextDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<UITextDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public ObservableCollection`1<UITextDefinition> Definitions { get; }
    public string Text { get; public set; }
    public int Length { get; }
    public bool HasImportant { get; }
    public UIText(string text);
    private static UIText();
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    private void RaiseChanged();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void OnPropertyChanged(string propertyName);
    public ObservableCollection`1<UITextDefinition> get_Definitions();
    public string get_Text();
    public void set_Text(string value);
    public int get_Length();
    public bool get_HasImportant();
    public UIText Regular(string text, object tooltip, Implication implication, Action click);
    public UIText Append(string text, object tooltip, Implication implication, Action click);
    public UIText Highlighted(string text, Implication additional, object tooltip, Action click);
    public UIText Clickable(string text, Action click, Implication additional, object tooltip);
    public UIText Define(int start, int count, Implication implication, object tooltip, Action click);
    public UIText Define(string searchText, StringComparison stringComparison, Implication implication, object tooltip, Action click);
    public UIText Highlight(string text, StringComparison stringComparison);
    public static UIText op_Implicit(string text);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <get_HasImportant>b__0(UITextDefinition definition);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object s, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5(object s, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(UITextDefinition x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__4(UITextDefinition x);
}
public class JetBrains.UI.Controls.UITextDefinition : ValueType {
    public int Start;
    public int Count;
    public Implication Implication;
    public Action Click;
    public object Tooltip;
    public UITextDefinition(int start, int count, Implication implication, object tooltip, Action click);
}
public abstract class JetBrains.UI.Icons.CompiledIcons.CompiledIconClass : AnyCompiledIconClass {
}
[AttributeUsageAttribute("4")]
public class JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute : PartAttribute {
    [NotNullAttribute]
public CompiledIconId IconId;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate4;
    public CompiledIconClassAttribute(string sIconPackResourceName, int nIconInPack, string sIconName);
    public static CompiledIconId TryGetCompiledIconClassId(Type type, OnError onerror);
    public static CompiledIconId TryGetCompiledIconClassId(PartCatalogueType type, OnError onerror);
    public static CompiledIconId TryGetCompiledIconClassId(PartCatalogType type, OnError onerror);
    [CompilerGeneratedAttribute]
private static object <TryGetCompiledIconClassId>b__1();
}
public class JetBrains.UI.Icons.CompiledIcons.CompiledIconId : IconId {
    public int IconIndex;
    public string IconName;
    [NotNullAttribute]
public CompiledIconPackIdentity IconPack;
    public CompiledIconId(string sIconPackResourceName, int nIconInPack, string sIconName);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[AttributeUsageAttribute("1")]
public class JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute : PartAttribute {
    public String[] IconNames;
    public string IconPackResourceIdentification;
}
public abstract class JetBrains.UI.Icons.IconId : object {
    public static bool op_Equality(IconId left, IconId right);
    public static bool op_Inequality(IconId left, IconId right);
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
    public abstract virtual string ToString();
    public abstract virtual int CompareTo(IconId otherRaw);
    private sealed virtual override bool System.IEquatable<JetBrains.UI.Icons.IconId>.Equals(IconId otherRaw);
    private sealed virtual override int System.IComparable.CompareTo(object oo);
}
[ExtensionAttribute]
public static class JetBrains.UI.StdApplicationUI.IMainWindowEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IWin32Window GetPrimaryWindow(IMainWindow mainWindow);
    [ExtensionAttribute]
[NotNullAttribute]
public static IWin32Window GetActiveWindow(IMainWindow mainWindow);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IWin32Window TryGetPrimaryWindow(IMainWindow mainWindow);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IWin32Window TryGetActiveWindow(IMainWindow mainWindow);
    [ExtensionAttribute]
public static IntPtr TryGetPrimaryWindowHandle(IMainWindow mainWindow);
    [ExtensionAttribute]
public static IntPtr TryGetActiveWindowHandle(IMainWindow mainWindow);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialogOverPrimaryWindow(IMainWindow mainWindow, Window dialog);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialogOverActiveWindow(IMainWindow mainWindow, Window dialog);
}
public interface JetBrains.UI.StdApplicationUI.IWpfMainWindow {
    public IProperty`1<Window> MainWpfWindow { get; }
    public IProperty`1<Window> ActiveWpfWindow { get; }
    public abstract virtual IProperty`1<Window> get_MainWpfWindow();
    public abstract virtual IProperty`1<Window> get_ActiveWpfWindow();
}
