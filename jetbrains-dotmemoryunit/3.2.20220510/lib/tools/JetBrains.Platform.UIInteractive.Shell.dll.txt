public enum JetBrains.UI.ActionSystem.ActionBar.ActionBarItemDisplayStyle : Enum {
    public int value__;
    public static ActionBarItemDisplayStyle Text;
    public static ActionBarItemDisplayStyle Image;
    public static ActionBarItemDisplayStyle ImageAndText;
}
public interface JetBrains.UI.ActionSystem.ActionBar.IActionBarItem {
    public abstract virtual void Update(IDataContext context);
    public abstract virtual void UpdateAsync(AsyncUpdateList asyncUpdateList);
}
[ExtensionAttribute]
public static class JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerAvalonEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<DependencyObject, FrameworkElement> CS$<>9__CachedAnonymousMethodDelegate25;
    [ExtensionAttribute]
public static void AttachPopupMenuToAvalonElement(IActionBarManager thіs, Lifetime lifetime, FrameworkElement element, string sActionGroupId, IThreading threading);
    [ExtensionAttribute]
public static void AttachPopupMenuToAvalonElement_AutomaticScoping(IActionBarManager thіs, Lifetime lifetime, FrameworkElement element, string sActionGroupId, IThreading threading);
    [ExtensionAttribute]
public static void ShowPopupMenuInAvalonElement(IActionBarManager thіs, Lifetime lifetime, IThreading threading, UIElement element, string sActionGroupId, Point ptClient, Func`1<IEnumerable`1<IDataRule>> overridedFGetDataRule);
    [ExtensionAttribute]
public static void ShowPopupMenuInAvalonElement(IActionBarManager thіs, Lifetime lifetime, IThreading threading, UIElement element, Type sActionGroupType, Point ptClient, Func`1<IEnumerable`1<IDataRule>> overridedFGetDataRule);
    [ExtensionAttribute]
public static void ShowPopupMenuInAvalonElement(IActionBarManager thіs, LifetimeDefinition lifetimeDefinition, IThreading threading, UIElement element, string sActionGroupId, Point ptClient);
    [NotNullAttribute]
[ExtensionAttribute]
public static UIElement CreateActionBarForAvalonControl(IActionBarManager thіs, Lifetime lifetime, string sActionGroupId, UIElement contextparent);
    [ExtensionAttribute]
[NotNullAttribute]
public static UIElement CreateActionBarForAvalonControl_AutomaticScoping(IActionBarManager thіs, Lifetime lifetime, string sActionGroupId);
    [ExtensionAttribute]
public static UIElement CreateActionBarForAvalonControl_FocusedControlScope(IActionBarManager thіs, Lifetime lifetime, string sActionGroupId);
    [NotNullAttribute]
[ExtensionAttribute]
public static UIElement CreateActionMenuForAvalonControl_AutomaticScoping(IActionBarManager thіs, Lifetime lifetime, string sActionGroupId);
    [NotNullAttribute]
[ExtensionAttribute]
public static UIElement CreateActionMenuForAvalonControl_FocusedControlScope(IActionBarManager thіs, Lifetime lifetime, string sActionGroupId);
    [NotNullAttribute]
public static Func`1<IEnumerable`1<IDataRule>> CreateBarForAvalonControlCore_AutomaticScoping(Lifetime lifetime, IActionManager actionman, Boxed`1<UIElement> boxedToolbar, ReadonlyToken tokenOwnerIdentity);
    [CompilerGeneratedAttribute]
private static FrameworkElement <CreateBarForAvalonControlCore_AutomaticScoping>b__22(DependencyObject o);
}
[ExtensionAttribute]
public static class JetBrains.UI.ActionSystem.ActionBar.IActionBarManagerWinFormsEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IActionBar CreateActionBarForWinFormsControl(IActionBarManager thіs, Lifetime lifetime, string sActionGroupId, Control controlDataProviding, bool isAutoUpdate);
    [ExtensionAttribute]
public static void ShowPopupMenuInWinFormsControl(IActionBarManager thіs, Lifetime lifetime, IThreading threading, Control control, Control dataContextControl, string sActionGroupId, Point ptClient);
    [ExtensionAttribute]
public static void ShowPopupMenuInWinFormsControl(IActionBarManager thіs, Lifetime lifetime, IThreading threading, Control control, Control dataContextControl, Point ptClient);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionBarWinForms : ToolStripEx {
    private Lifetime myLifetime;
    private IUIApplication myEnvironment;
    private ActionBarManagerInteractive myManager;
    private List`1<IActionBarItem> myItems;
    private List`1<IActionBarItem> myOverflowItems;
    private IActionGroupDef myActionGroup;
    private Func`1<IEnumerable`1<IDataRule>> myFGetDataRules;
    private ProfessionalColorTable myColorTable;
    private bool myUsedCustomColorTable;
    [CompilerGeneratedAttribute]
private static Func`1<IEnumerable`1<IDataRule>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`1<IEnumerable`1<IDataRule>> CS$<>9__CachedAnonymousMethodDelegate8;
    public Color ForeColor { get; public set; }
    public IActionGroupDef ActionGroup { get; }
    public EitherControl Control { get; }
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public ActionBarWinForms(Lifetime lifetime, IUIApplication environment, ActionBarManagerInteractive manager, IActionDefWithId actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules, IColorThemeManager themeManager);
    private void InitializeCustomComponent();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    protected virtual void OnFontChanged(EventArgs e);
    private void UpdateRenderer();
    protected virtual void Dispose(bool disposing);
    private void AddItem(IActionBarItem item);
    private void Build();
    public sealed virtual IActionGroupDef get_ActionGroup();
    public sealed virtual IDataContext CreateDataContext(Lifetime lifetime);
    public sealed virtual EitherControl get_Control();
    public sealed virtual bool get_PreferMenuItems();
    public sealed virtual bool get_ShowDisabledItems();
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(IActionsAvailabilityService service);
    public sealed virtual ICustomStripComboBox InsertComboBox(int index);
    public sealed virtual ICustomStripLabel InsertLabel(int index, string title, Image image);
    public sealed virtual ICustomStripSeparator InsertSplitter(int index);
    public sealed virtual ICustomStripProgressBar InsertProgressBar(int index);
    public sealed virtual void InjectCustom(int index, object item);
    public sealed virtual void RemoveCustom(object item);
    public void RemoveCustomControl(ICustomStripItem customStripItem);
    [CanBeNullAttribute]
private IActionBarItem CreateItem(IActionNodeDef action);
    protected virtual void OnItemAdded(ToolStripItemEventArgs e);
    protected virtual void OnItemRemoved(ToolStripItemEventArgs e);
    private void DropDownClosed(object sender, EventArgs e);
    public void SetCustomColorTable(ProfessionalColorTable vsFlatColorTable);
    private sealed virtual override bool JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.get_Visible();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime lt, EitherFont font);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDataRule> <.ctor>b__1();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDataRule> <Dispose>b__7();
    [CompilerGeneratedAttribute]
private IDataContext <UpdateAsync>b__12(Lifetime lt);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionContextMenuWinForms : ContextMenuStrip {
    private static int IconDeafultWidth;
    private static int IconDeafultHeight;
    private Lifetime myLifetime;
    private IColorThemeManager myThemeManager;
    private IUIApplication myEnvironment;
    private ActionBarManagerInteractive myManager;
    private List`1<IActionBarItem> myItems;
    private IActionGroupDef myActionGroup;
    private Func`1<IEnumerable`1<IDataRule>> myFGetDataRules;
    [CompilerGeneratedAttribute]
private static Func`1<IEnumerable`1<IDataRule>> CS$<>9__CachedAnonymousMethodDelegate5;
    public IActionGroupDef ActionGroup { get; }
    public EitherControl Control { get; }
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public ActionContextMenuWinForms(Lifetime lifetime, IUIApplication environment, ActionBarManagerInteractive manager, IActionGroupDef group, Func`1<IEnumerable`1<IDataRule>> fGetDataRules, IColorThemeManager themeManager);
    public ActionContextMenuWinForms(LifetimeDefinition lifetimeDefinition, IUIApplication environment, ActionBarManagerInteractive manager, IActionGroupDef group, Func`1<IEnumerable`1<IDataRule>> fGetDataRules, IColorThemeManager themeManager);
    private void InitializeCustomComponent();
    private sealed virtual override void JetBrains.Application.UI.ActionSystem.ActionBar.IActionContextMenu.BeginShow(Point ptScreen);
    protected virtual void OnOpening(CancelEventArgs e);
    protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void AddItem(IActionBarItem item);
    private void RemoveItem(IActionBarItem item);
    private void InsertItem(int index, IActionBarItem item);
    private void Build();
    public sealed virtual IActionGroupDef get_ActionGroup();
    public sealed virtual IDataContext CreateDataContext(Lifetime lifetime);
    public sealed virtual EitherControl get_Control();
    public sealed virtual bool get_PreferMenuItems();
    public sealed virtual bool get_ShowDisabledItems();
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(IActionsAvailabilityService service);
    public sealed virtual ICustomStripComboBox InsertComboBox(int index);
    public sealed virtual ICustomStripLabel InsertLabel(int index, string title, Image image);
    public sealed virtual ICustomStripSeparator InsertSplitter(int index);
    public sealed virtual ICustomStripProgressBar InsertProgressBar(int index);
    public sealed virtual void InjectCustom(int index, object item);
    public sealed virtual void RemoveCustom(object item);
    public void RemoveCustomControl(ICustomStripItem customStripItem);
    private IActionBarItem CreateItem(IActionNodeDef action);
    private sealed virtual override bool JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.get_Visible();
    [CompilerGeneratedAttribute]
private void <InitializeCustomComponent>b__1(Lifetime lt, EitherFont font);
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.UI.ActionSystem.ActionBar.IActionContextMenu.BeginShow>b__2(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDataRule> <Dispose>b__4();
    [CompilerGeneratedAttribute]
private IDataContext <UpdateAsync>b__6(Lifetime lt);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionMenuWinForms : MenuStrip {
    private static int IconDeafultWidth;
    private static int IconDeafultHeight;
    private Lifetime myLifetime;
    private IUIApplication myEnvironment;
    private ActionBarManagerInteractive myManager;
    private List`1<IActionBarItem> myItems;
    private IActionGroupDef myActionGroup;
    private Func`1<IEnumerable`1<IDataRule>> myFGetDataRules;
    [CompilerGeneratedAttribute]
private static Func`1<IEnumerable`1<IDataRule>> CS$<>9__CachedAnonymousMethodDelegate2;
    private IActionGroupDef JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.ActionGroup { get; }
    public EitherControl Control { get; }
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public ActionMenuWinForms(Lifetime lifetime, IUIApplication environment, ActionBarManagerInteractive manager, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    private void InitializeCustomComponent();
    private void SetColorTheme();
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void AddItem(IActionBarItem item);
    private void RemoveItem(IActionBarItem item);
    private void InsertItem(int index, IActionBarItem item);
    private void Build();
    private sealed virtual override IActionGroupDef JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.get_ActionGroup();
    public sealed virtual IDataContext CreateDataContext(Lifetime lifetime);
    public sealed virtual EitherControl get_Control();
    public sealed virtual bool get_PreferMenuItems();
    public sealed virtual bool get_ShowDisabledItems();
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(IActionsAvailabilityService service);
    public sealed virtual ICustomStripComboBox InsertComboBox(int index);
    public sealed virtual ICustomStripLabel InsertLabel(int index, string title, Image image);
    public sealed virtual ICustomStripSeparator InsertSplitter(int index);
    public sealed virtual ICustomStripProgressBar InsertProgressBar(int index);
    public sealed virtual void InjectCustom(int index, object item);
    public sealed virtual void RemoveCustom(object item);
    public void RemoveCustomControl(ICustomStripItem customStripItem);
    private IActionBarItem CreateItem(IActionNodeDef action);
    private void PromotePropertiesToDropDown(ToolStripItem item);
    private sealed virtual override bool JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.get_Visible();
    [CompilerGeneratedAttribute]
private void <InitializeCustomComponent>b__0(Lifetime lt, EitherFont font);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IDataRule> <Dispose>b__1();
    [CompilerGeneratedAttribute]
private IDataContext <UpdateAsync>b__3(Lifetime lt);
}
public class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripButton : ToolStripButton {
    private IActionBarManager myActionBarManager;
    private IActionBar myActionBar;
    private IActionDefWithId myActionDefWithId;
    private Nullable`1<ActionBarItemDisplayStyle> myPreferredDisplayStyle;
    public string ShortcutsString { get; }
    public ActionStripButton(IActionBarManager manager, IActionBar actionBar, IActionDefWithId actionDefWithId);
    public string get_ShortcutsString();
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(AsyncUpdateList asyncUpdateList);
    private string AppendShortcut(string description);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    [CompilerGeneratedAttribute]
private void <UpdateAsync>b__6(EvaluatedAction evaluatedAction);
    [CompilerGeneratedAttribute]
private void <OnClick>b__7();
    [CompilerGeneratedAttribute]
private void <OnClick>b__8(Lifetime lifetime);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripDropDownButton : ToolStripDropDownButtonFixed {
    private IActionBar myActionBar;
    private List`1<IActionBarItem> myItems;
    private ActionBarManagerInteractive myManager;
    private Nullable`1<ActionBarItemDisplayStyle> myPreferredDisplayStyle;
    private IActionGroupDef myActionGroup;
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public ActionStripDropDownButton(ActionBarManagerInteractive manager, IActionBar actionBar, IActionGroupDef group);
    protected virtual void OnDropDownShow(EventArgs e);
    public sealed virtual bool get_PreferMenuItems();
    public sealed virtual bool get_ShowDisabledItems();
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(AsyncUpdateList asyncUpdateList);
    private void AddItem(IActionBarItem item);
    private void RemoveItem(IActionBarItem item);
    private void InsertItem(int index, IActionBarItem item);
    private void Build();
    private IActionBarItem CreateItem(IActionNodeDef action);
    public void UpdateItemPresentation(ActionBarWinForms actionBarWinForms);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <UpdateAsync>b__3(EvaluatedAction evaluatedAction);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripMenuItem : ToolStripMenuItem {
    private IActionBar myActionBar;
    private IActionDefWithId myActionDef;
    private List`1<IActionBarItem> myItems;
    private ActionBarManagerInteractive myManager;
    private string myShortcutsString;
    [CompilerGeneratedAttribute]
private static Func`2<IActionBarItem, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public ActionStripMenuItem(ActionBarManagerInteractive manager, IActionBar actionBar, IActionDefWithId actionDef);
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(AsyncUpdateList asyncUpdateList);
    public sealed virtual bool get_PreferMenuItems();
    public sealed virtual bool get_ShowDisabledItems();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    private void AddItem(IActionBarItem item);
    private void RemoveItem(IActionBarItem item);
    private void InsertItem(int index, IActionBarItem item);
    private void Build();
    private IActionBarItem CreateItem(IActionNodeDef action);
    public void UpdateItemPresentation(ActionBarWinForms actionBarWinForms);
    protected virtual void OnForeColorChanged(EventArgs e);
    [CompilerGeneratedAttribute]
private void <UpdateAsync>b__6(EvaluatedAction evaluatedAction);
    [CompilerGeneratedAttribute]
private static bool <UpdateAsync>b__7(IActionBarItem child);
    [CompilerGeneratedAttribute]
private void <OnClick>b__9();
    [CompilerGeneratedAttribute]
private void <OnClick>b__a(Lifetime lifetime);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSeparator : ToolStripSeparator {
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(AsyncUpdateList asyncUpdateList);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripSplitButton : ToolStripSplitButton {
    private List`1<IActionBarItem> myItems;
    private ActionBarManagerInteractive myManager;
    private IActionBar myActionBar;
    private IActionGroupDef myActionWithGroup;
    private string myShortcutsString;
    private static object EventCheckedChanged;
    private static object EventCheckStateChanged;
    private bool myCheckOnClick;
    private CheckState myCheckState;
    private Nullable`1<ActionBarItemDisplayStyle> myPreferredDisplayStyle;
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public bool Checked { get; public set; }
    public bool CheckOnClick { get; public set; }
    public CheckState CheckState { get; public set; }
    public ActionStripSplitButton(ActionBarManagerInteractive manager, IActionBar actionBar, IActionGroupDef actionGroupDef);
    private static ActionStripSplitButton();
    protected virtual void OnDropDownShow(EventArgs e);
    public sealed virtual void Update(IDataContext context);
    public sealed virtual void UpdateAsync(AsyncUpdateList asyncUpdateList);
    private string AppendShortcut(string description);
    public sealed virtual bool get_PreferMenuItems();
    public sealed virtual bool get_ShowDisabledItems();
    protected virtual void OnButtonClick(EventArgs e);
    private void AddItem(IActionBarItem item);
    private void RemoveItem(IActionBarItem item);
    private void InsertItem(int index, IActionBarItem item);
    private void Build();
    private IActionBarItem CreateItem(IActionNodeDef action);
    public bool get_Checked();
    public void set_Checked(bool value);
    public bool get_CheckOnClick();
    public void set_CheckOnClick(bool value);
    public CheckState get_CheckState();
    public void set_CheckState(CheckState value);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnCheckStateChanged(EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <UpdateAsync>b__3(EvaluatedAction evaluatedAction);
    [CompilerGeneratedAttribute]
private void <OnButtonClick>b__4();
    [CompilerGeneratedAttribute]
private void <OnButtonClick>b__5(Lifetime lifetime);
}
public static class JetBrains.UI.ActionSystem.ActionBar.Legacy.ActionStripUtil : object {
    public static ToolStripItemDisplayStyle GetToolStripItemDisplayStyle(Image itemImage, bool isOnDropDown, Nullable`1<ActionBarItemDisplayStyle> preferredDisplayStyle, DisplayStyles displayStyle);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.CustomStripComboBox : ToolStripComboBox {
    private sealed virtual override ComboBox JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripComboBox.get_ComboBox();
    private sealed virtual override int JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripComboBox.get_Width();
    private sealed virtual override void JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripComboBox.set_Width(int value);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.CustomStripLabel : ToolStripLabel {
    public CustomStripLabel(string title, Image image);
    private void InitializeComponent();
    private sealed virtual override string JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripLabel.get_ToolTipText();
    private sealed virtual override void JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripLabel.set_ToolTipText(string value);
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.CustomStripProgressBar : ToolStripProgressBar {
    public Color ProgressColor { get; public set; }
    public sealed virtual Color get_ProgressColor();
    public sealed virtual void set_ProgressColor(Color value);
    private void InitializeComponent();
    private sealed virtual override int JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar.get_Value();
    private sealed virtual override void JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar.set_Value(int value);
    private sealed virtual override int JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar.get_Minimum();
    private sealed virtual override void JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar.set_Minimum(int value);
    private sealed virtual override int JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar.get_Maximum();
    private sealed virtual override void JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar.set_Maximum(int value);
    private sealed virtual override ProgressBar JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar.get_ProgressBar();
}
internal class JetBrains.UI.ActionSystem.ActionBar.Legacy.CustomStripSeparator : ToolStripSeparator {
}
public interface JetBrains.UI.ActionSystem.ActionBar.Legacy.IThemedStripItem {
    public ColorTheme ColorTheme { get; public set; }
    public abstract virtual ColorTheme get_ColorTheme();
    public abstract virtual void set_ColorTheme(ColorTheme value);
}
public class JetBrains.UI.ActionSystem.ActionBar.Legacy.ThemedStripComboBox : ToolStripControlHost {
    private ColorTheme myColorTheme;
    public ComboBox ComboBox { get; }
    public ColorTheme ColorTheme { get; public set; }
    public ThemedStripComboBox(ColorTheme colorTheme);
    public sealed virtual ComboBox get_ComboBox();
    public sealed virtual ColorTheme get_ColorTheme();
    public sealed virtual void set_ColorTheme(ColorTheme value);
    private sealed virtual override int JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripComboBox.get_Width();
    private sealed virtual override void JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripComboBox.set_Width(int value);
}
public class JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindings : object {
    private WeakCollection`1<UIElement> myAttachedViews;
    private Lifetime myLifetime;
    private IDictionaryEvents`2<IActionDefWithId, ActionManagerRoutedUICommand> myMapActionToCommand;
    public IActionShortcuts ShortcutManager;
    public IThreading Threading;
    [CompilerGeneratedAttribute]
private IActionManager <ActionManager>k__BackingField;
    public IActionManager ActionManager { get; private set; }
    public ActionManagerCommandBindings(Lifetime lifetime, IActionShortcuts shortcutManager, IActionManager actionManager, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual IActionManager get_ActionManager();
    [CompilerGeneratedAttribute]
private void set_ActionManager(IActionManager value);
    [NotNullAttribute]
public sealed virtual ICommand GetCommand(IActionDefWithId action);
    internal void RegisterView(UIElement element);
    internal void UnregisterView(UIElement element);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(AddRemoveEventArgs`1<KeyValuePair`2<IActionDefWithId, ActionManagerRoutedUICommand>> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(AddRemoveEventArgs`1<KeyValuePair`2<IActionDefWithId, ActionManagerRoutedUICommand>> args);
}
public class JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsBehavior : object {
    public static DependencyProperty DefineProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate2;
    private static ActionManagerCommandBindingsBehavior();
    public static void SetDefine(UIElement element, ActionManagerCommandBindings value);
    public static ActionManagerCommandBindings GetDefine(UIElement element);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
[ShellComponentAttribute]
public class JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerCommandBindingsFactoryUiInteractive : ActionManagerCommandBindingsFactory {
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private IActionShortcuts myShortcutManager;
    [NotNullAttribute]
private IThreading myThreading;
    public ActionManagerCommandBindingsFactoryUiInteractive(IActionShortcuts shortcutManager, IActionManager actionManager, IThreading threading);
    public virtual IActionManagerCommandBindings Create(Lifetime lifetime);
}
public class JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerContextMenuBehavior : object {
    public static DependencyProperty DefineProperty;
    public static DependencyProperty StateProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4;
    private static ActionManagerContextMenuBehavior();
    public static void SetDefine(FrameworkElement element, ActionManagerContextMenu value);
    public static ActionManagerContextMenu GetDefine(FrameworkElement element);
    private static void AttachContextMenu(ActionManagerContextMenu menu, Lifetime lifetime, FrameworkElement element);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
public class JetBrains.UI.ActionSystem.ActionManager.Avalon.ActionManagerRoutedUICommand : RoutedUICommand {
    [NotNullAttribute]
public IActionDefWithId Action;
    [NotNullAttribute]
public CommandBinding CommandBinding;
    private ActionManagerRoutedUICommand(Lifetime lifetime, IActionDefWithId action, string text, string name, Type ownerType, InputGestureCollection inputGestures, IActionManager actionManager, IThreading threading);
    [NotNullAttribute]
public static ActionManagerRoutedUICommand Create(Lifetime lifetime, IActionDefWithId action, IActionShortcuts shortcutman, IActionManager actionManager, IThreading threading);
}
[ActionAttribute("Collapse All")]
public class JetBrains.UI.ActionSystem.Actions.ExpandCollapse.CollapseActionHandler : ExpandCollapseActionHandler {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Expand All")]
public class JetBrains.UI.ActionSystem.Actions.ExpandCollapse.ExpandActionHandler : ExpandCollapseActionHandler {
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.UI.ActionSystem.Actions.ExpandCollapse.ExpandCollapseActionHandler : object {
    public IExpandCollapseProvider GetProvider(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public static class JetBrains.UI.ActionSystem.Actions.ExpandCollapse.ExpandCollapseDataConstants : object {
    public static DataConstant`1<IExpandCollapseProvider> EXPAND_COLLAPSE_PROVIDER;
    private static ExpandCollapseDataConstants();
}
public interface JetBrains.UI.ActionSystem.Actions.ExpandCollapse.IExpandCollapseProvider {
    public abstract virtual void Expand();
    public abstract virtual void Collapse();
}
[ActionAttribute("Global Throw Exception")]
public class JetBrains.UI.ActionSystem.Actions.GlobalThrowExceptionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Throw Exception")]
public class JetBrains.UI.ActionSystem.Actions.Internal.ThrowExceptionAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.UI.ActionSystem.Actions.Internal.ThrowManyExceptionsView : Window {
    private IThreading myThreading;
    private IShellLocks myShellLocks;
    [NotNullAttribute]
private LifetimeDefinition myDefinition;
    [NotNullAttribute]
private Random myRandom;
    [NotNullAttribute]
private string myErrorMessage;
    private int myExceptionCount;
    [NotNullAttribute]
private List`1<Byte[]> mySchemas;
    [NotNullAttribute]
private Stack`1<byte> myStack;
    internal TextBox ExceptionMessage;
    internal CheckBox UseUIThread;
    internal CheckBox UseLoggerError;
    internal TextBox ExceptionsCount;
    internal TextBox Interval;
    internal TextBox StacksCount;
    internal TextBox StackDepth;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private static Func`3<int, int, int> CS$<>9__CachedAnonymousMethodDelegate1;
    public ThrowManyExceptionsView(IThreading threading, IShellLocks shellLocks);
    private void ViewLoaded(object sender, RoutedEventArgs e);
    private void CancelClick(object sender, RoutedEventArgs e);
    private void ThrowClick(object sender, RoutedEventArgs e);
    private void ExceptionTick();
    private void SynteticMethodForExceptionThrow0();
    private void SynteticMethodForExceptionThrow1();
    private void SynteticMethodForExceptionThrow2();
    private void SynteticMethodForExceptionThrow3();
    private void SynteticMethodForExceptionThrow4();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static int <ThrowClick>b__0(int x, int y);
}
[ActionAttribute("Show Recent Exceptions")]
public class JetBrains.UI.ActionSystem.Actions.OpenExceptionReporterAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public abstract class JetBrains.UI.ActionSystem.Actions.SubmitAction : object {
    protected string TabName { get; }
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public static void OpenForFeedback(IWindowBranding branding, IMainWindow mainWindow, FeedbackPartsContainer feedbackParts, ISettingsStore settingsStore);
    public static void OpenFeedbackCenter(IDataContext context, string tabName, string reportType, Pair`2[] parts, Type[] attachmentActionTypes, IReportAttachment[] attachments);
    protected abstract virtual string get_TabName();
    private static FeedbackCenterHost ShowFeedbackCenterHost(FeedbackPartsContainer feedbackParts, ISettingsStore settingsStore, IWindowBranding branding, IMainWindow mainWindow);
}
[ActionAttribute("SubmitBugReport", "BugReport")]
internal class JetBrains.UI.ActionSystem.Actions.SubmitBugReportAction : SubmitAction {
    protected string TabName { get; }
    protected virtual string get_TabName();
}
[ActionAttribute("SubmitExceptions", "Exception")]
internal class JetBrains.UI.ActionSystem.Actions.SubmitExceptionsAction : SubmitAction {
    protected string TabName { get; }
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected virtual string get_TabName();
}
[ActionAttribute("Report a Bug or Submit &Feedback…")]
public class JetBrains.UI.ActionSystem.Actions.SubmitFeedbackAction : SubmitAction {
    protected string TabName { get; }
    protected virtual string get_TabName();
}
[ActionAttribute("SubmitPerformanceReport", "Performance Report")]
internal class JetBrains.UI.ActionSystem.Actions.SubmitPerformanceReportAction : SubmitAction {
    protected string TabName { get; }
    protected virtual string get_TabName();
}
[ActionAttribute("SubmitProblemReport", "Problem Report")]
internal class JetBrains.UI.ActionSystem.Actions.SubmitProblemReportAction : SubmitAction {
    protected string TabName { get; }
    protected virtual string get_TabName();
}
[ExportFindDataRulesAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.ActionSystem.DataContext.FindWinFormsDataRules : object {
    private static IEnumerable`1<IDataRule> FindDataRulesInControl(Control control);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindActiveDataRules();
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindDataRulesAtPoint(Point ptScreen);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindDataRulesInControl(EitherControl control);
}
public class JetBrains.UI.ActionSystem.Menu.MnemonicProcessorWinForms : MnemonicProcessor {
    [CompilerGeneratedAttribute]
private static Func`2<Control, INamedUiItem> CS$<>9__CachedAnonymousMethodDelegate1;
    public void UpdateMnemonics(IEnumerable`1<Control> allControls, IEnumerable targetControls);
    public void UpdateMnemonics(Control control, IEnumerable targets);
    private static IEnumerable`1<Control> EnumerateSubControls(Control control);
    [CompilerGeneratedAttribute]
private static INamedUiItem <UpdateMnemonics>b__0(Control input);
}
public class JetBrains.UI.AssemblyReferenceClass_UI : object {
}
public class JetBrains.UI.CommonControls.EditboxCueBanner : Label {
    private static Padding ourMinPadding;
    private DockStyle myDockstyle;
    private double myColorShadeOffset;
    public EditboxCueBanner(TextBox parent, string cueBanner, DockStyle dockStyle);
    private static EditboxCueBanner();
    protected virtual void WndProc(Message& message);
    private void OnLayoutParent(object sender, EventArgs args);
}
public abstract class JetBrains.UI.Components.FocusManager.FocusManager : object {
    public IntPtr CurrentFocus { get; }
    public FocusChangedFilter Filter { get; public set; }
    public abstract virtual IntPtr get_CurrentFocus();
    public abstract virtual FocusChangedFilter get_Filter();
    public abstract virtual void set_Filter(FocusChangedFilter value);
    public abstract virtual Control GetFocus();
    public abstract virtual void add_FocusChanged(FocusChangedHandler value);
    public abstract virtual void remove_FocusChanged(FocusChangedHandler value);
}
[ShellComponentAttribute]
internal class JetBrains.UI.Components.FocusManager.FocusManagerImpl : FocusManager {
    private IntPtr myCurrentFocus;
    private FocusChangedFilter myFilter;
    private int myFocusLockCount;
    private List`1<FocusChangedHandler> myListeners;
    private IntPtr myPrevFocus;
    private DateTime mySetFocusTimeUtc;
    private object mySyncObject;
    private IWindowsHookManager myHookManager;
    [CompilerGeneratedAttribute]
private static FocusChangedFilter CS$<>9__CachedAnonymousMethodDelegate1;
    public IntPtr CurrentFocus { get; }
    public FocusChangedFilter Filter { get; public set; }
    public FocusManagerImpl(Lifetime lifetime, IWindowsHookManager hookManager);
    public void LockFocus();
    public void ReleaseFocus();
    internal bool NoTimeSpent(DateTime now, DateTime before);
    private void HookOnFocus(WindowsMessageEventArgs args);
    [GuardAttribute("-1")]
private void NotifyAllParents(IntPtr hNew, IntPtr hOld);
    private void OnFocusChanged(IntPtr hWnd, bool hasFocus);
    public virtual void add_FocusChanged(FocusChangedHandler value);
    public virtual void remove_FocusChanged(FocusChangedHandler value);
    public virtual Control GetFocus();
    public virtual IntPtr get_CurrentFocus();
    public virtual FocusChangedFilter get_Filter();
    public virtual void set_Filter(FocusChangedFilter value);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(IntPtr wnd, bool focus, FocusChangedHandler listener);
}
public interface JetBrains.UI.Components.FocusManager.IFocusListener {
    [GuardAttribute("-1")]
public abstract virtual void OnFocusChanged(object sender, FocusChangedEventArgs e);
}
[EnvironmentComponentAttribute]
public class JetBrains.UI.Components.InteractiveMessageBoxHandler : NonInteractiveMessageBoxHandler {
    public InteractiveMessageBoxHandler(Lifetime lifetime, ILogger logger);
}
[ShellComponentAttribute("0", "0", "0")]
internal class JetBrains.UI.Components.InteractiveMessageBoxHandlerShell : object {
    [CanBeNullAttribute]
private IMainWindow myMainWindow;
    private IWindowBranding myWindowBranding;
    private IApplicationModalState myModalState;
    public InteractiveMessageBoxHandlerShell(Lifetime lifetime, IWindowBranding windowBranding, IApplicationModalState modalState, IMainWindow mainwindow);
    private Nullable`1<DialogBoxCommandId> UiApplicationMessageBox(Void* hWnd, string text, string caption, MessageBoxFlags flags);
}
[ShellComponentAttribute]
public class JetBrains.UI.Components.Interop.DwmStatus : object {
    private static Property`1<bool> ourIsDwmCompositionEnabled;
    public static Property`1<bool> IsDwmCompositionEnabled { get; }
    public DwmStatus(Lifetime lifetime);
    public DwmStatus(bool noop);
    public static Property`1<bool> get_IsDwmCompositionEnabled();
    private static void UpdateIsDwmCompositionEnabled();
}
[ExtensionAttribute]
public static class JetBrains.UI.Components.IWindowBrandingEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IWindowBranding SetIcon(IWindowBranding thіs, Form form);
    [NotNullAttribute]
[ExtensionAttribute]
public static IWindowBranding SetIcon(IWindowBranding thіs, Window window);
    [NotNullAttribute]
[ExtensionAttribute]
public static IWindowBranding SetIconWpf(IWindowBranding thіs, Window window);
    [ExtensionAttribute]
[NotNullAttribute]
public static Form SetIcon(Form thіs, IWindowBranding branding);
    [ExtensionAttribute]
[NotNullAttribute]
public static Window SetIcon(Window thіs, IWindowBranding branding);
    [ExtensionAttribute]
[NotNullAttribute]
public static IWindowBranding SetIconAndCaption(IWindowBranding thіs, Form form, string caption);
    [ExtensionAttribute]
[NotNullAttribute]
public static IWindowBranding SetIconAndCaption(IWindowBranding thіs, Window window, string caption);
    [NotNullAttribute]
[ExtensionAttribute]
public static IWindowBranding SetIconCaptionAndHelp(IWindowBranding thіs, Form form, string caption, HelpSystem helpSystem, string helpTopicId);
    [ExtensionAttribute]
[NotNullAttribute]
public static IWindowBranding SetIconAndHelp(IWindowBranding thіs, Form form, HelpSystem helpSystem, string helpTopicId);
    [NotNullAttribute]
[ExtensionAttribute]
public static HelpSystem SetHelpForWinForm(HelpSystem helpSystem, Form form, string helpTopicId);
}
[ShellComponentAttribute]
public class JetBrains.UI.Components.MouseWheelRedirector : object {
    public MouseWheelRedirector(Lifetime lifetime, ISettingsStore settings, IWindowsHookManager hookManager);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.UI.Components.Theming.PublishThemingToPlatformResources : object {
    public PublishThemingToPlatformResources(Lifetime lifetime, IPlatformResourceDictionary platformResourceDictionary, ITheming theming);
}
public class JetBrains.UI.Components.Theming.ThemingResourceKey : ResourceKey {
    public static ThemingResourceKey Key;
    public Assembly Assembly { get; }
    private static ThemingResourceKey();
    public virtual Assembly get_Assembly();
    public sealed virtual bool Equals(ThemingResourceKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ThemingResourceKey left, ThemingResourceKey right);
    public static bool op_Inequality(ThemingResourceKey left, ThemingResourceKey right);
    public virtual string ToString();
}
public class JetBrains.UI.Components.Theming.UnitTestThemeColor : ThemeColor {
    public static UnitTestThemeColor UnitTestSessionStatusStripBackground;
    public static UnitTestThemeColor UnitTestSessionStatusStripForeground;
    public static UnitTestThemeColor UnitTestSessionStatusStripNotificationBackground;
    public static UnitTestThemeColor UnitTestSessionStatusStripNotificationForeground;
    private UnitTestThemeColor(string name, Color defaultColor);
    private static UnitTestThemeColor();
}
[ShellComponentAttribute]
public class JetBrains.UI.Components.Theming.UnitTestThemeColorFiller : object {
    public virtual void FillColorTheme(ColorTheme t);
}
[ShellComponentAttribute("3", "0", "2")]
public class JetBrains.UI.Components.TrackFocusInteractive : TrackFocus {
    [CanBeNullAttribute]
private ISimpleSignal AvalonFocusChanged;
    private WindowsMessages WM_GIMMEFOCUS;
    [CompilerGeneratedAttribute]
private static Func`2<IntPtr, WindowRecord> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`1<WindowsMessageEventArgs> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Screen, Rectangle> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`3<Rectangle, Rectangle, Rectangle> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<DependencyObject, WindowRecord> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate27;
    public TrackFocusInteractive(Lifetime lifetimeGlobal, IWindowsHookManager hookman);
    public static Void* GetHwndOfUia(AutomationElement uia);
    public static Void* GetHwndOfUiaRecursive(AutomationElement uia);
    private static IEnumerable`1<WindowRecord> LogFocusedWindow_ParentHwndsChain(Void* hwndReport);
    private void InitDevenvGimmeFocus(Lifetime lifetime, IWindowsHookManager hookman);
    private void InitLogFocused(Lifetime lifetime);
    private void InitUiaFocus(Lifetime lifetime);
    private void IsEnabled_FocusChanged_Avalon_TrackFocusEntryPoint(Lifetime lifetimeGlobal, Lifetime lifetime);
    private void IsEnabled_FocusChanged_WinApiFocus_TrackFocusEntryPoint(Lifetime lifetime);
    private void IsEnabled_UpdateFocusOnFocusChange(Lifetime lifetime);
    [NotNullAttribute]
private LogEntry LogFocusedWindow(FocusedItem item);
    private IEnumerable`1<WindowRecord> LogFocusedWindow_ParentElementsChain(IInputElement element);
    private string UiaIdToString(Int32[] uiaid);
    [CompilerGeneratedAttribute]
private static WindowRecord <LogFocusedWindow_ParentHwndsChain>b__5(IntPtr hwnd);
    [CompilerGeneratedAttribute]
private static void <InitDevenvGimmeFocus>b__b(WindowsMessageEventArgs args);
    [CompilerGeneratedAttribute]
private void <InitLogFocused>b__d(PropertyChangedEventArgs`1<FocusedItem> args);
    [CompilerGeneratedAttribute]
private void <IsEnabled_FocusChanged_Avalon_TrackFocusEntryPoint>b__e(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <IsEnabled_FocusChanged_Avalon_TrackFocusEntryPoint>b__11(Lifetime lifeLoggingAvalon);
    [CompilerGeneratedAttribute]
private bool <IsEnabled_FocusChanged_WinApiFocus_TrackFocusEntryPoint>b__17(object sender, HookEventArgs args);
    [CompilerGeneratedAttribute]
private void <IsEnabled_UpdateFocusOnFocusChange>b__19();
    [CompilerGeneratedAttribute]
private void <IsEnabled_UpdateFocusOnFocusChange>b__1a();
    [CompilerGeneratedAttribute]
private void <IsEnabled_UpdateFocusOnFocusChange>b__1b();
    [CompilerGeneratedAttribute]
private static Rectangle <LogFocusedWindow>b__1f(Screen screen);
    [CompilerGeneratedAttribute]
private static Rectangle <LogFocusedWindow>b__20(Rectangle a, Rectangle b);
    [CompilerGeneratedAttribute]
private static WindowRecord <LogFocusedWindow_ParentElementsChain>b__24(DependencyObject o);
    [CompilerGeneratedAttribute]
private static string <UiaIdToString>b__26(int n);
}
public abstract class JetBrains.UI.Controls.ActionAutomationBase : AAutomation {
    public IActionBarManager ActionBarManager;
    public string ActionGroupId;
    protected ActionAutomationBase(IActionBarManager actionBarManager, string sActionGroupId);
}
public class JetBrains.UI.Controls.ActionBarAutomation : ActionAutomationBase {
    public ActionBarAutomation(IActionBarManager actionBarManager, string sActionGroupId);
}
public class JetBrains.UI.Controls.ActionBarAutomationFocusedControlScope : ActionAutomationBase {
    public ActionBarAutomationFocusedControlScope(IActionBarManager actionBarManager, string sActionGroupId);
}
public class JetBrains.UI.Controls.ActionManagerToolBar : Control {
    public static DependencyProperty ActionBarManagerProperty;
    public static DependencyProperty ActionGroupIdProperty;
    public static DependencyProperty ContextParentProperty;
    [CompilerGeneratedAttribute]
private static Func`1<UIElement> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<Object[], object> CS$<>9__CachedAnonymousMethodDelegate8;
    [NotNullAttribute]
public IActionBarManager ActionBarManager { get; public set; }
    public string ActionGroupId { get; public set; }
    public UIElement ContextParent { get; public set; }
    private static ActionManagerToolBar();
    public IActionBarManager get_ActionBarManager();
    public void set_ActionBarManager(IActionBarManager value);
    public string get_ActionGroupId();
    public void set_ActionGroupId(string value);
    public UIElement get_ContextParent();
    public void set_ContextParent(UIElement value);
    [CompilerGeneratedAttribute]
private static UIElement <.cctor>b__4();
    [CompilerGeneratedAttribute]
private static object <.cctor>b__5(Object[] args);
}
public class JetBrains.UI.Controls.ActionMenuAutomation : ActionAutomationBase {
    public ActionMenuAutomation(IActionBarManager actionBarManager, string sActionGroupId);
}
public class JetBrains.UI.Controls.ActionMenuAutomationFocusedControlScope : ActionAutomationBase {
    public ActionMenuAutomationFocusedControlScope(IActionBarManager actionBarManager, string sActionGroupId);
}
[ShellComponentAttribute]
public class JetBrains.UI.Controls.Automation.AutomationProviders : object {
    [CompilerGeneratedAttribute]
private static Action`1<Type> CS$<>9__CachedAnonymousMethodDelegate3;
    public static void Initialize();
    [CompilerGeneratedAttribute]
private static void <Initialize>b__2(Type type);
}
public class JetBrains.UI.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider : object {
    private ToolbarViewFragment myToolbarViewFragment;
    public JetPopupMenuTitleView TitleView;
    [CompilerGeneratedAttribute]
private static Func`2<AutomationProviderRequest, IntPtr> CS$<>9__CachedAnonymousMethodDelegate1;
    public Rect BoundingRectangle { get; }
    public IRawElementProviderFragmentRoot FragmentRoot { get; }
    public IRawElementProviderSimple HostRawElementProvider { get; }
    public ProviderOptions ProviderOptions { get; }
    private static JetPopupMenuTitleViewAutomationProvider();
    private JetPopupMenuTitleViewAutomationProvider(JetPopupMenuTitleView titleview);
    public static void Advertise();
    public sealed virtual IRawElementProviderFragment ElementProviderFromPoint(double x, double y);
    public sealed virtual IRawElementProviderSimple[] GetEmbeddedFragmentRoots();
    public sealed virtual IRawElementProviderFragment GetFocus();
    public sealed virtual object GetPatternProvider(int patternId);
    public sealed virtual object GetPropertyValue(int propertyId);
    public sealed virtual Int32[] GetRuntimeId();
    public sealed virtual IRawElementProviderFragment Navigate(NavigateDirection direction);
    public sealed virtual void SetFocus();
    public sealed virtual Rect get_BoundingRectangle();
    public sealed virtual IRawElementProviderFragmentRoot get_FragmentRoot();
    public sealed virtual IRawElementProviderSimple get_HostRawElementProvider();
    public sealed virtual ProviderOptions get_ProviderOptions();
    [CompilerGeneratedAttribute]
private static IntPtr <Advertise>b__0(AutomationProviderRequest request);
}
public class JetBrains.UI.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider : object {
    public JetPopupMenuView MenuView;
    [CompilerGeneratedAttribute]
private static Func`2<AutomationProviderRequest, IntPtr> CS$<>9__CachedAnonymousMethodDelegate1;
    public IRawElementProviderSimple HostRawElementProvider { get; }
    public ProviderOptions ProviderOptions { get; }
    private static JetPopupMenuViewAutomationProvider();
    private JetPopupMenuViewAutomationProvider(JetPopupMenuView menuview);
    public static void Advertise();
    public sealed virtual void Invoke();
    public sealed virtual object GetPatternProvider(int patternId);
    public sealed virtual object GetPropertyValue(int propertyId);
    public sealed virtual IRawElementProviderSimple get_HostRawElementProvider();
    public sealed virtual ProviderOptions get_ProviderOptions();
    [CompilerGeneratedAttribute]
private static IntPtr <Advertise>b__0(AutomationProviderRequest request);
}
public class JetBrains.UI.Controls.Automation.Providers.TipControlViewAutomationProvider : object {
    public TipControlView View;
    [CompilerGeneratedAttribute]
private static Func`2<AutomationProviderRequest, IntPtr> CS$<>9__CachedAnonymousMethodDelegate1;
    public IRawElementProviderSimple HostRawElementProvider { get; }
    public ProviderOptions ProviderOptions { get; }
    public bool IsReadOnly { get; }
    public string Value { get; }
    private static TipControlViewAutomationProvider();
    private TipControlViewAutomationProvider(TipControlView view);
    public static void Advertise();
    public sealed virtual object GetPatternProvider(int patternId);
    public sealed virtual object GetPropertyValue(int propertyId);
    public sealed virtual IRawElementProviderSimple get_HostRawElementProvider();
    public sealed virtual ProviderOptions get_ProviderOptions();
    public sealed virtual void SetValue(string value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
private static IntPtr <Advertise>b__0(AutomationProviderRequest request);
}
public static class JetBrains.UI.Controls.AvalonStatusBarShim : object {
    public static ILogger Logger;
    public static bool OptionDevTenBeta2PlantIntoStatusDockPanel;
    [CompilerGeneratedAttribute]
private static Action`1<FrameworkElementFactory> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<AutomationPeer, IEnumerable`1<AutomationPeer>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<UIElementAutomationPeer, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<UIElementAutomationPeer, FrameworkElement> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<FrameworkElement, IEnumerable`1<FrameworkElement>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<AutomationPeer, IEnumerable`1<AutomationPeer>> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<UIElementAutomationPeer, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<UIElementAutomationPeer, UIElement> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<FieldInfo, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    private static AvalonStatusBarShim();
    public static void AddItemsHostToStatusBar(Lifetime lifetime, DependencyObject statbar, ItemsControl panelToHostOnStatusBar);
    public static void ConvertIndicatorsIntoViewsLive(Lifetime lifetime, ICollectionEvents`1<JetStatusBarIndicator> indicators, IListEvents`1<IndicatorView> arIndicatorViews, IMainWindowPopupWindowContext mainWindowPopupWindowContext, JetPopupMenus jetPopupMenus, IWindowsHookManager windowsHookManager, ITheming environment);
    public static IListEvents`1<IndicatorView> CreateIndicatorViewsCollectionLive(Lifetime lifetime, ICollectionEvents`1<JetStatusBarIndicator> indicators, IMainWindowPopupWindowContext mainWindowPopupWindowContext, JetPopupMenus jetPopupMenus, IWindowsHookManager windowsHookManager, ITheming environment);
    [NotNullAttribute]
public static ItemsControl CreateIndicatorsHostPanel(IListEvents`1<IndicatorView> indicatorviews);
    public static void SubclassAvalonStatusBar(Lifetime lifetime, StatusBar avalonStatusBar, ICollectionEvents`1<JetStatusBarIndicator> indicators, IMainWindowPopupWindowContext mainWindowPopupWindowContext, JetPopupMenus jetPopupMenus, IWindowsHookManager windowsHookManager, ITheming environment);
    [CanBeNullAttribute]
public static Panel TryFindDevTenBeta2StatusDockPanelInHwnd(IntPtr hwnd);
    [CanBeNullAttribute]
public static StatusBar TryFindStatusBarInHwnd(IntPtr hwnd);
    public static bool TrySubclassAvalonStatusBarInWindow(Lifetime lifetime, IntPtr hwnd, ICollectionEvents`1<JetStatusBarIndicator> indicators, IMainWindowPopupWindowContext mainWindowPopupWindowContext, JetPopupMenus jetPopupMenus, IWindowsHookManager windowsHookManager, ITheming environment);
    private static StatusBar TryFindStatusBarInHwnd_UiThread(PresentationSource presource);
    private static StatusBar TryFindStatusBarInHwnd_WorkerThread(PresentationSource presource);
    [CompilerGeneratedAttribute]
private static void <CreateIndicatorsHostPanel>b__6(FrameworkElementFactory factory);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<AutomationPeer> <TryFindDevTenBeta2StatusDockPanelInHwnd>b__8(AutomationPeer peer);
    [CompilerGeneratedAttribute]
private static bool <TryFindDevTenBeta2StatusDockPanelInHwnd>b__9(UIElementAutomationPeer peer);
    [CompilerGeneratedAttribute]
private static FrameworkElement <TryFindDevTenBeta2StatusDockPanelInHwnd>b__a(UIElementAutomationPeer peer);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<FrameworkElement> <TryFindDevTenBeta2StatusDockPanelInHwnd>b__b(FrameworkElement elem);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<AutomationPeer> <TryFindStatusBarInHwnd_WorkerThread>b__10(AutomationPeer peer);
    [CompilerGeneratedAttribute]
private static bool <TryFindStatusBarInHwnd_WorkerThread>b__11(UIElementAutomationPeer peer);
    [CompilerGeneratedAttribute]
private static UIElement <TryFindStatusBarInHwnd_WorkerThread>b__12(UIElementAutomationPeer peer);
    [CompilerGeneratedAttribute]
private static bool <TryFindStatusBarInHwnd_WorkerThread>b__13(FieldInfo fld);
}
public class JetBrains.UI.Controls.BitmapWindowlessControl : object {
    [NotNullAttribute]
private IProperty`1<Image> myBitmap;
    private Rectangle myBounds;
    private ISimpleSignal myGottenDirty;
    private ISimpleSignal myWantsResize;
    [CompilerGeneratedAttribute]
private bool <AutoActivate>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Bitmap, Image> CS$<>9__CachedAnonymousMethodDelegate1;
    [NotNullAttribute]
public IProperty`1<Image> Bitmap { get; }
    public bool AutoActivate { get; public set; }
    public Rectangle Bounds { get; }
    public ISimpleSignal GottenDirty { get; }
    public ISimpleSignal WantsResize { get; }
    public BitmapWindowlessControl(Image bitmap);
    public BitmapWindowlessControl(Lifetime lifetime, ThemedIconLoader icon);
    public IProperty`1<Image> get_Bitmap();
    private void Init();
    public virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void Paint(Graphics g);
    public sealed virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
    public sealed virtual void SetLayout(LayoutResult layout);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoActivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual Rectangle get_Bounds();
    public sealed virtual ISimpleSignal get_GottenDirty();
    public sealed virtual ISimpleSignal get_WantsResize();
    [CompilerGeneratedAttribute]
private static Image <.ctor>b__0(Bitmap o);
}
public class JetBrains.UI.Controls.BorderedPanel : SafeTableLayoutPanel {
    private Padding myBorderWidth;
    private Color myColorBorder;
    private Color myColorFill;
    public Color BorderColor { get; public set; }
    public Padding BorderWidth { get; public set; }
    public Color FillColor { get; public set; }
    public BorderedPanel(IUIApplication environment);
    public BorderedPanel(Control child, IUIApplication environment);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Padding get_BorderWidth();
    public void set_BorderWidth(Padding value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ExtensionAttribute]
public static class JetBrains.UI.Controls.Browser.HtmlElementEx : object {
    [NotNullAttribute]
public static IDisposable AttachEventsDeferred(HtmlViewControl html, string sHtmlElementId, Action`1<HtmlElement> FOnEvent, string sEventName);
    public static HtmlElement CreateCheckbox(HtmlDocument htmlDoc, IProperty`1<bool> propIsChecked, string label);
    [ExtensionAttribute]
public static T GetAttribute(HtmlElement htmlElement, string name);
    [ExtensionAttribute]
public static object GetComObject(HtmlElement htmlElement);
    [ExtensionAttribute]
public static void SetAttribute(HtmlElement htmlElement, string name, object value);
}
public class JetBrains.UI.Controls.Browser.HtmlViewControl : NonSecureWebBrowser {
    private EventHandler`1<StringEventArgs> LocalNavigation;
    protected IList`1<IDataRule> myDataRules;
    public string DocumentText { get; public set; }
    public HtmlViewControl(IWindowsHookManager windowsHookManager, IActionManager actionManager);
    public string get_DocumentText();
    public void set_DocumentText(string value);
    public void add_LocalNavigation(EventHandler`1<StringEventArgs> value);
    public void remove_LocalNavigation(EventHandler`1<StringEventArgs> value);
    protected virtual void OnDocumentCompleted(WebBrowserDocumentCompletedEventArgs e);
    protected virtual void OnNavigating(WebBrowserNavigatingEventArgs e);
    protected virtual void WndProc(Message& m);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules();
}
[ComVisibleAttribute("True")]
[GuidAttribute("BD3F23C0-D43E-11CF-893B-00AA00BDCE1A")]
[InterfaceTypeAttribute("1")]
internal interface JetBrains.UI.Controls.Browser.Interop.IDocHostUIHandler {
    public abstract virtual int ShowContextMenu(int dwID, POINT& pt, object pcmdtReserved, object pdispReserved);
    public abstract virtual int GetHostInfo(DOCHOSTUIINFO& info);
    public abstract virtual int ShowUI(int dwID, object activeObject, object commandTarget, object frame, object doc);
    public abstract virtual int HideUI();
    public abstract virtual int UpdateUI();
    public abstract virtual int EnableModeless(bool fEnable);
    public abstract virtual int OnDocWindowActivate(bool fActivate);
    public abstract virtual int OnFrameWindowActivate(bool fActivate);
    public abstract virtual int ResizeBorder(COMRECT rect, object pUIWindow, bool fFrameWindow);
    public abstract virtual int TranslateAccelerator(MSG& msg, Guid& group, int nCmdID);
    public abstract virtual int GetOptionKeyPath(String& pbstrKey, int dw);
    public abstract virtual int GetDropTarget(object pDropTarget, Object& ppDropTarget);
    public abstract virtual int GetExternal(Object& ppDispatch);
    public abstract virtual int TranslateUrl(int dwTranslate, string strURLIn, String& pstrURLOut);
    public abstract virtual int FilterDataObject(object pDO, Object& ppDORet);
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("3050F6D0-98B5-11CF-BB82-00AA00BDCE0B")]
internal interface JetBrains.UI.Controls.Browser.Interop.IDocHostUIHandler2 {
    public abstract virtual int ShowContextMenu(int dwID, POINT& pt, object pcmdtReserved, object pdispReserved);
    public abstract virtual int GetHostInfo(DOCHOSTUIINFO& info);
    public abstract virtual int ShowUI(int dwID, object activeObject, object commandTarget, object frame, object doc);
    public abstract virtual int HideUI();
    public abstract virtual int UpdateUI();
    public abstract virtual int EnableModeless(bool fEnable);
    public abstract virtual int OnDocWindowActivate(bool fActivate);
    public abstract virtual int OnFrameWindowActivate(bool fActivate);
    public abstract virtual int ResizeBorder(COMRECT rect, object pUIWindow, bool fFrameWindow);
    public abstract virtual int TranslateAccelerator(MSG& msg, Guid& group, int nCmdID);
    public abstract virtual int GetOptionKeyPath(String& pbstrKey, int dw);
    public abstract virtual int GetDropTarget(object pDropTarget, Object& ppDropTarget);
    public abstract virtual int GetExternal(Object& ppDispatch);
    public abstract virtual int TranslateUrl(int dwTranslate, string strURLIn, String& pstrURLOut);
    public abstract virtual int FilterDataObject(object pDO, Object& ppDORet);
    public abstract virtual int GetOverrideKeyPath(String& pchKey, UInt32 dw);
}
public class JetBrains.UI.Controls.Browser.MshtmlBrowserControl2 : WebBrowser {
    public bool ShowContextMenu(int x, int y);
    protected virtual WebBrowserSiteBase CreateWebBrowserSiteBase();
}
public class JetBrains.UI.Controls.Browser.NonSecureWebBrowser : WebBrowser {
    protected virtual WebBrowserSiteBase CreateWebBrowserSiteBase();
}
public class JetBrains.UI.Controls.BusyOverlay : object {
    public static DependencyProperty ProgressProperty;
    public static DependencyProperty IsBusyProperty;
    [CompilerGeneratedAttribute]
private static Func`2<Adorner, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    private static BusyOverlay();
    public static void SetProgress(DependencyObject element, Nullable`1<double> value);
    public static Nullable`1<double> GetProgress(DependencyObject element);
    private static void OnIsBusyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void UpdateAdornerOrSchedule(FrameworkElement uiElement);
    private static void UpdateAdorner(UIElement uiElement);
    public static void SetIsBusy(DependencyObject element, bool value);
    public static object GetIsBusy(DependencyObject element);
    private static void ExecuteOrScheduleWhenVisible(FrameworkElement uiElement, Action action);
    [CompilerGeneratedAttribute]
private static bool <UpdateAdorner>b__3(Adorner x);
}
public class JetBrains.UI.Controls.Caption.CaptionImage : object {
    private Control myParentControl;
    private Image myImage;
    private Color myBackColor;
    public Image Image { get; public set; }
    public Color BackColor { get; public set; }
    public bool HasImage { get; }
    public CaptionImage(Image image, Control myParentControl);
    public Image get_Image();
    public void set_Image(Image value);
    private void OnParentEnabledChanged(object sender, EventArgs e);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public bool get_HasImage();
    public void Draw(Graphics g, Point p);
    public void Draw(Graphics g, Rectangle r);
}
public class JetBrains.UI.Controls.Caption.CaptionText : object {
    private Control myParentControl;
    private Font myFont;
    protected bool myIsHorizontal;
    private string myText;
    private Color myForeColor;
    private Rectangle myRectangle;
    private EventHandler DesiredSizeChanged;
    private Size myDesiredSize;
    public Font Font { get; public set; }
    public bool IsHorizontal { get; public set; }
    public string Text { get; public set; }
    public Color ForeColor { get; public set; }
    public Point Location { get; public set; }
    public Size Size { get; public set; }
    public Rectangle Rectangle { get; public set; }
    public Size DesiredSize { get; public set; }
    public CaptionText(string text, Control Parent, bool isHorizontal);
    public Font get_Font();
    public void set_Font(Font value);
    public bool get_IsHorizontal();
    public void set_IsHorizontal(bool value);
    public void set_Text(string value);
    public string get_Text();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public Rectangle get_Rectangle();
    public void set_Rectangle(Rectangle value);
    public void Draw(Graphics g);
    public Size CalculateDesiredSize();
    public void add_DesiredSizeChanged(EventHandler value);
    public void remove_DesiredSizeChanged(EventHandler value);
    public void set_DesiredSize(Size value);
    public Size get_DesiredSize();
}
public class JetBrains.UI.Controls.CheckBoxDisabledNoCheck : CheckBox {
    public Property`1<bool> CheckedLogicallyProperty;
    public Property`1<bool> CheckedVisuallyProperty;
    public Property`1<bool> IsEnabled;
    public Property`1<bool> IsVisible;
    public Property`1<string> Text;
    private Property`1<bool> myFakeChange;
    public bool CheckedLogically { get; public set; }
    public bool CheckedVisually { get; }
    public CheckBoxDisabledNoCheck(string text);
    public bool get_CheckedLogically();
    public void set_CheckedLogically(bool value);
    public bool get_CheckedVisually();
    private void UpdateCheckedProperty();
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<bool> args);
}
public class JetBrains.UI.Controls.CheckBoxDisabledNoCheck2 : Control {
    private static object myTokenSettingTextFromContent;
    private IProperty`1<bool> myIsAppearingChecked;
    private IProperty`1<bool> myIsCheckedLogically;
    private Property`1<bool> myIsEnabled;
    private Property`1<bool> myIsVisible;
    private IProperty`1<RichText> myText;
    private bool _contentLoaded;
    private IProperty`1<Nullable`1<bool>> myIsCheckedForChildControl;
    private IProperty`1<bool> myShouldBeDisabled;
    private IProperty`1<bool> myShouldBeHidden;
    public static DependencyProperty ShouldBeDisabledDependencyProperty;
    public static DependencyProperty ShouldBeHiddenDependencyProperty;
    public static DependencyProperty IsCheckedLogicallyDependencyProperty;
    public static DependencyProperty IsAppearingCheckedDependencyProperty;
    public static DependencyProperty ContentProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate20;
    public IProperty`1<RichText> Text { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsCheckedLogically { get; }
    public IProperty`1<bool> IsAppearingChecked { get; }
    private IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsCheckedForChildControl { get; }
    public IProperty`1<bool> ShouldBeHidden { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public bool ShouldBeDisabledDependency { get; public set; }
    public bool ShouldBeHiddenDependency { get; public set; }
    public bool IsCheckedLogicallyDependency { get; public set; }
    public bool IsAppearingCheckedDependency { get; public set; }
    public object Content { get; public set; }
    private static CheckBoxDisabledNoCheck2();
    public CheckBoxDisabledNoCheck2(RichText text);
    private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    private sealed virtual override void System.Windows.Markup.IComponentConnector.InitializeComponent();
    private void InitBinding(Lifetime lifetime);
    private void InitBinding_DependencyProperties(Lifetime lifetime);
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<RichText> get_Text();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsVisible();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckedLogically();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsAppearingChecked();
    private sealed virtual override IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsCheckedForChildControl();
    public sealed virtual IProperty`1<bool> get_ShouldBeHidden();
    public sealed virtual IProperty`1<bool> get_ShouldBeDisabled();
    public bool get_ShouldBeDisabledDependency();
    public void set_ShouldBeDisabledDependency(bool value);
    public bool get_ShouldBeHiddenDependency();
    public void set_ShouldBeHiddenDependency(bool value);
    public bool get_IsCheckedLogicallyDependency();
    public void set_IsCheckedLogicallyDependency(bool value);
    public bool get_IsAppearingCheckedDependency();
    public void set_IsAppearingCheckedDependency(bool value);
    public object get_Content();
    public void set_Content(object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <InitBinding>b__1c(bool b);
    [CompilerGeneratedAttribute]
private static bool <InitBinding>b__1d(Nullable`1<bool> mb);
    [CompilerGeneratedAttribute]
private void <InitBinding_DependencyProperties>b__23(PropertyChangedEventArgs`1<RichText> args);
}
public class JetBrains.UI.Controls.CheckedList.CheckedList : ListView {
    private EventHandler CheckingChanged;
    private static DependencyPropertyKey ColumnsKey;
    public static DependencyProperty ColumnsProperty;
    private Binding myCheckedStateBinding;
    public Binding CheckedStateBinding { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public GridViewColumnCollection Columns { get; }
    private static CheckedList();
    public void add_CheckingChanged(EventHandler value);
    public void remove_CheckingChanged(EventHandler value);
    public Binding get_CheckedStateBinding();
    public void set_CheckedStateBinding(Binding value);
    public GridViewColumnCollection get_Columns();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    internal void OnCheckedChanged();
}
public class JetBrains.UI.Controls.CheckedList.CheckedListItem : ListBoxItem {
    private static DependencyPropertyKey ColumnsKey;
    public static DependencyProperty ColumnsProperty;
    public static RoutedCommand ToggleCommand;
    public static DependencyProperty IsCheckedProperty;
    public static DependencyProperty IsCheckedBindingProperty;
    private CheckedList myCheckedList;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3;
    public GridViewColumnCollection Columns { get; private set; }
    public Binding IsCheckedBinding { get; public set; }
    public bool IsChecked { get; public set; }
    private static CheckedListItem();
    public CheckedListItem(CheckedList list);
    private void Toggle();
    private void OnToggleState(object sender, ExecutedRoutedEventArgs executedRoutedEventArgs);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    public GridViewColumnCollection get_Columns();
    private void set_Columns(GridViewColumnCollection value);
    public Binding get_IsCheckedBinding();
    public void set_IsCheckedBinding(Binding value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    protected virtual void OnKeyDown(KeyEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private CheckedListItem <Toggle>b__5(object selectedItem);
    [CompilerGeneratedAttribute]
private bool <Toggle>b__6(CheckedListItem container);
}
public class JetBrains.UI.Controls.ColorPickerDialog.ColorAxisSlider : ContentSlider {
    private PixelDrawer myPixelDrawer;
    [CompilerGeneratedAttribute]
private IProperty`1<I3DColorSpace> <ColorSpaceIn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <AxisIn>k__BackingField;
    public IProperty`1<I3DColorSpace> ColorSpaceIn { get; private set; }
    public IProperty`1<int> AxisIn { get; private set; }
    [CompilerGeneratedAttribute]
public IProperty`1<I3DColorSpace> get_ColorSpaceIn();
    [CompilerGeneratedAttribute]
private void set_ColorSpaceIn(IProperty`1<I3DColorSpace> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_AxisIn();
    [CompilerGeneratedAttribute]
private void set_AxisIn(IProperty`1<int> value);
    private UInt32 GetAxisAt(double u, double v);
}
public class JetBrains.UI.Controls.ColorPickerDialog.ColorFormatSelector : UserControl {
    private static int myLastSelectedTabIndex;
    private bool myPreventUpdate;
    private Tuple`4<double, double, double, double> myColor;
    private Action ColorChanged;
    public IProperty`1<bool> PickerToggle;
    private PropertyChangedEventHandler PropertyChanged;
    internal TabControl myTabs;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ColorFormatItem[] <AllItems>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<object, TextBlock> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static PropertyChangedEventHandler CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`4<double, double, double, double>, string> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`4<double, double, double, double>, string> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`4<double, double, double, double>, string> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`4<double, double, double, double>, string> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`4<double, double, double, double>, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`4<double, double, double, double>, string> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<double, bool> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<double, bool> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<double, bool> CS$<>9__CachedAnonymousMethodDelegate2b;
    [CompilerGeneratedAttribute]
private static Action`1<ColorFormatItem> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Func`2<FrameworkElement, bool> CS$<>9__CachedAnonymousMethodDelegate32;
    public static IValueConverter ToTextBlock { get; }
    public Tuple`4<double, double, double, double> Color { get; public set; }
    public ColorFormatItem[] AllItems { get; private set; }
    public IEnumerable`1<ColorFormatItem> TabItems { get; }
    public bool Workaround { get; public set; }
    public static IValueConverter get_ToTextBlock();
    [CanBeNullAttribute]
private Numbers GetForNumbers(string input);
    private Tuple`4<double, double, double, double> FromTextAhsb(string s);
    [CanBeNullAttribute]
private Tuple`4<double, double, double, double> FromTextWeb(string arg);
    [CanBeNullAttribute]
private Tuple`4<double, double, double, double> FromTextArgb(string s);
    public void set_Color(Tuple`4<double, double, double, double> value);
    public Tuple`4<double, double, double, double> get_Color();
    private void UpdateUI();
    private void UpdateFromUI(Tuple`4<double, double, double, double> color);
    public void add_ColorChanged(Action value);
    public void remove_ColorChanged(Action value);
    [CompilerGeneratedAttribute]
public ColorFormatItem[] get_AllItems();
    [CompilerGeneratedAttribute]
private void set_AllItems(ColorFormatItem[] value);
    public IEnumerable`1<ColorFormatItem> get_TabItems();
    private void PasteClick(object sender, RoutedEventArgs e);
    private void CopyCurrentClick(object sender, RoutedEventArgs e);
    private void CopyClick(object sender, RoutedEventArgs e);
    private void PickerClick(object sender, RoutedEventArgs e);
    public void UnpressPickerButton();
    public void set_Workaround(bool value);
    public bool get_Workaround();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static TextBlock <get_ToTextBlock>b__1(object value);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__a();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__b(object param0, PropertyChangedEventArgs param1);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__c(Tuple`4<double, double, double, double> _);
    [CompilerGeneratedAttribute]
private Tuple`4<double, double, double, double> <.ctor>b__d(string _);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__e(Tuple`4<double, double, double, double> _);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__f(Tuple`4<double, double, double, double> _);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__10(Tuple`4<double, double, double, double> _);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__11(Tuple`4<double, double, double, double> _);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__12(Tuple`4<double, double, double, double> _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13(object sender, SelectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <FromTextAhsb>b__23(double _);
    [CompilerGeneratedAttribute]
private static bool <FromTextArgb>b__27(double _);
    [CompilerGeneratedAttribute]
private static bool <FromTextArgb>b__29(double _);
    [CompilerGeneratedAttribute]
private static void <UpdateUI>b__2e(ColorFormatItem _);
    [CompilerGeneratedAttribute]
private static bool <PasteClick>b__31(FrameworkElement o);
}
public class JetBrains.UI.Controls.ColorPickerDialog.ColorPickerControl : UserControl {
    private ColorSpaceState[] myColorSpaces;
    private ZoomedPixels myZoomedPixels;
    internal Grid grid;
    internal PaletteControl myPalette;
    internal RadioButton HueButton;
    internal RadioButton SaturationButton;
    internal RadioButton BrightnessButton;
    internal ColorAxisSlider HueSlider;
    internal ColorAxisSlider SaturationSlider;
    internal ColorAxisSlider BrightnessSlider;
    internal RadioButton RedButton;
    internal RadioButton GreenButton;
    internal RadioButton BlueButton;
    internal ColorAxisSlider RedSlider;
    internal ColorAxisSlider GreenSlider;
    internal ColorAxisSlider BlueSlider;
    internal ContentSlider OpacitySlider;
    internal Rectangle ColorPreviewRect;
    internal Rectangle InitialColorRect;
    internal LeadColorAxisSlider LeadColorAxisSlider;
    internal ColorFormatSelector myColorFormatSelector;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private IProperty`1<ColorSpaceState> <ActiveColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <ColorOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<ColorAxisSlider, RadioButton, Pair`2<ColorAxisSlider, RadioButton>> CS$<>9__CachedAnonymousMethodDelegate16;
    public IProperty`1<ColorSpaceState> ActiveColorSpace { get; private set; }
    public IProperty`1<double> ColorOpacity { get; private set; }
    public Color SelectedColor { get; public set; }
    [CompilerGeneratedAttribute]
private void set_ActiveColorSpace(IProperty`1<ColorSpaceState> value);
    [CompilerGeneratedAttribute]
public IProperty`1<ColorSpaceState> get_ActiveColorSpace();
    [CompilerGeneratedAttribute]
private void set_ColorOpacity(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_ColorOpacity();
    private void RunMousePicker();
    protected virtual void OnKeyDown(KeyEventArgs e);
    public Color get_SelectedColor();
    public void set_SelectedColor(Color value);
    private void BindSliders(ColorSpaceState spaceState, ColorAxisSlider u, ColorAxisSlider v, ColorAxisSlider w, RadioButton uButton, RadioButton vButton, RadioButton wButton);
    private void UpdateSpaces(ColorSpaceState fromSpace);
    private void SetActiveSpace(ColorSpaceState colorSpaceState, int i);
    private void UpdateColorPreview(Color color);
    private void UpdateOpacityGradient(Color baseColor);
    private void RestoreColor(object sender, MouseButtonEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(Lifetime life, ColorSpaceState state);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7(PropertyChangedEventArgs`1<Color> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5();
    [CompilerGeneratedAttribute]
private void <RunMousePicker>b__f();
    [CompilerGeneratedAttribute]
private static Pair`2<ColorAxisSlider, RadioButton> <BindSliders>b__13(ColorAxisSlider slider, RadioButton button);
}
public class JetBrains.UI.Controls.ColorPickerDialog.ColorPickerDialog : Window {
    internal ColorPickerControl myPicker;
    private bool _contentLoaded;
    public Color SelectedColor { get; public set; }
    public Color get_SelectedColor();
    public void set_SelectedColor(Color value);
    private void OkButtonClick(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ExtensionAttribute]
public static class JetBrains.UI.Controls.ColorPickerDialog.ColorPickerUtis : object {
    public static Vector3D GetUnitVector(int axis);
    [ExtensionAttribute]
public static UInt32 ToBgr32(Vector3D vector);
    [ExtensionAttribute]
public static Color ToColor(Vector3D vector);
    [ExtensionAttribute]
public static Color ToColor(Vector3D vector, double alpha);
    [ExtensionAttribute]
public static Vector3D ToVector3(Color color);
    public static T[] Swizzle(Int32[] indeces, T[] properties);
    public static Int32[] PaletteToAxisIndeces(Pair`2<int, int> mapping, int leadAxisIndex);
    public static Int32[] AxisToPalleteIndeces(Pair`2<int, int> mapping, int leadAxisIndex);
}
public class JetBrains.UI.Controls.ColorPickerDialog.ColorSpaceState : object {
    [CompilerGeneratedAttribute]
private I3DColorSpace <ColorSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <UAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <VAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <WAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <LeadAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Vector3D> <RGB>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Vector3D> <UVW>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<double, double, double, Vector3D> CS$<>9__CachedAnonymousMethodDelegate3;
    public I3DColorSpace ColorSpace { get; private set; }
    public IProperty`1<double> UAxis { get; private set; }
    public IProperty`1<double> VAxis { get; private set; }
    public IProperty`1<double> WAxis { get; private set; }
    public IProperty`1<int> LeadAxis { get; private set; }
    public IProperty`1<Vector3D> RGB { get; private set; }
    public IProperty`1<Vector3D> UVW { get; private set; }
    public ColorSpaceState(I3DColorSpace colorSpace);
    [CompilerGeneratedAttribute]
private void set_ColorSpace(I3DColorSpace value);
    [CompilerGeneratedAttribute]
public I3DColorSpace get_ColorSpace();
    [CompilerGeneratedAttribute]
private void set_UAxis(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_UAxis();
    [CompilerGeneratedAttribute]
private void set_VAxis(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_VAxis();
    [CompilerGeneratedAttribute]
private void set_WAxis(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_WAxis();
    [CompilerGeneratedAttribute]
private void set_LeadAxis(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_LeadAxis();
    [CompilerGeneratedAttribute]
private void set_RGB(IProperty`1<Vector3D> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Vector3D> get_RGB();
    [CompilerGeneratedAttribute]
private void set_UVW(IProperty`1<Vector3D> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Vector3D> get_UVW();
    public void UpdateFromRGB(Vector3D nearestRGB);
    public void SetUVW(Vector3D newUVW);
    public IProperty`1[] Axis();
    [CompilerGeneratedAttribute]
private Vector3D <.ctor>b__0(double u, double v, double w);
    [CompilerGeneratedAttribute]
private static Vector3D <.ctor>b__1(double u, double v, double w);
}
public class JetBrains.UI.Controls.ColorPickerDialog.ContentSlider : Slider {
    public static DependencyProperty ContentProperty;
    private Track myTrack;
    private Border myCapture;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <ValueIProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public IProperty`1<double> ValueIProperty { get; private set; }
    public object Content { get; public set; }
    private static ContentSlider();
    [CompilerGeneratedAttribute]
private void set_ValueIProperty(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_ValueIProperty();
    public object get_Content();
    public void set_Content(object value);
    public virtual void OnApplyTemplate();
    private void CaptureOnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void CaptureOnMouseMove(object sender, MouseEventArgs e);
    private void CaptureOnMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.Controls.ColorPickerDialog.HSBColorSpace : object {
    public sealed virtual UInt32 AxisRgbGradient(int axis, double u, double v);
    public sealed virtual Pair`2<int, int> Get2DProjectionAxisMapping(int leadAxis);
    public sealed virtual Vector3D RgbToSpace(Vector3D v);
    public sealed virtual Vector3D SpaceToRgb(Vector3D v);
}
public interface JetBrains.UI.Controls.ColorPickerDialog.I3DColorSpace {
    public abstract virtual UInt32 AxisRgbGradient(int axis, double u, double v);
    public abstract virtual Pair`2<int, int> Get2DProjectionAxisMapping(int leadAxis);
    public abstract virtual Vector3D RgbToSpace(Vector3D v);
    public abstract virtual Vector3D SpaceToRgb(Vector3D v);
}
public class JetBrains.UI.Controls.ColorPickerDialog.LeadColorAxisSlider : ContentSlider {
    private PixelDrawer myPixelDrawer;
    [CompilerGeneratedAttribute]
private IProperty`1<ColorSpaceState> <ColorSpaceState>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IProperty`1<double>, double> CS$<>9__CachedAnonymousMethodDelegate8;
    public IProperty`1<ColorSpaceState> ColorSpaceState { get; private set; }
    [CompilerGeneratedAttribute]
public IProperty`1<ColorSpaceState> get_ColorSpaceState();
    [CompilerGeneratedAttribute]
private void set_ColorSpaceState(IProperty`1<ColorSpaceState> value);
    private void InvalidatePixels(object obj);
    private UInt32 GetColorAt(double u, double v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lifeState, ColorSpaceState state);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime lifeState, ColorSpaceState state);
    [CompilerGeneratedAttribute]
private static double <GetColorAt>b__7(IProperty`1<double> axis);
}
public class JetBrains.UI.Controls.ColorPickerDialog.MouseTracker : Window {
    private Action myOnStart;
    private DispatcherTimer myMoveWindowTimer;
    private bool myAllowClose;
    private bool myAutoClose;
    private Action`1<Point> TrackedMouseMove;
    private Action`1<Point> TrackedMouseDown;
    private Action`1<Point> TrackedMouseUp;
    [CompilerGeneratedAttribute]
private bool <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<Point> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`1<Point> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<Point> CS$<>9__CachedAnonymousMethodDelegate9;
    public bool Canceled { get; public set; }
    public MouseTracker(Action onStart, Action onMove, Action`1<bool> onFinish);
    private void FinishTrackanig();
    [CompilerGeneratedAttribute]
public void set_Canceled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Canceled();
    public void StartTracking();
    private void MoveFeedbackWindow();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    public static Point CursorPosition();
    public void add_TrackedMouseMove(Action`1<Point> value);
    public void remove_TrackedMouseMove(Action`1<Point> value);
    public void add_TrackedMouseDown(Action`1<Point> value);
    public void remove_TrackedMouseDown(Action`1<Point> value);
    public void add_TrackedMouseUp(Action`1<Point> value);
    public void remove_TrackedMouseUp(Action`1<Point> value);
    internal static IntPtr CreateDC(string strDriver, string strDevice, string strOutput, IntPtr pData);
    internal static int GetPixel(IntPtr hdc, int x, int y);
    internal static bool DeleteDC(IntPtr hdc);
    private static bool GetCursorPos(Point& lpPoint);
    public static Color GetPixelColor();
    public static Color[0...,0...] GetPixelColor(int size);
    public static Color[0...,0...] GetPixelColor(int x, int y, int size);
    private static Color GetPixelColor(int x, int y, IntPtr hdc);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(Point param0);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(Point param0);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3(Point param0);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6(object o, EventArgs e);
}
public class JetBrains.UI.Controls.ColorPickerDialog.PaletteControl : CustomVisualsControl`1<Grid> {
    private Vector myLocatorPreview;
    private PixelDrawer myPixelDrawer;
    private CustomRender myLocatorRenderer;
    private Optimisation myOptimisation;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <UPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <VPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <WPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <LeadAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<I3DColorSpace> <ColorSpace>k__BackingField;
    public IProperty`1<double> UPosition { get; private set; }
    public IProperty`1<double> VPosition { get; private set; }
    public IProperty`1<double> WPosition { get; private set; }
    public IProperty`1<int> LeadAxis { get; private set; }
    public IProperty`1<I3DColorSpace> ColorSpace { get; private set; }
    private Vector LocatorPosition { get; private set; }
    [CompilerGeneratedAttribute]
private void set_UPosition(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_UPosition();
    [CompilerGeneratedAttribute]
private void set_VPosition(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_VPosition();
    [CompilerGeneratedAttribute]
private void set_WPosition(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_WPosition();
    [CompilerGeneratedAttribute]
private void set_LeadAxis(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_LeadAxis();
    [CompilerGeneratedAttribute]
private void set_ColorSpace(IProperty`1<I3DColorSpace> value);
    [CompilerGeneratedAttribute]
public IProperty`1<I3DColorSpace> get_ColorSpace();
    private IProperty`1[] ColorAxes();
    private void OnColorChange(PropertyChangedEventArgs`1<double> args);
    private void InvalidatePalette();
    private void set_LocatorPosition(Vector value);
    private Vector get_LocatorPosition();
    private UInt32 ColorByXY(double x, double y);
    private Vector ControlToPalette(Point pos);
    private void Render(DrawingContext dc);
    private void DrawLocator(DrawingContext dc, double strokeWidth, Vector location, double sz, double opacity);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    private static Vector3D GetPalleteColor(I3DColorSpace space, double leadColor, Int32[] indeces, double x, double y);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<double> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(PropertyChangedEventArgs`1<double> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(PropertyChangedEventArgs`1<double> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5();
}
public class JetBrains.UI.Controls.ColorPickerDialog.PixelDrawer : Border {
    private int myPalleteWidth;
    private int myPalleteHeight;
    private WriteableBitmap myPixelBitmap;
    private bool myPixelsUpToDate;
    private GetPixelDelegate myGetPixel;
    public GetPixelDelegate GetPixel { get; public set; }
    public PixelDrawer(GetPixelDelegate getPixel);
    public PixelDrawer(GetPixelDelegate getPixel, int bitmapWidth, int bitmapHeight);
    public GetPixelDelegate get_GetPixel();
    public void set_GetPixel(GetPixelDelegate value);
    public void InvalidatePixels();
    private void RenderPixels();
    private void RenderToBitmap(int width, int height, WriteableBitmap writeableBitmap);
    protected virtual void OnRender(DrawingContext dc);
}
[ExtensionAttribute]
public static class JetBrains.UI.Controls.ColorPickerDialog.RealColorEx : object {
    [ExtensionAttribute]
public static Tuple`4<double, double, double, double> ToRealColor(Vector3D rgb, double alpha);
    public static Tuple`4<double, double, double, double> ToRealColor(double alpha, double x, double y, double z);
    [ExtensionAttribute]
public static Vector3D ToVector3(Tuple`4<double, double, double, double> c);
    [ExtensionAttribute]
public static Tuple`4<double, double, double, double> ToRealColor(Color c);
}
public class JetBrains.UI.Controls.ColorPickerDialog.RGBColorSpace : object {
    public sealed virtual UInt32 AxisRgbGradient(int axis, double u, double v);
    public sealed virtual Pair`2<int, int> Get2DProjectionAxisMapping(int leadAxis);
    public sealed virtual Vector3D RgbToSpace(Vector3D v);
    public sealed virtual Vector3D SpaceToRgb(Vector3D v);
}
internal class JetBrains.UI.Controls.ColorPickerDialog.ZoomedPixels : FrameworkElement {
    private Color[0...,0...] myPixelz;
    private double myCellSize;
    private Nullable`1<Pair`2<int, int>> myPreviewCell;
    private DrawingBrush myChecker;
    [CompilerGeneratedAttribute]
private IProperty`1<Pair`2<int, int>> <SelectedCell>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Color> <SelectedColor>k__BackingField;
    public IProperty`1<Pair`2<int, int>> SelectedCell { get; private set; }
    public IProperty`1<Color> SelectedColor { get; private set; }
    public double CellSize { get; public set; }
    [CompilerGeneratedAttribute]
private void set_SelectedCell(IProperty`1<Pair`2<int, int>> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Pair`2<int, int>> get_SelectedCell();
    [CompilerGeneratedAttribute]
public IProperty`1<Color> get_SelectedColor();
    [CompilerGeneratedAttribute]
private void set_SelectedColor(IProperty`1<Color> value);
    public double get_CellSize();
    public void set_CellSize(double value);
    public void Update(Color[0...,0...] pixelz);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    private bool OutOfBounds(Pair`2<int, int> previewCell);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnRender(DrawingContext dc);
    private static Color SelectionColor(Color s);
    private Rect GetCellRect(int first, int second);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8();
}
public class JetBrains.UI.Controls.ComboBoxWithImages : ComboBox {
    private Dictionary`2<object, Image> myImages;
    [CompilerGeneratedAttribute]
private int <VerticalPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HorizontalPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageTextMargin>k__BackingField;
    public int VerticalPadding { get; public set; }
    public int HorizontalPadding { get; public set; }
    public int ImageTextMargin { get; public set; }
    [CompilerGeneratedAttribute]
public int get_VerticalPadding();
    [CompilerGeneratedAttribute]
public void set_VerticalPadding(int value);
    [CompilerGeneratedAttribute]
public int get_HorizontalPadding();
    [CompilerGeneratedAttribute]
public void set_HorizontalPadding(int value);
    [CompilerGeneratedAttribute]
public int get_ImageTextMargin();
    [CompilerGeneratedAttribute]
public void set_ImageTextMargin(int value);
    public Image GetItemImage(object item);
    public void SetItemImage(object item, Image image);
    private static int RoundUp(float f);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, MeasureItemEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, DrawItemEventArgs e);
}
public class JetBrains.UI.Controls.Common.Button : Button {
    private static Button();
}
public class JetBrains.UI.Controls.Common.CheckedItemCollection : ObservableCollection`1<object> {
}
public class JetBrains.UI.Controls.Common.ComboBox : ComboBox {
    public static DependencyProperty PresentationTemplateProperty;
    public static DependencyProperty PresentationTemplateSelectorProperty;
    public static DependencyProperty IsCheckableProperty;
    public static DependencyProperty IsReordableProperty;
    public static DependencyProperty IsSearchableProperty;
    private static DependencyPropertyKey CheckedItemsPropertyKey;
    public static DependencyProperty CheckedItemsProperty;
    private static DependencyPropertyKey HasCheckedItemsPropertyKey;
    public static DependencyProperty HasCheckedItemsProperty;
    public static DependencyProperty NoneContentProperty;
    public static DependencyProperty IsSuggestionOpenProperty;
    public static DependencyProperty MaxSuggestionsProperty;
    public static DependencyProperty SuggestionProviderProperty;
    private Func`3<ComboBox, string, IEnumerable> myDefaultSuggestionProvider;
    public static DependencyProperty SearchTextProperty;
    private bool myForcedCloseInProcess;
    private HashSet`1<object> myCheckedItems;
    private TextBoxBase myEditableTextBox;
    private Popup myPopup;
    [CompilerGeneratedAttribute]
private ICommand <MoveUp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <MoveDown>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <UncheckCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegatea;
    public DataTemplate PresentationTemplate { get; public set; }
    public DataTemplateSelector PresentationTemplateSelector { get; public set; }
    public bool IsCheckable { get; public set; }
    public bool IsReordable { get; public set; }
    public ICommand MoveUp { get; private set; }
    public ICommand MoveDown { get; private set; }
    public bool IsSearchable { get; public set; }
    public CheckedItemCollection CheckedItems { get; protected set; }
    public bool HasCheckedItems { get; protected set; }
    public object NoneContent { get; public set; }
    public bool IsSuggestionOpen { get; public set; }
    public int MaxSuggestions { get; public set; }
    [ObsoleteAttribute]
public Func`3<ComboBox, string, IEnumerable> SuggestionProvider { get; public set; }
    public string SearchText { get; public set; }
    public ICommand UncheckCommand { get; private set; }
    private static ComboBox();
    public DataTemplate get_PresentationTemplate();
    public void set_PresentationTemplate(DataTemplate value);
    public DataTemplateSelector get_PresentationTemplateSelector();
    public void set_PresentationTemplateSelector(DataTemplateSelector value);
    public bool get_IsCheckable();
    public void set_IsCheckable(bool value);
    public bool get_IsReordable();
    public void set_IsReordable(bool value);
    [CompilerGeneratedAttribute]
public ICommand get_MoveUp();
    [CompilerGeneratedAttribute]
private void set_MoveUp(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_MoveDown();
    [CompilerGeneratedAttribute]
private void set_MoveDown(ICommand value);
    public bool get_IsSearchable();
    public void set_IsSearchable(bool value);
    public CheckedItemCollection get_CheckedItems();
    protected void set_CheckedItems(CheckedItemCollection value);
    public bool get_HasCheckedItems();
    protected void set_HasCheckedItems(bool value);
    public object get_NoneContent();
    public void set_NoneContent(object value);
    public bool get_IsSuggestionOpen();
    public void set_IsSuggestionOpen(bool value);
    public int get_MaxSuggestions();
    public void set_MaxSuggestions(int value);
    public Func`3<ComboBox, string, IEnumerable> get_SuggestionProvider();
    public void set_SuggestionProvider(Func`3<ComboBox, string, IEnumerable> value);
    [ObsoleteAttribute]
public IEnumerable GetSuggestions(string input);
    public string get_SearchText();
    public void set_SearchText(string value);
    private void OnSearchTextChanged(DependencyPropertyChangedEventArgs args);
    private object OnIsDropDownOpenCoerse(object baseValue);
    private void Close(bool force);
    private bool GetActualIsMouseOverPopup();
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    private void OnItemsSourceChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal IList GetReordableCollection();
    private bool CanMoveItem(int index, int offset);
    private void MoveItem(int index, int offset);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    private void RearrangeCheckedItems();
    public void Check(object dataItem);
    public void Uncheck(object dataItem);
    private void SetCheck(object dataItem, bool value);
    public bool IsChecked(object dataItem);
    private void UpdateIsChecked();
    public virtual void OnApplyTemplate();
    protected virtual void OnKeyUp(KeyEventArgs args);
    protected virtual void OnPreviewKeyDown(KeyEventArgs args);
    private void OnEditableTextBoxTextChanged(object sender, TextChangedEventArgs textChangedEventArgs);
    [CompilerGeneratedAttribute]
public ICommand get_UncheckCommand();
    [CompilerGeneratedAttribute]
private void set_UncheckCommand(ICommand value);
    [CompilerGeneratedAttribute]
private IEnumerable <GetSuggestions>b__0(ComboBox combo, string text);
    [CompilerGeneratedAttribute]
private bool <OnSearchTextChanged>b__4(object item);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__7(DependencyObject o, object value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__b(object s, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__c();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__d();
    [CompilerGeneratedAttribute]
private void <.ctor>b__e();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__f();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__10(object item);
    [CompilerGeneratedAttribute]
private bool <RearrangeCheckedItems>b__17(object x);
}
public class JetBrains.UI.Controls.Common.ComboBoxItem : ComboBoxItem {
    public static DependencyProperty IsCheckedProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static MouseButtonEventHandler CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static MouseButtonEventHandler CS$<>9__CachedAnonymousMethodDelegateb;
    public Nullable`1<bool> IsChecked { get; public set; }
    private ComboBox ComboBox { get; }
    private static ComboBoxItem();
    public Nullable`1<bool> get_IsChecked();
    public void set_IsChecked(Nullable`1<bool> value);
    private void OnIsCheckedChanged(DependencyPropertyChangedEventArgs e);
    public void UpdateIsChecked();
    private object GetContent();
    private ComboBox get_ComboBox();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(object s, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(object s, MouseButtonEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__5(object s, MouseButtonEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__6(object s, MouseButtonEventArgs e);
}
public class JetBrains.UI.Controls.Common.ControlWithSlidingContent : UserControl {
    private bool _contentLoaded;
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    private void OnItemsControlSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnResizedTo(Size size);
    protected virtual Size MeasureOverride(Size constraint);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Controls.Common.ControlWithSlidingContentModel : NotifyPropertyChanged {
    private int myVisibleControlIndex;
    private int myPrevVisibleControlIndex;
    private bool myIsAnimationRunning;
    private Size myParentSize;
    private Nullable`1<Size> myPendingSize;
    private Duration myAnimationDuration;
    private Storyboard myRecentStoryboard;
    private IDictionary`2<FrameworkElement, Button> myDefaultButtons;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<FrameworkElement> <Controls>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<FrameworkElement, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public ObservableCollection`1<FrameworkElement> Controls { get; private set; }
    public Duration AnimationDuration { get; public set; }
    public int VisibleControlIndex { get; private set; }
    public int PrevVisibleControlIndex { get; private set; }
    public FrameworkElement VisibleControl { get; public set; }
    public bool HasPreviousControl { get; }
    public bool HasNextControl { get; }
    public bool IsAnimationRunning { get; private set; }
    public ControlWithSlidingContentModel(ILogger logger);
    private void NotifyPropertiesChanged();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<FrameworkElement> get_Controls();
    [CompilerGeneratedAttribute]
private void set_Controls(ObservableCollection`1<FrameworkElement> value);
    public Duration get_AnimationDuration();
    public void set_AnimationDuration(Duration value);
    public int get_VisibleControlIndex();
    private void set_VisibleControlIndex(int value);
    public int get_PrevVisibleControlIndex();
    private void set_PrevVisibleControlIndex(int value);
    public FrameworkElement get_VisibleControl();
    public void set_VisibleControl(FrameworkElement value);
    public bool get_HasPreviousControl();
    public bool get_HasNextControl();
    public void MoveNext();
    public void MovePrevious();
    public bool get_IsAnimationRunning();
    private void set_IsAnimationRunning(bool value);
    public void OnParentSizeChanged(Size parentSize);
    private void ClearStoryboard();
    private void MoveControl(int i, Rect rect);
    private void AnimateControls(int oldVisibleIndex, int newVisibleIndex);
    private void ChangeVisibleIndexWithoutAnimation(int oldVisibleIndex, int newVisibleIndex);
    private void ResetDefaultButton(int oldVisibleIndex);
    private void RestoreDefaultButton(int newVisibleIndex);
    private Rect GetControlRect(int i, int newVisibleControlIndex);
    private static void CollectButtons(Visual element, IList`1<Button> buttons);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <set_VisibleControlIndex>b__2(FrameworkElement x);
}
public class JetBrains.UI.Controls.Common.DropDown : ToggleButton {
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    private static DropDown();
    private void OnIsCheckedChanged(DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.Controls.Common.Helpers.PopupHelper : object {
    private static WeakToWeakDictionary`2<Popup, UIElement> ourTrackedElements;
    private static WeakToWeakDictionary`2<Popup, Property`1<UIElement>> ourBinders;
    public static DependencyProperty TrackTargetArangementProperty;
    private static PopupHelper();
    private static void OnTrackTargetArrangementChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void OnPlacementTargetChanged(object sender, EventArgs e);
    private static void UpdateArrangementTracking(Popup popup);
    private static void UntrackArrangement(Popup popup);
    private static void UpdatePlacement(Popup popup);
    public static void SetTrackTargetArangement(DependencyObject element, bool value);
    public static bool GetTrackTargetArangement(DependencyObject element);
}
public class JetBrains.UI.Controls.Common.MouseInteractionBlocker : ContentControl {
    public static DependencyProperty AllowBlockingProperty;
    public bool AllowBlocking { get; public set; }
    private static MouseInteractionBlocker();
    public bool get_AllowBlocking();
    public void set_AllowBlocking(bool value);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
}
public class JetBrains.UI.Controls.Common.TextBlock : TextBlock {
    public static DependencyProperty IsTrimmedProperty;
    public bool IsTrimmed { get; public set; }
    private static TextBlock();
    public bool get_IsTrimmed();
    public void set_IsTrimmed(bool value);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
}
public class JetBrains.UI.Controls.Common.TextBox : TextBox {
    private static TextBox();
}
public class JetBrains.UI.Controls.Common.Window : Window {
    private Lifetime myLifetime;
    private LifetimeDefinition myLifetimeDefinition;
    public static DependencyProperty AllowEscapeClosingProperty;
    [CompilerGeneratedAttribute]
private bool <IsInClosing>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public bool AllowEscapeClosing { get; public set; }
    private bool IsInClosing { get; private set; }
    private static Window();
    public bool get_AllowEscapeClosing();
    public void set_AllowEscapeClosing(bool value);
    protected virtual void OnDataContextChanged(DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool get_IsInClosing();
    [CompilerGeneratedAttribute]
private void set_IsInClosing(bool value);
    private void OnViewModelIsClosedChanged(PropertyChangedEventArgs`1<bool> args);
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    public void Help();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object sender, EventArgs args);
}
public class JetBrains.UI.Controls.ContentAdorner : Adorner {
    private ContentPresenter myChild;
    public static DependencyProperty ContentProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegate11;
    protected int VisualChildrenCount { get; }
    protected IEnumerator LogicalChildren { get; }
    public object Content { get; public set; }
    public ContentAdorner(UIElement adornedElement);
    private static ContentAdorner();
    protected virtual int get_VisualChildrenCount();
    protected virtual Visual GetVisualChild(int index);
    protected virtual IEnumerator get_LogicalChildren();
    public object get_Content();
    public void set_Content(object value);
    protected virtual object CoerceContent(object baseValue);
    private void OnContentChanged(DependencyPropertyChangedEventArgs args);
    private void Bind(DependencyProperty dependencyProperty);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__e(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__f(DependencyObject o, object value);
}
public class JetBrains.UI.Controls.CustomListBoxControl`1 : ListBox {
    private IItemPainter`1<T> myItemPainter;
    private int myPreviousSelectedIndex;
    private bool myDrawSelectionAsFocus;
    private bool myHideVerticalScrollBar;
    private EventHandler Scrolled;
    [CompilerGeneratedAttribute]
private int <HoveredItem>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    public bool DrawSelectionAsFocus { get; public set; }
    protected CreateParams CreateParams { get; }
    public int HoveredItem { get; private set; }
    public int SelectedIndex { get; public set; }
    unknown IItemPainter`1<T> ItemPainter {public set; }
    public CustomListBoxControl`1(bool hideVerticalScrollBar);
    public bool get_DrawSelectionAsFocus();
    public void set_DrawSelectionAsFocus(bool value);
    protected virtual CreateParams get_CreateParams();
    [CompilerGeneratedAttribute]
public int get_HoveredItem();
    [CompilerGeneratedAttribute]
private void set_HoveredItem(int value);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public void set_ItemPainter(IItemPainter`1<T> value);
    public void add_Scrolled(EventHandler value);
    public void remove_Scrolled(EventHandler value);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void WndProc(Message& m);
    private void CheckSelectedIndexPreview(int index);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, EventArgs param1);
}
public class JetBrains.UI.Controls.CustomRender : FrameworkElement {
    private Action`1<DrawingContext> myRender;
    public CustomRender(Action`1<DrawingContext> render);
    protected virtual void OnRender(DrawingContext drawingContext);
}
public class JetBrains.UI.Controls.CustomVisualsControl`1 : FrameworkElement {
    private PanelType myChild;
    protected PanelType Panel { get; }
    protected IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    protected PanelType get_Panel();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
}
public class JetBrains.UI.Controls.DependentControlIndent : Border {
    public DependentControlIndent(UIElement child);
    private static DependentControlIndent();
}
public class JetBrains.UI.Controls.Dialogs.PromptWinForm : Form {
    [CanBeNullAttribute]
private IWin32Window myParentWindow;
    private IContainer components;
    private TextBox myTextBox;
    private Button myCancelButton;
    private Button myOkButton;
    private Label myLabel;
    public string Value { get; }
    public PromptWinForm(IWin32Window parentWindow, string title, string label, string defaultValue, Func`2<string, string> validator, IWindowsHookManager windowsHookManager, FormValidators formvalidators, IUIApplication environment);
    private void CorrectOverlapping();
    public string get_Value();
    public bool ShowDialog();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, PropertyChangedEventArgs`2<string, ValidatorSeverity> e);
}
[ShellComponentAttribute]
public class JetBrains.UI.Controls.Dialogs.PromptWinFormInteractive : DummyPromptWinForms {
    private IWindowsHookManager myWindowsHookManager;
    private FormValidators myFormValidators;
    private IUIApplication myUIApplication;
    public PromptWinFormInteractive(IWindowsHookManager windowsHookManager, FormValidators formValidators, IUIApplication uiApplication);
    public virtual string Prompt(IWin32Window parentWindow, string title, string label, string defaultValue, Func`2<string, string> validator);
}
public class JetBrains.UI.Controls.DropDownButton : ToggleButton {
    public static DependencyProperty DropDownMenuProperty;
    public static DependencyProperty ActionManagerDropDownMenuProperty;
    public ContextMenu DropDownMenu { get; public set; }
    public ActionManagerContextMenu ActionManagerDropDownMenu { get; public set; }
    private static DropDownButton();
    public ContextMenu get_DropDownMenu();
    public void set_DropDownMenu(ContextMenu value);
    public ActionManagerContextMenu get_ActionManagerDropDownMenu();
    public void set_ActionManagerDropDownMenu(ActionManagerContextMenu value);
    private static void OnMenuChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void DropDownMenuOnClosed(object sender, RoutedEventArgs routedEventArgs);
    private static object OnCoerceStyle(DependencyObject d, object basevalue);
    protected virtual void OnClick();
    [CompilerGeneratedAttribute]
private void <OnClick>b__2();
}
public class JetBrains.UI.Controls.DropDownList : ComboBox {
    private static DropDownList();
}
public class JetBrains.UI.Controls.EditboxGlyph : Label {
    private Padding MinPadding;
    [NotNullAttribute]
private IconId myGlyph;
    private IThemedIconManager myThemedIconManager;
    [CompilerGeneratedAttribute]
private ITooltipProvider <TooltipProvider>k__BackingField;
    [NotNullAttribute]
public IconId Glyph { get; }
    [CanBeNullAttribute]
public ITooltipProvider TooltipProvider { get; public set; }
    public EditboxGlyph(TextBox parent, IconId glyph, IThemedIconManager themedIconManager);
    public IconId get_Glyph();
    [CompilerGeneratedAttribute]
public ITooltipProvider get_TooltipProvider();
    [CompilerGeneratedAttribute]
public void set_TooltipProvider(ITooltipProvider value);
    private void OnLayoutParent(object sender, EventArgs args);
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void OnPaint(PaintEventArgs args);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
}
[ContentPropertyAttribute("Drawing")]
public class JetBrains.UI.Controls.Glyph : Control {
    public static DependencyProperty StretchProperty;
    public static DependencyProperty StretchDirectionProperty;
    public static DependencyProperty StrokeProperty;
    public static DependencyProperty FillProperty;
    public static DependencyProperty DrawingProperty;
    private Image myImage;
    private DrawingImage myDrawingImage;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3;
    public Stretch Stretch { get; public set; }
    public StretchDirection StretchDirection { get; public set; }
    public Brush Stroke { get; public set; }
    public Brush Fill { get; public set; }
    public Drawing Drawing { get; public set; }
    protected IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    private static Glyph();
    public Stretch get_Stretch();
    public void set_Stretch(Stretch value);
    public StretchDirection get_StretchDirection();
    public void set_StretchDirection(StretchDirection value);
    public Brush get_Stroke();
    public void set_Stroke(Brush value);
    public Brush get_Fill();
    public void set_Fill(Brush value);
    private void OnFillChanged(DependencyPropertyChangedEventArgs args);
    public Drawing get_Drawing();
    public void set_Drawing(Drawing value);
    private void OnDrawingChanged(DependencyPropertyChangedEventArgs args);
    protected virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
    protected virtual Visual GetVisualChild(int i);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    private void Apply(Drawing drawing);
    private bool IsTransparent(Brush brush);
    private void BindFill(DependencyObject dependencyObject, DependencyProperty property);
    private void BindStroke(DependencyObject dependencyObject, DependencyProperty property);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9(object s, RoutedEventArgs e);
}
public class JetBrains.UI.Controls.GlyphDecorator : RecolorDecorator {
    private static GlyphDecorator();
}
public class JetBrains.UI.Controls.GotoByName.GotoByNameMenu : object {
    [NotNullAttribute]
private static ReadonlyToken myReadonlyToken;
    [NotNullAttribute]
public IProperty`1<JetPopupMenuView> MenuView;
    [NotNullAttribute]
public IProperty`1<IPopupWindow> PopupWindow;
    private GotoByNameMenuComponent myGotoByNameMenuComponent;
    [CompilerGeneratedAttribute]
private static Func`2<string, RichTextBlock> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static ComposerDelegate<bool, bool, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate25;
    public GotoByNameMenu(GotoByNameMenuComponent gotoByNameMenuComponent, LifetimeDefinition lifetimeDefinition, GotoByNameModel model, IWin32Window ownerwin, SearchTextData initialSearchTextData, IPopupWindowContext customPopupWindowContext);
    private static GotoByNameMenu();
    private static void Init_EditboxColor(Lifetime lifetime, IProperty`1<bool> propIsModelBusy, IProperty`1<bool> propIsInputPending, IProperty`1<bool> propIsValid, JetPopupMenuView view);
    private static void Init_EditboxEnter(Lifetime lifetime, GotoByNameModel model, JetPopupMenuView view);
    private static void Init_ExtensionControl(Lifetime lifetime, GotoByNameModel model, JetPopupMenuView view, IThreading invocator, IFontsManager fontsman);
    private void Init_Glyph(Lifetime lifetime, GotoByNameModel model, JetPopupMenuView view);
    [CompilerGeneratedAttribute]
private static RichTextBlock <.ctor>b__1(string arg);
    [CompilerGeneratedAttribute]
private static bool <Init_EditboxColor>b__d(bool one, bool two);
    [CompilerGeneratedAttribute]
private static bool <Init_Glyph>b__22(string s);
}
[ShellComponentAttribute]
public class JetBrains.UI.Controls.GotoByName.GotoByNameMenuComponent : object {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreading <Invocator>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ITooltipManager <Tooltipman>k__BackingField;
    [CompilerGeneratedAttribute]
private PopupWindowManager <PopupWindowManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsHookManager <IWindowsHookManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IMainWindowPopupWindowContext <MainWindowPopupWindowContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionManager <ActionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionShortcuts <ShortcutManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ITheming <Theming>k__BackingField;
    public IUIApplication Environment { get; private set; }
    public IThreading Invocator { get; private set; }
    public ISettingsStore Settings { get; private set; }
    public ITooltipManager Tooltipman { get; private set; }
    public PopupWindowManager PopupWindowManager { get; private set; }
    public IWindowsHookManager IWindowsHookManager { get; private set; }
    public IMainWindowPopupWindowContext MainWindowPopupWindowContext { get; private set; }
    public IActionManager ActionManager { get; private set; }
    public IActionShortcuts ShortcutManager { get; private set; }
    public ITheming Theming { get; private set; }
    public GotoByNameMenuComponent(IThreading invocator, IUIApplication environment, ISettingsStore settings, ITooltipManager tooltipman, PopupWindowManager popupWindowManager, IWindowsHookManager windowsHookManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IActionManager actionManager, IActionShortcuts shortcutManager, ITheming theming);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    [CompilerGeneratedAttribute]
public IThreading get_Invocator();
    [CompilerGeneratedAttribute]
private void set_Invocator(IThreading value);
    [CompilerGeneratedAttribute]
public ISettingsStore get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(ISettingsStore value);
    [CompilerGeneratedAttribute]
public ITooltipManager get_Tooltipman();
    [CompilerGeneratedAttribute]
private void set_Tooltipman(ITooltipManager value);
    [CompilerGeneratedAttribute]
public PopupWindowManager get_PopupWindowManager();
    [CompilerGeneratedAttribute]
private void set_PopupWindowManager(PopupWindowManager value);
    [CompilerGeneratedAttribute]
public IWindowsHookManager get_IWindowsHookManager();
    [CompilerGeneratedAttribute]
private void set_IWindowsHookManager(IWindowsHookManager value);
    [CompilerGeneratedAttribute]
public IMainWindowPopupWindowContext get_MainWindowPopupWindowContext();
    [CompilerGeneratedAttribute]
private void set_MainWindowPopupWindowContext(IMainWindowPopupWindowContext value);
    [CompilerGeneratedAttribute]
public IActionManager get_ActionManager();
    [CompilerGeneratedAttribute]
private void set_ActionManager(IActionManager value);
    [CompilerGeneratedAttribute]
public IActionShortcuts get_ShortcutManager();
    [CompilerGeneratedAttribute]
private void set_ShortcutManager(IActionShortcuts value);
    [CompilerGeneratedAttribute]
public ITheming get_Theming();
    [CompilerGeneratedAttribute]
private void set_Theming(ITheming value);
}
public class JetBrains.UI.Controls.GotoByName.GotoByNameMenuView : JetPopupMenuView {
    private GotoByNameMenuComponent myMenuComponent;
    private static String[] ourAvailableActions;
    private IList`1<IDataRule> myDataRules;
    private Dictionary`2<ActionShortcut, IActionDefWithId> myAvailableActionShortcuts;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<IActionDefWithId, ActionShortcut>, ActionShortcut> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<IActionDefWithId, ActionShortcut>, ActionShortcut> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<IActionDefWithId, ActionShortcut>, IActionDefWithId> CS$<>9__CachedAnonymousMethodDelegate14;
    public GotoByNameMenuView(LifetimeDefinition lifetimeDefinition, GotoByNameMenuComponent menuComponent, JetPopupMenuDoc document, IWin32Window ownerwin, SearchTextData initialSearchTextData, IActionManager actionManager, IActionShortcuts shortcutManager);
    private static GotoByNameMenuView();
    private void QuickSearchKeyDown(object sender, PreviewKeyDownEventArgs e);
    [NotNullAttribute]
private static Dictionary`2<ActionShortcut, IActionDefWithId> GetEnabledActionShortcutStrings(IActionManager actionman, IActionShortcuts shortcutManager);
    public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
    [CompilerGeneratedAttribute]
private SearchTextData <.ctor>b__0(IDataContext ctx);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static ActionShortcut <GetEnabledActionShortcutStrings>b__f(<>f__AnonymousType2`2<IActionDefWithId, ActionShortcut> tuple);
    [CompilerGeneratedAttribute]
private static ActionShortcut <GetEnabledActionShortcutStrings>b__10(<>f__AnonymousType2`2<IActionDefWithId, ActionShortcut> tuple);
    [CompilerGeneratedAttribute]
private static IActionDefWithId <GetEnabledActionShortcutStrings>b__11(<>f__AnonymousType2`2<IActionDefWithId, ActionShortcut> tuple);
}
public class JetBrains.UI.Controls.ImageListButton : SafeUserControl {
    private ImageList _imageList;
    private int _normalImageIndex;
    private int _hotImageIndex;
    private int _disabledImageIndex;
    private int _pressedImageIndex;
    private bool _pressed;
    private bool _hot;
    [DefaultValueAttribute("")]
public ImageList ImageList { get; public set; }
    [DefaultValueAttribute("-1")]
public int NormalImageIndex { get; public set; }
    [DefaultValueAttribute("-1")]
public int HotImageIndex { get; public set; }
    [DefaultValueAttribute("-1")]
public int DisabledImageIndex { get; public set; }
    public int PressedImageIndex { get; public set; }
    public ImageListButton(IUIApplication environment);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public int get_NormalImageIndex();
    public void set_NormalImageIndex(int value);
    public int get_HotImageIndex();
    public void set_HotImageIndex(int value);
    public int get_DisabledImageIndex();
    public void set_DisabledImageIndex(int value);
    public int get_PressedImageIndex();
    public void set_PressedImageIndex(int value);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs pe);
    private int GetCurrentImageIndex();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
}
public class JetBrains.UI.Controls.JetLoaderAnimationRenderer : object {
    private SolidColorBrush[] _brushes;
    private string _glyphs;
    private UInt32 _lastRenderMs;
    private Particle[] _particles;
    private Point _position;
    private double _radius;
    private double _radiusSpeed;
    private Random _random;
    private Size _size;
    private Vector _speed;
    private int _tick;
    public Size Size { get; }
    public Size get_Size();
    public void Draw(DrawingContext dc);
    public bool Loop();
    private int GetCurrentColorBrushIndex();
    private double HandleLimits(double coord, double radius, double speed, double limit);
    private void Step();
    private void StepCoordinates();
    private void StepRadius();
}
public class JetBrains.UI.Controls.LinkLabel : LinkLabel {
    [NotNullAttribute]
public ISignal`1<JetPopupMenu> ContextMenu;
    [NotNullAttribute]
public ISimpleSignal LinkClicked;
    [CanBeNullAttribute]
public RichTextBlock ToolTip;
    private Lifetime myLifetime;
    private JetPopupMenus myJetPopupMenus;
    public LinkLabel(string text, Uri uri, OpensUri opensUri, JetPopupMenus jetPopupMenus);
    public LinkLabel(string text, Action action, JetPopupMenus jetPopupMenus);
    public LinkLabel(string text, JetPopupMenus jetPopupMenus);
    public LinkLabel(Uri uri, OpensUri opensUri, JetPopupMenus jetPopupMenus);
    public void ShowContextMenu();
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnLinkClicked(LinkLabelLinkClickedEventArgs args);
    protected virtual void WndProc(Message& msg);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
}
public class JetBrains.UI.Controls.MetroBusyIndicator : FrameworkElement {
    private Stopwatch myStopwatch;
    private DispatcherTimer myAnimationTimer;
    public static DependencyProperty IsBusyProperty;
    public static DependencyProperty DelayProperty;
    public static DependencyProperty IndicatorLengthProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty IndicatorBrushProperty;
    public static DependencyProperty VelocityProperty;
    public bool IsBusy { get; public set; }
    public int Delay { get; public set; }
    public double IndicatorLength { get; public set; }
    public Brush Background { get; public set; }
    public Brush IndicatorBrush { get; public set; }
    public double Velocity { get; public set; }
    private static MetroBusyIndicator();
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    private static void OnIsBusyPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void OnIsBusyChanged(DependencyPropertyChangedEventArgs args);
    private void OnTick(object sender, EventArgs e);
    public int get_Delay();
    public void set_Delay(int value);
    public double get_IndicatorLength();
    public void set_IndicatorLength(double value);
    public Brush get_Background();
    public void set_Background(Brush value);
    public Brush get_IndicatorBrush();
    public void set_IndicatorBrush(Brush value);
    public double get_Velocity();
    public void set_Velocity(double value);
    protected virtual void OnRender(DrawingContext drawingContext);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object s, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object s, RoutedEventArgs e);
}
public static class JetBrains.UI.Controls.Misc.ItemStyles : object {
    public static DependencyProperty IsFirstProperty;
    public static DependencyProperty IsLastProperty;
    public static DependencyProperty EnableItemStylesProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    private static ItemStyles();
    public static void SetIsFirst(UIElement element, bool value);
    public static bool GetIsFirst(UIElement element);
    public static void SetIsLast(UIElement element, bool value);
    public static bool GetIsLast(UIElement element);
    private static void MarkPanelChildren(Panel panel);
    private static void OnEnableItemStylesPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    public static void SetEnableItemStyles(UIElement element, bool value);
    public static bool GetEnableItemStyles(UIElement element);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public enum JetBrains.UI.Controls.Misc.SearchMode : Enum {
    public int value__;
    public static SearchMode Instant;
    public static SearchMode Delayed;
}
public class JetBrains.UI.Controls.Misc.SearchTextBox : TextBox {
    public static DependencyProperty LabelTextProperty;
    public static DependencyProperty LabelTextColorProperty;
    public static DependencyProperty SearchModeProperty;
    private static DependencyPropertyKey HasTextPropertyKey;
    public static DependencyProperty HasTextProperty;
    private static DependencyPropertyKey IsMouseLeftButtonDownPropertyKey;
    public static DependencyProperty IsMouseLeftButtonDownProperty;
    public static DependencyProperty SearchEventTimeDelayProperty;
    public static RoutedEvent SearchEvent;
    public static DependencyProperty IsBusyProperty;
    public static DependencyProperty AutoHideProperty;
    public static DependencyProperty AutoHideButtonEnabledProperty;
    public static DependencyProperty ListenKeyboardOnProperty;
    private DispatcherTimer searchEventDelayTimer;
    public static DependencyProperty SearchBehaviorProperty;
    private static DependencyProperty SearchBehaviorConvertedToViewProperty;
    [CompilerGeneratedAttribute]
private ICommand <ClearCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegateb;
    public bool AutoHide { get; public set; }
    public Visibility AutoHideButtonEnabled { get; public set; }
    public FrameworkElement ListenKeyboardOn { get; public set; }
    public ICommand ClearCommand { get; private set; }
    public string LabelText { get; public set; }
    public Brush LabelTextColor { get; public set; }
    public SearchMode SearchMode { get; public set; }
    public bool HasText { get; private set; }
    public Duration SearchEventTimeDelay { get; public set; }
    public bool IsMouseLeftButtonDown { get; private set; }
    public bool IsBusy { get; public set; }
    public SearchModelEventHandler SearchBehavior { get; public set; }
    private static SearchTextBox();
    public bool get_AutoHide();
    public void set_AutoHide(bool value);
    public Visibility get_AutoHideButtonEnabled();
    public void set_AutoHideButtonEnabled(Visibility value);
    public FrameworkElement get_ListenKeyboardOn();
    public void set_ListenKeyboardOn(FrameworkElement value);
    [CompilerGeneratedAttribute]
public ICommand get_ClearCommand();
    [CompilerGeneratedAttribute]
private void set_ClearCommand(ICommand value);
    private void OnListenKeyboardOnPropertyChanged(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void OnSeachEventDelayTimerTick(object o, EventArgs e);
    private static void OnSearchEventTimeDelayChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnTextChanged(TextChangedEventArgs e);
    public virtual void OnApplyTemplate();
    private void IconBorderMouseLeftButtonDown(object obj, MouseButtonEventArgs e);
    private void IconBorderMouseLeftButtonUp(object obj, MouseButtonEventArgs e);
    private void IconBorderMouseLeave(object obj, MouseEventArgs e);
    private void OwnerOnKeyDown(object sender, KeyEventArgs e);
    private void OnInputOwnerChar(object sender1, TextCompositionEventArgs eventArgs);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void MoveFocusToOwner();
    private void RaiseSearchEvent();
    public string get_LabelText();
    public void set_LabelText(string value);
    public Brush get_LabelTextColor();
    public void set_LabelTextColor(Brush value);
    public SearchMode get_SearchMode();
    public void set_SearchMode(SearchMode value);
    public bool get_HasText();
    private void set_HasText(bool value);
    public Duration get_SearchEventTimeDelay();
    public void set_SearchEventTimeDelay(Duration value);
    public bool get_IsMouseLeftButtonDown();
    private void set_IsMouseLeftButtonDown(bool value);
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    public void add_Search(SearchViewEventHandler value);
    public void remove_Search(SearchViewEventHandler value);
    public SearchModelEventHandler get_SearchBehavior();
    public void set_SearchBehavior(SearchModelEventHandler value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject target, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__10();
}
public class JetBrains.UI.Controls.Misc.SearchViewEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private string <SearchText>k__BackingField;
    [NotNullAttribute]
public string SearchText { get; private set; }
    public SearchViewEventArgs(object source, string text);
    [CompilerGeneratedAttribute]
public string get_SearchText();
    [CompilerGeneratedAttribute]
private void set_SearchText(string value);
}
public class JetBrains.UI.Controls.Misc.SearchViewEventHandler : MulticastDelegate {
    public SearchViewEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SearchViewEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, SearchViewEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.UI.Controls.Misc.StackOrStretchPanel : Panel {
    private double myRowHeight;
    private double myScaleFactor;
    private static StackOrStretchPanel();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    private Size GetDesiredSizeLessMargin(UIElement element);
}
public static class JetBrains.UI.Controls.Misc.TextSearchHighlighting : object {
    public static DependencyProperty SearchTextProperty;
    public static DependencyProperty HighlightBrushProperty;
    public static DependencyProperty SourceTextProperty;
    private static bool ourInsideHighlight;
    private static TextSearchHighlighting();
    public static void SetSearchText(DependencyObject target, string value);
    public static string GetSearchText(DependencyObject target);
    public static void SetHighlightBrush(DependencyObject target, Brush value);
    public static Brush GetHighlightBrush(DependencyObject target);
    public static void SetSourceText(DependencyObject target, string value);
    public static string GetSourceText(DependencyObject target);
    [CanBeNullAttribute]
private static string GetTextBlockText(TextBlock textBlock);
    private static void Rehighlight(TextBlock textBlock);
    private static void OnChange(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
}
public class JetBrains.UI.Controls.Misc.TreeToggleButton : ToggleButton {
    private static TreeToggleButton();
}
public class JetBrains.UI.Controls.OwnedForm : Form {
    [CanBeNullAttribute]
public IWin32Window OwnerWindow;
    protected CreateParams CreateParams { get; }
    public OwnedForm(IWin32Window owner);
    public void Show();
    public DialogResult ShowDialog();
    [ObsoleteAttribute("Use Show() without parameters as the owner window should be already defined.")]
public void Show(IWin32Window owner);
    [ObsoleteAttribute("Use ShowDialog() without parameters as the owner window should be already defined.")]
public DialogResult ShowDialog(IWin32Window owner);
    protected virtual CreateParams get_CreateParams();
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertOwner(IWin32Window owner, string text);
}
public class JetBrains.UI.Controls.PanoramaHeaderPanel : Panel {
    public static DependencyProperty SelectedIndexProperty;
    private bool myAnimating;
    private int myCurrentSelectedIndex;
    private int myPreviousSelectedIndex;
    private Duration mySlideDuration;
    public int SelectedIndex { get; public set; }
    private static PanoramaHeaderPanel();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private IEnumerable`1<UIElement> Enumerate(int from, int to);
    [CompilerGeneratedAttribute]
private void <MeasureOverride>b__0(object s, EventArgs e);
}
public class JetBrains.UI.Controls.PixelSnappedDecorator : Decorator {
    private double myOffsetX;
    private double myOffsetY;
    public PixelSnappedDecorator(UIElement child);
    private void OnLayoutUpdated(object sender, EventArgs e);
    private bool UpdateSnappedOffsets();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    private Rect ComputeSnappedArrangedSize(Size size);
}
public class JetBrains.UI.Controls.PresentableItemTipPainter : object {
    protected Rectangle myBounds;
    [NotNullAttribute]
protected IProperty`1<IPresentableItem> myPresentableItem;
    [NotNullAttribute]
protected IProperty`1<RenderParams> myRenderParams;
    private SimpleSignal myGottenDirty;
    private IThemedIconManager myThemedIconManager;
    private ISimpleSignal myWantsResize;
    public IProperty`1<IPresentableItem> PresentableItem { get; }
    public IProperty`1<RenderParams> RenderParams { get; }
    public bool AutoActivate { get; public set; }
    public Rectangle Bounds { get; }
    public ISimpleSignal GottenDirty { get; }
    public ISimpleSignal WantsResize { get; }
    public PresentableItemTipPainter(IPresentableItem presentableItem, RenderParams renderParams, IThemedIconManager themedIconManager);
    public PresentableItemTipPainter(IPresentableItem presentableItem, IThemedIconManager themedIconManager);
    public PresentableItemTipPainter(RichText text, IThemedIconManager themedIconManager);
    public PresentableItemTipPainter(string text, IThemedIconManager themedIconManager);
    public IProperty`1<IPresentableItem> get_PresentableItem();
    private void Init();
    public virtual string ToString();
    public sealed virtual IProperty`1<RenderParams> get_RenderParams();
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void Paint(Graphics g);
    public sealed virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
    public sealed virtual void SetLayout(LayoutResult layout);
    public sealed virtual bool get_AutoActivate();
    public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual Rectangle get_Bounds();
    public sealed virtual ISimpleSignal get_GottenDirty();
    public sealed virtual ISimpleSignal get_WantsResize();
}
public class JetBrains.UI.Controls.ProgressCircle : RangeBase {
    private Grid myGridRoot;
    private void InitView();
    private void UpdatePosition();
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void OnMaximumChanged(double oldMaximum, double newMaximum);
    protected virtual void OnMinimumChanged(double oldMinimum, double newMinimum);
    protected virtual void OnValueChanged(double oldValue, double newValue);
}
public class JetBrains.UI.Controls.PromptDecorator : Decorator {
    public static DependencyProperty PromtProperty;
    private static DependencyPropertyKey IsPromptVisiblePropertyKey;
    public static DependencyProperty IsPromptVisibleProperty;
    public static DependencyProperty ChildContentPathProperty;
    public static DependencyProperty ChildContentProperty;
    public object Prompt { get; public set; }
    public bool IsPromptVisible { get; protected set; }
    public string ChildContentPath { get; public set; }
    public object ChildContent { get; public set; }
    private static PromptDecorator();
    public object get_Prompt();
    public void set_Prompt(object value);
    public bool get_IsPromptVisible();
    protected void set_IsPromptVisible(bool value);
    public string get_ChildContentPath();
    public void set_ChildContentPath(string value);
    private static void OnChildContentPath(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_ChildContent();
    public void set_ChildContent(object value);
    private static void OnChildContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void UpdateChildContentBinding();
    private void OnPromptedContentChanged(object previous, object current);
}
public class JetBrains.UI.Controls.RadioGroup.RadioGroup`1 : SafeFlowLayoutPanel {
    private static Padding myDefaultRadioMargin;
    protected CheckBoxDisabledNoCheck myCheckbox;
    protected Label myLabel;
    private JetHashSet`1<TValue> myButtonValues;
    private Lifetime myDisposables;
    private IProperty`1<bool> myPropertyButtonsEnabled;
    private TValue myValueBeforeDisabling;
    public Property`1<bool> HasCheckbox;
    public Property`1<bool> IsEnabled;
    public Property`1<bool> IsVisible;
    public Property`1<string> LabelText;
    public Property`1<TValue> NothingSelectedValue;
    public Property`1<Padding> RadioButtonsAdditionalMargin;
    public Property`1<TValue> Value;
    [CompilerGeneratedAttribute]
private static ComposerDelegate<bool, bool, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static ComposerDelegate<bool, string, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static ComposerDelegate<bool, string, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static ComposerDelegate<bool, bool, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    public RadioGroup`1(IUIApplication environment);
    private static RadioGroup`1();
    public void AddComment(Control control);
    public void AddDependent(Control control);
    public void AddRadioButton(string text, TValue value);
    public RadioButton AddRadioButton(string text, Image image, TValue value);
    protected void AddRef(IDisposable ref);
    private void Bind();
    private void InitControls();
    private RadioButton TryGetLastRadioButton();
    [CompilerGeneratedAttribute]
private static bool <AddDependent>b__0(bool valueOne, bool valueTwo);
    [CompilerGeneratedAttribute]
private void <Bind>b__a(string value);
    [CompilerGeneratedAttribute]
private static bool <Bind>b__b(bool valueOne, string valueTwo);
    [CompilerGeneratedAttribute]
private static bool <Bind>b__c(bool valueOne, string valueTwo);
    [CompilerGeneratedAttribute]
private void <Bind>b__d(bool value);
    [CompilerGeneratedAttribute]
private void <Bind>b__e(bool value);
    [CompilerGeneratedAttribute]
private static bool <Bind>b__f(bool valueOne, bool valueTwo);
    [CompilerGeneratedAttribute]
private bool <Bind>b__10(TValue valueA);
    [CompilerGeneratedAttribute]
private TValue <Bind>b__11(bool value);
    [CompilerGeneratedAttribute]
private void <Bind>b__12(BeforePropertyChangedEventArgs`1<TValue> e);
}
[ViewAttribute("0")]
public class JetBrains.UI.Controls.RadioGroup.RadioGroupView : Control {
    [CompilerGeneratedAttribute]
private static Func`2<Orientation, Thickness> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<FrameworkElementFactory> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<RichText, string> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<string, Visibility> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<Orientation, Thickness> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Action`1<FrameworkElementFactory> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<int, Visibility> CS$<>9__CachedAnonymousMethodDelegate18;
    private static RadioGroupView();
    public RadioGroupView(IRadioGroupViewModel viewmodel);
    public RadioGroupView SetModel(RadioGroupModel`1<TValue> model, PanelOrientation orientation);
    private static UIElement CreateTemplate();
    private static UIElement CreateRadioButtonTemplate();
    [CompilerGeneratedAttribute]
private static Thickness <CreateTemplate>b__3(Orientation orient);
    [CompilerGeneratedAttribute]
private static void <CreateTemplate>b__4(FrameworkElementFactory fac);
    [CompilerGeneratedAttribute]
private static string <CreateRadioButtonTemplate>b__b(RichText text);
    [CompilerGeneratedAttribute]
private static Visibility <CreateRadioButtonTemplate>b__c(string x);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <CreateRadioButtonTemplate>b__d(bool flag);
    [CompilerGeneratedAttribute]
private static bool <CreateRadioButtonTemplate>b__e(Nullable`1<bool> flag);
    [CompilerGeneratedAttribute]
private static Thickness <CreateRadioButtonTemplate>b__f(Orientation orient);
    [CompilerGeneratedAttribute]
private static void <CreateRadioButtonTemplate>b__10(FrameworkElementFactory fac);
    [CompilerGeneratedAttribute]
private static Visibility <CreateRadioButtonTemplate>b__11(int m);
}
public class JetBrains.UI.Controls.RecolorDecorator : ContentControl {
    private RecolorEffect myRecolorEffect;
    public static DependencyProperty TargetColorProperty;
    public static DependencyProperty BrightnessPreservingProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3;
    public Color TargetColor { get; public set; }
    public double BrightnessPreserving { get; public set; }
    private static RecolorDecorator();
    public Color get_TargetColor();
    public void set_TargetColor(Color value);
    private void OnTargetColorChanged(DependencyPropertyChangedEventArgs args);
    public double get_BrightnessPreserving();
    public void set_BrightnessPreserving(double value);
    private void OnBrightnessPreservingChanged(DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
[ViewAttribute("0")]
public class JetBrains.UI.Controls.RichTextAutomationView : Decorator {
    [CompilerGeneratedAttribute]
private static Func`2<RichTextBlock, RichText> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static RichText <.ctor>b__1(RichTextBlock block);
}
public class JetBrains.UI.Controls.RichTextHeading : SafeTableLayoutPanel {
    [NotNullAttribute]
private RichTextLabel myLabelBody;
    [NotNullAttribute]
private RichTextLabel myLabelTitle;
    [NotNullAttribute]
public RichTextBlock Body { get; public set; }
    [NotNullAttribute]
public RichTextLabel LabelBody { get; }
    [NotNullAttribute]
public RichTextLabel LabelTitle { get; }
    [NotNullAttribute]
public RichTextBlock Title { get; public set; }
    public RichTextHeading(IUIApplication environment);
    public RichTextHeading(RichTextBlock title, RichTextBlock body, IUIApplication environment);
    public RichTextBlock get_Body();
    public void set_Body(RichTextBlock value);
    public RichTextLabel get_LabelBody();
    public RichTextLabel get_LabelTitle();
    public RichTextBlock get_Title();
    public void set_Title(RichTextBlock value);
}
public class JetBrains.UI.Controls.RichTextLabel : Control {
    [NotNullAttribute]
private RichTextBlock myFormattedBlock;
    private Dictionary`2<int, Size> myMapWidthToSize;
    [NotNullAttribute]
private RenderParams myRenderParams;
    [NotNullAttribute]
private RichTextBlock myRichTextBlock;
    public Property`1<bool> Enabled;
    [CompilerGeneratedAttribute]
private char <Mnemonic>k__BackingField;
    public char Mnemonic { get; public set; }
    [NotNullAttribute]
public RenderParams RenderParams { get; public set; }
    public RichText RichText { get; public set; }
    [NotNullAttribute]
public RichTextBlock RichTextBlock { get; public set; }
    public Color BackColor { get; public set; }
    public Rectangle DisplayRectangle { get; }
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    public string Text { get; public set; }
    protected Size DefaultSize { get; }
    public RichTextLabel(IFontsManager fontsman);
    public RichTextLabel(IUIApplication application);
    public RichTextLabel(RichTextBlock text, Padding marginAdditional, IUIApplication application);
    public RichTextLabel(RichTextBlock text, Padding marginAdditional, IFontsManager fontsman);
    public RichTextLabel(RichTextBlock text, IFontsManager fontsman);
    public RichTextLabel(RichTextBlock text, IUIApplication application);
    public RichTextLabel(RichText text, IFontsManager fontsman);
    public RichTextLabel(RichText text, IUIApplication application);
    public static RenderParams GetDefaultRichTextLabelRenderParams(IFontsManager fontsman);
    [CompilerGeneratedAttribute]
public char get_Mnemonic();
    [CompilerGeneratedAttribute]
public void set_Mnemonic(char value);
    public RenderParams get_RenderParams();
    public void set_RenderParams(RenderParams value);
    public RichText get_RichText();
    public void set_RichText(RichText value);
    public RichTextBlock get_RichTextBlock();
    public void set_RichTextBlock(RichTextBlock value);
    private void UpdateTextBlock();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnPaint(PaintEventArgs args);
    protected virtual bool ProcessMnemonic(char charCode);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Rectangle get_DisplayRectangle();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    protected virtual void OnFontChanged(EventArgs e);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    protected virtual Size get_DefaultSize();
}
public class JetBrains.UI.Controls.RichTextPresenter : FrameworkElement {
    public static DependencyProperty RichTextProperty;
    private string myRegisteredAccessKey;
    public static DependencyProperty IsKeyAccessedProperty;
    public static DependencyProperty IsAutoContrastedProperty;
    public static DependencyProperty MaxLineCountProperty;
    public static DependencyProperty TextWrappingProperty;
    public static DependencyProperty TextTrimmingProperty;
    public static DependencyProperty IsTrimmedProperty;
    public static DependencyProperty FontFamilyProperty;
    public static DependencyProperty FontSizeProperty;
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty FontWeightProperty;
    private bool myInvalidated;
    private FormattedText myFormattedText;
    private FormattedTextBackground[] myBackgrounds;
    private Rect[] myRects;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<RichString, string> CS$<>9__CachedAnonymousMethodDelegate19;
    public RichText RichText { get; public set; }
    public bool IsKeyAccessed { get; public set; }
    public bool IsAutoContrasted { get; public set; }
    public int MaxLineCount { get; public set; }
    public TextWrapping TextWrapping { get; public set; }
    public TextTrimming TextTrimming { get; public set; }
    public bool IsTrimmed { get; public set; }
    [LocalizabilityAttribute]
public FontFamily FontFamily { get; public set; }
    [LocalizabilityAttribute]
[TypeConverterAttribute("System.Windows.FontSizeConverter")]
public double FontSize { get; public set; }
    public Brush Foreground { get; public set; }
    public Brush Background { get; public set; }
    public Thickness Padding { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public FontWeight FontWeight { get; public set; }
    private bool IsHighlighted { get; }
    private static RichTextPresenter();
    public RichTextPresenter(RichText text);
    public RichText get_RichText();
    public void set_RichText(RichText value);
    public bool get_IsKeyAccessed();
    public void set_IsKeyAccessed(bool value);
    private void RegisterAccessKey();
    private void UnregisterAccessKey();
    public bool get_IsAutoContrasted();
    public void set_IsAutoContrasted(bool value);
    public int get_MaxLineCount();
    public void set_MaxLineCount(int value);
    public TextWrapping get_TextWrapping();
    public void set_TextWrapping(TextWrapping value);
    public TextTrimming get_TextTrimming();
    public void set_TextTrimming(TextTrimming value);
    public bool get_IsTrimmed();
    public void set_IsTrimmed(bool value);
    public FontFamily get_FontFamily();
    public void set_FontFamily(FontFamily value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
    public Brush get_Background();
    public void set_Background(Brush value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    private void OnHighlightingChanged(DependencyPropertyChangedEventArgs args);
    private void OnForegroundChanged(DependencyPropertyChangedEventArgs args);
    private void OnIsMonochromeChanged(DependencyPropertyChangedEventArgs args);
    public static int IndexOfAccessKeyMarker(string text);
    [CanBeNullAttribute]
public static string GetAccessKey(string text);
    private static FormattedText ToFormattedText(RichText richText, Brush foreground, Typeface typeface, double emSize, FormattedTextBackground[]& backgrounds, bool handleAccessKeyCharacter, bool underlineAccessKey, bool adjustContrast, bool isMonochrome);
    private static bool IsEmpty(Color color);
    private static Brush GetSimilarForeground(Color foreground, Color goodForeground);
    private static Brush GetContrastForeground(Color foreground, Color background);
    private static Brush ToBrush(Color color);
    private void InvalidateContent();
    private static bool ApproximatelyEquals(double a, double b, double tolerance);
    private void UpdateContent();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    private RichText CreateHighlightedRichtext(RichText richText, bool isMonochrome);
    private Color ExtractFromSolidColorBrush(Brush brush, Color fallbackColor);
    private bool get_IsHighlighted();
    private Color GetForegroundColor();
    private Color GetBackgroundColor();
    private static Color ExtractColor(Brush brush);
    public Rect GetSubstringRect(int start, int count);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static string <ToFormattedText>b__18(RichString x);
}
[ObsoleteAttribute("Use RichTextPresenter")]
public class JetBrains.UI.Controls.RichTextTextBlock : TextBlock {
    private string myRegisteredAccessKey;
    public static DependencyProperty RichTextProperty;
    public static DependencyProperty IsKeyAccessedProperty;
    public static DependencyProperty IsAutoContrastedProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    public RichText RichText { get; public set; }
    public bool IsKeyAccessed { get; public set; }
    public bool IsAutoContrasted { get; public set; }
    private bool IsHighlighted { get; }
    private static RichTextTextBlock();
    public RichTextTextBlock(RichText text);
    public RichText get_RichText();
    public void set_RichText(RichText value);
    public bool get_IsKeyAccessed();
    public void set_IsKeyAccessed(bool value);
    public bool get_IsAutoContrasted();
    public void set_IsAutoContrasted(bool value);
    private void OnHighlightingChanged(DependencyPropertyChangedEventArgs args);
    private void OnBackgroundChanged(DependencyPropertyChangedEventArgs args);
    private void OnForegroundChanged(DependencyPropertyChangedEventArgs args);
    private void UpdateContent();
    private RichText CreateHighlightedRichtext(RichText richText);
    private Color ExtractFromSolidColorBrush(Brush brush, Color fallbackColor);
    private bool get_IsHighlighted();
    private Color GetForegroundColor();
    private Color GetBackgroundColor();
    private Color ExtractColor(Brush brush);
    private string GetAccessKey();
    private string GetAccessKey(string text);
    private void RegisterAccessKey();
    private void UnregisterAccessKey();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject sender, DependencyPropertyChangedEventArgs args);
}
public class JetBrains.UI.Controls.RichTextView : Decorator {
}
public class JetBrains.UI.Controls.RichTextWithProgressTipPainter : RichTextTipPainter {
    private IProperty`1<double> myFraction;
    private int myCachedHeight;
    public IProperty`1<double> Fraction { get; }
    public RichTextWithProgressTipPainter(Lifetime lifetime, RichText richText);
    public IProperty`1<double> get_Fraction();
    public virtual void Paint(Graphics g);
    public virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
}
public class JetBrains.UI.Controls.RunBindable : Run {
    private IProperty`1<Brush> myForegroundProp;
    public IProperty`1<bool> IsVisible;
    public IProperty`1<string> Text;
    public static DependencyProperty TextProperty;
    public static DependencyProperty IsVisibleProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6;
    public RunBindable(string text);
    private static RunBindable();
    [NotNullAttribute]
public IProperty`1<Brush> GetForegroundProp();
    private void InitDataFlow();
    [CompilerGeneratedAttribute]
private void <GetForegroundProp>b__0(PropertyChangedEventArgs`1<Brush> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__2();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
[ExtensionAttribute]
public static class JetBrains.UI.Controls.RunBindableEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static RunBindable BindFrom(RunBindable thіs, IProperty`1<T> propText, Lifetime disposables, Func`2<T, string> FConvert);
    [ExtensionAttribute]
public static RunBindable BindFrom(RunBindable thіs, Lifetime lifetime, IProperty`1<string> propText);
    [ExtensionAttribute]
public static RunBindable BindFrom(RunBindable thіs, Lifetime lifetime, IProperty`1<int> propNumber);
    [CompilerGeneratedAttribute]
private static string <BindFrom>b__0(int n);
}
public class JetBrains.UI.Controls.SaveStateCheckBox : CheckBox {
    private bool myUserChecked;
    private bool myIsForceDisabled;
    public void Disable(bool check);
    public void Enable();
    protected virtual void OnCheckedChanged(EventArgs e);
}
[TemplatePartAttribute]
[ContentPropertyAttribute("Text")]
public class JetBrains.UI.Controls.SearchTextBox : TextBox {
    private EventHandler Search;
    private DispatcherGroupingEvent mySearchGroupingEvent;
    public static DependencyProperty SearchRequestedCommandProperty;
    public static DependencyProperty WatermarkProperty;
    public static DependencyProperty HasTextProperty;
    public static DependencyProperty AutoHideProperty;
    public static DependencyProperty ShowPinButtonProperty;
    public static DependencyProperty DelayProperty;
    public static DependencyProperty ListenOnProperty;
    private WeakReference myPreviouslyFocusedElement;
    [CompilerGeneratedAttribute]
private ICommand <ClearCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <SearchCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7;
    public ICommand SearchRequestedCommand { get; public set; }
    public object Watermark { get; public set; }
    public bool HasText { get; public set; }
    public bool AutoHide { get; public set; }
    public bool ShowPinButton { get; public set; }
    public int Delay { get; public set; }
    public ICommand ClearCommand { get; private set; }
    public ICommand SearchCommand { get; private set; }
    public UIElement ListenOn { get; public set; }
    private static SearchTextBox();
    public void add_Search(EventHandler value);
    public void remove_Search(EventHandler value);
    private void RequestSearch();
    private void ScheduleSearch();
    public ICommand get_SearchRequestedCommand();
    public void set_SearchRequestedCommand(ICommand value);
    public object get_Watermark();
    public void set_Watermark(object value);
    public bool get_HasText();
    public void set_HasText(bool value);
    private void OnHasTextChanged(DependencyPropertyChangedEventArgs e);
    public bool get_AutoHide();
    public void set_AutoHide(bool value);
    private void OnAutoHideChanged(DependencyPropertyChangedEventArgs e);
    private Visibility CalculateAutoVisibility();
    public bool get_ShowPinButton();
    public void set_ShowPinButton(bool value);
    public int get_Delay();
    public void set_Delay(int value);
    private void OnDelayChanged(DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public ICommand get_ClearCommand();
    [CompilerGeneratedAttribute]
private void set_ClearCommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_SearchCommand();
    [CompilerGeneratedAttribute]
private void set_SearchCommand(ICommand value);
    public UIElement get_ListenOn();
    public void set_ListenOn(UIElement value);
    private void OnListenOnChanged(DependencyPropertyChangedEventArgs args);
    private void OnListenOnKeyDown(object sender, KeyEventArgs e);
    private void OnListenOnTextInput(object sender, TextCompositionEventArgs args);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    private void TryFocusPreviouslyFocusedElement();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8(object s, TextChangedEventArgs a);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9(object s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__a();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__b();
}
public class JetBrains.UI.Controls.SectionHeading : TextBlock {
    public SectionHeading(string text);
    private static SectionHeading();
}
public class JetBrains.UI.Controls.Separator : Label {
    private Container components;
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    protected virtual void OnPaint(PaintEventArgs pe);
}
public class JetBrains.UI.Controls.Spacer : Control {
    private Size SpacerSize;
    public virtual Size GetPreferredSize(Size proposedSize);
}
public class JetBrains.UI.Controls.SplitedButton : Button {
    private bool myAlwaysDropDown;
    private bool myAlwaysHoverChange;
    private bool myCalculateSplitRect;
    private string myClickedImage;
    private ImageList myDefaultSplitImages;
    private string myDisabledImage;
    private bool myDoubleClickedEnabled;
    private bool myFillSplitHeight;
    private string myFocusedImage;
    private string myHoverImage;
    private string myNormalImage;
    private int mySplitHeight;
    private int mySplitWidth;
    private EventHandler ButtonClick;
    private EventHandler ButtonDoubleClick;
    private IContainer components;
    [DescriptionAttribute("Indicates whether the double click event is raised on the SplitButton")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool DoubleClickedEnabled { get; public set; }
    [CategoryAttribute("Split Button")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Indicates whether the SplitButton always shows the drop down menu even if the button part of the SplitButton is clicked.")]
public bool AlwaysDropDown { get; public set; }
    [DescriptionAttribute("Indicates whether the SplitButton always shows the Hover image status in the split part even if the button part of the SplitButton is hovered.")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Split Button")]
public bool AlwaysHoverChange { get; public set; }
    [DefaultValueAttribute("True")]
[DescriptionAttribute("Indicates whether the split rectange must be calculated (basing on Split image size)")]
[CategoryAttribute("Split Button")]
public bool CalculateSplitRect { get; public set; }
    [DefaultValueAttribute("True")]
[DescriptionAttribute("Indicates whether the split height must be filled to the button height even if the split image height is lower.")]
[CategoryAttribute("Split Button")]
public bool FillSplitHeight { get; public set; }
    [DescriptionAttribute("The split height (ignored if CalculateSplitRect is setted to true).")]
[DefaultValueAttribute("0")]
[CategoryAttribute("Split Button")]
public int SplitHeight { get; public set; }
    [CategoryAttribute("Split Button")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The split width (ignored if CalculateSplitRect is setted to true).")]
public int SplitWidth { get; public set; }
    [LocalizableAttribute("True")]
[CategoryAttribute("Split Button Images")]
[DescriptionAttribute("The Normal status image name in the ImageList.")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
public string NormalImage { get; public set; }
    [LocalizableAttribute("True")]
[DescriptionAttribute("The Hover status image name in the ImageList.")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
[CategoryAttribute("Split Button Images")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
public string HoverImage { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[CategoryAttribute("Split Button Images")]
[DescriptionAttribute("The Clicked status image name in the ImageList.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
public string ClickedImage { get; public set; }
    [RefreshPropertiesAttribute("2")]
[LocalizableAttribute("True")]
[CategoryAttribute("Split Button Images")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[DescriptionAttribute("The Disabled status image name in the ImageList.")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string DisabledImage { get; public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[CategoryAttribute("Split Button Images")]
[DescriptionAttribute("The Focused status image name in the ImageList.")]
public string FocusedImage { get; public set; }
    public void add_ButtonClick(EventHandler value);
    public void remove_ButtonClick(EventHandler value);
    public void add_ButtonDoubleClick(EventHandler value);
    public void remove_ButtonDoubleClick(EventHandler value);
    public bool get_DoubleClickedEnabled();
    public void set_DoubleClickedEnabled(bool value);
    public bool get_AlwaysDropDown();
    public void set_AlwaysDropDown(bool value);
    public bool get_AlwaysHoverChange();
    public void set_AlwaysHoverChange(bool value);
    public bool get_CalculateSplitRect();
    public void set_CalculateSplitRect(bool value);
    public bool get_FillSplitHeight();
    public void set_FillSplitHeight(bool value);
    public int get_SplitHeight();
    public void set_SplitHeight(int value);
    public int get_SplitWidth();
    public void set_SplitWidth(int value);
    public string get_NormalImage();
    public void set_NormalImage(string value);
    public string get_HoverImage();
    public void set_HoverImage(string value);
    public string get_ClickedImage();
    public void set_ClickedImage(string value);
    public string get_DisabledImage();
    public void set_DisabledImage(string value);
    public string get_FocusedImage();
    public void set_FocusedImage(string value);
    protected virtual void OnCreateControl();
    private void InitDefaultSplitImages();
    private void InitDefaultSplitImages(bool refresh);
    protected virtual void OnMouseMove(MouseEventArgs mevent);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs mevent);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnDoubleClick(EventArgs e);
    private void SetSplit(string imageName);
    public bool MouseInSplit();
    public bool PointInSplit(Point pt);
    public Rectangle GetImageRect(string imageKey);
    private Image GetImage(string imageName);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
[ObsoleteAttribute("Task executors are modal, this one does not seem to be. Just create a status-based progress and make use of it.")]
public class JetBrains.UI.Controls.StatusBarTaskExecutor : object {
    private Property`1<ExecutionState> StateProperty;
    private ProgressIndicator myProgressIndicator;
    private IProgressIndicatorModel myProgressIndicatorMarshalled;
    private ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
    private IThreading myThreading;
    private IThemedIconManager myThemedIconManager;
    private IStatusBar myStatusBar;
    private IWindowBranding myWindowBranding;
    public StatusBarTaskExecutor(IThreading getComponent, IThemedIconManager themedIconManager, IStatusBar statusBar, IWindowBranding windowBranding);
    public void Cancel();
    public sealed virtual bool ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
    public sealed virtual void Dispose();
    private void AttachUi(IProgressIndicatorModel progressIndicatorModel, IThemedIconManager themedIconManager, IStatusBar statusBar, IWindowBranding windowBranding);
    [CompilerGeneratedAttribute]
private void <ExecuteTask>b__0();
    [CompilerGeneratedAttribute]
private void <Dispose>b__1();
}
public class JetBrains.UI.Controls.StringCollectionEdit : SafeTableLayoutPanel {
    private static object myInternalChangeToken;
    public Property`1<string> Caption;
    public Property`1<IconId> ItemIcon;
    public Property`1<String[]> Items;
    private Lifetime myLifetime;
    private IWin32Window myMainWindow;
    private IWindowsHookManager myWindowsHookManager;
    private FormValidators myFormValidators;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ListViewItem, object> CS$<>9__CachedAnonymousMethodDelegate1b;
    public IUIApplication Environment { get; private set; }
    public StringCollectionEdit(IUIApplication environment, string caption, IconId itemicon, IMainWindow ownerwin, IWindowsHookManager windowsHookManager, FormValidators formValidators);
    public StringCollectionEdit(IUIApplication environment, IWin32Window ownerwin, IWindowsHookManager windowsHookManager, FormValidators formValidators);
    public StringCollectionEdit(IUIApplication environment, string caption, IconId itemicon, IMainWindow ownerwin, IWindowsHookManager windowsHookManager, FormValidators formValidators, IconId addImage, IconId editImage, IconId removeImage);
    public StringCollectionEdit(IUIApplication environment, IWin32Window ownerwin, IWindowsHookManager windowsHookManager, FormValidators formValidators, IconId addImage, IconId editImage, IconId removeImage);
    private static StringCollectionEdit();
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    private void AddNewItem(ListView listItems);
    private void EditSelectedItem(ListView listItems);
    private void InitView(Lifetime lifetime, IconId iconAdd, IconId iconEdit, IconId iconRemove);
    private void RemoveSelectedItem(ListView listItems);
    [CompilerGeneratedAttribute]
private static string <AddNewItem>b__2(string s);
    [CompilerGeneratedAttribute]
private static string <EditSelectedItem>b__5(string s);
    [CompilerGeneratedAttribute]
private static object <RemoveSelectedItem>b__19(ListViewItem item);
}
public class JetBrains.UI.Controls.StripEx.CheckButton : CheckBox {
    private ProfessionalColorTable myColorTable;
    private ToolTip myToolTip;
    private MouseHoverTimer myMouseHoverTimer;
    private bool myMouseIsOver;
    private string myToolTipText;
    private bool myMouseHoverStarted;
    public string ToolTipText { get; public set; }
    public ProfessionalColorTable ColorTable { get; public set; }
    private bool UseSystemColors { get; }
    private MouseHoverTimer MouseHoverTimer { get; }
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public ProfessionalColorTable get_ColorTable();
    public void set_ColorTable(ProfessionalColorTable value);
    private bool get_UseSystemColors();
    private MouseHoverTimer get_MouseHoverTimer();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    private void RenderContent(Graphics g, Rectangle bounds);
    internal void UpdateTooltip();
    protected virtual void OnMouseEnter(EventArgs eventargs);
    protected virtual void OnMouseMove(MouseEventArgs mevent);
    protected virtual void OnMouseLeave(EventArgs eventargs);
    private void RenderCheckedButtonFill(Graphics g, Rectangle bounds);
    private void RenderSelectedButtonFill(Graphics g, Rectangle bounds);
    private void RenderPressedButtonFill(Graphics g, Rectangle bounds);
    private static Rectangle DeflateRect(Rectangle rect, Padding padding);
    private static Rectangle ConstrainToScreenBounds(Rectangle bounds);
    private static Rectangle ConstrainToBounds(Rectangle constrainingBounds, Rectangle bounds);
}
internal class JetBrains.UI.Controls.StripEx.MouseHoverTimer : object {
    private static int SPI_GETMOUSEHOVERTIME_WIN9X;
    private CheckButton myButton;
    private Timer myTimer;
    public sealed virtual void Dispose();
    public void Start(CheckButton button);
    private void Cancel();
    public void Cancel(CheckButton button);
    private void OnTick(object sender, EventArgs e);
}
public class JetBrains.UI.Controls.StripEx.ThemedToolStrip : ToolStripEx {
    private IUIApplication myEnvironment;
    private ProfessionalColorTable myColorTable;
    private bool myUsedCustomColorTable;
    public Color ForeColor { get; public set; }
    public ThemedToolStrip(Lifetime lifetime, IUIApplication environment);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    private void UpdateRenderer();
    protected virtual void OnItemAdded(ToolStripItemEventArgs e);
    public void SetCustomColorTable(ProfessionalColorTable vsFlatColorTable);
}
public class JetBrains.UI.Controls.StripEx.ToolStripButtonEx`1 : ToolStripButton {
    public ToolStripButtonEx`1(Lifetime lifetime, IThemedIconManager themedIconManager, string text, EventHandler onClick);
}
public class JetBrains.UI.Controls.StripEx.ToolStripEx : ToolStrip {
    private bool myClickThrough;
    public bool ClickThrough { get; public set; }
    public bool get_ClickThrough();
    public void set_ClickThrough(bool value);
    protected virtual void WndProc(Message& m);
}
public class JetBrains.UI.Controls.StripEx.ToolStripProfessionalRendererEx : ToolStripProfessionalRenderer {
    private IThemedIconManager myIconManager;
    private bool UseSystemColors { get; }
    public ToolStripProfessionalRendererEx(ProfessionalColorTable professionalColorTable, IThemedIconManager themedIconManager);
    protected virtual void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderItemBackground(ToolStripItemRenderEventArgs e);
    private void RenderCheckedBackground(Graphics graphics, Rectangle bounds);
    protected virtual void OnRenderArrow(ToolStripArrowRenderEventArgs e);
    private static Rectangle DeflateRect(Rectangle rect, Padding padding);
    private void RenderPressedGradient(Graphics g, Rectangle bounds);
    private void RenderCheckedButtonFill(Graphics g, Rectangle bounds);
    private void RenderPressedButtonFill(Graphics g, Rectangle bounds);
    private void RenderItemInternal(ToolStripItemRenderEventArgs e, bool useHotBorder);
    private void RenderSelectedButtonFill(Graphics g, Rectangle bounds);
    private bool get_UseSystemColors();
}
public class JetBrains.UI.Controls.TableLayoutPanelColored : SafeTableLayoutPanel {
    private Color myColorFill;
    public Color FillColor { get; public set; }
    public TableLayoutPanelColored(Color fillcolor, IUIApplication environment);
    private TableLayoutPanelColored(IUIApplication environment);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    protected virtual void OnPaintBackground(PaintEventArgs args);
}
public interface JetBrains.UI.Controls.TabStrip.ITabStripRenderer {
    public abstract virtual void DrawPageBackgroundActive(Graphics graphics, Rectangle bounds, TabStripPage page, int index);
    public abstract virtual void DrawPageBackground(Graphics graphics, Rectangle bounds, TabStripPage page, int index);
    public abstract virtual void DrawArrow(Graphics graphics, Rectangle bounds, ArrowDirection direction, bool enabled, bool hotTrack);
    public abstract virtual void DrawBackground(Graphics graphics, Rectangle bounds);
    public abstract virtual void DrawPresentableItem(Graphics g, Rectangle bounds, TabStripPage page, bool isActive, RenderParams renderParams, Nullable`1<double> fFrame);
    public abstract virtual void DrawCloseGlyph(Graphics g, Rectangle bounds, bool hotTrack);
}
internal class JetBrains.UI.Controls.TabStrip.MeasuredPage : object {
    private TabStripPage myPage;
    private Point myPoint;
    private Size mySize;
    private bool mySizeReduced;
    private IThemedIconManager myThemedIconManager;
    public Point Point { get; public set; }
    public Size Size { get; public set; }
    public bool SizeReduced { get; public set; }
    public TabStripPage Page { get; }
    public Rectangle Rectangle { get; }
    public MeasuredPage(TabStripPage page, IThemedIconManager themedIconManager);
    public Point get_Point();
    public void set_Point(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public bool get_SizeReduced();
    public void set_SizeReduced(bool value);
    public TabStripPage get_Page();
    public Rectangle get_Rectangle();
    public void SetPreferredSize(Graphics g, Padding padding, int rightImageSize, RenderParams renderParams);
}
public class JetBrains.UI.Controls.TabStrip.TabPageEventArgs : EventArgs {
    private int myIndex;
    private TabStripPage myPage;
    public int Index { get; }
    public TabStripPage Page { get; }
    public TabPageEventArgs(TabStripPage page);
    public TabPageEventArgs(int index, TabStripPage page);
    public int get_Index();
    public TabStripPage get_Page();
}
public class JetBrains.UI.Controls.TabStrip.TabPageEventHandler : MulticastDelegate {
    public TabPageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TabPageEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, TabPageEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.UI.Controls.TabStrip.TabStrip : Control {
    private static int SCROLL_ARROW_WIDTH;
    private static int PRESENTABLE_ITEM_MARGIN;
    private static int cCloseImagePadding;
    private IUIApplication myEnvironment;
    private IDisposable myAlarm;
    private JetHashSet`1<TabStripPage> myAnimations;
    private Image myCloseImage;
    private TabStripPageCollection myPages;
    private RenderParams myRenderParams;
    private int myActiveIndex;
    private int myPresentableItemMargin;
    private TabStripPage myActivePage;
    private Timer myAnimationTimer;
    private TabStripPage myCapturePage;
    private bool myCloseButtonHotTrack;
    private bool myCloseOnMiddleClick;
    private int myFirstPageIndex;
    private Point myHoverLocation;
    private bool myLeftArrowEnabled;
    private bool myLeftArrowHotTrack;
    private List`1<MeasuredPage> myMeasuredPages;
    private bool myNeedScrollButtons;
    private Padding myPagePadding;
    private ITabStripRenderer myRenderer;
    private bool myRightArrowEnabled;
    private bool myRightArrowHotTrack;
    private bool myShrinkToFit;
    private Rectangle myTabPagesRectangle;
    private Lifetime myLifetime;
    private EventHandler ActivePageChanged;
    private EventHandler ActivePageContentChanged;
    private EventHandler TabDoubleClicked;
    public EventHandler`1<ContextMenuEventArgs> ContextMenuRequested;
    [CompilerGeneratedAttribute]
private bool <AllowReorder>k__BackingField;
    public bool AllowReorder { get; public set; }
    protected Padding DefaultPadding { get; }
    protected Size DefaultSize { get; }
    public ITabStripRenderer Renderer { get; public set; }
    public Padding PagePadding { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public bool CloseOnMiddleClick { get; public set; }
    public TabStripPageCollection Pages { get; }
    public int PresentableItemMargin { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TabStripPage ActivePage { get; public set; }
    public TabStrip(IUIApplication environment, bool boldActivePage);
    private RenderParams GetRenderParams(bool isActive);
    protected virtual void OnFontChanged(EventArgs e);
    [CompilerGeneratedAttribute]
public bool get_AllowReorder();
    [CompilerGeneratedAttribute]
public void set_AllowReorder(bool value);
    protected virtual Padding get_DefaultPadding();
    protected virtual Size get_DefaultSize();
    public ITabStripRenderer get_Renderer();
    public void set_Renderer(ITabStripRenderer value);
    public Padding get_PagePadding();
    public void set_PagePadding(Padding value);
    public bool get_ShrinkToFit();
    public void set_ShrinkToFit(bool value);
    public bool get_CloseOnMiddleClick();
    public void set_CloseOnMiddleClick(bool value);
    public TabStripPageCollection get_Pages();
    public int get_PresentableItemMargin();
    public void set_PresentableItemMargin(int value);
    public TabStripPage get_ActivePage();
    public void set_ActivePage(TabStripPage value);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    public void EnsureVisible(TabStripPage page);
    public void PageChanged(TabStripPage page);
    public TabStripPage PointToPage(Point point);
    public void ContentControlChanged(TabStripPage page);
    public void add_ActivePageChanged(EventHandler value);
    public void remove_ActivePageChanged(EventHandler value);
    public void add_ActivePageContentChanged(EventHandler value);
    public void remove_ActivePageContentChanged(EventHandler value);
    public void add_TabDoubleClicked(EventHandler value);
    public void remove_TabDoubleClicked(EventHandler value);
    internal void NotifyCollectionChanging(TabStripPage item, CollectionChangeKind kind);
    internal void NotifyCollectionChanged(TabStripPage item, CollectionChangeKind kind);
    internal void NotifyNodeChanged();
    internal bool ProcessCmdKey(Keys keyData);
    private void InitializeComponent();
    private void EnsureFillRectangle();
    private void Recalculate();
    private void RecalculateAnimations();
    private void AnimateImages(object sender, EventArgs e);
    private void OnDragDropHover();
    private bool ActivatePrevious();
    private bool ActivateNext();
    private bool IsVisible(TabStripPage page);
    private void ScrollRight();
    private void ScrollLeft();
    private Rectangle GetLeftArrowRect();
    private Rectangle GetRightArrowRect();
    private void OnPaintPage(Graphics g, MeasuredPage page, int index);
    private MeasuredPage GetMeasurePageAt(Point point);
    [CanBeNullAttribute]
private MeasuredPage GetMeasurePage(TabStripPage page);
    protected virtual void Dispose(bool disposing);
    protected virtual TabStripRenderer CreateRenderer(IThemedIconManager themedIconManager);
    protected virtual void WndProc(Message& m);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(PropertyChangedEventArgs`1<EitherColor> x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(EitherColor a);
}
public class JetBrains.UI.Controls.TabStrip.TabStripControl : SafeUserControl {
    private static int myDefaultWidth;
    private static int myDefaultHeight;
    private IUIApplication myEnvironment;
    private string myTitle;
    private TabStripPageAlignment myAlignment;
    protected Panel myContentPanel;
    protected TabStrip myTabStrip;
    private Control myCurrentControl;
    private Control myEmptyControl;
    private EventHandler ActivePageChanged;
    private EventHandler ActivePageContentChanged;
    private EventHandler TabDoubleClick;
    protected int DefaultStripHeight { get; }
    public Control EmptyControl { get; public set; }
    public Padding PagePadding { get; public set; }
    public TabStripPageAlignment PageAlignment { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public bool AllowReorder { get; public set; }
    public bool CloseOnMiddleClick { get; public set; }
    public TabStripPageCollection Pages { get; }
    public TabStripPage ActivePage { get; public set; }
    public TabStripControl(IUIApplication environment);
    public TabStripControl(string title, IUIApplication environment);
    protected virtual TabStrip CreateCoreTabStrip(IUIApplication environment);
    protected virtual int get_DefaultStripHeight();
    protected virtual void OnFontChanged(EventArgs e);
    public Control get_EmptyControl();
    public void set_EmptyControl(Control value);
    public Padding get_PagePadding();
    public void set_PagePadding(Padding value);
    public TabStripPageAlignment get_PageAlignment();
    public void set_PageAlignment(TabStripPageAlignment value);
    public bool get_ShrinkToFit();
    public void set_ShrinkToFit(bool value);
    public bool get_AllowReorder();
    public void set_AllowReorder(bool value);
    public bool get_CloseOnMiddleClick();
    public void set_CloseOnMiddleClick(bool value);
    public TabStripPageCollection get_Pages();
    public TabStripPage get_ActivePage();
    public void set_ActivePage(TabStripPage value);
    public ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    public void add_ActivePageChanged(EventHandler value);
    public void remove_ActivePageChanged(EventHandler value);
    public void add_ActivePageContentChanged(EventHandler value);
    public void remove_ActivePageContentChanged(EventHandler value);
    public TabStripPage PointToPage(Point clientPoint);
    private void InitializeComponent();
    private void ChangePage(object sender, EventArgs e, EventHandler callback);
    private void OnActivePageChanged(object sender, EventArgs e);
    private void OnActiveContentChanged(object sender, EventArgs e);
    public void add_TabDoubleClick(EventHandler value);
    public void remove_TabDoubleClick(EventHandler value);
    private void OnDoubleClick(object sender, EventArgs e);
    protected virtual void OnContextMenuRequested(object sender, ContextMenuEventArgs e);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    public virtual string ToString();
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class JetBrains.UI.Controls.TabStrip.TabStripPage : PresentableItem {
    private TabStrip myTabStrip;
    private Control myContentControl;
    private Func`1<bool> myShowCloseButtonDelegate;
    private RichText myTooltipText;
    private CancelEventHandler Activating;
    private EventHandler Activated;
    private EventHandler Deactivated;
    private CancelEventHandler Closing;
    private EventHandler Closed;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public RichText TooltipText { get; public set; }
    public bool IsDisabled { get; public set; }
    [CanBeNullAttribute]
public TabStrip TabStrip { get; }
    public Control ContentControl { get; public set; }
    public bool Active { get; }
    public object Tag { get; public set; }
    public TabStripPage(Func`1<bool> showCloseButtonDelegate);
    public TabStripPage(Control contentControl, RichText richText);
    public TabStripPage(Control contentControl, string title, Func`1<bool> showCloseButtonDelegate);
    public TabStripPage(RichText richText);
    public TabStripPage(string title);
    public TabStripPage(Control contentControl, RichText richText, IList`1<PresentableItemImage> images);
    public TabStripPage(Control contentControl, string title, IList`1<PresentableItemImage> images);
    public TabStripPage(RichText richText, IList`1<PresentableItemImage> images);
    public TabStripPage(string title, IList`1<PresentableItemImage> images);
    public TabStripPage(Control contentControl);
    public TabStripPage(Control contentControl, string title, IList`1<PresentableItemImage> images, Func`1<bool> showCloseButtonDelegate);
    public RichText get_TooltipText();
    public void set_TooltipText(RichText value);
    internal void SetOwner(TabStrip tabStrip);
    protected virtual void UpdateItem();
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    public TabStrip get_TabStrip();
    public Control get_ContentControl();
    public void set_ContentControl(Control value);
    public bool get_Active();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public void add_Activating(CancelEventHandler value);
    public void remove_Activating(CancelEventHandler value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    public void add_Deactivated(EventHandler value);
    public void remove_Deactivated(EventHandler value);
    public void add_Closing(CancelEventHandler value);
    public void remove_Closing(CancelEventHandler value);
    public void add_Closed(EventHandler value);
    public void remove_Closed(EventHandler value);
    public void PerformClick();
    internal bool BeforeActivate();
    internal void AfterActivate();
    internal void BeforeDeactivate();
    public bool ShowCloseButton();
    public bool CanClose();
    public void Close();
    public void Update();
}
public class JetBrains.UI.Controls.TabStrip.TabStripPageCollection : Collection`1<TabStripPage> {
    private TabStrip myTabStrip;
    private TabPageEventHandler PageAdded;
    private TabPageEventHandler PageRemoved;
    private EventHandler PagesCleared;
    private TabPageEventHandler PageChanged;
    public TabStripPageCollection(TabStrip tabStrip);
    public void add_PageAdded(TabPageEventHandler value);
    public void remove_PageAdded(TabPageEventHandler value);
    public void add_PageRemoved(TabPageEventHandler value);
    public void remove_PageRemoved(TabPageEventHandler value);
    public void add_PagesCleared(EventHandler value);
    public void remove_PagesCleared(EventHandler value);
    public void add_PageChanged(TabPageEventHandler value);
    public void remove_PageChanged(TabPageEventHandler value);
    public void AddRange(ICollection`1<TabStripPage> items);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, TabStripPage item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TabStripPage item);
    public void Move(TabStripPage page, int index);
}
public class JetBrains.UI.Controls.TabStrip.TabStripRenderer : object {
    private ITheming myThemeManager;
    private TabStripPageAlignment myAlignment;
    private bool myDrawTabCaps;
    public TabStripRenderer(ITheming themeManager, TabStripPageAlignment alignment);
    private Color GetThemeColor(ThemeColor themeColor);
    public sealed virtual void DrawPageBackgroundActive(Graphics graphics, Rectangle bounds, TabStripPage page, int index);
    public sealed virtual void DrawPageBackground(Graphics graphics, Rectangle bounds, TabStripPage page, int index);
    public sealed virtual void DrawArrow(Graphics graphics, Rectangle bounds, ArrowDirection direction, bool enabled, bool hotTrack);
    public sealed virtual void DrawBackground(Graphics graphics, Rectangle bounds);
    public sealed virtual void DrawPresentableItem(Graphics g, Rectangle bounds, TabStripPage page, bool isActive, RenderParams renderParams, Nullable`1<double> fFrame);
    public sealed virtual void DrawCloseGlyph(Graphics g, Rectangle bounds, bool hotTrack);
}
internal class JetBrains.UI.Controls.TabStripView.Automation.TabStripItemViewAutomationPeer : FrameworkElementAutomationPeer {
    private TabStripItemView myOwner;
    public TabStripItemViewAutomationPeer(TabStripItemView owner);
    protected virtual string GetNameCore();
    public sealed virtual void Invoke();
    public virtual object GetPattern(PatternInterface patternInterface);
}
internal class JetBrains.UI.Controls.TabStripView.Automation.TabStripRowAutomationPeer : FrameworkElementAutomationPeer {
    private TabStripRow myOwner;
    public TabStripRowAutomationPeer(TabStripRow owner);
    protected virtual string GetNameCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
}
internal class JetBrains.UI.Controls.TabStripView.Automation.TabStripViewAutomationPeer : FrameworkElementAutomationPeer {
    private TabStripView myOwner;
    public TabStripViewAutomationPeer(TabStripView owner);
    protected virtual string GetNameCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
}
public class JetBrains.UI.Controls.TabStripView.TabStripItemView : Control {
    public static DependencyProperty ItemProperty;
    public static DependencyProperty DockProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public TabStripItem Item { get; public set; }
    public Dock Dock { get; public set; }
    private static TabStripItemView();
    public TabStripItem get_Item();
    public void set_Item(TabStripItem value);
    private void OnItemChanged(TabStripItem previous, object current);
    public Dock get_Dock();
    public void set_Dock(Dock value);
    protected virtual void OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void Select();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.Controls.TabStripView.TabStripRow : Control {
    private static double LayoutEpsilon;
    public static DependencyProperty DockProperty;
    public static DependencyProperty AllowAnimationProperty;
    public static DependencyProperty AllowOverflowingProperty;
    public static DependencyProperty AllowReorderingProperty;
    public static DependencyProperty IsOverflowItemsVisibleProperty;
    private static TabStripItemCollection ourEmptyItems;
    public static DependencyProperty ItemsProperty;
    private IProperty`1<TabStripItemCollection> myItemCollection;
    private static DependencyPropertyKey OverflowItemsPropertyKey;
    public static DependencyProperty OverflowItemsProperty;
    private static DependencyPropertyKey HasOverflowItemsPropertyKey;
    public static DependencyProperty HasOverflowItemsProperty;
    private DelegateCommand myShowCommand;
    private List`1<TabStripItemView> myVisuals;
    private List`1<int> myMeasuredRows;
    private DispatcherOperation myPostLayoutUpdateActionsDispatcherOperation;
    private DispatcherTimer mySelectedItemWatchDog;
    private WeakToStrongDictionary`2<TabStripItem, TabStripItemAnimation> myAnimations;
    private Size myPreviousFinalSize;
    private TimeSpan myDefaultAnimationDuration;
    private TabStripItemView myDraggedItemView;
    private int myDraggedItemIndex;
    private Point myStartDraggingPosition;
    private TabStripItemView myDraggingLastSwapped;
    private bool myIsDragging;
    private IInputElement myDraggingInputElement;
    private Point myLastDraggingPoint;
    [CompilerGeneratedAttribute]
private static Func`3<int, int, int> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<TabStripItem, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1b;
    public Dock Dock { get; public set; }
    public bool AllowAnimation { get; public set; }
    public bool AllowOverflowing { get; public set; }
    public bool AllowReordering { get; public set; }
    public bool IsOverflowItemsVisible { get; public set; }
    private TabStripItemCollection ItemsOrEmptyCollection { get; }
    public TabStripItemCollection Items { get; public set; }
    public TabStripItemCollection OverflowItems { get; private set; }
    public bool HasOverflowItems { get; private set; }
    public ICommand ShowCommand { get; }
    protected int VisualChildrenCount { get; }
    private static TabStripRow();
    public Dock get_Dock();
    public void set_Dock(Dock value);
    private void OnDockChanged(Dock newValue, Dock oldValue);
    public bool get_AllowAnimation();
    public void set_AllowAnimation(bool value);
    private bool GetAllowAnimation();
    public bool get_AllowOverflowing();
    public void set_AllowOverflowing(bool value);
    public bool get_AllowReordering();
    public void set_AllowReordering(bool value);
    public bool get_IsOverflowItemsVisible();
    public void set_IsOverflowItemsVisible(bool value);
    private TabStripItemCollection get_ItemsOrEmptyCollection();
    public TabStripItemCollection get_Items();
    public void set_Items(TabStripItemCollection value);
    public TabStripItemCollection get_OverflowItems();
    private void set_OverflowItems(TabStripItemCollection value);
    public bool get_HasOverflowItems();
    private void set_HasOverflowItems(bool value);
    public ICommand get_ShowCommand();
    private void OnShowCommandInvoked(object parameter);
    private void OnSelectedItemWatchDog(object sender, EventArgs e);
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Point GetAnimatedLeftTop(TabStripItem item, Point targetLeftTop, bool skipAnimation, Boolean& animationCompleted);
    private void SchedulePostLayoutUpdateActions();
    private void PostLayoutUpdateActions();
    private void UpdateOverflowItems();
    private int GetVisibleItemsCount();
    private void EnsureSelectedItemVisible();
    private TabStripItemView CreateContainer(TabStripItem tabStripItem);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    private TabStripItemView HitTabStripItem(Point point);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    private void BeginDragging(TabStripItemView draggedItemView);
    private void OnKeyDownWhileDragging(object sender, KeyEventArgs e);
    private void OnDragging();
    private void CompleteDragging();
    private void CancelDragging();
    public void PreviousTab();
    public void NextTab();
    private void ShowOverflowItems();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal IEnumerable`1<AutomationPeer> GetChildAutomationPeers();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static int <GetVisibleItemsCount>b__10(int a, int b);
    [CompilerGeneratedAttribute]
private static bool <EnsureSelectedItemVisible>b__12(TabStripItem x);
    [CompilerGeneratedAttribute]
private static bool <PreviousTab>b__14(TabStripItem x);
    [CompilerGeneratedAttribute]
private static bool <NextTab>b__16(TabStripItem x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__18(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__19(DependencyObject s, DependencyPropertyChangedEventArgs e);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class JetBrains.UI.Controls.TabStripView.TabStripView : Control {
    private LocalReentrancyGuard myPreviewGotFocusReentrancyGuard;
    public static DependencyProperty HideContextMenuProperty;
    public static DependencyProperty HasSeparatorsProperty;
    public static DependencyProperty PageContentTemplateSelectorProperty;
    public static DependencyProperty ViewModelProperty;
    private bool myHasKeyboardFocusWhileContentChanging;
    public static DependencyProperty AllowReorderingProperty;
    public static DependencyProperty DockProperty;
    public static DependencyProperty AllowAnimationProperty;
    public static DependencyProperty AllowOverflowingProperty;
    public static DependencyProperty MenuItemContainerStyleProperty;
    private TabStripRow myTabStripRow;
    private ContentPresenter myContentPlaceholder;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public bool HideContextMenu { get; public set; }
    public bool HasSeparators { get; public set; }
    public TabStripViewModel ViewModel { get; public set; }
    public DataTemplateSelector PageContentTemplateSelector { get; public set; }
    public bool AllowReordering { get; public set; }
    public Dock Dock { get; public set; }
    public bool AllowAnimation { get; public set; }
    public bool AllowOverflowing { get; public set; }
    public Style MenuItemContainerStyle { get; public set; }
    internal ContentPresenter ContentPlaceholder { get; }
    private static TabStripView();
    public bool get_HideContextMenu();
    public void set_HideContextMenu(bool value);
    public bool get_HasSeparators();
    public void set_HasSeparators(bool value);
    public TabStripViewModel get_ViewModel();
    public void set_ViewModel(TabStripViewModel value);
    public DataTemplateSelector get_PageContentTemplateSelector();
    public void set_PageContentTemplateSelector(DataTemplateSelector value);
    private void OnViewModelPropertyChanged(TabStripViewModel previous, TabStripViewModel current);
    public sealed virtual bool ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
    private void OnSelectedItemChanging(object sender, EventArgs e);
    private void OnSelectedItemChanged(object sender, EventArgs e);
    private void OnActivated(object sender, EventArgs e);
    protected virtual void OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    public bool MoveFocusToCurrentContent();
    public bool get_AllowReordering();
    public void set_AllowReordering(bool value);
    public Dock get_Dock();
    public void set_Dock(Dock value);
    public bool get_AllowAnimation();
    public void set_AllowAnimation(bool value);
    public bool get_AllowOverflowing();
    public void set_AllowOverflowing(bool value);
    public Style get_MenuItemContainerStyle();
    public void set_MenuItemContainerStyle(Style value);
    internal ContentPresenter get_ContentPlaceholder();
    public virtual void OnApplyTemplate();
    protected virtual void OnKeyDown(KeyEventArgs args);
    public void PreviousTab();
    public void NextTab();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal List`1<AutomationPeer> GetChildAutomationPeers();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod5(KeyboardFocusChangedEventArgs );
}
[DefaultEventAttribute("Click")]
public class JetBrains.UI.Controls.ToolbarButton : SafeUserControl {
    private Image myImage;
    private bool myIsHot;
    private bool myIsPressed;
    public Image Image { get; public set; }
    protected Size DefaultSize { get; }
    public ToolbarButton(IUIApplication environment);
    public Image get_Image();
    public void set_Image(Image value);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual Size get_DefaultSize();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    private void LeaveControlArea();
}
public class JetBrains.UI.Controls.ToolStripDropDownButtonFixed : ToolStripDropDownButton {
    protected virtual void OnDropDownHide(EventArgs e);
}
public class JetBrains.UI.Controls.TreeGrid.Automation.TreeGridRowAutomationPeer : AutomationPeer {
    private TreeGridView myTreeGridView;
    private PendedActionQueue myPendedActionQueue;
    private object myItem;
    private WeakToStrongDictionary`2<object, TreeGridRowAutomationPeer> myPeersCache;
    private TreeGridRowAutomationPeer myParent;
    public ExpandCollapseState ExpandCollapseState { get; }
    public bool IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    internal TreeGridRowAutomationPeer(TreeGridView treeGridView, PendedActionQueue pendedActionQueue, TreeGridRowAutomationPeer parent, object item);
    private T WithGuard(Func`1<T> function);
    private TreeGridRowAutomationPeer GetOrCreate(object dataItem);
    private TreeGridNode GetNode();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private void OnNodeExpandedChanged(object sender, EventArgs eventArgs);
    private void OnNodeChildrenChanged(object sender, EventArgs eventArgs);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual bool IsOffscreenCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual string GetItemTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetItemStatusCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsPasswordCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual Point GetClickablePointCore();
    protected virtual void SetFocusCore();
    public sealed virtual void Expand();
    public sealed virtual void Collapse();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    public sealed virtual void Select();
    public sealed virtual void AddToSelection();
    public sealed virtual void RemoveFromSelection();
    public sealed virtual bool get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    public sealed virtual void ScrollIntoView();
    [CompilerGeneratedAttribute]
private List`1<AutomationPeer> <GetChildrenCore>b__6();
    [CompilerGeneratedAttribute]
private Rect <GetBoundingRectangleCore>b__7();
    [CompilerGeneratedAttribute]
private bool <IsOffscreenCore>b__8();
    [CompilerGeneratedAttribute]
private string <GetItemStatusCore>b__9();
    [CompilerGeneratedAttribute]
private bool <IsKeyboardFocusableCore>b__a();
    [CompilerGeneratedAttribute]
private bool <HasKeyboardFocusCore>b__b();
    [CompilerGeneratedAttribute]
private bool <IsEnabledCore>b__c();
    [CompilerGeneratedAttribute]
private string <GetNameCore>b__d();
    [CompilerGeneratedAttribute]
private Point <GetClickablePointCore>b__e();
    [CompilerGeneratedAttribute]
private void <SetFocusCore>b__f();
    [CompilerGeneratedAttribute]
private void <Expand>b__10();
    [CompilerGeneratedAttribute]
private void <Collapse>b__11();
    [CompilerGeneratedAttribute]
private ExpandCollapseState <get_ExpandCollapseState>b__12();
    [CompilerGeneratedAttribute]
private void <Select>b__13();
    [CompilerGeneratedAttribute]
private void <AddToSelection>b__14();
    [CompilerGeneratedAttribute]
private void <RemoveFromSelection>b__15();
    [CompilerGeneratedAttribute]
private bool <get_IsSelected>b__16();
    [CompilerGeneratedAttribute]
private void <ScrollIntoView>b__17();
}
internal class JetBrains.UI.Controls.TreeGrid.Automation.TreeGridViewAutomationPeer : FrameworkElementAutomationPeer {
    private TreeGridView myTreeGridView;
    private PendedActionQueue myPendedActionQueue;
    private bool myEnabled;
    private WeakToStrongDictionary`2<object, TreeGridRowAutomationPeer> myRootPeersCache;
    public TreeGridViewAutomationPeer(TreeGridView treeGridView, PendedActionQueue pendedActionQueue);
    private T WithGuard(Func`1<T> function);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private TreeGridRowAutomationPeer GetOrCreate(object dataItem);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    public sealed virtual void Invoke();
    [CompilerGeneratedAttribute]
private List`1<AutomationPeer> <GetChildrenCore>b__3();
    [CompilerGeneratedAttribute]
private bool <GetChildrenCore>b__4(object x);
}
internal class JetBrains.UI.Controls.TreeGrid.DragDrop.DragDropPopup : Popup {
    private static int WS_EX_TRANSPARENT;
    private static int GWL_EXSTYLE;
    private Vector myVisualOffset;
    public static DependencyProperty DragItemProperty;
    public static DependencyProperty MouseOffsetProperty;
    public object DragItem { get; public set; }
    public Vector MouseOffset { get; public set; }
    private static DragDropPopup();
    public object get_DragItem();
    public void set_DragItem(object value);
    private static void OnDragItemChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private void OnDragItemChanged(DependencyPropertyChangedEventArgs args);
    public Vector get_MouseOffset();
    public void set_MouseOffset(Vector value);
    private UIElement CreateContentAndUpdateOffset(object data);
    private void OnPopupOpened(object sender, EventArgs eventArgs);
    private void OnPopupClosed(object sender, EventArgs eventArgs);
    private void OnRendering(object sender, EventArgs e);
    public static int GetWindowLong(IntPtr hwnd, int index);
    public static int SetWindowLong(IntPtr hwnd, int index, int newStyle);
    private void EnableWindowTransparency();
    private Point ConvertPixelsToUnits(int x, int y);
    private Point GetMouseScreenPosition();
}
internal class JetBrains.UI.Controls.TreeGrid.Helpers.BindingHelpers : object {
    public static BindingBase CloneBinding(BindingBase bindingBase, object source);
}
internal static class JetBrains.UI.Controls.TreeGrid.Helpers.FocusHack : object {
    public static void SetLogicalFocus(DependencyObject focusScope, IInputElement element);
}
internal static class JetBrains.UI.Controls.TreeGrid.Helpers.LayoutUtils : object {
    public static double LayoutAcceptableEpsilon;
    public static bool GreaterThanOrApproximatelyEqual(double a, double b, double tolerance);
    public static bool LessThanOrApproximatelyEqual(double a, double b, double tolerance);
    public static bool ApproximatelyEqual(double a, double b, double tolerance);
    public static bool LessThan(double a, double b, double tolerance);
    public static bool GreaterThan(double a, double b, double tolerance);
}
public interface JetBrains.UI.Controls.TreeGrid.IParentProvider {
    [CanBeNullAttribute]
public abstract virtual object GetParent(object item);
}
internal interface JetBrains.UI.Controls.TreeGrid.ITreeGridNodeChildrenSynchronizer {
    public bool IsEnabled { get; public set; }
    public abstract virtual void add_Added(Action`2<int, object> value);
    public abstract virtual void remove_Added(Action`2<int, object> value);
    public abstract virtual void add_Removed(Action`1<int> value);
    public abstract virtual void remove_Removed(Action`1<int> value);
    public abstract virtual void add_Moved(Action`2<int, int> value);
    public abstract virtual void remove_Moved(Action`2<int, int> value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual void OnItemsSourceInvalidated();
}
public interface JetBrains.UI.Controls.TreeGrid.ITreeGridView {
    public object FocusedItem { get; public set; }
    public ISelectedItemCollection SelectedItems { get; }
    public abstract virtual UIElement HitRow(Point pt);
    public abstract virtual DependencyObject HitTest(Point pt);
    public abstract virtual bool ExpandTo(object data);
    public abstract virtual void Expand(object data);
    public abstract virtual bool Exists(object data);
    public abstract virtual object get_FocusedItem();
    public abstract virtual void set_FocusedItem(object value);
    public abstract virtual IEnumerable GetCurrentRootItems();
    public abstract virtual ISelectedItemCollection get_SelectedItems();
}
public class JetBrains.UI.Controls.TreeGrid.ParentProvider`1 : object {
    private Func`2<T, object> myGetParent;
    public ParentProvider`1(Func`2<T, object> getParent);
    public sealed virtual object GetParent(object item);
}
internal class JetBrains.UI.Controls.TreeGrid.PendedActionQueue : object {
    private Lifetime myLifetime;
    private Dispatcher myDispatcher;
    private Queue`1<Action> myPendedActions;
    private bool myPendedActionsExecutionDispatched;
    private DispatcherOperation myScheduledDispatcherOperation;
    private bool myPumpingInProgress;
    [CompilerGeneratedAttribute]
private Func`1<IDisposable> <AccessBrackets>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionInvocator <ActionInvocator>k__BackingField;
    public Func`1<IDisposable> AccessBrackets { get; public set; }
    public IActionInvocator ActionInvocator { get; public set; }
    public bool HasPendedActions { get; }
    public PendedActionQueue(Lifetime lifetime, Dispatcher dispatcher, Func`1<IDisposable> accessBrackets, IActionInvocator actionInvocator);
    [CompilerGeneratedAttribute]
public Func`1<IDisposable> get_AccessBrackets();
    [CompilerGeneratedAttribute]
public void set_AccessBrackets(Func`1<IDisposable> value);
    [CompilerGeneratedAttribute]
public IActionInvocator get_ActionInvocator();
    [CompilerGeneratedAttribute]
public void set_ActionInvocator(IActionInvocator value);
    public bool get_HasPendedActions();
    [GuardAttribute("-1")]
public void Queue(Action action, DispatcherPriority priority);
    public bool ExecuteOrQueue(Action action, DispatcherPriority priority);
    private void SchedulePump(DispatcherPriority priority);
    private bool TryMerge(Action action);
    [GuardAttribute("1")]
public void Pump(bool disableRequeuing);
    public void AssertAccess();
    private void OnDelayedPump();
    public bool TryExecute(Action action, bool logFailures);
    private void ExecuteCore(Action action);
    public void Execute(Action action);
    public T Execute(Func`1<T> action);
    [CompilerGeneratedAttribute]
private void <SchedulePump>b__4();
}
public class JetBrains.UI.Controls.TreeGrid.Primitives.ExpanderTrianglePresentaion : FrameworkElement {
    public static DependencyProperty GlyphBrushProperty;
    public static DependencyProperty GlyphHoverBrushProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty HasChildrenProperty;
    public static DependencyProperty LevelProperty;
    public static DependencyProperty CollapsableProperty;
    public static DependencyProperty AreRootsFixedProperty;
    public static DependencyProperty AutoExpandDragOverMillisecondsProperty;
    private Stopwatch myDragOverElapsed;
    private double EssentialWidth;
    private double EssentialHeight;
    public Brush GlyphBrush { get; public set; }
    public Brush GlyphHoverBrush { get; public set; }
    public bool IsExpanded { get; public set; }
    public bool HasChildren { get; public set; }
    public int Level { get; public set; }
    public bool Collapsable { get; public set; }
    public bool AreRootsFixed { get; public set; }
    public int AutoExpandDragOverMilliseconds { get; public set; }
    private static ExpanderTrianglePresentaion();
    public Brush get_GlyphBrush();
    public void set_GlyphBrush(Brush value);
    public Brush get_GlyphHoverBrush();
    public void set_GlyphHoverBrush(Brush value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_HasChildren();
    public void set_HasChildren(bool value);
    public int get_Level();
    public void set_Level(int value);
    public bool get_Collapsable();
    public void set_Collapsable(bool value);
    public bool get_AreRootsFixed();
    public void set_AreRootsFixed(bool value);
    public int get_AutoExpandDragOverMilliseconds();
    public void set_AutoExpandDragOverMilliseconds(int value);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    private void DrawTriangle(DrawingContext drawingContext, Point a, Point b, Point c, Brush border, Brush background);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
}
public class JetBrains.UI.Controls.TreeGrid.Primitives.MetroBusyIndicatorPresentation : FrameworkElement {
    private Stopwatch myStopwatch;
    private DispatcherTimer myAnimationTimer;
    public static DependencyProperty IsBusyProperty;
    public static DependencyProperty IndicatorLengthProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty IndicatorBrushProperty;
    public static DependencyProperty VelocityProperty;
    public bool IsBusy { get; public set; }
    public double IndicatorLength { get; public set; }
    public Brush Background { get; public set; }
    public Brush IndicatorBrush { get; public set; }
    public double Velocity { get; public set; }
    private static MetroBusyIndicatorPresentation();
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    private static void OnIsBusyPropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void OnIsBusyChanged(DependencyPropertyChangedEventArgs args);
    public double get_IndicatorLength();
    public void set_IndicatorLength(double value);
    public Brush get_Background();
    public void set_Background(Brush value);
    public Brush get_IndicatorBrush();
    public void set_IndicatorBrush(Brush value);
    public double get_Velocity();
    public void set_Velocity(double value);
    protected virtual void OnRender(DrawingContext drawingContext);
    [CompilerGeneratedAttribute]
private void <OnIsBusyChanged>b__0(object sender, EventArgs eventArgs);
}
public class JetBrains.UI.Controls.TreeGrid.Primitives.SortDirectionPresentation : FrameworkElement {
    public static DependencyProperty GlyphBrushProperty;
    public static DependencyProperty GlyphHoverBrushProperty;
    public static DependencyProperty SortDirectionProperty;
    private double EssentialWidth;
    private double EssentialHeight;
    public Brush GlyphBrush { get; public set; }
    public Brush GlyphHoverBrush { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    private static SortDirectionPresentation();
    public Brush get_GlyphBrush();
    public void set_GlyphBrush(Brush value);
    public Brush get_GlyphHoverBrush();
    public void set_GlyphHoverBrush(Brush value);
    public ListSortDirection get_SortDirection();
    public void set_SortDirection(ListSortDirection value);
    protected virtual void OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    private void DrawTriangle(DrawingContext drawingContext, Point a, Point b, Point c, Brush border, Brush background);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.ArrangedChildrenProvider : object {
    private IChildrenProvider myProvider;
    private TreeGridView myOwner;
    private SortDescriptionSelector mySortSelector;
    private DefinitiveFilterDescriptor myFilterDescriptor;
    private WeakReference myLatestTouchItem;
    private ArrangedChildrenCollection myLatestTouchChildren;
    private WeakToStrongDictionary`2<object, ArrangedChildrenCollection> myChildrens;
    private object myLock;
    public DefinitiveFilterDescriptor Filter { get; }
    public SortDescriptionSelector SortSelector { get; }
    public ListSortDirection SortDirection { get; }
    public ArrangedChildrenProvider(IChildrenProvider provider, TreeGridView owner);
    public DefinitiveFilterDescriptor get_Filter();
    public SortDescriptionSelector get_SortSelector();
    public ListSortDirection get_SortDirection();
    private void OnItemsSourceChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void OnSortDirectionChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void OnFilterChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void OnFilterChanged();
    private DefinitiveFilterDescriptor CreateDefinitiveFilter();
    private void OnSortSelectorChanged(object sender, EventArgs e);
    public sealed virtual int FetchCount(object node);
    public sealed virtual IEnumerable`1<object> FetchChildren(object node, int index, int count);
    public sealed virtual bool HasChildren(object node);
    public sealed virtual int IndexOf(object parent, object child);
    public sealed virtual INotifyCollectionChanged GetChangeProvider(object node);
    private ArrangedChildrenCollection GetOrNull(object item);
    private ArrangedChildrenCollection GetOrCreate(object item);
    private void ResetChildren();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <CreateDefinitiveFilter>b__2(object item);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Automation.TreeGridRowAutomationPeer : AutomationPeer {
    private TreeGridView myTreeGridView;
    private object myItem;
    private WeakToStrongDictionary`2<object, TreeGridRowAutomationPeer> myPeersCache;
    private TreeGridRowAutomationPeer myParent;
    private List`1<AutomationPeer> myLatestChildren;
    public ExpandCollapseState ExpandCollapseState { get; }
    public bool IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    internal TreeGridRowAutomationPeer(TreeGridView treeGridView, TreeGridRowAutomationPeer parent, object item);
    private TreeGridRowAutomationPeer GetOrCreate(object dataItem);
    private TreeGridNodeViewModel GetNode();
    private void OnLoaded(object sender, RoutedEventArgs e);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private bool IsValid(object item);
    private void OnNodeExpandedChanged(object sender);
    private void OnNodeChildrenChanged(object sender, EventArgs eventArgs);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual bool IsOffscreenCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual string GetItemTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetItemStatusCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsPasswordCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual Point GetClickablePointCore();
    protected virtual void SetFocusCore();
    public sealed virtual void Expand();
    public sealed virtual void Collapse();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    public sealed virtual void Select();
    public sealed virtual void AddToSelection();
    public sealed virtual void RemoveFromSelection();
    public sealed virtual bool get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    public sealed virtual void ScrollIntoView();
    protected bool Equals(TreeGridRowAutomationPeer other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private bool IsUIThread();
    private void ScheduleToUIThread(Action action);
    private void ExecuteOrScheduleToUIThread(Action action);
    [CompilerGeneratedAttribute]
private void <GetChildrenCore>b__0();
    [CompilerGeneratedAttribute]
private bool <GetChildrenCore>b__1(object x);
    [CompilerGeneratedAttribute]
private AutomationPeer <GetChildrenCore>b__2(object x);
    [CompilerGeneratedAttribute]
private void <OnNodeExpandedChanged>b__6();
    [CompilerGeneratedAttribute]
private void <OnNodeChildrenChanged>b__7();
    [CompilerGeneratedAttribute]
private void <SetFocusCore>b__8();
    [CompilerGeneratedAttribute]
private void <Expand>b__9();
    [CompilerGeneratedAttribute]
private void <Collapse>b__a();
    [CompilerGeneratedAttribute]
private void <Select>b__b();
    [CompilerGeneratedAttribute]
private void <AddToSelection>b__c();
    [CompilerGeneratedAttribute]
private void <RemoveFromSelection>b__d();
    [CompilerGeneratedAttribute]
private void <ScrollIntoView>b__e();
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.Automation.TreeGridViewAutomationPeer : FrameworkElementAutomationPeer {
    private TreeGridView myTreeGridView;
    private bool myEnabled;
    private WeakToStrongDictionary`2<object, TreeGridRowAutomationPeer> myRootPeersCache;
    private List`1<AutomationPeer> myLatestChildren;
    public TreeGridViewAutomationPeer(TreeGridView treeGridView);
    private void OnLoaded(object sender, RoutedEventArgs e);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private TreeGridRowAutomationPeer GetOrCreate(object dataItem);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    public sealed virtual void Invoke();
    private bool IsUIThread();
    private void ScheduleToUIThread(Action action);
    [CompilerGeneratedAttribute]
private void <GetChildrenCore>b__0();
    [CompilerGeneratedAttribute]
private bool <GetChildrenCore>b__1(object x);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.BindingChildrenProvider : object {
    private IEnumerable myRoots;
    private Binding myChildrenBinding;
    private Binding myHasChildrenBinding;
    public Binding ChildrenBinding { get; public set; }
    public Binding HasChildrenBinding { get; public set; }
    public BindingChildrenProvider(IEnumerable roots);
    public Binding get_ChildrenBinding();
    public void set_ChildrenBinding(Binding value);
    public Binding get_HasChildrenBinding();
    public void set_HasChildrenBinding(Binding value);
    public sealed virtual IEnumerable`1<object> FetchChildren(object data, int index, int count);
    private static IEnumerable`1<object> FetchList(IList list, int index, int count);
    public sealed virtual bool HasChildren(object item);
    public sealed virtual int IndexOf(object parent, object child);
    public sealed virtual INotifyCollectionChanged GetChangeProvider(object node);
    public sealed virtual int FetchCount(object item);
    private IEnumerable ResolveChildrenBinding(object item, Binding binding);
}
[DebuggerDisplayAttribute("{Item}, Shift: {Shift}")]
public class JetBrains.UI.Controls.TreeGrid.Revised.CacheItemInfo : object {
    [CompilerGeneratedAttribute]
private double <Shift>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public double Shift { get; private set; }
    public object Item { get; private set; }
    public CacheItemInfo(object item, double shift);
    [CompilerGeneratedAttribute]
public double get_Shift();
    [CompilerGeneratedAttribute]
private void set_Shift(double value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
private void set_Item(object value);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.ChildrenProvider`1 : object {
    [NotNullAttribute]
private Func`2<T, IEnumerable> myGetChildren;
    [NotNullAttribute]
private Func`2<T, bool> myHasChildren;
    [NotNullAttribute]
private IEnumerable myRoots;
    public ChildrenProvider`1(IEnumerable roots, Func`2<T, IEnumerable> getChildren, Func`2<T, bool> hasChildren);
    private bool HasChildrenFallback(T item);
    public sealed virtual IEnumerable`1<object> FetchChildren(object data, int index, int count);
    private static IEnumerable`1<object> FetchList(IList list, int index, int count);
    public sealed virtual bool HasChildren(object item);
    public sealed virtual int IndexOf(object parent, object child);
    public sealed virtual INotifyCollectionChanged GetChangeProvider(object node);
    public sealed virtual int FetchCount(object item);
}
public enum JetBrains.UI.Controls.TreeGrid.Revised.ColumnResizingStrategy : Enum {
    public int value__;
    public static ColumnResizingStrategy CurrentAndNext;
    public static ColumnResizingStrategy CurrentOnly;
}
public class JetBrains.UI.Controls.TreeGrid.Revised.ContainerGenerator : object {
    public static DependencyProperty IsRecycledProperty;
    private Action`2<TreeGridRow, object> myPrepare;
    private Action`2<TreeGridRow, object> myReuse;
    private Action`1<TreeGridRow> myRecycle;
    private TreeGridView myOwner;
    private bool myBegin;
    private Dictionary`2<object, TreeGridRow> myGenerated;
    private Dictionary`2<object, TreeGridRow> myElements;
    private Dictionary`2<object, TreeGridRow> myRecycled;
    private ILogger myLogger;
    public ContainerGenerator(Action`2<TreeGridRow, object> prepare, Action`2<TreeGridRow, object> reuse, Action`1<TreeGridRow> recycle, TreeGridView owner);
    private static ContainerGenerator();
    public static void SetIsRecycled(DependencyObject element, bool value);
    public static bool GetIsRecycled(DependencyObject element);
    public void Begin();
    public void End();
    private void Recycle(TreeGridRow element);
    public TreeGridRow Generate(object item);
    private TreeGridRow GetOrCreate(object item);
    private void VerifyUiThread();
    public TreeGridRow Find(object item, ContainerState state);
    public Size GetSize(object item, Size availbleSize);
    private void InvalidateMeasure(Visual visual);
    public void Temporary(object item, Action`1<TreeGridRow> action);
    public T Temporary(object item, Func`2<TreeGridRow, T> action);
    public IEnumerable`1<TreeGridRow> Enumerate(ContainerState state);
}
[FlagsAttribute]
public enum JetBrains.UI.Controls.TreeGrid.Revised.ContainerState : Enum {
    public int value__;
    public static ContainerState Any;
    public static ContainerState Active;
    public static ContainerState Recycled;
}
public class JetBrains.UI.Controls.TreeGrid.Revised.DefaultParentProvider : object {
    private TreeGridView myOwner;
    private WeakToWeakDictionary`2<object, object> myParentCache;
    public DefaultParentProvider(TreeGridView owner);
    public sealed virtual object GetParent(object item);
    private void UpdateCache();
    private void BuildCache(object item, IChildrenProvider childrenProvider);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.DragDrop.DragDropPopup : Popup {
    private static int WS_EX_TRANSPARENT;
    private static int GWL_EXSTYLE;
    private Vector myVisualOffset;
    public static DependencyProperty DragItemProperty;
    public static DependencyProperty MouseOffsetProperty;
    public object DragItem { get; public set; }
    public Vector MouseOffset { get; public set; }
    private static DragDropPopup();
    public object get_DragItem();
    public void set_DragItem(object value);
    private static void OnDragItemChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private void OnDragItemChanged(DependencyPropertyChangedEventArgs args);
    public Vector get_MouseOffset();
    public void set_MouseOffset(Vector value);
    private UIElement CreateContentAndUpdateOffset(object data);
    private void OnPopupOpened(object sender, EventArgs eventArgs);
    private void OnPopupClosed(object sender, EventArgs eventArgs);
    private void OnRendering(object sender, EventArgs e);
    public static int GetWindowLong(IntPtr hwnd, int index);
    public static int SetWindowLong(IntPtr hwnd, int index, int newStyle);
    private void EnableWindowTransparency();
    private static bool GetCursorPos(POINT& lpPoint);
    private static IntPtr GetDC(IntPtr hwnd);
    private static int GetDeviceCaps(IntPtr hdc, int nIndex);
    private static bool ReleaseDC(IntPtr hWnd, IntPtr hDC);
    private Point ConvertPixelsToUnits(int x, int y);
    private Point GetMouseScreenPosition();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.ExpansionStates : object {
    private WeakToStrongDictionary`2<object, bool> myExpansions;
    private WeakHashSet`1<object> myAutoExpansions;
    private WeakToStrongDictionary`2<object, WeakHashSet`1<object>> myExpandedChildren;
    private TreeGridView myOwner;
    private Action`1<object> Expanded;
    private Action`1<object> Collapsed;
    public ExpansionStates(TreeGridView owner);
    public void add_Expanded(Action`1<object> value);
    public void remove_Expanded(Action`1<object> value);
    public void add_Collapsed(Action`1<object> value);
    public void remove_Collapsed(Action`1<object> value);
    public bool IsExpanded(object item);
    public bool Expand(object item);
    public bool Collapse(object item);
    private void PreserveExpansion(object item, bool state);
    private Nullable`1<bool> GetPreservedExpansion(object item);
    private bool GetPreservedAutoExpansion(object item);
    public IEnumerable`1<object> GetExpandedChildrenOf(object parent);
    public void ExpandAll(int maxLevel);
    public void ExpandAll(object item, int maxLevel);
    public void CollapseAll(int maxLevel);
    public void CollapseAll(object item, int maxLevel);
    private void SetExpansionAll(bool expansion, int maxLevel);
    private void SetExpansionAll(object item, bool expansion, int maxLevel);
    public bool ExpandTo(object item);
    private bool ExpandTo(IParentProvider parentProvider, object item);
    public bool UpdateExpansion(object item);
    private void OnExpansionChanged(object item, bool state);
    private bool CalculateAutomaticExpansion(object item);
    public IDisposable UsingAccessBrackets();
    public void CoerseExpandableCollapsable();
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.Filters.DefinitiveFilterDescriptor : object {
    private WeakToStrongDictionary`2<object, Acceptance> myCache;
    private IFilterDescriptor myFilterDescription;
    private Func`2<object, IEnumerable`1<object>> myFGetChildren;
    private Func`2<object, object> myFGetParent;
    private FilteringMode myMode;
    public DefinitiveFilterDescriptor(IFilterDescriptor filterDescriptor, Func`2<object, IEnumerable`1<object>> getChildren, Func`2<object, object> getParent, FilteringMode mode);
    public bool IsAccepted(object item);
    private bool HasAcceptedAncestor(object item);
}
[FlagsAttribute]
public enum JetBrains.UI.Controls.TreeGrid.Revised.FocusOptions : Enum {
    public int value__;
    public static FocusOptions Automatic;
    public static FocusOptions None;
    public static FocusOptions TransferKeyboard;
    public static FocusOptions BringIntoView;
    public static FocusOptions AffectSelection;
}
public class JetBrains.UI.Controls.TreeGrid.Revised.HeightCache : object {
    public double DefaultHeight;
    private TreeGridView myOwner;
    private WeakToStrongDictionary`2<object, KnownHeight> myMap;
    private KnownHeight myRoot;
    public HeightCache(TreeGridView owner);
    public void Update(object item, double height);
    private KnownHeight GetOrCreareDefaultEntry(object item);
    private void Attach(KnownHeight knownHeight);
    private KnownHeight GetEntryOrNull(object item);
    public double GetExtent();
    public CacheItemInfo At(double offset);
    public void Expand(object item);
    public void Collapse(object item);
    public void Remove(object parent, int index);
    public void Insert(int index, object parent, object item);
    public void Replace(object parent, int index, object item);
    public void Reset(object parent);
    public void Move(object parent, int from, int to);
    public virtual string ToString();
    public string Print();
    private void PrintChildren(StringBuilder stringBuilder, KnownHeight parent, int level);
    public double OffsetTo(object item);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.DataTemplateHelper : object {
    private static WeakToStrongDictionary`2<DataTemplate, Type> OurTemplateVisualRootType;
    private static DataTemplateHelper();
    public static TViewType TryLoad(FrameworkElement owner, Type dataType);
    public static Type GetTemplateVisualRootTypeOrNull(FrameworkElement owner, Type dataType);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.DispatcherGroupingEvent : object {
    private Action Fired;
    private Dispatcher myDispatcher;
    private DispatcherPriority myPriority;
    private TimeSpan myTimeSpan;
    private DispatcherTimer myTimer;
    public TimeSpan Delay { get; public set; }
    public DispatcherGroupingEvent(Dispatcher dispatcher, DispatcherPriority priority, TimeSpan timeSpan, Action fired);
    public void add_Fired(Action value);
    public void remove_Fired(Action value);
    public TimeSpan get_Delay();
    public void set_Delay(TimeSpan value);
    public void Fire(bool prolong);
    private void OnTick(object sender, EventArgs e);
    private void DisposeTimer(DispatcherTimer timer);
    public void Prolong();
    public void Cancel();
}
internal static class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.LayoutUtils : object {
    public static double LayoutAcceptableEpsilon;
    public static Size InfiniteSize;
    private static LayoutUtils();
    public static bool GreaterThanOrApproximatelyEqual(double a, double b, double tolerance);
    public static bool LessThanOrApproximatelyEqual(double a, double b, double tolerance);
    public static bool ApproximatelyEqual(double a, double b, double tolerance);
    public static bool ApproximatelyEqual(Size a, Size b, double tolerance);
    public static bool LessThan(double a, double b, double tolerance);
    public static bool GreaterThan(double a, double b, double tolerance);
    public static double Clamp(double value, double min, double max);
    public static int Clamp(int value, int min, int max);
    public static void OutOfView(UIElement element);
}
internal static class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.Null : object {
    public static object Key;
    private static Null();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.RecoverMissedItemHelper : object {
    [CanBeNullAttribute]
public static object TryGetSubstitution(ObjectIndexPath`1<object> path, TreeGridView owner, Func`2<object, bool> applicabilityProvider);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.WeakEventListener`1 : object {
    private EventHandler`1<TEventArgs> myHander;
    public WeakEventListener`1(EventHandler`1<TEventArgs> handler);
    private sealed virtual override bool System.Windows.IWeakEventListener.ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
public interface JetBrains.UI.Controls.TreeGrid.Revised.IChildrenProviderFactory {
    public abstract virtual IChildrenProvider CreateChildrenProvider();
    public abstract virtual IParentProvider CreateParentProvider();
}
public interface JetBrains.UI.Controls.TreeGrid.Revised.IExpandingTracker {
    public abstract virtual void Expanded(object o);
    public abstract virtual void Collapsed(object o);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.InterlayoutColumnDefinition : ValueType {
    public GridLength Width;
    public double MinWidth;
    public double MaxWidth;
    public InterlayoutColumnDefinition(GridLength width, double minWidth, double maxWidth);
}
public interface JetBrains.UI.Controls.TreeGrid.Revised.IParentProvider {
    public abstract virtual object GetParent(object node);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.ItemsProjection : object {
    private TreeGridView myOwner;
    public ItemsProjection(TreeGridView owner);
    public int IndexOf(object item);
    public IEnumerable`1<object> Enumerate(int startIndex, EnumerateDirection direction, EnumerateOptions options);
    [NotNullAttribute]
public IEnumerable`1<object> Enumerate(object startItem, EnumerateDirection direction, EnumerateOptions options);
    [NotNullAttribute]
private IEnumerable`1<object> EnumerateBackward(object from, EnumerateOptions options);
    [NotNullAttribute]
private IEnumerable`1<object> EnumerableForward(object from, EnumerateOptions options);
    public int GetLevel(object item);
    private IParentProvider GetParentProvider();
    private int GetProjectedChildrenCount(object item, int from, int count);
    public object Previous(object item, EnumerateOptions options);
    public object Previous(object item, Predicate`1<object> predicate, EnumerateOptions options);
    public object Next(object item, EnumerateOptions options);
    public object Next(object item, Predicate`1<object> predicate, EnumerateOptions options);
    public object First();
    public object Last(EnumerateOptions options);
    public bool Has(object item, bool coerceExpansion);
    public IDisposable UsingAccessBrackets();
    [CompilerGeneratedAttribute]
private bool <Next>b__24(object x);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.ItemsProjectionIterator : object {
    [CanBeNullAttribute]
public static object Next(ItemsSource itemsSource, object node, Func`2<object, object> getParent, Predicate`1<object> predicate);
    [CanBeNullAttribute]
public static object GetNextSiblingOrNextParent(ItemsSource itemsSource, object node, Func`2<object, object> getParent, Predicate`1<object> predicate);
    [CanBeNullAttribute]
public static object Previous(ItemsSource itemsSource, object node, Func`2<object, object> getParent, Predicate`1<object> predicate);
    [NotNullAttribute]
private static object LastChildOrSelf(ItemsSource itemsSource, object node, Predicate`1<object> predicate);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.ItemsSource : object {
    private Action`2<object, NotifyCollectionChangedEventArgs> ChildrenChanged;
    [NotNullAttribute]
private TreeGridView myOwner;
    [NotNullAttribute]
private IChildrenProvider myChildrenProvider;
    [NotNullAttribute]
private IChildrenProvider myBaseChildrenProvider;
    [CanBeNullAttribute]
private WeakReference myPreviousChildrenTrackingTouch;
    [NotNullAttribute]
private WeakToStrongDictionary`2<object, CollectionChangeListener> myCollectionListeners;
    public ItemsSource(TreeGridView owner);
    public void add_ChildrenChanged(Action`2<object, NotifyCollectionChangedEventArgs> value);
    public void remove_ChildrenChanged(Action`2<object, NotifyCollectionChangedEventArgs> value);
    private void OnAllowAutomaticArrangementChanged(object sender, EventArgs e);
    private void UpdateCurrentChildrenProvider();
    private void OnChildrenProviderChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void FireResetListeners();
    private void OnItemsSourceChanged(object sender, DependencyPropertyChangedEventArgs e);
    [NotNullAttribute]
private IChildrenProvider GetChildrenProvider();
    [NotNullAttribute]
public IEnumerable`1<object> GetChildren(object node, int index, int count);
    public object GetParent(object item);
    public int GetCount(object node);
    public bool HasChildren(object node);
    public int IndexOf(object parent, object child);
    public void EnableChildrenTracking(object item);
    public void DisableChildrenTracking(object item);
    private void ReenableRootsTracking();
    public void DisableAllChildrenTracking();
    private void NotifyChildrenChanged(object item, NotifyCollectionChangedEventArgs e);
    public bool Exists(object item);
    internal IChildrenProvider GetBaseChildrenProvider();
    public void AssertReadAccess();
    public IDisposable UsingAccessBrackets();
}
public interface JetBrains.UI.Controls.TreeGrid.Revised.ITreeGridNodeHolder {
    public TreeGridNodeViewModel Node { get; }
    public object Item { get; public set; }
    public abstract virtual TreeGridNodeViewModel get_Node();
    public abstract virtual object get_Item();
    public abstract virtual void set_Item(object value);
}
public interface JetBrains.UI.Controls.TreeGrid.Revised.ITreeGridRowContent {
    public abstract virtual bool Prepare(TreeGridRow owner, object item);
    public abstract virtual void HandleColumnsCollectionChanged();
    public abstract virtual TreeGridCellsLayout GetCellsLayout();
}
internal static class JetBrains.UI.Controls.TreeGrid.Revised.Log`1 : object {
    public static void Exception(Exception exception);
    [StringFormatMethodAttribute("message")]
public static void Error(string message, Object[] parameters);
    [StringFormatMethodAttribute("message")]
public static void ErrorWithSensitiveData(string message, Pair`2[] sensitiveData);
    [StringFormatMethodAttribute("message")]
public static void Warning(string message, Object[] parameters);
    public static void Warning(Exception exception);
    public static void Verbose(string message);
    public static void LogParentChildInconsistency(object parent, object child, LoggingLevel level);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.NullParentProvider : object {
    public sealed virtual object GetParent(object node);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Primitives.ExpanderTrianglePresentation : FrameworkElement {
    private static int AutoExpandDragOverMilliseconds;
    private static double EssentialWidth;
    private static double EssentialHeight;
    public static DependencyProperty GlyphBrushProperty;
    public static DependencyProperty GlyphHoverBrushProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty ExpandableProperty;
    public static DependencyProperty CollapsibleProperty;
    public static DependencyProperty HasChildrenProperty;
    public static DependencyProperty AreRootsFixedProperty;
    public static DependencyProperty LevelProperty;
    private Stopwatch myDragOverElapsed;
    public Brush GlyphBrush { get; public set; }
    public Brush GlyphHoverBrush { get; public set; }
    public bool IsExpanded { get; public set; }
    public bool Expandable { get; public set; }
    public bool Collapsible { get; public set; }
    public bool HasChildren { get; public set; }
    public bool AreRootsFixed { get; public set; }
    public int Level { get; public set; }
    private static ExpanderTrianglePresentation();
    public Brush get_GlyphBrush();
    public void set_GlyphBrush(Brush value);
    public Brush get_GlyphHoverBrush();
    public void set_GlyphHoverBrush(Brush value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_Expandable();
    public void set_Expandable(bool value);
    public bool get_Collapsible();
    public void set_Collapsible(bool value);
    public bool get_HasChildren();
    public void set_HasChildren(bool value);
    public bool get_AreRootsFixed();
    public void set_AreRootsFixed(bool value);
    public int get_Level();
    public void set_Level(int value);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    private void DrawTriangle(DrawingContext drawingContext, Point a, Point b, Point c, Brush border, Brush background);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Primitives.SortDirectionPresentation : FrameworkElement {
    public static DependencyProperty GlyphBrushProperty;
    public static DependencyProperty GlyphHoverBrushProperty;
    public static DependencyProperty SortDirectionProperty;
    private double EssentialWidth;
    private double EssentialHeight;
    public Brush GlyphBrush { get; public set; }
    public Brush GlyphHoverBrush { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    private static SortDirectionPresentation();
    public Brush get_GlyphBrush();
    public void set_GlyphBrush(Brush value);
    public Brush get_GlyphHoverBrush();
    public void set_GlyphHoverBrush(Brush value);
    public ListSortDirection get_SortDirection();
    public void set_SortDirection(ListSortDirection value);
    protected virtual void OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    private void DrawTriangle(DrawingContext drawingContext, Point a, Point b, Point c, Brush border, Brush background);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.RangedSelectedItemCollection : object {
    private NotifyCollectionChangedEventHandler CollectionChanged;
    private TreeGridView myTreeGridView;
    private List`1<object> myInvertion;
    private object myFrom;
    private List`1<object> myExpansion;
    private Mode myMode;
    private ObjectIndexPath`1<object> myRestorePath;
    private bool myInvalidated;
    public RangedSelectedItemCollection(TreeGridView treeGridView);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void RaiseReset();
    private void RaiseReplace(IList oldItems, IList newItems);
    public sealed virtual void Add(object item);
    public sealed virtual void SelectTo(object item);
    private void UpdateRestorePath(object item);
    public sealed virtual void ExpandTo(object item);
    public sealed virtual void Select(object item);
    public sealed virtual void Invert(object item);
    public sealed virtual void SelectAll();
    public sealed virtual bool IsSelected(object item);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Invalidate();
    public sealed virtual void Reevaluate();
    private void Recover();
    private List`1<object> Actualize(List`1<object> list);
    private IDisposable UsingAccessBrackets();
    [CompilerGeneratedAttribute]
private bool <Actualize>b__16(object x);
}
public enum JetBrains.UI.Controls.TreeGrid.Revised.RowPresentationMode : Enum {
    public int value__;
    public static RowPresentationMode OnlyDefault;
    public static RowPresentationMode OnlyCustom;
    public static RowPresentationMode CustomOrDefault;
}
public enum JetBrains.UI.Controls.TreeGrid.Revised.SelectionMode : Enum {
    public int value__;
    public static SelectionMode Single;
    public static SelectionMode Multiple;
}
public class JetBrains.UI.Controls.TreeGrid.Revised.SelfreferenceChildrenProvider : object {
    private TreeGridView myOwner;
    private Type myChildType;
    private Dictionary`2<Type, PropertyInfo> myChildrenPropertyCache;
    public SelfreferenceChildrenProvider(TreeGridView owner);
    public sealed virtual IEnumerable`1<object> FetchChildren(object data, int index, int count);
    private static IEnumerable`1<object> FetchList(IList list, int index, int count);
    public sealed virtual bool HasChildren(object item);
    public sealed virtual int FetchCount(object item);
    public sealed virtual int IndexOf(object parent, object child);
    public sealed virtual INotifyCollectionChanged GetChangeProvider(object node);
    private IEnumerable ResolveChildrenProperty(object data);
    private PropertyInfo FindChildrenProperty(Type type);
    private bool IsChildrenProperty(Type propertyType);
    private bool IsChildType(Type type);
    [CompilerGeneratedAttribute]
private bool <FindChildrenProperty>b__4(PropertyInfo x);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Snapshot : object {
    private TreeGridView myOwner;
    private HeightCache myCache;
    private ItemsSource myItemsSource;
    private ItemsProjection myProjection;
    private ContainerGenerator myContainerGenerator;
    private ExpansionStates myExpansionStates;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Extent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Shift>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Available>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TreeGridRow> <Containers>k__BackingField;
    public double Height { get; private set; }
    public double Extent { get; private set; }
    public double Shift { get; private set; }
    public double Offset { get; private set; }
    public Size Available { get; private set; }
    public IList`1<TreeGridRow> Containers { get; private set; }
    public Snapshot(TreeGridView owner, HeightCache cache, ContainerGenerator containerGenerator, ItemsSource itemsSource, ItemsProjection projection);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
private void set_Height(double value);
    [CompilerGeneratedAttribute]
public double get_Extent();
    [CompilerGeneratedAttribute]
private void set_Extent(double value);
    [CompilerGeneratedAttribute]
public double get_Shift();
    [CompilerGeneratedAttribute]
private void set_Shift(double value);
    [CompilerGeneratedAttribute]
public double get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(double value);
    [CompilerGeneratedAttribute]
public Size get_Available();
    [CompilerGeneratedAttribute]
private void set_Available(Size value);
    [CompilerGeneratedAttribute]
public IList`1<TreeGridRow> get_Containers();
    [CompilerGeneratedAttribute]
private void set_Containers(IList`1<TreeGridRow> value);
    public void Arrange(double width, double x, double y);
    public void Update(Size availableSize, double offset, bool reevaluate);
    private void Bottom(Size availableSize, bool reevaluate);
    public TreeGridRow GetBottomFullyVisible();
    public TreeGridRow GetTopFullyVisible();
    public void UpdateRelative(Size availableSize, object currentItem, double currentItemOffset, bool reevaluate);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object e);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.SortDescriptors.SortDescription : object {
    private EventHandler Invalidated;
    private IComparer myCustomComparer;
    private String[] myPropertyPath;
    private Func`2<object, object> myGetter;
    private Dictionary`2<Type, PropertyInfo> myPropertyInfoCache;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate5;
    public SortDescription(string propertyPath, IComparer comparer);
    public SortDescription(Func`2<object, object> getter, IComparer comparer);
    public SortDescription(IComparer comparer);
    public sealed virtual void add_Invalidated(EventHandler value);
    public sealed virtual void remove_Invalidated(EventHandler value);
    public void Invalidate();
    public sealed virtual int Compare(object x, object y);
    private int CompareCore(object x, object y);
    private object ResolvePropertyPath(object target, IEnumerable`1<string> propertyPath);
    private object GetPropertyValue(object target, string propertyName);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__0(object o);
    [CompilerGeneratedAttribute]
private object <.ctor>b__1(object o);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__4(object o);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.SortDescriptors.SortDescriptionSelector : object {
    private EventHandler Changed;
    private TreeGridView myOwner;
    private ISortDescription mySortDescription;
    public ISortDescription Current { get; private set; }
    public SortDescriptionSelector(TreeGridView owner);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    private void Invalidate();
    public ISortDescription get_Current();
    private void set_Current(ISortDescription value);
    private void UpdateCurrent();
    public int Compare(object x, object y);
    private ISortDescription SelectSortDescriptionOrNull();
    private ISortDescription CreateFromColumnOrNull(TreeGridColumnDefinition sortColumn);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object s, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridCell : Control {
    private object myItem;
    private TreeGridViewport myOwner;
    private TreeGridColumnDefinition myColumnDefinition;
    private ILogger myLogger;
    private TreeGridNodeViewModel myNodeViewModel;
    private PropertyChangedEventHandler PropertyChanged;
    public TreeGridNodeViewModel Node { get; }
    public TreeGridColumnDefinition ColumnDefinition { get; }
    public DataTemplateSelector CellTemplateSelector { get; }
    public DataTemplate CellTemplate { get; }
    public object Item { get; public set; }
    private static TreeGridCell();
    public TreeGridCell(object item, TreeGridViewport owner, TreeGridColumnDefinition definition);
    public sealed virtual TreeGridNodeViewModel get_Node();
    public TreeGridColumnDefinition get_ColumnDefinition();
    public DataTemplateSelector get_CellTemplateSelector();
    public void InvalidateCellTemplateSelector();
    public DataTemplate get_CellTemplate();
    public void InvalidateCellTemplate();
    public sealed virtual object get_Item();
    public sealed virtual void set_Item(object value);
    private void OnIsKeyboardFocusWithinChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void OnGotFocus(object sender, RoutedEventArgs e);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <OnGotFocus>b__3();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridCellsLayout : Panel {
    private TreeGridViewport myViewport;
    public TreeGridViewport Viewport { get; }
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    private UIElement[] GetCells();
    public TreeGridViewport get_Viewport();
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridCellsPresentation : TreeGridCellsLayout {
    private TreeGridRow myOwner;
    private object myItem;
    [CompilerGeneratedAttribute]
private TreeGridExpander <Expander>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeGridCell[] <Cells>k__BackingField;
    public TreeGridExpander Expander { get; private set; }
    public TreeGridCell[] Cells { get; private set; }
    [CompilerGeneratedAttribute]
public TreeGridExpander get_Expander();
    [CompilerGeneratedAttribute]
private void set_Expander(TreeGridExpander value);
    [CompilerGeneratedAttribute]
public TreeGridCell[] get_Cells();
    [CompilerGeneratedAttribute]
private void set_Cells(TreeGridCell[] value);
    public sealed virtual bool Prepare(TreeGridRow owner, object item);
    public sealed virtual void HandleColumnsCollectionChanged();
    public sealed virtual TreeGridCellsLayout GetCellsLayout();
    private void Build();
}
[TemplatePartAttribute]
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumn : Control {
    private EventHandler ResizeStarted;
    private EventHandler ResizeCompleted;
    private EventHandler`1<TreeGridColumnResizeEventArgs> ResizeDelta;
    private EventHandler ResizeCanceled;
    private Thumb myThumb;
    private UIElement myHeader;
    private Point myDragStartPosition;
    private DragDropPopup myDragDropPopup;
    private ILogger myLogger;
    public static DependencyProperty ResizableProperty;
    private static DependencyProperty IsSortColumnPropertyKey;
    public static DependencyProperty IsSortColumnProperty;
    public static DependencyProperty IsDragOverProperty;
    private IInputElement myFocusedElement;
    private int myResizingColumnIndex;
    private GridLength[] myWidthsBeforeResize;
    private Double[] myActualWidthsBeforeResize;
    [CompilerGeneratedAttribute]
private TreeGridView <TreeGridView>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeGridColumnDefinition <ColumnDefinition>k__BackingField;
    private TreeGridView TreeGridView { get; private set; }
    public TreeGridColumnDefinition ColumnDefinition { get; public set; }
    public bool Resizable { get; public set; }
    public bool IsSortColumn { get; public set; }
    public bool IsDragOver { get; public set; }
    private static TreeGridColumn();
    public TreeGridColumn(TreeGridView treeGridView, TreeGridColumnDefinition definition);
    public void add_ResizeStarted(EventHandler value);
    public void remove_ResizeStarted(EventHandler value);
    public void add_ResizeCompleted(EventHandler value);
    public void remove_ResizeCompleted(EventHandler value);
    public void add_ResizeDelta(EventHandler`1<TreeGridColumnResizeEventArgs> value);
    public void remove_ResizeDelta(EventHandler`1<TreeGridColumnResizeEventArgs> value);
    public void add_ResizeCanceled(EventHandler value);
    public void remove_ResizeCanceled(EventHandler value);
    [CompilerGeneratedAttribute]
private TreeGridView get_TreeGridView();
    [CompilerGeneratedAttribute]
private void set_TreeGridView(TreeGridView value);
    [CompilerGeneratedAttribute]
public TreeGridColumnDefinition get_ColumnDefinition();
    [CompilerGeneratedAttribute]
public void set_ColumnDefinition(TreeGridColumnDefinition value);
    public bool get_Resizable();
    public void set_Resizable(bool value);
    public bool get_IsSortColumn();
    public void set_IsSortColumn(bool value);
    private void RefreshIsSortColumnProperty();
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    private void OnSortColumnChanged(object sender, DependencyPropertyChangedEventArgs args);
    private void OnThumbDoubleClick(object sender, MouseButtonEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs args);
    protected virtual void OnDragOver(DragEventArgs args);
    public bool get_IsDragOver();
    public void set_IsDragOver(bool value);
    protected virtual void OnDragEnter(DragEventArgs args);
    protected virtual void OnDrop(DragEventArgs args);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    private bool CanBeUsedToSort(TreeGridColumnDefinition columnDefinition);
    private string GetColumnDataTextPresentation();
    public virtual void OnApplyTemplate();
    private void OnThumbMouseUp(object sender, MouseButtonEventArgs e);
    private static void SetCurrentWidth(TreeGridColumnDefinition def, GridLength value);
    private void OnThumbDragCompleted(object sender, DragCompletedEventArgs e);
    private void OnThumbDragStarted(object sender, DragStartedEventArgs e);
    private void OnKeyDownWhileResizing(object sender, KeyEventArgs e);
    private void OnThumbDragDelta(object sender, DragDeltaEventArgs e);
    private void OnResizeStarted(object sender, EventArgs e);
    private void OnResizeCompleted(object sender, EventArgs e);
    private void OnResizeCanceled(object sender, EventArgs e);
    private void OnResizeDelta(object sender, TreeGridColumnResizeEventArgs e);
    private static double Clamp(TreeGridColumnDefinition definition, double value);
    [CompilerGeneratedAttribute]
private void <OnLoaded>b__0();
    [CompilerGeneratedAttribute]
private void <OnUnloaded>b__1();
    [CompilerGeneratedAttribute]
private void <OnSortColumnChanged>b__2();
    [CompilerGeneratedAttribute]
private void <OnDragLeave>b__6();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethodb();
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__a();
    [CompilerGeneratedAttribute]
private void <OnThumbDragStarted>b__f();
    [CompilerGeneratedAttribute]
private void <OnThumbDragDelta>b__13();
    [CompilerGeneratedAttribute]
private void <OnResizeCanceled>b__19();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinition : FrameworkContentElement {
    private DependencyPropertyChangedEventHandler WidthChanged;
    public static DependencyProperty WidthProperty;
    private DependencyPropertyChangedEventHandler MinWidthChanged;
    public static DependencyProperty MinWidthProperty;
    private DependencyPropertyChangedEventHandler MaxWidthChanged;
    public static DependencyProperty MaxWidthProperty;
    public static DependencyProperty HasExpanderProperty;
    private EventHandler HasExpanderChanged;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty CellTemplateProperty;
    public static DependencyProperty IsEditableProperty;
    public static DependencyProperty CellEditingTemplateProperty;
    public static DependencyProperty CellEditingTemplateSelectorProperty;
    public static DependencyProperty CellTemplateSelectorProperty;
    private DependencyPropertyChangedEventHandler CellMemberPathChanged;
    public static DependencyProperty CellMemberPathProperty;
    private DependencyPropertyChangedEventHandler CellMemberGetterChanged;
    public static DependencyProperty CellMemberGetterProperty;
    public static DependencyProperty CellStyleProperty;
    public static DependencyProperty CellStyleSelectorProperty;
    private EventHandler ActualWidthChanged;
    private double myActualWidth;
    private double myDesiredWidth;
    public static DependencyProperty SortableProperty;
    public static DependencyProperty SortMemberPathProperty;
    [CompilerGeneratedAttribute]
private bool <Resizable>k__BackingField;
    [CompilerGeneratedAttribute]
private ISortDescription <SortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatef;
    public GridLength Width { get; public set; }
    public GridLength MinWidth { get; public set; }
    public GridLength MaxWidth { get; public set; }
    public bool Resizable { get; public set; }
    public bool HasExpander { get; public set; }
    public object Header { get; public set; }
    public DataTemplate CellTemplate { get; public set; }
    public bool IsEditable { get; public set; }
    public DataTemplate CellEditingTemplate { get; public set; }
    public DataTemplateSelector CellEditingTemplateSelector { get; public set; }
    public DataTemplateSelector CellTemplateSelector { get; public set; }
    public string CellMemberPath { get; public set; }
    public Func`2<object, object> CellMemberGetter { get; public set; }
    public Style CellStyle { get; public set; }
    public StyleSelector CellStyleSelector { get; public set; }
    internal double ActualWidth { get; internal set; }
    public bool Sortable { get; public set; }
    public ISortDescription SortDescription { get; public set; }
    public string SortMemberPath { get; public set; }
    internal double DesiredWidth { get; internal set; }
    private static TreeGridColumnDefinition();
    public void add_WidthChanged(DependencyPropertyChangedEventHandler value);
    public void remove_WidthChanged(DependencyPropertyChangedEventHandler value);
    public GridLength get_Width();
    public void set_Width(GridLength value);
    private void OnWidthChanged(DependencyPropertyChangedEventArgs args);
    public void add_MinWidthChanged(DependencyPropertyChangedEventHandler value);
    public void remove_MinWidthChanged(DependencyPropertyChangedEventHandler value);
    public GridLength get_MinWidth();
    public void set_MinWidth(GridLength value);
    private void OnMinWidthChanged(DependencyPropertyChangedEventArgs args);
    public void add_MaxWidthChanged(DependencyPropertyChangedEventHandler value);
    public void remove_MaxWidthChanged(DependencyPropertyChangedEventHandler value);
    public GridLength get_MaxWidth();
    public void set_MaxWidth(GridLength value);
    private void OnMaxWidthChanged(DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
public bool get_Resizable();
    [CompilerGeneratedAttribute]
public void set_Resizable(bool value);
    public bool get_HasExpander();
    public void set_HasExpander(bool value);
    public void add_HasExpanderChanged(EventHandler value);
    public void remove_HasExpanderChanged(EventHandler value);
    private void OnHasExpanderChanged(DependencyPropertyChangedEventArgs args);
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_CellTemplate();
    public void set_CellTemplate(DataTemplate value);
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public DataTemplate get_CellEditingTemplate();
    public void set_CellEditingTemplate(DataTemplate value);
    public DataTemplateSelector get_CellEditingTemplateSelector();
    public void set_CellEditingTemplateSelector(DataTemplateSelector value);
    public DataTemplateSelector get_CellTemplateSelector();
    public void set_CellTemplateSelector(DataTemplateSelector value);
    public void add_CellMemberPathChanged(DependencyPropertyChangedEventHandler value);
    public void remove_CellMemberPathChanged(DependencyPropertyChangedEventHandler value);
    public string get_CellMemberPath();
    public void set_CellMemberPath(string value);
    private void OnCellMemberPathChanged(DependencyPropertyChangedEventArgs args);
    public void add_CellMemberGetterChanged(DependencyPropertyChangedEventHandler value);
    public void remove_CellMemberGetterChanged(DependencyPropertyChangedEventHandler value);
    public Func`2<object, object> get_CellMemberGetter();
    public void set_CellMemberGetter(Func`2<object, object> value);
    private void OnCellMemberGetterChanged(DependencyPropertyChangedEventArgs args);
    public Style get_CellStyle();
    public void set_CellStyle(Style value);
    public StyleSelector get_CellStyleSelector();
    public void set_CellStyleSelector(StyleSelector value);
    internal void add_ActualWidthChanged(EventHandler value);
    internal void remove_ActualWidthChanged(EventHandler value);
    internal double get_ActualWidth();
    internal void set_ActualWidth(double value);
    public bool get_Sortable();
    public void set_Sortable(bool value);
    [CompilerGeneratedAttribute]
public ISortDescription get_SortDescription();
    [CompilerGeneratedAttribute]
public void set_SortDescription(ISortDescription value);
    public string get_SortMemberPath();
    public void set_SortMemberPath(string value);
    internal double get_DesiredWidth();
    internal void set_DesiredWidth(double value);
    public BindingBase GetCellBinding(object item);
    [CompilerGeneratedAttribute]
private object <GetCellBinding>b__3(object x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(DependencyObject s, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnDefinitionCollection : ObservableCollection`1<TreeGridColumnDefinition> {
    private EventHandler LayoutChanged;
    private static IValueConverter ourGridLengthToDouble;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate7;
    public void add_LayoutChanged(EventHandler value);
    public void remove_LayoutChanged(EventHandler value);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, TreeGridColumnDefinition item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TreeGridColumnDefinition item);
    private void SubscribeLayoutChanges(TreeGridColumnDefinition item);
    private void UnsubscribeLayoutChanges(TreeGridColumnDefinition oldItem);
    private void OnItemActualWidthChanged(object sender, EventArgs e);
    private void OnItemWidthChanged(object sender, DependencyPropertyChangedEventArgs e);
    internal bool UpdateColumnDesiredWidths(Double[] desiredWidths, bool growOnly);
    public static void Bind(DependencyObject owner, TreeGridColumnDefinitionCollection definitions, TreeGridColumnDefinition definition, ColumnDefinition column);
    [CompilerGeneratedAttribute]
private static object <Bind>b__6(object o);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnPanel : TreeGridCellsLayout {
    private Double[] myActualColumnsWidthsCache;
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private TreeGridViewport <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumn, double> CS$<>9__CachedAnonymousMethodDelegate9;
    public TreeGridViewport Owner { get; private set; }
    public TreeGridColumnPanel(TreeGridViewport owner);
    [CompilerGeneratedAttribute]
public TreeGridViewport get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(TreeGridViewport value);
    private void Update();
    private bool IsSpacerAddedOrRemoved();
    private bool IsColumnsRearrangedOrChanged();
    private bool HasSpacer();
    public Double[] GetActualColumnWidths();
    public void Measure();
    protected virtual Size MeasureOverride(Size constraint);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private static bool <Update>b__2(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private static bool <Update>b__3(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private static bool <IsSpacerAddedOrRemoved>b__6(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private static double <GetActualColumnWidths>b__8(TreeGridColumn x);
    [CompilerGeneratedAttribute]
private Size <>n__FabricatedMethodd(Size );
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnResizeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    public double Offset { get; private set; }
    public TreeGridColumnResizeEventArgs(double offset);
    [CompilerGeneratedAttribute]
public double get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(double value);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnsLayouter : object {
    private List`1<double> myDesiredWidths;
    private List`1<double> myCalculatedWidths;
    private double myExtentWidth;
    private bool myIsInMeasure;
    [CompilerGeneratedAttribute]
private TreeGridViewport <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<double, double> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, double> CS$<>9__CachedAnonymousMethodDelegate3;
    private TreeGridViewport Owner { get; private set; }
    public TreeGridColumnsLayouter(TreeGridViewport owner);
    [CompilerGeneratedAttribute]
private TreeGridViewport get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(TreeGridViewport value);
    public void BeginMeasure();
    public void EndMeasure(double availableWidth);
    private static double ClampColumnWidth(double width, TreeGridColumnDefinition definition);
    public void InflateColumn(int index, double width);
    public double GetColumnWidth(int index, int span);
    public double GetExtentWidth();
    public Double[] GetActualColumnWidths();
    [CompilerGeneratedAttribute]
private static double <EndMeasure>b__0(double x);
    [CompilerGeneratedAttribute]
private static double <EndMeasure>b__1(TreeGridColumnDefinition x);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridColumnSpacer : Control {
    private static TreeGridColumnSpacer();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridExpander : Control {
    private TreeGridViewport myOwner;
    private object myItem;
    private TreeGridNodeViewModel myNodeViewModel;
    private PropertyChangedEventHandler PropertyChanged;
    public TreeGridNodeViewModel Node { get; }
    public object Item { get; public set; }
    private static TreeGridExpander();
    public TreeGridExpander(TreeGridViewport owner, object item);
    public sealed virtual TreeGridNodeViewModel get_Node();
    public sealed virtual object get_Item();
    public sealed virtual void set_Item(object value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
internal class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridInterlayout : object {
    private static int LayoutPassCountLimit;
    private static Size Infinity;
    private InterlayoutColumnDefinition[] myColumns;
    private double myAvailableWidth;
    private Double[] myActualWidths;
    private HashSet`1[] myAutoCells;
    private static bool ourColumnCellsCountMistmatchNotified;
    private Queue`1<UIElement> previousLines;
    private Queue`1<UIElement> invalidatedLines;
    public bool IsInMeasureCycle;
    private static bool ourCycledLayoutDetected;
    [CompilerGeneratedAttribute]
private static Func`2<InterlayoutColumnDefinition, double> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<UIElement, double> CS$<>9__CachedAnonymousMethodDelegate8;
    public double Width { get; }
    public TreeGridInterlayout(InterlayoutColumnDefinition[] columns, double availableWidth);
    private static TreeGridInterlayout();
    public double get_Width();
    public Size MeasureCells(IList`1<UIElement> cells);
    private bool RecalculateStars();
    public Size ArrangeCells(IList`1<UIElement> cells);
    private void NotifyColumnCellsCountMistmatch();
    private void OnLineMeasured(UIElement line);
    private void InvalidatePreviousLines();
    public static void InvalidateMeasureUntilViewport(UIElement element);
    private void InvalidateViewport(UIElement element);
    public void MeasureCycle(Action measure);
    private bool TryValidate();
    private UIElement GetLineContainer(UIElement lineOrCell);
    private void NotifyCycledLayout();
    private static double Clamp(double value, double min, double max);
    private static bool IsApproximatelyZero(double x);
    [CompilerGeneratedAttribute]
private static double <RecalculateStars>b__4(InterlayoutColumnDefinition definition);
    [CompilerGeneratedAttribute]
private double <RecalculateStars>b__5(double px, int i);
    [CompilerGeneratedAttribute]
private static double <ArrangeCells>b__7(UIElement cell);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridNodeViewModel : object {
    private object myItem;
    private TreeGridView myOwner;
    private Nullable`1<int> myLevel;
    private Nullable`1<bool> myIsExpanded;
    private Nullable`1<bool> myHasChildren;
    private Nullable`1<bool> myIsSelected;
    private PropertyChangedEventHandler PropertyChanged;
    public object Item { get; }
    public int Level { get; }
    public bool IsExpanded { get; public set; }
    public bool HasChildren { get; }
    public bool IsSelected { get; public set; }
    public bool AreRootsFixed { get; }
    public TreeGridNodeViewModel(object item, TreeGridView owner);
    public object get_Item();
    public int get_Level();
    internal void InvalidateLevel();
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    internal void InvalidateIsExpanded();
    public bool get_HasChildren();
    internal void InvalidateHasChildren();
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public void InvalidateIsSelected();
    public bool get_AreRootsFixed();
    public void InvalidateAreRootsFixed();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged(string propertyName);
    public void Reevaluate();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridRow : ContentControl {
    public static DependencyProperty IsExpandedProperty;
    private object myItem;
    private TreeGridNodeViewModel myNodeViewModel;
    private ILogger myLogger;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private TreeGridViewport <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public Nullable`1<bool> IsExpanded { get; public set; }
    internal TreeGridViewport Owner { get; private set; }
    public TreeGridNodeViewModel Node { get; }
    public object Item { get; public set; }
    private static TreeGridRow();
    public TreeGridRow(TreeGridViewport owner, object item);
    private void OnIsExpandedChanged(DependencyPropertyChangedEventArgs e);
    private void UpdateExpansion();
    public Nullable`1<bool> get_IsExpanded();
    public void set_IsExpanded(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal TreeGridViewport get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(TreeGridViewport value);
    public sealed virtual TreeGridNodeViewModel get_Node();
    public sealed virtual object get_Item();
    public sealed virtual void set_Item(object value);
    private void RecreateContent(object item);
    private void OnIsKeyboardFocusWithinChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void OnGotFocus(object sender, RoutedEventArgs e);
    internal ITreeGridRowContent GetContent();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    internal void UpdateStyleValue();
    public void Measure();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnGotFocus>b__5();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridRowPresentation : TreeGridCellsLayout {
    private ILogger myLogger;
    public static DependencyProperty ColumnProperty;
    public static DependencyProperty ColumnSpanProperty;
    private TreeGridRow myOwner;
    private object myItem;
    private bool myInitialized;
    private TreeGridExpander myExpander;
    [CompilerGeneratedAttribute]
private static Func`2<UIElement, object> CS$<>9__CachedAnonymousMethodDelegate3;
    public TreeGridNodeViewModel Node { get; }
    public object Item { get; public set; }
    private TreeGridRow Owner { get; }
    private static TreeGridRowPresentation();
    public sealed virtual TreeGridNodeViewModel get_Node();
    public sealed virtual object get_Item();
    public sealed virtual void set_Item(object value);
    public static void SetColumn(DependencyObject element, string value);
    public static string GetColumn(DependencyObject element);
    public static void SetColumnSpan(DependencyObject element, int value);
    public static int GetColumnSpan(DependencyObject element);
    private TreeGridRow get_Owner();
    public sealed virtual bool Prepare(TreeGridRow owner, object item);
    public sealed virtual void HandleColumnsCollectionChanged();
    public sealed virtual TreeGridCellsLayout GetCellsLayout();
    [CompilerGeneratedAttribute]
private static object <Prepare>b__2(UIElement element);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridState : object {
    private TreeGridView myOwner;
    private Object[] mySelected;
    private TreeGridState(TreeGridView owner);
    public static TreeGridState Create(TreeGridView owner);
    public void Restore();
}
[TemplatePartAttribute]
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridView : Control {
    private ReadWriteLock myRwLock;
    private TreeGridViewport myViewport;
    [NotNullAttribute]
private ItemsSource myItemsSource;
    private ExpansionStates myExpansionStates;
    [NotNullAttribute]
private ItemsProjection myItemsProjection;
    private ILogger myLogger;
    private Action`2<object, NotifyCollectionChangedEventArgs> ChildrenChanged;
    public static DependencyProperty AllowAutomaticExpandersProperty;
    public static DependencyProperty RowPresentationModeProperty;
    private bool myAllowAutomaticArrangement;
    public static DependencyProperty AllowAutomaticArrangementProperty;
    private EventHandler AllowAutomaticArrangementChanged;
    private IEnumerable myItemsSourceBackingField;
    public static DependencyProperty ItemsSourceProperty;
    private DependencyPropertyChangedEventHandler ItemsSourceChanged;
    private IChildrenProvider myChildrenProvider;
    public static DependencyProperty ChildrenProviderProperty;
    private DependencyPropertyChangedEventHandler ChildrenProviderChanged;
    private IParentProvider myParentProvider;
    public static DependencyProperty ParentProviderProperty;
    private IParentProvider myCurrentParentProvider;
    private DependencyPropertyChangedEventHandler ParentProviderChanged;
    public static DependencyProperty AreRootsFixedProperty;
    public static DependencyProperty CellTemplateProperty;
    public static DependencyProperty CellTemplateSelectorProperty;
    public static DependencyProperty RowStyleProperty;
    public static DependencyProperty RowStyleSelectorProperty;
    private SelectionMode mySelectionMode;
    public static DependencyProperty SelectionModeProperty;
    public static DependencyProperty ExpansionProviderProperty;
    private int myMaxLevelsExpansion;
    public static DependencyProperty MaxLevelsExpansionProperty;
    public static DependencyProperty ColumnDefinitionsProperty;
    private List`1<TreeGridColumnDefinition> myColumnDefinitionLogicalChildren;
    private TreeGridColumnDefinitionCollection myDefaultColumnDefinitions;
    public static DependencyProperty ColumnResizingStrategyProperty;
    public static DependencyProperty AllowColumnRearrangeProperty;
    private bool myAllowColumnSorting;
    public static DependencyProperty AllowColumnSortingProperty;
    private bool myAllowAutoExpandSingleChild;
    public static DependencyProperty AllowAutoExpandSingleChildProperty;
    public static DependencyProperty ShowColumnHeadersProperty;
    private DependencyPropertyChangedEventHandler SortColumnChanged;
    public static DependencyProperty SortColumnProperty;
    private TreeGridColumnDefinition mySortColumn;
    public static DependencyProperty SortDirectionProperty;
    private DependencyPropertyChangedEventHandler SortDirectionChanged;
    private ListSortDirection mySortDirection;
    private DependencyPropertyChangedEventHandler SelectedItemChanged;
    public static DependencyProperty SelectedItemProperty;
    private NotifyCollectionChangedEventHandler SelectedItemsChanged;
    private ISelectedItemCollection mySelectedItemCollection;
    private bool mySkipSelectedItemCollectionChanged;
    private DependencyPropertyChangedEventHandler FocusedItemChanged;
    public static DependencyProperty FocusedItemProperty;
    private bool mySkipFocusedItemPropertyChanged;
    private Func`2<object, bool> myFocusabilityProvider;
    public static DependencyProperty FocusabilityProviderProperty;
    private Func`2<object, bool> mySelectabilityProvider;
    public static DependencyProperty SelectabilityProviderProperty;
    private DependencyPropertyChangedEventHandler FilterChanged;
    private EventHandler FilterInvalidated;
    private IFilterDescriptor myFilter;
    public static DependencyProperty FilterProperty;
    private DependencyPropertyChangedEventHandler FilteringModeChanged;
    private FilteringMode myFilteringMode;
    public static DependencyProperty FilteringModeProperty;
    private DependencyPropertyChangedEventHandler SortDescriptionChanged;
    private EventHandler SortDescriptionInvalidated;
    private ISortDescription mySortDescription;
    public static DependencyProperty SortDescriptionProperty;
    public static DependencyProperty GapProperty;
    public static DependencyProperty SortColumnIndexProperty;
    private GroupingEvent myReevaluateGroupingEvent;
    private ObjectIndexPath`1<object> myFocusedItemRecoverPath;
    private bool myReevaluateFocusedElement;
    private bool mySkipHandleFocusedItemChanged;
    private CancelEventHandler Expanding;
    private CancelEventHandler Collapsing;
    private Action`1<object> Expanded;
    private Action`1<object> Collapsed;
    private Action ExpandingAll;
    private Action ExpandedAll;
    private static object RootNodeKey;
    private WeakToStrongDictionary`2<object, TreeGridNodeViewModel> myNodeViewModels;
    public static object NotFound;
    [CompilerGeneratedAttribute]
private IActionInvocator <ActionInvokator>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridNodeViewModel> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridCell> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridCell> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridNodeViewModel> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate5f;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate60;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate61;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate62;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate63;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate64;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate65;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate66;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate67;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate68;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate69;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6a;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6b;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6c;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6d;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6e;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6f;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate70;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate71;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate72;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate73;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate74;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate75;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate76;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate77;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate78;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate79;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7a;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7b;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegate7c;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate7f;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate80;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridNodeViewModel> CS$<>9__CachedAnonymousMethodDelegate9c;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridNodeViewModel> CS$<>9__CachedAnonymousMethodDelegate9e;
    protected IEnumerator LogicalChildren { get; }
    public bool AllowAutomaticExpanders { get; public set; }
    public RowPresentationMode RowPresentationMode { get; public set; }
    public bool AllowAutomaticArrangement { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public IChildrenProvider ChildrenProvider { get; public set; }
    public IParentProvider ParentProvider { get; public set; }
    public bool AreRootsFixed { get; public set; }
    public DataTemplate CellTemplate { get; public set; }
    public DataTemplateSelector CellTemplateSelector { get; public set; }
    public Style RowStyle { get; public set; }
    public StyleSelector RowStyleSelector { get; public set; }
    public SelectionMode SelectionMode { get; public set; }
    public IExpansionProvider ExpansionProvider { get; public set; }
    public int MaxLevelsExpansion { get; public set; }
    public TreeGridColumnDefinitionCollection ColumnDefinitions { get; public set; }
    public ColumnResizingStrategy ColumnResizingStrategy { get; public set; }
    public bool AllowColumnRearrange { get; public set; }
    public bool AllowColumnSorting { get; public set; }
    public bool AllowAutoExpandSingleChild { get; public set; }
    public bool ShowColumnHeaders { get; public set; }
    public TreeGridColumnDefinition SortColumn { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    public object SelectedItem { get; public set; }
    public ISelectedItemCollection SelectedItems { get; public set; }
    public object FocusedItem { get; public set; }
    public Func`2<object, bool> FocusabilityProvider { get; public set; }
    public Func`2<object, bool> SelectabilityProvider { get; public set; }
    public IFilterDescriptor Filter { get; public set; }
    public FilteringMode FilteringMode { get; public set; }
    public ISortDescription SortDescription { get; public set; }
    public double Gap { get; public set; }
    public double DefaultRowHeight { get; public set; }
    public int SortColumnIndex { get; public set; }
    public IActionInvocator ActionInvokator { get; public set; }
    private static TreeGridView();
    public TreeGridView(ReadWriteLock rwLock);
    public void add_ChildrenChanged(Action`2<object, NotifyCollectionChangedEventArgs> value);
    public void remove_ChildrenChanged(Action`2<object, NotifyCollectionChangedEventArgs> value);
    protected virtual IEnumerator get_LogicalChildren();
    public bool get_AllowAutomaticExpanders();
    public void set_AllowAutomaticExpanders(bool value);
    public RowPresentationMode get_RowPresentationMode();
    public void set_RowPresentationMode(RowPresentationMode value);
    public bool get_AllowAutomaticArrangement();
    public void set_AllowAutomaticArrangement(bool value);
    public void add_AllowAutomaticArrangementChanged(EventHandler value);
    public void remove_AllowAutomaticArrangementChanged(EventHandler value);
    private void OnAllowAutomaticArrangementChanged(DependencyPropertyChangedEventArgs e);
    private sealed virtual override IEnumerable JetBrains.UI.Controls.TreeGrid.ITreeGridView.GetCurrentRootItems();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    private void OnItemsSourceChanged(DependencyPropertyChangedEventArgs e);
    public void add_ItemsSourceChanged(DependencyPropertyChangedEventHandler value);
    public void remove_ItemsSourceChanged(DependencyPropertyChangedEventHandler value);
    public IChildrenProvider get_ChildrenProvider();
    public void set_ChildrenProvider(IChildrenProvider value);
    private void OnChildrenProviderChanged(DependencyPropertyChangedEventArgs e);
    public void add_ChildrenProviderChanged(DependencyPropertyChangedEventHandler value);
    public void remove_ChildrenProviderChanged(DependencyPropertyChangedEventHandler value);
    public IParentProvider get_ParentProvider();
    public void set_ParentProvider(IParentProvider value);
    private void OnParentProviderChanged(DependencyPropertyChangedEventArgs e);
    [NotNullAttribute]
internal IParentProvider GetParentProviderOrAutomatic();
    public void add_ParentProviderChanged(DependencyPropertyChangedEventHandler value);
    public void remove_ParentProviderChanged(DependencyPropertyChangedEventHandler value);
    public bool get_AreRootsFixed();
    public void set_AreRootsFixed(bool value);
    private void OnAreRootsFixed(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public DataTemplate get_CellTemplate();
    public void set_CellTemplate(DataTemplate value);
    private void OnCellTemplateChanaged(DependencyPropertyChangedEventArgs e);
    public DataTemplateSelector get_CellTemplateSelector();
    public void set_CellTemplateSelector(DataTemplateSelector value);
    private void OnCellTemplateSelectorChanaged(DependencyPropertyChangedEventArgs e);
    public Style get_RowStyle();
    public void set_RowStyle(Style value);
    private void OnRowStyleChanged(DependencyPropertyChangedEventArgs e);
    public StyleSelector get_RowStyleSelector();
    public void set_RowStyleSelector(StyleSelector value);
    private void OnRowStyleSelectorChanged(DependencyPropertyChangedEventArgs e);
    public SelectionMode get_SelectionMode();
    public void set_SelectionMode(SelectionMode value);
    private void OnSelectionModeChanged(DependencyPropertyChangedEventArgs e);
    public IExpansionProvider get_ExpansionProvider();
    public void set_ExpansionProvider(IExpansionProvider value);
    private void OnExpansionProviderChanged(DependencyPropertyChangedEventArgs e);
    public int get_MaxLevelsExpansion();
    public void set_MaxLevelsExpansion(int value);
    private void OnMaxLevelsExpansion(DependencyPropertyChangedEventArgs e);
    public TreeGridColumnDefinitionCollection get_ColumnDefinitions();
    public void set_ColumnDefinitions(TreeGridColumnDefinitionCollection value);
    private void OnColumnDefinitionsChanged(DependencyPropertyChangedEventArgs e);
    private void OnColumnDefinitionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void ResetColumnDefinitionsLogicalChildren();
    private void OnColumnsLayoutChanged(object sender, EventArgs e);
    internal TreeGridColumnDefinitionCollection GetColumnDefinitionsOrDefault();
    public ColumnResizingStrategy get_ColumnResizingStrategy();
    public void set_ColumnResizingStrategy(ColumnResizingStrategy value);
    public bool get_AllowColumnRearrange();
    public void set_AllowColumnRearrange(bool value);
    public bool get_AllowColumnSorting();
    public void set_AllowColumnSorting(bool value);
    private void OnAllowColumnSorting(DependencyPropertyChangedEventArgs e);
    public bool get_AllowAutoExpandSingleChild();
    public void set_AllowAutoExpandSingleChild(bool value);
    private void OnAllowAutoExpandSingleChild(DependencyPropertyChangedEventArgs e);
    public bool get_ShowColumnHeaders();
    public void set_ShowColumnHeaders(bool value);
    private void OnShowColumnHeadersChanged(DependencyPropertyChangedEventArgs e);
    internal bool ShouldShowColumnHeaders();
    public void add_SortColumnChanged(DependencyPropertyChangedEventHandler value);
    public void remove_SortColumnChanged(DependencyPropertyChangedEventHandler value);
    public TreeGridColumnDefinition get_SortColumn();
    public void set_SortColumn(TreeGridColumnDefinition value);
    private void OnSortColumnChanged(DependencyPropertyChangedEventArgs e);
    public ListSortDirection get_SortDirection();
    public void set_SortDirection(ListSortDirection value);
    public void add_SortDirectionChanged(DependencyPropertyChangedEventHandler value);
    public void remove_SortDirectionChanged(DependencyPropertyChangedEventHandler value);
    private void OnSortDirectionChanged(DependencyPropertyChangedEventArgs e);
    public void add_SelectedItemChanged(DependencyPropertyChangedEventHandler value);
    public void remove_SelectedItemChanged(DependencyPropertyChangedEventHandler value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    private void OnSelectedItemChanged(DependencyPropertyChangedEventArgs e);
    public void add_SelectedItemsChanged(NotifyCollectionChangedEventHandler value);
    public void remove_SelectedItemsChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual ISelectedItemCollection get_SelectedItems();
    public void set_SelectedItems(ISelectedItemCollection value);
    private void OnSelectedItemCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void FlowSelectedItemFromSelectedItemCollection();
    public bool IsSelected(object item);
    public void add_FocusedItemChanged(DependencyPropertyChangedEventHandler value);
    public void remove_FocusedItemChanged(DependencyPropertyChangedEventHandler value);
    public sealed virtual object get_FocusedItem();
    public sealed virtual void set_FocusedItem(object value);
    private void OnFocusedItemPropertyChanged(DependencyPropertyChangedEventArgs e);
    internal void UpdateFocusedItemPropertySilently(object item);
    public void Focus(object item, FocusOptions options);
    public Func`2<object, bool> get_FocusabilityProvider();
    public void set_FocusabilityProvider(Func`2<object, bool> value);
    private void OnFocusabilityProviderPropertyChanged(DependencyPropertyChangedEventArgs e);
    public bool IsFocusable(object dataItem);
    public Func`2<object, bool> get_SelectabilityProvider();
    public void set_SelectabilityProvider(Func`2<object, bool> value);
    private void OnSelectabilityProviderPropertyChanged(DependencyPropertyChangedEventArgs e);
    public bool IsSelectable(object item);
    public void add_FilterChanged(DependencyPropertyChangedEventHandler value);
    public void remove_FilterChanged(DependencyPropertyChangedEventHandler value);
    public void add_FilterInvalidated(EventHandler value);
    public void remove_FilterInvalidated(EventHandler value);
    public IFilterDescriptor get_Filter();
    public void set_Filter(IFilterDescriptor value);
    private void OnFilterChanged(DependencyPropertyChangedEventArgs e);
    private void OnFilterInvalidated(object sender, EventArgs e);
    public void add_FilteringModeChanged(DependencyPropertyChangedEventHandler value);
    public void remove_FilteringModeChanged(DependencyPropertyChangedEventHandler value);
    public FilteringMode get_FilteringMode();
    public void set_FilteringMode(FilteringMode value);
    private void OnFilteringModeChanged(DependencyPropertyChangedEventArgs e);
    public void add_SortDescriptionChanged(DependencyPropertyChangedEventHandler value);
    public void remove_SortDescriptionChanged(DependencyPropertyChangedEventHandler value);
    public void add_SortDescriptionInvalidated(EventHandler value);
    public void remove_SortDescriptionInvalidated(EventHandler value);
    public ISortDescription get_SortDescription();
    public void set_SortDescription(ISortDescription value);
    private void OnSortDescriptionChanged(DependencyPropertyChangedEventArgs e);
    private void OnSortDescriptionInvalidated(object sender, EventArgs e);
    public double get_Gap();
    public void set_Gap(double value);
    public double get_DefaultRowHeight();
    public void set_DefaultRowHeight(double value);
    private void OnSortColumnIndexChanged(DependencyPropertyChangedEventArgs args);
    public int get_SortColumnIndex();
    public void set_SortColumnIndex(int value);
    private void UpdateSortingOnColumnChanged();
    private TreeGridColumnDefinition GetSortColumnFromIndex(int index);
    private int GetIndexOfCurrentSortColumn();
    [CompilerGeneratedAttribute]
public IActionInvocator get_ActionInvokator();
    [CompilerGeneratedAttribute]
public void set_ActionInvokator(IActionInvocator value);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public void AssertWriteAccess();
    [ConditionalAttribute("JET_MODE_ASSERT")]
public void AssertReadAccess();
    public IDisposable UsingAccessBrackets();
    public IDisposable UsingWriteAccessBrackets();
    public void CatchBrackets(Action action);
    public T CatchBrackets(Func`1<T> action);
    private static object OnTabNavigationCoerce(object source);
    private void ScheduleReevaluate();
    private void OnReevaluate();
    private void ReevaluateFocusItem();
    private void OnKeyDown(object sender, KeyEventArgs e);
    private void OnFocusedItemChanged(object sender, DependencyPropertyChangedEventArgs e);
    private IDisposable UnlinkFocusSelectionAffection();
    internal void HandleFocusedItemChanged();
    private bool IsAnyKeyDown(Key[] keys);
    private void OnSelectedItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual void OnApplyTemplate();
    private void OnChildrenChanged(object item, NotifyCollectionChangedEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    private void OnExpandAll();
    public void add_Expanding(CancelEventHandler value);
    public void remove_Expanding(CancelEventHandler value);
    public void add_Collapsing(CancelEventHandler value);
    public void remove_Collapsing(CancelEventHandler value);
    public void add_Expanded(Action`1<object> value);
    public void remove_Expanded(Action`1<object> value);
    public void add_Collapsed(Action`1<object> value);
    public void remove_Collapsed(Action`1<object> value);
    public void add_ExpandingAll(Action value);
    public void remove_ExpandingAll(Action value);
    public void add_ExpandedAll(Action value);
    public void remove_ExpandedAll(Action value);
    internal bool Preexpand(object item);
    internal bool Precollapse(object item);
    private void OnExpanded(object item);
    private void OnCollapsed(object item);
    [DebuggerStepThroughAttribute]
[NotNullAttribute]
public ItemsSource GetItemsSource();
    public bool IsExpanded(object item, bool coerceExpansion);
    internal bool IsExpandedUnsafe(object item, bool coerceExpansion);
    public int GetLevel(object item);
    public bool HasChildren(object item);
    public void Expand(object item, bool bringDescendantsIntoView);
    private sealed virtual override void JetBrains.UI.Controls.TreeGrid.ITreeGridView.Expand(object data);
    public void Collapse(object item);
    public TreeGridNodeViewModel GetOrCreateItemViewModel(object item);
    private void InvalidateViewModel(object item, Action`1<TreeGridNodeViewModel> invalidate);
    private void InvalidateViewModels(Action`1<TreeGridNodeViewModel> invalidate);
    [NotNullAttribute]
public ItemsProjection GetItemsProjection();
    public object Next(object item, EnumerateOptions options);
    public object Previous(object item, EnumerateOptions options);
    public object GetParent(object item);
    public IEnumerable`1<object> GetExpandedChildrenOf(object item);
    public int IndexOf(object item);
    public int IndexOf(object parent, object child);
    public void ExpandAll(Nullable`1<int> maxLevels);
    public void ExpandAll(object item, Nullable`1<int> maxLevels);
    public void CollapseAll(Nullable`1<int> maxLevels);
    public void CollapseAll(object item, Nullable`1<int> maxLevels);
    public sealed virtual bool ExpandTo(object item);
    public string Print();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public object HitItem(Nullable`1<Point> mousePosition);
    public TreeGridRow HitRow(Point coordinates);
    private sealed virtual override UIElement JetBrains.UI.Controls.TreeGrid.ITreeGridView.HitRow(Point coordinates);
    public sealed virtual DependencyObject HitTest(Point pt);
    public Double[] GetActualColumnWidths();
    public bool IsFiltered(object item);
    internal TreeGridRow GetRowIfVisible(object item);
    public bool IsInViewport(object item);
    public void BringIntoView(object item);
    public string PrintCache();
    public ContainerGenerator GetContainerGenerator();
    public ExpansionStates GetExpansionStates();
    public sealed virtual bool Exists(object item);
    public bool IsProjected(object item, bool coerceExpansion);
    public ObjectIndexPath`1<T> GetObjectIndexPathTo(object item);
    public ObjectIndexPath`1<T> TryGetObjectIndexPathTo(object item);
    private ObjectIndexPath`1<T> GetObjectIndexPathToInternal(object item, bool throwExeption);
    internal bool TryExecuteBrackets(Action action);
    internal bool ExecuteOrQueueBrackets(Action action);
    internal object FindParentTraversal(object item);
    internal bool TryFindParentTraversal(object item, Object& output);
    private object FindParent(object root, IChildrenProvider childrenProvider, Func`2<object, bool> contains);
    internal TreeGridViewport GetViewport();
    private void FireExpandingAll();
    private void FireExpandedAll();
    [CompilerGeneratedAttribute]
private IEnumerator <>n__FabricatedMethod5();
    [CompilerGeneratedAttribute]
private void <OnAreRootsFixed>b__12();
    [CompilerGeneratedAttribute]
private static void <OnAreRootsFixed>b__13(TreeGridNodeViewModel x);
    [CompilerGeneratedAttribute]
private void <OnCellTemplateChanaged>b__15();
    [CompilerGeneratedAttribute]
private static void <OnCellTemplateChanaged>b__16(TreeGridCell cell);
    [CompilerGeneratedAttribute]
private void <OnCellTemplateSelectorChanaged>b__18();
    [CompilerGeneratedAttribute]
private static void <OnCellTemplateSelectorChanaged>b__19(TreeGridCell cell);
    [CompilerGeneratedAttribute]
private static void <OnExpansionProviderChanged>b__1b(TreeGridNodeViewModel x);
    [CompilerGeneratedAttribute]
private static bool <ShouldShowColumnHeaders>b__22(TreeGridColumnDefinition c);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__41(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__42(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__43(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__44(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__45(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__46(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__47(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__48(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__49(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4a(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4b(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4c(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4d(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4e(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4f(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__50(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__51(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__52(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__53(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__54(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__55(object x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__56(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__57(object x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__58(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__59(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5a(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5b(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5c(DependencyObject o, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5d(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__5e(DependencyObject s, object o);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7d(object x);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7e(object x);
    [CompilerGeneratedAttribute]
private void <OnReevaluate>b__81();
    [CompilerGeneratedAttribute]
private void <OnReevaluate>b__82();
    [CompilerGeneratedAttribute]
private void <UnlinkFocusSelectionAffection>b__8a();
    [CompilerGeneratedAttribute]
private void <UnlinkFocusSelectionAffection>b__8b();
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__95();
    [CompilerGeneratedAttribute]
private static void <OnExpanded>b__9b(TreeGridNodeViewModel x);
    [CompilerGeneratedAttribute]
private static void <OnCollapsed>b__9d(TreeGridNodeViewModel x);
    [CompilerGeneratedAttribute]
private TreeGridViewAutomationPeer <OnCreateAutomationPeer>b__9f();
}
public class JetBrains.UI.Controls.TreeGrid.Revised.TreeGridViewport : FrameworkElement {
    private static double HorizontalOneTimeScrollPortion;
    private static double MouseWheelItemCountPerScroll;
    private static int ScrollBarFlippingCounterLimit;
    private TreeGridColumnPanel myColumnsPanel;
    private ContainerGenerator myContainerGenerator;
    private HeightCache myHeightCache;
    private Snapshot mySnapshot;
    private ILogger myLogger;
    private bool myColumnsLayoutInvalidateRequired;
    private bool myColumnsCollectionInvalidateRequired;
    private DispatcherGroupingEvent myScheduledMeasureInvalidationGroupingEvent;
    private TimeSpan myScheduledMeasureInvalidationGroupingEventDelay;
    private List`1<Visual> myVisualChildren;
    private TreeGridInterlayout myInterlayout;
    private bool HasEverMeasured;
    private Stopwatch myPreviousHandledPageUpOrDownElapsed;
    private static TimeSpan ourPageUpOrDownThrottlingTimeout;
    private WeakReference myCurrentItemWeakReference;
    private double myCurrentItemOffset;
    private ScrollInformation myScrollInformation;
    private static TimeSpan ScheduleUpdateScrollInformationDelay;
    private DispatcherGroupingEvent myScheduleUpdateScrollInformationGroupingEvent;
    private int myScrollBarFlippingCounter;
    private bool myScrollBarPreviousState;
    private int myItemMarker;
    [CompilerGeneratedAttribute]
private TreeGridView <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <Viewport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Windows.Controls.Primitives.IScrollInfo.CanVerticallyScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Windows.Controls.Primitives.IScrollInfo.CanHorizontallyScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollViewer <System.Windows.Controls.Primitives.IScrollInfo.ScrollOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, InterlayoutColumnDefinition> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`2<TreeGridRow, object> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridRow> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Action`1<TreeGridRow> CS$<>9__CachedAnonymousMethodDelegate3e;
    public HeightCache HeightCache { get; }
    private double AverageHeight { get; }
    public TreeGridView Owner { get; private set; }
    protected int VisualChildrenCount { get; }
    protected IEnumerator LogicalChildren { get; }
    private Rect Viewport { get; private set; }
    private bool System.Windows.Controls.Primitives.IScrollInfo.CanVerticallyScroll { get; private set; }
    private bool System.Windows.Controls.Primitives.IScrollInfo.CanHorizontallyScroll { get; private set; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ExtentWidth { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ViewportWidth { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.HorizontalOffset { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.VerticalOffset { get; }
    private ScrollViewer System.Windows.Controls.Primitives.IScrollInfo.ScrollOwner { get; private set; }
    public TreeGridViewport(TreeGridView owner);
    private static TreeGridViewport();
    private void AttachChild(Visual visual);
    private void DetachChild(Visual visual);
    public HeightCache get_HeightCache();
    private void ArrangeColumns(double availableWidth);
    private void MeasureColumns();
    public IDisposable UsingAccessBrackets();
    public void CatchBrackets(Action action);
    public T CatchBrackets(Func`1<T> action);
    private void Layout(Size availableSize, object relativeItem, double relativeItemOffset);
    private TreeGridInterlayout GetCurrentInterlayout();
    private InterlayoutColumnDefinition[] GetInterlayoutColumns();
    public Size MeasureCells(IList`1<UIElement> cells);
    public Size ArrangeCells(IList`1<UIElement> cells);
    private ContainerGenerator CreateContainerGenerator();
    private static bool InViewport(double y, double height, Rect viewport);
    private double get_AverageHeight();
    [CompilerGeneratedAttribute]
public TreeGridView get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(TreeGridView value);
    private void OnChildrenChanged(object item, NotifyCollectionChangedEventArgs e);
    private void OnCollapsed(object item);
    private void OnExpanded(object item);
    private void ScheduleMeasureInvalidation();
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    protected virtual IEnumerator get_LogicalChildren();
    private IEnumerable`1<Visual> GetLogicalChildrenInternal();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private Size GetCurrentColumnsPanelSize();
    [CompilerGeneratedAttribute]
private Rect get_Viewport();
    [CompilerGeneratedAttribute]
private void set_Viewport(Rect value);
    private static Rect ClampViewport(Rect viewport, Size extent);
    public Double[] GetActualColumnWidths();
    public bool Focus(object item, FocusOptions options);
    public void BringIntoView(object item);
    public void BringDescendantsIntoView(object target);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    private bool FromTreeGridChildPopup(MouseButtonEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    private bool TryFocusNodeHolder(ITreeGridNodeHolder nodeHolder);
    public bool PageUp(bool moveFocus);
    private bool FocusDefaultItem();
    public bool PageDown(bool moveFocus);
    protected virtual void OnKeyDown(KeyEventArgs e);
    public void HandleKeyDown(KeyEventArgs e);
    private bool OnTabPressed(KeyboardNavigationMode tabMode);
    public bool FocusCurrentOrDefaultItem();
    private bool FocusFirst();
    private bool FocusLast();
    private bool MoveFocus(bool forward, bool cycled);
    private bool IsTabNavigationCycled();
    private bool FocusNext(bool cycled);
    private bool FocusNext(object item, bool cycled);
    private bool FocusPrevious(bool cycled);
    private bool FocusPrevious(object item, bool cycled);
    public void Invalidate(string reason, bool columnsLayoutInvalidated, bool columnsCollectionChanged);
    public TreeGridRow GetRowIfVisible(object item);
    public string PrintCache();
    public ContainerGenerator GetContainerGenerator();
    private void UpdateCurrentItemTracking(object relativeItem);
    private void ResetCurrentItemTracking();
    private void SetCurrentItemAndOffset(object item, double offset);
    public void UpdateRowStyles();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineUp();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineDown();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineLeft();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineRight();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageUp();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageDown();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageLeft();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageRight();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelUp();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelDown();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelLeft();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelRight();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.SetHorizontalOffset(double offset);
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.SetVerticalOffset(double offset);
    public void SetVerticalOffset(double offset);
    public void SetVerticalOffset(double offset, bool clamp);
    private void ScrollOffset(double offsetX, double offsetY);
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    private Size GetRenderSizeOrDefault(Visual visual, Size defaultSize);
    private Vector CalculateVisualOffsetRelatedTo(Visual visual, Visual relatedTo);
    private double ComputeMakeVisibleCoordinate(double objectOffset, double objectWidth, double viewportOffset, double viewportWidth);
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Windows.Controls.Primitives.IScrollInfo.get_CanVerticallyScroll();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.set_CanVerticallyScroll(bool value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Windows.Controls.Primitives.IScrollInfo.get_CanHorizontallyScroll();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.set_CanHorizontallyScroll(bool value);
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ExtentWidth();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ExtentHeight();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ViewportWidth();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ViewportHeight();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_HorizontalOffset();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_VerticalOffset();
    [CompilerGeneratedAttribute]
private sealed virtual override ScrollViewer System.Windows.Controls.Primitives.IScrollInfo.get_ScrollOwner();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.set_ScrollOwner(ScrollViewer value);
    private void UpdateScrollInformation();
    private void UpdateScrollInformation(Size extent, Size visible, Vector offset);
    private void InvalidateScrollInfo();
    private void ProlongScheduledScrollInformationUpdate();
    private void CancelScheduledScrollInformationUpdate();
    private double CalculateCurrentAverageLineHeight();
    private bool PreventScrollBarLayoutCycling();
    [CompilerGeneratedAttribute]
private static InterlayoutColumnDefinition <GetInterlayoutColumns>b__4(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private void <CreateContainerGenerator>b__6(TreeGridRow element, object item);
    [CompilerGeneratedAttribute]
private static void <CreateContainerGenerator>b__7(TreeGridRow element, object item);
    [CompilerGeneratedAttribute]
private void <ScheduleMeasureInvalidation>b__12();
    [CompilerGeneratedAttribute]
private static void <ScheduleMeasureInvalidation>b__13(TreeGridRow x);
    [CompilerGeneratedAttribute]
private int <get_VisualChildrenCount>b__19();
    [CompilerGeneratedAttribute]
private IEnumerator`1<Visual> <get_LogicalChildren>b__1a();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod2e(MouseButtonEventArgs );
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod32(KeyEventArgs );
    [CompilerGeneratedAttribute]
private string <PrintCache>b__3b();
    [CompilerGeneratedAttribute]
private void <UpdateRowStyles>b__3c();
    [CompilerGeneratedAttribute]
private static void <UpdateRowStyles>b__3d(TreeGridRow x);
}
public class JetBrains.UI.Controls.TreeGrid.RowStyle : Style {
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    public Type DataType { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(Type value);
}
[ContentPropertyAttribute("Styles")]
public class JetBrains.UI.Controls.TreeGrid.RowStyleSelector : StyleSelector {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<RowStyle> <Styles>k__BackingField;
    public ObservableCollection`1<RowStyle> Styles { get; public set; }
    [CompilerGeneratedAttribute]
public ObservableCollection`1<RowStyle> get_Styles();
    [CompilerGeneratedAttribute]
public void set_Styles(ObservableCollection`1<RowStyle> value);
    public virtual Style SelectStyle(object item, DependencyObject container);
}
public class JetBrains.UI.Controls.TreeGrid.SelectedItemCollection : object {
    private Nullable`1<int> myCount;
    private TreeGridProjection myProjection;
    private Action`1<object> Added;
    private Action`1<object> Removed;
    private PropertyChangedEventHandler PropertyChanged;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridNode, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridNode, object> CS$<>9__CachedAnonymousMethodDelegate7;
    public int Count { get; }
    internal SelectedItemCollection(TreeGridProjection projection);
    public void add_Added(Action`1<object> value);
    public void remove_Added(Action`1<object> value);
    public void add_Removed(Action`1<object> value);
    public void remove_Removed(Action`1<object> value);
    private void RaiseAdded(object item);
    private void RaiseRemoved(object item);
    private void OnProjectionNodeRemoved(int index, TreeGridNode node);
    private bool IsSelectable(TreeGridNode node);
    public int get_Count();
    public sealed virtual void Clear();
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.Add(object item);
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.SelectTo(object item);
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.Select(object item);
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.Invert(object item);
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.SelectAll();
    private sealed virtual override bool JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.IsSelected(object item);
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.ExpandTo(object item);
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.Invalidate();
    private sealed virtual override void JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection.Reevaluate();
    public bool Add(object item);
    private void Select(TreeGridNode node);
    private void Deselect(TreeGridNode node);
    public bool Remove(object item);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void AddRange(IEnumerable items);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object o);
    [CompilerGeneratedAttribute]
private static bool <GetEnumerator>b__4(TreeGridNode node);
    [CompilerGeneratedAttribute]
private static object <GetEnumerator>b__5(TreeGridNode node);
}
public enum JetBrains.UI.Controls.TreeGrid.TouchMode : Enum {
    public int value__;
    public static TouchMode Instant;
    public static TouchMode Snapshot;
}
public class JetBrains.UI.Controls.TreeGrid.TreeGridCell : ContentControl {
    private ContentPresenter myContentPresenter;
    private TreeGridNode myNode;
    private bool myIsNodeTracked;
    private TreeGridColumnDefinition myColumnDefinition;
    private bool myIsColumnDefinitionTracked;
    private static DependencyPropertyKey HasExpanderPropertyKey;
    public static DependencyProperty HasExpanderProperty;
    private static DependencyPropertyKey LevelPropertyKey;
    public static DependencyProperty LevelProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty IsExpandedProperty;
    private static DependencyPropertyKey CollapsablePropertyKey;
    public static DependencyProperty CollapsableProperty;
    private static DependencyPropertyKey ExpandablePropertyKey;
    public static DependencyProperty ExpandableProperty;
    private static DependencyPropertyKey IsActivePropertyKey;
    public static DependencyProperty IsActiveProperty;
    private static DependencyPropertyKey HasChildrenPropertyKey;
    public static DependencyProperty HasChildrenProperty;
    private TreeGridView myTreeGridView;
    private static DependencyPropertyKey IsEditingPropertyKey;
    public static DependencyProperty IsEditingProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<DependencyObject, bool> CS$<>9__CachedAnonymousMethodDelegate29;
    public bool HasExpander { get; protected set; }
    public int Level { get; protected set; }
    public TreeGridColumnDefinition ColumnDefinition { get; public set; }
    public bool AreRootsFixed { get; }
    internal TreeGridNode Node { get; internal set; }
    public bool IsSelected { get; public set; }
    public bool IsExpanded { get; public set; }
    public bool Collapsable { get; protected set; }
    public bool Expandable { get; protected set; }
    public bool IsActive { get; protected set; }
    public bool HasChildren { get; protected set; }
    public bool IsEditing { get; protected set; }
    private static TreeGridCell();
    public TreeGridCell(TreeGridView treeGridView);
    public bool get_HasExpander();
    protected void set_HasExpander(bool value);
    public int get_Level();
    protected void set_Level(int value);
    public TreeGridColumnDefinition get_ColumnDefinition();
    public void set_ColumnDefinition(TreeGridColumnDefinition value);
    private void EndTrackingColumnDefinition();
    private void SetColumnDefinitionProperties();
    private void ClearColumnDefinitionProperties();
    private void BeginTrackingColumnDefinition();
    private void OnColumnHasExpanderChanged(object sender, EventArgs e);
    public bool get_AreRootsFixed();
    internal TreeGridNode get_Node();
    internal void set_Node(TreeGridNode value);
    private void SetNodeProperties();
    private void ClearNodeProperties();
    private void BeginTrackingNodeChanges();
    private void EndTrackingNodeChanges();
    private void OnNodeIsSelectedChanged(object sender, EventArgs eventArgs);
    private void OnNodeIsExpandedChanged(object sender, EventArgs eventArgs);
    private void OnNodeCollapsableChanged(object sender, EventArgs e);
    private void OnNodeExpandableChanged(object sender, EventArgs e);
    private void OnNodeHasChildrenChanged(object sender, EventArgs eventArgs);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    private void OnIsSelectedChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    private void OnIsExpandedChanged(DependencyPropertyChangedEventArgs args);
    public bool get_Collapsable();
    protected void set_Collapsable(bool value);
    public bool get_Expandable();
    protected void set_Expandable(bool value);
    public bool get_IsActive();
    protected void set_IsActive(bool value);
    internal void UpdateIsActive();
    public bool get_HasChildren();
    protected void set_HasChildren(bool value);
    private void OnIsKeyboardFocusWithinChanged(object sender, DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void AssertAccess();
    private bool ExecuteOrQueue(Action action);
    private void Execute(Action action);
    private T Execute(Func`1<T> action);
    private bool TryExecute(Action action, bool logFailures);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnUnloaded(object sender, RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    private void UpdateContentPresenter();
    public bool get_IsEditing();
    protected void set_IsEditing(bool value);
    private object EvaluateCellContent();
    private IEditableObject GetEditableObject();
    internal bool BeginEditing();
    internal bool EndEditing();
    private void CancelEditing();
    private bool CommitEditing();
    private bool IsEditingValid();
    [CompilerGeneratedAttribute]
private TreeGridColumnDefinition <get_ColumnDefinition>b__0();
    [CompilerGeneratedAttribute]
private void <SetColumnDefinitionProperties>b__4();
    [CompilerGeneratedAttribute]
private void <OnColumnHasExpanderChanged>b__5();
    [CompilerGeneratedAttribute]
private TreeGridNode <get_Node>b__6();
    [CompilerGeneratedAttribute]
private void <SetNodeProperties>b__a();
    [CompilerGeneratedAttribute]
private bool <OnNodeIsSelectedChanged>b__b();
    [CompilerGeneratedAttribute]
private bool <OnNodeIsExpandedChanged>b__c();
    [CompilerGeneratedAttribute]
private bool <OnNodeCollapsableChanged>b__d();
    [CompilerGeneratedAttribute]
private bool <OnNodeExpandableChanged>b__e();
    [CompilerGeneratedAttribute]
private bool <OnNodeHasChildrenChanged>b__f();
    [CompilerGeneratedAttribute]
private bool <UpdateIsActive>b__16();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__17(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__18(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod21(KeyEventArgs );
    [CompilerGeneratedAttribute]
private void <OnLoaded>b__22();
    [CompilerGeneratedAttribute]
private void <OnUnloaded>b__23();
    [CompilerGeneratedAttribute]
private bool <BeginEditing>b__25();
    [CompilerGeneratedAttribute]
private void <CancelEditing>b__26();
    [CompilerGeneratedAttribute]
private bool <CommitEditing>b__27();
    [CompilerGeneratedAttribute]
private static bool <IsEditingValid>b__28(DependencyObject element);
}
public class JetBrains.UI.Controls.TreeGrid.TreeGridCellsPresenter : FrameworkElement {
    private TreeGridNode myNode;
    private TreeGridCell[] myCells;
    private TreeGridColumnDefinitionCollection myColumnDefinitions;
    private bool myIsColumnDefinitionsTracked;
    private bool myCellsInvalidated;
    private TreeGridView myTreeGridView;
    public static DependencyProperty ContentProperty;
    private TreeGridViewport myViewport;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridCell, double> CS$<>9__CachedAnonymousMethodDelegate14;
    protected int VisualChildrenCount { get; }
    public object Content { get; public set; }
    internal TreeGridColumnDefinitionCollection ColumnDefinitions { get; internal set; }
    internal TreeGridNode Node { get; internal set; }
    internal TreeGridView TreeGridView { get; internal set; }
    private TreeGridViewport Viewport { get; }
    private static TreeGridCellsPresenter();
    protected virtual int get_VisualChildrenCount();
    protected virtual Visual GetVisualChild(int index);
    public object get_Content();
    public void set_Content(object value);
    internal TreeGridColumnDefinitionCollection get_ColumnDefinitions();
    internal void set_ColumnDefinitions(TreeGridColumnDefinitionCollection value);
    private void SetColumnDefinitionsProperties();
    private void ClearColumnDefinitionsProperties();
    private void BeginTrackingColumnDefintions();
    private void EndTrackingColumnDefintions();
    internal TreeGridNode get_Node();
    internal void set_Node(TreeGridNode value);
    private void OnColumnLayoutChanged(object sender, EventArgs e);
    private void ResetPresenters();
    private void OnColumnDefintionsChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal TreeGridView get_TreeGridView();
    internal void set_TreeGridView(TreeGridView value);
    private void AssertAccess();
    private bool ExecuteOrQueue(Action action);
    private void Execute(Action action);
    private T Execute(Func`1<T> action);
    private bool TryExecute(Action action, bool logFailures);
    private void Queue(Action action, DispatcherPriority priority);
    private void OnLoaded(object sender, EventArgs args);
    private void OnUnloaded(object sender, EventArgs args);
    private void InvalidateCells();
    private void UpdateCells();
    private void UpdateCellStyle(TreeGridCell cell);
    internal double GetCellDesiredWidth(int columnIndex);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    public void UpdateIsActive();
    private TreeGridViewport get_Viewport();
    private Rect GetColumnSlot(int index);
    public bool FocusCell(int columnIndex);
    [CompilerGeneratedAttribute]
private void <SetColumnDefinitionsProperties>b__3();
    [CompilerGeneratedAttribute]
private void <ResetPresenters>b__7();
    [CompilerGeneratedAttribute]
private void <OnLoaded>b__8();
    [CompilerGeneratedAttribute]
private void <OnUnloaded>b__9();
    [CompilerGeneratedAttribute]
private void <UpdateCells>b__b();
    [CompilerGeneratedAttribute]
private static double <MeasureOverride>b__13(TreeGridCell x);
    [CompilerGeneratedAttribute]
private void <UpdateIsActive>b__1a();
}
[TemplatePartAttribute]
public class JetBrains.UI.Controls.TreeGrid.TreeGridColumn : Control {
    private EventHandler ResizeStarted;
    private EventHandler ResizeCompleted;
    private EventHandler`1<TreeGridColumnResizeEventArgs> ResizeDelta;
    private EventHandler ResizeCanceled;
    private Thumb myThumb;
    private UIElement myHeader;
    private Point myDragStartPosition;
    private DragDropPopup myDragDropPopup;
    private TreeGridColumnDefinitionCollection myColumnDefinitions;
    private TreeGridView myTreeGridView;
    public static DependencyProperty ColumnDefinitionProperty;
    public static DependencyProperty ResizableProperty;
    private static DependencyProperty IsSortColumnPropertyKey;
    public static DependencyProperty IsSortColumnProperty;
    public static DependencyProperty IsDragOverProperty;
    private bool myIsDragging;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    internal TreeGridColumnDefinitionCollection ColumnDefinitions { get; internal set; }
    public TreeGridColumnDefinition ColumnDefinition { get; public set; }
    private TreeGridView TreeGridView { get; }
    public bool Resizable { get; public set; }
    public bool IsSortColumn { get; public set; }
    public bool IsDragOver { get; public set; }
    private static TreeGridColumn();
    public void add_ResizeStarted(EventHandler value);
    public void remove_ResizeStarted(EventHandler value);
    public void add_ResizeCompleted(EventHandler value);
    public void remove_ResizeCompleted(EventHandler value);
    public void add_ResizeDelta(EventHandler`1<TreeGridColumnResizeEventArgs> value);
    public void remove_ResizeDelta(EventHandler`1<TreeGridColumnResizeEventArgs> value);
    public void add_ResizeCanceled(EventHandler value);
    public void remove_ResizeCanceled(EventHandler value);
    internal TreeGridColumnDefinitionCollection get_ColumnDefinitions();
    internal void set_ColumnDefinitions(TreeGridColumnDefinitionCollection value);
    public TreeGridColumnDefinition get_ColumnDefinition();
    public void set_ColumnDefinition(TreeGridColumnDefinition value);
    private void OnColumnDefinitionChanged(DependencyPropertyChangedEventArgs args);
    private TreeGridView get_TreeGridView();
    public bool get_Resizable();
    public void set_Resizable(bool value);
    public bool get_IsSortColumn();
    public void set_IsSortColumn(bool value);
    private void RefreshIsSortColumnProperty();
    private void OnColumnLoaded(object sender, RoutedEventArgs e);
    private void OnSortColumnChanged(object sender, DependencyPropertyChangedEventArgs args);
    private void OnColumnUnloaded(object sender, RoutedEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs args);
    protected virtual void OnDragOver(DragEventArgs args);
    public bool get_IsDragOver();
    public void set_IsDragOver(bool value);
    protected virtual void OnDragEnter(DragEventArgs args);
    protected virtual void OnDrop(DragEventArgs args);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    private bool CanBeUsedToSort(TreeGridColumnDefinition columnDefinition);
    private string GetColumnDataTextPresentation();
    public virtual void OnApplyTemplate();
    private void OnThumbDragCompleted(object sender, DragCompletedEventArgs e);
    private void OnThumbDragStarted(object sender, DragStartedEventArgs e);
    private void OnThumbDragDelta(object sender, DragDeltaEventArgs e);
    public double GetHeaderHeight();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnMouseLeftButtonDown>b__c();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod10(MouseEventArgs );
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod14(MouseButtonEventArgs );
    [CompilerGeneratedAttribute]
private void <OnThumbDragStarted>b__18();
    [CompilerGeneratedAttribute]
private void <OnThumbDragDelta>b__19();
}
public class JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinition : FrameworkContentElement {
    private DependencyPropertyChangedEventHandler WidthChanged;
    public static DependencyProperty WidthProperty;
    private DependencyPropertyChangedEventHandler MinWidthChanged;
    public static DependencyProperty MinWidthProperty;
    private DependencyPropertyChangedEventHandler MaxWidthChanged;
    public static DependencyProperty MaxWidthProperty;
    public static DependencyProperty HasExpanderProperty;
    private EventHandler HasExpanderChanged;
    public static DependencyProperty FocusableProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty CellTemplateProperty;
    public static DependencyProperty IsEditableProperty;
    public static DependencyProperty CellEditingTemplateProperty;
    public static DependencyProperty CellEditingTemplateSelectorProperty;
    public static DependencyProperty CellTemplateSelectorProperty;
    public static DependencyProperty CellMemberPathProperty;
    public static DependencyProperty CellMemberGetterProperty;
    public static DependencyProperty CellStyleProperty;
    public static DependencyProperty CellStyleSelectorProperty;
    private EventHandler ActualWidthChanged;
    private double myActualWidth;
    private double myDesiredWidth;
    public static DependencyProperty SortableProperty;
    public static DependencyProperty SortMemberPathProperty;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resizable>k__BackingField;
    [CompilerGeneratedAttribute]
private ISortDescription <SortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7;
    public string Name { get; public set; }
    public GridLength Width { get; public set; }
    public GridLength MinWidth { get; public set; }
    public GridLength MaxWidth { get; public set; }
    public bool Resizable { get; public set; }
    public bool HasExpander { get; public set; }
    public bool Focusable { get; public set; }
    public object Header { get; public set; }
    public DataTemplate CellTemplate { get; public set; }
    public bool IsEditable { get; public set; }
    public DataTemplate CellEditingTemplate { get; public set; }
    public DataTemplateSelector CellEditingTemplateSelector { get; public set; }
    public DataTemplateSelector CellTemplateSelector { get; public set; }
    public string CellMemberPath { get; public set; }
    public Func`2<object, object> CellMemberGetter { get; public set; }
    public Style CellStyle { get; public set; }
    public StyleSelector CellStyleSelector { get; public set; }
    internal double ActualWidth { get; internal set; }
    public bool Sortable { get; public set; }
    public ISortDescription SortDescription { get; public set; }
    public string SortMemberPath { get; public set; }
    internal double DesiredWidth { get; internal set; }
    private static TreeGridColumnDefinition();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public void add_WidthChanged(DependencyPropertyChangedEventHandler value);
    public void remove_WidthChanged(DependencyPropertyChangedEventHandler value);
    public GridLength get_Width();
    public void set_Width(GridLength value);
    private void OnWidthChanged(DependencyPropertyChangedEventArgs args);
    public void add_MinWidthChanged(DependencyPropertyChangedEventHandler value);
    public void remove_MinWidthChanged(DependencyPropertyChangedEventHandler value);
    public GridLength get_MinWidth();
    public void set_MinWidth(GridLength value);
    private void OnMinWidthChanged(DependencyPropertyChangedEventArgs args);
    public void add_MaxWidthChanged(DependencyPropertyChangedEventHandler value);
    public void remove_MaxWidthChanged(DependencyPropertyChangedEventHandler value);
    public GridLength get_MaxWidth();
    public void set_MaxWidth(GridLength value);
    private void OnMaxWidthChanged(DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
public bool get_Resizable();
    [CompilerGeneratedAttribute]
public void set_Resizable(bool value);
    public bool get_HasExpander();
    public void set_HasExpander(bool value);
    public void add_HasExpanderChanged(EventHandler value);
    public void remove_HasExpanderChanged(EventHandler value);
    private void OnHasExpanderChanged(DependencyPropertyChangedEventArgs args);
    public bool get_Focusable();
    public void set_Focusable(bool value);
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_CellTemplate();
    public void set_CellTemplate(DataTemplate value);
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public DataTemplate get_CellEditingTemplate();
    public void set_CellEditingTemplate(DataTemplate value);
    public DataTemplateSelector get_CellEditingTemplateSelector();
    public void set_CellEditingTemplateSelector(DataTemplateSelector value);
    public DataTemplateSelector get_CellTemplateSelector();
    public void set_CellTemplateSelector(DataTemplateSelector value);
    public string get_CellMemberPath();
    public void set_CellMemberPath(string value);
    public Func`2<object, object> get_CellMemberGetter();
    public void set_CellMemberGetter(Func`2<object, object> value);
    public Style get_CellStyle();
    public void set_CellStyle(Style value);
    public StyleSelector get_CellStyleSelector();
    public void set_CellStyleSelector(StyleSelector value);
    internal void add_ActualWidthChanged(EventHandler value);
    internal void remove_ActualWidthChanged(EventHandler value);
    internal double get_ActualWidth();
    internal void set_ActualWidth(double value);
    public bool get_Sortable();
    public void set_Sortable(bool value);
    [CompilerGeneratedAttribute]
public ISortDescription get_SortDescription();
    [CompilerGeneratedAttribute]
public void set_SortDescription(ISortDescription value);
    public string get_SortMemberPath();
    public void set_SortMemberPath(string value);
    internal double get_DesiredWidth();
    internal void set_DesiredWidth(double value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject s, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.Controls.TreeGrid.TreeGridColumnDefinitionCollection : BindableCollection`1<TreeGridColumnDefinition> {
    private EventHandler LayoutChanged;
    public void add_LayoutChanged(EventHandler value);
    public void remove_LayoutChanged(EventHandler value);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void SubscribeLayoutChanges(TreeGridColumnDefinition item);
    private void UnsubscribeLayoutChanges(TreeGridColumnDefinition oldItem);
    private void OnItemActualWidthChanged(object sender, EventArgs e);
    private void OnItemWidthChanged(object sender, DependencyPropertyChangedEventArgs e);
    internal bool UpdateColumnDesiredWidths(Double[] desiredWidths, bool growOnly);
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridColumnLayoutInformation : ValueType {
    public double Width;
    public Thickness Padding;
}
public class JetBrains.UI.Controls.TreeGrid.TreeGridColumnResizeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    public double Offset { get; private set; }
    public TreeGridColumnResizeEventArgs(double offset);
    [CompilerGeneratedAttribute]
public double get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(double value);
}
public class JetBrains.UI.Controls.TreeGrid.TreeGridColumnsPanel : Panel {
    private TreeGridColumnDefinitionCollection myColumnDefinitions;
    private TreeGridView myTreeGridView;
    private TreeGridColumnDefinitionCollection myDefaultColumnDefinitions;
    public static DependencyProperty AllowResizeProperty;
    public static DependencyProperty AllowResizeOverflowProperty;
    private Double[] myWidthsBeforeResize;
    private Double[] myActualWidthsBeforeResize;
    private double myWidthAfterResize;
    private double myPreviousWidthInUpdateColumnsLayout;
    private double myPreviousAvailableWidth;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, double> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<UIElement, double> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegated;
    private TreeGridView TreeGridView { get; }
    public bool AllowResize { get; public set; }
    public bool AllowResizeOverflow { get; public set; }
    internal TreeGridColumnDefinitionCollection ColumnDefinitions { get; internal set; }
    private static TreeGridColumnsPanel();
    private TreeGridView get_TreeGridView();
    public bool get_AllowResize();
    public void set_AllowResize(bool value);
    private void OnAllowResizeChanged(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public bool get_AllowResizeOverflow();
    public void set_AllowResizeOverflow(bool value);
    private void OnAllowResizeOverflowChanged(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private void UpdateCanResize();
    internal TreeGridColumnDefinitionCollection get_ColumnDefinitions();
    internal void set_ColumnDefinitions(TreeGridColumnDefinitionCollection value);
    private void OnColumnDefinitionsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void RebuildColumnPresentations();
    private void OnColumnResizeStarted(object sender, EventArgs e);
    private void OnColumnResizeCanceled(object sender, EventArgs e);
    private void OnColumnResizeCompleted(object sender, EventArgs e);
    private void OnColumnResizeDelta(object sender, TreeGridColumnResizeEventArgs e);
    private void UpdateColumnDefinitionsFromActualWidths(Double[] actualWidths);
    private bool CanResize(TreeGridColumnDefinitionCollection definitions, int index);
    private static bool HasStar(IEnumerable`1<TreeGridColumnDefinition> definitions);
    private double GetColumnAutoSize(int index);
    private void OnLoaded(object sender, RoutedEventArgs routedEventArgs);
    private void OnUnloaded(object sender, RoutedEventArgs routedEventArgs);
    public double GetHeaderHeight();
    private Double[] GetColumnSizes(TreeGridColumnDefinitionCollection columnDefinitions, double constrainedWidth);
    private static double GetTotalStars(TreeGridColumnDefinitionCollection definitions);
    private static double Constrain(TreeGridColumnDefinition definition, double proposedWidthPixels);
    public void InvalidateLayout();
    private void UpdateColumnsLayout(double width);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    [CompilerGeneratedAttribute]
private static double <OnColumnResizeStarted>b__0(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private static double <OnColumnResizeStarted>b__1(UIElement x);
    [CompilerGeneratedAttribute]
private static bool <HasStar>b__4(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private static bool <GetHeaderHeight>b__8(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__a(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__b(DependencyObject s, DependencyPropertyChangedEventArgs e);
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridDragDropData : DependencyObject {
    private static DependencyPropertyKey TargetRowPropertyKey;
    public static DependencyProperty TargetRowProperty;
    private static DependencyPropertyKey TargetCellPropertyKey;
    public static DependencyProperty TargetCellProperty;
    private static DependencyPropertyKey SourceRowsPropertyKey;
    public static DependencyProperty SourceRowsProperty;
    public TreeGridRow TargetRow { get; protected set; }
    public TreeGridCell TargetCell { get; protected set; }
    public TreeGridRow[] SourceRows { get; protected set; }
    private static TreeGridDragDropData();
    public TreeGridRow get_TargetRow();
    protected void set_TargetRow(TreeGridRow value);
    public TreeGridCell get_TargetCell();
    protected void set_TargetCell(TreeGridCell value);
    public TreeGridRow[] get_SourceRows();
    protected void set_SourceRows(TreeGridRow[] value);
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridItemsSource : object {
    private IEnumerable myRoots;
    private IFilterDescriptor myFilter;
    private FilteringMode myFilteringMode;
    private IFilterDescriptor myCachedFilter;
    private ISortDescription mySortDescription;
    private ListSortDirection mySortDirection;
    private IParentProvider myParentProvider;
    private IChildrenProvider myChildrenProvider;
    private IExpansionProvider myExpansionProvider;
    private Func`2<object, bool> mySelectabilityProvider;
    private Func`2<object, bool> myFocusabilityProvider;
    private IChildrenProvider myAutomaticChildrenProvider;
    private Action Invalidated;
    private Action RootsChanged;
    private Action FilterChanged;
    private Action SortChanged;
    private Action ParentProviderChanged;
    private Action ChildrenProviderChanged;
    private Action ExpansionProviderChanged;
    private Action SelectabilityProviderChanged;
    private Action FocusabilityProviderChanged;
    private WeakToStrongDictionary`2<object, bool> myExpansionMap;
    public IEnumerable Roots { get; public set; }
    public IFilterDescriptor Filter { get; public set; }
    public FilteringMode FilteringMode { get; public set; }
    public ISortDescription SortDescription { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    public IParentProvider ParentProvider { get; public set; }
    public Func`2<object, bool> FocusabilityProvider { get; public set; }
    public Func`2<object, bool> SelectabilityProvider { get; public set; }
    public IChildrenProvider ChildrenProvider { get; public set; }
    public IExpansionProvider ExpansionProvider { get; public set; }
    public bool IsFiltered { get; }
    public bool IsSorted { get; }
    public bool IsParentAvailable { get; }
    public void add_Invalidated(Action value);
    public void remove_Invalidated(Action value);
    public void add_RootsChanged(Action value);
    public void remove_RootsChanged(Action value);
    public void add_FilterChanged(Action value);
    public void remove_FilterChanged(Action value);
    public void add_SortChanged(Action value);
    public void remove_SortChanged(Action value);
    public void add_ParentProviderChanged(Action value);
    public void remove_ParentProviderChanged(Action value);
    public void add_ChildrenProviderChanged(Action value);
    public void remove_ChildrenProviderChanged(Action value);
    public void add_ExpansionProviderChanged(Action value);
    public void remove_ExpansionProviderChanged(Action value);
    public void add_SelectabilityProviderChanged(Action value);
    public void remove_SelectabilityProviderChanged(Action value);
    public void add_FocusabilityProviderChanged(Action value);
    public void remove_FocusabilityProviderChanged(Action value);
    public IEnumerable get_Roots();
    public void set_Roots(IEnumerable value);
    public IFilterDescriptor get_Filter();
    public void set_Filter(IFilterDescriptor value);
    public FilteringMode get_FilteringMode();
    public void set_FilteringMode(FilteringMode value);
    private void OnFilterInvalidated(object sender, EventArgs e);
    public ISortDescription get_SortDescription();
    public void set_SortDescription(ISortDescription value);
    public ListSortDirection get_SortDirection();
    public void set_SortDirection(ListSortDirection value);
    public IParentProvider get_ParentProvider();
    public void set_ParentProvider(IParentProvider value);
    public Func`2<object, bool> get_FocusabilityProvider();
    public void set_FocusabilityProvider(Func`2<object, bool> value);
    public Func`2<object, bool> get_SelectabilityProvider();
    public void set_SelectabilityProvider(Func`2<object, bool> value);
    public IChildrenProvider get_ChildrenProvider();
    public void set_ChildrenProvider(IChildrenProvider value);
    public IExpansionProvider get_ExpansionProvider();
    public void set_ExpansionProvider(IExpansionProvider value);
    public void RaiseExpansionProviderChanged();
    public bool get_IsFiltered();
    public bool get_IsSorted();
    public bool get_IsParentAvailable();
    public object GetParent(object item);
    public Nullable`1<bool> IsAccepted(object item);
    public int Compare(object a, object b);
    public bool IsExpanded(object item);
    public void PreserveIsExpanded(object item, bool value);
    public bool IsCollapsable(object item);
    public bool IsExpandable(object item);
    public void Invalidate();
    public bool HasChildren(object item);
    [NotNullAttribute]
public IEnumerable GetChildren(object item);
    public bool IsObservable();
    private IChildrenProvider GetChildrenProviderOrAutomatic();
    private IChildrenProvider GetAutomaticChildrenProvider();
    public bool IsFocusable(object item);
    public bool IsSelectable(object item);
    public bool IsAcceptedOrHasAcceptedChild(object item);
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridNode : object {
    private EventHandler IsSelectedChanged;
    private EventHandler IsExpandedChanging;
    private EventHandler IsExpandedChanged;
    private EventHandler HasChildrenChanged;
    private EventHandler CollapsableChanged;
    private EventHandler ExpandableChanged;
    private object myItem;
    [CanBeNullAttribute]
private TreeGridNode myParent;
    private TreeGridProjection myProjection;
    private TreeGridNodeChildren myChildren;
    private bool myCollapsable;
    private bool myExpandable;
    private bool myIsExpanded;
    private bool myIsSelected;
    private Nullable`1<bool> myHasChildren;
    public object Item { get; }
    public TreeGridNode Parent { get; }
    public bool HasChildren { get; }
    public TreeGridNodeChildren Children { get; }
    public int Level { get; }
    public bool Collapsable { get; }
    public bool Expandable { get; }
    public bool IsExpanded { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsInProjection { get; }
    public TreeGridProjection Projection { get; }
    public TreeGridNode(object item, TreeGridNode parent, TreeGridProjection projection);
    public void add_IsSelectedChanged(EventHandler value);
    public void remove_IsSelectedChanged(EventHandler value);
    public void add_IsExpandedChanging(EventHandler value);
    public void remove_IsExpandedChanging(EventHandler value);
    public void add_IsExpandedChanged(EventHandler value);
    public void remove_IsExpandedChanged(EventHandler value);
    public void add_HasChildrenChanged(EventHandler value);
    public void remove_HasChildrenChanged(EventHandler value);
    public void add_CollapsableChanged(EventHandler value);
    public void remove_CollapsableChanged(EventHandler value);
    public void add_ExpandableChanged(EventHandler value);
    public void remove_ExpandableChanged(EventHandler value);
    private void RaiseEventHandler(EventHandler eventHandler);
    private void RaiseIsSelectedChanged();
    private void RaiseIsExpandedChanging();
    private void RaiseIsExpandedChanged();
    private void RaiseHasChildrenChanged();
    private void RaiseCollapsableChanged();
    private void RaiseExpandableChanged();
    private void NotifyIsExpandedChanged();
    private void EnsureChildren();
    public object get_Item();
    public TreeGridNode get_Parent();
    public bool get_HasChildren();
    private void UpdateHasChildren();
    public TreeGridNodeChildren get_Children();
    public int get_Level();
    public void UpdateExpansion();
    public bool get_Collapsable();
    public bool get_Expandable();
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    internal void SetIsSelectedInternal(bool value);
    public bool get_IsInProjection();
    public TreeGridProjection get_Projection();
    public virtual string ToString();
    public TreeGridNodeChildren GetChildrenOrNull();
    [CompilerGeneratedAttribute]
private void <EnsureChildren>b__0(object s, EventArgs e);
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridNodeChildren : object {
    private EventHandler Changed;
    [CanBeNullAttribute]
private TreeGridNode myOwner;
    private TreeGridProjection myProjection;
    private bool myIsProjected;
    private List`1<TreeGridNode> myNodes;
    private ITreeGridNodeChildrenSynchronizer mySynchronizer;
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    public int Count { get; }
    private bool IsAttached { get; private set; }
    public bool IsProjected { get; }
    public TreeGridNodeChildren(TreeGridNode owner, TreeGridProjection projection);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    public int get_Count();
    [CompilerGeneratedAttribute]
private bool get_IsAttached();
    [CompilerGeneratedAttribute]
private void set_IsAttached(bool value);
    private void Attach();
    public void UpdateSynchronizationEnabled();
    private void Detach();
    private bool IsSynchronizerShouldbeEnabled();
    private void OnIsExpandedChanged(object sender, EventArgs e);
    public IList`1<TreeGridNode> GetNodes(TouchMode mode);
    private void OnItemMoved(int from, int to);
    private void OnItemRemoved(int index);
    private void OnItemAdded(int index, object item);
    public bool get_IsProjected();
    private void Project();
    private void Unproject();
    private bool IsInProjection(TreeGridNode node);
    private int LocalToProjectionIndex(int localIndex);
    private int CalculateHintIndex(TreeGridNode parent, int childIndex);
    private int IndexOfSameOrLowerLevelOrCount(int from, int targetLevel);
    private int GetOwnerProjectedIndex();
    public int IndexOf(TreeGridNode node, TouchMode mode);
    public TreeGridNode FindNode(object item, int maxTraverseDepth);
    private static TreeGridNode FindNodeRecursive(TreeGridNodeChildren children, object item, int currentDepth);
    public void ExpandAll(int maxLevelExpansion);
    public void UpdateExpansion();
    public void OnItemsSourceInvalidated();
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridNodeChildrenSynchronizer : object {
    private TreeGridNode myOwner;
    private TreeGridProjection myProjection;
    private List`1<object> myItems;
    private HashSet`1<object> myItemsHasSet;
    private Action`2<int, object> Added;
    private Action`1<int> Removed;
    private Action`2<int, int> Moved;
    private Queue`1<Action> myDelayedOperations;
    private IEnumerator myChildrenEnumerator;
    private IEnumerator myCurrentFilteringEnumerator;
    private bool mySynchronizationEnabled;
    private bool mySynchronizationRestarting;
    private bool mySynchronizationCompleted;
    private bool myChildrenEnumerationCompleted;
    private bool myChildrenRemoveOthers;
    private int mySynchronizationCaret;
    private NotifyCollectionChangedEventHandler myCollectionChangedEventHandler;
    private WeakCollectionChangedListener myWeakListener;
    private PropertyInfo myCachedIndexerPropertyInfo;
    private Stopwatch mySynchronizationInteruptedByChildrenChanged;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public bool IsEnabled { get; public set; }
    public int Priority { get; private set; }
    public TreeGridNodeChildrenSynchronizer(TreeGridNode owner, TreeGridProjection projection);
    public sealed virtual void add_Added(Action`2<int, object> value);
    public sealed virtual void remove_Added(Action`2<int, object> value);
    public sealed virtual void add_Removed(Action`1<int> value);
    public sealed virtual void remove_Removed(Action`1<int> value);
    public sealed virtual void add_Moved(Action`2<int, int> value);
    public sealed virtual void remove_Moved(Action`2<int, int> value);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(int value);
    public sealed virtual void OnItemsSourceInvalidated();
    private void Start();
    private void Stop();
    private void Restart();
    private sealed virtual override IEnumerable`1<IChainedJob> JetBrains.Application.UI.Controls.TreeGrid.IChainedJob.Do();
    private void HandleNextItem(object item, int proposedIndex);
    private int FindWhereInsert(object item, int proposedIndex);
    private int FindWhereInsertSorted(object item);
    private void RemoveOtherItems();
    private int IndexOf(object item, int hintIndex);
    private void StartListenChildrenChanges();
    private void StopListenChildrenChanges();
    private void OnChildrenChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void HandleItemRemoved(object item, int hintIndex);
    private void HandleItemInserted(object item, int index);
    private int FindWhereToInsertItemToSynchronizedCollection(object item, int index);
    private object GetChildAt(int index);
    private void RestartOrRefreshIfRequired();
    private object GetItem();
    private IEnumerable GetChildren();
    private IEnumerator Enumerate(IEnumerable roots, Func`2<object, IEnumerable> getChildren);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.UI.Controls.TreeGrid.TreeGridProjection : object {
    private TreeGridItemsSource myItemsSource;
    private Action`1<Action> myDispatch;
    private ChainedJobScheduler myChainedJobScheduler;
    private SelectedItemCollection mySelectedItemCollection;
    private Action`1<TreeGridNode> IsExpandedChanged;
    private EventHandler Changed;
    private Action`2<int, TreeGridNode> Inserted;
    private Action`2<int, TreeGridNode> Removed;
    private Action`3<int, int, int> Moved;
    private TreeGridNodeChildren myRoots;
    private List`1<TreeGridNode> myNodes;
    private IDictionary`2<object, TreeGridNode> myItemToNodeMap;
    private bool myIsAsynchronious;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsBusy>k__BackingField;
    public Property`1<bool> IsBusy { get; private set; }
    public SelectedItemCollection Selection { get; }
    public bool IsAsynchronious { get; public set; }
    public TreeGridNode Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<JetBrains.UI.Controls.TreeGrid.TreeGridNode>.IsReadOnly { get; }
    public TreeGridItemsSource ItemsSource { get; }
    public TreeGridNodeChildren Roots { get; }
    public TreeGridProjection(TreeGridItemsSource itemsSource, Action`1<Action> dispatch);
    public void add_IsExpandedChanged(Action`1<TreeGridNode> value);
    public void remove_IsExpandedChanged(Action`1<TreeGridNode> value);
    public void add_Changed(EventHandler value);
    public void remove_Changed(EventHandler value);
    private void RaiseChanged();
    public void add_Inserted(Action`2<int, TreeGridNode> value);
    public void remove_Inserted(Action`2<int, TreeGridNode> value);
    private void RaiseInserted(int index, TreeGridNode node);
    public void add_Removed(Action`2<int, TreeGridNode> value);
    public void remove_Removed(Action`2<int, TreeGridNode> value);
    private void RaiseRemoved(int index, TreeGridNode node);
    public void add_Moved(Action`3<int, int, int> value);
    public void remove_Moved(Action`3<int, int, int> value);
    private void RaiseMoved(int from, int to, int count);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsBusy();
    [CompilerGeneratedAttribute]
private void set_IsBusy(Property`1<bool> value);
    public SelectedItemCollection get_Selection();
    public void Move(int from, int to);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Insert(int index, TreeGridNode node);
    private void OnItemsSourceInvalidated();
    private void OnFilterChanged();
    public bool get_IsAsynchronious();
    public void set_IsAsynchronious(bool value);
    private void OnExpansionChanged();
    public sealed virtual TreeGridNode get_Item(int index);
    public sealed virtual void set_Item(int index, TreeGridNode value);
    public sealed virtual int IndexOf(TreeGridNode node);
    public int IndexOf(TreeGridNode node, int hintIndex);
    public sealed virtual IEnumerator`1<TreeGridNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<JetBrains.UI.Controls.TreeGrid.TreeGridNode>.Add(TreeGridNode item);
    private sealed virtual override void System.Collections.Generic.ICollection<JetBrains.UI.Controls.TreeGrid.TreeGridNode>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<JetBrains.UI.Controls.TreeGrid.TreeGridNode>.Contains(TreeGridNode item);
    private sealed virtual override void System.Collections.Generic.ICollection<JetBrains.UI.Controls.TreeGrid.TreeGridNode>.CopyTo(TreeGridNode[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<JetBrains.UI.Controls.TreeGrid.TreeGridNode>.Remove(TreeGridNode item);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<JetBrains.UI.Controls.TreeGrid.TreeGridNode>.get_IsReadOnly();
    public TreeGridItemsSource get_ItemsSource();
    public int FindItemNodeIndex(object item, TouchMode mode, bool allowTraverse, int maxTraveseDepth);
    public TreeGridNode GetNodeIfProjected(object item);
    public TreeGridNode GetNodeIfAvailable(object item);
    private void Trace(string format, Object[] parameters);
    public void Map(object item, TreeGridNode node);
    public void Unmap(object item);
    public void Expand(object item);
    public void Collapse(object item);
    public void ExpandTo(object data, bool allowTraverse, int maxTraverseDepth);
    public void ExpandTo(TreeGridNode node);
    public void ExpandAll(TreeGridNode node, int maxLevelsExpansion);
    public void ExpandAll(int maxLevelsExpansion);
    public bool IsFiltered(object item);
    public ObjectIndexPath`1<T> FindObjectIndexPathTo(T dataItem, bool allowTraverse, int maxTraverseDepth);
    public ObjectPath`1<T> FindObjectPathTo(T dataItem, bool allowTraverse, int maxTraverseDepth);
    private ObjectIndexPath`1<T> GetObjectIndexPathTo(TreeGridNode node);
    private ObjectPath`1<T> GetObjectPathTo(TreeGridNode node);
    public TreeGridNode FindNode(object item, bool allowTraverse, int maxTraverseDepth);
    private TreeGridNode FindNodeViaTraversing(object item, int maxTraverseDepth);
    private TreeGridNode FindNodeViaParentRelation(object item);
    public void Schedule(IChainedJob job);
    internal static TreeGridNode FindRemovedNodeSuccessor(int index, TreeGridNode removedNode, Func`2<TreeGridNode, bool> applicable);
    private static bool AreAncestorsExpanded(TreeGridNode node);
    private static TreeGridNode FindNearestApplicable(TreeGridProjection projection, int index, Func`2<TreeGridNode, bool> applicable);
    public TreeGridNodeChildren get_Roots();
    public TreeGridProjection Touch(TouchMode touchMode);
    public void NotifyIsExpandedChanged(TreeGridNode node);
    [CompilerGeneratedAttribute]
private void <set_IsAsynchronious>b__7(Action action);
    [CompilerGeneratedAttribute]
private void <set_IsAsynchronious>b__9(Action action);
}
[ContentPropertyAttribute("Content")]
public class JetBrains.UI.Controls.TreeGrid.TreeGridRow : Control {
    private DependencyPropertyChangedEventHandler IsExpandedChanged;
    private DependencyPropertyChangedEventHandler IsSelectedChanged;
    private DependencyPropertyChangedEventHandler LevelChanged;
    private DependencyPropertyChangedEventHandler IsActiveChanged;
    private DependencyPropertyChangedEventHandler HasChildrenChanged;
    private TreeGridView myTreeGridView;
    private TreeGridCellsPresenter myContentPresenter;
    private TreeGridNode myNode;
    private TreeGridColumnDefinitionCollection myColumnDefinitions;
    private bool myIsNodeChangesTracking;
    private static DependencyPropertyKey CollapsablePropertyKey;
    public static DependencyProperty CollapsableProperty;
    private static DependencyPropertyKey ExpandablePropertyKey;
    public static DependencyProperty ExpandableProperty;
    private static DependencyPropertyKey LevelPropertyKey;
    public static DependencyProperty LevelProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsSelectedProperty;
    private static DependencyPropertyKey HasChildrenPropertyKey;
    public static DependencyProperty HasChildrenProperty;
    private static DependencyPropertyKey IsActivePropertyKey;
    public static DependencyProperty IsActiveProperty;
    public static DependencyPropertyKey AlternationIndexPropertyKey;
    public static DependencyProperty AlternationIndexProperty;
    private Point myMouseDownPosition;
    public static DependencyProperty IsDragOverProperty;
    private DragDropPopup myDragDropPopup;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate27;
    public bool Collapsable { get; protected set; }
    public bool Expandable { get; protected set; }
    internal TreeGridNode Node { get; internal set; }
    public int Level { get; protected set; }
    public bool IsExpanded { get; public set; }
    public bool IsSelected { get; public set; }
    public bool HasChildren { get; protected set; }
    internal TreeGridColumnDefinitionCollection ColumnDefinitions { get; internal set; }
    public bool IsActive { get; protected set; }
    public int AlternationIndex { get; internal set; }
    internal TreeGridView TreeGridView { get; }
    public bool IsDragOver { get; public set; }
    private static TreeGridRow();
    internal TreeGridRow(TreeGridView treeGridView);
    public void add_IsExpandedChanged(DependencyPropertyChangedEventHandler value);
    public void remove_IsExpandedChanged(DependencyPropertyChangedEventHandler value);
    public void add_IsSelectedChanged(DependencyPropertyChangedEventHandler value);
    public void remove_IsSelectedChanged(DependencyPropertyChangedEventHandler value);
    public void add_LevelChanged(DependencyPropertyChangedEventHandler value);
    public void remove_LevelChanged(DependencyPropertyChangedEventHandler value);
    public void add_IsActiveChanged(DependencyPropertyChangedEventHandler value);
    public void remove_IsActiveChanged(DependencyPropertyChangedEventHandler value);
    public void add_HasChildrenChanged(DependencyPropertyChangedEventHandler value);
    public void remove_HasChildrenChanged(DependencyPropertyChangedEventHandler value);
    public bool get_Collapsable();
    protected void set_Collapsable(bool value);
    public bool get_Expandable();
    protected void set_Expandable(bool value);
    internal TreeGridNode get_Node();
    internal void set_Node(TreeGridNode value);
    private void SetNodeProperties();
    private void ClearNodeProperties();
    private void BeginTrackingNodeChanges();
    private void EndTrackingNodeChanges();
    private void OnNodeHasChildrenChanged(object sender, EventArgs e);
    private void OnNodeCollapsableChanged(object sender, EventArgs e);
    private void OnNodeExpandableChanged(object sender, EventArgs e);
    private void OnNodeIsSelectedChanged(object sender, EventArgs e);
    private void OnNodeIsExpandedChanged(object sender, EventArgs e);
    private void OnNodeIsExpandedChanging(object sender, EventArgs e);
    private void OnLevelPropertyChanged(DependencyPropertyChangedEventArgs args);
    public int get_Level();
    protected void set_Level(int value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    private void OnIsExpandedChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    private void OnIsSelectedPropertyChanged(DependencyPropertyChangedEventArgs args);
    private void OnHasChildrenPropertyChanged(DependencyPropertyChangedEventArgs args);
    public bool get_HasChildren();
    protected void set_HasChildren(bool value);
    internal TreeGridColumnDefinitionCollection get_ColumnDefinitions();
    internal void set_ColumnDefinitions(TreeGridColumnDefinitionCollection value);
    private void OnIsActivePropertyChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsActive();
    protected void set_IsActive(bool value);
    internal void UpdateIsActive();
    public int get_AlternationIndex();
    internal void set_AlternationIndex(int value);
    internal TreeGridView get_TreeGridView();
    private bool ExecuteOrQueue(Action action);
    private void Execute(Action action);
    private T Execute(Func`1<T> action);
    private bool TryExecute(Action action);
    private void OnRowLoaded(object sender, RoutedEventArgs args);
    private void OnRowUnloaded(object sender, RoutedEventArgs args);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs args);
    public bool get_IsDragOver();
    public void set_IsDragOver(bool value);
    protected virtual void OnDragOver(DragEventArgs args);
    protected virtual void OnDragEnter(DragEventArgs args);
    protected virtual void OnDrop(DragEventArgs args);
    private string GetRowDataTextPresentation();
    private bool GetAllowDrag();
    private void PerformDragDrop();
    public virtual void OnApplyTemplate();
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal void UpdateStyleValue();
    internal double GetCellDesiredWidth(int columnIndex);
    public bool FocusCell(int columnIndex);
    [CompilerGeneratedAttribute]
private void <SetNodeProperties>b__3();
    [CompilerGeneratedAttribute]
private bool <OnNodeHasChildrenChanged>b__4();
    [CompilerGeneratedAttribute]
private bool <OnNodeCollapsableChanged>b__5();
    [CompilerGeneratedAttribute]
private bool <OnNodeExpandableChanged>b__6();
    [CompilerGeneratedAttribute]
private bool <OnNodeIsSelectedChanged>b__7();
    [CompilerGeneratedAttribute]
private bool <OnNodeIsExpandedChanged>b__8();
    [CompilerGeneratedAttribute]
private static void <OnNodeIsExpandedChanging>b__9();
    [CompilerGeneratedAttribute]
private void <UpdateIsActive>b__1d();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1e(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1f(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__20(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__21(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__22(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnRowLoaded>b__28();
    [CompilerGeneratedAttribute]
private void <OnRowUnloaded>b__29();
    [CompilerGeneratedAttribute]
private void <OnMouseDown>b__2a();
    [CompilerGeneratedAttribute]
private void <OnDragLeave>b__2e();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod32(DragEventArgs );
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod36(DragEventArgs );
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod3a(DragEventArgs );
    [CompilerGeneratedAttribute]
private bool <GetAllowDrag>b__3b();
    [CompilerGeneratedAttribute]
private void <PerformDragDrop>b__3c();
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__3d();
    [CompilerGeneratedAttribute]
private void <UpdateStyleValue>b__3f();
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridRowCollection : object {
    private TreeGridViewport myViewport;
    private VisualCollection myVisualCollection;
    private Dictionary`2<TreeGridNode, TreeGridRow> myActiveRows;
    private Dictionary`2<TreeGridNode, TreeGridRow> myRecyclingRows;
    private Dictionary`2<TreeGridNode, TreeGridRow> myRecycledRows;
    public int Count { get; }
    public TreeGridRowCollection(TreeGridViewport parent);
    public int get_Count();
    public TreeGridRow GetVisualChild(int index);
    public TreeGridRow GetOrCreate(TreeGridNode node);
    private void InvalidateMeasureArrangeRecursive(DependencyObject dependencyObject);
    public void Recycle(TreeGridNode node);
    public void CleanUp();
    private void DiconnectRecycled();
    private bool CanRevive(TreeGridRow row);
    private bool IsFocused(TreeGridRow row);
    public bool IsRecycledOrNotExist(TreeGridNode node);
    internal void UpdateIsActive();
    internal void UpdateRowStyles();
    public TreeGridRow[] GetNonActiveRows();
    public TreeGridRow[] GetActiveRows();
}
[TemplatePartAttribute]
public class JetBrains.UI.Controls.TreeGrid.TreeGridView : Control {
    public static int DefaultMaxTraverseDepth;
    private ValueChangedEventHandler`1<object> FocusedItemChanged;
    private EventHandler CellValidating;
    private EventHandler CellEditing;
    private EventHandler CellEditied;
    private EventHandler`1<EventArgs`1<object>> Expanded;
    private EventHandler`1<EventArgs`1<object>> Collapsed;
    private IAddChild myViewportPlaceholder;
    private TreeGridViewport myViewport;
    private TreeGridItemsSource myItemsSource;
    private TreeGridProjection myProjection;
    private PendedActionQueue myActionQueue;
    private EventHandler`1<ValueChangedEventArgs`1<bool>> IsBusyChanged;
    public static DependencyProperty IsBusyProperty;
    public static DependencyProperty AllowBusyIndicationProperty;
    public static DependencyProperty AllowTraversingProperty;
    public static DependencyProperty MaxTraverseDepthProperty;
    public static DependencyProperty SelectionModeProperty;
    public static DependencyProperty FocusedItemProperty;
    public static DependencyProperty FilteringModeProperty;
    public static DependencyProperty FilterProperty;
    public static DependencyProperty SortDescriptionProperty;
    public static DependencyProperty SortDirectionProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty ColumnDefinitionsProperty;
    private IDisposable myTracker;
    private DependencyPropertyChangedEventHandler SortColumnChanged;
    public static DependencyProperty SortColumnProperty;
    public static DependencyProperty IsAsynchroniousProperty;
    public static DependencyProperty ChildrenProviderProperty;
    public static DependencyProperty ParentProviderProperty;
    public static DependencyProperty AreRootsFixedProperty;
    public static DependencyProperty CollapsabilityProviderProperty;
    public static DependencyProperty ExpansionProviderProperty;
    public static DependencyProperty FocusabilityProviderProperty;
    public static DependencyProperty SelectabilityProviderProperty;
    public static DependencyProperty AllowColumnRearrangeProperty;
    public static DependencyProperty AllowRowDragProperty;
    public static DependencyProperty AllowRowDropProperty;
    public static DependencyProperty AllowColumnResizeProperty;
    public static DependencyProperty AllowColumnResizeOverflowProperty;
    public static DependencyProperty MaxExpandLevelsProperty;
    public static DependencyProperty AllowColumnSortingProperty;
    public static DependencyProperty CellStyleProperty;
    public static DependencyProperty CellStyleSelectorProperty;
    public static DependencyProperty ValidationErrorTemplateProperty;
    public static DependencyProperty CellTemplateProperty;
    public static DependencyProperty CellTemplateSelectorProperty;
    public static DependencyProperty RowStyleProperty;
    public static DependencyProperty RowStyleSelectorProperty;
    public static DependencyProperty IntercolumnSpacingProperty;
    public static DependencyProperty AlternationCountProperty;
    public static DependencyProperty InvalidationRequestedProperty;
    private bool myItemsSourceUpdateProperitiesPending;
    private bool myItemsSourceInvalidationPending;
    private bool myIsPendingUpdateScheduled;
    private bool myPendingUpdateInProgress;
    private TreeGridNode myPreviousSelected;
    private DependencyPropertyChangedEventHandler SelectedItemChanged;
    public static DependencyProperty SelectedItemProperty;
    private bool myPreventReentranceInOnSelectedItemChanged;
    public static DependencyProperty ShowColumnHeadersProperty;
    private DragEventHandler RowDrop;
    private DragEventHandler RowDragBegin;
    private DragEventHandler RowDragEnter;
    private DragEventHandler RowDragOver;
    private DragEventHandler RowDragLeave;
    private Nullable`1<int> myRequiredFocusedCellIndex;
    [CompilerGeneratedAttribute]
private Signal`1<bool> <Idle>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeGridCell <EditingCell>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate36;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3e;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3f;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate40;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate41;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate42;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate44;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate47;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4a;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4d;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridColumnDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate65;
    protected IEnumerator LogicalChildren { get; }
    public bool IsBusy { get; public set; }
    public bool AllowBusyIndication { get; public set; }
    public bool AllowTraversing { get; public set; }
    public Signal`1<bool> Idle { get; private set; }
    public IActionInvocator ActionInvocator { get; public set; }
    public Func`1<IDisposable> AccessBrackets { get; public set; }
    internal PendedActionQueue ActionQueue { get; }
    public int MaxTraverseDepth { get; public set; }
    public SelectionMode SelectionMode { get; public set; }
    public object FocusedItem { get; public set; }
    public FilteringMode FilteringMode { get; public set; }
    public IFilterDescriptor Filter { get; public set; }
    public ISortDescription SortDescription { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    [BindableAttribute("True")]
public IEnumerable ItemsSource { get; public set; }
    public TreeGridColumnDefinitionCollection ColumnDefinitions { get; public set; }
    public TreeGridColumnDefinition SortColumn { get; public set; }
    public bool IsAsynchronious { get; public set; }
    public IChildrenProvider ChildrenProvider { get; public set; }
    public IParentProvider ParentProvider { get; public set; }
    public bool AreRootsFixed { get; public set; }
    [ObsoleteAttribute("Use ExpansionProvider instead")]
public Func`2<object, bool> CollapsabilityProvider { get; public set; }
    public IExpansionProvider ExpansionProvider { get; public set; }
    public Func`2<object, bool> FocusabilityProvider { get; public set; }
    public Func`2<object, bool> SelectabilityProvider { get; public set; }
    public bool AllowColumnRearrange { get; public set; }
    public bool AllowRowDrag { get; public set; }
    public bool AllowRowDrop { get; public set; }
    public bool AllowColumnResize { get; public set; }
    public bool AllowColumnResizeOverflow { get; public set; }
    public int MaxLevelsExpansion { get; public set; }
    public bool AllowColumnSorting { get; public set; }
    public Style CellStyle { get; public set; }
    public StyleSelector CellStyleSelector { get; public set; }
    internal TreeGridCell EditingCell { get; internal set; }
    public DataTemplate ValidationErrorTemplate { get; public set; }
    public DataTemplate CellTemplate { get; public set; }
    public DataTemplateSelector CellTemplateSelector { get; public set; }
    public Style RowStyle { get; public set; }
    public StyleSelector RowStyleSelector { get; public set; }
    public double IntercolumnSpacing { get; public set; }
    public int AlternationCount { get; public set; }
    public bool InvalidationRequested { get; public set; }
    private bool IsTabCellNavigationEnabled { get; }
    public SelectedItemCollection SelectedItems { get; }
    private ISelectedItemCollection JetBrains.UI.Controls.TreeGrid.ITreeGridView.SelectedItems { get; }
    public object SelectedItem { get; public set; }
    public bool ShowColumnHeaders { get; public set; }
    private static TreeGridView();
    protected virtual IEnumerator get_LogicalChildren();
    public void add_FocusedItemChanged(ValueChangedEventHandler`1<object> value);
    public void remove_FocusedItemChanged(ValueChangedEventHandler`1<object> value);
    public void add_CellValidating(EventHandler value);
    public void remove_CellValidating(EventHandler value);
    public void add_CellEditing(EventHandler value);
    public void remove_CellEditing(EventHandler value);
    public void add_CellEditied(EventHandler value);
    public void remove_CellEditied(EventHandler value);
    public void add_Expanded(EventHandler`1<EventArgs`1<object>> value);
    public void remove_Expanded(EventHandler`1<EventArgs`1<object>> value);
    public void add_Collapsed(EventHandler`1<EventArgs`1<object>> value);
    public void remove_Collapsed(EventHandler`1<EventArgs`1<object>> value);
    private void RaiseExpanded(object item);
    private void RaiseCollapsed(object item);
    public void add_IsBusyChanged(EventHandler`1<ValueChangedEventArgs`1<bool>> value);
    public void remove_IsBusyChanged(EventHandler`1<ValueChangedEventArgs`1<bool>> value);
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    private void OnIsBusyChanged(DependencyPropertyChangedEventArgs args);
    public bool get_AllowBusyIndication();
    public void set_AllowBusyIndication(bool value);
    public bool get_AllowTraversing();
    public void set_AllowTraversing(bool value);
    [CompilerGeneratedAttribute]
public Signal`1<bool> get_Idle();
    [CompilerGeneratedAttribute]
private void set_Idle(Signal`1<bool> value);
    public IActionInvocator get_ActionInvocator();
    public void set_ActionInvocator(IActionInvocator value);
    public Func`1<IDisposable> get_AccessBrackets();
    public void set_AccessBrackets(Func`1<IDisposable> value);
    internal PendedActionQueue get_ActionQueue();
    public int get_MaxTraverseDepth();
    public void set_MaxTraverseDepth(int value);
    public SelectionMode get_SelectionMode();
    public void set_SelectionMode(SelectionMode value);
    public TreeGridRow GetFocusedRow();
    public sealed virtual object get_FocusedItem();
    public sealed virtual void set_FocusedItem(object value);
    private void OnFocusedItemChanged(DependencyPropertyChangedEventArgs args);
    public FilteringMode get_FilteringMode();
    public void set_FilteringMode(FilteringMode value);
    private void OnFilteringModeChanged(DependencyPropertyChangedEventArgs args);
    public IFilterDescriptor get_Filter();
    public void set_Filter(IFilterDescriptor value);
    private void OnFilterChanged(DependencyPropertyChangedEventArgs args);
    public ISortDescription get_SortDescription();
    public void set_SortDescription(ISortDescription value);
    private void OnSortDescriptionChanged(DependencyPropertyChangedEventArgs args);
    public ListSortDirection get_SortDirection();
    public void set_SortDirection(ListSortDirection value);
    private void OnSortDirectionChanged(DependencyPropertyChangedEventArgs args);
    private sealed virtual override IEnumerable JetBrains.UI.Controls.TreeGrid.ITreeGridView.GetCurrentRootItems();
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    private void OnItemsSourceChanged(DependencyPropertyChangedEventArgs args);
    private ISortDescription GetSortDescription();
    private void OnSelectedItemsChanged(object item);
    public TreeGridColumnDefinitionCollection get_ColumnDefinitions();
    public void set_ColumnDefinitions(TreeGridColumnDefinitionCollection value);
    private void OnColumnDefinitionsChanged(DependencyPropertyChangedEventArgs args);
    private void UpdateColumns(TreeGridColumnDefinitionCollection columns);
    private void SetColumnDefinitions(TreeGridColumnDefinitionCollection columnDefinitions);
    public void add_SortColumnChanged(DependencyPropertyChangedEventHandler value);
    public void remove_SortColumnChanged(DependencyPropertyChangedEventHandler value);
    public TreeGridColumnDefinition get_SortColumn();
    public void set_SortColumn(TreeGridColumnDefinition value);
    private void OnSortColumnChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsAsynchronious();
    public void set_IsAsynchronious(bool value);
    private void OnIsAsynchroniousChanged(DependencyPropertyChangedEventArgs args);
    public IChildrenProvider get_ChildrenProvider();
    public void set_ChildrenProvider(IChildrenProvider value);
    private void OnChildrenProviderChanged(DependencyPropertyChangedEventArgs args);
    public IParentProvider get_ParentProvider();
    public void set_ParentProvider(IParentProvider value);
    private void OnParentProviderChanged(DependencyPropertyChangedEventArgs args);
    public bool get_AreRootsFixed();
    public void set_AreRootsFixed(bool value);
    public Func`2<object, bool> get_CollapsabilityProvider();
    public void set_CollapsabilityProvider(Func`2<object, bool> value);
    private void OnCollapsabilityProviderPropertyChanged(DependencyPropertyChangedEventArgs args);
    public IExpansionProvider get_ExpansionProvider();
    public void set_ExpansionProvider(IExpansionProvider value);
    private void OnExpansionProviderPropertyChanged(DependencyPropertyChangedEventArgs args);
    public Func`2<object, bool> get_FocusabilityProvider();
    public void set_FocusabilityProvider(Func`2<object, bool> value);
    private void OnFocusabilityProviderPropertyChanged(DependencyPropertyChangedEventArgs args);
    private bool IsFocusable(object dataItem);
    public Func`2<object, bool> get_SelectabilityProvider();
    public void set_SelectabilityProvider(Func`2<object, bool> value);
    private void OnSelectabilityProviderPropertyChanged(DependencyPropertyChangedEventArgs args);
    private bool IsSelectable(object dataItem);
    public bool get_AllowColumnRearrange();
    public void set_AllowColumnRearrange(bool value);
    public bool get_AllowRowDrag();
    public void set_AllowRowDrag(bool value);
    public bool get_AllowRowDrop();
    public void set_AllowRowDrop(bool value);
    public bool get_AllowColumnResize();
    public void set_AllowColumnResize(bool value);
    private void OnAllowColumnResizeChanged(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public bool get_AllowColumnResizeOverflow();
    public void set_AllowColumnResizeOverflow(bool value);
    private void OnAllowColumnResizeOverflowChanged(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public int get_MaxLevelsExpansion();
    public void set_MaxLevelsExpansion(int value);
    public bool get_AllowColumnSorting();
    public void set_AllowColumnSorting(bool value);
    private void OnAllowColumnSortingChanged(DependencyPropertyChangedEventArgs args);
    public Style get_CellStyle();
    public void set_CellStyle(Style value);
    public StyleSelector get_CellStyleSelector();
    public void set_CellStyleSelector(StyleSelector value);
    [CompilerGeneratedAttribute]
internal TreeGridCell get_EditingCell();
    [CompilerGeneratedAttribute]
internal void set_EditingCell(TreeGridCell value);
    public DataTemplate get_ValidationErrorTemplate();
    public void set_ValidationErrorTemplate(DataTemplate value);
    public DataTemplate get_CellTemplate();
    public void set_CellTemplate(DataTemplate value);
    public DataTemplateSelector get_CellTemplateSelector();
    public void set_CellTemplateSelector(DataTemplateSelector value);
    public Style get_RowStyle();
    public void set_RowStyle(Style value);
    private void OnRowStyleChanged(DependencyPropertyChangedEventArgs args);
    public StyleSelector get_RowStyleSelector();
    public void set_RowStyleSelector(StyleSelector value);
    private void OnRowStyleSelectorChanged(DependencyPropertyChangedEventArgs args);
    public double get_IntercolumnSpacing();
    public void set_IntercolumnSpacing(double value);
    private void OnAlternationCountPropertyChanged(DependencyPropertyChangedEventArgs args);
    public int get_AlternationCount();
    public void set_AlternationCount(int value);
    public bool get_InvalidationRequested();
    public void set_InvalidationRequested(bool value);
    private void OnInvalidationRequested(DependencyPropertyChangedEventArgs args);
    public void Schedule(Action action, bool whenIdle);
    private void Dispatch(Action action);
    private void Log(string text, Object[] parameters);
    private void ExecuteOrQueue(Action action);
    private void AssertAccess();
    private void Queue(Action action, DispatcherPriority priority);
    private void Execute(Action action);
    private T Execute(Func`1<T> action);
    private bool TryExecute(Action action);
    private void PerformPendedActions();
    private void OnIsKeyboardFocusWithinChanged(object sender, DependencyPropertyChangedEventArgs args);
    private void OnViewLoaded(object sender, RoutedEventArgs e);
    private void OnViewUnloaded(object sender, RoutedEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    private void InvalidateItemsSource();
    private void ScheduleUpdateItemsSourceProperties();
    private void SchedulePendingUpdate();
    private void OnPerformPendingUpdate();
    private void UpdateItemsSourceProperties();
    private void OnMouseDown(object sender, MouseButtonEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseButtonEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual bool AdditinonalHandleOnKeyDown(Key key);
    private bool get_IsTabCellNavigationEnabled();
    private bool OnFocusNextCell();
    private bool TryFocusNextCell(TreeGridRow row, int index);
    private bool OnFocusPreviousCell();
    private bool TryFocusPreviousCell(TreeGridRow row, int index);
    private bool FocusPreviousCell(TreeGridRow row, int index);
    private void Select(TreeGridNode node);
    private void Select(TreeGridNode node, bool shift, bool ctrl);
    private void ClearSelection();
    private bool FocusNextRow();
    private bool FocusPreviousRow();
    internal bool TryFocusNear(int index, bool preferAbove, bool ensureVisible, bool transferKeyboardFocus);
    private int FindFocusable(int index, bool preferAbove);
    private void FocusPreviousLevel();
    private TreeGridCell GetKeyboardFocusedCell();
    public virtual void OnApplyTemplate();
    public SelectedItemCollection get_SelectedItems();
    private sealed virtual override ISelectedItemCollection JetBrains.UI.Controls.TreeGrid.ITreeGridView.get_SelectedItems();
    public void add_SelectedItemChanged(DependencyPropertyChangedEventHandler value);
    public void remove_SelectedItemChanged(DependencyPropertyChangedEventHandler value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    private void OnSelectedItemChanged(DependencyPropertyChangedEventArgs e);
    public bool get_ShowColumnHeaders();
    public void set_ShowColumnHeaders(bool value);
    public void SelectAll();
    public sealed virtual void Expand(object data);
    public void Collapse(object data);
    public void ExpandPathTo(ObjectIndexPath`1<T> path);
    public void ExpandPath(ObjectPath`1<T> path);
    public void ExpandPath(ObjectIndexPath`1<T> path);
    public void ExpandPathTo(ObjectPath`1<T> path);
    private void ExpandPathCore(ObjectIndexPath`1<T> path, bool expandLastNode);
    private void ExpandPathCore(ObjectPath`1<T> path, bool expandLastNode);
    public sealed virtual bool ExpandTo(object data);
    public void ExpandAll();
    public void ExpandAll(int level);
    public void ExpandAll(object item, int levels, bool allowTraverse);
    public void ExpandAll(object item, bool allowTraverse);
    public void CollapseAll();
    public IList`1<T> GetExpandedItems(TouchMode touchMode);
    public IList`1<T> GetProjectedItems(TouchMode touchMode);
    [CanBeNullAttribute]
public ObjectPath`1<T> FindObjectPathTo(T data, bool allowTraverse, int maxTraverseDepth);
    [CanBeNullAttribute]
public ObjectPath`1<T> FindObjectPathTo(T data, bool allowTraverse);
    [CanBeNullAttribute]
public ObjectIndexPath`1<T> FindObjectIndexPathTo(T data, bool allowTraverse, int maxTraverseDepth);
    [CanBeNullAttribute]
public ObjectIndexPath`1<T> FindObjectIndexPathTo(T data, bool allowTraverse);
    public TreeGridRow[] GetVisibleRows();
    public TreeGridRow[] GetRecycledRows();
    public void add_RowDrop(DragEventHandler value);
    public void remove_RowDrop(DragEventHandler value);
    public void add_RowDragBegin(DragEventHandler value);
    public void remove_RowDragBegin(DragEventHandler value);
    public void add_RowDragEnter(DragEventHandler value);
    public void remove_RowDragEnter(DragEventHandler value);
    public void add_RowDragOver(DragEventHandler value);
    public void remove_RowDragOver(DragEventHandler value);
    public void add_RowDragLeave(DragEventHandler value);
    public void remove_RowDragLeave(DragEventHandler value);
    internal void RaiseRowDrop(TreeGridRow target, DragEventArgs args);
    internal void RaiseRowDragBegin(TreeGridRow target, DragEventArgs args);
    internal void RaiseRowDragEnter(TreeGridRow target, DragEventArgs args);
    internal void RaiseRowDragOver(TreeGridRow target, DragEventArgs args);
    internal void RaiseRowDragLeave(TreeGridRow target, DragEventArgs args);
    internal void TransferKeyDown(KeyEventArgs args);
    public bool IsInViewport(object item);
    [CanBeNullAttribute]
public TreeGridRow GetRowIfVisible(object item);
    [CanBeNullAttribute]
public TreeGridRow HitRow(Point coordinates);
    private sealed virtual override UIElement JetBrains.UI.Controls.TreeGrid.ITreeGridView.HitRow(Point coordinates);
    [CanBeNullAttribute]
public TreeGridCell HitCell(Point coordinates);
    [CanBeNullAttribute]
public object HitItem(Point coordinates);
    [CanBeNullAttribute]
public sealed virtual DependencyObject HitTest(Point pt);
    public bool Focus(object item, bool bringIntoView, bool transferKeyboardFocus, bool allowTraverse);
    [CanBeNullAttribute]
internal TreeGridNode GetNodeIfProjected(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void BringIntoView(object item);
    public bool IsFiltered(object item);
    private sealed virtual override bool JetBrains.UI.Controls.TreeGrid.ITreeGridView.Exists(object data);
    internal TreeGridProjection GetProjection();
    public Nullable`1<int> GetRequiredFocusedCellIndex();
    public void SetRequiredFocusedCellIndex(Nullable`1<int> index);
    public void UpdateExpansion();
    public bool IsExpanded(object item);
    internal static void LogDiagnosticMessage(Exception exception);
    internal static void LogDiagnosticMessage(string message, Object[] items);
    public bool IsInProjection(object data);
    [CompilerGeneratedAttribute]
private TreeGridRow <GetFocusedRow>b__5();
    [CompilerGeneratedAttribute]
private void <OnSelectedItemsChanged>b__c();
    [CompilerGeneratedAttribute]
private void <OnAllowColumnResizeChanged>b__16();
    [CompilerGeneratedAttribute]
private void <OnAllowColumnResizeOverflowChanged>b__17();
    [CompilerGeneratedAttribute]
private void <OnRowStyleChanged>b__18();
    [CompilerGeneratedAttribute]
private void <OnRowStyleSelectorChanged>b__19();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1a(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1b(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1c(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1d(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1e(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1f(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__20(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__21(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__22(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__23(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__24(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__25(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__26(object x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__27(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__28(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__29(object x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2a(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__2b(object x);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2c(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2d(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2e(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2f(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__30(DependencyObject o, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__31(DependencyObject o, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__32(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__33(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__34(DependencyObject s, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__50(TreeGridNode node);
    [CompilerGeneratedAttribute]
private void <.ctor>b__51(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <OnIsKeyboardFocusWithinChanged>b__57();
    [CompilerGeneratedAttribute]
private void <OnGotKeyboardFocus>b__58();
    [CompilerGeneratedAttribute]
private void <OnPerformPendingUpdate>b__59();
    [CompilerGeneratedAttribute]
private void <OnPerformPendingUpdate>b__5a();
    [CompilerGeneratedAttribute]
private void <UpdateItemsSourceProperties>b__5c();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod63(KeyEventArgs );
    [CompilerGeneratedAttribute]
private static bool <get_IsTabCellNavigationEnabled>b__64(TreeGridColumnDefinition x);
    [CompilerGeneratedAttribute]
private bool <OnFocusNextCell>b__66();
    [CompilerGeneratedAttribute]
private bool <OnFocusPreviousCell>b__67();
    [CompilerGeneratedAttribute]
private void <ClearSelection>b__6b();
    [CompilerGeneratedAttribute]
private bool <FocusNextRow>b__6c();
    [CompilerGeneratedAttribute]
private bool <FocusPreviousRow>b__6d();
    [CompilerGeneratedAttribute]
private void <FocusPreviousLevel>b__6e();
    [CompilerGeneratedAttribute]
private TreeGridCell <GetKeyboardFocusedCell>b__6f();
    [CompilerGeneratedAttribute]
private void <SelectAll>b__73();
    [CompilerGeneratedAttribute]
private void <ExpandAll>b__83();
    [CompilerGeneratedAttribute]
private void <CollapseAll>b__8d();
    [CompilerGeneratedAttribute]
private TreeGridRow[] <GetVisibleRows>b__a6();
    [CompilerGeneratedAttribute]
private TreeGridRow[] <GetRecycledRows>b__a7();
}
public class JetBrains.UI.Controls.TreeGrid.TreeGridViewGenericTheme : object {
    [CompilerGeneratedAttribute]
private static SolidColorBrush <RowBorderSelectedInactiveBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <RowBorderSelectedActiveBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <RowBackgroundSelectedInactiveBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <RowBackgroundSelectedActiveBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <RowBorderFocusedActiveBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <RowBackgroundHoverBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <RowBorderHoverBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static LinearGradientBrush <ColumnSeparatorBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <ColumnHoverBorder>k__BackingField;
    [CompilerGeneratedAttribute]
private static SolidColorBrush <ColumnHoverBackground>k__BackingField;
    public static SolidColorBrush RowBorderSelectedInactiveBrush { get; private set; }
    public static SolidColorBrush RowBorderSelectedActiveBrush { get; private set; }
    public static SolidColorBrush RowBackgroundSelectedInactiveBrush { get; private set; }
    public static SolidColorBrush RowBackgroundSelectedActiveBrush { get; private set; }
    public static SolidColorBrush RowBorderFocusedActiveBrush { get; private set; }
    public static SolidColorBrush RowBackgroundHoverBrush { get; private set; }
    public static SolidColorBrush RowBorderHoverBrush { get; private set; }
    public static LinearGradientBrush ColumnSeparatorBrush { get; private set; }
    public static SolidColorBrush ColumnHoverBorder { get; private set; }
    public static SolidColorBrush ColumnHoverBackground { get; private set; }
    private static TreeGridViewGenericTheme();
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_RowBorderSelectedInactiveBrush();
    [CompilerGeneratedAttribute]
private static void set_RowBorderSelectedInactiveBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_RowBorderSelectedActiveBrush();
    [CompilerGeneratedAttribute]
private static void set_RowBorderSelectedActiveBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_RowBackgroundSelectedInactiveBrush();
    [CompilerGeneratedAttribute]
private static void set_RowBackgroundSelectedInactiveBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_RowBackgroundSelectedActiveBrush();
    [CompilerGeneratedAttribute]
private static void set_RowBackgroundSelectedActiveBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_RowBorderFocusedActiveBrush();
    [CompilerGeneratedAttribute]
private static void set_RowBorderFocusedActiveBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_RowBackgroundHoverBrush();
    [CompilerGeneratedAttribute]
private static void set_RowBackgroundHoverBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_RowBorderHoverBrush();
    [CompilerGeneratedAttribute]
private static void set_RowBorderHoverBrush(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static LinearGradientBrush get_ColumnSeparatorBrush();
    [CompilerGeneratedAttribute]
private static void set_ColumnSeparatorBrush(LinearGradientBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_ColumnHoverBorder();
    [CompilerGeneratedAttribute]
private static void set_ColumnHoverBorder(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public static SolidColorBrush get_ColumnHoverBackground();
    [CompilerGeneratedAttribute]
private static void set_ColumnHoverBackground(SolidColorBrush value);
    private static void Update();
    private static Color Modify(HSB accent, double hueFactor, double saturationFactor, double brightnessFactor);
}
public static class JetBrains.UI.Controls.TreeGrid.TreeGridViewHelper : object {
    private static string Dump(TreeGridView view, bool addLevel, bool addSpacesAndBrackes);
    public static string Dump(TreeGridView view);
    public static string DumpFormatted(TreeGridView view);
    private static void PumpAll(TreeGridNodeChildren roots);
}
internal class JetBrains.UI.Controls.TreeGrid.TreeGridViewport : FrameworkElement {
    private TreeGridProjection myProjection;
    private TreeGridColumnsPanel myColumnsContainer;
    private List`1<TreeGridRow> myCurrentVisibleTreeGridItems;
    private int myCurrentVisibleStartIndex;
    private bool myCurrentVisibleItemsInvalidated;
    private TreeGridRowCollection myChildren;
    private TreeGridView myTreeGridView;
    private Stopwatch myScheduleStopwatch;
    private TimeSpan myScheduleTimeout;
    private bool myUpdateRequestExecuting;
    private int myAlternationCount;
    private TreeGridNode myFocusedNode;
    private EventHandler FocusedNodeChanged;
    private List`1<TreeGridRow> myScrollInfoLastItems;
    private bool myColumnsShrinkOnce;
    private double myLatestAvailableWidth;
    private bool myMeasureOverrideRescheduled;
    private bool myArrangeOverrideRescheduled;
    private bool myArrangeRequired;
    private bool myScrollInfoCanHorizontallyScroll;
    private bool myScrollInfoCanVerticallyScroll;
    private double myScrollInfoHorizontalOffset;
    private int myScrollInfoVisibleStartIndex;
    private double myScrollInfoVerticalOffset;
    private double myScrollInfoHorizontalExtent;
    private double myScrollInfoViewportWidth;
    private double myScrollInfoViewportHeight;
    private int myScrollInfoLastItemsCount;
    private int myScrollInfoScrolledItemsCount;
    private bool myScrollInfoLastItemsInvalidated;
    private TreeGridNode myScheduledBringIntoViewNode;
    [CompilerGeneratedAttribute]
private ScrollViewer <ScrollOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridRow, TreeGridNode> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridRow, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<TreeGridRow, TreeGridNode> CS$<>9__CachedAnonymousMethodDelegateb;
    internal TreeGridProjection Projection { get; internal set; }
    internal TreeGridColumnDefinitionCollection ColumnDefinitions { get; internal set; }
    internal bool AllowColumnResize { get; internal set; }
    internal bool AllowColumnResizeOverflow { get; internal set; }
    internal TreeGridView TreeGridView { get; }
    protected int VisualChildrenCount { get; }
    public TreeGridNode FocusedNode { get; }
    public ScrollViewer ScrollOwner { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    public TreeGridViewport(TreeGridView treeGridView);
    private void AssertAccess();
    private bool ExecuteOrQueue(Action action, DispatcherPriority priority);
    private void Queue(Action action, DispatcherPriority priority);
    private bool TryExecute(Action action);
    private void Execute(Action action);
    private T Execute(Func`1<T> action);
    internal TreeGridProjection get_Projection();
    internal void set_Projection(TreeGridProjection value);
    private void AttachProjection();
    private void OnProjectionNodeRemoved(int index, TreeGridNode node);
    private bool IsFocusable(TreeGridNode node);
    private void DetachProjection();
    private void OnProjectionItemsChanged(object sender, EventArgs eventArgs);
    private void EnsureFocusedOrSelectedIntoView();
    private int FindFocusedNodeIndex();
    private void ScheduleScrollBarsUpdate(string reason, ViewportUpdateSchedulePriority priority);
    private void ScheduleVisibleItemsUpdate(string reason, ViewportUpdateSchedulePriority priority);
    private void ScheduleBringIntoView(TreeGridNode node, ViewportUpdateSchedulePriority priority);
    private bool IsBringIntoViewScheduled();
    private void Trace(string format, Object[] parameters);
    private void OnRendering(object sender, EventArgs args);
    private void ScheduleViewportUpdate(string reason, ViewportUpdateSchedulePriority priority);
    private void CancelScheduledUpdates();
    private DispatcherPriority ToDispatcherPriority(ViewportUpdateSchedulePriority priority);
    internal TreeGridColumnDefinitionCollection get_ColumnDefinitions();
    internal void set_ColumnDefinitions(TreeGridColumnDefinitionCollection value);
    internal bool get_AllowColumnResize();
    internal void set_AllowColumnResize(bool value);
    internal bool get_AllowColumnResizeOverflow();
    internal void set_AllowColumnResizeOverflow(bool value);
    internal TreeGridView get_TreeGridView();
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    public TreeGridNode get_FocusedNode();
    public void SetFocusedNode(TreeGridNode node);
    public void add_FocusedNodeChanged(EventHandler value);
    public void remove_FocusedNodeChanged(EventHandler value);
    private void RaiseFocusedNodeChanged();
    protected virtual void OnDragOver(DragEventArgs e);
    private void OnUnload(object s, RoutedEventArgs e);
    private void OnLoad(object s, RoutedEventArgs e);
    private void OnViewportUpdateRequest(object sender, EventArgs eventArgs);
    private void GoOffscreen(TreeGridRow row);
    public void SetAlternationCount(int newCount);
    private void UpdateVisibleItems();
    private bool IsDesiredColumnWidthRequired(int columnIndex);
    private void UpdateScrollInfoLastItems();
    protected virtual Size MeasureOverride(Size availableSize);
    private void MeasureRow(TreeGridRow treeGridRow);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void VerifyScrollData(Size viewport, double extentWidth);
    private void ChangeVerticalOffset(int lines);
    private void SetVerticalOffset(int index);
    public sealed virtual void LineDown();
    public sealed virtual void LineUp();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageDown();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageUp();
    public void PageUp(bool moveFocus);
    public void PageDown(bool moveFocus);
    private int CalculatePageUpIndex(int from);
    private int CalculatePageDownIndex(int from);
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    [CompilerGeneratedAttribute]
public sealed virtual ScrollViewer get_ScrollOwner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_ViewportWidth();
    private sealed virtual override Rect System.Windows.Controls.Primitives.IScrollInfo.MakeVisible(Visual visual, Rect rectangle);
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.SetHorizontalOffset(double offset);
    private void SetHorizontalOffset(double offset);
    private double IndexToFloatOffset(int index);
    private int FloatOffsetToIndex(double offset);
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.SetVerticalOffset(double offset);
    public void BringIntoView(object item);
    internal void BringIntoView(int index);
    private Size GetRowSize(TreeGridNode node);
    internal bool Focus(int index, bool ensureVisible, bool transferKeyboardFocus);
    private bool IsFocusCapturedByWin32();
    public static IntPtr SetWin32Focus(IntPtr hWnd);
    public static IntPtr GetWin32Focus();
    public bool HasItem(object item);
    [CanBeNullAttribute]
public TreeGridRow GetRowIfVisible(object item);
    internal void UpdateIsActive();
    internal void UpdateRowStyles();
    public TreeGridRow[] GetScreenedRows();
    public TreeGridRow[] GetRecycledRows();
    public TreeGridRow GetFocusedRow();
    public void EnsureFocus();
    [CompilerGeneratedAttribute]
private TreeGridProjection <get_Projection>b__0();
    [CompilerGeneratedAttribute]
private bool <EnsureFocusedOrSelectedIntoView>b__4(TreeGridRow x);
    [CompilerGeneratedAttribute]
private static TreeGridNode <EnsureFocusedOrSelectedIntoView>b__5(TreeGridRow x);
    [CompilerGeneratedAttribute]
private static bool <EnsureFocusedOrSelectedIntoView>b__6(TreeGridRow x);
    [CompilerGeneratedAttribute]
private static TreeGridNode <EnsureFocusedOrSelectedIntoView>b__7(TreeGridRow x);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethodf(DragEventArgs );
    [CompilerGeneratedAttribute]
private void <UpdateVisibleItems>b__13();
    [CompilerGeneratedAttribute]
private void <UpdateScrollInfoLastItems>b__14();
    [CompilerGeneratedAttribute]
private void <UpdateIsActive>b__46();
    [CompilerGeneratedAttribute]
private void <UpdateRowStyles>b__47();
    [CompilerGeneratedAttribute]
private TreeGridRow[] <GetScreenedRows>b__48();
    [CompilerGeneratedAttribute]
private TreeGridRow[] <GetRecycledRows>b__49();
}
public interface JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.IItemsProvider`1 {
    public abstract virtual int FetchCount();
    public abstract virtual IList`1<T> FetchRange(int startIndex, int count);
}
internal class JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.SampleItem : object {
    private int myIndex;
    public static int InstanceCounter;
    public int Index { get; }
    public string Name { get; }
    public SampleItem(int index);
    public int get_Index();
    public string get_Name();
    protected virtual void Finalize();
}
internal class JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.SampleItemProvider : object {
    public sealed virtual int FetchCount();
    public sealed virtual IList`1<SampleItem> FetchRange(int startIndex, int count);
}
public class JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizationSampleViewModel : object {
    private int myItemsCounter;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private IEnumerable <ItemsSource>k__BackingField;
    public IEnumerable ItemsSource { get; private set; }
    public int ItemsCounter { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable get_ItemsSource();
    [CompilerGeneratedAttribute]
private void set_ItemsSource(IEnumerable value);
    public int get_ItemsCounter();
    public void set_ItemsCounter(int value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, EventArgs args);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.UI.Controls.TreeGrid.Virtualization.Tests.VirtualizingCollection`1 : object {
    private IItemsProvider`1<T> myItemsProvider;
    private int myPageSize;
    private long myPageTimeout;
    private int myCount;
    private Dictionary`2<int, IList`1<T>> myPages;
    private Dictionary`2<int, DateTime> myPageTouchTimes;
    public IItemsProvider`1<T> ItemsProvider { get; }
    public int PageSize { get; }
    public long PageTimeout { get; }
    public int Count { get; protected set; }
    public T Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public VirtualizingCollection`1(IItemsProvider`1<T> itemsProvider, int pageSize, int pageTimeout);
    public VirtualizingCollection`1(IItemsProvider`1<T> itemsProvider, int pageSize);
    public VirtualizingCollection`1(IItemsProvider`1<T> itemsProvider);
    public IItemsProvider`1<T> get_ItemsProvider();
    public int get_PageSize();
    public long get_PageTimeout();
    public virtual int get_Count();
    protected virtual void set_Count(int value);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public sealed virtual bool Contains(T item);
    public sealed virtual void Clear();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual bool Remove(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public void CleanUpPages();
    private static void Trace(string message);
    protected virtual void PopulatePage(int pageIndex, IList`1<T> page);
    protected virtual void RequestPage(int pageIndex);
    protected virtual void LoadCount();
    protected virtual void LoadPage(int pageIndex);
    protected IList`1<T> FetchPage(int pageIndex);
    protected int FetchCount();
}
public class JetBrains.UI.Controls.TreeListView.BoolToVisibilityConverter : object {
    public sealed virtual object Convert(object o, Type type, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object o, Type type, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Controls.TreeListView.ContextMenuRequestArgs : object {
    [CompilerGeneratedAttribute]
private Point <LocationRelativeToSender>k__BackingField;
    public Point LocationRelativeToSender { get; private set; }
    public ContextMenuRequestArgs(Point positionRelativeToSender);
    [CompilerGeneratedAttribute]
private void set_LocationRelativeToSender(Point value);
    [CompilerGeneratedAttribute]
public Point get_LocationRelativeToSender();
}
public class JetBrains.UI.Controls.TreeListView.CookieHelper : object {
    private Action myBegin;
    private Action myEnd;
    private int myTransactionCount;
    private IDisposable myInnerDisposable;
    public bool IsTaken { get; }
    public IDisposable Cookie { get; }
    public CookieHelper(Func`1<IDisposable> innerDisposable);
    public CookieHelper(Action begin, Action end);
    public bool get_IsTaken();
    public void Close();
    public void Open();
    public IDisposable get_Cookie();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
internal class JetBrains.UI.Controls.TreeListView.DataBinder : FrameworkElement {
    private static DependencyProperty EvaluatorProperty;
    private static DataBinder();
    public static object Eval(object source, string propertyPath);
    public static T Eval(object source, BindingBase binding);
    public static object Eval(object source, BindingBase binding);
}
public class JetBrains.UI.Controls.TreeListView.Implementation.Default.NodeStateProvider : object {
    private ITreeModelProvider myModel;
    private ITreeModelChangeTracker myChangeTracker;
    private IIterativeTreeModelChangeTracker myIterativeChangeTracker;
    private TreeNode myRoot;
    private OneToSetMap`2<object, TreeNode> myModelToNodeMap;
    private ISortDescriptor mySortDescriptor;
    private IFilterDescriptor myFilterDescriptor;
    private SortOrder mySortOrder;
    internal int SortTimeStamp;
    internal int FilterTimeStamp;
    private Dictionary`2<object, VisibilityState> myModelVisibility;
    private SelectionManager mySelectionManager;
    private bool myIsModelChanging;
    private Action`1<ITreeNodeStateProvider> ItemsInvalidated;
    private CookieHelper myCookieHelper;
    [CompilerGeneratedAttribute]
private TreeNodeStateProviderOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<TreeNode, TreeNode> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`3<TreeNode, int, TreeNode> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`3<TreeNode, object, TreeNode> CS$<>9__CachedAnonymousMethodDelegate10;
    public ITreeModelProvider Model { get; public set; }
    public INodeState Root { get; }
    public TreeNodeStateProviderOptions Options { get; public set; }
    public int VisibleNodeCount { get; }
    public ISelectionManager SelectionManager { get; }
    public IFilterSortController FilterSortController { get; }
    public IDisposable ModificationCookie { get; }
    private bool IsFilterApplied { get; }
    public NodeStateProvider(ITreeModelProvider treeProvider);
    private bool ModelEquals(object arg1, object arg2);
    private void InvalidateVisibilityUp(TreeNode node);
    internal void RemoveFromVisibility(TreeNode treeNode);
    private VisibilityState CalculateVisibility(object root);
    private VisibilityState EnsureVisibiltyCalculated(object sourceObject);
    private VisibilityState GetModelVisibilityState(object root);
    public sealed virtual ITreeModelProvider get_Model();
    public sealed virtual void set_Model(ITreeModelProvider value);
    private void ChangeModel(ITreeModelProvider treeProvider);
    private void SubscribeChanges();
    private void UnsubsribeChanges();
    private void IterativeChangeTrackerOnNotifyReplace(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    private void IterativeChangeTrackerOnNotifyRemove(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    private void IterativeChangeTrackerOnNotifyInsert(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    private void ResetNode(TreeNode node, ResetType resetType);
    internal void EnsureTracked(TreeNode node);
    private void StartTracking(TreeNode node);
    internal void FinishTracking(TreeNode node);
    private void ChangeTrackerOnNotifyReset(ITreeModelChangeTracker tracker, object owner, ResetType resetType);
    private void ApplyChange(object owner, Action`1<TreeNode> action);
    private void OnModelChanging(ITreeModelChangeTracker treeModelChangeTracker);
    private void OnModelChanged(ITreeModelChangeTracker treeModelChangeTracker);
    private void BeginTransaction();
    private void EndTransaction();
    private void RefreshTree();
    public sealed virtual INodeState get_Root();
    [CompilerGeneratedAttribute]
public sealed virtual TreeNodeStateProviderOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Options(TreeNodeStateProviderOptions value);
    public sealed virtual void SetIsExpanded(INodeState nodeState, bool state);
    public sealed virtual void ExpandAll(INodeState node, Predicate`1<INodeState> expandDescendants);
    public sealed virtual void CollapseAll(INodeState node);
    private static TreeNode AsTreeNode(INodeState nodeState);
    public sealed virtual IEnumerable`1<INodeState> FetchRange(int offset, int count);
    public sealed virtual INodeState ByIndexPath(IEnumerable`1<int> indexPath);
    public sealed virtual INodeState ByObjectPath(IEnumerable`1<object> objectPath);
    public sealed virtual int get_VisibleNodeCount();
    public sealed virtual int TraverseIndex(INodeState node);
    public sealed virtual void add_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    public sealed virtual void remove_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    public void InvokeItemsInvalidated();
    public sealed virtual ISelectionManager get_SelectionManager();
    public sealed virtual IFilterSortController get_FilterSortController();
    public sealed virtual IDisposable get_ModificationCookie();
    public sealed virtual bool SupportsSort();
    public sealed virtual void ApplySort(ISortDescriptor sortDescriptor, SortOrder sortOrder);
    private void ApplySortPrivate(ISortDescriptor sortDescriptor, SortOrder sortOrder);
    public sealed virtual void RemoveSort();
    public sealed virtual bool SupportsFilter();
    private static int CompareByIndex(TreeNode arg1, TreeNode arg2);
    internal IComparer`1<TreeNode> GetChildrenSort(TreeNode parent);
    internal bool HasVisibleChildren(TreeNode treeNode);
    internal bool CanHaveChildren(TreeNode treeNode);
    internal IList GetSourceList(TreeNode treeNode);
    public sealed virtual void ApplyFilter(IFilterDescriptor filterDescriptor);
    private void ApplyFilterPrivate(IFilterDescriptor filterDescriptor);
    private bool get_IsFilterApplied();
    public sealed virtual void RemoveFilter();
    private static DelegateComparer`1<T> CreateComparer(Comparison`1<T> comparer);
    internal void RemoveFromSelected(TreeNode treeNode);
    internal bool IsModelVisible(object sourceObject);
    [CompilerGeneratedAttribute]
private static TreeNode <InvalidateVisibilityUp>b__0(TreeNode treeNode);
    [CompilerGeneratedAttribute]
private int <CalculateVisibility>b__2(object o);
    [CompilerGeneratedAttribute]
private void <IterativeChangeTrackerOnNotifyReplace>b__4(TreeNode node);
    [CompilerGeneratedAttribute]
private void <IterativeChangeTrackerOnNotifyRemove>b__5(TreeNode node);
    [CompilerGeneratedAttribute]
private void <IterativeChangeTrackerOnNotifyInsert>b__6(TreeNode node);
    [CompilerGeneratedAttribute]
private static TreeNode <ByIndexPath>b__d(TreeNode treeNode, int index);
    [CompilerGeneratedAttribute]
private static TreeNode <ByObjectPath>b__f(TreeNode treeNode, object sourceObject);
    [CompilerGeneratedAttribute]
private bool <ApplyFilterPrivate>b__15(INodeState node);
}
internal class JetBrains.UI.Controls.TreeListView.Implementation.Default.SelectionManager : object {
    private CookieHelper myCookieHelper;
    private HashSet`1<INodeState> mySelectedNodes;
    [NotNullAttribute]
private Func`2<INodeState, bool> myFilter;
    private SelectionChangedDelegate SelectionChangeBegin;
    private SelectionChangedDelegate SelectionChangeEnd;
    [CompilerGeneratedAttribute]
private static SelectionChangedDelegate CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static SelectionChangedDelegate CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, INodeState> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, INodeState> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    public IEnumerable`1<INodeState> SelectedNodes { get; }
    public CookieHelper Cookie { get; }
    public sealed virtual void SetSelection(INodeState start, INodeState finish, SelectionOperation operation);
    private static void Normalize(INodeState& start, INodeState& finish);
    private Action`1<IEnumerable`1<INodeState>> GetOperation(SelectionOperation operation);
    public sealed virtual void Clear();
    public sealed virtual bool IsSelected(INodeState node);
    public sealed virtual IEnumerable`1<INodeState> get_SelectedNodes();
    public CookieHelper get_Cookie();
    private void BeginTransanction();
    private void EndTransanction();
    public sealed virtual void add_SelectionChangeBegin(SelectionChangedDelegate value);
    public sealed virtual void remove_SelectionChangeBegin(SelectionChangedDelegate value);
    public sealed virtual void add_SelectionChangeEnd(SelectionChangedDelegate value);
    public sealed virtual void remove_SelectionChangeEnd(SelectionChangedDelegate value);
    internal void RemoveNode(TreeNode treeNode);
    public void ApplyFilter(Func`2<INodeState, bool> filter);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(ISelectionManager param0);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(ISelectionManager param0);
    [CompilerGeneratedAttribute]
private static INodeState <SetSelection>b__4(INodeState node);
    [CompilerGeneratedAttribute]
private static bool <SetSelection>b__5(INodeState node);
    [CompilerGeneratedAttribute]
private static INodeState <SetSelection>b__6(INodeState node);
    [CompilerGeneratedAttribute]
private static bool <SetSelection>b__7(INodeState node);
    [CompilerGeneratedAttribute]
private void <GetOperation>b__10(IEnumerable`1<INodeState> newNodes);
    [CompilerGeneratedAttribute]
private void <GetOperation>b__13(IEnumerable`1<INodeState> newNodes);
    [CompilerGeneratedAttribute]
private bool <GetOperation>b__11(INodeState node);
    [CompilerGeneratedAttribute]
private void <GetOperation>b__12(INodeState existing);
}
internal class JetBrains.UI.Controls.TreeListView.Implementation.Default.TreeNode : object {
    private NodeStateProvider myProvider;
    private TreeNode myParent;
    private List`1<TreeNode> myFilteredChildren;
    private HashMap`2<object, TreeNode> myChildrenCache;
    private int myLastSortTimeStamp;
    private int myLastFilterTimeStamp;
    private bool myIsChildrenValid;
    private int myOffset;
    private bool myChildrenOffsetsValid;
    private int myExpandedDescendantsCount;
    [CompilerGeneratedAttribute]
private bool <IsExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SourceObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttached>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<object, TreeNode>, INodeState> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`1<TreeNode> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<TreeNode, TreeNode> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<TreeNode> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`1<TreeNode> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<TreeNode, TreeNode> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<TreeNode, int> CS$<>9__CachedAnonymousMethodDelegate19;
    public bool IsExpanded { get; private set; }
    public int Index { get; private set; }
    public object SourceObject { get; private set; }
    public IEnumerable`1<INodeState> FilteredChildren { get; }
    public ITreeNodeStateProvider Provider { get; }
    public int Level { get; }
    public bool HasChildren { get; }
    public INodeState Parent { get; }
    public bool IsAttached { get; internal set; }
    public TreeNode ParentTreeNode { get; }
    public IEnumerable`1<INodeState> Children { get; }
    private bool IsFilterUpToDate { get; private set; }
    private bool IsSortingUpToDate { get; private set; }
    private bool IsExpandedDescendantsCountValid { get; }
    public TreeNode(NodeStateProvider provider, object sourceObject, TreeNode parent);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExpanded();
    [CompilerGeneratedAttribute]
private void set_IsExpanded(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_SourceObject();
    [CompilerGeneratedAttribute]
private void set_SourceObject(object value);
    public sealed virtual IEnumerable`1<INodeState> get_FilteredChildren();
    public sealed virtual ITreeNodeStateProvider get_Provider();
    public sealed virtual int get_Level();
    public sealed virtual bool get_HasChildren();
    public sealed virtual INodeState get_Parent();
    [CompilerGeneratedAttribute]
public bool get_IsAttached();
    [CompilerGeneratedAttribute]
internal void set_IsAttached(bool value);
    public TreeNode get_ParentTreeNode();
    public sealed virtual IEnumerable`1<INodeState> get_Children();
    private bool get_IsFilterUpToDate();
    private void set_IsFilterUpToDate(bool value);
    private bool get_IsSortingUpToDate();
    private void set_IsSortingUpToDate(bool value);
    private bool get_IsExpandedDescendantsCountValid();
    internal void Detach();
    internal void Detach(int too);
    internal void RemoveDescendatsFromSelection();
    internal void Rebuild();
    public void BuildVisibleSubtree();
    public void DropFilteredChildren();
    public void SortExpandedSubtree();
    public void Expand();
    public void Collapse();
    public void CollapseAll();
    public TreeNode NodeByTraverseIndex(int offset);
    public IEnumerable`1<INodeState> IterateVisible();
    public IEnumerable`1<INodeState> IterateForward(Func`2<INodeState, bool> visitChildren);
    public TreeNode FindChild(object sourceObject);
    public TreeNode FindChild(int index);
    public void ExpandAll(Predicate`1<INodeState> expandDescendants);
    public int TraverseIndex();
    public void RefreshDirectChildren();
    public void IndalidateSubtree();
    public int EnsureExpandedDescendantsCount();
    private void RebuidCachedSubtree();
    private void EnsureChildren();
    private void EnsureFilteredChildrenList();
    private void InvalidateExpandedDescendantsCountUp();
    private void IncrementParentsExpandedDescendants(int increment);
    private void EnsureOffsets();
    private TreeNode ModelToNode(object sourceObject);
    [CompilerGeneratedAttribute]
private static INodeState <get_Children>b__0(KeyValuePair`2<object, TreeNode> pair);
    [CompilerGeneratedAttribute]
private static void <SortExpandedSubtree>b__2(TreeNode node);
    [CompilerGeneratedAttribute]
private static TreeNode <Expand>b__4(TreeNode node);
    [CompilerGeneratedAttribute]
private static void <Expand>b__5(TreeNode treeNode);
    [CompilerGeneratedAttribute]
private bool <Expand>b__6(TreeNode node);
    [CompilerGeneratedAttribute]
private static void <Expand>b__7(TreeNode node);
    [CompilerGeneratedAttribute]
private static bool <IterateVisible>b__e(INodeState node);
    [CompilerGeneratedAttribute]
private static TreeNode <TraverseIndex>b__16(TreeNode node);
    [CompilerGeneratedAttribute]
private static int <EnsureExpandedDescendantsCount>b__18(TreeNode node);
}
public class JetBrains.UI.Controls.TreeListView.Implementation.ItemsSourceTreeModel : TreeModelChangeTrackerBase {
    private IList myRoots;
    private Binding myChildrenBinding;
    private Binding myHasChildrenBinding;
    private OneToSetMap`2<INotifyCollectionChanged, object> myListToOwnerMap;
    public object Root { get; }
    public ItemsSourceTreeModel(IList roots, Binding childrenBinding);
    public ItemsSourceTreeModel(IList roots, Binding childrenBinding, Binding hasChildrenBinding);
    public virtual object get_Root();
    public virtual bool HasChildren(object model);
    private IList GetChildrenByPropertyPath(object source);
    public virtual IList GetChildren(object parent);
    public sealed virtual ITreeModelChangeTracker GetChangeTracker();
    public virtual IEqualityComparer`1<object> GetCustomComparer();
    public sealed virtual ITreeStateRestoreSupportSimple GetStateRestoreSupport();
    public virtual void StartTracking(object item);
    public virtual void FinishTracking(object item);
    private void OnObservableCollectionChanged(object observable, NotifyCollectionChangedEventArgs args);
    private void Dispatch(object owner, NotifyCollectionChangedEventArgs args);
    public void UpdateHasChildrenBinding(Binding hasChildrenBinding);
}
public class JetBrains.UI.Controls.TreeListView.Implementation.VirtualData.DataVirtualizingNodeStateProvider : object {
    private CookieHelper myCookieHelper;
    private ITreeModelProvider myModel;
    private NodeState myRoot;
    private ITreeModelChangeTracker myChangeTracker;
    private IIterativeTreeModelChangeTracker myIterativeChangeTracker;
    private OneToSetMap`2<object, NodeState> myModelToNodeMap;
    private Action`1<ITreeNodeStateProvider> ItemsInvalidated;
    private Action`1<ITreeNodeStateProvider> VisibleRangeChanging;
    private Action`1<ITreeNodeStateProvider> VisibleRangeChanged;
    private RangeReplaceDelegate VisibleRangeReplaced;
    [CompilerGeneratedAttribute]
private ISelectionManager <SelectionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, NodeState> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, NodeState> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, NodeState> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, INodeState> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, int> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<NodeState, object, NodeState> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`3<NodeState, int, NodeState> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, int> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, NodeState> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, int> CS$<>9__CachedAnonymousMethodDelegate1d;
    public int VisibleNodeCount { get; }
    public ITreeModelProvider Model { get; public set; }
    public ISelectionManager SelectionManager { get; private set; }
    public IFilterSortController FilterSortController { get; }
    public IDisposable ModificationCookie { get; }
    public INodeState Root { get; }
    public TreeNodeStateProviderOptions Options { get; public set; }
    public DataVirtualizingNodeStateProvider(ITreeModelProvider treeModelProvider);
    private void UpdateTreeSource(ITreeModelProvider treeModelProvider);
    public sealed virtual int get_VisibleNodeCount();
    private NodeState ByObjectPathInternal(IEnumerable`1<object> objectPath);
    private NodeState ByIndexPathInternal(IEnumerable`1<int> indexPath);
    public sealed virtual ITreeModelProvider get_Model();
    public sealed virtual void set_Model(ITreeModelProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual ISelectionManager get_SelectionManager();
    [CompilerGeneratedAttribute]
private void set_SelectionManager(ISelectionManager value);
    public sealed virtual IFilterSortController get_FilterSortController();
    public sealed virtual IDisposable get_ModificationCookie();
    private int GetSourceListCountSafe(NodeState parent);
    private void BeginTransaction();
    private void EndTransaction();
    private void SetIsExpanded(NodeState child, bool state);
    private void ExpandPath(NodeState child);
    private void EnsureBranchIsCached(NodeState last);
    private void CollapsePath(NodeState nodeToCollapse);
    public sealed virtual INodeState get_Root();
    public sealed virtual TreeNodeStateProviderOptions get_Options();
    public sealed virtual void set_Options(TreeNodeStateProviderOptions value);
    public sealed virtual void SetIsExpanded(INodeState nodeState, bool state);
    public sealed virtual void ExpandAll(INodeState node, Predicate`1<INodeState> expandDescendants);
    private void ExpandRecursive(NodeState node, Predicate`1<INodeState> expandDescendants);
    public sealed virtual void CollapseAll(INodeState node);
    private NodeState PublicNodeToInternal(INodeState nodeState);
    public sealed virtual INodeState ByObjectPath(IEnumerable`1<object> path);
    public sealed virtual INodeState ByIndexPath(IEnumerable`1<int> path);
    public void CollapseAll();
    public sealed virtual int TraverseIndex(INodeState node);
    public int TraverseIndex(IEnumerable`1<int> indexPath);
    public sealed virtual IEnumerable`1<INodeState> FetchRange(int offset, int count);
    private IEnumerable`1<INodeState> IterateVisible(NodeState anchor, int count);
    private NodeState MoveRight(NodeState anchor);
    private NodeState MoveDown(NodeState anchor);
    private static List`1<NodeState> FindByTraverseIndex(NodeState parentNode, List`1<NodeState> path, int offset);
    private void RaiseVisibleRangeReplace(NodeState parent, int prevSourceIndex, int oldLen, int newLen);
    private void OnAdd(NodeState owner, int offset, int count);
    private void OnRemove(NodeState owner, int offset, int count);
    private void OnReset(NodeState owner, ResetType resetType);
    internal void StartTracking(NodeState node);
    internal void FinishTracking(NodeState node);
    private void SubscribeChanges();
    private void UnsubscribeChanges();
    private void TrackerOnModelChanging(ITreeModelChangeTracker modelChangeTracker);
    private void TrackerOnModelChanged(ITreeModelChangeTracker modelChangeTracker);
    private void TrackerOnNotifyRemove(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    private void TrackerOnNotifyInsert(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    private void TrackerOnNotifyReplace(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    private void TrackerOnNotifyReset(ITreeModelChangeTracker tracker, object owner, ResetType resetType);
    private void ApplyChange(object owner, Action`1<NodeState> action);
    private ICollection`1<NodeState> NodesByModel(object owner);
    public sealed virtual void add_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    public sealed virtual void remove_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    private void OnRedrawRequired();
    internal void add_VisibleRangeChanging(Action`1<ITreeNodeStateProvider> value);
    internal void remove_VisibleRangeChanging(Action`1<ITreeNodeStateProvider> value);
    private void OnVisibleRangeChanging();
    internal void add_VisibleRangeChanged(Action`1<ITreeNodeStateProvider> value);
    internal void remove_VisibleRangeChanged(Action`1<ITreeNodeStateProvider> value);
    private void OnVisibleRangeChanged();
    internal void add_VisibleRangeReplaced(RangeReplaceDelegate value);
    internal void remove_VisibleRangeReplaced(RangeReplaceDelegate value);
    private void OnVisibleRangeReplaced(int offset, int oldlen, int newlen);
    [CompilerGeneratedAttribute]
private static NodeState <ExpandPath>b__0(NodeState state);
    [CompilerGeneratedAttribute]
private static NodeState <EnsureBranchIsCached>b__2(NodeState state);
    [CompilerGeneratedAttribute]
private static bool <EnsureBranchIsCached>b__3(NodeState nodeState);
    [CompilerGeneratedAttribute]
private static NodeState <CollapsePath>b__6(NodeState state);
    [CompilerGeneratedAttribute]
private static INodeState <PublicNodeToInternal>b__8(INodeState node);
    [CompilerGeneratedAttribute]
private static int <PublicNodeToInternal>b__9(INodeState n);
    [CompilerGeneratedAttribute]
private static NodeState <ByObjectPath>b__c(NodeState current, object o);
    [CompilerGeneratedAttribute]
private static NodeState <ByIndexPath>b__e(NodeState current, int o);
    [CompilerGeneratedAttribute]
private static int <FindByTraverseIndex>b__16(NodeState state);
    [CompilerGeneratedAttribute]
private static NodeState <RaiseVisibleRangeReplace>b__18(NodeState state);
    [CompilerGeneratedAttribute]
private static bool <RaiseVisibleRangeReplace>b__19(NodeState nodeState);
    [CompilerGeneratedAttribute]
private static int <OnReset>b__1c(NodeState node);
}
internal class JetBrains.UI.Controls.TreeListView.Implementation.VirtualData.NodeState : object {
    private Nullable`1<int> myInvalidatedLocalOffsetChildIndex;
    private DataVirtualizingNodeStateProvider myTreeNodeProvider;
    private Nullable`1<int> myLocalOffset;
    internal int SourceIndex;
    internal List`1<NodeState> CachedChildren;
    internal NodeState Parent;
    internal Nullable`1<int> VisibleSubtreeCount;
    public bool IsAttached;
    [CompilerGeneratedAttribute]
private bool <IsExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SourceObject>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<NodeState, int> CS$<>9__CachedAnonymousMethodDelegate6;
    public bool IsExpanded { get; internal set; }
    private INodeState JetBrains.Application.UI.Controls.TreeListView.Contracts.INodeState.Parent { get; }
    private int JetBrains.Application.UI.Controls.TreeListView.Contracts.INodeState.Index { get; }
    public object SourceObject { get; private set; }
    public IEnumerable`1<INodeState> Children { get; }
    public IEnumerable`1<INodeState> FilteredChildren { get; }
    public ITreeNodeStateProvider Provider { get; }
    public bool HasChildren { get; }
    public int Level { get; }
    public bool IsTemporary { get; }
    internal int LocalOffset { get; }
    internal int ActualVisibleSubtreeCount { get; }
    public bool HasCachedChildren { get; }
    public NodeState(NodeState parent, DataVirtualizingNodeStateProvider dataVirtualizingNodeProvider, object sourceObject, int sourceIndex, bool isExpanded);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExpanded();
    [CompilerGeneratedAttribute]
internal void set_IsExpanded(bool value);
    private sealed virtual override INodeState JetBrains.Application.UI.Controls.TreeListView.Contracts.INodeState.get_Parent();
    private sealed virtual override int JetBrains.Application.UI.Controls.TreeListView.Contracts.INodeState.get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual object get_SourceObject();
    [CompilerGeneratedAttribute]
private void set_SourceObject(object value);
    public sealed virtual IEnumerable`1<INodeState> get_Children();
    public sealed virtual IEnumerable`1<INodeState> get_FilteredChildren();
    public sealed virtual ITreeNodeStateProvider get_Provider();
    public sealed virtual bool get_HasChildren();
    public sealed virtual int get_Level();
    public bool get_IsTemporary();
    internal int get_LocalOffset();
    internal void InvalidateTreeLocalOffsets(int indexInCachedCollection);
    private void EnsureChildrenLocalOffsets();
    internal int get_ActualVisibleSubtreeCount();
    [NotNullAttribute]
internal FindResult FindCachedBySourceIndex(int index);
    internal int EnsureChildIsCached(NodeState child);
    internal void IncrementSourceIndeces(int insertionIndex, int inc);
    internal void UpdateVisibleDescendatsCount(int changedChildIndex, int count);
    internal NodeState GetCachedOrNewChild(int index);
    private NodeState GetNew(int index);
    internal NodeState GetCachedOrNewChild(object child);
    public bool get_HasCachedChildren();
    public virtual string ToString();
    internal NodeState CreateNonCachedCopy();
    internal void RemoveCachedChildAt(int index);
    internal void Detach();
    [CompilerGeneratedAttribute]
private static int <FindCachedBySourceIndex>b__5(NodeState nodeState);
}
public class JetBrains.UI.Controls.TreeListView.Implementation.VirtualData.RangeReplaceDelegate : MulticastDelegate {
    public RangeReplaceDelegate(object object, IntPtr method);
    public virtual void Invoke(ITreeNodeStateProvider sender, int offset, int oldLen, int newLen);
    public virtual IAsyncResult BeginInvoke(ITreeNodeStateProvider sender, int offset, int oldLen, int newLen, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.UI.Controls.TreeListView.Implementation.VirtualData.TraverseIndexSelectionManager : object {
    private DataVirtualizingNodeStateProvider myProvider;
    private RangeSetTracker mySelectedRanges;
    private int myTransanctionTimeStamp;
    private CookieHelper myCookieHelper;
    private SelectionChangedDelegate SelectionChangeBegin;
    private SelectionChangedDelegate SelectionChangeEnd;
    public IEnumerable`1<INodeState> SelectedNodes { get; }
    public TraverseIndexSelectionManager(DataVirtualizingNodeStateProvider provider);
    public sealed virtual void SetSelection(INodeState start, INodeState finish, SelectionOperation operation);
    public sealed virtual void Clear();
    private void OnProviderVisibleRangeChanging(ITreeNodeStateProvider treeNodeStateProvider);
    private void OnProviderVisibleRangeReplaced(ITreeNodeStateProvider sender, int offset, int oldLen, int newLen);
    private void OnProviderVisibleRangeChanged(ITreeNodeStateProvider treeNodeStateProvider);
    private void SelectionSet(TextRange obj);
    private void SelectionAdd(TextRange range);
    private void SelectionRemove(TextRange range);
    private void SelectionToggle(TextRange range);
    private void BeginChange();
    private void EndChange();
    public sealed virtual bool IsSelected(INodeState node);
    public sealed virtual IEnumerable`1<INodeState> get_SelectedNodes();
    public sealed virtual void add_SelectionChangeBegin(SelectionChangedDelegate value);
    public sealed virtual void remove_SelectionChangeBegin(SelectionChangedDelegate value);
    public void OnSelectionChangeBegin();
    public sealed virtual void add_SelectionChangeEnd(SelectionChangedDelegate value);
    public sealed virtual void remove_SelectionChangeEnd(SelectionChangedDelegate value);
    public void OnSelectionChangeEnd();
}
public class JetBrains.UI.Controls.TreeListView.ItemActivatedArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private object <SourceObject>k__BackingField;
    [CompilerGeneratedAttribute]
private ModifierKeys <ModifierKeys>k__BackingField;
    public object SourceObject { get; private set; }
    public ModifierKeys ModifierKeys { get; private set; }
    public ItemActivatedArgs(object sourceObject, ModifierKeys modifierKeys);
    [CompilerGeneratedAttribute]
private void set_SourceObject(object value);
    [CompilerGeneratedAttribute]
public object get_SourceObject();
    [CompilerGeneratedAttribute]
public ModifierKeys get_ModifierKeys();
    [CompilerGeneratedAttribute]
private void set_ModifierKeys(ModifierKeys value);
}
public class JetBrains.UI.Controls.TreeListView.LevelToIndentConverter : object {
    public sealed virtual object Convert(object o, Type type, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object o, Type type, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Controls.TreeListView.ProvideComparisionArgs : object {
    public object Parent;
    public Comparison`1<object> Comparison;
    public ProvideComparisionArgs(object parent);
}
public class JetBrains.UI.Controls.TreeListView.ProvideComparisionDelegate : MulticastDelegate {
    public ProvideComparisionDelegate(object object, IntPtr method);
    public virtual void Invoke(TreeListViewColumn column, ProvideComparisionArgs args);
    public virtual IAsyncResult BeginInvoke(TreeListViewColumn column, ProvideComparisionArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.UI.Controls.TreeListView.TreeGridViewRowPresenter : GridViewRowPresenter {
    public static DependencyProperty FirstColumnIndentProperty;
    public static DependencyProperty ExpanderProperty;
    private UIElementCollection myChildren;
    private static PropertyInfo ActualIndexProperty;
    private static PropertyInfo DesiredWidthProperty;
    public double FirstColumnIndent { get; public set; }
    public UIElement Expander { get; public set; }
    protected int VisualChildrenCount { get; }
    private static TreeGridViewRowPresenter();
    public double get_FirstColumnIndent();
    public void set_FirstColumnIndent(double value);
    public UIElement get_Expander();
    public void set_Expander(UIElement value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    private static void OnExpanderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[XamlItemsControlAttribute]
public class JetBrains.UI.Controls.TreeListView.TreeListView : Control {
    public static RoutedEvent SelectionChangedEvent;
    public static RoutedEvent ItemActivatedEvent;
    private Action`2<TreeListView, ContextMenuRequestArgs> ContextMenuRequested;
    private EventHandler IsTopLevelLockedChanged;
    public static DependencyProperty IsTopLevelLockedProperty;
    public static DependencyProperty IsHeaderVisibleProperty;
    private static DependencyPropertyKey IsHeaderVisibleCalculatedKey;
    public static DependencyProperty IsHeaderVisibleCalculatedProperty;
    public static DependencyProperty AllowMultiselectProperty;
    public static DependencyProperty HeaderMarginProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty IsDataVirtualizationEnabledProperty;
    public static DependencyProperty FilterDescriptorProperty;
    private static DependencyPropertyKey FlattenedTreeKey;
    public static DependencyProperty FlattenedTreeProperty;
    private static DependencyPropertyKey ColumnsKey;
    public static DependencyProperty ColumnsProperty;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty AutoSizeColumnsProperty;
    private ITreeNodeStateProvider myTreeNodeStateProvider;
    private ITreeModelProvider myModelSource;
    private INodeState mySelectionAnchor;
    private TreeListViewPresenter myPresenter;
    private Binding myChildrenBinding;
    private Binding myHasChildrenBinding;
    [CanBeNullAttribute]
private INodeState myLastSelectedNode;
    private bool myIsChangingSelectedItemOurselves;
    private ItemsSourceTreeModel myItemsSourceTreeModel;
    private TreeListViewColumn myLastSortedColumn;
    private bool myAllowSwitchToAnsorted;
    private Func`2<object, bool> myIsInitiallyExpanded;
    private bool myAutoExpandSingleChild;
    private Size myLastMesured;
    private Size myLastArranged;
    public static DependencyProperty SelectedItemsDependencyProperty;
    public IProperty`1<IList`1<object>> SelectedItemsProperty;
    public static DependencyProperty IsSelectedItemsPropertyActiveProperty;
    private static ReadonlyToken myTokenArtificialChange;
    [CompilerGeneratedAttribute]
private Func`1<IDisposable> <ReadBrackets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRestoreStateWhenSourceChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyboardExpandAllLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, Action`1<bool>, bool> <ReentrancyGuardExecuteOrQueueOrMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`1<IDisposable> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, object> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`3<object, int, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<TreeListViewItem, INodeState> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<TreeListViewItem, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Action`1<TreeListViewColumn> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<TreeListViewItem, INodeState> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, object> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, bool> CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, IndexPath> CS$<>9__CachedAnonymousMethodDelegate59;
    [CompilerGeneratedAttribute]
private static Func`2<TreeListViewItem, bool> CS$<>9__CachedAnonymousMethodDelegate5a;
    [CompilerGeneratedAttribute]
private static Func`2<GridViewColumn, bool> CS$<>9__CachedAnonymousMethodDelegate66;
    public Func`1<IDisposable> ReadBrackets { get; public set; }
    public bool IsTopLevelLocked { get; public set; }
    public bool IsHeaderVisibleCalculated { get; private set; }
    public bool AutoSizeColumns { get; public set; }
    public IFilterDescriptor FilterDescriptor { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public bool IsHeaderVisible { get; public set; }
    [XamlItemBindingOfItemsControlAttribute]
public Binding ChildrenBinding { get; public set; }
    public Binding HasChildrenBinding { get; public set; }
    public bool IsDataVirtualizationEnabled { get; public set; }
    public object SelectedItem { get; public set; }
    public Thickness HeaderMargin { get; public set; }
    public bool AllowMultiselect { get; public set; }
    public IEnumerable`1<object> SelectedItems { get; }
    public IEnumerable`1<INodeState> SelectedNodes { get; }
    public bool AutoRestoreStateWhenSourceChanges { get; public set; }
    public IList`1<INodeState> FlattenedTree { get; private set; }
    [DesignerSerializationVisibilityAttribute("2")]
public GridViewColumnCollection Columns { get; }
    public ITreeModelProvider ModelSource { get; public set; }
    private ISelectionManager SelectionManager { get; }
    public int KeyboardExpandAllLimit { get; public set; }
    public Func`3<string, Action`1<bool>, bool> ReentrancyGuardExecuteOrQueueOrMerge { get; public set; }
    public Func`2<object, bool> IsInitiallyExpanded { get; public set; }
    public bool AutoExpandSingleChild { get; public set; }
    public bool IsSelectedItemsPropertyActive { get; public set; }
    private static TreeListView();
    [CompilerGeneratedAttribute]
public Func`1<IDisposable> get_ReadBrackets();
    [CompilerGeneratedAttribute]
public void set_ReadBrackets(Func`1<IDisposable> value);
    public IDisposable ReadBracketsOrDefault();
    public void add_SelectionChanged(RoutedEventHandler value);
    public void remove_SelectionChanged(RoutedEventHandler value);
    public void add_ItemActivated(ItemActivatedHandler value);
    public void remove_ItemActivated(ItemActivatedHandler value);
    public void add_ContextMenuRequested(Action`2<TreeListView, ContextMenuRequestArgs> value);
    public void remove_ContextMenuRequested(Action`2<TreeListView, ContextMenuRequestArgs> value);
    public void OnContextMenuRequested(ContextMenuRequestArgs arg2);
    public void add_IsTopLevelLockedChanged(EventHandler value);
    public void remove_IsTopLevelLockedChanged(EventHandler value);
    public bool get_IsTopLevelLocked();
    public void set_IsTopLevelLocked(bool value);
    private static void OnIsTopLevelLockedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsHeaderVisibleCalculated();
    private void set_IsHeaderVisibleCalculated(bool value);
    public bool get_AutoSizeColumns();
    public void set_AutoSizeColumns(bool value);
    public IFilterDescriptor get_FilterDescriptor();
    public void set_FilterDescriptor(IFilterDescriptor value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public bool get_IsHeaderVisible();
    public void set_IsHeaderVisible(bool value);
    public Binding get_ChildrenBinding();
    public void set_ChildrenBinding(Binding value);
    public Binding get_HasChildrenBinding();
    public void set_HasChildrenBinding(Binding value);
    public bool get_IsDataVirtualizationEnabled();
    public void set_IsDataVirtualizationEnabled(bool value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public Thickness get_HeaderMargin();
    public void set_HeaderMargin(Thickness value);
    public bool get_AllowMultiselect();
    public void set_AllowMultiselect(bool value);
    private void OnAllowMultiselectPropertyChanged(DependencyPropertyChangedEventArgs e);
    public IEnumerable`1<object> get_SelectedItems();
    public IEnumerable`1<INodeState> get_SelectedNodes();
    private void OnSelectedItemChanged();
    public void Select(IEnumerable`1<object> items);
    private void UpdateIsHeaderVisibleCalculated();
    public void SelectPath(IEnumerable`1<object> modelPath);
    private void OnFilterDescriptorPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void ApplyFilterGuarded();
    private void ApplyFilter();
    private void InvalidateItemsSourceTreeModel();
    [CompilerGeneratedAttribute]
public bool get_AutoRestoreStateWhenSourceChanges();
    [CompilerGeneratedAttribute]
public void set_AutoRestoreStateWhenSourceChanges(bool value);
    private void UpdateTreeSource();
    public TreeListViewItem FindLogicFocusNode();
    private void OnItemsSourcePropertyChanged(DependencyPropertyChangedEventArgs e);
    private void OnIsDataVirtualizationEnabledPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void HeaderClickHandler(object sender, RoutedEventArgs e);
    private void ApplySort(TreeListViewColumn column, Nullable`1<SortOrder> nextSortOrder);
    private Nullable`1<SortOrder> NextSortOrder(Nullable`1<SortOrder> order);
    internal void ColumnSortComparisonChanged(TreeListViewColumn treeListViewColumn);
    private void InvalidateNodeProvider();
    private ITreeModelProvider SelectTreeSource();
    public IList`1<INodeState> get_FlattenedTree();
    private void set_FlattenedTree(IList`1<INodeState> value);
    public GridViewColumnCollection get_Columns();
    public ITreeModelProvider get_ModelSource();
    public void set_ModelSource(ITreeModelProvider value);
    private ISelectionManager get_SelectionManager();
    [CompilerGeneratedAttribute]
public int get_KeyboardExpandAllLimit();
    [CompilerGeneratedAttribute]
public void set_KeyboardExpandAllLimit(int value);
    [CompilerGeneratedAttribute]
public Func`3<string, Action`1<bool>, bool> get_ReentrancyGuardExecuteOrQueueOrMerge();
    [CompilerGeneratedAttribute]
public void set_ReentrancyGuardExecuteOrQueueOrMerge(Func`3<string, Action`1<bool>, bool> value);
    public Func`2<object, bool> get_IsInitiallyExpanded();
    public void set_IsInitiallyExpanded(Func`2<object, bool> value);
    private void UpdateProviderOptions();
    public bool get_AutoExpandSingleChild();
    public void set_AutoExpandSingleChild(bool value);
    internal bool ExecuteGuarded(string actionName, Action`1<bool> exec);
    internal bool ExecuteGuarded(string actionName, Action exec);
    public void ExpandAll(Nullable`1<int> maxDepthCount);
    public void ExpandAll(object o, ExpandDescendantDelegate expandDescendants);
    public void ExpandAllByPath(IEnumerable`1<object> objectPath, ExpandDescendantDelegate expandDescendants);
    private IList GetModelRoots();
    public void CollapseAll();
    public void CollapseAll(object o);
    private INodeState GetNodeState(object item);
    public void CollapseAllByPath(IEnumerable`1<object> objectPath);
    public void SetExpandState(IEnumerable`1<int> indexPath, bool isExpanded);
    public void SetExpandState(IEnumerable`1<object> objectPath, bool isExpanded);
    private void OnSelectionChanged(ISelectionManager sender);
    public virtual void OnApplyTemplate();
    internal bool IsItemSelected(TreeListViewItem treeListViewItem);
    [CanBeNullAttribute]
private IEnumerable`1<object> GetObjectPath(object model);
    [CanBeNullAttribute]
public TreeListViewState SaveState();
    public void RestoreState(TreeListViewState state);
    public void BringPathIntoView(IEnumerable`1<object> modelPath, bool focus, bool select);
    private void ScheduleBringIntoView(INodeState toScroll);
    private void BringNodeIntoViewCallback(INodeState nodeState);
    public void BringIntoView(object model);
    private bool HandleActivate(INodeState node, ModifierKeys modifiers);
    protected virtual void OnMouseRightButtonUp(MouseButtonEventArgs e);
    protected void OnMouseRightButtonUpGuarded(MouseButtonEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected void OnMouseLeftButtonDownGuarded(MouseButtonEventArgs e);
    private void HandleSelect(INodeState node, bool allowMultiselect);
    private static INodeState FindNearestVisible(INodeState node);
    private static bool IsShiftPresssed();
    private static bool IsCtrlPressed();
    protected virtual void OnKeyDown(KeyEventArgs e);
    private bool OnItemKeyDown(TreeListViewItem source, KeyEventArgs args);
    private void EnsureSelectionTo(INodeState toNode);
    public void SelectAll();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    private INodeState MoveFocusUp(INodeState nodeState);
    private INodeState MoveFocusToParent(INodeState nodeState);
    private INodeState MoveFocusDown(INodeState nodeState);
    private INodeState BringToViewAndFocus(int rowIndex);
    public void EnsureVisible(INodeState item);
    private void EnsureVisibleCore(INodeState item);
    private void ScheduleEnsureVisible(INodeState item);
    private void ChangeExpandStateAndFocus(INodeState nodeState, bool state);
    public void ScheduleFocus(INodeState node);
    public void Focus(INodeState newFocus);
    public TreeListViewItem GetContainer(object item);
    private void SetLocalFocus(FrameworkElement toFocus);
    internal void OnExpandChangeRequest(TreeListViewItem treeListViewItem);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void OnIsSelectedItemsPropertyActiveChanged(bool newvalue);
    public bool get_IsSelectedItemsPropertyActive();
    public void set_IsSelectedItemsPropertyActive(bool value);
    public void AsyncAutosizeColumns();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__12(PropertyChangedEventArgs`1<IList`1<object>> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13(object param0, RoutedEventArgs param1);
    [CompilerGeneratedAttribute]
private static IDisposable <ReadBracketsOrDefault>b__18();
    [CompilerGeneratedAttribute]
private static object <get_SelectedItems>b__1a(INodeState selectedNode);
    [CompilerGeneratedAttribute]
private static bool <Select>b__1c(object o, int i);
    [CompilerGeneratedAttribute]
private static INodeState <ApplyFilter>b__1e(TreeListViewItem _);
    [CompilerGeneratedAttribute]
private static bool <FindLogicFocusNode>b__20(TreeListViewItem item);
    [CompilerGeneratedAttribute]
private static void <ApplySort>b__23(TreeListViewColumn col);
    [CompilerGeneratedAttribute]
private static INodeState <OnSelectionChanged>b__32(TreeListViewItem item);
    [CompilerGeneratedAttribute]
private static object <OnSelectionChanged>b__33(INodeState node);
    [CompilerGeneratedAttribute]
private static bool <FindNearestVisible>b__42(INodeState state);
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod4a(KeyEventArgs );
    [CompilerGeneratedAttribute]
private Size <>n__FabricatedMethod51(Size );
    [CompilerGeneratedAttribute]
private Size <>n__FabricatedMethod55(Size );
    [CompilerGeneratedAttribute]
private static IndexPath <Focus>b__56(INodeState _);
    [CompilerGeneratedAttribute]
private static bool <Focus>b__58(TreeListViewItem viewItem);
    [CompilerGeneratedAttribute]
private static bool <AsyncAutosizeColumns>b__64(GridViewColumn col);
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewAutomationPeer : FrameworkElementAutomationPeer {
    [CompilerGeneratedAttribute]
private static Func`2<INodeState, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IRawElementProviderSimple, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    public TreeListViewAutomationPeer(TreeListView owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    [CompilerGeneratedAttribute]
private static bool <GetChildrenCore>b__0(INodeState x);
    [CompilerGeneratedAttribute]
private static bool <System.Windows.Automation.Provider.ISelectionProvider.GetSelection>b__6(IRawElementProviderSimple x);
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewColumn : GridViewColumn {
    public static DependencyProperty SortDescriptorProperty;
    public static DependencyProperty ComparisonProperty;
    private static DependencyPropertyKey SortOrderKey;
    public static DependencyProperty SortOrderProperty;
    private DelegateSortDescriptor myCalllbackComparison;
    private BindingBase myDisplayMemberBinding;
    private ProvideComparisionDelegate GetComparition;
    [CompilerGeneratedAttribute]
private TreeListView <TreeListView>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    public Comparison`1<object> Comparison { get; public set; }
    public ISortDescriptor SortDescriptor { get; public set; }
    public Nullable`1<SortOrder> SortOrder { get; internal set; }
    internal TreeListView TreeListView { get; internal set; }
    [NotNullAttribute]
public BindingBase DisplayMemberBinding { get; public set; }
    private static TreeListViewColumn();
    private void OnComparisonPropertyChanged(DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public Comparison`1<object> get_Comparison();
    public void set_Comparison(Comparison`1<object> value);
    private void NotifyTree();
    private void InvalidateSortDescriptor();
    public ISortDescriptor get_SortDescriptor();
    public void set_SortDescriptor(ISortDescriptor value);
    public void add_GetComparition(ProvideComparisionDelegate value);
    public void remove_GetComparition(ProvideComparisionDelegate value);
    internal ISortDescriptor GetCurrentDescriptor();
    public Nullable`1<SortOrder> get_SortOrder();
    internal void set_SortOrder(Nullable`1<SortOrder> value);
    [CompilerGeneratedAttribute]
internal TreeListView get_TreeListView();
    [CompilerGeneratedAttribute]
internal void set_TreeListView(TreeListView value);
    public BindingBase get_DisplayMemberBinding();
    public void set_DisplayMemberBinding(BindingBase value);
    [CompilerGeneratedAttribute]
private Comparison`1<object> <OnComparisonPropertyChanged>b__0(object o);
    [CompilerGeneratedAttribute]
private Comparison`1<object> <GetCurrentDescriptor>b__1(object parent);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
internal class JetBrains.UI.Controls.TreeListView.TreeListViewColumnCollection : GridViewColumnCollection {
    private TreeListView myTreeListView;
    public TreeListViewColumnCollection(TreeListView treeListView);
    protected virtual void InsertItem(int index, GridViewColumn column);
    private void SetOwner(GridViewColumn column);
    protected virtual void SetItem(int index, GridViewColumn column);
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewItem : Control {
    public static DependencyProperty IsLockedProperty;
    public static DependencyProperty IsExpandedProperty;
    private static DependencyPropertyKey IsSelectedKey;
    public static DependencyProperty IsSelectedProperty;
    private static DependencyPropertyKey HasChildrenKey;
    public static DependencyProperty HasChildrenProperty;
    private static DependencyPropertyKey LevelKey;
    public static DependencyProperty LevelProperty;
    private static DependencyPropertyKey SourceObjectKey;
    public static DependencyProperty SourceObjectProperty;
    private TreeListView myTreeListView;
    private bool myNodeStateChanging;
    private INodeState myNodeState;
    public bool IsLocked { get; public set; }
    public bool IsExpanded { get; public set; }
    public bool IsSelected { get; private set; }
    public bool HasChildren { get; private set; }
    public int Level { get; private set; }
    public object SourceObject { get; private set; }
    public INodeState NodeState { get; }
    public TreeListViewItem(TreeListView tree);
    private static TreeListViewItem();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void UpdateIsLocked();
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_IsSelected();
    private void set_IsSelected(bool value);
    public bool get_HasChildren();
    private void set_HasChildren(bool value);
    private static void OnLevelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_Level();
    private void set_Level(int value);
    public object get_SourceObject();
    private void set_SourceObject(object value);
    public INodeState get_NodeState();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal void UpdateSelectionProperty(bool isSelected);
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewItemAdorner : ContentControl {
    private static TreeListViewItemAdorner();
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewItemAutomationPeer : AutomationPeer {
    private TreeListView myTree;
    private INodeState myNodeState;
    [CompilerGeneratedAttribute]
private static ExpandDescendantDelegate CS$<>9__CachedAnonymousMethodDelegate2;
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public TreeListViewItemAutomationPeer(INodeState nodeState, TreeListView tree);
    private TreeListViewItem TryGetContainer();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual Point GetClickablePointCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    protected virtual bool IsOffscreenCore();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    [CompilerGeneratedAttribute]
private TreeListViewItemAutomationPeer <GetChildrenCore>b__0(INodeState nodeState);
    [CompilerGeneratedAttribute]
private static bool <System.Windows.Automation.Provider.IExpandCollapseProvider.Expand>b__1(object a, int b);
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewPanel : VirtualizingStackPanel {
    private Size myLastMeasured;
    private Size myLastArranged;
    [CompilerGeneratedAttribute]
private static Func`2<TreeListViewPresenter, TreeListView> CS$<>9__CachedAnonymousMethodDelegate9;
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    private TreeListView GetTreeListView();
    public void BringIndexIntoView(int index);
    [CompilerGeneratedAttribute]
private Size <>n__FabricatedMethod3(Size );
    [CompilerGeneratedAttribute]
private Size <>n__FabricatedMethod7(Size );
    [CompilerGeneratedAttribute]
private static TreeListView <GetTreeListView>b__8(TreeListViewPresenter _);
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewPresenter : ItemsControl {
    private TreeListViewPanel myPanel;
    protected bool HandlesScrolling { get; }
    public IEnumerable`1<TreeListViewItem> LoadedChildren { get; }
    private static TreeListViewPresenter();
    protected virtual bool get_HandlesScrolling();
    public IEnumerable`1<TreeListViewItem> get_LoadedChildren();
    public virtual void OnApplyTemplate();
    public void BringIndexIntoView(int index);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    public TreeListView GetTreeListView();
    public double VerticalOffset();
    public double ViewportHeight();
}
public class JetBrains.UI.Controls.TreeListView.TreeListViewWithDataContext : TreeListView {
    public IProperty`1<object> SelectedItem;
    [CompilerGeneratedAttribute]
private static Func`2<IDataContext, object> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<object>, object> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, GetDataRulesEventArgs args);
    [CompilerGeneratedAttribute]
private IList`1<object> <.ctor>b__1(IDataContext context);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__2(IDataContext context);
    [CompilerGeneratedAttribute]
private static object <.ctor>b__3(IList`1<object> items);
}
[ExtensionAttribute]
public static class JetBrains.UI.Controls.TreeListView.Utils : object {
    [ExtensionAttribute]
public static string PathName(T testNode, string separator, Func`2<T, string> getName, Func`2<T, T> getParent);
    [ExtensionAttribute]
public static string PathName(T testNode, Func`2<T, string> getName, Func`2<T, T> getParent);
    public static T FindVisualParentOfType(object child);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BinarySearch from BinarySearchUtil.")]
public static int BinarySearch(List`1<T> list, S target, Func`2<T, S> value, Boolean& isMissing);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "Quick search settings")]
public class JetBrains.UI.Controls.TreeView.QuickSearchBoxSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Whether filter checked")]
public bool FilterChecked;
}
[GlobalSettingsUpgraderAttribute]
public class JetBrains.UI.Controls.TreeView.QuickSearchBoxSettingsUpgrader : SettingTablesUpgrader {
    public QuickSearchBoxSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public class JetBrains.UI.Controls.UIElementWindowlessControl : object {
    [NotNullAttribute]
public UIElement UIElement;
    private SimpleSignal myGottenDirty;
    private ISimpleSignal myWantsResize;
    private Rectangle myBounds;
    [CompilerGeneratedAttribute]
private bool <JetBrains.Application.UI.Controls.IConstrainableControl.AutoActivate>k__BackingField;
    private bool JetBrains.Application.UI.Controls.IConstrainableControl.AutoActivate { get; private set; }
    private ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.WantsResize { get; }
    private Rectangle JetBrains.Application.UI.Controls.IWindowlessControl.Bounds { get; }
    private ISimpleSignal JetBrains.Application.UI.Controls.IWindowlessControl.GottenDirty { get; }
    public UIElementWindowlessControl(UIElement element);
    [CompilerGeneratedAttribute]
private sealed virtual override bool JetBrains.Application.UI.Controls.IConstrainableControl.get_AutoActivate();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.set_AutoActivate(bool value);
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.get_WantsResize();
    private sealed virtual override Size JetBrains.Application.UI.Controls.IConstrainableControl.GetDesiredSize(IGraphicsContainer gc, Size limit);
    private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.SetLayout(LayoutResult layout);
    private sealed virtual override Rectangle JetBrains.Application.UI.Controls.IWindowlessControl.get_Bounds();
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Controls.IWindowlessControl.get_GottenDirty();
    private sealed virtual override void JetBrains.Application.UI.Controls.IWindowlessControl.Paint(Graphics g);
    private sealed virtual override void JetBrains.Application.UI.Controls.IWindowlessControl.SetBounds(IGraphicsContainer gc, Rectangle bounds);
}
public class JetBrains.UI.Controls.UITextView : TextBlock {
    private UITextViewStyleDefinitionCollection myStyles;
    public static DependencyProperty UITextProperty;
    public static DependencyProperty MaxLineCountProperty;
    public static DependencyProperty AllowBeginningTrimmingProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<UITextViewStyleDefinition, Style> CS$<>9__CachedAnonymousMethodDelegate17;
    public UITextViewStyleDefinitionCollection Styles { get; }
    protected IEnumerator LogicalChildren { get; }
    public UIText UIText { get; public set; }
    public int MaxLineCount { get; public set; }
    public bool AllowBeginningTrimming { get; public set; }
    private static UITextView();
    public UITextViewStyleDefinitionCollection get_Styles();
    internal void AddLogicalChild(UITextViewStyleDefinition styleDefinition);
    internal void RemoveLogicalChild(UITextViewStyleDefinition styleDefinition);
    protected virtual IEnumerator get_LogicalChildren();
    private void OnUITextChanged(DependencyPropertyChangedEventArgs arguments);
    private void OnUITextChanged(object sender, EventArgs e);
    public UIText get_UIText();
    public void set_UIText(UIText value);
    public int get_MaxLineCount();
    public void set_MaxLineCount(int value);
    public bool get_AllowBeginningTrimming();
    public void set_AllowBeginningTrimming(bool value);
    private void Update(Size availableSize);
    private void EnsureVisible(int start, int count, Size availableSize);
    private IEnumerable`1<Span> GetInlines(int index, int count);
    private object ToTooltip(IList`1<UITextDefinition> applied);
    private Action ToAction(List`1<UITextDefinition> applied);
    private IEnumerable`1<Style> ToStyles(IEnumerable`1<UITextDefinition> applied);
    private Span CreateSpan(int start, int count, IList`1<Style> applied, Action click, object tooltip);
    private bool HasImportantDefinition();
    private bool AreClose(double a, double b);
    private bool IsInfinityOrNaN(double value);
    internal void InvalidateStructure();
    [CompilerGeneratedAttribute]
private IEnumerator <>n__FabricatedMethod5();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject o, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__8(DependencyObject o, object v);
    [CompilerGeneratedAttribute]
private static Style <ToStyles>b__16(UITextViewStyleDefinition style);
}
[ContentPropertyAttribute("Implication")]
public class JetBrains.UI.Controls.UITextViewStyleDefinition : DependencyObject {
    public static DependencyProperty ImplicationProperty;
    public static DependencyProperty StyleProperty;
    [CompilerGeneratedAttribute]
private UITextView <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate3;
    public Implication Implication { get; public set; }
    public Style Style { get; public set; }
    internal UITextView Owner { get; internal set; }
    public UITextViewStyleDefinition(Implication implication);
    private static UITextViewStyleDefinition();
    public Implication get_Implication();
    public void set_Implication(Implication value);
    public Style get_Style();
    public void set_Style(Style value);
    [CompilerGeneratedAttribute]
internal UITextView get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(UITextView value);
    private void InvalidateOwner();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject o, DependencyPropertyChangedEventArgs a);
}
public class JetBrains.UI.Controls.UITextViewStyleDefinitionCollection : ObservableCollection`1<UITextViewStyleDefinition> {
    private UITextView myOwner;
    internal UITextViewStyleDefinitionCollection(UITextView owner);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, UITextViewStyleDefinition item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, UITextViewStyleDefinition item);
}
public static class JetBrains.UI.Controls.Utils.AutomationProvidersRegistry : object {
    [NotNullAttribute]
public static IDictionaryEvents`2<Type, Func`2<AutomationProviderRequest, IntPtr>> Items;
    private static AutomationProvidersRegistry();
    public static bool TryHandleWindowsMessage(object owner, Message& msg);
}
[ExtensionAttribute]
public static class JetBrains.UI.Controls.Utils.ControlUtil : object {
    private static ChildControlsComparer COMPARER;
    private static ControlUtil();
    [CanBeNullAttribute]
public static Control GetControlContainingPoint(Point screenPoint);
    public static Control GetParentControl(Control c);
    public static bool IsParent(Control parent, Control child);
    public static bool FocusControl(Control control, bool tabStopOnly);
    public static bool FocusChildControl(Control parent, bool tabStopOnly);
    public static void SetFocus(IntPtr handle);
    public static void SetControlBounds(Control c, Point location, Size size);
    public static Rectangle CenterInMainWindow(Size size, IWin32Window mainWindow);
    public static Rectangle CenterInWindow(IntPtr hwndOwner, Size size);
    public static Rectangle FitToScreen(Rectangle bounds);
    [CanBeNullAttribute]
public static Control GetControlContainingFocus();
    [CanBeNullAttribute]
public static Control GetControl(Void* hwnd);
    [ExtensionAttribute]
public static void ClearInternalCaches(Control control);
}
public static class JetBrains.UI.Controls.Utils.GoTransparentOnControlKey : object {
    internal static TimeSpan IntervalControlKeyDownGracePeriod;
    internal static TimeSpan IntervalPollForKeyboard;
    internal static double OpacityFactorWhenTransparent;
    [CompilerGeneratedAttribute]
private static Func`2<bool, double> CS$<>9__CachedAnonymousMethodDelegate8;
    private static GoTransparentOnControlKey();
    public static ISimpleSignal Apply(Lifetime lifetime, IWin32Window window, IThreading invocator);
    public static ISimpleSignal Apply(Lifetime lifetime, Void* hwnd, IThreading invocator);
    private static bool IsCtrlKeyDownNow();
    private static ISimpleSignal Init(Lifetime lifetime, IThreading invocator, Void* hwnd);
    [CompilerGeneratedAttribute]
private static double <Init>b__4(bool isTransparent);
}
public class JetBrains.UI.Controls.Utils.LayoutSuspender : object {
    private bool _bLayoutOnResume;
    private List`1<Control> _suspended;
    public LayoutSuspender(Control control, bool recursive, bool bLayoutOnResume);
    public LayoutSuspender(Control control);
    private void Resume();
    private void Suspend();
    public sealed virtual void Dispose();
}
public static class JetBrains.UI.Controls.Utils.PasswordBoxHelper : object {
    public static DependencyProperty PasswordProperty;
    public static DependencyProperty AttachProperty;
    private static DependencyProperty IsUpdatingProperty;
    private static PasswordBoxHelper();
    public static void SetAttach(DependencyObject dp, bool value);
    public static bool GetAttach(DependencyObject dp);
    public static string GetPassword(DependencyObject dp);
    public static void SetPassword(DependencyObject dp, string value);
    private static bool GetIsUpdating(DependencyObject dp);
    private static void SetIsUpdating(DependencyObject dp, bool value);
    private static void OnPasswordPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void Attach(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void PasswordChanged(object sender, RoutedEventArgs e);
}
public static class JetBrains.UI.Controls.Utils.PresentableItemBlockRenderer : object {
    public static void Render(Graphics g, PresentableItemBlock item, Rectangle bounds, RenderParams renderParams, IThemedIconManager themedIconManager);
    public static Rectangle GetRichTextRectangle(Graphics g, Rectangle bounds, PresentableItemBlock item, RenderParams renderParams, IThemedIconManager themedIconManager);
    public static Rectangle GetTextBounds(Graphics g, Rectangle bounds, PresentableItemBlock item, RenderParams renderParams, IThemedIconManager themedIconManager);
    private static void GetTextLeftRight(Graphics g, Rectangle bounds, PresentableItemBlock item, RenderParams renderParams, IThemedIconManager themedIconManager, Int32& left, Int32& right);
    public static object HitTest(Graphics g, Point hitPoint, Rectangle bounds, PresentableItemBlock item, RenderParams renderParams, IThemedIconManager themedIconManager, Rectangle& hitRect);
    public static Size Measure(Graphics g, PresentableItemBlock item, RenderParams renderParams, IThemedIconManager themedIconManager);
}
[ViewAttribute("0")]
public class JetBrains.UI.Controls.Utils.PresentableItemImageCollectionView : ViewBase`1<PresentableItemImageCollection> {
    private bool myLoadingForFirstTime;
    private ILogger myLogger;
    private StackPanel myPanel;
    private PropertyChangedEventHandler myAutomationOnPropertyChanged;
    private PresentableItemImageCollection myAutomation;
    private bool mySubscribed;
    protected virtual UIElement OnRenderView(PresentableItemImageCollection automation);
    private void FillImages();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnRenderView>b__3(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnRenderView>b__4(object sender, RoutedEventArgs args);
}
public static class JetBrains.UI.Controls.Utils.PresentableItemRenderer : object {
    [ThreadStaticAttribute]
internal static Layout ReusableLayout;
    public static void Arrange(Graphics g, IPresentableItem item, Size size, RenderParams renderParams, IThemedIconManager themedIconManager, RasterizationResolution resolution, Layout layout);
    public static Rectangle GetRichTextRectangle(Graphics g, Rectangle bounds, IPresentableItem item, RenderParams renderParams, IThemedIconManager themedIconManager, RasterizationResolution resolution, bool useAllLines);
    public static Rectangle GetTextBounds(Graphics g, Rectangle bounds, IPresentableItem item, RenderParams renderParams, IThemedIconManager themedIconManager, RasterizationResolution resolution);
    public static object HitTest(Graphics g, Point hitPoint, Rectangle bounds, IPresentableItem item, RenderParams renderParams, IThemedIconManager themedIconManager, Rectangle& elementRect, RasterizationResolution resolution);
    public static Size Measure(Graphics g, IPresentableItem item, RenderParams renderParams, IThemedIconManager themedIconManager, RasterizationResolution resolution);
    public static void Render(Graphics g, IPresentableItem item, Rectangle bounds, RenderParams renderParams, IThemedIconManager themedIconManager, RasterizationResolution resolution);
    public static void RenderAnimatedFrame(Graphics g, IPresentableItem item, Rectangle bounds, RenderParams renderParams, IThemedIconManager themedIconManager, double fFrame, RasterizationResolution resolution);
    public static void RenderCore(Graphics g, IPresentableItem item, Point location, RenderParams renderParams, IThemedIconManager themedIconManager, RasterizationResolution resolution, Layout layout, Nullable`1<double> fAnimatedFrame);
    private static RichText GetFirstLine(RichText text);
}
public class JetBrains.UI.Controls.VirtualListBoxControl`2 : Control {
    private CustomListBoxControl`1<TListItem> myListBox;
    private ScrollBar myScrollBar;
    [CanBeNullAttribute]
private IVirtualListBoxItemProvider`2<TListItem, TTag> myItemProvider;
    private Pair`2<int, int> myPosition;
    private int myStoredVirtualSelectedIndex;
    private SelectionMode myStoredSelectionMode;
    private ColumnStyle myScrollBarColumnStyle;
    private ColumnStyle myListBoxColumnStyle;
    private TableLayoutPanel myLayout;
    private EventHandler ItemsChanged;
    public int ItemsInList { get; }
    public IVirtualListBoxItemProvider`2<TListItem, TTag> ItemProvider { get; public set; }
    public bool IsSelectedItemVisible { get; }
    public int VirtualSelectedIndex { get; }
    public CustomListBoxControl`1<TListItem> ListBox { get; }
    public VirtualListBoxControl`2(IVirtualListBoxItemProvider`2<TListItem, TTag> itemProvider);
    public void add_ListBoxClick(EventHandler value);
    public void remove_ListBoxClick(EventHandler value);
    public void add_ItemsChanged(EventHandler value);
    public void remove_ItemsChanged(EventHandler value);
    public int get_ItemsInList();
    public void ScrollSelectedToCenter();
    public void ScrollSelectedToTop();
    private void TrySetPosition(Pair`2<int, int> newPosition, int itemCount);
    private void ShowScrollBar();
    private void ScrollList(int delta, bool updateScrollBar);
    private void UpdateItems(bool fireItemsUpdated);
    public void SetPosition(Pair`2<int, int> value, bool updateScrollbar, bool fireItemsUpdated);
    private void UpdateScrollBarPosition();
    public IVirtualListBoxItemProvider`2<TListItem, TTag> get_ItemProvider();
    public void set_ItemProvider(IVirtualListBoxItemProvider`2<TListItem, TTag> value);
    public bool get_IsSelectedItemVisible();
    public int get_VirtualSelectedIndex();
    public void MoveSelectionDown(bool isCyclingSelection, int pageSize);
    public void MoveSelectionUp(bool isCyclingSelection, int pageSize);
    private Pair`2<int, int> GetStartPosition(int start);
    private Pair`2<int, int> GetEndPosition();
    public CustomListBoxControl`1<TListItem> get_ListBox();
    public void SelectItemWithIndex(int itemIndex);
    public object GetVirtualSelectedItem();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object sender, MouseEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <ShowScrollBar>b__7();
    [CompilerGeneratedAttribute]
private void <ShowScrollBar>b__8(object sender, ScrollEventArgs args);
}
public static class JetBrains.UI.Controls.Watermark : object {
    public static DependencyProperty ContentProperty;
    [CompilerGeneratedAttribute]
private static Func`2<Adorner, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    private static Watermark();
    private static void OnWatermarkChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void ElementOnLoaded(object sender, RoutedEventArgs routedEventArgs);
    private static void ElementOnIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void UpdateWatermarkWhenVisible(FrameworkElement uiElement);
    private static void UpdateWatermark(UIElement uiElement);
    public static void SetContent(DependencyObject element, object value);
    public static object GetContent(DependencyObject element);
    [CompilerGeneratedAttribute]
private static bool <UpdateWatermark>b__0(Adorner x);
}
public class JetBrains.UI.Controls.WindowChrome : object {
    public static DependencyProperty WindowChromeProperty;
    public static DependencyProperty IsCaptionElementProperty;
    private static Dictionary`2<Window, List`1<UIElement>> ourCaptionElements;
    private ILogger myLogger;
    private Window myWindow;
    private HwndSource myHwndSource;
    private Color myCompositionTargetSavedBackgroundColor;
    private bool myIsFirstTimeActivated;
    private Thickness myResizeBorderThickness;
    private bool myUseAeroCaptionButtons;
    private Thickness myGlassFrameThickness;
    private Thickness myCornerRadius;
    public bool IsDwmEnabled { get; }
    public Thickness ResizeBorderThickness { get; public set; }
    public bool UseAeroCaptionButtons { get; public set; }
    public Thickness GlassFrameThickness { get; public set; }
    public Thickness CornerRadius { get; public set; }
    private static WindowChrome();
    public static WindowChrome GetWindowChrome(DependencyObject obj);
    public static void SetWindowChrome(DependencyObject obj, WindowChrome value);
    private static void OnWindowChromeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetIsCaptionElement(DependencyObject obj);
    public static void SetIsCaptionElement(DependencyObject obj, bool value);
    private static void OnIsCaptionElementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsDwmEnabled();
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    public bool get_UseAeroCaptionButtons();
    public void set_UseAeroCaptionButtons(bool value);
    public Thickness get_GlassFrameThickness();
    public void set_GlassFrameThickness(Thickness value);
    public Thickness get_CornerRadius();
    public void set_CornerRadius(Thickness value);
    private void Attach(Window window);
    private void Detach();
    private void HookUpWindow();
    private void HookUpWindow(IntPtr handle);
    private void UnhookWindow();
    private void UpdateWindowGlass();
    private void Catch(Action action);
    private void OnWindowClosed(object sender, EventArgs e);
    private void OnSourceInitialized(object sender, EventArgs e);
    private IntPtr WndProc(IntPtr hwndstruct, int msg, IntPtr wparam, IntPtr lparam, Boolean& handled);
    [CompilerGeneratedAttribute]
private void <OnSourceInitialized>b__1();
}
public static class JetBrains.UI.Controls.WindowlessControl : object {
    [NotNullAttribute]
public static IWindowlessControl Create(string text);
    [NotNullAttribute]
public static IWindowlessControl Create(Lifetime lifetime, IPresentableItem presentableItem, ITheming theming);
    [NotNullAttribute]
public static IWindowlessControl Create(Lifetime lifetime, IPresentableItem presentableItem, RenderParams renderParams, ITheming theming);
    public static IWindowlessControl Create(RichTextBlock block);
    public static IWindowlessControl Create(RichTextBlock block, RenderParams renderParams);
    public static IWindowlessControl Create(RichText richText);
    public static IWindowlessControl Create(Image bitmap);
    private static IconId IsPresentableItemSingleImageOnly(IPresentableItem presentableItem);
    private static bool IsPresentableItemEmpty(IPresentableItem presentableItem);
    private static RichText IsPresentableItemTextOnly(IPresentableItem presentableItem);
}
public class JetBrains.UI.Controls.WindowlessControlElement : FrameworkElement {
    private Property`1<Func`2<Size, Size>> myFArrangeOverride;
    private Property`1<Func`2<Size, Size>> myFMeasureOverride;
    private Property`1<Action`1<DrawingContext>> myFRender;
    public AlphaChannel AlphaChannel;
    public IProperty`1<IWindowlessControl> Presentation;
    public ISignal`1<GetJetTooltipEventArgs> TooltipRequested;
    [CompilerGeneratedAttribute]
private static Func`2<Size, Size> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Size, Size> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Size, Size> CS$<>9__CachedAnonymousMethodDelegated;
    public WindowlessControlElement(Lifetime lifetime);
    private void InitDataFlow(Lifetime lifetime);
    private void InitTooltips();
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    [CompilerGeneratedAttribute]
private static Size <.ctor>b__0(Size size);
    [CompilerGeneratedAttribute]
private static Size <.ctor>b__1(Size size);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__4(Lifetime lwc, IWindowlessControl wc);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__c(PropertyChangedEventArgs`1<IWindowlessControl> args);
    [CompilerGeneratedAttribute]
private static Size <InitDataFlow>b__5(Size sizeDesired);
    [CompilerGeneratedAttribute]
private void <InitTooltips>b__15(object sender, GetJetTooltipEventArgs args);
}
[ShellComponentAttribute]
internal class JetBrains.UI.Controls.WindowsCommonDialogs : object {
    public sealed virtual void EnterStringAsync(Lifetime lifetime, IDataContext context, string title, string label, string initialValue, Action`1<string> callback, Func`2[] validators);
    private static string GetString(IDataContext context, string title, string label, string initialValue, Func`2[] validators);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.UI.Controls.WindowsCommonFileDialog : object {
    private IWindowBranding myBranding;
    public WindowsCommonFileDialog(IWindowBranding branding);
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForFolder(string title, FileSystemPath initialFolder, IWindowOwner owner);
    private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForFoldersWithMultiselect(string title, FileSystemPath initialFolder, IWindowOwner owner);
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenFile(string windowtitle, ChooseFileType[] filetypes);
    private sealed virtual override ICollection`1<FileSystemPath> JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenMultipleFiles(string windowtitle, ChooseFileType[] filetypes);
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForSaveFile(string windowtitle, ChooseFileType[] filetypes);
    private static bool IsPathValid(FileSystemPath path);
}
public class JetBrains.UI.Controls.WindowShadow : object {
    private Point myLeftShadowOffset;
    private Point myRightShadowOffset;
    private Point myTopShadowOffset;
    private Point myBottomShadowOffset;
    private Window myLeftShadow;
    private Window myRightShadow;
    private Window myTopShadow;
    private Window myBottomShadow;
    private Window myWnd;
    private DispatcherTimer myDelayTimer;
    private bool myIsMinimized;
    private bool myShadowShown;
    private ILogger myLogger;
    private static DependencyProperty WindowShadowProperty;
    private object myLeftFill;
    private object myRightFill;
    private object myTopFill;
    private object myBottomFill;
    private Style myShadowWindowStyle;
    public object LeftFill { get; public set; }
    public object RightFill { get; public set; }
    public object TopFill { get; public set; }
    public object BottomFill { get; public set; }
    public Style ShadowWindowStyle { get; public set; }
    private static WindowShadow();
    public static WindowShadow GetWindowShadow(DependencyObject obj);
    public static void SetWindowShadow(DependencyObject obj, WindowShadow value);
    private static void OnWindowShadowChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public object get_LeftFill();
    public void set_LeftFill(object value);
    public object get_RightFill();
    public void set_RightFill(object value);
    public object get_TopFill();
    public void set_TopFill(object value);
    public object get_BottomFill();
    public void set_BottomFill(object value);
    public Style get_ShadowWindowStyle();
    public void set_ShadowWindowStyle(Style value);
    private void AttachWindow(Window wnd);
    private void DetachWindow();
    private void ShadowWindowSourceInitialized(object sender, EventArgs e);
    private void CloseShadows();
    private void UpdateShadowZOrder(Window shadowWindow);
    private void OpenShadows();
    private void DelayShowShadows();
    private void OnDelayShowTimerTick(object sender, EventArgs e);
    private void HideShadows();
    private void ShowShadows();
    private void UpdateShadow();
    private void SetShadowOpacity(double opacity, bool animated);
    private void SetOpacity(Window element, double to, bool animated);
    private void ResizeAndMoveShadows(Point shadowOffset, Window shadowWindow);
    private void UpdateResizeBehavior();
    private void OnShadowMouseDown(object sender, MouseButtonEventArgs e);
    private void Catch(Action action);
    private void OnClosed(object sender, EventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void OnStateChanged(object sender, EventArgs e);
    private void OnRenderSizeChanged(object sender, EventArgs e);
    private void OnLocationChanged(object sender, EventArgs e);
    private void OnWindowDeactivated(object sender, EventArgs e);
    private void OnWindowActivated(object sender, EventArgs e);
    private void DragSize(IntPtr handle, SizingAction sizingAction);
    [CompilerGeneratedAttribute]
private void <OnStateChanged>b__4();
    [CompilerGeneratedAttribute]
private void <OnWindowDeactivated>b__5();
    [CompilerGeneratedAttribute]
private void <OnWindowActivated>b__6();
}
public static class JetBrains.UI.CrossFramework.AvalonBitmapInterop : object {
    [NotNullAttribute]
public static BitmapSource RenderGdipIntoAvalonImage(Size size, AlphaChannel alpha, Action`1<Graphics> FRender);
    [NotNullAttribute]
public static BitmapSource RenderGdipIntoAvalonImage_GdiBitmap_DIBitmap(Size size, AlphaChannel alpha, Action`1<Graphics> FRender);
    [NotNullAttribute]
public static BitmapSource RenderGdipIntoAvalonImage_GdipBitmap(Size size, AlphaChannel alpha, Action`1<Graphics> FRender);
    private static ImageBrush CreateGlyphBrushForMarkerType();
    [NotNullAttribute]
private static BitmapSource RenderGdipIntoAvalonImage_GdiBitmap_DIBSection(Size size, AlphaChannel alpha, Action`1<Graphics> FRender);
}
public class JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap : object {
    private ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
    private AlphaChannel myAlpha;
    [CanBeNullAttribute]
private WriteableBitmap myBitmap;
    private Nullable`1<Size> myLogicalSize;
    private ResizePolicy myResizePolicy;
    public GdipWritableAvalonBitmap(ResizePolicy policy, AlphaChannel alpha);
    public void PaintGdip(Size sizeNew, Action`1<Graphics> FRender);
    public void Render(DrawingContext dc, Rect rect);
    private static double ChooseBitmapSizeByPolicy_LazyDim(double exact, double characteristic);
    private Size ChooseBitmapSizeByPolicy(Size sizeLogical);
    private void RecreateBitmap(Size sizeLogical);
    private void SetLogicalSize(Size sizeLogical);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private object <PaintGdip>b__b();
    [CompilerGeneratedAttribute]
private object <PaintGdip>b__e();
    [CompilerGeneratedAttribute]
private object <ChooseBitmapSizeByPolicy>b__1a();
    [CompilerGeneratedAttribute]
private object <SetLogicalSize>b__1c();
}
[ExtensionAttribute]
public static class JetBrains.UI.CrossFramework.RichTextEx : object {
    [ExtensionAttribute]
public static Span ToSpan(RichText richText, bool handleAccessKeyCharacter, bool adjustContrast, Color foregroundHint, Color backgroundHint);
    private static bool IsEmpty(Color color);
    private static Brush GetSimilarForeground(Color foreground, Color goodForeground);
    private static Brush GetContrastForeground(Color foreground, Color background);
    private static Brush ToBrush(Color color);
}
[ExtensionAttribute]
public static class JetBrains.UI.CrossFramework.WindowsFormsIntegration : object {
    [ExtensionAttribute]
public static TElement SetFontA(TElement element, Font font);
    [ExtensionAttribute]
public static TElement SetFontB(TElement element, Font font, bool sized);
    [ExtensionAttribute]
public static TElement SetFontC(TElement element, Font font, bool sized);
    [ExtensionAttribute]
public static Cursor ToAvalonCursor(Cursor thіs);
    [ExtensionAttribute]
public static Image ToAvalonImage(Image value);
    [ExtensionAttribute]
public static BitmapSource ToAvalonImageSource(Image value);
    [ExtensionAttribute]
public static ImageSource ToAvalonImageSource(Icon value);
    [ExtensionAttribute]
public static ImageSource ToAvalonImageSourceMayBeSlow(Icon value);
    [ExtensionAttribute]
[NotNullAttribute]
public static ImageSource ToImageSource(Icon icon);
    [ExtensionAttribute]
public static MessageBoxButtons ToWinFormsMessageBoxButtons(MessageBoxButton button);
    [ExtensionAttribute]
public static MessageBoxIcon ToWinFormsMessageBoxIcon(MessageBoxImage image);
    [ExtensionAttribute]
public static MouseButtons ToWinFormsMouseButton(MouseButton button);
}
public class JetBrains.UI.DataContext.DataRuleProviderBehaviour : object {
    public static DependencyProperty DataRulesProviderProperty;
    private static DataRuleProviderBehaviour();
    public static IDataRuleProvider GetDataRulesProvider(UIElement element);
    public static void SetDataRulesProvider(UIElement element, object value);
    private static void ProvideDataRules(Lifetime lifetime, IDataRuleProvider provider, FrameworkElement element);
}
[ExportFindDataRulesAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.DataContext.FindAvalonAndWinFormsDataRules : object {
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindActiveDataRules();
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindDataRulesAtPoint(Point ptScreen);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindDataRulesInControl(EitherControl control);
    [NotNullAttribute]
private static IEnumerable`1<IDataRule> FindInAvalonElementAndAvalonParents(IInputElement element);
    private static IEnumerable`1<IDataRule> FindInThisControl(Control control);
    private IEnumerable`1<IDataRule> FindInParentHwndAndParents(IntPtr hwnd);
    private IEnumerable`1<IDataRule> FindInThisHwndAndParents(IntPtr hwnd, Point ptScreenReference);
    [NotNullAttribute]
private static IEnumerable`1<IDataRule> FindInHwndSource(HwndSource hwnds, Point ptScreenReference);
    private IEnumerable`1<IDataRule> FindInThisHwndNonAvalon(IntPtr hwnd);
}
[ExportFindDataRulesAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.DataContext.FindAvalonDataRules : object {
    [NotNullAttribute]
private static IEnumerable`1<IDataRule> FindDataRulesInElement(IInputElement element);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindActiveDataRules();
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindDataRulesAtPoint(Point ptScreen);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IFindDataRules.FindDataRulesInControl(EitherControl control);
}
public class JetBrains.UI.DataContext.GetDataRulesEventArgs : RoutedEventArgs {
    [NotNullAttribute]
public static RoutedEvent GetDataRulesEvent;
    [NotNullAttribute]
public List`1<IDataRule> DataRules;
    public static DependencyProperty GetDataRulesBehaviorProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate2;
    public GetDataRulesEventArgs(object source);
    private static GetDataRulesEventArgs();
    public static GetDataRulesEventHandler GetGetDataRulesBehavior(UIElement element);
    public static void SetGetDataRulesBehavior(UIElement element, GetDataRulesEventHandler value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
internal class JetBrains.UI.Effects.EasingDoubleAnimation : DoubleAnimation {
    private TimeSpan myDelay;
    private Func`4<double, double, double, double> myEasing;
    public EasingDoubleAnimation(TimeSpan delay, double fromValue, double toValue, Duration duration, Func`4<double, double, double, double> easing, FillBehavior fillBehavior);
    public static double ExpOutTween(double a, double b, double t);
    public static double LinearTween(double a, double b, double t);
    protected virtual Freezable CreateInstanceCore();
    protected virtual double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, AnimationClock animationClock);
}
public class JetBrains.UI.Effects.GrayscaleEffect : ShaderEffect {
    public static DependencyProperty InputProperty;
    public static DependencyProperty DesaturationFactorProperty;
    public Brush Input { get; public set; }
    public double DesaturationFactor { get; public set; }
    private static GrayscaleEffect();
    public Brush get_Input();
    public void set_Input(Brush value);
    public double get_DesaturationFactor();
    public void set_DesaturationFactor(double value);
    private static object CoerceDesaturationFactor(DependencyObject d, object value);
}
public class JetBrains.UI.Effects.RichTextEffects : object {
    public static DependencyProperty IsMonochromeProperty;
    private static RichTextEffects();
    public static void SetIsMonochrome(DependencyObject element, bool value);
    public static bool GetIsMonochrome(DependencyObject element);
}
[ExtensionAttribute]
public static class JetBrains.UI.Effects.Transition : object {
    public static DependencyProperty SlideDirectionProperty;
    public static DependencyProperty SlideOnProperty;
    public static DependencyProperty HoldbackProperty;
    private static Transition();
    [ExtensionAttribute]
public static void Slide(UIElement uiElement, Nullable`1<TransitionDirection> direction, int holdback);
    private static void SlideInternal(UIElement uiElement, TransitionDirection direction, int holdback);
    private static void ExecuteOrScheduleWhenVisible(UIElement uiElement, Action action);
    public static void SetSlideDirection(DependencyObject element, TransitionDirection value);
    public static TransitionDirection GetSlideDirection(DependencyObject element);
    private static void OnSlideOnChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs arguments);
    public static void SetSlideOn(DependencyObject element, object value);
    public static object GetSlideOn(DependencyObject element);
    private static void OnHoldbackChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetHoldback(DependencyObject element, int value);
    public static int GetHoldback(DependencyObject element);
    private static void SetCurrentValue(IAnimatable element, DependencyProperty dependencyProperty, object value, Duration duration);
}
public enum JetBrains.UI.Effects.TransitionDirection : Enum {
    public int value__;
    public static TransitionDirection Left;
    public static TransitionDirection Right;
    public static TransitionDirection Top;
    public static TransitionDirection Bottom;
}
public class JetBrains.UI.ExceptionReport.AutoSizeTabControl : TabControl {
    public virtual Size GetPreferredSize(Size proposedSize);
}
public class JetBrains.UI.ExceptionReport.AuxiliaryTaskExecutor : object {
    public ISimpleSignal Disposing;
    public IProperty`1<ExecutionState> StateProperty;
    private Func`3<Lifetime, IProgressIndicatorModel, IntPtr> myAttachUI;
    private ProgressIndicator myProgressIndicator;
    private TaskThreadAffinity myTaskThreadAffinity;
    private LifetimeDefinition myLifetimeDefinition;
    private IWin32Window myParentWindow;
    private IThreading myThreading;
    private WorkerThreadShop myWorkerThreadShop;
    public AuxiliaryTaskExecutor(TaskThreadAffinity taskThreadAffinity, Func`3<Lifetime, IProgressIndicatorModel, IntPtr> funcAttachUi, IWin32Window parentWindow, IThreading threading, WorkerThreadShop workerThreadShop);
    public void Cancel();
    public sealed virtual bool ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.UI.ExceptionReport.Charisma.CharismaIssueTracker : object {
    private IUIApplication myEnvironment;
    private CharismaConnector myConnector;
    [CompilerGeneratedAttribute]
private string <AnonymousUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnonymousPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    public string AnonymousUserName { get; public set; }
    public string AnonymousPassword { get; public set; }
    private bool IsInternal { get; public set; }
    public CharismaIssueTracker(Uri server, string projectName, string submitSubsystem, IApplicationHost descriptor, IUIApplication environment, IExceptionHandlingService exceptionHandlingService);
    [CompilerGeneratedAttribute]
public string get_AnonymousUserName();
    [CompilerGeneratedAttribute]
public void set_AnonymousUserName(string value);
    [CompilerGeneratedAttribute]
public string get_AnonymousPassword();
    [CompilerGeneratedAttribute]
public void set_AnonymousPassword(string value);
    public sealed virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public sealed virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual Nullable`1<LoginInformation> Register();
    public sealed virtual CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    public sealed virtual Uri GetUrlForAttachmentsUpload();
    [CompilerGeneratedAttribute]
private bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInternal(bool value);
}
public abstract class JetBrains.UI.ExceptionReport.DetailsPanelBase : DockPanel {
    unknown string Details {public set; }
    public abstract virtual void set_Details(string value);
}
public class JetBrains.UI.ExceptionReport.ExceptionAnalyzer.ExceptionStatusBarIndicator : object {
    [CanBeNullAttribute]
private JetStatusBarIndicator myStatusBarIndicator;
    private StatusBarIndicatorState myStatusBarIndicatorState;
    private ExceptionManager myExceptionManager;
    private Lifetime myLifetime;
    private IThreading myInvocator;
    private IDisposable myBlinker;
    private Action myStatusBarIndicatorClickAction;
    private ShellExceptionReportComponent myShellExceptionReportComponent;
    private IExceptionSubmitter myExceptionSubmitter;
    public ExceptionStatusBarIndicator(Lifetime lifetime, ShellExceptionReportComponent shellExceptionReportComponent, IExceptionSubmitter exceptionSubmitter, ExceptionManager exceptionManager, IStatusBar statusBar, IThreading invocator, SubmitToTrackerExceptionReportService repservice, Action statusBarIndicatorClickAction, IThemedIconManager uiIconsComponent);
    public void SetSubmissionInProgressState(int exceptionsBeingSubmittedCount, bool automatic);
    public void SetSubmissionSuccessfulState(int submittedExceptionsCount);
    public void StopBlinking();
    public void OnExceptionBrowserShown();
    public void UpdateIndicatorState(bool hideIndicator);
    private void OnContextMenu(ContextMenuEventArgs args);
    public void HideIndicator();
    private void ShowIndicator(IconId icon, RichText tooltip);
    public void BlinkIndicatorIfNecessary();
    private void BlinkIndicator();
    private bool CreateStatusBarIndicator(Lifetime lifetime, IStatusBar statusBar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <CreateStatusBarIndicator>b__14(MouseEventArgs args);
}
public enum JetBrains.UI.ExceptionReport.ExceptionAnalyzer.StatusBarIndicatorState : Enum {
    public int value__;
    public static StatusBarIndicatorState NoExceptions;
    public static StatusBarIndicatorState ReadException;
    public static StatusBarIndicatorState NewException;
    public static StatusBarIndicatorState AutomaticSubmissionInProgress;
    public static StatusBarIndicatorState UserSubmissionInProgress;
    public static StatusBarIndicatorState ExceptionsSubmitted;
}
public class JetBrains.UI.ExceptionReport.ExceptionInfoControl : UserControl {
    public IProperty`1<ExceptionData> ExceptionProperty;
    private IWindowBranding myBranding;
    public ExceptionInfoControl(Lifetime lifetime, IWindowBranding branding, InternalMode internalmode);
}
public class JetBrains.UI.ExceptionReport.ExceptionNotifierPopupWindow : OwnedForm {
    [NotNullAttribute]
private static PopupWindowMutex myPopupWindowMutex;
    private Size myDesiredSizeSnapshot;
    [NotNullAttribute]
private ISimpleSignal myWantsResize;
    [NotNullAttribute]
private ObsoleteLifetimeAndDefinitionAtTheSameTime myDisposables;
    [NotNullAttribute]
private OpacityAnimation myOpacityAnimation;
    [NotNullAttribute]
private PopupFormController myPopupWindow;
    private bool myIsShowingSubmissionResult;
    private bool myMouseHover;
    private IProperty`1<ExceptionData> myLastException;
    private ShellExceptionReportComponent myOwner;
    private IShellLocks myShellLocks;
    [CompilerGeneratedAttribute]
private bool <AutoActivate>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    private bool IsMouseHover { get; private set; }
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    protected CreateParams CreateParams { get; }
    protected bool ShowWithoutActivation { get; }
    public ExceptionNotifierPopupWindow(ShellExceptionReportComponent shellExceptionReportComponent, IMainWindow mainwin, IIsApplicationActiveState isApplicationActiveState, IWindowsHookManager windowsHookManager, PopupWindowManager popupWindowManager, IEnumerable`1<ExceptionData> exceptions, IThemedIconManager thicman, IWindowBranding windowBranding, IShellLocks locks);
    private static ExceptionNotifierPopupWindow();
    private bool get_IsMouseHover();
    private void set_IsMouseHover(bool value);
    private void InitSubmittedExceptionsLayout(IEnumerable`1<ExceptionData> submittedExceptions, IThemedIconManager thicman);
    private void InitPendingExceptionsLayout(IEnumerable`1<ExceptionData> pendingExceptions, IThemedIconManager thicman, IWindowBranding windowBranding);
    protected virtual void OnMouseClick(MouseEventArgs e);
    private void HandleClick(object sender, MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    private void HandleMouse();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoActivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual ISimpleSignal get_WantsResize();
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void SetLayout(LayoutResult layout);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void WndProc(Message& m);
    protected virtual CreateParams get_CreateParams();
    protected virtual bool get_ShowWithoutActivation();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__3(ExceptionData ex);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__4(ExceptionData ex);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__5(ExceptionData ex);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6(AddRemoveEventArgs`1<ExceptionData> args);
}
[ShellComponentAttribute]
public class JetBrains.UI.ExceptionReport.ExceptionReportingIconSet : object {
    private bool myInitialized;
    private Func`1<ITheming> myIconmanCreate;
    private ThemedIconLoader myRefresh;
    private ThemedIconLoader mySubmittingExceptionInProgress;
    private ThemedIconLoader mySuccess;
    private ThemedIconLoader myErrorOn;
    private ThemedIconLoader myErrorRead;
    private ThemedIconLoader myHourglass;
    private ThemedIconLoader myError;
    private ThemedIconLoader myEdit;
    private ThemedIconLoader myDelete;
    private ThemedIconLoader myDetails;
    private ThemedIconLoader myMute;
    public ThemedIconLoader Error { get; }
    public ThemedIconLoader Refresh { get; }
    public ThemedIconLoader SubmittingExceptionInProgress { get; }
    public ThemedIconLoader Success { get; }
    public ThemedIconLoader ErrorOn { get; }
    public ThemedIconLoader ErrorRead { get; }
    public ThemedIconLoader Hourglass { get; }
    public ThemedIconLoader Edit { get; }
    public ThemedIconLoader Delete { get; }
    public ThemedIconLoader Details { get; }
    public ThemedIconLoader Mute { get; }
    public ExceptionReportingIconSet(IThemedIconManager iconman);
    public ExceptionReportingIconSet(Func`1<ITheming> iconmanCreate);
    public ExceptionReportingIconSet(ThemedIconLoader refresh, ThemedIconLoader success, ThemedIconLoader error, ThemedIconLoader submittingExceptionInProgress, ThemedIconLoader errorOn, ThemedIconLoader errorRead, ThemedIconLoader hourglass, ThemedIconLoader edit, ThemedIconLoader delete, ThemedIconLoader details, ThemedIconLoader mute);
    public ThemedIconLoader get_Error();
    public ThemedIconLoader get_Refresh();
    public ThemedIconLoader get_SubmittingExceptionInProgress();
    public ThemedIconLoader get_Success();
    public ThemedIconLoader get_ErrorOn();
    public ThemedIconLoader get_ErrorRead();
    public ThemedIconLoader get_Hourglass();
    public ThemedIconLoader get_Edit();
    public ThemedIconLoader get_Delete();
    public ThemedIconLoader get_Details();
    public ThemedIconLoader get_Mute();
    private void InitOnDemand();
    public IconSet GetTrackerLoginFormIconSet();
}
[ObsoleteAttribute]
public class JetBrains.UI.ExceptionReport.ExceptionSubmitForm : Form {
    private ObsoleteLifetimeAndDefinitionAtTheSameTime myDisposables;
    public IProperty`1<LoginInformation> LoginInformationProperty;
    public IProperty`1<IIssueTracker> IssueTrackerProperty;
    private IProperty`1<string> DescriptionProperty;
    private IProperty`1<bool> SubmitPrivatelyProperty;
    private Manager myTaskManager;
    private SubmitInfoControl mySubmitInfoControl;
    private IWebProxy myWebProxy;
    [CompilerGeneratedAttribute]
private ExceptionData <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SampleErrorReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopShowingExceptions>k__BackingField;
    public ExceptionData Exception { get; private set; }
    public string SampleErrorReport { get; public set; }
    public bool StopShowingExceptions { get; private set; }
    public ExceptionSubmitForm(Lifetime lifetimeSubmitForm, ExceptionData exceptionData, OpensUri opensUri, WebProxySettingsReader proxySettings, ExceptionReportingIconSet exceptionReportingIconSet, IThreading threading, WorkerThreadShop workerThreadShop, IWindowBranding branding, InternalMode internalmode);
    [CompilerGeneratedAttribute]
public ExceptionData get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(ExceptionData value);
    [CompilerGeneratedAttribute]
public string get_SampleErrorReport();
    [CompilerGeneratedAttribute]
public void set_SampleErrorReport(string value);
    [CompilerGeneratedAttribute]
public bool get_StopShowingExceptions();
    [CompilerGeneratedAttribute]
private void set_StopShowingExceptions(bool value);
    private void SubmitException();
    private ITaskExecutor GetExecutor();
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <SubmitException>b__35(IProgressIndicator indicator);
}
public interface JetBrains.UI.ExceptionReport.IDetailsProvider {
    public abstract virtual DetailsPanelBase RenderDetails(Lifetime lifetime);
}
public class JetBrains.UI.ExceptionReport.JiraIssueTracker : object {
    private static string ExceptionIssueType;
    private static string NormalPriorityName;
    private static LoginInformation Anonymous;
    private static TimeSpan ourDefaultOperationTimeout;
    private string myProjectKey;
    private string mySubmitComponent;
    [NotNullAttribute]
public IApplicationHost ApplicationHost;
    private string myJiraUrl;
    private XmlRpcStruct myBuildField;
    private IUIApplication myUiApplication;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<XmlRpcStruct, bool> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<XmlRpcStruct, bool> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate44;
    private bool IsInternal { get; public set; }
    public JiraIssueTracker(string jiraUrl, string projectKey, string submitComponent, IApplicationHost applicationHost, IUIApplication uiApplication);
    private static JiraIssueTracker();
    public sealed virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public sealed virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual Nullable`1<LoginInformation> Register();
    public sealed virtual CredentialsVerificationResult VerifyCredentials(LoginInformation loginInformation);
    public sealed virtual Uri GetUrlForAttachmentsUpload();
    [CompilerGeneratedAttribute]
private bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInternal(bool value);
    [CompilerGeneratedAttribute]
private bool <SubmitException>b__13(XmlRpcStruct c);
    [CompilerGeneratedAttribute]
private static bool <SubmitException>b__14(XmlRpcStruct it);
    [CompilerGeneratedAttribute]
private static bool <SubmitException>b__15(XmlRpcStruct p);
    [CompilerGeneratedAttribute]
private static bool <VerifyCredentials>b__41();
}
public class JetBrains.UI.ExceptionReport.LoginControl : UserControl {
    public Property`1<LoginInformation> LoginInformationProperty;
    public Property`1<IIssueTracker> IssueTrackerProperty;
    public LoginControl(Lifetime lifetime, IWin32Window mainWindow, IconSet trackericons);
}
[ShellComponentAttribute]
public class JetBrains.UI.ExceptionReport.ShellExceptionReportComponent : object {
    [NotNullAttribute]
private ISignal`1<ExceptionData> myExceptionSignal;
    [NotNullAttribute]
private ISignal`1<IEnumerable`1<ExceptionData>> myExceptionsSubmittedSignal;
    [NotNullAttribute]
public WebProxySettingsReader ProxySettings;
    private bool myNotifierWindowCreated;
    private ExceptionNotifierPopupWindow myNotifierWindow;
    [NotNullAttribute]
public IProperty`1<LoginInformation> LoginInformationProperty;
    [NotNullAttribute]
public IProperty`1<string> UserCommentProperty;
    [NotNullAttribute]
public IProperty`1<bool> SubmitPrivatelyProperty;
    [NotNullAttribute]
public IProperty`1<bool> ShowBrowserFormAfterSubmission;
    [NotNullAttribute]
public IProperty`1<bool> SubmitAutomatically;
    [NotNullAttribute]
public IProperty`1<bool> StoreExceptions;
    [NotNullAttribute]
public IProperty`1<bool> WatchExceptionStorage;
    [NotNullAttribute]
public IProperty`1<bool> AttachSensitiveData;
    private Lifetime myLifetime;
    private ReportAttachmentPartsContainer myReportAttachmentParts;
    private IIsApplicationActiveState myIsApplicationActiveState;
    private OpensUri myOpensUri;
    private Clipboard myClipboard;
    private IUIApplication myEnvironment;
    [NotNullAttribute]
private IIssueTracker myIssueTracker;
    [CanBeNullAttribute]
private IMainWindow myMainWindow;
    [CanBeNullAttribute]
private IWindowsHookManager myWindowsHookManager;
    [CanBeNullAttribute]
private PopupWindowManager myPopupWindowManager;
    private ExceptionManager myExceptionManager;
    private ExceptionStatusBarIndicator myStatusBarIndicator;
    private ExceptionReportingIconSet myExceptionReportingIconSet;
    private IStatusBar myStatusBar;
    private IDetailsProvider myDetailsProvider;
    private UIExceptionSubmitter myExceptionSubmitter;
    private ProductConfigurations myProductConfigurations;
    private IActionBarManager myActionBarManager;
    private UserIdentificatorPartsContainer myUserIdentificatorPartsContainer;
    [CompilerGeneratedAttribute]
private bool <IsUiActive>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<Lifetime, DataContexts, IDataContext> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<IExceptionReportingApplicationTrait, IExceptionReportStrategy> CS$<>9__CachedAnonymousMethodDelegate2f;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, ISignal`1<ExceptionData>> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Action`1<ExceptionData> CS$<>9__CachedAnonymousMethodDelegate5c;
    public ExceptionManager ExceptionManager { get; }
    public bool IsUiActive { get; private set; }
    [NotNullAttribute]
public ISignal`1<ExceptionData> ExceptionSignal { get; }
    [NotNullAttribute]
public ISignal`1<IEnumerable`1<ExceptionData>> ExceptionsSubmittedSignal { get; }
    public int ExceptionCount { get; }
    public ICollectionEvents`1<ExceptionData> Exceptions { get; }
    public ExceptionBrowserHost ExceptionBrowser { get; }
    public ShellExceptionReportComponent(Lifetime lifetime, ExceptionReportingIconSet exceptionReportingIconSet, IMainWindow mainwin, AnyProductSettingsLocation settingsLocation, IStatusBar statusBar, IEnumerable`1<IExceptionReportDataProvider> exceptionReportDataProviders, IIsApplicationActiveState isApplicationActiveState, UITaskExecutor uiTaskExecutor, OpensUri opensUri, IWindowsHookManager windowsHookManager, PopupWindowManager popupWindowManager, WebProxySettingsReader proxySettings, IFileSystemTracker fileSystemTracker, IExceptionStorageBehavior exceptionStorageBehavior, Clipboard clipboard, IUIApplication environment, ProductConfigurations productConfigurations, ReportAttachmentPartsContainer reportAttachmentParts, UserIdentificatorPartsContainer userIdentificatorPartsContainer, IDetailsProvider detailsProvider, IHostProductInfo hostProductInfo, IIssueTracker issueTracker, IEnumerable`1<IExceptionReportingApplicationTrait> enumExceptionReportingApplicationTraits, IActionBarManager actionBarManager, IsModeReportExceptionsComponent isModeReportExceptionsComponent);
    public ExceptionManager get_ExceptionManager();
    public void HideNotifier();
    [CompilerGeneratedAttribute]
public bool get_IsUiActive();
    [CompilerGeneratedAttribute]
private void set_IsUiActive(bool value);
    public ISignal`1<ExceptionData> get_ExceptionSignal();
    public ISignal`1<IEnumerable`1<ExceptionData>> get_ExceptionsSubmittedSignal();
    public int get_ExceptionCount();
    public ICollectionEvents`1<ExceptionData> get_Exceptions();
    public void StopBlinking();
    public void RegisterException(ExceptionData exception);
    public static bool IsPending(ExceptionData exceptionData);
    private void OnStatusBarIndicatorClick();
    public void ShowExceptionBrowser(bool showSubmittedPage);
    public ExceptionBrowserHost get_ExceptionBrowser();
    public void SubmitExceptions(IWin32Window parentWindow, string description, Lifetime formLifetime, IIssueTracker issueTracker, IThreading threading, WebProxySettingsReader proxySettingsReader, LoginInformation loginInformation, ExceptionData[] exceptions, Action`1<ICollection`1<ExceptionData>> continuation, Action`1<MouseEventArgs> statusBarClickHandler, ExceptionReportingIconSet iconset, IStatusBar statusbar, IThemedIconManager iconman, IWindowBranding windowBranding);
    private static void SubmitExceptionsInternal(string description, bool submitPrivately, bool attachSensitiveData, IIssueTracker issueTracker, IThreading threading, WebProxySettingsReader proxySettingsReader, LoginInformation loginInformation, ExceptionData[] exceptions, IProgressIndicator progressIndicator, Action`1<ICollection`1<ExceptionData>> continuation);
    [CompilerGeneratedAttribute]
private static IDataContext <.ctor>b__5(Lifetime l, DataContexts c);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__a(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__b(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__c(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__d(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__e(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__f(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15();
    [CompilerGeneratedAttribute]
private void <.ctor>b__16();
    [CompilerGeneratedAttribute]
private void <.ctor>b__17(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private static IExceptionReportStrategy <.ctor>b__18(IExceptionReportingApplicationTrait trait);
    [CompilerGeneratedAttribute]
private static ISignal`1<ExceptionData> <.ctor>b__19(ExceptionData data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1a();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1b();
    [CompilerGeneratedAttribute]
private static void <SubmitExceptionsInternal>b__59(ExceptionData e);
}
public static class JetBrains.UI.ExceptionReport.ShellLessExceptionReporting : object {
    public static void CreateAndInstall(Lifetime lifetime, HostInfo hostInfo, IWindowBranding windowBranding, Lazy`1<IEnumerable`1<JetPackageMetadata>> jetspecs);
    public static void CreateAndInstall(Lifetime lifetime, SerializedValuesResolver resolvesPackageComponents);
    public static void CreateAndInstallDeadEnd();
    public static void CreateAndInstallWithoutContext();
    [NotNullAttribute]
public static ExceptionReporting CreateDeadEnd();
}
public class JetBrains.UI.ExceptionReport.SmartExceptionReportStrategy : object {
    private JetHashSet`1<string> myIgnoredExceptions;
    private ISettingsStore mySettingsStore;
    public SmartExceptionReportStrategy(ISettingsStore settingsStore);
    public sealed virtual void Process(ExceptionData exceptionData, IExceptionReportService service, ITaskExecutor taskExecutor);
}
public class JetBrains.UI.ExceptionReport.SubmitInfoControl : UserControl {
    private static int MAX_COLUMNS;
    public IProperty`1<IEnumerable`1<ExceptionData>> ExceptionDataProperty;
    public SubmitInfoControl(OpensUri opensUri);
    private static void AddLabelToTable(OpensUri opensUri, Dictionary`2<ExceptionSubmissionResult, TableLayoutPanel> panelMapping, ExceptionSubmissionResult action, Dictionary`2<TableLayoutPanel, int> columnCounter, Dictionary`2<TableLayoutPanel, int> rowCounter);
}
public class JetBrains.UI.ExceptionReport.SubmitToTrackerExceptionReportService : object {
    [NotNullAttribute]
private IThreading myInvocator;
    [NotNullAttribute]
private ExceptionManager myExceptionManager;
    [NotNullAttribute]
private Lifetime myLifetime;
    [CanBeNullAttribute]
private IMainWindow myMainWindow;
    public IProperty`1<LoginInformation> LoginInformation;
    private OpensUri myOpensUri;
    private ExceptionReportingIconSet myExceptionReportingIconSet;
    private IWindowBranding myBranding;
    private InternalMode myInternalMode;
    private IIssueTracker myIssueTracker;
    private ExceptionBrowserHost myExceptionBrowser;
    [CompilerGeneratedAttribute]
private static Func`1<DetailsPanelBase> CS$<>9__CachedAnonymousMethodDelegatea;
    public SubmitToTrackerExceptionReportService(Lifetime lifetime, ExceptionManager exceptionManager, IThreading threading, IMainWindow mainwin, OpensUri opensUri, ExceptionReportingIconSet exceptionReportingIconSet, IWindowBranding branding, InternalMode internalmode, IIssueTracker issueTracker);
    public virtual void Log(ExceptionData exception);
    public virtual void Notify(ExceptionData exception);
    public virtual void RequireAction(ExceptionData exception);
    private void SubmitExceptionWithPromptInternal(ExceptionData exceptionOriginatedThisCall);
    private void ShowForm(ExceptionData exceptionOriginatedThisCall);
    [CompilerGeneratedAttribute]
private static DetailsPanelBase <ShowForm>b__8();
    [CompilerGeneratedAttribute]
private void <ShowForm>b__9(object sender, EventArgs args);
}
public class JetBrains.UI.ExceptionReport.TechnicalDetailsForm : Form {
    public Property`1<string> TechnicalInformationProperty;
    public TechnicalDetailsForm(IWindowBranding branding);
}
public class JetBrains.UI.ExceptionReport.TextBoxDetailsControl : DetailsPanelBase {
    private TextBox myTextBox;
    unknown string Details {public set; }
    public virtual void set_Details(string value);
}
public class JetBrains.UI.ExceptionReport.TrackerLoginForm : Form {
    private IIssueTracker myIssueTracker;
    private IconSet myIconSet;
    private Timer myVerifyCredentialsTimer;
    private TextBox myUserNameTextBox;
    private TextBox myPasswordTextBox;
    private object mySync;
    private Lifetime myLifetime;
    private IContainer components;
    private Label label6;
    private Label mySubmitLabel;
    private Button myCancelButton;
    private RadioButton myUseAccountInformationRadio;
    private RadioButton mySubmitAnonymouslyRadio;
    private Label label2;
    private Button myOkButton;
    private LinkLabel mySignUpLinkLabel;
    private Panel myUserNameBackPanel;
    private Panel myPasswordBackPanel;
    private PictureBox myStatusIcon;
    private Label myStatusText;
    [CompilerGeneratedAttribute]
private static Action`1<CredentialsVerificationComponent> CS$<>9__CachedAnonymousMethodDelegatec;
    public LoginInformation LoginInformation { get; public set; }
    public TrackerLoginForm(Lifetime lifetime, IIssueTracker issueTracker, IconSet trackericons);
    public LoginInformation get_LoginInformation();
    public void set_LoginInformation(LoginInformation value);
    protected virtual void OnClosed(EventArgs e);
    private void FireCredentialsVerification();
    private void OnCredentialsVerificationTimerElapsed();
    private void HideStatus();
    private void OnVerificationStatusChanged(CredentialsVerificationResult result);
    private void ShowVerificationSuccess();
    private void ShowVerificationProblem(string text, ThemedIconLoader icon, Panel highlight);
    private void ClearUserNamePasswordStatus();
    private void SetRunningStatus();
    private void ClearRunningStatus();
    private void myUseAccountInformationRadio_CheckedChanged(object sender, EventArgs e);
    private void UpdateControls();
    private void mySignUpLinkLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5(object sender, ElapsedEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnCredentialsVerificationTimerElapsed>b__9();
    [CompilerGeneratedAttribute]
private static void <HideStatus>b__b(CredentialsVerificationComponent c);
}
public class JetBrains.UI.ExceptionReport.UI.DependencyRun : Run {
    public static DependencyProperty DTextProperty;
    public string TextProperty { get; public set; }
    private static DependencyRun();
    private static void OnTextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public string get_TextProperty();
    public void set_TextProperty(string value);
}
public class JetBrains.UI.ExceptionReport.UI.DetailsControl : UserControl {
    private Clipboard myClipboard;
    private OpensUri myOpensUri;
    internal DetailsControl Page;
    internal RowDefinition SubmittedRow;
    internal RowDefinition IssueRow;
    internal RowDefinition MessageRow;
    internal Hyperlink IssueLink;
    internal Run IssueTextRun;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ExceptionData <Exception>k__BackingField;
    public ExceptionData Exception { get; private set; }
    public string ExceptionSummary { get; }
    public string ExceptionFullText { get; }
    public GridLength SubmittedHeight { get; }
    public int NumberOfTimesHappened { get; }
    public DateTime WhenLastHappened { get; }
    public string IssueId { get; }
    public Uri IssueUri { get; }
    public DateTime WhenSubmitted { get; }
    public string SubmitMessage { get; }
    public bool CanCopy { get; }
    public DetailsControl(ExceptionData exceptionData, Clipboard clipboard, OpensUri opensUri);
    [CompilerGeneratedAttribute]
public ExceptionData get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(ExceptionData value);
    public string get_ExceptionSummary();
    public string get_ExceptionFullText();
    public GridLength get_SubmittedHeight();
    public int get_NumberOfTimesHappened();
    public DateTime get_WhenLastHappened();
    public string get_IssueId();
    public Uri get_IssueUri();
    public DateTime get_WhenSubmitted();
    public string get_SubmitMessage();
    public bool get_CanCopy();
    private void CopyButton_OnClick(object sender, RoutedEventArgs e);
    private void IssueUri_OnClick(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.DetailsHost : Form {
    private IContainer components;
    public DetailsHost(Clipboard clipboard, OpensUri opensUri, ExceptionData exceptionData, IWindowBranding branding);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, RoutedEventArgs args);
}
public class JetBrains.UI.ExceptionReport.UI.DetailsHostControl : UserControl {
    private EventHandler`1<RoutedEventArgs> CloseButtonClicked;
    internal Grid Layout;
    private bool _contentLoaded;
    public DetailsHostControl(Clipboard clipboard, OpensUri opensUri, ExceptionData exceptionData);
    private void CloseButton_OnClick(object sender, RoutedEventArgs e);
    public void add_CloseButtonClicked(EventHandler`1<RoutedEventArgs> value);
    public void remove_CloseButtonClicked(EventHandler`1<RoutedEventArgs> value);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.EditDetailsWindow : Window {
    private ExceptionData myExeptionData;
    internal EditDetailsWindow This;
    internal TextBox ExceptionSummaryBox;
    internal TextBox ExceptionTextBox;
    internal TextBox SensitiveDataBox;
    internal StackPanel ButtonsPanel;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ExceptionReportingIconSet <IconSet>k__BackingField;
    public ExceptionReportingIconSet IconSet { get; private set; }
    public EditDetailsWindow(ExceptionData exceptionData, IWindowBranding branding, ExceptionReportingIconSet iconSet);
    [CompilerGeneratedAttribute]
public ExceptionReportingIconSet get_IconSet();
    [CompilerGeneratedAttribute]
private void set_IconSet(ExceptionReportingIconSet value);
    private void CancelButtonClick(object sender, RoutedEventArgs e);
    private void OkButtonClick(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.ErrorInfoControl : UserControl {
    private ImageSource myIcon;
    private PropertyChangedEventHandler PropertyChanged;
    internal ErrorInfoControl Page;
    internal StackPanel MessagesPanel;
    internal StackPanel CustomControlsPanel;
    private bool _contentLoaded;
    public ImageSource Icon { get; public set; }
    public void ShowCustomControls(IEnumerable`1<FrameworkElement> customControls);
    public void ShowWarnings(IEnumerable`1<string> warnings);
    public void ShowErrors(IEnumerable`1<string> errors);
    private void SetMessages(IEnumerable`1<string> messages);
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionBrowser : Window {
    private ExceptionBrowserControl myExceptionBrowserControl;
    internal Grid Layout;
    private bool _contentLoaded;
    public ExceptionBrowser(ExceptionBrowserParameters parameters, bool showInTaskbar, IWindowBranding branding);
    public IProgressIndicator CreateProgressIndicator(int workItemCount);
    public void ExceptionsSubmitted();
    public void ShowErrors(ICollection`1<string> errors);
    private void CloseButton_OnClick(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionBrowserControl : UserControl {
    private PendingExceptionsControl myPendingExceptionsControl;
    internal ExceptionBrowserControl Page;
    internal TabControl TabControl;
    internal TabItem PendingExceptionsTab;
    internal TabItem SubmittedExceptionsTab;
    private bool _contentLoaded;
    public ExceptionBrowserControl(ExceptionBrowserParameters parameters, Form parentForm);
    public sealed virtual void SelectAllExceptions();
    public sealed virtual IProgressIndicator CreateProgressIndicator();
    public sealed virtual void AttachmentAvailable(IReportAttachment attachment);
    public sealed virtual void ExceptionsSubmitted();
    public sealed virtual bool NeedsSave();
    public sealed virtual void SaveTo(XmlElement rootElement, XmlDocument document);
    public sealed virtual void Restore(XmlNode exceptionsNode);
    public sealed virtual void Clear();
    public sealed virtual void ShowErrors(ICollection`1<string> errors);
    public void HandleDetailsKey(object sender, EventArgs args);
    public void HandleMuteKey(object sender, EventArgs args);
    public void HandleRemoveKey(object sender, EventArgs args);
    public void HandleSubmitKey(object sender, EventArgs args);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionBrowserHost : Form {
    private ExceptionBrowserHostControl myBrowser;
    [CanBeNullAttribute]
private IWin32Window myOwnerWindow;
    private IContainer components;
    public ExceptionBrowserHostControl Browser { get; }
    public ExceptionBrowserHost(ExceptionBrowserParameters parameters, bool showInTaskbar, IWindowBranding branding);
    public void Show();
    protected virtual void OnKeyDown(KeyEventArgs e);
    public ExceptionBrowserHostControl get_Browser();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, EventArgs args);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionBrowserHostControl : UserControl {
    private ExceptionBrowserControl myExceptionBrowserControl;
    private EventHandler CloseButtonClicked;
    internal Grid Layout;
    private bool _contentLoaded;
    public ExceptionBrowserHostControl(ExceptionBrowserParameters parameters, Form parentForm);
    public sealed virtual void SelectAllExceptions();
    public sealed virtual IProgressIndicator CreateProgressIndicator();
    public sealed virtual void AttachmentAvailable(IReportAttachment attachment);
    public sealed virtual void ExceptionsSubmitted();
    public sealed virtual bool NeedsSave();
    public sealed virtual void SaveTo(XmlElement rootElement, XmlDocument document);
    public sealed virtual void Restore(XmlNode exceptionsNode);
    public sealed virtual void Clear();
    public sealed virtual void ShowErrors(ICollection`1<string> errors);
    public void add_CloseButtonClicked(EventHandler value);
    public void remove_CloseButtonClicked(EventHandler value);
    private void CloseButton_OnClick(object sender, RoutedEventArgs e);
    public void HandleDetailsKey();
    public void HandleMuteKey();
    public void HandleRemoveKey();
    public void HandleSubmitKey();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionBrowserParameters : object {
    [CompilerGeneratedAttribute]
private IWin32Window <Window>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowBranding <WindowBranding>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ExceptionData> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionSubmitter <ExceptionSubmitter>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueTracker <IssueTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMode <InternalMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<DetailsPanelBase> <FCreateDetailsView>k__BackingField;
    [CompilerGeneratedAttribute]
private Clipboard <Clipboard>k__BackingField;
    [CompilerGeneratedAttribute]
private OpensUri <OpensUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IThemedIconManager <IconManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionReportingIconSet <ExceptionReportingIconSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LoginInformation> <LoginInformationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UserCommentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HidesExceptionBrowser>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowSubmissionResultProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SubmitPrivatelyProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AttachSensitiveDataProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <ProxySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportAttachmentPartsContainer <ReportAttachmentParts>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionBarManager <ActionBarManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentificatorPartsContainer <UserIdentificatorPartsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionData, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public IWin32Window Window { get; public set; }
    public Lifetime Lifetime { get; public set; }
    public IWindowBranding WindowBranding { get; public set; }
    public ICollectionEvents`1<ExceptionData> Exceptions { get; public set; }
    public IExceptionSubmitter ExceptionSubmitter { get; public set; }
    public IIssueTracker IssueTracker { get; public set; }
    public InternalMode InternalMode { get; public set; }
    public Func`1<DetailsPanelBase> FCreateDetailsView { get; public set; }
    public Clipboard Clipboard { get; public set; }
    public OpensUri OpensUri { get; public set; }
    public IThemedIconManager IconManager { get; public set; }
    public ExceptionReportingIconSet ExceptionReportingIconSet { get; public set; }
    public IProperty`1<LoginInformation> LoginInformationProperty { get; public set; }
    public IProperty`1<string> UserCommentProperty { get; public set; }
    public bool HidesExceptionBrowser { get; public set; }
    [CanBeNullAttribute]
public IProperty`1<bool> ShowSubmissionResultProperty { get; public set; }
    [CanBeNullAttribute]
public IProperty`1<bool> SubmitPrivatelyProperty { get; public set; }
    [CanBeNullAttribute]
public IProperty`1<bool> AttachSensitiveDataProperty { get; public set; }
    public WebProxySettingsReader ProxySettings { get; public set; }
    public ReportAttachmentPartsContainer ReportAttachmentParts { get; public set; }
    public IThreading Threading { get; public set; }
    public IActionBarManager ActionBarManager { get; public set; }
    public ISettingsStore SettingsStore { get; public set; }
    public UserIdentificatorPartsContainer UserIdentificatorPartsContainer { get; public set; }
    public bool AnyExceptionBeingSubmitted { get; }
    [CompilerGeneratedAttribute]
public IWin32Window get_Window();
    [CompilerGeneratedAttribute]
public void set_Window(IWin32Window value);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public IWindowBranding get_WindowBranding();
    [CompilerGeneratedAttribute]
public void set_WindowBranding(IWindowBranding value);
    [CompilerGeneratedAttribute]
public ICollectionEvents`1<ExceptionData> get_Exceptions();
    [CompilerGeneratedAttribute]
public void set_Exceptions(ICollectionEvents`1<ExceptionData> value);
    [CompilerGeneratedAttribute]
public IExceptionSubmitter get_ExceptionSubmitter();
    [CompilerGeneratedAttribute]
public void set_ExceptionSubmitter(IExceptionSubmitter value);
    [CompilerGeneratedAttribute]
public IIssueTracker get_IssueTracker();
    [CompilerGeneratedAttribute]
public void set_IssueTracker(IIssueTracker value);
    [CompilerGeneratedAttribute]
public InternalMode get_InternalMode();
    [CompilerGeneratedAttribute]
public void set_InternalMode(InternalMode value);
    [CompilerGeneratedAttribute]
public Func`1<DetailsPanelBase> get_FCreateDetailsView();
    [CompilerGeneratedAttribute]
public void set_FCreateDetailsView(Func`1<DetailsPanelBase> value);
    [CompilerGeneratedAttribute]
public Clipboard get_Clipboard();
    [CompilerGeneratedAttribute]
public void set_Clipboard(Clipboard value);
    [CompilerGeneratedAttribute]
public OpensUri get_OpensUri();
    [CompilerGeneratedAttribute]
public void set_OpensUri(OpensUri value);
    [CompilerGeneratedAttribute]
public IThemedIconManager get_IconManager();
    [CompilerGeneratedAttribute]
public void set_IconManager(IThemedIconManager value);
    [CompilerGeneratedAttribute]
public ExceptionReportingIconSet get_ExceptionReportingIconSet();
    [CompilerGeneratedAttribute]
public void set_ExceptionReportingIconSet(ExceptionReportingIconSet value);
    [CompilerGeneratedAttribute]
public IProperty`1<LoginInformation> get_LoginInformationProperty();
    [CompilerGeneratedAttribute]
public void set_LoginInformationProperty(IProperty`1<LoginInformation> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UserCommentProperty();
    [CompilerGeneratedAttribute]
public void set_UserCommentProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_HidesExceptionBrowser();
    [CompilerGeneratedAttribute]
public void set_HidesExceptionBrowser(bool value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowSubmissionResultProperty();
    [CompilerGeneratedAttribute]
public void set_ShowSubmissionResultProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SubmitPrivatelyProperty();
    [CompilerGeneratedAttribute]
public void set_SubmitPrivatelyProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AttachSensitiveDataProperty();
    [CompilerGeneratedAttribute]
public void set_AttachSensitiveDataProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public WebProxySettingsReader get_ProxySettings();
    [CompilerGeneratedAttribute]
public void set_ProxySettings(WebProxySettingsReader value);
    [CompilerGeneratedAttribute]
public ReportAttachmentPartsContainer get_ReportAttachmentParts();
    [CompilerGeneratedAttribute]
public void set_ReportAttachmentParts(ReportAttachmentPartsContainer value);
    [CompilerGeneratedAttribute]
public IThreading get_Threading();
    [CompilerGeneratedAttribute]
public void set_Threading(IThreading value);
    [CompilerGeneratedAttribute]
public IActionBarManager get_ActionBarManager();
    [CompilerGeneratedAttribute]
public void set_ActionBarManager(IActionBarManager value);
    [CompilerGeneratedAttribute]
public ISettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public void set_SettingsStore(ISettingsStore value);
    [CompilerGeneratedAttribute]
public UserIdentificatorPartsContainer get_UserIdentificatorPartsContainer();
    [CompilerGeneratedAttribute]
public void set_UserIdentificatorPartsContainer(UserIdentificatorPartsContainer value);
    public IEnumerable`1<ExceptionData> GetPendingExceptions();
    public IEnumerable`1<ExceptionData> GetSubmittedExceptions();
    public bool get_AnyExceptionBeingSubmitted();
    [CompilerGeneratedAttribute]
private static bool <GetPendingExceptions>b__0(ExceptionData e);
    [CompilerGeneratedAttribute]
private static bool <GetSubmittedExceptions>b__2(ExceptionData e);
    [CompilerGeneratedAttribute]
private static bool <get_AnyExceptionBeingSubmitted>b__4(ExceptionData ed);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionBrowserRenderParameters : object {
    private bool myIsInternalMode;
    private bool myIsClipboardAvailable;
    private ExceptionBrowserParameters myParameters;
    private ICollection`1<ExceptionDataItem> myPendingExceptions;
    private IEnumerable`1<ExceptionDataItem> mySubmittedExceptions;
    private IProperty`1<string> myUserCommentProperty;
    private IList myPendingExceptionsBoxSelection;
    private IList mySubmittedExceptionsBoxSelection;
    private bool myIsCopyButtonEnabled;
    private bool myIsOpenButtonEnabled;
    private bool myMuteButtonEnabled;
    private bool myDeletePendingButtonEnabled;
    private bool myDeleteSubmittedButtonEnabled;
    private bool mySubmitSelectedButtonEnabled;
    private bool myDetailsPendingButtonEnabled;
    private bool myDetailsSubmittedButtonEnabled;
    private bool myEditButtonEnabled;
    private bool mySubmissionInProgress;
    private bool myShowSubmissionResult;
    private bool mySubmitPrivately;
    private bool myAttachSensitiveData;
    private bool myTmp;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private ImageSource <NewExceptionImage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <ReadExceptionImage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <MutedImage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <DetailsImage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <DeleteImage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <ProgressImage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <SuccessImage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <EditImage>k__BackingField;
    [CompilerGeneratedAttribute]
private static Comparison`1<ExceptionDataItem> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Comparison`1<ExceptionDataItem> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionDataItem, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionDataItem, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    public string SubmitPrivatelyText { get; }
    public bool SubmissionInProgress { get; public set; }
    public bool ShowSubmissionResultEnabled { get; }
    public ICollection`1<ExceptionDataItem> PendingExceptions { get; public set; }
    public IEnumerable`1<ExceptionDataItem> SubmittedExceptions { get; public set; }
    public GridLength DetailsPanelLength { get; }
    public Visibility DetailsPanelVisibility { get; }
    public bool DetailsPendingButtonEnabled { get; public set; }
    public bool DetailsSubmittedButtonEnabled { get; public set; }
    public bool MuteButtonEnabled { get; public set; }
    public bool CopyButtonEnabled { get; public set; }
    public bool OpenButtonEnabled { get; public set; }
    public bool DeleteSubmittedButtonEnabled { get; public set; }
    public bool DeletePendingButtonEnabled { get; public set; }
    public bool SubmitSelectedButtonEnabled { get; public set; }
    public bool EditButtonEnabled { get; public set; }
    public bool ShowSubmissionResult { get; public set; }
    public bool SubmitPrivately { get; public set; }
    public bool AttachSensitiveData { get; public set; }
    public ImageSource NewExceptionImage { get; private set; }
    public ImageSource ReadExceptionImage { get; private set; }
    public ImageSource MutedImage { get; private set; }
    public ImageSource DetailsImage { get; private set; }
    public ImageSource DeleteImage { get; private set; }
    public ImageSource ProgressImage { get; private set; }
    public ImageSource SuccessImage { get; private set; }
    public ImageSource EditImage { get; private set; }
    public ImageSource SubmitImage { get; }
    public IList PendingExceptionsBoxSelection { get; public set; }
    public IList SubmittedExceptionsBoxSelection { get; public set; }
    public string DescriptionText { get; public set; }
    public ExceptionBrowserRenderParameters(ExceptionBrowserParameters parameters);
    public ICollection`1<ExceptionDataItem> UpdateSubmittedExceptions();
    public ICollection`1<ExceptionDataItem> UpdatePendingExceptions();
    private void OnExceptionsChanged();
    public string get_SubmitPrivatelyText();
    public bool get_SubmissionInProgress();
    public void set_SubmissionInProgress(bool value);
    public bool get_ShowSubmissionResultEnabled();
    public ICollection`1<ExceptionDataItem> get_PendingExceptions();
    public void set_PendingExceptions(ICollection`1<ExceptionDataItem> value);
    public IEnumerable`1<ExceptionDataItem> get_SubmittedExceptions();
    public void set_SubmittedExceptions(IEnumerable`1<ExceptionDataItem> value);
    public GridLength get_DetailsPanelLength();
    public Visibility get_DetailsPanelVisibility();
    public bool get_DetailsPendingButtonEnabled();
    public void set_DetailsPendingButtonEnabled(bool value);
    public bool get_DetailsSubmittedButtonEnabled();
    public void set_DetailsSubmittedButtonEnabled(bool value);
    public bool get_MuteButtonEnabled();
    public void set_MuteButtonEnabled(bool value);
    public bool get_CopyButtonEnabled();
    public void set_CopyButtonEnabled(bool value);
    public bool get_OpenButtonEnabled();
    public void set_OpenButtonEnabled(bool value);
    public bool get_DeleteSubmittedButtonEnabled();
    public void set_DeleteSubmittedButtonEnabled(bool value);
    public bool get_DeletePendingButtonEnabled();
    public void set_DeletePendingButtonEnabled(bool value);
    public bool get_SubmitSelectedButtonEnabled();
    public void set_SubmitSelectedButtonEnabled(bool value);
    public bool get_EditButtonEnabled();
    public void set_EditButtonEnabled(bool value);
    public bool get_ShowSubmissionResult();
    public void set_ShowSubmissionResult(bool value);
    public bool get_SubmitPrivately();
    public void set_SubmitPrivately(bool value);
    public bool get_AttachSensitiveData();
    public void set_AttachSensitiveData(bool value);
    [CompilerGeneratedAttribute]
public ImageSource get_NewExceptionImage();
    [CompilerGeneratedAttribute]
private void set_NewExceptionImage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_ReadExceptionImage();
    [CompilerGeneratedAttribute]
private void set_ReadExceptionImage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_MutedImage();
    [CompilerGeneratedAttribute]
private void set_MutedImage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_DetailsImage();
    [CompilerGeneratedAttribute]
private void set_DetailsImage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_DeleteImage();
    [CompilerGeneratedAttribute]
private void set_DeleteImage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_ProgressImage();
    [CompilerGeneratedAttribute]
private void set_ProgressImage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_SuccessImage();
    [CompilerGeneratedAttribute]
private void set_SuccessImage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_EditImage();
    [CompilerGeneratedAttribute]
private void set_EditImage(ImageSource value);
    public ImageSource get_SubmitImage();
    public IList get_PendingExceptionsBoxSelection();
    public void set_PendingExceptionsBoxSelection(IList value);
    public IList get_SubmittedExceptionsBoxSelection();
    public void set_SubmittedExceptionsBoxSelection(IList value);
    public string get_DescriptionText();
    public void set_DescriptionText(string value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(PropertyChangedEventArgs`1<ExceptionDataStatus> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(AddRemoveEventArgs`1<ExceptionData> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5(PropertyChangedEventArgs`1<ExceptionDataStatus> args2);
    [CompilerGeneratedAttribute]
private ExceptionDataItem <UpdateSubmittedExceptions>b__e(ExceptionData ed);
    [CompilerGeneratedAttribute]
private static int <UpdateSubmittedExceptions>b__f(ExceptionDataItem xItem, ExceptionDataItem yItem);
    [CompilerGeneratedAttribute]
private ExceptionDataItem <UpdatePendingExceptions>b__11(ExceptionData ed);
    [CompilerGeneratedAttribute]
private static int <UpdatePendingExceptions>b__12(ExceptionDataItem xItem, ExceptionDataItem yItem);
    [CompilerGeneratedAttribute]
private static bool <set_PendingExceptionsBoxSelection>b__14(ExceptionDataItem edi);
    [CompilerGeneratedAttribute]
private static bool <set_PendingExceptionsBoxSelection>b__15(ExceptionDataItem edi);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionDataControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionDataItem : object {
    private ExceptionBrowserRenderParameters myRenderParameters;
    private string myIssueUri;
    private string myIssueId;
    private DateTime myWhenSubmitted;
    private int myNumberOfTimesHappened;
    private DateTime myWhenLastHappened;
    private ImageSource myImage;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private ExceptionData <ExceptionData>k__BackingField;
    public ExceptionData ExceptionData { get; private set; }
    public string IssueUri { get; public set; }
    public string IssueId { get; public set; }
    public DateTime WhenSubmitted { get; public set; }
    public int NumberOfTimesHappened { get; public set; }
    public DateTime WhenLastHappened { get; public set; }
    public ImageSource Image { get; public set; }
    public string StatusText { get; }
    public ExceptionDataItem(ExceptionBrowserRenderParameters renderParameters, ExceptionData exceptionData);
    private ImageSource GetImage(ExceptionDataStatus status);
    [CompilerGeneratedAttribute]
public ExceptionData get_ExceptionData();
    [CompilerGeneratedAttribute]
private void set_ExceptionData(ExceptionData value);
    public string get_IssueUri();
    public void set_IssueUri(string value);
    public string get_IssueId();
    public void set_IssueId(string value);
    public DateTime get_WhenSubmitted();
    public void set_WhenSubmitted(DateTime value);
    public int get_NumberOfTimesHappened();
    public void set_NumberOfTimesHappened(int value);
    public DateTime get_WhenLastHappened();
    public void set_WhenLastHappened(DateTime value);
    public ImageSource get_Image();
    public void set_Image(ImageSource value);
    public string get_StatusText();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<ExceptionSubmissionResult> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(PropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(PropertyChangedEventArgs`1<DateTime> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(PropertyChangedEventArgs`1<ExceptionDataStatus> args);
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionsPage : object {
    private ExceptionBrowserParameters myExceptionBrowserParameters;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private static Func`1<DetailsPanelBase> CS$<>9__CachedAnonymousMethodDelegate2;
    public float Order { get; }
    public string Title { get; }
    public ExceptionsPage(Lifetime lifetime, IUIApplication application, ReportAttachmentPartsContainer reportAttachmentParts, IIssueTracker issuetracker, Clipboard clipboard, ExceptionReportingIconSet iconSet, IMainWindow mainWindow, WebProxySettingsReader proxySettings, OpensUri opensUri, ITheming theming, ShellExceptionReportComponent shellExceptionReport, IThreading threading, IActionBarManager actionBarManager, ISettingsStore settingsStore, UserIdentificatorPartsContainer userIdentificatorPartsContainer);
    public sealed virtual float get_Order();
    public sealed virtual string get_Title();
    public sealed virtual UserControl GetContents(FeedbackCenterHost parentWindow);
    [CompilerGeneratedAttribute]
private static DetailsPanelBase <.ctor>b__1();
}
public class JetBrains.UI.ExceptionReport.UI.ExceptionTimeConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface JetBrains.UI.ExceptionReport.UI.IExceptionsControl {
    public abstract virtual IProgressIndicator CreateProgressIndicator();
    public abstract virtual void SelectAllExceptions();
    public abstract virtual void AttachmentAvailable(IReportAttachment attachment);
    public abstract virtual void ShowErrors(ICollection`1<string> errors);
    public abstract virtual void ExceptionsSubmitted();
    public abstract virtual bool NeedsSave();
    public abstract virtual void SaveTo(XmlElement rootElement, XmlDocument document);
    public abstract virtual void Restore(XmlNode exceptionsNode);
    public abstract virtual void Clear();
}
public class JetBrains.UI.ExceptionReport.UI.NumberOfTimesConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.ExceptionReport.UI.PendingExceptionsControl : UserControl {
    private static string ExploreStackTraceActionId;
    private static string ExploreStackTraceCommand;
    private ExceptionBrowserParameters myParameters;
    private DetailsPanelBase myDetailsControl;
    private ErrorInfoControl myErrorInfoControl;
    private Form myParentForm;
    private AttachmentsControl myAttachmentsControl;
    private bool myDescriptionHasChanged;
    [CanBeNullAttribute]
private AccountControl myAccountControl;
    internal PendingExceptionsControl Page;
    internal RowDefinition AttachmentsRow;
    internal RowDefinition ProgressRow;
    internal RowDefinition ErrorRow;
    internal ListView ExceptionsBox;
    internal DockPanel DetailsPanel;
    internal TextBox DescriptionTextBox;
    internal DockPanel AttachmentsPanel;
    internal StackPanel AuthenticationPanel;
    internal CheckBox ShowSubmissionResultsBox;
    internal TextBlock ProgressIndicatorTextBlock;
    internal ProgressBar ProgressIndicatorBar;
    internal DockPanel ErrorPanel;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ExceptionBrowserRenderParameters <RenderParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ExceptionDataItem, ExceptionData> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<FileAttachmentBase, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<EvaluatedAction, bool> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<EvaluatedAction, ExecutedAction> CS$<>9__CachedAnonymousMethodDelegate26;
    public ExceptionBrowserRenderParameters RenderParameters { get; private set; }
    unknown string CurrentItemText {public set; }
    public bool IsCanceled { get; }
    public string TaskName { get; public set; }
    public PendingExceptionsControl(ExceptionBrowserParameters parameters, ExceptionBrowserRenderParameters renderParameters, Form parentForm);
    public sealed virtual void SelectAllExceptions();
    public sealed virtual void AttachmentAvailable(IReportAttachment attachment);
    private void ShowWarnings();
    private void HideWarnings();
    private void UpdateList(bool selectAll);
    public sealed virtual IProgressIndicator CreateProgressIndicator();
    public sealed virtual void ExceptionsSubmitted();
    public sealed virtual bool NeedsSave();
    public sealed virtual void SaveTo(XmlElement rootElement, XmlDocument document);
    public sealed virtual void Restore(XmlNode exceptionsNode);
    public sealed virtual void Clear();
    public sealed virtual void ShowErrors(ICollection`1<string> errors);
    private void ShowAccountInfo();
    private void ShowNoAccountInfo();
    private void ShowAnonymousAccountInfo();
    private void ShowUserAccountInfo();
    private void ShowTrackerLoginForm();
    [CompilerGeneratedAttribute]
public ExceptionBrowserRenderParameters get_RenderParameters();
    [CompilerGeneratedAttribute]
private void set_RenderParameters(ExceptionBrowserRenderParameters value);
    private void ExceptionsBox_OnSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void CopyButton_OnClick(object sender, RoutedEventArgs e);
    private void OpenButton_OnClick(object sender, RoutedEventArgs e);
    private bool CopyToClipboard();
    private void MuteButton_OnClick(object sender, RoutedEventArgs e);
    public void MuteExceptions();
    private void RemoveButton_OnClick(object sender, RoutedEventArgs e);
    public void RemoveExceptions();
    private void DetailsButton_OnClick(object sender, RoutedEventArgs e);
    private void SubmitSelectedPublicly_OnClick(object sender, RoutedEventArgs e);
    private void SubmitSelectedPrivately_OnClick(object sender, RoutedEventArgs e);
    public void SubmitExceptionsPublicly();
    public void SubmitExceptions(bool submitPrivately);
    private FileSystemPath[] GetFilesToAttach();
    public void TryShowDetails();
    public sealed virtual void Dispose();
    public sealed virtual void set_CurrentItemText(string value);
    public sealed virtual bool get_IsCanceled();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TaskName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TaskName(string value);
    public sealed virtual void Advance(double units);
    public sealed virtual void Start(int totalWorkUnits);
    public sealed virtual void Stop();
    private void ExceptionsBox_OnMouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void OnEscapePressed(object sender, ExecutedRoutedEventArgs e);
    private void DescriptionTextBox_OnTextChanged(object sender, TextChangedEventArgs e);
    private void EditButton_OnClick(object sender, RoutedEventArgs e);
    private bool CanOpenStackTrace();
    private void OpenStackTrace();
    private T WithExploreStackTraceAction(Func`2<EvaluatedAction, T> func);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private IProgressIndicator <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <ShowWarnings>b__5(object obj, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <ShowNoAccountInfo>b__a(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <ShowAnonymousAccountInfo>b__c(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <ShowUserAccountInfo>b__f(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private static ExceptionData <SubmitExceptions>b__13(ExceptionDataItem edi);
    [CompilerGeneratedAttribute]
private void <SubmitExceptions>b__14(ExceptionData[] _);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetFilesToAttach>b__16(FileAttachmentBase _);
    [CompilerGeneratedAttribute]
private void <Stop>b__22();
    [CompilerGeneratedAttribute]
private static bool <CanOpenStackTrace>b__23(EvaluatedAction action);
    [CompilerGeneratedAttribute]
private static ExecutedAction <OpenStackTrace>b__25(EvaluatedAction action);
}
public class JetBrains.UI.ExceptionReport.UI.PendingViewWidthConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.ExceptionReport.UI.ReviewDetailsWindow : Window {
    internal ReviewDetailsWindow This;
    internal TextBlock ExceptionTextBox;
    private bool _contentLoaded;
    public ReviewDetailsWindow(IEnumerable`1<ExceptionData> exceptionDatas, IWindowBranding branding);
    private void CancelButton_OnClick(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.SubmittedExceptionsControl : UserControl {
    private ExceptionBrowserParameters myParameters;
    private Form myParentForm;
    internal SubmittedExceptionsControl Page;
    internal ListView ExceptionsBox;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ExceptionBrowserRenderParameters <RenderParameters>k__BackingField;
    public ExceptionBrowserRenderParameters RenderParameters { get; private set; }
    public SubmittedExceptionsControl(ExceptionBrowserParameters parameters, ExceptionBrowserRenderParameters renderParameters, Form parentForm);
    [CompilerGeneratedAttribute]
public ExceptionBrowserRenderParameters get_RenderParameters();
    [CompilerGeneratedAttribute]
private void set_RenderParameters(ExceptionBrowserRenderParameters value);
    private void ExceptionsBox_OnSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void DetailsButton_OnClick(object sender, RoutedEventArgs e);
    public void TryShowDetails();
    private void RemoveButton_OnClick(object sender, RoutedEventArgs e);
    public void RemoveExceptions();
    private void IssueUri_OnClick(object sender, RoutedEventArgs e);
    private void ExceptionsBox_OnMouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void OnEscapePressed(object sender, ExecutedRoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.SubmittedViewWidthConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.ExceptionReport.UI.TextBoxDetailsPanel : DetailsPanelBase {
    internal TextBox TextBox;
    private bool _contentLoaded;
    unknown string Details {public set; }
    public virtual void set_Details(string value);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.ExceptionReport.UI.TrackerLoginControl : UserControl {
    private Lifetime myLifetime;
    private IIssueTracker myIssueTracker;
    private IconSet myIconSet;
    private object mySync;
    private Timer myVerifyCredentialsTimer;
    internal TrackerLoginControl Page;
    internal Border UserNameBorder;
    internal TextBox UserNameBox;
    internal Border PasswordBorder;
    internal PasswordBox PasswordBox;
    internal Image StatusImage;
    internal TextBlock StatusTextBlock;
    internal RadioButton SubmitAnonymouslyRadioButton;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private TrackerLoginRenderParameters <RenderParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<CredentialsVerificationComponent> CS$<>9__CachedAnonymousMethodDelegate9;
    public TrackerLoginRenderParameters RenderParameters { get; public set; }
    public LoginInformation LoginInformation { get; public set; }
    public TrackerLoginControl(Lifetime lifetime, IIssueTracker issueTracker, IconSet iconSet);
    [CompilerGeneratedAttribute]
public TrackerLoginRenderParameters get_RenderParameters();
    [CompilerGeneratedAttribute]
public void set_RenderParameters(TrackerLoginRenderParameters value);
    public LoginInformation get_LoginInformation();
    public void set_LoginInformation(LoginInformation value);
    private void OnCredentialsVerificationTimerElapsed();
    private void FireCredentialsVerification();
    private void SetRunningStatus();
    private void OnVerificationStatusChanged(CredentialsVerificationResult result);
    private void ShowVerificationSuccess();
    private void ShowVerificationProblem(string text, ThemedIconLoader icon, Border highlight);
    private void HideStatus();
    private void ClearUserNamePasswordStatus();
    private void ClearRunningStatus();
    private void SignUp_OnClick(object sender, RoutedEventArgs e);
    private void UserNameBox_OnTextChanged(object sender, TextChangedEventArgs e);
    private void PasswordBox_OnPasswordChanged(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, ElapsedEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnCredentialsVerificationTimerElapsed>b__3();
    [CompilerGeneratedAttribute]
private static void <HideStatus>b__8(CredentialsVerificationComponent c);
}
public class JetBrains.UI.ExceptionReport.UI.TrackerLoginForm2 : Form {
    private TrackerLoginControl myTrackerLoginControl;
    public LoginInformation LoginInformation { get; public set; }
    public TrackerLoginForm2(Lifetime lifetime, IIssueTracker issueTracker, IconSet iconSet);
    public LoginInformation get_LoginInformation();
    public void set_LoginInformation(LoginInformation value);
}
public class JetBrains.UI.ExceptionReport.UI.TrackerLoginRenderParameters : object {
    private string myUserName;
    private string myPassword;
    private bool mySubmitAnonymously;
    private bool myNotSubmitAnonymously;
    private PropertyChangedEventHandler PropertyChanged;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public bool SubmitAnonymously { get; public set; }
    public bool NotSubmitAnonymously { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_SubmitAnonymously();
    public void set_SubmitAnonymously(bool value);
    public bool get_NotSubmitAnonymously();
    public void set_NotSubmitAnonymously(bool value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
public static class JetBrains.UI.ExceptionReport.UiUtil : object {
    public static void InitializeForm(Form form, IWindowBranding branding);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.AvalonDataRuleHelper : object {
    [ExtensionAttribute]
public static void AddDataRule(UIElement element, Lifetime lifetime, string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> fTryEvaluate);
    [ExtensionAttribute]
public static void AddDataRule(UIElement element, Lifetime lifetime, string name, DataConstant`1<TValue> dataconstant, TValue value);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.AvalonEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<bool, Visibility> CS$<>9__CachedAnonymousMethodDelegate31;
    [NotNullAttribute]
[ExtensionAttribute]
public static TPanel AddChild(TPanel panel, UIElement child);
    [ExtensionAttribute]
[NotNullAttribute]
public static Grid AddColumnChild(Grid grid, string size, UIElement child);
    [NotNullAttribute]
[ExtensionAttribute]
public static Grid AddColumnChild(Grid grid, GridUnitType sizing, UIElement child, double factor);
    [NotNullAttribute]
[ExtensionAttribute]
public static Grid AddColumnChild(Grid grid, GridUnitType sizing, IAutomation child, double factor);
    [ExtensionAttribute]
[NotNullAttribute]
public static Grid AddColumnChild(Grid grid, GridUnitType sizing, IProperty`1<TAutomation> child, double factor);
    [NotNullAttribute]
[ExtensionAttribute]
public static Grid AddColumn(Grid grid, string size);
    [ExtensionAttribute]
[NotNullAttribute]
public static Grid AddLastColumnChild(Grid grid, UIElement child, int row);
    [ExtensionAttribute]
[NotNullAttribute]
public static Paragraph AddPara(FlowDocument thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static Paragraph AddPara(Section thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static Paragraph AddPara(List thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static Grid AddRowChild(Grid grid, string size, UIElement child);
    [ExtensionAttribute]
[NotNullAttribute]
public static Grid AddRowChild(Grid grid, GridUnitType sizing, UIElement child, double factor);
    [NotNullAttribute]
[ExtensionAttribute]
public static Grid AddRowChild(Grid grid, GridUnitType sizing, IAutomation child, double factor);
    [NotNullAttribute]
[ExtensionAttribute]
public static Grid AddRowChild(Grid grid, GridUnitType sizing, IProperty`1<TAutomation> child, double factor);
    [ExtensionAttribute]
[NotNullAttribute]
public static Grid AddRow(Grid grid, string size);
    [ExtensionAttribute]
[NotNullAttribute]
public static Grid AddLastRowChild(Grid grid, UIElement child, int col);
    [ExtensionAttribute]
public static TextBlock Append(TextBlock block, string text);
    [ExtensionAttribute]
public static Span Append(Span thіs, string text);
    [ExtensionAttribute]
public static Span AppendLine(Span thіs, string text);
    [ExtensionAttribute]
public static Span Append(Span thіs, Inline inline);
    [ExtensionAttribute]
public static TextBlock Append(TextBlock block, string text, FontStyle style);
    [ExtensionAttribute]
public static TextBlock Append(TextBlock block, string text, FontWeight weight);
    [ExtensionAttribute]
public static TextBlock Append(TextBlock block, Run run);
    [ExtensionAttribute]
public static TextBlock Append(TextBlock block, Inline run);
    [ExtensionAttribute]
public static TextBlock Append(TextBlock block, string text, FontStyle style, FontWeight weight, Brush forecolor);
    [ExtensionAttribute]
public static Span Append(Span thіs, string text, FontStyle style, FontWeight weight, Brush forecolor);
    [NotNullAttribute]
[ExtensionAttribute]
public static Paragraph Append(Paragraph para, string text);
    [NotNullAttribute]
[ExtensionAttribute]
public static Paragraph Append(Paragraph para, string text, FontStyle style, FontWeight weight, Brush forecolor);
    [NotNullAttribute]
[ExtensionAttribute]
public static Paragraph Append(Paragraph para, Inline inline);
    [ExtensionAttribute]
public static Span AppendLine(Span thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static TElement Bind(TElement element, DependencyProperty property, string path);
    [NotNullAttribute]
[ExtensionAttribute]
public static TDependencyObject Bind(TDependencyObject element, DependencyProperty property, BindingBase binding);
    [ExtensionAttribute]
public static TElement BindOnChange(TElement element, DependencyProperty property, string path);
    [ExtensionAttribute]
public static Grid Cols(Grid grid, String[] sizes);
    [ExtensionAttribute]
public static TElement Dock(TElement element, Dock dock);
    [ExtensionAttribute]
public static TElement InGrid(TElement element, int col, int row);
    [ExtensionAttribute]
public static TElement InGrid(TElement element, int col, int row, int colspan, int rowspan);
    [ExtensionAttribute]
public static TObject Name(TObject object, FrameworkElement host, string name);
    [ExtensionAttribute]
public static TElement OnEvent(TElement element, RoutedEvent event, RoutedEventHandler handler);
    [ExtensionAttribute]
public static TElement OnEvent(TElement element, RoutedEvent event, Action handler);
    [ExtensionAttribute]
public static TElement OnEventC(TElement element, RoutedEvent event, RoutedEventHandler handler);
    [ExtensionAttribute]
public static Rect RectFromScreen(Visual visual, Rect rcScreen);
    [ExtensionAttribute]
public static Rect RectToScreen(Visual visual, Rect rcClient);
    [ExtensionAttribute]
public static Grid Rows(Grid grid, String[] sizes);
    [ExtensionAttribute]
public static TElement Scale(TElement element, double factor);
    [ExtensionAttribute]
public static TDependencyObject Set(TDependencyObject dependencyobject, DependencyProperty dependencyproperty, object value);
    [ExtensionAttribute]
public static TElement SetDialogFont(TElement element);
    [ExtensionAttribute]
public static FlowDocument SetDialogFontD(FlowDocument thіs);
    [ExtensionAttribute]
public static TElement SetEditorFont(TElement element);
    [ExtensionAttribute]
public static TElement SetEditorFontC(TElement element);
    [ExtensionAttribute]
public static TElement SetEditorFontT(TElement element);
    [ExtensionAttribute]
public static FlowDocument SetEditorFont(FlowDocument document);
    [ExtensionAttribute]
public static FlowDocument SetDialogFont(FlowDocument thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static FlowDocument SetSystemFont(FlowDocument document);
    public static Application GetCurrentApplicationOrCreate();
    [ExtensionAttribute]
public static void WhenLoaded(FrameworkElement thіs, Action`1<Lifetime> FWhenLoaded);
    [ExtensionAttribute]
public static void WhenLoaded(FrameworkElement thіs, Lifetime lifetime, Action`1<Lifetime> FWhenLoaded);
    [ExtensionAttribute]
public static void WhenLoadedOnce(FrameworkElement thіs, Lifetime lifetime, Action whenLoaded);
    [ExtensionAttribute]
public static void WhenLoadedOnce(FrameworkElement thіs, Action whenLoaded);
    [ExtensionAttribute]
public static void PushHandler(UIElement thіs, Lifetime disposables, RoutedEvent evt, TEventHandler handler, bool handledEventsToo);
    [ExtensionAttribute]
public static void PushHandler(UIElement thіs, Lifetime disposables, DependencyProperty dp, EventHandler handler);
    [ExtensionAttribute]
public static void FlowIntoVisibility(IProperty`1<bool> isVisible, Lifetime lifetime, UIElement target);
    [ExtensionAttribute]
[NotNullAttribute]
public static Style AddSetter(Style thіs, DependencyProperty property, object value);
    [ExtensionAttribute]
public static Nullable`1<Point> TryPointFromScreen(Visual thіs, Point point);
    [NotNullAttribute]
[ExtensionAttribute]
public static FrameworkElementFactory SetValueFluent(FrameworkElementFactory thіs, DependencyProperty dp, object value);
    [ExtensionAttribute]
public static void Add(ResourceDictionary thіs, Lifetime lifetime, object key, object value);
    [NotNullAttribute]
[ExtensionAttribute]
public static TElement SetDynamicResourceValue(TElement thіs, DependencyProperty property, ResourceKey resourcekey);
    [ExtensionAttribute]
[NotNullAttribute]
public static ContentPresenter CreateView(IAutomation thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static ContentPresenter CreateView(IProperty`1<TAutomation> thіs, Lifetime lifetime, WhenNull whennull);
    [NotNullAttribute]
[ExtensionAttribute]
public static Image SetSource(Image thіs, Lifetime lifetime, IProperty`1<ImageSource> propSource);
    [NotNullAttribute]
[ExtensionAttribute]
public static Image SetSource(Image thіs, ResourceKey resourcekey);
    public static int GetMaxNumberOfCharsInPixels(double pixelwidth, TextBlock renderer, int nMaxChars);
    public static int GetMaxNumberOfCharsInPixels(double pixelwidth, TextBlock renderer);
    [ExtensionAttribute]
public static void ApplyTo(AvalonFont avalonFont, DependencyObject element);
    [CompilerGeneratedAttribute]
private static Visibility <FlowIntoVisibility>b__30(bool f);
    [CompilerGeneratedAttribute]
private static void <CreateView>b__42();
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.AvalonTemplates : object {
    [NotNullAttribute]
public static ControlTemplate CreateControlTemplate(Func`1<UIElement> funcObjectGraphCreator);
    [NotNullAttribute]
public static DataTemplate CreateDataTemplate(Func`1<UIElement> funcObjectGraphCreator);
    [ExtensionAttribute]
[NotNullAttribute]
public static TTemplate SetTemplate(TTemplate template, Func`1<UIElement> funcObjectGraphCreator);
    [NotNullAttribute]
[ExtensionAttribute]
public static ControlTemplate SetTemplate(ControlTemplate template, Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement> FObjectGraphCreator);
    [ExtensionAttribute]
[NotNullAttribute]
public static void OverrideTemplate(DependencyProperty propTemplate, Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement> FObjectGraphCreator);
    [ExtensionAttribute]
[NotNullAttribute]
public static DataTemplate SetTemplate(DataTemplate template, Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement> FObjectGraphCreator);
    [ExtensionAttribute]
[NotNullAttribute]
public static TTemplatedWindow SetTemplate(TTemplatedWindow window, Func`4<Lifetime, TViewModel, TTemplatedWindow, UIElement> FObjectGraphCreator);
    [ExtensionAttribute]
public static void WithAutomationObject(TView view, Action`3<Lifetime, TAutomation, TView> FWithAutomationObject);
    [ExtensionAttribute]
[NotNullAttribute]
public static TTemplate SetTemplateWithDataContext(TTemplate template, Func`1<UIElement> funcObjectGraphCreator);
    [ExtensionAttribute]
[NotNullAttribute]
public static TTemplate SetTemplateManually(TTemplate template, Action`1<FrameworkElementFactory> FWithFactory);
    [ExtensionAttribute]
[NotNullAttribute]
public static ResourceDictionary RegisterView(ResourceDictionary thіs);
    [NotNullAttribute]
[ExtensionAttribute]
public static ResourceDictionary RegisterView(ResourceDictionary thіs, FrameworkElementFactory frameworkElementFactory);
    [NotNullAttribute]
public static FrameworkElement CreateBrokenViewCueBanner(RichText message);
    [CompilerGeneratedAttribute]
private static object <OverrideTemplate>b__1();
    [CompilerGeneratedAttribute]
private static object <OverrideTemplate>b__5();
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.AvalonTreeHelpers : object {
    public static Action`2<Exception, DependencyObject> AddAvalonTreeData;
    [CompilerGeneratedAttribute]
private static Action`2<Exception, DependencyObject> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<IEnumerable`1<Type>, String[]> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate1a;
    private static AvalonTreeHelpers();
    [NotNullAttribute]
public static IEnumerable`1<DependencyObject> GetLogicalDescendantsBreadthFirst(DependencyObject root);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetVisualDescendantsBreadthFirst(DependencyObject root);
    [CanBeNullAttribute]
public static DependencyObject GetLogicalOrVisualParent(DependencyObject d);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__f(Exception ex, DependencyObject o);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__10();
    [CompilerGeneratedAttribute]
private static String[] <.cctor>b__11(IEnumerable`1<Type> ts);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__12(Type type);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.Bindings : object {
    [NotNullAttribute]
public static Binding Create(Expression`1<Func`2<TContainingType, TMemberValue>> lambdaexpression);
    [ExtensionAttribute]
[NotNullAttribute]
public static Binding Path(Binding thіs, Expression`1<Func`2<TContainingType, TMemberValue>> lambdaexpression);
    [NotNullAttribute]
[ExtensionAttribute]
public static Binding Path(Binding thіs, DependencyProperty property);
    [ExtensionAttribute]
[NotNullAttribute]
public static Binding RelativeSource(Binding thіs, RelativeSource source);
    [NotNullAttribute]
[ExtensionAttribute]
public static Binding Converter(Binding thіs, Func`2<TSource, TTarget> FConverter);
    [NotNullAttribute]
[ExtensionAttribute]
public static Binding Converter(Binding thіs, Func`2<TSource, TTarget> FConverterForth, Func`2<TTarget, TSource> FConverterBack);
    [ExtensionAttribute]
[NotNullAttribute]
public static Binding Mode(Binding thіs, BindingMode bindingMode);
    [NotNullAttribute]
[ExtensionAttribute]
public static Binding Source(Binding thіs, object source);
    [NotNullAttribute]
[ExtensionAttribute]
public static Binding IProperty(Binding thіs, IProperty`1<TValue> propertySource);
    [CompilerGeneratedAttribute]
private static StringBuilder <Path>b__0(StringBuilder builder, int n);
}
public abstract class JetBrains.UI.Extensions.ControlTemplateBorder : Decorator {
    public static DependencyProperty ViewModelDependencyProperty;
    public static DependencyProperty TemplatedParentDependencyProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7;
    private static ControlTemplateBorder();
    public abstract virtual void OnViewModelDependencyPropertyChanged(DependencyPropertyChangedEventArgs args);
    public abstract virtual void OnTemplatedParentDependencyPropertyChanged(DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
public class JetBrains.UI.Extensions.ControlTemplateBorder`2 : ControlTemplateBorder {
    public static DependencyProperty ObjectGraphCreatorDependencyProperty;
    private IProperty`1<Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement>> myObjectGraphCreator;
    private IProperty`1<TViewModel> myViewModel;
    private IProperty`1<TTemplatedParent> myTemplatedParent;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`4<Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement>, TViewModel, TTemplatedParent, Tuple`3<Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement>, TViewModel, TTemplatedParent>> CS$<>9__CachedAnonymousMethodDelegate21;
    private static ControlTemplateBorder`2();
    public virtual void OnViewModelDependencyPropertyChanged(DependencyPropertyChangedEventArgs args);
    public virtual void OnTemplatedParentDependencyPropertyChanged(DependencyPropertyChangedEventArgs args);
    private static void OnObjectGraphCreatorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static object <OnViewModelDependencyPropertyChanged>b__10();
    [CompilerGeneratedAttribute]
private static object <OnTemplatedParentDependencyPropertyChanged>b__16();
    [CompilerGeneratedAttribute]
private static Tuple`3<Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement>, TViewModel, TTemplatedParent> <.ctor>b__1c(Func`4<Lifetime, TViewModel, TTemplatedParent, UIElement> FCreator, TViewModel model, TTemplatedParent parent);
}
public class JetBrains.UI.Extensions.CreateOrReuseWindow : object {
    [CanBeNullAttribute]
private IWin32Window myOwnerWindow;
    [NotNullAttribute]
private Action`2<Lifetime, Window> myFCreateNew;
    [NotNullAttribute]
private SequentialLifetimes mySequence;
    [CanBeNullAttribute]
private Window myWindow;
    [CompilerGeneratedAttribute]
private static Action`1<Window> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`1<Window> CS$<>9__CachedAnonymousMethodDelegated;
    public CreateOrReuseWindow(Lifetime lifetime, IWin32Window owner, Action`2<Lifetime, Window> FCreateNew);
    public void Show();
    public void Close();
    [CompilerGeneratedAttribute]
private void <Show>b__0(LifetimeDefinition definition, Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <Show>b__3();
    [CompilerGeneratedAttribute]
private static void <Show>b__4(Window w);
    [CompilerGeneratedAttribute]
private static void <Close>b__c(Window w);
}
[ContentPropertyAttribute("Templates")]
public class JetBrains.UI.Extensions.DataTemplateCollectionSelector : DataTemplateSelector {
    [CompilerGeneratedAttribute]
private ObservableCollection`1<DataTemplate> <Templates>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <FallbackTemplate>k__BackingField;
    [NotNullAttribute]
public ObservableCollection`1<DataTemplate> Templates { get; private set; }
    [CanBeNullAttribute]
public DataTemplate FallbackTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public ObservableCollection`1<DataTemplate> get_Templates();
    [CompilerGeneratedAttribute]
private void set_Templates(ObservableCollection`1<DataTemplate> value);
    [CompilerGeneratedAttribute]
public DataTemplate get_FallbackTemplate();
    [CompilerGeneratedAttribute]
public void set_FallbackTemplate(DataTemplate value);
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
}
public class JetBrains.UI.Extensions.DataTemplateDelegate : DataTemplate {
    public DataTemplateDelegate(Func`1<UIElement> funcObjectGraphCreator);
}
public class JetBrains.UI.Extensions.DataTemplateSelectorDelegate : DataTemplateSelector {
    private Func`3<object, DependencyObject, DataTemplate> myFSelect;
    public DataTemplateSelectorDelegate(Func`3<object, DependencyObject, DataTemplate> FSelect);
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
}
public class JetBrains.UI.Extensions.DataTemplateSwitchSelector : DataTemplateSelector {
    private Dictionary`2<Type, DataTemplate> _map;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Type, DataTemplate>, DataTemplate> CS$<>9__CachedAnonymousMethodDelegate2;
    public void Add(DataTemplate template);
    public void Add(Type type, DataTemplate template);
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
    public sealed virtual IEnumerator`1<KeyValuePair`2<Type, DataTemplate>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static DataTemplate <SelectTemplate>b__1(KeyValuePair`2<Type, DataTemplate> pair);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.DependencyPropertyHelper : object {
    [ExtensionAttribute]
public static void InvalidateBindingRecursive(DependencyObject target);
    [ExtensionAttribute]
public static void InvalidateBindings(DependencyObject target);
    public static IEnumerable`1<DependencyProperty> GetProperties(DependencyObject target);
}
public class JetBrains.UI.Extensions.FindElementExtension : MarkupExtensionBase {
    [CompilerGeneratedAttribute]
private FindElementMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public FindElementMode Mode { get; public set; }
    public Type Type { get; public set; }
    public FindElementExtension(FindElementMode mode);
    [CompilerGeneratedAttribute]
public FindElementMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(FindElementMode value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    protected virtual IEnumerable`1<object> GetParameters(DependencyObject dependencyObject, object targetObject);
    protected virtual object GetValue(DependencyObject dependencyObject, Object[] parameters, Type targetType, object targetObject);
    private object GetTop(DependencyObject dependencyObject);
    [CompilerGeneratedAttribute]
private void <GetValue>b__10(object s, RoutedEventArgs e);
}
public enum JetBrains.UI.Extensions.FindElementMode : Enum {
    public int value__;
    public static FindElementMode Top;
}
public static class JetBrains.UI.Extensions.Helpers : object {
    public static bool Glassify(Window window, bool enable, NoWindowHandleAction action);
    public static bool Glassify(Void* handle, bool enable);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.HwndSourceEx : object {
    [ExtensionAttribute]
public static Rect GetElementBoundsInScreenPixels(UIElement uielement);
    [NotNullAttribute]
public static IProperty`1<HwndSource> GetHwndSourceLive(Lifetime lifetime, UIElement element);
}
public interface JetBrains.UI.Extensions.IStringConverter {
    public abstract virtual string ToString(object value);
    public abstract virtual object FromString(string value);
}
public class JetBrains.UI.Extensions.ListViewColumn : DependencyObject {
    public static DependencyProperty IsStretchedProperty;
    [CompilerGeneratedAttribute]
private static Func`2<GridViewColumn, double> CS$<>9__CachedAnonymousMethodDelegate3;
    private static ListViewColumn();
    public static bool GetIsStretched(DependencyObject obj);
    public static void SetIsStretched(DependencyObject obj, bool value);
    public static object OnCoerceStretch(DependencyObject source, object value);
    private static void OnListViewSizeChanged(object sender, SizeChangedEventArgs e);
    private static void OnListViewLoaded(object sender, RoutedEventArgs e);
    private static void SetColumnWidths(ListView listView);
    [CompilerGeneratedAttribute]
private static double <SetColumnWidths>b__1(GridViewColumn column);
}
public abstract class JetBrains.UI.Extensions.MarkupExtensionBase : MarkupExtension {
    private Property`1<object> myCurrentValueSink;
    private bool myMainBindingForSetterCreated;
    private static Binding ourNullBinding;
    private DependencyProperty myTemporaryProperty;
    private Property`1<int> myInvalidateTrigger;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegatee;
    private static MarkupExtensionBase();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    private void frameworkElement_Loaded(object sender, RoutedEventArgs e);
    protected virtual object ToTargetType(object result, Type targetType);
    private object Evaluate(Type targetType, object targetObject);
    private object ProvideValueInternal(DependencyObject dependencyObject, object targetObject, IServiceProvider serviceProvider);
    protected abstract virtual IEnumerable`1<object> GetParameters(DependencyObject dependencyObject, object targetObject);
    protected abstract virtual object GetValue(DependencyObject dependencyObject, Object[] parameters, Type targetType, object targetObject);
    protected BindingBase GetBinding(DependencyObject dependencyObject, object targetObject);
    protected virtual BindingBase ToBinding(object obj, DependencyObject dependencyObject, object targetObject);
    public void Invalidate();
    [CompilerGeneratedAttribute]
private object <ProvideValue>b__3(Object[] objects, Type targetType);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__d(object o);
}
public class JetBrains.UI.Extensions.MultiValueConverter : object {
    private Func`3<Object[], Type, object> _fConvert;
    public MultiValueConverter(Func`2<Object[], object> FConvert);
    public MultiValueConverter(Func`3<Object[], Type, object> FConvert);
    private sealed virtual override object System.Windows.Data.IMultiValueConverter.Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    private sealed virtual override Object[] System.Windows.Data.IMultiValueConverter.ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Extensions.Mvvm.CommandBinding : CommandBinding {
    private CommandHolder myCached;
    [CompilerGeneratedAttribute]
private Binding <Target>k__BackingField;
    public Binding Target { get; public set; }
    [CompilerGeneratedAttribute]
public Binding get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(Binding value);
    private void OnCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private void OnExecuted(object sender, ExecutedRoutedEventArgs e);
    private ICommand GetTargetCommand(object sender);
    private Binding GetPreparedBinding(DependencyObject source);
    private PropertyPath GetPath();
}
public class JetBrains.UI.Extensions.OrMultiValueConverter : MarkupExtension {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public static class JetBrains.UI.Extensions.PersistenceBehaviour : object {
    private static string Maximized;
    private static string Minimized;
    public static DependencyProperty PersistenceIdProperty;
    [CompilerGeneratedAttribute]
private static Func`2<string, double> CS$<>9__CachedAnonymousMethodDelegated;
    private static PersistenceBehaviour();
    public static string GetPersistenceId(DependencyObject o);
    public static void SetPersistenceId(DependencyObject o, string value);
    private static void OnPersistentIdChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void TrackSize(Window window, ISettingsStore settingsStore);
    private static string GetBoundsString(Window window, IContextBoundSettingsStore store);
    private static void SetBoundsString(Window window, IContextBoundSettingsStore store, string value);
    private static void RestoreSize(Window window, IContextBoundSettingsStore store);
    [CompilerGeneratedAttribute]
private static double <RestoreSize>b__c(string s);
}
public class JetBrains.UI.Extensions.Setting : DependencyObject {
    public static DependencyProperty ValueProperty;
    private UISettingsPersistence myInstance;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringConverter <Converter>k__BackingField;
    public string Id { get; public set; }
    public DependencyProperty Property { get; public set; }
    public IStringConverter Converter { get; public set; }
    public object Value { get; public set; }
    private static Setting();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DependencyProperty get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(DependencyProperty value);
    [CompilerGeneratedAttribute]
public IStringConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IStringConverter value);
    public object get_Value();
    public void set_Value(object value);
    internal void Bind(UISettingsPersistence instance, DependencyObject dependencyObject);
    private static void OnValueChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.SizeEx : object {
    [ExtensionAttribute]
public static Size Mul(Size size, Vector factor);
    [ExtensionAttribute]
public static Size Mul(Size size, double factor);
}
public class JetBrains.UI.Extensions.StyleSelectorDelegate : StyleSelector {
    private Func`3<object, DependencyObject, Style> myFSelect;
    public StyleSelectorDelegate(Func`3<object, DependencyObject, Style> FSelect);
    public virtual Style SelectStyle(object item, DependencyObject container);
}
public class JetBrains.UI.Extensions.TemplateBorder : Decorator {
    public static DependencyProperty ObjectGraphCreatorProperty;
    private static TemplateBorder();
    private static void OnObjectGraphCreatorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs args);
    private void ApplyObjectGraphCreatorProperty(Func`1<UIElement> value);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.TextBlockExtensions : object {
    [ExtensionAttribute]
public static bool IsTrimmed(TextBlock textBlock);
    [ExtensionAttribute]
public static bool HasInlines(TextBlock textBlock);
    [ExtensionAttribute]
public static string GetActualText(TextBlock textBlock);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.TextElementExtensions : object {
    [ExtensionAttribute]
public static string GetText(TextElement inline);
    [ExtensionAttribute]
public static string ToText(IEnumerable`1<T> inlines);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.ThicknessEx : object {
    [ExtensionAttribute]
public static Thickness Add(Thickness α, Thickness β);
    [ExtensionAttribute]
public static Size ToTotalSize(Thickness thіs);
}
public class JetBrains.UI.Extensions.UISettingsPersistence : Freezable {
    public static DependencyProperty InstanceProperty;
    public static DependencyProperty SettingsTableProperty;
    private ObsoleteLifetimeAndDefinitionAtTheSameTime myLifetime;
    private ObservableCollection`1<Setting> mySettings;
    public SettingsTableBase SettingsTable { get; public set; }
    public ObservableCollection`1<Setting> Settings { get; public set; }
    private static UISettingsPersistence();
    public SettingsTableBase get_SettingsTable();
    public void set_SettingsTable(SettingsTableBase value);
    public static UISettingsPersistence GetInstance(DependencyObject o);
    public static void SetInstance(DependencyObject o, UISettingsPersistence instance);
    public ObservableCollection`1<Setting> get_Settings();
    public void set_Settings(ObservableCollection`1<Setting> value);
    private static void OnObjectAttached(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    protected virtual Freezable CreateInstanceCore();
}
public static class JetBrains.UI.Extensions.ValueConverter : object {
    [NotNullAttribute]
public static ValueConverter`2<TSource, TTarget> Create(Func`2<TSource, TTarget> converter);
    [NotNullAttribute]
public static ValueConverter`2<TSource, TTarget> CreateTwoWay(Func`2<TSource, TTarget> converterForth, Func`2<TTarget, TSource> converterBack);
    [NotNullAttribute]
public static IMultiValueConverter Create2(Func`3<TSource0, TSource1, TTarget> converter);
    [NotNullAttribute]
public static IMultiValueConverter Create3(Func`4<TSource0, TSource1, TSource2, TTarget> converter);
    [NotNullAttribute]
public static IMultiValueConverter Create4(Func`5<TSource0, TSource1, TSource2, TSource3, TTarget> converter);
}
public class JetBrains.UI.Extensions.ValueConverter`2 : object {
    [NotNullAttribute]
public Func`2<TSource, TTarget> ConverterForth;
    [CanBeNullAttribute]
public Func`2<TTarget, TSource> ConverterBack;
    public ValueConverter`2(Func`2<TSource, TTarget> converterForth, Func`2<TTarget, TSource> converterBack);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.WindowsFormsUtil : object {
    private static Char[] hexDigits;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate11;
    private static WindowsFormsUtil();
    public static Color FromWebColor(string color);
    public static void SetTabOrder(Control[] controls);
    [ExtensionAttribute]
public static bool IsCopyAction(KeyEventArgs e);
    [ExtensionAttribute]
public static bool IsPasteAction(KeyEventArgs e);
    [ExtensionAttribute]
public static bool IsCutAction(KeyEventArgs e);
    [NotNullAttribute]
[ExtensionAttribute]
public static T BindToLifetime(T control, Lifetime lifetime);
    [ExtensionAttribute]
public static void KeepElementHostFocus(Form form, JetElementHost elementHost);
    [ExtensionAttribute]
public static void CenterInOwner(Form form, IWin32Window ownerWindow);
    public static void HackExitModalMenuMode();
    [CompilerGeneratedAttribute]
private static bool <FromWebColor>b__0(char c);
    [CompilerGeneratedAttribute]
private static void <HackExitModalMenuMode>b__10();
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.WindowsPresentaionTreeHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<DependencyObject, bool> CS$<>9__CachedAnonymousMethodDelegate20;
    [ExtensionAttribute]
public static T FindVisualDescendant(DependencyObject reference);
    [ExtensionAttribute]
public static DependencyObject FindVisualDescendant(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    private static DependencyObject FindVisualDescendantRecursive(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<T> FindVisualDescendants(DependencyObject d);
    [ExtensionAttribute]
public static T FindVisualAncestor(DependencyObject reference);
    [ExtensionAttribute]
public static DependencyObject FindVisualAncestor(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static DependencyObject FindVisualAncestor(DependencyObject d, Type type, ItemsControl itemsControl);
    [CanBeNullAttribute]
[ExtensionAttribute]
private static DependencyObject FindVisualTreeRoot(DependencyObject d);
    private static bool IsVisualOrVisual3D(DependencyObject dependencyObject);
    [ExtensionAttribute]
public static T FindLogicalDescendant(DependencyObject reference);
    [ExtensionAttribute]
public static DependencyObject FindLogicalDescendant(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    private static DependencyObject FindLogicalDescendantRecursive(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    [ExtensionAttribute]
public static T FindLogicalAncestor(DependencyObject reference);
    [ExtensionAttribute]
public static DependencyObject FindLogicalAncestor(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    [ExtensionAttribute]
public static T FindDescendant(DependencyObject reference);
    [ExtensionAttribute]
public static IEnumerable`1<T> FindDescendants(DependencyObject reference);
    [ExtensionAttribute]
public static DependencyObject FindDescendant(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<DependencyObject> FindDescendants(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    private static IEnumerable`1<DependencyObject> FindDescendantsRecursive(DependencyObject reference, Func`2<DependencyObject, bool> predicate, HashSet`1<DependencyObject> visited);
    private static ISet`1<DependencyObject> GetVisualAndLogicalChildren(DependencyObject reference);
    [ExtensionAttribute]
public static T FindAncestor(DependencyObject reference);
    [ExtensionAttribute]
public static DependencyObject FindAncestor(DependencyObject reference, Func`2<DependencyObject, bool> predicate);
    [ExtensionAttribute]
public static T GetVisualRoot(DependencyObject reference);
    [ExtensionAttribute]
public static T GetLogicalRoot(DependencyObject reference);
    [ExtensionAttribute]
public static string GetRenderedText(DependencyObject element);
    public static IEnumerable`1<GlyphRunDrawing> GetGlyphRuns(DependencyObject element);
    private static void Traverse(DependencyObject dependencyObject, Action`1<T> action);
    private static void TraverseGlyphRuns(Drawing drawing, Action`1<GlyphRunDrawing> action);
    [ExtensionAttribute]
public static bool TransferFocusInto(DependencyObject reference);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static UIElement FindFocusableElement(UIElement root);
    [ExtensionAttribute]
public static bool IsFocusWithin(UIElement element);
    [CompilerGeneratedAttribute]
private static bool <FindVisualDescendant>b__0(DependencyObject o);
    [CompilerGeneratedAttribute]
private static bool <FindVisualAncestor>b__a(DependencyObject o);
    [CompilerGeneratedAttribute]
private static bool <FindLogicalDescendant>b__b(DependencyObject o);
    [CompilerGeneratedAttribute]
private static bool <FindLogicalAncestor>b__c(DependencyObject o);
    [CompilerGeneratedAttribute]
private static bool <FindDescendant>b__d(DependencyObject o);
    [CompilerGeneratedAttribute]
private static bool <FindDescendants>b__e(DependencyObject o);
    [CompilerGeneratedAttribute]
private static bool <FindAncestor>b__18(DependencyObject o);
    [CompilerGeneratedAttribute]
private static bool <TransferFocusInto>b__1f(DependencyObject dependencyObject);
}
public static class JetBrains.UI.Extensions.WindowStyles : object {
    public static DependencyProperty HasHelpButtonProperty;
    public static DependencyProperty CanMaximizeProperty;
    public static DependencyProperty CanMinimizeProperty;
    public static DependencyProperty MaxHeightProperty;
    public static DependencyProperty MaxWidthProperty;
    public static DependencyProperty MinHeightProperty;
    public static DependencyProperty MinWidthProperty;
    public static RoutedEvent HelpRequestedEvent;
    private static Dictionary`2<IntPtr, Window> ourHookedWindows;
    private static WindowStyles();
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static bool GetHasHelpButton(Window element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static void SetHasHelpButton(Window element, bool value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static bool GetCanMaximize(Window element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static void SetCanMaximize(Window element, bool value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static bool GetCanMinimize(Window element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static void SetCanMinimize(Window element, bool value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static double GetMaxWidth(Window element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static void SetMaxWidth(Window element, double value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static double GetMinWidth(Window element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static void SetMinWidth(Window element, double value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static double GetMaxHeight(Window element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static void SetMaxHeight(Window element, double value);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static double GetMinHeight(Window element);
    [AttachedPropertyBrowsableForTypeAttribute("System.Windows.Window")]
public static void SetMinHeight(Window element, double value);
    private static void OnControlBoxChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void AddHelpRequestedHandler(DependencyObject window, RoutedEventHandler handler);
    public static void RemoveHelpRequestedHandler(DependencyObject window, RoutedEventHandler handler);
    private static Size GetAdjustedWorkingArea(Window window);
    private static void UpdateMinMaxSize(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void UpdateStyle(Window window, IntPtr hWnd);
    private static void UpdateExtendedStyle(Window window, IntPtr hWnd);
    private static void HookHelp(Window window, IntPtr hWnd);
    private static IntPtr HelpHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.WindowUtil : object {
    public static DataConstant`1<IWin32Window> DialogOwner;
    [CompilerGeneratedAttribute]
private static Func`2<IntPtr, long> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<IntPtr, long> CS$<>9__CachedAnonymousMethodDelegate7;
    private static WindowUtil();
    public static void LoadChildDialogPosition(Rectangle bounds, Form form, IWin32Window owner);
    public static Rectangle SaveChildDialogPosition(Form form, IWin32Window owner);
    public static void PushDisableWindowsButOne(Lifetime lifetime, IntPtr hwndModalWindow);
    public static void PushFocusedWindowState(Lifetime lifetime, IWin32Window mainwin);
    public static void PushModalWindowEnabledState(Lifetime lifetime, IntPtr hwndModalWindow, IWin32Window mainWindow);
    public static void SetParentWindow(IWin32Window window, IWin32Window parentWindow);
    public static void ForceWindowsLoseFocus();
    [CanBeNullAttribute]
public static Window TryGetWpfWindow(Void* hwnd);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Window FindWindow(DependencyObject reference);
    [NotNullAttribute]
[ExtensionAttribute]
public static IWin32Window GetWin32Window(Window window);
    [ExtensionAttribute]
[NotNullAttribute]
public static IWin32Window GetWin32WindowForced(Window window);
    [ExtensionAttribute]
public static void SetOwnerReliable(Form form, IWin32Window owner);
    [ExtensionAttribute]
public static void Show(Window window, Window ownerwin);
    [ExtensionAttribute]
public static void Show(Window window, IntPtr handle);
    [ExtensionAttribute]
public static void Show(Window window, IWin32Window ownerwin);
    public static Nullable`1<bool> ShowDialogWithGuardedCreation(Lifetime lifetime, WindowModality modality, Func`3<LifetimeDefinition, Lifetime, Window> FCreateView, IThreading threading, object ownerwindow, IApplicationModalState applicationModalState);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowOwnedDialog(Window window, IDataContext context);
    [ExtensionAttribute]
public static IWin32Window TryGetDialogOwner(IDataContext context);
    public static IWin32Window TryGetDialogOwner(IShellLocks shellLocks, DataContexts dataContexts);
    private static void ShowFocusCatcher(Void* hwndTopmost);
    private static void ReportInvalidOwnerType(object ownerwindow);
    [CompilerGeneratedAttribute]
private static long <PushDisableWindowsButOne>b__0(IntPtr x);
    [CompilerGeneratedAttribute]
private static long <PushDisableWindowsButOne>b__2(IntPtr x);
}
[ExtensionAttribute]
public static class JetBrains.UI.Extensions.WorkflowElementEx : object {
    [ExtensionAttribute]
public static void AddBrackets(FrameworkElement el, Action onLoaded, Action onUnloaded);
}
[OptionsPageAttribute("Features", "Products & Features", "JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons/Components")]
public class JetBrains.UI.FeaturesPage.FeaturesPage : AOptionsPage {
    public static string Pid;
    private static string NoDefaultLayerWarning;
    private ZoneUserPreferenceChecker myPreferenceChecker;
    private IShellLocks myLocks;
    private ListEvents`1<CheckableZoneItem> myFeatures;
    private IApplicationRestart myRestart;
    private Lifetime myLifetime;
    private IComponentContainer myContainer;
    private OptionKeywordRegistrator myOptionKeywordRegistrator;
    [CompilerGeneratedAttribute]
private Property`1<Visibility> <RestartAdviserVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplicationCanRestart>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableZone, CheckableZone> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableZoneItem, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableZoneItem, ZonePart> CS$<>9__CachedAnonymousMethodDelegate14;
    public Property`1<Visibility> RestartAdviserVisible { get; private set; }
    public IEnumerable`1<CheckableZoneItem> Features { get; }
    public bool ApplicationCanRestart { get; private set; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; private set; }
    public FeaturesPage(Lifetime lifetime, GlobalPerProductStorage globalPerProductStorage, IUIApplication environment, IComponentContainer container, OptionsSettingsSmartContext settings, IApplicationRestart restart, ZoneUserPreferenceChecker preferenceChecker, IShellLocks locks);
    [CompilerGeneratedAttribute]
public Property`1<Visibility> get_RestartAdviserVisible();
    [CompilerGeneratedAttribute]
private void set_RestartAdviserVisible(Property`1<Visibility> value);
    public IEnumerable`1<CheckableZoneItem> get_Features();
    [CompilerGeneratedAttribute]
public bool get_ApplicationCanRestart();
    [CompilerGeneratedAttribute]
private void set_ApplicationCanRestart(bool value);
    public virtual bool OnOk();
    public void SaveAndRestart();
    private void Save();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    [CompilerGeneratedAttribute]
private void set_SearchFilter(IProperty`1<OptionsFilterResult> value);
    public sealed virtual OptionsPageKeywords GetKeywords();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    private void FillKeywordRegistrator();
    public sealed virtual IEnumerable`1<string> GetTagKeywordsForPage();
    [CompilerGeneratedAttribute]
private static CheckableZone <.ctor>b__3(CheckableZone x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7(CheckableZoneItem x);
    [CompilerGeneratedAttribute]
private static ZonePart <.ctor>b__9(CheckableZoneItem x);
    [CompilerGeneratedAttribute]
private void <SaveAndRestart>b__18();
    [CompilerGeneratedAttribute]
private void <SaveAndRestart>b__1a();
}
public class JetBrains.UI.FeaturesPage.LanguagesPageView : UserControl {
    private DockPanel RestartPanel;
    internal Button RestartButton;
    private bool _contentLoaded;
    public void SetBindings(FeaturesPage context);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public abstract class JetBrains.UI.Feedback.AddAttachmentAction : object {
    protected string ProviderId { get; }
    protected abstract virtual string get_ProviderId();
    protected IOptionalReportAttachmentProvider GetAttachmentProvider(IDataContext context);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static AttachmentsControl GetAttachmentsControl(IDataContext context);
}
[ActionAttribute("AllScreensScreenshotAttachmentProvider", "Screenshot (All Screens)")]
public class JetBrains.UI.Feedback.AttachmentProviders.AllScreensScreenshotAttachmentAction : AddAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
[ReportAttachmentPartAttribute]
public class JetBrains.UI.Feedback.AttachmentProviders.AllScreensScreenshotAttachmentProvider : FileAttachmentProviderBase {
    public static string ProviderId;
    public static string ProviderName;
    public string Id { get; }
    public string Name { get; }
    public bool HideWindowDuringAttach { get; }
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
    public virtual bool IsAvailable();
    public virtual bool get_HideWindowDuringAttach();
}
[ActionAttribute("FileAttachmentProvider", "File")]
public class JetBrains.UI.Feedback.AttachmentProviders.FileAttachmentAction : AddAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
[ReportAttachmentPartAttribute]
public class JetBrains.UI.Feedback.AttachmentProviders.FileAttachmentProvider : FileAttachmentProviderBase {
    public static string ProviderId;
    public static string ProviderName;
    private ICommonFileDialogs myFiledlg;
    public string Id { get; }
    public string Name { get; }
    public FileAttachmentProvider(ICommonFileDialogs filedlg);
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
}
[ReportAttachmentPartAttribute]
public class JetBrains.UI.Feedback.AttachmentProviders.IsEvaluationProvider : object {
    private static string ProviderName;
    private ILicense2CheckComponent myLicenseCheckComponent;
    public string Name { get; }
    public IsEvaluationProvider(ILicense2CheckComponent licenseCheckComponent);
    public sealed virtual string get_Name();
    public sealed virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public sealed virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    public sealed virtual IReportAttachment RestoreFrom(XmlElement element);
}
[ReportAttachmentPartAttribute]
public class JetBrains.UI.Feedback.AttachmentProviders.OSVersionProvider : object {
    private static string ProviderName;
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public sealed virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    public sealed virtual IReportAttachment RestoreFrom(XmlElement element);
}
[ActionAttribute("PrimaryScreenScreenshotAttachmentProvider", "Screenshot")]
public class JetBrains.UI.Feedback.AttachmentProviders.PrimaryScreenScreenshotAttachmentAction : AddAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
[ReportAttachmentPartAttribute]
public class JetBrains.UI.Feedback.AttachmentProviders.PrimaryScreenScreenshotAttachmentProvider : FileAttachmentProviderBase {
    public static string ProviderId;
    public static string ProviderName;
    public string Id { get; }
    public string Name { get; }
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
}
[ReportAttachmentPartAttribute]
public class JetBrains.UI.Feedback.AttachmentProviders.ProductVersionProvider : object {
    private static string ProviderName;
    private SubProducts myEnvironmentZones;
    public string Name { get; }
    public ProductVersionProvider(SubProducts environmentZones);
    public sealed virtual string get_Name();
    public sealed virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public sealed virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    public sealed virtual IReportAttachment RestoreFrom(XmlElement element);
}
public class JetBrains.UI.Feedback.AttachmentProviders.ScreenshotAttachment : FileAttachmentBase {
    public string Prefix { get; }
    public ScreenshotAttachment(FileSystemPath localFilePath, string providerId);
    public virtual string get_Prefix();
}
public static class JetBrains.UI.Feedback.AttachmentProviders.ScreenshotHelper : object {
    public static Bitmap GetScreenshotImage(Rect boundingRect);
    public static void CaptureScreenshotPrimaryScreen(FileSystemPath path);
    public static void CaptureScreenshotAllScreens(FileSystemPath path);
    private static void CaptureScreenshot(FileSystemPath path, bool primaryScreenOnly);
    private static ImageCodecInfo GetEncoder(ImageFormat format);
}
[ReportAttachmentPartAttribute]
public class JetBrains.UI.Feedback.AttachmentProviders.TimeZoneProvider : object {
    private static string ProviderName;
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public sealed virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    public sealed virtual IReportAttachment RestoreFrom(XmlElement element);
}
public class JetBrains.UI.Feedback.Pages.BugReportControl : ReportContentBase {
    internal BugReportControl Page;
    internal TextBlock DetailsBlock;
    internal TextBox DetailsBox;
    private bool _contentLoaded;
    public RequestType RequestType { get; }
    public string CancelMessage { get; }
    public string CancelTitle { get; }
    public string SubmitButtonTooltip { get; }
    public virtual RequestType get_RequestType();
    public virtual string get_CancelMessage();
    public virtual string get_CancelTitle();
    public virtual string get_SubmitButtonTooltip();
    private void DetailsBox_OnTextChanged(object sender, TextChangedEventArgs e);
    public virtual ICollection`1<Pair`2<string, string>> GetTextParts();
    public virtual bool HasText();
    public virtual void ResetText();
    public virtual bool HasSufficientAttachments(IEnumerable`1<IReportAttachment> attachments);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Feedback.Pages.BugReportPage : ReportPageBase {
    private static string PageTitle;
    private static string TagName;
    public string Title { get; }
    public BugReportPage(Lifetime lifetime, ISettingsStore settingsStore, UserIdentificatorPartsContainer userIdentificatorParts, IThreading threading, IActionBarManager actionBarManager, IWindowBranding applicationDescriptor, OpensUri opensUri, IReportFactory reportFactory, ReportAttachmentPartsContainer reportAttachmentParts, IThemedIconManager themedIconManager, IWindowBranding branding);
    public virtual string get_Title();
    public virtual UserControl GetContents(FeedbackCenterHost parentWindow);
}
public class JetBrains.UI.Feedback.Pages.FeedbackReportControl : ReportContentBase {
    internal FeedbackReportControl Page;
    internal TextBlock GeneralSatisfactionTitle;
    internal TextBox GeneralSatisfactionBox;
    internal TextBlock FeaturesTitle;
    internal TextBox FeaturesBox;
    internal TextBlock ProblemsTitle;
    internal TextBox ProblemsBox;
    internal TextBlock RequestsTitle;
    internal TextBox ReqiestsBox;
    private bool _contentLoaded;
    public RequestType RequestType { get; }
    public string CancelMessage { get; }
    public string CancelTitle { get; }
    public string SubmitButtonTooltip { get; }
    private string Text { get; }
    public virtual RequestType get_RequestType();
    public virtual string get_CancelMessage();
    public virtual string get_CancelTitle();
    public virtual string get_SubmitButtonTooltip();
    private string get_Text();
    public virtual ICollection`1<Pair`2<string, string>> GetTextParts();
    public virtual void SetTextParts(IEnumerable`1<Pair`2<string, string>> parts);
    public virtual bool HasText();
    public virtual void ResetText();
    private void OnTextChanged(object sender, TextChangedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[FeedbackPartAttribute]
public class JetBrains.UI.Feedback.Pages.FeedbackReportPage : ReportPageBase {
    private static string PageTitle;
    private static string TagName;
    public float Order { get; }
    public string Title { get; }
    public FeedbackReportPage(Lifetime lifetime, ISettingsStore settingsStore, IThemedIconManager iconManager, UserIdentificatorPartsContainer userIdentificatorParts, IThreading threading, IActionBarManager actionBarManager, IWindowBranding applicationDescriptor, OpensUri opensUri, IReportFactory reportFactory, ReportAttachmentPartsContainer reportAttachmentParts, IWindowBranding branding);
    public virtual float get_Order();
    public virtual string get_Title();
    public virtual UserControl GetContents(FeedbackCenterHost parentWindow);
}
public class JetBrains.UI.Feedback.Pages.PerformanceReportControl : ReportContentBase {
    internal PerformanceReportControl Page;
    internal TextBox DescriptionBox;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private static Func`2<IReportAttachment, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public RequestType RequestType { get; }
    public string CancelMessage { get; }
    public string CancelTitle { get; }
    public string SubmitButtonTooltip { get; }
    public virtual ICollection`1<Pair`2<string, string>> GetTextParts();
    public virtual bool HasText();
    public virtual void ResetText();
    public virtual bool HasSufficientAttachments(IEnumerable`1<IReportAttachment> attachments);
    public virtual RequestType get_RequestType();
    public virtual string get_CancelMessage();
    public virtual string get_CancelTitle();
    public virtual string get_SubmitButtonTooltip();
    private void DescriptionBox_OnTextChanged(object sender, TextChangedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static bool <HasSufficientAttachments>b__1(IReportAttachment _);
}
public class JetBrains.UI.Feedback.Pages.PerformanceReportPage : ReportPageBase {
    private static string PageTitle;
    private static string TagName;
    public string Title { get; }
    public PerformanceReportPage(Lifetime lifetime, UserIdentificatorPartsContainer userIdentificatorParts, ISettingsStore settingsStore, IReportFactory reportFactory, IThemedIconManager themedIconManager, IThreading threading, IActionBarManager actionBarManager, ReportAttachmentPartsContainer reportAttachmentParts, IWindowBranding applicationDescriptor, OpensUri opensUri, IWindowBranding branding);
    public virtual string get_Title();
    public virtual UserControl GetContents(FeedbackCenterHost parentWindow);
}
public class JetBrains.UI.Feedback.Pages.ProblemReportControl : ReportContentBase {
    private Dictionary`2<string, Pair`2<string, string>> myKeywordMapping;
    internal ComboBox ReportTypeBox;
    internal TextBox SubjectBox;
    internal TextBox DescriptionBox;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private static Func`2<IReportAttachment, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IReportAttachment, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    public RequestType RequestType { get; }
    public string CancelMessage { get; }
    public string CancelTitle { get; }
    public string SubmitButtonTooltip { get; }
    private void DescriptionBox_OnTextChanged(object sender, TextChangedEventArgs e);
    public virtual bool HasText();
    public virtual bool HasSufficientAttachments(IEnumerable`1<IReportAttachment> attachments);
    public virtual ICollection`1<Pair`2<string, string>> GetTextParts();
    public virtual void SetTextParts(IEnumerable`1<Pair`2<string, string>> parts);
    public virtual IList`1<string> GetWarnings(ICollection`1<IReportAttachment> attachments);
    public virtual RequestType get_RequestType();
    private void SubjectBox_OnTextChanged(object sender, TextChangedEventArgs e);
    public virtual string get_CancelMessage();
    public virtual string get_CancelTitle();
    public virtual string get_SubmitButtonTooltip();
    private void OnReportTypeChanged(object sender, SelectionChangedEventArgs e);
    public void SetReportType(string reportType);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static bool <HasSufficientAttachments>b__1(IReportAttachment _);
    [CompilerGeneratedAttribute]
private static bool <GetWarnings>b__6(IReportAttachment _);
}
[FeedbackPartAttribute]
public class JetBrains.UI.Feedback.Pages.ProblemReportPage : ReportPageBase {
    private static string PageTitle;
    private static string TagName;
    private DataContexts myDataContexts;
    public float Order { get; }
    public string Title { get; }
    public ProblemReportPage(Lifetime lifetime, ISettingsStore settingsStore, UserIdentificatorPartsContainer userIdentificatorParts, IThreading threading, IActionBarManager actionBarManager, IWindowBranding applicationDescriptor, OpensUri opensUri, IReportFactory reportFactory, ReportAttachmentPartsContainer reportAttachmentParts, IThemedIconManager themedIconManager, IWindowBranding branding, DataContexts dataContexts);
    public virtual float get_Order();
    public virtual string get_Title();
    public virtual UserControl GetContents(FeedbackCenterHost parentWindow);
}
public class JetBrains.UI.Feedback.UI.AccountControl : UserControl {
    private UserIdentificator myUser;
    [CanBeNullAttribute]
private ISettingsStore mySettingsStore;
    private UserIdentificatorPartsContainer myUserIdentificatorParts;
    private Dictionary`2<string, UserIdentificator> myUserIdentificators;
    private IWindowBranding myWindowBranding;
    private string myPageName;
    private IWin32Window myOwner;
    internal DockPanel ContentPanel;
    private bool _contentLoaded;
    public UserIdentificator User { get; public set; }
    public AccountControl(Lifetime lifetime, ISettingsStore settingsStore, UserIdentificatorPartsContainer userIdentificatorParts, IWindowBranding branding, string pageName, IWin32Window owner);
    private void UpdateUserIdentifiers();
    private UserIdentificator GetUserIdentificator(string selectedIdentificator);
    public UserIdentificator get_User();
    public void set_User(UserIdentificator value);
    private void RenderUser();
    private void ChangeAccount_OnClick(object sender, RoutedEventArgs e);
    public void ShowChangeAccount();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private bool <RenderUser>b__5(IUserIdentificatorPart p);
}
[UserIdentificatorPartAttribute]
public class JetBrains.UI.Feedback.UI.AnonymousIdentificatorPart : object {
    public string Key { get; }
    public UserIdentificator Id { get; }
    public string SerializedId { get; }
    public double Order { get; }
    public sealed virtual string get_Key();
    public sealed virtual Pair`2<string, UserIdentificatorControlBase> RenderControl(UserIdentificator identificator);
    public sealed virtual void RenderString(InlineCollection inlines, UserIdentificator id);
    public sealed virtual UserIdentificator Parse(String[] parts);
    public sealed virtual UserIdentificator get_Id();
    public sealed virtual string get_SerializedId();
    public string GetSerializedId();
    public sealed virtual double get_Order();
}
public class JetBrains.UI.Feedback.UI.Attachment : UserControl {
    private Action`1<IReportAttachment> DeleteAttachment;
    internal Attachment Page;
    internal Border Border;
    internal TextBlock AttachmentNameBlock;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ImageSource <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <DeleteImage>k__BackingField;
    [CompilerGeneratedAttribute]
private IReportAttachment <ReportAttachment>k__BackingField;
    public ImageSource Image { get; private set; }
    public ImageSource DeleteImage { get; private set; }
    public IReportAttachment ReportAttachment { get; private set; }
    public Attachment(IReportAttachment attachment, IThemedIconManager iconManager);
    [CompilerGeneratedAttribute]
public ImageSource get_Image();
    [CompilerGeneratedAttribute]
private void set_Image(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_DeleteImage();
    [CompilerGeneratedAttribute]
private void set_DeleteImage(ImageSource value);
    protected virtual void OnMouseDoubleClick(MouseButtonEventArgs e);
    private void DeleteButton_OnClick(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
public IReportAttachment get_ReportAttachment();
    [CompilerGeneratedAttribute]
private void set_ReportAttachment(IReportAttachment value);
    public void add_DeleteAttachment(Action`1<IReportAttachment> value);
    public void remove_DeleteAttachment(Action`1<IReportAttachment> value);
    private void OpenContainingFolder_OnClick(object sender, RoutedEventArgs e);
    private void Open_OnClick(object sender, RoutedEventArgs e);
    private void OnMouseEnter(object sender, MouseEventArgs e);
    private void OnMouseLeave(object sender, MouseEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Feedback.UI.AttachmentsControl : UserControl {
    public static DataConstant`1<AttachmentsControl> AttachmentsControlConstant;
    private List`1<IDisposable> myAttachmentDisposables;
    private Form myMainForm;
    private IThemedIconManager myIconManager;
    private EventHandler AttachmentChanged;
    internal AttachmentsControl Page;
    internal WrapPanel AttachmentsPanel;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private bool <AttachEnvironmentInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionManagerContextMenu <AddAttachmentContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private GetDataRulesEventHandler <GetControlDataRules>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<IReportAttachment> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IProgressIndicator> <FCreateProgressIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    public bool AttachEnvironmentInfo { get; private set; }
    public ActionManagerContextMenu AddAttachmentContextMenu { get; private set; }
    public GetDataRulesEventHandler GetControlDataRules { get; private set; }
    public ListEvents`1<IReportAttachment> Attachments { get; private set; }
    public Func`1<IProgressIndicator> FCreateProgressIndicator { get; private set; }
    public AttachmentsControl(Lifetime lifetime, ReportAttachmentPartsContainer attachmentParts, Form mainForm, IThreading threading, IActionBarManager actionBarManager, IThemedIconManager iconManager, Func`1<IProgressIndicator> fCreateProgressIndicator, bool attachEnvironmentInfo);
    private static AttachmentsControl();
    public void add_AttachmentChanged(EventHandler value);
    public void remove_AttachmentChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_AttachEnvironmentInfo();
    [CompilerGeneratedAttribute]
private void set_AttachEnvironmentInfo(bool value);
    [CompilerGeneratedAttribute]
public ActionManagerContextMenu get_AddAttachmentContextMenu();
    [CompilerGeneratedAttribute]
private void set_AddAttachmentContextMenu(ActionManagerContextMenu value);
    [CompilerGeneratedAttribute]
public GetDataRulesEventHandler get_GetControlDataRules();
    [CompilerGeneratedAttribute]
private void set_GetControlDataRules(GetDataRulesEventHandler value);
    [CompilerGeneratedAttribute]
public ListEvents`1<IReportAttachment> get_Attachments();
    [CompilerGeneratedAttribute]
private void set_Attachments(ListEvents`1<IReportAttachment> value);
    [CompilerGeneratedAttribute]
public Func`1<IProgressIndicator> get_FCreateProgressIndicator();
    [CompilerGeneratedAttribute]
private void set_FCreateProgressIndicator(Func`1<IProgressIndicator> value);
    public void BeginGetAttachment(IOptionalReportAttachmentProvider attachmentProvider);
    public void BeginGetAttachment(IEnvironmentInfoAttachmentProvider attachmentProvider);
    private void BeginGetAttachmentInternal(IReportAttachmentProvider attachmentProvider);
    public void OnAttachmentAvailable(IReportAttachment attachment);
    public void AddAttachmentDisposable(IDisposable disposable);
    public void Clear();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, GetDataRulesEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <Clear>b__c();
}
public class JetBrains.UI.Feedback.UI.DummyUserIdentificatorControl : UserIdentificatorControlBase {
}
public class JetBrains.UI.Feedback.UI.FeedbackCenterControl : UserControl {
    private FeedbackCenterHost myParentWindow;
    private ISettingsStore mySettingsStore;
    private EventHandler`1<EventArgs> CloseButtonClicked;
    internal TabControl FeedbackTabControl;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private static Func`2<IFeedbackPage, float> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<TabItem, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, XmlNode> CS$<>9__CachedAnonymousMethodDelegate8;
    public FeedbackCenterControl(FeedbackPartsContainer feedbackParts, FeedbackCenterHost parentWindow, ISettingsStore settingsStore);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void CloseButton_OnClick(object sender, RoutedEventArgs e);
    public void add_CloseButtonClicked(EventHandler`1<EventArgs> value);
    public void remove_CloseButtonClicked(EventHandler`1<EventArgs> value);
    public void FocusTab(string tabName);
    public UserControl GetFocusedTab();
    public UserControl GetTab(string tabName);
    public bool NeedsSave();
    public void Save();
    public void Restore();
    public void Clear();
    public void SetReportType(string reportType);
    public void SetText(Pair`2[] parts);
    public void SetAttachments(IReportAttachment[] attachments);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static float <.ctor>b__1(IFeedbackPage fp);
    [CompilerGeneratedAttribute]
private static bool <NeedsSave>b__3(TabItem _);
    [CompilerGeneratedAttribute]
private static string <Restore>b__5(XmlNode _);
    [CompilerGeneratedAttribute]
private static XmlNode <Restore>b__6(XmlNode _);
}
public class JetBrains.UI.Feedback.UI.FeedbackCenterHost : Form {
    [CanBeNullAttribute]
private IWin32Window myOwnerwin;
    private FeedbackCenterControl myControl;
    private IContainer components;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreSaveOnClose>k__BackingField;
    public Lifetime Lifetime { get; private set; }
    public bool IgnoreSaveOnClose { get; public set; }
    public FeedbackCenterHost(IWindowBranding branding, FeedbackPartsContainer partsContainer, ISettingsStore settingsStore, IWin32Window ownerwin);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSaveOnClose();
    [CompilerGeneratedAttribute]
public void set_IgnoreSaveOnClose(bool value);
    public void Show();
    public void Restore();
    public void FocusTab(string tabName);
    public void SetReportType(string reportType);
    public void SetText(Pair`2[] parts);
    public void SetAttachments(IReportAttachment[] attachments);
    public void SaveIfRequired();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, EventArgs args);
}
public interface JetBrains.UI.Feedback.UI.IFeedbackPage {
    public float Order { get; }
    [NotNullAttribute]
public string Title { get; }
    public abstract virtual float get_Order();
    public abstract virtual string get_Title();
    [NotNullAttribute]
public abstract virtual UserControl GetContents(FeedbackCenterHost parentWindow);
}
public interface JetBrains.UI.Feedback.UI.IUserIdentificatorPart {
    public string Key { get; }
    public UserIdentificator Id { get; }
    public string SerializedId { get; }
    public double Order { get; }
    public abstract virtual string get_Key();
    public abstract virtual Pair`2<string, UserIdentificatorControlBase> RenderControl(UserIdentificator id);
    public abstract virtual void RenderString(InlineCollection inlines, UserIdentificator id);
    public abstract virtual UserIdentificator Parse(String[] parts);
    public abstract virtual UserIdentificator get_Id();
    public abstract virtual string get_SerializedId();
    public abstract virtual double get_Order();
}
public class JetBrains.UI.Feedback.UI.ProgressControl : UserControl {
    internal TextBlock ProgressIndicatorTextBlock;
    internal ProgressBar ProgressIndicatorBar;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private string <TaskName>k__BackingField;
    unknown string CurrentItemText {public set; }
    public bool IsCanceled { get; }
    public string TaskName { get; public set; }
    public sealed virtual void Dispose();
    public sealed virtual void set_CurrentItemText(string value);
    public sealed virtual bool get_IsCanceled();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TaskName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TaskName(string value);
    public sealed virtual void Advance(double units);
    public sealed virtual void Start(int totalWorkUnits);
    public sealed virtual void Stop();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Feedback.UI.ReportContentBase : UserControl {
    private bool myNoSubmitInProgress;
    private Action`1<string> TextChanged;
    private Action WarningsChanged;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate3;
    public RequestType RequestType { get; }
    public string CancelMessage { get; }
    public string CancelTitle { get; }
    public string SubmitButtonTooltip { get; }
    public bool NoSubmitInProgress { get; public set; }
    public virtual ICollection`1<Pair`2<string, string>> GetTextParts();
    public virtual bool HasText();
    public virtual void ResetText();
    public virtual void SetTextParts(IEnumerable`1<Pair`2<string, string>> parts);
    public virtual bool HasSufficientAttachments(IEnumerable`1<IReportAttachment> attachments);
    public virtual RequestType get_RequestType();
    public virtual string get_CancelMessage();
    public virtual string get_CancelTitle();
    public virtual string get_SubmitButtonTooltip();
    public void add_TextChanged(Action`1<string> value);
    public void remove_TextChanged(Action`1<string> value);
    public void add_WarningsChanged(Action value);
    public void remove_WarningsChanged(Action value);
    protected void FireTextChanged(string text);
    protected void FireWarningsChanged();
    public virtual IList`1<string> GetWarnings(ICollection`1<IReportAttachment> attachments);
    public bool get_NoSubmitInProgress();
    public void set_NoSubmitInProgress(bool value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(string param0);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1();
}
public class JetBrains.UI.Feedback.UI.ReportControlBase : UserControl {
    private AccountControl myAccountControl;
    private IWindowBranding myApplicationDescriptor;
    private AttachmentsControl myAttachmentsControl;
    private ReportContentBase myContent;
    private ErrorInfoControl myErrorInfoControl;
    private OpensUri myOpensUri;
    private FeedbackCenterHost myParentWindow;
    private ReportAttachmentPartsContainer myReportAttachmentParts;
    private IReportFactory myReportFactory;
    private ISettingsStore mySettingsStore;
    private string myTagName;
    private IThemedIconManager myThemedIconManager;
    public bool IsRestoring;
    private bool myKeepTextAndAttachments;
    private bool myNoSubmitInProgress;
    private bool myTextHasChanged;
    private PropertyChangedEventHandler PropertyChanged;
    internal ReportControlBase Page;
    internal RowDefinition ProgressRow;
    internal RowDefinition ErrorsRow;
    internal DockPanel ContentPanel;
    internal TextBlock ProgressIndicatorTextBlock;
    internal ProgressBar ProgressIndicatorBar;
    internal Button CancelSubmissionButton;
    internal DockPanel ErrorsPanel;
    internal DockPanel AttachmentsPanel;
    internal CheckBox KeepAttachmentsLocallyBox;
    internal DockPanel AccountPanel;
    internal Button SubmitReportButton;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<FileAttachmentBase, bool> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<FileAttachmentBase, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<IReportAttachment, bool> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Func`2<IOptionalReportAttachmentProvider, string> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<IOptionalReportAttachmentProvider, IOptionalReportAttachmentProvider> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, bool> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<IOptionalReportAttachmentProvider, string> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<IOptionalReportAttachmentProvider, IOptionalReportAttachmentProvider> CS$<>9__CachedAnonymousMethodDelegate34;
    public ReportContentBase Content { get; }
    public AttachmentsControl AttachmentsControl { get; }
    public bool NoSubmitInProgress { get; public set; }
    public bool SubmitButtonEnabled { get; }
    public string SubmitButtonTooltip { get; }
    public bool KeepTextAndAttachments { get; public set; }
    public ImageSource SuccessImage { get; }
    public string TagName { get; }
    unknown string CurrentItemText {public set; }
    public bool IsCanceled { get; private set; }
    public string TaskName { get; public set; }
    public ReportControlBase(ReportContentBase content, Lifetime lifetime, FeedbackCenterHost parentWindow, IReportFactory reportFactory, IThemedIconManager themedIconManager, ReportAttachmentPartsContainer reportAttachmentParts, IWindowBranding applicationDescriptor, ISettingsStore settingsStore, OpensUri opensUri, IThreading threading, IActionBarManager actionBarManager, UserIdentificatorPartsContainer userIdentificatorParts, IWindowBranding branding, string pageName, string tagName, DataContexts dataContexts);
    public ReportContentBase get_Content();
    public AttachmentsControl get_AttachmentsControl();
    public bool get_NoSubmitInProgress();
    public void set_NoSubmitInProgress(bool value);
    public bool get_SubmitButtonEnabled();
    public string get_SubmitButtonTooltip();
    public bool get_KeepTextAndAttachments();
    public void set_KeepTextAndAttachments(bool value);
    public ImageSource get_SuccessImage();
    public string get_TagName();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void set_CurrentItemText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCanceled();
    [CompilerGeneratedAttribute]
private void set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TaskName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TaskName(string value);
    public sealed virtual void Advance(double units);
    public sealed virtual void Start(int totalWorkUnits);
    public sealed virtual void Stop();
    private IProgressIndicator InitProgressIndicator();
    public void ShowOrHideWarnings(ICollection`1<string> warnings);
    public void ShowErrors(ICollection`1<string> errors);
    public void HideErrors();
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    private void SubmitReportButton_OnClick(object sender, RoutedEventArgs e);
    private void CancelSubmissionButton_OnClick(object sender, RoutedEventArgs e);
    public bool NeedsSave();
    public void SaveTo(XmlElement rootElement, XmlDocument document);
    public void Restore(XmlNode node);
    public void SetAttachments(IReportAttachment[] attachments);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object sender, CancelEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(string s);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <Stop>b__14();
    [CompilerGeneratedAttribute]
private static bool <ShowErrors>b__15(FileAttachmentBase _);
    [CompilerGeneratedAttribute]
private static FileSystemPath <ShowErrors>b__16(FileAttachmentBase _);
    [CompilerGeneratedAttribute]
private static string <ShowErrors>b__17(FileSystemPath location);
    [CompilerGeneratedAttribute]
private static bool <NeedsSave>b__29(IReportAttachment _);
    [CompilerGeneratedAttribute]
private static string <SaveTo>b__2b(IOptionalReportAttachmentProvider _);
    [CompilerGeneratedAttribute]
private static IOptionalReportAttachmentProvider <SaveTo>b__2c(IOptionalReportAttachmentProvider _);
    [CompilerGeneratedAttribute]
private static bool <Restore>b__2f(XmlNode _);
    [CompilerGeneratedAttribute]
private static string <Restore>b__30(IOptionalReportAttachmentProvider _);
    [CompilerGeneratedAttribute]
private static IOptionalReportAttachmentProvider <Restore>b__31(IOptionalReportAttachmentProvider _);
}
public abstract class JetBrains.UI.Feedback.UI.ReportPageBase : object {
    protected Lifetime myLifetime;
    protected ISettingsStore mySettingsStore;
    protected IThemedIconManager myThemedIconManager;
    protected UserIdentificatorPartsContainer myUserIdentificatorParts;
    protected IThreading myThreading;
    protected IActionBarManager myActionBarManager;
    protected IWindowBranding myWindowBranding;
    protected IWindowBranding myApplicationDescriptor;
    protected OpensUri myOpensUri;
    protected IReportFactory myReportFactory;
    protected ReportAttachmentPartsContainer myReportAttachmentParts;
    public float Order { get; }
    public string Title { get; }
    protected ReportPageBase(Lifetime lifetime, ISettingsStore settingsStore, UserIdentificatorPartsContainer userIdentificatorParts, IThreading threading, IActionBarManager actionBarManager, IWindowBranding applicationDescriptor, OpensUri opensUri, IReportFactory reportFactory, ReportAttachmentPartsContainer reportAttachmentParts, IThemedIconManager themedIconManager, IWindowBranding branding);
    public virtual float get_Order();
    public abstract virtual string get_Title();
    public abstract virtual UserControl GetContents(FeedbackCenterHost parentWindow);
}
public class JetBrains.UI.Feedback.UI.ResultControl : UserControl {
    private EventHandler`1<EventArgs> CloseButtonClicked;
    internal WebBrowser Browser;
    private bool _contentLoaded;
    public ResultControl(string text, OpensUri opensUri);
    public void add_CloseButtonClicked(EventHandler`1<EventArgs> value);
    public void remove_CloseButtonClicked(EventHandler`1<EventArgs> value);
    private void CloseButton_OnClick(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Feedback.UI.ResultHost : Form {
    private IContainer components;
    public ResultHost(string text, IWindowBranding applicationDescriptor, OpensUri opensUri);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, EventArgs args);
}
[ShellComponentAttribute]
public class JetBrains.UI.Feedback.UI.UpgradeFromExceptionReportSettingsComponent : object {
    [CompilerGeneratedAttribute]
private static Func`3<Lifetime, DataContexts, IDataContext> CS$<>9__CachedAnonymousMethodDelegate1;
    public UpgradeFromExceptionReportSettingsComponent(IUIApplication environment, UserIdentificatorPartsContainer parts);
    [CompilerGeneratedAttribute]
private static IDataContext <.ctor>b__0(Lifetime l, DataContexts c);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "UpgradeFromExceptionReportSettingsKey")]
public class JetBrains.UI.Feedback.UI.UpgradeFromExceptionReportSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "UpgradePerformed")]
public bool UpgradePerformed;
}
public class JetBrains.UI.Feedback.UI.UserIdentificatorControl : UserControl {
    private Dictionary`2<RadioButton, IUserIdentificatorPart> myPartsMapping;
    private Dictionary`2<RadioButton, UserIdentificatorControlBase> myControlMapping;
    private UserIdentificatorWindow myWindow;
    private Action`1<string> SelectedIdentificatorKeyChanged;
    private Action`1<bool> VerificationStateChanged;
    internal UserIdentificatorControl Page;
    internal Grid Layout;
    internal StackPanel IdentificatorControlsPanel;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private static Action`1<string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Action`1<bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`3<IUserIdentificatorPart, IUserIdentificatorPart, Nullable`1<int>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<RadioButton, IUserIdentificatorPart>, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<RadioButton, IUserIdentificatorPart>, IUserIdentificatorPart> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<IUserIdentificatorPart, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, string, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<RadioButton, IUserIdentificatorPart>, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<RadioButton, IUserIdentificatorPart>, string> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<RadioButton, UserIdentificatorControlBase>, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<RadioButton, UserIdentificatorControlBase>, UserIdentificatorControlBase> CS$<>9__CachedAnonymousMethodDelegate1c;
    public UserIdentificator UserIdentificator { get; }
    public string Configuration { get; }
    public string SelectedIdentificatorKey { get; }
    public string Header { get; }
    public UserIdentificatorControl(UserIdentificatorWindow window, UserIdentificatorPartsContainer userIdentificatorParts, Dictionary`2<string, UserIdentificator> userIdentificators, string selectedIdentificatorKey);
    public UserIdentificator get_UserIdentificator();
    public string get_Configuration();
    public string get_SelectedIdentificatorKey();
    public void add_SelectedIdentificatorKeyChanged(Action`1<string> value);
    public void remove_SelectedIdentificatorKeyChanged(Action`1<string> value);
    public void add_VerificationStateChanged(Action`1<bool> value);
    public void remove_VerificationStateChanged(Action`1<bool> value);
    public string get_Header();
    public bool Validate();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(string key);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3(bool param0);
    [CompilerGeneratedAttribute]
private static Nullable`1<int> <.ctor>b__4(IUserIdentificatorPart x, IUserIdentificatorPart y);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <get_UserIdentificator>b__d(KeyValuePair`2<RadioButton, IUserIdentificatorPart> pair);
    [CompilerGeneratedAttribute]
private static IUserIdentificatorPart <get_UserIdentificator>b__e(KeyValuePair`2<RadioButton, IUserIdentificatorPart> pair);
    [CompilerGeneratedAttribute]
private static string <get_Configuration>b__11(IUserIdentificatorPart part);
    [CompilerGeneratedAttribute]
private static StringBuilder <get_Configuration>b__12(StringBuilder builder, string s);
    [CompilerGeneratedAttribute]
private static bool <get_SelectedIdentificatorKey>b__15(KeyValuePair`2<RadioButton, IUserIdentificatorPart> pair);
    [CompilerGeneratedAttribute]
private static string <get_SelectedIdentificatorKey>b__16(KeyValuePair`2<RadioButton, IUserIdentificatorPart> pair);
    [CompilerGeneratedAttribute]
private static bool <Validate>b__19(KeyValuePair`2<RadioButton, UserIdentificatorControlBase> pair);
    [CompilerGeneratedAttribute]
private static UserIdentificatorControlBase <Validate>b__1a(KeyValuePair`2<RadioButton, UserIdentificatorControlBase> part);
}
public class JetBrains.UI.Feedback.UI.UserIdentificatorControlBase : UserControl {
    private Action`1<bool> ValidationStatusChanged;
    [CompilerGeneratedAttribute]
private static Action`1<bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public virtual bool Validate(Double& heightChange);
    public void add_ValidationStatusChanged(Action`1<bool> value);
    public void remove_ValidationStatusChanged(Action`1<bool> value);
    protected void FireValidationStatusChanged(bool status);
    public virtual void ClearValidationStatus();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(bool status);
}
public class JetBrains.UI.Feedback.UI.UserIdentificatorWindow : Window {
    private UserIdentificatorControl myUserIdentificatorControl;
    [CanBeNullAttribute]
private ISettingsStore mySettingsStore;
    private PropertyChangedEventHandler PropertyChanged;
    internal UserIdentificatorWindow Page;
    internal ContentControl UserPanel;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private bool <SelectedAccountIsValid>k__BackingField;
    public bool SelectedAccountIsValid { get; private set; }
    public UserIdentificator UserIdentificator { get; }
    public UserIdentificatorWindow(UserIdentificatorPartsContainer userIdentificatorParts, ISettingsStore settingsStore, Dictionary`2<string, UserIdentificator> userIdentificators, IWindowBranding branding, string pageName);
    private void UpdateState(string key);
    [CompilerGeneratedAttribute]
public bool get_SelectedAccountIsValid();
    [CompilerGeneratedAttribute]
private void set_SelectedAccountIsValid(bool value);
    public void Save();
    private void OkButtonClick(object sender, RoutedEventArgs e);
    private void CancelButtonClick(object sender, RoutedEventArgs e);
    public UserIdentificator get_UserIdentificator();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(bool state);
}
public class JetBrains.UI.Feedback.UI.UserNameAccountControl : UserIdentificatorControlBase {
    internal UserNameAccountControl Page;
    internal RowDefinition StatusRow;
    internal Border UserNameBorder;
    internal TextBox UserNameBox;
    internal Border EMailBorder;
    internal TextBox EMailBox;
    internal StackPanel StatusPanel;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private RenderParams <RenderParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<string, TextBlock> CS$<>9__CachedAnonymousMethodDelegate4;
    public RenderParams RenderParameters { get; private set; }
    public UserNameAccountControl(string userName, string email);
    [CompilerGeneratedAttribute]
public RenderParams get_RenderParameters();
    [CompilerGeneratedAttribute]
private void set_RenderParameters(RenderParams value);
    public virtual void ClearValidationStatus();
    public virtual bool Validate(Double& heightChange);
    private void UserNameBox_OnTextChanged(object sender, TextChangedEventArgs e);
    private void EMailBox_OnTextChanged(object sender, TextChangedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static TextBlock <Validate>b__3(string error);
}
[UserIdentificatorPartAttribute]
public class JetBrains.UI.Feedback.UI.UserNameIdentificatorPart : object {
    private UserNameAccountControl myControl;
    public string Key { get; }
    public UserIdentificator Id { get; }
    public string SerializedId { get; }
    public double Order { get; }
    public sealed virtual string get_Key();
    public sealed virtual Pair`2<string, UserIdentificatorControlBase> RenderControl(UserIdentificator identificator);
    public sealed virtual void RenderString(InlineCollection inlines, UserIdentificator id);
    public sealed virtual UserIdentificator Parse(String[] parts);
    public sealed virtual UserIdentificator get_Id();
    public sealed virtual string get_SerializedId();
    public sealed virtual double get_Order();
}
public class JetBrains.UI.Feedback.UI.YouTrackAccountControl : UserIdentificatorControlBase {
    private Lifetime myLifetime;
    private IIssueTracker myIssueTracker;
    private IconSet myIconSet;
    private object mySync;
    private Timer myVerifyCredentialsTimer;
    private bool myIsInitializing;
    private Nullable`1<CredentialsVerificationResult> myVerificationStatus;
    internal YouTrackAccountControl Page;
    internal RowDefinition VerificationRow;
    internal Border UserNameBorder;
    internal TextBox UserNameBox;
    internal Border PasswordBorder;
    internal PasswordBox PasswordBox;
    internal Image StatusImage;
    internal TextBlock StatusTextBlock;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private RenderParams <RenderParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<CredentialsVerificationComponent> CS$<>9__CachedAnonymousMethodDelegate4;
    public RenderParams RenderParameters { get; private set; }
    public YouTrackAccountControl(string userName, string password, Lifetime lifetime, IIssueTracker issueTracker, IconSet iconSet);
    public virtual void ClearValidationStatus();
    private void HideStatus();
    private void ClearUserNamePasswordStatus();
    private void ClearRunningStatus();
    private void OnCredentialsVerificationTimerElapsed();
    private void FireCredentialsVerification();
    private void SetRunningStatus();
    private void OnVerificationStatusChanged(CredentialsVerificationResult result);
    private void ShowVerificationSuccess();
    private void ShowVerificationProblem(string text, ThemedIconLoader icon, Border highlight);
    [CompilerGeneratedAttribute]
public RenderParams get_RenderParameters();
    [CompilerGeneratedAttribute]
private void set_RenderParameters(RenderParams value);
    private void UserNameBox_OnTextChanged(object sender, TextChangedEventArgs e);
    private void PasswordBox_OnPasswordChanged(object sender, RoutedEventArgs e);
    public virtual bool Validate(Double& heightChange);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, ElapsedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <HideStatus>b__3(CredentialsVerificationComponent c);
    [CompilerGeneratedAttribute]
private void <OnCredentialsVerificationTimerElapsed>b__5();
}
[UserIdentificatorPartAttribute]
public class JetBrains.UI.Feedback.UI.YouTrackIdentificatorPart : object {
    private Lifetime myLifetime;
    private IIssueTracker myIssueTracker;
    private IconSet myIconSet;
    private YouTrackAccountControl myControl;
    public string Key { get; }
    public UserIdentificator Id { get; }
    public string SerializedId { get; }
    public double Order { get; }
    public YouTrackIdentificatorPart(Lifetime lifetime, IIssueTracker issuetracker, IThemedIconManager iconManager);
    public sealed virtual string get_Key();
    public sealed virtual Pair`2<string, UserIdentificatorControlBase> RenderControl(UserIdentificator identificator);
    public sealed virtual void RenderString(InlineCollection inlines, UserIdentificator id);
    public sealed virtual UserIdentificator Parse(String[] parts);
    public sealed virtual UserIdentificator get_Id();
    public sealed virtual string get_SerializedId();
    public string GetSerializedId(string userName, string encryptedPassword);
    public sealed virtual double get_Order();
}
public static class JetBrains.UI.FocusExtensions : object {
    public static DependencyProperty IsEnhancedFocusScopeProperty;
    [CompilerGeneratedAttribute]
private static bool <SettingKeyboardFocus>k__BackingField;
    private static bool SettingKeyboardFocus { get; private set; }
    private static FocusExtensions();
    [CompilerGeneratedAttribute]
private static bool get_SettingKeyboardFocus();
    [CompilerGeneratedAttribute]
private static void set_SettingKeyboardFocus(bool value);
    public static bool GetIsEnhancedFocusScope(DependencyObject element);
    public static void SetIsEnhancedFocusScope(DependencyObject element, bool value);
    private static void OnIsEnhancedFocusScopeChanged(DependencyObject depObj, DependencyPropertyChangedEventArgs e);
    private static void OnGotKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.Icons.PublishThemedIconManagerToPlatformResources : object {
    public PublishThemedIconManagerToPlatformResources(Lifetime lifetime, IPlatformResourceDictionary platformResourceDictionary, IThemedIconManager themedIconManager);
}
[ShellComponentAttribute]
public class JetBrains.UI.Icons.RegisterThemedIconDefaultViews : object {
    public RegisterThemedIconDefaultViews(Lifetime lifetime, IAutomationViewsRegistry automationViewsRegistry);
}
public class JetBrains.UI.Icons.RotatedIconIdViewHelper : object {
    private static AnimationClock ourRotationAnimationClock;
    [CompilerGeneratedAttribute]
private static Action`1<DoubleAnimation> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<RotateTransform> CS$<>9__CachedAnonymousMethodDelegate3;
    public static Transform CreateAnimatedRenderTransform();
    [CompilerGeneratedAttribute]
private static void <CreateAnimatedRenderTransform>b__0(DoubleAnimation a);
    [CompilerGeneratedAttribute]
private static void <CreateAnimatedRenderTransform>b__1(RotateTransform tr);
}
public class JetBrains.UI.Icons.ThemedIconExtension : MarkupExtension {
    public static DependencyProperty ThemedIconExtensionAppliedProperty;
    [CompilerGeneratedAttribute]
private Type <TypeofIcon>k__BackingField;
    public Type TypeofIcon { get; public set; }
    public ThemedIconExtension(Type typeofIcon);
    private static ThemedIconExtension();
    [CompilerGeneratedAttribute]
public Type get_TypeofIcon();
    [CompilerGeneratedAttribute]
public void set_TypeofIcon(Type value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    [NotNullAttribute]
private static object ProvideValue(IconId iconid, FrameworkElement elemTarget, DependencyProperty propTarget, IServiceProvider serviceProvider);
    public static void ApplyTo(FrameworkElement elemTarget, DependencyProperty propTarget, IconId iconid, IServiceProvider serviceProvider);
}
public class JetBrains.UI.Icons.ThemedIconManagerResourceKey : ResourceKey {
    public static ThemedIconManagerResourceKey Key;
    public Assembly Assembly { get; }
    private static ThemedIconManagerResourceKey();
    public virtual Assembly get_Assembly();
    public sealed virtual bool Equals(ThemedIconManagerResourceKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ThemedIconManagerResourceKey left, ThemedIconManagerResourceKey right);
    public static bool op_Inequality(ThemedIconManagerResourceKey left, ThemedIconManagerResourceKey right);
    public virtual string ToString();
}
[UsedImplicitlyAttribute]
public class JetBrains.UI.Icons.ThemedIconViewImage : Image {
    public static DependencyProperty ThemedIconsManagerProperty;
    public static DependencyProperty LiveImageSourceProperty;
    [NotNullAttribute]
private static MultiValueConverter myConvertCombineManagerAndIcon;
    [NotNullAttribute]
private ValueConverter`2<ImageSource, ImageSource> myConverterEnsureNonNull;
    [NotNullAttribute]
private ValueConverter`2<object, Transform> myConverterIconIdToAnimationTransform;
    [CompilerGeneratedAttribute]
private bool <UseCustomPixelSnapping>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ImageSource, ImageSource> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<object, Transform> CS$<>9__CachedAnonymousMethodDelegate5;
    [CanBeNullAttribute]
public IconId IconId { get; public set; }
    public bool UseCustomPixelSnapping { get; public set; }
    private static ThemedIconViewImage();
    public ThemedIconViewImage(IconId id);
    private void ApplyRotationAnimation();
    public IconId get_IconId();
    public void set_IconId(IconId value);
    [CompilerGeneratedAttribute]
public bool get_UseCustomPixelSnapping();
    [CompilerGeneratedAttribute]
public void set_UseCustomPixelSnapping(bool value);
    [CanBeNullAttribute]
private static object CombineManagerAndIcon(Object[] objects);
    private static void HandleIsEnabledChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void SetEffect(ThemedIconViewImage themedIconViewImage, bool isEnabled);
    private Vector GetSnappedOffsets();
    protected virtual void OnRender(DrawingContext dc);
    [CompilerGeneratedAttribute]
private static ImageSource <.ctor>b__2(ImageSource src);
    [CompilerGeneratedAttribute]
private static Transform <.ctor>b__3(object datacontext);
}
[ActionAttribute("Toggle Internal")]
public class JetBrains.UI.Internal.ToggleInternal : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.UI.License.EvaluationExpirationControl : UserControl {
    private static string TEXT;
    private IWindowBranding myWindowBranding;
    private IMainWindow myMainWindow;
    private FeedbackPartsContainer myFeedbackParts;
    private ISettingsStore mySettingsStore;
    private IContainer components;
    private Button myContinueButton;
    private Button myEnterLicenseButton;
    private Button myPurchaseButton;
    private JetWebBrowser myWebBrowser;
    public EvaluationExpirationControl(int daysLeft, string productNames, IWindowBranding windowBranding, IMainWindow mainWindow, FeedbackPartsContainer feedbackParts, ISettingsStore settingsStore, Action enterLicenseAction);
    private static EvaluationExpirationControl();
    protected void OnBrowserNavigating(object sender, WebBrowserNavigatingEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, EventArgs args);
}
public class JetBrains.UI.License.EvaluationFeedbackControl : UserControl {
    private static string PATTERN;
    private IContainer components;
    private Button myCancelButton;
    private Button mySubmitButton;
    private JetWebBrowser myWebBrowser;
    public EvaluationFeedbackControl(string productDisplayName, int nDays);
    private static EvaluationFeedbackControl();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, EventArgs args);
}
public class JetBrains.UI.License.JetWebBrowser : UserControl {
    private WebBrowser myBrowserControl;
    private HtmlElement myDiv;
    private Size myDesiredSize;
    private EventHandler DesiredSizeChanged;
    private WebBrowserNavigatingEventHandler BrowserNavigating;
    private IContainer components;
    public Size DesiredSize { get; public set; }
    public string BrowserText { get; public set; }
    public Size get_DesiredSize();
    public void set_DesiredSize(Size value);
    public void add_DesiredSizeChanged(EventHandler value);
    public void remove_DesiredSizeChanged(EventHandler value);
    public string get_BrowserText();
    public void set_BrowserText(string value);
    public void add_BrowserNavigating(WebBrowserNavigatingEventHandler value);
    public void remove_BrowserNavigating(WebBrowserNavigatingEventHandler value);
    protected static string GetMeasuringDivStyle(Size size);
    private void OnBrowserDocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e);
    private void CalculateDesiredSize();
    protected virtual void OnSizeChanged(EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, WebBrowserNavigatingEventArgs args);
}
public class JetBrains.UI.License.LicenseAgreementForm : Form {
    private IContainer components;
    private RichTextBox myAgreementBox;
    private Button myOkButton;
    private Button myCancelButton;
    private RadioButton myAccesptRadio;
    private RadioButton myDeclineRadio;
    public LicenseAgreementForm(string caption, string agreementText, IWindowBranding windowBranding, OpensUri opensUri);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object param0, EventArgs param1);
}
public static class JetBrains.UI.License.LicenseInformation.PasswordHelper : object {
    public static DependencyProperty PasswordProperty;
    public static DependencyProperty AttachProperty;
    private static DependencyProperty IsUpdatingProperty;
    private static PasswordHelper();
    public static void SetAttach(DependencyObject dp, bool value);
    public static bool GetAttach(DependencyObject dp);
    public static string GetPassword(DependencyObject dp);
    public static void SetPassword(DependencyObject dp, string value);
    private static bool GetIsUpdating(DependencyObject dp);
    private static void SetIsUpdating(DependencyObject dp, bool value);
    private static void OnPasswordPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void Attach(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void PasswordChanged(object sender, RoutedEventArgs e);
}
public class JetBrains.UI.License.ObtainPermanentLicenseRequestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public bool IsSuccessful { get; public set; }
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public void set_IsSuccessful(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class JetBrains.UI.License.ObtainPermanentLicenseWindow : Window {
    private EventHandler`1<ObtainPermanentLicenseRequestEventArgs> SendRequest;
    private EventHandler`1<ObtainPermanentLicenseRequestEventArgs> ActivateLicense;
    public static DependencyProperty EmailProperty;
    public static DependencyProperty ActivationCodeProperty;
    public static DependencyProperty BannerProperty;
    public static DependencyProperty CanSendRequestProperty;
    public static DependencyProperty CanInitiateLicenseActivationProperty;
    public static DependencyProperty HasErrorOccuredProperty;
    public static DependencyProperty ErrorMessageProperty;
    public static DependencyProperty HasLicenseIssuedProperty;
    private HelpSystem myHelpSystem;
    internal TextBlock myHeaderText;
    internal Label myEmailAddressLabel;
    internal TextBox myEmailAddressTextBox;
    internal Button mySendRequestButton;
    internal Label myActivationKeyLabel;
    internal TextBox myActivationKeyTextBox;
    internal Button myActivateLicenseButton;
    internal Button myOkButton;
    private bool _contentLoaded;
    public string Email { get; public set; }
    public string ActivationCode { get; public set; }
    public ImageSource Banner { get; public set; }
    public bool CanInitiateRequestSending { get; public set; }
    public bool CanInitiateLicenseActivation { get; public set; }
    public bool HasErrorOccured { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool HasLicenseIssued { get; public set; }
    public ObtainPermanentLicenseWindow(IWindowBranding windowBranding, HelpSystem helpSystem);
    private static ObtainPermanentLicenseWindow();
    public void add_SendRequest(EventHandler`1<ObtainPermanentLicenseRequestEventArgs> value);
    public void remove_SendRequest(EventHandler`1<ObtainPermanentLicenseRequestEventArgs> value);
    public void add_ActivateLicense(EventHandler`1<ObtainPermanentLicenseRequestEventArgs> value);
    public void remove_ActivateLicense(EventHandler`1<ObtainPermanentLicenseRequestEventArgs> value);
    public string get_Email();
    public void set_Email(string value);
    public string get_ActivationCode();
    public void set_ActivationCode(string value);
    public ImageSource get_Banner();
    public void set_Banner(ImageSource value);
    public bool get_CanInitiateRequestSending();
    public void set_CanInitiateRequestSending(bool value);
    public bool get_CanInitiateLicenseActivation();
    public void set_CanInitiateLicenseActivation(bool value);
    public bool get_HasErrorOccured();
    public void set_HasErrorOccured(bool value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public bool get_HasLicenseIssued();
    public void set_HasLicenseIssued(bool value);
    private void OnContextHelp(object sender, RoutedEventArgs e);
    private void OnSendRequestClick(object sender, RoutedEventArgs e);
    private static bool ValidateEmailFormat(string email);
    private void OnActivateLicenseClick(object sender, RoutedEventArgs e);
    private void PerformRequestSending();
    private void PerformLicenseActivation();
    private void OnCloseClick(object sender, RoutedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License.PasteTextBox : TextBox {
    private Container components;
    private EventHandler TextPasted;
    public void add_TextPasted(EventHandler value);
    public void remove_TextPasted(EventHandler value);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    protected virtual void WndProc(Message& m);
}
[ObsoleteAttribute("Don't use, as (a) it's WinForms (b) we don't need product branding decorations anymore.")]
public class JetBrains.UI.License.ProductBaseForm : Form {
    private static int PADDING;
    private static int TEXT_PADDING;
    private RichTextLabel myTextLabel;
    private Image myImage;
    private string myLabelText;
    private Color myLabelColor;
    private bool myLabelBorder;
    private UserControl myInnerControl;
    private IContainer components;
    private PictureBox myPictureBox;
    private Panel myControlPanel;
    private Panel myTextPanel;
    public Image Image { get; public set; }
    public string LabelText { get; public set; }
    public Color LabelColor { get; public set; }
    public bool LabelBorder { get; public set; }
    public UserControl InnerControl { get; public set; }
    private ProductBaseForm(ITheming theming);
    public ProductBaseForm(IWindowBranding windowBranding, ITheming theming);
    public ProductBaseForm(UserControl innerControl, IWindowBranding windowBranding, ITheming theming);
    private void SetClientWidth(int width);
    private void UpdateControls(int imageHeight, int textHeight, int controlHeight);
    protected virtual void OnSizeChanged(EventArgs e);
    public void set_Image(Image value);
    public Image get_Image();
    public void set_LabelText(string value);
    public string get_LabelText();
    public void set_LabelColor(Color value);
    public Color get_LabelColor();
    public bool get_LabelBorder();
    public void set_LabelBorder(bool value);
    public void set_InnerControl(UserControl value);
    public UserControl get_InnerControl();
    private void OnButtonClicked(object sender, EventArgs eventArgs);
    private void OnInnerControlSizeChanged(object sender, EventArgs e);
    private void SetOkCancelButtons(Control control);
    public void Show(Lifetime lifetime, IWin32Window ownerWindow, Action onOkAction);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
private void <Show>b__1();
    [CompilerGeneratedAttribute]
private void <Show>b__3(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <Show>b__4(object sender, EventArgs args);
}
public class JetBrains.UI.License2.AcceptDocumentControl : UserControl {
    internal WebBrowser myBrowser;
    private bool _contentLoaded;
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void OnBrowserNavigating(object sender, NavigatingCancelEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.AcceptDocumentControlModel : NotifyPropertyChanged {
    private static string ReachedEndOfDocumentUrl;
    private OpensUri myOpensUri;
    private string myDocumentTitle;
    private string myDocumentHtml;
    [CompilerGeneratedAttribute]
private FooterControlModel <Footer>k__BackingField;
    public string DocumentTitle { get; public set; }
    public string DocumentHtml { get; public set; }
    public FooterControlModel Footer { get; private set; }
    public AcceptDocumentControlModel(ILogger logger, OpensUri opensUri);
    private void InitializeFooter(ILogger logger);
    public string get_DocumentTitle();
    public void set_DocumentTitle(string value);
    public string get_DocumentHtml();
    public void set_DocumentHtml(string value);
    private static string FixDocumentHtml(string html);
    [CompilerGeneratedAttribute]
public FooterControlModel get_Footer();
    [CompilerGeneratedAttribute]
private void set_Footer(FooterControlModel value);
    public bool HandleNavigation(Uri uri);
}
public class JetBrains.UI.License2.Adapter.JBAccountProviderViewModelAdapter : JBAccountProviderViewModel {
    private JBAcountLicenseViewSubmodel myJbaSubmodel;
    private IWindowBranding myWindowBranding;
    [CompilerGeneratedAttribute]
private static Func`2<AssetViewModel, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<AssetViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`2<AssetViewModel, string> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, IEnumerable`1<ISupportsJetBrainsAccount>> CS$<>9__CachedAnonymousMethodDelegate2d;
    [CompilerGeneratedAttribute]
private static Func`2<ISupportsJetBrainsAccount, string> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, IEnumerable`1<ISupportsJetBrainsAccount>> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<ISupportsJetBrainsAccount, DateTime> CS$<>9__CachedAnonymousMethodDelegate35;
    public JBAccountProviderViewModelAdapter(Lifetime lifetime, CommonResources commonResources, JBAcountLicenseViewSubmodel jbaSubmodel, LicenseViewModelBridge licenseViewModelBridge, ITaskHost taskHost, ILogger logger, IWindowBranding windowBranding, OpensUri opensUri, ImageSources imageSources);
    private void OnViewModelReset(JBAccountViewModel viewModel);
    private string GetAssetName(AssetData data);
    private DateTime GetProductBuildDate(AssetData data);
    private void SubmodelToViewModel(JBAccountViewModel viewModel, LicenseViewModelBridge bridge);
    private string GetAssetDataDescription(AssetData data);
    private void OnAssetViewModelChanged(object sender, PropertyChangedEventArgs e);
    private static void TryLogout(JBAcountLicenseViewSubmodel jbaSubmodel, JBAccountViewModel model);
    private static void TryLogin(Lifetime lifetime, JBAcountLicenseViewSubmodel jbaSubmodel, JBAccountViewModel model, ITaskHost taskHost, LicenseViewModelBridge bridge);
    [CompilerGeneratedAttribute]
private void <.ctor>b__19(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1a(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <OnViewModelReset>b__24(AssetViewModel assetModel);
    [CompilerGeneratedAttribute]
private static bool <OnViewModelReset>b__25(AssetViewModel assetModel);
    [CompilerGeneratedAttribute]
private static string <OnViewModelReset>b__26(AssetViewModel assetModel);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ISupportsJetBrainsAccount> <GetAssetName>b__2a(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static string <GetAssetName>b__2c(ISupportsJetBrainsAccount jba);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ISupportsJetBrainsAccount> <GetProductBuildDate>b__31(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static DateTime <GetProductBuildDate>b__33(ISupportsJetBrainsAccount jba);
}
public class JetBrains.UI.License2.Adapter.LicenseServerProviderViewModelAdapter : LicenseServerProviderViewModel {
    private Lifetime myLifetime;
    private WebProxySettingsReader myProxySettingsReader;
    private LicenseServerViewSubmodel myLicenseServerViewSubmodel;
    private LicenseViewModelBridge myLicenseViewModelBridge;
    private ITaskHost myTaskHost;
    private IWindowBranding myWindowBranding;
    private HelpSystem myHelpSystem;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static Func`2<LicenseServerViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableEntityModel, bool> CS$<>9__CachedAnonymousMethodDelegate49;
    public LicenseServerProviderViewModelAdapter(Lifetime lifetime, WebProxySettingsReader proxySettingsReader, CommonResources commonResources, LicenseServerViewSubmodel licenseServerViewSubmodel, LicenseViewModelBridge licenseViewModelBridge, ITaskHost taskHost, ILogger logger, IWindowBranding windowBranding, HelpSystem helpSystem, OpensUri opensUri, ImageSources imageSources);
    private static IList`1<EntityModel> GetEntityModelsWithLicenseServerSupport(LicenseViewModelBridge licenseViewModelBridge);
    private void UpdateShortInfoState();
    private void InitComboboxItems();
    protected virtual void UpdateComboboxAfterManageWindowIsClosed();
    private void FixViewModelBeforeWindowIsShown();
    private void OnViewModelPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdatePermanentTicketButtonState();
    protected virtual bool QueueValidateLicenseServer(LicenseServerViewModel viewModel);
    private void RequestPermanentTickets();
    [CompilerGeneratedAttribute]
private void <.ctor>b__30(Lifetime urlLifetime, string url);
    [CompilerGeneratedAttribute]
private void <.ctor>b__32(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__34(LicenseServerViewModel model);
    [CompilerGeneratedAttribute]
private static bool <GetEntityModelsWithLicenseServerSupport>b__3b(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <UpdateComboboxAfterManageWindowIsClosed>b__45(LicenseServerViewModel model);
    [CompilerGeneratedAttribute]
private static bool <UpdateComboboxAfterManageWindowIsClosed>b__46(CheckableEntityModel entityModel);
    [CompilerGeneratedAttribute]
private ILicensedEntity <UpdateComboboxAfterManageWindowIsClosed>b__47(CheckableEntityModel entityModel);
}
public class JetBrains.UI.License2.Adapter.LicenseViewModelBridge : object {
    [CompilerGeneratedAttribute]
private IWin32Window <DialogOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private BidirectionalMap`2<ILicensedEntity, EntityModel> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LicenseProviderViewModel> <LicenseProviderModels>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSources <ImageSources>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<IconId, IconId> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Comparison`1<EntityModel> CS$<>9__CachedAnonymousMethodDelegate19;
    public IWin32Window DialogOwner { get; private set; }
    public BidirectionalMap`2<ILicensedEntity, EntityModel> Entities { get; private set; }
    public IList`1<LicenseProviderViewModel> LicenseProviderModels { get; private set; }
    public ImageSources ImageSources { get; private set; }
    public LicenseViewModelBridge(Lifetime lifetime, LicenseViewModel viewModel, ITaskHost taskHost, ILogger logger, IWindowBranding windowBranding, HelpSystem helpSystem, OpensUri opensUri, ITheming theming, WebProxySettingsReader proxySettingsReader, IWin32Window dialogOwner, ICommonFileDialogs filedlg);
    [CompilerGeneratedAttribute]
public IWin32Window get_DialogOwner();
    [CompilerGeneratedAttribute]
private void set_DialogOwner(IWin32Window value);
    [CompilerGeneratedAttribute]
public BidirectionalMap`2<ILicensedEntity, EntityModel> get_Entities();
    [CompilerGeneratedAttribute]
private void set_Entities(BidirectionalMap`2<ILicensedEntity, EntityModel> value);
    [CompilerGeneratedAttribute]
public IList`1<LicenseProviderViewModel> get_LicenseProviderModels();
    [CompilerGeneratedAttribute]
private void set_LicenseProviderModels(IList`1<LicenseProviderViewModel> value);
    [CompilerGeneratedAttribute]
public ImageSources get_ImageSources();
    [CompilerGeneratedAttribute]
private void set_ImageSources(ImageSources value);
    private static Tuple`3<ImageSource, ImageSource, ImageSource> GetEntityImages(ILicensedEntity entity, ITheming theming);
    private static ImageSource GetImageSource(ITheming theming, IconThemeAspect aspect, Type iconType, Func`2<IconId, IconId> effectOnIconId);
    public static IList`1<EntityModel> Sort(IEnumerable`1<EntityModel> entityModels);
    private void UpdateEntitiesState(LicenseViewModel viewModel);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__4(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__5(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
private static IconId <GetEntityImages>b__16(IconId id);
    [CompilerGeneratedAttribute]
private static int <Sort>b__18(EntityModel m1, EntityModel m2);
}
public class JetBrains.UI.License2.Adapter.UserLicenseLicenseProviderViewModelAdapter : UserLicenseLicenseProviderViewModel {
    private UserLicenseViewSubmodel myUserLicenseViewSubmodel;
    private LicenseViewModelBridge myBridge;
    private ConcurrentDictionary`2<UserLicenseModel, UserLicense> myModelToLicenseMap;
    [CompilerGeneratedAttribute]
private static Func`2<ManagedItemViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo`1<INamedLicenseData>, string> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo`1<INamedLicenseData>, bool> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo`1<INamedLicenseData>, bool> CS$<>9__CachedAnonymousMethodDelegate40;
    [CompilerGeneratedAttribute]
private static Func`3<ResultWithDescription, ILicenseCheckInfo`1<INamedLicenseData>, ResultWithDescription> CS$<>9__CachedAnonymousMethodDelegate42;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo`1<INamedLicenseData>, ResultWithDescription> CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static Func`2<ResultWithDescription, bool> CS$<>9__CachedAnonymousMethodDelegate44;
    [CompilerGeneratedAttribute]
private static Func`3<ResultWithDescription, ResultWithDescription, ResultWithDescription> CS$<>9__CachedAnonymousMethodDelegate45;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate46;
    [CompilerGeneratedAttribute]
private static Func`2<ILicenseCheckInfo`1<INamedLicenseData>, INamedLicenseData> CS$<>9__CachedAnonymousMethodDelegate4c;
    [CompilerGeneratedAttribute]
private static Comparison`1<INamedLicenseData> CS$<>9__CachedAnonymousMethodDelegate4d;
    public UserLicenseLicenseProviderViewModelAdapter(Lifetime lifetime, IList`1<EntityModel> entityModels, CommonResources commonResources, UserLicenseViewSubmodel userLicenseViewSubmodel, LicenseViewModelBridge bridge, ILogger logger, IWindowBranding windowBranding, ImageSources imageSources, ICommonFileDialogs filedlg);
    private void UpdatViewModelFromLicenses();
    private void UpdateLicensesFromViewModel();
    private void UpdateShortInfoState();
    private void UpdateLicenseResults();
    private static INamedLicenseData SelectLicenseData(IList`1<ILicenseCheckInfo`1<INamedLicenseData>> infos);
    private ImageSource GetImageSource(UserLicense userLicense, LicenseState licenseState, INamedLicenseData namedLicenseData, ResultWithDescription aggregatedResult);
    private String[] GetStatusText(UserLicense userLicense, LicenseState licenseState, INamedLicenseData namedLicenseData, String[] existingText);
    private static string GetLicenseTitle(UserLicense license, LicenseState state, INamedLicenseData namedLicenseData);
    protected virtual void QueueModelCheck(UserLicenseModel userLicenseModel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16();
    [CompilerGeneratedAttribute]
private void <.ctor>b__18(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1a(object sender, DialogResultEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1b(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__19(ManagedItemViewModel model);
    [CompilerGeneratedAttribute]
private bool <UpdateShortInfoState>b__2e(UserLicenseModel model);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicenseCheckInfo`1<INamedLicenseData>> <UpdateShortInfoState>b__2f(UserLicenseModel model);
    [CompilerGeneratedAttribute]
private static string <UpdateShortInfoState>b__31(ILicenseCheckInfo`1<INamedLicenseData> info);
    [CompilerGeneratedAttribute]
private static bool <UpdateShortInfoState>b__30(ILicenseCheckInfo`1<INamedLicenseData> info);
    [CompilerGeneratedAttribute]
private static bool <UpdateLicenseResults>b__38(ILicenseCheckInfo`1<INamedLicenseData> info);
    [CompilerGeneratedAttribute]
private EntityModel <UpdateLicenseResults>b__39(ILicenseCheckInfo`1<INamedLicenseData> info);
    [CompilerGeneratedAttribute]
private static ResultWithDescription <UpdateLicenseResults>b__3a(ResultWithDescription r, ILicenseCheckInfo`1<INamedLicenseData> info);
    [CompilerGeneratedAttribute]
private static ResultWithDescription <UpdateLicenseResults>b__3b(ILicenseCheckInfo`1<INamedLicenseData> info);
    [CompilerGeneratedAttribute]
private static bool <UpdateLicenseResults>b__3c(ResultWithDescription result);
    [CompilerGeneratedAttribute]
private static ResultWithDescription <UpdateLicenseResults>b__3d(ResultWithDescription r1, ResultWithDescription r2);
    [CompilerGeneratedAttribute]
private static bool <UpdateLicenseResults>b__3e(string s);
    [CompilerGeneratedAttribute]
private static INamedLicenseData <SelectLicenseData>b__4a(ILicenseCheckInfo`1<INamedLicenseData> info);
    [CompilerGeneratedAttribute]
private static int <SelectLicenseData>b__4b(INamedLicenseData d1, INamedLicenseData d2);
    [CompilerGeneratedAttribute]
private void <QueueModelCheck>b__4e();
}
public class JetBrains.UI.License2.Common.BindableRun : Run {
    public static DependencyProperty ContentProperty;
    public string Content { get; public set; }
    private static BindableRun();
    public string get_Content();
    public void set_Content(string value);
    private static void ContentChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private void ContentChanged(string value);
}
public class JetBrains.UI.License2.Common.CommonResources : object {
    public static string LicenseKey;
    public static string TextBoxInfoKey;
    public static string JBAccoutInfoKey;
    public static string LicenseServerInfoKey;
    public static string LicenseServerKey;
    public static string AssetKey;
    private ResourceDictionary myDictionary;
    public DataTemplate LicenseKeyDataTemplate { get; }
    public DataTemplate TextBoxInfoDataTemplate { get; }
    public DataTemplate JBAccountInfoDataTemplate { get; }
    public DataTemplate LicenseServerInfoDataTemplate { get; }
    public DataTemplate LicenseServerDataTemplate { get; }
    public DataTemplate get_LicenseKeyDataTemplate();
    public DataTemplate get_TextBoxInfoDataTemplate();
    public DataTemplate get_JBAccountInfoDataTemplate();
    public DataTemplate get_LicenseServerInfoDataTemplate();
    public DataTemplate get_LicenseServerDataTemplate();
}
public class JetBrains.UI.License2.Common.EnabledEntitiesControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.Common.FooterControl : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.Common.FooterControlModel : NotifyPropertyChanged {
    private string myFooterText;
    private string myHyperlinkText;
    private string myCurrentHyperlinkText;
    private ICommand myNavigateCommand;
    private FooterMode myMode;
    [CompilerGeneratedAttribute]
private ButtonState <OkButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <CancelButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<Window> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action`1<Window> CS$<>9__CachedAnonymousMethodDelegate5;
    public ButtonState OkButtonState { get; private set; }
    public ButtonState CancelButtonState { get; private set; }
    public FooterMode Mode { get; public set; }
    public string FooterText { get; public set; }
    public ICommand NavigateCommand { get; public set; }
    public string CurrentHyperlinkText { get; public set; }
    public string HyperlinkText { get; public set; }
    public FooterControlModel(ILogger logger);
    [CompilerGeneratedAttribute]
public ButtonState get_OkButtonState();
    [CompilerGeneratedAttribute]
private void set_OkButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ButtonState get_CancelButtonState();
    [CompilerGeneratedAttribute]
private void set_CancelButtonState(ButtonState value);
    private void UpdateButtons();
    public FooterMode get_Mode();
    public void set_Mode(FooterMode value);
    public string get_FooterText();
    public void set_FooterText(string value);
    public ICommand get_NavigateCommand();
    public void set_NavigateCommand(ICommand value);
    public string get_CurrentHyperlinkText();
    public void set_CurrentHyperlinkText(string value);
    public string get_HyperlinkText();
    public void set_HyperlinkText(string value);
    private void UpdateTextBlock();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(Window window);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__3(Window window);
}
public enum JetBrains.UI.License2.Common.FooterMode : Enum {
    public int value__;
    public static FooterMode UNKNOWN;
    public static FooterMode OK;
    public static FooterMode OK_CANCEL;
    public static FooterMode CLOSE;
}
public class JetBrains.UI.License2.Common.ImageSources : object {
    [CompilerGeneratedAttribute]
private ImageSource <Remove>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Warining>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Manage>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Restore>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <InProgress>k__BackingField;
    public ImageSource Remove { get; public set; }
    public ImageSource Success { get; public set; }
    public ImageSource Error { get; public set; }
    public ImageSource Warining { get; public set; }
    public ImageSource Add { get; public set; }
    public ImageSource Manage { get; public set; }
    public ImageSource Restore { get; public set; }
    public ImageSource InProgress { get; public set; }
    [CompilerGeneratedAttribute]
public ImageSource get_Remove();
    [CompilerGeneratedAttribute]
public void set_Remove(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_Warining();
    [CompilerGeneratedAttribute]
public void set_Warining(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_Add();
    [CompilerGeneratedAttribute]
public void set_Add(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_Manage();
    [CompilerGeneratedAttribute]
public void set_Manage(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_Restore();
    [CompilerGeneratedAttribute]
public void set_Restore(ImageSource value);
    [CompilerGeneratedAttribute]
public ImageSource get_InProgress();
    [CompilerGeneratedAttribute]
public void set_InProgress(ImageSource value);
}
public class JetBrains.UI.License2.Common.SimpleCommand : object {
    private Action`1<Window> myActionToExecute;
    private EventHandler CanExecuteChanged;
    public Action`1<Window> ActionToExecute { get; public set; }
    public SimpleCommand(Action`1<Window> actionToExecute);
    public Action`1<Window> get_ActionToExecute();
    public void set_ActionToExecute(Action`1<Window> value);
    public sealed virtual void Execute(object parameter);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public class JetBrains.UI.License2.Common.States.ButtonState : UIElementState`1<Button> {
    private bool myIsEnabled;
    private Visibility myVisibility;
    private object myContent;
    private ICommand myCommand;
    private Thickness myMargin;
    private bool myIsDefault;
    private bool myIsCancel;
    private object myToolTip;
    public bool IsDefault { get; public set; }
    public bool IsCancel { get; public set; }
    public Thickness Margin { get; public set; }
    [CanBeNullAttribute]
public ICommand Command { get; public set; }
    public Visibility Visibility { get; public set; }
    public object Content { get; public set; }
    public bool IsEnabled { get; public set; }
    public object ToolTip { get; public set; }
    public ButtonState(ILogger logger);
    public void Update(bool isEnabled, Visibility visibility, Action`1<Window> command);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public bool get_IsCancel();
    public void set_IsCancel(bool value);
    public Thickness get_Margin();
    public void set_Margin(Thickness value);
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public object get_Content();
    public void set_Content(object value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public object get_ToolTip();
    public void set_ToolTip(object value);
}
[ExtensionAttribute]
public static class JetBrains.UI.License2.Common.States.CommonStyles : object {
    private static Dictionary`2<Type, Dictionary`2<DependencyProperty, Binding>> ourBindings;
    private static CommonStyles();
    private static IEnumerable`1<KeyValuePair`2<DependencyProperty, Binding>> GetOrCreateBindings();
    public static void SetBindings(TElement targetElement, TState stateObject);
    [ExtensionAttribute]
private static Setter CreateSetter(DependencyProperty property);
    private static Type GetTargetType();
    private static Style CreateStyle();
}
public class JetBrains.UI.License2.Common.States.StateBinder : DependencyObject {
    public static DependencyProperty BindToButtonStateProperty;
    public static DependencyProperty BindToTextBlockStateProperty;
    public static DependencyProperty BindToTextBoxStateProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7;
    private static StateBinder();
    public static ButtonState GetBindToButtonState(UIElement element);
    public static void SetBindToButtonState(UIElement element, ButtonState value);
    public static TextBlockState GetBindToTextBlockState(UIElement element);
    public static void SetBindToTextBlockState(UIElement element, TextBlockState value);
    public static TextBoxState GetBindToTextBoxState(UIElement element);
    public static void SetBindToTextBoxState(UIElement element, TextBoxState value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject o, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
public class JetBrains.UI.License2.Common.States.TextBlockState : UIElementState`1<TextBlock> {
    private Visibility myVisibility;
    private string myText;
    private FontStyle myFontStyle;
    private FontWeight myFontWeight;
    private TextDecorationCollection myTextDecorations;
    private Brush myForeground;
    public Visibility Visibility { get; public set; }
    public string Text { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public TextDecorationCollection TextDecorations { get; public set; }
    public Brush Foreground { get; public set; }
    public TextBlockState(ILogger logger);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public string get_Text();
    public void set_Text(string value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public TextDecorationCollection get_TextDecorations();
    public void set_TextDecorations(TextDecorationCollection value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
}
[ExtensionAttribute]
public static class JetBrains.UI.License2.Common.States.TextBlockStateEx : object {
    [ExtensionAttribute]
public static TextDecorationCollection ToTextDecorationCollection(TextDecorationLocation location);
}
public class JetBrains.UI.License2.Common.States.TextBoxState : UIElementState`1<TextBox> {
    private bool myIsReadOnly;
    private bool myIsEnabled;
    private FontStyle myFontStyle;
    private FontWeight myFontWeight;
    private string myText;
    private Brush myForeground;
    public bool IsReadOnly { get; public set; }
    public bool IsEnabled { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public string Text { get; public set; }
    public Brush Foreground { get; public set; }
    public TextBoxState(ILogger logger);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public string get_Text();
    public void set_Text(string value);
    public Brush get_Foreground();
    public void set_Foreground(Brush value);
}
public class JetBrains.UI.License2.Common.States.UIElementState`1 : NotifyPropertyChanged {
    public UIElementState`1(ILogger logger);
}
public class JetBrains.UI.License2.Common.StatusIndicatorControl : UserControl {
    private ToolTip myMoreTooltip;
    internal TextBlock myMoreTextBlock;
    internal TextBlockWithHyperlinks myFirstLineTextBlock;
    private bool _contentLoaded;
    private static bool IsTextTrimmed(TextBlock textBlock);
    private void OnFirstLineActualWidthChanged(object sender, EventArgs e);
    private void OnMoreClicked(object sender, RoutedEventArgs routedEventArgs);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <OnFirstLineActualWidthChanged>b__0();
    [CompilerGeneratedAttribute]
private void <OnMoreClicked>b__2(object o, RoutedEventArgs args);
}
public class JetBrains.UI.License2.Common.StatusIndicatorViewModel : NotifyPropertyChanged {
    private ImageSource myImageSource;
    private Visibility myImageVisibility;
    private bool myIsEnabled;
    private string myFirstLine;
    private IEnumerable`1<string> myOtherLines;
    private Visibility myVisibility;
    private ViewMode myViewMode;
    private IList`1<string> myText;
    private IList`1<string> myTooltipLines;
    private bool myUseCustomTooltip;
    private bool myShowMore;
    private TextWrapping myTextWrapping;
    [CompilerGeneratedAttribute]
private ImageSources <ImageSources>k__BackingField;
    private ImageSources ImageSources { get; private set; }
    public Visibility Visibility { get; public set; }
    public ViewMode Mode { get; public set; }
    public IList`1<string> Text { get; public set; }
    public IList`1<string> TooltipLines { get; public set; }
    public bool UseCustomTooltip { get; public set; }
    public bool ShowMore { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public Visibility ImageVisibility { get; public set; }
    public bool IsEnabled { get; public set; }
    public string FirstLine { get; public set; }
    public IEnumerable`1<string> OtherLines { get; public set; }
    public TextWrapping TextWrapping { get; private set; }
    public StatusIndicatorViewModel(ILogger logger, ImageSources imageSources);
    [CompilerGeneratedAttribute]
private ImageSources get_ImageSources();
    [CompilerGeneratedAttribute]
private void set_ImageSources(ImageSources value);
    public StatusIndicatorViewModel Update(ResultWithDescription result);
    public StatusIndicatorViewModel Update(ImageSource image, String[] text);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public ViewMode get_Mode();
    public void set_Mode(ViewMode value);
    public IList`1<string> get_Text();
    public void set_Text(IList`1<string> value);
    private void UpdateTooltip();
    public IList`1<string> get_TooltipLines();
    public void set_TooltipLines(IList`1<string> value);
    public bool get_UseCustomTooltip();
    public void set_UseCustomTooltip(bool value);
    public bool get_ShowMore();
    public void set_ShowMore(bool value);
    private void CalculateLines();
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public Visibility get_ImageVisibility();
    public void set_ImageVisibility(Visibility value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_FirstLine();
    public void set_FirstLine(string value);
    public IEnumerable`1<string> get_OtherLines();
    public void set_OtherLines(IEnumerable`1<string> value);
    public TextWrapping get_TextWrapping();
    private void set_TextWrapping(TextWrapping value);
}
public class JetBrains.UI.License2.Common.TextBlockWithHyperlinks : TextBlock {
    public static DependencyProperty ContentProperty;
    public string Content { get; public set; }
    public TextBlockWithHyperlinks(Inline inline);
    private static TextBlockWithHyperlinks();
    public string get_Content();
    public void set_Content(string value);
    private static void ContentChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private void ContentChanged(string value);
}
public static class JetBrains.UI.License2.Common.TextBlockWithHyperlinksUtils : object {
    public static IList`1<Inline> Parse(string text);
    private static IList`1<Inline> ParseStringWithABandLinks(string text);
    private static IList`1<Inline> ParseStringWithBandLinks(string text);
    private static IList`1<Inline> ParseStringWithLinks(string value);
    public static Inline CreateRun(string text);
    public static Inline CreateRun(string text, FontWeight fontWeight);
    public static Inline CreateHyperlink(Uri uri, string linkText);
    private static void OpenUri(Uri uri);
}
public class JetBrains.UI.License2.Conflict.LicenseConflictForm : Form {
    private static int cButtonArtificialWidth;
    private Button myEnterLicense;
    private Button myBounceLicense;
    private Button myDisable;
    private Label myTextLabel;
    private UserLicenseConflictCheckerComponent myConflictCompoment;
    private Byte[] myData;
    private LicenseConflictDescriptor myConflictDescriptor;
    private ILogger myLogger;
    public LicenseConflictForm(UserLicenseConflictCheckerComponent conflictCompoment, IPAddress anotherHostAddress, IWindowBranding windowBranding, Byte[] data, LicenseConflictDescriptor conflictDescriptor);
    private static int CalcBestWidth(Button btn);
    private void OnBounceLicense(object sender, EventArgs e);
    private void OnEnterLicense(object sender, EventArgs e);
    private void OnDisable(object sender, EventArgs e);
}
[ShellComponentAttribute]
public class JetBrains.UI.License2.Conflict.UserLicenseConflictCheckerComponent : object {
    private IEnumerable`1<ILicenseConflictChecker> myConflictCheckers;
    [NotNullAttribute]
private SocketManager mySocketManager;
    [NotNullAttribute]
private IThreading myInvocator;
    [CanBeNullAttribute]
private IMainWindow myMainWindow;
    private int myNumberOfCheckers;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ILicense2CheckComponent myLicense2CheckComponent;
    private IWindowBranding myWindowBranding;
    private bool myIsInConflict;
    private SafeRegistryPersister`1<Stats> myPersister;
    [CompilerGeneratedAttribute]
private static Action`1<Stats> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Action`1<Stats> CS$<>9__CachedAnonymousMethodDelegate16;
    private bool JetBrains.Application.Communication.IPortListener.ContinueListening { get; }
    public UserLicenseConflictCheckerComponent(Lifetime lifetime, ILogger logger, ILicense2CheckComponent license2CheckComponent, IViewable`1<ILicenseConflictChecker> conflictCheckers, IWindowBranding branding, SocketManager socketManager, IThreading invocator, AnyProductSettingsLocation settingsLocation, IMainWindow mainWindow);
    private void UpdateStats(Action`1<Stats> action);
    public void Broadcast(Byte[] data);
    private sealed virtual override bool JetBrains.Application.Communication.IPortListener.get_ContinueListening();
    private sealed virtual override void JetBrains.Application.Communication.IPortListener.OnBytesReceived(IPEndPoint from, Byte[] data);
    public void GetRecentInfo(LicenseConflictInfo info, Nullable`1<TimeSpan> recent);
    [CompilerGeneratedAttribute]
private static void <Broadcast>b__10(Stats stats);
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.Communication.IPortListener.OnBytesReceived>b__12(Stats stats);
}
public class JetBrains.UI.License2.ConsentOptionsControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.ConsentOptionsControlModel : object {
    [CompilerGeneratedAttribute]
private IList`1<ConsentOptionModel> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private FooterControlModel <Footer>k__BackingField;
    public IList`1<ConsentOptionModel> Options { get; private set; }
    public FooterControlModel Footer { get; private set; }
    public ConsentOptionsControlModel(ILogger logger);
    [CompilerGeneratedAttribute]
public IList`1<ConsentOptionModel> get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(IList`1<ConsentOptionModel> value);
    [CompilerGeneratedAttribute]
public FooterControlModel get_Footer();
    [CompilerGeneratedAttribute]
private void set_Footer(FooterControlModel value);
}
public class JetBrains.UI.License2.EntityControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.EntityModel : NotifyPropertyChanged {
    private string myDisplayName;
    private ImageSource myEnabledImageSource;
    private ImageSource myDisabledImageSource;
    private bool myIsEnabled;
    private ImageSource myBigImageSource;
    private EvalState myEvaluationState;
    private static Char[] ourDigits;
    [CompilerGeneratedAttribute]
private ImageSource <SmallImageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <StatusIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <StartEvalButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <PauseEvalButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <ResumeEvalButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <PurchaseButtonState>k__BackingField;
    public ImageSource SmallImageSource { get; public set; }
    public string DisplayName { get; }
    public ImageSource BigImageSource { get; private set; }
    public bool IsEnabled { get; public set; }
    public StatusIndicatorViewModel StatusIndicator { get; private set; }
    public ButtonState StartEvalButtonState { get; private set; }
    public ButtonState PauseEvalButtonState { get; private set; }
    public ButtonState ResumeEvalButtonState { get; private set; }
    public ButtonState PurchaseButtonState { get; private set; }
    public EvalState EvaluationState { get; public set; }
    public string ShortVersionText { get; }
    public EntityModel(string displayName, ImageSource enabledImageSource, ImageSource disabledImageSource, ImageSource smallImageSource, ILogger logger, ImageSources imageSources, OpensUri opensUri, string purchaseUrl);
    private static EntityModel();
    [CompilerGeneratedAttribute]
public ImageSource get_SmallImageSource();
    [CompilerGeneratedAttribute]
public void set_SmallImageSource(ImageSource value);
    public string get_DisplayName();
    public ImageSource get_BigImageSource();
    private void set_BigImageSource(ImageSource value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_StatusIndicator();
    [CompilerGeneratedAttribute]
private void set_StatusIndicator(StatusIndicatorViewModel value);
    [CompilerGeneratedAttribute]
public ButtonState get_StartEvalButtonState();
    [CompilerGeneratedAttribute]
private void set_StartEvalButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ButtonState get_PauseEvalButtonState();
    [CompilerGeneratedAttribute]
private void set_PauseEvalButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ButtonState get_ResumeEvalButtonState();
    [CompilerGeneratedAttribute]
private void set_ResumeEvalButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ButtonState get_PurchaseButtonState();
    [CompilerGeneratedAttribute]
private void set_PurchaseButtonState(ButtonState value);
    public EvalState get_EvaluationState();
    public void set_EvaluationState(EvalState value);
    public string get_ShortVersionText();
    private void UpdateButtons();
}
public class JetBrains.UI.License2.JBAccount.AssetControl : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.JBAccount.AssetViewModel : NotifyPropertyChanged {
    private bool myIsChecked;
    private IEnumerable`1<EntityModel> myEnabledEntities;
    private string myDescription;
    private Visibility myVisibility;
    private string myAssetId;
    [CompilerGeneratedAttribute]
private IList`1<string> <EncodedDatas>k__BackingField;
    public string AssetId { get; public set; }
    public IList`1<string> EncodedDatas { get; public set; }
    public bool IsChecked { get; public set; }
    public IEnumerable`1<EntityModel> EnabledEntities { get; public set; }
    public string Description { get; public set; }
    public Visibility Visibility { get; public set; }
    public AssetViewModel(ILogger logger);
    public string get_AssetId();
    public void set_AssetId(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_EncodedDatas();
    [CompilerGeneratedAttribute]
public void set_EncodedDatas(IList`1<string> value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public IEnumerable`1<EntityModel> get_EnabledEntities();
    public void set_EnabledEntities(IEnumerable`1<EntityModel> value);
    public string get_Description();
    public void set_Description(string value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
}
public class JetBrains.UI.License2.JBAccount.JBAccountInfoControl : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.JBAccount.JBAccountProviderViewModel : LicenseProviderViewModel {
    [CompilerGeneratedAttribute]
private JBAccountViewModel <CurrentModel>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <ShortInfoStatusIndicator>k__BackingField;
    public JBAccountViewModel CurrentModel { get; private set; }
    public StatusIndicatorViewModel ShortInfoStatusIndicator { get; private set; }
    public JBAccountProviderViewModel(CommonResources commonResources, Action`1<JBAccountViewModel> loginAction, Action`1<JBAccountViewModel> logoutAction, Action`1<Window> aboutAction, ILogger logger, IWindowBranding windowBranding, ImageSources imageSources);
    [CompilerGeneratedAttribute]
public JBAccountViewModel get_CurrentModel();
    [CompilerGeneratedAttribute]
private void set_CurrentModel(JBAccountViewModel value);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_ShortInfoStatusIndicator();
    [CompilerGeneratedAttribute]
private void set_ShortInfoStatusIndicator(StatusIndicatorViewModel value);
    private void OnStateChanged();
    private void UpdateShortInfo();
    private void UpdateShortInfoStatusIndicator();
    private void UpdateShortInfoText();
    [CompilerGeneratedAttribute]
private void <.ctor>b__b(object sender, PropertyChangedEventArgs args);
}
public class JetBrains.UI.License2.JBAccount.JBAccountViewModel : NotifyPropertyChanged {
    private Action`1<JBAccountViewModel> myLoginAction;
    private Action`1<JBAccountViewModel> myLogoutAction;
    private JBAccountState myState;
    private string myStateDescription;
    private string myLoginName;
    private string myPassword;
    private string myUserId;
    private IEnumerable`1<AssetViewModel> myAssets;
    private bool myIsLoginPasswordEnabled;
    private EventHandler ModelIsReset;
    [CompilerGeneratedAttribute]
private ImageSources <ImageSources>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <StatusIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <LogInOutButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private TextBlockState <NoAssetsTextBlockState>k__BackingField;
    [CompilerGeneratedAttribute]
private FooterControlModel <Footer>k__BackingField;
    protected ImageSources ImageSources { get; private set; }
    public JBAccountState State { get; public set; }
    public string StateDescription { get; public set; }
    public StatusIndicatorViewModel StatusIndicator { get; private set; }
    public string LoginName { get; public set; }
    public string Password { get; public set; }
    public string UserId { get; public set; }
    public ButtonState LogInOutButtonState { get; private set; }
    public IEnumerable`1<AssetViewModel> Assets { get; public set; }
    public TextBlockState NoAssetsTextBlockState { get; private set; }
    public bool IsLoginPasswordEnabled { get; public set; }
    public FooterControlModel Footer { get; private set; }
    public JBAccountViewModel(Action`1<JBAccountViewModel> loginAction, Action`1<JBAccountViewModel> logoutAction, Action`1<Window> aboutCommand, ILogger logger, ImageSources imageSources);
    [CompilerGeneratedAttribute]
protected ImageSources get_ImageSources();
    [CompilerGeneratedAttribute]
private void set_ImageSources(ImageSources value);
    public void add_ModelIsReset(EventHandler value);
    public void remove_ModelIsReset(EventHandler value);
    public JBAccountState get_State();
    public void set_State(JBAccountState value);
    public string get_StateDescription();
    public void set_StateDescription(string value);
    private void OnStateChanged();
    private void UpdateLoginEdits();
    private void UpdateLogInOutButton();
    private void UpdateStatusIndicator();
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_StatusIndicator();
    [CompilerGeneratedAttribute]
private void set_StatusIndicator(StatusIndicatorViewModel value);
    public string get_LoginName();
    public void set_LoginName(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_UserId();
    public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public ButtonState get_LogInOutButtonState();
    [CompilerGeneratedAttribute]
private void set_LogInOutButtonState(ButtonState value);
    public IEnumerable`1<AssetViewModel> get_Assets();
    public void set_Assets(IEnumerable`1<AssetViewModel> value);
    [CompilerGeneratedAttribute]
public TextBlockState get_NoAssetsTextBlockState();
    [CompilerGeneratedAttribute]
private void set_NoAssetsTextBlockState(TextBlockState value);
    public bool get_IsLoginPasswordEnabled();
    public void set_IsLoginPasswordEnabled(bool value);
    [CompilerGeneratedAttribute]
public FooterControlModel get_Footer();
    [CompilerGeneratedAttribute]
private void set_Footer(FooterControlModel value);
    public virtual void CopyTo(JBAccountViewModel other);
    private void UpdateAssets();
    [CompilerGeneratedAttribute]
private void <UpdateLogInOutButton>b__3(Window window);
    [CompilerGeneratedAttribute]
private void <UpdateLogInOutButton>b__4(Window window);
    [CompilerGeneratedAttribute]
private AssetViewModel <CopyTo>b__8(AssetViewModel model);
}
public class JetBrains.UI.License2.JBAccount.ManageJBAccountControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.JBAccount.ManageJBAccountWindow : Window {
    private bool _contentLoaded;
    private void OnAboutJetBrainsAccount(object sender, RequestNavigateEventArgs e);
    private void OnCancel(object sender, RoutedEventArgs e);
    private void OnOk(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public static class JetBrains.UI.License2.JBAccount.PasswordHelper : object {
    public static DependencyProperty PasswordProperty;
    public static DependencyProperty AttachProperty;
    private static DependencyProperty IsUpdatingProperty;
    private static PasswordHelper();
    public static void SetAttach(DependencyObject dp, bool value);
    public static bool GetAttach(DependencyObject dp);
    public static string GetPassword(DependencyObject dp);
    public static void SetPassword(DependencyObject dp, string value);
    private static bool GetIsUpdating(DependencyObject dp);
    private static void SetIsUpdating(DependencyObject dp, bool value);
    private static void OnPasswordPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void Attach(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void PasswordChanged(object sender, RoutedEventArgs e);
}
public class JetBrains.UI.License2.LicenseInformationControl : UserControl {
    internal ItemsControl myItemsControl;
    private bool _contentLoaded;
    protected virtual Size MeasureOverride(Size constraint);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.LicenseInformationControlModel : NotifyPropertyChanged {
    [CompilerGeneratedAttribute]
private IList`1<EntityModel> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LicenseProviderViewModel> <LicenseProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <OverallStatusIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private FooterControlModel <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private Visibility <LicenseProvidersControlsVisibility>k__BackingField;
    public IList`1<EntityModel> Entities { get; private set; }
    public IList`1<LicenseProviderViewModel> LicenseProviders { get; private set; }
    public StatusIndicatorViewModel OverallStatusIndicator { get; private set; }
    public FooterControlModel Footer { get; private set; }
    public Visibility LicenseProvidersControlsVisibility { get; private set; }
    public LicenseInformationControlModel(IList`1<EntityModel> entities, IList`1<LicenseProviderViewModel> licenseProviderModels, ILogger logger, OpensUri opensUri, ImageSources imageSources);
    [CompilerGeneratedAttribute]
public IList`1<EntityModel> get_Entities();
    [CompilerGeneratedAttribute]
private void set_Entities(IList`1<EntityModel> value);
    [CompilerGeneratedAttribute]
public IList`1<LicenseProviderViewModel> get_LicenseProviders();
    [CompilerGeneratedAttribute]
private void set_LicenseProviders(IList`1<LicenseProviderViewModel> value);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_OverallStatusIndicator();
    [CompilerGeneratedAttribute]
private void set_OverallStatusIndicator(StatusIndicatorViewModel value);
    [CompilerGeneratedAttribute]
public FooterControlModel get_Footer();
    [CompilerGeneratedAttribute]
private void set_Footer(FooterControlModel value);
    [CompilerGeneratedAttribute]
public Visibility get_LicenseProvidersControlsVisibility();
    [CompilerGeneratedAttribute]
private void set_LicenseProvidersControlsVisibility(Visibility value);
}
public class JetBrains.UI.License2.LicenseInformationWindow : Window {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.LicenseKeys.UserContactsControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.LicenseKeys.UserContactsModel : NotifyPropertyChanged {
    private ImageSources myImageSources;
    private string myEmail;
    private string myFirstName;
    private string myLastName;
    private Regex myEmailRegex;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <StatusIndicator>k__BackingField;
    public string Email { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public StatusIndicatorViewModel StatusIndicator { get; private set; }
    public UserContactsModel(ILogger logger, ImageSources imageSources);
    public string get_Email();
    public void set_Email(string value);
    public string get_FirstName();
    public void set_FirstName(string value);
    public string get_LastName();
    public void set_LastName(string value);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_StatusIndicator();
    [CompilerGeneratedAttribute]
private void set_StatusIndicator(StatusIndicatorViewModel value);
    private void UpdateStatusIndicator();
}
public class JetBrains.UI.License2.LicenseKeys.UserContactsWindow : Window {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.LicenseKeys.UserLicenseControl : UserControl {
    internal Label userNameLabel;
    internal TextBox userNameTextBox;
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.LicenseKeys.UserLicenseLicenseProviderViewModel : LicenseProviderViewModel {
    private IList`1<EntityModel> myEntities;
    [CompilerGeneratedAttribute]
private ManagedItemsViewModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ManagedItemViewModel, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    protected ManagedItemsViewModel Model { get; private set; }
    public UserLicenseLicenseProviderViewModel(IList`1<EntityModel> entities, CommonResources commonResources, ILogger logger, IWindowBranding windowBranding, ImageSources imageSources, ICommonFileDialogs filedlg);
    [CompilerGeneratedAttribute]
protected ManagedItemsViewModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(ManagedItemsViewModel value);
    protected void UpdateIsConfigured();
    protected virtual void QueueModelCheck(UserLicenseModel userLicenseModel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(object sender, DialogResultEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <UpdateIsConfigured>b__b(ManagedItemViewModel model);
}
public class JetBrains.UI.License2.LicenseKeys.UserLicenseModel : ManagedItemViewModel {
    private string myUserName;
    private string myLicenseKey;
    private bool myIsEnabled;
    private bool myIsReadOnly;
    private Visibility myAddLicenseFromFileButtonVisibility;
    private IEnumerable`1<EntityModel> myEnabledEntities;
    private Visibility myRequestActivationCodeButtonVisibility;
    private Visibility myEnabledEntitiesVisibility;
    private ICommand myRequestActivationCode;
    private EventHandler CheckRequested;
    [CompilerGeneratedAttribute]
private ImageSources <ImageSources>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <StatusIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <AddLicenseFromFile>k__BackingField;
    protected ImageSources ImageSources { get; private set; }
    public string UserName { get; public set; }
    public string LicenseKey { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsReadOnly { get; public set; }
    public Visibility AddLicenseFromFileButtonVisibility { get; public set; }
    public StatusIndicatorViewModel StatusIndicator { get; private set; }
    public IEnumerable`1<EntityModel> EnabledEntities { get; public set; }
    public string UserNameHintText { get; }
    public ICommand AddLicenseFromFile { get; private set; }
    public Visibility RequestActivationCodeButtonVisibility { get; private set; }
    public Visibility EnabledEntitiesVisibility { get; public set; }
    public ICommand RequestActivationCode { get; private set; }
    public UserLicenseModel(ManagedItemsViewModel parentModel, ILogger logger, ImageSources imageSources, ICommonFileDialogs filedlg);
    [CompilerGeneratedAttribute]
protected ImageSources get_ImageSources();
    [CompilerGeneratedAttribute]
private void set_ImageSources(ImageSources value);
    public void add_CheckRequested(EventHandler value);
    public void remove_CheckRequested(EventHandler value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_LicenseKey();
    public void set_LicenseKey(string value);
    private void RecheckLicense();
    public void SetCheckResult(ICommand requestActivationCodeCommand, IEnumerable`1<EntityModel> entities, string title, ImageSource source, String[] text);
    private void SetRequestActivationCode(ICommand requestActivationCode);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public Visibility get_AddLicenseFromFileButtonVisibility();
    public void set_AddLicenseFromFileButtonVisibility(Visibility value);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_StatusIndicator();
    [CompilerGeneratedAttribute]
private void set_StatusIndicator(StatusIndicatorViewModel value);
    public IEnumerable`1<EntityModel> get_EnabledEntities();
    public void set_EnabledEntities(IEnumerable`1<EntityModel> value);
    public string get_UserNameHintText();
    [CompilerGeneratedAttribute]
public ICommand get_AddLicenseFromFile();
    [CompilerGeneratedAttribute]
private void set_AddLicenseFromFile(ICommand value);
    public Visibility get_RequestActivationCodeButtonVisibility();
    private void set_RequestActivationCodeButtonVisibility(Visibility value);
    public Visibility get_EnabledEntitiesVisibility();
    public void set_EnabledEntitiesVisibility(Visibility value);
    public ICommand get_RequestActivationCode();
    private void set_RequestActivationCode(ICommand value);
    public virtual void ClearItem();
    [CompilerGeneratedAttribute]
private void <.ctor>b__14(object sender, PropertyChangedEventArgs args);
}
public class JetBrains.UI.License2.LicenseProviderViewModel : NotifyPropertyChanged {
    private bool myIsUsed;
    private string myCaption;
    private bool myIsConfigured;
    [CompilerGeneratedAttribute]
private ImageSources <ImageSources>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <ManageButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <OnUsedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <ShortInfoTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private TextBoxState <ShortInfoState>k__BackingField;
    protected ImageSources ImageSources { get; private set; }
    public bool IsUsed { get; public set; }
    public string Caption { get; private set; }
    public bool IsConfigured { get; public set; }
    public ButtonState ManageButtonState { get; private set; }
    public ICommand OnUsedChanged { get; private set; }
    public DataTemplate ShortInfoTemplate { get; private set; }
    public TextBoxState ShortInfoState { get; private set; }
    public LicenseProviderViewModel(string caption, DataTemplate shortInfoTemplate, ILogger logger, ImageSources imageSources);
    [CompilerGeneratedAttribute]
protected ImageSources get_ImageSources();
    [CompilerGeneratedAttribute]
private void set_ImageSources(ImageSources value);
    public bool get_IsUsed();
    public void set_IsUsed(bool value);
    public string get_Caption();
    private void set_Caption(string value);
    public bool get_IsConfigured();
    public void set_IsConfigured(bool value);
    private void UpdateManageButton();
    [CompilerGeneratedAttribute]
public ButtonState get_ManageButtonState();
    [CompilerGeneratedAttribute]
private void set_ManageButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ICommand get_OnUsedChanged();
    [CompilerGeneratedAttribute]
private void set_OnUsedChanged(ICommand value);
    [CompilerGeneratedAttribute]
public DataTemplate get_ShortInfoTemplate();
    [CompilerGeneratedAttribute]
private void set_ShortInfoTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
public TextBoxState get_ShortInfoState();
    [CompilerGeneratedAttribute]
private void set_ShortInfoState(TextBoxState value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Window ownerWindow);
}
public class JetBrains.UI.License2.LicenseServer.CheckableEntityModel : NotifyPropertyChanged {
    private bool myIsChecked;
    private bool myIsCheckedInitially;
    [CompilerGeneratedAttribute]
private EntityModel <EntityModel>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <EntityDescription>k__BackingField;
    public EntityModel EntityModel { get; public set; }
    public bool IsCheckedInitially { get; public set; }
    public bool IsChecked { get; public set; }
    public StatusIndicatorViewModel EntityDescription { get; private set; }
    public CheckableEntityModel(EntityModel entityModel, ImageSources imageSources, bool isCheckedInitially, ILogger logger);
    [CompilerGeneratedAttribute]
public EntityModel get_EntityModel();
    [CompilerGeneratedAttribute]
public void set_EntityModel(EntityModel value);
    public bool get_IsCheckedInitially();
    public void set_IsCheckedInitially(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_EntityDescription();
    [CompilerGeneratedAttribute]
private void set_EntityDescription(StatusIndicatorViewModel value);
}
public class JetBrains.UI.License2.LicenseServer.LicenseServerControl : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.LicenseServer.LicenseServerInfoControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.LicenseServer.LicenseServerProviderViewModel : LicenseProviderViewModel {
    private IList`1<EntityModel> myEntities;
    private MyComboboxItem mySelectedComboboxItem;
    private string myAutodetectedLicenseServerUrl;
    private LicenseServerViewModel mySelectedLicenseServer;
    [CompilerGeneratedAttribute]
private LicenseServersViewModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <SelectedLicenseServerStatusIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <SelectedLicenseServerRequestPermanentButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<MyComboboxItem> <ComboboxItems>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<MyComboboxItem, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<LicenseServerViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    protected LicenseServersViewModel Model { get; private set; }
    public LicenseServerViewModel SelectedLicenseServer { get; public set; }
    public StatusIndicatorViewModel SelectedLicenseServerStatusIndicator { get; private set; }
    public ButtonState SelectedLicenseServerRequestPermanentButtonState { get; private set; }
    public ObservableCollection`1<MyComboboxItem> ComboboxItems { get; private set; }
    public MyComboboxItem SelectedComboboxItem { get; public set; }
    public string AutodetectedLicenseServerUrl { get; public set; }
    public LicenseServerProviderViewModel(IList`1<EntityModel> entities, CommonResources commonResources, ILogger logger, IWindowBranding windowBranding, OpensUri opensUri, ImageSources imageSources);
    [CompilerGeneratedAttribute]
protected LicenseServersViewModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(LicenseServersViewModel value);
    protected void UpdateControls();
    private void UpdateConfiguredState();
    public LicenseServerViewModel get_SelectedLicenseServer();
    public void set_SelectedLicenseServer(LicenseServerViewModel value);
    private void OnSelectedLicenseServerPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_SelectedLicenseServerStatusIndicator();
    [CompilerGeneratedAttribute]
private void set_SelectedLicenseServerStatusIndicator(StatusIndicatorViewModel value);
    [CompilerGeneratedAttribute]
public ButtonState get_SelectedLicenseServerRequestPermanentButtonState();
    [CompilerGeneratedAttribute]
private void set_SelectedLicenseServerRequestPermanentButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<MyComboboxItem> get_ComboboxItems();
    [CompilerGeneratedAttribute]
private void set_ComboboxItems(ObservableCollection`1<MyComboboxItem> value);
    public MyComboboxItem get_SelectedComboboxItem();
    public void set_SelectedComboboxItem(MyComboboxItem value);
    public string get_AutodetectedLicenseServerUrl();
    public void set_AutodetectedLicenseServerUrl(string value);
    protected virtual void UpdateComboboxAfterManageWindowIsClosed();
    protected void UpdateModelFromCombobox();
    protected virtual bool QueueValidateLicenseServer(LicenseServerViewModel viewModel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <UpdateConfiguredState>b__13(MyComboboxItem comboboxItem);
    [CompilerGeneratedAttribute]
private bool <set_SelectedComboboxItem>b__15(LicenseServerViewModel model);
    [CompilerGeneratedAttribute]
private bool <set_AutodetectedLicenseServerUrl>b__17(MyComboboxItem item);
    [CompilerGeneratedAttribute]
private static bool <UpdateComboboxAfterManageWindowIsClosed>b__1a(LicenseServerViewModel model);
}
public class JetBrains.UI.License2.LicenseServer.LicenseServersViewModel : ManagedItemsViewModel {
    public LicenseServersViewModel(Func`2<ManagedItemsViewModel, ManagedItemViewModel> createNew, ILogger logger, IWindowBranding windowBranding);
}
public class JetBrains.UI.License2.LicenseServer.LicenseServerViewModel : ManagedItemViewModel {
    private XState myLicenseServerState;
    private string myLicenseServerUrl;
    private bool myIsActive;
    private bool myIsChanged;
    private EventHandler ValidateRequested;
    [CompilerGeneratedAttribute]
private ImageSources <ImageSources>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusIndicatorViewModel <StatusIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CheckableEntityModel> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <RequestPermanentButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private TextBoxState <LicenseServerTextBoxState>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<CheckableEntityModel, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    protected ImageSources ImageSources { get; private set; }
    public string LicenseServerUrl { get; public set; }
    public string FixedLicenseServerUrl { get; }
    public XState LicenseServerState { get; public set; }
    public StatusIndicatorViewModel StatusIndicator { get; private set; }
    public IList`1<CheckableEntityModel> Entities { get; private set; }
    public ButtonState RequestPermanentButtonState { get; private set; }
    public bool IsActive { get; public set; }
    public bool IsChanged { get; public set; }
    public TextBoxState LicenseServerTextBoxState { get; private set; }
    public LicenseServerViewModel(LicenseServersViewModel parentModel, IList`1<CheckableEntityModel> entities, ILogger logger, ImageSources imageSources);
    [CompilerGeneratedAttribute]
protected ImageSources get_ImageSources();
    [CompilerGeneratedAttribute]
private void set_ImageSources(ImageSources value);
    public void add_ValidateRequested(EventHandler value);
    public void remove_ValidateRequested(EventHandler value);
    private void UpdateIsChanged();
    private void UpdateControls();
    private void UpdateStatusIndicator();
    private string GetTitle(string text);
    private string FixLicenseServerUrlString(string text);
    public string get_LicenseServerUrl();
    public void set_LicenseServerUrl(string value);
    public string get_FixedLicenseServerUrl();
    private void ValidateLicenseServerAddress();
    public XState get_LicenseServerState();
    public void set_LicenseServerState(XState value);
    private void OnParentModelCollectionChangedWhenInDuplicateState(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
public StatusIndicatorViewModel get_StatusIndicator();
    [CompilerGeneratedAttribute]
private void set_StatusIndicator(StatusIndicatorViewModel value);
    [CompilerGeneratedAttribute]
public IList`1<CheckableEntityModel> get_Entities();
    [CompilerGeneratedAttribute]
private void set_Entities(IList`1<CheckableEntityModel> value);
    [CompilerGeneratedAttribute]
public ButtonState get_RequestPermanentButtonState();
    [CompilerGeneratedAttribute]
private void set_RequestPermanentButtonState(ButtonState value);
    public bool get_IsActive();
    public void set_IsActive(bool value);
    protected virtual void ApplyItemChange();
    public virtual void ClearItem();
    public bool get_IsChanged();
    public void set_IsChanged(bool value);
    [CompilerGeneratedAttribute]
public TextBoxState get_LicenseServerTextBoxState();
    [CompilerGeneratedAttribute]
private void set_LicenseServerTextBoxState(TextBoxState value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(object sender, PropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <UpdateIsChanged>b__8(CheckableEntityModel model);
}
public class JetBrains.UI.License2.ManageWindow.ManageControl : UserControl {
    public static string ItemTemplateKey;
    private bool _contentLoaded;
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.ManageWindow.ManagedItemsViewModel : NotifyPropertyChanged {
    private string myItemName;
    private Func`2<ManagedItemsViewModel, ManagedItemViewModel> myCreateNew;
    private IWindowBranding myWindowBranding;
    private EventHandler BeforeWindowShown;
    private EventHandler`1<DialogResultEventArgs> AfterWindowClosed;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<ManagedItemViewModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WindowTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private FooterControlModel <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ManagedItemViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ManagedItemViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    public ObservableCollection`1<ManagedItemViewModel> Items { get; public set; }
    public string WindowTitle { get; private set; }
    public FooterControlModel Footer { get; private set; }
    public ManagedItemsViewModel(string windowTitle, string hyperlinkText, string itemName, Func`2<ManagedItemsViewModel, ManagedItemViewModel> createNew, ILogger logger, IWindowBranding windowBranding);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<ManagedItemViewModel> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(ObservableCollection`1<ManagedItemViewModel> value);
    [CompilerGeneratedAttribute]
public string get_WindowTitle();
    [CompilerGeneratedAttribute]
private void set_WindowTitle(string value);
    [CompilerGeneratedAttribute]
public FooterControlModel get_Footer();
    [CompilerGeneratedAttribute]
private void set_Footer(FooterControlModel value);
    public void add_BeforeWindowShown(EventHandler value);
    public void remove_BeforeWindowShown(EventHandler value);
    public void add_AfterWindowClosed(EventHandler`1<DialogResultEventArgs> value);
    public void remove_AfterWindowClosed(EventHandler`1<DialogResultEventArgs> value);
    public virtual void OnItemStateChanged(ManagedItemViewModel item);
    public ManagedItemViewModel CreateNew();
    public void CleanUpOnClose();
    public void EnsureEditableItem();
    public void ShowDialog(Window ownerWindow, DataTemplate itemTemplate, Action`1<Nullable`1<bool>> executeOnClose);
    [CompilerGeneratedAttribute]
private static bool <OnItemStateChanged>b__5(ManagedItemViewModel model);
    [CompilerGeneratedAttribute]
private static bool <OnItemStateChanged>b__6(ManagedItemViewModel model);
}
public abstract class JetBrains.UI.License2.ManageWindow.ManagedItemViewModel : NotifyPropertyChanged {
    private bool myCanBeSuspended;
    private Brush myBackgroundBrush;
    private bool myIsNotSuspended;
    private ItemState myItemState;
    private Visibility mySuspendCheckBoxVisibility;
    private string myTitle;
    private bool myIsNotRemoved;
    [CompilerGeneratedAttribute]
private ManagedItemsViewModel <ParentModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <AddButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <RemoveButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <RestoreButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonState <ApplyButtonState>k__BackingField;
    [CompilerGeneratedAttribute]
private TextBlockState <TitleTextBlockState>k__BackingField;
    public string Title { get; public set; }
    protected ManagedItemsViewModel ParentModel { get; private set; }
    protected string DefaultTitle { get; private set; }
    public Brush BackgroundBrush { get; public set; }
    public bool IsNotSuspended { get; public set; }
    public ItemState State { get; public set; }
    public ButtonState AddButtonState { get; private set; }
    public ButtonState RemoveButtonState { get; private set; }
    public ButtonState RestoreButtonState { get; private set; }
    public ButtonState ApplyButtonState { get; private set; }
    public TextBlockState TitleTextBlockState { get; private set; }
    public Visibility SuspendCheckBoxVisibility { get; public set; }
    public bool IsNotRemoved { get; private set; }
    protected ManagedItemViewModel(string defaultTitle, ManagedItemsViewModel parentModel, bool canBeSuspended, ILogger logger, ImageSources imageSources);
    public string get_Title();
    public void set_Title(string value);
    [CompilerGeneratedAttribute]
protected ManagedItemsViewModel get_ParentModel();
    [CompilerGeneratedAttribute]
private void set_ParentModel(ManagedItemsViewModel value);
    [CompilerGeneratedAttribute]
protected string get_DefaultTitle();
    [CompilerGeneratedAttribute]
private void set_DefaultTitle(string value);
    public Brush get_BackgroundBrush();
    public void set_BackgroundBrush(Brush value);
    public bool get_IsNotSuspended();
    public void set_IsNotSuspended(bool value);
    public ItemState get_State();
    public void set_State(ItemState value);
    private void UpdateButtons();
    private void UpdateBackground();
    private void UpdateTitle();
    private void UpdateSuspendCheckBox();
    protected virtual void ApplyItemChange();
    protected virtual void AddItem();
    public virtual void ClearItem();
    [CompilerGeneratedAttribute]
public ButtonState get_AddButtonState();
    [CompilerGeneratedAttribute]
private void set_AddButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ButtonState get_RemoveButtonState();
    [CompilerGeneratedAttribute]
private void set_RemoveButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ButtonState get_RestoreButtonState();
    [CompilerGeneratedAttribute]
private void set_RestoreButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public ButtonState get_ApplyButtonState();
    [CompilerGeneratedAttribute]
private void set_ApplyButtonState(ButtonState value);
    [CompilerGeneratedAttribute]
public TextBlockState get_TitleTextBlockState();
    [CompilerGeneratedAttribute]
private void set_TitleTextBlockState(TextBlockState value);
    public Visibility get_SuspendCheckBoxVisibility();
    public void set_SuspendCheckBoxVisibility(Visibility value);
    public bool get_IsNotRemoved();
    private void set_IsNotRemoved(bool value);
    [CompilerGeneratedAttribute]
private void <UpdateButtons>b__0(Window window);
    [CompilerGeneratedAttribute]
private void <UpdateButtons>b__1(Window window);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9(Window window);
    [CompilerGeneratedAttribute]
private void <.ctor>b__a(Window window);
    [CompilerGeneratedAttribute]
private void <.ctor>b__b(Window window);
    [CompilerGeneratedAttribute]
private void <.ctor>b__c(Window window);
}
public class JetBrains.UI.License2.ManageWindow.ManageItemControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.License2.ManageWindow.ManageWindow : Window {
    public static string ItemTemplateKey;
    private bool _contentLoaded;
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ShellComponentAttribute]
public class JetBrains.UI.License2.ShowLicenseDialogHandler : object {
    public ShowLicenseDialogHandler(Lifetime lifetime, WebProxySettingsReader proxySettingsReader, ILicense2CheckComponent licenseCheckComponent, IEnumerable`1<ILicenseCheckPolicy> checkPolicies, IUIApplication uiapp, ILogger logger, HelpSystem helpSystem, ApplicationShutdownRequests shutdownRequests, IDocumentsThatRequireUserConsent documentsThatRequireUserConsent);
    protected virtual bool OnShowDialog(LicenseDialogShowArgs showArgs, IUIApplication uiapp, ILogger logger, HelpSystem helpSystem, ApplicationShutdownRequests shutdownRequests, WebProxySettingsReader proxySettingsReader, IDocumentsThatRequireUserConsent documentsThatRequireUserConsent);
    [CanBeNullAttribute]
private static ConsentOptionsControlModel AddConsentOptionsToModel(LicenseDialogShowArgs showArgs, ILogger logger, ControlWithSlidingContentModel slidingContentViewModel);
    private static void AddDocumentsToModel(LicenseDialogShowArgs showArgs, IUIApplication uiapp, ILogger logger, IDocumentsThatRequireUserConsent documentsThatRequireUserConsent, LicenseInformationWindow window, ControlWithSlidingContentModel slidingContentViewModel);
}
public class JetBrains.UI.License2.TextBoxInfoControl : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public abstract class JetBrains.UI.MsoComponentManager.JetComponentManager : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private IMsoComponentManager myComponentManager;
    private IntPtr myComponentId;
    public static DependencyProperty JetComponentActionProperty;
    [CompilerGeneratedAttribute]
private ComponentAction <CurrentComponentAction>k__BackingField;
    public IMsoComponentManager ComponentManager { get; }
    public ComponentAction CurrentComponentAction { get; private set; }
    protected JetComponentManager(Lifetime lifetime, IWindowsHookManager hookManager, IThreading threading);
    private static JetComponentManager();
    public IMsoComponentManager get_ComponentManager();
    [CompilerGeneratedAttribute]
public ComponentAction get_CurrentComponentAction();
    [CompilerGeneratedAttribute]
private void set_CurrentComponentAction(ComponentAction value);
    protected void ActivateComponent(ComponentAction action);
    public void SetTrackingComponent(Lifetime lifetime, ComponentAction action);
    [CanBeNullAttribute]
protected virtual IMsoComponentManager GetComponentManager();
    [NotNullAttribute]
protected virtual IMsoComponent CreateComponent();
    protected virtual void OnWindowActivate(Window window, ComponentAction action);
    private void InitWindowActivationHook(IWindowsHookManager hookManager);
    private IMsoComponentManager InitComponentManager();
    private static void PropertyChangedCallback(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public static void SetJetComponentAction(Window element, ComponentAction value);
    public static ComponentAction GetJetComponentAction(Window element);
    [CompilerGeneratedAttribute]
private void <InitWindowActivationHook>b__4(WindowsMessageEventArgs args);
}
public abstract class JetBrains.UI.Options.Helpers.AStackPanelOptionsPage : SafeFlowLayoutPanel {
    private List`1<IPropertyBinding> myBindingsSettings;
    private LifetimeDefinition myDisposables;
    private string myPid;
    public EitherControl Control { get; }
    public string Id { get; }
    protected AStackPanelOptionsPage(Lifetime lifetime, IUIApplication environment, string pid);
    public void Bind(IProperty`1<TValue> source, IProperty`1<TValue> target);
    public void Bind(IPropertyBinding binding);
    protected virtual void Dispose(bool disposing);
    public virtual bool OnOk();
    public virtual bool ValidatePage();
    public sealed virtual EitherControl get_Control();
    public sealed virtual string get_Id();
}
public abstract class JetBrains.UI.Options.Helpers.AStackPanelOptionsPage3 : AOptionsPage {
    [CompilerGeneratedAttribute]
private FlowLayoutPanel <Stack>k__BackingField;
    public FlowLayoutPanel Stack { get; private set; }
    public ControlCollection Controls { get; }
    protected AStackPanelOptionsPage3(Lifetime lifetime, IUIApplication environment, string pid);
    [CompilerGeneratedAttribute]
public FlowLayoutPanel get_Stack();
    [CompilerGeneratedAttribute]
private void set_Stack(FlowLayoutPanel value);
    public ControlCollection get_Controls();
}
[ExtensionAttribute]
public static class JetBrains.UI.Options.Helpers.Controls : object {
    private static int IndentLeftConst;
    public static int IndentLeft;
    public static int TopMargin;
    public static int SideMargin;
    public static Padding IndentF;
    public static Thickness IndentA;
    private static Controls();
    [ExtensionAttribute]
public static void Add(TableLayoutControlCollection controlCollection, Control control, int column, int row, int columnSpan, int rowSpan);
    [ExtensionAttribute]
public static void AddColumnChild(TableLayoutPanel grid, int percent, Control child);
    [ExtensionAttribute]
public static void AddRowChild(TableLayoutPanel grid, int percent, Control child);
    [ExtensionAttribute]
public static void AddRowChildAbsolute(TableLayoutPanel grid, Control child, float height);
    [NotNullAttribute]
public static TableLayoutPanel CreateGrid();
    [ObsoleteAttribute("Most of the pages now should work regardless of solution presence.")]
public static RichTextLabel CreateNoSolutionCueBanner(IUIApplication environment);
    [ExtensionAttribute]
public static TableLayoutPanel CreateRadioButtons(IProperty`1<T> property, IEnumerable`1<T> values, Func`2<T, string> presenter);
    [ExtensionAttribute]
public static T IndentControl(T control);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable PushOrigin(Graphics graphics, Point location);
    [NotNullAttribute]
[ExtensionAttribute]
public static IDisposable PushState(Graphics graphics);
    [ExtensionAttribute]
public static IDisposable PushSuspendLayout(Control control);
    [NotNullAttribute]
public static TableLayoutPanel SetupGrid(TableLayoutPanel grid);
    [CompilerGeneratedAttribute]
private static string <CreateRadioButtons>b__3(T t);
}
public interface JetBrains.UI.Options.IOptionsDialog {
    public IOptionsPage CurrentPage { get; public set; }
    [NotNullAttribute]
public OptionsSettingsSmartContext SettingsStoreSmartContext { get; }
    public abstract virtual IOptionsPage get_CurrentPage();
    public abstract virtual void set_CurrentPage(IOptionsPage value);
    [NotNullAttribute]
public abstract virtual WindowFrame GetOptionsPageWindowFrame(IOptionsPage page);
    [GuardAttribute("1")]
public abstract virtual IOptionsPage GetPage(string id);
    public abstract virtual OptionsSettingsSmartContext get_SettingsStoreSmartContext();
}
[ShellComponentAttribute]
public class JetBrains.UI.Options.OptionPages.OptionsDialogViewOwnerInteractive : OptionsDialogViewOwnerStub {
    [NotNullAttribute]
[GuardAttribute("1")]
private ShowDelegate myFShow;
    public OptionsDialogViewOwnerInteractive(Lifetime lifetimeComponent, IThreading threading, IMainWindow mainWindow, DataContexts datacontexts, ISettingsLogger logging, IconIdOwnersMap iconowners, IStatusBarColorsManager statusBarColorsManager, FontsManager fontsman, IApplicationModalState applicationModalState, IPlatformResourceDictionary platformResourceDictionary);
    [GuardAttribute("1")]
public virtual void Show(WindowModality modality, string page, Identity layer, LifetimeDefinition lifetimeDefinition, OptionPagesDiagnostics diagnostics);
}
[OptionsPageAttribute("PlatformEnvironmentGeneralPageCheckboxes", "Platform General Checkboxes", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.UI.Options.OptionPages.PlatformEnvironmentGeneralPageCheckboxes : SimpleOptionsPage {
    public static string PID;
    public PlatformEnvironmentGeneralPageCheckboxes(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IWindowBranding windowBranding, IsModeReportExceptionsComponent isModeReportExceptionsComponent);
}
internal class JetBrains.UI.Options.OptionPageViewStore : object {
    private IThreading myThreading;
    private Dictionary`2<OptionsPageDescriptor, IOptionsPage> myMapDescriptorToPageView;
    private Func`2<Type, object> myPageViewFactoryFunction;
    public ICollection`1<IOptionsPage> Views { get; }
    public OptionPageViewStore(Lifetime lifetime, IOptionsDialog owner, OptionsPageViewFactoryManager optionsPageViewFactoryManager, DataContexts datacontexts, IThreading threading, IEnumerable`1<object> injections);
    public ICollection`1<IOptionsPage> get_Views();
    public bool Contains(IOptionsPage page);
    [NotNullAttribute]
[GuardAttribute("1")]
public IOptionsPage GetPageView(OptionsPageDescriptor descriptor);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
public class JetBrains.UI.Options.OptionsDialog2.CopySettingsDialog : Window {
    internal CopySettingsDialog window;
    internal SettingsSnapshotTreeView settingsTree;
    private bool _contentLoaded;
    protected virtual void OnSourceInitialized(EventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <OnSourceInitialized>b__0(bool x);
}
public class JetBrains.UI.Options.OptionsDialog2.OptionsDialogView : Window {
    private Nullable`1<bool> myDialogResult;
    internal OptionsView optionsView;
    private bool _contentLoaded;
    public Nullable`1<bool> DialogResult { get; public set; }
    public OptionsDialogView(IFontsManager fontsManager, IPlatformResourceDictionary platformResources);
    public Nullable`1<bool> get_DialogResult();
    public void set_DialogResult(Nullable`1<bool> value);
    private void OnContextHelp(object sender, RoutedEventArgs routedEventArgs);
    private OptionsDialogAutomation GetViewModel();
    protected virtual void OnSourceInitialized(EventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, GetDataRulesEventArgs args);
    [CompilerGeneratedAttribute]
private IWin32Window <.ctor>b__1(IDataContext ctx);
    [CompilerGeneratedAttribute]
private void <OnSourceInitialized>b__3(bool x);
}
public class JetBrains.UI.Options.OptionsDialog2.OptionsPageList : UserControl {
    public static DependencyProperty PagesProperty;
    private EventHandler`1<EventArgs`1<OptionsPageWithoutContextAutomation>> PageRequested;
    private bool _contentLoaded;
    public IEnumerable`1<OptionsPageWithoutContextAutomation> Pages { get; public set; }
    private static OptionsPageList();
    public IEnumerable`1<OptionsPageWithoutContextAutomation> get_Pages();
    public void set_Pages(IEnumerable`1<OptionsPageWithoutContextAutomation> value);
    public void add_PageRequested(EventHandler`1<EventArgs`1<OptionsPageWithoutContextAutomation>> value);
    public void remove_PageRequested(EventHandler`1<EventArgs`1<OptionsPageWithoutContextAutomation>> value);
    private void OnItemClick(object sender, MouseButtonEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Options.OptionsDialog2.OptionsView : Control {
    private FrameworkElement listenKeyboardOn;
    private SearchTextBox searchTextBox;
    [CompilerGeneratedAttribute]
private static Func`2<OptionsPageInOptionsContextAutomation, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, UserFriendlySettingsLayerAutomation, ContentPresenter, UIElement> CS$<>9__CachedAnonymousMethodDelegate42;
    public FrameworkElement ListenKeyboardOn { get; public set; }
    private static OptionsView();
    public FrameworkElement get_ListenKeyboardOn();
    public void set_ListenKeyboardOn(FrameworkElement value);
    private static UIElement CreateTemplate(Lifetime lifetime, OptionsAutomation automation, OptionsView view);
    private static UIElement Create_PagesList(Lifetime lifetime, OptionsAutomation automation);
    private static UIElement CreateTemplate_PageView(Lifetime lifetime, OptionsAutomation automation);
    private static UIElement CreateTemplate_PageView_Content(Lifetime lifetime, OptionsPageInOptionsContextAutomation automation);
    private static UIElement CreateTemplate_PagesTree(Lifetime lifetime, OptionsAutomation automation, OptionsView optionsView);
    private static OptionsPageWithoutContextAutomation GetParentPage(IEnumerable`1<OptionsPageWithoutContextAutomation> topLevelItems, OptionsPageWithoutContextAutomation item);
    private static UIElement CreateTemplate_PagesTree_Item(Lifetime arg1, OptionsPageWithoutContextAutomation automation, UIElement arg3);
    private static UIElement CreateTemplate_PagesTree_RootItem(Lifetime arg1, OptionsPageWithoutContextAutomation automation, UIElement arg3);
    private static UIElement CreateTemplate_ContextsTabs(Lifetime lifetime, OptionsAutomation automation);
    private static UIElement CreateTemplate_ContextsTabs_Tab(Lifetime lifetime, UserFriendlySettingsLayerAutomation automation, UIElement parent);
    private static TextHighlighter GetTextHighlighter(Lifetime lifetime, DependencyObject root);
    [CompilerGeneratedAttribute]
private static string <CreateTemplate_PageView>b__13(OptionsPageInOptionsContextAutomation pageautomation);
    [CompilerGeneratedAttribute]
private static UIElement <CreateTemplate_ContextsTabs>b__41(Lifetime lifeCtx, UserFriendlySettingsLayerAutomation uidataCtx, ContentPresenter menuitem);
}
public class JetBrains.UI.Options.OptionsDialog2.Search.OptionsSearchTextBox : SearchTextBox {
    public void AddControlForAdditionalKeyHandling(UIElement uiElement);
    protected virtual void OnKeyDown(KeyEventArgs e);
    [CompilerGeneratedAttribute]
private void <AddControlForAdditionalKeyHandling>b__12(object sender, KeyEventArgs e);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.Search.SearchHelpOptionView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Options.OptionsDialog2.SettingsLayersDialog : Window {
    private string backUpSettingsLayerName;
    internal Grid MainToolbarContextParent;
    internal ListBox listBoxSettingsLayers;
    internal Grid gridWithSplitter;
    internal Grid rightColumn;
    private bool _contentLoaded;
    public SettingsLayersDialog(Lifetime lifetime, IActionBarManager actionBarManager, IThreading threading);
    private void OnLoaded(object sender, RoutedEventArgs e);
    protected virtual void OnSourceInitialized(EventArgs e);
    private void OnTextBoxSettingsNameIsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void OnTextBoxSettingsNameLostFocus(object sender, RoutedEventArgs e);
    private void OnTextBoxSettingsNamePreviewKeyDown(object sender, KeyEventArgs e);
    private void OnListBoxItemMouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void OnAddLeyerButtonPreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void OnSelectionChanged(object sender, SelectionChangedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private IWin32Window <.ctor>b__0(IDataContext ctx);
    [CompilerGeneratedAttribute]
private void <OnSourceInitialized>b__2(bool x);
    [CompilerGeneratedAttribute]
private void <OnSelectionChanged>b__4();
}
public class JetBrains.UI.Options.OptionsDialog2.SettingsLayersGroupingConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeAutomation : SettingsSnapshotTreeAutomationBase {
    [CompilerGeneratedAttribute]
private IProperty`1<IFilterDescriptor> <TreeGridFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <HandleTreeSearch>k__BackingField;
    public IProperty`1<IFilterDescriptor> TreeGridFilter { get; private set; }
    public ICommand HandleTreeSearch { get; private set; }
    public SettingsSnapshotTreeAutomation(Lifetime lifetime, SettingsSnapshotTreeModel model);
    [CompilerGeneratedAttribute]
public IProperty`1<IFilterDescriptor> get_TreeGridFilter();
    [CompilerGeneratedAttribute]
private void set_TreeGridFilter(IProperty`1<IFilterDescriptor> value);
    [CompilerGeneratedAttribute]
public ICommand get_HandleTreeSearch();
    [CompilerGeneratedAttribute]
private void set_HandleTreeSearch(ICommand value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(string searchText);
}
[ShellComponentAttribute]
public class JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeAutomationFactory : SettingsSnapshotTreeAutomationFactoryBase {
    public virtual SettingsSnapshotTreeAutomationBase Create(Lifetime lifetime, SettingsSnapshotTreeModel model);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SettingsSnapshotTreeView : Grid {
    public static DependencyProperty ListenKeyboardOnProperty;
    internal SearchTextBox searchTextBox;
    internal TreeGridView myTreeGridView;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public FrameworkElement ListenKeyboardOn { get; public set; }
    private static SettingsSnapshotTreeView();
    public FrameworkElement get_ListenKeyboardOn();
    public void set_ListenKeyboardOn(FrameworkElement value);
    private void OnTreeGridPreviewKeyDown(object sender, KeyEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs a);
}
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.Behavior.ComboBoxBehavior : object {
    public static DependencyProperty AlignWidthProperty;
    private static ComboBoxBehavior();
    public static bool GetAlignWidth(UIElement element);
    public static void SetAlignWidth(UIElement element, bool value);
    private static void AlignWidth(Lifetime lifetime, ComboBox element);
}
internal class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.OptionsControlBuilder : object {
    private static BooleanToVisibilityConverter ourBooleanToVisibilityConverter;
    private static int ourConstTopIndent;
    private static int ourConstSideIndent;
    private static int ourConstIndentLeft;
    private Thickness myStackPanelMargin;
    private static OptionsControlBuilder();
    public FrameworkElement BuildControlForOptions(Lifetime lifetime, IList`1<IOptionEntity> options, IDictionary`2<IOptionEntity, int> optionIndents, bool addVerticalScroll);
}
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.SearchablePageBehavior : object {
    public static DependencyProperty SearchFilterProperty;
    public static DependencyProperty TreeGridViewSearchFilterProperty;
    [CompilerGeneratedAttribute]
private static Func`2<HiddenOptionsPageKeyword, string> CS$<>9__CachedAnonymousMethodDelegate6;
    private static SearchablePageBehavior();
    public static bool GetSearchFilter(UIElement element);
    public static void SetSearchFilter(UIElement element, bool value);
    private static void HighlightFilterSubscribe(Lifetime lifetime, FrameworkElement element);
    private static void Highlight(OptionsFilterResult optionsFilterResult, TextHighlighter textHighlighter, TextHighlighter textHighlighterForHiddenWords);
    public static bool GetTreeGridViewSearchFilter(UIElement element);
    public static void SetTreeGridViewSearchFilter(UIElement element, bool value);
    private static void TreeGridViewFilterSubscribe(Lifetime lifetime, FrameworkElement element);
    [CompilerGeneratedAttribute]
private static string <Highlight>b__5(HiddenOptionsPageKeyword x);
}
internal class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.Tutorial.TutorialOptionsPage : SimpleOptionsPage {
    [NotNullAttribute]
private ICommonFileDialogs myCommonFileDialogs;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate6;
    public TutorialOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ICommonFileDialogs commonFileDialogs);
    private void DemonstrateTypesOfOptions();
    private void DemonstrateBinding();
    private void DemonstrateIndenting();
    private void DemonstrateEnabledAndVisible();
    [CompilerGeneratedAttribute]
private static object <DemonstrateEnabledAndVisible>b__3(object x);
    [CompilerGeneratedAttribute]
private static object <DemonstrateEnabledAndVisible>b__4(object x);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.BoolOptionView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ButtonOptionView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ComboEnumWithCaptionView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.ComboOptionView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.FileChooserView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.HeaderOptionView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.IntOptionView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.RadioOptionView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.RichTextOptionView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.SingleRadioView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.Options.OptionsDialog2.SimpleOptions.View.StringOptionView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.DialogWindowsSettings", "Options dialog view-related settings")]
public class JetBrains.UI.Options.OptionsDialogViewSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Tree width")]
public int OptionsTreeWidth;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "MRU dialog position.")]
public OwnedDialogPosition Position;
}
public class JetBrains.UI.PopupLayout.AvalonAnchoringRect : AnchoringRect {
    [NotNullAttribute]
public UIElement Element;
    public AvalonAnchoringRect(Lifetime lifetime, UIElement element, IWindowsHookManager hookman);
}
public class JetBrains.UI.PopupLayout.PopupFormController : object {
    protected IConstrainableControl myConstrainableControl;
    protected Form myContentForm;
    protected IPopupWindowContext myContext;
    protected bool myEventsAttached;
    protected HideFlags myHideFlags;
    protected FormHideMethod myHideMethod;
    protected bool myIsChangingSize;
    protected bool myIsDisposed;
    protected PopupWindowLayoutMode myLayoutMode;
    protected IPopupLayouter myLayouter;
    protected PopupWindowMutex myMutex;
    protected bool myReshowOnActivation;
    protected bool myWantsFocus;
    public Lifetime Lifetime;
    private LifetimeDefinition myLifetimeDefinition;
    private IIsApplicationActiveState myIsApplicationActiveState;
    private bool myIsSupporingFocusInOwnedWindows;
    private EventHandler Closed;
    public Rectangle Bounds { get; }
    public bool CanShowPopups { get; }
    public IntPtr Handle { get; }
    protected bool HideOnAnyOtherAction { get; }
    protected bool HideOnDeactivated { get; }
    protected bool HideOnEscapePressed { get; }
    protected bool HideOnFocusLoss { get; }
    protected bool HideOnScrolling { get; }
    protected bool HideOnSelectionChanged { get; }
    public IPopupWindowContext Context { get; }
    public FormHideMethod HideMethod { get; public set; }
    public bool IsDisposed { get; }
    public PopupWindowLayoutMode LayoutMode { get; public set; }
    [NotNullAttribute]
public PopupWindowMutex Mutex { get; }
    public bool Visible { get; }
    public PopupFormController(LifetimeDefinition lifetimeDefinition, Form form, IPopupWindowContext context, HideFlags hideflags, bool wantsfocus, PopupWindowMutex mutex, IIsApplicationActiveState isApplicationActiveState, IWindowsHookManager hookManager, PopupWindowManager popupWindowManager);
    public Rectangle get_Bounds();
    public bool get_CanShowPopups();
    public IntPtr get_Handle();
    protected void AttachEvents(IWindowsHookManager hookManager, PopupWindowManager popupWindowManager);
    protected void DetachEvents();
    protected void FireClosed();
    protected Size GetControlPreferredSize(IGraphicsContainer gc, Size sizeConstraint);
    protected bool get_HideOnAnyOtherAction();
    protected bool get_HideOnDeactivated();
    protected bool get_HideOnEscapePressed();
    protected bool get_HideOnFocusLoss();
    protected bool get_HideOnScrolling();
    protected bool get_HideOnSelectionChanged();
    protected void HideWindowIfNotFocused();
    protected void OnActiveChanged();
    protected void OnContextOwnerAnyActionPerformed(object sender, EventArgs args);
    protected void OnContextOwnerDeactivated(object sender, EventArgs args);
    protected void OnContextOwnerEscapePressed(object sender, EventArgs args);
    protected void OnContextOwnerScroll(object sender, EventArgs args);
    protected void OnContextOwnerSelectionChanged(object sender, EventArgs args);
    protected void OnFormClosed(object sender, EventArgs e);
    protected void OnFormPossiblyDeactivated(object sender, EventArgs e);
    protected void OnFormResize(object sender, EventArgs e);
    protected void UpdatePopupLayout();
    private void OnFormDisposed(object sender, EventArgs e);
    private void Trace(string message);
    public sealed virtual void add_Closed(EventHandler value);
    public sealed virtual void remove_Closed(EventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void HideWindow();
    public sealed virtual bool ShowWindow();
    public sealed virtual IPopupWindowContext get_Context();
    public sealed virtual FormHideMethod get_HideMethod();
    public sealed virtual void set_HideMethod(FormHideMethod value);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual PopupWindowLayoutMode get_LayoutMode();
    public sealed virtual void set_LayoutMode(PopupWindowLayoutMode value);
    public sealed virtual PopupWindowMutex get_Mutex();
    public sealed virtual bool get_Visible();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <AttachEvents>b__7();
    [CompilerGeneratedAttribute]
private void <AttachEvents>b__8();
    [CompilerGeneratedAttribute]
private void <AttachEvents>b__9();
    [CompilerGeneratedAttribute]
private void <AttachEvents>b__a();
    [CompilerGeneratedAttribute]
private void <AttachEvents>b__b();
    [CompilerGeneratedAttribute]
private void <AttachEvents>b__c(WindowsMessageEventArgs args);
    [CompilerGeneratedAttribute]
private void <AttachEvents>b__d(WindowsMessageEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnActiveChanged>b__18();
    [CompilerGeneratedAttribute]
private void <OnActiveChanged>b__19();
}
[ShellComponentAttribute]
public class JetBrains.UI.PopupLayout.PopupWindowManager : object {
    [NotNullAttribute]
private ICollectionEvents`1<IPopupWindow> myPopupWindows;
    private IIsApplicationActiveState myIsApplicationActiveState;
    [NotNullAttribute]
public ICollectionEvents`1<IPopupWindow> PopupWindows { get; }
    public PopupWindowManager(Lifetime lifetime, IIsApplicationActiveState isApplicationActiveState);
    public ICollectionEvents`1<IPopupWindow> get_PopupWindows();
    [NotNullAttribute]
public IPopupWindow CreatePopupWindow(LifetimeDefinition lifetimeDefinition, Form form, IPopupWindowContext context, HideFlags hideflags, bool wantsfocus, PopupWindowMutex mutex);
    private void OnPopupWindowAddRemove(AddRemoveEventArgs`1<IPopupWindow> args);
}
[ExtensionAttribute]
public static class JetBrains.UI.PopupLayout.PopupWindowManagerEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPopupWindow ShowPopupWindow(PopupWindowManager thіs, Lifetime lifetime, Form form, Func`2<Lifetime, IPopupWindowContext> FCreateContext, HideFlags hideflags, FormHideMethod hidemethod);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPopupWindow ShowPopupWindow(PopupWindowManager thіs, Lifetime lifetime, Form form, PopupWindowContextSource contextsource, HideFlags hideflags, FormHideMethod hidemethod);
}
public class JetBrains.UI.PopupLayout.StaticAvalonClientRectInScreenPixels : AnchoringRect {
    [NotNullAttribute]
public UIElement Element;
    public StaticAvalonClientRectInScreenPixels(Lifetime lifetime, UIElement element, Rect avalonRect);
}
public class JetBrains.UI.PopupLayout.TrackedWindow : Window {
    private Property`1<bool> myGlassify;
    private Property`1<HideFlags> myHideFlags;
    private FormHideMethod myHideMethod;
    private Property`1<bool> myIsGlassified;
    private IPopupLayouter myLayouter;
    private PopupWindowLayoutMode myLayoutMode;
    private LifetimeDefinition myLifetimeDefinition;
    private PopupWindowMutex myMutex;
    private IPopupWindowContext myPopupWindowContext;
    private ReadonlyToken myReadonlyCookie;
    private Property`1<bool> myShouldBeVisible;
    private Property`1<bool> myShouldHaveGlass;
    private bool myUpdatePopupLayoutReentrancyFlag;
    private Property`1<bool> myWannaBeVisible;
    private bool myWantsFocus;
    private Lifetime myLifetime;
    public IProperty`1<bool> Glassify { get; }
    public IProperty`1<HideFlags> HideFlags { get; }
    public IProperty`1<bool> IsGlassified { get; }
    public IPopupLayouter Layouter { get; }
    public bool WantsFocus { get; }
    protected Void* Handle { get; }
    protected HwndSource HwndSource { get; }
    public IPopupWindowContext Context { get; }
    public FormHideMethod HideMethod { get; public set; }
    public bool IsDisposed { get; }
    public PopupWindowLayoutMode LayoutMode { get; public set; }
    public PopupWindowMutex Mutex { get; }
    public bool Visible { get; }
    public TrackedWindow(LifetimeDefinition lifetimeDefinition, IPopupLayouter layouter, IPopupWindowContext popupWindowContext, PopupWindowMutex mutex, HideFlags hideflags, bool wantsfocus, PopupWindowManager popupWindowManager, IProperty`1<bool> isApplicationActive);
    public IProperty`1<bool> get_Glassify();
    public IProperty`1<HideFlags> get_HideFlags();
    public IProperty`1<bool> get_IsGlassified();
    public IPopupLayouter get_Layouter();
    public bool get_WantsFocus();
    protected Void* get_Handle();
    protected HwndSource get_HwndSource();
    private void AttachEvents(PopupWindowManager popupWindowManager);
    private void BindProperties(IProperty`1<bool> isApplicationActive);
    private Size GetClientRoomFromWindowRoom(Size size, HwndSource hwnds);
    private Size GetWindowRoomFromClientRoom(Size size, HwndSource hwnds);
    private void Init(PopupWindowManager popupWindowManager, IProperty`1<bool> isApplicationActive);
    private void OnHideFlagsChange(PropertyChangedEventArgs`1<HideFlags> args);
    private void OnHideSignal(object sender, EventArgs e);
    private void OnShouldBeVisibleChanged(PropertyChangedEventArgs`1<bool> args);
    private void OnShouldBeVisibleChanged_Hide();
    private void OnShouldBeVisibleChanged_Show();
    private void OnShouldHaveGlassChanged(PropertyChangedEventArgs`1<bool> e1);
    private void UpdatePopupLayout();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnClosed(EventArgs e);
    protected virtual void OnDeactivated(EventArgs e);
    protected virtual void OnSourceInitialized(EventArgs e);
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual void HideWindow();
    public sealed virtual bool ShowWindow();
    public sealed virtual IPopupWindowContext get_Context();
    public sealed virtual FormHideMethod get_HideMethod();
    public sealed virtual void set_HideMethod(FormHideMethod value);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual PopupWindowLayoutMode get_LayoutMode();
    public sealed virtual void set_LayoutMode(PopupWindowLayoutMode value);
    public sealed virtual PopupWindowMutex get_Mutex();
    public sealed virtual bool get_Visible();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindow.add_Closed(EventHandler );
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindow.remove_Closed(EventHandler );
}
public class JetBrains.UI.PopupLayout.WindowPopupWindowContext : PopupWindowContext {
    private IWin32Window myWindow;
    private IWindowsHookManager myWindowsHookManager;
    private static Anchoring2D[] ourDisposition;
    public WindowPopupWindowContext(Lifetime lifetime, IWin32Window window, IWindowsHookManager windowsHookManager, IActionManager actionManager);
    private static WindowPopupWindowContext();
    public virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
}
[ActionGroupAttribute("CloseAll.Group", "0")]
public class JetBrains.UI.resources.CloseAllGroupActionGroup : object {
    public CloseAllGroupActionGroup(CloseAll_CloseThisAction closeAllCloseThisAction, Separator sep, CloseAll_CloseAllButThisAction closeAllCloseAllButThisAction, CloseAll_CloseAllButPinnedAction closeAllCloseAllButPinnedAction, CloseAll_CloseAllAction closeAllCloseAllAction);
}
public class JetBrains.UI.Resources.ExtensionManagerThemedIcons : object {
}
public class JetBrains.UI.Resources.LayoutDesignerThemedIcons : object {
}
[ActionGroupAttribute("SettingsStoreView.MountPoints.Toolbar", "1")]
public class JetBrains.UI.resources.SettingsStoreViewMountPointsToolbarActionGroup : object {
    public SettingsStoreViewMountPointsToolbarActionGroup(SettingsStoreView_OpenMountPointAction settingsStoreViewOpenMountPointAction, SettingsStoreView_OpenStorageAction settingsStoreViewOpenStorageAction);
}
[ActionGroupAttribute("SettingsStoreView.Storages.Toolbar", "1")]
public class JetBrains.UI.resources.SettingsStoreViewStoragesToolbarActionGroup : object {
    public SettingsStoreViewStoragesToolbarActionGroup(SettingsStoreView_OpenStorageAction settingsStoreViewOpenStorageAction);
}
[ActionGroupAttribute("SettingsStoreView.Storage.Toolbar", "1")]
public class JetBrains.UI.resources.SettingsStoreViewStorageToolbarActionGroup : object {
    public SettingsStoreViewStorageToolbarActionGroup(SettingsStoreView_EditEntryAction settingsStoreViewEditEntryAction, SettingsStoreView_ResetEntryAction settingsStoreViewResetEntryAction, SettingsStoreView_AddEntryAction settingsStoreViewAddEntryAction, SettingsStoreView_IsHierarchicalAction settingsStoreViewIsHierarchicalAction);
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class JetBrains.UI.resources.StringTable : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionCantInsertAnchorNotInGroup { get; }
    internal static string ActionCantInsertCantLoad { get; }
    internal static string ActionCantInsertConflictingAnchor { get; }
    internal static string ActionCantInsertIntoNonexistentGroup { get; }
    internal static string ActionCantInsertIntoNonGroupAction { get; }
    internal static string ActionCantInsertInvalidAnchor { get; }
    internal static string ActionCantInsertInvalidRelativePosition { get; }
    internal static string ActionCantInsertMissingAnchor { get; }
    internal static string ActionCantLoad { get; }
    internal static string ActionUnnamedXmlElementName { get; }
    internal static string ExceptionBrowserForm_Close { get; }
    internal static string ExceptionBrowserForm_Copy_To_Clipboard { get; }
    internal static string ExceptionBrowserForm_Copy_URL { get; }
    internal static string ExceptionBrowserForm_Created_new_issue { get; }
    internal static string ExceptionBrowserForm_Do_Not_Show { get; }
    internal static string ExceptionBrowserForm_Double_Click { get; }
    internal static string ExceptionBrowserForm_Forget { get; }
    internal static string ExceptionBrowserForm_Message { get; }
    internal static string ExceptionBrowserForm_Mute_Selected { get; }
    internal static string ExceptionBrowserForm_Please_Describe { get; }
    internal static string ExceptionBrowserForm_Please_Note { get; }
    internal static string ExceptionBrowserForm_Remove_Selected { get; }
    internal static string ExceptionBrowserForm_Submit_Selected { get; }
    internal static string JetPopupMenuMainThread { get; }
    internal static string JetPopupMenuNoItemsBanner { get; }
    internal static string MenuAlreadyVisible { get; }
    internal static string MenuItemKeyMustBeNonNull { get; }
    internal static string NoItemsCaseShouldHaveBeenCutOffEarlier { get; }
    internal static string PendingView_Initialize_Error_Summary { get; }
    internal static string PendingView_Initialize_When_Happened { get; }
    internal static string SubmittedView_Initialize_Issue_Key { get; }
    internal static string SubmittedView_Initialize_Result { get; }
    internal static string SubmittedView_Initialize_Submitted { get; }
    internal static string UpdAllowDownloadCheckbox { get; }
    internal static string UpdAllowDownloadComment { get; }
    internal static string UpdAreNewPluginVersionsAvailable { get; }
    internal static string UpdAreNewProductVersionsAvailable { get; }
    internal static string UpdDownloadLink { get; }
    internal static string UpdEstimatedPrice { get; }
    internal static string UpdFree { get; }
    internal static string UpdIsNewPluginVersionAvailable { get; }
    internal static string UpdIsNewProductVersionAvailable { get; }
    internal static string UpdKindFeatures { get; }
    internal static string UpdKindGeneric { get; }
    internal static string UpdKindPreview { get; }
    internal static string UpdKindService { get; }
    internal static string UpdNoUpdatesAvailable { get; }
    internal static string UpdNoUpdatesAvailableForProduct { get; }
    internal static string UpdPluginUpdates { get; }
    internal static string UpdProductUpdates { get; }
    internal static string UpdReadMoreLink { get; }
    internal static string UpdThisUpdateInstallsInstalls { get; }
    internal static string UpdThisUpdateInstallsPre { get; }
    internal static string UpdUnidentifiedProduct { get; }
    internal static string UpdUnknownCompany { get; }
    internal static string UpdUntitledUpdate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionCantInsertAnchorNotInGroup();
    internal static string get_ActionCantInsertCantLoad();
    internal static string get_ActionCantInsertConflictingAnchor();
    internal static string get_ActionCantInsertIntoNonexistentGroup();
    internal static string get_ActionCantInsertIntoNonGroupAction();
    internal static string get_ActionCantInsertInvalidAnchor();
    internal static string get_ActionCantInsertInvalidRelativePosition();
    internal static string get_ActionCantInsertMissingAnchor();
    internal static string get_ActionCantLoad();
    internal static string get_ActionUnnamedXmlElementName();
    internal static string get_ExceptionBrowserForm_Close();
    internal static string get_ExceptionBrowserForm_Copy_To_Clipboard();
    internal static string get_ExceptionBrowserForm_Copy_URL();
    internal static string get_ExceptionBrowserForm_Created_new_issue();
    internal static string get_ExceptionBrowserForm_Do_Not_Show();
    internal static string get_ExceptionBrowserForm_Double_Click();
    internal static string get_ExceptionBrowserForm_Forget();
    internal static string get_ExceptionBrowserForm_Message();
    internal static string get_ExceptionBrowserForm_Mute_Selected();
    internal static string get_ExceptionBrowserForm_Please_Describe();
    internal static string get_ExceptionBrowserForm_Please_Note();
    internal static string get_ExceptionBrowserForm_Remove_Selected();
    internal static string get_ExceptionBrowserForm_Submit_Selected();
    internal static string get_JetPopupMenuMainThread();
    internal static string get_JetPopupMenuNoItemsBanner();
    internal static string get_MenuAlreadyVisible();
    internal static string get_MenuItemKeyMustBeNonNull();
    internal static string get_NoItemsCaseShouldHaveBeenCutOffEarlier();
    internal static string get_PendingView_Initialize_Error_Summary();
    internal static string get_PendingView_Initialize_When_Happened();
    internal static string get_SubmittedView_Initialize_Issue_Key();
    internal static string get_SubmittedView_Initialize_Result();
    internal static string get_SubmittedView_Initialize_Submitted();
    internal static string get_UpdAllowDownloadCheckbox();
    internal static string get_UpdAllowDownloadComment();
    internal static string get_UpdAreNewPluginVersionsAvailable();
    internal static string get_UpdAreNewProductVersionsAvailable();
    internal static string get_UpdDownloadLink();
    internal static string get_UpdEstimatedPrice();
    internal static string get_UpdFree();
    internal static string get_UpdIsNewPluginVersionAvailable();
    internal static string get_UpdIsNewProductVersionAvailable();
    internal static string get_UpdKindFeatures();
    internal static string get_UpdKindGeneric();
    internal static string get_UpdKindPreview();
    internal static string get_UpdKindService();
    internal static string get_UpdNoUpdatesAvailable();
    internal static string get_UpdNoUpdatesAvailableForProduct();
    internal static string get_UpdPluginUpdates();
    internal static string get_UpdProductUpdates();
    internal static string get_UpdReadMoreLink();
    internal static string get_UpdThisUpdateInstallsInstalls();
    internal static string get_UpdThisUpdateInstallsPre();
    internal static string get_UpdUnidentifiedProduct();
    internal static string get_UpdUnknownCompany();
    internal static string get_UpdUntitledUpdate();
}
public static class JetBrains.UI.Settings.DashboardView : object {
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegatef;
    public static UIElement Create(Lifetime lifetime, IListEvents`1<ISettingsStorage> storages, IListEvents`1<ISettingsStorageMountPoint> mounts, SettingsSchema schema, IActionShortcuts shortcutman, IActionManager actionman, IThreading threading);
    private static void Create_Storages(Lifetime lifetime, IListEvents`1<ISettingsStorage> storages, IListEvents`1<ISettingsStorageMountPoint> mounts, Grid grid, ActionManagerCommandBindings cmdscope);
    private static void Create_MountPoints(Lifetime lifetime, IListEvents`1<ISettingsStorageMountPoint> mounts, Grid grid, ActionManagerCommandBindings cmdscope);
    private static void Create_Schema(Lifetime lifetime, SettingsSchema schema, Grid grid, ActionManagerCommandBindings cmdscope);
    private static void Create_SettingsStore(Lifetime lifetime, SettingsSchema schema, Grid grid, ActionManagerCommandBindings cmdscope);
    private static void Create_ImportExport(Lifetime lifetime, SettingsSchema schema, IListEvents`1<ISettingsStorage> storages, IListEvents`1<ISettingsStorageMountPoint> mounts, Grid grid, ActionManagerCommandBindings cmdscope);
    [CompilerGeneratedAttribute]
private static string <Create_Storages>b__6(int n);
    [CompilerGeneratedAttribute]
private static string <Create_Storages>b__7(int n);
    [CompilerGeneratedAttribute]
private static string <Create_MountPoints>b__e(int n);
}
[ShellComponentAttribute("4", "0", "0")]
public class JetBrains.UI.Settings.IconsForDefaultSettingsStorages : object {
    public IconsForDefaultSettingsStorages(GlobalPerProductStorage globalPerProductStorage, ExtensionsSettingsMountPointProvider extensionsSettingsMountPointProvider);
}
public class JetBrains.UI.Settings.ImportExport.Automation.ImportExportWizardAutomation : AAutomation {
    public WizardAutomation Wizard;
    public ImportExportWizardAutomation(Lifetime lifetime, ImportExportWizardModel model, IActionBarManager actionBarManager);
}
public class JetBrains.UI.Settings.ImportExport.Automation.SourceDataFilterAutomation : object {
    public ISimpleSignal Recalculate;
    private SourceDataFilterModel myModel;
    private IProperty`1<FilteringModes> myFilteringMode;
    private IProperty`1<int> myFilteringModeIndex;
    private IProperty`1<bool> myIsStateBusy;
    private IProperty`1<bool> myIsStateReady;
    private IProperty`1<bool> myIsStateError;
    private IActionBarManager myActionBarManager;
    [CompilerGeneratedAttribute]
private static Func`3<Exception, LoadedFromSourceData, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`3<Exception, LoadedFromSourceData, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`3<Exception, LoadedFromSourceData, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<FilteringModes, int> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<int, FilteringModes> CS$<>9__CachedAnonymousMethodDelegate9;
    public IProperty`1<bool> IsStateBusy { get; }
    public IProperty`1<bool> IsStateError { get; }
    public IProperty`1<bool> IsStateReady { get; }
    public IProperty`1<Exception> Error { get; }
    public IProperty`1<LoadedFromSourceData> LoadedFromSource { get; }
    public IProperty`1<int> FilteringModeIndex { get; }
    public IActionBarManager ActionBarManager { get; }
    public SourceDataFilterAutomation(Lifetime lifetime, SourceDataFilterModel model, IActionBarManager actionBarManager);
    public IProperty`1<bool> get_IsStateBusy();
    public IProperty`1<bool> get_IsStateError();
    public IProperty`1<bool> get_IsStateReady();
    [DebuggerStepThroughAttribute]
public IProperty`1<Exception> get_Error();
    [DebuggerStepThroughAttribute]
public IProperty`1<LoadedFromSourceData> get_LoadedFromSource();
    public IProperty`1<int> get_FilteringModeIndex();
    public IActionBarManager get_ActionBarManager();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(Exception exception, LoadedFromSourceData data);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1(Exception exception, LoadedFromSourceData data);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(Exception exception, LoadedFromSourceData data);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__3(FilteringModes m);
    [CompilerGeneratedAttribute]
private static FilteringModes <.ctor>b__4(int n);
}
public class JetBrains.UI.Settings.ImportExport.Automation.WriteToTargetAutomation : object {
    private WriteToTargetModel myModel;
    private IProperty`1<bool> myIsStateBusy;
    private IProperty`1<bool> myIsStateReady;
    private IProperty`1<bool> myIsStateError;
    public ISimpleSignal WriteNow;
    [CompilerGeneratedAttribute]
private static Func`3<Exception, WriteSessionData, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<Exception, WriteSessionData, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`3<Exception, WriteSessionData, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public IProperty`1<bool> IsStateBusy { get; }
    public IProperty`1<bool> IsStateError { get; }
    public IProperty`1<bool> IsStateReady { get; }
    public IProperty`1<WriteSessionData> WriteSession { get; }
    public Property`1<Exception> Error { get; }
    public WriteToTargetAutomation(Lifetime lifetime, WriteToTargetModel model);
    public IProperty`1<bool> get_IsStateBusy();
    public IProperty`1<bool> get_IsStateError();
    public IProperty`1<bool> get_IsStateReady();
    [DebuggerStepThroughAttribute]
public IProperty`1<WriteSessionData> get_WriteSession();
    [DebuggerStepThroughAttribute]
public Property`1<Exception> get_Error();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(Exception exception, WriteSessionData data);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1(Exception exception, WriteSessionData data);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(Exception exception, WriteSessionData data);
}
public class JetBrains.UI.Settings.ImportExport.Model.ImportExportWizardModel : object {
    public SettingsSourceModel ReadFrom;
    public SettingsSourceModel WriteTo;
    public SourceDataFilterModel SourceDataFilter;
    public WriteToTargetModel WriteToTarget;
    public ImportExportWizardModel(Lifetime lifetime, ISettingsStore store, WebProxySettingsReader webProxySettingsReader, IThreading threading, InternKeyPathComponent interned);
}
public class JetBrains.UI.Settings.ImportExport.Model.SourceDataFilterModel : object {
    private IThreading myThreading;
    private SettingsSourceModel mySource;
    private SequentialLifetimes mySequenceCalculatedPreviews;
    public IProperty`1<LoadedFromSourceData> LoadedFromSource;
    public IProperty`1<Exception> Error;
    private InternKeyPathComponent myInterned;
    public SourceDataFilterModel(Lifetime lifetime, SettingsSourceModel sourceReadFrom, IThreading threading, InternKeyPathComponent interned);
    public void BeginLoadSource();
    [CompilerGeneratedAttribute]
private void <BeginLoadSource>b__0(Lifetime lifetime);
}
public class JetBrains.UI.Settings.ImportExport.Model.WriteToTargetModel : object {
    private SequentialLifetimes mySequenceWriteSessions;
    public Property`1<Exception> Error;
    public IProperty`1<WriteSessionData> WriteSession;
    private SourceDataFilterModel mySource;
    private SettingsSourceModel myTarget;
    private IThreading myThreading;
    public WriteToTargetModel(Lifetime lifetime, SourceDataFilterModel source, SettingsSourceModel target, IThreading threading);
    public void BeginSaveTarget();
    [CompilerGeneratedAttribute]
private void <BeginSaveTarget>b__0(Lifetime lifetime);
}
[ViewAttribute("0")]
public class JetBrains.UI.Settings.ImportExport.View.ImportExportWizardView : Control {
    [CompilerGeneratedAttribute]
private static Func`2<WizardPage, string> CS$<>9__CachedAnonymousMethodDelegate2;
    private static ImportExportWizardView();
    public static UIElement CreateTemplate(Lifetime lifetime, ImportExportWizardAutomation automation, ImportExportWizardView view);
    [CompilerGeneratedAttribute]
private static string <CreateTemplate>b__1(WizardPage page);
}
[ViewAttribute("0")]
public class JetBrains.UI.Settings.ImportExport.View.SourceDataFilterView : Control {
    [CompilerGeneratedAttribute]
private static Func`2<Exception, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<Exception, FlowDocument> CS$<>9__CachedAnonymousMethodDelegatef;
    private static SourceDataFilterView();
    private static UIElement CreateTemplate(Lifetime lifetime, SourceDataFilterAutomation automation, SourceDataFilterView view);
    private static UIElement Create_Ready();
    private static UIElement Create_Busy();
    private static UIElement Create_Error();
    [CompilerGeneratedAttribute]
private static string <Create_Error>b__b(Exception ex);
    [CompilerGeneratedAttribute]
private static FlowDocument <Create_Error>b__c(Exception ex);
}
[ViewAttribute("0")]
public class JetBrains.UI.Settings.ImportExport.View.SourceSelectionView : Control {
    [CompilerGeneratedAttribute]
private static Action`1<FrameworkElementFactory> CS$<>9__CachedAnonymousMethodDelegate6;
    private static SourceSelectionView();
    public static UIElement CreateTemplate(Lifetime lifetime, SourceSelectionAutomation automation, SourceSelectionView view);
    [NotNullAttribute]
private static TabItem TabStore(Lifetime lifetime, StoreMode autStore, AllModesCommon autCommon);
    private static TabItem TabMount(Lifetime lifetime, MountingPointMode autMount, AllModesCommon autCommon);
    private static TabItem TabFile(Lifetime lifetime, FileStorageMode autFile, AllModesCommon autCommon);
    [CompilerGeneratedAttribute]
private static void <TabStore>b__5(FrameworkElementFactory factory);
}
[ViewAttribute("0")]
public class JetBrains.UI.Settings.ImportExport.View.WriteToTargetView : Decorator {
    [CompilerGeneratedAttribute]
private static Func`2<Exception, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Exception, FlowDocument> CS$<>9__CachedAnonymousMethodDelegatec;
    private static UIElement Create_Ready();
    private static UIElement Create_Busy();
    private static UIElement Create_Error();
    [CompilerGeneratedAttribute]
private static string <Create_Error>b__8(Exception ex);
    [CompilerGeneratedAttribute]
private static FlowDocument <Create_Error>b__9(Exception ex);
}
public static class JetBrains.UI.Settings.MountPointsView : object {
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, ISettingsStorageMountPoint, UIElement, UIElement> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, ISettingsStorageMountPoint, UIElement, UIElement> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, ISettingsStorageMountPoint, UIElement, UIElement> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1c;
    [NotNullAttribute]
public static UIElement Create(Lifetime lifetime, IListEvents`1<ISettingsStorageMountPoint> mounts, IActionBarManager barman);
    public static TreeListViewWithDataContext Create_MountsList();
    [CompilerGeneratedAttribute]
private static UIElement <Create_MountsList>b__10(Lifetime lifetime, ISettingsStorageMountPoint mount, UIElement arg3);
    [CompilerGeneratedAttribute]
private static UIElement <Create_MountsList>b__12(Lifetime lifetime, ISettingsStorageMountPoint mount, UIElement arg3);
    [CompilerGeneratedAttribute]
private static UIElement <Create_MountsList>b__14(Lifetime lifetime, ISettingsStorageMountPoint mount, UIElement arg3);
    [CompilerGeneratedAttribute]
private static string <Create_MountsList>b__13(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static string <Create_MountsList>b__15(string s);
}
[ActionAttribute("Move After")]
public class JetBrains.UI.Settings.MoveInjectedLayerAfterAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Move Before")]
public class JetBrains.UI.Settings.MoveInjectedLayerBeforeAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Move After")]
public class JetBrains.UI.Settings.MoveInjectedLayerFirstAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Move Before")]
public class JetBrains.UI.Settings.MoveInjectedLayerLastAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[TypeConverterAttribute("JetBrains.UI.Settings.OwnedDialogPositionConverter")]
[ValueSerializerAttribute("JetBrains.UI.Settings.OwnedDialogPositionSerializer")]
public class JetBrains.UI.Settings.OwnedDialogPosition : ValueType {
    public PointRelativeToMainWindow CenterLocation;
    public Size Size;
    public OwnedDialogPosition(PointRelativeToMainWindow centerLocation, Size size);
    public void ApplyToWindow(Window window, IWin32Window mainwin);
    public static void BindToSettings(Lifetime lifetime, IProperty`1<OwnedDialogPosition> propSettings, Window window, IWin32Window mainwin);
    [ObsoleteAttribute("This rect mixes coordinate spaces between logical and physical. Pass the Rectangle in screen coordinates.")]
public static OwnedDialogPosition FromScreen(Rect rcScreen, IWin32Window mainwin);
    public static OwnedDialogPosition FromScreen(Rectangle rcScreen, IWin32Window mainwin);
    public static OwnedDialogPosition FromWindow(Window window, IWin32Window mainwin);
    [PureAttribute]
[ObsoleteAttribute("This rect mixes coordinate spaces between logical and physical. Call the RECT-version function with screen coordinates.")]
public Rect ToScreen(IWin32Window mainwin);
    [PureAttribute]
public Rectangle ToScreen2(IWin32Window mainwin);
    public virtual string ToString();
}
public class JetBrains.UI.Settings.OwnedDialogPositionConverter : TypeConverterBase`1<OwnedDialogPosition> {
    private static Regex myParse;
    [CompilerGeneratedAttribute]
private static Func`4<CultureInfo, OwnedDialogPosition, ILogger, string> CS$<>9__CachedAnonymousMethodDelegate1;
    private static OwnedDialogPositionConverter();
    internal static OwnedDialogPosition FromString(CultureInfo arg2, string text, ILogger logger);
    internal static string ToString(OwnedDialogPosition value, ILogger logger);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(CultureInfo info, OwnedDialogPosition position, ILogger arg3);
}
public class JetBrains.UI.Settings.OwnedDialogPositionSerializer : ValueSerializerBase`1<OwnedDialogPosition> {
    [CompilerGeneratedAttribute]
private static Func`3<string, ILogger, OwnedDialogPosition> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static OwnedDialogPosition <.ctor>b__0(string s, ILogger logger);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.DialogWindowsSettings", "Saved window positions managed by SaveWindowPositionBehavior.")]
public class JetBrains.UI.Settings.OwnedDialogPositionSettings : object {
    [SettingsIndexedEntryAttribute("Saved window positions managed by SaveWindowPositionBehavior, keyed by the window ID.")]
public IIndexedEntry`2<string, OwnedDialogPosition> Position;
}
[TypeConverterAttribute("JetBrains.UI.Settings.PointRelativeToMainWindowConverter")]
[ValueSerializerAttribute("JetBrains.UI.Settings.PointRelativeToMainWindowSerializer")]
public class JetBrains.UI.Settings.PointRelativeToMainWindow : ValueType {
    public Vector Value;
    public static PointRelativeToMainWindow FromScreen(Point ptScreen, IWin32Window owner);
    public static Vector op_Implicit(PointRelativeToMainWindow rel);
    public static PointRelativeToMainWindow op_Implicit(Vector pt);
    public Point ToScreen(IWin32Window owner);
    public virtual string ToString();
}
public class JetBrains.UI.Settings.PointRelativeToMainWindowConverter : TypeConverterBase`1<PointRelativeToMainWindow> {
    private static PointRelativeToMainWindow FromString(ITypeDescriptorContext arg1, CultureInfo arg2, string arg3);
    private static string ToString(ITypeDescriptorContext arg1, CultureInfo arg2, PointRelativeToMainWindow arg3);
}
public class JetBrains.UI.Settings.PointRelativeToMainWindowSerializer : ValueSerializerBase`1<PointRelativeToMainWindow> {
    private static PointRelativeToMainWindow FromString(IValueSerializerContext ctx, string text);
    private static string ToString(IValueSerializerContext ctx, PointRelativeToMainWindow value);
}
public class JetBrains.UI.Settings.SaveWindowPositionAutomation : AAutomation {
    public OuterLifetime Lifetime;
    [CanBeNullAttribute]
public IWin32Window OwnerWindow;
    [NotNullAttribute]
public ISettingsStore SettingsStore;
    [NotNullAttribute]
public string WindowId;
    public SaveWindowPositionAutomation(OuterLifetime lifetime, string windowId, IWin32Window ownerWindow, ISettingsStore settingsStore);
}
public class JetBrains.UI.Settings.SaveWindowPositionBehavior : object {
    public static DependencyProperty ValueProperty;
    private static SaveWindowPositionBehavior();
    public static SaveWindowPositionAutomation GetValue(Window window);
    public static void SetValue(Window window, SaveWindowPositionAutomation value);
    private static void Run(Lifetime lifeLoaded, SaveWindowPositionAutomation automation, Window window);
}
public class JetBrains.UI.Settings.SettingsBindingExtension : MarkupExtension {
    private DependencyObject mySettingsTableProvider;
    private object myTarget;
    private object myTargetProperty;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringConverter <Converter>k__BackingField;
    [CanBeNullAttribute]
public string Id { get; public set; }
    [CanBeNullAttribute]
public object Default { get; public set; }
    [CanBeNullAttribute]
public IStringConverter Converter { get; public set; }
    public SettingsBindingExtension(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public object get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(object value);
    [CompilerGeneratedAttribute]
public IStringConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IStringConverter value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    private object GetSettingsValue();
    private void SetSettingsValue(object value);
    private object GetTargetValue();
    private void SetTargetValue(object value);
    private void TargetToSettings();
    private void SettingsToTarget();
    private void SetTargetHandler();
    private void SetSettingsHandler();
    private Type GetPropertyType();
    private static IStringConverter CreateConverter(Type propertyType);
    [CompilerGeneratedAttribute]
private void <SetTargetHandler>b__0(object o, EventArgs e);
    [CompilerGeneratedAttribute]
private void <SetTargetHandler>b__1(object o, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <SetSettingsHandler>b__4(object o, EventArgs e);
}
public static class JetBrains.UI.Settings.SettingsSchemaView : object {
    [CompilerGeneratedAttribute]
private static CanExecuteRoutedEventHandler CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Action`1<PropertyChangedEventArgs`1<FlowDocument>> CS$<>9__CachedAnonymousMethodDelegate29;
    [CompilerGeneratedAttribute]
private static Func`1<UIElement> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<bool, string> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`2<bool, SolidColorBrush> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<bool, string> CS$<>9__CachedAnonymousMethodDelegate36;
    [CompilerGeneratedAttribute]
private static Func`1<UIElement> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate4e;
    [CompilerGeneratedAttribute]
private static Func`1<RichTextPresenter> CS$<>9__CachedAnonymousMethodDelegate4f;
    public static UIElement Create(Lifetime lifetime, ISettingsSchema schema, ISettingsStore settingsStore, IShellLocks locks);
    private static UIElement Create_ContextSelectionPanel(Lifetime lifetime, SchemaTreeNodeFactory nodefactory, ISettingsStore settingsStore, IShellLocks locks);
    public static void SetSchemaNodesTreeStyle(TreeListViewWithDataContext tree);
    private static UIElement Create_InfoPanel(Lifetime lifetime, IProperty`1<object> singleSelectedItem);
    private static TreeListViewColumn Create_Tree_ColIsIndexed();
    private static TreeListViewColumn Create_Tree_ColName();
    private static TreeListViewColumn Create_Tree_ColType();
    private static GridViewColumn Create_Tree_ColValue();
    [NotNullAttribute]
public static GlyphRun CreateGlyphRun(string text, string sFontFamily, double fFontSize, Point origin);
    [CompilerGeneratedAttribute]
private static void <Create_ContextSelectionPanel>b__14(object sender, CanExecuteRoutedEventArgs args);
    [CompilerGeneratedAttribute]
private static void <Create_InfoPanel>b__26(PropertyChangedEventArgs`1<FlowDocument> args);
    [CompilerGeneratedAttribute]
private static UIElement <Create_Tree_ColIsIndexed>b__2f();
    [CompilerGeneratedAttribute]
private static string <Create_Tree_ColIsIndexed>b__30(bool isIndexed);
    [CompilerGeneratedAttribute]
private static SolidColorBrush <Create_Tree_ColIsIndexed>b__31(bool isIndexed);
    [CompilerGeneratedAttribute]
private static string <Create_Tree_ColIsIndexed>b__32(bool isIndexed);
    [CompilerGeneratedAttribute]
private static UIElement <Create_Tree_ColName>b__3b();
    [CompilerGeneratedAttribute]
private static string <Create_Tree_ColType>b__45(string s);
    [CompilerGeneratedAttribute]
private static RichTextPresenter <Create_Tree_ColType>b__48();
}
[ActionAttribute("New")]
public class JetBrains.UI.Settings.SettingsStoreView_AddEntryAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Edit")]
public class JetBrains.UI.Settings.SettingsStoreView_EditEntryAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Is Hierarchical")]
public class JetBrains.UI.Settings.SettingsStoreView_IsHierarchicalAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.ICheckableAction.Update(IDataContext context, CheckedActionPresentation presentation);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.ICheckableAction.Execute(IDataContext context);
}
[ActionAttribute("Open Settings Import && Export Window")]
public class JetBrains.UI.Settings.SettingsStoreView_OpenImportExportWindowAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Open Mounting Point")]
public class JetBrains.UI.Settings.SettingsStoreView_OpenMountPointAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Open Mounting Points Window")]
public class JetBrains.UI.Settings.SettingsStoreView_OpenMountPointsWindowAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Open Schema Window")]
public class JetBrains.UI.Settings.SettingsStoreView_OpenSchemaWindowAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Open Settings Store Window")]
public class JetBrains.UI.Settings.SettingsStoreView_OpenSettingsStoreWindowAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Open Storage")]
public class JetBrains.UI.Settings.SettingsStoreView_OpenStorageAction : object {
    [CompilerGeneratedAttribute]
private static Action`1<ToolWindowInstance> CS$<>9__CachedAnonymousMethodDelegate1;
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute>b__0(ToolWindowInstance wnd);
}
[ActionAttribute("Open Storages Window")]
public class JetBrains.UI.Settings.SettingsStoreView_OpenStoragesWindowAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Delete")]
public class JetBrains.UI.Settings.SettingsStoreView_ResetEntryAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("SettingsStoreView")]
public class JetBrains.UI.Settings.SettingsStoreViewAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ToolWindowDescriptorAttribute]
public class JetBrains.UI.Settings.SettingsStoreViewToolWindow : ToolWindowDescriptor {
    public SettingsStoreViewToolWindow(IApplicationHost host);
}
[ShellComponentAttribute]
public class JetBrains.UI.Settings.SettingsStoreViewToolWindowStoragesView : object {
    private ToolWindowInstance myLastToolWindowInstance;
    private Lifetime myLifetime;
    private ToolWindowManager myToolWindowManager;
    private SettingsStoreViewToolWindow myToolWindow;
    private IActionBarManager myActionBarManager;
    private IShellLocks myLocks;
    private IListEvents`1<ISettingsStorage> myStorages;
    private IListEvents`1<ISettingsStorageMountPoint> myMounts;
    private SettingsSchema mySchema;
    private ISettingsStore mySettingsStore;
    private WebProxySettingsReader myWebProxySettingsReader;
    private IActionShortcuts myShortcutManager;
    private IActionManager myActionManager;
    private InternKeyPathComponent myInterned;
    [CompilerGeneratedAttribute]
private static Func`2<IProvider`1<ISettingsStorage>, IViewable`1<ISettingsStorage>> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<IProvider`1<ISettingsStorageMountPoint>, IViewable`1<ISettingsStorageMountPoint>> CS$<>9__CachedAnonymousMethodDelegate4;
    public SettingsStoreViewToolWindowStoragesView(Lifetime lifetime, ToolWindowManager toolman, SettingsStoreViewToolWindow toolwindow, IViewable`1<IProvider`1<ISettingsStorage>> viewableStorages, IActionBarManager actionBarManager, IShellLocks locks, IViewable`1<IProvider`1<ISettingsStorageMountPoint>> viewableMounts, SettingsSchema schema, ISettingsStore settingsStore, WebProxySettingsReader webProxySettingsReader, IActionShortcuts shortcutman, IActionManager actionman, InternKeyPathComponent interned);
    public ToolWindowInstance OpenDashboardWindow();
    public ToolWindowInstance OpenStoragesWindow();
    public ToolWindowInstance OpenMountPointsWindow();
    public ToolWindowInstance OpenSchemaWindow();
    public ToolWindowInstance OpenStorageWindow(ISettingsStorage storage);
    public ToolWindowInstance OpenSettingsStoreWindow();
    public ToolWindowInstance OpenImportExportWindow();
    [CompilerGeneratedAttribute]
private static IViewable`1<ISettingsStorage> <.ctor>b__0(IProvider`1<ISettingsStorage> provider);
    [CompilerGeneratedAttribute]
private static IViewable`1<ISettingsStorageMountPoint> <.ctor>b__1(IProvider`1<ISettingsStorageMountPoint> provider);
    [CompilerGeneratedAttribute]
private IAutomation <OpenDashboardWindow>b__8(Lifetime lifeInstance, ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private IAutomation <OpenStoragesWindow>b__a(Lifetime lifeInstance, ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private IAutomation <OpenMountPointsWindow>b__b(Lifetime lifeInstance, ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private IAutomation <OpenSchemaWindow>b__c(Lifetime lifeInstance, ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private IAutomation <OpenSettingsStoreWindow>b__10(Lifetime lifeInstance, ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private IAutomation <OpenImportExportWindow>b__12(Lifetime lifeInstance, ToolWindowInstance instance);
}
public static class JetBrains.UI.Settings.StoragesView : object {
    [NotNullAttribute]
public static UIElement Create(Lifetime lifetime, IListEvents`1<ISettingsStorage> storages, IActionBarManager barman);
    public static TreeListViewWithDataContext Create_StoragesList();
}
public static class JetBrains.UI.Settings.StorageView : object {
    public static string ToolbarActionGroupId;
    private static StorageView();
    public static FrameworkElement Create(Lifetime lifetime, ISettingsStorage storage, IProperty`1<bool> isHierarchical, IThreading threading, IActionBarManager barman);
    public static void SetTreeStyle(TreeListViewWithDataContext tree);
    public static void EditRawStorageValue(Lifetime lifeLimit, Window owner, ISettingsStorage storage, string key, object value, bool isKeyEditable);
    public static void EditRawStorageValueView(Lifetime lifeLimit, Window owner, EditRawStorageValueViewModel model, Action`1<bool> FSetValue);
}
[ShellComponentAttribute]
public class JetBrains.UI.Settings.StoreViewDataConstants : object {
    public static DataConstant`1<IList`1<ISettingsStorage>> SettingsStorages;
    public static DataConstant`1<IList`1<ISettingsStorageMountPoint>> SettingsStorageMountPoints;
    [CompilerGeneratedAttribute]
private static Func`2<IDataContext, IList`1<ISettingsStorage>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<IDataContext, IList`1<ISettingsStorageMountPoint>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IDataContext, IList`1<ISettingsStorage>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<ISettingsStorageMountPoint, ISettingsStorage> CS$<>9__CachedAnonymousMethodDelegate7;
    public StoreViewDataConstants(Lifetime lifetime, DataContexts contexts);
    private static StoreViewDataConstants();
    [CompilerGeneratedAttribute]
private static IList`1<ISettingsStorage> <.ctor>b__0(IDataContext context);
    [CompilerGeneratedAttribute]
private static IList`1<ISettingsStorageMountPoint> <.ctor>b__1(IDataContext context);
    [CompilerGeneratedAttribute]
private static IList`1<ISettingsStorage> <.ctor>b__2(IDataContext context);
    [CompilerGeneratedAttribute]
private static ISettingsStorage <.ctor>b__3(ISettingsStorageMountPoint mount);
}
public static class JetBrains.UI.Settings.ThemingHack : object {
    public static void HackFrameworkElement(Lifetime lifetime, FrameworkElement element, IThreading threading);
}
public static class JetBrains.UI.Settings.UISettings : object {
    public static DependencyProperty SettingsTableProperty;
    private static UISettings();
    public static void SetSettingsTable(DependencyObject obj, ISettingsTable value);
    public static ISettingsTable GetSettingsTable(DependencyObject obj);
}
public class JetBrains.UI.Settings.WizardAutomation : object {
    private Lifetime myLifetime;
    public ListEvents`1<WizardPage> Pages;
    public IProperty`1<WizardPage> SelectedPage;
    public WizardAutomation(Lifetime lifetime);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(AddRemoveIndexEventArgs`1<WizardPage> args);
}
public class JetBrains.UI.Settings.WizardPage : object {
    public string Title;
    public string ToolTip;
    public ISimpleSignal ActivatedWithNext;
    public IProperty`1<bool> IsActive;
    public object Content;
    public WizardPage(string title, string toolTip, object content);
}
public class JetBrains.UI.Settings.WizardView : Control {
    [CompilerGeneratedAttribute]
private static Func`2<WizardPage, TabItem> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Action`2<Lifetime, WizardPage> CS$<>9__CachedAnonymousMethodDelegatef;
    private static WizardView();
    private static UIElement CreateTemplate(Lifetime lifetime, WizardAutomation automation, WizardView view);
    [CompilerGeneratedAttribute]
private static TabItem <CreateTemplate>b__1(WizardPage page);
    [CompilerGeneratedAttribute]
private static void <CreateTemplate>b__b(Lifetime lifeSelected, WizardPage page);
}
public class JetBrains.UI.SrcView.Actions.ActionBar.ActionAutomationInteractivityServiceTmp : object {
}
[ObsoleteAttribute("New code should use ActionBarAutomation as an automation object.")]
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Actions.ActionBar.ActionBarBehavior : object {
    private static IActionBarManager ourActionBarManager;
    public static DependencyProperty AddActionBarToPanelChildrenProperty;
    public static DependencyProperty ActionBarContextParentProperty;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate1;
    public ActionBarBehavior(Lifetime lifetime, IActionBarManager actionBarManager);
    private static ActionBarBehavior();
    private static void HandleAddActionBarToChildren(Lifetime lifetime, string val, Panel panel);
    public static string GetAddActionBarToPanelChildren(UIElement element);
    public static void SetAddActionBarToPanelChildren(UIElement element, string value);
    private static void HandleActionBarContextParent(Lifetime lifetime, FrameworkElement arg2, Panel panel);
    public static FrameworkElement GetActionBarContextParent(UIElement element);
    public static void SetActionBarContextParent(UIElement element, FrameworkElement value);
    private static void TryCreateActionBar(Lifetime lifetime, Panel panel);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0();
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.UI.SrcView.Actions.ActionBar.ActionBarManagerInteractive : object {
    private static TimeSpan ourAutoUpdateInterval;
    private List`1<IActionBar> myActionBars;
    private List`1<IActionBar> myAutoUpdateBars;
    private IEnumerable`1<IActionBarItemFactory> myFactories;
    private IEnumerable`1<IActionBarItemAutomationProvider> myAutomationProvides;
    private IActionsAvailabilityService myActionsAvailabilityService;
    private IActionManager myActionManager;
    private IThreading myThreading;
    private IEnumerable`1<IActionBarPatcher> myPatchers;
    private IUIApplication myEnvironment;
    private IThemedIconManager myThemedIconManager;
    [CompilerGeneratedAttribute]
private static Func`2<IActionBar, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<ShowRequestedEventArgs> CS$<>9__CachedAnonymousMethodDelegate9;
    public IActionManager ActionManager { get; }
    public IThemedIconManager ThemedIconManager { get; }
    public ActionBarManagerInteractive(Lifetime lifetime, IEnumerable`1<IActionBarPatcher> patchers, IActionManager actionManager, IShellLocks locks, IThemedIconManager themedIconManager, IUIApplication environment, IEnumerable`1<IActionBarItemFactory> factories, IEnumerable`1<IActionBarItemAutomationProvider> automationProvides, IActionsAvailabilityService actionsAvailabilityService);
    private static ActionBarManagerInteractive();
    private void UpdateAutoBars();
    private sealed virtual override IActionContextMenu JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionContextMenu(LifetimeDefinition lifetimeDefinition, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> fGetDataRules);
    private sealed virtual override IActionMenu JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionMenu(Lifetime lifetime, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> fGetDataRules);
    public sealed virtual IActionAutomation CreateItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionAutomation parent);
    private sealed virtual override IActionBar JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionBar(Lifetime lifetime, IActionGroupDef def, bool autoUpdate, Func`1<IEnumerable`1<IDataRule>> fGetDataRules);
    private void ApplyPatchers(Lifetime lifetime, IActionBar actionBar);
    private Func`2<Lifetime, IDataContext> ToGetDataContext(Func`1<IEnumerable`1<IDataRule>> fGetDataRules);
    public sealed virtual void RegisterActionBar(Lifetime lifetime, IActionBar actionBar, bool autoUpdate);
    [CanBeNullAttribute]
internal IActionBarItem CreateItem(IActionBar actionBar, IActionItemParent parent, IActionNodeDef action);
    public static void HideExcessSeparators(ToolStripItemCollection tsItems);
    public sealed virtual IActionManager get_ActionManager();
    public sealed virtual IThemedIconManager get_ThemedIconManager();
    [CompilerGeneratedAttribute]
private static bool <UpdateAutoBars>b__4(IActionBar bar);
    [CompilerGeneratedAttribute]
private static void <JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionContextMenu>b__7(ShowRequestedEventArgs args);
}
public interface JetBrains.UI.SrcView.Actions.ActionBar.IActionBarPatcher {
    public abstract virtual void Patch(Lifetime lifetime, IActionBar actionBar);
}
[ShellComponentAttribute]
internal class JetBrains.UI.SrcView.Actions.ActionBar.Legacy.ActionBarItemFactory : object {
    public sealed virtual IActionBarItem CreateItem(ActionBarManagerInteractive manager, IActionBar actionBar, IActionItemParent parent, IActionNodeDef actionDef);
}
[ShellComponentAttribute]
internal class JetBrains.UI.SrcView.Actions.ActionBar.Legacy.ActionBarItemFactorySeparator : object {
    public sealed virtual IActionBarItem CreateItem(ActionBarManagerInteractive manager, IActionBar actionBar, IActionItemParent parent, IActionNodeDef actionDef);
}
public interface JetBrains.UI.SrcView.Actions.ActionBar.Legacy.IActionBarItemFactory {
    [CanBeNullAttribute]
public abstract virtual IActionBarItem CreateItem(ActionBarManagerInteractive manager, IActionBar actionBar, IActionItemParent parent, IActionNodeDef actionDef);
}
[ActionGroupAttribute("0")]
public class JetBrains.UI.SrcView.Actions.MainMenuOptionsGroupInteractive : object {
    public MainMenuOptionsGroupInteractive(ShowOptionsAction showOptionsAction, ShowSettingsLayersDialogAction showSettingsLayersDialogAction, ExtensionManagerAction extensionManagerAction);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Actions.Views.ActionBarView : ViewControl`1<ActionBarAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ActionBarAutomation automation);
}
public class JetBrains.UI.SrcView.Actions.Views.ActionContextMenu : ContextMenu {
    private static ActionContextMenu();
}
public class JetBrains.UI.SrcView.Actions.Views.ActionMenu : Menu {
    private static ActionMenu();
}
public class JetBrains.UI.SrcView.Actions.Views.ActionMenuItem : object {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty DismissMenuOnClickProperty;
    [CompilerGeneratedAttribute]
private static MouseButtonEventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    private static ActionMenuItem();
    private static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetCommand(DependencyObject element, ICommand value);
    public static ICommand GetCommand(DependencyObject element);
    private static void OnDismissMenuOnClickChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPreviewMouseLeftButtonUpDismissMenu(object sender, MouseButtonEventArgs e);
    public static void SetDismissMenuOnClick(DependencyObject element, bool value);
    public static bool GetDismissMenuOnClick(DependencyObject element);
    private static void OnClick(UIElement element);
    private static void HideMenu(UIElement element);
    private static MenuItem GetTopLevelMenuItem(UIElement element);
    private static void Log(Exception exception);
    [CompilerGeneratedAttribute]
private static void <OnCommandChanged>b__1(object sender, MouseButtonEventArgs args);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Actions.Views.ActionMenuView : ViewControl`1<ActionMenuAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ActionMenuAutomation automation);
}
public class JetBrains.UI.SrcView.Actions.Views.ActionSystemBrushKeys : object {
    public static string ItemPressedBackgroundKey;
    public static string ItemPressedBorderKey;
    public static string ItemPressedForegroundKey;
    public static string ItemHighlightedBackgroundKey;
    public static string ItemHighlightedBorderKey;
    public static string ItemHighlightedForegroundKey;
    public static string MenuPopupBorderKey;
    public static string MenuPopupBackgroundKey;
    public static string MenuPopupForegroundKey;
    public static string MenuPopupMarginBrushKey;
    public static string MenuPopupPaddingKey;
    public static string SeparatorLightBrushKey;
    public static string SeparatorDarkBrushKey;
    public static string ItemCheckBorderKey;
    public static string ItemCheckBackgroundKey;
    public static string ItemCheckForegroundKey;
    public static string ToolBarBorderKey;
    public static string ToolBarBackgroundKey;
    public static string ToolBarForegroundKey;
    public static string ComboBoxBorderKey;
    public static string ComboBoxBackgroundKey;
    public static string ComboBoxForegroundKey;
    public static string ComboBoxPopupBorderKey;
    public static string ComboBoxPopupBackgroundKey;
    public static string ComboBoxPopupForegroundKey;
}
public class JetBrains.UI.SrcView.Actions.Views.ActionToolBar : ToolBar {
    public static DependencyProperty IsVerticalProperty;
    public static DependencyProperty AllowWrappingProperty;
    public bool IsVertical { get; public set; }
    public bool AllowWrapping { get; public set; }
    private static ActionToolBar();
    public bool get_IsVertical();
    public void set_IsVertical(bool value);
    public bool get_AllowWrapping();
    public void set_AllowWrapping(bool value);
}
public class JetBrains.UI.SrcView.Actions.Views.IsVerticalToOrientaionConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.SrcView.Actions.Views.MenuItemPopupBorder : Border {
    public static DependencyProperty HeaderElementProperty;
    private Popup myPopup;
    public FrameworkElement HeaderElement { get; public set; }
    private static MenuItemPopupBorder();
    public FrameworkElement get_HeaderElement();
    public void set_HeaderElement(FrameworkElement value);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void AttachPopup();
    private void OnPopupOpened(object sender, EventArgs e);
    protected virtual void OnRender(DrawingContext drawing);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Actions.Views.PublishActionSystemColorsAndStyles : object {
    public PublishActionSystemColorsAndStyles(Lifetime lifetime, IColorThemeManager themeManager, IPlatformResourceDictionary platformResourceDictionary, PublishThemeColorsToPlatformResources themeColorsPublisher);
}
public class JetBrains.UI.SrcView.Application.Env.ExternalSplashScreenHostMixin : object {
    private Void* myHwnd;
    public ExternalSplashScreenHostMixin(Void* hwnd);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.UI.SrcView.Application.Env.FallbackExceptionReportingGuiInteractiveHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Application.Env.HideSplashScreen : object {
    private static int WM_REQUEST_CLOSE;
    private static int WM_REPORT_CLOSE;
    private static IntPtr ourRoundId;
    private bool myCloseRequestSent;
    private bool myClosed;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private SplashScreenHwnd mySplashScreenHwnd;
    private Action OnSplashClosed;
    public HideSplashScreen(Lifetime lifetime, SplashScreenHwnd splashScreenHwnd, IThreading threading);
    private static HideSplashScreen();
    public sealed virtual void HideSplash(IntPtr hWndPtr);
    public sealed virtual void HideSplash();
    public sealed virtual void HideSplash(Action onSplashClosed, IntPtr hWndPtr);
    private void OnMessageFilter(MSG& msg, Boolean& handled);
    private void OnClosed();
    private void RaiseOnSplashClosed();
    private void add_OnSplashClosed(Action value);
    private void remove_OnSplashClosed(Action value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public interface JetBrains.UI.SrcView.Application.Env.IHideSplashScreen {
    public abstract virtual void HideSplash();
    public abstract virtual void HideSplash(IntPtr hWndPtr);
    public abstract virtual void HideSplash(Action onSplashClosed, IntPtr hWndPtr);
}
public static class JetBrains.UI.SrcView.Application.Env.Launcher : object {
    [NotNullAttribute]
public static AssemblyQualifiedTypeMemberName MainMethod;
    [ObsoleteAttribute("Use Main.")]
[NotNullAttribute]
public static AssemblyQualifiedTypeMemberName MainMethodScattered;
    private static Launcher();
    [PublicAPIAttribute]
public static int Main();
    [ObsoleteAttribute("Use Main.")]
[PublicAPIAttribute]
public static int MainScattered();
    [BuildStepAttribute]
public static IEnumerable`1<StandaloneLauncherHostArtifact> ValidateCompileTimeConstants(ILogger logger);
}
public class JetBrains.UI.SrcView.Application.Env.SplashScreenHwnd : object {
    [NotNullAttribute]
public Void* Hwnd;
    public SplashScreenHwnd(Void* hwnd);
    [CanBeNullAttribute]
public static SplashScreenHwnd TryCreate(Void* hwndSplashScreen);
}
[EnvironmentComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.SrcView.Application.Env.UITimebombExplosionReporter : object {
    private HostInfo myHostInfo;
    private IHostProductInfo myHostProductInfo;
    private ApplicationShutdownRequests myShutdownRequests;
    private IWindowBranding myWindowBranding;
    private IMainWindow myMainWindow;
    private IProductCommandLine myProductCommandLine;
    public UITimebombExplosionReporter(HostInfo hostInfo, IHostProductInfo hostProductInfo, ApplicationShutdownRequests shutdownRequests, IWindowBranding windowBranding, IProductCommandLine productCommandLine, IMainWindow mainWindow);
    public sealed virtual void ReportTimebombed(ICollection`1<ZonePart> zoneParts, ICollection`1<string> timebombedProducts);
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.Application.Env.WindowsSimpleGuiApplicationHost : object {
    [PureAttribute]
[ExtensionAttribute]
[NotNullAttribute]
public static Engine OnWindowsInteractiveSimpleGuiEngine(Empty input);
    [NotNullAttribute]
[ExtensionAttribute]
[PureAttribute]
public static Full WithExternalSplashScreen(Full input, Void* hwnd);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute("4", "1", "0")]
public class JetBrains.UI.SrcView.Application.Env.WinFormsApplicationIdleEvent : object {
    private ApplicationIdleEvent myApplicationIdleEvent;
    public WinFormsApplicationIdleEvent(Lifetime lifetime, ApplicationIdleEvent applicationIdleEvent, IThreading threading);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Automation.AutomationViewsRegistryAvalon : AutomationViewsRegistry {
    private Lazy`1<ResourceDictionary> myDataTemplatesResourceDictionary;
    private ResourceDictionary JetBrains.UI.SrcView.Automation.IAutomationViewsRegistryAvalon.DataTemplatesResourceDictionary { get; }
    public AutomationViewsRegistryAvalon(Lifetime lifetime, ShellPartCatalogSet catalogset, IComponentContainer componentContainer, ILogger logger);
    private sealed virtual override ResourceDictionary JetBrains.UI.SrcView.Automation.IAutomationViewsRegistryAvalon.get_DataTemplatesResourceDictionary();
    private static DataTemplate CreateTemplate(Type viewModelType, Type viewType);
}
public class JetBrains.UI.SrcView.Automation.EitherControlView : Decorator {
    private void SetChild(Lifetime lifetime, EitherControl either);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <SetChild>b__9();
    [CompilerGeneratedAttribute]
private void <SetChild>b__b();
    [CompilerGeneratedAttribute]
private void <SetChild>b__d();
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Automation.EitherControlViewRegistrar : object {
    public EitherControlViewRegistrar(Lifetime lifetime, IAutomationViewsRegistry registry);
}
public interface JetBrains.UI.SrcView.Automation.IAutomationViewsRegistryAvalon {
    [NotNullAttribute]
public ResourceDictionary DataTemplatesResourceDictionary { get; }
    public abstract virtual ResourceDictionary get_DataTemplatesResourceDictionary();
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.Automation.IAutomationViewsRegistryEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IWindowlessControl TryCreateWindowlessControlView(IAutomationViewsRegistry thіs, Lifetime lifetime, IAutomation oAutomation, IComponentContainer containerForFactoring);
    [NotNullAttribute]
[ExtensionAttribute]
public static IWindowlessControl CreateWindowlessControlView(IAutomationViewsRegistry thіs, Lifetime lifetime, IAutomation oAutomation, IComponentContainer containerForFactoring);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Automation.PublishAutomationViewsRegistryToPlatformResources : object {
    public PublishAutomationViewsRegistryToPlatformResources(Lifetime lifetime, IAutomationViewsRegistryAvalon automationViewsRegistry, IPlatformResourceDictionary platformResourceDictionary);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Automation.UIA.ApplicationAutomation : object {
    private IntPtr myMainWindowHandle;
    [CompilerGeneratedAttribute]
private static Func`2<AutomationElement, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<AutomationElement, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    protected IntPtr MainWindowHandle { get; }
    public ApplicationAutomation(IMainWindow mainWindow);
    public AutomationElement GetApplicationRootElement();
    public IEnumerable`1<AutomationElement> GetApplicationRootElements();
    public IEnumerable`1<AutomationElement> GetFloatingWindowRootElements();
    protected virtual IntPtr get_MainWindowHandle();
    protected virtual IEnumerable`1<IntPtr> GetTopLevelWindows();
    protected virtual IEnumerable`1<IntPtr> GetFloatingWindows();
    protected static AutomationElement FromHandle(IntPtr handle);
    [CompilerGeneratedAttribute]
private static bool <GetApplicationRootElements>b__0(AutomationElement element);
    [CompilerGeneratedAttribute]
private static bool <GetFloatingWindowRootElements>b__2(AutomationElement element);
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.Automation.UIA.AutomationElementEx : object {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private static Func`2<Condition, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Condition, string> CS$<>9__CachedAnonymousMethodDelegate3;
    private static AutomationElementEx();
    [ExtensionAttribute]
public static string AutomationId(AutomationElement uia);
    [ExtensionAttribute]
public static string ClassName(AutomationElement uia);
    [ExtensionAttribute]
public static ControlType ControlType(AutomationElement uia);
    [ExtensionAttribute]
public static IntPtr Hwnd(AutomationElement uia);
    [ExtensionAttribute]
public static void Invoke(AutomationElement uia);
    [ExtensionAttribute]
[NotNullAttribute]
public static InvokePattern InvokePattern(AutomationElement uia);
    [ExtensionAttribute]
public static string Name(AutomationElement uia);
    [ExtensionAttribute]
[NotNullAttribute]
public static TPattern Pattern(AutomationElement uia);
    [NotNullAttribute]
[ExtensionAttribute]
public static TValue Property(AutomationElement uia, AutomationProperty prop);
    [ExtensionAttribute]
public static string Render(Condition condition);
    [ExtensionAttribute]
public static AutomationElementSearch Search(AutomationElement element, TreeScope scope);
    [ExtensionAttribute]
public static AutomationElementSearch SearchHwnd(AutomationElement element, TreeScope scope);
    [ExtensionAttribute]
public static void ToggleInto(AutomationElement uia, ToggleState state);
    [ExtensionAttribute]
public static string ValueGet(AutomationElement uia);
    [ExtensionAttribute]
[NotNullAttribute]
public static ValuePattern ValuePattern(AutomationElement uia);
    [ExtensionAttribute]
public static void ValueSet(AutomationElement uia, string value);
    [NotNullAttribute]
[ExtensionAttribute]
public static AutomationElementSearch WhereEnabled(AutomationElementSearch search);
    [ExtensionAttribute]
[NotNullAttribute]
public static AutomationElementSearch WhereVisible(AutomationElementSearch search);
    [ExtensionAttribute]
[NotNullAttribute]
public static AutomationElementSearch WhereAutomationIdIs(AutomationElementSearch search, string automationid);
    [ExtensionAttribute]
[NotNullAttribute]
public static AutomationElementSearch WhereControlTypeIs(AutomationElementSearch search, ControlType controltype);
    [NotNullAttribute]
[ExtensionAttribute]
public static AutomationElementSearch WhereNameIs(AutomationElementSearch search, string name);
    [NotNullAttribute]
[ExtensionAttribute]
public static AutomationElementSearch WhereClassNameIs(AutomationElementSearch search, string name);
    [CompilerGeneratedAttribute]
private static string <Render>b__0(Condition cnd);
    [CompilerGeneratedAttribute]
private static string <Render>b__1(Condition cnd);
}
public static class JetBrains.UI.SrcView.Automation.UIA.AutomationPeerEx : object {
    [CompilerGeneratedAttribute]
private static Func`2<DependencyObject, IEnumerable`1<DependencyObject>> CS$<>9__CachedAnonymousMethodDelegate2;
    public static void GetChildAutomationPeers(DependencyObject doStart, StartingElement startingelement, List`1<AutomationPeer> peers);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public static List`1<AutomationPeer> GetChildAutomationPeers(DependencyObject doStart, StartingElement startingelement);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<DependencyObject> <GetChildAutomationPeers>b__0(DependencyObject node);
}
public static class JetBrains.UI.SrcView.Automation.UIA.AutomationProperties : object {
    public static AutomationProperty AutomationId;
    public static AutomationProperty ClassName;
    public static AutomationProperty ControlType;
    public static AutomationProperty Name;
    public static AutomationProperty NativeWindowHandle;
    public static AutomationProperty IsEnabled;
    private static AutomationProperties();
}
public abstract class JetBrains.UI.SrcView.Automation.ViewControl`1 : Decorator {
    private Func`3<Lifetime, TAutomation, UIElement> myFRenderView;
    protected ViewControl`1(Func`3<Lifetime, TAutomation, UIElement> FRenderView);
    protected virtual UIElement OnRenderView(Lifetime lifetime, TAutomation automation);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lifetime, TAutomation automation, ViewControl`1<TAutomation> view);
}
public class JetBrains.UI.SrcView.Automation.WinFormsControlView : Decorator {
    private void SetChild(Lifetime lifetime, Control winforms);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <SetChild>b__8();
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Automation.WinFormsControlViewRegistrar : object {
    public WinFormsControlViewRegistrar(Lifetime lifetime, IAutomationViewsRegistry registry);
}
public static class JetBrains.UI.SrcView.Behavior.AvalonBehaviorHelpers : object {
    public static DependencyProperty AvalonBehaviorStateProperty;
    private static AvalonBehaviorHelpers();
    [NotNullAttribute]
public static PropertyChangedCallback GetPropertyChangedCallback(string sName, Action`3<Lifetime, TValue, TElement> FBehave);
    public static DependencyProperty RegisterBehavior(string name, Action`3<Lifetime, TValue, TElement> FBehave);
    public static DependencyProperty RegisterBehavior(string name, Action`3<Lifetime, TValue, FrameworkElement> FBehave);
    public static DependencyProperty RegisterOnOffBehavior(string name, Action`2<Lifetime, TElement> FBehave);
    public static DependencyProperty RegisterOnOffBehavior(string name, Action`2<Lifetime, FrameworkElement> FBehave);
    [NotNullAttribute]
private static IPropertyBag GetOrCreateAvalonBehaviorState(FrameworkElement element);
}
public class JetBrains.UI.SrcView.Behavior.BindToolbarCommandsBehavior : object {
    public static DependencyProperty CommandsProperty;
    private static BindToolbarCommandsBehavior();
    public static IListEvents`1<UiCommandAutomation> GetCommands(ToolBar toolbar);
    public static void SetCommands(ToolBar toolbar, IListEvents`1<UiCommandAutomation> value);
    private static void RunBinding(Lifetime lifetime, IListEvents`1<UiCommandAutomation> commands, ToolBar toolbar);
}
public class JetBrains.UI.SrcView.Behavior.HierarchicalFocusScopeRootBehavior : object {
    private static ReadonlyToken myBoolPropertyAssignedToken;
    public static DependencyProperty HierarchicalFocusScopeRootTokensProperty;
    public static DependencyProperty IsHierarchicalFocusScopeRootProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatee;
    private static HierarchicalFocusScopeRootBehavior();
    public static bool GetIsHierarchicalFocusScopeRoot(FrameworkElement element);
    public static void SetIsHierarchicalFocusScopeRoot(FrameworkElement element, bool value);
    public static void SetIsHierarchicalFocusScopeRoot(Lifetime lifetime, FrameworkElement element, ReadonlyToken tokenOwner);
    [NotNullAttribute]
private static ICollectionEvents`1<ReadonlyToken> GetTokens(FrameworkElement element);
    private static void PropagateFocusScopesToElement(Lifetime lifetime, FrameworkElement elementRoot);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__b(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Build.App.BuildAppDispatchAutomationInteractivityInteractive : BuildAppDispatchAutomationInteractivityBase {
    private ICommonFileDialogs myCommonFileDialogs;
    public BuildAppDispatchAutomationInteractivityInteractive(ICommonFileDialogs commonFileDialogs);
    public virtual FileSystemPath BrowseForFolder(string title, FileSystemPath initial);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.App.BuildAppDispatchView : ViewControl`1<BuildAppDispatchAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildAppDispatchAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.App.CommandShortcutView : ViewControl`1<CommandShortcutAutomation> {
    public static UIElement RenderView(Lifetime lifetime, CommandShortcutAutomation automation);
    protected virtual UIElement OnRenderView(Lifetime lifetime, CommandShortcutAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.App.LocalInstallView : ViewControl`1<LocalInstallAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate52;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate53;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate54;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate55;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate56;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate57;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate58;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate59;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate5a;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate5b;
    [CompilerGeneratedAttribute]
private static Func`2<bool, string> CS$<>9__CachedAnonymousMethodDelegate5c;
    [CompilerGeneratedAttribute]
private static Func`4<string, string, string, FrameworkElement> CS$<>9__CachedAnonymousMethodDelegate5d;
    [CompilerGeneratedAttribute]
private static Action`1<Button> CS$<>9__CachedAnonymousMethodDelegate5e;
    [CompilerGeneratedAttribute]
private static Func`2<IInstalledIde, object> CS$<>9__CachedAnonymousMethodDelegate5f;
    [CompilerGeneratedAttribute]
private static Func`2<object, IInstalledIde> CS$<>9__CachedAnonymousMethodDelegate60;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate61;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate62;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Visibility> CS$<>9__CachedAnonymousMethodDelegate63;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate64;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate65;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate66;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate67;
    protected virtual UIElement OnRenderView(Lifetime lifetime, LocalInstallAutomation automation);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__33(bool b);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__34(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__35(bool b);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__36(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__37(bool b);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__38(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__39(bool b);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__3a(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__3b(bool b);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__3c(Nullable`1<bool> b);
    [CompilerGeneratedAttribute]
private static string <OnRenderView>b__3d(bool iss);
    [CompilerGeneratedAttribute]
private static FrameworkElement <OnRenderView>b__3e(string upper, string middle, string lower);
    [CompilerGeneratedAttribute]
private static void <OnRenderView>b__45(Button button);
    [CompilerGeneratedAttribute]
private static object <OnRenderView>b__46(IInstalledIde ver);
    [CompilerGeneratedAttribute]
private static IInstalledIde <OnRenderView>b__47(object obj);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__4b(bool setting);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__4c(Nullable`1<bool> cb);
    [CompilerGeneratedAttribute]
private static Visibility <OnRenderView>b__4d(bool val);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__4e(bool setting);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__4f(Nullable`1<bool> cb);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <OnRenderView>b__50(bool b);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__51(Nullable`1<bool> b);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.SrcView.Build.App.ZoneMarker : object {
}
public class JetBrains.UI.SrcView.Build.AutoFittingLabelView : Decorator {
    private static double LabelFontSize;
    private ILogger Logger;
    public IProperty`1<Brush> Foreground;
    public IProperty`1<string> Text;
    public TextBlock TextBlock;
    private static AutoFittingLabelView();
    public static TextBlock CreateLabelTextBlock();
    public static FontFamily GetMonospacedFont();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<string> args);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.BuildArtifactsSetView : ViewControl`1<BuildArtifactsSetAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildArtifactsSetAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.BuildArtifactsView : ViewControl`1<BuildArtifactsAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildArtifactsAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.BuildArtifactSwatchView : ViewControl`1<BuildArtifactSwatchAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildArtifactSwatchAutomation automation);
}
public class JetBrains.UI.SrcView.Build.BuildDisplay : object {
    public static Window CreateLogView(Lifetime lifetime, BuildDisplayAutomation buildDisplayAutomation, ITheming theming);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.BuildDisplayView : ViewControl`1<BuildDisplayAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildDisplayAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.BuildStepsSetView : ViewControl`1<BuildStepsSetAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildStepsSetAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.BuildStepsView : ViewControl`1<BuildStepsAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildStepsAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.BuildStepSwatchView : ViewControl`1<BuildStepSwatchAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, BuildStepSwatchAutomation automation);
}
public class JetBrains.UI.SrcView.Build.GenericType1 : MarkupExtension {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <InnerType>k__BackingField;
    public Type BaseType { get; public set; }
    public Type InnerType { get; public set; }
    public GenericType1(Type baseType, Type innerType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
    [CompilerGeneratedAttribute]
public void set_BaseType(Type value);
    [CompilerGeneratedAttribute]
public Type get_InnerType();
    [CompilerGeneratedAttribute]
public void set_InnerType(Type value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.KindCellView : ViewBase`1<KindCellAutomation> {
    protected virtual UIElement OnRenderView(KindCellAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.LogRecordView : ViewBase`1<LogRecordAutomation> {
    protected virtual UIElement OnRenderView(LogRecordAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.LogView : ViewControl`1<LogAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    private static TreeGridView Tree(Lifetime lifetime, LogAutomation automation);
    private static void Tree_BindItemsSource(Lifetime lifetime, IListEvents`1<LogRecordAutomation> allrecords, TreeGridView tree);
    protected virtual UIElement OnRenderView(Lifetime lifetime, LogAutomation automation);
    [CompilerGeneratedAttribute]
private static string <OnRenderView>b__1c(int count);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__1f(Nullable`1<bool> x);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.ProfileExplorerView : UserControl {
    internal Button RefreshButton;
    internal Button AddButton;
    internal TreeGridView TreeGridView;
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private ITrieNode[] <.ctor>b__1();
}
public class JetBrains.UI.SrcView.Build.ProfileNameRule : ValidationRule {
    public virtual ValidationResult Validate(object value, CultureInfo cultureInfo);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.RunningRecordMessageView : ViewControl`1<RunningRecordMessageAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, RunningRecordMessageAutomation automation);
}
[ViewAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.SrcView.Build.SwatchIndicatorView : ViewControl`1<SwatchIndicatorAutomation> {
    [CompilerGeneratedAttribute]
private static Action`1<Rectangle> CS$<>9__CachedAnonymousMethodDelegated;
    protected virtual UIElement OnRenderView(Lifetime lifetime, SwatchIndicatorAutomation automation);
    [CompilerGeneratedAttribute]
private static void <OnRenderView>b__8(Rectangle r);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.SwatchPanelView : ViewControl`1<SwatchPanelAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, SwatchPanelAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Build.TimeCellView : CustomRenderedViewBase`1<TimeCellAutomation> {
    public static DependencyProperty TimeSpanProperty;
    private FormattedText myFormattedText;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate4;
    public TimeSpan TimeSpan { get; public set; }
    private static TimeCellView();
    private void OnTimeSpanChanged();
    public TimeSpan get_TimeSpan();
    public void set_TimeSpan(TimeSpan value);
    protected virtual void OnViewModelChanged(TimeCellAutomation previous, TimeCellAutomation current);
    private void UpdateFormattedText();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.UI.SrcView.BulbMenu.BulbMenuComponentInteractive : BulbMenuComponent {
    public Size IconMargin { get; }
    public BulbMenuComponentInteractive(Lifetime lifetime, IUIApplication environment, JetPopupMenus jetPopupMenus, IShellLocks locks, IActionManager actionManager, UsageStatistics usageStatistics, FeatureSuggestionBulbItemsProvider featureSuggestionItemsProvider);
    public virtual Size get_IconMargin();
}
public class JetBrains.UI.SrcView.CommandReference : Freezable {
    public static DependencyProperty CommandProperty;
    private EventHandler CanExecuteChanged;
    private Func`2<object, bool> CanExecuteRequested;
    private Action`1<object> ExecuteRequested;
    public ICommand Command { get; public set; }
    private static CommandReference();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void add_CanExecuteRequested(Func`2<object, bool> value);
    public void remove_CanExecuteRequested(Func`2<object, bool> value);
    public void add_ExecuteRequested(Action`1<object> value);
    public void remove_ExecuteRequested(Action`1<object> value);
    private static void OnCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnCommandCanExecutedChanged(object sender, EventArgs args);
    protected virtual Freezable CreateInstanceCore();
}
public class JetBrains.UI.SrcView.CommandSinkBinding : CommandBinding {
    public static DependencyProperty CommandSinkProperty;
    [CompilerGeneratedAttribute]
private ICommandSink <CommandSink>k__BackingField;
    public ICommandSink CommandSink { get; public set; }
    private static CommandSinkBinding();
    [CompilerGeneratedAttribute]
public ICommandSink get_CommandSink();
    [CompilerGeneratedAttribute]
public void set_CommandSink(ICommandSink value);
    public static ICommandSink GetCommandSink(DependencyObject obj);
    public static void SetCommandSink(DependencyObject obj, ICommandSink value);
    private static void OnCommandSinkChanged(DependencyObject depObj, DependencyPropertyChangedEventArgs e);
    private static bool ConfigureDelayedProcessing(DependencyObject depObj, ICommandSink commandSink);
    private static void ProcessCommandSinkChanged(DependencyObject depObj, ICommandSink commandSink, bool invalidateCommands);
    private static CommandBindingCollection GetCommandBindings(DependencyObject depObj);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object s, CanExecuteRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object s, ExecutedRoutedEventArgs e);
}
public class JetBrains.UI.SrcView.ContextNotifications.ContentControlWithExtendedSize : ContentControl {
    private Nullable`1<double> myBaseWidth;
    public static DependencyProperty ExtraWidthProperty;
    public double ExtraWidth { get; public set; }
    private static ContentControlWithExtendedSize();
    public double get_ExtraWidth();
    public void set_ExtraWidth(double value);
    protected virtual Size MeasureOverride(Size constraint);
}
public class JetBrains.UI.SrcView.ContextNotifications.ContentControlWithFixedSize : ContentControl {
    public static DependencyProperty DependsOnProperty;
    public FrameworkElement DependsOn { get; public set; }
    private static ContentControlWithFixedSize();
    public FrameworkElement get_DependsOn();
    public void set_DependsOn(FrameworkElement value);
    protected virtual Size MeasureOverride(Size constraint);
}
public class JetBrains.UI.SrcView.ContextNotifications.ContextNotificationControl : UserControl {
    private IFeaturePartsContainer myContainer;
    private double myMinWidthValue;
    private double myMaxWidthValue;
    private bool _contentLoaded;
    public ContextNotificationControl(IFeaturePartsContainer container);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    private void OnCustomControlInitialized(object sender, EventArgs e);
    private void OnResizeThumbDragDelta(object sender, DragDeltaEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.ContextNotifications.ContextNotificationHostExtensions : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static ContextNotificationControl CreateControl(IContextNotificationHost host, IFeaturePartsContainer container);
}
public abstract class JetBrains.UI.SrcView.ContextNotifications.ContextNotificationView`1 : object {
    private Type JetBrains.UI.SrcView.ContextNotifications.IContextNotificationView.ModelType { get; }
    private sealed virtual override Type JetBrains.UI.SrcView.ContextNotifications.IContextNotificationView.get_ModelType();
    public abstract virtual Control CreateControl();
}
public interface JetBrains.UI.SrcView.ContextNotifications.IContextNotificationView {
    [NotNullAttribute]
public Type ModelType { get; }
    public abstract virtual Type get_ModelType();
    [NotNullAttribute]
public abstract virtual Control CreateControl();
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.ActionBarView : Control {
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, ActionBarAutomation, ActionBarView, UIElement> CS$<>9__CachedAnonymousMethodDelegate1;
    private static ActionBarView();
    [CompilerGeneratedAttribute]
private static UIElement <.cctor>b__0(Lifetime lifetime, ActionBarAutomation automation, ActionBarView view);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.ActionBarViewFocusedControlScope : Control {
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, ActionBarAutomationFocusedControlScope, ActionBarViewFocusedControlScope, UIElement> CS$<>9__CachedAnonymousMethodDelegate1;
    private static ActionBarViewFocusedControlScope();
    [CompilerGeneratedAttribute]
private static UIElement <.cctor>b__0(Lifetime lifetime, ActionBarAutomationFocusedControlScope automation, ActionBarViewFocusedControlScope view);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.ActionMenuView : ViewControl`1<ActionMenuAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ActionMenuAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.ActionMenuViewFocusedControlScope : ViewControl`1<ActionMenuAutomationFocusedControlScope> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ActionMenuAutomationFocusedControlScope automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.AutomationWrapperView : ViewControl`1<AutomationWrapper> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, AutomationWrapper automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.CheckBoxView : ViewControl`1<CheckBoxAutomation> {
    [CompilerGeneratedAttribute]
private static Action`1<FrameworkElement> CS$<>9__CachedAnonymousMethodDelegate7;
    protected virtual UIElement OnRenderView(Lifetime lifetime, CheckBoxAutomation automation);
    [CompilerGeneratedAttribute]
private static void <OnRenderView>b__3(FrameworkElement elem);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.EitherControlAvalonView : ContentPresenter {
    [CompilerGeneratedAttribute]
private static Func`2<EitherControlAutomation, UIElement> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static UIElement <.ctor>b__1(EitherControlAutomation o);
}
[ViewAttribute("2")]
public class JetBrains.UI.SrcView.Controls.EitherControlWinFormsView : Panel {
    public EitherControlWinFormsView(EitherControlAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.IconAndTooltipView : ViewControl`1<IconAndTooltipAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconAndTooltipAutomation automation);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.IconAndTooltipWindowlessControl : BitmapWindowlessControl {
    private IconAndTooltipAutomation myAutomation;
    public IconAndTooltipWindowlessControl(Lifetime lifetime, IconAndTooltipAutomation automation, IThemedIconManager themedIconManager);
    private sealed virtual override ITooltipInfo JetBrains.Application.UI.Tooltips.ITooltipProvider.GetTooltip(Lifetime lifetime, Point point);
}
public class JetBrains.UI.SrcView.Controls.JetLoaderAnimationElement : FrameworkElement {
    private JetLoaderAnimationRenderer _renderer;
    private DispatcherTimer _timer;
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnRender(DrawingContext dc);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object param0, EventArgs param1);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.JetLoaderAnimationView : ViewControl`1<JetLoaderAnimationAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, JetLoaderAnimationAutomation automation);
}
public interface JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.IJetPopupMenuItemView {
    public JetPopupMenuItem Item { get; }
    public Point Location { get; public set; }
    public abstract virtual JetPopupMenuItem get_Item();
    public abstract virtual Point get_Location();
    public abstract virtual void set_Location(Point value);
    public abstract virtual Size GetSize(JetPopupMenuItemViewPresentationFlags flags);
    public abstract virtual JetPopupMenuItemViewHitTestResult HitTest(Point pt);
    public abstract virtual Size[] LayoutBottomUp(IGraphicsContainer gc);
    public abstract virtual Size LayoutTopDown(Size[] cells, IGraphicsContainer gc);
    public abstract virtual void Paint(Graphics g, JetPopupMenuColorSet colors, JetPopupMenuItemViewPresentationFlags flags, IJetPopupMenuItemAdorner adorner);
}
public abstract class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuItemView : object {
    protected Rectangle RGradientPart;
    protected Rectangle RMarginLeft;
    protected Rectangle RMarginRight;
    protected Rectangle RMarginUpper;
    protected Rectangle RNonGradientPart;
    protected Rectangle RTotal;
    protected Rectangle RUpperMarginGradientPart;
    protected Rectangle RUpperMarginNonGradientPart;
    protected JetPopupMenuItem myItem;
    protected RenderParams mySharedRenderParams;
    protected Point myLocation;
    public JetPopupMenuItem Item { get; }
    public Point Location { get; public set; }
    protected JetPopupMenuItemView(JetPopupMenuItem item, RenderParams renderParamsShared);
    protected abstract virtual void PaintWithUpperMargin(Graphics g, JetPopupMenuColorSet colors, JetPopupMenuItemViewPresentationFlags flags, IJetPopupMenuItemAdorner adorner);
    public sealed virtual Size GetSize(JetPopupMenuItemViewPresentationFlags flags);
    public virtual JetPopupMenuItemViewHitTestResult HitTest(Point pt);
    public abstract virtual Size[] LayoutBottomUp(IGraphicsContainer gc);
    public virtual Size LayoutTopDown(Size[] cells, IGraphicsContainer gc);
    public sealed virtual void Paint(Graphics g, JetPopupMenuColorSet colors, JetPopupMenuItemViewPresentationFlags flags, IJetPopupMenuItemAdorner adorner);
    public sealed virtual JetPopupMenuItem get_Item();
    public sealed virtual Point get_Location();
    public sealed virtual void set_Location(Point value);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuMainpartView : SafePanel {
    public static int ScrollTimerIntervalWithMouse;
    public static int ScrollTimerIntervalWithoutMouse;
    protected Property`1<int> LastVisibleItem;
    protected Bitmap myBmpArrowDownDisabled;
    protected Bitmap myBmpArrowDownEnabled;
    protected Bitmap myBmpArrowUpDisabled;
    protected Bitmap myBmpArrowUpEnabled;
    [NotNullAttribute]
protected Int32[] myColumnWidths;
    [NotNullAttribute]
protected JetHashSet`1<int> myDirtyItems;
    protected bool myDropShadowEnabled;
    protected IDictionary`2<JetPopupMenuItem, IJetPopupMenuItemView> myItemToView;
    protected bool myLastKeyDownWasMnemonic;
    protected int myMenuClientHeight;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
protected JetPopupMenuView myMenuView;
    protected Point myMouseLocation;
    protected int myMouseWheelScrollDelta;
    protected int myMouseWheelScrollLines;
    protected ReadonlyToken myReadonlyCookie;
    protected LayoutRects myRects;
    protected bool myScrollNeeded;
    protected int myScrollPos;
    [NotNullAttribute]
protected Lazy`1<Timer> myScrollTimer;
    protected ISimpleSignal myWantsResize;
    [NotNullAttribute]
public Property`1<bool> IsKeyboardNavigating;
    [NotNullAttribute]
public Property`1<bool> IsMouseNavigating;
    public IProperty`1<JetPopupMenuItem> ExpandedItem;
    [CanBeNullAttribute]
private IWindowsHookManager myWindowsHookManager;
    [NotNullAttribute]
public IProperty`1<bool> IsHighlightingSearchHostResults;
    [CompilerGeneratedAttribute]
private static Action`1<PropertyChangedEventArgs`1<int>> CS$<>9__CachedAnonymousMethodDelegate38;
    public JetPopupMenuDoc Document { get; }
    public int FirstVisibleItem { get; }
    public JetPopupMenuView MenuView { get; }
    public bool ScrollNeeded { get; }
    internal JetPopupMenuColorSet Colors { get; }
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public JetPopupMenuMainpartView(Lifetime lifetime, JetPopupMenuView menuview, ITooltipManager tooltipman, ISettingsStore settings, IWindowsHookManager windowsHookManager, IThemedIconManager thicman, IUIApplicationSimple uiapp);
    public JetPopupMenuDoc get_Document();
    public int get_FirstVisibleItem();
    public JetPopupMenuView get_MenuView();
    public bool get_ScrollNeeded();
    [NotNullAttribute]
public Bitmap RenderItem(Lifetime lifetime, JetPopupMenuItem item);
    [NotNullAttribute]
public IAnchoringRect CreateItemAnchoringRect(Lifetime lifetime, JetPopupMenuItem item, IWindowsHookManager hookman);
    protected static bool IsValidItemLocation(Point pt);
    protected void EnsureVisible(int index, VisibleAt position);
    protected bool GetAutoscrolling(NextItemDir& direction);
    protected int GetHitMenuItemIndex(Point pt);
    protected void InitControls();
    protected void InitDataFlow(Lifetime lifetime, ITooltipManager tooltipman, ISettingsStore settings, IThemedIconManager thicman);
    protected void InitDataFlow_Document(Lifetime lifetime);
    protected void InitDataFlow_EnableKeyboardTooltips(Lifetime lifetime, ITooltipManager tooltipman, ISettingsStore settings);
    protected void InitDataFlow_ItemViews(Lifetime lifetime, IThemedIconManager thicman);
    private void InitDataFlow_ExpandOnHover(Lifetime lifetime, ISettingsStore settings);
    protected void InvalidateDirtyItems();
    protected void InvalidateItem(int index);
    protected Size LayoutBottomUp(IGraphicsContainer gc, Size sizeLimit);
    protected void LayoutBottomUp_MenuItems(Int32[]& nColumnWidths, Int32[]& nItemHeights, Size& sizeTotal, IGraphicsContainer gc, Size sizeLimit);
    protected void LayoutTopDown(IGraphicsContainer gc, Size sizeAvail);
    protected void LayoutTopDown_MenuItems(IGraphicsContainer gc, Size sizeAvail);
    protected void LayoutTopDown_PlaceMenuItems(bool bRepaint);
    protected void OnScrollTimerTick();
    protected void Paint(Graphics g);
    protected void PrerenderBitmapsStatic();
    protected void PrerenderBitmapsStatic_ScrollArrows();
    protected void ResetScrollRanges();
    protected bool ScrollByOneItem(NextItemDir dir);
    protected void ScrollMenu(int dy);
    protected void SelectItemAtPoint(Point pt);
    protected void SetAutoscrolling();
    internal JetPopupMenuColorSet get_Colors();
    private void InitDataFlow_Logging(Lifetime lifetime);
    private void Paint_MenuItems(Graphics g, JetPopupMenuColorSet colors, Region rgnDirty);
    private void Paint_ScrollArea(Graphics g, JetPopupMenuColorSet colors);
    private void Paint_SpareArea(Graphics g, JetPopupMenuColorSet colors);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void SetLayout(LayoutResult layout);
    public sealed virtual bool get_AutoActivate();
    public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual ISimpleSignal get_WantsResize();
    public sealed virtual bool OnKeyDownHighPriority(KeyEventArgs args);
    public sealed virtual bool OnKeyDownLowPriority(KeyEventArgs args);
    public sealed virtual bool OnKeyPressLowPriority(KeyPressEventArgs args);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__17(ItemIndexEventArgs args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__18(PropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__1a(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__1b(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__1c();
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__1d(PropertyChangedEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__1e(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_Document>b__1f(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private JetPopupMenuItem <InitDataFlow_EnableKeyboardTooltips>b__23(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_ItemViews>b__2f();
    [CompilerGeneratedAttribute]
private JetPopupMenuItem <InitDataFlow_ExpandOnHover>b__32(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <InitDataFlow_ExpandOnHover>b__34(PropertyChangedEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private static void <InitDataFlow_Logging>b__37(PropertyChangedEventArgs`1<int> args);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuNormalItemView : JetPopupMenuItemView {
    private IThemedIconManager myThemedIconManager;
    protected Rectangle RDisplayName;
    protected Rectangle RIcon;
    protected Rectangle RIconPlace;
    protected Rectangle RSelectionBody;
    protected Rectangle RSelectionBorderLeft;
    protected Rectangle RSelectionBorderLower;
    protected Rectangle RSelectionBorderRight;
    protected Rectangle RSelectionBorderUpper;
    protected Rectangle RShortcutText;
    protected Rectangle RTailGlyph;
    protected Rectangle RTailGlyphSeparatorHot;
    protected Rectangle RTailGlyphSeparatorCold;
    protected Rectangle RTailGlyphSeparatedSelectionBody;
    protected bool myIsIconFit;
    private Size[] myCache_LayoutBottomUp_ResultCells;
    private Size[] myCache_LayoutTopDown_InputCells;
    protected static Padding IconCellPadding { get; }
    protected static Padding LabelCellPadding { get; }
    protected static Padding LabelCellPadding_TextPart { get; }
    protected static Padding LabelCellPadding_AroundPartsToFullSell { get; }
    public JetPopupMenuNormalItemView(JetPopupMenuItem item, RenderParams renderParamsShared, IThemedIconManager themedIconManager);
    protected static Padding get_IconCellPadding();
    protected static Padding get_LabelCellPadding();
    protected static Padding get_LabelCellPadding_TextPart();
    protected static Padding get_LabelCellPadding_AroundPartsToFullSell();
    protected Size GetIconConstrainedSize();
    public virtual JetPopupMenuItemViewHitTestResult HitTest(Point pt);
    public virtual Size[] LayoutBottomUp(IGraphicsContainer gc);
    public virtual Size LayoutTopDown(Size[] cells, IGraphicsContainer gc);
    protected virtual void PaintWithUpperMargin(Graphics g, JetPopupMenuColorSet colors, JetPopupMenuItemViewPresentationFlags flags, IJetPopupMenuItemAdorner adorner);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuSeparatorItemView : JetPopupMenuItemView {
    protected Rectangle RNonGradientAboveSep;
    protected Rectangle RNonGradientLefty;
    protected Rectangle RSeparatorBody;
    public JetPopupMenuSeparatorItemView(JetPopupMenuItem item, RenderParams renderParamsShared);
    public virtual Size[] LayoutBottomUp(IGraphicsContainer gc);
    public virtual Size LayoutTopDown(Size[] cells, IGraphicsContainer gc);
    protected virtual void PaintWithUpperMargin(Graphics g, JetPopupMenuColorSet colors, JetPopupMenuItemViewPresentationFlags flags, IJetPopupMenuItemAdorner adorner);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuTitleView : SafePanel {
    protected Control myControlExtension;
    [NotNullAttribute]
protected TextBox myEditboxQuickSearch;
    [NotNullAttribute]
protected static IconId myIconQuickSearch;
    [NotNullAttribute]
protected JetPopupMenuView myMenuView;
    private ITheming myTheming;
    protected Point myMouseLocation;
    protected LayoutRects myRects;
    protected QuickSearchEditboxStates myStateQuickSearch;
    [NotNullAttribute]
protected JetPopupMenuToolbarView myToolbar;
    private ISimpleSignal myWantsResize;
    public Property`1<bool> IsEditboxChangingColor;
    [CompilerGeneratedAttribute]
private static Func`2<IWindowlessControl, IProperty`1<bool>> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<IWindowlessControl, IProperty`1<bool>> CS$<>9__CachedAnonymousMethodDelegate11;
    public JetPopupMenuDoc Document { get; }
    public Control ExtensionControl { get; public set; }
    public JetPopupMenuView MenuView { get; }
    public TextBox QuickSearchEditbox { get; }
    [NotNullAttribute]
public JetPopupMenuToolbarView Toolbar { get; }
    internal JetPopupMenuColorSet Colors { get; }
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public JetPopupMenuTitleView(Lifetime lifetime, JetPopupMenuView menuview, ITheming theming, IUIApplicationSimple uiapp);
    private static JetPopupMenuTitleView();
    public JetPopupMenuDoc get_Document();
    public Control get_ExtensionControl();
    public void set_ExtensionControl(Control value);
    public JetPopupMenuView get_MenuView();
    public TextBox get_QuickSearchEditbox();
    public JetPopupMenuToolbarView get_Toolbar();
    protected static Double[] FitLength(int total, Double[] items);
    protected void InitControls(Lifetime lifetime, IUIApplicationSimple uiapp);
    protected Size LayoutBottomUp(IGraphicsContainer gc, Size sizeLimit);
    protected Size LayoutBottomUp_FirstLine(IGraphicsContainer gc, Size sizeLimit);
    protected Size LayoutBottomUp_SecondLine(IGraphicsContainer gc, Size sizeLimit);
    protected void LayoutTopDown(IGraphicsContainer gc, Size sizeAvail);
    protected void LayoutTopDown_FirstLine(IGraphicsContainer gc, Rectangle rectAvail);
    protected void LayoutTopDown_SecondLine(IGraphicsContainer gc, Rectangle rectAvail);
    protected void OnControlExtensionSizeChanged(object sender, EventArgs e);
    protected void OnControlExtensionVisibleChanged(object sender, EventArgs e);
    protected void OnEditboxQuickSearchTextChanged(object sender, EventArgs e);
    protected void Paint(Graphics g);
    protected void UpdateEditboxColor();
    protected void UpdateQuickSearchState();
    internal JetPopupMenuColorSet get_Colors();
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void WndProc(Message& m);
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void SetLayout(LayoutResult layout);
    public sealed virtual bool get_AutoActivate();
    public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual ISimpleSignal get_WantsResize();
    public sealed virtual bool OnKeyDownHighPriority(KeyEventArgs args);
    public sealed virtual bool OnKeyDownLowPriority(KeyEventArgs args);
    public sealed virtual bool OnKeyPressLowPriority(KeyPressEventArgs args);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(Lifetime lifetimeIsChanging);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime lifetimeIsChanging);
    [CompilerGeneratedAttribute]
private void <InitControls>b__9();
    [CompilerGeneratedAttribute]
private void <InitControls>b__a();
    [CompilerGeneratedAttribute]
private void <InitControls>b__b();
    [CompilerGeneratedAttribute]
private void <InitControls>b__c(BeforePropertyChangedEventArgs`1<string> a);
    [CompilerGeneratedAttribute]
private static IProperty`1<bool> <InitControls>b__d(IWindowlessControl arg);
    [CompilerGeneratedAttribute]
private static IProperty`1<bool> <InitControls>b__e(IWindowlessControl arg);
    [CompilerGeneratedAttribute]
private void <InitControls>b__f();
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarItemView : object {
    protected Rectangle RPresentation;
    protected Rectangle RPresentationPlace;
    protected Rectangle[] RRSelectionBorder;
    protected Rectangle RSelectionBody;
    protected Rectangle RTotal;
    [NotNullAttribute]
protected IToolBarItemInfo myExternalInfo;
    [NotNullAttribute]
protected Keys[] myShortcuts;
    [NotNullAttribute]
protected RichText myShortcutText;
    [NotNullAttribute]
protected JetPopupMenuToolbarView myToolbar;
    [NotNullAttribute]
protected RichText myTooltipText;
    [NotNullAttribute]
protected RichText myTooltipTextWithShortcut;
    private Rectangle myBounds;
    [NotNullAttribute]
private ISimpleSignal myGottenDirty;
    [NotNullAttribute]
private ISimpleSignal myWantsResize;
    public Property`1<bool> IsSelected;
    private ITheming myTheming;
    [CompilerGeneratedAttribute]
private bool <AutoActivate>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Keys, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public IToolBarItemInfo ExternalInfo { get; }
    public Keys[] Shortcuts { get; }
    [NotNullAttribute]
public RichText ShortcutText { get; }
    [NotNullAttribute]
public JetPopupMenuToolbarView Toolbar { get; }
    [NotNullAttribute]
public RichText TooltipText { get; }
    [NotNullAttribute]
public RichText TooltipTextWithShortcut { get; }
    public bool AutoActivate { get; public set; }
    public Rectangle Bounds { get; }
    public ISimpleSignal GottenDirty { get; }
    public ISimpleSignal WantsResize { get; }
    public JetPopupMenuToolbarItemView(Lifetime lifetime, JetPopupMenuToolbarView toolbar, IToolBarItemInfo externalinfo, ITheming theming);
    public IToolBarItemInfo get_ExternalInfo();
    public Keys[] get_Shortcuts();
    public RichText get_ShortcutText();
    public JetPopupMenuToolbarView get_Toolbar();
    public RichText get_TooltipText();
    public RichText get_TooltipTextWithShortcut();
    public bool Execute();
    public int HitTestHorizontal(int x);
    protected void InitShortcuts();
    private void InitDataFlow(Lifetime lifetime);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void Paint(Graphics g);
    public sealed virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
    public sealed virtual void SetLayout(LayoutResult layout);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoActivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual Rectangle get_Bounds();
    public sealed virtual ISimpleSignal get_GottenDirty();
    public sealed virtual ISimpleSignal get_WantsResize();
    [CompilerGeneratedAttribute]
private static string <InitShortcuts>b__0(Keys k);
    [CompilerGeneratedAttribute]
private bool <InitDataFlow>b__2(JetPopupMenuToolbarItemView value);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuToolbarView : object {
    protected RenderParams myToolbarRenderParams;
    protected Dictionary`2<Keys, JetPopupMenuToolbarItemView> myMapKeysToItems;
    protected JetPopupMenuView myMenuView;
    private Rectangle myBounds;
    [NotNullAttribute]
private ISimpleSignal myGottenDirty;
    private ListEvents`1<JetPopupMenuToolbarItemView> myItemViews;
    [NotNullAttribute]
private ISimpleSignal myWantsResize;
    public Property`1<int> SelectedIndex;
    public Property`1<JetPopupMenuToolbarItemView> SelectedItem;
    [CompilerGeneratedAttribute]
private bool <AutoActivate>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<PropertyChangedEventArgs`1<int>> CS$<>9__CachedAnonymousMethodDelegate9;
    public RenderParams ToolbarRenderParams { get; }
    [NotNullAttribute]
public IListEvents`1<JetPopupMenuToolbarItemView> ItemViews { get; }
    [NotNullAttribute]
public IListEvents`1<IToolBarItemInfo> Items { get; }
    public JetPopupMenuView MenuView { get; }
    public bool AutoActivate { get; public set; }
    public Rectangle Bounds { get; }
    public ISimpleSignal GottenDirty { get; }
    public ISimpleSignal WantsResize { get; }
    public JetPopupMenuToolbarView(Lifetime lifetime, JetPopupMenuView menuview, IUIApplicationSimple uiapp);
    public RenderParams get_ToolbarRenderParams();
    public IListEvents`1<JetPopupMenuToolbarItemView> get_ItemViews();
    public IListEvents`1<IToolBarItemInfo> get_Items();
    public JetPopupMenuView get_MenuView();
    public bool ExecuteSelectedItem();
    public void OnKeyDown(KeyEventArgs e);
    public void OnMouseLeave(EventArgs e);
    public void OnMouseMove(MouseEventArgs e);
    protected int GetHitItemIndex(Point pt);
    private void InitDataFlow(Lifetime lifetime, IUIApplicationSimple uiapp);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void Paint(Graphics g);
    public sealed virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
    public sealed virtual void SetLayout(LayoutResult layout);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoActivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual Rectangle get_Bounds();
    public sealed virtual ISimpleSignal get_GottenDirty();
    public sealed virtual ISimpleSignal get_WantsResize();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__2(Lifetime lifeView, JetPopupMenuToolbarItemView view);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__3(AddRemoveIndexEventArgs`1<JetPopupMenuToolbarItemView> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__4(AddRemoveIndexEventArgs`1<JetPopupMenuToolbarItemView> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__5(BeforePropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__6(AddRemoveIndexEventArgs`1<JetPopupMenuToolbarItemView> param0);
    [CompilerGeneratedAttribute]
private static void <InitDataFlow>b__7(PropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private JetPopupMenuToolbarItemView <InitDataFlow>b__8(int value);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuView : Form {
    protected internal static bool myOptionEnableMovingArrows;
    protected internal static bool myOptionHollowDisabledScrollArrows;
    protected internal static bool OptionTransparencyAlwaysOff;
    protected internal static bool OptionTransparencyAlwaysOn;
    protected RenderParams myTransparentBackRenderParams;
    public IProperty`1<IWindowlessControl> Caption;
    public IProperty`1<bool> CaptureMouseInitially;
    protected bool myAutoActivate;
    [NotNullAttribute]
protected JetPopupMenuColorSet myColors;
    [NotNullAttribute]
protected JetPopupMenuDoc myDocument;
    private IWin32Window myOwnerwin;
    private ITheming myTheming;
    protected bool myDropShadowEnabled;
    [NotNullAttribute]
protected JetPopupMenuMainpartView myMainpart;
    protected LayoutRects myRects;
    protected Shadoof myShadows;
    [NotNullAttribute]
protected List`1<Rectangle> myShape;
    [NotNullAttribute]
protected JetPopupMenuTitleView myTitle;
    protected Anchoring2D myTitleDisposition;
    protected bool myTransparency;
    private ISimpleSignal myWantsResize;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate11;
    public RenderParams TransparentBackRenderParams { get; }
    public Anchoring2D Disposition { get; }
    public JetPopupMenuDoc Document { get; }
    public JetPopupMenuMainpartView Mainpart { get; }
    public JetPopupMenuTitleView Title { get; }
    protected Size ShadowSize { get; }
    internal JetPopupMenuColorSet Colors { get; }
    protected CreateParams CreateParams { get; }
    protected bool ShowWithoutActivation { get; }
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public static Point CaptionLocation { get; }
    public JetPopupMenuView(LifetimeDefinition lifetimeDefinition, JetPopupMenuDoc document, ITooltipManager tooltipman, ISettingsStore settings, IWin32Window ownerwin, IWindowsHookManager windowsHookManager, ITheming theming, IUIApplicationSimple uiapp);
    private static JetPopupMenuView();
    public RenderParams get_TransparentBackRenderParams();
    public Anchoring2D get_Disposition();
    public JetPopupMenuDoc get_Document();
    public JetPopupMenuMainpartView get_Mainpart();
    public JetPopupMenuTitleView get_Title();
    protected void InitControls();
    protected Size LayoutBottomUp(IGraphicsContainer gc, Size sizeLimit);
    protected void LayoutTopDown(IGraphicsContainer gc);
    protected void Paint(Graphics g, JetPopupMenuColorSet colors, Region rgnDirty);
    protected Size get_ShadowSize();
    protected void UpdateShape();
    internal JetPopupMenuColorSet get_Colors();
    private void InitDataFlow(Lifetime lifetime);
    private void InitTrace(Lifetime lifetime);
    protected virtual void OnKeyDown(KeyEventArgs args);
    protected virtual void OnKeyPress(KeyPressEventArgs args);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnLocationChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
    protected virtual CreateParams get_CreateParams();
    protected virtual bool get_ShowWithoutActivation();
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void SetLayout(LayoutResult layout);
    public sealed virtual bool get_AutoActivate();
    public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual ISimpleSignal get_WantsResize();
    [NotNullAttribute]
public RenderParams FillRenderParamsDefaults(RenderParams renderParams);
    public static Point get_CaptionLocation();
    [CompilerGeneratedAttribute]
private static bool <InitDataFlow>b__6(int index);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__7(int index);
    [CompilerGeneratedAttribute]
private static bool <InitDataFlow>b__8(int index);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__9(int index);
    [CompilerGeneratedAttribute]
private static void <InitTrace>b__c();
    [CompilerGeneratedAttribute]
private static void <InitTrace>b__d();
    [CompilerGeneratedAttribute]
private static void <InitTrace>b__e();
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.JetPopupMenuViewHierarchy : object {
    private ListEvents`1<Tuple`2<LifetimeDefinition, JetPopupMenuView>> myViews;
    [CompilerGeneratedAttribute]
private static Action`2<Lifetime, Tuple`2<LifetimeDefinition, JetPopupMenuView>> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Action`1<AddRemoveIndexEventArgs`1<Tuple`2<LifetimeDefinition, JetPopupMenuView>>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Action`1<AddRemoveIndexEventArgs`1<Tuple`2<LifetimeDefinition, JetPopupMenuView>>> CS$<>9__CachedAnonymousMethodDelegateb;
    public JetPopupMenuViewHierarchy(LifetimeDefinition lifetimeDefinition, JetPopupMenuView menuviewRoot);
    public void AddChildMenu(LifetimeDefinition defMenu, JetPopupMenuView menuview);
    public void CloseAll();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(Lifetime lifeMenuInList, Tuple`2<LifetimeDefinition, JetPopupMenuView> menu);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__4(AddRemoveIndexEventArgs`1<Tuple`2<LifetimeDefinition, JetPopupMenuView>> args);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__5(AddRemoveIndexEventArgs`1<Tuple`2<LifetimeDefinition, JetPopupMenuView>> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6(Lifetime lifeMenuInList, Tuple`2<LifetimeDefinition, JetPopupMenuView> menu);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.Impl.Shadoof : NativeWindow {
    protected static Int32[0...,0...] myColorsShadowCorner;
    protected static Int32[0...,0...] myColorsShadowLine;
    protected static Bitmap myBmpShadowCornerLeftBottom;
    protected static Bitmap myBmpShadowCornerRightBottom;
    protected static Bitmap myBmpShadowCornerRightTop;
    protected static Bitmap myBmpShadowHorizontal;
    protected static Bitmap myBmpShadowVertical;
    protected Point myLocation;
    protected List`1<Rectangle> myRects;
    private Lifetime myLifetime;
    private SimpleSignal UpdateRequested;
    private SimpleSignal UpdateRequired;
    public Property`1<bool> IsVisible;
    [CompilerGeneratedAttribute]
private static Comparison`1<Rectangle> CS$<>9__CachedAnonymousMethodDelegate7;
    public static int ShadowThickness { get; }
    public Point Location { get; public set; }
    public List`1<Rectangle> Rectangles { get; public set; }
    public Shadoof(Lifetime lifetime);
    private static Shadoof();
    public static int get_ShadowThickness();
    public Point get_Location();
    public void set_Location(Point value);
    public List`1<Rectangle> get_Rectangles();
    public void set_Rectangles(List`1<Rectangle> value);
    public void Adjust(Point location, List`1<Rectangle> rects);
    protected static void AttachShadowHorizontal(Graphics g, Rectangle bounds);
    protected static void AttachShadowVertical(Graphics g, Rectangle bounds);
    protected static void CreateBitmaps();
    protected static void FillShadowHorizontal(Graphics g, Rectangle bounds);
    protected static void FillShadowVertical(Graphics g, Rectangle bounds);
    protected static void OptimizeRectangles(List`1<Rectangle> rects);
    protected static void Update_Multiple_Junction(Graphics g, Rectangle rectUpper, Rectangle rectLower);
    protected static void Update_Multiple_Junction_Left(Graphics g, Rectangle rectUpper, Rectangle rectLower);
    protected static void Update_Multiple_Junction_Right(Graphics g, Rectangle rectUpper, Rectangle rectLower);
    protected void CheckCreateWindow();
    protected bool SetLocation(Point value);
    protected bool SetRectangles(List`1<Rectangle> value);
    protected void Update();
    protected Size Update_GetSize();
    protected void Update_Multiple(Graphics g);
    protected void Update_Single(Graphics g);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private static int <OptimizeRectangles>b__6(Rectangle x, Rectangle y);
    [CompilerGeneratedAttribute]
private void <Update>b__8(Graphics g);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.JetPopupMenuOverlordView : object {
    private LifetimeDefinition myDefShowView;
    private PopupFormController myPopupWindow;
    private JetPopupMenuViewHierarchy myHierarchy;
    [CompilerGeneratedAttribute]
private JetPopupMenuView <MenuView>k__BackingField;
    public JetPopupMenuView MenuView { get; private set; }
    public JetPopupMenuOverlordView(LifetimeDefinition defShowView, JetPopupMenu menu, IWin32Window ownerWindow, ITooltipManager tooltipManager, ISettingsStore settingsStore, IWindowsHookManager windowsHookManager, PopupWindowManager popupWindowManager, IUIApplicationSimple uiApp, IIsApplicationActiveState isApplicationActiveState, IAutomationViewsRegistry automationViewsRegistry, JetPopupMenuOverlordView parent);
    [CompilerGeneratedAttribute]
public JetPopupMenuView get_MenuView();
    [CompilerGeneratedAttribute]
private void set_MenuView(JetPopupMenuView value);
    public sealed virtual void Show(bool isModal);
    [CompilerGeneratedAttribute]
private bool <Show>b__b();
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.JetPopupMenusInteractive : JetPopupMenus {
    private IAutomationViewsRegistry myAutomationViewsRegistry;
    private PopupWindowManager myPopupWindowManager;
    protected IWin32Window Ownerwin;
    public JetPopupMenusInteractive(Lifetime lifetime, IIsApplicationActiveState isApplicationActiveState, IUIApplicationSimple uiapp, IAutomationViewsRegistry automationViewsRegistry, ITooltipManager tooltipman, IWin32Window ownerwin, IWindowsHookManager windowsHookManager, ISettingsStore settstore, PopupWindowManager popupWindowManager);
    [NotNullAttribute]
public static IPopupWindowContext GetOrCreatePopupWindowContext(Lifetime lifetime, JetPopupMenu menu, IWindowsHookManager windowsHookManager, IWin32Window ownerwin);
    protected virtual IJetPopupMenuOverlordView CreateView(LifetimeDefinition defShowView, JetPopupMenu menu, IJetPopupMenuOverlordView parentView);
    protected virtual void ShowNoItemsBanner(JetPopupMenu menu);
}
public class JetBrains.UI.SrcView.Controls.JetPopupMenu.JetPopupMenuStatusAndViewDef : ValueType {
    [CanBeNullAttribute]
public LifetimeDefinition ViewLifetimeDefinition;
    public JetPopupMenuStatus Status;
    public JetPopupMenuStatusAndViewDef(LifetimeDefinition viewLifetimeDefinition, JetPopupMenuStatus status);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.MemoryUsageIndicatorContentView : ViewControl`1<MemoryUsageIndicatorContentAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<string, RichText> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<EitherColor, SolidColorBrush> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Visibility> CS$<>9__CachedAnonymousMethodDelegate5;
    protected virtual UIElement OnRenderView(Lifetime lifetime, MemoryUsageIndicatorContentAutomation automation);
    [CompilerGeneratedAttribute]
private static RichText <OnRenderView>b__0(string arg);
    [CompilerGeneratedAttribute]
private static SolidColorBrush <OnRenderView>b__1(EitherColor either);
    [CompilerGeneratedAttribute]
private static Visibility <OnRenderView>b__2(bool b);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.MemoryUsageIndicatorContentWindowlessControl : RichTextTipPainter {
    private MemoryUsageIndicatorContentAutomation myAutomation;
    [CompilerGeneratedAttribute]
private static Func`2<string, RichTextBlock> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`4<EitherColor, EitherColor, bool, RenderParams> CS$<>9__CachedAnonymousMethodDelegate4;
    public MemoryUsageIndicatorContentWindowlessControl(Lifetime lifetime, MemoryUsageIndicatorContentAutomation automation, ITheming theming);
    private sealed virtual override ITooltipInfo JetBrains.Application.UI.Tooltips.ITooltipProvider.GetTooltip(Lifetime lifetime, Point point);
    [CompilerGeneratedAttribute]
private static RichTextBlock <.ctor>b__1(string arg);
    [CompilerGeneratedAttribute]
private static RenderParams <.ctor>b__2(EitherColor colorForeground, EitherColor colorBackground, bool isEnabled);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.PresentableItemView : ViewControl`1<PresentableItemAutomation> {
    private static void AddGap(StackPanel stack);
    private static RichText EmbedTextOverrides(RichText richtextOriginal, RenderParams renderparams);
    private static InlineUIContainer InlineImage(PresentableItemImage pii);
    protected virtual UIElement OnRenderView(Lifetime lifetime, PresentableItemAutomation automation);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.PresentableItemWindowlessControl : PresentableItemTipPainter {
    public PresentableItemWindowlessControl(PresentableItemAutomation automation, IThemedIconManager themedIconManager);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.RichTextWindowlessControl : RichTextTipPainter {
    public RichTextWindowlessControl(Lifetime lifetime, RichTextAutomation automation);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.RichTextWithProgressWindowlessControl : RichTextWithProgressTipPainter {
    public RichTextWithProgressWindowlessControl(Lifetime lifetime, RichTextWithProgressAutomation automation);
}
public class JetBrains.UI.SrcView.Controls.ShadowChrome : Decorator {
    private static SolidColorBrush backgroundBrush;
    private static LinearGradientBrush rightBrush;
    private static LinearGradientBrush bottomBrush;
    private static RadialGradientBrush bottomRightBrush;
    private static RadialGradientBrush topRightBrush;
    private static RadialGradientBrush bottomLeftBrush;
    private static ShadowChrome();
    protected virtual void OnRender(DrawingContext drawingContext);
    private static void CreateBrushes();
}
public class JetBrains.UI.SrcView.Controls.SlidingPanel : Decorator {
    public static DependencyProperty VisibleProperty;
    private RectangleGeometry myClipGeometry;
    public static DependencyProperty VisiblePercentProperty;
    public static DependencyProperty AnimationSpeedProperty;
    public static DependencyProperty AnimationDurationProperty;
    public UIElement Child { get; public set; }
    private Decorator Decorator { get; }
    public bool Visible { get; public set; }
    public double VisiblePercent { get; public set; }
    public double AnimationSpeed { get; public set; }
    public Duration AnimationDuration { get; public set; }
    private static SlidingPanel();
    private static void VisiblePropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public virtual UIElement get_Child();
    public virtual void set_Child(UIElement value);
    private Decorator get_Decorator();
    private void AnimatePercentTo(double value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public double get_VisiblePercent();
    public void set_VisiblePercent(double value);
    public double get_AnimationSpeed();
    public void set_AnimationSpeed(double value);
    public Duration get_AnimationDuration();
    public void set_AnimationDuration(Duration value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.SpinningTrefoilView : ViewControl`1<SpinningTrefoilAutomation> {
    internal static float myAngularSpeed;
    internal static float myInnerRadius;
    internal static float myMiddleRadius;
    internal static float myOuterRadius;
    internal static UInt32 mySpinPeriod;
    private static SolidColorBrush FillBack;
    private static SolidColorBrush FillForeCold;
    private static SolidColorBrush FillForeHot;
    private static Size UnscaledFigureSize;
    [CompilerGeneratedAttribute]
private static Func`3<bool, bool, Brush> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`3<bool, bool, Brush> CS$<>9__CachedAnonymousMethodDelegatea;
    private static SpinningTrefoilView();
    private static Path CreateFigure();
    private static PathGeometry DrawFoil(Point ptCenter, double fStartAngle, double fSweepAngle, double fInnerRadius, double fOuterRadius);
    protected virtual UIElement OnRenderView(Lifetime lifetime, SpinningTrefoilAutomation automation);
    [CompilerGeneratedAttribute]
private static Brush <OnRenderView>b__5(bool isHot, bool isInv);
    [CompilerGeneratedAttribute]
private static Brush <OnRenderView>b__6(bool isHot, bool isInv);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.SpinningTrefoilWindowlessControl : object {
    protected static Brush myBrushBack;
    protected static Brush myBrushForeCold;
    protected static Brush myBrushForeHot;
    protected Timer myTimer;
    private SpinningTrefoilAutomation myAutomation;
    private Rectangle myBounds;
    private SimpleSignal myGottenDirty;
    private ISimpleSignal myWantsResize;
    [CompilerGeneratedAttribute]
private bool <JetBrains.Application.UI.Controls.IConstrainableControl.AutoActivate>k__BackingField;
    private bool JetBrains.Application.UI.Controls.IConstrainableControl.AutoActivate { get; private set; }
    private Rectangle JetBrains.Application.UI.Controls.IWindowlessControl.Bounds { get; }
    private ISimpleSignal JetBrains.Application.UI.Controls.IWindowlessControl.GottenDirty { get; }
    private ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.WantsResize { get; }
    public SpinningTrefoilWindowlessControl(Lifetime lifetime, SpinningTrefoilAutomation automation);
    private static SpinningTrefoilWindowlessControl();
    protected static void DrawFoil(Graphics g, Brush brush, PointF ptCenter, float fStartAngle, float fSweepAngle, float fInnerRadius, float fThickness);
    protected static void PaintImpl(Graphics g, Rectangle rectangle, SpinningTrefoilAutomation automation);
    private sealed virtual override ITooltipInfo JetBrains.Application.UI.Tooltips.ITooltipProvider.GetTooltip(Lifetime lifetime, Point point);
    private sealed virtual override Size JetBrains.Application.UI.Controls.IConstrainableControl.GetDesiredSize(IGraphicsContainer gc, Size limit);
    private sealed virtual override void JetBrains.Application.UI.Controls.IWindowlessControl.Paint(Graphics g);
    private sealed virtual override void JetBrains.Application.UI.Controls.IWindowlessControl.SetBounds(IGraphicsContainer gc, Rectangle bounds);
    private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.SetLayout(LayoutResult layout);
    [CompilerGeneratedAttribute]
private sealed virtual override bool JetBrains.Application.UI.Controls.IConstrainableControl.get_AutoActivate();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.set_AutoActivate(bool value);
    private sealed virtual override Rectangle JetBrains.Application.UI.Controls.IWindowlessControl.get_Bounds();
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Controls.IWindowlessControl.get_GottenDirty();
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.get_WantsResize();
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.StaticBitmapWindowlessControl : BitmapWindowlessControl {
    public StaticBitmapWindowlessControl(StaticBitmapAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentView : ViewControl`1<StatusBarProgressIndicatorContentAutomation> {
    private static DependencyProperty ProgressValueProperty;
    private static StatusBarProgressIndicatorContentView();
    private static Path CreateProgressBar(Lifetime lifetime, StatusBarProgressIndicatorContentAutomation automation);
    private static FrameworkElement CreateTextLabel(Lifetime lifetime, StatusBarProgressIndicatorContentAutomation automation);
    protected virtual UIElement OnRenderView(Lifetime lifetime, StatusBarProgressIndicatorContentAutomation automation);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Controls.StatusBarProgressIndicatorContentWindowlessControl : object {
    internal static int GapAroundText;
    internal static int GapIconProgress;
    private static int SizeAdaptationStep;
    private static int TicksBeforeChangingImmediateSize;
    private StatusBarProgressIndicatorContentAutomation myAutomation;
    private Rectangle myBounds;
    private IWindowBranding myBranding;
    private Property`1<Size> myDesiredSize;
    private Property`1<Size> myDesiredSizeImmediate;
    private SimpleSignal myGottenDirty;
    private ILogger myLogger;
    private RenderParams myRenderParams;
    private ITheming myTheming;
    private int myTicksAfterDesiredSizeChanged;
    private Timer myTimerAdjustDesiredSize;
    private ISimpleSignal myWantsResize;
    private bool JetBrains.Application.UI.Controls.IConstrainableControl.AutoActivate { get; private set; }
    private Rectangle JetBrains.Application.UI.Controls.IWindowlessControl.Bounds { get; }
    private ISimpleSignal JetBrains.Application.UI.Controls.IWindowlessControl.GottenDirty { get; }
    private ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.WantsResize { get; }
    public StatusBarProgressIndicatorContentWindowlessControl(Lifetime lifetime, StatusBarProgressIndicatorContentAutomation automation, ITheming theming, IUIApplication application, ILogger logger);
    private static StatusBarProgressIndicatorContentWindowlessControl();
    protected void OnUpdateDesiredSize(IThemedIconManager thicman);
    [NotNullAttribute]
private RichText GetCurrentHeaderRichText();
    private void InitDataFlow(Lifetime lifetime, StatusBarProgressIndicatorContentAutomation automation, IThemedIconManager thicman);
    private void OnTimerAdjustDesiredSize();
    private sealed virtual override ITooltipInfo JetBrains.Application.UI.Tooltips.ITooltipProvider.GetTooltip(Lifetime lifetime, Point point);
    private sealed virtual override Size JetBrains.Application.UI.Controls.IConstrainableControl.GetDesiredSize(IGraphicsContainer gc, Size limit);
    private sealed virtual override void JetBrains.Application.UI.Controls.IWindowlessControl.Paint(Graphics g);
    private sealed virtual override void JetBrains.Application.UI.Controls.IWindowlessControl.SetBounds(IGraphicsContainer gc, Rectangle bounds);
    private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.SetLayout(LayoutResult layout);
    private sealed virtual override bool JetBrains.Application.UI.Controls.IConstrainableControl.get_AutoActivate();
    private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.set_AutoActivate(bool value);
    private sealed virtual override Rectangle JetBrains.Application.UI.Controls.IWindowlessControl.get_Bounds();
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Controls.IWindowlessControl.get_GottenDirty();
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.get_WantsResize();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(PropertyChangedEventArgs`1<EitherColor> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__5();
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.StringCollectionEdit.Buttons.ButtonView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.StringCollectionEdit.Buttons.DefaultButtonProviderView : ViewControl`1<ButtonProviderBase> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ButtonProviderBase automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.StringCollectionEdit.PairStringCollectionEditView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.StringCollectionEdit.StringCollectionEditView : UserControl {
    internal TreeGridView TreeView;
    private bool _contentLoaded;
    private void MouseDoubleClickHandler(object sender, MouseButtonEventArgs e);
    private void KeyDownHandler(object sender, KeyEventArgs e);
    private void LoadedHandler(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Controls.UiCommandView : ViewControl`1<UiCommandAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<RichText, RichText> CS$<>9__CachedAnonymousMethodDelegate1;
    public static UIElement RenderView(Lifetime lifetime, UiCommandAutomation automation);
    protected virtual UIElement OnRenderView(Lifetime lifetime, UiCommandAutomation automation);
    [CompilerGeneratedAttribute]
private static RichText <RenderView>b__0(RichText text);
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.ActionSystemUIPlayground : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionAutomationMockBase : object {
    private bool myHasItems;
    private ListEvents`1<IActionAutomation> myActions;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private Property`1<object> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <ShowHeaderAlways>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Shortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsVisible>k__BackingField;
    public Property`1<object> Icon { get; private set; }
    public Property`1<object> Header { get; private set; }
    public Property`1<bool> ShowHeaderAlways { get; private set; }
    public Property`1<object> ToolTip { get; private set; }
    public Property`1<object> Shortcut { get; private set; }
    public Property`1<bool> IsEnabled { get; private set; }
    public Property`1<bool> IsVisible { get; private set; }
    public IListEvents`1<IActionAutomation> Items { get; }
    public ActionAutomationMockBase(bool enabled, bool hasItems, bool showTextAlways);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_ShowHeaderAlways();
    [CompilerGeneratedAttribute]
private void set_ShowHeaderAlways(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_ToolTip();
    [CompilerGeneratedAttribute]
private void set_ToolTip(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Shortcut();
    [CompilerGeneratedAttribute]
private void set_Shortcut(Property`1<object> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsVisible();
    [CompilerGeneratedAttribute]
private void set_IsVisible(Property`1<bool> value);
    public sealed virtual IListEvents`1<IActionAutomation> get_Items();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionAutomationMocks : object {
    private static Object[] ourActions;
    public static Object[] Sample { get; }
    private static ActionAutomationMocks();
    public static Object[] get_Sample();
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionCheckableAutomationMock : ActionExecutableAutomationMock {
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsChecked>k__BackingField;
    public Property`1<bool> IsChecked { get; private set; }
    public ActionCheckableAutomationMock(bool enabled, bool ischecked, bool hasItems);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
private void set_IsChecked(Property`1<bool> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6();
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionCustomAutomationMock : ActionAutomationMockBase {
    [CompilerGeneratedAttribute]
private Property`1<object> <Content>k__BackingField;
    public Property`1<object> Content { get; private set; }
    public ActionCustomAutomationMock(bool enabled, bool hasItems, bool showTextAlways);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(Property`1<object> value);
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionExecutableAutomationMock : ActionAutomationMockBase {
    [CompilerGeneratedAttribute]
private ICommand <Execute>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate2;
    public ICommand Execute { get; protected set; }
    public ActionExecutableAutomationMock(bool enabled, bool hasItems, bool nullIcon, bool nullText, bool showTextAlways);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_Execute();
    [CompilerGeneratedAttribute]
protected void set_Execute(ICommand value);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0();
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionExecutableGroupAutomationMock : ActionExecutableAutomationMock {
    public ActionExecutableGroupAutomationMock(bool enabled, bool nullIcon, bool nullText, bool showTextAlways);
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionGroupAutomationMock : ActionAutomationMockBase {
    public ActionGroupAutomationMock(bool enabled, bool hasItems);
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.ActionSeparatorAutomationMockMock : ActionAutomationMockBase {
}
public class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.CustomViewModelMock : object {
}
internal class JetBrains.UI.SrcView.ControlShowcase.ActionSystem.Mocks.MockUtils : object {
    private static Random random;
    private static MockUtils();
    public static string GetRandomLetter();
    public static bool GetRandomBool();
    public static string GetRandomShortcut();
    public static string GetRandomWord(int length);
}
[ToolWindowDescriptorAttribute]
public class JetBrains.UI.SrcView.ControlShowcase.ControlShowcaseToolWindow : ToolWindowDescriptor {
    public ControlShowcaseToolWindow(IApplicationHost host);
}
public class JetBrains.UI.SrcView.ControlShowcase.ControlShowcaseView : UserControl {
    private TreeGridColumnDefinitionCollection myTreeColumnDefinitions;
    private ObservableCollection`1<object> myTreeItemsSource;
    internal ComboBox ComboBox;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ExtensionManagerViewModel <ExtensionManagerViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<SimpleModel> <SampleItems>k__BackingField;
    public ExtensionManagerViewModel ExtensionManagerViewModel { get; private set; }
    public ObservableCollection`1<SimpleModel> SampleItems { get; private set; }
    public TreeGridColumnDefinitionCollection TreeColumnDefinitions { get; }
    public ObservableCollection`1<object> TreeItemsSource { get; }
    public ControlShowcaseView(Lifetime lifetime, IThreading threading, ITheming theming);
    [CompilerGeneratedAttribute]
public ExtensionManagerViewModel get_ExtensionManagerViewModel();
    [CompilerGeneratedAttribute]
private void set_ExtensionManagerViewModel(ExtensionManagerViewModel value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<SimpleModel> get_SampleItems();
    [CompilerGeneratedAttribute]
private void set_SampleItems(ObservableCollection`1<SimpleModel> value);
    public TreeGridColumnDefinitionCollection get_TreeColumnDefinitions();
    public ObservableCollection`1<object> get_TreeItemsSource();
    private void OnTreeTestAction(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModelProvider : object {
    public ExtensionManagerViewModel Model2 { get; }
    public virtual ExtensionManagerViewModel get_Model2();
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.ExtensionManagerViewModel : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    public ListEvents`1<ExtensionViewModel> myExtensions;
    private TagStorage myTagStorage;
    private GroupingEvent myUpdateCountersGroupingEvent;
    private GroupingEvent myUpdateFilterGroupingEvent;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UIText> <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ExtensionViewModel> <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterCollectionViewModel <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<FilterViewModel> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SearchText>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionEvents`1<SortingViewModel> <Sortings>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<SortingViewModel> <Sorting>k__BackingField;
    [CompilerGeneratedAttribute]
private ListCollectionView <CollectionView>k__BackingField;
    [CompilerGeneratedAttribute]
private TagCollectionViewModel <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private TagCollectionViewModel <SelectedTags>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<ExtensionViewModel, ExtensionViewModel, int> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`3<ExtensionViewModel, ExtensionViewModel, int> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<int, UIText> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<ExtensionViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<int, UIText> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<ExtensionViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    public IProperty`1<bool> IsBusy { get; private set; }
    public IProperty`1<UIText> Title { get; private set; }
    public IProperty`1<ExtensionViewModel> Extension { get; private set; }
    public FilterCollectionViewModel Filters { get; private set; }
    public IProperty`1<FilterViewModel> Filter { get; private set; }
    public IProperty`1<string> SearchText { get; private set; }
    public CollectionEvents`1<SortingViewModel> Sortings { get; private set; }
    public IProperty`1<SortingViewModel> Sorting { get; private set; }
    public ListCollectionView CollectionView { get; private set; }
    public TagCollectionViewModel Tags { get; private set; }
    public TagCollectionViewModel SelectedTags { get; private set; }
    public ExtensionManagerViewModel(Lifetime lifetime, IThreading threading, bool demo);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsBusy();
    [CompilerGeneratedAttribute]
private void set_IsBusy(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<UIText> get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(IProperty`1<UIText> value);
    [CompilerGeneratedAttribute]
public IProperty`1<ExtensionViewModel> get_Extension();
    [CompilerGeneratedAttribute]
private void set_Extension(IProperty`1<ExtensionViewModel> value);
    [CompilerGeneratedAttribute]
public FilterCollectionViewModel get_Filters();
    [CompilerGeneratedAttribute]
private void set_Filters(FilterCollectionViewModel value);
    [CompilerGeneratedAttribute]
public IProperty`1<FilterViewModel> get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(IProperty`1<FilterViewModel> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SearchText();
    [CompilerGeneratedAttribute]
private void set_SearchText(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public CollectionEvents`1<SortingViewModel> get_Sortings();
    [CompilerGeneratedAttribute]
private void set_Sortings(CollectionEvents`1<SortingViewModel> value);
    [CompilerGeneratedAttribute]
public IProperty`1<SortingViewModel> get_Sorting();
    [CompilerGeneratedAttribute]
private void set_Sorting(IProperty`1<SortingViewModel> value);
    [CompilerGeneratedAttribute]
public ListCollectionView get_CollectionView();
    [CompilerGeneratedAttribute]
private void set_CollectionView(ListCollectionView value);
    [CompilerGeneratedAttribute]
public TagCollectionViewModel get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(TagCollectionViewModel value);
    [CompilerGeneratedAttribute]
public TagCollectionViewModel get_SelectedTags();
    [CompilerGeneratedAttribute]
private void set_SelectedTags(TagCollectionViewModel value);
    private void OnSeachTextChanged(PropertyChangedEventArgs`1<string> obj);
    private void UpdateFilter();
    private void UpdateCounters();
    private ICollection`1<SortingViewModel> CreateSortings();
    private ICollection`1<FilterViewModel> CreateFilters();
    public ICollection`1<ExtensionViewModel> GetAllExtensions();
    public TagViewModel RegisterTag(string tagName);
    public void UnregisterTag(string tagName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime l, SortingViewModel m);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(Lifetime l, FilterViewModel m);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private int <.ctor>b__1(object left, object right);
    [CompilerGeneratedAttribute]
private void <UpdateFilter>b__7();
    [CompilerGeneratedAttribute]
private bool <UpdateFilter>b__8(object o);
    [CompilerGeneratedAttribute]
private void <UpdateCounters>b__a();
    [CompilerGeneratedAttribute]
private static int <CreateSortings>b__c(ExtensionViewModel a, ExtensionViewModel b);
    [CompilerGeneratedAttribute]
private static int <CreateSortings>b__d(ExtensionViewModel a, ExtensionViewModel b);
    [CompilerGeneratedAttribute]
private static UIText <CreateFilters>b__10(int count);
    [CompilerGeneratedAttribute]
private static bool <CreateFilters>b__11(ExtensionViewModel extension);
    [CompilerGeneratedAttribute]
private static UIText <CreateFilters>b__12(int count);
    [CompilerGeneratedAttribute]
private static bool <CreateFilters>b__13(ExtensionViewModel extension);
}
public enum JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.ExtensionState : Enum {
    public int value__;
    public static ExtensionState NotInstalled;
    public static ExtensionState Installing;
    public static ExtensionState Installed;
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.ExtensionViewModel : object {
    private ExtensionManagerViewModel myManager;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UIText> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UIText> <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UIText> <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ExtensionState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionEvents`1<UICommand> <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private TagCollectionViewModel <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionEvents`1<PropertyViewModel> <Properties>k__BackingField;
    public IProperty`1<IconId> Icon { get; private set; }
    public IProperty`1<UIText> Name { get; private set; }
    public IProperty`1<UIText> CreatedBy { get; private set; }
    public IProperty`1<UIText> Description { get; private set; }
    public IProperty`1<ExtensionState> State { get; private set; }
    public IProperty`1<double> Progress { get; private set; }
    public CollectionEvents`1<UICommand> Commands { get; private set; }
    public TagCollectionViewModel Tags { get; private set; }
    public CollectionEvents`1<PropertyViewModel> Properties { get; private set; }
    public bool IsInstalled { get; }
    public ExtensionViewModel(Lifetime lifetime, ExtensionManagerViewModel manager, bool demo);
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IProperty`1<IconId> value);
    [CompilerGeneratedAttribute]
public IProperty`1<UIText> get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(IProperty`1<UIText> value);
    [CompilerGeneratedAttribute]
public IProperty`1<UIText> get_CreatedBy();
    [CompilerGeneratedAttribute]
private void set_CreatedBy(IProperty`1<UIText> value);
    [CompilerGeneratedAttribute]
public IProperty`1<UIText> get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(IProperty`1<UIText> value);
    [CompilerGeneratedAttribute]
public IProperty`1<ExtensionState> get_State();
    [CompilerGeneratedAttribute]
private void set_State(IProperty`1<ExtensionState> value);
    [CompilerGeneratedAttribute]
public IProperty`1<double> get_Progress();
    [CompilerGeneratedAttribute]
private void set_Progress(IProperty`1<double> value);
    [CompilerGeneratedAttribute]
public CollectionEvents`1<UICommand> get_Commands();
    [CompilerGeneratedAttribute]
private void set_Commands(CollectionEvents`1<UICommand> value);
    [CompilerGeneratedAttribute]
public TagCollectionViewModel get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(TagCollectionViewModel value);
    [CompilerGeneratedAttribute]
public CollectionEvents`1<PropertyViewModel> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(CollectionEvents`1<PropertyViewModel> value);
    public bool get_IsInstalled();
    public void Highlight(string searchText);
    public bool IsMatched(string searchText, IList`1<TagViewModel> tags);
    private bool ContainsText(string searchText);
    private static string CreateRandomTitle();
    private static string CreateaRandomSentence();
    public int GetPopularityIndex();
    [CompilerGeneratedAttribute]
private bool <IsMatched>b__4(TagViewModel x);
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.FilterCollectionViewModel : CollectionEvents`1<FilterViewModel> {
    public FilterCollectionViewModel(Lifetime lifetime, string id);
    public FilterCollectionViewModel(Lifetime lifetime, string id, ICollection`1<FilterViewModel> storage, bool uniqueItems);
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.FilterViewModel : object {
    private ExtensionManagerViewModel myManager;
    private Func`2<int, UIText> myTitle;
    private Func`2<ExtensionViewModel, bool> myAccepted;
    [CompilerGeneratedAttribute]
private IProperty`1<UIText> <Name>k__BackingField;
    public IProperty`1<UIText> Name { get; private set; }
    public FilterViewModel(Lifetime lifetime, ExtensionManagerViewModel manager, Func`2<int, UIText> title, Func`2<ExtensionViewModel, bool> accepted);
    [CompilerGeneratedAttribute]
public IProperty`1<UIText> get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(IProperty`1<UIText> value);
    public bool IsAccepted(ExtensionViewModel extension);
    public void UpdateCounter(string searchText, IList`1<TagViewModel> tags);
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.PropertyViewModel : object {
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public IconId Icon { get; private set; }
    public object Title { get; private set; }
    public object Value { get; private set; }
    public PropertyViewModel(object title, object value, IconId icon);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public object get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
[DebuggerDisplayAttribute("Name.Text")]
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.SortingViewModel : object {
    private Func`3<ExtensionViewModel, ExtensionViewModel, int> myCompare;
    [CompilerGeneratedAttribute]
private UIText <Name>k__BackingField;
    public UIText Name { get; private set; }
    public SortingViewModel(UIText name, Func`3<ExtensionViewModel, ExtensionViewModel, int> compare);
    [CompilerGeneratedAttribute]
public UIText get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(UIText value);
    private sealed virtual override int System.Collections.Generic.IComparer<System.Object>.Compare(object x, object y);
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.TagCollectionViewModel : ListEvents`1<TagViewModel> {
    public TagCollectionViewModel(Lifetime lifetime, string id);
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.TagStorage : object {
    private Lifetime myLifetime;
    private ReadonlyToken myReadonlyToken;
    private Dictionary`2<string, TagViewModel> myMap;
    [CompilerGeneratedAttribute]
private TagCollectionViewModel <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private TagCollectionViewModel <SelectedTags>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<AddRemoveIndexEventArgs`1<TagViewModel>> CS$<>9__CachedAnonymousMethodDelegate1;
    public TagCollectionViewModel Tags { get; private set; }
    public TagCollectionViewModel SelectedTags { get; private set; }
    public TagStorage(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public TagCollectionViewModel get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(TagCollectionViewModel value);
    [CompilerGeneratedAttribute]
public TagCollectionViewModel get_SelectedTags();
    [CompilerGeneratedAttribute]
private void set_SelectedTags(TagCollectionViewModel value);
    public TagViewModel Register(string name);
    public void Unregister(string name);
    private TagViewModel GetOrCreate(string tagName);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(AddRemoveIndexEventArgs`1<TagViewModel> args);
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.ViewModels.TagViewModel : object {
    private Lifetime myLifetime;
    private string myTagName;
    [CompilerGeneratedAttribute]
private UIText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<int> <Usages>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsHighlighted>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsSelected>k__BackingField;
    public UIText Text { get; private set; }
    public Property`1<int> Usages { get; private set; }
    public Property`1<bool> IsHighlighted { get; private set; }
    public Property`1<bool> IsSelected { get; private set; }
    public TagViewModel(Lifetime lifetime, TagStorage tagStorage, string tagName);
    [CompilerGeneratedAttribute]
public UIText get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(UIText value);
    [CompilerGeneratedAttribute]
public Property`1<int> get_Usages();
    [CompilerGeneratedAttribute]
private void set_Usages(Property`1<int> value);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsHighlighted();
    [CompilerGeneratedAttribute]
private void set_IsHighlighted(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsSelected();
    [CompilerGeneratedAttribute]
private void set_IsSelected(Property`1<bool> value);
    public void Highlight(string seachText);
}
public class JetBrains.UI.SrcView.ControlShowcase.ExtentionManager.Views.ExtensionManagerView : UserControl {
    public static DependencyProperty ExtensionManagerViewModelProperty;
    private bool _contentLoaded;
    public ExtensionManagerViewModel ExtensionManagerViewModel { get; public set; }
    private static ExtensionManagerView();
    public ExtensionManagerViewModel get_ExtensionManagerViewModel();
    public void set_ExtensionManagerViewModel(ExtensionManagerViewModel value);
    private void Grid_OnIsMouseDirectlyOverChanged(object sender, DependencyPropertyChangedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[InternalActionAttribute]
[ActionAttribute("Control Showcase")]
public class JetBrains.UI.SrcView.ControlShowcase.ShowControlShowcaseToolWindowAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.UI.SrcView.ControlShowcase.SimpleModel : object {
    private string myText;
    private PropertyChangedEventHandler PropertyChanged;
    public string Text { get; public set; }
    public SimpleModel(string text);
    public static ObservableCollection`1<SimpleModel> GenerateSamples();
    public string get_Text();
    public void set_Text(string value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    public virtual string ToString();
}
public static class JetBrains.UI.SrcView.CrossFramework.AvalonHwndSourceDpiCharmer : object {
    private static ILogger Logger;
    private static Tuple`2<FieldInfo, FieldInfo> myDpiFields;
    private static Lifetime myRequestsCacheLifetime;
    private static Tuple`2<MethodInfo, MethodInfo> myReRegisterMethods;
    private static FieldInfo myWorldTransformField;
    [ThreadStaticAttribute]
private static IDictionary`2<HwndSource, ICollectionEvents`1<object>> myCurrentlyCharmedHwndTargets;
    private static AvalonHwndSourceDpiCharmer();
    public static void CharmAvalonWindowLive(Lifetime lifetime, Window window);
    public static void CharmAvalonWindowLive(Lifetime lifetime, HwndSource hwnds);
    public static void ForceAvalonWindowDpi(HwndSource hwnds, DpiResolution dpi);
    private static void CharmAvalonWindowCore(Lifetime lifetime, HwndTarget hwndt, WindowDpiTracker tracker);
    private static void ForceAvalonWindowDpiCore(HwndTarget hwndt, Void* hWnd, DpiResolution dpi, Object[]& argsRegisterUnregisterCachedInstance);
    [NotNullAttribute]
private static ICollectionEvents`1<object> GetRequestsCollection(HwndSource hwnds);
}
[ShellComponentAttribute("3", "0", "1")]
public class JetBrains.UI.SrcView.CrossFramework.RunningAvalonWindowsList : object {
    public ICollectionEvents`1<AvalonWindow> RunningAvalonWindows;
    public RunningAvalonWindowsList(Lifetime lifeComponent, IWindowsHookManager hookman, ILogger logger);
    private static bool IsAvalonWindowClass(Void* hwnd);
}
[ShellComponentAttribute]
internal class JetBrains.UI.SrcView.Diagnostics.FocusMonitor.DebugFocusMonitorComponent : object {
    public DebugFocusMonitorComponent(Lifetime lifetime, IThreading threading, ToolWindowManager toolWindowManager, DebugFocusMonitorToolWindowDescriptor descriptor, TrackFocus tracker);
}
[ToolWindowDescriptorAttribute]
public class JetBrains.UI.SrcView.Diagnostics.FocusMonitor.DebugFocusMonitorToolWindowDescriptor : ToolWindowDescriptor {
    public DebugFocusMonitorToolWindowDescriptor(IApplicationHost host);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Diagnostics.FocusMonitor.FocusInFocusMonitorLogEntryView : ViewControl`1<FocusInFocusMonitorLogEntry> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, FocusInFocusMonitorLogEntry automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Diagnostics.FocusMonitor.FocusMonitorView : ViewControl`1<FocusMonitorAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<WindowRecord, Paragraph> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<LogEntry, RealLogEntry> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<LogEntry, object> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<object, LogEntry> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, LogEntry, UIElement, UIElement> CS$<>9__CachedAnonymousMethodDelegate28;
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, LogEntry, UIElement, UIElement> CS$<>9__CachedAnonymousMethodDelegate29;
    private static UIElement CreateDetailView(Lifetime lifetime, IProperty`1<LogEntry> propSelEntry);
    private static TabItem CreateDetailView_StackTrace(Lifetime lifetime, IProperty`1<LogEntry> propSelEntry);
    private static TabItem CreateDetailView_Tree(Lifetime lifetime, IProperty`1<LogEntry> propSelEntry);
    private static TabItem CreateDetailView_Visual(IProperty`1<LogEntry> propSelEntry);
    private static UIElement CreateLogList(Lifetime lifetime, FocusMonitorAutomation automation, IProperty`1<LogEntry> propSelEntry);
    [NotNullAttribute]
private static Span CreateLogList_RenderWindowRecordShortText(WindowRecord wndrec);
    protected virtual UIElement OnRenderView(Lifetime lifetime, FocusMonitorAutomation automation);
    [CompilerGeneratedAttribute]
private static Paragraph <CreateDetailView_Tree>b__d(WindowRecord winrec);
    [CompilerGeneratedAttribute]
private static RealLogEntry <CreateDetailView_Tree>b__e(LogEntry entry);
    [CompilerGeneratedAttribute]
private static object <CreateLogList>b__20(LogEntry entry);
    [CompilerGeneratedAttribute]
private static LogEntry <CreateLogList>b__21(object o);
    [CompilerGeneratedAttribute]
private static UIElement <CreateLogList>b__22(Lifetime lifeView, LogEntry entry, UIElement arg3);
    [CompilerGeneratedAttribute]
private static UIElement <CreateLogList>b__23(Lifetime lifeView, LogEntry entry, UIElement arg3);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Diagnostics.FocusMonitor.FocusMonitorWindowRecordTooltipView : ViewControl`1<WindowRecordTooltipAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, WindowRecordTooltipAutomation automation);
}
[ActionAttribute("Focus Monitor in Tool Window")]
[InternalActionAttribute]
public class JetBrains.UI.SrcView.Diagnostics.FocusMonitor.ShowDebugFocusMonitorAction : ActivateToolWindowActionHandler`1<DebugFocusMonitorToolWindowDescriptor> {
}
[ZoneMarkerAttribute]
public class JetBrains.UI.SrcView.Diagnostics.FocusMonitor.ZoneMarker : object {
}
[ActionAttribute("Request Application Shutdown")]
public class JetBrains.UI.SrcView.Diagnostics.InvokeApplicationShutdownRequestsAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("ExtensionManager", "E&xtension Manager…")]
public class JetBrains.UI.SrcView.ExtensionManager.ExtensionManagerAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.UI.SrcView.ExtensionManager.ExtensionManagerWindow : Window {
    internal ContentControl Placeholder;
    private bool _contentLoaded;
    public ExtensionManagerWindow(ExtensionManagerViewModel viewModel);
    public ExtensionManagerWindow(Lifetime lifetime);
    private void RegisterViews();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.ExtensionManager.ExtensionManagerWindowOwner : object {
    [NotNullAttribute]
private ViewModelProvider myViewModelProvider;
    [NotNullAttribute]
private IUIApplication myUiApp;
    public ExtensionManagerWindowOwner(ViewModelProvider viewModelProvider, IUIApplication uiapp);
    public Nullable`1<bool> Show();
}
public class JetBrains.UI.SrcView.ExtensionManager.ViewModels.ExtensionActionViewModel : object {
    private Action myAction;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPurposeful>k__BackingField;
    public string Id { get; public set; }
    public RichText Caption { get; private set; }
    public IProperty`1<bool> IsSelected { get; private set; }
    public IProperty`1<bool> IsEnabled { get; private set; }
    public Color Color { get; private set; }
    public ICommand Select { get; private set; }
    public bool IsPurposeful { get; private set; }
    public ExtensionActionViewModel(Lifetime lifetime, string caption, Action action, IEnumerable`1<IExtensionActionViewModel> actions, Color color, bool initialState, bool enabled, bool purposeful);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Caption();
    [CompilerGeneratedAttribute]
private void set_Caption(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsSelected();
    [CompilerGeneratedAttribute]
private void set_IsSelected(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Color get_Color();
    [CompilerGeneratedAttribute]
private void set_Color(Color value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_Select();
    [CompilerGeneratedAttribute]
private void set_Select(ICommand value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPurposeful();
    [CompilerGeneratedAttribute]
private void set_IsPurposeful(bool value);
    public sealed virtual void Do();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public enum JetBrains.UI.SrcView.ExtensionManager.ViewModels.ExtensionGroup : Enum {
    public int value__;
    public static ExtensionGroup Updated;
    public static ExtensionGroup Installed;
    public static ExtensionGroup Other;
}
public class JetBrains.UI.SrcView.ExtensionManager.ViewModels.ExtensionManagerViewModel : object {
    private Lifetime myLifetime;
    private ExtensionsPage myExtensionsPage;
    private IProperty`1<bool> myIsInstallerRunning;
    private Dispatcher myDispatcher;
    [CompilerGeneratedAttribute]
private IProperty`1<IExtensionManagerPageViewModel> <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<LogEvent> <LogsEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SearchText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <CanBack>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <CanAdvanced>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <CanInstall>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <CanQuit>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <CanSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsPrivacyNoteAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsPrivacyNoteVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowPrivacyNote>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInstallAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Back>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <SignIn>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Install>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Quit>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <SelectedDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <InstallButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private ILayout <JetBrains.Util.ILogEventListener.Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`4<bool, bool, bool, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<IExtensionViewModel, IEnumerable`1<IExtensionActionViewModel>> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<IExtensionActionViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<IExtensionViewModel, IExtensionActionViewModel> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<IExtensionActionViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<LogEvent, bool> CS$<>9__CachedAnonymousMethodDelegate1f;
    public IProperty`1<IExtensionManagerPageViewModel> Page { get; private set; }
    public IListEvents`1<LogEvent> LogsEvents { get; private set; }
    public IProperty`1<string> SearchText { get; private set; }
    public IProperty`1<Visibility> CanBack { get; private set; }
    public IProperty`1<Visibility> CanAdvanced { get; private set; }
    public IProperty`1<Visibility> CanInstall { get; private set; }
    public IProperty`1<Visibility> CanQuit { get; private set; }
    public IProperty`1<Visibility> CanSearch { get; private set; }
    public IProperty`1<bool> IsPrivacyNoteAccepted { get; private set; }
    public IProperty`1<bool> IsPrivacyNoteVisible { get; private set; }
    public ICommand ShowPrivacyNote { get; private set; }
    public IProperty`1<bool> IsInstallAvailable { get; private set; }
    public ICommand Back { get; private set; }
    public ICommand SignIn { get; private set; }
    public ICommand Install { get; private set; }
    public ICommand Quit { get; private set; }
    public ICommand Options { get; private set; }
    public Property`1<string> SelectedDescription { get; private set; }
    public Property`1<string> InstallButtonText { get; private set; }
    public IProperty`1<bool> IsClosed { get; private set; }
    private ILayout JetBrains.Util.ILogEventListener.Layout { get; private set; }
    public ExtensionManagerViewModel(Lifetime lifetime, ICommand`1<ExtensionManagerViewModel> optionsCommand);
    [CompilerGeneratedAttribute]
public IProperty`1<IExtensionManagerPageViewModel> get_Page();
    [CompilerGeneratedAttribute]
private void set_Page(IProperty`1<IExtensionManagerPageViewModel> value);
    [CompilerGeneratedAttribute]
public IListEvents`1<LogEvent> get_LogsEvents();
    [CompilerGeneratedAttribute]
private void set_LogsEvents(IListEvents`1<LogEvent> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SearchText();
    [CompilerGeneratedAttribute]
private void set_SearchText(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_CanBack();
    [CompilerGeneratedAttribute]
private void set_CanBack(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_CanAdvanced();
    [CompilerGeneratedAttribute]
private void set_CanAdvanced(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_CanInstall();
    [CompilerGeneratedAttribute]
private void set_CanInstall(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_CanQuit();
    [CompilerGeneratedAttribute]
private void set_CanQuit(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_CanSearch();
    [CompilerGeneratedAttribute]
private void set_CanSearch(IProperty`1<Visibility> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsPrivacyNoteAccepted();
    [CompilerGeneratedAttribute]
private void set_IsPrivacyNoteAccepted(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsPrivacyNoteVisible();
    [CompilerGeneratedAttribute]
private void set_IsPrivacyNoteVisible(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public ICommand get_ShowPrivacyNote();
    [CompilerGeneratedAttribute]
private void set_ShowPrivacyNote(ICommand value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsInstallAvailable();
    [CompilerGeneratedAttribute]
private void set_IsInstallAvailable(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public ICommand get_Back();
    [CompilerGeneratedAttribute]
private void set_Back(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_SignIn();
    [CompilerGeneratedAttribute]
private void set_SignIn(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Install();
    [CompilerGeneratedAttribute]
private void set_Install(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Quit();
    [CompilerGeneratedAttribute]
private void set_Quit(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(ICommand value);
    [CompilerGeneratedAttribute]
public Property`1<string> get_SelectedDescription();
    [CompilerGeneratedAttribute]
private void set_SelectedDescription(Property`1<string> value);
    [CompilerGeneratedAttribute]
public Property`1<string> get_InstallButtonText();
    [CompilerGeneratedAttribute]
private void set_InstallButtonText(Property`1<string> value);
    public void ShowProgress(Lifetime lifetime, Action`2<ProgressIndicator, Property`1<string>> action, Action continueWith, Func`1<bool> quitHandler, bool runSync);
    public void AddExtension(IExtensionViewModel extension);
    public void AddExtensions(IEnumerable`1<IExtensionViewModel> extensions);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(IProperty`1<bool> value);
    public sealed virtual void Close();
    public void ShowExtensions();
    private bool CanBeginInstallation();
    public void BeginInstallation();
    public void ShowInstallationResults();
    [CompilerGeneratedAttribute]
private sealed virtual override ILayout JetBrains.Util.ILogEventListener.get_Layout();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.Util.ILogEventListener.set_Layout(ILayout value);
    private sealed virtual override void JetBrains.Util.ILogEventListener.OnLogEvent(LogEvent logEvent);
    private void InitInstallerMonitor(Lifetime ltMonitor);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
    [CompilerGeneratedAttribute]
private Visibility <.ctor>b__5(IExtensionManagerPageViewModel page);
    [CompilerGeneratedAttribute]
private Visibility <.ctor>b__6(IExtensionManagerPageViewModel page);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__7(bool running, bool accepted, bool hasany);
    [CompilerGeneratedAttribute]
private string <.ctor>b__8(IExtensionManagerPageViewModel page, string desc, bool running);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IExtensionActionViewModel> <CanBeginInstallation>b__12(IExtensionViewModel _);
    [CompilerGeneratedAttribute]
private static bool <CanBeginInstallation>b__13(IExtensionActionViewModel _);
    [CompilerGeneratedAttribute]
private void <BeginInstallation>b__16(ProgressIndicator indicator, Property`1<string> description);
    [CompilerGeneratedAttribute]
private void <BeginInstallation>b__19();
    [CompilerGeneratedAttribute]
private static bool <BeginInstallation>b__1b();
    [CompilerGeneratedAttribute]
private static IExtensionActionViewModel <BeginInstallation>b__17(IExtensionViewModel _);
    [CompilerGeneratedAttribute]
private static bool <BeginInstallation>b__18(IExtensionActionViewModel model);
    [CompilerGeneratedAttribute]
private static bool <BeginInstallation>b__1a(LogEvent _);
}
public class JetBrains.UI.SrcView.ExtensionManager.ViewModels.ExtensionSection : object {
    private Lifetime myLifetime;
    private ListCollectionView myExtensionsView;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IExtensionActionViewModel> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IExtensionViewModel, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    public ICollectionView Extensions { get; }
    public string Name { get; private set; }
    public int Count { get; }
    public List`1<IExtensionActionViewModel> Options { get; private set; }
    public ExtensionSection(Lifetime lifetime, ListEvents`1<IExtensionViewModel> allExtensions, string name, Predicate`1<IExtensionViewModel> filter, bool allowSorting);
    public ICollectionView get_Extensions();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public int get_Count();
    [CompilerGeneratedAttribute]
public List`1<IExtensionActionViewModel> get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(List`1<IExtensionActionViewModel> value);
    public void Invalidate();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private static bool <get_Count>b__8(IExtensionViewModel model);
}
public class JetBrains.UI.SrcView.ExtensionManager.ViewModels.ExtensionsPage : object {
    private static string DefaultInstallButtonText;
    private Lifetime myLifetime;
    private IProperty`1<string> mySearchText;
    [CompilerGeneratedAttribute]
private ListEvents`1<IExtensionViewModel> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionSection[] <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <SelectedShortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <SelectedDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <HasSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TreeBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private static Predicate`1<IExtensionViewModel> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Predicate`1<IExtensionViewModel> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Predicate`1<IExtensionViewModel> CS$<>9__CachedAnonymousMethodDelegatec;
    public ListEvents`1<IExtensionViewModel> Extensions { get; private set; }
    public ExtensionSection[] Sections { get; private set; }
    public Property`1<string> SelectedShortDescription { get; private set; }
    public Property`1<string> SelectedDescription { get; private set; }
    public Property`1<bool> HasSelected { get; private set; }
    public object TreeBehavior { get; private set; }
    public ExtensionsPage(Lifetime lifetime, IProperty`1<string> searchText);
    [CompilerGeneratedAttribute]
public ListEvents`1<IExtensionViewModel> get_Extensions();
    [CompilerGeneratedAttribute]
private void set_Extensions(ListEvents`1<IExtensionViewModel> value);
    [CompilerGeneratedAttribute]
public ExtensionSection[] get_Sections();
    [CompilerGeneratedAttribute]
private void set_Sections(ExtensionSection[] value);
    [CompilerGeneratedAttribute]
public Property`1<string> get_SelectedShortDescription();
    [CompilerGeneratedAttribute]
private void set_SelectedShortDescription(Property`1<string> value);
    [CompilerGeneratedAttribute]
public Property`1<string> get_SelectedDescription();
    [CompilerGeneratedAttribute]
private void set_SelectedDescription(Property`1<string> value);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_HasSelected();
    [CompilerGeneratedAttribute]
private void set_HasSelected(Property`1<bool> value);
    [CompilerGeneratedAttribute]
public object get_TreeBehavior();
    [CompilerGeneratedAttribute]
private void set_TreeBehavior(object value);
    private void OnSearchTextChanged(PropertyChangedEventArgs`1<string> args);
    public sealed virtual bool CanQuit();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(IExtensionViewModel model);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1(IExtensionViewModel model);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(IExtensionViewModel model);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
}
public class JetBrains.UI.SrcView.ExtensionManager.ViewModels.ExtensionViewModel : object {
    private Lifetime myLifetime;
    private JetSemanticVersion myVersion;
    private string myTitle;
    private string myDescription;
    private string myCreatedBy;
    private String[] myTags;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowProjectInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectInformationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IExtensionActionViewModel> <AllActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<IExtensionActionViewModel> <SelectedAction>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DownloadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LatestUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFiltered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasTags>k__BackingField;
    public string Id { get; private set; }
    public ICommand ShowLicense { get; private set; }
    public ICommand ShowProjectInformation { get; private set; }
    public string ProjectInformationUrl { get; private set; }
    public RichText Title { get; private set; }
    public RichText Description { get; private set; }
    public IList`1<IExtensionActionViewModel> AllActions { get; private set; }
    public Property`1<IExtensionActionViewModel> SelectedAction { get; private set; }
    public RichText Tags { get; private set; }
    public object Icon { get; private set; }
    public ExtensionGroup Group { get; private set; }
    public RichText Version { get; private set; }
    public RichText CreatedBy { get; private set; }
    public int DownloadCount { get; private set; }
    public Nullable`1<DateTimeOffset> LatestUpdate { get; public set; }
    public bool IsFiltered { get; private set; }
    public bool HasTags { get; private set; }
    public ExtensionViewModel(Lifetime lifetime, ITheming theming, OpensUri opensUri, ILogger logger, string id, string title, string description, string createdBy, JetSemanticVersion version, Uri iconUrl, Uri licenseUrl, Uri projectUrl, int downloadCount, String[] tags, Nullable`1<DateTimeOffset> latestUpdate, ExtensionGroup group);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_ShowLicense();
    [CompilerGeneratedAttribute]
private void set_ShowLicense(ICommand value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_ShowProjectInformation();
    [CompilerGeneratedAttribute]
private void set_ShowProjectInformation(ICommand value);
    [CompilerGeneratedAttribute]
public string get_ProjectInformationUrl();
    [CompilerGeneratedAttribute]
private void set_ProjectInformationUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IExtensionActionViewModel> get_AllActions();
    [CompilerGeneratedAttribute]
private void set_AllActions(IList`1<IExtensionActionViewModel> value);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<IExtensionActionViewModel> get_SelectedAction();
    [CompilerGeneratedAttribute]
private void set_SelectedAction(Property`1<IExtensionActionViewModel> value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Tags();
    [CompilerGeneratedAttribute]
private void set_Tags(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(object value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionGroup get_Group();
    [CompilerGeneratedAttribute]
private void set_Group(ExtensionGroup value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_CreatedBy();
    [CompilerGeneratedAttribute]
private void set_CreatedBy(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DownloadCount();
    [CompilerGeneratedAttribute]
private void set_DownloadCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_LatestUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LatestUpdate(Nullable`1<DateTimeOffset> value);
    public sealed virtual void Invalidate();
    public sealed virtual void Search(IdentifierMatcher identifierMatcher);
    private bool Highlight(IdentifierMatcher matcher, string text, Action`1<RichText> highlight);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFiltered();
    [CompilerGeneratedAttribute]
private void set_IsFiltered(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasTags();
    [CompilerGeneratedAttribute]
private void set_HasTags(bool value);
    public IExtensionActionViewModel AddAction(string caption, Action action, Color color, bool initialState, bool enabled, bool purposeful, string id);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3(Lifetime lt, IExtensionActionViewModel act);
    [CompilerGeneratedAttribute]
private void <Search>b__d(RichText x);
    [CompilerGeneratedAttribute]
private void <Search>b__e(RichText x);
    [CompilerGeneratedAttribute]
private void <Search>b__f(RichText x);
    [CompilerGeneratedAttribute]
private void <Search>b__10(RichText x);
}
public interface JetBrains.UI.SrcView.ExtensionManager.ViewModels.IExtensionActionViewModel {
    public string Id { get; }
    public RichText Caption { get; }
    public IProperty`1<bool> IsSelected { get; }
    public ICommand Select { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public bool IsPurposeful { get; }
    public Color Color { get; }
    public abstract virtual string get_Id();
    public abstract virtual RichText get_Caption();
    public abstract virtual IProperty`1<bool> get_IsSelected();
    public abstract virtual ICommand get_Select();
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    public abstract virtual bool get_IsPurposeful();
    public abstract virtual Color get_Color();
    public abstract virtual void Do();
}
public interface JetBrains.UI.SrcView.ExtensionManager.ViewModels.IExtensionManagerPageViewModel {
    public abstract virtual bool CanQuit();
}
public interface JetBrains.UI.SrcView.ExtensionManager.ViewModels.IExtensionViewModel {
    public string Id { get; }
    public RichText Title { get; }
    public RichText Description { get; }
    public IList`1<IExtensionActionViewModel> AllActions { get; }
    public RichText Tags { get; }
    public object Icon { get; }
    public ExtensionGroup Group { get; }
    public RichText Version { get; }
    public RichText CreatedBy { get; }
    public Property`1<IExtensionActionViewModel> SelectedAction { get; }
    public bool IsFiltered { get; }
    public ICommand ShowLicense { get; }
    public ICommand ShowProjectInformation { get; }
    public int DownloadCount { get; }
    public Nullable`1<DateTimeOffset> LatestUpdate { get; public set; }
    public abstract virtual string get_Id();
    public abstract virtual RichText get_Title();
    public abstract virtual RichText get_Description();
    public abstract virtual IList`1<IExtensionActionViewModel> get_AllActions();
    public abstract virtual RichText get_Tags();
    public abstract virtual object get_Icon();
    public abstract virtual ExtensionGroup get_Group();
    public abstract virtual RichText get_Version();
    public abstract virtual RichText get_CreatedBy();
    public abstract virtual Property`1<IExtensionActionViewModel> get_SelectedAction();
    public abstract virtual void Search(IdentifierMatcher identifierMatcher);
    public abstract virtual bool get_IsFiltered();
    public abstract virtual ICommand get_ShowLicense();
    public abstract virtual ICommand get_ShowProjectInformation();
    public abstract virtual int get_DownloadCount();
    public abstract virtual Nullable`1<DateTimeOffset> get_LatestUpdate();
    public abstract virtual void set_LatestUpdate(Nullable`1<DateTimeOffset> value);
    public abstract virtual void Invalidate();
}
public class JetBrains.UI.SrcView.ExtensionManager.ViewModels.InstallCompletedViewModel : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasIssues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowLogShortFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <GoJetBrainsSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <HasErrorsVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate1;
    public string Title { get; }
    public string Description { get; private set; }
    public bool HasIssues { get; private set; }
    public bool HasFailed { get; private set; }
    public ICommand ShowLogFile { get; private set; }
    public ICommand ShowLogShortFile { get; private set; }
    public ICommand GoJetBrainsSupport { get; private set; }
    public IList`1<string> Errors { get; private set; }
    public IProperty`1<Visibility> HasErrorsVisibility { get; private set; }
    public InstallCompletedViewModel(ILayout logLayout, ICollection`1<LogEvent> logEvents);
    public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_HasIssues();
    [CompilerGeneratedAttribute]
private void set_HasIssues(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasFailed();
    [CompilerGeneratedAttribute]
private void set_HasFailed(bool value);
    [CompilerGeneratedAttribute]
public ICommand get_ShowLogFile();
    [CompilerGeneratedAttribute]
private void set_ShowLogFile(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_ShowLogShortFile();
    [CompilerGeneratedAttribute]
private void set_ShowLogShortFile(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_GoJetBrainsSupport();
    [CompilerGeneratedAttribute]
private void set_GoJetBrainsSupport(ICommand value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_HasErrorsVisibility();
    [CompilerGeneratedAttribute]
private void set_HasErrorsVisibility(IProperty`1<Visibility> value);
    private static DelegateCommand MakeLogCommand(ICollection`1<LogEvent> logEvents, ILayout logLayout, LoggingLevel loggingLevel);
    public virtual string ToString();
    public sealed virtual bool CanQuit();
    public static void DumpToNotepad(Action`1<StreamWriter> writer);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0();
}
public class JetBrains.UI.SrcView.ExtensionManager.ViewModels.ProgressPage : object {
    private Lifetime myLifetime;
    private Action`2<ProgressIndicator, Property`1<string>> myAction;
    private Action myContinueWith;
    private bool myRunSync;
    private Func`1<bool> myQuitHandler;
    [CompilerGeneratedAttribute]
private Property`1<Nullable`1<double>> <CurrentProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsIntermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Nullable`1<double>, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<double, Nullable`1<double>> CS$<>9__CachedAnonymousMethodDelegate5;
    public Property`1<Nullable`1<double>> CurrentProgress { get; private set; }
    public Property`1<string> Status { get; private set; }
    public Property`1<bool> IsIntermediate { get; private set; }
    public ProgressPage(Lifetime lifetime, Action`2<ProgressIndicator, Property`1<string>> action, Action continueWith, Func`1<bool> quitHandler, bool runSync);
    [CompilerGeneratedAttribute]
public Property`1<Nullable`1<double>> get_CurrentProgress();
    [CompilerGeneratedAttribute]
private void set_CurrentProgress(Property`1<Nullable`1<double>> value);
    [CompilerGeneratedAttribute]
public Property`1<string> get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(Property`1<string> value);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsIntermediate();
    [CompilerGeneratedAttribute]
private void set_IsIntermediate(Property`1<bool> value);
    public void Run();
    public sealed virtual bool CanQuit();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__0(Nullable`1<double> d);
    [CompilerGeneratedAttribute]
private static Nullable`1<double> <Run>b__2(double x);
}
public static class JetBrains.UI.SrcView.Extensions.ActualVisibility : object {
    public static DependencyProperty IsActuallyVisibleProperty;
    public static DependencyProperty VisibleRectProperty;
    private static ActualVisibility();
    public static void SetIsActuallyVisible(UIElement element, bool value);
    public static bool GetIsActuallyVisible(UIElement element);
    public static void SetVisibleRect(UIElement element, Nullable`1<Rect> value);
    public static Nullable`1<Rect> GetVisibleRect(UIElement element);
}
[OptionsPageAttribute("ExtensionManager", "Extension Manager", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/ExtensionManager")]
public class JetBrains.UI.SrcView.Extensions.OptionsPages.ExtensionManagerOptionsPage : CustomSimpleOptionsPage {
    public static string PID;
    [CompilerGeneratedAttribute]
private static Func`2<bool, Nullable`1<bool>> CS$<>9__CachedAnonymousMethodDelegate1;
    public ExtensionManagerOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, FormValidators formValidators, IWindowsHookManager windowsHookManager, IUIApplication environment, ISettingsOptimization settingsOptimization, ILogger logger);
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <.ctor>b__0(bool b);
}
public class JetBrains.UI.SrcView.Extensions.OptionsPages.ExtensionManagerOptionsViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private FormValidators <FormValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsHookManager <WindowsHookManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsSettingsSmartContext <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsOptimization <SettingsOptimization>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public FormValidators FormValidators { get; public set; }
    public IWindowsHookManager WindowsHookManager { get; public set; }
    public IUIApplication Environment { get; public set; }
    public OptionsSettingsSmartContext Settings { get; public set; }
    public ISettingsOptimization SettingsOptimization { get; public set; }
    public ILogger Logger { get; public set; }
    public ExtensionManagerOptionsViewModel(FormValidators formValidators, IWindowsHookManager windowsHookManager, IUIApplication environment, OptionsSettingsSmartContext settings, ISettingsOptimization settingsOptimization, ILogger logger);
    [CompilerGeneratedAttribute]
public FormValidators get_FormValidators();
    [CompilerGeneratedAttribute]
public void set_FormValidators(FormValidators value);
    [CompilerGeneratedAttribute]
public IWindowsHookManager get_WindowsHookManager();
    [CompilerGeneratedAttribute]
public void set_WindowsHookManager(IWindowsHookManager value);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(IUIApplication value);
    [CompilerGeneratedAttribute]
public OptionsSettingsSmartContext get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(OptionsSettingsSmartContext value);
    [CompilerGeneratedAttribute]
public ISettingsOptimization get_SettingsOptimization();
    [CompilerGeneratedAttribute]
public void set_SettingsOptimization(ISettingsOptimization value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
}
public class JetBrains.UI.SrcView.Extensions.OptionsPages.PackageSourceEditorDialog : Form {
    private Container components;
    private bool myInitialEnabled;
    private Button myBrowseSourceButton;
    private Button myCancelButton;
    private Label myLabel1;
    private Label myLabel2;
    private Button myOkButton;
    private TextBox myNameTextBox;
    private TextBox mySourceTextBox;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public PackageSource PackageSource { get; }
    public PackageSourceEditorDialog(PackageSource initial, FormValidators formValidators, IWindowsHookManager windowsHookManager, IUIApplication environment, JetHashSet`1<string> knownNames);
    private void PackageSourceEditorDialog_Shown(object sender, EventArgs e);
    public PackageSource get_PackageSource();
    private void InitializeControls(string name, string source);
    private void OnBrowseSourceClick(IUIApplication uiapp);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent(IUIApplication application);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, PropertyChangedEventArgs`2<string, ValidatorSeverity> e);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(string source);
}
public class JetBrains.UI.SrcView.Extensions.SafeIconExtension : MarkupExtension {
    private string myValue;
    public SafeIconExtension(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Extensions.View.ExtensionManagerOptionsAdaptedView : ViewControl`1<ExtensionManagerOptionsViewModel> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ExtensionManagerOptionsViewModel automation);
}
public class JetBrains.UI.SrcView.Extensions.View.ExtensionManagerOptionsView : UserControl {
    private FormValidators myFormValidators;
    private IWindowsHookManager myWindowsHookManager;
    private IUIApplication myEnvironment;
    private IPackageSourceProvider myExtensionSourceProvider;
    private SourceViewModel mySelected;
    private PropertyChangedEventHandler PropertyChanged;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private IconId <AddIconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <EditIconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <RemoveIconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <MoveUpIconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <MoveDownIconId>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<SourceViewModel> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <Edit>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <Remove>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <MoveUp>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <MoveDown>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<SourceViewModel, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<SourceViewModel, PackageSource> CS$<>9__CachedAnonymousMethodDelegatef;
    public IconId AddIconId { get; private set; }
    public IconId EditIconId { get; private set; }
    public IconId RemoveIconId { get; private set; }
    public IconId MoveUpIconId { get; private set; }
    public IconId MoveDownIconId { get; private set; }
    public ObservableCollection`1<SourceViewModel> Sources { get; private set; }
    public SourceViewModel Selected { get; public set; }
    public DelegateCommand Add { get; private set; }
    public DelegateCommand Edit { get; private set; }
    public DelegateCommand Remove { get; private set; }
    public DelegateCommand MoveUp { get; private set; }
    public DelegateCommand MoveDown { get; private set; }
    public ExtensionManagerOptionsView(Lifetime lifetime, FormValidators formValidators, IWindowsHookManager windowsHookManager, IUIApplication environment, OptionsSettingsSmartContext settings, ISettingsOptimization settingsOptimization, ILogger logger);
    [CompilerGeneratedAttribute]
public IconId get_AddIconId();
    [CompilerGeneratedAttribute]
private void set_AddIconId(IconId value);
    [CompilerGeneratedAttribute]
public IconId get_EditIconId();
    [CompilerGeneratedAttribute]
private void set_EditIconId(IconId value);
    [CompilerGeneratedAttribute]
public IconId get_RemoveIconId();
    [CompilerGeneratedAttribute]
private void set_RemoveIconId(IconId value);
    [CompilerGeneratedAttribute]
public IconId get_MoveUpIconId();
    [CompilerGeneratedAttribute]
private void set_MoveUpIconId(IconId value);
    [CompilerGeneratedAttribute]
public IconId get_MoveDownIconId();
    [CompilerGeneratedAttribute]
private void set_MoveDownIconId(IconId value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<SourceViewModel> get_Sources();
    [CompilerGeneratedAttribute]
private void set_Sources(ObservableCollection`1<SourceViewModel> value);
    public SourceViewModel get_Selected();
    public void set_Selected(SourceViewModel value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_Add();
    [CompilerGeneratedAttribute]
private void set_Add(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_Edit();
    [CompilerGeneratedAttribute]
private void set_Edit(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_Remove();
    [CompilerGeneratedAttribute]
private void set_Remove(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_MoveUp();
    [CompilerGeneratedAttribute]
private void set_MoveUp(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_MoveDown();
    [CompilerGeneratedAttribute]
private void set_MoveDown(DelegateCommand value);
    private SourceViewModel CreateSourceViewModel(PackageSource source);
    private void OnSourcePropertyChanged(object sender, PropertyChangedEventArgs args);
    private void OnAddGuarded();
    private void OnAdd();
    private void OnEditGuarded();
    private void OnEdit();
    private int RemoveSource(SourceViewModel source);
    private void OnRemoveGuarded();
    private void OnRemove();
    private void OnMoveUpGuarded();
    private void OnMoveUp();
    private void OnMoveDownGuarded();
    private void OnMoveDown();
    private PackageSource ShowPackageSourceEditorDialog(string caption, PackageSource packageSource);
    private void Save();
    private void OnMouseDoubleClick(object sender, MouseButtonEventArgs args);
    private void OnPreviewKeyDown(object sender, KeyEventArgs args);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__2();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__3();
    [CompilerGeneratedAttribute]
private static string <ShowPackageSourceEditorDialog>b__a(SourceViewModel s);
    [CompilerGeneratedAttribute]
private static PackageSource <Save>b__e(SourceViewModel s);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Extensions.View.ExtensionManagerViewModelProvider : ViewModelProvider {
    private SequentialLifetimes myModelLifetimes;
    private Lifetime myLifetime;
    private ExtensionManagerInstallNotification myExtensionManagerInstallNotification;
    private IProviderSettings myProviderSettings;
    private IThreading myThreading;
    private IApplicationHost myHost;
    private OpensUri myOpensUri;
    private ITheming myTheming;
    private ILogger myLogger;
    private IPackageRepositoryFactory myPackageRepositoryFactory;
    private AddProductIdentityToLogs myAddProductIdentityToLogs;
    private IOptionsDialogViewOwner myOptionsDialogOwner;
    private IActionManager myActionManager;
    private IPackage myWavePackage;
    private ISharedPackageRepository mySharedRepository;
    private FileSystemPath myInstallerPath;
    private IPackageRepository myInstalledRepository;
    private PluginsRepository myPluginsRepository;
    [CompilerGeneratedAttribute]
private static Func`2<IApplicationPackageLocallyInstalled, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IApplicationPackageLocallyInstalled, IEnumerable`1<ApplicationPackageFile>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`3<IApplicationPackageLocallyInstalled, ApplicationPackageFile, <>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile>, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<IApplicationPackageLocallyInstalled, BundledPackage> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageReference, PackageDependency> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`1<bool> CS$<>9__CachedAnonymousMethodDelegate32;
    public ExtensionManagerViewModel Model2 { get; }
    public ExtensionManagerViewModelProvider(Lifetime lifetime, ExtensionManagerInstallNotification extensionManagerInstallNotification, IExtensionSourceProvider extensionSourceProvider, IProviderSettings providerSettings, IThreading threading, IApplicationHost host, OpensUri opensUri, ProductConfigurations configurations, EnvironmentZonesExtra environmentZonesExtra, ITheming theming, ApplicationPackagesLocallyInstalled applicationPackagesLocallyInstalled, ApplicationPackagesFiles applicationPackagesFiles, ILogger logger, IPackageRepositoryFactory packageRepositoryFactory, AddProductIdentityToLogs addProductIdentityToLogs, IOptionsDialogViewOwner optionsDialogOwner, IActionManager actionManager);
    private static IEnumerable`1<BundledPackage> GettInstalledPackagesPackages(IEnumerable`1<IApplicationPackageLocallyInstalled> applicationPackages);
    public virtual ExtensionManagerViewModel get_Model2();
    private void Restart(object sender, EventArgs eventArgs);
    private ExtensionViewModel GetViewModel(Lifetime lifetime, IPackage package, ExtensionGroup group);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__2(IApplicationPackageLocallyInstalled a);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<ApplicationPackageFile> <.ctor>b__3(IApplicationPackageLocallyInstalled a);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile> <.ctor>b__4(IApplicationPackageLocallyInstalled a, ApplicationPackageFile f);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__5(<>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__6(<>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static FileSystemPath <.ctor>b__7(<>f__AnonymousType0`2<IApplicationPackageLocallyInstalled, ApplicationPackageFile> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private static BundledPackage <GettInstalledPackagesPackages>b__15(IApplicationPackageLocallyInstalled _);
    [CompilerGeneratedAttribute]
private static PackageDependency <GettInstalledPackagesPackages>b__16(ApplicationPackageReference __);
    [CompilerGeneratedAttribute]
private static bool <get_Model2>b__26();
    [CompilerGeneratedAttribute]
private void <Restart>b__46();
}
public class JetBrains.UI.SrcView.Extensions.View.SourceViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private PackageSource <PackageSource>k__BackingField;
    public PackageSource PackageSource { get; private set; }
    public string Name { get; }
    public string Source { get; }
    public bool IsChecked { get; public set; }
    public SourceViewModel(PackageSource source);
    [CompilerGeneratedAttribute]
public PackageSource get_PackageSource();
    [CompilerGeneratedAttribute]
private void set_PackageSource(PackageSource value);
    public string get_Name();
    public string get_Source();
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
}
[ActionAttribute("Convert Themed Icons…")]
public class JetBrains.UI.SrcView.Icons.ConvertThemedIconsAction : object {
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, IconFileInput> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, IconFileInput> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate14;
    [CanBeNullAttribute]
public static IconPackInput CollectInputFilesFromFolder(FileSystemPath folder);
    private static void ChooseOutput(Emitted emitted, string identifier);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static Nullable`1<bool> GetXamlFileRemoveBkgnd(FileSystemPath fileXaml);
    private static string GetXamlFileThemeColumns(FileSystemPath fileXaml);
    private static void InputXamlPng(ICommonFileDialogs filedlg);
    private static void SaveCsToDisk(string textEmitted, string identifier);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CompilerGeneratedAttribute]
private static IconFileInput <CollectInputFilesFromFolder>b__1(FileSystemPath file);
    [CompilerGeneratedAttribute]
private static IconFileInput <CollectInputFilesFromFolder>b__2(FileSystemPath file);
    [CompilerGeneratedAttribute]
private static void <GetXamlFileThemeColumns>b__13();
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Icons.Settings.ThemedIconsPreviewView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.Icons.ThemedIconView : ViewControl`1<ThemedIconAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ThemedIconAutomation automation);
}
[ViewAttribute("1")]
public class JetBrains.UI.SrcView.Icons.ThemedIconWindowlessControl : BitmapWindowlessControl {
    private Nullable`1<Size> myMargin;
    public ThemedIconWindowlessControl(Lifetime lifetime, ThemedIconAutomation automation, IThemedIconManager themedIconManager);
    public virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
}
[ActionAttribute("ShowStatistics", "Show Statistics")]
public class JetBrains.UI.SrcView.Internal.Statistics.ShowStatistics : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
internal class JetBrains.UI.SrcView.Internal.Statistics.StatisticComparer : MultiTypeComparer {
    private static AlphanumericComparer AlphanumericComparer;
    private static StatisticComparer();
    private static int CompareGroups(StatisticsGroup x, StatisticsGroup y);
    private static int CompareNodes(StatisticsNode x, StatisticsNode y);
}
internal class JetBrains.UI.SrcView.Internal.Statistics.StatisticsController : TreeViewController {
    public bool GuardActions { get; }
    public bool QuickSearchSupported { get; }
    public virtual bool get_GuardActions();
    public virtual bool QuickSearchMatches(TreeModelNode modelNode, string quickSearchText);
    public virtual bool get_QuickSearchSupported();
}
public class JetBrains.UI.SrcView.Internal.Statistics.StatisticsForm : Form {
    private static Statistics TreeModelNodeStatistics;
    private static Statistics ObjectStatistics;
    private static Statistics DictionaryStatistics;
    private TableLayoutPanel myContentPanel;
    private BorderedPanel myButtonPanel;
    private TreeGridView myView;
    private TreeGroupModel`1<StatisticsNode> myModel;
    private Timer myRefreshTimer;
    private TreeViewController myController;
    private static StatisticsForm ourInstance;
    private Button myBreakpointButton;
    private IUIApplication myEnvironment;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<TreeModelNode, object> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegatef;
    private Color FooterBackground { get; }
    private Color FooterForeground { get; }
    public StatisticsForm(IUIApplication environment, ITooltipManager tooltipManager, IWindowsHookManager windowsHookManager, IActionManager actionManager);
    private static StatisticsForm();
    protected virtual void Dispose(bool disposing);
    private Color get_FooterBackground();
    private Color get_FooterForeground();
    private void ApplyColorTheme();
    private void Refresh(object sender, EventArgs e);
    public static StatisticsForm GetOrCreateInstance(IUIApplication environment, ITooltipManager tooltipManager, IWindowsHookManager windowsHookManager, IActionManager actionManager);
    private void InitializeView(ITooltipManager tooltipManager, IWindowsHookManager windowsHookManager, IActionManager actionManager);
    private void InitializeForm(IWindowBranding windowBranding);
    private void InitializeLayout();
    private void InitializeFooter();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(bool x);
    [CompilerGeneratedAttribute]
private static void <GetOrCreateInstance>b__2(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static object <InitializeView>b__5(TreeModelNode source);
    [CompilerGeneratedAttribute]
private void <InitializeFooter>b__c(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private void <InitializeFooter>b__d(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <InitializeFooter>b__e(object param0, EventArgs param1);
}
internal class JetBrains.UI.SrcView.Internal.Statistics.StatisticsPresenter : StructuredPresenter`2<TreeModelNode, IPresentableItem> {
    private static void PresentActivity(StatisticsActivity value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private static void PresentCounter(StatisticsCounter value, IPresentableItem item, TreeModelNode element, PresentationState state);
    private static void PresentCalculator(StatisticsCalculator value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private static void PresentGroup(StatisticsGroup value, IPresentableItem item, TreeModelNode structureElement, PresentationState state);
    private static void Highlight(IPresentableItem item, string key, string name);
}
[ZoneMarkerAttribute]
public class JetBrains.UI.SrcView.Internal.ZoneMarker : object {
}
public class JetBrains.UI.SrcView.LayoutDesigner.Behaviors.Behaviors : object {
    public static DependencyProperty OnlyExpandWhenActiveProperty;
    public static DependencyProperty FilterToolboxProperty;
    public static DependencyProperty EnableNavigationProperty;
    public static DependencyProperty EnableSelectionProperty;
    public static DependencyProperty NewOnDoubleClickProperty;
    public static DependencyProperty FocusPresenterOnEnterProperty;
    private static Behaviors();
    public static bool GetOnlyExpandWhenActive(UIElement element);
    public static void SetOnlyExpandWhenActive(UIElement element, bool value);
    public static Type GetFilterToolbox(UIElement element);
    public static void SetFilterToolbox(UIElement element, Type value);
    public static void SetEnableNavigation(DependencyObject element, bool value);
    public static bool GetEnableNavigation(DependencyObject element);
    public static void SetEnableSelection(DependencyObject element, bool value);
    public static bool GetEnableSelection(DependencyObject element);
    public static void SetNewOnDoubleClick(DependencyObject element, bool value);
    public static bool GetNewOnDoubleClick(DependencyObject element);
    public static void SetFocusPresenterOnEnter(DependencyObject element, bool value);
    public static bool GetFocusPresenterOnEnter(DependencyObject element);
}
internal class JetBrains.UI.SrcView.LayoutDesigner.Behaviors.FilterToolboxBehavior : object {
    public static void Run(Lifetime lifetime, Type filterBy, FrameworkElement element);
    private static void OnActiveModelChanged(ILayoutDesigner designer, FrameworkElement element, Type filterBy, PropertyChangedEventArgs`1<IModelItem> e, IToolboxFilter& currentFilter);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Behaviors.FixedStateBehavior : object {
    public static void Run(Lifetime lifetime, FrameworkElement element);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Behaviors.FocusPresenterOnEnterBehavior : object {
    public static void Run(Lifetime lifetime, FrameworkElement element);
    private static void Handler(object sender, KeyEventArgs e);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Behaviors.NavigationBehavior : object {
    public static void Run(Lifetime lifetime, FrameworkElement container);
    private static void HandleDoubleLeftClick(object sender, MouseButtonEventArgs e);
    private static bool OnKeyDown(DependencyObject focusScope, KeyEventArgs e);
    private static bool TryHandleEnter(DependencyObject focusScope, KeyEventArgs e);
    private static bool TryHandleExpandCollapse(DependencyObject focusScope, KeyEventArgs e);
    private static bool TryHandleNavigation(DependencyObject focusScope, KeyEventArgs e);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Behaviors.NewOnDoubleClickBehavior : object {
    public static void Run(Lifetime lifetime, LayoutDesignerEditing value, FrameworkElement target);
    private static void TryAddIntoContext(MouseButtonEventArgs e, LayoutDesignerEditing value);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Behaviors.SelectionBehavior : object {
    public static void Run(Lifetime lifetime, FrameworkElement container);
    private static void OnPreviewMouseDown(object sender, MouseButtonEventArgs e);
    private static void OnFocusElementChanged(DependencyObject focusScope);
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Commands : object {
    public static RoutedUICommand GoToItem;
    public static RoutedUICommand ToGoParent;
    public static RoutedUICommand Expand;
    public static RoutedUICommand Collapse;
    private static Commands();
}
[LayoutDesignerComponentAttribute]
internal class JetBrains.UI.SrcView.LayoutDesigner.Components.AttributeTableBuilder : object {
    private IDictionary`2<Type, AttributeProvider> myProviders;
    private bool mySealed;
    [CompilerGeneratedAttribute]
private static Func`2<Type, AttributeProvider> CS$<>9__CachedAnonymousMethodDelegate1;
    public AttributeTableBuilder(Lifetime lifetime, IEnumerable`1<ILayoutDesignerElementDefinition> definitions);
    public sealed virtual void AddCustomAttributes(Type ownerType, Attribute[] attributes);
    public sealed virtual void AddCustomAttributes(Type ownerType, MemberDescriptor member, Attribute[] attributes);
    public sealed virtual void AddCustomAttributes(Type ownerType, MemberInfo member, Attribute[] attributes);
    private AttributeProvider GetProvider(Type ownerType);
    private void AttachToComponentModel(IEnumerable`1<ILayoutDesignerElementDefinition> definitions);
    private void DetachProviders();
    [CompilerGeneratedAttribute]
private static AttributeProvider <GetProvider>b__0(Type type);
}
[LayoutDesignerComponentAttribute]
internal class JetBrains.UI.SrcView.LayoutDesigner.Components.DesignerViewFactory : object {
    private IComponentContainer myContainer;
    private IPropertyEditorRegistry myPropertyEditorRegistry;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public Lifetime Lifetime { get; private set; }
    public DesignerViewFactory(Lifetime lifetime, IPropertyEditorRegistry propertyEditorRegistry, IComponentContainer container);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void set_Lifetime(Lifetime value);
    public sealed virtual IDesignerElementView CreateViewFor(IModelItem model);
    public sealed virtual IPropertyEditor CreateEditorFor(IModelProperty property);
    private Type TryGetByAttribute(IModelProperty property);
    private Type TryGetRegistered(IModelProperty property);
    private Type GetInvalid(IModelProperty property);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Components.IAttributeTableBuilder {
    public abstract virtual void AddCustomAttributes(Type ownerType, Attribute[] attributes);
    public abstract virtual void AddCustomAttributes(Type ownerType, MemberDescriptor member, Attribute[] attributes);
    public abstract virtual void AddCustomAttributes(Type ownerType, MemberInfo member, Attribute[] attributes);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Components.IDesignerViewFactory {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    public abstract virtual Lifetime get_Lifetime();
    [CanBeNullAttribute]
public abstract virtual IDesignerElementView CreateViewFor(IModelItem model);
    [NotNullAttribute]
public abstract virtual IPropertyEditor CreateEditorFor(IModelProperty property);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Components.ILayoutDesignerElementDefinition {
    [NotNullAttribute]
public Type Type { get; }
    [NotNullAttribute]
public string Category { get; }
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string Description { get; }
    public abstract virtual void Describe(IAttributeTableBuilder builder);
    public abstract virtual Type get_Type();
    public abstract virtual string get_Category();
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    [NotNullAttribute]
public abstract virtual object Activate();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Components.IModelManager {
    [CanBeNullAttribute]
public abstract virtual IModelItem TryGetModel(object instance);
    [CanBeNullAttribute]
public abstract virtual IModelItem`1<T> TryGetModel(T instance);
    [NotNullAttribute]
public abstract virtual IModelItem GetModel(object instance, IModelItem parent);
    [NotNullAttribute]
public abstract virtual IModelItem`1<T> GetModel(T instance, IModelItem parent);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Components.InvalidEditorException : Exception {
    public InvalidEditorException(string message);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Components.IPropertyEditorRegistry {
    public abstract virtual void AddEditor(Type propertyType, Type editorType);
    public abstract virtual Type TryGetEditor(Type propertyType);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Components.ISelectionManager {
    public ICommand SetSelectionCommand { get; }
    public ICommand ToggleSelectionCommand { get; }
    public Selection Selection { get; }
    public abstract virtual ICommand get_SetSelectionCommand();
    public abstract virtual ICommand get_ToggleSelectionCommand();
    public abstract virtual Selection get_Selection();
    public abstract virtual void SetSelection(IModelItem item);
    public abstract virtual void ToggleSelection(IModelItem item);
    public abstract virtual void ClearSelection();
}
[AttributeUsageAttribute("4")]
public class JetBrains.UI.SrcView.LayoutDesigner.Components.LayoutDesignerComponentAttribute : OptionsComponentAttribute {
}
[LayoutDesignerComponentAttribute]
internal class JetBrains.UI.SrcView.LayoutDesigner.Components.ModelManager : object {
    private static MethodInfo ourInstantiateMethod;
    private IDesignerViewFactory myViewFactory;
    private IDictionary`2<object, IModelItem> myModelCache;
    public ModelManager(IDesignerViewFactory viewFactory);
    private static ModelManager();
    public sealed virtual IModelItem TryGetModel(object instance);
    public sealed virtual IModelItem`1<T> TryGetModel(T instance);
    public sealed virtual IModelItem GetModel(object instance, IModelItem parent);
    public sealed virtual IModelItem`1<T> GetModel(T instance, IModelItem parent);
    private IModelItem CreateModel(object instance);
    [UsedImplicitlyAttribute]
private static IModelItem`1<T> Instantiate(T instance, IModelManager modelManager, IDesignerViewFactory viewFactory);
}
[ExtensionAttribute]
internal static class JetBrains.UI.SrcView.LayoutDesigner.Components.ModelManagerExtensions : object {
    [ExtensionAttribute]
public static void AfterElementCreated(IModelManager manager, object item);
}
[LayoutDesignerComponentAttribute]
internal class JetBrains.UI.SrcView.LayoutDesigner.Components.PropertyEditorRegistrar : object {
    private IPropertyEditorRegistry myRegistry;
    public PropertyEditorRegistrar(IPropertyEditorRegistry registry);
    private void RegisterAll();
}
[LayoutDesignerComponentAttribute]
internal class JetBrains.UI.SrcView.LayoutDesigner.Components.PropertyEditorRegistry : object {
    private IList`1<KeyValuePair`2<Type, Type>> myEntries;
    public sealed virtual void AddEditor(Type propertyType, Type editorType);
    public sealed virtual Type TryGetEditor(Type propertyType);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Components.Selection : object {
    private PropertyChangedEventHandler PropertyChanged;
    public static RoutedUICommand SetCommand;
    public static RoutedUICommand ToggleCommand;
    public static IModelItem None;
    private IModelItem myPrimary;
    private List`1<IModelItem> myExtended;
    public IModelItem Primary { get; public set; }
    public List`1<IModelItem> Extended { get; private set; }
    private static Selection();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public IModelItem get_Primary();
    public void set_Primary(IModelItem value);
    public List`1<IModelItem> get_Extended();
    private void set_Extended(List`1<IModelItem> value);
    public sealed virtual IEnumerator`1<IModelItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
[LayoutDesignerComponentAttribute]
internal class JetBrains.UI.SrcView.LayoutDesigner.Components.SelectionManager : AAutomation {
    private Lazy`1<Selection> myLazySelection;
    [CompilerGeneratedAttribute]
private ICommand <SetSelectionCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ToggleSelectionCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<Selection> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`1<IModelItem> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Action`1<IModelItem> CS$<>9__CachedAnonymousMethodDelegate5;
    public ICommand SetSelectionCommand { get; private set; }
    public ICommand ToggleSelectionCommand { get; private set; }
    public Selection Selection { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_SetSelectionCommand();
    [CompilerGeneratedAttribute]
private void set_SetSelectionCommand(ICommand value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_ToggleSelectionCommand();
    [CompilerGeneratedAttribute]
private void set_ToggleSelectionCommand(ICommand value);
    public sealed virtual Selection get_Selection();
    public sealed virtual void SetSelection(IModelItem item);
    public sealed virtual void ToggleSelection(IModelItem item);
    public sealed virtual void ClearSelection();
    [CompilerGeneratedAttribute]
private static Selection <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static void <SetSelection>b__2(IModelItem i);
    [CompilerGeneratedAttribute]
private static void <ClearSelection>b__4(IModelItem i);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.BreadcrumbsItem : AAutomation {
    [CompilerGeneratedAttribute]
private IHaveDisplayName <Model>k__BackingField;
    public IHaveDisplayName Model { get; private set; }
    public BreadcrumbsItem(IHaveDisplayName model);
    [CompilerGeneratedAttribute]
public IHaveDisplayName get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(IHaveDisplayName value);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.BreadcrumbsItemSeparator : object {
}
[TemplatePartAttribute]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.BreadcrumbsTrail : Control {
    private ItemsControl myItemsControl;
    public static DependencyProperty PathProperty;
    public static DependencyProperty GoToItemProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public IEnumerable`1<IHaveDisplayName> Path { get; public set; }
    public ICommand GoToItem { get; public set; }
    private static BreadcrumbsTrail();
    public IEnumerable`1<IHaveDisplayName> get_Path();
    public void set_Path(IEnumerable`1<IHaveDisplayName> value);
    public ICommand get_GoToItem();
    public void set_GoToItem(ICommand value);
    public virtual void OnApplyTemplate();
    private void UpdateItems();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Controls.ContentProperty : object {
    private static MethodInfo ourAddChildMethod;
    private static MethodInfo ourRemoveChildMethod;
    private static ContentProperty();
    public static DependencyProperty Register(string name);
    private static void OnContentChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Converters.BrowseablePropertiesFilter : object {
    [CompilerGeneratedAttribute]
private static Func`2<IModelProperty, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    [CompilerGeneratedAttribute]
private static bool <Convert>b__0(IModelProperty p);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Converters.ContainerItemToVisualChildConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Converters.ExpandabilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Converters.IndentConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Converters.NotConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Controls.DefaultIcon : object {
    public static void Override();
    public static void Override(Type type);
    public static IconId TryGetDefaultIconId(Type type);
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerElementViewExtensions : object {
    [ExtensionAttribute]
public static void AfterElementDropped(IDesignerElementView view, IDragInfo info, Dispatcher dispatcher);
    [ExtensionAttribute]
public static void AfterElementCreated(IDesignerElementView view);
}
[AttributeUsageAttribute("4")]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerIconAttribute : Attribute {
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    public IconId IconId { get; private set; }
    public DesignerIconAttribute(IconId iconId);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
private void set_IconId(IconId value);
}
[ContentPropertyAttribute("Content")]
[DefaultPropertyAttribute("Content")]
public abstract class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItem : Control {
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty HeaderTemplateSelectorProperty;
    public static DependencyProperty HeaderStringFormatProperty;
    public static DependencyProperty ContentProperty;
    public static DependencyProperty ContentTemplateProperty;
    public static DependencyProperty ContentTemplateSelectorProperty;
    public static DependencyProperty ContentStringFormatProperty;
    public static DependencyProperty IconIdProperty;
    public static DependencyProperty ModelProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsExpandableProperty;
    [CompilerGeneratedAttribute]
private ICompositeView <ActiveCompositeView>k__BackingField;
    [CategoryAttribute("Content")]
[LocalizabilityAttribute]
[BindableAttribute("True")]
public object Header { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public DataTemplate HeaderTemplate { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public DataTemplateSelector HeaderTemplateSelector { get; public set; }
    [CategoryAttribute("Content")]
[BindableAttribute("True")]
public string HeaderStringFormat { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public object Content { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public DataTemplate ContentTemplate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Content")]
[BindableAttribute("True")]
public DataTemplateSelector ContentTemplateSelector { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public string ContentStringFormat { get; public set; }
    public IconId IconId { get; public set; }
    public IModelItem Model { get; public set; }
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; public set; }
    public ICompositeView ActiveCompositeView { get; public set; }
    private static DesignerItem();
    public object get_Header();
    public void set_Header(object value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplateSelector get_HeaderTemplateSelector();
    public void set_HeaderTemplateSelector(DataTemplateSelector value);
    public string get_HeaderStringFormat();
    public void set_HeaderStringFormat(string value);
    public object get_Content();
    public void set_Content(object value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public DataTemplateSelector get_ContentTemplateSelector();
    public void set_ContentTemplateSelector(DataTemplateSelector value);
    public string get_ContentStringFormat();
    public void set_ContentStringFormat(string value);
    public IconId get_IconId();
    public void set_IconId(IconId value);
    public sealed virtual IModelItem get_Model();
    public sealed virtual void set_Model(IModelItem value);
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    public sealed virtual bool get_IsExpandable();
    public sealed virtual void set_IsExpandable(bool value);
    [CompilerGeneratedAttribute]
public virtual ICompositeView get_ActiveCompositeView();
    [CompilerGeneratedAttribute]
public virtual void set_ActiveCompositeView(ICompositeView value);
    public virtual void AfterElementCreated();
    public virtual void AfterElementMoved();
    private sealed virtual override bool JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementView.get_IsVisible();
    [CompilerGeneratedAttribute]
private void <AfterElementCreated>b__0();
    [CompilerGeneratedAttribute]
private void <AfterElementMoved>b__1();
}
public abstract class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItem`1 : DesignerItem {
    public IModelItem`1<T> Model { get; public set; }
    private static DesignerItem`1();
    public IModelItem`1<T> get_Model();
    public void set_Model(IModelItem`1<T> value);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItemChrome : HeaderedContentControl {
    public static DependencyProperty IconIdProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsExpandableProperty;
    public IconId IconId { get; public set; }
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; public set; }
    private static DesignerItemChrome();
    public IconId get_IconId();
    public void set_IconId(IconId value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_IsExpandable();
    public void set_IsExpandable(bool value);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItemNameBox : TextBox {
    public static DependencyProperty ItemNameProperty;
    public IUiProperty`1<string> ItemName { get; public set; }
    private static DesignerItemNameBox();
    public IUiProperty`1<string> get_ItemName();
    public void set_ItemName(IUiProperty`1<string> value);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItemPresenter : Decorator {
    public static DependencyProperty EmptyTemplateProperty;
    public static DependencyProperty ModelProperty;
    private IDisposable mySubscription;
    public IModelItem Model { get; public set; }
    public ControlTemplate EmptyTemplate { get; public set; }
    public UIElement Child { get; public set; }
    private static DesignerItemPresenter();
    private static void ModelChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public IModelItem get_Model();
    public void set_Model(IModelItem value);
    public ControlTemplate get_EmptyTemplate();
    public void set_EmptyTemplate(ControlTemplate value);
    public virtual UIElement get_Child();
    public virtual void set_Child(UIElement value);
    private void Subscribe(IModelItem newModel);
    private UIElement GetChild(bool preserveExisting);
    private void SetChild(UIElement child);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__0();
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItems : object {
    public static DependencyProperty ModelProperty;
    public static DependencyProperty LayoutDesignerProperty;
    private static DesignerItems();
    public static void SetModel(DependencyObject element, IModelItem value);
    public static IModelItem GetModel(DependencyObject element);
    public static void SetLayoutDesigner(DependencyObject element, ILayoutDesigner value);
    public static ILayoutDesigner GetLayoutDesigner(DependencyObject element);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItemsPresenter : ItemsControl {
    public static DependencyProperty AllowedItemTypeProperty;
    public static DependencyProperty HintTextProperty;
    public static DependencyProperty IsEmptyProperty;
    public IModelItemCollection ItemsSource { get; public set; }
    public Type AllowedItemType { get; public set; }
    public string HintText { get; public set; }
    public bool IsEmpty { get; public set; }
    private static DesignerItemsPresenter();
    public IModelItemCollection get_ItemsSource();
    public void set_ItemsSource(IModelItemCollection value);
    public Type get_AllowedItemType();
    public void set_AllowedItemType(Type value);
    public string get_HintText();
    public void set_HintText(string value);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDropTarget.DragOver(IDropInfo dropInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDropTarget.Drop(IDropInfo dropInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.StartDrag(IDragInfo dragInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.Dropping(IDropInfo dropInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.Dropped(IDropInfo dropInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.DragCancelled();
    protected virtual bool IsAllowedItem(object o);
    private sealed virtual override bool JetBrains.UI.SrcView.LayoutDesigner.Controls.ICompositeView.CanAdd(IEnumerable`1<object> items);
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Controls.ICompositeView.Add(IEnumerable`1<object> items, IModelItem referenceItem);
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Controls.ICompositeView.Delete(IEnumerable`1<IModelItem> items);
    private IModelItem FindModelToFocus(IList list, IModelItem model);
    [CompilerGeneratedAttribute]
private void <OnInitialized>b__0();
    [CompilerGeneratedAttribute]
private void <OnInitialized>b__1();
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerItemStyles : object {
    public static DependencyProperty IconIdProperty;
    public static DependencyProperty BorderProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty HeaderBackgroundProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsExpandableProperty;
    private static DesignerItemStyles();
    public static void SetIconId(DependencyObject element, ImageSource value);
    public static IconId GetIconId(DependencyObject element);
    public static void SetBorder(DependencyObject element, Brush value);
    public static Brush GetBorder(DependencyObject element);
    public static void SetBackground(DependencyObject element, Brush value);
    public static Brush GetBackground(DependencyObject element);
    public static void SetHeaderBackground(DependencyObject element, Brush value);
    public static Brush GetHeaderBackground(DependencyObject element);
    public static void SetIsExpanded(DependencyObject element, Brush value);
    public static Brush GetIsExpanded(DependencyObject element);
    public static void SetIsExpandable(DependencyObject element, Brush value);
    public static Brush GetIsExpandable(DependencyObject element);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.DesignerView : Control {
    public static DependencyProperty DesignerProperty;
    public static DependencyProperty ActiveModelProperty;
    public ILayoutDesigner Designer { get; public set; }
    public IModelItem ActiveModel { get; public set; }
    private static DesignerView();
    public ILayoutDesigner get_Designer();
    public void set_Designer(ILayoutDesigner value);
    public IModelItem get_ActiveModel();
    public void set_ActiveModel(IModelItem value);
}
[PropertyEditorForAttribute("System.Nullable`1<System.Boolean>")]
[PropertyEditorForAttribute("System.Boolean")]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.BooleanEditor : CheckBox {
    public static DependencyProperty PropertyProperty;
    public IModelProperty Property { get; public set; }
    private static BooleanEditor();
    public sealed virtual IModelProperty get_Property();
    public sealed virtual void set_Property(IModelProperty value);
    private void OnTogglePropertyValue(object sender, RoutedEventArgs e);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.DialogEditor : Control {
    public static DependencyProperty InlineContentProperty;
    public static DependencyProperty ExtendedContentProperty;
    public static DependencyProperty InlineContentTemplateProperty;
    public static DependencyProperty ExtendedContentTemplateProperty;
    [CompilerGeneratedAttribute]
private IModelProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ShowDialogCommand>k__BackingField;
    public object ExtendedContent { get; public set; }
    public object InlineContent { get; public set; }
    public DataTemplate ExtendedContentTemplate { get; public set; }
    public DataTemplate InlineContentTemplate { get; public set; }
    public IModelProperty Property { get; public set; }
    public ICommand ShowDialogCommand { get; private set; }
    private static DialogEditor();
    public object get_ExtendedContent();
    public void set_ExtendedContent(object value);
    public object get_InlineContent();
    public void set_InlineContent(object value);
    public DataTemplate get_ExtendedContentTemplate();
    public void set_ExtendedContentTemplate(DataTemplate value);
    public DataTemplate get_InlineContentTemplate();
    public void set_InlineContentTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
public sealed virtual IModelProperty get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Property(IModelProperty value);
    [CompilerGeneratedAttribute]
public ICommand get_ShowDialogCommand();
    [CompilerGeneratedAttribute]
private void set_ShowDialogCommand(ICommand value);
    private void ShowDialog(object parameter);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.EditButton : Button {
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.EditorDialogWindow : Window {
    protected virtual void OnClosed(EventArgs e);
}
[PropertyEditorForAttribute("System.Enum")]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.EnumEditor : ComboBox {
    public static DependencyProperty PropertyProperty;
    public IModelProperty Property { get; public set; }
    private static EnumEditor();
    public sealed virtual IModelProperty get_Property();
    public sealed virtual void set_Property(IModelProperty value);
    private void OnTogglePropertyValue(object sender, RoutedEventArgs e);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.ExtendedEditor : FrameworkElement {
    public static DependencyProperty InlineTemplateProperty;
    public static DependencyProperty ExtendedTemplateProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsExpandableProperty;
    [CompilerGeneratedAttribute]
private IModelProperty <Property>k__BackingField;
    public DataTemplate ExtendedTemplate { get; public set; }
    public DataTemplate InlineTemplate { get; public set; }
    public bool IsExpandable { get; public set; }
    public bool IsExpanded { get; public set; }
    public IModelProperty Property { get; public set; }
    private static ExtendedEditor();
    public sealed virtual DataTemplate get_ExtendedTemplate();
    public void set_ExtendedTemplate(DataTemplate value);
    public sealed virtual DataTemplate get_InlineTemplate();
    public void set_InlineTemplate(DataTemplate value);
    public sealed virtual bool get_IsExpandable();
    public sealed virtual void set_IsExpandable(bool value);
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IModelProperty get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Property(IModelProperty value);
    private void ClearValue(object sender, RoutedEventArgs e);
}
internal class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.InvalidEditor : TextBlock {
    public static DependencyProperty PropertyProperty;
    public IModelProperty Property { get; public set; }
    public InvalidEditor(string error);
    private static InvalidEditor();
    public sealed virtual IModelProperty get_Property();
    public sealed virtual void set_Property(IModelProperty value);
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.PropertyEditing : object {
    public static RoutedCommand ShowDialogEditor;
    private static PropertyEditing();
}
[AttributeUsageAttribute("4")]
internal class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.PropertyEditorForAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PropertyTypeName>k__BackingField;
    public string PropertyTypeName { get; private set; }
    public PropertyEditorForAttribute(Type type);
    [CompilerGeneratedAttribute]
public string get_PropertyTypeName();
    [CompilerGeneratedAttribute]
private void set_PropertyTypeName(string value);
}
[PropertyEditorForAttribute("System.String")]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.StringEditor : TextBox {
    public static DependencyProperty PropertyProperty;
    public IModelProperty`1<string> Property { get; public set; }
    private IModelProperty JetBrains.UI.SrcView.LayoutDesigner.Controls.IPropertyEditor.Property { get; private set; }
    private static StringEditor();
    public IModelProperty`1<string> get_Property();
    public void set_Property(IModelProperty`1<string> value);
    private sealed virtual override IModelProperty JetBrains.UI.SrcView.LayoutDesigner.Controls.IPropertyEditor.get_Property();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Controls.IPropertyEditor.set_Property(IModelProperty value);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.BooleanEditorResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.DialogEditorResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.EnumEditorResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.ExtendedEditorResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.InvalidEditorResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Editors.Themes.StringEditorResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.GenericDesigner : DesignerItem {
    public GenericDesigner(IModelItem model);
    private string GetDisplayName(object value);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.ICompositeView {
    public abstract virtual bool CanAdd(IEnumerable`1<object> items);
    public abstract virtual void Add(IEnumerable`1<object> items, IModelItem referenceItem);
    public abstract virtual void Delete(IEnumerable`1<IModelItem> items);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementView {
    public bool IsVisible { get; }
    public IModelItem Model { get; public set; }
    [CanBeNullAttribute]
public ICompositeView ActiveCompositeView { get; public set; }
    public abstract virtual bool get_IsVisible();
    public abstract virtual IModelItem get_Model();
    public abstract virtual void set_Model(IModelItem value);
    public abstract virtual ICompositeView get_ActiveCompositeView();
    public abstract virtual void set_ActiveCompositeView(ICompositeView value);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementViewCallbacks {
    public abstract virtual void AfterElementCreated();
    public abstract virtual void AfterElementMoved();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IDrillable {
    public abstract virtual bool CanDrilldown();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IExpandable {
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; public set; }
    public abstract virtual bool get_IsExpanded();
    public abstract virtual void set_IsExpanded(bool value);
    public abstract virtual bool get_IsExpandable();
    public abstract virtual void set_IsExpandable(bool value);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IExtendedPropertyEditor {
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; public set; }
    public DataTemplate InlineTemplate { get; }
    public DataTemplate ExtendedTemplate { get; }
    public abstract virtual bool get_IsExpanded();
    public abstract virtual void set_IsExpanded(bool value);
    public abstract virtual bool get_IsExpandable();
    public abstract virtual void set_IsExpandable(bool value);
    public abstract virtual DataTemplate get_InlineTemplate();
    public abstract virtual DataTemplate get_ExtendedTemplate();
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.InvalidDesigner : GenericDesigner {
    public InvalidDesigner(IModelItem model, string errorMessage);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IPropertyEditor {
    public IModelProperty Property { get; public set; }
    public abstract virtual IModelProperty get_Property();
    public abstract virtual void set_Property(IModelProperty value);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IToolboxFilter {
    public abstract virtual bool Accept(ILayoutDesignerElementDefinition definition);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IToolboxItemsSource {
    [NotNullAttribute]
public ICollection`1<IToolboxFilter> Filters { get; }
    public abstract virtual ICollection`1<IToolboxFilter> get_Filters();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Controls.IToolboxTool {
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.ModelPropertyPanel : PropertyPanel {
    public static DependencyProperty PropertyProperty;
    public IModelProperty Property { get; public set; }
    private static ModelPropertyPanel();
    public IModelProperty get_Property();
    public void set_Property(IModelProperty value);
    private void ClearValue(object sender, RoutedEventArgs e);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.ModelToPathConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ContentPropertyAttribute("Content")]
[DefaultPropertyAttribute("Content")]
[TemplatePartAttribute]
public abstract class JetBrains.UI.SrcView.LayoutDesigner.Controls.NamedDesignerItem : Control {
    public static DependencyProperty ContentProperty;
    public static DependencyProperty ContentTemplateProperty;
    public static DependencyProperty ContentTemplateSelectorProperty;
    public static DependencyProperty ContentStringFormatProperty;
    public static DependencyProperty IconIdProperty;
    public static DependencyProperty ModelProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsExpandableProperty;
    [CompilerGeneratedAttribute]
private TextBoxBase <TextBox>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompositeView <ActiveCompositeView>k__BackingField;
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public object Content { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Content")]
public DataTemplate ContentTemplate { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[CategoryAttribute("Content")]
[BindableAttribute("True")]
public DataTemplateSelector ContentTemplateSelector { get; public set; }
    [CategoryAttribute("Content")]
[BindableAttribute("True")]
public string ContentStringFormat { get; public set; }
    public IconId IconId { get; public set; }
    public IModelItem Model { get; public set; }
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; public set; }
    public IUiProperty`1<string> DisplayName { get; }
    public TextBoxBase TextBox { get; private set; }
    public ICompositeView ActiveCompositeView { get; public set; }
    private static NamedDesignerItem();
    public object get_Content();
    public void set_Content(object value);
    public DataTemplate get_ContentTemplate();
    public void set_ContentTemplate(DataTemplate value);
    public DataTemplateSelector get_ContentTemplateSelector();
    public void set_ContentTemplateSelector(DataTemplateSelector value);
    public string get_ContentStringFormat();
    public void set_ContentStringFormat(string value);
    public IconId get_IconId();
    public void set_IconId(IconId value);
    public sealed virtual IModelItem get_Model();
    public sealed virtual void set_Model(IModelItem value);
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    public sealed virtual bool get_IsExpandable();
    public sealed virtual void set_IsExpandable(bool value);
    public abstract virtual IUiProperty`1<string> get_DisplayName();
    [CompilerGeneratedAttribute]
public TextBoxBase get_TextBox();
    [CompilerGeneratedAttribute]
private void set_TextBox(TextBoxBase value);
    [CompilerGeneratedAttribute]
public virtual ICompositeView get_ActiveCompositeView();
    [CompilerGeneratedAttribute]
public virtual void set_ActiveCompositeView(ICompositeView value);
    public virtual void OnApplyTemplate();
    public sealed virtual bool CanDrilldown();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementViewCallbacks.AfterElementCreated();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementViewCallbacks.AfterElementMoved();
    private sealed virtual override bool JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementView.get_IsVisible();
    [CompilerGeneratedAttribute]
private void <JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementViewCallbacks.AfterElementCreated>b__0();
    [CompilerGeneratedAttribute]
private void <JetBrains.UI.SrcView.LayoutDesigner.Controls.IDesignerElementViewCallbacks.AfterElementMoved>b__1();
}
public abstract class JetBrains.UI.SrcView.LayoutDesigner.Controls.NamedDesignerItem`1 : NamedDesignerItem {
    public IModelItem`1<T> Model { get; public set; }
    private static NamedDesignerItem`1();
    public IModelItem`1<T> get_Model();
    public void set_Model(IModelItem`1<T> value);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.PropertyGrid : Control {
    public static DependencyProperty SelectionProperty;
    public static DependencyProperty LabelColumnWidthProperty;
    public static DependencyProperty EditorColumnWidthProperty;
    public GridLength LabelColumnWidth { get; public set; }
    public GridLength EditorColumnWidth { get; public set; }
    public Selection Selection { get; public set; }
    private static PropertyGrid();
    public GridLength get_LabelColumnWidth();
    public void set_LabelColumnWidth(GridLength value);
    public GridLength get_EditorColumnWidth();
    public void set_EditorColumnWidth(GridLength value);
    public Selection get_Selection();
    public void set_Selection(Selection value);
}
[ContentPropertyAttribute("InlineContent")]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.PropertyPanel : Control {
    public static DependencyProperty LabelColumnWidthProperty;
    public static DependencyProperty EditorColumnWidthProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty InlineContentProperty;
    public static DependencyProperty ExtendedContentProperty;
    public static DependencyProperty InlineContentTemplateProperty;
    public static DependencyProperty ExtendedContentTemplateProperty;
    public GridLength LabelColumnWidth { get; public set; }
    public GridLength EditorColumnWidth { get; public set; }
    public string Label { get; public set; }
    [BindableAttribute("True")]
public object ExtendedContent { get; public set; }
    [BindableAttribute("True")]
public object InlineContent { get; public set; }
    public DataTemplate ExtendedContentTemplate { get; public set; }
    public DataTemplate InlineContentTemplate { get; public set; }
    protected IEnumerator LogicalChildren { get; }
    private static PropertyPanel();
    private static void ContentChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public GridLength get_LabelColumnWidth();
    public void set_LabelColumnWidth(GridLength value);
    public GridLength get_EditorColumnWidth();
    public void set_EditorColumnWidth(GridLength value);
    public string get_Label();
    public void set_Label(string value);
    public object get_ExtendedContent();
    public void set_ExtendedContent(object value);
    public object get_InlineContent();
    public void set_InlineContent(object value);
    public DataTemplate get_ExtendedContentTemplate();
    public void set_ExtendedContentTemplate(DataTemplate value);
    public DataTemplate get_InlineContentTemplate();
    public void set_InlineContentTemplate(DataTemplate value);
    protected virtual IEnumerator get_LogicalChildren();
    public virtual void SetLogicalChild(object oldValue, object newValue);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.PropertySelection : object {
    private static DependencyPropertyKey ourKeyStrokeHandlersPropertyKey;
    public static DependencyProperty KeyStrokeHandlersProperty;
    public static DependencyProperty KeyPressTargetProperty;
    public static RoutedEvent ToggleValueEvent;
    public static RoutedEvent ClearValueEvent;
    private static DependencyPropertyKey ourNavigationHandlersPropertyKey;
    public static DependencyProperty NavigationHandlersProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IsExpandableProperty;
    public static DependencyProperty IsNavigationStopProperty;
    private static PropertySelection();
    internal static void SetKeyStrokeHandlers(FrameworkElement element, KeyStrokeHandlers value);
    internal static KeyStrokeHandlers GetKeyStrokeHandlers(FrameworkElement element);
    internal static KeyStrokeHandlers GetKeyStrokeHandlers(DependencyObject o, object value);
    private static void OnKeyDownTargetChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    public static void SetKeyPressTarget(UIElement element, FrameworkElement value);
    public static FrameworkElement GetKeyPressTarget(UIElement element);
    public static void AddToggleValueHandler(FrameworkElement target, RoutedEventHandler eventHandler);
    public static void RemoveToggleValueHandler(FrameworkElement target, RoutedEventHandler eventHandler);
    public static void AddClearValueHandler(FrameworkElement target, RoutedEventHandler eventHandler);
    public static void RemoveClearValueHandler(FrameworkElement target, RoutedEventHandler eventHandler);
    internal static void SetNavigationHandlers(FrameworkElement element, NavigationHandlers value);
    internal static NavigationHandlers GetNavigationHandlers(FrameworkElement element);
    internal static NavigationHandlers GetNavigationHandlers(DependencyObject o);
    internal static void SetIsSelected(FrameworkElement element, bool value);
    internal static bool GetIsSelected(FrameworkElement element);
    internal static void SetIsExpanded(FrameworkElement element, bool value);
    internal static bool GetIsExpanded(FrameworkElement element);
    internal static void SetIsExpandable(FrameworkElement element, bool value);
    internal static bool GetIsExpandable(FrameworkElement element);
    private static void OnIsNavigationStopChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    internal static void SetIsNavigationStop(FrameworkElement element, KeyStrokeHandlers value);
    internal static bool GetIsNavigationStop(FrameworkElement element);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.PropertyTree : ItemsControl {
    private FrameworkElement myCurrentSelection;
    public void Select(FrameworkElement child);
    public static void SelectChild(FrameworkElement child);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Themes.ModelPropertyPanelResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Themes.ToolboxResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.ToggleContentButton : ToggleButton {
    private static ToggleContentButton();
}
[TemplatePartAttribute]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.Toolbox : ItemsControl {
    public static DependencyProperty ModelManagerProperty;
    public IModelManager ModelManager { get; public set; }
    private static Toolbox();
    public IModelManager get_ModelManager();
    public void set_ModelManager(IModelManager value);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.StartDrag(IDragInfo dragInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.Dropping(IDropInfo dropInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.Dropped(IDropInfo dropInfo);
    private sealed virtual override void JetBrains.UI.Wpf.DragDrop.IDragSource.DragCancelled();
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.ToolboxCategory : AAutomation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <Tools>k__BackingField;
    public string Name { get; public set; }
    public IEnumerable Tools { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEnumerable get_Tools();
    [CompilerGeneratedAttribute]
public void set_Tools(IEnumerable value);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.ToolboxItemsSource : object {
    private IBindableView`1<IToolboxTool> myView;
    private IBindableCollection`1<IToolboxFilter> myFilters;
    [CompilerGeneratedAttribute]
private static Func`2<ILayoutDesignerElementDefinition, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ILayoutDesignerElementDefinition, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [NotNullAttribute]
public ICollection`1<IToolboxFilter> Filters { get; }
    public int Count { get; }
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    public IBindableView RootView { get; }
    public IToolboxTool Item { get; }
    public ToolboxItemsSource(Lifetime lifetime, IEnumerable`1<ILayoutDesignerElementDefinition> definitions);
    public sealed virtual ICollection`1<IToolboxFilter> get_Filters();
    private IEnumerable`1<ILayoutDesignerElementDefinition> FilterNonBrowsable(IEnumerable`1<ILayoutDesignerElementDefinition> definitions);
    private static IToolboxTool ToCategory(string categoryName, IEnumerable`1<ToolboxTool> tools);
    public sealed virtual IEnumerator`1<IToolboxTool> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<IToolboxTool> GetEnumeratorUnsafe();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual ISync get_Lock();
    public sealed virtual IBindableView get_RootView();
    public sealed virtual IToolboxTool get_Item(int index);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    [CompilerGeneratedAttribute]
private static string <FilterNonBrowsable>b__0(ILayoutDesignerElementDefinition def);
    [CompilerGeneratedAttribute]
private static bool <FilterNonBrowsable>b__1(ILayoutDesignerElementDefinition def);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Controls.ToolboxTool : object {
    private ILayoutDesignerElementDefinition myDefinition;
    public string Category { get; }
    public string Name { get; }
    public string Description { get; }
    public IconId IconId { get; }
    public ToolboxTool(ILayoutDesignerElementDefinition definition);
    public string get_Category();
    public string get_Name();
    public string get_Description();
    public IconId get_IconId();
    public object CreateItem();
}
public class JetBrains.UI.SrcView.LayoutDesigner.DebugConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.ILayoutDesigner {
    public ISimpleSignal ModelChanged { get; }
    public ISignal`1<IModelItem> ModelDeleted { get; }
    public IModelManager ModelManager { get; }
    public ISelectionManager SelectionManager { get; }
    public ILayoutDesignerSerializer Serializer { get; }
    public IToolboxItemsSource ToolboxItems { get; }
    public LayoutDesignerNavigation Navigate { get; }
    public LayoutDesignerEditing Edit { get; }
    public IProperty`1<IModelItem> RootModel { get; }
    public IProperty`1<IModelItem> ActiveModel { get; }
    public abstract virtual ISimpleSignal get_ModelChanged();
    public abstract virtual ISignal`1<IModelItem> get_ModelDeleted();
    public abstract virtual IModelManager get_ModelManager();
    public abstract virtual ISelectionManager get_SelectionManager();
    public abstract virtual ILayoutDesignerSerializer get_Serializer();
    public abstract virtual IToolboxItemsSource get_ToolboxItems();
    public abstract virtual LayoutDesignerNavigation get_Navigate();
    public abstract virtual LayoutDesignerEditing get_Edit();
    public abstract virtual IProperty`1<IModelItem> get_RootModel();
    public abstract virtual IProperty`1<IModelItem> get_ActiveModel();
    public abstract virtual void Load(object instance);
}
public abstract class JetBrains.UI.SrcView.LayoutDesigner.LayoutDesigner : object {
    private IToolboxItemsSource myToolboxItems;
    private IDisposable mySubscription;
    protected Lifetime myLifetime;
    private IEnumerable`1<ILayoutDesignerElementDefinition> myLayoutDesignerElementDefinitions;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ModelChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IModelItem> <ModelDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IModelItem> <RootModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IModelItem> <ActiveModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelManager <ModelManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ILayoutDesignerSerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private ISelectionManager <SelectionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutDesignerNavigation <Navigate>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutDesignerEditing <Edit>k__BackingField;
    public ISimpleSignal ModelChanged { get; private set; }
    public ISignal`1<IModelItem> ModelDeleted { get; private set; }
    public IProperty`1<IModelItem> RootModel { get; private set; }
    public IProperty`1<IModelItem> ActiveModel { get; private set; }
    public IModelManager ModelManager { get; private set; }
    public ILayoutDesignerSerializer Serializer { get; public set; }
    public ISelectionManager SelectionManager { get; private set; }
    public IToolboxItemsSource ToolboxItems { get; }
    public LayoutDesignerNavigation Navigate { get; private set; }
    public LayoutDesignerEditing Edit { get; private set; }
    public LayoutDesigner(Lifetime lifetime, IModelManager modelManager, ILayoutDesignerSerializer serializer, IEnumerable`1<ILayoutDesignerElementDefinition> toolboxItems);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ModelChanged();
    [CompilerGeneratedAttribute]
private void set_ModelChanged(ISimpleSignal value);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IModelItem> get_ModelDeleted();
    [CompilerGeneratedAttribute]
private void set_ModelDeleted(ISignal`1<IModelItem> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IModelItem> get_RootModel();
    [CompilerGeneratedAttribute]
private void set_RootModel(IProperty`1<IModelItem> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IModelItem> get_ActiveModel();
    [CompilerGeneratedAttribute]
private void set_ActiveModel(IProperty`1<IModelItem> value);
    [CompilerGeneratedAttribute]
public sealed virtual IModelManager get_ModelManager();
    [CompilerGeneratedAttribute]
private void set_ModelManager(IModelManager value);
    [CompilerGeneratedAttribute]
public sealed virtual ILayoutDesignerSerializer get_Serializer();
    [CompilerGeneratedAttribute]
public void set_Serializer(ILayoutDesignerSerializer value);
    [CompilerGeneratedAttribute]
public sealed virtual ISelectionManager get_SelectionManager();
    [CompilerGeneratedAttribute]
private void set_SelectionManager(ISelectionManager value);
    public sealed virtual IToolboxItemsSource get_ToolboxItems();
    [CompilerGeneratedAttribute]
public sealed virtual LayoutDesignerNavigation get_Navigate();
    [CompilerGeneratedAttribute]
private void set_Navigate(LayoutDesignerNavigation value);
    [CompilerGeneratedAttribute]
public sealed virtual LayoutDesignerEditing get_Edit();
    [CompilerGeneratedAttribute]
private void set_Edit(LayoutDesignerEditing value);
    public virtual void Load(object instance);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(string propertyName);
}
public class JetBrains.UI.SrcView.LayoutDesigner.LayoutDesignerEditing : object {
    private ILayoutDesigner myDesigner;
    private Clipboard myClipboard;
    [CompilerGeneratedAttribute]
private ICommand <Copy>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Paste>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Cut>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Delete>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Add>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IModelItem, object> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<IModelItem, IDesignerElementView> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<DependencyObject, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    public ICommand Copy { get; private set; }
    public ICommand Paste { get; private set; }
    public ICommand Cut { get; private set; }
    public ICommand Delete { get; private set; }
    public ICommand Add { get; private set; }
    private Selection Selection { get; }
    public LayoutDesignerEditing(ILayoutDesigner designer);
    [CompilerGeneratedAttribute]
public ICommand get_Copy();
    [CompilerGeneratedAttribute]
private void set_Copy(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Paste();
    [CompilerGeneratedAttribute]
private void set_Paste(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Cut();
    [CompilerGeneratedAttribute]
private void set_Cut(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Delete();
    [CompilerGeneratedAttribute]
private void set_Delete(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Add();
    [CompilerGeneratedAttribute]
private void set_Add(ICommand value);
    private Selection get_Selection();
    private bool CanCopy(object parameter);
    private void OnCopy(object parameter);
    private bool CanPaste(object parameter);
    private bool CanPasteTo(IDesignerElementView view, IEnumerable`1<object> items);
    private void OnPaste(object parameter);
    private bool CanCut(object parameter);
    private void OnCut(object parameter);
    private bool CanDelete(object parameter);
    private void OnDelete(object parameter);
    private bool CanAdd(IEnumerable`1<object> items);
    private void OnAdd(IEnumerable`1<object> items);
    [CompilerGeneratedAttribute]
private bool <CanCopy>b__0(IModelItem x);
    [CompilerGeneratedAttribute]
private static object <OnCopy>b__2(IModelItem x);
    [CompilerGeneratedAttribute]
private static IDesignerElementView <CanPaste>b__6(IModelItem x);
    [CompilerGeneratedAttribute]
private bool <CanDelete>b__c(IModelItem m);
    [CompilerGeneratedAttribute]
private static bool <OnDelete>b__d(DependencyObject v);
}
public class JetBrains.UI.SrcView.LayoutDesigner.LayoutDesignerNavigation : AAutomation {
    private ILayoutDesigner myDesigner;
    private RingBuffer`1<IModelItem> myBuffer;
    [CompilerGeneratedAttribute]
private ICommand <ToItem>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ToParent>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ToPrev>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ToNext>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ToRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Collapse>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Expand>k__BackingField;
    public ICommand ToItem { get; private set; }
    public ICommand ToParent { get; private set; }
    public ICommand ToPrev { get; private set; }
    public ICommand ToNext { get; private set; }
    public ICommand ToRoot { get; private set; }
    public ICommand Collapse { get; private set; }
    public ICommand Expand { get; private set; }
    public LayoutDesignerNavigation(ILayoutDesigner designer, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public ICommand get_ToItem();
    [CompilerGeneratedAttribute]
private void set_ToItem(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_ToParent();
    [CompilerGeneratedAttribute]
private void set_ToParent(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_ToPrev();
    [CompilerGeneratedAttribute]
private void set_ToPrev(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_ToNext();
    [CompilerGeneratedAttribute]
private void set_ToNext(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_ToRoot();
    [CompilerGeneratedAttribute]
private void set_ToRoot(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Collapse();
    [CompilerGeneratedAttribute]
private void set_Collapse(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_Expand();
    [CompilerGeneratedAttribute]
private void set_Expand(ICommand value);
    private bool CanCollapseExpand(IModelItem model, bool expand);
    private void DoCollapseExpand(IModelItem model, bool expand);
    private bool CanGoTo(IModelItem model);
    public void To(IModelItem model, bool setFocus, bool clearHistory);
    private void FixSelection(bool setFocus, IModelItem model);
    private bool CanGoToParent(object parameter);
    private void GoToParent(object parameter);
    private bool CanGoToPrev(object parameter);
    private void GoToPrev(object parameter);
    private bool CanGoToNext(object parameter);
    private void GoToNext(object parameter);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(IModelItem o);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1(IModelItem i);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(IModelItem i);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__3(IModelItem i);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(IModelItem i);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Model.DelegateCommand : object {
    private Func`2<object, bool> myCanExecute;
    private Action`1<object> myOnExecute;
    private EventHandler CanExecuteChanged;
    [CompilerGeneratedAttribute]
private static Func`2<object, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    public DelegateCommand(Action handler);
    public DelegateCommand(Action`1<object> onExecute);
    public DelegateCommand(Func`2<object, bool> canExecute, Action`1<object> onExecute);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__4(object _);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Model.DelegateCommand`1 : DelegateCommand {
    public DelegateCommand`1(Action`1<T> handler);
    public DelegateCommand`1(Func`2<T, bool> canExecute, Action`1<T> onExecute);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IHaveDisplayName {
    public IUiProperty`1<string> DisplayName { get; }
    public abstract virtual IUiProperty`1<string> get_DisplayName();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem {
    public IModelManager ModelManager { get; }
    public IModelItem Parent { get; public set; }
    public IDesignerElementView View { get; }
    public object Value { get; public set; }
    public bool IsSelected { get; public set; }
    public IEnumerable`1<IModelProperty> Properties { get; }
    public IDictionary`2<string, IModelProperty> PropertyDictionary { get; }
    public abstract virtual IModelManager get_ModelManager();
    public abstract virtual IModelItem get_Parent();
    public abstract virtual void set_Parent(IModelItem value);
    public abstract virtual IDesignerElementView get_View();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
    public abstract virtual IEnumerable`1<IModelProperty> get_Properties();
    public abstract virtual IDictionary`2<string, IModelProperty> get_PropertyDictionary();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItemCollection {
    public IModelManager ModelManager { get; }
    public IModelItem Parent { get; }
    public abstract virtual IModelManager get_ModelManager();
    public abstract virtual IModelItem get_Parent();
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IModelProperty {
    public string Name { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public Type PropertyType { get; }
    public IPropertyEditor EditorView { get; }
    public AttributeCollection Attributes { get; }
    public object Value { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual bool get_IsBrowsable();
    public abstract virtual Type get_PropertyType();
    public abstract virtual IPropertyEditor get_EditorView();
    public abstract virtual AttributeCollection get_Attributes();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual bool CanResetValue();
    public abstract virtual void ResetValue();
    public abstract virtual object GetEditor(Type editorBaseType);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IModelProperty`1 {
    public T Value { get; public set; }
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IUiProperty`1 {
    public T Value { get; public set; }
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
}
public interface JetBrains.UI.SrcView.LayoutDesigner.Model.IUntypedProperty {
    public object Value { get; public set; }
    public bool IsReadOnly { get; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual bool get_IsReadOnly();
}
public class JetBrains.UI.SrcView.LayoutDesigner.Model.ModelItem`1 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private IModelManager myModelManager;
    private IDesignerViewFactory myViewFactory;
    private IDesignerElementView myView;
    private ModelPropertyDictionary<T> myProperties;
    private bool myIsSelected;
    private T myValue;
    [CompilerGeneratedAttribute]
private IModelItem <Parent>k__BackingField;
    public T Value { get; public set; }
    public bool IsSelected { get; public set; }
    public IModelItem Parent { get; public set; }
    public IModelManager ModelManager { get; }
    public IDesignerElementView View { get; }
    public IEnumerable`1<IModelProperty> Properties { get; }
    public IDictionary`2<string, IModelProperty> PropertyDictionary { get; }
    private object JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem.Value { get; private set; }
    public ModelItem`1(IModelManager modelManager, IDesignerViewFactory viewFactory, T instance);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual T get_Value();
    public void set_Value(T value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IModelItem get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IModelItem value);
    public sealed virtual IModelManager get_ModelManager();
    public sealed virtual IDesignerElementView get_View();
    public sealed virtual IEnumerable`1<IModelProperty> get_Properties();
    public sealed virtual IDictionary`2<string, IModelProperty> get_PropertyDictionary();
    private sealed virtual override object JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem.get_Value();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem.set_Value(object value);
    public virtual string ToString();
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
[DebuggerDisplayAttribute("{Name}: Count({Count})")]
[DefaultMemberAttribute("Item")]
public class JetBrains.UI.SrcView.LayoutDesigner.Model.ModelItemCollection`1 : ModelProperty`1<IList`1<T>> {
    private OwnedCollection`1<T, T> myCollection;
    private IDisposable mySubscription;
    public int Count { get; }
    public IModelItem`1<T> Item { get; public set; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public ModelItemCollection`1(PropertyDescriptor inner, IModelItem owner, IDesignerViewFactory viewFactory);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override IEnumerator`1<IModelItem> System.Collections.Generic.IEnumerable<JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem>.GetEnumerator();
    public sealed virtual IEnumerator`1<IModelItem`1<T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(IModelItem`1<T> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IModelItem`1<T> item);
    private sealed virtual override void System.Collections.Generic.ICollection<JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem<T>>.CopyTo(IModelItem`1[] array, int arrayIndex);
    public sealed virtual bool Remove(IModelItem`1<T> item);
    public sealed virtual int get_Count();
    public sealed virtual int IndexOf(IModelItem`1<T> item);
    public sealed virtual void Insert(int index, IModelItem`1<T> item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IModelItem`1<T> get_Item(int index);
    public sealed virtual void set_Item(int index, IModelItem`1<T> value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual int Add(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(IModelItem`1<T> item, string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.LayoutDesigner.Model.ModelItemExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IModelItem> Ancestors(IModelItem model);
    [ExtensionAttribute]
public static IModelItem`1<T> AsTyped(IModelItem model);
    [ExtensionAttribute]
public static IModelProperty`1<TProperty> Wrap(IModelItem`1<T> model, Expression`1<Func`2<T, TProperty>> selector);
    [ExtensionAttribute]
public static ModelItemCollection`1<TItem> Wrap(IModelItem`1<T> model, Expression`1<Func`2<T, IList`1<TItem>>> selector);
}
[DebuggerDisplayAttribute("{Name}: {Value}")]
public class JetBrains.UI.SrcView.LayoutDesigner.Model.ModelProperty`1 : PropertyDescriptor {
    private PropertyChangedEventHandler PropertyChanged;
    private PropertyDescriptor myInner;
    private IDesignerViewFactory myViewFactory;
    private IDesignerElementView myView;
    private IPropertyEditor myEditorView;
    private ModelPropertyDictionary<T> myProperties;
    private bool myIsSelected;
    [CompilerGeneratedAttribute]
private IModelItem <Parent>k__BackingField;
    public IModelManager ModelManager { get; }
    public IModelItem Parent { get; public set; }
    public bool IsSelected { get; public set; }
    public T Value { get; public set; }
    public IDesignerElementView View { get; }
    public IPropertyEditor EditorView { get; }
    public IEnumerable`1<IModelProperty> Properties { get; }
    public IDictionary`2<string, IModelProperty> PropertyDictionary { get; }
    public string DisplayName { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    private object JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem.Value { get; private set; }
    private object JetBrains.UI.SrcView.LayoutDesigner.Model.IUntypedProperty.Value { get; private set; }
    private object JetBrains.UI.SrcView.LayoutDesigner.Model.IModelProperty.Value { get; private set; }
    public ModelProperty`1(PropertyDescriptor inner, IModelItem owner, IDesignerViewFactory viewFactory);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual IModelManager get_ModelManager();
    [CompilerGeneratedAttribute]
public sealed virtual IModelItem get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(IModelItem value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual T get_Value();
    public sealed virtual void set_Value(T value);
    public sealed virtual IDesignerElementView get_View();
    public sealed virtual IPropertyEditor get_EditorView();
    public sealed virtual IEnumerable`1<IModelProperty> get_Properties();
    public sealed virtual IDictionary`2<string, IModelProperty> get_PropertyDictionary();
    public virtual string get_DisplayName();
    public sealed virtual bool CanResetValue();
    public sealed virtual void ResetValue();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    private string GetDisplayName();
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    private sealed virtual override object JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem.get_Value();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Model.IModelItem.set_Value(object value);
    private sealed virtual override object JetBrains.UI.SrcView.LayoutDesigner.Model.IUntypedProperty.get_Value();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Model.IUntypedProperty.set_Value(object value);
    private sealed virtual override object JetBrains.UI.SrcView.LayoutDesigner.Model.IModelProperty.get_Value();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Model.IModelProperty.set_Value(object value);
}
internal abstract class JetBrains.UI.SrcView.LayoutDesigner.Model.ModelPropertyDictionary`1 : Dictionary`2<string, IModelProperty> {
    private static MethodInfo ourInstantiateMethod;
    private static MethodInfo ourInstantiateCollectionMethod;
    private DisposableSubscriptions<T> mySubscriptions;
    protected ModelPropertyDictionary`1(T owner, IDesignerViewFactory viewFactory);
    private static ModelPropertyDictionary`1();
    protected virtual void SubscribeToChanges(T owner, IModelProperty modelProperty);
    protected abstract virtual void InvokePropertyChanged(T owner, string propertyName);
    private static IModelProperty CreateModelProperty(PropertyDescriptor descriptor, IModelItem owner, IDesignerViewFactory viewFactory);
    public sealed virtual void Dispose();
    [UsedImplicitlyAttribute]
private static IModelProperty`1<T> Instantiate(PropertyDescriptor descriptor, IModelItem owner, IDesignerViewFactory viewFactory);
    [UsedImplicitlyAttribute]
private static ModelItemCollection`1<T> InstantiateCollection(PropertyDescriptor descriptor, IModelItem owner, IDesignerViewFactory viewFactory);
}
[AttributeUsageAttribute("384")]
public class JetBrains.UI.SrcView.LayoutDesigner.Model.TrimWhitespacesAttribute : Attribute {
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.LayoutDesigner.Model.TrimWhitespacesAttributeExtensions : object {
    [ExtensionAttribute]
public static bool ShouldTrimWhitespaces(IModelProperty`1<string> property);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Model.UiProperty`1 : object {
    private PropertyChangedEventHandler PropertyChanged;
    private T myValue;
    private bool myIsReadOnly;
    public T Value { get; public set; }
    public bool IsReadOnly { get; private set; }
    private object JetBrains.UI.SrcView.LayoutDesigner.Model.IUntypedProperty.Value { get; private set; }
    public UiProperty`1(T initialValue, bool isReadOnly);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual T get_Value();
    public sealed virtual void set_Value(T value);
    public sealed virtual bool get_IsReadOnly();
    private void set_IsReadOnly(bool value);
    private sealed virtual override object JetBrains.UI.SrcView.LayoutDesigner.Model.IUntypedProperty.get_Value();
    private sealed virtual override void JetBrains.UI.SrcView.LayoutDesigner.Model.IUntypedProperty.set_Value(object value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Themes.Brushes : object {
    public static string DesignerViewElementBorderBrushKey;
    public static string DesignerViewElementBackgroundBrushKey;
    public static string DesignerViewElementHeaderBackgroundBrushKey;
    public static string DesignerViewElementSelectedHeaderBackgroundBrushKey;
    public static string DesignerViewElementSelectedBorderBrushKey;
    public static string DesignerViewElementHoveredHeaderBackgroundBrushKey;
    public static string DesignerViewElementHoveredBorderBrushKey;
    public static string DesignerViewElementHoveredBackgroundBrushKey;
    public static string DesignerViewElementCurrentLocationBackgroundBrushKey;
    public static string DesignerViewElementCurrentContextBackgroundBrushKey;
    public static string DesignerViewElementCaptionBrushKey;
    public static string DesignerViewBackgroundBrushKey;
    public static string DesignerViewStatusBarBackgroundBrushKey;
    public static string DesignerViewToggleAllButtonBrushKey;
    public static string DesignerViewToggleAllButtonMouseOverBrushKey;
    public static string DesignerViewToggleAllPressedBrushKey;
    public static string PropertyGridTextBrushKey;
    public static string PropertyGridSelectedForegroundBrushKey;
    public static string PropertyGridSelectedBackgroundBrushKey;
    public static string PropertyGridBackgroundBrushKey;
    public static string PropertyGridBorderBrushKey;
    public static string PropertyGridPaneBrushKey;
    public static string PropertyGridToolBarItemHoverBackgroundBrushKey;
    public static string PropertyGridToolBarItemHoverBorderBrushKey;
    public static string PropertyGridToolBarItemSelectedBackgroundBrushKey;
    public static string PropertyGridToolBarItemSelectedBorderBrushKey;
    public static string PropertyGridToolBarBackgroundBrushKey;
    public static string PropertyGridToolBarSeparatorBrushKey;
    public static string PropertyGridToolBarTextBoxBorderBrushKey;
    public static string ContextMenuIconAreaBrushKey;
    public static string ContextMenuBorderBrushKey;
    public static string ContextMenuTextBrushKey;
    public static string ContextMenuTextDisabledBrushKey;
    public static string ContextMenuItemHoverBorderBrushKey;
    public static string ContextMenuSeparatorBrushKey;
    public static string ContextMenuTextHoverBrushKey;
    public static string ContextMenuTextSelectedBrushKey;
    public static string ContextMenuBackgroundBrushKey;
    public static string ContextMenuItemHoverBrushKey;
    private static ResourceDictionary _defaultBrushes;
    public static Brush DesignerViewElementBorder { get; }
    public static Brush DesignerViewElementBackground { get; }
    public static Brush DesignerViewElementHeaderBackground { get; }
    public static Brush DesignerViewElementSelectedHeaderBackground { get; }
    public static Brush DesignerViewElementSelectedBorder { get; }
    public static Brush DesignerViewElementHoveredHeaderBackground { get; }
    public static Brush DesignerViewElementHoveredBorder { get; }
    public static Brush DesignerViewElementHoveredBackground { get; }
    public static Brush DesignerViewElementCurrentLocationBackground { get; }
    public static Brush DesignerViewElementCurrentContextBackground { get; }
    public static Brush DesignerViewElementCaption { get; }
    public static Brush DesignerViewBackground { get; }
    public static Brush DesignerViewStatusBarBackground { get; }
    public static Brush DesignerViewToggleAllButton { get; }
    public static Brush DesignerViewToggleAllButtonMouseOver { get; }
    public static Brush DesignerViewToggleAllPressed { get; }
    public static Brush PropertyGridText { get; }
    public static Brush PropertyGridSelectedForeground { get; }
    public static Brush PropertyGridSelectedBackground { get; }
    public static Brush PropertyGridBackground { get; }
    public static Brush PropertyGridBorder { get; }
    public static Brush PropertyGridPane { get; }
    public static Brush PropertyGridToolBarItemHoverBackground { get; }
    public static Brush PropertyGridToolBarItemHoverBorder { get; }
    public static Brush PropertyGridToolBarItemSelectedBackground { get; }
    public static Brush PropertyGridToolBarItemSelectedBorder { get; }
    public static Brush PropertyGridToolBarBackground { get; }
    public static Brush PropertyGridToolBarSeparator { get; }
    public static Brush PropertyGridToolBarTextBoxBorder { get; }
    public static Brush ContextMenuIconArea { get; }
    public static Brush ContextMenuBorder { get; }
    public static Brush ContextMenuText { get; }
    public static Brush ContextMenuTextDisabled { get; }
    public static Brush ContextMenuItemHoverBorder { get; }
    public static Brush ContextMenuSeparator { get; }
    public static Brush ContextMenuTextHover { get; }
    public static Brush ContextMenuTextSelected { get; }
    public static Brush ContextMenuBackground { get; }
    public static Brush ContextMenuItemHover { get; }
    private static ResourceDictionary DefaultBrushes { get; }
    public static Brush get_DesignerViewElementBorder();
    public static Brush get_DesignerViewElementBackground();
    public static Brush get_DesignerViewElementHeaderBackground();
    public static Brush get_DesignerViewElementSelectedHeaderBackground();
    public static Brush get_DesignerViewElementSelectedBorder();
    public static Brush get_DesignerViewElementHoveredHeaderBackground();
    public static Brush get_DesignerViewElementHoveredBorder();
    public static Brush get_DesignerViewElementHoveredBackground();
    public static Brush get_DesignerViewElementCurrentLocationBackground();
    public static Brush get_DesignerViewElementCurrentContextBackground();
    public static Brush get_DesignerViewElementCaption();
    public static Brush get_DesignerViewBackground();
    public static Brush get_DesignerViewStatusBarBackground();
    public static Brush get_DesignerViewToggleAllButton();
    public static Brush get_DesignerViewToggleAllButtonMouseOver();
    public static Brush get_DesignerViewToggleAllPressed();
    public static Brush get_PropertyGridText();
    public static Brush get_PropertyGridSelectedForeground();
    public static Brush get_PropertyGridSelectedBackground();
    public static Brush get_PropertyGridBackground();
    public static Brush get_PropertyGridBorder();
    public static Brush get_PropertyGridPane();
    public static Brush get_PropertyGridToolBarItemHoverBackground();
    public static Brush get_PropertyGridToolBarItemHoverBorder();
    public static Brush get_PropertyGridToolBarItemSelectedBackground();
    public static Brush get_PropertyGridToolBarItemSelectedBorder();
    public static Brush get_PropertyGridToolBarBackground();
    public static Brush get_PropertyGridToolBarSeparator();
    public static Brush get_PropertyGridToolBarTextBoxBorder();
    public static Brush get_ContextMenuIconArea();
    public static Brush get_ContextMenuBorder();
    public static Brush get_ContextMenuText();
    public static Brush get_ContextMenuTextDisabled();
    public static Brush get_ContextMenuItemHoverBorder();
    public static Brush get_ContextMenuSeparator();
    public static Brush get_ContextMenuTextHover();
    public static Brush get_ContextMenuTextSelected();
    public static Brush get_ContextMenuBackground();
    public static Brush get_ContextMenuItemHover();
    private static ResourceDictionary get_DefaultBrushes();
    private static ResourceDictionary LoadDefaultBrushes();
    private static Brush GetBrush(string key);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Themes.BrushesResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public static class JetBrains.UI.SrcView.LayoutDesigner.Themes.Colors : object {
    public static string DesignerViewElementBorderColorKey;
    public static string DesignerViewElementBackgroundColorKey;
    public static string DesignerViewElementHeaderBackgroundColorKey;
    public static string DesignerViewElementSelectedHeaderBackgroundColorKey;
    public static string DesignerViewElementSelectedBorderColorKey;
    public static string DesignerViewElementHoveredHeaverBackgroundColorKey;
    public static string DesignerViewElementHoveredBorderColorKey;
    public static string DesignerViewElementHoveredBackgroundColorKey;
    public static string DesignerViewElementCurrentLocationBackgroundColorKey;
    public static string DesignerViewElementCurrentContextBackgroundColorKey;
    public static string DesignerViewElementCaptionColorKey;
    public static string DesignerViewStatusBarBackgroundColorKey;
    public static string DesignerViewBackgroundColorKey;
    public static string DesignerViewToggleAllButtonColorKey;
    public static string DesignerViewToggleAllButtonMouseOverColorKey;
    public static string DesignerViewToggleAllPressedColorKey;
    public static string PropertyGridTextColorKey;
    public static string PropertyGridSelectedForegroundColorKey;
    public static string PropertyGridSelectedBackgroundColorKey;
    public static string PropertyGridBackgroundColorKey;
    public static string PropertyGridBorderColorKey;
    public static string PropertyGridPaneColorKey;
    public static string PropertyGridToolBarItemHoverBackgroundColorKey;
    public static string PropertyGridToolBarItemHoverBorderColorKey;
    public static string PropertyGridToolBarItemSelectedBackgroundColorKey;
    public static string PropertyGridToolBarItemSelectedBorderColorKey;
    public static string PropertyGridToolBarBackgroundColorKey;
    public static string PropertyGridToolBarSeparatorColorKey;
    public static string PropertyGridToolBarTextBoxBorderColorKey;
    public static string ContextMenuBackgroundGradientBeginColorKey;
    public static string ContextMenuBackgroundGradientEndColorKey;
    public static string ContextMenuBorderColorKey;
    public static string ContextMenuIconAreaColorKey;
    public static string ContextMenuMouseOverBeginColorKey;
    public static string ContextMenuMouseOverMiddle1ColorKey;
    public static string ContextMenuMouseOverMiddle2ColorKey;
    public static string ContextMenuMouseOverEndColorKey;
    public static string ContextMenuMouseOverBorderColorKey;
    public static string ContextMenuItemTextColorKey;
    public static string ContextMenuItemTextHoverColorKey;
    public static string ContextMenuItemTextSelectedColorKey;
    public static string ContextMenuItemTextDisabledColorKey;
    public static string ContextMenuSeparatorColorKey;
    public static string FontSizeKey;
    public static string FontFamilyKey;
    public static string FontWeightKey;
    private static ResourceDictionary _defaultColors;
    public static Color DesignerViewElementBorder { get; }
    public static Color DesignerViewElementBackground { get; }
    public static Color DesignerViewElementHeaderBackground { get; }
    public static Color DesignerViewElementSelectedHeaderBackground { get; }
    public static Color DesignerViewElementSelectedBorder { get; }
    public static Color DesignerViewElementHoveredHeaderBackground { get; }
    public static Color DesignerViewElementHoveredBorder { get; }
    public static Color DesignerViewElementHoveredBackground { get; }
    public static Color DesignerViewElementCurrentLocationBackground { get; }
    public static Color DesignerViewElementCurrentContextBackground { get; }
    public static Color DesignerViewElementCaption { get; }
    public static Color DesignerViewBackground { get; }
    public static Color DesignerViewStatusBarBackground { get; }
    public static Color DesignerViewToggleAllButton { get; }
    public static Color DesignerViewToggleAllButtonMouseOver { get; }
    public static Color DesignerViewToggleAllPressed { get; }
    public static Color PropertyGridText { get; }
    public static Color PropertyGridSelectedForeground { get; }
    public static Color PropertyGridSelectedBackground { get; }
    public static Color PropertyGridBackground { get; }
    public static Color PropertyGridBorder { get; }
    public static Color PropertyGridPane { get; }
    public static Color PropertyGridToolBarItemHoverBackground { get; }
    public static Color PropertyGridToolBarItemHoverBorder { get; }
    public static Color PropertyGridToolBarItemSelectedBackground { get; }
    public static Color PropertyGridToolBarItemSelectedBorder { get; }
    public static Color PropertyGridToolBarBackground { get; }
    public static Color PropertyGridToolBarSeparator { get; }
    public static Color PropertyGridToolBarTextBoxBorder { get; }
    public static Color ContextMenuBackgroundGradientBegin { get; }
    public static Color ContextMenuBackgroundGradientEnd { get; }
    public static Color ContextMenuBorder { get; }
    public static Color ContextMenuIconArea { get; }
    public static Color ContextMenuMouseOverBegin { get; }
    public static Color ContextMenuMouseOverMiddle1 { get; }
    public static Color ContextMenuMouseOverMiddle2 { get; }
    public static Color ContextMenuMouseOverEnd { get; }
    public static Color ContextMenuMouseOverBorder { get; }
    public static Color ContextMenuItemText { get; }
    public static Color ContextMenuItemTextHover { get; }
    public static Color ContextMenuItemTextSelected { get; }
    public static Color ContextMenuItemTextDisabled { get; }
    public static Color ContextMenuSeparator { get; }
    public static FontFamily FontFamily { get; }
    public static double FontSize { get; }
    public static FontWeight FontWeight { get; }
    private static ResourceDictionary DefaultColors { get; }
    public static Color get_DesignerViewElementBorder();
    public static Color get_DesignerViewElementBackground();
    public static Color get_DesignerViewElementHeaderBackground();
    public static Color get_DesignerViewElementSelectedHeaderBackground();
    public static Color get_DesignerViewElementSelectedBorder();
    public static Color get_DesignerViewElementHoveredHeaderBackground();
    public static Color get_DesignerViewElementHoveredBorder();
    public static Color get_DesignerViewElementHoveredBackground();
    public static Color get_DesignerViewElementCurrentLocationBackground();
    public static Color get_DesignerViewElementCurrentContextBackground();
    public static Color get_DesignerViewElementCaption();
    public static Color get_DesignerViewBackground();
    public static Color get_DesignerViewStatusBarBackground();
    public static Color get_DesignerViewToggleAllButton();
    public static Color get_DesignerViewToggleAllButtonMouseOver();
    public static Color get_DesignerViewToggleAllPressed();
    public static Color get_PropertyGridText();
    public static Color get_PropertyGridSelectedForeground();
    public static Color get_PropertyGridSelectedBackground();
    public static Color get_PropertyGridBackground();
    public static Color get_PropertyGridBorder();
    public static Color get_PropertyGridPane();
    public static Color get_PropertyGridToolBarItemHoverBackground();
    public static Color get_PropertyGridToolBarItemHoverBorder();
    public static Color get_PropertyGridToolBarItemSelectedBackground();
    public static Color get_PropertyGridToolBarItemSelectedBorder();
    public static Color get_PropertyGridToolBarBackground();
    public static Color get_PropertyGridToolBarSeparator();
    public static Color get_PropertyGridToolBarTextBoxBorder();
    public static Color get_ContextMenuBackgroundGradientBegin();
    public static Color get_ContextMenuBackgroundGradientEnd();
    public static Color get_ContextMenuBorder();
    public static Color get_ContextMenuIconArea();
    public static Color get_ContextMenuMouseOverBegin();
    public static Color get_ContextMenuMouseOverMiddle1();
    public static Color get_ContextMenuMouseOverMiddle2();
    public static Color get_ContextMenuMouseOverEnd();
    public static Color get_ContextMenuMouseOverBorder();
    public static Color get_ContextMenuItemText();
    public static Color get_ContextMenuItemTextHover();
    public static Color get_ContextMenuItemTextSelected();
    public static Color get_ContextMenuItemTextDisabled();
    public static Color get_ContextMenuSeparator();
    public static FontFamily get_FontFamily();
    public static double get_FontSize();
    public static FontWeight get_FontWeight();
    private static ResourceDictionary get_DefaultColors();
    private static ResourceDictionary LoadDefaultColors();
    private static Brush GetBrush(string colorKey);
    private static Color GetColor(string colorKey);
    private static FontFamily GetFontFamily(string key);
    private static double GetFontSize(string key);
    private static FontWeight GetFontWeight(string key);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Themes.ColorsResourceDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.LayoutDesigner.Themes.GenericDictionary : ResourceDictionary {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.License2.EvaluationNotificationHandler : object {
    [CompilerGeneratedAttribute]
private static Func`2<ILicensedEntity, string> CS$<>9__CachedAnonymousMethodDelegate18;
    public EvaluationNotificationHandler(Lifetime lifetime, License2CheckComponent licenseCheckComponent, IThreading threading, IWindowBranding windowBranding, FeedbackPartsContainer feedbackParts, ISettingsStore settingsStore, OpensUri opensUri, ITheming theming, UserNotifications userNotifications, IMainWindow mainWindow);
    private List`1<Uri> GetFeedbackUris(List`1<ILicensedEntity> entities);
    private static string GetProductNames(IList`1<ILicensedEntity> entities);
    public virtual string GetSubmitFeedbackUrl(ILicensedEntity entity, bool isLicensed);
    [CompilerGeneratedAttribute]
private Uri <GetFeedbackUris>b__16(ILicensedEntity e);
    [CompilerGeneratedAttribute]
private static string <GetProductNames>b__17(ILicensedEntity e);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Notifications.StatusBarNotifications : object {
    public StatusBarNotifications(Lifetime lifetime, IStatusBar statusBar, UserNotifications notifications, IActionManager actionManager, IMainWindow mainWindow, IWindowsHookManager hookManager, IThreading threading, ITooltipManager tooltipManager);
    private JetPopupMenu BuildMenu(Lifetime lifetime, JetPopupMenu menu, IEnumerable`1<SimpleMenuItem> items);
    private IAutomation GetAutomation(ICollection`1<INotification> notifications);
    private static SimpleMenuItem GetMenuItem(INotification notification);
    private static IconId GetIconId(INotification notification);
}
public class JetBrains.UI.SrcView.OptionPages.ActivityTracking.ProductFeedbackPageBase : SimpleOptionsPage {
    public static string PID;
    public ProductFeedbackPageBase(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("ProductFeedback", "Product Feedback", "JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons/ProductUsagePage")]
internal class JetBrains.UI.SrcView.OptionPages.ActivityTracking.ReSharperFeedbackPage : ProductFeedbackPageBase {
    public ReSharperFeedbackPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.OptionPages.WebProxyCustomSettingsView : ViewControl`1<WebProxyCustomSettingsViewModel> {
    [CompilerGeneratedAttribute]
private static Func`2<int, string> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<string, int> CS$<>9__CachedAnonymousMethodDelegate1a;
    protected virtual UIElement OnRenderView(Lifetime lifetime, WebProxyCustomSettingsViewModel automation);
    [CompilerGeneratedAttribute]
private static string <OnRenderView>b__15(int n);
    [CompilerGeneratedAttribute]
private static int <OnRenderView>b__16(string s);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.OptionPages.WebProxyCustomUsingView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.OptionsDialog.CompositeOptionPageView : ViewControl`1<CompositeOptionPage> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, CompositeOptionPage automation);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.UI.SrcView.OptionsDialog.SettingsLayersDialogOwnerInteractive : SettingsLayersDialogOwner {
    [NotNullAttribute]
private Action`1<WindowModality> myShow;
    public SettingsLayersDialogOwnerInteractive(Lifetime lifetimeComponent, SettingsLayersDialogAutomationFactory settingsLayersDialogAutomationFactory, IShellLocks locks, IMainWindow mainwin, ISettingsLogger settingsLogger, IActionBarManager actionBarManager, IconIdOwnersMap iconowners, IStatusBarColorsManager statusBarColorsManager, FontsManager fontsman, IUIApplication environment, IApplicationModalState applicationModalState);
    public virtual void Show(WindowModality modality);
}
[ShellComponentAttribute("1", "1", "2")]
public class JetBrains.UI.SrcView.OptionsDialog.SettingsLayersDialogToolbarProvider : object {
    public sealed virtual IAutomation CreateToolBar(IActionBarManager actionBarManager, string sActionGroupId);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.OptionsDialog.SimpleOptions.SimpleOptionsPageInternalView : ViewControl`1<SimpleOptionsPageInternal> {
    private OptionsControlBuilder myOptionsControlBuilder;
    protected virtual UIElement OnRenderView(Lifetime lifetime, SimpleOptionsPageInternal automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.OptionsDialog.SimpleOptions.SimpleOptionsPageView : UserControl {
    internal Grid myGrid;
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.UI.SrcView.PopupLayout.MainWindowPopupWindowContextInteractive : MainWindowPopupWindowContext {
    private Lifetime myLifetime;
    [CanBeNullAttribute]
private IWindowsHookManager myWindowsHookManager;
    [CanBeNullAttribute]
private IActionManager myActionManager;
    [CanBeNullAttribute]
private IMainWindow myMainWindow;
    private PopupWindowContextSource mySource;
    [CanBeNullAttribute]
private MainWindowCentered myCentered;
    [CanBeNullAttribute]
private MainWindowCenteredCorner myCenteredCorner;
    public MainWindowPopupWindowContextInteractive(Lifetime lifetime, DataContexts contexts, IMainWindow mainWindow, IWindowsHookManager windowsHookManager, IActionManager actionManager);
    protected virtual PopupWindowContextSource GetSourceCore();
    [NotNullAttribute]
protected virtual IPopupWindowContext CreateCore(Lifetime lifetime);
    [NotNullAttribute]
protected virtual IPopupWindowContext CreateCenteredCore(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private PopupWindowContextSource <.ctor>b__1(IDataContext ctx);
}
[ActionGroupAttribute("1")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerActionBarActionGroup : object {
    public ProcessExplorerActionBarActionGroup(ProcessExplorerActionBarAssemblyExplorerActionGroup assemblyExplorerActionGroup, ProcessExplorerShowProcessTreeActionHandler showProcessHierarchyAction, ProcessExplorerShowClrTreeActionHandler groupByClrAction, ProcessExplorerShowAllProcessesActionHandler showNativeProcessesAction, ProcessExplorerShowAllModulesActionHandler showNativeModulesAction, Separator sep2, ProcessExplorerFindProcessActionHandler findProcessByWindowAction, ProcessExplorerRefreshActionHandler refreshAction);
}
[ActionGroupAttribute("2")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerActionBarAssemblyExplorerActionGroup : object {
}
public abstract class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerAssemblyPathsActionBase : object {
    protected string SingleItemText { get; }
    protected string MultipleItemsText { get; }
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual string get_SingleItemText();
    protected abstract virtual string get_MultipleItemsText();
    protected abstract virtual void Execute(IList`1<FileSystemPath> paths, IDataContext context);
    protected virtual bool ExtraCheck(IDataContext context);
    [CanBeNullAttribute]
private static IList`1<FileSystemPath> GetAssemblyPaths(IDataContext context);
}
public abstract class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerCheckableActionBase : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
    protected abstract virtual bool GetPropertyValue(ProcessExplorer processExplorer);
    protected abstract virtual void Execute(ProcessExplorer processExplorer);
}
[ActionGroupAttribute("0")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerContextMenuActionGroup : object {
    public ProcessExplorerContextMenuActionGroup(ProcessExplorerContextMenuFileActionGroup fileActionGroup);
}
[ActionGroupAttribute("0")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerContextMenuFileActionGroup : object {
    public ProcessExplorerContextMenuFileActionGroup(ProcessExplorerCopyItemFullPathActionHandler processExplorerCopyItemFullPathActionHandler);
}
[ActionAttribute("Copy Full Path")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerCopyItemFullPathActionHandler : ProcessExplorerPathActionBase {
    protected virtual void PathAction(FileSystemPath path);
}
[ActionAttribute("Find Process by Window")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerFindProcessActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerPathActionBase : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual void PathAction(FileSystemPath path);
    [CanBeNullAttribute]
private FileSystemPath GetPath(IDataContext context);
}
[ActionAttribute("Refresh")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerRefreshActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Show Native Modules")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerShowAllModulesActionHandler : ProcessExplorerCheckableActionBase {
    protected virtual bool GetPropertyValue(ProcessExplorer processExplorer);
    protected virtual void Execute(ProcessExplorer processExplorer);
}
[ActionAttribute("Show Native Processes")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerShowAllProcessesActionHandler : ProcessExplorerCheckableActionBase {
    protected virtual bool GetPropertyValue(ProcessExplorer processExplorer);
    protected virtual void Execute(ProcessExplorer processExplorer);
}
[ActionAttribute("Group by CLR")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerShowClrTreeActionHandler : ProcessExplorerCheckableActionBase {
    protected virtual bool GetPropertyValue(ProcessExplorer processExplorer);
    protected virtual void Execute(ProcessExplorer processExplorer);
}
[ActionAttribute("Show Process Hierarchy")]
public class JetBrains.UI.SrcView.ProcessExplorer.Actions.ProcessExplorerShowProcessTreeActionHandler : ProcessExplorerCheckableActionBase {
    protected virtual bool GetPropertyValue(ProcessExplorer processExplorer);
    protected virtual void Execute(ProcessExplorer processExplorer);
}
public abstract class JetBrains.UI.SrcView.ProcessExplorer.AProcessTreeItem : object {
    protected static TextStyle DimmedTextStyle;
    [CompilerGeneratedAttribute]
private ProcessTreeCellAutomation <NameColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessTreeCellAutomation <PathColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessTreeCellAutomation <FlagsColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IProcessTreeItem> <Children>k__BackingField;
    public ProcessTreeCellAutomation NameColumn { get; protected set; }
    public ProcessTreeCellAutomation PathColumn { get; protected set; }
    public ProcessTreeCellAutomation FlagsColumn { get; protected set; }
    public IList`1<IProcessTreeItem> Children { get; private set; }
    public IProcessExplorerData Data { get; }
    private static AProcessTreeItem();
    [CompilerGeneratedAttribute]
public sealed virtual ProcessTreeCellAutomation get_NameColumn();
    [CompilerGeneratedAttribute]
protected void set_NameColumn(ProcessTreeCellAutomation value);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessTreeCellAutomation get_PathColumn();
    [CompilerGeneratedAttribute]
protected void set_PathColumn(ProcessTreeCellAutomation value);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessTreeCellAutomation get_FlagsColumn();
    [CompilerGeneratedAttribute]
protected void set_FlagsColumn(ProcessTreeCellAutomation value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IProcessTreeItem> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(IList`1<IProcessTreeItem> value);
    public abstract virtual IProcessExplorerData get_Data();
}
public static class JetBrains.UI.SrcView.ProcessExplorer.ETW.ClrEtw : object {
    public static Guid RuntimeProviderGuid;
    public static Guid RundownProviderGuid;
    private static ClrEtw();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrAppDomainRecord : EtwClrRecordBase {
    [CompilerGeneratedAttribute]
private ulong <AppDomainId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <AppDomainFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppDomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <AppDomainIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ClrInstanceId>k__BackingField;
    public ulong AppDomainId { get; private set; }
    public UInt32 AppDomainFlags { get; private set; }
    public string AppDomainName { get; private set; }
    public UInt32 AppDomainIndex { get; private set; }
    public ushort ClrInstanceId { get; private set; }
    public EtwClrAppDomainRecord(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public ulong get_AppDomainId();
    [CompilerGeneratedAttribute]
private void set_AppDomainId(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_AppDomainFlags();
    [CompilerGeneratedAttribute]
private void set_AppDomainFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_AppDomainName();
    [CompilerGeneratedAttribute]
private void set_AppDomainName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_AppDomainIndex();
    [CompilerGeneratedAttribute]
private void set_AppDomainIndex(UInt32 value);
    [CompilerGeneratedAttribute]
public ushort get_ClrInstanceId();
    [CompilerGeneratedAttribute]
private void set_ClrInstanceId(ushort value);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrAssemblyRecord : EtwClrRecordBase {
    [CompilerGeneratedAttribute]
private ulong <AssemblyId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AppDomainId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <BindingId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <AssemblyFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedAssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ClrInstanceId>k__BackingField;
    public ulong AssemblyId { get; private set; }
    public ulong AppDomainId { get; private set; }
    public ulong BindingId { get; private set; }
    public UInt32 AssemblyFlags { get; private set; }
    public string FullyQualifiedAssemblyName { get; private set; }
    public ushort ClrInstanceId { get; private set; }
    public EtwClrAssemblyRecord(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public ulong get_AssemblyId();
    [CompilerGeneratedAttribute]
private void set_AssemblyId(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_AppDomainId();
    [CompilerGeneratedAttribute]
private void set_AppDomainId(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_BindingId();
    [CompilerGeneratedAttribute]
private void set_BindingId(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_AssemblyFlags();
    [CompilerGeneratedAttribute]
private void set_AssemblyFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedAssemblyName();
    [CompilerGeneratedAttribute]
private void set_FullyQualifiedAssemblyName(string value);
    [CompilerGeneratedAttribute]
public ushort get_ClrInstanceId();
    [CompilerGeneratedAttribute]
private void set_ClrInstanceId(ushort value);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrDcStartCompleteRecord_V0 : EtwClrRecordBase {
    public EtwClrDcStartCompleteRecord_V0(EVENT_RECORD record);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrDcStartRecord : EtwClrRecordBase {
    public ushort ClrInstanceId;
    public EtwClrDcStartRecord(EVENT_RECORD record);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrDomainModuleRecord : EtwClrRecordBase {
    [CompilerGeneratedAttribute]
private ulong <ModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AssemblyId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AppDomainId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Reserved1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleILPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleNativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ClrInstanceId>k__BackingField;
    public ulong ModuleId { get; private set; }
    public ulong AssemblyId { get; private set; }
    public ulong AppDomainId { get; private set; }
    public UInt32 ModuleFlags { get; private set; }
    public UInt32 Reserved1 { get; private set; }
    public string ModuleILPath { get; private set; }
    public string ModuleNativePath { get; private set; }
    public ushort ClrInstanceId { get; private set; }
    public EtwClrDomainModuleRecord(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public ulong get_ModuleId();
    [CompilerGeneratedAttribute]
private void set_ModuleId(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_AssemblyId();
    [CompilerGeneratedAttribute]
private void set_AssemblyId(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_AppDomainId();
    [CompilerGeneratedAttribute]
private void set_AppDomainId(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleFlags();
    [CompilerGeneratedAttribute]
private void set_ModuleFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Reserved1();
    [CompilerGeneratedAttribute]
private void set_Reserved1(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ModuleILPath();
    [CompilerGeneratedAttribute]
private void set_ModuleILPath(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleNativePath();
    [CompilerGeneratedAttribute]
private void set_ModuleNativePath(string value);
    [CompilerGeneratedAttribute]
public ushort get_ClrInstanceId();
    [CompilerGeneratedAttribute]
private void set_ClrInstanceId(ushort value);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrModuleRecord_V0 : EtwClrRecordBase {
    [CompilerGeneratedAttribute]
private ulong <ModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AssemblyId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Reserved1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleILPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleNativePath>k__BackingField;
    public ulong ModuleId { get; private set; }
    public ulong AssemblyId { get; private set; }
    public UInt32 ModuleFlags { get; private set; }
    public UInt32 Reserved1 { get; private set; }
    public string ModuleILPath { get; private set; }
    public string ModuleNativePath { get; private set; }
    public EtwClrModuleRecord_V0(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public ulong get_ModuleId();
    [CompilerGeneratedAttribute]
private void set_ModuleId(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_AssemblyId();
    [CompilerGeneratedAttribute]
private void set_AssemblyId(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleFlags();
    [CompilerGeneratedAttribute]
private void set_ModuleFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Reserved1();
    [CompilerGeneratedAttribute]
private void set_Reserved1(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ModuleILPath();
    [CompilerGeneratedAttribute]
private void set_ModuleILPath(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleNativePath();
    [CompilerGeneratedAttribute]
private void set_ModuleNativePath(string value);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrModuleRecord_V1 : EtwClrModuleRecord_V0 {
    [CompilerGeneratedAttribute]
private ushort <ClrInstanceId>k__BackingField;
    public ushort ClrInstanceId { get; private set; }
    public EtwClrModuleRecord_V1(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public ushort get_ClrInstanceId();
    [CompilerGeneratedAttribute]
private void set_ClrInstanceId(ushort value);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrModuleRecord_V2 : EtwClrModuleRecord_V1 {
    [CompilerGeneratedAttribute]
private Guid <ManagedPdbSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ManagedPdbAge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedPdbBuildPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <NativePdbSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <NativePdbAge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NativePdbBuildPath>k__BackingField;
    public Guid ManagedPdbSignature { get; private set; }
    public UInt32 ManagedPdbAge { get; private set; }
    public string ManagedPdbBuildPath { get; private set; }
    public Guid NativePdbSignature { get; private set; }
    public UInt32 NativePdbAge { get; private set; }
    public string NativePdbBuildPath { get; private set; }
    public EtwClrModuleRecord_V2(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public Guid get_ManagedPdbSignature();
    [CompilerGeneratedAttribute]
private void set_ManagedPdbSignature(Guid value);
    [CompilerGeneratedAttribute]
public UInt32 get_ManagedPdbAge();
    [CompilerGeneratedAttribute]
private void set_ManagedPdbAge(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ManagedPdbBuildPath();
    [CompilerGeneratedAttribute]
private void set_ManagedPdbBuildPath(string value);
    [CompilerGeneratedAttribute]
public Guid get_NativePdbSignature();
    [CompilerGeneratedAttribute]
private void set_NativePdbSignature(Guid value);
    [CompilerGeneratedAttribute]
public UInt32 get_NativePdbAge();
    [CompilerGeneratedAttribute]
private void set_NativePdbAge(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_NativePdbBuildPath();
    [CompilerGeneratedAttribute]
private void set_NativePdbBuildPath(string value);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrRecordBase : object {
    private Void* myCurDataPtr;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <EventVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <EventChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <EventLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <EventOpcode>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EventTask>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EventKeyword>k__BackingField;
    public int ProcessId { get; private set; }
    public ushort EventId { get; private set; }
    public byte EventVersion { get; private set; }
    public byte EventChannel { get; private set; }
    public byte EventLevel { get; private set; }
    public byte EventOpcode { get; private set; }
    public ushort EventTask { get; private set; }
    public ulong EventKeyword { get; private set; }
    public EtwClrRecordBase(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
private void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public ushort get_EventId();
    [CompilerGeneratedAttribute]
private void set_EventId(ushort value);
    [CompilerGeneratedAttribute]
public byte get_EventVersion();
    [CompilerGeneratedAttribute]
private void set_EventVersion(byte value);
    [CompilerGeneratedAttribute]
public byte get_EventChannel();
    [CompilerGeneratedAttribute]
private void set_EventChannel(byte value);
    [CompilerGeneratedAttribute]
public byte get_EventLevel();
    [CompilerGeneratedAttribute]
private void set_EventLevel(byte value);
    [CompilerGeneratedAttribute]
public byte get_EventOpcode();
    [CompilerGeneratedAttribute]
private void set_EventOpcode(byte value);
    [CompilerGeneratedAttribute]
public ushort get_EventTask();
    [CompilerGeneratedAttribute]
private void set_EventTask(ushort value);
    [CompilerGeneratedAttribute]
public ulong get_EventKeyword();
    [CompilerGeneratedAttribute]
private void set_EventKeyword(ulong value);
    protected byte ReadByte();
    protected ushort ReadUInt16();
    protected UInt32 ReadUInt32();
    protected ulong ReadUInt64();
    protected string ReadUnicodeString();
    protected Guid ReadGuid();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrRuntimeRecord : EtwClrRecordBase {
    [CompilerGeneratedAttribute]
private ushort <ClrInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Sku>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <BclMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <BclMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <BclBuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <BclQfeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <VmMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <VmMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <VmBuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <VmQfeNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StartupFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <StartupMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ComObjectGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeDllPath>k__BackingField;
    public ushort ClrInstanceId { get; private set; }
    public ushort Sku { get; private set; }
    public ushort BclMajorVersion { get; private set; }
    public ushort BclMinorVersion { get; private set; }
    public ushort BclBuildNumber { get; private set; }
    public ushort BclQfeNumber { get; private set; }
    public ushort VmMajorVersion { get; private set; }
    public ushort VmMinorVersion { get; private set; }
    public ushort VmBuildNumber { get; private set; }
    public ushort VmQfeNumber { get; private set; }
    public UInt32 StartupFlags { get; private set; }
    public byte StartupMode { get; private set; }
    public string CommandLine { get; private set; }
    public Guid ComObjectGuid { get; private set; }
    public string RuntimeDllPath { get; private set; }
    public EtwClrRuntimeRecord(EVENT_RECORD record);
    [CompilerGeneratedAttribute]
public ushort get_ClrInstanceId();
    [CompilerGeneratedAttribute]
private void set_ClrInstanceId(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_Sku();
    [CompilerGeneratedAttribute]
private void set_Sku(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_BclMajorVersion();
    [CompilerGeneratedAttribute]
private void set_BclMajorVersion(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_BclMinorVersion();
    [CompilerGeneratedAttribute]
private void set_BclMinorVersion(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_BclBuildNumber();
    [CompilerGeneratedAttribute]
private void set_BclBuildNumber(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_BclQfeNumber();
    [CompilerGeneratedAttribute]
private void set_BclQfeNumber(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_VmMajorVersion();
    [CompilerGeneratedAttribute]
private void set_VmMajorVersion(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_VmMinorVersion();
    [CompilerGeneratedAttribute]
private void set_VmMinorVersion(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_VmBuildNumber();
    [CompilerGeneratedAttribute]
private void set_VmBuildNumber(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_VmQfeNumber();
    [CompilerGeneratedAttribute]
private void set_VmQfeNumber(ushort value);
    [CompilerGeneratedAttribute]
public UInt32 get_StartupFlags();
    [CompilerGeneratedAttribute]
private void set_StartupFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public byte get_StartupMode();
    [CompilerGeneratedAttribute]
private void set_StartupMode(byte value);
    [CompilerGeneratedAttribute]
public string get_CommandLine();
    [CompilerGeneratedAttribute]
private void set_CommandLine(string value);
    [CompilerGeneratedAttribute]
public Guid get_ComObjectGuid();
    [CompilerGeneratedAttribute]
private void set_ComObjectGuid(Guid value);
    [CompilerGeneratedAttribute]
public string get_RuntimeDllPath();
    [CompilerGeneratedAttribute]
private void set_RuntimeDllPath(string value);
}
public abstract class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwClrSession : EtwSessionBase {
    private static TimeSpan ourSessionTimeout;
    private ILogger myLogger;
    private ICollectionEvents`1<IEtwClrRecord> myRecords;
    private SequentialLifetimes myLifetimes;
    private GroupingEvent myTimeoutEvent;
    private int myIsRunning;
    public bool IsRunning { get; }
    public ICollectionEvents`1<IEtwClrRecord> Records { get; }
    protected ulong Keywords { get; }
    protected EtwClrSession(Lifetime lifetime, IThreading threading, ILogger logger);
    private static EtwClrSession();
    public sealed virtual bool get_IsRunning();
    public sealed virtual ICollectionEvents`1<IEtwClrRecord> get_Records();
    public sealed virtual void StartSession();
    public sealed virtual void CloseSession();
    protected abstract virtual ulong get_Keywords();
    protected void AddRecord(IEtwClrRecord record);
    protected virtual void FillTraceProperties(EVENT_TRACE_PROPERTIES* pProps);
    [CompilerGeneratedAttribute]
private void <StartSession>b__7(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <StartSession>b__8();
    [CompilerGeneratedAttribute]
private void <StartSession>b__9(AddRemoveEventArgs`1<IEtwClrRecord> _);
    [CompilerGeneratedAttribute]
private void <StartSession>b__a();
    [CompilerGeneratedAttribute]
private void <StartSession>b__b();
}
public abstract class JetBrains.UI.SrcView.ProcessExplorer.ETW.EtwSessionBase : object {
    private ILogger myLogger;
    private long myTraceHandle;
    private bool myIsClosing;
    protected Guid TraceProviderGuid { get; }
    protected Guid SessionGuid { get; }
    protected string SessionName { get; }
    protected EtwSessionBase(ILogger logger);
    protected abstract virtual Guid get_TraceProviderGuid();
    protected abstract virtual Guid get_SessionGuid();
    protected abstract virtual string get_SessionName();
    protected abstract virtual void FillTraceProperties(EVENT_TRACE_PROPERTIES* pProps);
    protected abstract virtual void OnEventCallback(EVENT_RECORD record);
    protected void StartTrace(ulong keywords, EventLevel level);
    protected void CloseTrace();
    protected bool OnBufferCallback(EVENT_TRACE_LOGFILE buffer);
    private void EventCallbackHandler(EVENT_RECORD& eventRecord);
    private int BufferCallbackHandler(EVENT_TRACE_LOGFILE& bufferRecord);
    private static void ThrowIfError(string function, int errorCode);
}
public interface JetBrains.UI.SrcView.ProcessExplorer.ETW.IEtwClrRecord {
}
public interface JetBrains.UI.SrcView.ProcessExplorer.ETW.IEtwClrSession {
    public bool IsRunning { get; }
    public ICollectionEvents`1<IEtwClrRecord> Records { get; }
    public abstract virtual void StartSession();
    public abstract virtual void CloseSession();
    public abstract virtual bool get_IsRunning();
    public abstract virtual ICollectionEvents`1<IEtwClrRecord> get_Records();
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.ProcessExplorer.EtwClrRundownSession : EtwClrSession {
    private static Guid ourPersistentSessionGuid;
    private static string ourPersistentSessionName;
    protected Guid TraceProviderGuid { get; }
    protected Guid SessionGuid { get; }
    protected string SessionName { get; }
    protected ulong Keywords { get; }
    public EtwClrRundownSession(Lifetime lifetime, IThreading threading);
    private static EtwClrRundownSession();
    protected virtual Guid get_TraceProviderGuid();
    protected virtual Guid get_SessionGuid();
    protected virtual string get_SessionName();
    protected virtual ulong get_Keywords();
    protected virtual void OnEventCallback(EVENT_RECORD record);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.ProcessExplorer.EtwClrRuntimeSession : EtwClrSession {
    private static Guid ourPersistentSessionGuid;
    private static string ourPersistentSessionName;
    protected Guid TraceProviderGuid { get; }
    protected Guid SessionGuid { get; }
    protected string SessionName { get; }
    protected ulong Keywords { get; }
    public EtwClrRuntimeSession(Lifetime lifetime, IThreading threading);
    private static EtwClrRuntimeSession();
    protected virtual Guid get_TraceProviderGuid();
    protected virtual Guid get_SessionGuid();
    protected virtual string get_SessionName();
    protected virtual ulong get_Keywords();
    protected virtual void OnEventCallback(EVENT_RECORD record);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.ProcessExplorer.EtwClrSessionManager : object {
    private static ILogger ourLogger;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private IEtwClrSession myRuntimeSession;
    private IEtwClrSession myRundownSession;
    private ICollectionEvents`1<IEtwClrRecord> myEtwRecords;
    public ICollectionEvents`1<IEtwClrRecord> EtwClrRecords { get; }
    public bool IsRuntimeRunning { get; }
    public bool IsRundownRunning { get; }
    public EtwClrSessionManager(Lifetime lifetime, IThreading threading, EtwClrRuntimeSession runtimeSession, EtwClrRundownSession rundownSession);
    private static EtwClrSessionManager();
    public ICollectionEvents`1<IEtwClrRecord> get_EtwClrRecords();
    public bool get_IsRuntimeRunning();
    public bool get_IsRundownRunning();
    public Task`1<ICollection`1<IEtwClrRecord>> CollectClr4InfoAsync();
    public Task`1<ICollection`1<IEtwClrRecord>> CollectClr2InfoAsync();
    public void GetRunningAssemblies(Func`2<IEtwClrRecord, bool> predicate);
    private Task`1<ICollection`1<IEtwClrRecord>> RunSession(IEtwClrSession session);
}
public interface JetBrains.UI.SrcView.ProcessExplorer.IProcessExplorerData {
    public int ProcessId { get; }
    public abstract virtual int get_ProcessId();
}
public interface JetBrains.UI.SrcView.ProcessExplorer.IProcessTreeItem {
    public ProcessTreeCellAutomation NameColumn { get; }
    public ProcessTreeCellAutomation PathColumn { get; }
    public ProcessTreeCellAutomation FlagsColumn { get; }
    [NotNullAttribute]
public IList`1<IProcessTreeItem> Children { get; }
    [NotNullAttribute]
public IProcessExplorerData Data { get; }
    public abstract virtual ProcessTreeCellAutomation get_NameColumn();
    public abstract virtual ProcessTreeCellAutomation get_PathColumn();
    public abstract virtual ProcessTreeCellAutomation get_FlagsColumn();
    public abstract virtual IList`1<IProcessTreeItem> get_Children();
    public abstract virtual IProcessExplorerData get_Data();
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessExplorer : object {
    private static String[] ourInstalledRuntimes;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ITheming myTheming;
    private EtwClrSessionManager myEtwSessionManager;
    private ICollectionEvents`1<IProcessTreeItem> myProcessTree;
    private ProcessExplorerPanel myPanel;
    private IList`1<ProcessInfo> myProcesses;
    private ICollection`1<IEtwClrRecord> myEtwRecordsClr4;
    private ICollection`1<IEtwClrRecord> myEtwRecordsClr2;
    private bool myShowProcessTree;
    private bool myShowClrTree;
    private bool myShowAllProcesses;
    private bool myShowAllModules;
    [CompilerGeneratedAttribute]
private static Func`1<String[]> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<EtwClrModuleRecord_V0, string> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<ModuleInfo, string> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IProcessExplorerData> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<EtwClrModuleRecord_V0, bool> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<EtwClrModuleRecord_V0, string> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IProcessExplorerData> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<ModuleInfo, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<ModuleInfo, string> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IProcessExplorerData> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessInfo, bool> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessInfo, string> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<string, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate26;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IProcessExplorerData> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`2<EtwClrModuleRecord_V0, string> CS$<>9__CachedAnonymousMethodDelegate36;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IProcessExplorerData> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`2<ModuleInfo, string> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IProcessExplorerData> CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessInfo, string> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Func`2<string, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`1<List`1<ProcessInfo>> CS$<>9__CachedAnonymousMethodDelegate52;
    [CompilerGeneratedAttribute]
private static Func`1<List`1<IntPtr>> CS$<>9__CachedAnonymousMethodDelegate53;
    [CompilerGeneratedAttribute]
private static Func`2<IntPtr, bool> CS$<>9__CachedAnonymousMethodDelegate54;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate63;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IProcessExplorerData> CS$<>9__CachedAnonymousMethodDelegate71;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessTreeGroupNode, bool> CS$<>9__CachedAnonymousMethodDelegate72;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate73;
    public static String[] InstalledRuntimes { get; }
    public bool ShowProcessTree { get; public set; }
    public bool ShowClrTree { get; public set; }
    public bool ShowAllProcesses { get; public set; }
    public bool ShowAllModules { get; public set; }
    public ProcessExplorer(Lifetime lifetime, ProcessExplorerToolWindowDescriptor descriptor, ToolWindowManager toolWindowManager, IActionBarManager actionBarManager, IThreading threading, ITheming theming, EtwClrSessionManager etwSessionManager);
    public static String[] get_InstalledRuntimes();
    public bool get_ShowProcessTree();
    public void set_ShowProcessTree(bool value);
    public bool get_ShowClrTree();
    public void set_ShowClrTree(bool value);
    public bool get_ShowAllProcesses();
    public void set_ShowAllProcesses(bool value);
    public bool get_ShowAllModules();
    public void set_ShowAllModules(bool value);
    public void SelectProcessInTheTree(int processId);
    [NotNullAttribute]
public IList`1<FileSystemPath> GetAssemblyPaths(IList`1<IProcessTreeItem> nodes);
    [NotNullAttribute]
public IList`1<FileSystemPath> GetFilePaths(IList`1<IProcessTreeItem> nodes);
    [NotNullAttribute]
public IList`1<IProcessExplorerData> GetRelatedDataObjects(IProcessTreeItem node);
    public object GetSystemProperties();
    public void Refresh();
    private void RunEtwClrSessions();
    private void RebuildTree();
    [CanBeNullAttribute]
private static IProcessTreeItem FindProcess(IEnumerable`1<IProcessTreeItem> list, int procId);
    [NotNullAttribute]
private static IEnumerable`1<IProcessTreeItem> GetAllProcesses(IEnumerable`1<IProcessTreeItem> list);
    [CompilerGeneratedAttribute]
private static String[] <get_InstalledRuntimes>b__9();
    [CompilerGeneratedAttribute]
private static string <GetAssemblyPaths>b__d(EtwClrModuleRecord_V0 data);
    [CompilerGeneratedAttribute]
private static string <GetAssemblyPaths>b__f(ModuleInfo data);
    [CompilerGeneratedAttribute]
private static IProcessExplorerData <GetAssemblyPaths>b__10(IProcessTreeItem item);
    [CompilerGeneratedAttribute]
private static bool <GetAssemblyPaths>b__11(EtwClrModuleRecord_V0 data);
    [CompilerGeneratedAttribute]
private static string <GetAssemblyPaths>b__12(EtwClrModuleRecord_V0 data);
    [CompilerGeneratedAttribute]
private static IProcessExplorerData <GetAssemblyPaths>b__13(IProcessTreeItem item);
    [CompilerGeneratedAttribute]
private static bool <GetAssemblyPaths>b__14(ModuleInfo data);
    [CompilerGeneratedAttribute]
private static string <GetAssemblyPaths>b__15(ModuleInfo data);
    [CompilerGeneratedAttribute]
private static IProcessExplorerData <GetAssemblyPaths>b__16(IProcessTreeItem item);
    [CompilerGeneratedAttribute]
private static bool <GetAssemblyPaths>b__17(ProcessInfo data);
    [CompilerGeneratedAttribute]
private static string <GetAssemblyPaths>b__18(ProcessInfo data);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetAssemblyPaths>b__19(string s);
    [CompilerGeneratedAttribute]
private static bool <GetAssemblyPaths>b__1a(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static IProcessExplorerData <GetFilePaths>b__2d(IProcessTreeItem item);
    [CompilerGeneratedAttribute]
private static string <GetFilePaths>b__2e(EtwClrModuleRecord_V0 data);
    [CompilerGeneratedAttribute]
private static IProcessExplorerData <GetFilePaths>b__2f(IProcessTreeItem item);
    [CompilerGeneratedAttribute]
private static string <GetFilePaths>b__30(ModuleInfo data);
    [CompilerGeneratedAttribute]
private static IProcessExplorerData <GetFilePaths>b__31(IProcessTreeItem item);
    [CompilerGeneratedAttribute]
private static string <GetFilePaths>b__32(ProcessInfo data);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetFilePaths>b__33(string s);
    [CompilerGeneratedAttribute]
private static bool <GetFilePaths>b__34(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static List`1<ProcessInfo> <Refresh>b__4e();
    [CompilerGeneratedAttribute]
private static List`1<IntPtr> <Refresh>b__4f();
    [CompilerGeneratedAttribute]
private static bool <Refresh>b__51(IntPtr hwnd);
    [CompilerGeneratedAttribute]
private void <RunEtwClrSessions>b__58(Task`1<ICollection`1<IEtwClrRecord>> task);
    [CompilerGeneratedAttribute]
private void <RunEtwClrSessions>b__5c(Task`1<ICollection`1<IEtwClrRecord>> task);
    [CompilerGeneratedAttribute]
private void <RunEtwClrSessions>b__59(Task`1<ICollection`1<IEtwClrRecord>> prev);
    [CompilerGeneratedAttribute]
private void <RunEtwClrSessions>b__5a();
    [CompilerGeneratedAttribute]
private void <RunEtwClrSessions>b__5d(Task`1<ICollection`1<IEtwClrRecord>> prev);
    [CompilerGeneratedAttribute]
private void <RunEtwClrSessions>b__5e();
    [CompilerGeneratedAttribute]
private static bool <RunEtwClrSessions>b__5f(string str);
    [CompilerGeneratedAttribute]
private static IProcessExplorerData <RebuildTree>b__66(IProcessTreeItem item);
    [CompilerGeneratedAttribute]
private static bool <RebuildTree>b__67(ProcessTreeGroupNode x);
    [CompilerGeneratedAttribute]
private static bool <RebuildTree>b__6d(string str);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessExplorerPanel : Grid {
    private Lifetime myLifetime;
    public static DataConstant`1<IProcessTreeItem> ProcessTreeCurrentItem;
    public static DataConstant`1<IList`1<IProcessTreeItem>> ProcessTreeSelectedItems;
    private ProcessExplorerTreeGridView myTreeGrid;
    private SearchTextBox mySearchTextBox;
    private IdentifierMatcher myMatcher;
    private TextHighlighter myTextHighlighter;
    [CompilerGeneratedAttribute]
private static Predicate`1<UIElement> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Predicate`1<UIElement> CS$<>9__CachedAnonymousMethodDelegate10;
    public ProcessExplorerPanel(Lifetime lifetime, IActionBarManager actionBarManager, ITheming theming, IEnumerable`1<IProcessTreeItem> processes, Func`2<UIElement, UIElement> getActionBar);
    private static ProcessExplorerPanel();
    public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
    [CanBeNullAttribute]
public IProcessTreeItem GetSelectedItem();
    public void SetSelectedItem(IProcessTreeItem item);
    private SearchTextBox CreateSearchTextBox(Lifetime lifetime);
    private void OnSearch(object s, SearchViewEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, GetDataRulesEventArgs args);
    [CompilerGeneratedAttribute]
private IProcessTreeItem <GetDataRules>b__6(IDataContext ctx);
    [CompilerGeneratedAttribute]
private IList`1<IProcessTreeItem> <GetDataRules>b__7(IDataContext ctx);
    [CompilerGeneratedAttribute]
private void <CreateSearchTextBox>b__a();
    [CompilerGeneratedAttribute]
private void <CreateSearchTextBox>b__b();
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OnSearch>b__c(IProcessTreeItem node);
    [CompilerGeneratedAttribute]
private static bool <OnSearch>b__d(UIElement element);
    [CompilerGeneratedAttribute]
private static bool <OnSearch>b__e(UIElement element);
}
[ToolWindowDescriptorAttribute]
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessExplorerToolWindowDescriptor : ToolWindowDescriptor {
    public ProcessExplorerToolWindowDescriptor(IApplicationHost host);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessExplorerTreeGridView : TreeGridView {
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegatec7;
    [CompilerGeneratedAttribute]
private static Func`1<UIElement> CS$<>9__CachedAnonymousMethodDelegated2;
    [CompilerGeneratedAttribute]
private static Func`1<UIElement> CS$<>9__CachedAnonymousMethodDelegated4;
    [CompilerGeneratedAttribute]
private static Func`1<UIElement> CS$<>9__CachedAnonymousMethodDelegated5;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, IEnumerable> CS$<>9__CachedAnonymousMethodDelegated7;
    [CompilerGeneratedAttribute]
private static Func`2<IProcessTreeItem, bool> CS$<>9__CachedAnonymousMethodDelegated8;
    private static ProcessExplorerTreeGridView();
    public ProcessExplorerTreeGridView(IEnumerable`1<IProcessTreeItem> processes);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__c6(DependencyObject o, object value);
    [CompilerGeneratedAttribute]
private static UIElement <.ctor>b__cb();
    [CompilerGeneratedAttribute]
private int <.ctor>b__cc(object x, object y);
    [CompilerGeneratedAttribute]
private static UIElement <.ctor>b__cd();
    [CompilerGeneratedAttribute]
private static UIElement <.ctor>b__ce();
    [CompilerGeneratedAttribute]
private int <.ctor>b__cf(object x, object y);
    [CompilerGeneratedAttribute]
private static IEnumerable <.ctor>b__d0(IProcessTreeItem view);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__d1(IProcessTreeItem view);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessFinder : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private IMainWindow myMainWindow;
    private TrackingWindow myWindow;
    public ProcessFinder(Lifetime lifetime, IThreading threading, IMainWindow mainWindow);
    public void FindProcess(Func`2<Info, object> onMove, Action`1<Info> onFinish);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeCellAutomation : AAutomation {
    [NotNullAttribute]
public RichText RichText;
    [CompilerGeneratedAttribute]
private static Func`2<string, ProcessTreeCellAutomation> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<RichText, ProcessTreeCellAutomation> CS$<>9__CachedAnonymousMethodDelegate3;
    public ProcessTreeCellAutomation(RichText text);
    [CanBeNullAttribute]
public static ProcessTreeCellAutomation op_Implicit(string text);
    [CanBeNullAttribute]
public static ProcessTreeCellAutomation op_Implicit(RichText richtext);
    [CompilerGeneratedAttribute]
private static ProcessTreeCellAutomation <op_Implicit>b__0(string str);
    [CompilerGeneratedAttribute]
private static ProcessTreeCellAutomation <op_Implicit>b__2(RichText text);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeCellView : ViewControl`1<ProcessTreeCellAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ProcessTreeCellAutomation automation);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeClr2ModuleNode : AProcessTreeItem {
    private EtwClrModuleRecord_V0 myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeClr2ModuleNode(EtwClrModuleRecord_V0 data);
    public virtual IProcessExplorerData get_Data();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeClrAppDomainNode : AProcessTreeItem {
    private EtwClrAppDomainRecord myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeClrAppDomainNode(EtwClrAppDomainRecord data);
    public virtual IProcessExplorerData get_Data();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeClrAssemblyNode : AProcessTreeItem {
    private EtwClrAssemblyRecord myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeClrAssemblyNode(EtwClrAssemblyRecord data);
    public virtual IProcessExplorerData get_Data();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeClrDomainModuleNode : AProcessTreeItem {
    private EtwClrDomainModuleRecord myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeClrDomainModuleNode(EtwClrDomainModuleRecord data, EtwClrAssemblyRecord assembly);
    public virtual IProcessExplorerData get_Data();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeClrModuleNode : AProcessTreeItem {
    private EtwClrModuleRecord_V1 myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeClrModuleNode(EtwClrModuleRecord_V1 data, EtwClrAssemblyRecord assembly);
    public virtual IProcessExplorerData get_Data();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeClrRuntimeNode : AProcessTreeItem {
    private EtwClrRuntimeRecord myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeClrRuntimeNode(EtwClrRuntimeRecord data);
    public virtual IProcessExplorerData get_Data();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeGroupNode : AProcessTreeItem {
    private Info myData;
    public string GroupName;
    public IProcessExplorerData Data { get; }
    public ProcessTreeGroupNode(string name, int pid, bool isSurrogate);
    public virtual IProcessExplorerData get_Data();
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeItemEx : object {
    [CanBeNullAttribute]
[ExtensionAttribute]
public static IProcessTreeItem GetItemByData(IEnumerable`1<IProcessTreeItem> list, IProcessExplorerData data);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<IProcessTreeItem> GetAllChildren(IProcessTreeItem item);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<T> GetAllChildrenData(IProcessTreeItem item, Func`2<T, bool> predicate);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IProcessTreeItem GetChildOfDataType(IProcessTreeItem item, Func`2<T, bool> predicate);
    [CompilerGeneratedAttribute]
private static T <GetAllChildrenData>b__e(IProcessTreeItem child);
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeModuleNode : AProcessTreeItem {
    private ModuleInfo myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeModuleNode(ModuleInfo data);
    public virtual IProcessExplorerData get_Data();
}
public class JetBrains.UI.SrcView.ProcessExplorer.ProcessTreeProcessNode : AProcessTreeItem {
    private ProcessInfo myData;
    public IProcessExplorerData Data { get; }
    public ProcessTreeProcessNode(ProcessInfo data);
    public virtual IProcessExplorerData get_Data();
}
[ActionAttribute("Process E&xplorer")]
public class JetBrains.UI.SrcView.ProcessExplorer.ShowProcessExplorerActionHandler : ActivateToolWindowActionHandler`1<ProcessExplorerToolWindowDescriptor> {
}
public class JetBrains.UI.SrcView.ProcessExplorer.Utils.ModuleInfo : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Runtime>k__BackingField;
    public int ProcessId { get; private set; }
    public string Name { get; private set; }
    public string Path { get; private set; }
    [CanBeNullAttribute]
public string Runtime { get; private set; }
    public bool IsManaged { get; }
    public ModuleInfo(MODULEENTRY32 entry);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
private void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Runtime();
    [CompilerGeneratedAttribute]
private void set_Runtime(string value);
    public bool get_IsManaged();
}
public static class JetBrains.UI.SrcView.ProcessExplorer.Utils.ProcessExplorerUtil : object {
    public static int SystemIdleProcessId;
    public static int SystemProcessId;
    public static PROCESS_ACCESS ProcessQueryLimitedInformation;
    private static QueryFullProcessImageNameDelegate ourQueryFullProcessImageNameFunc;
    [CompilerGeneratedAttribute]
private static Func`1<QueryFullProcessImageNameDelegate> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private static ProcessExplorerUtil();
    public static bool IsSystemProcess(int processId);
    public static bool Is64BitProcess(Void* handle);
    public static int GetExpectedProcessRuntimes(int processId);
    public static string ExpectedRuntimeToString(int clrs);
    public static string GetProcessFileName(Void* hProcess, WinError& error);
    public static List`1<ProcessInfo> GetProcessList();
    public static List`1<ModuleInfo> GetProcessModuleList(int processId);
    public static string DeviceToFilePath(string path);
    [CompilerGeneratedAttribute]
private static QueryFullProcessImageNameDelegate <.cctor>b__0();
    [CompilerGeneratedAttribute]
private static bool <GetExpectedProcessRuntimes>b__2(string sectionName);
}
public class JetBrains.UI.SrcView.ProcessExplorer.Utils.ProcessInfo : object {
    [NotNullAttribute]
public List`1<ModuleInfo> NativeModules;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExpectedRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAccessDenied>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Is64Bit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MainWindowTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Runtimes>k__BackingField;
    public int ProcessId { get; private set; }
    public int ParentProcessId { get; private set; }
    public string Name { get; private set; }
    public int ExpectedRuntime { get; private set; }
    public bool IsSystem { get; private set; }
    public bool IsAccessDenied { get; private set; }
    public bool Is64Bit { get; private set; }
    public string FileName { get; private set; }
    public string MainWindowTitle { get; public set; }
    public bool IsManaged { get; }
    [NotNullAttribute]
public IList`1<string> Runtimes { get; private set; }
    public ProcessInfo(PROCESSENTRY32 entry);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
private void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public int get_ParentProcessId();
    [CompilerGeneratedAttribute]
private void set_ParentProcessId(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_ExpectedRuntime();
    [CompilerGeneratedAttribute]
private void set_ExpectedRuntime(int value);
    [CompilerGeneratedAttribute]
public bool get_IsSystem();
    [CompilerGeneratedAttribute]
private void set_IsSystem(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAccessDenied();
    [CompilerGeneratedAttribute]
private void set_IsAccessDenied(bool value);
    [CompilerGeneratedAttribute]
public bool get_Is64Bit();
    [CompilerGeneratedAttribute]
private void set_Is64Bit(bool value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_MainWindowTitle();
    [CompilerGeneratedAttribute]
public void set_MainWindowTitle(string value);
    public bool get_IsManaged();
    [CompilerGeneratedAttribute]
public IList`1<string> get_Runtimes();
    [CompilerGeneratedAttribute]
private void set_Runtimes(IList`1<string> value);
    public void AddRuntime(string runtime);
    public void GetModules();
    [CompilerGeneratedAttribute]
private List`1<ModuleInfo> <GetModules>b__6();
}
[ZoneMarkerAttribute]
public class JetBrains.UI.SrcView.ProcessExplorer.ZoneMarker : object {
}
public class JetBrains.UI.SrcView.Progress.CustomProgressDialog : object {
    [NotNullAttribute]
private static ReadonlyToken myReadonly;
    public IProperty`1<string> DescriptionLine1;
    public IProperty`1<string> DescriptionLine2;
    public IProperty`1<bool> IsCancelable;
    public IProperty`1<bool> IsRunning;
    private IProperty`1<bool> IsRunningEffective;
    public IProperty`1<bool> IsUserCanceled;
    public IProperty`1<string> Title;
    public IProperty`1<double> Value;
    public IProperty`1<IntPtr> WindowHandle;
    private ObsoleteLifetimeAndDefinitionAtTheSameTime DisposablesGlobal;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyChangedEventArgs`1<bool>, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public CustomProgressDialog(IWin32Window parentwin, IUIApplicationSimple uiapp, IWindowsHookManager windowsHookManager);
    private static CustomProgressDialog();
    private void InitRunning(IWin32Window parentwin, IUIApplicationSimple uiapp, IWindowsHookManager windowsHookManager);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static bool <InitRunning>b__0(PropertyChangedEventArgs`1<bool> args);
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.Progress.CustomProgressDialogEx : object {
    [ExtensionAttribute]
public static void BindToProgressIndicator(CustomProgressDialog dlg, Lifetime lifetime, IProgressIndicatorModel indicator);
}
public class JetBrains.UI.SrcView.Progress.JetProgressWnd : OwnedForm {
    private static Size DimGrayViewMinSize;
    private static Size DimLabelMaxSize;
    private ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
    private int ProgressMaximum;
    private ISimpleSignal myDummy;
    private Void* myHwndFocusBeforeShow;
    public IProperty`1<string> DescriptionLine1;
    public IProperty`1<string> DescriptionLine2;
    public IProperty`1<bool> IsCancelable;
    public IProperty`1<bool> IsUserCanceled;
    public IProperty`1<string> Title;
    public IProperty`1<double> Value;
    private bool JetBrains.Application.UI.Controls.IConstrainableControl.AutoActivate { get; private set; }
    private ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.WantsResize { get; }
    public JetProgressWnd(IWin32Window owner, IUIApplicationSimple uiapp, IWindowsHookManager windowsHookManager);
    private static JetProgressWnd();
    private void InitViewBlack(IUIApplication uiapp, IWindowsHookManager windowsHookManager);
    private void InitViewGray(IUIApplicationSimple uiapp, IWindowsHookManager windowsHookManager);
    private void WndProc_DontStealFocusFromDialogBoxes(Message m);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void WndProc(Message& m);
    private sealed virtual override Size JetBrains.Application.UI.Controls.IConstrainableControl.GetDesiredSize(IGraphicsContainer gc, Size limit);
    private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.SetLayout(LayoutResult layout);
    private sealed virtual override bool JetBrains.Application.UI.Controls.IConstrainableControl.get_AutoActivate();
    private sealed virtual override void JetBrains.Application.UI.Controls.IConstrainableControl.set_AutoActivate(bool value);
    private sealed virtual override ISimpleSignal JetBrains.Application.UI.Controls.IConstrainableControl.get_WantsResize();
    [CompilerGeneratedAttribute]
private void <InitViewBlack>b__8(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <InitViewBlack>b__a(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private void <InitViewGray>b__14(PropertyChangedEventArgs`1<string> args);
}
public class JetBrains.UI.SrcView.Progress.SystemProgressDialog : object {
    [NotNullAttribute]
private static ReadonlyToken myReadonly;
    private ObsoleteLifetimeAndDefinitionAtTheSameTime DisposablesGlobal;
    public static Guid ClsidProgressDialog;
    public IProperty`1<ShellProgressAnimations> Animation;
    public IProperty`1<string> DescriptionLine1;
    public IProperty`1<string> DescriptionLine2;
    public IProperty`1<string> DescriptionLine3;
    public IProperty`1<bool> IsCancelable;
    public IProperty`1<bool> IsEstimatingTime;
    public IProperty`1<bool> IsShownWithoutDelay;
    public IProperty`1<bool> IsMarquee;
    public IProperty`1<bool> IsRunning;
    public IProperty`1<bool> IsUserCanceled;
    public IProperty`1<string> Title;
    public IProperty`1<double> Value;
    public IProperty`1<IntPtr> WindowHandle;
    [CompilerGeneratedAttribute]
private static Action`1<PropertyChangedEventArgs`1<IntPtr>> CS$<>9__CachedAnonymousMethodDelegate1;
    public SystemProgressDialog(IWin32Window parentwin);
    private static SystemProgressDialog();
    private void InitLogging();
    private void InitRunning(IWin32Window parentwin);
    private void InitRunning_DontStealFocusFromDialogBoxes(Lifetime disposablesRun);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static void <InitLogging>b__0(PropertyChangedEventArgs`1<IntPtr> args);
}
[ExtensionAttribute]
public static class JetBrains.UI.SrcView.Progress.SystemProgressDialogEx : object {
    [ExtensionAttribute]
public static void BindToProgressIndicator(SystemProgressDialog dlg, Lifetime lifetime, IProgressIndicatorModel indicator, IThreading invocator);
}
public class JetBrains.UI.SrcView.Progress.TaskProgressControl : SafeUserControl {
    private static string ELLIPSIS;
    private bool myShowTaskName;
    public IProperty`1<Color> FillColor;
    public IProperty`1<string> ItemText;
    public IProperty`1<string> TaskName;
    public IProperty`1<double> Fraction;
    private static Size PROGRESS_MIN_SIZE;
    private Label myLabelItemText;
    private Label myLabelTaskName;
    private ProgressBar myProgress;
    public TaskProgressControl(IUIApplication environment, bool showTaskName);
    private static TaskProgressControl();
    private void InitializeComponent();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void OnPaint(PaintEventArgs args);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__0(PropertyChangedEventArgs`1<double> args);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__1(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__2(PropertyChangedEventArgs`1<Color> args);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__3(PropertyChangedEventArgs`1<string> args);
    [CompilerGeneratedAttribute]
private void <InitializeComponent>b__4(PropertyChangedEventArgs`1<Color> args);
}
public static class JetBrains.UI.SrcView.Progress.UITaskExecutorRun : object {
    private static ReadonlyToken myReadonlyToken;
    private static JetDispatcher myBackingA;
    private static TimeSpan DefaultPumpInterval;
    public static string DefaultTaskName { get; }
    private static UITaskExecutorRun();
    public static bool Run(TaskThreadAffinity taskThreadAffinity, Action`1<IProgressIndicator> task, Func`3<Lifetime, IProgressIndicatorModel, IntPtr> FAttachUi, ProgressIndicator indicator, IWin32Window parentWindow, IThreading threading, WorkerThreadShop workerThreadShop, bool enforceModalityState);
    internal static bool RunCore(TaskThreadAffinity taskThreadAffinity, Action`1<IProgressIndicator> FTask, Func`3<Lifetime, IProgressIndicatorModel, IntPtr> FAttachUi, ProgressIndicator progressIndicator, IWin32Window parentWindow, IThreading threading, WorkerThreadShop workerThreadShop, bool enforceModalityState);
    private static void Run_PumpForSingleThreadedTasks(Lifetime lifetime, IProgressIndicatorModel progressIndicator, IThreading threading);
    public static string get_DefaultTaskName();
    [NotNullAttribute]
public static IDisposable PushProgressCanceledInterruptableCookie(IProgressIndicator pi, TaskThreadAffinity threadAffinity);
    private static IDisposable Run_KeepFocus();
    [NotNullAttribute]
private static JetDispatcher GetTaskAffinedThread(TaskThreadAffinity taskThreadAffinity, JetDispatcher dispatcherPrimary, WorkerThreadShop workerThreadShop);
    private static void RunStartTask(Action`1<IProgressIndicator> FTask, TaskThreadAffinity taskThreadAffinity, ProgressIndicator progressIndicator, IProperty`1<bool> isDone, JetDispatcher dispatcherPrimary, WorkerThreadShop workerThreadShop);
    private static void RunStartTaskCallTaskAction(IProperty`1<bool> isDone, ProgressIndicator progressIndicator, TaskThreadAffinity taskThreadAffinity, Action`1<IProgressIndicator> FTask, JetDispatcher dispatcherPrimary);
    private static void Run_AttachUI(Lifetime lifetime, IProgressIndicatorModel progressIndicator, IThreading threading, Func`3<Lifetime, IProgressIndicatorModel, IntPtr> fAttachUi);
    private static void Run_DisableWindowsButOne(Lifetime lifetime, IntPtr hwndModal);
    private static void Run_PushFocusedWindowState(Lifetime lifetime, IWin32Window parentWindow);
    private static void Run_WaitUntilDone(Lifetime lifetime, IProperty`1<bool> isDone);
}
public class JetBrains.UI.SrcView.Progress.UITaskExecutorRuns : object {
    private TaskThreadAffinity myThreading;
    private IThreading myInvocator;
    private IWin32Window myParentWindow;
    [NotNullAttribute]
private TaskExecutorNotification myNotify;
    private IUIApplicationSimple myUiApplicationSimple;
    private IWindowsHookManager myWindowsHookManager;
    private WorkerThreadShop myWorkerThreadShop;
    private static bool IsUsingSystemProgressDialog { get; }
    public UITaskExecutorRuns(TaskThreadAffinity threading, IThreading invocator, IUIApplicationSimple uiApplicationSimple, IWindowsHookManager windowsHookManager, WorkerThreadShop workerThreadShop, IWin32Window parentwin, TaskExecutorNotification notify);
    private static bool get_IsUsingSystemProgressDialog();
    [NotNullAttribute]
private static void OnAttachProgressWindowUI(Lifetime lifetime, string name, IProgressIndicatorModel indicator, TaskCancelable taskcancelable, IThreading invocator, IWin32Window parentwin, IUIApplicationSimple uiapp, IWindowsHookManager windowsHookManager);
    [NotNullAttribute]
private static void OnAttachProgressWindowUI_CustomDialog(string name, IProgressIndicatorModel indicator, TaskCancelable taskcancelable, Lifetime DisposablesUI, IWin32Window parentwin, IUIApplicationSimple uiapp, IWindowsHookManager windowsHookManager);
    private static void OnAttachProgressWindowUI_SystemDialog(Lifetime lifetime, string name, IProgressIndicatorModel indicator, TaskCancelable taskcancelable, IThreading invocator, IWin32Window parentwin, IUIApplicationSimple uiapp);
    public sealed virtual bool ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.UI.SrcView.Progress.UITaskExecutorSwitchingImplementationInteractive : UITaskExecutorSwitchingImplementation {
    protected IThreading myInvocator;
    private IMainWindow myMainWindow;
    private IUIApplicationSimple myUiApplicationSimple;
    private IWindowsHookManager myWindowsHookManager;
    private WorkerThreadShop myWorkerThreadShop;
    public UITaskExecutorSwitchingImplementationInteractive(IThreading invocator, IUIApplicationSimple uiApplicationSimple, IWindowsHookManager windowsHookManager, WorkerThreadShop workerThreadShop, IMainWindow mainwin);
    [NotNullAttribute]
public virtual ITaskExecutor CreateExecutor(TaskThreadAffinity threading, IWin32Window owner);
}
[ContentPropertyAttribute("Commands")]
public class JetBrains.UI.SrcView.RoutedCommandHandler : Behavior`1<FrameworkElement> {
    public static DependencyProperty HandlerProperty;
    private Collection`1<RoutedCommand> myCommands;
    private CommandBinding[] myDelegateCommandBindings;
    public Collection`1<RoutedCommand> Commands { get; }
    public ICommandSink Handler { get; public set; }
    private static RoutedCommandHandler();
    public Collection`1<RoutedCommand> get_Commands();
    public ICommandSink get_Handler();
    public void set_Handler(ICommandSink value);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);
    private void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private CommandBinding <OnAttached>b__0(RoutedCommand _);
}
public interface JetBrains.UI.SrcView.RunConfig.IRunConfigComboCustomizer {
    public abstract virtual void CustomizeComboBox(Lifetime lifetime, ActionComboBox comboBox);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Settings.ActionServices.SettingsLayersModificationDialogUtils : object {
    private IUIApplication myApplication;
    public SettingsLayersModificationDialogUtils(IUIApplication application);
    public sealed virtual void ShowDialog(Lifetime lifetime, CopySettingsDialogAutomation viewModel, IDataContext context, Action onSuccess);
    public sealed virtual void ShowMoarDialog(Lifetime lifetime, UserFriendlySettingsLayer sourceLayer, UserFriendlySettingsLayers layerman, IList`1<UserFriendlySettingsLayer> allLayers, WebProxySettingsReader webProxySettingsReader, IUIApplication application, InternKeyPathComponent interned, IDataContext context, Action`2<UserFriendlySettingsLayer, IDataContext> copyTo);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Symbols.EulaDialogInteractive : EulaDialog {
    private IMainWindow myMainWindow;
    public EulaDialogInteractive(IMainWindow mainWindow);
    public virtual bool Show(EulaContent content);
}
internal class JetBrains.UI.SrcView.Symbols.EulaDialogView : OwnedForm {
    private IContainer components;
    public Button myAcceptButton;
    public Button myDeclineButton;
    public TextBox myEulaText;
    public EulaDialogView(IWin32Window owner);
    public bool Show(EulaContent content);
    private static string AddMnemonics(string caption);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
[ZoneMarkerAttribute]
public class JetBrains.UI.SrcView.Symbols.ZoneMarker : object {
}
public static class JetBrains.UI.SrcView.TaskDialogs.MultipleChoiceTaskDialog : object {
    public static int Show(string caption, string instructionText, string text, Action hyperlinkAction, int defaultTaskIndex, IntPtr ownerHandle, TaskDescriptor[] tasks);
    public static int Show(string caption, string instructionText, string text, int defaultTaskIndex, Window owner, TaskDescriptor[] tasks);
    public static int Show(string caption, string instructionText, string text, int defaultTaskIndex, IntPtr ownerHandle, TaskDescriptor[] tasks);
    public static bool IsPlatformSupported();
}
public class JetBrains.UI.SrcView.TaskDialogs.TaskDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instruction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TaskIndex>k__BackingField;
    public string Text { get; private set; }
    public string Instruction { get; private set; }
    public int TaskIndex { get; private set; }
    public TaskDescriptor(int taskIndex, string text, string instruction);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Instruction();
    [CompilerGeneratedAttribute]
private void set_Instruction(string value);
    [CompilerGeneratedAttribute]
public int get_TaskIndex();
    [CompilerGeneratedAttribute]
private void set_TaskIndex(int value);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerGroupedView : ViewControl`1<Grouped> {
    [CompilerGeneratedAttribute]
private static Func`2<object, IListEvents`1<IconViewerRowAutomation>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<IconViewerGroupByOwnerRowAutomation, IListEvents`1<IconViewerRowAutomation>> CS$<>9__CachedAnonymousMethodDelegate3;
    protected virtual UIElement OnRenderView(Lifetime lifetime, Grouped automation);
    [CompilerGeneratedAttribute]
private static IListEvents`1<IconViewerRowAutomation> <OnRenderView>b__0(object o);
    [CompilerGeneratedAttribute]
private static IListEvents`1<IconViewerRowAutomation> <OnRenderView>b__1(IconViewerGroupByOwnerRowAutomation group);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerListView : ViewControl`1<List> {
    [CompilerGeneratedAttribute]
private static Func`2<object, PresentableItemAutomation> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<object, IconViewerSizeCellAutomation> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<IList`1<object>, IconViewerIconWithItsThemes[]> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<IconViewerRowAutomation, PresentableItemAutomation> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<IconViewerRowAutomation, IconViewerSizeCellAutomation> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<IconViewerRowAutomation, IconViewerIconWithItsThemes> CS$<>9__CachedAnonymousMethodDelegate19;
    public static TreeListWithSearch CreateList(Lifetime lifetime, TreeListBase automation, IEnumerable topitems, bool isShowStatusColumn);
    protected virtual UIElement OnRenderView(Lifetime lifetime, List automation);
    [CompilerGeneratedAttribute]
private static PresentableItemAutomation <CreateList>b__6(object o);
    [CompilerGeneratedAttribute]
private static IconViewerSizeCellAutomation <CreateList>b__8(object o);
    [CompilerGeneratedAttribute]
private static IconViewerIconWithItsThemes[] <CreateList>b__e(IList`1<object> objects);
    [CompilerGeneratedAttribute]
private static PresentableItemAutomation <CreateList>b__7(IconViewerRowAutomation icon);
    [CompilerGeneratedAttribute]
private static IconViewerSizeCellAutomation <CreateList>b__9(IconViewerRowAutomation icon);
    [CompilerGeneratedAttribute]
private static IconViewerIconWithItsThemes <CreateList>b__f(IconViewerRowAutomation row);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerTilesView : ViewControl`1<Tiles> {
    [CompilerGeneratedAttribute]
private static Action`1<FrameworkElementFactory> CS$<>9__CachedAnonymousMethodDelegate3;
    protected virtual UIElement OnRenderView(Lifetime lifetime, Tiles automation);
    [CompilerGeneratedAttribute]
private static void <OnRenderView>b__0(FrameworkElementFactory factory);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.CompiledIconsViewerView : ViewControl`1<CompiledIconsViewerAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, CompiledIconsViewerAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerDetailsAutomation_DetailsIconLargePreviewView : ViewControl`1<DetailsIconLargePreviewAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, DetailsIconLargePreviewAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerDetailsAutomation_DetailsThemeSectionView : ViewControl`1<DetailsThemeSectionAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, DetailsThemeSectionAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerDetailsView : ViewControl`1<IconViewerDetailsAutomation> {
    private static void AddSeparator(Grid grid);
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerDetailsAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerGroupedByOwnerView : ViewControl`1<IconViewerGroupByOwnerRowAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerGroupByOwnerRowAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerIconTooltipView : ViewControl`1<IconViewerIconTooltipAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<Size, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<ImageSourceType, string> CS$<>9__CachedAnonymousMethodDelegate8;
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerIconTooltipAutomation automation);
    [CompilerGeneratedAttribute]
private static string <OnRenderView>b__5(Size size);
    [CompilerGeneratedAttribute]
private static string <OnRenderView>b__6(ImageSourceType type);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerImportSourceView : ViewControl`1<IconViewerImportSourceAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerImportSourceAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerRowAutomation_IconInThemeCellView : ViewControl`1<IconInThemeCellAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconInThemeCellAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerRowView : ViewControl`1<IconViewerRowAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<BuildLogRecord, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerRowAutomation automation);
    [CompilerGeneratedAttribute]
private static bool <OnRenderView>b__4(BuildLogRecord lr);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerSizeCellView : ViewControl`1<IconViewerSizeCellAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerSizeCellAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerTileView : ViewControl`1<IconViewerTileAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<bool, Stretch> CS$<>9__CachedAnonymousMethodDelegate9;
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerTileAutomation automation);
    [CompilerGeneratedAttribute]
private static Stretch <OnRenderView>b__7(bool b);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.IconViewerView : ViewControl`1<IconViewerAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, IconViewerAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.ImportedIconsViewerView : ViewControl`1<ImportedIconsViewerAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, ImportedIconsViewerAutomation automation);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ThemedIconsToolWindow.MasterDetailHelperView : ViewControl`1<MasterDetailHelperAutomation> {
    protected virtual UIElement OnRenderView(Lifetime lifetime, MasterDetailHelperAutomation automation);
}
public class JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipElement : TooltipElement {
    [NotNullAttribute]
public UIElement UIElement;
    public AvalonTooltipElement(Lifetime lifetime, UIElement element, Point ptScreen, ITooltipInfo tooltipInfo);
    public virtual void AddExceptionData(Exception ex);
    public virtual bool IsValid();
    public virtual Point ScreenToClient(Point ptScreen);
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__7();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__8();
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Tooltips.Avalon.AvalonTooltipManagerComponent : object {
    [NotNullAttribute]
public static RoutedEvent GetJetTooltipEvent;
    private static AvalonTooltipManagerComponent();
}
[ExportFindTooltipElementsAtCursorAttruibute]
internal class JetBrains.UI.SrcView.Tooltips.Avalon.FindAvalonTooltipElementsAtCursor : object {
    public sealed virtual ITooltipElement TryFindElementUnderCursor(Lifetime lifetime, WindowsMessageEventArgs args);
}
public class JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventArgs : RoutedEventArgs {
    [NotNullAttribute]
public Lifetime Lifetime;
    [NotNullAttribute]
public IInputElement HitElement;
    private Point myPointInRoot;
    private Point myPointOnScreen;
    [NotNullAttribute]
private UIElement myRootElement;
    [CanBeNullAttribute]
private AvalonTooltipElement myTooltipElement;
    [CanBeNullAttribute]
public AvalonTooltipElement TooltipElement { get; }
    public GetJetTooltipEventArgs(Lifetime lifetime, IInputElement elemHit, UIElement elemRoot, Point ptRoot, Point ptScreen);
    public AvalonTooltipElement get_TooltipElement();
    public Point GetPointInVisual(Visual visual);
    public void SetTooltip(UIElement element, TooltipInfo tti);
    [CompilerGeneratedAttribute]
private object <GetPointInVisual>b__0();
    [CompilerGeneratedAttribute]
private object <GetPointInVisual>b__1();
    [CompilerGeneratedAttribute]
private object <GetPointInVisual>b__2();
}
public class JetBrains.UI.SrcView.Tooltips.Avalon.GetJetTooltipEventHandler : MulticastDelegate {
    public GetJetTooltipEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetJetTooltipEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, GetJetTooltipEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.UI.SrcView.Tooltips.IFindTooltipElementsAtCursor")]
public class JetBrains.UI.SrcView.Tooltips.ExportFindTooltipElementsAtCursorAttruibute : ShellComponentAttribute {
    public double Priority;
}
[ExportFindTooltipElementsAtCursorAttruibute]
internal class JetBrains.UI.SrcView.Tooltips.FindWinFormsTooltipElementsAtCursor : object {
    [CanBeNullAttribute]
private static ITooltipProvider TryGetWinFormsTooltipProvider(WindowsMessageEventArgs args);
    private sealed virtual override ITooltipElement JetBrains.UI.SrcView.Tooltips.IFindTooltipElementsAtCursor.TryFindElementUnderCursor(Lifetime lifetime, WindowsMessageEventArgs args);
}
public interface JetBrains.UI.SrcView.Tooltips.IFindTooltipElementsAtCursor {
    [CanBeNullAttribute]
public abstract virtual ITooltipElement TryFindElementUnderCursor(Lifetime lifetime, WindowsMessageEventArgs args);
}
public interface JetBrains.UI.SrcView.Tooltips.ITooltipElement {
    public Point OriginalPointClient { get; }
    public Point OriginalPointScreen { get; }
    [NotNullAttribute]
public ITooltipInfo TooltipInfo { get; }
    public abstract virtual Point get_OriginalPointClient();
    public abstract virtual Point get_OriginalPointScreen();
    public abstract virtual ITooltipInfo get_TooltipInfo();
    public abstract virtual void AddExceptionData(Exception ex);
    public abstract virtual bool IsValid();
    public abstract virtual Point ScreenToClient(Point ptScreen);
}
public class JetBrains.UI.SrcView.Tooltips.TipControlView : OwnedForm {
    protected static RenderParams myRenderParams;
    protected bool myAutoActivate;
    [NotNullAttribute]
protected IWindowlessControl myPainter;
    [NotNullAttribute]
protected ColorTheme myColorTheme;
    protected TimeSpan myTimeout;
    protected Timer myTimerTimeout;
    private ISimpleSignal myWantsResize;
    public TimeSpan Timeout { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    protected bool ShowWithoutActivation { get; }
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public TipControlView(IWindowlessControl painter, ITheming theming, IWin32Window ownerwin);
    private static TipControlView();
    public static RenderParams GetRenderParams(IFontsManager getComponent);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    protected void OnTimerTimeoutTick(object sender, EventArgs e);
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_ShowWithoutActivation();
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void SetLayout(LayoutResult layout);
    public sealed virtual bool get_AutoActivate();
    public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual ISimpleSignal get_WantsResize();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
public abstract class JetBrains.UI.SrcView.Tooltips.TooltipElement : object {
    private Nullable`1<Point> myOriginalPointClient;
    protected Lifetime myLifetime;
    private Point myOriginalPointScreen;
    [NotNullAttribute]
private ITooltipInfo myTooltipInfo;
    public Point OriginalPointClient { get; }
    public Point OriginalPointScreen { get; }
    public ITooltipInfo TooltipInfo { get; }
    protected TooltipElement(Lifetime lifetime, Point ptScreen, ITooltipInfo tooltipInfo);
    public virtual void AddExceptionData(Exception ex);
    public abstract virtual bool IsValid();
    public abstract virtual Point ScreenToClient(Point ptScreen);
    public sealed virtual Point get_OriginalPointClient();
    public sealed virtual Point get_OriginalPointScreen();
    public sealed virtual ITooltipInfo get_TooltipInfo();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__0();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__1();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__2();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__3();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__4();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__5();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__6();
}
public class JetBrains.UI.SrcView.Tooltips.TooltipInfo : object {
    protected IPopupLayouter myLayouter;
    protected IPopupWindowContext myPopupWindowContext;
    protected IWindowlessControl myTipPainter;
    protected Rect myToolArea;
    public Rect ToolArea { get; public set; }
    public IPopupLayouter Layouter { get; public set; }
    public IWindowlessControl Painter { get; }
    public IPopupWindowContext PopupWindowContext { get; public set; }
    public TooltipInfo(IWindowlessControl painter, Rect toolarea);
    public TooltipInfo(IWindowlessControl painter, Rectangle toolarea);
    public TooltipInfo(RichText text, Rect toolarea);
    public TooltipInfo(RichText text, Rectangle toolarea);
    public TooltipInfo(RichText text, Control tool);
    public TooltipInfo(RichTextBlock text, Control tool);
    public TooltipInfo(RichTextBlock text, Rect toolarea);
    public TooltipInfo(RichTextBlock text, Rectangle toolarea);
    public Rect get_ToolArea();
    public void set_ToolArea(Rect value);
    public sealed virtual bool HitTestToolArea(Point pt);
    public sealed virtual IPopupLayouter get_Layouter();
    public void set_Layouter(IPopupLayouter value);
    public sealed virtual IWindowlessControl get_Painter();
    public sealed virtual IPopupWindowContext get_PopupWindowContext();
    public void set_PopupWindowContext(IPopupWindowContext value);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentInteractive : TooltipManagerComponent {
    public static double TooltipDismissedWithEscGraceRadius;
    private static Size myContentMarging;
    private Lifetime myLifetime;
    [CanBeNullAttribute]
private CurrentTooltipElementData myCurrentTooltip;
    [NotNullAttribute]
private SequentialLifetimes myCurrentTooltipLifetimes;
    [CanBeNullAttribute]
private Nullable`1<Point> myScreenCursorPositionWhenDismissedWithEsc;
    private Point myPtLastMouseMoveScreen;
    private JetDispatcher myDispatcher;
    protected IThreading myThreading;
    [CanBeNullAttribute]
private IIsApplicationActiveState myIsApplicationActiveState;
    [CanBeNullAttribute]
private IMainWindow myMainWindow;
    [NotNullAttribute]
private ITheming myTheming;
    private PopupWindowManager myPopupWindowManager;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private IWindowsHookManager myHookManager;
    private IAutomationViewsRegistry myAutomationViewsRegistry;
    [CanBeNullAttribute]
internal FinderInfo[] TooltipElementFindersPushNotifications;
    private IUIApplication myEnvironment;
    [CompilerGeneratedAttribute]
private static Func`2<Lifetime, IPopupLayouter> CS$<>9__CachedAnonymousMethodDelegate2;
    public TooltipManagerComponentInteractive(Lifetime lifetime, IUIApplication environment, IThreading threading, IIsApplicationActiveState isApplicationActiveState, IMainWindow mainwin, PopupWindowManager popupWindowManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, ITheming theming, IWindowsHookManager hookManager, IAutomationViewsRegistry automationViewsRegistry);
    private static TooltipManagerComponentInteractive();
    private void CreateTooltipView();
    private void DestroyTooltip();
    private void Init();
    private void OnInputAction(WindowsMessageEventArgs args);
    private void OnMouseMove_CheckCreate(LifetimeDefinition defPossible, ITooltipElement elemHover);
    private bool OnMouseMove_CheckCreate_Condition(ITooltipElement elemHover);
    private void OnMouseMove_CheckDestroy(Point ptScreen);
    protected virtual IPopupWindow ShowCore(LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context, HideFlags hideflags, TimeSpan timeout);
    protected virtual Size GetContentMarginCore();
    protected virtual RenderParams GetRenderParamsCore();
    [CompilerGeneratedAttribute]
private static IPopupLayouter <CreateTooltipView>b__0(Lifetime lifeLay);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Tooltips.TooltipManagerComponentTooltipElementFindersManager : object {
    public TooltipManagerComponentTooltipElementFindersManager(Lifetime lifetime, TooltipManagerComponentInteractive tooltipman, IViewable`1<IFindTooltipElementsAtCursor> finders, IThreading threading);
}
public class JetBrains.UI.SrcView.Tooltips.TooltipProvider : object {
    public ISignal`1<InOutEventArgs`2<Point, ITooltipInfo>> TooltipRequested;
    public TooltipProvider(Action`1<InOutEventArgs`2<Point, ITooltipInfo>> provider);
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
}
public class JetBrains.UI.SrcView.Tooltips.WinFormsTooltipElement : TooltipElement {
    public Void* Hwnd;
    [CanBeNullAttribute]
public ITooltipProvider TooltipProvider;
    public WinFormsTooltipElement(Lifetime lifetime, Void* hwnd, Point ptScreen, ITooltipInfo tooltipinfo, ITooltipProvider provider);
    public virtual void AddExceptionData(Exception ex);
    public virtual bool IsValid();
    public virtual Point ScreenToClient(Point ptScreen);
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__0();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__1();
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__2();
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ToolWindowManagement.TabbedToolWindowTabStripView : ViewControl`1<TabbedToolWindowTabStripAutomation> {
    [CompilerGeneratedAttribute]
private static Func`1<UIElement> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<Object[], object> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate1f;
    protected virtual UIElement OnRenderView(Lifetime lifetime, TabbedToolWindowTabStripAutomation automation);
    private IEnumerable`1<IDataRule> GetDataRules(TabbedToolWindowClass twclass);
    private TabStripView CreateTabStrip(Lifetime controlLifetime, IUIApplication environment, ToolWindowDescriptor descriptor, TabStripViewModel tabStripViewModel, TabbedToolWindowClass twclass, IActionBarManager actionbarman, ISignal`1<TabStripItem> tabRenameRequested);
    [CompilerGeneratedAttribute]
private static UIElement <CreateTabStrip>b__12();
    [CompilerGeneratedAttribute]
private static object <CreateTabStrip>b__15(Object[] values);
    [CompilerGeneratedAttribute]
private static object <CreateTabStrip>b__13(object value);
    [CompilerGeneratedAttribute]
private static object <CreateTabStrip>b__14(object value);
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.UI.SrcView.ToolWindowManagement.TabRenamePromptInteractive : TabRenamePrompt {
    private IUIApplication myUiApplication;
    private IUIApplication myEnvironment;
    private IApplicationHost myApplicationDescriptor;
    private IWindowsHookManager myWindowsHookManager;
    private FormValidators myFormValidators;
    public TabRenamePromptInteractive(IUIApplication uiApplication, IUIApplication environment, IApplicationHost applicationDescriptor, IWindowsHookManager windowsHookManager, FormValidators formValidators);
    public virtual string Prompt(string sourcename, string instanceName, String[] otherInstancesNames);
    private static string NameValidator(string newTitle, string instanceName, String[] otherInstancesNames);
}
public class JetBrains.UI.SrcView.ToolWindowManagement.ToolWindowContentPresenter : UserControl {
    private ToolWindowFrameBase myToolWindowFrame;
    public static DependencyProperty ToolWindowContentProperty;
    internal StackPanel myContentNotLoadedStub;
    internal StackPanel myContentUnloadedStub;
    internal ContentPresenter myContentPresenter;
    private bool _contentLoaded;
    public ToolWindowContent ToolWindowContent { get; public set; }
    public ToolWindowContentPresenter(ToolWindowFrameBase toolWindowFrame);
    private static ToolWindowContentPresenter();
    public ToolWindowContent get_ToolWindowContent();
    public void set_ToolWindowContent(ToolWindowContent value);
    private void OnPresenterLoaded(object sender, RoutedEventArgs e);
    private void OnRestoreClick(object sender, RoutedEventArgs e);
    private void Restore();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ToolWindowManagement.ToolWindowDefaultEmptyContentView : ViewControl`1<ToolWindowDefaultEmptyContentAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<EitherColor, Brush> CS$<>9__CachedAnonymousMethodDelegate1;
    protected virtual UIElement OnRenderView(Lifetime lifetime, ToolWindowDefaultEmptyContentAutomation automation);
    [CompilerGeneratedAttribute]
private static Brush <OnRenderView>b__0(EitherColor color);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.ToolWindowManagement.ToolWindowFrameContentPlaceholderView : ViewControl`1<ToolWindowFrameContentPlaceholderAutomation> {
    [CompilerGeneratedAttribute]
private static Func`2<EitherColor, Brush> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<bool, string> CS$<>9__CachedAnonymousMethodDelegated;
    protected virtual UIElement OnRenderView(Lifetime liveView, ToolWindowFrameContentPlaceholderAutomation automation);
    private static UIElement RenderContentView(Lifetime lifeContentControl, IAutomation contentcontrol, ToolWindowFrameContentPlaceholderAutomation automation);
    private static TextBlock RenderCueBanner(Lifetime lifeContent, ToolWindowFrameContentPlaceholderAutomation automation);
    [CompilerGeneratedAttribute]
private static Brush <OnRenderView>b__2(EitherColor color);
    [CompilerGeneratedAttribute]
private static string <RenderCueBanner>b__b(bool isLoad);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Updates.BackgroundUpdatesChecker : object {
    private IThreading myThreading;
    private IEnumerable`1<IInProcessUpdatesChecker> myInProcessUpdatesCheckers;
    private ILogger myLogger;
    private Lifetime myLifetime;
    private IContextBoundSettingsStoreLive myApplicationWideSettings;
    public static TimeSpan Period;
    [CompilerGeneratedAttribute]
private IProperty`1<IList`1<UpdateInfo>> <AvailableUpdates>k__BackingField;
    public IProperty`1<IList`1<UpdateInfo>> AvailableUpdates { get; public set; }
    public BackgroundUpdatesChecker(ISettingsStore settingsStore, IThreading threading, IEnumerable`1<IInProcessUpdatesChecker> inProcessUpdatesCheckers, ILogger logger, Lifetime lifetime);
    private static BackgroundUpdatesChecker();
    [CompilerGeneratedAttribute]
public IProperty`1<IList`1<UpdateInfo>> get_AvailableUpdates();
    [CompilerGeneratedAttribute]
public void set_AvailableUpdates(IProperty`1<IList`1<UpdateInfo>> value);
    public void DismissUpdates(Func`2<UpdateInfo, bool> predicate);
    public void SpawnCheck(Lifetime lifetime);
    private void NotifyUpdates(ICollection`1<UpdateInfo> updateInfos, bool allowed, Lifetime lifetime);
    private string ProductAndVersionId(UpdateInfo updateInfo);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Updates.ExtensionUpdatesNotifications : UpdatesNotificationsBase`1<ExtensionManagerAction> {
    [CompilerGeneratedAttribute]
private static Func`2<UpdateInfo, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ICollection`1<UpdateInfo>, RichTextBlock> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`3<RichText, UpdateInfo, RichText> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<RichText, RichTextBlock> CS$<>9__CachedAnonymousMethodDelegate16;
    public ExtensionUpdatesNotifications(Lifetime lifetime, ILogger logger, BackgroundUpdatesChecker backgroundUpdatesChecker, IStatusBar statusBar, IActionManager actionManager);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__f(UpdateInfo info);
    [CompilerGeneratedAttribute]
private static RichTextBlock <.ctor>b__10(ICollection`1<UpdateInfo> infos);
    [CompilerGeneratedAttribute]
private static RichText <.ctor>b__11(RichText text, UpdateInfo info);
    [CompilerGeneratedAttribute]
private static RichTextBlock <.ctor>b__12(RichText text);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.SrcView.Updates.InProcessUpdatesChecker : DefaultInProcessUpdater {
    private HostInfo myHostInfo;
    private WebProxySettingsReader myProxySettingsReader;
    private SubProducts mySubProducts;
    private ILogger myLogger;
    private bool myAllowPrerelease;
    private bool myCheckerReturnHasUpdates;
    private bool myCheckerReturnHasUpdatesNextWave;
    private JetSemanticVersion myShellPackageVersion;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<IPackageName, IProductInfo>, UpdateInfo> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<ISubProductInfo, UpdateInfo> CS$<>9__CachedAnonymousMethodDelegatea;
    public InProcessUpdatesChecker(HostInfo hostInfo, ApplicationPackages apppkgs, WebProxySettingsReader proxySettingsReader, IHostProductInfo hostProductInfo, IProductCommandLine productCommandLine, SubProducts subProducts, IPackageRepositoryFactory packageRepositoryFactory, ILogger logger);
    public virtual IList`1<UpdateInfo> GetUpdates();
    public virtual bool GetUpdateNotificationsAllowed();
    public bool UpdateNotificationsAllowedImpl();
    public void TestUpdates(Lifetime lifetime);
    public void TestUpdatesNextWave(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static UpdateInfo <GetUpdates>b__7(KeyValuePair`2<IPackageName, IProductInfo> pair);
    [CompilerGeneratedAttribute]
private static UpdateInfo <GetUpdates>b__8(ISubProductInfo subProductInfo);
    [CompilerGeneratedAttribute]
private void <TestUpdates>b__e();
    [CompilerGeneratedAttribute]
private void <TestUpdatesNextWave>b__f();
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.Updates.ProductsUpdatesNotifications : UpdatesNotificationsBase`1<CheckUpdatesManuallyAction> {
    private OpensUri myOpensUri;
    private IMainWindow myMainWindow;
    private IWindowBranding myWindowBranding;
    private ILicense2CheckComponent myLicenceCheckComponent;
    private static IEqualityComparer`1<IProductInfo> ourProductInfoComparer;
    [CompilerGeneratedAttribute]
private static Func`2<ICollection`1<UpdateInfo>, RichTextBlock> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<IProductInfo, IProductInfo, bool> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<IProductInfo, int> CS$<>9__CachedAnonymousMethodDelegate24;
    public ProductsUpdatesNotifications(Lifetime lifetime, OpensUri opensUri, IMainWindow mainWindow, IWindowBranding windowBranding, ILogger logger, BackgroundUpdatesChecker backgroundUpdatesChecker, IStatusBar statusBar, IActionManager actionManager, SubProducts subProducts, ILicense2CheckComponent licenceCheckComponent);
    private static ProductsUpdatesNotifications();
    protected virtual string UpdateMessageMenuText(IActionDefWithId action);
    protected virtual void ExecuteUpdate(Lifetime lifetime, IActionManager actionManager, BackgroundUpdatesChecker backgroundUpdatesChecker, Func`2<UpdateInfo, bool> updatesFilter, SequentialLifetimes notificationsLifetimes);
    private static TextBlock GoToLicenseAccount();
    private static TextBlock GoToBuy();
    private static TextBlock ProductsToBeUpdatedList(List`1<UpdateInfo> updateInfos);
    private static TextBlock ToInstallGoToHelp();
    private RequireLicenseStatus GetRequireLicenseVerdict(UpdateInfo updateInfo);
    private LicenseCheckResult CheckExistingLicense(IProductInfo productInfo);
    private LicenseCheckResult CheckExistingLicense(ILicensedEntity entity, IProductInfo productInfo, IEnumerable`1<NewLicenseData> licenses);
    [CompilerGeneratedAttribute]
private static RichTextBlock <.ctor>b__1(ICollection`1<UpdateInfo> infos);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__21(IProductInfo x, IProductInfo y);
    [CompilerGeneratedAttribute]
private static int <.cctor>b__22(IProductInfo info);
}
[InternalActionAttribute]
[ActionAttribute("Updates Xslt Tester")]
public class JetBrains.UI.SrcView.Updates.TestUpdatesXsltActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.UI.SrcView.Updates.TestUpdatesXsltDialog : Form {
    private static string TestCategoryName;
    private UpdatesManager myUpdatesManager;
    private UpdatesPopupAlerts myUpdatesAlerts;
    private JetPopupMenus myJetPopupMenus;
    private WebProxySettingsReader myWebProxySettingsReader;
    private IUIApplication myApplication;
    private IContainer components;
    private TextBox textBoxXml;
    private SplitContainer splitContainer1;
    private TextBox textBoxXslt;
    private TextBox textBoxUrl;
    private Button buttonGo;
    private TextBox textBoxLocalData;
    private Button buttonTestDialog;
    public TestUpdatesXsltDialog(UpdatesPopupAlerts updatesAlerts, UpdatesManager updatesManager, IApplicationDescriptorUpdatesTmp applicationDescriptor, JetPopupMenus jetPopupMenus, WebProxySettingsReader webProxySettingsReader, IUIApplication application);
    private void buttonGo_Click(object sender, EventArgs e);
    private void buttonTestDialog_Click(object sender, EventArgs e);
    private void RetrieveUpdateXslt(UpdatesCategory category);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.SrcView.Updates.TestUpdatesXsltService : object {
    public Action ShowTestDialog;
    public TestUpdatesXsltService(UpdatesPopupAlerts updatesAlerts, UpdatesManager updatesManager, IApplicationDescriptorUpdatesTmp applicationDescriptor, JetPopupMenus jetPopupMenus, WebProxySettingsReader webProxySettingsReader, IUIApplication application);
}
public abstract class JetBrains.UI.SrcView.Updates.UpdatesNotificationsBase`1 : object {
    protected UpdatesNotificationsBase`1(Lifetime lifetime, ILogger logger, BackgroundUpdatesChecker backgroundUpdatesChecker, IStatusBar statusBar, IActionManager actionManager, Func`2<UpdateInfo, bool> updatesFilter, Func`2<ICollection`1<UpdateInfo>, RichTextBlock> getTooltip, double priority);
    protected virtual string UpdateMessageMenuText(IActionDefWithId action);
    protected virtual void ExecuteUpdate(Lifetime lifetime, IActionManager actionManager, BackgroundUpdatesChecker backgroundUpdatesChecker, Func`2<UpdateInfo, bool> updatesFilter, SequentialLifetimes notificationsLifetimes);
}
[ShellComponentAttribute]
public class JetBrains.UI.SrcView.UsageStatistics.ConfigurationActivityTrackingProvider : object {
    private Lifetime myLifetime;
    private ISettingsStore mySettingsStore;
    [CanBeNullAttribute]
private IMainWindow myMainWindow;
    public ConfigurationActivityTrackingProvider(Lifetime lifetime, ISettingsStore settingsStore, IMainWindow mainWindow);
    public sealed virtual void GetActivityStatistics(JObject log);
}
public class JetBrains.UI.SrcView.UsageStatistics.Controls.ProductUsageFeedbackDialog : Window {
    private IUIApplication myEnvironment;
    private ActivityTrackingSettings myActivityTrackingSettings;
    private RadioButton myParticipateRadio;
    public ProductUsageFeedbackDialog(IUIApplication environment, ActivityTrackingSettings activityTrackingSettings);
    private static RichText GetExplanationText();
    private void OnOkClick(object sender, EventArgs e);
}
public class JetBrains.UI.SrcView.UsageStatistics.CounterGroupAutomation : AAutomation {
    private ActivityTracking myActivityTracking;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<CounterItemAutomation> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<CounterItemAutomation> <ItemsSorted>k__BackingField;
    [CompilerGeneratedAttribute]
private static Comparison`1<CounterItemAutomation> CS$<>9__CachedAnonymousMethodDelegate3;
    public IProperty`1<string> Name { get; private set; }
    public IListEvents`1<CounterItemAutomation> Items { get; private set; }
    public IListEvents`1<CounterItemAutomation> ItemsSorted { get; private set; }
    public CounterGroupAutomation(Lifetime lifetime, string groupName, ActivityTracking activityTracking);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IListEvents`1<CounterItemAutomation> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IListEvents`1<CounterItemAutomation> value);
    [CompilerGeneratedAttribute]
public IListEvents`1<CounterItemAutomation> get_ItemsSorted();
    [CompilerGeneratedAttribute]
private void set_ItemsSorted(IListEvents`1<CounterItemAutomation> value);
    public void SetValue(Lifetime lifetime, Guid itemId, int newValue);
    [CompilerGeneratedAttribute]
private static int <.ctor>b__1(CounterItemAutomation o1, CounterItemAutomation o2);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.UsageStatistics.CounterGroupView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.SrcView.UsageStatistics.CounterItemAutomation : AAutomation {
    public Guid Id;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <Count>k__BackingField;
    public string Name { get; private set; }
    public IProperty`1<int> Count { get; private set; }
    public CounterItemAutomation(Lifetime lifetime, Guid id, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(IProperty`1<int> value);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.UsageStatistics.CounterItemView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ActionGroupAttribute("2")]
public class JetBrains.UI.SrcView.UsageStatistics.IntoStatMenu : object {
    public IntoStatMenu(ShowUsageStatisticsAction showToolbar);
}
[ActionAttribute("Show statistics")]
public class JetBrains.UI.SrcView.UsageStatistics.ShowUsageStatisticsAction : ActivateToolWindowActionHandler`1<StatisticsToolWindowDescriptor> {
}
[ShellComponentAttribute]
internal class JetBrains.UI.SrcView.UsageStatistics.StatisticsToolWindow : object {
    public StatisticsToolWindow(Lifetime lifetime, ToolWindowManager toolWindowManager, StatisticsToolWindowDescriptor descriptor, ApplicationFocusTracking applicationFocusTracking, ActivityTracking activityTracking);
    private static EitherControl CreateControl(Lifetime lifetime, ApplicationFocusTracking applicationFocusTracking, ActivityTracking activityTracking);
}
[ToolWindowDescriptorAttribute]
public class JetBrains.UI.SrcView.UsageStatistics.StatisticsToolWindowDescriptor : ToolWindowDescriptor {
    public StatisticsToolWindowDescriptor(IApplicationHost windowBranding, IWindowBranding branding);
}
[ActionGroupAttribute("UsageStatistics", "1")]
public class JetBrains.UI.SrcView.UsageStatistics.StatMenu : object {
}
public class JetBrains.UI.SrcView.UsageStatistics.UsageStatisticsAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<int> <Counter>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionEvents`1<FocusEvent> <FocusEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionEvents`1<CounterGroupAutomation> <CounterGroups>k__BackingField;
    public IProperty`1<int> Counter { get; private set; }
    public CollectionEvents`1<FocusEvent> FocusEvents { get; private set; }
    public CollectionEvents`1<CounterGroupAutomation> CounterGroups { get; private set; }
    public UsageStatisticsAutomation(Lifetime lifetime, ApplicationFocusTracking applicationFocusTracking, ActivityTracking activityTracking);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_Counter();
    [CompilerGeneratedAttribute]
private void set_Counter(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public CollectionEvents`1<FocusEvent> get_FocusEvents();
    [CompilerGeneratedAttribute]
private void set_FocusEvents(CollectionEvents`1<FocusEvent> value);
    [CompilerGeneratedAttribute]
public CollectionEvents`1<CounterGroupAutomation> get_CounterGroups();
    [CompilerGeneratedAttribute]
private void set_CounterGroups(CollectionEvents`1<CounterGroupAutomation> value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(CounterChangedArgs args);
}
[ViewAttribute("0")]
public class JetBrains.UI.SrcView.UsageStatistics.UsageStatisticsView : UserControl {
    private bool _contentLoaded;
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ZoneMarkerAttribute]
public class JetBrains.UI.SrcView.ZoneMarker : object {
}
[ShellComponentAttribute("1", "0", "1")]
public class JetBrains.UI.StdApplicationUI.About.AboutBoxInteractive : AboutBox {
    public AboutBoxInteractive(Lifetime lifetime, DefaultInProcessUpdater inProcessUpdatesChecker, IEnumerable`1<SubplatformOriginalRevision> revs, ILicense2CheckComponent licenseCheckerComponent, IApplicationHostImages images, ProductConfigurations productConfigurations, IUIApplication environment, IApplicationHost host, SubProducts subProducts, IEnumerable`1<ApplicationPackageArtifact> apppkgs, FontsManager fontsManager, IEnumerable`1<IPopulateAboutBox> populators);
}
public class JetBrains.UI.StdApplicationUI.About.AboutBoxView : Form {
    private LifetimeDefinition myLifetimeDefinition;
    private IInProcessUpdatesChecker myInProcessUpdatesChecker;
    private IApplicationHostImages myImages;
    private IApplicationHost myHost;
    private int MinPictureWidth;
    [CanBeNullAttribute]
private IMainWindow myAppMainWindow;
    [CompilerGeneratedAttribute]
private static Action`1<Button> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageArtifact, DateTime> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<SubplatformOriginalRevision, SubplatformName> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageArtifact, string> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<ApplicationPackageArtifact, JetSemanticVersion> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<ISubProductInfo, string> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Action`1<Control> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`3<string, int, <>f__AnonymousTypeb`2<string, int>> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTypeb`2<string, int>, bool> CS$<>9__CachedAnonymousMethodDelegate39;
    public AboutBoxView(LifetimeDefinition lifetimeDefinition, DefaultInProcessUpdater inProcessUpdatesChecker, ILicense2CheckComponent licenseCheckerComponent, IApplicationHostImages images, ProductConfigurations productConfigurations, IEnumerable`1<IPopulateAboutBox> populateAboutBoxExternally, IUIApplication environment, SubProducts products, IApplicationHost host, IEnumerable`1<ApplicationPackageArtifact> apppkgs, IEnumerable`1<SubplatformOriginalRevision> revs, FontsManager fontsManager);
    public void ShowDialog();
    private static Control InitView_License(StringBuilder sbAllData, ILicense2CheckComponent licenseCheckerComponent, IUIApplication environment);
    private void InitView(ILicense2CheckComponent licenseCheckerComponent, ProductConfigurations productConfigurations, IEnumerable`1<IPopulateAboutBox> populateAboutBoxExternally, IUIApplication environment, SubProducts subproducts, IEnumerable`1<ApplicationPackageArtifact> apppkgs, IEnumerable`1<SubplatformOriginalRevision> revs, FontsManager fontsManager);
    private Control InitView_Footer(string sAllData, IUIApplication application, SubProducts subProducts);
    [CanBeNullAttribute]
private Control InitView_Image();
    private Control InitView_ProductInfo(StringBuilder sbAllData, IUIApplication environment, SubProducts products, IEnumerable`1<ApplicationPackageArtifact> apppkgs, IEnumerable`1<SubplatformOriginalRevision> revs);
    private RichTextBlock RichTextBlock(SubProducts products, string sBestBeforeInfo, IList`1<UpdateInfo> updateInfos);
    private static string FormatDays(int days);
    private void SwitchIntoCopyClipboardMode(string data, IUIApplication application);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object param0, FormClosedEventArgs param1);
    [CompilerGeneratedAttribute]
private static void <InitView_Footer>b__11(Button btn);
    [CompilerGeneratedAttribute]
private void <InitView_Footer>b__13(Button btn);
    [CompilerGeneratedAttribute]
private static DateTime <InitView_ProductInfo>b__1b(ApplicationPackageArtifact apppkg);
    [CompilerGeneratedAttribute]
private static SubplatformName <InitView_ProductInfo>b__1e(SubplatformOriginalRevision r);
    [CompilerGeneratedAttribute]
private static string <InitView_ProductInfo>b__1f(ApplicationPackageArtifact apppkg);
    [CompilerGeneratedAttribute]
private static JetSemanticVersion <InitView_ProductInfo>b__20(ApplicationPackageArtifact apppkg);
    [CompilerGeneratedAttribute]
private static string <RichTextBlock>b__27(ISubProductInfo product);
    [CompilerGeneratedAttribute]
private static void <SwitchIntoCopyClipboardMode>b__31(Control ctrl);
    [CompilerGeneratedAttribute]
private void <SwitchIntoCopyClipboardMode>b__33(Button btn);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousTypeb`2<string, int> <SwitchIntoCopyClipboardMode>b__34(string txt, int index);
    [CompilerGeneratedAttribute]
private static bool <SwitchIntoCopyClipboardMode>b__35(<>f__AnonymousTypeb`2<string, int> tuple);
}
[EnvironmentComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.UI.StdApplicationUI.NullMainWindow : object {
    private IMainWindow myNullWindow;
    private IProperty`1<IWin32Window> JetBrains.Application.StdApplicationUI.IMainWindow.PrimaryWindow { get; }
    private IProperty`1<IWin32Window> JetBrains.Application.StdApplicationUI.IMainWindow.ActiveWindow { get; }
    private ICollectionEvents`1<IWin32Window> JetBrains.Application.StdApplicationUI.IMainWindow.TopLevelWindows { get; }
    public NullMainWindow(Lifetime lifetime);
    private sealed virtual override IProperty`1<IWin32Window> JetBrains.Application.StdApplicationUI.IMainWindow.get_PrimaryWindow();
    private sealed virtual override IProperty`1<IWin32Window> JetBrains.Application.StdApplicationUI.IMainWindow.get_ActiveWindow();
    private sealed virtual override ICollectionEvents`1<IWin32Window> JetBrains.Application.StdApplicationUI.IMainWindow.get_TopLevelWindows();
}
[ActionAttribute("Product &Web Page")]
public class JetBrains.UI.StdApplicationUI.ProductPageAction : object {
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.UI.StdApplicationUI.StaticMainWindow : object {
    private Lifetime myLifetime;
    private Win32Window myWin32Window;
    private IProperty`1<IWin32Window> mySingleWindow;
    private ICollectionEvents`1<IWin32Window> myWindows;
    public IProperty`1<IWin32Window> PrimaryWindow { get; }
    public IProperty`1<IWin32Window> ActiveWindow { get; }
    public ICollectionEvents`1<IWin32Window> TopLevelWindows { get; }
    public StaticMainWindow(Lifetime lifetime, IntPtr handle);
    public StaticMainWindow(Lifetime lifetime, IWin32Window window);
    public StaticMainWindow(Lifetime lifetime, Void* handle);
    public sealed virtual IProperty`1<IWin32Window> get_PrimaryWindow();
    public sealed virtual IProperty`1<IWin32Window> get_ActiveWindow();
    public sealed virtual ICollectionEvents`1<IWin32Window> get_TopLevelWindows();
}
[ShellComponentAttribute("4", "0", "0")]
public class JetBrains.UI.StdApplicationUI.StatusBar.Indicators.MemoryUsageIndicator : MemoryUsageIndicatorBase {
    private static TimeSpan TimerUpdateValueInterval;
    private SequentialLifetimes myLifetimesPopupMessage;
    private IMainWindow myMainWindow;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private IProperty`1<long> myMemoryUsageValue;
    private ISettingsStore mySettingsStore;
    private Lazy`1<ITooltipManager> myTooltips;
    private IWindowsHookManager myWindowsHookManager;
    private bool myIsInternalMode;
    [CanBeNullAttribute]
public IProperty`1<JetStatusBarIndicator> Indicator;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegatec;
    public MemoryUsageIndicator(Lifetime lifetimeComponent, IThreading invocator, IStatusBar statusbar, IIsApplicationActiveState appactive, Lazy`1<ITooltipManager> tooltips, ISettingsStore settingsStore, ProductConfigurations productConfigurations, IMainWindow mainWindow, IWindowsHookManager windowsHookManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IStatusBarColorsManager thememan, ILogger logger);
    private static MemoryUsageIndicator();
    private void OnContextMenu(ContextMenuEventArgs args);
    private void CopySurvivorsToClipboard();
    private void CollectGarbage();
    private static void TryForceCompactHeaps();
    private void OnHide();
    private void ShowPopupMessage(RichText text);
    [CompilerGeneratedAttribute]
private void <OnContextMenu>b__a(Lifetime lifetime, JetPopupMenu menu);
    [CompilerGeneratedAttribute]
private static void <TryForceCompactHeaps>b__b();
}
public class JetBrains.UI.StdApplicationUI.StatusBar.Indicators.TrefoilIndicator : object {
    private Lifetime myLifetime;
    private LifetimeDefinition myLifetimeDefinition;
    private Lifetime myLifetimeOuter;
    private IStatusBar myStatusBar;
    public JetStatusBarIndicator Indicator;
    public SpinningTrefoilAutomation Spinner;
    public TrefoilIndicator(Lifetime lifetimeOuter, IStatusBar statbar);
    public static TrefoilIndicator CreateIndicatorInStatusBar(Lifetime lifetime, IStatusBar statbar);
    public void Invert();
    public void Reverse();
    private void OnClick(MouseEventArgs args);
    private void OnContextMenu(ContextMenuEventArgs args);
    private void OnDoubleClick(MouseEventArgs args);
    [CompilerGeneratedAttribute]
private void <OnContextMenu>b__0(Lifetime lifetime, JetPopupMenu menu);
    [CompilerGeneratedAttribute]
private void <OnContextMenu>b__1();
    [CompilerGeneratedAttribute]
private void <OnContextMenu>b__2();
}
public class JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarIndicatorView : NativeWindow {
    protected IProperty`1<JetStatusBarIndicator> myData;
    private Property`1<bool> myIsHovered;
    private Property`1<Padding> myPadding;
    private Timer myTimerHover;
    private ISimpleSignal myWantsResize;
    private IProperty`1<IWindowlessControl> myWindowlessControl;
    public ISimpleSignal GottenDirty;
    private LifetimeDefinition myLifetimeDefinition;
    private JetPopupMenus myJetPopupMenus;
    private IWindowsHookManager myWindowsHookManager;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    [CompilerGeneratedAttribute]
private bool <AutoActivate>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<IWindowlessControl, IProperty`1<bool>> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<IWindowlessControl, IProperty`1<bool>> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<JetStatusBarIndicator, IProperty`1<Padding>> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<JetStatusBarIndicator, IProperty`1<bool>> CS$<>9__CachedAnonymousMethodDelegate13;
    public Rectangle Bounds { get; public set; }
    public IProperty`1<JetStatusBarIndicator> Data { get; }
    public bool Visible { get; public set; }
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public JetStatusBarIndicatorView(JetStatusBarIndicator data, JetPopupMenus jetPopupMenus, IWindowsHookManager windowsHookManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IComponentContainer containerForFactoringViews, IAutomationViewsRegistry automationViewsRegistry);
    public Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    public IProperty`1<JetStatusBarIndicator> get_Data();
    public bool get_Visible();
    public void set_Visible(bool value);
    public void CreateControl(IWin32Window parent, Rectangle bounds);
    public void CreateControl(IWin32Window parent);
    protected void OnButtonDblClk(Message& m, MouseButtons button);
    protected void OnButtonUp(Message& m, MouseButtons button);
    private void ShowContextMenu();
    protected void OnContextMenu(Message& m);
    protected void OnPaint();
    [CanBeNullAttribute]
private TooltipInfo GetTooltip_Indicator(Point point);
    [CanBeNullAttribute]
private ITooltipInfo GetTooltip_View(Lifetime lifetime, Point point);
    private void InitDataFlow(Lifetime lifetime, IComponentContainer containerForFactoringViews, IAutomationViewsRegistry automationViewsRegistry);
    private void OnTimerHoverTick();
    private void PaintBackground(Graphics g);
    protected virtual void OnHandleChange();
    protected virtual void WndProc(Message& m);
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void SetLayout(LayoutResult layout);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoActivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual ISimpleSignal get_WantsResize();
    public sealed virtual void Dispose();
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <ShowContextMenu>b__2(Action`2<Lifetime, JetPopupMenu> FBeforeShow);
    [CompilerGeneratedAttribute]
private void <OnPaint>b__7(Graphics g);
    [CompilerGeneratedAttribute]
private static IProperty`1<bool> <InitDataFlow>b__b(IWindowlessControl arg);
    [CompilerGeneratedAttribute]
private static IProperty`1<bool> <InitDataFlow>b__c(IWindowlessControl arg);
    [CompilerGeneratedAttribute]
private static IProperty`1<Padding> <InitDataFlow>b__d(JetStatusBarIndicator arg);
    [CompilerGeneratedAttribute]
private static IProperty`1<bool> <InitDataFlow>b__e(JetStatusBarIndicator arg);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__f();
    [CompilerGeneratedAttribute]
private object <GetDesiredSize>b__16();
    [CompilerGeneratedAttribute]
private object <SetLayout>b__1c();
}
public class JetBrains.UI.StdApplicationUI.StatusBar.JetStatusBarShim : NativeWindow {
    private JetDispatcher Dispatcher;
    [NotNullAttribute]
protected static JetHashSet`1<WindowsMessages> myStatusbarMessagesAll;
    [NotNullAttribute]
protected static IList`1<WindowsMessages> myStatusbarMessagesExpected;
    [NotNullAttribute]
protected static JetHashSet`1<WindowsMessages> myStatusbarMessagesUnexpected;
    private static ReadonlyToken myReadonlyCookie;
    [NotNullAttribute]
protected IListEvents`1<JetStatusBarIndicatorView> myIndicatorViews;
    [NotNullAttribute]
private Property`1<IntPtr> HandleProperty;
    private Property`1<bool> IsInsideSetParts;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IListEvents`1<JetStatusBarIndicator> myIndicatorData;
    private Property`1<bool> myIsVisible;
    private IntPtr myLastHandle;
    private Padding myPaddingAroundEachPart;
    private FixedBuffer myRemappedPartsBuffer;
    private bool myVisibilityUpdatesWaiting;
    public static int MinFirstPartWidth;
    private InternalMode myInternalMode;
    [NotNullAttribute]
public static string StatusBarWindowClassName;
    [CompilerGeneratedAttribute]
private static Action`1<AddRemoveIndexEventArgs`1<JetStatusBarIndicatorView>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IntPtr, int> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<IntPtr, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousTypec`2<IntPtr, int>, int> CS$<>9__CachedAnonymousMethodDelegate16;
    public IListEvents`1<JetStatusBarIndicator> IndicatorData { get; }
    public IProperty`1<bool> IsVisible { get; }
    protected IListEvents`1<JetStatusBarIndicatorView> IndicatorViews { get; }
    public JetStatusBarShim(Lifetime lifetime, InternalMode internalMode, JetPopupMenus jetPopupMenus, IWindowsHookManager windowsHookManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IComponentContainer containerForFactoringViews, IAutomationViewsRegistry automationViewsRegistry);
    private static JetStatusBarShim();
    public IListEvents`1<JetStatusBarIndicator> get_IndicatorData();
    public IProperty`1<bool> get_IsVisible();
    public void Attach(IntPtr hwndStatusBar);
    [NotNullAttribute]
protected static JetHashSet`1<WindowsMessages> GetUnexpectedStatusBarMessages();
    private static void InvalidateSizeOf(IntPtr hwnd);
    protected IListEvents`1<JetStatusBarIndicatorView> get_IndicatorViews();
    protected void InvalidateSize();
    private void InitDataFlow(JetPopupMenus jetPopupMenus, IWindowsHookManager windowsHookManager, IMainWindowPopupWindowContext mainWindowPopupWindowContext, IComponentContainer containerForFactoringViews, IAutomationViewsRegistry automationViewsRegistry);
    private void OnPingStatusBar();
    private bool OnSbGetBorders(Message& m);
    private bool OnSbSetParts(Message& m);
    private void OnSbSetParts_Apply(IList`1<Rectangle> rectBounds);
    private bool OnSbSetParts_Measure(Message& m, IList`1<Rectangle> rectBounds, IGraphicsContainer gc);
    protected virtual void OnHandleChange();
    protected virtual void WndProc(Message& m);
    public static IntPtr FindStatusBarInMainWindow(IntPtr hwndMain);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__7(AddRemoveIndexEventArgs`1<JetStatusBarIndicatorView> args);
    [CompilerGeneratedAttribute]
private static void <InitDataFlow>b__8(AddRemoveIndexEventArgs`1<JetStatusBarIndicatorView> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__9(Lifetime lifeView, JetStatusBarIndicatorView view);
    [CompilerGeneratedAttribute]
private void <OnPingStatusBar>b__d();
    [CompilerGeneratedAttribute]
private static int <FindStatusBarInMainWindow>b__f(IntPtr hwndOriginal);
    [CompilerGeneratedAttribute]
private static bool <FindStatusBarInMainWindow>b__10(IntPtr hwnd);
    [CompilerGeneratedAttribute]
private static int <FindStatusBarInMainWindow>b__12(<>f__AnonymousTypec`2<IntPtr, int> data);
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("56FDF344-FD6D-11d0-958A-006097C9A090")]
public class JetBrains.UI.TaskBar.CWin7TaskBar : object {
}
public class JetBrains.UI.TaskBar.DummyTaskBar : object {
    public sealed virtual void HrInit();
    public sealed virtual void AddTab(IntPtr hwnd);
    public sealed virtual void DeleteTab(IntPtr hwnd);
    public sealed virtual void ActivateTab(IntPtr hwnd);
    public sealed virtual void SetActiveAlt(IntPtr hwnd);
    public sealed virtual void MarkFullscreenWindow(IntPtr hwnd, bool fFullscreen);
    public sealed virtual void SetProgressValue(IntPtr hwnd, ulong ullCompleted, ulong ullTotal);
    public sealed virtual void SetProgressState(IntPtr hwnd, TBPFLAG tbpFlags);
    public sealed virtual void RegisterTab(IntPtr hwndTab, IntPtr hwndMDI);
    public sealed virtual void UnregisterTab(IntPtr hwndTab);
    public sealed virtual void SetTabOrder(IntPtr hwndTab, IntPtr hwndInsertBefore);
    public sealed virtual void SetTabActive(IntPtr hwndTab, IntPtr hwndInsertBefore, UInt32 dwReserved);
    public sealed virtual UInt32 ThumbBarAddButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public sealed virtual UInt32 ThumbBarUpdateButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public sealed virtual void ThumbBarSetImageList(IntPtr hwnd, IntPtr himl);
    public sealed virtual void SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string pszDescription);
    public sealed virtual void SetThumbnailTooltip(IntPtr hwnd, string pszTip);
    public sealed virtual void SetThumbnailClip(IntPtr hwnd, IntPtr prcClip);
    public sealed virtual void SetTabProperties(IntPtr hwndTab, STPFLAG stpFlags);
}
[GuidAttribute("c43dc798-95d1-4bea-9030-bb99e2983a1a")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.UI.TaskBar.IWin7TaskBar {
    public abstract virtual void HrInit();
    public abstract virtual void AddTab(IntPtr hwnd);
    public abstract virtual void DeleteTab(IntPtr hwnd);
    public abstract virtual void ActivateTab(IntPtr hwnd);
    public abstract virtual void SetActiveAlt(IntPtr hwnd);
    public abstract virtual void MarkFullscreenWindow(IntPtr hwnd, bool fFullscreen);
    public abstract virtual void SetProgressValue(IntPtr hwnd, ulong ullCompleted, ulong ullTotal);
    public abstract virtual void SetProgressState(IntPtr hwnd, TBPFLAG tbpFlags);
    public abstract virtual void RegisterTab(IntPtr hwndTab, IntPtr hwndMDI);
    public abstract virtual void UnregisterTab(IntPtr hwndTab);
    public abstract virtual void SetTabOrder(IntPtr hwndTab, IntPtr hwndInsertBefore);
    public abstract virtual void SetTabActive(IntPtr hwndTab, IntPtr hwndInsertBefore, UInt32 dwReserved);
    public abstract virtual UInt32 ThumbBarAddButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public abstract virtual UInt32 ThumbBarUpdateButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public abstract virtual void ThumbBarSetImageList(IntPtr hwnd, IntPtr himl);
    public abstract virtual void SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string pszDescription);
    public abstract virtual void SetThumbnailTooltip(IntPtr hwnd, string pszTip);
    public abstract virtual void SetThumbnailClip(IntPtr hwnd, IntPtr prcClip);
    public abstract virtual void SetTabProperties(IntPtr hwndTab, STPFLAG stpFlags);
}
public enum JetBrains.UI.TaskBar.STPFLAG : Enum {
    public int value__;
    public static STPFLAG STPF_NONE;
    public static STPFLAG STPF_USEAPPTHUMBNAILALWAYS;
    public static STPFLAG STPF_USEAPPTHUMBNAILWHENACTIVE;
    public static STPFLAG STPF_USEAPPPEEKALWAYS;
    public static STPFLAG STPF_USEAPPPEEKWHENACTIVE;
}
[ShellComponentAttribute("3", "1", "2")]
public class JetBrains.UI.TaskBar.TaskBarManagerInteractive : TaskBarManager {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IThreading myThreading;
    private Lazy`1<Win7TaskBarWrapper> myTaskBarWrapper;
    public TaskBarManagerInteractive(Lifetime lifetime, ILogger logger, IThreading threading, IMainWindow mainWindow);
    protected virtual void AddProgressCore(Lifetime lifetime, IProgressIndicatorModel indicatorModel);
    protected virtual void SetProgressStateCore(TaskBarProgressState state);
    private void UpdateProgress(PropertyChangedEventArgs`1<double> propertyChangedEventArgs);
    private void FinishProgress();
    private void DoFinishProgress();
    [CompilerGeneratedAttribute]
private void <AddProgressCore>b__4();
}
public enum JetBrains.UI.TaskBar.TBPFLAG : Enum {
    public int value__;
    public static TBPFLAG TBPF_NOPROGRESS;
    public static TBPFLAG TBPF_INDETERMINATE;
    public static TBPFLAG TBPF_NORMAL;
    public static TBPFLAG TBPF_ERROR;
    public static TBPFLAG TBPF_PAUSED;
}
[FlagsAttribute]
internal enum JetBrains.UI.TaskBar.THBFLAGS : Enum {
    public int value__;
    public static THBFLAGS THBF_ENABLED;
    public static THBFLAGS THBF_DISABLED;
    public static THBFLAGS THBF_DISMISSONCLICK;
    public static THBFLAGS THBF_NOBACKGROUND;
    public static THBFLAGS THBF_HIDDEN;
    public static THBFLAGS THBF_NONINTERACTIVE;
}
internal enum JetBrains.UI.TaskBar.THBMASK : Enum {
    public int value__;
    public static THBMASK THB_BITMAP;
    public static THBMASK THB_ICON;
    public static THBMASK THB_TOOLTIP;
    public static THBMASK THB_FLAGS;
}
public class JetBrains.UI.TaskBar.THUMBBUTTON : ValueType {
    internal static int THBN_CLICKED;
    internal THBMASK dwMask;
    internal UInt32 iId;
    internal UInt32 iBitmap;
    internal IntPtr hIcon;
    internal string szTip;
    internal THBFLAGS dwFlags;
}
internal class JetBrains.UI.TaskBar.Win7TaskBarWrapper : object {
    private IMainWindow myMainWindow;
    private JetDispatcher myDispatcher;
    private static object ourLock;
    private static IWin7TaskBar ourDummyTaskBar;
    private IWin7TaskBar modreq(System.Runtime.CompilerServices.IsVolatile) myTaskbar;
    private IWin7TaskBar Win7TaskBar { get; }
    private IntPtr MainWindowHandle { get; }
    public Win7TaskBarWrapper(IThreading threading, IMainWindow mainWindow);
    private static Win7TaskBarWrapper();
    public void SetProgressValue(int current, int total);
    public void SetProgressState(TaskBarProgressState state);
    private IWin7TaskBar get_Win7TaskBar();
    private IntPtr get_MainWindowHandle();
}
public class JetBrains.UI.TextHighlighting.Attached.DelegateHighlighter : object {
    private Func`3<UIElement, string, IEnumerable`1<HighlightedRange>> myGetRanges;
    public DelegateHighlighter(Func`3<UIElement, string, IEnumerable`1<HighlightedRange>> getRanges);
    public sealed virtual IEnumerable`1<HighlightedRange> GetRanges(UIElement element, string text);
}
public class JetBrains.UI.TextHighlighting.Attached.Highlighting : object {
    public static DependencyProperty ForegroundProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty HighlighterProperty;
    private static Highlighting();
    public static void SetForeground(DependencyObject element, Brush value);
    public static Brush GetForeground(DependencyObject element);
    public static void SetBackground(DependencyObject element, Brush value);
    public static Brush GetBackground(DependencyObject element);
    public static void SetHighlighter(DependencyObject element, IHighlighter value);
    public static IHighlighter GetHighlighter(DependencyObject element);
}
public interface JetBrains.UI.TextHighlighting.Attached.IHighlighter {
    public abstract virtual IEnumerable`1<HighlightedRange> GetRanges(UIElement element, string text);
}
public class JetBrains.UI.TextHighlighting.ContentControlHighlighterInvalidater : PredefinedHighlighterInvalidater`1<ContentControl> {
}
public class JetBrains.UI.TextHighlighting.DefaultMultiSearchHighlightingProvider : object {
    private IEnumerable`1<DefaultSearchHighlightingProvider> myDefaultSearchHighlightingProviders;
    public DefaultMultiSearchHighlightingProvider(IEnumerable`1<string> searchTexts, StringComparison stringComparison);
    public sealed virtual IEnumerable`1<HighlightedRange> GetHighlightings(UIElement host, string text);
    public sealed virtual bool HasHighlightings(UIElement host);
    public sealed virtual bool IsApplicable(UIElement host);
}
public class JetBrains.UI.TextHighlighting.DefaultSearchHighlightingProvider : object {
    [CompilerGeneratedAttribute]
private string <SearchText>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparison <StringComparison>k__BackingField;
    public string SearchText { get; private set; }
    public StringComparison StringComparison { get; private set; }
    public DefaultSearchHighlightingProvider(string searchText, StringComparison stringComparison);
    [CompilerGeneratedAttribute]
public string get_SearchText();
    [CompilerGeneratedAttribute]
private void set_SearchText(string value);
    [CompilerGeneratedAttribute]
public StringComparison get_StringComparison();
    [CompilerGeneratedAttribute]
private void set_StringComparison(StringComparison value);
    public sealed virtual IEnumerable`1<HighlightedRange> GetHighlightings(UIElement element, string text);
    public sealed virtual bool HasHighlightings(UIElement host);
    public sealed virtual bool IsApplicable(UIElement host);
}
public class JetBrains.UI.TextHighlighting.DelegateHighlightingProvider : object {
    private Func`3<UIElement, string, IEnumerable`1<HighlightedRange>> myFunction;
    private Predicate`1<UIElement> myApplicable;
    private Predicate`1<UIElement> myHasHighlightings;
    public DelegateHighlightingProvider(Func`3<UIElement, string, IEnumerable`1<HighlightedRange>> function, Predicate`1<UIElement> applicable, Predicate`1<UIElement> hasHighlightings);
    public sealed virtual IEnumerable`1<HighlightedRange> GetHighlightings(UIElement element, string text);
    public sealed virtual bool HasHighlightings(UIElement element);
    public sealed virtual bool IsApplicable(UIElement element);
}
internal class JetBrains.UI.TextHighlighting.HighlightAdorner : Adorner {
    private Color myHighlightForeground;
    private Color myHighlightBackground;
    private IHighlighingProvider myHighlighingProvider;
    private UIElement myUIElement;
    private LocallyDispatchedQueue myDispatcher;
    private List`1<VisualHighlighter> myVisualHighlighters;
    private string actualText;
    private GlyphRunDrawing[] glyphRuns;
    private Visual[] glyphRunsHosts;
    private bool rebuildQueued;
    public Color HighlightBackground { get; public set; }
    public Color HighlightForeground { get; public set; }
    public HighlightAdorner(IHighlighingProvider highlighingProvider, UIElement uiElement, LocallyDispatchedQueue dispatcher, Color highlightForeground, Color highlightBackground);
    public Color get_HighlightBackground();
    public void set_HighlightBackground(Color value);
    public Color get_HighlightForeground();
    public void set_HighlightForeground(Color value);
    private void UpdateHighlightColors();
    public void Attach();
    public void Dettach();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size constraint);
    protected IEnumerable`1<VisualHighlighter> Highlight(HighlightedRange highlightedRange);
    private VisualHighlighter GetVisualHighlighter(int start, int count);
    private GlyphRun CalculateGlyphRun(GlyphRun glyphRun, int index, int count, double offsetX, double offsetY);
    private static IList`1<T> Range(IList`1<T> source, int index, int count);
    private Brush GetBackground(GlyphRunDrawing glyphRunDrawing);
    private Brush GetBackground(Visual visual);
    private bool IsMostlyTransparent(Brush brush);
    private int GetLineLength(int lineIndex);
    private int GetCharacterIndexFromLineIndex(int lineIndex);
    private int GetLineIndexFromCharacterIndex(int start);
    private string GetText();
    private void OnChanged(object sender, EventArgs e);
    private string GetActualText();
    private GlyphRunDrawing[] GetGlyphRuns();
    private static void Traverse(DependencyObject dependencyObject, Action`1<T> action);
    private void TraverseGlyphRuns(Drawing d, Action`1<GlyphRunDrawing> action);
    protected virtual void OnRender(DrawingContext drawingContext);
    private void RenderDebugInformation(DrawingContext drawingContext);
    public void Invalidate();
    private void OnRebuild();
    private void AttachInvalidations(UIElement uiElement);
    private bool IsEquals(IList`1<VisualHighlighter> a, IList`1<VisualHighlighter> b);
}
public class JetBrains.UI.TextHighlighting.HighlighterInvalidater`1 : object {
    private Predicate`1<T> myAppicability;
    private Action`2<T, EventHandler> myAttach;
    private Action`2<T, EventHandler> myDettach;
    public HighlighterInvalidater`1(Predicate`1<T> appicability, Action`2<T, EventHandler> attach, Action`2<T, EventHandler> dettach);
    public HighlighterInvalidater`1(Action`2<T, EventHandler> attach, Action`2<T, EventHandler> dettach);
    public sealed virtual IDisposable Attach(UIElement element, Action invalidate);
    public sealed virtual bool IsApplicable(UIElement element);
}
public class JetBrains.UI.TextHighlighting.IdentifierMatcherHighlightingProvider : object {
    private IdentifierMatcher myMatcher;
    private Predicate`1<UIElement> myHasHighlightings;
    private Predicate`1<UIElement> myIsApplicable;
    public IdentifierMatcherHighlightingProvider(IdentifierMatcher matcher, Predicate`1<UIElement> hasHighlightings, Predicate`1<UIElement> isApplicable);
    public sealed virtual IEnumerable`1<HighlightedRange> GetHighlightings(UIElement element, string text);
    public sealed virtual bool HasHighlightings(UIElement host);
    public sealed virtual bool IsApplicable(UIElement host);
}
public interface JetBrains.UI.TextHighlighting.IHighlighingProvider {
    public abstract virtual IEnumerable`1<HighlightedRange> GetHighlightings(UIElement host, string text);
    public abstract virtual bool HasHighlightings(UIElement host);
    public abstract virtual bool IsApplicable(UIElement host);
}
public interface JetBrains.UI.TextHighlighting.IHighlighterInvalidater {
    public abstract virtual IDisposable Attach(UIElement element, Action invalidate);
    public abstract virtual bool IsApplicable(UIElement element);
}
internal class JetBrains.UI.TextHighlighting.Invalidaters.DefaultInvalidater : object {
    [CompilerGeneratedAttribute]
private static ScrollChangedEventHandler CS$<>9__CachedAnonymousMethodDelegate5;
    public sealed virtual IDisposable Attach(UIElement element, Action invalidate);
    public sealed virtual bool IsApplicable(UIElement element);
    [CompilerGeneratedAttribute]
private static void <Attach>b__2(object s, ScrollChangedEventArgs e);
}
internal class JetBrains.UI.TextHighlighting.LocallyDispatchedQueue : object {
    private Dispatcher myDispatcher;
    private Queue`1<Action> myActions;
    private DispatcherPriority myDispatcherPriority;
    private DispatcherOperation myDispatcherOperation;
    private TimeSpan myTimeLimit;
    public LocallyDispatchedQueue(Dispatcher dispatcher);
    public void Queue(Action action);
    private void OnInvoked();
    public void DropQueued();
}
public class JetBrains.UI.TextHighlighting.PredefinedHighlighterInvalidater`1 : HighlighterInvalidater`1<T> {
    public PredefinedHighlighterInvalidater`1(DependencyProperty checkableProperty);
}
public class JetBrains.UI.TextHighlighting.RichTextPresenterHighlighterInvalidater : PredefinedHighlighterInvalidater`1<RichTextPresenter> {
}
public class JetBrains.UI.TextHighlighting.TextBlockHighlighterInvalidater : PredefinedHighlighterInvalidater`1<TextBlock> {
}
public class JetBrains.UI.TextHighlighting.TextBoxHighlighterInvalidater : PredefinedHighlighterInvalidater`1<TextBox> {
}
public class JetBrains.UI.TextHighlighting.TextHighlighter : object {
    private LocallyDispatchedQueue myLocallyDispatchedQueue;
    private Lifetime myLifetime;
    private DependencyObject myRoot;
    private Color myHighlightForeground;
    private Color myHighlightBackground;
    private List`1<IHighlighterInvalidater> myRegisteredInvalidaters;
    private Queue`1<HighlightAdorner> currentAdorners;
    private Queue`1<IDisposable> currentInvalidaters;
    private bool myActive;
    private HashSet`1<UIElement> myVisualsToProcess;
    private IHighlighingProvider myLastHighlightingProvider;
    public TextHighlighter(Lifetime lifetime, DependencyObject root, Color highlightForeground, Color highlightBackground);
    public TextHighlighter(Lifetime lifetime, DependencyObject root, ITheming theming);
    public TextHighlighter(Lifetime lifetime, DependencyObject root);
    private void UpdateColors(ITheming theming);
    public void RegisterInvalidater(IHighlighterInvalidater invalidater);
    public void Undo();
    private bool IsApplicable(Visual visual);
    public void Highlight(IHighlighingProvider highlightingProvider);
    private void ScheduleUpdate(IHighlighingProvider highlightingProvider);
    private IEnumerable`1<IDisposable> ApplyInvalidaters(UIElement uiElement, HighlightAdorner adorner);
    private static void Traverse(DependencyObject dependencyObject, Action`1<T> action);
    public IList`1<DependencyPropertyDescriptor> GetAttachedProperties(DependencyObject obj);
    [CompilerGeneratedAttribute]
private void <UpdateColors>b__4(HighlightAdorner adorner);
}
internal class JetBrains.UI.TextHighlighting.VisualHighlighter : object {
    private GlyphRun myGlyphRun;
    private Geometry myTextGeometry;
    private Rect myBounds;
    private Brush myBackground;
    private Brush myForeground;
    private Color myHighlightForeground;
    private Color myHighlightBackground;
    private Brush myHighlightedBackgroundBrush;
    private Brush myHighlightedForegroundBrush;
    public Color HighlightBackground { get; public set; }
    public Color HighlightForeground { get; public set; }
    public VisualHighlighter(GlyphRun glyphRun, Brush background, Brush foreground, Color highlightForeground, Color highlightBackground);
    public Color get_HighlightBackground();
    public void set_HighlightBackground(Color value);
    public Color get_HighlightForeground();
    public void set_HighlightForeground(Color value);
    public void Draw(DrawingContext drawingContext);
    private Brush GetAnimatedBrush(Color from, Color to, TimeSpan duration);
    protected bool Equals(VisualHighlighter other);
    private static bool IsEqual(GlyphRun a, GlyphRun b);
    private static bool IsEqual(IList`1<T> a, IList`1<T> b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class JetBrains.UI.Themes.Workaround : object {
}
public enum JetBrains.UI.Theming.Accent : Enum {
    public int value__;
    public static Accent Background;
    public static Accent Foreground;
    public static Accent Selection;
    public static Accent Highlight;
    public static Accent Lighter;
    public static Accent Darker;
    public static Accent Shade;
    public static Accent Accent;
}
public static class JetBrains.UI.Theming.AccentBrushKeys : object {
    public static ResourceKey BackgroundKey;
    public static ResourceKey ForegroundKey;
    public static ResourceKey SelectionKey;
    public static ResourceKey HighlightKey;
    public static ResourceKey LighterKey;
    public static ResourceKey DarkerKey;
    public static ResourceKey ShadeKey;
    public static ResourceKey AccentKey;
    private static AccentBrushKeys();
}
public class JetBrains.UI.Theming.AccentExtension : MarkupExtensionBase {
    [CompilerGeneratedAttribute]
private Accent <Accent>k__BackingField;
    public Accent Accent { get; public set; }
    public AccentExtension(Accent accent);
    [CompilerGeneratedAttribute]
public Accent get_Accent();
    [CompilerGeneratedAttribute]
public void set_Accent(Accent value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    protected virtual IEnumerable`1<object> GetParameters(DependencyObject dependencyObject, object targetObject);
    protected virtual object GetValue(DependencyObject dependencyObject, Object[] parameters, Type targetType, object targetObject);
    public BindingBase ToBinding(DependencyObject dependencyObject, object targetObject);
    public object AccentToThemedBrushKey(Accent accent);
    protected virtual object ToTargetType(object value, Type targetType);
}
[ExtensionAttribute]
public static class JetBrains.UI.Theming.AccentHelpers : object {
    [ExtensionAttribute]
public static void UseDarkAccents(ResourceDictionary resourceDictionary);
    [ExtensionAttribute]
public static void UseLightAccents(ResourceDictionary resourceDictionary);
    [ExtensionAttribute]
public static void UseAccents(ResourceDictionary resourceDictionary, Color background, Color foreground, Color selection, Color highlight, Color accent, Color lighter, Color darker, Color shade);
    [ExtensionAttribute]
public static void UseAccents(ResourceDictionary resourceDictionary, Color background, Color foreground, Color selection, Color highlight, Color accent);
    [ExtensionAttribute]
public static void ClearAccents(ResourceDictionary resourceDictionary);
}
public class JetBrains.UI.Theming.Background : object {
    public static DependencyProperty BrushProperty;
    public static DependencyProperty AdjustmentProperty;
    public static DependencyProperty ShadeProperty;
    public static DependencyProperty AccentProperty;
    public static DependencyProperty IsInheritedProperty;
    private static Background();
    private static void OnBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object BrushPropertyCoerceCallback(DependencyObject d, object basevalue);
    public static void SetBrush(DependencyObject element, Brush value);
    public static Brush GetBrush(DependencyObject element);
    private static object CoerceAdjustmentProperty(DependencyObject d, object basevalue);
    private static void OnAdjustmentPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetAdjustment(DependencyObject element, IValueConverter value);
    public static IValueConverter GetAdjustment(DependencyObject element);
    private static object Adjust(DependencyObject dependencyObject, object value);
    private static void OnShadePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    private static void BindInheritedBrush(DependencyObject dependencyObject);
    public static void SetShade(DependencyObject element, double value);
    public static double GetShade(DependencyObject element);
    private static void OnAccentPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public static void SetAccent(DependencyObject element, object value);
    public static object GetAccent(DependencyObject element);
    private static void OnIsInheritedPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public static void SetIsInherited(DependencyObject element, bool value);
    public static bool GetIsInherited(DependencyObject element);
    private static void UpdateBackground(DependencyObject dependencyObject);
    private static DependencyProperty FindBackgroundDependencyProperty(DependencyObject dependencyObject);
}
[ContentPropertyAttribute("BasedOn")]
public class JetBrains.UI.Theming.BrushExtension : ColorExtension {
    public BrushExtension(Accent basedOn);
    public BrushExtension(Accent basedOn, Accent accent);
    protected virtual object ToDefault(Color color);
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Data.IValueConverter")]
public class JetBrains.UI.Theming.ColorAdjustmentExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private object <Accent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Shade>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tinge>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Saturate>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Brightness>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Saturation>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tint>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Mix>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Fade>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Opacity>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegate11;
    public object Accent { get; public set; }
    public object Shade { get; public set; }
    public object Tinge { get; public set; }
    public object Saturate { get; public set; }
    public object Brightness { get; public set; }
    public object Saturation { get; public set; }
    public object Tint { get; public set; }
    public object Mix { get; public set; }
    public object Fade { get; public set; }
    public object Opacity { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Accent();
    [CompilerGeneratedAttribute]
public void set_Accent(object value);
    [CompilerGeneratedAttribute]
public object get_Shade();
    [CompilerGeneratedAttribute]
public void set_Shade(object value);
    [CompilerGeneratedAttribute]
public object get_Tinge();
    [CompilerGeneratedAttribute]
public void set_Tinge(object value);
    [CompilerGeneratedAttribute]
public object get_Saturate();
    [CompilerGeneratedAttribute]
public void set_Saturate(object value);
    [CompilerGeneratedAttribute]
public object get_Brightness();
    [CompilerGeneratedAttribute]
public void set_Brightness(object value);
    [CompilerGeneratedAttribute]
public object get_Saturation();
    [CompilerGeneratedAttribute]
public void set_Saturation(object value);
    [CompilerGeneratedAttribute]
public object get_Tint();
    [CompilerGeneratedAttribute]
public void set_Tint(object value);
    [CompilerGeneratedAttribute]
public object get_Mix();
    [CompilerGeneratedAttribute]
public void set_Mix(object value);
    [CompilerGeneratedAttribute]
public object get_Fade();
    [CompilerGeneratedAttribute]
public void set_Fade(object value);
    [CompilerGeneratedAttribute]
public object get_Opacity();
    [CompilerGeneratedAttribute]
public void set_Opacity(object value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private static Nullable`1<double> ToDouble(object value, Func`2<Color, double> conversion);
    private static Nullable`1<Color> ToColor(object obj);
    private static Nullable`1<Color> StringToColor(string colorName);
    [CompilerGeneratedAttribute]
private static double <Convert>b__0(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__1(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__2(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__3(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__4(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__5(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__6(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__7(Color color);
    [CompilerGeneratedAttribute]
private static double <Convert>b__8(Color color);
}
[ContentPropertyAttribute("BasedOn")]
public class JetBrains.UI.Theming.ColorExtension : MarkupExtensionBase {
    [CompilerGeneratedAttribute]
private object <BasedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Accent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Shade>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tinge>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Saturate>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Brightness>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Saturation>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tint>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Fade>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Opacity>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Mix>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<Color, double> CS$<>9__CachedAnonymousMethodDelegate11;
    public object BasedOn { get; public set; }
    public object Accent { get; public set; }
    public object Shade { get; public set; }
    public object Tinge { get; public set; }
    public object Saturate { get; public set; }
    public object Brightness { get; public set; }
    public object Saturation { get; public set; }
    public object Tint { get; public set; }
    public object Fade { get; public set; }
    public object Opacity { get; public set; }
    public object Mix { get; public set; }
    public ColorExtension(Accent basedOn);
    public ColorExtension(Accent basedOn, Accent accent);
    [CompilerGeneratedAttribute]
public object get_BasedOn();
    [CompilerGeneratedAttribute]
public void set_BasedOn(object value);
    [CompilerGeneratedAttribute]
public object get_Accent();
    [CompilerGeneratedAttribute]
public void set_Accent(object value);
    [CompilerGeneratedAttribute]
public object get_Shade();
    [CompilerGeneratedAttribute]
public void set_Shade(object value);
    [CompilerGeneratedAttribute]
public object get_Tinge();
    [CompilerGeneratedAttribute]
public void set_Tinge(object value);
    [CompilerGeneratedAttribute]
public object get_Saturate();
    [CompilerGeneratedAttribute]
public void set_Saturate(object value);
    [CompilerGeneratedAttribute]
public object get_Brightness();
    [CompilerGeneratedAttribute]
public void set_Brightness(object value);
    [CompilerGeneratedAttribute]
public object get_Saturation();
    [CompilerGeneratedAttribute]
public void set_Saturation(object value);
    [CompilerGeneratedAttribute]
public object get_Tint();
    [CompilerGeneratedAttribute]
public void set_Tint(object value);
    [CompilerGeneratedAttribute]
public object get_Fade();
    [CompilerGeneratedAttribute]
public void set_Fade(object value);
    [CompilerGeneratedAttribute]
public object get_Opacity();
    [CompilerGeneratedAttribute]
public void set_Opacity(object value);
    [CompilerGeneratedAttribute]
public object get_Mix();
    [CompilerGeneratedAttribute]
public void set_Mix(object value);
    protected virtual object ToTargetType(object value, Type targetType);
    protected virtual IEnumerable`1<object> GetParameters(DependencyObject dependencyObject, object targetObject);
    protected virtual object GetValue(DependencyObject dependencyObject, Object[] objects, Type targetType, object targetObject);
    protected virtual object ToDefault(Color color);
    private static Nullable`1<double> ToDouble(object value, Func`2<Color, double> conversion);
    private static Nullable`1<Color> ToColor(object obj);
    private static Nullable`1<Color> StringToColor(string colorName);
    protected virtual BindingBase ToBinding(object obj, DependencyObject dependencyObject, object targetObject);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__0(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__1(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__2(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__3(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__4(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__5(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__6(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__7(Color color);
    [CompilerGeneratedAttribute]
private static double <GetValue>b__8(Color color);
}
public static class JetBrains.UI.Theming.ColorTuning : object {
    public static Color OffsetBrightness(Color baseColor, double offset);
    public static Color ChangeBrightness(Color baseColor, double targetBrightness);
}
public static class JetBrains.UI.Theming.FontSize : object {
    public static DependencyProperty ScaleProperty;
    public static DependencyProperty RelativeToProperty;
    private static FontSize();
    private static void OnFontSizeChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    public static void SetScale(DependencyObject element, double value);
    public static double GetScale(DependencyObject element);
    private static void OnRelativeToChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    public static void SetRelativeTo(DependencyObject element, DependencyObject value);
    public static DependencyObject GetRelativeTo(DependencyObject element);
    private static void UpdateFontSize(DependencyObject dependencyObject);
}
public class JetBrains.UI.Theming.Foreground : object {
    public static DependencyProperty BrushProperty;
    public static DependencyProperty AdjustmentProperty;
    public static DependencyProperty IsAutomaticProperty;
    public static DependencyProperty EnsureContrastProperty;
    public static DependencyProperty AccentProperty;
    private static Foreground();
    private static void OnBrushPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object BrushPropertyCoerceCallback(DependencyObject d, object basevalue);
    public static void SetBrush(DependencyObject element, Brush value);
    public static Brush GetBrush(DependencyObject element);
    private static void OnAdjustmentPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    public static void SetAdjustment(DependencyObject element, IValueConverter value);
    public static IValueConverter GetAdjustment(DependencyObject element);
    private static void OnIsAutomaticPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetIsAutomatic(DependencyObject element, bool value);
    public static bool GetIsAutomatic(DependencyObject element);
    public static void SetEnsureContrast(DependencyObject element, bool value);
    public static bool GetEnsureContrast(DependencyObject element);
    private static void OnAccentPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetAccent(DependencyObject element, object value);
    public static object GetAccent(DependencyObject element);
    private static void BindBackgroundOrInvalidate(DependencyObject d);
    private static object Adjust(DependencyObject dependencyObject, object value);
    private static object Autocontrast(object value);
}
internal class JetBrains.UI.Theming.Helpers.ColorConverterHelper : object {
    public static Nullable`1<Color> ToColorOrDefault(object value);
    public static SolidColorBrush ToBrushOrDefault(object value);
}
internal class JetBrains.UI.Theming.Helpers.DependencyPropertyHelper : object {
    private static Dictionary`2<string, Dictionary`2<Type, DependencyProperty>> ourResolvedDependencyPropertiesCache;
    private static DependencyPropertyHelper();
    public static DependencyObject FindAncestorWithProperty(DependencyObject dependencyObject, string propertyName, bool includeItself);
    public static bool HasDependencyProperty(DependencyObject dependencyObject, string propertyName);
    public static DependencyProperty FindDependencyProperty(DependencyObject dependencyObject, string propertyName);
    public static DependencyProperty FindDependencyProperty(Type type, string propertyName);
    public static T GetValue(DependencyObject dependencyObject, string propertyName);
    public static T GetValueOrDefault(DependencyObject dependencyObject, string propertyName);
    private static T GetValue(DependencyObject dependencyObject, string propertyName, bool throwException);
    public static void AddHandler(DependencyObject dependencyObject, RoutedEvent routedEvent, RoutedEventHandler handler);
    public static void RemoveHandler(DependencyObject dependencyObject, RoutedEvent routedEvent, RoutedEventHandler handler);
}
internal class JetBrains.UI.Theming.Helpers.DynamicResourceBinder : object {
    private static Binding ourNullBinding;
    [CompilerGeneratedAttribute]
private static Func`2<object, object> CS$<>9__CachedAnonymousMethodDelegate9;
    private static DynamicResourceBinder();
    public static BindingBase CreateBinding(object resourceKey, PropertyPath propertyPath, DependencyObject dependencyObject);
    private static void SetResourceReferenceOrValue(DependencyObject dependencyObject, DependencyProperty property, object resourceKey);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__8(object o);
}
public class JetBrains.UI.Theming.Helpers.InheritedBackgroundHelper : object {
    public static DependencyProperty InheritedBackgroundProperty;
    private static WeakToStrongDictionary`2<Visual, WeakHashSet`1<Visual>> ourInheretedToTargetMap;
    private static InheritedBackgroundHelper();
    public static void SetInheritedBackground(DependencyObject element, Brush value);
    public static Brush GetInheritedBackground(DependencyObject element);
    public static void Track(DependencyObject dependencyObject);
    private static void Evaluate(DependencyObject dependencyObject);
    private static void OnBackgroundChanged(object sender, EventArgs eventArgs);
    private static IEnumerable`1<Visual> EnumeratePossiblyAffected(Visual root);
}
internal class JetBrains.UI.Theming.Helpers.MarkupExtensionHelpers : object {
    public static bool IsIntermediateRequest(IServiceProvider serviceProvider);
}
internal class JetBrains.UI.Theming.Helpers.TemporaryProperty : object {
    public static DependencyProperty Temp0Property;
    public static DependencyProperty Temp1Property;
    public static DependencyProperty Temp2Property;
    private static List`1<DependencyProperty> ourRegisteredDependencyProperties;
    public static DependencyProperty CountProperty;
    private static TemporaryProperty();
    public static void SetCount(DependencyObject element, int value);
    public static int GetCount(DependencyObject element);
    public static DependencyProperty Create(DependencyObject dependencyObject);
    private static DependencyProperty GetOrCreate(int index);
}
[ExtensionAttribute]
public static class JetBrains.UI.Theming.IThemingEx : object {
    [ExtensionAttribute]
public static void PopulateResourceDictionary(ITheming thіs, Lifetime lifetime, ResourceDictionary dictionary);
    [ExtensionAttribute]
public static void PrepareFrameworkElement(ITheming thіs, FrameworkElement element);
    [ExtensionAttribute]
public static void PrepareWinForm(ITheming thіs, Lifetime lifetime, Void* hWnd);
}
[ContentPropertyAttribute("ResourceKey")]
public class JetBrains.UI.Theming.LinkExtension : MarkupExtension {
    private IServiceProvider myServiceProvider;
    [CompilerGeneratedAttribute]
private object <ResourceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativeSource <RelativeSource>k__BackingField;
    public object ResourceKey { get; public set; }
    public string Property { get; public set; }
    public string ElementName { get; public set; }
    public RelativeSource RelativeSource { get; public set; }
    public LinkExtension(object resourceKey);
    [CompilerGeneratedAttribute]
public object get_ResourceKey();
    [CompilerGeneratedAttribute]
public void set_ResourceKey(object value);
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public string get_ElementName();
    [CompilerGeneratedAttribute]
public void set_ElementName(string value);
    [CompilerGeneratedAttribute]
public RelativeSource get_RelativeSource();
    [CompilerGeneratedAttribute]
public void set_RelativeSource(RelativeSource value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public BindingBase ToBinding(DependencyObject dependencyObject);
    public object Evaluate();
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.UI.Theming.PublishAccentColors : object {
    private ITheming myTheming;
    private ResourceDictionary myResourceDictionary;
    public PublishAccentColors(Lifetime lifetime, ITheming theming, IPlatformResourceDictionary platformResourceDictionary);
    private void ApplyAccentColors();
}
[ActionAttribute("Show Accent Colors...")]
public class JetBrains.UI.Theming.ShowAccentColorsAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.UI.Updates.UpdateInfoContainer : object {
    private static string XmlElementName;
    private Size SizeIconMax;
    public static TimeSpan InitialSnoozeInterval;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public IProperty`1<DateTime> AdvertiseAfter;
    [NotNullAttribute]
public UpdatesCategory Category;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public IProperty`1<UpdateInfo> DataProperty;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public IProperty`1<TimeSpan> SnoozeInterval;
    [CompilerGeneratedAttribute]
private static Action`1<BeforePropertyChangedEventArgs`1<UpdateInfo>> CS$<>9__CachedAnonymousMethodDelegate1;
    [NotNullAttribute]
public UpdateInfo Data { get; }
    [NotNullAttribute]
public string Identity { get; }
    private UpdateInfoContainer(UpdatesCategory category);
    private static UpdateInfoContainer();
    public UpdateInfo get_Data();
    public string get_Identity();
    public static bool op_Equality(UpdateInfoContainer left, UpdateInfoContainer right);
    public static bool op_Inequality(UpdateInfoContainer left, UpdateInfoContainer right);
    public void AssertValid();
    [NotNullAttribute]
public Control CreateViewWinForms(JetPopupMenus jetPopupMenus, IUIApplication application);
    public void Snooze();
    public void Snooze(TimeSpan interval);
    public void WriteToStream(XmlWriter writer);
    internal static UpdateInfoContainer Create(UpdatesCategory category, UpdateInfo updateinfo);
    [NotNullAttribute]
internal static UpdateInfoContainer ReadFromStream(UpdatesCategory category, XmlReader reader);
    private static Font GetDetailsFont();
    private static Font GetTitleFont(IUIApplication environment);
    [NotNullAttribute]
private Control CreateViewWinForms_Icon(UpdateInfo data);
    [NotNullAttribute]
private Control CreateViewWinForms_Text(UpdateInfo data, JetPopupMenus jetPopupMenus, IUIApplication application);
    private static RichTextBlock CreateMultilineRichTextBlock(string text, RichTextBlockParameters parameters);
    private Control CreateViewWinForms_Title(UpdateInfo data, IUIApplication environment);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(UpdateInfoContainer other);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(BeforePropertyChangedEventArgs`1<UpdateInfo> args);
}
[XmlTypeAttribute]
[XmlRootAttribute("LocalInfo")]
public class JetBrains.UI.Updates.UpdateLocalEnvironmentInfo : object {
    public static string RootElementName;
    [QueryStringParamAttribute]
[XmlElementAttribute]
public Guid SessionId;
    [XmlElementAttribute]
[NotNullAttribute]
[QueryStringContainerAttribute]
public ICollection`1<License2SubInfo> License;
    [XmlElementAttribute]
[QueryStringContainerAttribute]
[NotNullAttribute]
public LicenseConflictInfo LicenseConflict;
    [NotNullAttribute]
[XmlElementAttribute]
[QueryStringContainerAttribute]
public OsSubInfo Os;
    [XmlElementAttribute]
[QueryStringContainerAttribute]
[NotNullAttribute]
public ICollection`1<ProductSubInfo> Products;
    [XmlElementAttribute]
[NotNullAttribute]
[QueryStringContainerAttribute]
public HostSubInfo Host;
    [XmlElementAttribute]
[QueryStringContainerAttribute]
[NotNullAttribute]
public RuntimeSubInfo Runtime;
}
public class JetBrains.UI.Updates.UpdatesCategory : object {
    private static string InvalidCatName;
    private static string UpdateInfosXmlElement;
    private JetSemanticVersion _lastSuccessfulDownloadVersion;
    public static TimeSpan DownloadedDataExpirationPeriod;
    public static string XmlElementName;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public TimeSpan CheckForUpdatesInterval;
    [NotNullAttribute]
public ISignal`1<OutEventArgs`1<object>> CustomizeLocalEnvironmentInfo;
    [NotNullAttribute]
public ISignal`1<OutEventArgs`1<IDictionary`2<string, string>>> CustomizeQueryStringParams;
    [NotNullAttribute]
public IProperty`1<bool> IsActive;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTime LastActivationDate;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTime LastDownloadAttemptDate;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string LastDownloadSummary;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public DateTime LastSuccessfulDownloadDate;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotNullAttribute]
public string Name;
    [NotNullAttribute]
public ListEvents`1<UpdateInfoContainer> UpdateInfos;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Uri UpdatesFilterUri;
    [NotNullAttribute]
public UpdatesManager UpdatesManager;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, KeyValuePair`2<string, string>, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<UpdateInfo> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<UpdateInfo, string> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action`1<UpdateInfoContainer> CS$<>9__CachedAnonymousMethodDelegated;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotNullAttribute]
public string LastSuccessfulDownloadVersion { get; public set; }
    private UpdatesCategory(UpdatesManager upman);
    private static UpdatesCategory();
    public string get_LastSuccessfulDownloadVersion();
    public void set_LastSuccessfulDownloadVersion(string value);
    public LocalEnvironmentInfo CollectLocalEnvironmentInfo();
    public bool IsEligibleForNotifications();
    public void RegisterDownloadResult(bool success, string summary, UpdateInfo[] infos);
    [NotNullAttribute]
internal static UpdatesCategory CreateByUser(UpdatesManager upman, string name, Uri uriUpdatesFilter);
    [NotNullAttribute]
internal static UpdatesCategory ReadFromStream(UpdatesManager upman, XmlReader reader);
    internal void WriteToStream(XmlWriter writer);
    private void Trace(string text);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private static bool <CollectLocalEnvironmentInfo>b__2(KeyValuePair`2<string, string> pair);
    [CompilerGeneratedAttribute]
private static StringBuilder <CollectLocalEnvironmentInfo>b__3(StringBuilder sb, KeyValuePair`2<string, string> pair);
    [CompilerGeneratedAttribute]
private static void <RegisterDownloadResult>b__6(UpdateInfo info);
    [CompilerGeneratedAttribute]
private static string <RegisterDownloadResult>b__7(UpdateInfo info);
    [CompilerGeneratedAttribute]
private UpdateInfoContainer <RegisterDownloadResult>b__8(UpdateInfo upinfo);
    [CompilerGeneratedAttribute]
private static void <RegisterDownloadResult>b__9(UpdateInfoContainer item);
}
public class JetBrains.UI.Updates.UpdatesDownloaderSession : object {
    private UpdatesCategory _category;
    public JetDispatcher Dispatcher;
    public Lifetime Lifetime;
    private LifetimeDefinition myLifetimeDefinition;
    private WebProxySettingsReader myWebProxySettingsReader;
    public UpdatesDownloaderSession(Lifetime lifetime, UpdatesCategory category, WebProxySettingsReader webProxySettingsReader);
    public void BeginRun();
    public UpdateXsltTestResult TestRun();
    private void BeginRun_Worker(LocalEnvironmentInfo localinfo, UpdateXsltTestResult result);
    private void Trace(string text);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <BeginRun_Worker>b__c();
}
[ShellComponentAttribute]
public class JetBrains.UI.Updates.UpdatesLocalInfoManager : object {
    private IApplicationHost myProduct;
    private ProductConfigurations myProductConfigurations;
    private ProductSettingsLocation myProductSettingsLocation;
    [CanBeNullAttribute]
private ILicense2CheckComponent myLicenseCheckerComponent;
    [CanBeNullAttribute]
private UserLicenseConflictCheckerComponent myLicenseConflictComponent;
    private SubProducts mySubProducts;
    private LicensedEntityUsageTracker myLicensedEntityUsageTracker;
    private PermanentUserId myPermanentUserId;
    private Optional`1<ILicenseSupport> myLicenseSupport;
    [CompilerGeneratedAttribute]
private static Func`2<object, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<FieldInfo, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<string, object>, bool> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<FieldInfo, bool> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<string, object>, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    public UpdatesLocalInfoManager(IApplicationHost product, ProductConfigurations productConfigurations, ProductSettingsLocation productSettingsLocation, PermanentUserId permanentUserId, Optional`1<ILicenseSupport> licenseSupport, ILicense2CheckComponent licenseCheckerComponent, UserLicenseConflictCheckerComponent licenseConflictComponent, SubProducts subProducts, LicensedEntityUsageTracker licensedEntityUsageTracker);
    private void CollectCore_Host(HostSubInfo host);
    private void CollectCore_Products(ICollection`1<ProductSubInfo> products);
    private void CollectCore_Runtime(RuntimeSubInfo infoRuntime);
    private static void CollectCore_Os(OsSubInfo infoOs);
    private void CollectCore_License(ICollection`1<License2SubInfo> infoLicenses);
    private void CollectCore_LicenseConflict(LicenseConflictInfo info);
    protected void CollectCore(UpdateLocalEnvironmentInfo info);
    [NotNullAttribute]
public virtual UpdateLocalEnvironmentInfo CollectLocalEnvironmentInfo();
    [NotNullAttribute]
public Dictionary`2<string, string> CollectQueryStringParams();
    [NotNullAttribute]
public Dictionary`2<string, string> CollectQueryStringParams(object localinfo);
    private static void CollectQueryStringParams_Walk(object container, IDictionary`2<string, string> bag, string sPrefixWithDot);
    [CompilerGeneratedAttribute]
private static string <CollectQueryStringParams_Walk>b__6(object o);
    [CompilerGeneratedAttribute]
private static bool <CollectQueryStringParams_Walk>b__7(FieldInfo field);
    [CompilerGeneratedAttribute]
private static bool <CollectQueryStringParams_Walk>b__9(<>f__AnonymousType1`2<string, object> pair);
    [CompilerGeneratedAttribute]
private static bool <CollectQueryStringParams_Walk>b__b(FieldInfo field);
    [CompilerGeneratedAttribute]
private static bool <CollectQueryStringParams_Walk>b__d(<>f__AnonymousType1`2<string, object> pair);
}
[ShellComponentAttribute]
public class JetBrains.UI.Updates.UpdatesManager : object {
    [NotNullAttribute]
internal UpdatesShellProductCategoryOwner ShellProductCategoryOwner;
    private Lifetime myLifetime;
    [NotNullAttribute]
public UpdatesManagerCategories Categories;
    public IProperty`1<bool> IsDownloadUpdateDataAllowed;
    protected internal IThreading myThreading;
    private UpdatesLocalInfoManager myUpdatesLocalInfoManager;
    protected internal IApplicationHost myApplicationDescriptor;
    [NotNullAttribute]
public UpdatesLocalInfoManager LocalEnvironmentInfo { get; }
    public UpdatesManager(Lifetime lifetime, IThreading threading, UpdatesLocalInfoManager updatesLocalInfoManager, IApplicationDescriptorUpdatesTmp applicationDescriptor, ProductSettingsLocation productSettingsLocation, ISettingsStore settingsStore, WebProxySettingsReader webProxySettingsReader, IApplicationHost product);
    public UpdatesLocalInfoManager get_LocalEnvironmentInfo();
    [NotNullAttribute]
public IList`1<UpdateInfo> RunUpdatesFilter(Stream streamFilter, Action`1<XmlWriter> FWriteLocalEnvironmentData, UpdateXsltTestResult result);
    private static void Trace(string text);
    protected virtual void Init(Lifetime lifetime, IApplicationDescriptorUpdatesTmp applicationDescriptor, ProductSettingsLocation settingsLocation, ISettingsStore settingsStore, WebProxySettingsReader webProxySettingsReader);
    private void Init_BindToSettings(Lifetime lifetime, ISettingsStore settingsStore);
    private void Init_Download(IContextBoundSettingsStore store, WebProxySettingsReader webProxySettingsReader);
    public UpdateXsltTestResult TestUpdatesXstl(UpdatesCategory category, WebProxySettingsReader webProxySettingsReader);
    private void Init_Download_Deferred(WebProxySettingsReader webProxySettingsReader);
}
public class JetBrains.UI.Updates.UpdatesManagerCategories : DictionaryEvents`2<string, UpdatesCategory> {
    private static object myReadonly;
    private string XmlElementName;
    [NotNullAttribute]
public UpdatesManager UpdatesManager;
    [CompilerGeneratedAttribute]
private static Action`1<BeforeAddRemoveEventArgs`1<KeyValuePair`2<string, UpdatesCategory>>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CanBeNullAttribute]
public UpdatesCategory ShellProductCategory { get; }
    public UpdatesManagerCategories(UpdatesManager upman);
    private static UpdatesManagerCategories();
    public UpdatesCategory get_ShellProductCategory();
    [NotNullAttribute]
public UpdatesCategory Add(string name, Uri uriUpdatesFilter);
    [NotNullAttribute]
public UpdatesCategory AddOrActivate(string name, Uri uriUpdatesFilter);
    private void Init();
    public void ReadFromXml(XmlReader reader);
    public void WriteToXml(XmlWriter writer);
    [CompilerGeneratedAttribute]
private static void <Init>b__0(BeforeAddRemoveEventArgs`1<KeyValuePair`2<string, UpdatesCategory>> args);
    [CompilerGeneratedAttribute]
private void <ReadFromXml>b__2(XmlReader reader2);
}
public class JetBrains.UI.Updates.UpdatesPage : AOptionsPage {
    public static string Pid;
    public static OptionsPageAttribute OptionsPageAttribute;
    public UpdatesPage(Lifetime lifetime, IUIApplication environment, FontsManager fontsman, OptionsSettingsSmartContext context);
    private static UpdatesPage();
    private static Font GetTextFont(FontsManager fontsman);
    private static void InitView_Settings(Lifetime lifetime, TableLayoutPanel grid, OptionsSettingsSmartContext context);
    private void InitView_WinForms(Lifetime lifetime, FontsManager fontsman, OptionsSettingsSmartContext context);
}
[ShellComponentAttribute]
public class JetBrains.UI.Updates.UpdatesPageComponent : object {
    public IProperty`1<bool> IsEnabled;
    public UpdatesPageComponent(Lifetime lifetime, IOptionPagesList optionPagesList, UpdatesManager updatesManager);
    protected virtual Type GetOptionsPage();
    protected virtual OptionsPageAttribute GetOptionsPageAttribute();
}
[ShellComponentAttribute]
public class JetBrains.UI.Updates.UpdatesPopupAlerts : object {
    [CompilerGeneratedAttribute]
private static Func`2<UpdatesCategory, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<UpdatesCategory, IEnumerable`1<UpdateInfoContainer>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action`1<UpdateInfoContainer> CS$<>9__CachedAnonymousMethodDelegatec;
    public UpdatesPopupAlerts(Lifetime lifetime, UserActivityMonitor userActivityMonitor, UpdatesManager updatesManager, IUIApplication application, JetPopupMenus jetPopupMenus);
    public void ShowUnreadUpdates(UpdatesManager updatesManager, IUIApplication application, JetPopupMenus jetPopupMenus);
    private void ShowUnreadUpdates_Window(IEnumerable`1<UpdateInfoContainer> updates, string header, IUIApplication application, JetPopupMenus jetPopupMenus);
    [CompilerGeneratedAttribute]
private static bool <ShowUnreadUpdates>b__4(UpdatesCategory cat);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<UpdateInfoContainer> <ShowUnreadUpdates>b__5(UpdatesCategory cat);
    [CompilerGeneratedAttribute]
private static void <ShowUnreadUpdates>b__9(UpdateInfoContainer upinfo);
}
public class JetBrains.UI.Updates.UpdatesShellProductCategoryOwner : object {
    public static string CategoryName;
    [NotNullAttribute]
public UpdatesManager UpdatesManager;
    [CanBeNullAttribute]
public UpdatesCategory Category { get; }
    public UpdatesShellProductCategoryOwner(UpdatesManager upman);
    private static UpdatesShellProductCategoryOwner();
    public UpdatesCategory get_Category();
    internal void Init(IApplicationDescriptorUpdatesTmp applicationDescriptor, Uri overrideUrl);
}
public class JetBrains.UI.UserContactsWindowModel : NotifyPropertyChanged {
    [CompilerGeneratedAttribute]
private FooterControlModel <Footer>k__BackingField;
    [CompilerGeneratedAttribute]
private UserContactsModel <Contacts>k__BackingField;
    public FooterControlModel Footer { get; public set; }
    public UserContactsModel Contacts { get; public set; }
    public UserContactsWindowModel(ILogger logger);
    [CompilerGeneratedAttribute]
public FooterControlModel get_Footer();
    [CompilerGeneratedAttribute]
public void set_Footer(FooterControlModel value);
    [CompilerGeneratedAttribute]
public UserContactsModel get_Contacts();
    [CompilerGeneratedAttribute]
public void set_Contacts(UserContactsModel value);
}
[GlobalSettingsUpgraderAttribute]
public class JetBrains.UI.UserInterfaceSettingsUpgrader : SettingTablesUpgrader {
    [CompilerGeneratedAttribute]
private static Func`2<int, TimeSpan> CS$<>9__CachedAnonymousMethodDelegate1;
    public UserInterfaceSettingsUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
    [CompilerGeneratedAttribute]
private static TimeSpan <DoUpgrade>b__0(int ms);
}
[ShellComponentAttribute]
public class JetBrains.UI.Utils.DefaultDragDropHelper : object {
    public static UInt32 CF_VSSTGPROJECTITEMS;
    public static UInt32 CF_VSREFPROJECTITEMS;
    public static UInt32 CF_VSREFPROJECTS;
    public static UInt32 CF_VSSTGPROJECTS;
    public static UInt32 CF_VSPROJECTCLIPDESCRIPTOR;
    public static UInt32 CF_DSREF;
    private static DefaultDragDropHelper();
    public virtual List`1<string> GetDroppedFiles(UInt32 format, IDataObject dataObject);
    private static UInt32 RegisterClipboardFormat(string name);
}
public static class JetBrains.UI.Utils.DpiResolutions : object {
    public static DpiResolution FromAvalonElement(Visual element);
    public static DpiResolution FromHWnd(Void* hwnd);
    public static DpiResolution FromMonitorName(string sMonitorName);
    public static DpiResolution FromScreenArea(RECT rcArea);
    public static DpiResolution FromScreenPoint(POINT pt);
    public static DpiResolution FromWindowsFormsControl(Control control);
    [ObsoleteAttribute("Try not to use System.Windows.Forms.Screen, because it may leads to performance problems")]
public static DpiResolution FromWindowsFormsScreen(Screen screen);
}
[ExtensionAttribute]
public static class JetBrains.UI.Utils.DpiUtil : object {
    public static DpiResolution BootTimeStaticDpi;
    public static ISimpleSignal DpiMightHaveChanged;
    [NotNullAttribute]
public static IProperty`1<DpiResolution> HighestResolutionScreenDpi;
    public static bool IsDynamicDpi;
    private static ILogger Logger;
    [NotNullAttribute]
public static IProperty`1<DpiResolution> LowestResolutionScreenDpi;
    private static Nullable`1<DpiResolution> ourDpi;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<DpiResolution, double> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<DpiResolution, double> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<DpiResolution, double> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<DpiResolution, double> CS$<>9__CachedAnonymousMethodDelegate11;
    [ObsoleteAttribute("Either use boot-time or per-monitor DPI explicitly.")]
public static double DpiHorizontalFactor { get; }
    [ObsoleteAttribute("Either use boot-time or per-monitor DPI explicitly.")]
public static double DpiVerticalFactor { get; }
    [ObsoleteAttribute("Either use boot-time or per-monitor DPI explicitly.")]
public static DpiResolution ScreenDpi { get; }
    private static DpiUtil();
    public static double get_DpiHorizontalFactor();
    public static double get_DpiVerticalFactor();
    public static DpiResolution get_ScreenDpi();
    [ExtensionAttribute]
public static void ApplyWindowBoundsWhenSuggested(WindowDpiTracker tracker, Lifetime lifetime);
    public static DpiResolution GetElementScreenDpiCurrent(UIElement element);
    [NotNullAttribute]
public static IProperty`1<DpiResolution> GetElementScreenDpiLive(Lifetime lifetime, UIElement element);
    public static DpiResolution GetMonitorCurrentDpi(Void* hMonitor);
    public static DpiResolution GetWindowScreenDpiCurrent(Void* hwnd);
    [NotNullAttribute]
public static IProperty`1<DpiResolution> GetWindowScreenDpiLive(Lifetime lifetime, Void* hwnd);
    public static void SetProcessAsDpiAware();
    private static Pair`2<DpiResolution, DpiResolution> CollectCurrentMonitorDpis();
    private static DpiResolution GetBootTimeScreenDpi();
    public static DpiResolution GetCurrentDpiOfDisplayMonitorByName(string sMonitorName);
    private static void UpdateMinMaxDpi();
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static double <CollectCurrentMonitorDpis>b__a(DpiResolution o);
    [CompilerGeneratedAttribute]
private static double <CollectCurrentMonitorDpis>b__b(DpiResolution o);
    [CompilerGeneratedAttribute]
private static double <CollectCurrentMonitorDpis>b__c(DpiResolution o);
    [CompilerGeneratedAttribute]
private static double <CollectCurrentMonitorDpis>b__d(DpiResolution o);
}
public static class JetBrains.UI.Utils.ExceptionViewer : object {
    public static void Show(Exception exception, string title, bool expanded);
}
public interface JetBrains.UI.Utils.IDragDropHelper {
    public abstract virtual List`1<string> GetDroppedFiles(UInt32 format, IDataObject dataObject);
}
public class JetBrains.UI.Utils.WaitCursorCookie : object {
    private Cursor myPreviousCursor;
    public sealed virtual void Dispose();
    public static IDisposable Create();
}
[ShellComponentAttribute]
public class JetBrains.UI.Utils.WaitCursorCookieInteractiveAdapter : WaitCursorCookieAdapter {
    public virtual IDisposable CreateCookie();
}
public static class JetBrains.UI.Utils.WindowCommands : object {
    private static ICommand ourMinimizeCommand;
    private static ICommand ourMaximizeCommand;
    private static ICommand ourRestoreCommand;
    private static ICommand ourCloseCommand;
    private static ICommand ourHelpCommand;
    public static RoutedEvent HelpRequestedEvent;
    public static ICommand MinimizeCommand { get; }
    public static ICommand MaximizeCommand { get; }
    public static ICommand RestoreCommand { get; }
    public static ICommand CloseCommand { get; }
    public static ICommand HelpCommand { get; }
    private static WindowCommands();
    public static ICommand get_MinimizeCommand();
    private static void DoMinimize(object obj);
    public static ICommand get_MaximizeCommand();
    private static void DoMaximize(object obj);
    public static ICommand get_RestoreCommand();
    private static void DoRestore(object obj);
    public static ICommand get_CloseCommand();
    private static void DoClose(object obj);
    public static ICommand get_HelpCommand();
    private static void DoHelp(object obj);
    public static void AddHelpRequestedHandler(DependencyObject d, RoutedEventHandler handler);
    public static void RemoveHelpRequestedHandler(DependencyObject d, RoutedEventHandler handler);
}
internal class JetBrains.UI.Validation.BasicListener : object {
    private Control myControl;
    private EventHandler`1<EventArgs`1<IControlListener>> ControlStateChanged;
    public Control Control { get; }
    public BasicListener(Control control);
    private void ImportantPropertyChanged(object sender, EventArgs e);
    public sealed virtual Control get_Control();
    public sealed virtual void add_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public sealed virtual void remove_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
}
internal class JetBrains.UI.Validation.CheckedListener : object {
    private Control myControl;
    private EventHandler`1<EventArgs`1<IControlListener>> ControlStateChanged;
    public Control Control { get; }
    public CheckedListener(Control control);
    private static EventInfo GetCheckedChangedEvent(Control control);
    public sealed virtual Control get_Control();
    private void CheckedChanged(object sender, EventArgs e);
    public sealed virtual void add_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public sealed virtual void remove_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public static bool IsApplicable(Control control);
}
public class JetBrains.UI.Validation.CheckedValidator : ControlValidator {
    private ValidatorSeverity myDefaultSeverity;
    [NotNullAttribute]
private string myGroupId;
    private FormValidators myFormValidators;
    public string GroupId { get; }
    public CheckedValidator(Control control, ValidatorSeverity severity, RichText message, IWindowsHookManager windowsHookManager, FormValidators formValidators, IUIApplication environment);
    public CheckedValidator(Control control, ValidatorSeverity severity, RichText message, string groupid, IWindowsHookManager windowsHookManager, FormValidators formValidators, IUIApplication environment);
    public string get_GroupId();
    public static PropertyInfo GetPropertyInfo(Control control);
    private bool IsChecked();
    private bool IsValid();
    public virtual void Update();
}
public class JetBrains.UI.Validation.ComboBoxListener : object {
    private Control myControl;
    private EventHandler`1<EventArgs`1<IControlListener>> ControlStateChanged;
    public Control Control { get; }
    public ComboBoxListener(Control control);
    private static EventInfo GetSelectedIndexChangedEvent(Control control);
    public sealed virtual Control get_Control();
    private void CheckedChanged(object sender, EventArgs e);
    public sealed virtual void add_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public sealed virtual void remove_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public static bool IsApplicable(Control control);
}
internal class JetBrains.UI.Validation.CompositeListener : object {
    private Control myControl;
    private EventHandler`1<EventArgs`1<IControlListener>> ControlStateChanged;
    public Control Control { get; }
    public CompositeListener(Control control, IEnumerable`1<IControlListener> listeners);
    private void Listener_OnControlStateChanged(object sender, EventArgs`1<IControlListener> args);
    public sealed virtual Control get_Control();
    public sealed virtual void add_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public sealed virtual void remove_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
}
public static class JetBrains.UI.Validation.ControlListenerFactory : object {
    private static List`1<IControlListenerProvider> myProviders;
    private static ControlListenerFactory();
    public static void RegisterProvider(IControlListenerProvider provider);
    [NotNullAttribute]
public static IControlListener CreateControlListener(Control control);
}
public abstract class JetBrains.UI.Validation.ControlValidator : object {
    [NotNullAttribute]
private Rectangle myBounds;
    [NotNullAttribute]
private Control myControl;
    [NotNullAttribute]
private IControlListener myControlListener;
    private SimpleSignal myGottenDirty;
    [NotNullAttribute]
private IPopupLayouter myLayouter;
    [NotNullAttribute]
private RichText myMessage;
    private ValidatorSeverity mySeverity;
    private ISimpleSignal myWantsResize;
    [CanBeNullAttribute]
private IWindowlessControl myWindowlessControl;
    private EventHandler`1<PropertyChangedEventArgs`2<string, IPopupLayouter>> LayouterChanged;
    private EventHandler`1<PropertyChangedEventArgs`2<string, RichText>> MessageChanged;
    private EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> SeverityChanged;
    private EventHandler`1<PropertyChangedEventArgs`2<string, IWindowlessControl>> WindowlessControlChanged;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; private set; }
    public Control Control { get; }
    public IPopupLayouter Layouter { get; protected set; }
    public RichText Message { get; protected set; }
    public ValidatorSeverity Severity { get; protected set; }
    public IWindowlessControl WindowlessControl { get; protected set; }
    public bool AutoActivate { get; public set; }
    public Rectangle Bounds { get; }
    public ISimpleSignal GottenDirty { get; }
    public ISimpleSignal WantsResize { get; }
    protected ControlValidator(Control control, IWindowsHookManager windowsHookManager, IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
private void set_Environment(IUIApplication value);
    public Control get_Control();
    public static Image GetImageFromSeverity(ValidatorSeverity severity, IUIApplication environment);
    protected void FireLayouterChanged(IPopupLayouter old, IPopupLayouter new);
    protected void FireMessageChanged(RichText old, RichText new);
    protected void FireSeverityChanged(ValidatorSeverity old, ValidatorSeverity new);
    protected void FireWindowlessControlChanged(IWindowlessControl old, IWindowlessControl new);
    protected void OnSeverityChangedShowHide(object sender, PropertyChangedEventArgs`2<string, ValidatorSeverity> args);
    public sealed virtual void add_LayouterChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IPopupLayouter>> value);
    public sealed virtual void remove_LayouterChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IPopupLayouter>> value);
    public sealed virtual void add_MessageChanged(EventHandler`1<PropertyChangedEventArgs`2<string, RichText>> value);
    public sealed virtual void remove_MessageChanged(EventHandler`1<PropertyChangedEventArgs`2<string, RichText>> value);
    public sealed virtual void add_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    public sealed virtual void remove_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    public sealed virtual void add_WindowlessControlChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IWindowlessControl>> value);
    public sealed virtual void remove_WindowlessControlChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IWindowlessControl>> value);
    public virtual void Update();
    public sealed virtual IPopupLayouter get_Layouter();
    protected void set_Layouter(IPopupLayouter value);
    public sealed virtual RichText get_Message();
    protected void set_Message(RichText value);
    public sealed virtual ValidatorSeverity get_Severity();
    protected void set_Severity(ValidatorSeverity value);
    public sealed virtual IWindowlessControl get_WindowlessControl();
    protected void set_WindowlessControl(IWindowlessControl value);
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void Paint(Graphics g);
    public sealed virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
    public sealed virtual void SetLayout(LayoutResult layout);
    public sealed virtual bool get_AutoActivate();
    public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual Rectangle get_Bounds();
    public sealed virtual ISimpleSignal get_GottenDirty();
    public sealed virtual ISimpleSignal get_WantsResize();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object param0, EventArgs`1<IControlListener> param1);
}
public class JetBrains.UI.Validation.DecimalRangeValidator : ControlValidator {
    private NumericUpDown myA;
    private NumericUpDown myB;
    public DecimalRangeValidator(NumericUpDown a, NumericUpDown b, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public virtual void Update();
    private bool IsValid();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object param0, EventArgs`1<IControlListener> param1);
}
public class JetBrains.UI.Validation.DynamicTextValidator : ControlValidator {
    private Func`2<string, Tuple`2<ValidatorSeverity, RichText>> myFuncUpdate;
    public DynamicTextValidator(Control control, Func`2<string, Tuple`2<ValidatorSeverity, RichText>> funcUpdate, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public virtual void Update();
}
public class JetBrains.UI.Validation.DynamicTextValidatorReentranceSafe : DynamicTextValidator {
    private IShellLocks myLocks;
    public DynamicTextValidatorReentranceSafe(Control control, Func`2<string, Tuple`2<ValidatorSeverity, RichText>> funcUpdate, IShellLocks locks, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public virtual void Update();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod1();
    [CompilerGeneratedAttribute]
private void <Update>b__0();
}
public class JetBrains.UI.Validation.ExplicitlyManagedValidator : ControlValidator {
    private ValidatorSeverity myValidatorSeverity;
    private Func`1<bool> myPredicate;
    private IShellLocks myLocks;
    public ExplicitlyManagedValidator(Control control, ValidatorSeverity error, string message, Func`1<bool> predicate, IShellLocks locks, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public void UpdateSync();
    public virtual void Update();
    [CompilerGeneratedAttribute]
private void <Update>b__0();
}
public class JetBrains.UI.Validation.FormValidator : object {
    [NotNullAttribute]
private Form myForm;
    private ValidatorSeverity mySeverity;
    [NotNullAttribute]
private ICollectionEvents`1<IValidatorProvider> myValidatorProviders;
    [NotNullAttribute]
private ICollectionEvents`1<IValidator> myValidators;
    private EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> SeverityChanged;
    public Form Form { get; }
    public ValidatorSeverity Severity { get; protected set; }
    public ICollectionEvents`1<IValidatorProvider> ValidatorProviders { get; }
    public ICollectionEvents`1<IValidator> Validators { get; }
    protected internal FormValidator(Form form, IMainWindowPopupWindowContext mainWindowPopupWindowContext, PopupWindowManager popupWindowManager);
    protected static void AssertValidValidator(IValidator validator);
    private static void OnValidatorsBeforeAddRemove(BeforeAddRemoveEventArgs`1<IValidator> args);
    protected void FireSeverityChanged(ValidatorSeverity old, ValidatorSeverity new);
    private void OnFormShown(object sender, EventArgs e);
    private void OnFormActivated(object sender, EventArgs e);
    private void OnValidatorsAddRemove(AddRemoveEventArgs`1<IValidator> args);
    private void OnValidatorSeverityChanged(object sender, PropertyChangedEventArgs`2<string, ValidatorSeverity> args);
    private ValidatorSeverity ShowMessage_OneSeverity(ValidatorSeverity severity);
    public sealed virtual void add_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    public sealed virtual void remove_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    public sealed virtual ValidatorSeverity ShowMessage();
    public sealed virtual void Update();
    public sealed virtual Form get_Form();
    public sealed virtual ValidatorSeverity get_Severity();
    protected void set_Severity(ValidatorSeverity value);
    public sealed virtual ICollectionEvents`1<IValidatorProvider> get_ValidatorProviders();
    public sealed virtual ICollectionEvents`1<IValidator> get_Validators();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
[ShellComponentAttribute]
public class JetBrains.UI.Validation.FormValidatorsInteractive : FormValidators {
    private Lifetime myLifetime;
    [NotNullAttribute]
private WeakToWeakDictionary`2<Form, IFormValidator> ourFormValidators;
    private IThreading myThreading;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private PopupWindowManager myPopupWindowManager;
    public FormValidatorsInteractive(Lifetime lifetime, IThreading getComponent, IMainWindowPopupWindowContext mainWindowPopupWindowContext, PopupWindowManager popupWindowManager);
    [NotNullAttribute]
public virtual IFormValidator GetOrCreate(Control control);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.UI.Validation.FormValidatorView : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private IFormValidator myDocument;
    [NotNullAttribute]
private BidirectionalMapOnDictionary`2<IValidator, WindowlessControlView> myMapValidatorToView;
    private IMainWindowPopupWindowContext myMainWindowPopupWindowContext;
    private PopupWindowManager myPopupWindowManager;
    public IFormValidator Document { get; }
    public FormValidatorView(IFormValidator document, IMainWindowPopupWindowContext mainWindowPopupWindowContext, PopupWindowManager popupWindowManager);
    public IFormValidator get_Document();
    private void CreateValidatorView(IValidator validator);
    private void OnValidatorsAdd(AddRemoveEventArgs`1<IValidator> args);
    private void OnValidatorsRemove(AddRemoveEventArgs`1<IValidator> args);
    private void OnValidatorWindowlessControlChanged(object sender, PropertyChangedEventArgs`2<string, IWindowlessControl> args);
}
public interface JetBrains.UI.Validation.IControlListener {
    [NotNullAttribute]
public Control Control { get; }
    public abstract virtual Control get_Control();
    public abstract virtual void add_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public abstract virtual void remove_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
}
public interface JetBrains.UI.Validation.IControlListenerProvider {
    public abstract virtual IControlListener CreateListener(Control control);
    public abstract virtual bool IsAvailable(Control control);
}
public class JetBrains.UI.Validation.PredicateValidator : ControlValidator {
    private ValidatorSeverity myDefaultSeverity;
    private Func`1<RichText> myMessageEvaluator;
    private Func`1<bool> myPredicate;
    public Func`1<bool> Predicate { get; }
    public PredicateValidator(Control control, ValidatorSeverity severity, RichText message, Func`1<bool> predicate, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public PredicateValidator(Control control, ValidatorSeverity severity, Func`1<RichText> messageEvaluator, Func`1<bool> predicate, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public Func`1<bool> get_Predicate();
    public virtual void Update();
}
public class JetBrains.UI.Validation.PredicateValidatorReentrantSafe : ControlValidator {
    private ValidatorSeverity myDefaultSeverity;
    private Func`1<RichText> myMessageEvaluator;
    private Func`1<bool> myPredicate;
    public Func`1<bool> Predicate { get; }
    public PredicateValidatorReentrantSafe(Control control, ValidatorSeverity severity, RichText message, Func`1<bool> predicate, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public PredicateValidatorReentrantSafe(Control control, ValidatorSeverity severity, Func`1<RichText> messageEvaluator, Func`1<bool> predicate, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public Func`1<bool> get_Predicate();
    public virtual void Update();
    [CompilerGeneratedAttribute]
private void <Update>b__4();
}
internal class JetBrains.UI.Validation.TextListener : object {
    private Control myControl;
    private EventHandler`1<EventArgs`1<IControlListener>> ControlStateChanged;
    public Control Control { get; }
    public TextListener(Control control);
    private void MyControl_OnTextChanged(object sender, EventArgs e);
    public sealed virtual Control get_Control();
    public sealed virtual void add_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
    public sealed virtual void remove_ControlStateChanged(EventHandler`1<EventArgs`1<IControlListener>> value);
}
public class JetBrains.UI.Validation.TextValidator : ControlValidator {
    protected Func`2<string, bool> myChecker;
    protected ValidatorSeverity myDefaultSeverity;
    public TextValidator(Control control, ValidatorSeverity severity, RichText message, Func`2<string, bool> funcIsValid, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public virtual void Update();
}
public class JetBrains.UI.Validation.TextValidatorReentrantSafe : TextValidator {
    private IShellLocks myLocks;
    public TextValidatorReentrantSafe(Control control, ValidatorSeverity severity, RichText message, Func`2<string, bool> funcIsValid, IShellLocks locks, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public virtual void Update();
    [CompilerGeneratedAttribute]
private void <Update>b__0();
}
public abstract class JetBrains.UI.Validation.ValidationAttribute : Attribute {
    private string myMessage;
    private ValidatorSeverity mySeverity;
    public string Message { get; }
    public ValidatorSeverity Severity { get; }
    protected ValidationAttribute(string message, ValidatorSeverity severity);
    public string get_Message();
    public ValidatorSeverity get_Severity();
    public abstract virtual IValidator BuildValidator(Control control, object host);
}
public static class JetBrains.UI.Validation.ValidatorFactory : object {
    public static IValidator CreateTextNotEmptyValidator(Control control, ValidatorSeverity severity, string message, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public static DynamicTextValidator CreateTextValidator(Control control, Func`2<string, Tuple`2<ValidatorSeverity, RichText>> funcUpdate, IWindowsHookManager windowsHookManager, IUIApplication environment);
    public static IValidator CreateTextValidator(Control control, ValidatorSeverity severity, string message, Func`2<string, bool> funcIsValid, IWindowsHookManager windowsHookManager, IUIApplication environment);
    private static bool TextNotEmptyChecker(string s);
}
public static class JetBrains.UI.Validation.ValidatorHarvester : object {
    [CanBeNullAttribute]
public static IValidatorProvider Harvest(Control control);
}
public class JetBrains.UI.Validation.WindowlessControlView : Form {
    public ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
    public ISimpleSignal GottenDirty;
    public IProperty`1<bool> IsTransparent;
    public IProperty`1<IWindowlessControl> WindowlessControl;
    private Property`1<bool> myInIsTopMost;
    private ISimpleSignal myWantsResize;
    [CompilerGeneratedAttribute]
private ITooltipProvider <TooltipProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoActivate>k__BackingField;
    public bool IsTopMost { get; public set; }
    [CanBeNullAttribute]
public ITooltipProvider TooltipProvider { get; public set; }
    protected CreateParams CreateParams { get; }
    protected bool ShowWithoutActivation { get; }
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public bool get_IsTopMost();
    public void set_IsTopMost(bool value);
    [CompilerGeneratedAttribute]
public ITooltipProvider get_TooltipProvider();
    [CompilerGeneratedAttribute]
public void set_TooltipProvider(ITooltipProvider value);
    protected void OnPaint_Layared();
    protected void OnPaint_Opaque(Graphics g);
    private void InitDataFlow();
    protected virtual void WndProc(Message& m);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(LayoutEventArgs args);
    protected virtual void OnPaint(PaintEventArgs args);
    protected virtual CreateParams get_CreateParams();
    protected virtual bool get_ShowWithoutActivation();
    public sealed virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public sealed virtual void SetLayout(LayoutResult layout);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoActivate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoActivate(bool value);
    public sealed virtual ISimpleSignal get_WantsResize();
    public sealed virtual ITooltipInfo GetTooltip(Lifetime lifetime, Point point);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__0(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__1(bool value);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__2(Lifetime lifeControl, IWindowlessControl control);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__3(Lifetime lifeControl, IWindowlessControl control);
}
[ActionAttribute("WindowManager.ActivateRecentTool", "")]
public class JetBrains.UI.WindowManagement.Actions.ActivateToolContentActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("WindowManager.CloseRecentTool", "")]
public class JetBrains.UI.WindowManagement.Actions.CloseToolContentActionHandler : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public static class JetBrains.UI.WindowManagement.MainWindowLayouter : object {
    [CompilerGeneratedAttribute]
private static Func`2<Rect, Rect> CS$<>9__CachedAnonymousMethodDelegate1;
    [NotNullAttribute]
public static IPopupLayouter CreateCenteredCorner(Lifetime lifetime, IMainWindow mainWindow, IWindowsHookManager windowsHookManager);
    [NotNullAttribute]
public static IPopupLayouter CreateCenteredMiddle(Lifetime lifetime, IMainWindow mainWindow, IWindowsHookManager windowsHookManager);
    [CompilerGeneratedAttribute]
private static Rect <CreateCenteredCorner>b__0(Rect rect);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class JetBrains.UI.Wpf.Controls.DropDownButton.Impl.DropDownButton : ContentControl {
    public static DependencyProperty DropDownContentProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty ArrowVisibilityProperty;
    public static RoutedEvent ClickEvent;
    public static RoutedEvent OpenedEvent;
    public static RoutedEvent ClosedEvent;
    private ToggleButton myButton;
    private Popup myPopup;
    [CompilerGeneratedAttribute]
private ContentPresenter <ContentPresenter>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<ToggleButton> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Action`1<ContentPresenter> CS$<>9__CachedAnonymousMethodDelegate7;
    public object DropDownContent { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public Visibility ArrowVisibility { get; public set; }
    protected ToggleButton Button { get; private set; }
    protected Popup Popup { get; private set; }
    protected ContentPresenter ContentPresenter { get; private set; }
    private static DropDownButton();
    public object get_DropDownContent();
    public void set_DropDownContent(object value);
    private static void IsDropDownOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public Visibility get_ArrowVisibility();
    public void set_ArrowVisibility(Visibility value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public void add_Opened(RoutedEventHandler value);
    public void remove_Opened(RoutedEventHandler value);
    public void add_Closed(RoutedEventHandler value);
    public void remove_Closed(RoutedEventHandler value);
    private void OnMouseDownOutsideElement(object sender, MouseButtonEventArgs e);
    private bool ShouldTogglePopup(KeyEventArgs e);
    protected ToggleButton get_Button();
    private void set_Button(ToggleButton value);
    protected Popup get_Popup();
    private void set_Popup(Popup value);
    [CompilerGeneratedAttribute]
protected ContentPresenter get_ContentPresenter();
    [CompilerGeneratedAttribute]
private void set_ContentPresenter(ContentPresenter value);
    public virtual void OnApplyTemplate();
    private void TogglePopup(bool isOpen, bool moveFocusToButton);
    private void OnKeyDown(object sender, KeyEventArgs e);
    private void ButtonOnClick(object sender, RoutedEventArgs routedEventArgs);
    private void PopupOnOpened(object sender, EventArgs eventArgs);
    [CompilerGeneratedAttribute]
private void <set_Button>b__0(ToggleButton b);
    [CompilerGeneratedAttribute]
private void <set_Button>b__1(ToggleButton b);
    [CompilerGeneratedAttribute]
private void <set_Popup>b__2(Popup p);
    [CompilerGeneratedAttribute]
private void <set_Popup>b__3(Popup p);
    [CompilerGeneratedAttribute]
private static void <TogglePopup>b__4(ToggleButton b);
    [CompilerGeneratedAttribute]
private static void <PopupOnOpened>b__6(ContentPresenter p);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class JetBrains.UI.Wpf.Controls.NumericUpDown.Impl.NumericUpDown : Control {
    private static KeyConverter ourKeyConverter;
    private ButtonBase myIncreaseButton;
    private ButtonBase myDecreaseButton;
    private TextBox myTextBox;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MaxValueProperty;
    public static DependencyProperty MinValueProperty;
    public static DependencyProperty SteProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty TextAlignmentProperty;
    private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegatea;
    protected ButtonBase IncreaseButton { get; private set; }
    protected ButtonBase DecreaseButton { get; private set; }
    protected TextBox TextBox { get; private set; }
    public int Value { get; public set; }
    public int MaxValue { get; public set; }
    public int MinValue { get; public set; }
    public int Step { get; public set; }
    public bool IsReadOnly { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    private static NumericUpDown();
    protected ButtonBase get_IncreaseButton();
    private void set_IncreaseButton(ButtonBase value);
    protected ButtonBase get_DecreaseButton();
    private void set_DecreaseButton(ButtonBase value);
    protected TextBox get_TextBox();
    private void set_TextBox(TextBox value);
    public int get_Value();
    public void set_Value(int value);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_MaxValue();
    public void set_MaxValue(int value);
    private static void MaxValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_MinValue();
    public void set_MinValue(int value);
    private static void MinValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_Step();
    public void set_Step(int value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public virtual void OnApplyTemplate();
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    private void TextBoxOnTextChanged(object sender, TextChangedEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    private void OnButtonClick(object sender, RoutedEventArgs e);
    protected void OnValueChanged();
    private void OnSpin(SpinDirection spinDirection);
    private void SetValue(int value);
    [CompilerGeneratedAttribute]
private void <set_IncreaseButton>b__0(ButtonBase b);
    [CompilerGeneratedAttribute]
private void <set_IncreaseButton>b__1(ButtonBase b);
    [CompilerGeneratedAttribute]
private void <set_DecreaseButton>b__2(ButtonBase b);
    [CompilerGeneratedAttribute]
private void <set_DecreaseButton>b__3(ButtonBase b);
    [CompilerGeneratedAttribute]
private void <set_TextBox>b__4(TextBox t);
    [CompilerGeneratedAttribute]
private void <set_TextBox>b__5(TextBox t);
    [CompilerGeneratedAttribute]
private void <OnValueChanged>b__6(ButtonBase b);
    [CompilerGeneratedAttribute]
private void <OnValueChanged>b__7(ButtonBase b);
    [CompilerGeneratedAttribute]
private void <OnValueChanged>b__8(TextBox t);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__9(object param0, EventArgs param1);
}
public class JetBrains.UI.Wpf.Controls.Paging.Impl.PagedContainer : UserControl {
    private Lifetime myLifetime;
    private PagedControl myPagedControl;
    private IPagedSource mySource;
    private IShellLocks myLocks;
    private int myPageNumber;
    private int myTotalPages;
    private PropertyChangedEventHandler PropertyChanged;
    internal PagedContainer Page;
    internal ContentControl PagedContentControl;
    internal Button GoToStartButton;
    internal Button GoToPrevButton;
    internal Button GoToNextButton;
    internal Button GoToEndButton;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private Brush <TextBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <BackgoundBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanGoToStart>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanGoToPrev>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanGoToNext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanGoToEnd>k__BackingField;
    public Brush TextBrush { get; public set; }
    public Brush BackgoundBrush { get; public set; }
    public bool CanGoToStart { get; private set; }
    public bool CanGoToPrev { get; private set; }
    public bool CanGoToNext { get; private set; }
    public bool CanGoToEnd { get; private set; }
    public string PageNumberText { get; }
    public PagedContainer(Lifetime lifetime, PagedControl pagedControl, IPagedSource source, IShellLocks locks, Brush textBrush, Brush backgoundBrush);
    [CompilerGeneratedAttribute]
public Brush get_TextBrush();
    [CompilerGeneratedAttribute]
public void set_TextBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_BackgoundBrush();
    [CompilerGeneratedAttribute]
public void set_BackgoundBrush(Brush value);
    private void GoToButtonMouseDirectlyOver(object sender, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs);
    [CompilerGeneratedAttribute]
public bool get_CanGoToStart();
    [CompilerGeneratedAttribute]
private void set_CanGoToStart(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanGoToPrev();
    [CompilerGeneratedAttribute]
private void set_CanGoToPrev(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanGoToNext();
    [CompilerGeneratedAttribute]
private void set_CanGoToNext(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanGoToEnd();
    [CompilerGeneratedAttribute]
private void set_CanGoToEnd(bool value);
    public string get_PageNumberText();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    private void OnDesiredPageSizeChanged(PropertyChangedEventArgs`1<int> args);
    public void UpdateState();
    private void GoToStartButton_OnClick(object sender, RoutedEventArgs e);
    private void GoToPrevButton_OnClick(object sender, RoutedEventArgs e);
    private void GoToNextButton_OnClick(object sender, RoutedEventArgs e);
    private void GoToEndButton_OnClick(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <UpdateState>b__0();
}
public interface JetBrains.UI.Wpf.Controls.Paging.IPagedSource {
    public IProperty`1<string> FilterText { get; }
    public IProperty`1<int> ItemCount { get; }
    public abstract virtual IProperty`1<string> get_FilterText();
    public abstract virtual IProperty`1<int> get_ItemCount();
    public abstract virtual IEnumerable`1<object> GetItemsRange(int start, int end);
}
public class JetBrains.UI.Wpf.Controls.Paging.PagedControl : UserControl {
    public IProperty`1<int> DesiredPageSize { get; }
    public virtual void Update(IEnumerable`1<object> range);
    public virtual IProperty`1<int> get_DesiredPageSize();
}
public class JetBrains.UI.Wpf.Controls.SelectionBindingTextBox.SelectionBindingTextBox : TextBox {
    private bool changeFromUI;
    public static DependencyProperty BindableSelectionStartProperty;
    public static DependencyProperty BindableSelectionLengthProperty;
    public static DependencyProperty BindableCaretIndexProperty;
    public int BindableSelectionStart { get; public set; }
    public int BindableSelectionLength { get; public set; }
    public int BindableCaretIndex { get; public set; }
    private static SelectionBindingTextBox();
    public int get_BindableSelectionStart();
    public void set_BindableSelectionStart(int value);
    public int get_BindableSelectionLength();
    public void set_BindableSelectionLength(int value);
    public int get_BindableCaretIndex();
    public void set_BindableCaretIndex(int value);
    private static void OnBindableSelectionStartChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void OnBindableSelectionLengthChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void OnBindableCaretIndexChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private void OnSelectionChanged(object sender, RoutedEventArgs e);
    private void OnTextInput(object sender, RoutedEventArgs e);
}
[ViewAttribute("0")]
public class JetBrains.UI.Wpf.Controls.StringCollectionEdit.Impl.Items.CollectionEditItemView : UserControl {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class JetBrains.UI.Wpf.Converters.BitmapToImageSourceConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.BooleanToVisibilityConverter : MarkupConverterBase {
    private Visibility nonVisibleValue;
    [CompilerGeneratedAttribute]
private bool <Inverted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NullableSubstitution>k__BackingField;
    public bool Inverted { get; public set; }
    public bool NullableSubstitution { get; public set; }
    public Visibility NonVisibleValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Inverted();
    [CompilerGeneratedAttribute]
public void set_Inverted(bool value);
    [CompilerGeneratedAttribute]
public bool get_NullableSubstitution();
    [CompilerGeneratedAttribute]
public void set_NullableSubstitution(bool value);
    public Visibility get_NonVisibleValue();
    public void set_NonVisibleValue(Visibility value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ObsoleteAttribute("Use InversionConverter instead")]
public class JetBrains.UI.Wpf.Converters.BoolInvertedConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.BoolPropertyConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.BrushToColorConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.ColorToBrushConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class JetBrains.UI.Wpf.Converters.ConverterExtension : MarkupExtension {
    private static ConcurrentDictionary`2<string, IValueConverter> ourConverters;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [ConstructorArgumentAttribute("path")]
public string Path { get; public set; }
    public ConverterExtension(string path);
    private static ConverterExtension();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    private IValueConverter GetConverter(string path);
    private IValueConverter Error(string details, Object[] args);
}
public static class JetBrains.UI.Wpf.Converters.Converters : object {
}
public class JetBrains.UI.Wpf.Converters.DataTypeConverter : MarkupExtension {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class JetBrains.UI.Wpf.Converters.DelegateMultiValueConverter : object {
    private Func`5<Object[], Type, object, CultureInfo, object> myConvert;
    private Func`5<object, Type[], object, CultureInfo, Object[]> myConvertBack;
    public DelegateMultiValueConverter(Func`2<Object[], object> convert, Func`2<object, Object[]> convertBack);
    public DelegateMultiValueConverter(Func`3<Object[], object, object> convert, Func`3<object, object, Object[]> convertBack);
    public DelegateMultiValueConverter(Func`5<Object[], Type, object, CultureInfo, object> convert, Func`5<object, Type[], object, CultureInfo, Object[]> convertBack);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.DelegateValueConverter : MarkupConverterBase {
    private Func`5<object, Type, object, CultureInfo, object> myConvert;
    private Func`5<object, Type, object, CultureInfo, object> myConvertBack;
    public DelegateValueConverter(Func`2<object, object> convert, Func`2<object, object> convertBack);
    public DelegateValueConverter(Func`3<object, object, object> convert, Func`3<object, object, object> convertBack);
    public DelegateValueConverter(Func`5<object, Type, object, CultureInfo, object> convert, Func`5<object, Type, object, CultureInfo, object> convertBack);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.EnumBooleanAndBackConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private object AntiParameter(object parameter);
}
public class JetBrains.UI.Wpf.Converters.EnumBooleanConverter : MarkupConverterBase {
    [CompilerGeneratedAttribute]
private object <True>k__BackingField;
    [CompilerGeneratedAttribute]
private object <False>k__BackingField;
    public object True { get; public set; }
    public object False { get; public set; }
    [CompilerGeneratedAttribute]
public object get_True();
    [CompilerGeneratedAttribute]
public void set_True(object value);
    [CompilerGeneratedAttribute]
public object get_False();
    [CompilerGeneratedAttribute]
public void set_False(object value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.EnumDescriptionConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.EnumToVisibilityConverter : MarkupConverterBase {
    private Visibility nonVisibleValue;
    [CompilerGeneratedAttribute]
private bool <Inverted>k__BackingField;
    public bool Inverted { get; public set; }
    public Visibility NonVisibleValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Inverted();
    [CompilerGeneratedAttribute]
public void set_Inverted(bool value);
    public Visibility get_NonVisibleValue();
    public void set_NonVisibleValue(Visibility value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.EnumValueConverter : MarkupConverterBase {
    private Type myType;
    public EnumValueConverter(Type type);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.EnumValuesConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.FakeGridViewColumnCollectionConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.InversionConverter : MarkupConverterBase {
    [CompilerGeneratedAttribute]
private bool <NullableSubstitution>k__BackingField;
    public bool NullableSubstitution { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NullableSubstitution();
    [CompilerGeneratedAttribute]
public void set_NullableSubstitution(bool value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.IsSubclassOf : MarkupExtension {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    public IsSubclassOf(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class JetBrains.UI.Wpf.Converters.ItemToArrayConverter : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public abstract class JetBrains.UI.Wpf.Converters.MarkupConverterBase : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.MultiplyByConverter : MarkupConverterBase {
    [CompilerGeneratedAttribute]
private double <Factor>k__BackingField;
    public double Factor { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Factor();
    [CompilerGeneratedAttribute]
public void set_Factor(double value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private Nullable`1<double> ToNumber(object value);
    private object ToNumber(double value, Type type);
}
public class JetBrains.UI.Wpf.Converters.NullableConverter : MarkupConverterBase {
    [CompilerGeneratedAttribute]
private bool <NullableSubstitution>k__BackingField;
    public bool NullableSubstitution { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NullableSubstitution();
    [CompilerGeneratedAttribute]
public void set_NullableSubstitution(bool value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.NullToVisibilityConverter : MarkupConverterBase {
    private Visibility nonVisibleValue;
    [CompilerGeneratedAttribute]
private bool <Inverted>k__BackingField;
    public bool Inverted { get; public set; }
    public Visibility NonVisibleValue { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Inverted();
    [CompilerGeneratedAttribute]
public void set_Inverted(bool value);
    public Visibility get_NonVisibleValue();
    public void set_NonVisibleValue(Visibility value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.RemoveLinebrakesConverter : MarkupConverterBase {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class JetBrains.UI.Wpf.Converters.StringToVisibilityConverter : MarkupConverterBase {
    private Func`2<string, Visibility> myConvertFunc;
    public static StringToVisibilityConverter CollapsedWhenEmpty;
    [CompilerGeneratedAttribute]
private static Func`2<string, Visibility> CS$<>9__CachedAnonymousMethodDelegate1;
    public StringToVisibilityConverter(Func`2<string, Visibility> convertFunc);
    private static StringToVisibilityConverter();
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    [CompilerGeneratedAttribute]
private static Visibility <.cctor>b__0(string s);
}
public class JetBrains.UI.Wpf.Converters.ValidTextBrushConverter : MarkupConverterBase {
    private SolidColorBrush myCorrectTextBrush;
    private SolidColorBrush myIncorrectTextBrush;
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public abstract class JetBrains.UI.Wpf.CustomRenderedViewBase`1 : FrameworkElement {
    protected TAutomation ViewModel;
    private void OnViewModelChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnViewModelChanged(TAutomation previous, TAutomation current);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object s, DependencyPropertyChangedEventArgs e);
}
public class JetBrains.UI.Wpf.DragDrop.DefaultDragHandler : DefaultHandler {
    public virtual void StartDrag(IDragInfo dragInfo);
    public sealed virtual void Dropping(IDropInfo dropInfo);
    public virtual void Dropped(IDropInfo dropInfo);
    public virtual void DragCancelled();
}
public class JetBrains.UI.Wpf.DragDrop.DefaultDropHandler : DefaultHandler {
    [CompilerGeneratedAttribute]
private static TypeFilter CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Type, Type> CS$<>9__CachedAnonymousMethodDelegate4;
    public virtual void DragOver(IDropInfo dropInfo);
    public virtual void Drop(IDropInfo dropInfo);
    public static bool CanAcceptData(IDropInfo dropInfo);
    protected static bool IsChildOf(UIElement targetItem, UIElement sourceItem);
    protected static bool TestCompatibleTypes(IEnumerable target, object data);
    [CompilerGeneratedAttribute]
private static bool <TestCompatibleTypes>b__0(Type t, object o);
    [CompilerGeneratedAttribute]
private static Type <TestCompatibleTypes>b__1(Type i);
}
public class JetBrains.UI.Wpf.DragDrop.DefaultHandler : object {
    public static IEnumerable ExtractData(object data);
    public static IList GetList(IEnumerable enumerable);
}
internal class JetBrains.UI.Wpf.DragDrop.DragAdorner : Adorner {
    private AdornerLayer myAdornerLayer;
    private UIElement myAdornment;
    private Point myMousePosition;
    public Point MousePosition { get; public set; }
    protected int VisualChildrenCount { get; }
    public DragAdorner(UIElement adornedElement, UIElement adornment);
    public Point get_MousePosition();
    public void set_MousePosition(Point value);
    public void Detatch();
    protected virtual Size ArrangeOverride(Size finalSize);
    public virtual GeneralTransform GetDesiredTransform(GeneralTransform transform);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual int get_VisualChildrenCount();
}
public static class JetBrains.UI.Wpf.DragDrop.DragDrop : object {
    public static DataFormat DataFormat;
    public static DataFormat DataFormat2;
    public static DependencyProperty DragAdornerTemplateProperty;
    public static DependencyProperty UseDefaultDragAdornerProperty;
    public static DependencyProperty DefaultDragAdornerOpacityProperty;
    public static DependencyProperty IsDragSourceProperty;
    public static DependencyProperty IsDropTargetProperty;
    public static DependencyProperty DragHandlerProperty;
    public static DependencyProperty DropHandlerProperty;
    public static DependencyProperty DragSourceIgnoreProperty;
    public static DependencyProperty DragMouseAnchorPointProperty;
    private static IDragSource ourDefaultDragHandler;
    private static IDropTarget ourDefaultDropHandler;
    private static DragAdorner ourDragAdorner;
    private static DragInfo ourDragInfo;
    private static bool ourDragInProgress;
    private static DropTargetAdorner ourDropTargetAdorner;
    private static object ourClickSuppressItem;
    private static Point ourAdornerPos;
    private static Size ourAdornerSize;
    public static IDragSource DefaultDragHandler { get; public set; }
    public static IDropTarget DefaultDropHandler { get; public set; }
    private static DragAdorner DragAdorner { get; private set; }
    private static DropTargetAdorner DropTargetAdorner { get; private set; }
    private static DragDrop();
    public static DataTemplate GetDragAdornerTemplate(UIElement target);
    public static void SetDragAdornerTemplate(UIElement target, DataTemplate value);
    public static bool GetUseDefaultDragAdorner(UIElement target);
    public static void SetUseDefaultDragAdorner(UIElement target, bool value);
    public static double GetDefaultDragAdornerOpacity(UIElement target);
    public static void SetDefaultDragAdornerOpacity(UIElement target, double value);
    public static bool GetIsDragSource(UIElement target);
    public static void SetIsDragSource(UIElement target, bool value);
    public static bool GetIsDropTarget(UIElement target);
    public static void SetIsDropTarget(UIElement target, bool value);
    public static IDragSource GetDragHandler(UIElement target);
    public static void SetDragHandler(UIElement target, IDragSource value);
    public static IDropTarget GetDropHandler(UIElement target);
    public static void SetDropHandler(UIElement target, IDropTarget value);
    public static bool GetDragSourceIgnore(UIElement target);
    public static void SetDragSourceIgnore(UIElement target, bool value);
    public static Point GetDragMouseAnchorPoint(UIElement target);
    public static void SetDragMouseAnchorPoint(UIElement target, Point value);
    public static IDragSource get_DefaultDragHandler();
    public static void set_DefaultDragHandler(IDragSource value);
    public static IDropTarget get_DefaultDropHandler();
    public static void set_DefaultDropHandler(IDropTarget value);
    private static void IsDragSourceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void IsDropTargetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void CancelDrag();
    private static void CreateDragAdorner();
    private static BitmapSource CaptureScreen(Visual target, FlowDirection flowDirection, double dpiX, double dpiY);
    private static void Scroll(DependencyObject o, DragEventArgs e);
    private static bool TryScrollIntoView(ScrollViewer scrollViewer, DragEventArgs e);
    private static void DragSource_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private static void DragSource_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private static IDragSource TryGetDragHandler(DragInfo dragInfo, UIElement sender);
    private static void DragSource_PreviewMouseMove(object sender, MouseEventArgs e);
    private static void DragSource_QueryContinueDrag(object sender, QueryContinueDragEventArgs e);
    private static void DropTarget_PreviewDragEnter(object sender, DragEventArgs e);
    private static void DropTarget_PreviewDragLeave(object sender, DragEventArgs e);
    private static void DropTarget_PreviewDragOver(object sender, DragEventArgs e);
    private static void AttachDropAdorner(UIElement itemsControl, DropInfo dropInfo);
    private static void DropTarget_PreviewDrop(object sender, DragEventArgs e);
    private static void DropTarget_GiveFeedback(object sender, GiveFeedbackEventArgs e);
    private static DragAdorner get_DragAdorner();
    private static void set_DragAdorner(DragAdorner value);
    private static DropTargetAdorner get_DropTargetAdorner();
    private static void set_DropTargetAdorner(DropTargetAdorner value);
}
public class JetBrains.UI.Wpf.DragDrop.DragInfo : object {
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <DragStartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <PositionInDraggedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <Effects>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseButton <MouseButton>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <SourceCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SourceItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <SourceItems>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <VisualSource>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <VisualSourceItem>k__BackingField;
    [CompilerGeneratedAttribute]
private FlowDirection <VisualSourceFlowDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataObject <DataObject>k__BackingField;
    public object Data { get; public set; }
    public Point DragStartPosition { get; private set; }
    public Point PositionInDraggedItem { get; private set; }
    public DragDropEffects Effects { get; public set; }
    public MouseButton MouseButton { get; private set; }
    public IEnumerable SourceCollection { get; public set; }
    public int SourceIndex { get; private set; }
    public object SourceItem { get; private set; }
    public IEnumerable SourceItems { get; private set; }
    public UIElement VisualSource { get; private set; }
    public UIElement VisualSourceItem { get; public set; }
    public FlowDirection VisualSourceFlowDirection { get; private set; }
    public IDataObject DataObject { get; public set; }
    public DragInfo(object sender, MouseButtonEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Point get_DragStartPosition();
    [CompilerGeneratedAttribute]
private void set_DragStartPosition(Point value);
    [CompilerGeneratedAttribute]
public sealed virtual Point get_PositionInDraggedItem();
    [CompilerGeneratedAttribute]
private void set_PositionInDraggedItem(Point value);
    [CompilerGeneratedAttribute]
public sealed virtual DragDropEffects get_Effects();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Effects(DragDropEffects value);
    [CompilerGeneratedAttribute]
public sealed virtual MouseButton get_MouseButton();
    [CompilerGeneratedAttribute]
private void set_MouseButton(MouseButton value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable get_SourceCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceCollection(IEnumerable value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SourceIndex();
    [CompilerGeneratedAttribute]
private void set_SourceIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_SourceItem();
    [CompilerGeneratedAttribute]
private void set_SourceItem(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable get_SourceItems();
    [CompilerGeneratedAttribute]
private void set_SourceItems(IEnumerable value);
    [CompilerGeneratedAttribute]
public sealed virtual UIElement get_VisualSource();
    [CompilerGeneratedAttribute]
private void set_VisualSource(UIElement value);
    [CompilerGeneratedAttribute]
public sealed virtual UIElement get_VisualSourceItem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VisualSourceItem(UIElement value);
    [CompilerGeneratedAttribute]
public sealed virtual FlowDirection get_VisualSourceFlowDirection();
    [CompilerGeneratedAttribute]
private void set_VisualSourceFlowDirection(FlowDirection value);
    [CompilerGeneratedAttribute]
public sealed virtual IDataObject get_DataObject();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataObject(IDataObject value);
}
public class JetBrains.UI.Wpf.DragDrop.DropInfo : object {
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IDragInfo <DragInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <DropPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DropTargetAdorner>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <Effects>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InsertIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <TargetCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetItem>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionViewGroup <TargetGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <VisualTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <VisualTargetItem>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <VisualTargetOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private FlowDirection <VisualTargetFlowDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationText>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativeInsertPosition <InsertPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropKeyStates <KeyStates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotHandled>k__BackingField;
    public object Data { get; private set; }
    public IDragInfo DragInfo { get; private set; }
    public Point DropPosition { get; private set; }
    public Type DropTargetAdorner { get; public set; }
    public DragDropEffects Effects { get; public set; }
    public int InsertIndex { get; public set; }
    public IEnumerable TargetCollection { get; public set; }
    public object TargetItem { get; private set; }
    public CollectionViewGroup TargetGroup { get; private set; }
    public UIElement VisualTarget { get; private set; }
    public UIElement VisualTargetItem { get; public set; }
    public Orientation VisualTargetOrientation { get; private set; }
    public FlowDirection VisualTargetFlowDirection { get; private set; }
    public string DestinationText { get; public set; }
    public RelativeInsertPosition InsertPosition { get; public set; }
    public DragDropKeyStates KeyStates { get; private set; }
    public bool NotHandled { get; public set; }
    public DropInfo(object sender, DragEventArgs e, DragInfo dragInfo);
    private CollectionViewGroup FindGroup(ItemsControl itemsControl, Point position);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IDragInfo get_DragInfo();
    [CompilerGeneratedAttribute]
private void set_DragInfo(IDragInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual Point get_DropPosition();
    [CompilerGeneratedAttribute]
private void set_DropPosition(Point value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DropTargetAdorner();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DropTargetAdorner(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual DragDropEffects get_Effects();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Effects(DragDropEffects value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_InsertIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable get_TargetCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetCollection(IEnumerable value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_TargetItem();
    [CompilerGeneratedAttribute]
private void set_TargetItem(object value);
    [CompilerGeneratedAttribute]
public sealed virtual CollectionViewGroup get_TargetGroup();
    [CompilerGeneratedAttribute]
private void set_TargetGroup(CollectionViewGroup value);
    [CompilerGeneratedAttribute]
public sealed virtual UIElement get_VisualTarget();
    [CompilerGeneratedAttribute]
private void set_VisualTarget(UIElement value);
    [CompilerGeneratedAttribute]
public sealed virtual UIElement get_VisualTargetItem();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VisualTargetItem(UIElement value);
    [CompilerGeneratedAttribute]
public sealed virtual Orientation get_VisualTargetOrientation();
    [CompilerGeneratedAttribute]
private void set_VisualTargetOrientation(Orientation value);
    [CompilerGeneratedAttribute]
public sealed virtual FlowDirection get_VisualTargetFlowDirection();
    [CompilerGeneratedAttribute]
private void set_VisualTargetFlowDirection(FlowDirection value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DestinationText();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DestinationText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RelativeInsertPosition get_InsertPosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InsertPosition(RelativeInsertPosition value);
    [CompilerGeneratedAttribute]
public sealed virtual DragDropKeyStates get_KeyStates();
    [CompilerGeneratedAttribute]
private void set_KeyStates(DragDropKeyStates value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NotHandled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NotHandled(bool value);
}
public abstract class JetBrains.UI.Wpf.DragDrop.DropTargetAdorner : Adorner {
    private AdornerLayer myAdornerLayer;
    [CompilerGeneratedAttribute]
private DropInfo <DropInfo>k__BackingField;
    public DropInfo DropInfo { get; public set; }
    protected DropTargetAdorner(UIElement adornedElement);
    public void Detatch();
    [CompilerGeneratedAttribute]
public DropInfo get_DropInfo();
    [CompilerGeneratedAttribute]
public void set_DropInfo(DropInfo value);
    internal static DropTargetAdorner Create(Type type, UIElement adornedElement);
}
public class JetBrains.UI.Wpf.DragDrop.DropTargetAdorners : object {
    public static Type Highlight { get; }
    public static Type Insert { get; }
    public static Type get_Highlight();
    public static Type get_Insert();
}
public class JetBrains.UI.Wpf.DragDrop.DropTargetHighlightAdorner : DropTargetAdorner {
    public DropTargetHighlightAdorner(UIElement adornedElement);
    protected virtual void OnRender(DrawingContext drawingContext);
}
public class JetBrains.UI.Wpf.DragDrop.DropTargetInsertionAdorner : DropTargetAdorner {
    private static Pen m_Pen;
    private static PathGeometry m_Triangle;
    public DropTargetInsertionAdorner(UIElement adornedElement);
    private static DropTargetInsertionAdorner();
    protected virtual void OnRender(DrawingContext drawingContext);
    private void DrawTriangle(DrawingContext drawingContext, Point origin, double rotation);
}
public interface JetBrains.UI.Wpf.DragDrop.IDragInfo {
    public object Data { get; public set; }
    public Point DragStartPosition { get; }
    public Point PositionInDraggedItem { get; }
    public DragDropEffects Effects { get; public set; }
    public MouseButton MouseButton { get; }
    public IEnumerable SourceCollection { get; public set; }
    public int SourceIndex { get; }
    public object SourceItem { get; }
    public IEnumerable SourceItems { get; }
    public UIElement VisualSource { get; }
    public UIElement VisualSourceItem { get; public set; }
    public FlowDirection VisualSourceFlowDirection { get; }
    public IDataObject DataObject { get; public set; }
    public abstract virtual object get_Data();
    public abstract virtual void set_Data(object value);
    public abstract virtual Point get_DragStartPosition();
    public abstract virtual Point get_PositionInDraggedItem();
    public abstract virtual DragDropEffects get_Effects();
    public abstract virtual void set_Effects(DragDropEffects value);
    public abstract virtual MouseButton get_MouseButton();
    public abstract virtual IEnumerable get_SourceCollection();
    public abstract virtual void set_SourceCollection(IEnumerable value);
    public abstract virtual int get_SourceIndex();
    public abstract virtual object get_SourceItem();
    public abstract virtual IEnumerable get_SourceItems();
    public abstract virtual UIElement get_VisualSource();
    public abstract virtual UIElement get_VisualSourceItem();
    public abstract virtual void set_VisualSourceItem(UIElement value);
    public abstract virtual FlowDirection get_VisualSourceFlowDirection();
    public abstract virtual IDataObject get_DataObject();
    public abstract virtual void set_DataObject(IDataObject value);
}
public interface JetBrains.UI.Wpf.DragDrop.IDragSource {
    public abstract virtual void StartDrag(IDragInfo dragInfo);
    public abstract virtual void Dropping(IDropInfo dropInfo);
    public abstract virtual void Dropped(IDropInfo dropInfo);
    public abstract virtual void DragCancelled();
}
public interface JetBrains.UI.Wpf.DragDrop.IDropInfo {
    public object Data { get; }
    public IDragInfo DragInfo { get; }
    public Point DropPosition { get; }
    public Type DropTargetAdorner { get; public set; }
    public DragDropEffects Effects { get; public set; }
    public int InsertIndex { get; public set; }
    public IEnumerable TargetCollection { get; public set; }
    public object TargetItem { get; }
    public CollectionViewGroup TargetGroup { get; }
    public UIElement VisualTarget { get; }
    public UIElement VisualTargetItem { get; public set; }
    public Orientation VisualTargetOrientation { get; }
    public FlowDirection VisualTargetFlowDirection { get; }
    public string DestinationText { get; public set; }
    public RelativeInsertPosition InsertPosition { get; public set; }
    public DragDropKeyStates KeyStates { get; }
    public bool NotHandled { get; public set; }
    public abstract virtual object get_Data();
    public abstract virtual IDragInfo get_DragInfo();
    public abstract virtual Point get_DropPosition();
    public abstract virtual Type get_DropTargetAdorner();
    public abstract virtual void set_DropTargetAdorner(Type value);
    public abstract virtual DragDropEffects get_Effects();
    public abstract virtual void set_Effects(DragDropEffects value);
    public abstract virtual int get_InsertIndex();
    public abstract virtual void set_InsertIndex(int value);
    public abstract virtual IEnumerable get_TargetCollection();
    public abstract virtual void set_TargetCollection(IEnumerable value);
    public abstract virtual object get_TargetItem();
    public abstract virtual CollectionViewGroup get_TargetGroup();
    public abstract virtual UIElement get_VisualTarget();
    public abstract virtual UIElement get_VisualTargetItem();
    public abstract virtual void set_VisualTargetItem(UIElement value);
    public abstract virtual Orientation get_VisualTargetOrientation();
    public abstract virtual FlowDirection get_VisualTargetFlowDirection();
    public abstract virtual string get_DestinationText();
    public abstract virtual void set_DestinationText(string value);
    public abstract virtual RelativeInsertPosition get_InsertPosition();
    public abstract virtual void set_InsertPosition(RelativeInsertPosition value);
    public abstract virtual DragDropKeyStates get_KeyStates();
    public abstract virtual bool get_NotHandled();
    public abstract virtual void set_NotHandled(bool value);
}
public interface JetBrains.UI.Wpf.DragDrop.IDropTarget {
    public abstract virtual void DragOver(IDropInfo dropInfo);
    public abstract virtual void Drop(IDropInfo dropInfo);
}
[FlagsAttribute]
public enum JetBrains.UI.Wpf.DragDrop.RelativeInsertPosition : Enum {
    public int value__;
    public static RelativeInsertPosition BeforeTargetItem;
    public static RelativeInsertPosition AfterTargetItem;
    public static RelativeInsertPosition TargetItemCenter;
}
public static class JetBrains.UI.Wpf.DragDrop.Utilities.HitTestUtilities : object {
    public static bool HitWithin(UIElement element, Point point);
    public static bool HitTest4Type(object sender, Point elementPosition, bool onlyWhenFocused);
    private static T GetHitTestElement4Type(object sender, Point elementPosition);
    public static bool HitTest4GridViewColumnHeader(object sender, Point elementPosition);
}
[ExtensionAttribute]
public static class JetBrains.UI.Wpf.DragDrop.Utilities.ItemsControlExtensions : object {
    [ExtensionAttribute]
public static bool CanSelectMultipleItems(ItemsControl itemsControl);
    [ExtensionAttribute]
public static UIElement GetItemContainer(ItemsControl itemsControl, UIElement child);
    [ExtensionAttribute]
public static UIElement GetItemContainerAt(ItemsControl itemsControl, Point position);
    [ExtensionAttribute]
public static UIElement GetItemContainerAt(ItemsControl itemsControl, Point position, Orientation searchDirection);
    [ExtensionAttribute]
public static Type GetItemContainerType(ItemsControl itemsControl, Boolean& isItemContainer);
    [ExtensionAttribute]
public static Orientation GetItemsPanelOrientation(ItemsControl itemsControl);
    [ExtensionAttribute]
public static FlowDirection GetItemsPanelFlowDirection(ItemsControl itemsControl);
    [ExtensionAttribute]
public static void SetSelectedItem(ItemsControl itemsControl, object item);
    [ExtensionAttribute]
public static IEnumerable GetSelectedItems(ItemsControl itemsControl);
    [ExtensionAttribute]
public static bool GetItemSelected(ItemsControl itemsControl, object item);
    [ExtensionAttribute]
public static void SetItemSelected(ItemsControl itemsControl, object item, bool value);
    private static UIElement GetClosest(ItemsControl itemsControl, List`1<DependencyObject> items, Point position, Orientation searchDirection);
}
public class JetBrains.UI.Wpf.Effects.BrushAnimation : AnimationTimeline {
    public static DependencyProperty FromProperty;
    public static DependencyProperty ToProperty;
    public Type TargetPropertyType { get; }
    public Brush From { get; public set; }
    public Brush To { get; public set; }
    private static BrushAnimation();
    public virtual Type get_TargetPropertyType();
    public virtual object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, AnimationClock animationClock);
    public object GetCurrentValue(Brush defaultOriginValue, Brush defaultDestinationValue, AnimationClock animationClock);
    protected virtual Freezable CreateInstanceCore();
    public Brush get_From();
    public void set_From(Brush value);
    public Brush get_To();
    public void set_To(Brush value);
}
public class JetBrains.UI.Wpf.Effects.RecolorEffect : ShaderEffect {
    public static DependencyProperty InputProperty;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty SnappingProperty;
    public Brush Input { get; public set; }
    public Color Color { get; public set; }
    public double Snapping { get; public set; }
    private static RecolorEffect();
    public Brush get_Input();
    public void set_Input(Brush value);
    public Color get_Color();
    public void set_Color(Color value);
    public double get_Snapping();
    public void set_Snapping(double value);
}
public class JetBrains.UI.Wpf.FocusExtensions : object {
    public static DependencyProperty IsFocusedProperty;
    private static FocusExtensions();
    private static void IsFocusedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static bool GetIsFocused(DependencyObject obj);
    public static void SetIsFocused(DependencyObject obj, bool value);
}
public interface JetBrains.UI.Wpf.IPlatformResourceDictionary {
    [NotNullAttribute]
public ResourceDictionary PlatformResources { get; }
    public abstract virtual ResourceDictionary get_PlatformResources();
}
[ShellComponentAttribute]
public class JetBrains.UI.Wpf.PlatformResourceDictionary : object {
    private ResourceDictionary myPlatformResources;
    [NotNullAttribute]
public ResourceDictionary PlatformResources { get; }
    public sealed virtual ResourceDictionary get_PlatformResources();
}
public static class JetBrains.UI.Wpf.PlatformResourcesBehavior : object {
    public static DependencyProperty DefineProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    private static PlatformResourcesBehavior();
    public static void SetDefine(UIElement element, IPlatformResourceDictionary value);
    public static IPlatformResourceDictionary GetDefine(UIElement element);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject o, DependencyPropertyChangedEventArgs args);
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ShellComponentAttribute]
public class JetBrains.UI.Wpf.PublishDefaultControlStyles : object {
    public PublishDefaultControlStyles(Lifetime lifetime, IPlatformResourceDictionary platformResourceDictionary, ILogger logger);
}
[ShellComponentAttribute]
public class JetBrains.UI.Wpf.PublishPlatformResourceDictionaryToAvalonApplicationV3 : object {
    public PublishPlatformResourceDictionaryToAvalonApplicationV3(Lifetime lifetime, IPlatformResourceDictionary platformResourceDictionary);
}
[ShellComponentAttribute]
public class JetBrains.UI.Wpf.PublishThemeColorsToPlatformResources : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <ColorsUpdated>k__BackingField;
    public ISimpleSignal ColorsUpdated { get; private set; }
    public PublishThemeColorsToPlatformResources(Lifetime lifetime, IColorThemeManager themeManager, IPlatformResourceDictionary platformResourceDictionary);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ColorsUpdated();
    [CompilerGeneratedAttribute]
private void set_ColorsUpdated(ISimpleSignal value);
}
public class JetBrains.UI.Wpf.SystemThemeResourceDictionary : object {
    private static String[] ourKnownThemeNames;
    private static String[] ourKnownThemeAssemblies;
    private static Uri ourCurrentSystemThemeUri;
    public static DependencyProperty OverrideProperty;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<Assembly, Uri> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Uri, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    private static SystemThemeResourceDictionary();
    public static ResourceDictionary Load();
    private static void OnOverrideChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetOverride(DependencyObject element, bool value);
    public static bool GetOverride(DependencyObject element);
    [CompilerGeneratedAttribute]
private static string <Load>b__0(string x);
    [CompilerGeneratedAttribute]
private static Uri <Load>b__1(Assembly assembly);
    [CompilerGeneratedAttribute]
private static bool <Load>b__2(Uri x);
}
public class JetBrains.UI.Wpf.View : object {
    public static DependencyProperty ModelProperty;
    private static View();
    private static void PropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static void SetModel(UIElement element, object value);
    public static object GetModel(UIElement element);
}
public abstract class JetBrains.UI.Wpf.ViewBase`1 : Decorator {
    private TAutomation myViewModel;
    private void UpdateView();
    protected abstract virtual UIElement OnRenderView(TAutomation viewModel);
    protected virtual Size MeasureOverride(Size constraint);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object s, DependencyPropertyChangedEventArgs e);
}
internal abstract class JetBrains.UI.Wpf.WeakEventManagerBase`1 : WeakEventManager {
    public static TManager Instance { get; }
    public static TManager get_Instance();
    public void AddListener(object source, IWeakEventListener listener);
    public void RemoveListener(object source, IWeakEventListener listener);
}
public class JetBrains.UI.Wpf.WpfWin32Window : object {
    private WindowInteropHelper myInteropHelper;
    private IntPtr System.Windows.Forms.IWin32Window.Handle { get; }
    public WpfWin32Window(Window window);
    private sealed virtual override IntPtr System.Windows.Forms.IWin32Window.get_Handle();
}
[ZoneMarkerAttribute]
public class JetBrains.UI.ZoneMarker : object {
}
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
