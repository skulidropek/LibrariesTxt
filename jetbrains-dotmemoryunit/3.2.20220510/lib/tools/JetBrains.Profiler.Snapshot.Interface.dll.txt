public interface JetBrains.Profiler.Snapshot.Interface.Converters.IFuidToMetadataIdConverter {
    public abstract virtual MetadataId Convert(FunctionId fuid);
}
public interface JetBrains.Profiler.Snapshot.Interface.Converters.IFuidToMetadataIdSection {
}
public interface JetBrains.Profiler.Snapshot.Interface.Converters.IFunctionUniqueIdMetadataCollection {
}
public interface JetBrains.Profiler.Snapshot.Interface.Converters.IMetadataIdToFuidConverter {
    public abstract virtual FunctionId Convert(MetadataId metadataId);
}
public class JetBrains.Profiler.Snapshot.Interface.IndexCorruptedException : Exception {
    public IndexCorruptedException(string message);
}
public class JetBrains.Profiler.Snapshot.Interface.Section.Class.ClassSectionNode : object {
    public MetadataId ClassId;
    [NotNullAttribute]
public SectionOffset`1[] GenericArguments;
    public SectionOffset`1<IClassSection> Parent;
    public UInt32 Rank;
    public bool IsArray { get; }
    public ClassSectionNode(MetadataId classId, UInt32 rank, SectionOffset`1<IClassSection> parent, SectionOffset`1[] genericArguments);
    public bool get_IsArray();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Profiler.Snapshot.Interface.Section.Class.IClassSection {
    public ClassSectionNode Item { get; }
    public abstract virtual ClassSectionNode get_Item(SectionOffset`1<IClassSection> offset);
}
public interface JetBrains.Profiler.Snapshot.Interface.Section.ClassIndex.IClassIndexSection {
    public IEnumerable`1<SectionOffset`1<IClassSection>> Entries { get; }
    public UInt32 Count { get; }
    public abstract virtual IEnumerable`1<SectionOffset`1<IClassSection>> get_Entries();
    public abstract virtual UInt32 get_Count();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Snapshot.Interface.Section.Environment.EnvironmentSectionUtil : object {
    [CanBeNullAttribute]
[ExtensionAttribute]
public static ProfileConfiguration GetConfiguration(IEnvironmentSection section, IHostXmlResurrector hostXmlResurrector);
    [ExtensionAttribute]
public static Guid SnapshotGuid(IEnvironmentSection section);
}
public interface JetBrains.Profiler.Snapshot.Interface.Section.Environment.IEnvironmentSection {
    [NotNullAttribute]
public string ConfigurationXml { get; }
    public DateTime BuildDateTime { get; }
    [NotNullAttribute]
public Version BuildVersion { get; }
    [NotNullAttribute]
public string Executable { get; }
    [NotNullAttribute]
public string CommandLine { get; }
    public DateTime DateTime { get; }
    [NotNullAttribute]
public SnapshotIdentity SnapshotIdentity { get; }
    public ProcessorArchitecture NativeProcessorArchitecture { get; }
    [NotNullAttribute]
public string RuntimeName { get; }
    public UInt32 NumberOfProcessors { get; }
    [NotNullAttribute]
public string OsName { get; }
    public byte PointerSize { get; }
    public ProcessorArchitecture ProcessorArchitecture { get; }
    [NotNullAttribute]
public string UserName { get; }
    public abstract virtual string get_ConfigurationXml();
    public abstract virtual DateTime get_BuildDateTime();
    public abstract virtual Version get_BuildVersion();
    public abstract virtual string get_Executable();
    public abstract virtual string get_CommandLine();
    public abstract virtual DateTime get_DateTime();
    public abstract virtual SnapshotIdentity get_SnapshotIdentity();
    public abstract virtual ProcessorArchitecture get_NativeProcessorArchitecture();
    public abstract virtual string get_RuntimeName();
    public abstract virtual UInt32 get_NumberOfProcessors();
    public abstract virtual string get_OsName();
    public abstract virtual byte get_PointerSize();
    public abstract virtual ProcessorArchitecture get_ProcessorArchitecture();
    public abstract virtual string get_UserName();
}
public interface JetBrains.Profiler.Snapshot.Interface.Section.IExternalDataSection {
    public long Size { get; }
    public string GetDataAsString { get; }
    public abstract virtual long get_Size();
    public abstract virtual string get_GetDataAsString();
}
public interface JetBrains.Profiler.Snapshot.Interface.Section.ISection {
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Snapshot.Interface.Section.KnownFunctionId : object {
    public static FunctionId NativeCallId;
    public static FunctionId ThreadStoppedByUnknownReasonCallId;
    public static FunctionId GcCallId;
    public static FunctionId AppDomainShutdownCallId;
    public static FunctionId CodePitchingCallId;
    public static FunctionId UnmanagedStackFrameCallId;
    public static FunctionId UnsafeStackFrameId;
    public static FunctionId Continuation;
    public static FunctionId Awaits;
    public static FunctionId RootId;
    public static FunctionId Invalid;
    private static KnownFunctionId();
    [ExtensionAttribute]
public static bool IsProcessable(FunctionId functionId);
    [ExtensionAttribute]
public static bool IsSpecial(FunctionId functionId);
    [ExtensionAttribute]
public static bool IsSynthetic(FunctionId functionId);
    [ExtensionAttribute]
public static bool IsFromEtw(FunctionId functionId);
}
public class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.ClassResult : object {
    public static char GenericitySymbol;
    [NotNullAttribute]
public string ClassName;
    [NotNullAttribute]
public string NamespaceName;
    [NotNullAttribute]
public string GenericParameters;
    [NotNullAttribute]
public string FullName { get; }
    public string get_FullName();
}
public class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.CoreMetadataInfoProvider : object {
    private IMetadataSectionAssemblyProvider myProfilerMetadata;
    [CanBeNullAttribute]
private IModulePathSection myModulePathSection;
    private SignaturePresenter myPresenter;
    public CoreMetadataInfoProvider(IMetadataSectionAssemblyProvider profilerMetadata, IModulePathSection modulePathSection, SignaturePresenter presenter);
    public CoreFunctionInfo GetFunctionInfo(MetadataId metadataId);
    public string GetMethodParameters(MetadataId metadataId);
    public CoreModuleInfo GetModuleInfo(SectionIndex`1<IMetadataSection> moduleIndex);
    private static CoreTypeInfo GetCoreTypeInfo(IMetadataMethod method);
}
public class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.DataStructures.CoreFunctionInfo : object {
    [CompilerGeneratedAttribute]
private CoreTypeInfo <ContainingType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AsyncStateMachineTypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private CoreModuleInfo <ContainingModule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationContainingTypeFullName>k__BackingField;
    public CoreTypeInfo ContainingType { get; private set; }
    public string ShortName { get; private set; }
    [CanBeNullAttribute]
public string AsyncStateMachineTypeFullName { get; private set; }
    public CoreModuleInfo ContainingModule { get; private set; }
    [CanBeNullAttribute]
public string ContinuationContainingTypeFullName { get; private set; }
    public CoreFunctionInfo(CoreModuleInfo moduleInfo, CoreTypeInfo containingType, string shortName, string asyncStateMachineTypeFullName, string continuationContainingTypeFullName);
    [CompilerGeneratedAttribute]
public CoreTypeInfo get_ContainingType();
    [CompilerGeneratedAttribute]
private void set_ContainingType(CoreTypeInfo value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
private void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_AsyncStateMachineTypeFullName();
    [CompilerGeneratedAttribute]
private void set_AsyncStateMachineTypeFullName(string value);
    [CompilerGeneratedAttribute]
public CoreModuleInfo get_ContainingModule();
    [CompilerGeneratedAttribute]
private void set_ContainingModule(CoreModuleInfo value);
    [CompilerGeneratedAttribute]
public string get_ContinuationContainingTypeFullName();
    [CompilerGeneratedAttribute]
private void set_ContinuationContainingTypeFullName(string value);
}
public class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.DataStructures.CoreModuleInfo : ValueType {
    [CompilerGeneratedAttribute]
private AssemblyNameInfo <AssemblyNameInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Location>k__BackingField;
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyNameInfo { get; private set; }
    public FileSystemPath Location { get; private set; }
    public CoreModuleInfo(AssemblyNameInfo assemblyNameInfo, FileSystemPath location);
    [CompilerGeneratedAttribute]
public AssemblyNameInfo get_AssemblyNameInfo();
    [CompilerGeneratedAttribute]
private void set_AssemblyNameInfo(AssemblyNameInfo value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(FileSystemPath value);
}
public class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.DataStructures.CoreTypeInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    public string Namespace { get; private set; }
    public string Name { get; private set; }
    public string FullyQualifiedName { get; private set; }
    public CoreTypeInfo(string ns, string name, string fullyQualifiedName);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
private void set_FullyQualifiedName(string value);
}
public class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.FunctionResult : object {
    public MetadataToken ClassToken;
    [NotNullAttribute]
public string FunctionName;
    [NotNullAttribute]
public string GenericParameters;
    public string Parameters;
    public string ReturnValue;
    public bool IsSpecialName;
    public bool IsUnmanaged;
    public bool IsPublic;
    public bool IsProtected;
    public bool IsInternal;
    public bool IsVirtual;
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.Helpers.MetadataSectionHelpers : object {
    [CompilerGeneratedAttribute]
private static Func`3<MetadataId, IMetadataSectionAssemblyProvider, IMetadataMethod> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`3<MetadataId, IMetadataSectionAssemblyProvider, Pair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegatec;
    [ExtensionAttribute]
public static CoreModuleInfo GetCoreModuleInfo(IMetadataSectionAssemblyProvider profilerMetadata, IModulePathSection modulePathSection, SectionIndex`1<IMetadataSection> sectionIndex);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetAssemblyFirstLocation(IModulePathSection modulePathSection, SectionIndex`1<IMetadataSection> sectionIndex);
    [NotNullAttribute]
[ExtensionAttribute]
public static IMetadataMethod GetMethod(IMetadataSectionAssemblyProvider provider, MetadataId metadataId);
    [ExtensionAttribute]
[ObsoleteAttribute("This method is very low. Use overload with IMetadataSectionAssemblyProvider for package processing")]
[NotNullAttribute]
public static IMetadataMethod GetMethod(IMetadataSection section, MetadataId metadataId);
    private static IMetadataMethod GetMethodCore(MetadataToken token, IMetadataAssembly assembly);
    [ExtensionAttribute]
[NotNullAttribute]
public static IMetadataField GetField(IMetadataSectionAssemblyProvider provider, MetadataId metadataId);
    [ExtensionAttribute]
public static IMetadataProperty GetProperty(IMetadataSectionAssemblyProvider provider, MetadataId metadataId);
    [ExtensionAttribute]
public static IMetadataEvent GetEvent(IMetadataSectionAssemblyProvider provider, MetadataId metadataId);
    [ExtensionAttribute]
[NotNullAttribute]
public static FunctionResult GetFunctionItems(IMetadataSectionAssemblyProvider provider, MetadataId fId);
    [ExtensionAttribute]
[NotNullAttribute]
public static FunctionResult GetFunctionItemsLight(IMetadataSectionAssemblyProvider provider, MetadataId fId);
    private static FunctionResult GetFunctionItemsCore(MetadataToken token, IMetadataAssembly assembly, bool light);
    [ExtensionAttribute]
public static ClassResult GetClassItems(IMetadataSectionAssemblyProvider provider, MetadataId fId);
    private static ClassResult GetClassItemsCore(MetadataToken token, IMetadataAssembly assembly);
    [ExtensionAttribute]
[ObsoleteAttribute("This method is very low. Use overload with IMetadataSectionAssemblyProvider for package processing")]
public static void GetFunctionParams(IMetadataSection section, MetadataId fId, String& parameters, String& returnType);
    [ExtensionAttribute]
public static void GetFunctionParams(IMetadataSectionAssemblyProvider provider, MetadataId fId, String& parameters, String& returnType);
    private static Pair`2<string, string> GetFunctionParamsCore(MetadataToken token, IMetadataAssembly assembly);
    private static string GetShortTypeName(IMetadataType type);
    [ExtensionAttribute]
public static IMetadataMethod GetMethodVerbose(IMetadataSectionAssemblyProvider provider, MetadataId metadataId);
    [ExtensionAttribute]
public static IMetadataMethod GetMethodVerbose(IMetadataAssembly assembly, MetadataToken token);
    [ExtensionAttribute]
public static MethodSpecification GetMethodSpecificationVerbose(IMetadataAssembly assembly, MetadataToken token);
    [ExtensionAttribute]
public static IMetadataAssembly GetAssemblyVerbose(IMetadataSectionAssemblyProvider provider, SectionIndex`1<IMetadataSection> metadataIndex);
    [ExtensionAttribute]
public static IEnumerable`1<IMetadataAssembly> GetReferencedAssemblies(IMetadataAssembly assembly);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static string ContinuationContainingTypeFullName(IMetadataMethod method);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string AsyncStateMachineTypeFullName(IMetadataMethod method);
    [CompilerGeneratedAttribute]
private static IMetadataMethod <GetMethod>b__0(MetadataId id, IMetadataSectionAssemblyProvider p);
    [CompilerGeneratedAttribute]
private static Pair`2<string, string> <GetFunctionParams>b__b(MetadataId t, IMetadataSectionAssemblyProvider p);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Profiler.Snapshot.Interface.Section.Metadata.IMetadataSection {
    public long Size { get; }
    public IAssemblyResolver AssemblyResolver { get; }
    public IFuidToMetadataIdConverter FuidConverter { get; }
    [NotNullAttribute]
public IModuleInfo Item { get; }
    public abstract virtual long get_Size();
    public abstract virtual IAssemblyResolver get_AssemblyResolver();
    public abstract virtual IFuidToMetadataIdConverter get_FuidConverter();
    public abstract virtual IModuleInfo get_Item(SectionIndex`1<IMetadataSection> index);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IModuleInfo>> GetAssembliesData();
    public abstract virtual TRes ExecuteWithMetadataAssemblyProvider(Func`3<TParam, IMetadataSectionAssemblyProvider, TRes> action, TParam param);
    [NotNullAttribute]
public abstract virtual IMetadataSectionAssemblyProvider GetMetadataAssemblyProvider(Lifetime lifetime, bool loadReferencedAssemblies, bool guardMultiThreading);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Profiler.Snapshot.Interface.Section.Metadata.IMetadataSectionAssemblyProvider {
    [NotNullAttribute]
public IMetadataAssembly Item { get; }
    public IFuidToMetadataIdConverter FuidConverter { get; }
    public abstract virtual IMetadataAssembly get_Item(SectionIndex`1<IMetadataSection> index);
    [CanBeNullAttribute]
public abstract virtual IMetadataAssembly TryGetAssembly(SectionIndex`1<IMetadataSection> index);
    public abstract virtual IFuidToMetadataIdConverter get_FuidConverter();
}
public interface JetBrains.Profiler.Snapshot.Interface.Section.Metadata.IModuleInfo {
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    [NotNullAttribute]
public ModuleDebugInfo DebugInfos { get; }
    public string ModuleName { get; }
    public Guid Mvid { get; }
    public abstract virtual AssemblyNameInfo get_AssemblyName();
    public abstract virtual ModuleDebugInfo get_DebugInfos();
    public abstract virtual string get_ModuleName();
    public abstract virtual Guid get_Mvid();
}
public static class JetBrains.Profiler.Snapshot.Interface.Section.Metadata.StandardInterfaceNames : object {
    public static string AsyncStateMachine;
}
public class JetBrains.Profiler.Snapshot.Interface.Section.MetadataId : ValueType {
    public SectionIndex`1<IMetadataSection> MetadataIndex;
    public MetadataToken Token;
    public bool IsSynthetic { get; }
    private MetadataId(SectionIndex`1<IMetadataSection> metadataIndex, MetadataToken token);
    public bool get_IsSynthetic();
    public sealed virtual bool Equals(MetadataId other);
    public static MetadataId CreateSynthetic(MetadataToken token);
    public static MetadataId Create(SectionIndex`1<IMetadataSection> metadataIndex, MetadataToken token);
    public static MetadataId Create(string str);
    public static bool op_Equality(MetadataId left, MetadataId right);
    public static bool op_Inequality(MetadataId left, MetadataId right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Profiler.Snapshot.Interface.Section.ModulePath.IModulePathSection {
    public int ModulesNumber { get; }
    public IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, String[]>> All { get; }
    public IEnumerable`1<string> ModulesEnumerablePlain { get; }
    [NotNullAttribute]
public String[] Item { get; }
    public abstract virtual int get_ModulesNumber();
    public abstract virtual IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, String[]>> get_All();
    public abstract virtual IEnumerable`1<string> get_ModulesEnumerablePlain();
    public abstract virtual String[] get_Item(SectionIndex`1<IMetadataSection> metaDataIndex);
    public abstract virtual bool TryGetValue(SectionIndex`1<IMetadataSection> metaDataIndex, String[]& pathes);
}
public interface JetBrains.Profiler.Snapshot.Interface.Section.ModuleStat.IModuleStatSection {
    public IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IEnumerable`1<ModuleLoadInfo>>> Entries { get; }
    public abstract virtual IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IEnumerable`1<ModuleLoadInfo>>> get_Entries();
    public abstract virtual bool TryGetEntryByMetadataIndex(SectionIndex`1<IMetadataSection> metadataIndex, IEnumerable`1& entry);
}
public class JetBrains.Profiler.Snapshot.Interface.Section.ModuleStat.ModuleLoadInfo : object {
    public Guid Mvid;
    public ModuleStatFlags Flags;
    [CanBeNullAttribute]
public string ModulePath;
    [CanBeNullAttribute]
public string ModuleName;
    [CanBeNullAttribute]
public string AssemblyName;
    [CanBeNullAttribute]
public Version AssemblyVersion;
    [CanBeNullAttribute]
public string TargetFramework;
    public ProcessorArchitecture ProcessorArchitecture;
    public ModuleLoadInfo(Guid mvid, ModuleStatFlags flags, string assemblyName, Version assemblyVersion, string modulePath, string moduleName, string targetFramework, ProcessorArchitecture processorArchitecture);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Snapshot.Interface.Section.ModuleStat.ModuleStatFlags : Enum {
    public byte value__;
    public static ModuleStatFlags IsMatch;
    public static ModuleStatFlags HasPdb;
}
public class JetBrains.Profiler.Snapshot.Interface.Section.SectionIndex`1 : ValueType {
    public static SectionIndex`1<T> Synthetic;
    public static SectionIndex`1<T> Invalid;
    private UInt32 myIndex;
    public UInt32 Value { get; }
    public SectionIndex`1(UInt32 index);
    private static SectionIndex`1();
    public UInt32 get_Value();
    public sealed virtual bool Equals(SectionIndex`1<T> obj);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SectionIndex`1<T> left, SectionIndex`1<T> right);
    public static bool op_Inequality(SectionIndex`1<T> left, SectionIndex`1<T> right);
}
[DataContractAttribute]
public class JetBrains.Profiler.Snapshot.Interface.Section.SectionOffset`1 : ValueType {
    public static SectionOffset`1<T> Invalid;
    [DataMemberAttribute]
private long myOffset;
    public bool IsValid { get; }
    public long Value { get; }
    public SectionOffset`1(long offset);
    public SectionOffset`1(string value);
    private static SectionOffset`1();
    public bool get_IsValid();
    public long get_Value();
    public sealed virtual int CompareTo(SectionOffset`1<T> other);
    public sealed virtual bool Equals(SectionOffset`1<T> obj);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SectionOffset`1<T> left, SectionOffset`1<T> right);
    public static bool op_Inequality(SectionOffset`1<T> left, SectionOffset`1<T> right);
    public static bool op_LessThan(SectionOffset`1<T> left, SectionOffset`1<T> right);
    public static bool op_GreaterThan(SectionOffset`1<T> left, SectionOffset`1<T> right);
    public static bool op_LessThanOrEqual(SectionOffset`1<T> left, SectionOffset`1<T> right);
    public static bool op_GreaterThanOrEqual(SectionOffset`1<T> left, SectionOffset`1<T> right);
    public static SectionOffset`1<T> op_Addition(SectionOffset`1<T> offset, long term);
    public static SectionOffset`1<T> op_Subtraction(SectionOffset`1<T> offset, long term);
    public void Seek(Stream stream);
    public bool Equals(Stream stream);
    public bool Less(Stream stream);
}
public abstract class JetBrains.Profiler.Snapshot.Interface.Storage.FileNameBasedStorageDescriptor : object {
    [NotNullAttribute]
public FileSystemPath IndexFile;
    public string PresentableName { get; }
    public string ShortPresentableName { get; }
    protected FileNameBasedStorageDescriptor(FileSystemPath indexFile);
    public sealed virtual string get_PresentableName();
    public sealed virtual string get_ShortPresentableName();
    public abstract virtual bool Equals(IStorageDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Profiler.Snapshot.Interface.Storage.FileSystemStorageDescriptor : FileNameBasedStorageDescriptor {
    public FileSystemStorageDescriptor(FileSystemPath indexFile);
    public FileSystemStorageDescriptor(string indexFile);
    public virtual bool Equals(IStorageDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.Profiler.Snapshot.Interface.Storage.IStorageDescriptor {
    public string PresentableName { get; }
    public string ShortPresentableName { get; }
    public abstract virtual string get_PresentableName();
    public abstract virtual string get_ShortPresentableName();
}
public class JetBrains.Profiler.Snapshot.Interface.Storage.ZipStreamStorageDescriptor : FileNameBasedStorageDescriptor {
    public ZipStreamStorageDescriptor(FileSystemPath indexFile);
    public ZipStreamStorageDescriptor(string indexFile);
    public virtual bool Equals(IStorageDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Snapshot.Interface.VersionMismatchException : Exception {
    public VersionMismatchException(string message);
    protected VersionMismatchException(SerializationInfo info, StreamingContext context);
}
