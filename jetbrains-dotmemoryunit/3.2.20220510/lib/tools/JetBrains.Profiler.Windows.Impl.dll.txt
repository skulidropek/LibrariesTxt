[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.BuildScript.ProfilerNativeFiles : object {
    [ExtensionAttribute]
[NotNullAttribute]
private static string GetFolderName(TargetType targetType);
    [NotNullAttribute]
private static RelativePath GetDir(TargetType targetType, ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetCoreTransparent(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetCore(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetCoreApi(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetAttachHelper(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetWinRTHelper(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetWinRTFakeDebugger(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetPdbServer(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetEtwManifest(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static RelativePath GetBoostTests(ProcessorArchitecture architecture, bool debug);
}
internal static class JetBrains.Profiler.Windows.BuildScript.ProfilerNativeNames : object {
    private static string Prefix;
    public static string Core;
    public static string CoreApi;
    public static string CoreTransparent;
    public static string EtwManifest;
    public static string AttachHelper;
    public static string WinRTHelper;
    public static string WinRTFakeDebugger;
    public static string PdbServer;
    public static string BoostTests;
    private static ProfilerNativeNames();
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("100000")]
internal class JetBrains.Profiler.Windows.Impl.Argument.AttachArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public AttachArgumentFactory(IHostManager hostManager);
    private static AttachArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ArgumentFactoryAttribute("1500")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Argument.CoreClrArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public CoreClrArgumentFactory(IHostManager hostManager);
    private static CoreClrArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("3000")]
internal class JetBrains.Profiler.Windows.Impl.Argument.DevelopmentServerArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public DevelopmentServerArgumentFactory(IHostManager hostManager);
    private static DevelopmentServerArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("90000")]
internal class JetBrains.Profiler.Windows.Impl.Argument.EverythingArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public EverythingArgumentFactory(IHostManager hostManager);
    private static EverythingArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("5000")]
internal class JetBrains.Profiler.Windows.Impl.Argument.IISArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public IISArgumentFactory(IHostManager hostManager);
    private static IISArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ArgumentFactoryAttribute("5500")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Argument.IISExpressArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public IISExpressArgumentFactory(IHostManager hostManager);
    private static IISExpressArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("20000")]
internal class JetBrains.Profiler.Windows.Impl.Argument.MetroArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public MetroArgumentFactory(IHostManager hostManager);
    private static MetroArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ArgumentFactoryAttribute("20000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Argument.SilverlightArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public SilverlightArgumentFactory(IHostManager hostManager);
    private static SilverlightArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ArgumentFactoryAttribute("1000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Argument.StandaloneArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public StandaloneArgumentFactory(IHostManager hostManager);
    private static StandaloneArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ZoneMarkerAttribute]
[ArgumentFactoryAttribute("6100")]
internal class JetBrains.Profiler.Windows.Impl.Argument.WcfHostArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public WcfHostArgumentFactory(IHostManager hostManager);
    private static WcfHostArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
[ArgumentFactoryAttribute("6000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Argument.WindowsServiceArgumentFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public ProfileMode ProfileMode { get; }
    public IconId DisplayImage { get; }
    public WindowsServiceArgumentFactory(IHostManager hostManager);
    private static WindowsServiceArgumentFactory();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ProfileMode get_ProfileMode();
    public sealed virtual IconId get_DisplayImage();
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory);
    public sealed virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    public sealed virtual IArgument CreateEmpty();
    public sealed virtual TitleProperty CreateDefaultTitleValue(IArgument obj);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument argument);
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IArgument obj);
}
internal static class JetBrains.Profiler.Windows.Impl.ArgumentsUtil : object {
    [NotNullAttribute]
public static String[] BuildPdbServer(string pipeName, string eventName, string logFile, Nullable`1<PdbServerLogMask> pdbServerLogMask, string symSrvPath);
    [NotNullAttribute]
public static String[] BuildDevelopmentServer(string physicalPath, string virtualPath, Nullable`1<ushort> port);
    [NotNullAttribute]
public static String[] BuildIISExpressArgs_Config(string configFilePath, string site, Nullable`1<UInt32> siteId, Nullable`1<bool> sysTray);
    [NotNullAttribute]
public static String[] BuildIISExpressArgs_ApplicationPath(string applicationPath, Nullable`1<ushort> port, Version2 runtimeVersion, Nullable`1<bool> sysTray);
    [NotNullAttribute]
public static String[] BuildWcfHost(string libraryPath, string configPath, string clientPath, string clientArgs);
}
internal abstract class JetBrains.Profiler.Windows.Impl.BaseCoreFilesManager : object {
    private static ILogger ourLogger;
    [NotNullAttribute]
protected EffectiveCoreDirs CoreDirs;
    [NotNullAttribute]
protected IDownloader Downloader;
    [NotNullAttribute]
protected SysTools SysTools;
    protected BaseCoreFilesManager(SysTools sysTools, IDownloader downloader, EffectiveCoreDirs coreDirs);
    private static BaseCoreFilesManager();
    public abstract virtual SafeFileHandle CreateTemporaryFile();
    public abstract virtual SafeFileHandle CreateDiagnosticFile();
    public abstract virtual KeyValuePair`2<Guid, SafeFileHandle> CreateSnapshotFile();
    public sealed virtual void DeleteSnapshotFile(Guid id);
    public sealed virtual void ProcessSnapshot(SnapshotIdentity snapshotIdentity, Guid indexId, Guid[] dataIds);
    public sealed virtual void ProcessCoreLog(CoreIdentity coreIdentity, string remoteLog);
    [CompilerGeneratedAttribute]
private string <ProcessSnapshot>b__3(Guid x);
}
internal class JetBrains.Profiler.Windows.Impl.Bridge : BaseBridge {
    private static ILogger ourLogger;
    private IPEndPoint myIPEndPoint;
    [CanBeNullAttribute]
private Action`2<IListenerProxy, Lifetime> myListenerInitializer;
    private IServiceAgent`1<SysTools> myProfilingAgent;
    private List`1<Thread> myThreads;
    private string myEndPoint;
    [NotNullAttribute]
public string EndPoint { get; }
    public Bridge(BaseBridgeParam param, IPEndPoint ipEndPoint, Action`2<IListenerProxy, Lifetime> listenerInitializer, IServiceAgent`1<SysTools> profilingAgent);
    private static Bridge();
    public string get_EndPoint();
    protected virtual void DoWork(Action setThreadStarted, Func`1<bool> isActive, Func`1<bool> hasStopRequest);
    protected virtual void DoJoinThread();
    private void DoAccept(Guid streamId, Func`1<bool> hasStopRequest);
    [CompilerGeneratedAttribute]
private void <DoAccept>b__12();
}
internal class JetBrains.Profiler.Windows.Impl.DeployResult : object {
    [NotNullAttribute]
public EnvironmentProperty[] EnvironmentProperties;
    [NotNullAttribute]
public Dictionary`2<InstructionSet, string> ProfilerDlls;
    public DeployResult(EnvironmentProperty[] environmentProperties, Dictionary`2<InstructionSet, string> profilerDlls);
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.DeployUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Tuple`2[] Deploy(Tuple`3[] descriptions, IServiceAgent`1<SysTools> agent, IProgressIndicator progressIndicator);
    [ExtensionAttribute]
[NotNullAttribute]
public static TPath WithMarker(IEnumerable`1<Tuple`2<TPath, TMarker>> descriptions, TMarker marker);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath WithMarker(IEnumerable`1<Tuple`3<FileSystemPath, RelativePath, TMarker>> descriptions, TMarker marker);
    [CompilerGeneratedAttribute]
private static TPath <WithMarker>b__5(Tuple`2<TPath, TMarker> x);
    [CompilerGeneratedAttribute]
private static FileSystemPath <WithMarker>b__9(Tuple`3<FileSystemPath, RelativePath, TMarker> x);
}
internal class JetBrains.Profiler.Windows.Impl.EffectiveCoreDirs : object {
    [NotNullAttribute]
public FileSystemPath DiagnosticsDir;
    [NotNullAttribute]
public FileSystemPath TemporaryDir;
    [NotNullAttribute]
public FileSystemPath SnapshotsDir;
    public EffectiveCoreDirs(FileSystemPath defaultTemporaryDir, CoreDirs coreDirs);
    public virtual string ToString();
}
internal class JetBrains.Profiler.Windows.Impl.Features.ArgumentFactoryFeatures : object {
    public static ArgumentFactoryFeatures Instance;
    private static ArgumentFactoryFeatures();
}
internal class JetBrains.Profiler.Windows.Impl.Features.ArgumentFeatures : object {
    private IServiceAgent`1<SysTools> myAgent;
    private IHostParametersFactory myHostParametersFactory;
    private IAttachArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IAttachArgumentFactoryFeatures>.FactoryFeatures { get; }
    private string JetBrains.Profiler.Windows.Argument.Features.IAttachArgumentFeatures.InfoMessage { get; }
    private IDevelopmentServerArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IDevelopmentServerArgumentFactoryFeatures>.FactoryFeatures { get; }
    private IEverythingArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IEverythingArgumentFactoryFeatures>.FactoryFeatures { get; }
    private IIISArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IIISArgumentFactoryFeatures>.FactoryFeatures { get; }
    private IIISExpressArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IIISExpressArgumentFactoryFeatures>.FactoryFeatures { get; }
    public IMetroArgumentFactoryFeatures FactoryFeatures { get; }
    private ISilverlightArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.ISilverlightArgumentFactoryFeatures>.FactoryFeatures { get; }
    private IStandaloneArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IStandaloneArgumentFactoryFeatures>.FactoryFeatures { get; }
    private ICoreClrArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.ICoreClrArgumentFactoryFeatures>.FactoryFeatures { get; }
    private IWcfHostArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IWcfHostArgumentFactoryFeatures>.FactoryFeatures { get; }
    private IWindowsServiceArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IWindowsServiceArgumentFactoryFeatures>.FactoryFeatures { get; }
    public ArgumentFeatures(IHostParametersFactory hostParametersFactory, IServiceAgent`1<SysTools> agent);
    private sealed virtual override IAttachArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IAttachArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override string JetBrains.Profiler.Windows.Argument.Features.IAttachArgumentFeatures.get_InfoMessage();
    private sealed virtual override IDevelopmentServerArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IDevelopmentServerArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override IEverythingArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IEverythingArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Argument.Features.IEverythingArgumentFeatures.IsSupported(HostCompatibilityOptions options);
    private sealed virtual override IIISArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IIISArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Argument.Features.IIISArgumentFeatures.IsSupported(HostCompatibilityOptions options);
    private sealed virtual override IIISExpressArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IIISExpressArgumentFactoryFeatures>.get_FactoryFeatures();
    public sealed virtual IMetroArgumentFactoryFeatures get_FactoryFeatures();
    public sealed virtual MessageResult IsSupported();
    private sealed virtual override ISilverlightArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.ISilverlightArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Argument.Features.ISilverlightArgumentFeatures.IsSupported();
    private sealed virtual override IStandaloneArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IStandaloneArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override ICoreClrArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.ICoreClrArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Argument.Features.ICoreClrArgumentFeatures.IsSupported(HostCompatibilityOptions options);
    private sealed virtual override IWcfHostArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IWcfHostArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override IWindowsServiceArgumentFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Argument.FactoryFeatures.IWindowsServiceArgumentFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Argument.Features.IWindowsServiceArgumentFeatures.IsSupported(HostCompatibilityOptions options);
}
internal class JetBrains.Profiler.Windows.Impl.Features.AttachToProcessInfoFactoryFeatures : object {
    public static AttachToProcessInfoFactoryFeatures Instance;
    private static MessageResult ourMessageResultNoPrecisionMode;
    private static MessageResult ourMessageResultNoEnableJitInlining;
    private static MessageResult ourMessageResultNoMeasureTypeTracing;
    private static MessageResult ourMessageResultNoMeasureTypeTracingInject;
    [CompilerGeneratedAttribute]
private static Func`2<CoverageInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<MemoryInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<TimelineInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<CoverageInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<MemoryInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<TimelineInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegatef;
    private bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.IsCollectAllocationsSupported { get; }
    private static AttachToProcessInfoFactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported(IInfo info);
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported(IInfo info);
    private sealed virtual override bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.get_IsCollectAllocationsSupported();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsMeasureTypeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsPrecisionModeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsEnableJitInliningSupported(MeasureType measureType);
    [CanBeNullAttribute]
private static MessageResult Do(IInfo info, Func`2<TInfo, MessageResult> func);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__0(CoverageInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__1(MemoryInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__2(PerformanceInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__3(TimelineInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__8(CoverageInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__9(MemoryInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__a(PerformanceInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__b(TimelineInfo x);
}
internal class JetBrains.Profiler.Windows.Impl.Features.AttachToProcessInfoFeatures : object {
    private static MessageResult ourMessageResultNone;
    private static MessageResult ourMessageResultNoThreadCycleTime;
    private static MessageResult ourMessageResultNoRdtsc;
    private static MessageResult ourMessageResultNoMeasureTypeTracing;
    private static MessageResult ourMessageResultNoMeasureTypeTracingInject;
    private static MessageResult ourMessageResultNoEtwHost;
    private IHostParametersFactory myHostParametersFactory;
    private bool myIsEtwHostSupported;
    private bool myIsThreadCycleTimeSupported;
    private bool myIsRdtscSupported;
    private IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.FactoryFeatures { get; }
    private MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.Default { get; }
    private IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.FactoryFeatures { get; }
    private PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.Default { get; }
    private ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.FactoryFeatures { get; }
    private TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.Default { get; }
    public MessageResult IsActive { get; }
    public AttachToProcessInfoFeatures(IHostParametersFactory hostParametersFactory, bool isRdtscSupported, bool isThreadCycleTimeSupported, bool isEtwHostSupported);
    private static AttachToProcessInfoFeatures();
    private sealed virtual override IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_Default();
    private sealed virtual override IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_Default();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.Features.IPerformanceInfoFeatures.IsMeterKindSupported(MeasureType measureType, MeterKind meterKind);
    private sealed virtual override ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_Default();
    public sealed virtual MessageResult get_IsActive();
}
internal class JetBrains.Profiler.Windows.Impl.Features.StartProcessInfoFactoryFeatures : object {
    public static StartProcessInfoFactoryFeatures Instance;
    private static MessageResult ourMessageResultNoPrecisionMode;
    private static MessageResult ourMessageResultNoEnableJitInlining;
    [CompilerGeneratedAttribute]
private static Func`2<CoverageInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<MemoryInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<TimelineInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<CoverageInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<MemoryInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<PerformanceInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<TimelineInfo, MessageResult> CS$<>9__CachedAnonymousMethodDelegatef;
    private bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.IsCollectAllocationsSupported { get; }
    private static StartProcessInfoFactoryFeatures();
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported(IInfo info);
    private sealed virtual override MessageResult JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported(IInfo info);
    private sealed virtual override bool JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures.get_IsCollectAllocationsSupported();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsMeasureTypeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsPrecisionModeSupported(MeasureType measureType);
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures.IsEnableJitInliningSupported(MeasureType measureType);
    [CanBeNullAttribute]
private static MessageResult Do(IInfo info, Func`2<TInfo, MessageResult> func);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__0(CoverageInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__1(MemoryInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__2(PerformanceInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsProfileSupported>b__3(TimelineInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__8(CoverageInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__9(MemoryInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__a(PerformanceInfo x);
    [CompilerGeneratedAttribute]
private static MessageResult <JetBrains.Profiler.Features.IInfoFactoryFeatures.IsDetachSupported>b__b(TimelineInfo x);
}
internal class JetBrains.Profiler.Windows.Impl.Features.StartProcessInfoFeatures : object {
    private static MessageResult ourMessageResultNone;
    private static MessageResult ourMessageResultNoThreadCycleTime;
    private static MessageResult ourMessageResultNoRdtsc;
    private static MessageResult ourMessageResultNoThreadTimeForTracing;
    private static MessageResult ourMessageResultNoThreadTimeForTracingInject;
    private static MessageResult ourMessageResultNoEtwHost;
    private IHostParametersFactory myHostParametersFactory;
    private bool myIsEtwHostSupported;
    private bool myIsThreadCycleTimeSupported;
    private bool myIsRdtscSupported;
    private ICoverageInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.FactoryFeatures { get; }
    private CoverageInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.CoverageInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.Default { get; }
    private IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.FactoryFeatures { get; }
    private MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.Default { get; }
    private IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.FactoryFeatures { get; }
    private PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.Default { get; }
    private ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.FactoryFeatures { get; }
    private TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.Default { get; }
    public MessageResult IsActive { get; }
    public StartProcessInfoFeatures(IHostParametersFactory hostParametersFactory, bool isRdtscSupported, bool isThreadCycleTimeSupported, bool isEtwHostSupported);
    private static StartProcessInfoFeatures();
    private sealed virtual override ICoverageInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override CoverageInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.CoverageInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures>.get_Default();
    private sealed virtual override IMemoryInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override MemoryInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.MemoryInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures>.get_Default();
    private sealed virtual override IPerformanceInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override PerformanceInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.PerformanceInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures>.get_Default();
    private sealed virtual override MessageResult JetBrains.Profiler.Windows.Info.Features.IPerformanceInfoFeatures.IsMeterKindSupported(MeasureType measureType, MeterKind meterKind);
    private sealed virtual override ITimelineInfoFactoryFeatures JetBrains.Profiler.Features.IFeatures<JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_FactoryFeatures();
    private sealed virtual override TimelineInfo JetBrains.Profiler.Features.IInfoFeatures<JetBrains.Profiler.Windows.Info.TimelineInfo,JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures>.get_Default();
    public sealed virtual MessageResult get_IsActive();
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostParameters.BaseHost : BaseSystemHost {
    private static int TimeoutListen;
    private static int TimeoutExit;
    private static ILogger ourLogger;
    private IHostManager myHostManager;
    private IHostParameters myHostParameters;
    private IHostParametersFactory myHostParametersFactory;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ArgumentFeatures myArgumentFeatures;
    private AttachToProcessInfoFeatures myAttachToProcessInfoFeatures;
    private StartProcessInfoFeatures myStartProcessInfoFeatures;
    private Configuration myConfiguration;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, AttachArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, CoreClrArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate34;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, EverythingArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate35;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, DevelopmentServerArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate36;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, IISArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate37;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, IISExpressArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate38;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, SilverlightArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate39;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, MetroArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, StandaloneArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate3b;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, WcfHostArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`3<HostProfileParam, WindowsServiceArgument, IHostProfileSubscription> CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static Func`2<InstructionSet, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate4b;
    [CompilerGeneratedAttribute]
private static Func`2<EnvironmentProperty, CleanBridgeEnvironment> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<string, Marker>, Tuple`2<FileSystemPath, Marker>> CS$<>9__CachedAnonymousMethodDelegate5f;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate6e;
    [NotNullAttribute]
protected BaseSystemHost LocalSystemHost { get; }
    public ISystemHost Local { get; }
    public IHostParameters HostParameters { get; }
    public bool AcceptLocalFileSystem { get; }
    public bool IsXperfExists { get; }
    public CoreRegistration[] SupportedAdditionalCoreRegistrations { get; }
    protected bool CanRequestElevation { get; }
    protected BaseHost(Lifetime lifetime, IThreading threading, IHostManager hostManager, IHostParameters hostParameters);
    private static BaseHost();
    protected abstract virtual BaseSystemHost get_LocalSystemHost();
    public abstract virtual ISystemHost get_Local();
    public sealed virtual IHostParameters get_HostParameters();
    public sealed virtual bool get_AcceptLocalFileSystem();
    public sealed virtual bool get_IsXperfExists();
    public sealed virtual CoreRegistration[] get_SupportedAdditionalCoreRegistrations();
    protected virtual bool get_CanRequestElevation();
    public sealed virtual TFeature GetArgumentFeatures();
    public sealed virtual TFeature GetInfoFeatures(ProfileMode profileMode);
    public sealed virtual IArgument UpdateDisplayFields(IArgument argument);
    public sealed virtual IHostProfileSubscription Profile(Lifetime lifetime, IArgument argument, IInfo info, ICoreOptions coreOptionsExt, IHostOptions hostOptionsExt);
    private static void AddUserEnvironmentVariables(IDictionary`2<string, string> environment, CoreOptions coreOptions);
    private void AddExternalEnvironmentVariables(IDictionary`2<string, string> environment, IInfo info);
    public sealed virtual void CleanUp(IProgressIndicator progress, HostCleanUpFlags hostCleanUpFlags);
    public sealed virtual IEnumerable`1<ProcessInfo> GetProcessesToAttach();
    public sealed virtual IEnumerable`1<DevelopmentServerInfo> GetDevelopmentServers();
    public sealed virtual IEnumerable`1<IISExpressInfo> GetIISExpresses();
    public sealed virtual IEnumerable`1<IISSiteInfo> GetIISExpressSites(string iisExpress, bool useUserConfigurationFile, string configurationFile);
    public sealed virtual IEnumerable`1<WcfHostInfo> GetWcfHosts();
    public sealed virtual IEnumerable`1<PackageInfo> GetMetroPackages();
    private void ValidateInfo(IInfo info, ProfileMode profileMode);
    [CanBeNullAttribute]
private static string TranslateAlerts(HResults hr, string message);
    [NotNullAttribute]
private CoreRegistrationInfo GetCoreRegistrationInfo(bool useTransparentIntegration, bool grantedClr4AndGreater, CoreOptions coreOptions, InstructionSet[] instructionSets);
    private bool IsValidProcessName(string processName);
    private static bool GetNeedEtwService(IInfo info);
    private static bool IsNativeAllocationsEnabled(IInfo info);
    [CanBeNullAttribute]
private static string GetPdbServerId(IInfo info);
    private static bool GetPossibleDetach(IHostParametersFactory hostParametersFactory, IArgumentFactory argumentFactory, IInfo info, ControlKind controlKind);
    [NotNullAttribute]
private static IEnumerable`1<CoreCloseWay> GetSupportedCoreCloseWays(bool enableKill, bool possibleDetach);
    [NotNullAttribute]
private static IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfoFactory infoFactory, IInfo info, ControlKind controlKind);
    protected void InitializeWithAgent();
    private ProgressData GetCleanupProgressData(Guid id);
    [NotNullAttribute]
private static CleanBridgeEnvironment[] GetCleanBridgeEnvironment(IArgument argument, EnvironmentProperty[] environmentProperties);
    private void RegisterCore(IDownloader downloader, string coreDllFileName, Nullable`1<CoreLogMask> coreLogMask, InstructionSet instructionSet, RunFlags register, CoreInfo coreId);
    [CanBeNullAttribute]
private static IArgument TryUpdateDisplayField(IArgument argument, Action`1<TArgument> update);
    [CanBeNullAttribute]
private static Func`2<HostProfileParam, IHostProfileSubscription> TryCreateHostProfile(IArgument argument, Func`3<HostProfileParam, TArgument, IHostProfileSubscription> create);
    private void DeployAndRunEtwServer(Lifetime lifetime, Lifetime profilingLifetime, IProgressIndicator progressIndicator, HostOptions hostOptions, IDownloader downloader, bool enableNativeAllocations);
    private void DeployAndRunPdbServer(Lifetime lifetime, Lifetime profilingLifetime, IProgressIndicator progressIndicator, HostOptions hostOptions, string id, IDownloader downloader);
    private void DeployMetroHelper(IProgressIndicator progressIndicator);
    private void DeployAttachHelper(IProgressIndicator progressIndicator);
    private static void TrackErrors(int maxCount, IHostUI ui, Action`1<Action`1<string>> action);
    private void UnderCore(Action`1<string> addError, Func`1<string> message, Action action);
    private TResult UnderCore(Action`1<string> addError, Func`1<string> message, Func`1<TResult> action);
    [NotNullAttribute]
private Dictionary`2<InstructionSet, string> DeployCores(Lifetime lifetime, IProgressIndicator progressIndicator, CoreRegistrationInfo coreRegistrationInfo, bool checkMetroAccessRights, bool checkBuiltinUsersAccessRights, CoreOptions coreOptions, CoreInfo coreInfo, IHostUI ui, IDownloader downloader);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayFields>b__1b(AttachArgument x);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayFields>b__1c(MetroArgument x);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayFields>b__1d(DevelopmentServerArgument x);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayFields>b__1e(IISArgument x);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayFields>b__1f(IISExpressArgument x);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayFields>b__20(SilverlightArgument x);
    [CompilerGeneratedAttribute]
private void <UpdateDisplayFields>b__21(WindowsServiceArgument x);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__24(HostProfileParam x, AttachArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__25(HostProfileParam x, CoreClrArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__26(HostProfileParam x, EverythingArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__27(HostProfileParam x, DevelopmentServerArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__28(HostProfileParam x, IISArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__29(HostProfileParam x, IISExpressArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__2a(HostProfileParam x, SilverlightArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__2b(HostProfileParam x, MetroArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__2c(HostProfileParam x, StandaloneArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__2d(HostProfileParam x, WcfHostArgument y);
    [CompilerGeneratedAttribute]
private static IHostProfileSubscription <Profile>b__2e(HostProfileParam x, WindowsServiceArgument y);
    [CompilerGeneratedAttribute]
private bool <GetProcessesToAttach>b__48(ProcessInfo p);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <IsValidProcessName>b__49(InstructionSet x);
    [CompilerGeneratedAttribute]
private static CleanBridgeEnvironment <GetCleanBridgeEnvironment>b__4e(EnvironmentProperty x);
    [CompilerGeneratedAttribute]
private static Tuple`2<FileSystemPath, Marker> <DeployAndRunEtwServer>b__5c(Tuple`2<string, Marker> x);
    [CompilerGeneratedAttribute]
private static void <DeployAndRunPdbServer>b__6d();
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostParameters.BaseHostParametersFactory : object {
    private IHostManager myHostManager;
    private IHostParametersFactoryGroup myFactoryGroup;
    public IHostParametersFactoryGroup FactoryGroup { get; }
    public Type CoreOptionsType { get; }
    public Type HostOptionsType { get; }
    public IconId DisplayImage { get; }
    public string Description { get; }
    public MessageResult IsActive { get; }
    public IHostParameters AutoConnectHostParameters { get; }
    public Type RelatedType { get; }
    public string DisplayName { get; }
    protected BaseHostParametersFactory(Lifetime lifetime, IHostManager hostManager);
    public sealed virtual IHostParametersFactoryGroup get_FactoryGroup();
    public sealed virtual Type get_CoreOptionsType();
    public sealed virtual Type get_HostOptionsType();
    public abstract virtual IconId get_DisplayImage();
    public abstract virtual string get_Description();
    public sealed virtual MessageResult get_IsActive();
    public abstract virtual IHostParameters get_AutoConnectHostParameters();
    public sealed virtual TFactoryFeatures GetArgumentFactoryFeatures();
    public sealed virtual TFactoryFeatures GetInfoFactoryFeatures(ProfileMode profileMode);
    public abstract virtual IHost CreateHost(Lifetime lifetime, IHostParameters hostParameters);
    public abstract virtual IHostParameters UpdateDisplayFields(IHostParameters hostParameters);
    public abstract virtual Type get_RelatedType();
    public abstract virtual string get_DisplayName();
    public abstract virtual IHostParameters CreateEmpty();
    public abstract virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IHostParameters obj);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostParameters.BaseSystemHost : object {
    internal IServiceAgent`1<SysTools> ProfilingAgent { get; }
    public OperatingSystem OSVersion { get; }
    public bool HasAdministrativeRights { get; }
    public HostElevationMode ElevationMode { get; }
    public IEnumerable`1<InstructionSet> InstructionSets { get; }
    public IProperty`1<bool> HasCommunicationError { get; }
    internal abstract virtual IServiceAgent`1<SysTools> get_ProfilingAgent();
    private sealed virtual override string JetBrains.Profiler.Host.IHostBrowser.GetDefaultInternetBrowser();
    private sealed virtual override IEnumerable`1<InternetBrowserInfo> JetBrains.Profiler.Host.IHostBrowser.GetInternetBrowsers();
    public sealed virtual string CreateGlobalTempDirectory(Lifetime lifetime, string prefix);
    public sealed virtual string CreateUserTempDirectory(Lifetime lifetime, string prefix);
    public sealed virtual bool ExistsDirectory(string remotePath);
    public sealed virtual void CreateDirectory(string remotePath);
    public sealed virtual void DeleteDirectory(string remotePath);
    public sealed virtual String[] GetChildDirectories(string remotePath, string searchPattern);
    public sealed virtual String[] GetChildFiles(string remotePath, string searchPattern);
    public sealed virtual string CreateGlobalTempFile(Lifetime lifetime, string prefix);
    public sealed virtual string CreateUserTempFile(Lifetime lifetime, string prefix);
    public sealed virtual long GetFileLength(string remoteFile);
    public sealed virtual bool ExistsFile(string remoteFile);
    public sealed virtual void PutFile(IProgressIndicator progress, string localFile, string remoteFile);
    public sealed virtual void GetFile(IProgressIndicator progress, string localFile, string remoteFile);
    public sealed virtual void DeleteFile(string remoteFile);
    public sealed virtual void CopyFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, CopyFileMode mode);
    public sealed virtual void MoveFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, MoveFileMode mode);
    private sealed virtual override IEnumerable`1<WindowsServiceInfo> JetBrains.Profiler.Host.IHostService.GetServices();
    public sealed virtual OperatingSystem get_OSVersion();
    public sealed virtual bool get_HasAdministrativeRights();
    public sealed virtual HostElevationMode get_ElevationMode();
    public sealed virtual IEnumerable`1<InstructionSet> get_InstructionSets();
    public sealed virtual IEnumerable`1<Version> GetInstalledRuntimeVersions(InstructionSet instructionSet);
    public sealed virtual IEnumerable`1<Version> GetInstalledFrameworkVersions(InstructionSet instructionSet, Version runtimeVersion);
    public sealed virtual string GetRuntimeDirectory(InstructionSet instructionSet, Version runtimeVersion);
    public sealed virtual string GetFolderPath(InstructionSet instructionSet, SpecialFolder specialFolder);
    public sealed virtual string Expand(InstructionSet instructionSet, string str);
    public sealed virtual IProperty`1<bool> get_HasCommunicationError();
}
[HostParametersFactoryGroupAttribute("1000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.DesktopHostParametersFactoryGroup : object {
    public Type[] RelatedTypes { get; }
    public sealed virtual Type[] get_RelatedTypes();
    public sealed virtual ProfileGroupDisplayInfo GetInfo(IArgumentFactory argumentFactory);
    private string GetDescription(IArgumentFactory argumentFactory);
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.EnvironmentVariable : ConfigurationElement {
    private static string NameKey;
    private static string NameValue;
    [ConfigurationPropertyAttribute("key")]
[NotNullAttribute]
public string Key { get; public set; }
    [ConfigurationPropertyAttribute("value")]
[NotNullAttribute]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.EnvironmentVariableCollection : ConfigurationElementCollection {
    private static string NameEnvironmentVariable;
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.InfoConfiguration : ConfigurationElement {
    private static string NameEnvironmentVariables;
    [NotNullAttribute]
[ConfigurationPropertyAttribute("environmentVariables")]
public EnvironmentVariableCollection EnvironmentVariables { get; public set; }
    public EnvironmentVariableCollection get_EnvironmentVariables();
    public void set_EnvironmentVariables(EnvironmentVariableCollection value);
}
internal class JetBrains.Profiler.Windows.Impl.HostParameters.LocalHost : BaseHost {
    private IServiceAgent`1<SysTools> myServiceAgent;
    private bool myCanRequestElevation;
    protected bool CanRequestElevation { get; }
    protected BaseSystemHost LocalSystemHost { get; }
    internal IServiceAgent`1<SysTools> ProfilingAgent { get; }
    public ISystemHost Local { get; }
    public LocalHost(Lifetime lifetime, IThreading threading, IHostManager hostManager, LocalHostParameters hostParameters);
    protected virtual bool get_CanRequestElevation();
    protected virtual BaseSystemHost get_LocalSystemHost();
    internal virtual IServiceAgent`1<SysTools> get_ProfilingAgent();
    public virtual ISystemHost get_Local();
    private static bool GetHasAdministrativeRights();
}
[HostParametersFactoryAttribute("1000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.LocalHostParametersFactory : BaseHostParametersFactory {
    private IHostManager myHostManager;
    private IThreading myThreading;
    public string DisplayName { get; }
    public IconId DisplayImage { get; }
    public string Description { get; }
    public IHostParameters AutoConnectHostParameters { get; }
    public Type RelatedType { get; }
    public LocalHostParametersFactory(Lifetime lifetime, IThreading threading, IHostManager hostManager);
    public virtual string get_DisplayName();
    public virtual IconId get_DisplayImage();
    public virtual string get_Description();
    public virtual IHostParameters get_AutoConnectHostParameters();
    public virtual Type get_RelatedType();
    public virtual IHostParameters CreateEmpty();
    public virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IHostParameters obj);
    public virtual IHost CreateHost(Lifetime lifetime, IHostParameters hostParameters);
    public virtual IHostParameters UpdateDisplayFields(IHostParameters hostParameters);
}
internal class JetBrains.Profiler.Windows.Impl.HostParameters.LocalSystemHost : BaseSystemHost {
    private LocalServiceAgent`1<SysTools> myLocalAgent;
    internal IServiceAgent`1<SysTools> ProfilingAgent { get; }
    public LocalSystemHost(Lifetime lifetime);
    internal virtual IServiceAgent`1<SysTools> get_ProfilingAgent();
}
public class JetBrains.Profiler.Windows.Impl.HostParameters.ProfilerConfigurationSection : ConfigurationSection {
    private static string NameEnvironmentVariables;
    private static string NameCoverage;
    private static string NameMemory;
    private static string NamePerformanceSampling;
    private static string NamePerformanceTracing;
    private static string NamePerformanceTracingInject;
    private static string NameTimeline;
    [ConfigurationPropertyAttribute("environmentVariables")]
[NotNullAttribute]
public EnvironmentVariableCollection EnvironmentVariables { get; public set; }
    [CanBeNullAttribute]
[ConfigurationPropertyAttribute("coverage")]
public InfoConfiguration Coverage { get; public set; }
    [ConfigurationPropertyAttribute("memory")]
[CanBeNullAttribute]
public InfoConfiguration Memory { get; public set; }
    [ConfigurationPropertyAttribute("performanceSampling")]
[CanBeNullAttribute]
public InfoConfiguration PerformanceSampling { get; public set; }
    [CanBeNullAttribute]
[ConfigurationPropertyAttribute("performanceTracing")]
public InfoConfiguration PerformanceTracing { get; public set; }
    [CanBeNullAttribute]
[ConfigurationPropertyAttribute("performanceTracingInject")]
public InfoConfiguration PerformanceTracingInject { get; public set; }
    [ConfigurationPropertyAttribute("timeline")]
[CanBeNullAttribute]
public InfoConfiguration Timeline { get; public set; }
    public EnvironmentVariableCollection get_EnvironmentVariables();
    public void set_EnvironmentVariables(EnvironmentVariableCollection value);
    public InfoConfiguration get_Coverage();
    public void set_Coverage(InfoConfiguration value);
    public InfoConfiguration get_Memory();
    public void set_Memory(InfoConfiguration value);
    public InfoConfiguration get_PerformanceSampling();
    public void set_PerformanceSampling(InfoConfiguration value);
    public InfoConfiguration get_PerformanceTracing();
    public void set_PerformanceTracing(InfoConfiguration value);
    public InfoConfiguration get_PerformanceTracingInject();
    public void set_PerformanceTracingInject(InfoConfiguration value);
    public InfoConfiguration get_Timeline();
    public void set_Timeline(InfoConfiguration value);
}
internal class JetBrains.Profiler.Windows.Impl.HostParameters.RemoteHost : BaseHost {
    private BaseSystemHost myLocalSystemHost;
    private IServiceAgent`1<SysTools> myServiceAgent;
    protected BaseSystemHost LocalSystemHost { get; }
    internal IServiceAgent`1<SysTools> ProfilingAgent { get; }
    public ISystemHost Local { get; }
    public RemoteHost(Lifetime lifetime, IThreading threading, IHostManager hostManager, RemoteHostParameters hostParameters);
    protected virtual BaseSystemHost get_LocalSystemHost();
    internal virtual IServiceAgent`1<SysTools> get_ProfilingAgent();
    public virtual ISystemHost get_Local();
}
[HostParametersFactoryAttribute("2000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.HostParameters.RemoteHostParametersFactory : BaseHostParametersFactory {
    private IHostManager myHostManager;
    private IThreading myThreading;
    public string DisplayName { get; }
    public IconId DisplayImage { get; }
    public string Description { get; }
    public IHostParameters AutoConnectHostParameters { get; }
    public Type RelatedType { get; }
    public RemoteHostParametersFactory(Lifetime lifetime, IThreading threading, IHostManager hostManager);
    public virtual string get_DisplayName();
    public virtual IconId get_DisplayImage();
    public virtual string get_Description();
    public virtual IHostParameters get_AutoConnectHostParameters();
    public virtual Type get_RelatedType();
    public virtual IHostParameters CreateEmpty();
    public virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IHostParameters obj);
    public virtual IHost CreateHost(Lifetime lifetime, IHostParameters hostParameters);
    public virtual IHostParameters UpdateDisplayFields(IHostParameters hostParameters);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.AttachHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private AttachArgument myArgument;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InstructionSet, string>, string> CS$<>9__CachedAnonymousMethodDelegate9;
    public AttachHostProfile(HostProfileParam param, AttachArgument argument);
    private static AttachHostProfile();
    private static bool IsFrameworkSupportAttach(Version version);
    protected virtual void OnStart(InternalHostProfileParam param);
    [CompilerGeneratedAttribute]
private static string <OnStart>b__7(KeyValuePair`2<InstructionSet, string> x);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseGlobalHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private EnvironmentProperty[] myEnvironmentProperties;
    protected BaseGlobalHostProfile(HostProfileParam param, Behavior mode);
    private static BaseGlobalHostProfile();
    protected void SetEnvironmentProperties(EnvironmentProperty[] environmentProperties);
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseHostProfile : object {
    private static ILogger ourLogger;
    private static ReadonlyToken ourReadonly;
    private static ProcessFilter[] ourAllFilters;
    private Action myActivateShutdownTracker;
    private ISignal`1<HostAlertEventArgs> myAlert;
    private IProperty`1<bool> myCloseAllRequest;
    private Behavior myMode;
    private HostProfileParam myParam;
    private LifetimeDefinition myProfilingLifetimeDefinition;
    private Action myShutdown;
    private IProperty`1<bool> myShutdownFinished;
    private IProperty`1<bool> myShutdownStarted;
    private int myStartState;
    private int myUserActionWait;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, CoreCloseWay, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessFilterArgument, bool> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessFilterArgument, ProcessFilter> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`3<string, bool, bool> CS$<>9__CachedAnonymousMethodDelegate4e;
    private HostBridgeType JetBrains.Profiler.Profile.IHostProfile.HostBridgeType { get; }
    private bool JetBrains.Profiler.Profile.IHostProfile.IsConnectionFilterRequired { get; }
    private bool JetBrains.Profiler.Profile.IHostProfile.UseTransparentIntegration { get; }
    private IProperty`1<bool> JetBrains.Profiler.Profile.IHostProfile.Finished { get; }
    private ISignal`1<HostAlertEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Alert { get; }
    private ISignal`1<ConnectingEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Connecting { get; }
    private ICollectionEvents`1<ICoreHostProfile> JetBrains.Profiler.Profile.IHostProfileSubscription.Connections { get; }
    private ISignal`1<HostScopeEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Scope { get; }
    private ISignal`1<HostOperationEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.Operation { get; }
    private ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.SnapshotDone { get; }
    private ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.LogDone { get; }
    public IEnumerable`1<MainCloseWay> SupportedMainCloseWays { get; }
    private IEnumerable`1<CoreCloseWay> JetBrains.Profiler.Profile.IHostProfile.SupportedCoreCloseWays { get; }
    private IEnumerable`1<CoreCommand> JetBrains.Profiler.Profile.IHostProfile.SupportedCoreCommands { get; }
    protected BaseHostProfile(HostProfileParam param, Behavior mode);
    private static BaseHostProfile();
    private sealed virtual override HostBridgeType JetBrains.Profiler.Profile.IHostProfile.get_HostBridgeType();
    private sealed virtual override bool JetBrains.Profiler.Profile.IHostProfile.get_IsConnectionFilterRequired();
    private sealed virtual override bool JetBrains.Profiler.Profile.IHostProfile.get_UseTransparentIntegration();
    private sealed virtual override IProperty`1<bool> JetBrains.Profiler.Profile.IHostProfile.get_Finished();
    private sealed virtual override ISignal`1<HostAlertEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Alert();
    private sealed virtual override ISignal`1<ConnectingEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Connecting();
    private sealed virtual override ICollectionEvents`1<ICoreHostProfile> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Connections();
    private sealed virtual override ISignal`1<HostScopeEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Scope();
    private sealed virtual override ISignal`1<HostOperationEventArgs> JetBrains.Profiler.Profile.IHostProfileSubscription.get_Operation();
    private sealed virtual override ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.get_SnapshotDone();
    private sealed virtual override ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> JetBrains.Profiler.Profile.IHostProfileSubscription.get_LogDone();
    public virtual IEnumerable`1<MainCloseWay> get_SupportedMainCloseWays();
    private sealed virtual override IEnumerable`1<CoreCloseWay> JetBrains.Profiler.Profile.IHostProfile.get_SupportedCoreCloseWays();
    private sealed virtual override IEnumerable`1<CoreCommand> JetBrains.Profiler.Profile.IHostProfile.get_SupportedCoreCommands();
    private sealed virtual override void JetBrains.Profiler.Profile.IHostProfileSubscription.Start(IProgressIndicator progressIndicator, IHostUI ui);
    private sealed virtual override IDisposable JetBrains.Profiler.Profile.IHostProfile.TryUserActionWait();
    private sealed virtual override bool JetBrains.Profiler.Profile.IHostProfile.CloseAll(CoreCloseWay[] sequenceCoreCloseWays);
    public virtual bool CanCloseMain(MainCloseWay mainCloseWay);
    public virtual void CloseMain(MainCloseWay mainCloseWay);
    private static int GetRealFinishProfilingAutomaticallyTimeout(Nullable`1<int> timeout, Behavior mode);
    protected virtual void OnStart(InternalHostProfileParam param);
    [NotNullAttribute]
private static IEnumerable`1<ProcessFilter> PrepareProcessFilters(ProcessFilterArgument[] filters);
    protected void SetValidExecutablesFilter(String[] executables);
    protected void SetInvalidExecutablesFilter(String[] executables);
    protected void SetProcessFilter(ProcessFilterArgument[] processFilterArguments);
    protected static bool IsNetworkIsolationEnabled(IServiceAgent`1<SysTools> agent);
    [NotNullAttribute]
private static IProperty`1<bool> CreateCloseAllRequest(Lifetime lifetime, Bridge bridge);
    [NotNullAttribute]
private static IProperty`1<bool> CreateDelayedNoConnectionsAndOperations(Lifetime lifetime, IThreading threading, IProperty`1<bool> noConnectionsAndOperations, int milliseconds);
    [NotNullAttribute]
private static IProperty`1<bool> CreateEnableAutomaticShutdown(Lifetime lifetime, IProperty`1<bool> noConnections);
    [NotNullAttribute]
private static IProperty`1<bool> CreateNoConnections(Lifetime lifetime, Bridge bridge);
    [NotNullAttribute]
private static IProperty`1<bool> CreateNoOperations(Lifetime lifetime, Bridge bridge, Downloader downloader);
    [NotNullAttribute]
private static IProperty`1<bool> CreateNoConnectionsAndOperations(Lifetime lifetime, IProperty`1<bool> noConnections, Bridge bridge, Downloader downloader);
    [NotNullAttribute]
private IProperty`1<bool> CreateInternalFinishRequest(Lifetime lifetime, IProperty`1<bool> noConnectionsAndOperations);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4(HostAlertEventArgs x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5(HostAlertEventArgs x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__a();
    [CompilerGeneratedAttribute]
private void <JetBrains.Profiler.Profile.IHostProfileSubscription.Start>b__15();
    [CompilerGeneratedAttribute]
private void <JetBrains.Profiler.Profile.IHostProfile.TryUserActionWait>b__1c();
    [CompilerGeneratedAttribute]
private static StringBuilder <JetBrains.Profiler.Profile.IHostProfile.CloseAll>b__1d(StringBuilder x, CoreCloseWay y);
    [CompilerGeneratedAttribute]
private static bool <PrepareProcessFilters>b__1f(ProcessFilterArgument x);
    [CompilerGeneratedAttribute]
private static ProcessFilter <PrepareProcessFilters>b__20(ProcessFilterArgument x);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__4d(string param0, bool param1);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseProcessHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private IProcessProxy myProcess;
    public int ProcessId { get; }
    private bool JetBrains.Profiler.Profile.IStandaloneHostProfile.HasExited { get; }
    private Nullable`1<int> JetBrains.Profiler.Profile.IStandaloneHostProfile.ExitCode { get; }
    protected BaseProcessHostProfile(HostProfileParam param);
    private static BaseProcessHostProfile();
    public sealed virtual int get_ProcessId();
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.get_HasExited();
    private sealed virtual override Nullable`1<int> JetBrains.Profiler.Profile.IStandaloneHostProfile.get_ExitCode();
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.CloseMainWindow();
    public virtual void Kill();
    public virtual void KillTree();
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.WaitForExit(TimeSpan timeout);
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.WaitForExit(int timeout);
    private sealed virtual override bool JetBrains.Profiler.Profile.IStandaloneHostProfile.WaitForExit();
    protected void SetProcess(IProcessProxy process);
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal abstract class JetBrains.Profiler.Windows.Impl.HostProfile.BaseWindowsServiceHostProfile : BaseHostProfile {
    private static int TimeoutOperation;
    private static int LongTimeoutOperation;
    private static ILogger ourLogger;
    private static JetHashSet`1<string> ourSafeGroupNames;
    private IServiceAgent`1<SysTools> myAgent;
    private String[] myArguments;
    private EnvironmentProperty[] myEnvironmentProperties;
    private IProcessProxy myProcess;
    private IServiceProxy myService;
    private bool myStartDependentServices;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceProxy, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceProxy, string> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceProxy, bool> CS$<>9__CachedAnonymousMethodDelegate3a;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceProxy, string> CS$<>9__CachedAnonymousMethodDelegate3c;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceProxy, string> CS$<>9__CachedAnonymousMethodDelegate3d;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceProxy, string> CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static Func`2<IServiceProxy, string> CS$<>9__CachedAnonymousMethodDelegate55;
    private bool JetBrains.Profiler.Profile.IServiceHostProfile.CanStop { get; }
    public IEnumerable`1<MainCloseWay> SupportedMainCloseWays { get; }
    protected BaseWindowsServiceHostProfile(HostProfileParam param);
    private static BaseWindowsServiceHostProfile();
    private sealed virtual override bool JetBrains.Profiler.Profile.IServiceHostProfile.get_CanStop();
    private sealed virtual override void JetBrains.Profiler.Profile.IServiceHostProfile.Stop();
    private sealed virtual override bool JetBrains.Profiler.Profile.IServiceHostProfile.WaitForStop(TimeSpan timeout);
    private sealed virtual override bool JetBrains.Profiler.Profile.IServiceHostProfile.WaitForStop(int timeout);
    public virtual IEnumerable`1<MainCloseWay> get_SupportedMainCloseWays();
    public virtual bool CanCloseMain(MainCloseWay mainCloseWay);
    public virtual void CloseMain(MainCloseWay mainCloseWay);
    protected void SetEnvironmentProperties(EnvironmentProperty[] environmentProperties);
    protected void SetService(IServiceProxy service, bool startDependentServices, String[] arguments);
    protected virtual void OnStart(InternalHostProfileParam param);
    private void ApplyLock(Lifetime lifetime, IServiceProxy[] services);
    private static void ApplyEnvironment(IServiceAgent`1<SysTools> agent, Lifetime lifetime, IServiceProxy[] services, EnvironmentProperty[] environmentProperties);
    [NotNullAttribute]
private static IServiceProxy[] GetDependentServices(Lifetime lifetime, IServiceAgent`1<SysTools> agent, IServiceProxy service);
    private static Result GetSameProcessServices(Lifetime lifetime, IServiceAgent`1<SysTools> agent, IServiceProxy service);
    private void ParallelStart(IEnumerable`1<IServiceProxy> roots, Action checkCanceled, bool waitForRunning);
    private void ParallelStop(IEnumerable`1<IServiceProxy> roots, Action checkCanceled, bool waitForStopping);
    [CompilerGeneratedAttribute]
private bool <JetBrains.Profiler.Profile.IServiceHostProfile.get_CanStop>b__0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static bool <JetBrains.Profiler.Profile.IServiceHostProfile.get_CanStop>b__1(IServiceProxy x);
    [CompilerGeneratedAttribute]
private void <JetBrains.Profiler.Profile.IServiceHostProfile.Stop>b__3(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static void <JetBrains.Profiler.Profile.IServiceHostProfile.Stop>b__4();
    [CompilerGeneratedAttribute]
private void <>n__FabricatedMethod1b(InternalHostProfileParam );
    [CompilerGeneratedAttribute]
private static string <GetDependentServices>b__31(IServiceProxy x);
    [CompilerGeneratedAttribute]
private static bool <GetSameProcessServices>b__36(IServiceProxy x);
    [CompilerGeneratedAttribute]
private static string <GetSameProcessServices>b__38(IServiceProxy x);
    [CompilerGeneratedAttribute]
private static string <GetSameProcessServices>b__39(IServiceProxy x);
    [CompilerGeneratedAttribute]
private static string <ParallelStart>b__42(IServiceProxy x);
    [CompilerGeneratedAttribute]
private static string <ParallelStop>b__4f(IServiceProxy x);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.CoreClrHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private CoreClrArgument myArgument;
    public CoreClrHostProfile(HostProfileParam param, CoreClrArgument argument);
    private static CoreClrHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.DevelopmentServerHostProfile : BaseProcessHostProfile {
    private static int TimeoutWaitForListen;
    private static ILogger ourLogger;
    private DevelopmentServerArgument myArgument;
    public DevelopmentServerHostProfile(HostProfileParam param, DevelopmentServerArgument argument);
    private static DevelopmentServerHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.EverythingHostProfile : BaseGlobalHostProfile {
    private static ILogger ourLogger;
    private EverythingArgument myArgument;
    [CompilerGeneratedAttribute]
private static Func`2<InstructionSet, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate3;
    public EverythingHostProfile(HostProfileParam param, EverythingArgument argument);
    private static EverythingHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <OnStart>b__0(InstructionSet x);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.IISExpressHostProfile : BaseProcessHostProfile {
    private static int TimeoutWaitForListen;
    private static ILogger ourLogger;
    private IISExpressArgument myArgument;
    public IISExpressHostProfile(HostProfileParam param, IISExpressArgument argument);
    private static IISExpressHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.IISHostProfile : BaseWindowsServiceHostProfile {
    private static ILogger ourLogger;
    private IISArgument myArgument;
    public IISHostProfile(HostProfileParam param, IISArgument argument);
    private static IISHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.InternalHostProfileParam : object {
    [NotNullAttribute]
public Action CheckCanceled;
    [NotNullAttribute]
public Func`4<InstructionSet[], ClrEngine, ProfilerActivationFlags, DeployResult> Deploy;
    [NotNullAttribute]
public ImmutableHostProfileParam ImmutableParam;
    [NotNullAttribute]
public Lifetime ProfilingLifetime;
    [NotNullAttribute]
public IHostUI UI;
    public InternalHostProfileParam(ImmutableHostProfileParam immutableParam, Lifetime profilingLifetime, Action checkCanceled, Func`4<InstructionSet[], ClrEngine, ProfilerActivationFlags, DeployResult> deploy, IHostUI ui);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.MetroHostProfile : BaseHostProfile {
    private static ILogger ourLogger;
    private MetroArgument myArgument;
    public MetroHostProfile(HostProfileParam param, MetroArgument argument);
    private static MetroHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.HostProfile.ServiceControlUtil : object {
    private static int TimeoutStatus;
    private static ILogger ourLogger;
    private static ServiceControlUtil();
    [ExtensionAttribute]
public static void StartEx(IServiceProxy service, String[] args);
    [ExtensionAttribute]
public static void StopEx(IServiceProxy service);
    [ExtensionAttribute]
public static bool WaitForStopped(IServiceProxy service, Action checkCanceled, TimeSpan timeout);
    [ExtensionAttribute]
public static bool WaitForStopped(IServiceProxy service, Action checkCanceled, TimeSpan timeout, DateTime startUtcTime);
    [ExtensionAttribute]
public static bool WaitForRunning(IServiceProxy service, Action checkCanceled, TimeSpan timeout);
    [ExtensionAttribute]
public static bool WaitForRunning(IServiceProxy service, Action checkCanceled, TimeSpan timeout, DateTime startUtcTime);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.SilverlightHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private SilverlightArgument myArgument;
    private Action myKillBrowsers;
    public SilverlightHostProfile(HostProfileParam param, SilverlightArgument argument);
    private static SilverlightHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
    public virtual void Kill();
    public virtual void KillTree();
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.StandaloneHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private StandaloneArgument myArgument;
    public StandaloneHostProfile(HostProfileParam param, StandaloneArgument argument);
    private static StandaloneHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.WcfHostHostProfile : BaseProcessHostProfile {
    private static ILogger ourLogger;
    private WcfHostArgument myArgument;
    public WcfHostHostProfile(HostProfileParam param, WcfHostArgument argument);
    private static WcfHostHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfile.WindowsServiceHostProfile : BaseWindowsServiceHostProfile {
    private static ILogger ourLogger;
    private WindowsServiceArgument myArgument;
    public WindowsServiceHostProfile(HostProfileParam param, WindowsServiceArgument argument);
    private static WindowsServiceHostProfile();
    protected virtual void OnStart(InternalHostProfileParam param);
}
internal class JetBrains.Profiler.Windows.Impl.HostProfileParam : object {
    [NotNullAttribute]
public Bridge Bridge;
    [NotNullAttribute]
public DeployDelegate Deploy;
    [NotNullAttribute]
public Downloader Downloader;
    public Nullable`1<int> FinishProfilingAutomaticallyTimeout;
    [NotNullAttribute]
public ImmutableHostProfileParam ImmutableParam;
    [NotNullAttribute]
public IEnumerable`1<CoreCloseWay> SupportedCoreCloseWays;
    [NotNullAttribute]
public IEnumerable`1<CoreCommand> SupportedCoreCommands;
    [NotNullAttribute]
public IThreading Threading;
    [NotNullAttribute]
public Func`3<HResults, string, string> TranslateAlerts;
    public HostProfileParam(ImmutableHostProfileParam immutableParam, IThreading threading, DeployDelegate deploy, Bridge bridge, Downloader downloader, Nullable`1<int> finishProfilingAutomaticallyTimeout, IEnumerable`1<CoreCloseWay> supportedCoreCloseWays, IEnumerable`1<CoreCommand> supportedCoreCommands, Func`3<HResults, string, string> translateAlerts);
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.HostProfileUtil : object {
    private static int TimeoutKill;
    [ExtensionAttribute]
public static ushort SelectPort(SysTools sysTools, IPEndPoint endPoint, IHostUI ui);
}
internal class JetBrains.Profiler.Windows.Impl.ImmutableHostProfileParam : object {
    [NotNullAttribute]
public Lifetime Lifetime;
    [NotNullAttribute]
public InstructionSet[] InstructionSets;
    [NotNullAttribute]
public IntegrationCoreInfo IntegrationCoreInfo;
    [NotNullAttribute]
public IServiceAgent`1<SysTools> LocalProfilingAgent;
    [NotNullAttribute]
public IServiceAgent`1<SysTools> ProfilingAgent;
    public ImmutableHostProfileParam(Lifetime lifetime, InstructionSet[] instructionSets, IServiceAgent`1<SysTools> profilingAgent, IServiceAgent`1<SysTools> localProfilingAgent, IntegrationCoreInfo integrationCoreInfo);
}
[InfoFactoryAttribute("3000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Info.CoverageInfoFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public HostBridgeType HostBridgeType { get; }
    public InfoType InfoType { get; }
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public CoverageInfoFactory(IHostManager hostManager);
    private static CoverageInfoFactory();
    public sealed virtual HostBridgeType get_HostBridgeType();
    public sealed virtual InfoType get_InfoType();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
    public sealed virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory, ProfileMode profileMode);
    public sealed virtual MessageResult IsCompatible(IHost host, ProfileMode profileMode);
    public sealed virtual IInfo CreateEmpty();
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IInfo obj);
}
[InfoFactoryAttribute("2000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Info.MemoryInfoFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public HostBridgeType HostBridgeType { get; }
    public InfoType InfoType { get; }
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public MemoryInfoFactory(IHostManager hostManager);
    private static MemoryInfoFactory();
    public sealed virtual HostBridgeType get_HostBridgeType();
    public sealed virtual InfoType get_InfoType();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
    public sealed virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory, ProfileMode profileMode);
    public sealed virtual MessageResult IsCompatible(IHost host, ProfileMode profileMode);
    public sealed virtual IInfo CreateEmpty();
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IInfo obj);
}
[InfoFactoryAttribute("1000")]
[ZoneMarkerAttribute]
internal class JetBrains.Profiler.Windows.Impl.Info.PerformanceInfoFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public HostBridgeType HostBridgeType { get; }
    public InfoType InfoType { get; }
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public PerformanceInfoFactory(IHostManager hostManager);
    private static PerformanceInfoFactory();
    public sealed virtual HostBridgeType get_HostBridgeType();
    public sealed virtual InfoType get_InfoType();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
    public sealed virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory, ProfileMode profileMode);
    public sealed virtual MessageResult IsCompatible(IHost host, ProfileMode profileMode);
    public sealed virtual IInfo CreateEmpty();
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IInfo obj);
}
[ZoneMarkerAttribute]
[InfoFactoryAttribute("100000")]
internal class JetBrains.Profiler.Windows.Impl.Info.TimelineInfoFactory : object {
    private static MessageResult ourMessageResultNotSupported;
    private IHostManager myHostManager;
    public HostBridgeType HostBridgeType { get; }
    public InfoType InfoType { get; }
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public TimelineInfoFactory(IHostManager hostManager);
    private static TimelineInfoFactory();
    public sealed virtual HostBridgeType get_HostBridgeType();
    public sealed virtual InfoType get_InfoType();
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
    public sealed virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
    public sealed virtual MessageResult IsCompatible(IHostParametersFactory factory, ProfileMode profileMode);
    public sealed virtual MessageResult IsCompatible(IHost host, ProfileMode profileMode);
    public sealed virtual IInfo CreateEmpty();
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IInfo obj);
}
internal class JetBrains.Profiler.Windows.Impl.LocalCoreFilesManager : BaseCoreFilesManager {
    private int myCoreProcessId;
    private ILifetimeIdentity myListenerLifetimeIdentity;
    public LocalCoreFilesManager(SysTools sysTools, IDownloader downloader, EffectiveCoreDirs coreDirs, int coreProcessId, ILifetimeIdentity listenerLifetimeIdentity);
    public virtual SafeFileHandle CreateTemporaryFile();
    public virtual SafeFileHandle CreateDiagnosticFile();
    public virtual KeyValuePair`2<Guid, SafeFileHandle> CreateSnapshotFile();
}
[ZoneMarkerAttribute]
[CoreOptionsFactoryAttribute]
internal class JetBrains.Profiler.Windows.Impl.Options.CoreOptionsFactory : object {
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual ICoreOptions CreateEmpty();
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(ICoreOptions obj);
}
[ZoneMarkerAttribute]
[HostOptionsFactoryAttribute]
internal class JetBrains.Profiler.Windows.Impl.Options.HostOptionsFactory : object {
    public Type RelatedType { get; }
    public string DisplayName { get; }
    public sealed virtual Type get_RelatedType();
    public sealed virtual string get_DisplayName();
    public sealed virtual IHostOptions CreateEmpty();
    public sealed virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(IHostOptions obj);
}
internal class JetBrains.Profiler.Windows.Impl.PacketReader : object {
    private IChannelProxy myChannelProxy;
    public PacketReader(IChannelProxy channelProxy);
    public sealed virtual void Receive(Action`2<byte, BinaryReader> dataReader);
    public sealed virtual TResult Receive(Func`3<byte, BinaryReader, TResult> dataReader);
}
internal class JetBrains.Profiler.Windows.Impl.PacketWriter : object {
    private IChannelProxy myChannelProxy;
    public PacketWriter(IChannelProxy channelProxy);
    public sealed virtual void Send(byte command, Action`1<BinaryWriter> writerAction);
}
[FlagsAttribute]
internal enum JetBrains.Profiler.Windows.Impl.ProfilerActivationFlags : Enum {
    public byte value__;
    public static ProfilerActivationFlags Default;
    public static ProfilerActivationFlags GrantedClr4AndGreater;
    public static ProfilerActivationFlags CheckBuiltinUsersAccessRights;
    public static ProfilerActivationFlags DeployAttach;
    public static ProfilerActivationFlags DeployMetro;
    public static ProfilerActivationFlags CheckMetroAccessRights;
}
[ExtensionAttribute]
internal static class JetBrains.Profiler.Windows.Impl.ProfilerFiles : object {
    private static FileSystemPath ourThisDirectory;
    private static FileSystemPath ourSymSrvDirectory;
    private static ProfilerFiles();
    [NotNullAttribute]
public static String[] GetProcesses(ProcessorArchitecture architecture);
    [ExtensionAttribute]
public static ProcessorArchitecture ConvertToArchitecture(InstructionSet instructionSet);
    [ExtensionAttribute]
public static bool ConvertToDebug(CoreConfiguration configuration);
    private static bool IsIncludePdb(bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetCoreTransparentFiles(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetCoreFiles(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetAttachHelperFiles(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetWinRTHelperFiles(ProcessorArchitecture architecture, bool debug);
    [NotNullAttribute]
public static Tuple`3[] GetPdbServerFiles(ProcessorArchitecture architecture, bool debug);
}
internal class JetBrains.Profiler.Windows.Impl.RemoteCoreFilesManager : BaseCoreFilesManager {
    private static InvalidOperationException ourInvalidOperationException;
    public RemoteCoreFilesManager(SysTools sysTools, IDownloader downloader, EffectiveCoreDirs coreDirs);
    private static RemoteCoreFilesManager();
    public virtual SafeFileHandle CreateTemporaryFile();
    public virtual SafeFileHandle CreateDiagnosticFile();
    public virtual KeyValuePair`2<Guid, SafeFileHandle> CreateSnapshotFile();
}
public class JetBrains.Profiler.Windows.Impl.SessionFilesManager : object {
    private static ILogger ourLogger;
    private FileSystemPath myDefaultLocalTempoparyDir;
    private IDownloader myDownloader;
    [NotNullAttribute]
private ILifetimeIdentity mySessionLifetimeIdentity;
    private bool myIsLocal;
    private SysTools mySysTools;
    public SessionFilesManager(SysTools sysTools, IDownloader downloader, FileSystemPath defaultLocalTempoparyDir, Lifetime sessionLifetime, bool isLocal);
    private static SessionFilesManager();
    public sealed virtual ICoreFilesManager CreateCoreFilesManager(int coreProcessId, CoreDirs coreDirs);
    [CanBeNullAttribute]
public Action`2<IListenerProxy, Lifetime> GetListenerProxyCreator();
    [CompilerGeneratedAttribute]
private void <GetListenerProxyCreator>b__0(IListenerProxy listener, Lifetime connectionLifetime);
}
public class JetBrains.Profiler.Windows.Impl.WindowsHostManager : HostManagerBase {
    public WindowsHostManager(Lifetime lifetime, IThreading threading);
}
internal class JetBrains.Profiler.Windows.Resources.ArgumentPrivateThemedIcons : object {
}
internal class JetBrains.Profiler.Windows.Resources.HostParametersPrivateThemedIcons : object {
}
internal class RenderedIcons_ByPackResourceNameHash_42CF743451CDF0A0DC9F959122CA5CDD : object {
    internal static Byte[] JetBrainsProfilerWindowsResourcesHostParametersLocalDesktop____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesHostParametersRemoteDesktop____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesHostParametersLocalDesktop____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesHostParametersRemoteDesktop____png__x2;
    private static RenderedIcons_ByPackResourceNameHash_42CF743451CDF0A0DC9F959122CA5CDD();
}
internal class RenderedIcons_ByPackResourceNameHash_F5994814736A512879B7741CDD044DDD : object {
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentAttach____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentDevelopmentServer____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentEverything____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentIis____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentIisExpress____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentMetro____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentSilverlight____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentStandalone____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentWcfHost____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentWindowsService____png__x1;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentAttach____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentDevelopmentServer____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentEverything____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentIis____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentIisExpress____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentMetro____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentSilverlight____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentStandalone____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentWcfHost____png__x2;
    internal static Byte[] JetBrainsProfilerWindowsResourcesArgumentWindowsService____png__x2;
    private static RenderedIcons_ByPackResourceNameHash_F5994814736A512879B7741CDD044DDD();
}
