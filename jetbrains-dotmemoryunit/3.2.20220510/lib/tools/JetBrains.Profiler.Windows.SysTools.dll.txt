public class JetBrains.Profiler.Windows.SysTools.AttachEnvironmentTools : BaseServiceRemotable`1<SysTools> {
    private static string UpidPrefix;
    private static ILogger ourLogger;
    public AttachEnvironmentTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static AttachEnvironmentTools();
    [RemotableCallAttribute]
public virtual void CleanAllProcessesEnvironment(CleanEnvironmentProperty[] cleanEvironmentProperties);
    [RemotableCallAttribute]
public virtual void CleanProcessEnvironment(int processId, CleanEnvironmentProperty[] cleanEvironmentProperties);
    [RemotableCallAttribute]
public virtual void UpdateProcessEnvironment(int processId, EnvironmentProperty[] environmentProperties);
    [NotNullAttribute]
private static string MakeUpidSubName(int processId);
    private static bool UpidPrefixFilter(string name);
    private static void CleanAll(RegistryHiveAccess key);
    [CanBeNullAttribute]
private static string FilterProduct(EnvironmentPropertyFlags flags, string key);
    private static void Clean(RegistryHiveAccess key, string name);
    private static void Update(RegistryHiveAccess key, string name, IEnumerable`1<EnvironmentProperty> environmentProperties);
}
public class JetBrains.Profiler.Windows.SysTools.AttachTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private Dictionary`2<InstructionSet, FileSystemPath> myExecutables;
    [CompilerGeneratedAttribute]
private static Action`1<Thread> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Action`1<Thread> CS$<>9__CachedAnonymousMethodDelegate18;
    public AttachTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static AttachTools();
    [RemotableCallAttribute]
public virtual bool HasExecutable(InstructionSet instructionSet);
    [RemotableCallAttribute]
public virtual void SetExecutable(InstructionSet instructionSet, string fileName);
    [RemotableLongCallAttribute]
public virtual void AttachProfiling(InstructionSet instructionSet, int processId, Version runtimeVersion, Guid profileGuid, string profilerDll);
    [NotNullAttribute]
[RemotableLongCallAttribute]
public virtual IEnumerable`1<ProcessInfo> GetProcessesToAttach();
    [NotRemotableAttribute]
public void UpdateDisplay(AttachArgument argument);
    [NotNullAttribute]
private static FileSystemPath CheckExecutable(FileSystemPath executable);
    [NotNullAttribute]
private FileSystemPath GetExecutable(InstructionSet instructionSet);
    private void RunAttachHelper(InstructionSet instructionSet, Func`2<FileSystemPath, String[]> getArguments, Func`2<FileSystemPath, Tuple`2<HResults, string>> parseResult);
    private T RunAttachHelper(InstructionSet instructionSet, Func`2<FileSystemPath, String[]> getArguments, Func`2<FileSystemPath, Tuple`3<HResults, string, T>> parseResult);
    private static bool IsFrameworkSupportAttach(Version version);
    [CompilerGeneratedAttribute]
private static void <GetProcessesToAttach>b__15(Thread x);
    [CompilerGeneratedAttribute]
private static void <GetProcessesToAttach>b__16(Thread x);
}
public class JetBrains.Profiler.Windows.SysTools.CleanEnvironmentProperty : object {
    public EnvironmentPropertyFlags Flags;
    [NotNullAttribute]
public string Key;
    public bool StartedWith;
    public CleanEnvironmentProperty(EnvironmentPropertyFlags flags, string key, bool startedWith);
}
public class JetBrains.Profiler.Windows.SysTools.CommunicationTools : BaseServiceRemotable`1<SysTools> {
    private static int TimeoutExpired;
    private static ILogger ourLogger;
    private WatchedDictionary`1<SocketListener> myListeners;
    private WatchedDictionary`1<ICommunicationToolsStream> myStreams;
    [CompilerGeneratedAttribute]
private static Action`1<ICommunicationToolsStream> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Action`1<SocketListener> CS$<>9__CachedAnonymousMethodDelegate3;
    public CommunicationTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static CommunicationTools();
    [NotNullAttribute]
private List`1<Guid> AcceptSocket(Guid listenerId, int timeout);
    protected virtual void OnDispose();
    [NotRemotableAttribute]
[NotNullAttribute]
public virtual IListenerProxy CreateListener(Lifetime lifetime, IPEndPoint endPoint);
    [NotRemotableAttribute]
[NotNullAttribute]
public virtual IChannelProxy CreateCoreControl(Lifetime lifetime, Guid streamId);
    [RemotableCallAttribute]
public virtual ushort GetFreeTcpListenPort(IPEndPoint endPoint);
    [RemotableCallAttribute]
public virtual bool CheckForTcpListenPort(IPEndPoint endPoint);
    [RemotableCallAttribute]
public virtual int GetProcessForTcpListenPort(IPEndPoint endPoint);
    [RemotableCallAttribute]
public virtual Guid Listener_Create(IPEndPoint endPoint);
    [RemotableCallAttribute]
public virtual IPEndPoint Listener_GetEndPoint(Guid listenerId);
    [RemotableLongCallAttribute]
public virtual Guid[] Listener_GetNewStreamIds(Guid listenerId, TimeSpan timeout);
    [RemotableLongCallAttribute]
public virtual Guid[] Listener_GetNewStreamIds(Guid listenerId, int timeout);
    [RemotableCallAttribute]
public virtual void Listener_Touch(Guid listenerId);
    [RemotableCallAttribute]
public virtual void Listener_Close(Guid listenerId);
    [RemotableCallAttribute]
public virtual void Listener_InjectProxyStreamFactory(Guid listenerId, Type type, Object[] args);
    [RemotableLongCallAttribute]
public virtual bool Channel_HasDataToRead(Guid streamId, int timeout);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual Tuple`2<byte, Byte[]> Channel_ReceiveCommand(Guid streamId);
    [RemotableCallAttribute]
public virtual void Channel_SendCommand(Guid streamId, byte command, Byte[] data);
    [RemotableCallAttribute]
public virtual void Channel_Touch(Guid streamId);
    [RemotableCallAttribute]
public virtual void Channel_Close(Guid streamId);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(ICommunicationToolsStream s);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__1(SocketListener l);
}
public class JetBrains.Profiler.Windows.SysTools.CommunicationToolsBaseStreamProxy : object {
    private ICommunicationToolsStream myBaseStream;
    public CommunicationToolsBaseStreamProxy(ICommunicationToolsStream baseStream);
    public virtual Tuple`2<byte, Byte[]> ReceiveCommand();
    public virtual bool HasDataToRead(int timeout);
    public virtual void SendCommand(byte command, Byte[] data);
    public virtual void Shutdown();
    public virtual void Close();
}
public class JetBrains.Profiler.Windows.SysTools.CommunicationToolsSocketStream : object {
    private Socket mySocket;
    public CommunicationToolsSocketStream(Socket socket);
    public sealed virtual Tuple`2<byte, Byte[]> ReceiveCommand();
    public sealed virtual bool HasDataToRead(int timeout);
    public sealed virtual void SendCommand(byte command, Byte[] data);
    public sealed virtual void Shutdown();
    public sealed virtual void Close();
}
public class JetBrains.Profiler.Windows.SysTools.CoreClrTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static MessageResult ourMessageResult_NoDotNetDetected;
    private static MessageResult ourMessageResult_Communication;
    public CoreClrTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static CoreClrTools();
    [RemotableCallAttribute]
[CanBeNullAttribute]
public virtual string TryGetDotNetExecutable();
    [NotNullAttribute]
[NotRemotableAttribute]
public virtual string GetDotNetExecutable();
    [NotRemotableAttribute]
[NotNullAttribute]
public MessageResult IsSupported(HostCompatibilityOptions options);
    [CompilerGeneratedAttribute]
private MessageResult <IsSupported>b__0();
}
public class JetBrains.Profiler.Windows.SysTools.CoreFiles.HandleConverterProxy : CommunicationToolsBaseStreamProxy {
    private static ILogger ourLogger;
    [NotNullAttribute]
private Process mySrcProcess;
    [CanBeNullAttribute]
private Process myCoreProcess;
    public HandleConverterProxy(SysTools sysTools, ICommunicationToolsStream baseStream, UInt32 srcProcessId, ILifetimeIdentity lifetimeIdentity);
    private static HandleConverterProxy();
    public virtual Tuple`2<byte, Byte[]> ReceiveCommand();
    public virtual void SendCommand(byte command, Byte[] data);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Profiler.Windows.SysTools.CoreFiles.RemoteAgentFilesProxy : CommunicationToolsBaseStreamProxy {
    private static ILogger ourLogger;
    private static Process ourAgentProcess;
    private static Tuple`2<byte, Byte[]> ourIdleCommand;
    [NotNullAttribute]
private ILifetimeIdentity mySessionLifetimeIdentity;
    [NotNullAttribute]
private SysTools mySysTools;
    [NotNullAttribute]
private FileSystemPath myTempDir;
    [CanBeNullAttribute]
private Process myCoreProcess;
    public RemoteAgentFilesProxy(SysTools sysTools, ICommunicationToolsStream baseStream, ILifetimeIdentity connectionLifetimeIdentity, ILifetimeIdentity sessionLifetimeIdentity);
    private static RemoteAgentFilesProxy();
    public virtual Tuple`2<byte, Byte[]> ReceiveCommand();
    private void SendAnonymousFileHandle(UInt32 corellationId, IntPtr handle);
    private void SendIdentifiedFile(UInt32 corellationId, Guid id, IntPtr handle);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Profiler.Windows.SysTools.CoreInfo : object {
    public Guid Core;
    [NotNullAttribute]
public string Name;
    public CoreInfo(string name, Guid core);
}
public class JetBrains.Profiler.Windows.SysTools.DevelopmentServerTools : BaseServiceRemotable`1<SysTools> {
    private static string WebDevWebServerPrefix;
    private static Version2 ourRuntimeVersion2;
    private static Version2 ourVSVersion8;
    private static Version2 ourVSVersion9;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, Version2> CS$<>9__CachedAnonymousMethodDelegate6;
    public DevelopmentServerTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static DevelopmentServerTools();
    [CanBeNullAttribute]
private static Version2 GetVersionFromName(string path);
    [NotNullAttribute]
private static Version2 GetRuntimeVersionByVsVersion(Version2 vsVersion);
    [RemotableLongCallAttribute]
[NotNullAttribute]
public virtual IEnumerable`1<DevelopmentServerInfo> GetDevelopmentServers();
    [NotRemotableAttribute]
public void UpdateDisplay(DevelopmentServerArgument argument);
    [CompilerGeneratedAttribute]
private static Version2 <GetDevelopmentServers>b__0(FileSystemPath x);
}
public class JetBrains.Profiler.Windows.SysTools.DirectoryTools : BaseServiceRemotable`1<SysTools> {
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public DirectoryTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    [RemotableCallAttribute]
public virtual string GetGlobalTemp();
    [RemotableCallAttribute]
public virtual string GetTemp();
    [RemotableCallAttribute]
public virtual string CreateGlobalTempDirectory(string prefix);
    [RemotableCallAttribute]
public virtual string CreateUserTempDirectory(string prefix);
    [RemotableCallAttribute]
public virtual DirectoryInfo GetInfo(string remotePath);
    [RemotableCallAttribute]
public virtual bool ExistsDirectory(string remotePath);
    [RemotableCallAttribute]
public virtual void CreateDirectory(string remotePath);
    [RemotableCallAttribute]
public virtual void DeleteDirectory(string remotePath);
    [RemotableCallAttribute]
public virtual String[] GetChildDirectories(string remotePath, string searchPattern);
    [RemotableCallAttribute]
public virtual String[] GetChildFiles(string remotePath, string searchPattern);
    [CompilerGeneratedAttribute]
private static string <GetChildDirectories>b__0(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static string <GetChildFiles>b__2(FileSystemPath x);
}
public class JetBrains.Profiler.Windows.SysTools.EnvironmentProperty : object {
    public EnvironmentPropertyFlags Flags;
    [NotNullAttribute]
public string Key;
    private object myValue;
    public bool HasValue { get; }
    public RegValueType RegValueType { get; }
    [NotNullAttribute]
public string StringValue { get; }
    public UInt32 DWordValue { get; }
    public ulong QWordValue { get; }
    public Byte[] BinaryValue { get; }
    private EnvironmentProperty(EnvironmentPropertyFlags flags, string key, object value);
    public EnvironmentProperty(EnvironmentPropertyFlags flags, string key, string value);
    public EnvironmentProperty(EnvironmentPropertyFlags flags, string key, Nullable`1<UInt32> value);
    public EnvironmentProperty(EnvironmentPropertyFlags flags, string key, UInt32 value);
    public EnvironmentProperty(EnvironmentPropertyFlags flags, string key, Nullable`1<ulong> value);
    public EnvironmentProperty(EnvironmentPropertyFlags flags, string key, ulong value);
    public EnvironmentProperty(EnvironmentPropertyFlags flags, string key, Nullable`1<Guid> value);
    public EnvironmentProperty(EnvironmentPropertyFlags flags, string key, Guid value);
    public bool get_HasValue();
    public RegValueType get_RegValueType();
    public string get_StringValue();
    public UInt32 get_DWordValue();
    public ulong get_QWordValue();
    public Byte[] get_BinaryValue();
}
public enum JetBrains.Profiler.Windows.SysTools.EnvironmentPropertyFlags : Enum {
    public byte value__;
    public static EnvironmentPropertyFlags Runtime;
    public static EnvironmentPropertyFlags Core;
    public static EnvironmentPropertyFlags User;
}
public class JetBrains.Profiler.Windows.SysTools.EventTools : BaseServiceRemotable`1<SysTools> {
    private static int TimeoutExpired;
    private static ILogger ourLogger;
    private WatchedDictionary`1<EventWaitHandle> myEvents;
    [CompilerGeneratedAttribute]
private static Action`1<EventWaitHandle> CS$<>9__CachedAnonymousMethodDelegate1;
    public EventTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static EventTools();
    protected virtual void OnDispose();
    [NotRemotableAttribute]
[NotNullAttribute]
public IEventProxy CreateEvent(Lifetime lifetime, bool manualReset, bool initialState, string name);
    [CanBeNullAttribute]
[NotRemotableAttribute]
public IEventProxy TryOpenEvent(Lifetime lifetime, string name);
    [NotNullAttribute]
[NotRemotableAttribute]
public IEventProxy OpenEvent(Lifetime lifetime, string name);
    [NotRemotableAttribute]
public bool HasEvent(string name);
    [RemotableCallAttribute]
public virtual Guid Event_Create(bool manualReset, bool initialState, string name);
    [RemotableCallAttribute]
public virtual Guid Event_Open(string name);
    [RemotableCallAttribute]
public virtual bool Event_Has(string name);
    [RemotableLongCallAttribute]
public virtual bool Event_WaitOne(Guid id, TimeSpan timeout);
    [RemotableLongCallAttribute]
public virtual bool Event_WaitOne(Guid id, int timeout);
    [RemotableLongCallAttribute]
public virtual bool Event_WaitOne(Guid id);
    [RemotableCallAttribute]
public virtual void Event_Set(Guid id);
    [RemotableCallAttribute]
public virtual void Event_Reset(Guid id);
    [RemotableCallAttribute]
public virtual void Event_Touch(Guid id);
    [RemotableCallAttribute]
public virtual void Event_Close(Guid id);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(EventWaitHandle s);
}
public class JetBrains.Profiler.Windows.SysTools.EverythingEnvironmentTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static String[] ourHiveSeNames;
    [CompilerGeneratedAttribute]
private static Action`2<InstructionSet, KeyAccessRights> CS$<>9__CachedAnonymousMethodDelegate8;
    public EverythingEnvironmentTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static EverythingEnvironmentTools();
    [RemotableCallAttribute]
public virtual void CleanAllEverythingEnvironment(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    [RemotableCallAttribute]
public virtual void CleanEverythingEnvironment(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    [RemotableCallAttribute]
public virtual void UpdateEverythingEnvironment(EnvironmentProperty[] environmentProperties);
    private static void CleanEnvironmentForCurrentUser(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    private static void SetEnvironmentForCurrentUser(IEnumerable`1<EnvironmentProperty> properties);
    private void CleanEnvironmentForHiveUsers(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    [CanBeNullAttribute]
private static string FilterProduct(EnvironmentPropertyFlags flags, string key);
    private void CleanEnvironmentForProduct(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    private void UpdateEnvironmentForProduct(EnvironmentProperty[] environmentProperties);
    [CanBeNullAttribute]
private static string FilterClr(EnvironmentPropertyFlags flags, string key);
    private void CleanEnvironmentForClr(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    private void UpdateEnvironmentForClr(EnvironmentProperty[] environmentProperties);
    [CanBeNullAttribute]
private static string FilterAllUsers(EnvironmentPropertyFlags flags, string key);
    private static void CleanEnvironmentForAllUsers(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    private static void UpdateEnvironmentForAllUsers(IEnumerable`1<EnvironmentProperty> environmentProperties);
    [CompilerGeneratedAttribute]
private static void <CleanEnvironmentForProduct>b__7(InstructionSet instructionSet, KeyAccessRights rights);
}
public class JetBrains.Profiler.Windows.SysTools.EverythingTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static MessageResult ourMessageResult_AdministrativeRightRequired;
    private static MessageResult ourMessageResult_Communication;
    public EverythingTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static EverythingTools();
    [NotRemotableAttribute]
public MessageResult IsSupported(HostCompatibilityOptions options);
}
public class JetBrains.Profiler.Windows.SysTools.FileCacheTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static FileSystemPath ourSysToolsDir;
    [CompilerGeneratedAttribute]
private static Action`1<FileStream> CS$<>9__CachedAnonymousMethodDelegate10;
    public FileCacheTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static FileCacheTools();
    [NotRemotableAttribute]
[NotNullAttribute]
public string CacheFiles(string localDir, IEnumerable`1<string> relativeFiles);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual FileDescriptorSet CheckCachedFiles(FileDescriptor[] expected);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual string CreateCacheFile(string relativeFile, DateTime creationUtcTime);
    [RemotableCallAttribute]
public virtual void GrantFile_BuiltinUsers_ReadAndExecute(string file);
    [RemotableCallAttribute]
public virtual void GrantFile_AllAppPackages_ReadAndExecute(string file);
    [RemotableCallAttribute]
public virtual void GrantDirectory_BuiltinUsers_ReadAndExecute(string directory, bool inherit);
    [RemotableCallAttribute]
public virtual void GrantDirectory_AllAppPackages_ReadAndExecute(string directory, bool inherit);
    [RemotableCallAttribute]
public virtual void GrantDirectory_BuiltinUsers_Modify(string directory, bool inherit);
    [CompilerGeneratedAttribute]
private static void <CreateCacheFile>b__f(FileStream s);
}
public class JetBrains.Profiler.Windows.SysTools.FileDescriptorSet : object {
    public string CacheDir;
    public FileDescriptor[] Corrupted;
}
public class JetBrains.Profiler.Windows.SysTools.FileStorageTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private WatchedDictionary`1<FileSystemPath> myFiles;
    [CompilerGeneratedAttribute]
private static Action`1<FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate1;
    public FileStorageTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static FileStorageTools();
    [RemotableCallAttribute]
public virtual Guid AddFile(string file, ILifetimeIdentity lifetimeIdentity);
    [RemotableCallAttribute]
public virtual string GetFileName(Guid id);
    [RemotableCallAttribute]
public virtual void DeleteFile(Guid id);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(FileSystemPath file);
}
public class JetBrains.Profiler.Windows.SysTools.FileTools : BaseServiceRemotable`1<SysTools> {
    public FileTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    [RemotableCallAttribute]
public virtual string CreateGlobalTempFile(string prefix);
    [RemotableCallAttribute]
public virtual string CreateUserTempFile(string prefix);
    [RemotableCallAttribute]
public virtual FileInfo GetFileInfo(string remoteFile);
    [RemotableCallAttribute]
public virtual bool ExistsFile(string remoteFile);
    [NotRemotableAttribute]
public Stream Put(string remoteFile);
    [NotRemotableAttribute]
public Stream Get(string remoteFile);
    [RemotableCallAttribute]
public virtual void DeleteFile(string remoteFile);
    [RemotableCallAttribute]
public virtual void CopyFile(string remoteSourceFile, string remoteDestinationFile, CopyFileMode mode);
    [RemotableCallAttribute]
public virtual void MoveFile(string remoteSourceFile, string remoteDestinationFile, MoveFileMode mode);
}
public class JetBrains.Profiler.Windows.SysTools.FrameworkTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    public FrameworkTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static FrameworkTools();
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual string GetRuntimeDirectory(InstructionSet instructionSet, Version frameworkVersion);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual IEnumerable`1<Version> GetInstalledRuntimeVersions(InstructionSet instructionSet);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual IEnumerable`1<Version> GetInstalledFrameworkVersions(InstructionSet instructionSet, Version runtimeVersion);
    [CompilerGeneratedAttribute]
private static bool <GetInstalledFrameworkVersions>b__7(string x);
}
public interface JetBrains.Profiler.Windows.SysTools.IChannelProxy {
    public abstract virtual bool WaitForDataToRead(TimeSpan timeout);
    public abstract virtual bool WaitForDataToRead(int timeout);
    [NotNullAttribute]
public abstract virtual Tuple`2<byte, Byte[]> ReceiveCommand();
    public abstract virtual void SendCommand(byte command, Byte[] data);
    public abstract virtual void Close();
}
public interface JetBrains.Profiler.Windows.SysTools.ICommunicationToolsStream {
    [NotNullAttribute]
public abstract virtual Tuple`2<byte, Byte[]> ReceiveCommand();
    public abstract virtual bool HasDataToRead(int timeout);
    public abstract virtual void SendCommand(byte command, Byte[] data);
    public abstract virtual void Shutdown();
    public abstract virtual void Close();
}
public interface JetBrains.Profiler.Windows.SysTools.IEventProxy {
    public abstract virtual void Set();
    public abstract virtual void Reset();
}
public class JetBrains.Profiler.Windows.SysTools.IISExpressTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    public IISExpressTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static IISExpressTools();
    [NotNullAttribute]
[RemotableLongCallAttribute]
public virtual IEnumerable`1<IISSiteInfo> GetIISExpressSites(string iisExpress, bool useDefaultConfigurationFile, string configurationFile);
    [RemotableLongCallAttribute]
[NotNullAttribute]
public virtual IEnumerable`1<IISExpressInfo> GetIISExpresses();
    [NotRemotableAttribute]
public void UpdateDisplay(IISExpressArgument argument);
}
public class JetBrains.Profiler.Windows.SysTools.IISTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static MessageResult ourMessageResult_AdministrativeRightRequired;
    private static MessageResult ourMessageResult_NoIISDetected;
    private static MessageResult ourMessageResult_Communication;
    public IISTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static IISTools();
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual string GetIISServiceName();
    [NotRemotableAttribute]
[NotNullAttribute]
public MessageResult IsSupported(HostCompatibilityOptions options);
    [NotRemotableAttribute]
public void UpdateDisplay(IISArgument argument);
}
public interface JetBrains.Profiler.Windows.SysTools.ILifetimeIdentity {
}
public interface JetBrains.Profiler.Windows.SysTools.IListenerProxy {
    [NotNullAttribute]
public IPEndPoint EndPoint { get; }
    public abstract virtual IPEndPoint get_EndPoint();
    [NotNullAttribute]
public abstract virtual Guid[] GetNewStreamIds(TimeSpan timeout);
    [NotNullAttribute]
public abstract virtual Guid[] GetNewStreamIds(int timeout);
    public abstract virtual void Close();
    public abstract virtual void InjectProxyStreamFactory(Type type, Object[] args);
}
internal static class JetBrains.Profiler.Windows.SysTools.Impl.ArgumentsUtil : object {
    [CompilerGeneratedAttribute]
private static Func`2<EnvironmentProperty, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`3<StringBuilder, EnvironmentProperty, StringBuilder> CS$<>9__CachedAnonymousMethodDelegate3;
    [NotNullAttribute]
public static String[] BuildCoreHelper_List(FileSystemPath resultFile);
    [NotNullAttribute]
public static String[] BuildCoreHelper_Attach(FileSystemPath resultFile, int processId, Version runtimeVersion, Guid coreGuid, string profilerDll);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_GetPackages(FileSystemPath resultFile);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_GetPackagesForCurrentUser(FileSystemPath resultFile);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_PrepareStartProfiling(FileSystemPath resultFile, bool fixNetworkIsolation, string packageFullName, IEnumerable`1<EnvironmentProperty> environment);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_CleanStartProfiling(FileSystemPath resultFile, string packageFullName);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_PrepareAttachProfiling(FileSystemPath resultFile, bool fixNetworkIsolation, UInt32 sessionId, string packageFullName);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_CleanAttachProfiling(FileSystemPath resultFile, UInt32 sessionId, string packageFullName);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_PrepareEverythingProfiling(FileSystemPath resultFile, bool fixNetworkIsolation);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_CleanEverythingProfiling(FileSystemPath resultFile);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_RunProfiling(FileSystemPath resultFile, string appUserModelId, string arguments);
    [NotNullAttribute]
public static String[] BuildWinRTHelper_CleanProfiling(FileSystemPath resultFile, string packageFullName);
    [CompilerGeneratedAttribute]
private static bool <BuildWinRTHelper_PrepareStartProfiling>b__0(EnvironmentProperty x);
    [CompilerGeneratedAttribute]
private static StringBuilder <BuildWinRTHelper_PrepareStartProfiling>b__1(StringBuilder x, EnvironmentProperty y);
}
internal class JetBrains.Profiler.Windows.SysTools.Impl.ChannelProxy : object {
    private static int TimeoutTouch;
    private static ILogger ourLogger;
    private LifetimeDefinition myDestroy;
    private CommunicationTools myCommunicationTools;
    private Guid myStreamId;
    private int myWasDisposed;
    public ChannelProxy(Lifetime lifetime, CommunicationTools communicationTools, bool withTouch, Guid streamId);
    private static ChannelProxy();
    public sealed virtual bool WaitForDataToRead(TimeSpan timeout);
    public sealed virtual bool WaitForDataToRead(int timeout);
    public sealed virtual Tuple`2<byte, Byte[]> ReceiveCommand();
    public sealed virtual void SendCommand(byte command, Byte[] data);
    public sealed virtual void Close();
    private void AssertAlive();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
}
internal static class JetBrains.Profiler.Windows.SysTools.Impl.DecoratorUtil : object {
    [NotNullAttribute]
public static Process GetProcessById(int processId);
}
internal class JetBrains.Profiler.Windows.SysTools.Impl.EventProxy : object {
    private static int TimeoutTouch;
    private static ILogger ourLogger;
    private LifetimeDefinition myDestroy;
    private EventTools myEventTools;
    private Guid myId;
    private int myWasDisposed;
    internal EventProxy(Lifetime lifetime, EventTools eventTools, bool withTouch, Guid id);
    private static EventProxy();
    public sealed virtual bool WaitOne(TimeSpan timeout);
    public sealed virtual bool WaitOne(int timeout);
    public sealed virtual bool WaitOne();
    public sealed virtual void Set();
    public sealed virtual void Reset();
    public sealed virtual void Close();
    private void AssertAlive();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
}
public class JetBrains.Profiler.Windows.SysTools.Impl.LifetimeIdentity : object {
    private Guid myId;
    public Guid Id { get; }
    public LifetimeIdentity(Guid id);
    public Guid get_Id();
    public virtual string ToString();
}
internal class JetBrains.Profiler.Windows.SysTools.Impl.ListenerProxy : object {
    private static int TimeoutTouch;
    private static ILogger ourLogger;
    private LifetimeDefinition myDestroy;
    private Guid myListenerId;
    private CommunicationTools myCommunicationTools;
    private int myWasDisposed;
    public IPEndPoint EndPoint { get; }
    public ListenerProxy(Lifetime lifetime, CommunicationTools communicationTools, bool withTouch, Guid listenerId);
    private static ListenerProxy();
    public sealed virtual IPEndPoint get_EndPoint();
    public sealed virtual Guid[] GetNewStreamIds(TimeSpan timeout);
    public sealed virtual Guid[] GetNewStreamIds(int timeout);
    public sealed virtual void Close();
    public sealed virtual void InjectProxyStreamFactory(Type type, Object[] args);
    private void AssertAlive();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
}
internal static class JetBrains.Profiler.Windows.SysTools.Impl.MessageUtil : object {
    public static void NotifyAllWindowsAboutEnvironmentChanging();
}
internal static class JetBrains.Profiler.Windows.SysTools.Impl.ParseUtil : object {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, PackageInfo> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<XmlElement, ApplicationInfo> CS$<>9__CachedAnonymousMethodDelegateb;
    private static ParseUtil();
    [NotNullAttribute]
private static XmlElement LoadXml(FileSystemPath resultFile);
    [NotNullAttribute]
public static IISSiteInfo[] ParseIISConfiguration(FileSystemPath configurationFile);
    [NotNullAttribute]
private static Tuple`2<HResults, string> GetResult(XmlElement xmlRoot);
    [NotNullAttribute]
private static UserInfo GetUserInfo(XmlElement xmlRoot);
    private static ProcessInfo[] GetProcessList(XmlElement xmlRoot, InstructionSet instructionSet);
    [NotNullAttribute]
private static PackageInfo[] GetPackageList(XmlElement xmlRoot);
    [NotNullAttribute]
public static Tuple`2<HResults, string> ParseHelperResult(FileSystemPath resultFile);
    [NotNullAttribute]
public static Tuple`3<HResults, string, ProcessInfo[]> ParseAttachHelperResult_List(InstructionSet instructionSet, FileSystemPath resultFile);
    [NotNullAttribute]
public static Tuple`3<HResults, string, UserInfo> ParseWinRTHelperResult_User(FileSystemPath resultFile);
    [NotNullAttribute]
public static Tuple`3<HResults, string, PackageInfo[]> ParseWinRTHelperResult_List(FileSystemPath resultFile);
    [NotNullAttribute]
public static Tuple`3<HResults, string, Tuple`2<UserInfo, PackageInfo[]>> ParseWinRTHelperResult_CurrentUserList(FileSystemPath resultFile);
    [CompilerGeneratedAttribute]
private static PackageInfo <GetPackageList>b__8(XmlElement xmlPackage);
    [CompilerGeneratedAttribute]
private static ApplicationInfo <GetPackageList>b__9(XmlElement xmlApplication);
}
internal class JetBrains.Profiler.Windows.SysTools.Impl.ProcessProxy : object {
    private static int TimeoutTouch;
    private static ILogger ourLogger;
    private LifetimeDefinition myDestroy;
    private ProcessTools myProcessTools;
    private RemotableProcessStartInfo myStartInfo;
    private RemotableProcessInfo myProcessInfo;
    private int myWasDisposed;
    public int ProcessId { get; }
    public int SessionId { get; }
    public long AuthenticationId { get; }
    public InstructionSet InstructionSet { get; }
    public string ProcessName { get; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    public bool IsStarted { get; }
    private ProcessProxy(Lifetime lifetime, ProcessTools processTools, bool withTouch);
    internal ProcessProxy(Lifetime lifetime, ProcessTools processTools, bool withTouch, RemotableProcessStartInfo startInfo);
    internal ProcessProxy(Lifetime lifetime, ProcessTools processTools, bool withTouch, RemotableProcessInfo processInfo);
    private static ProcessProxy();
    public sealed virtual int get_ProcessId();
    public sealed virtual int get_SessionId();
    public sealed virtual long get_AuthenticationId();
    public sealed virtual InstructionSet get_InstructionSet();
    public sealed virtual string get_ProcessName();
    public sealed virtual int get_ExitCode();
    public sealed virtual bool get_HasExited();
    public sealed virtual bool get_IsStarted();
    public sealed virtual bool Start();
    public sealed virtual void Kill();
    public sealed virtual void KillTree();
    public sealed virtual bool CloseMainWindow();
    public sealed virtual bool WaitForExit(TimeSpan timeout);
    public sealed virtual bool WaitForExit(int timeout);
    public sealed virtual bool WaitForExit();
    public sealed virtual void Close();
    private void AssertAlive();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
}
internal class JetBrains.Profiler.Windows.SysTools.Impl.SemaphoreProxy : object {
    private static int TimeoutTouch;
    private static ILogger ourLogger;
    private LifetimeDefinition myDestroy;
    private Guid myId;
    private SemaphoreTools mySemaphoreTools;
    private int myWasDisposed;
    internal SemaphoreProxy(Lifetime lifetime, SemaphoreTools semaphoreTools, bool withTouch, Guid id);
    private static SemaphoreProxy();
    public sealed virtual bool WaitOne(TimeSpan timeout);
    public sealed virtual bool WaitOne(int timeout);
    public sealed virtual bool WaitOne();
    public sealed virtual int Release();
    public sealed virtual int Release(int times);
    public sealed virtual void Close();
    private void AssertAlive();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
}
internal class JetBrains.Profiler.Windows.SysTools.Impl.ServiceProxy : object {
    private static int TimeoutTouch;
    private static ILogger ourLogger;
    private LifetimeDefinition myDestroy;
    private Guid myId;
    private WindowsServiceTools myWindowsServiceTools;
    private int myWasDisposed;
    public string Name { get; }
    public string DisplayName { get; }
    public ServiceType ServiceType { get; }
    public ServiceControllerStatus Status { get; }
    public bool CanStop { get; }
    public bool CanPauseAndContinue { get; }
    public bool CanShutdown { get; }
    public String[] ServicesDependedOn { get; }
    public String[] DependentServices { get; }
    public String[] SameProcessServices { get; }
    public String[] SameImagePathServices { get; }
    public string SvcHostGroup { get; }
    public String[] SvcHostServices { get; }
    internal ServiceProxy(Lifetime lifetime, WindowsServiceTools windowsServiceTools, bool withTouch, Guid id);
    private static ServiceProxy();
    public sealed virtual string get_Name();
    public sealed virtual string get_DisplayName();
    public sealed virtual ServiceType get_ServiceType();
    public sealed virtual ServiceControllerStatus get_Status();
    public sealed virtual bool get_CanStop();
    public sealed virtual bool get_CanPauseAndContinue();
    public sealed virtual bool get_CanShutdown();
    public sealed virtual String[] get_ServicesDependedOn();
    public sealed virtual String[] get_DependentServices();
    public sealed virtual String[] get_SameProcessServices();
    public sealed virtual String[] get_SameImagePathServices();
    public sealed virtual string get_SvcHostGroup();
    public sealed virtual String[] get_SvcHostServices();
    public sealed virtual IProcessProxy GetProcess(Lifetime lifetime);
    public sealed virtual void Start(String[] args);
    public sealed virtual void Stop();
    public sealed virtual void Pause();
    public sealed virtual void Continue();
    public sealed virtual void Close();
    private void AssertAlive();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
}
internal static class JetBrains.Profiler.Windows.SysTools.Impl.SysToolsRootRegistryPaths : object {
    public static BackSlashSeparatedRelativePath Profiler;
    public static BackSlashSeparatedRelativePath ProfilerGlobal;
    public static BackSlashSeparatedRelativePath ProfilerTransparentIntegration;
    public static BackSlashSeparatedRelativePath WptInstallKey;
    private static SysToolsRootRegistryPaths();
}
public class JetBrains.Profiler.Windows.SysTools.IntegrationCoreInfo : object {
    [NotNullAttribute]
public CoreInfo Info;
    private Nullable`1<Guid> myIntegrationCore;
    public bool UseIntegration { get; }
    public Guid PrimaryCore { get; }
    public Guid SecondaryCore { get; }
    public IntegrationCoreInfo(CoreInfo info);
    public IntegrationCoreInfo(CoreInfo info, Guid integrationCore);
    public bool get_UseIntegration();
    public Guid get_PrimaryCore();
    public Guid get_SecondaryCore();
}
public interface JetBrains.Profiler.Windows.SysTools.IProcessProxy {
    public int ProcessId { get; }
    public int SessionId { get; }
    public long AuthenticationId { get; }
    [CanBeNullAttribute]
public string ProcessName { get; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    public InstructionSet InstructionSet { get; }
    public bool IsStarted { get; }
    public abstract virtual int get_ProcessId();
    public abstract virtual int get_SessionId();
    public abstract virtual long get_AuthenticationId();
    public abstract virtual string get_ProcessName();
    public abstract virtual int get_ExitCode();
    public abstract virtual bool get_HasExited();
    public abstract virtual InstructionSet get_InstructionSet();
    public abstract virtual bool get_IsStarted();
    public abstract virtual bool Start();
    public abstract virtual void Kill();
    public abstract virtual void KillTree();
    public abstract virtual bool CloseMainWindow();
    public abstract virtual bool WaitForExit(TimeSpan timeout);
    public abstract virtual bool WaitForExit(int timeout);
    public abstract virtual bool WaitForExit();
    public abstract virtual void Close();
}
public interface JetBrains.Profiler.Windows.SysTools.ISemaphoreProxy {
    public abstract virtual int Release();
    public abstract virtual int Release(int times);
}
public interface JetBrains.Profiler.Windows.SysTools.IServiceProxy {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string DisplayName { get; }
    public ServiceType ServiceType { get; }
    public ServiceControllerStatus Status { get; }
    public bool CanStop { get; }
    public bool CanPauseAndContinue { get; }
    public bool CanShutdown { get; }
    [NotNullAttribute]
public String[] ServicesDependedOn { get; }
    [NotNullAttribute]
public String[] DependentServices { get; }
    [NotNullAttribute]
public String[] SameProcessServices { get; }
    [NotNullAttribute]
public String[] SameImagePathServices { get; }
    [CanBeNullAttribute]
public string SvcHostGroup { get; }
    [NotNullAttribute]
public String[] SvcHostServices { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual ServiceType get_ServiceType();
    public abstract virtual ServiceControllerStatus get_Status();
    public abstract virtual bool get_CanStop();
    public abstract virtual bool get_CanPauseAndContinue();
    public abstract virtual bool get_CanShutdown();
    public abstract virtual String[] get_ServicesDependedOn();
    public abstract virtual String[] get_DependentServices();
    public abstract virtual String[] get_SameProcessServices();
    public abstract virtual String[] get_SameImagePathServices();
    public abstract virtual string get_SvcHostGroup();
    public abstract virtual String[] get_SvcHostServices();
    [CanBeNullAttribute]
public abstract virtual IProcessProxy GetProcess(Lifetime lifetime);
    public abstract virtual void Start(String[] args);
    public abstract virtual void Stop();
    public abstract virtual void Pause();
    public abstract virtual void Continue();
    public abstract virtual void Close();
}
public interface JetBrains.Profiler.Windows.SysTools.IWaitHandleProxy {
    public abstract virtual bool WaitOne(TimeSpan timeout);
    public abstract virtual bool WaitOne(int timeout);
    public abstract virtual bool WaitOne();
    public abstract virtual void Close();
}
public class JetBrains.Profiler.Windows.SysTools.LeafTestTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    public LeafTestTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static LeafTestTools();
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual string SelfCheckCall(string str);
    [RemotableLongCallAttribute]
[NotNullAttribute]
public virtual string SelfCheckLongCall(string str);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual string RootSelfCheck(string str);
}
public class JetBrains.Profiler.Windows.SysTools.LifetimeTools : BaseServiceRemotable`1<SysTools> {
    private static int TimeoutExpired;
    private static int TimeoutTouch;
    private static ILogger ourLogger;
    private WatchedDictionary`1<LifetimeDefinition> myLifetimeDefinitions;
    [CompilerGeneratedAttribute]
private static Action`1<LifetimeDefinition> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Guid, LifetimeDefinition> CS$<>9__CachedAnonymousMethodDelegate8;
    public LifetimeTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static LifetimeTools();
    [NotNullAttribute]
public ILifetimeIdentity CreateLifetime(Lifetime lifetime);
    [NotNullAttribute]
public Lifetime GetLifetime(ILifetimeIdentity lifetimeIdentity);
    [RemotableCallAttribute]
public virtual LifetimeIdentity LifetimeDefinition_Create();
    [RemotableCallAttribute]
public virtual void LifetimeDefinition_TerminateAndClose(LifetimeIdentity lifetimeIdentity);
    [RemotableCallAttribute]
public virtual void LifetimeDefinition_Touch(LifetimeIdentity lifetimeIdentity);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(LifetimeDefinition ld);
    [CompilerGeneratedAttribute]
private static LifetimeDefinition <LifetimeDefinition_Create>b__7(Guid id);
}
public class JetBrains.Profiler.Windows.SysTools.MetroTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static MessageResult ourMessageResult_InvalidOSVersion;
    private static MessageResult ourMessageResult_UACNotActive;
    private static MessageResult ourMessageResult_Communication;
    private FileSystemPath modreq(System.Runtime.CompilerServices.IsVolatile) myExecutable;
    [CompilerGeneratedAttribute]
private static Func`1<MessageResult> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, Tuple`3<HResults, string, UserInfo>> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, Tuple`3<HResults, string, Tuple`2<UserInfo, PackageInfo[]>>> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, Tuple`3<HResults, string, PackageInfo[]>> CS$<>9__CachedAnonymousMethodDelegate22;
    public MetroTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static MetroTools();
    [RemotableCallAttribute]
public virtual bool HasExecutable();
    [RemotableCallAttribute]
public virtual void SetExecutable(string fileName);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual MessageResult IsSupported();
    [RemotableCallAttribute]
[CanBeNullAttribute]
public virtual string GetPackageFullName(int pid);
    [NotRemotableAttribute]
public void UpdateDisplay(MetroArgument argument);
    [RemotableLongCallAttribute]
public virtual void PrepareAttachProfiling(bool fixNetworkIsolation, UInt32 sessionId, string packageFullName);
    [RemotableLongCallAttribute]
public virtual void CleanAttachProfiling(UInt32 sessionId, string packageFullName);
    [RemotableLongCallAttribute]
public virtual void PrepareStartProfiling(bool fixNetworkIsolation, string packageFullName, IEnumerable`1<EnvironmentProperty> environmentVariables);
    [RemotableLongCallAttribute]
public virtual void CleanStartProfiling(string packageFullName);
    [RemotableLongCallAttribute]
public virtual void RunProfiling(string appUserModelId, string arguments);
    [NotNullAttribute]
[RemotableLongCallAttribute]
public virtual IEnumerable`1<PackageInfo> GetMetroPackagesForCurrentUser();
    [RemotableLongCallAttribute]
public virtual void PrepareEverythingProfiling(bool fixNetworkIsolation);
    [RemotableLongCallAttribute]
public virtual void CleanEverythingProfiling();
    [NotNullAttribute]
[RemotableLongCallAttribute]
public virtual IEnumerable`1<PackageInfo> GetMetroPackages();
    [NotNullAttribute]
private static FileSystemPath CheckExecutable(FileSystemPath executable);
    [NotNullAttribute]
private FileSystemPath GetExecutable();
    private void RunWinRTHelper(bool runAsReducedUser, Func`2<FileSystemPath, String[]> getArguments, Func`2<FileSystemPath, Tuple`2<HResults, string>> parseResult);
    private T RunWinRTHelper(bool runAsReducedUser, Func`2<FileSystemPath, String[]> getArguments, Func`2<FileSystemPath, Tuple`3<HResults, string, T>> parseResult);
    [CompilerGeneratedAttribute]
private static MessageResult <IsSupported>b__0();
    [CompilerGeneratedAttribute]
private static Tuple`3<HResults, string, UserInfo> <RunProfiling>b__18(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static Tuple`3<HResults, string, Tuple`2<UserInfo, PackageInfo[]>> <GetMetroPackagesForCurrentUser>b__1c(FileSystemPath x);
    [CompilerGeneratedAttribute]
private static Tuple`3<HResults, string, PackageInfo[]> <GetMetroPackages>b__21(FileSystemPath x);
}
public class JetBrains.Profiler.Windows.SysTools.ProcessTools : BaseServiceRemotable`1<SysTools> {
    private static int TimeoutExpired;
    private static ILogger ourLogger;
    private WatchedDictionary`1<Process> myProcesses;
    private static int ourUid;
    [CompilerGeneratedAttribute]
private static Action`1<Process> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate11;
    public ProcessTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static ProcessTools();
    protected virtual void OnDispose();
    [NotNullAttribute]
[NotRemotableAttribute]
public IProcessProxy CreateProcess(Lifetime lifetime, RemotableProcessStartInfo startInfo);
    [CanBeNullAttribute]
[NotRemotableAttribute]
public IProcessProxy GetProcessById(Lifetime lifetime, int processId);
    [RemotableLongCallAttribute]
public virtual void ExecuteBrowser(Tuple`2<ProcessInfo, MetroInfo> startInfo);
    [RemotableCallAttribute]
public virtual bool HasByProcessName(string processName);
    [RemotableCallAttribute]
public virtual bool HasByProcessName(string processNamePattern, RegexOptions regexOptions);
    [RemotableLongCallAttribute]
public virtual void KillByProcessName(string processName);
    [RemotableLongCallAttribute]
public virtual void KillByProcessName(string processNamePattern, RegexOptions regexOptions);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual RemotableProcessInfo Process_GetById(int processId);
    [NotNullAttribute]
[RemotableLongCallAttribute]
public virtual RemotableProcessInfo Process_Start(RemotableProcessStartInfo processStartInfo);
    [RemotableLongCallAttribute]
public virtual bool Process_WaitForExit(Guid id, TimeSpan timeout);
    [RemotableLongCallAttribute]
public virtual bool Process_WaitForExit(Guid id, int timeout);
    [RemotableLongCallAttribute]
public virtual bool Process_WaitForExit(Guid id);
    [RemotableCallAttribute]
public virtual void Process_Kill(Guid id);
    [RemotableLongCallAttribute]
public virtual void Process_KillTree(Guid id);
    [RemotableLongCallAttribute]
public virtual bool Process_CloseMainWindow(Guid id);
    [RemotableCallAttribute]
public virtual bool Process_HasExited(Guid id);
    [RemotableCallAttribute]
public virtual int Process_ExitCode(Guid id);
    [RemotableCallAttribute]
public virtual void Process_Touch(Guid id);
    [RemotableCallAttribute]
public virtual void Process_Close(Guid id);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(Process s);
    [CompilerGeneratedAttribute]
private static string <Process_Start>b__e(KeyValuePair`2<string, string> v);
}
public class JetBrains.Profiler.Windows.SysTools.RemotableProcessInfo : object {
    public long AuthenticationId;
    public Guid Id;
    public InstructionSet InstructionSet;
    [CanBeNullAttribute]
public string Name;
    public int ProcessId;
    public int SessionId;
    public RemotableProcessInfo(Guid id, int processId, int sessionId, long authenticationId, InstructionSet instructionSet, string name);
}
public class JetBrains.Profiler.Windows.SysTools.RemotableProcessStartInfo : object {
    [NotNullAttribute]
public string FileName;
    [CanBeNullAttribute]
public string Arguments;
    [CanBeNullAttribute]
public string WorkingDirectory;
    public bool CreateNoWindow;
    public bool CreateNewProcessGroup;
    [CanBeNullAttribute]
public KeyValuePair`2[] EnvironmentVariables;
    public bool DisableFsRedirection;
}
public class JetBrains.Profiler.Windows.SysTools.RunTools : BaseServiceRemotable`1<SysTools> {
    private static int TimeoutRun;
    private static ILogger ourLogger;
    public RunTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static RunTools();
    [NotRemotableAttribute]
public void RunRegSvr32(string remoteDllFile, InstructionSet instructionSet, RunFlags runFlags, IEnumerable`1<KeyValuePair`2<string, string>> environmentVariables);
    [NotRemotableAttribute]
public void RunInstallUtil(string remoteDllFile, InstructionSet instructionSet, Version runtimeVersion, RunFlags runFlags);
    [RemotableLongCallAttribute]
public virtual int RunConsoleExecutable(string executable, String[] arguments, IEnumerable`1<KeyValuePair`2<string, string>> environmentVariables);
}
public class JetBrains.Profiler.Windows.SysTools.SemaphoreTools : BaseServiceRemotable`1<SysTools> {
    private static int TimeoutExpired;
    private static ILogger ourLogger;
    private WatchedDictionary`1<Semaphore> mySemaphores;
    [CompilerGeneratedAttribute]
private static Action`1<Semaphore> CS$<>9__CachedAnonymousMethodDelegate1;
    public SemaphoreTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static SemaphoreTools();
    protected virtual void OnDispose();
    [NotNullAttribute]
[NotRemotableAttribute]
public ISemaphoreProxy CreateSemaphore(Lifetime lifetime, int initValue, int maxValue, string name);
    [NotRemotableAttribute]
[CanBeNullAttribute]
public ISemaphoreProxy TryOpenSemaphore(Lifetime lifetime, string name);
    [CanBeNullAttribute]
[NotRemotableAttribute]
public ISemaphoreProxy OpenSemaphore(Lifetime lifetime, string name);
    [NotRemotableAttribute]
public bool HasSemaphore(string name);
    [RemotableCallAttribute]
public virtual Guid Semaphore_Create(int initValue, int maxValue, string name);
    [RemotableCallAttribute]
public virtual Guid Semaphore_Open(string name);
    [RemotableCallAttribute]
public virtual bool Semaphore_Has(string name);
    [RemotableLongCallAttribute]
public virtual bool Semaphore_WaitOne(Guid id, TimeSpan timeout);
    [RemotableLongCallAttribute]
public virtual bool Semaphore_WaitOne(Guid id, int timeout);
    [RemotableLongCallAttribute]
public virtual bool Semaphore_WaitOne(Guid id);
    [RemotableCallAttribute]
public virtual int Semaphore_Release(Guid id);
    [RemotableCallAttribute]
public virtual int Semaphore_Release(Guid id, int times);
    [RemotableCallAttribute]
public virtual void Semaphore_Touch(Guid id);
    [RemotableCallAttribute]
public virtual void Semaphore_Close(Guid id);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(Semaphore s);
}
public class JetBrains.Profiler.Windows.SysTools.SilverlightTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static MessageResult ourMessageResult_NoSilverlight;
    private static MessageResult ourMessageResult_OldVersion;
    private static MessageResult ourMessageResult_Communication;
    [CompilerGeneratedAttribute]
private static Func`1<MessageResult> CS$<>9__CachedAnonymousMethodDelegate1;
    public SilverlightTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static SilverlightTools();
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual MessageResult IsSupported();
    [NotRemotableAttribute]
public void UpdateDisplay(SilverlightArgument argument);
    [CompilerGeneratedAttribute]
private static MessageResult <IsSupported>b__0();
}
internal class JetBrains.Profiler.Windows.SysTools.SocketListener : object {
    [NotNullAttribute]
private Socket mySocket;
    [NotNullAttribute]
private Func`2<Socket, ICommunicationToolsStream> myStreamFactory;
    [CompilerGeneratedAttribute]
private static Func`2<Socket, ICommunicationToolsStream> CS$<>9__CachedAnonymousMethodDelegate1;
    public EndPoint LocalEndPoint { get; }
    private SocketListener(Socket socket);
    public static KeyValuePair`2<Guid, SocketListener> Create(IPEndPoint endPoint, Func`2<SocketListener, Guid> listenerRegistrator);
    public List`1<Guid> Accept(int timeout, Func`2<ICommunicationToolsStream, Guid> streamRegistrator);
    public EndPoint get_LocalEndPoint();
    public void InjectProxyStreamFactory(Type type, SysTools sysTools, Object[] args);
    public void Close();
    [CompilerGeneratedAttribute]
private static ICommunicationToolsStream <.ctor>b__0(Socket s);
}
public class JetBrains.Profiler.Windows.SysTools.SysTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public AttachEnvironmentTools AttachEnvironmentTools;
    [RemotableComponentAttribute]
[NotNullAttribute]
[UsedImplicitlyAttribute]
public AttachTools AttachTools;
    [NotNullAttribute]
[RemotableComponentAttribute]
[UsedImplicitlyAttribute]
public BrowserTools BrowserTools;
    [UsedImplicitlyAttribute]
[RemotableComponentAttribute]
[NotNullAttribute]
public CleanupTools CleanupTools;
    [UsedImplicitlyAttribute]
[NotNullAttribute]
[RemotableComponentAttribute]
public CoreClrTools CoreClrTools;
    [RemotableComponentAttribute]
[NotNullAttribute]
[UsedImplicitlyAttribute]
public DevelopmentServerTools DevelopmentServerTools;
    [UsedImplicitlyAttribute]
[RemotableComponentAttribute]
[NotNullAttribute]
public DirectoryTools DirectoryTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public EverythingEnvironmentTools EverythingEnvironmentTools;
    [UsedImplicitlyAttribute]
[RemotableComponentAttribute]
[NotNullAttribute]
public EnvironmentTools EnvironmentTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public EtwTools EtwTools;
    [RemotableComponentAttribute]
[NotNullAttribute]
[UsedImplicitlyAttribute]
public EventTools EventTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public EverythingTools EverythingTools;
    [RemotableComponentAttribute]
[UsedImplicitlyAttribute]
[NotNullAttribute]
public FileCacheTools FileCacheTools;
    [UsedImplicitlyAttribute]
[RemotableComponentAttribute]
[NotNullAttribute]
public FileTools FileTools;
    [UsedImplicitlyAttribute]
[RemotableComponentAttribute]
[NotNullAttribute]
public FileStorageTools FileStorageTools;
    [NotNullAttribute]
[RemotableComponentAttribute]
[UsedImplicitlyAttribute]
public FrameworkTools FrameworkTools;
    [NotNullAttribute]
[RemotableComponentAttribute]
[UsedImplicitlyAttribute]
public IISExpressTools IISExpressTools;
    [UsedImplicitlyAttribute]
[RemotableComponentAttribute]
[NotNullAttribute]
public IISTools IISTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public InstructionSetTools InstructionSetTools;
    [UsedImplicitlyAttribute]
[NotNullAttribute]
[RemotableComponentAttribute]
public MetroTools MetroTools;
    [RemotableComponentAttribute]
[NotNullAttribute]
[UsedImplicitlyAttribute]
public CommunicationTools CommunicationTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public ProcessTools ProcessTools;
    [NotNullAttribute]
[RemotableComponentAttribute]
[UsedImplicitlyAttribute]
public RegistryHiveTools RegistryHiveTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public RunTools RunTools;
    [UsedImplicitlyAttribute]
[NotNullAttribute]
[RemotableComponentAttribute]
public SemaphoreTools SemaphoreTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public SilverlightTools SilverlightTools;
    [RemotableComponentAttribute]
[UsedImplicitlyAttribute]
[NotNullAttribute]
public TestTools TestTools;
    [UsedImplicitlyAttribute]
[NotNullAttribute]
[RemotableComponentAttribute]
public TransparentIntegrationTools TransparentIntegrationTools;
    [NotNullAttribute]
[RemotableComponentAttribute]
[UsedImplicitlyAttribute]
public WcfHostTools WcfHostTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public WindowsServiceEnvironmentTools WindowsServiceEnvironmentTools;
    [RemotableComponentAttribute]
[NotNullAttribute]
[UsedImplicitlyAttribute]
public WindowsServiceTools WindowsServiceTools;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public LifetimeTools LifetimeTools;
    private OperatingSystem myOSVersion;
    private Nullable`1<HostElevationMode> myElevationMode;
    private Nullable`1<bool> myHasAdministrativeRights;
    private Nullable`1<bool> myIsUserInteractive;
    [NotRemotableAttribute]
public OperatingSystem OSVersion { get; }
    [NotRemotableAttribute]
public HostElevationMode ElevationMode { get; }
    [NotRemotableAttribute]
public bool HasAdministrativeRights { get; }
    [NotRemotableAttribute]
public bool IsUserInteractive { get; }
    public SysTools(ServiceLocation location, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static SysTools();
    [NotNullAttribute]
private static object CreateLocal(SysTools root, String[] ids, Type type);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual string SelfCheckCall(string str);
    [NotNullAttribute]
[RemotableLongCallAttribute]
public virtual string SelfCheckLongCall(string str);
    [NotRemotableAttribute]
internal KeyAccessRights CheckRights(KeyAccessRights rights);
    [RemotableCallAttribute]
public virtual void AdjustPrivilege(String[] seName, bool isEnabled);
    [NotRemotableTargetOnlyAttribute]
internal void UnderPriveleges(String[] seNames, Action action);
    protected internal virtual Stream OpenReadFile(string fileName);
    protected internal virtual Stream CreateAppendFile(string fileName);
    public OperatingSystem get_OSVersion();
    [RemotableCallAttribute]
public virtual OperatingSystem GetOSVersion();
    public HostElevationMode get_ElevationMode();
    [RemotableCallAttribute]
public virtual HostElevationMode GetElevationMode();
    public bool get_HasAdministrativeRights();
    [RemotableCallAttribute]
public virtual bool GetHasAdministrativeRights();
    public bool get_IsUserInteractive();
    [RemotableCallAttribute]
public virtual bool GetIsUserInteractive();
}
public class JetBrains.Profiler.Windows.SysTools.TestTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    [NotNullAttribute]
[UsedImplicitlyAttribute]
[RemotableComponentAttribute]
public LeafTestTools LeafTestTools;
    public TestTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static TestTools();
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual string SelfCheckCall(string str);
    [RemotableLongCallAttribute]
[NotNullAttribute]
public virtual string SelfCheckLongCall(string str);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual string RootSelfCheck(string str);
}
public class JetBrains.Profiler.Windows.SysTools.Tools.BrowserTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static RegistryKey[] ourLookupSequence;
    [CompilerGeneratedAttribute]
private static Func`2<CapabilityBrowserInfo, InternetBrowserInfo> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<InternetBrowserInfo, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<CapabilityBrowserInfo, InternetBrowserInfo> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    public BrowserTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static BrowserTools();
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual IEnumerable`1<InternetBrowserInfo> GetInternetBrowserInfos();
    [RemotableCallAttribute]
[CanBeNullAttribute]
public virtual InternetBrowserInfo GetDefaultInternetBrowserInfo();
    [NotRemotableAttribute]
[NotNullAttribute]
public IProcessProxy GetBrowserProcess(Lifetime lifetime, string browser, Uri url, KeyValuePair`2[] environment, String& browserProcessName);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual Tuple`2<ProcessInfo, MetroInfo> GetBrowserInfos(string browser, string url);
    [NotRemotableAttribute]
public void UpdateDisplay(RunBrowserArgument runBrowser);
    [CanBeNullAttribute]
private string GetCommandLine(RegistryHiveAccess access, string progId);
    [CanBeNullAttribute]
private string GetHttpDefaultProgId(KeyAccessRights rights);
    [NotNullAttribute]
private IEnumerable`1<CapabilityBrowserInfo> GetBrowserInfos(KeyAccessRights rights);
    private static InternetBrowserFlags GetFlags(CapabilityBrowserInfo info);
    [NotNullAttribute]
private CapabilityBrowserInfo GetCapabilityBrowserInfo(KeyAccessRights rights, string browser);
    [NotNullAttribute]
private static string GetProgId(KeyAccessRights rights, CapabilityBrowserInfo info, Uri uri);
    [NotNullAttribute]
private static string GetBrowserProcessName(string browser, string processName);
    [CanBeNullAttribute]
private ProcessInfo GetProcessInfo(KeyAccessRights rights, CapabilityBrowserInfo info, string progId, Uri uri);
    [CanBeNullAttribute]
private MetroInfo GetMetroInfo(KeyAccessRights rights, CapabilityBrowserInfo info, string progId, Uri uri);
    [CompilerGeneratedAttribute]
private static InternetBrowserInfo <GetInternetBrowserInfos>b__0(CapabilityBrowserInfo x);
    [CompilerGeneratedAttribute]
private static string <GetInternetBrowserInfos>b__1(InternetBrowserInfo x);
    [CompilerGeneratedAttribute]
private static InternetBrowserInfo <GetDefaultInternetBrowserInfo>b__5(CapabilityBrowserInfo x);
    [CompilerGeneratedAttribute]
private static bool <GetHttpDefaultProgId>b__12(string x);
}
public class JetBrains.Profiler.Windows.SysTools.Tools.CleanupTools : BaseServiceRemotable`1<SysTools> {
    private static string CleanTempFoldersTask;
    private static string CleanRegistryTask;
    private static string CleanTransparentIntegrationTask;
    private static ILogger ourLogger;
    private Dictionary`2<Guid, Queue`1<ProgressData>> myProgressEvents;
    public CleanupTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static CleanupTools();
    [NotRemotableAttribute]
private static bool HasTempException(string path);
    [NotRemotableAttribute]
private void CleanupTemp(string path);
    [RemotableCallAttribute]
public virtual Guid BeginCleanup(HostCleanUpFlags hostCleanUpFlags, int timeout);
    [RemotableCallAttribute]
public virtual ProgressData PullCleanupEvent(Guid id);
    [RemotableCallAttribute]
public virtual void EndCleanup(Guid id);
}
public class JetBrains.Profiler.Windows.SysTools.Tools.Common.GlobalNamedAgentLock : WaitHandle {
    public static string GlobalAgentLockPrefix;
    public static string GlobalAgentLockName;
    private Mutex myLock;
    private bool myOwned;
    public GlobalNamedAgentLock(bool acquire, string name);
    protected virtual void Dispose(bool explicitDisposing);
    public virtual void Close();
    public virtual bool WaitOne(TimeSpan timeout);
    public virtual bool WaitOne(int millisecondsTimeout);
    public virtual bool WaitOne();
    public virtual bool WaitOne(TimeSpan timeout, bool exitContext);
    public virtual bool WaitOne(int millisecondsTimeout, bool exitContext);
}
public static class JetBrains.Profiler.Windows.SysTools.Tools.CoreEnvironmentConstants : object {
    public static string PrefixProfilerCore;
    public static string PrefixProfilerCoreType;
    public static string ProfilerCoreLogMask;
    public static string ProfilerCoreLogFile;
    public static string ProfilerCoreTempPath;
    public static string ProfilerCoreDebug;
    public static string ProfilerCoreFirst;
    public static string ProfilerCoreHost;
    public static string ProfilerCoreRemote;
    public static string ProfilerCoreGuid;
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.SysTools.Tools.EnvironmentPropertiesExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<EnvironmentProperty, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<EnvironmentProperty, CleanEnvironmentProperty> CS$<>9__CachedAnonymousMethodDelegate3;
    [ExtensionAttribute]
[NotNullAttribute]
public static KeyValuePair`2[] ToEnvironmentVariables(IEnumerable`1<EnvironmentProperty> environmentProperties);
    [NotNullAttribute]
[ExtensionAttribute]
public static CleanEnvironmentProperty[] ToCleanEnvironmentProperties(IEnumerable`1<EnvironmentProperty> environmentProperties);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <ToEnvironmentVariables>b__0(EnvironmentProperty x);
    [CompilerGeneratedAttribute]
private static CleanEnvironmentProperty <ToCleanEnvironmentProperties>b__2(EnvironmentProperty x);
}
public class JetBrains.Profiler.Windows.SysTools.Tools.EnvironmentTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private static String[] ourHiveSeNames;
    public EnvironmentTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static EnvironmentTools();
    [RemotableCallAttribute]
public virtual void CheckComRegistration(InstructionSet instructionSet, CoreInfo coreInfo);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual IEnumerable`1<string> GetUserTempDirs();
}
public class JetBrains.Profiler.Windows.SysTools.Tools.EtwTools : BaseServiceRemotable`1<SysTools> {
    private static int Timeout;
    private static String[] ourKitsRoots;
    private static ILogger ourLogger;
    private LifetimeDefinition myEtwControllerLifetimeDefinition;
    private LifetimeDefinition myEtwHostShutdownLifetimeDefinition;
    private Exception myException;
    private EtwControllerApi myInstance;
    public EtwTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static EtwTools();
    [RemotableCallAttribute]
public virtual bool GetHasAdministrativeRights();
    [RemotableLongCallAttribute]
public virtual void Init(bool enableNativeAllocations, bool runHostAllowed, HostLaunchMode collectorHostMode, HostDeleteOptions hostDeleteOptions, FileSystemPath collectorHostPath, FileSystemPath collectorPath, Nullable`1<EtwCollectorLogMask> logMask, FileSystemPath hostLogDir, FileSystemPath collectorLogDir);
    [RemotableLongCallAttribute]
public virtual void Term();
    [RemotableCallAttribute]
public virtual bool IsXperfExists();
    [NotNullAttribute]
private String[] GetXperfs();
    [CompilerGeneratedAttribute]
private void <Init>b__0(string m, UInt32 c);
}
internal static class JetBrains.Profiler.Windows.SysTools.Tools.Impl.PropertiesUtil : object {
    private static ILogger ourLogger;
    private static PropertiesUtil();
    public static bool Clean(IDictionary`2<string, string> dictionary, Func`3<EnvironmentPropertyFlags, string, string> filter, IEnumerable`1<CleanEnvironmentProperty> cleanEnvironmentProperties);
    public static void Clean(RegistryHiveAccess key, BackSlashSeparatedRelativePath subKey, Func`3<EnvironmentPropertyFlags, string, string> filter, IEnumerable`1<CleanEnvironmentProperty> cleanEnvironmentProperties);
    public static bool Update(IDictionary`2<string, string> dictionary, Func`3<EnvironmentPropertyFlags, string, string> filter, IEnumerable`1<EnvironmentProperty> environmentProperties);
    public static void Update(RegistryHiveAccess key, BackSlashSeparatedRelativePath subKey, Modes modes, Func`3<EnvironmentPropertyFlags, string, string> filter, IEnumerable`1<EnvironmentProperty> environmentProperties);
}
public class JetBrains.Profiler.Windows.SysTools.Tools.InstructionSetTools : BaseServiceRemotable`1<SysTools> {
    private static Dictionary`2<string, CSIDL> ourCsidls;
    [CanBeNullAttribute]
private InstructionSet[] myInstructionSets;
    [CompilerGeneratedAttribute]
private static Func`2<CSIDL, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<string, <>f__AnonymousType0`2<string, CSIDL>> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<string, CSIDL>, bool> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<string, CSIDL>, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<string, CSIDL>, CSIDL> CS$<>9__CachedAnonymousMethodDelegate12;
    [NotRemotableAttribute]
public InstructionSet MinimumPointerSizeInstructionSet { get; }
    [NotRemotableAttribute]
public InstructionSet MaximumPointerSizeInstructionSet { get; }
    [NotRemotableAttribute]
public IEnumerable`1<InstructionSet> InstructionSets { get; }
    public InstructionSetTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static InstructionSetTools();
    public InstructionSet get_MinimumPointerSizeInstructionSet();
    public InstructionSet get_MaximumPointerSizeInstructionSet();
    [NotNullAttribute]
internal static string FixCSIDL(ProcessorArchitecture nativeArchitecture, ProcessorArchitecture architecture, InstructionSet instructionSet, CSIDL csidl, Func`2<CSIDL, string> func);
    [NotNullAttribute]
private static string GetFolderPathInt(InstructionSet instructionSet, CSIDL csidl);
    [NotRemotableTargetOnlyAttribute]
internal void ForEachKeyAccessRights(Action`2<InstructionSet, KeyAccessRights> action);
    [NotRemotableAttribute]
public KeyAccessRights GetRegistryRights(InstructionSet instructionSet);
    [NotRemotableAttribute]
internal static KeyAccessRights GetRegistryRightsInt(ProcessorArchitecture nativeArchitecture, ProcessorArchitecture architecture, InstructionSet instructionSet);
    [NotRemotableTargetOnlyAttribute]
internal static InstructionSet GetInstructionSet(Process process);
    [NotRemotableAttribute]
public byte GetPointerSize(InstructionSet instructionSet);
    [NotRemotableAttribute]
public bool IsRdtscSupported(InstructionSet instructionSet);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual string GetFolderPath(InstructionSet instructionSet, SpecialFolder folder);
    [RemotableCallAttribute]
[ContractAnnotationAttribute("str:null => null")]
public virtual string ExpandForCurrentUser(InstructionSet instructionSet, string str);
    public IEnumerable`1<InstructionSet> get_InstructionSets();
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual InstructionSet[] GetInstructionSets();
    [CompilerGeneratedAttribute]
private static string <GetFolderPathInt>b__0(CSIDL x);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType0`2<string, CSIDL> <.cctor>b__b(string x);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__c(<>f__AnonymousType0`2<string, CSIDL> x);
    [CompilerGeneratedAttribute]
private static string <.cctor>b__d(<>f__AnonymousType0`2<string, CSIDL> x);
    [CompilerGeneratedAttribute]
private static CSIDL <.cctor>b__e(<>f__AnonymousType0`2<string, CSIDL> x);
}
public class JetBrains.Profiler.Windows.SysTools.Tools.InvalidCallSequenceException : Exception {
    public InvalidCallSequenceException(string message);
    public InvalidCallSequenceException(string message, Exception innerException);
    protected InvalidCallSequenceException(SerializationInfo info, StreamingContext context);
}
public enum JetBrains.Profiler.Windows.SysTools.Tools.Protect.CoreProtectionType : Enum {
    public byte value__;
    public static CoreProtectionType Shared;
    public static CoreProtectionType Exclusive;
}
internal class JetBrains.Profiler.Windows.SysTools.Tools.Protect.CoreProtector : object {
    private static int SharedType;
    private static int ExclusiveType;
    private CoreProtectionType myCoreProtectionType;
    private ISemaphoreProxy myDataSemaphore;
    private ISemaphoreProxy myLockSemaphore;
    private ISemaphoreProxy myTypeSemaphore;
    private int myOwnValue;
    public CoreProtector(CoreProtectionType coreProtectionType, Func`4<int, int, string, ISemaphoreProxy> createSemaphore);
    public sealed virtual void Dispose();
    public sealed virtual void Enter(Action`1<bool> action);
    public sealed virtual void Leave(Action`1<bool> action);
    public sealed virtual void Touch();
    private void Lock(Action action);
    private bool IsSingle();
    private static int GetDataMaxValue(CoreProtectionType coreProtectionType);
    private static int GetTypeValue(CoreProtectionType coreProtectionType);
    private CoreProtectionType GetCurrentCoreProtectorType();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
public class JetBrains.Profiler.Windows.SysTools.Tools.Protect.GlobalProtection : object {
    private static int TimeoutAbort;
    private static int TimeoutSleep;
    private object myCoreProtectorLock;
    private Func`4<int, int, string, ISemaphoreProxy> myCreateSemaphore;
    private string myPrefix;
    private Thread myThread;
    private ICoreProtector myCoreProtector;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myStopRequest;
    public GlobalProtection(string prefix, Func`4<int, int, string, ISemaphoreProxy> createSemaphore);
    public sealed virtual void Dispose();
    public void Enter(Action action);
    public void Leave(Action action);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6();
}
internal interface JetBrains.Profiler.Windows.SysTools.Tools.Protect.ICoreProtector {
    public abstract virtual void Enter(Action`1<bool> action);
    public abstract virtual void Leave(Action`1<bool> action);
    public abstract virtual void Touch();
}
public class JetBrains.Profiler.Windows.SysTools.Tools.RegistryHiveTools : BaseServiceRemotable`1<SysTools> {
    private static ILogger ourLogger;
    private Random myRandom;
    public RegistryHiveTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static RegistryHiveTools();
    [NotRemotableTargetOnlyAttribute]
internal void EnumUserHives(Action`2<string, FileSystemPath> action);
    [NotRemotableTargetOnlyAttribute]
internal void UnderUserHive(string sid, FileSystemPath hiveFile, Action`3<RegistryHiveAccess, BackSlashSeparatedRelativePath, bool> action);
}
public class JetBrains.Profiler.Windows.SysTools.Tools.TransparentIntegrationTools : BaseServiceRemotable`1<SysTools> {
    private static string RegistryPathInprocServer32;
    private static string RegistryKeyAttachSamplingPerformanceProfiler;
    private static string RegistryKeyAttachMemoryProfiler;
    private static string RegistryKeyAttachTimelineProfiler;
    private static string RegistryKeyStartCoverageProfiler;
    private static string RegistryKeyStartSamplingPerformanceProfiler;
    private static string RegistryKeyStartTracingPerformanceProfiler;
    private static string RegistryKeyStartTracingInjectPerformanceProfiler;
    private static string RegistryKeyStartMemoryProfiler;
    private static string RegistryKeyStartTimelineProfiler;
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private static Func`2<Guid, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    public TransparentIntegrationTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static TransparentIntegrationTools();
    [NotRemotableAttribute]
[NotNullAttribute]
public static string GetTransparentIntegrationName(ProfileMode profileMode, IInfo info);
    [NotNullAttribute]
[NotRemotableAttribute]
public static IEnumerable`1<string> GetTransparentIntegrationKeys();
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual IntegrationCoreInfo MakeIntegrationCoreInfo(CoreInfo coreInfo, string transparentIntegrationName);
    private static void CleanIntegration(RegistryHiveAccess key);
    [RemotableCallAttribute]
public virtual void CleanUserIntegration();
    [RemotableCallAttribute]
public virtual void CleanGlobalIntegration(InstructionSet instructionSet);
    private static void SetIntegration(string transparentIntegrationName, Guid integrationGuid, RegistryHiveAccess key);
    [RemotableCallAttribute]
public virtual void SetUserIntegration(string transparentIntegrationName, Guid integrationGuid);
    [RemotableCallAttribute]
public virtual void SetGlobalIntegration(string transparentIntegrationName, Guid integrationGuid, InstructionSet instructionSet);
    [CompilerGeneratedAttribute]
private static bool <MakeIntegrationCoreInfo>b__2(Guid x);
    [CompilerGeneratedAttribute]
private static bool <MakeIntegrationCoreInfo>b__4(FileSystemPath x);
}
public static class JetBrains.Profiler.Windows.SysTools.Tools.VariableUtil : object {
    private static string EnvPostfixEnableProfiling;
    private static string EnvPostfixProfiler;
    private static string EnvPostfixProfilerPath;
    private static string EnvBittness32;
    private static string EnvBittness64;
    private static string EnvCor;
    private static string EnvCorEnableProfiling;
    private static string EnvCorProfiler;
    private static string EnvCorProfilerPath;
    private static string EnvCorProfilerPath32;
    private static string EnvCorProfilerPath64;
    private static string EnvCoreClr;
    private static string EnvCoreClrEnableProfiling;
    private static string EnvCoreClrProfiler;
    private static string EnvCoreClrProfilerPath;
    private static string EnvCoreClrProfilerPath32;
    private static string EnvCoreClrProfilerPath64;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InstructionSet, string>, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InstructionSet, string>, string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InstructionSet, string>, bool> CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InstructionSet, string>, string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InstructionSet, string>, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<InstructionSet, string>, string> CS$<>9__CachedAnonymousMethodDelegatec;
    [NotNullAttribute]
internal static CleanEnvironmentProperty[] MakeDefaultCleanProfileEnvironment();
    [NotNullAttribute]
public static EnvironmentProperty[] MakeProfileEnvironment(ClrEngine clrEngine, string hostEndPoint, string remoteEndPoint, Nullable`1<CoreLogMask> logMask, string tempPath, CoreDebug coreDebug, IDictionary`2<string, string> additionalEnvironmentVariables, IntegrationCoreInfo integrationCoreInfo, IDictionary`2<InstructionSet, string> profilerDlls);
    private static bool IsProhibited(CleanEnvironmentProperty[] cleanEnvironmentProperties, string name);
    [CompilerGeneratedAttribute]
private static bool <MakeProfileEnvironment>b__1(KeyValuePair`2<InstructionSet, string> x);
    [CompilerGeneratedAttribute]
private static string <MakeProfileEnvironment>b__2(KeyValuePair`2<InstructionSet, string> x);
    [CompilerGeneratedAttribute]
private static bool <MakeProfileEnvironment>b__3(KeyValuePair`2<InstructionSet, string> x);
    [CompilerGeneratedAttribute]
private static string <MakeProfileEnvironment>b__4(KeyValuePair`2<InstructionSet, string> x);
    [CompilerGeneratedAttribute]
private static bool <MakeProfileEnvironment>b__5(KeyValuePair`2<InstructionSet, string> x);
    [CompilerGeneratedAttribute]
private static string <MakeProfileEnvironment>b__6(KeyValuePair`2<InstructionSet, string> x);
}
public class JetBrains.Profiler.Windows.SysTools.WcfHostTools : BaseServiceRemotable`1<SysTools> {
    private static string WcfSvcHostPrefix;
    private static Version2 ourRuntimeVersion2;
    private static Version2 ourRuntimeVersion4;
    private static Version2 ourVsVersion10;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledVs, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<InstalledVs, Version> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`3<List`1<WcfHostInfo>, InstalledVs, List`1<WcfHostInfo>> CS$<>9__CachedAnonymousMethodDelegate5;
    public WcfHostTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static WcfHostTools();
    [NotNullAttribute]
[RemotableLongCallAttribute]
public virtual IEnumerable`1<WcfHostInfo> GetWcfHosts();
    [NotNullAttribute]
private static Version2 GetRuntimeVersion(InstalledVs installedVs);
    [CompilerGeneratedAttribute]
private static bool <GetWcfHosts>b__0(InstalledVs x);
    [CompilerGeneratedAttribute]
private static Version <GetWcfHosts>b__1(InstalledVs x);
    [CompilerGeneratedAttribute]
private static List`1<WcfHostInfo> <GetWcfHosts>b__2(List`1<WcfHostInfo> list, InstalledVs installedVs);
}
public class JetBrains.Profiler.Windows.SysTools.WindowsServiceEnvironmentTools : BaseServiceRemotable`1<SysTools> {
    private static string RegistryPathParameters;
    private static string RegistryKeyAppEnvironment;
    private static string RegistryKeyEnvironment;
    private static ILogger ourLogger;
    public WindowsServiceEnvironmentTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static WindowsServiceEnvironmentTools();
    [RemotableCallAttribute]
public virtual void CleanAllWindowsServicesEnvironment(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    [RemotableCallAttribute]
public virtual void CleanWindowsServiceEnvironment(string serviceName, CleanEnvironmentProperty[] cleanEnvironmentProperties);
    [RemotableCallAttribute]
public virtual void UpdateWindowsServiceEnvironment(string serviceName, EnvironmentProperty[] environmentProperties);
    private static void ProcessMultilineEnvironment(RegistryHiveAccess key, BackSlashSeparatedRelativePath subKey, string name, Func`2<IDictionary`2<string, string>, bool> updateDictionary);
    private static void CleanAll(CleanEnvironmentProperty[] cleanEnvironmentProperties);
    private static void Clean(string serviceName, CleanEnvironmentProperty[] cleanEnvironmentProperties);
    private static void Update(string serviceName, EnvironmentProperty[] environmentProperties);
}
public class JetBrains.Profiler.Windows.SysTools.WindowsServiceTools : BaseServiceRemotable`1<SysTools> {
    private static int TimeoutExpired;
    private static ILogger ourLogger;
    private static MessageResult ourMessageResult_AdministrativeRightRequired;
    private static MessageResult ourMessageResult_Communication;
    private WatchedDictionary`1<ServiceController> myServices;
    [CompilerGeneratedAttribute]
private static Action`1<ServiceController> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ServiceController, WindowsServiceInfo> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<ServiceController, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<ServiceController, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<ServiceController, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<string, Tuple`2<FileSystemPath, String[]>> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<Tuple`2<FileSystemPath, String[]>, string> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<ServiceController, bool> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate32;
    public WindowsServiceTools(SysTools root, String[] ids, ServiceCreatorDelegate<SysTools> serviceCreator);
    private static WindowsServiceTools();
    protected virtual void OnDispose();
    [NotNullAttribute]
[NotRemotableAttribute]
public MessageResult IsSupported(HostCompatibilityOptions options);
    [NotRemotableAttribute]
public void UpdateDisplay(WindowsServiceArgument argument);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual WindowsServiceInfo[] GetServices();
    [CanBeNullAttribute]
[NotRemotableAttribute]
internal IProcessProxy GetServiceProcess(Lifetime lifetime, Guid id);
    private static bool CheckServiceExist(ServiceController sc);
    [CanBeNullAttribute]
[NotRemotableAttribute]
public IServiceProxy TryOpenService(Lifetime lifetime, string name);
    [NotNullAttribute]
[NotRemotableAttribute]
public IServiceProxy OpenService(Lifetime lifetime, string name);
    [NotRemotableAttribute]
public bool HasService(string name);
    [RemotableCallAttribute]
public virtual Guid Service_Open(string name);
    [RemotableCallAttribute]
public virtual bool Service_Has(string name);
    [RemotableCallAttribute]
public virtual ServiceControllerStatus Service_GetStatus(Guid id);
    [RemotableCallAttribute]
public virtual ServiceType Service_GetServiceType(Guid id);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual string Service_GetServiceName(Guid id);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual string Service_GetDisplayName(Guid id);
    [RemotableCallAttribute]
public virtual bool Service_CanStop(Guid id);
    [RemotableCallAttribute]
public virtual bool Service_CanPauseAndContinue(Guid id);
    [RemotableCallAttribute]
public virtual bool Service_CanShutdown(Guid id);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual String[] Service_GetServicesDependentOn(Guid id);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual String[] Service_GetDependentServices(Guid id);
    [RemotableCallAttribute]
[NotNullAttribute]
public virtual String[] Service_GetSameProcessServices(Guid id);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual String[] Service_GetSameImagePathServices(Guid id);
    [CanBeNullAttribute]
[RemotableCallAttribute]
public virtual string Service_GetSvcHostGroup(Guid id);
    [NotNullAttribute]
[RemotableCallAttribute]
public virtual String[] Service_GetSvcHostServices(Guid id);
    [RemotableCallAttribute]
[CanBeNullAttribute]
public virtual RemotableProcessInfo Service_GetProcessInfo(Guid id);
    [RemotableCallAttribute]
public virtual void Service_Start(Guid id, String[] args);
    [RemotableCallAttribute]
public virtual void Service_Stop(Guid id);
    [RemotableCallAttribute]
public virtual void Service_Pause(Guid id);
    [RemotableCallAttribute]
public virtual void Service_Continue(Guid id);
    [RemotableCallAttribute]
public virtual void Service_Touch(Guid id);
    [RemotableCallAttribute]
public virtual void Service_Close(Guid id);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(ServiceController s);
    [CompilerGeneratedAttribute]
private static WindowsServiceInfo <GetServices>b__b(ServiceController x);
    [CompilerGeneratedAttribute]
private static string <Service_GetServicesDependentOn>b__10(ServiceController x);
    [CompilerGeneratedAttribute]
private static string <Service_GetDependentServices>b__12(ServiceController x);
    [CompilerGeneratedAttribute]
private static bool <Service_GetSameProcessServices>b__14(ServiceController x);
    [CompilerGeneratedAttribute]
private static Tuple`2<FileSystemPath, String[]> <Service_GetSameImagePathServices>b__1e(string x);
    [CompilerGeneratedAttribute]
private static string <Service_GetSameImagePathServices>b__1f(Tuple`2<FileSystemPath, String[]> x);
    [CompilerGeneratedAttribute]
private static bool <Service_GetSameImagePathServices>b__20(ServiceController x);
    [CompilerGeneratedAttribute]
private static bool <Service_GetSvcHostServices>b__31(string name);
}
