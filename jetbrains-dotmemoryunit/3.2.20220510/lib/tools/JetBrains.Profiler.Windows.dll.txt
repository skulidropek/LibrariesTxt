public class JetBrains.Profiler.Windows.Argument.AttachArgument : object {
    private static string TagRuntimeVersion;
    [CanBeNullAttribute]
private string myDisplayProcessName;
    [CanBeNullAttribute]
private Version myRuntimeVersion;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public int ProcessId;
    [HostFieldAttribute]
public Version RuntimeVersion { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string DisplayName { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public Version get_RuntimeVersion();
    [CanBeNullAttribute]
public void set_RuntimeVersion(Version value);
    [NotNullAttribute]
public string get_DisplayName();
    [CanBeNullAttribute]
public void set_DisplayName(string value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual AttachArgument Clone();
    public sealed virtual bool Equals(AttachArgument other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum JetBrains.Profiler.Windows.Argument.ClrEngine : Enum {
    public byte value__;
    public static ClrEngine None;
    public static ClrEngine Clr;
    public static ClrEngine CoreClr;
    [ObsoleteAttribute("Only for serialization compatibility, user Clr instead")]
public static ClrEngine Default;
    [ObsoleteAttribute("Only for serialization compatibility, user CoreClr instead")]
public static ClrEngine Silverlight;
    public static ClrEngine All;
}
public class JetBrains.Profiler.Windows.Argument.CoreClrArgument : object {
    private static string TagScopeArgument;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool CreateNoWindow;
    [CanBeNullAttribute]
private string myArguments;
    [CanBeNullAttribute]
private string myFileName;
    [CanBeNullAttribute]
private ScopeArgument myScope;
    [CanBeNullAttribute]
private string myWorkingDirectory;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool ProfileChildProcesses;
    [HostFieldAttribute]
public ScopeArgument Scope { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string Arguments { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string FileName { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string WorkingDirectory { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public ScopeArgument get_Scope();
    [CanBeNullAttribute]
public void set_Scope(ScopeArgument value);
    [NotNullAttribute]
public string get_Arguments();
    [CanBeNullAttribute]
public void set_Arguments(string value);
    [NotNullAttribute]
public string get_FileName();
    [CanBeNullAttribute]
public void set_FileName(string value);
    [NotNullAttribute]
public string get_WorkingDirectory();
    [CanBeNullAttribute]
public void set_WorkingDirectory(string value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual CoreClrArgument Clone();
    public sealed virtual bool Equals(CoreClrArgument obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.DevelopmentServerArgument : object {
    private static string TagRunBrowserArgument;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public ushort Port;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool RunBrowser;
    [CanBeNullAttribute]
private string myDevelopmentServer;
    [CanBeNullAttribute]
private string myPhysicalPath;
    [CanBeNullAttribute]
private RunBrowserArgument myRunBrowserArgument;
    [CanBeNullAttribute]
private string myVirtualPath;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string DevelopmentServer { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string PhysicalPath { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string VirtualPath { get; public set; }
    [HostFieldAttribute]
public RunBrowserArgument RunBrowserArgument { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public string get_DevelopmentServer();
    [CanBeNullAttribute]
public void set_DevelopmentServer(string value);
    [NotNullAttribute]
public string get_PhysicalPath();
    [CanBeNullAttribute]
public void set_PhysicalPath(string value);
    [NotNullAttribute]
public string get_VirtualPath();
    [CanBeNullAttribute]
public void set_VirtualPath(string value);
    [NotNullAttribute]
public RunBrowserArgument get_RunBrowserArgument();
    [CanBeNullAttribute]
public void set_RunBrowserArgument(RunBrowserArgument value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual DevelopmentServerArgument Clone();
    public sealed virtual bool Equals(DevelopmentServerArgument obj);
    [NotNullAttribute]
public static Uri MakeUrl(string scheme, string host, ushort port, string virtualPath);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.EverythingArgument : object {
    private static string TagScopeArgument;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public ClrEngine ClrEngine;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[ObsoleteAttribute("Legacy deserialization support")]
[UsedImplicitlyAttribute]
private bool ProfileSilverlight;
    [CanBeNullAttribute]
private ScopeArgument myScope;
    [HostFieldAttribute]
public ScopeArgument Scope { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public ScopeArgument get_Scope();
    [CanBeNullAttribute]
public void set_Scope(ScopeArgument value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual EverythingArgument Clone();
    public sealed virtual bool Equals(EverythingArgument obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IAttachArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.ICoreClrArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IDevelopmentServerArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IEverythingArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IIISArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IIISExpressArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IMetroArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.ISilverlightArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IStandaloneArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IWcfHostArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.FactoryFeatures.IWindowsServiceArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.Features.IAttachArgumentFeatures {
    [NotNullAttribute]
public string InfoMessage { get; }
    public abstract virtual string get_InfoMessage();
}
public interface JetBrains.Profiler.Windows.Argument.Features.ICoreClrArgumentFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsSupported(HostCompatibilityOptions options);
}
public interface JetBrains.Profiler.Windows.Argument.Features.IDevelopmentServerArgumentFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.Features.IEverythingArgumentFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsSupported(HostCompatibilityOptions options);
}
public interface JetBrains.Profiler.Windows.Argument.Features.IIISArgumentFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsSupported(HostCompatibilityOptions options);
}
public interface JetBrains.Profiler.Windows.Argument.Features.IIISExpressArgumentFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.Features.IMetroArgumentFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsSupported();
}
public interface JetBrains.Profiler.Windows.Argument.Features.ISilverlightArgumentFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsSupported();
}
public interface JetBrains.Profiler.Windows.Argument.Features.IStandaloneArgumentFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.Features.IWcfHostArgumentFeatures {
}
public interface JetBrains.Profiler.Windows.Argument.Features.IWindowsServiceArgumentFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsSupported(HostCompatibilityOptions options);
}
public class JetBrains.Profiler.Windows.Argument.IISArgument : object {
    private static string TagRunBrowserArgument;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool RunBrowser;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public bool RunBrowserOnRemoteComputer;
    [CanBeNullAttribute]
private RunBrowserArgument myRunBrowserArgument;
    [HostFieldAttribute]
public RunBrowserArgument RunBrowserArgument { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public RunBrowserArgument get_RunBrowserArgument();
    [CanBeNullAttribute]
public void set_RunBrowserArgument(RunBrowserArgument value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual IISArgument Clone();
    public sealed virtual bool Equals(IISArgument other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.IISExpressArgument : object {
    private static string TagRunBrowserArgument;
    private static string TagRuntimeVersion;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public IISExpressLaunchType LaunchType;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public ushort Port;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool RunBrowser;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public bool RunBrowserOnRemoteComputer;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public Nullable`1<UInt32> SiteId;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool SysTray;
    [CanBeNullAttribute]
private string myApplicationPath;
    [CanBeNullAttribute]
private string myConfigPath;
    [CanBeNullAttribute]
private string myIISExpress;
    [CanBeNullAttribute]
private RunBrowserArgument myRunBrowserArgument;
    [CanBeNullAttribute]
private Version2 myRuntimeVersion;
    [CanBeNullAttribute]
private string mySite;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string IISExpress { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string ConfigPath { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Site { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string ApplicationPath { get; public set; }
    [HostFieldAttribute]
public Version2 RuntimeVersion { get; public set; }
    [HostFieldAttribute]
public RunBrowserArgument RunBrowserArgument { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public string get_IISExpress();
    [CanBeNullAttribute]
public void set_IISExpress(string value);
    [NotNullAttribute]
public string get_ConfigPath();
    [CanBeNullAttribute]
public void set_ConfigPath(string value);
    [NotNullAttribute]
public string get_Site();
    [CanBeNullAttribute]
public void set_Site(string value);
    [NotNullAttribute]
public string get_ApplicationPath();
    [CanBeNullAttribute]
public void set_ApplicationPath(string value);
    [NotNullAttribute]
public Version2 get_RuntimeVersion();
    [CanBeNullAttribute]
public void set_RuntimeVersion(Version2 value);
    [NotNullAttribute]
public RunBrowserArgument get_RunBrowserArgument();
    [CanBeNullAttribute]
public void set_RunBrowserArgument(RunBrowserArgument value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual IISExpressArgument Clone();
    public sealed virtual bool Equals(IISExpressArgument obj);
    [NotNullAttribute]
public static Uri MakeUrl(string scheme, string host, ushort port, string virtualPath);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Profiler.Windows.Argument.IISExpressLaunchType : Enum {
    public byte value__;
    public static IISExpressLaunchType Config;
    public static IISExpressLaunchType ApplicationPath;
}
public class JetBrains.Profiler.Windows.Argument.MetroArgument : object {
    [CanBeNullAttribute]
private string myAppUserModelId;
    private string myDisplayName;
    [CanBeNullAttribute]
private string myPackageFullName;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string AppUserModelId { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string PackageFullName { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string DisplayName { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public string get_AppUserModelId();
    [CanBeNullAttribute]
public void set_AppUserModelId(string value);
    [NotNullAttribute]
public string get_PackageFullName();
    [CanBeNullAttribute]
public void set_PackageFullName(string value);
    [NotNullAttribute]
public string get_DisplayName();
    [CanBeNullAttribute]
public void set_DisplayName(string value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual MetroArgument Clone();
    public sealed virtual bool Equals(MetroArgument other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.AttachArgumentPresenter : object {
    public static Guid ProcessGuid;
    public static Guid RuntimeVersionGuid;
    private static AttachArgumentPresenter();
    [CanBeNullAttribute]
[ExtensionAttribute]
public static TitleProperty GetTitleValue(AttachArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(AttachArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(AttachArgument argument);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.CoreClrArgumentPresenter : object {
    public static Guid ArgumentsGuid;
    public static Guid WorkingDirectoryGuid;
    public static Guid CreateNoWindowGuid;
    public static Guid ProfileChildProcessesGuid;
    public static Guid FileNameGuid;
    private static CoreClrArgumentPresenter();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TitleProperty GetTitleValue(CoreClrArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(CoreClrArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(CoreClrArgument argument);
    private static DescriptionPropertyFlags GetArgumentFlags(string displayValues);
    [NotNullAttribute]
private static string GetCreateNoWindowName(bool createNoWindow);
    [NotNullAttribute]
private static string GetProfileChildProcessesName(bool profileChildProcesses);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.DevelopmentServerArgumentPresenter : object {
    public static Guid VirtualPathGuid;
    public static Guid PhysicalPathGuid;
    public static Guid DevelopmentServerGuid;
    public static Guid PortGuid;
    public static Guid RunBrowserGuid;
    private static DevelopmentServerArgumentPresenter();
    [NotNullAttribute]
private static IEnumerable`1<DescriptionProperty> GetPropertiesInt(DevelopmentServerArgument argument);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TitleProperty GetTitleValue(DevelopmentServerArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(DevelopmentServerArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(DevelopmentServerArgument argument);
    private static DescriptionPropertyFlags GetPortFlags(ushort port);
    [NotNullAttribute]
private static string GetPortName(ushort port);
    [NotNullAttribute]
private static string GetRunBrowserName(bool runBrowser);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.EverythingArgumentPresenter : object {
    public static Guid ClrEngine;
    private static EverythingArgumentPresenter();
    [CanBeNullAttribute]
[ExtensionAttribute]
public static TitleProperty GetTitleValue(EverythingArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(EverythingArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(EverythingArgument argument);
    private static DescriptionPropertyFlags GetClrEngineFlags(ClrEngine clrEngine);
    [NotNullAttribute]
private static string GetClrEngineValue(ClrEngine clrEngine);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.IISArgumentPresenter : object {
    public static Guid RunBrowserGuid;
    private static IISArgumentPresenter();
    [NotNullAttribute]
private static IEnumerable`1<DescriptionProperty> GetPropertiesInt(IISArgument argument);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static TitleProperty GetTitleValue(IISArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(IISArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(IISArgument argument);
    private static Pair`2<bool, bool> GetValue(bool runBrowser, bool runBrowserOnRemoteComputer);
    [NotNullAttribute]
private static string GetName(bool runBrowser, bool runBrowserOnRemoteComputer);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.IISExpressArgumentPresenter : object {
    public static Guid SiteGuid;
    public static Guid IISExpressGuid;
    public static Guid ConfigPathGuid;
    public static Guid ApplicationPathGuid;
    public static Guid PortGuid;
    public static Guid RuntimeVersionGuid;
    public static Guid RunBrowserGuid;
    public static Guid SysTrayGuid;
    private static IISExpressArgumentPresenter();
    [NotNullAttribute]
private static IEnumerable`1<DescriptionProperty> GetPropertiesInt(IISExpressArgument argument);
    [CanBeNullAttribute]
[ExtensionAttribute]
public static TitleProperty GetTitleValue(IISExpressArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(IISExpressArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(IISExpressArgument argument);
    private static DescriptionPropertyFlags GetFlags(string site, Nullable`1<UInt32> siteId);
    private static DescriptionPropertyFlags GetPortFlags(ushort port);
    [NotNullAttribute]
private static string GetPortName(ushort port);
    [NotNullAttribute]
private static string GetSysTrayName(bool sysTray);
    private static Pair`2<bool, bool> GetValue(bool runBrowser, bool runBrowserOnRemoteComputer);
    private static Pair`2<string, Nullable`1<UInt32>> GetValue(string site, Nullable`1<UInt32> siteId);
    [NotNullAttribute]
private static string GetName(bool runBrowser, bool runBrowserOnRemoteComputer);
    private static string GetName(string site, Nullable`1<UInt32> siteId);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.MetroArgumentPresenter : object {
    public static Guid IdGuid;
    private static MetroArgumentPresenter();
    [CanBeNullAttribute]
[ExtensionAttribute]
public static TitleProperty GetTitleValue(MetroArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(MetroArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(MetroArgument argument);
}
public static class JetBrains.Profiler.Windows.Argument.Presenter.ProcessFilterArgumentPresenter : object {
    [NotNullAttribute]
public static string GetName(ProcessFilterArgument info);
}
public static class JetBrains.Profiler.Windows.Argument.Presenter.RunBrowserArgumentPresenter : object {
    public static Guid BrowserGuid;
    public static Guid UrlGuid;
    private static RunBrowserArgumentPresenter();
    [CanBeNullAttribute]
public static TitleProperty GetTitleValue(RunBrowserArgument argument);
    [NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(RunBrowserArgument argument);
    [NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(RunBrowserArgument argument);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.ScopeArgumentPresenter : object {
    public static Guid ProcessFilters;
    private static ScopeArgumentPresenter();
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(ScopeArgument argument);
    private static DescriptionPropertyFlags GetProcessFiltersFlags(ProcessFilterArgument[] filters);
    [NotNullAttribute]
private static String[] GetProcessFiltersName(ProcessFilterArgument[] filters);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.SilverlightArgumentPresenter : object {
    [CanBeNullAttribute]
[ExtensionAttribute]
public static TitleProperty GetTitleValue(SilverlightArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(SilverlightArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(SilverlightArgument argument);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.StandaloneArgumentPresenter : object {
    public static Guid ArgumentsGuid;
    public static Guid WorkingDirectoryGuid;
    public static Guid CreateNoWindowGuid;
    public static Guid ProfileChildProcessesGuid;
    public static Guid FileNameGuid;
    public static Guid ClrEngine;
    private static StandaloneArgumentPresenter();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TitleProperty GetTitleValue(StandaloneArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(StandaloneArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(StandaloneArgument argument);
    private static DescriptionPropertyFlags GetClrEngineFlags(ClrEngine clrEngine);
    private static DescriptionPropertyFlags GetArgumentFlags(string displayValues);
    [NotNullAttribute]
private static string GetCreateNoWindowName(bool createNoWindow);
    [NotNullAttribute]
private static string GetProfileChildProcessesName(bool profileChildProcesses);
    [NotNullAttribute]
private static string GetClrEngineValue(ClrEngine clrEngine);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.WcfHostArgumentPresenter : object {
    public static Guid ConfigPathGuid;
    public static Guid WcfHostGuid;
    public static Guid ClientPathGuid;
    public static Guid ClientArgumentsGuid;
    public static Guid LibraryPathGuid;
    private static WcfHostArgumentPresenter();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TitleProperty GetTitleValue(WcfHostArgument argument);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(WcfHostArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(WcfHostArgument argument);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Argument.Presenter.WindowsServiceArgumentPresenter : object {
    public static Guid SeriveNameGuid;
    public static Guid StartDependentServicesGuid;
    public static Guid ArgumentsGuid;
    private static WindowsServiceArgumentPresenter();
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TitleProperty GetTitleValue(WindowsServiceArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetTitleProperties(WindowsServiceArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(WindowsServiceArgument argument);
    [NotNullAttribute]
private static string GetStartDependentServicesName(bool startDependentServices);
}
public class JetBrains.Profiler.Windows.Argument.ProcessFilterArgument : object {
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool Active;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public ProcessFilterMode Mode;
    [CanBeNullAttribute]
private string myProcessNameFilter;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public FilterType Type;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string ProcessNameFilter { get; public set; }
    [NotNullAttribute]
public string get_ProcessNameFilter();
    [CanBeNullAttribute]
public void set_ProcessNameFilter(string value);
    public sealed virtual ProcessFilterArgument Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(ProcessFilterArgument other);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.RunBrowserArgument : object {
    [CanBeNullAttribute]
private string myBrowser;
    [CanBeNullAttribute]
private string myDisplayBrowser;
    [CanBeNullAttribute]
private string myUrl;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string DisplayBrowser { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Browser { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Url { get; public set; }
    [NotNullAttribute]
public string get_DisplayBrowser();
    [CanBeNullAttribute]
public void set_DisplayBrowser(string value);
    [NotNullAttribute]
public string get_Browser();
    [CanBeNullAttribute]
public void set_Browser(string value);
    [NotNullAttribute]
public string get_Url();
    [CanBeNullAttribute]
public void set_Url(string value);
    public sealed virtual RunBrowserArgument Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(RunBrowserArgument other);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    [NotNullAttribute]
public static string GetDefaultDisplayName(string displayBrowser);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.ScopeArgument : object {
    private static string TagProcessFilters;
    private static string TagItem;
    [CanBeNullAttribute]
private ProcessFilterArgument[] myProcessFilters;
    [CompilerGeneratedAttribute]
private static Func`2<ProcessFilterArgument, ProcessFilterArgument> CS$<>9__CachedAnonymousMethodDelegate2;
    [HostFieldAttribute]
public ProcessFilterArgument[] ProcessFilters { get; public set; }
    [NotNullAttribute]
public ProcessFilterArgument[] get_ProcessFilters();
    [CanBeNullAttribute]
public void set_ProcessFilters(ProcessFilterArgument[] value);
    public sealed virtual ScopeArgument Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(ScopeArgument other);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static ProcessFilterArgument <Clone>b__1(ProcessFilterArgument x);
}
public class JetBrains.Profiler.Windows.Argument.SilverlightArgument : object {
    private static string TagRunBrowserArgument;
    [CanBeNullAttribute]
private RunBrowserArgument myRunBrowserArgument;
    [HostFieldAttribute]
public RunBrowserArgument RunBrowserArgument { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public RunBrowserArgument get_RunBrowserArgument();
    [CanBeNullAttribute]
public void set_RunBrowserArgument(RunBrowserArgument value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual SilverlightArgument Clone();
    public sealed virtual bool Equals(SilverlightArgument other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.StandaloneArgument : object {
    private static string TagScopeArgument;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public ClrEngine ClrEngine;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool CreateNoWindow;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public bool ProfileChildProcesses;
    [CanBeNullAttribute]
private string myArguments;
    [CanBeNullAttribute]
private string myFileName;
    [CanBeNullAttribute]
private ScopeArgument myScope;
    [CanBeNullAttribute]
private string myWorkingDirectory;
    [HostFieldAttribute]
public ScopeArgument Scope { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Arguments { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string FileName { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string WorkingDirectory { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public ScopeArgument get_Scope();
    [CanBeNullAttribute]
public void set_Scope(ScopeArgument value);
    [NotNullAttribute]
public string get_Arguments();
    [CanBeNullAttribute]
public void set_Arguments(string value);
    [NotNullAttribute]
public string get_FileName();
    [CanBeNullAttribute]
public void set_FileName(string value);
    [NotNullAttribute]
public string get_WorkingDirectory();
    [CanBeNullAttribute]
public void set_WorkingDirectory(string value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual StandaloneArgument Clone();
    public sealed virtual bool Equals(StandaloneArgument obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.WcfHostArgument : object {
    [CanBeNullAttribute]
private string myClientArguments;
    [CanBeNullAttribute]
private string myClientPath;
    [CanBeNullAttribute]
private string myConfigPath;
    [CanBeNullAttribute]
private string myLibraryPath;
    [CanBeNullAttribute]
private string myWcfHost;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string WcfHost { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string LibraryPath { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string ConfigPath { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string ClientPath { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string ClientArguments { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public string get_WcfHost();
    [CanBeNullAttribute]
public void set_WcfHost(string value);
    [NotNullAttribute]
public string get_LibraryPath();
    [CanBeNullAttribute]
public void set_LibraryPath(string value);
    [NotNullAttribute]
public string get_ConfigPath();
    [CanBeNullAttribute]
public void set_ConfigPath(string value);
    [NotNullAttribute]
public string get_ClientPath();
    [CanBeNullAttribute]
public void set_ClientPath(string value);
    [NotNullAttribute]
public string get_ClientArguments();
    [CanBeNullAttribute]
public void set_ClientArguments(string value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual bool Equals(WcfHostArgument obj);
    public sealed virtual WcfHostArgument Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Argument.WindowsServiceArgument : object {
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool StartDependentServices;
    [CanBeNullAttribute]
private string myArguments;
    [CanBeNullAttribute]
private string myDisplayServiceName;
    [CanBeNullAttribute]
private string myServiceName;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string ServiceName { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string Arguments { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string DisplayServiceName { get; public set; }
    public bool IsRequiredFieldsAssigned { get; }
    [NotNullAttribute]
public string get_ServiceName();
    [CanBeNullAttribute]
public void set_ServiceName(string value);
    [NotNullAttribute]
public string get_Arguments();
    [CanBeNullAttribute]
public void set_Arguments(string value);
    [NotNullAttribute]
public string get_DisplayServiceName();
    [CanBeNullAttribute]
public void set_DisplayServiceName(string value);
    public sealed virtual bool get_IsRequiredFieldsAssigned();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IArgument JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Argument.IArgument>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public sealed virtual WindowsServiceArgument Clone();
    public sealed virtual bool Equals(WindowsServiceArgument obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.Profiler.Windows.ConfigurationConstants : object {
    public static ushort AutoDetectPort;
    public static ushort DefaultHttpPort;
    public static ushort AlternativeDefaultHttpPort;
    public static ushort DefaultHttpsPort;
    public static string DefaultBrowser;
    public static string AnyFilter;
    public static CorSymSearchPolicyAttributes DefaultSearchPolicy;
    public static string DefaultVirtualPath;
}
public enum JetBrains.Profiler.Windows.FilterType : Enum {
    public byte value__;
    public static FilterType Allow;
    public static FilterType Deny;
}
public enum JetBrains.Profiler.Windows.HostParameters.AuthenticationType : Enum {
    public byte value__;
    public static AuthenticationType None;
    public static AuthenticationType NTLM;
    [ObsoleteAttribute("Legacy deserialization support")]
public static AuthenticationType Passphrase;
}
public class JetBrains.Profiler.Windows.HostParameters.LocalHostParameters : object {
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool CanShowElevationDialog;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public RequestedElevationLevel RequestedElevationLevel;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public CoreConfiguration ToolsConfiguration;
    private CoreConfiguration JetBrains.Profiler.Configuration.HostParameters.IHostParameters.ToolsConfiguration { get; private set; }
    public sealed virtual LocalHostParameters Clone();
    public sealed virtual bool Equals(LocalHostParameters other);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IHostParameters JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.HostParameters.IHostParameters>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    private sealed virtual override CoreConfiguration JetBrains.Profiler.Configuration.HostParameters.IHostParameters.get_ToolsConfiguration();
    private sealed virtual override void JetBrains.Profiler.Configuration.HostParameters.IHostParameters.set_ToolsConfiguration(CoreConfiguration value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.HostParameters.Presenter.LocalHostParametersPresenter : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(LocalHostParameters hostParameters);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.HostParameters.Presenter.RemoteHostParametersPresenter : object {
    public static Guid UrlGuid;
    public static Guid AuthenticationGuid;
    public static Guid LoginGuid;
    public static Guid PasswordGuid;
    private static RemoteHostParametersPresenter();
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(RemoteHostParameters hostParameters);
    [NotNullAttribute]
private static string GetAuthenticationTypeName(AuthenticationType authenticationType);
}
public class JetBrains.Profiler.Windows.HostParameters.RemoteHostParameters : object {
    [CanBeNullAttribute]
[ObsoleteAttribute("Legacy deserialization support")]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[UsedImplicitlyAttribute]
private string Host;
    private AuthenticationType myAuthentication;
    [CanBeNullAttribute]
private string myDomain;
    [CanBeNullAttribute]
private string myPassword;
    [CanBeNullAttribute]
private string myUrl;
    [CanBeNullAttribute]
private string myUserName;
    [ObsoleteAttribute("Legacy deserialization support")]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[UsedImplicitlyAttribute]
private ushort Port;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public CoreConfiguration ToolsConfiguration;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Domain { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string UserName { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Url { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public AuthenticationType Authentication { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string Password { get; public set; }
    [HostFieldAttribute]
public string Login { get; public set; }
    private CoreConfiguration JetBrains.Profiler.Configuration.HostParameters.IHostParameters.ToolsConfiguration { get; private set; }
    [NotNullAttribute]
public string get_Domain();
    [CanBeNullAttribute]
public void set_Domain(string value);
    [NotNullAttribute]
public string get_UserName();
    [CanBeNullAttribute]
public void set_UserName(string value);
    [NotNullAttribute]
public string get_Url();
    [CanBeNullAttribute]
public void set_Url(string value);
    public AuthenticationType get_Authentication();
    public void set_Authentication(AuthenticationType value);
    [NotNullAttribute]
public string get_Password();
    [CanBeNullAttribute]
public void set_Password(string value);
    [NotNullAttribute]
public string get_Login();
    [CanBeNullAttribute]
public void set_Login(string value);
    public sealed virtual RemoteHostParameters Clone();
    public sealed virtual bool Equals(RemoteHostParameters other);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IHostParameters JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.HostParameters.IHostParameters>.Clone();
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlWritable.WriteToXml(XmlElement element);
    private sealed virtual override CoreConfiguration JetBrains.Profiler.Configuration.HostParameters.IHostParameters.get_ToolsConfiguration();
    private sealed virtual override void JetBrains.Profiler.Configuration.HostParameters.IHostParameters.set_ToolsConfiguration(CoreConfiguration value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum JetBrains.Profiler.Windows.HostParameters.RequestedElevationLevel : Enum {
    public byte value__;
    public static RequestedElevationLevel AsInvoker;
    public static RequestedElevationLevel RequireAdministrator;
    public static RequestedElevationLevel Test;
}
public enum JetBrains.Profiler.Windows.Info.AttributeFilterIndex : Enum {
    public byte value__;
    public static AttributeFilterIndex Assembly;
    public static AttributeFilterIndex Module;
    public static AttributeFilterIndex Type;
    public static AttributeFilterIndex Property;
    public static AttributeFilterIndex Event;
    public static AttributeFilterIndex Method;
}
public class JetBrains.Profiler.Windows.Info.AttributeFilterInfo : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public bool Active;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public AttributeFilterMask Mask;
    [CanBeNullAttribute]
private string myTypeFilter;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string TypeFilter { get; public set; }
    [NotNullAttribute]
public string get_TypeFilter();
    [CanBeNullAttribute]
public void set_TypeFilter(string value);
    public sealed virtual AttributeFilterInfo Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(AttributeFilterInfo other);
    public sealed virtual void WriteToBridge(BinaryWriter writer);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum JetBrains.Profiler.Windows.Info.AttributeFilterMask : Enum {
    public UInt32 value__;
    public static AttributeFilterMask None;
    public static AttributeFilterMask Assembly;
    public static AttributeFilterMask Module;
    public static AttributeFilterMask Type;
    public static AttributeFilterMask Property;
    public static AttributeFilterMask Event;
    public static AttributeFilterMask Method;
    public static AttributeFilterMask All;
}
public enum JetBrains.Profiler.Windows.Info.Collect : Enum {
    public byte value__;
    public static Collect Disabled;
    public static Collect EnabledPostponed;
    public static Collect EnabledImmediatly;
}
[InfoAttribute("36AFCB92-DB3F-4AEC-9A2C-E77CD4B55E63")]
public class JetBrains.Profiler.Windows.Info.CoverageInfo : object {
    private static string TagInjectInfo;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public bool CyclomaticComplexityGather;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool StartImmediately;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public StatementGather StatementGather;
    [CanBeNullAttribute]
private InjectInfo myInjectInfo;
    [HostFieldAttribute]
public InjectInfo InjectInfo { get; public set; }
    [NotNullAttribute]
public InjectInfo get_InjectInfo();
    [CanBeNullAttribute]
public void set_InjectInfo(InjectInfo value);
    public sealed virtual CoverageInfo Clone();
    public sealed virtual bool Equals(CoverageInfo obj);
    private sealed virtual override void JetBrains.Profiler.Configuration.Info.IInfoWrite.WriteToBridge(BinaryWriter writer);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IInfo JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Info.IInfo>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.Profiler.Windows.Info.FactoryFeatures.ICoverageInfoFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Info.FactoryFeatures.IMemoryInfoFactoryFeatures {
    public bool IsCollectAllocationsSupported { get; }
    public abstract virtual bool get_IsCollectAllocationsSupported();
}
public interface JetBrains.Profiler.Windows.Info.FactoryFeatures.IPerformanceInfoFactoryFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsMeasureTypeSupported(MeasureType measureType);
    [NotNullAttribute]
public abstract virtual MessageResult IsPrecisionModeSupported(MeasureType measureType);
    [NotNullAttribute]
public abstract virtual MessageResult IsEnableJitInliningSupported(MeasureType measureType);
}
public interface JetBrains.Profiler.Windows.Info.FactoryFeatures.ITimelineInfoFactoryFeatures {
}
public interface JetBrains.Profiler.Windows.Info.Features.ICoverageInfoFeatures {
}
public interface JetBrains.Profiler.Windows.Info.Features.IMemoryInfoFeatures {
}
public interface JetBrains.Profiler.Windows.Info.Features.IPerformanceInfoFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsMeterKindSupported(MeasureType measureType, MeterKind meterKind);
}
public interface JetBrains.Profiler.Windows.Info.Features.ITimelineInfoFeatures {
    public MessageResult IsActive { get; }
    public abstract virtual MessageResult get_IsActive();
}
[ObsoleteAttribute("Do not use. Kepp it only for history compatibily")]
internal class JetBrains.Profiler.Windows.Info.InjectAttributeInfo : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[ObsoleteAttribute("Legacy deserialization support")]
[UsedImplicitlyAttribute]
[CanBeNullAttribute]
private string AssemblyFilter;
    [CanBeNullAttribute]
private string myAssemblyOrModuleFilter;
    [CanBeNullAttribute]
private string myClassFilter;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string AssemblyOrModuleFilter { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string ClassFilter { get; public set; }
    [NotNullAttribute]
public string get_AssemblyOrModuleFilter();
    [CanBeNullAttribute]
public void set_AssemblyOrModuleFilter(string value);
    [NotNullAttribute]
public string get_ClassFilter();
    [CanBeNullAttribute]
public void set_ClassFilter(string value);
    public sealed virtual InjectAttributeInfo Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(InjectAttributeInfo other);
    public sealed virtual void WriteToBridge(BinaryWriter writer);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ObsoleteAttribute("Do not use. Kepp it only for history compatibily")]
internal class JetBrains.Profiler.Windows.Info.InjectFilterInfo : object {
    [ObsoleteAttribute("Legacy deserialization support")]
[CanBeNullAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[UsedImplicitlyAttribute]
private string AssemblyFilter;
    [CanBeNullAttribute]
[ObsoleteAttribute("Legacy deserialization support")]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[UsedImplicitlyAttribute]
private string ModuleFilter;
    [CanBeNullAttribute]
private string myAssemblyOrModuleFilter;
    [CanBeNullAttribute]
private string myClassFilter;
    [CanBeNullAttribute]
private string myFunctionFilter;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string AssemblyOrModuleFilter { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string ClassFilter { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string FunctionFilter { get; public set; }
    [NotNullAttribute]
public string get_AssemblyOrModuleFilter();
    [CanBeNullAttribute]
public void set_AssemblyOrModuleFilter(string value);
    [NotNullAttribute]
public string get_ClassFilter();
    [CanBeNullAttribute]
public void set_ClassFilter(string value);
    [NotNullAttribute]
public string get_FunctionFilter();
    [CanBeNullAttribute]
public void set_FunctionFilter(string value);
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual InjectFilterInfo Clone();
    public sealed virtual bool Equals(InjectFilterInfo other);
    public sealed virtual void WriteToBridge(BinaryWriter writer);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.Info.InjectInfo : object {
    private static string TagSearchPaths;
    private static string TagSymbolSearch;
    private static string TagScope;
    private static string TagAllowFilters;
    private static string TagDenyFilters;
    private static string TagDenyAssemblyAttributes;
    private static string TagDenyModuleAttributes;
    private static string TagDenyClassAttributes;
    private static string TagDenyFunctionAttributes;
    private static string TagItem;
    [CanBeNullAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Legacy deserialization support")]
private string SearchPath;
    [ObsoleteAttribute("Legacy deserialization support")]
[UsedImplicitlyAttribute]
[CanBeNullAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private String[] SearchPaths;
    [UsedImplicitlyAttribute]
[ObsoleteAttribute("Legacy deserialization support")]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private CorSymSearchPolicyAttributes SearchPolicy;
    [CanBeNullAttribute]
private ScopeInfo myScope;
    [CanBeNullAttribute]
private SymbolSearchInfo mySymbolSearch;
    [CompilerGeneratedAttribute]
private static Func`2<InjectFilterInfo, PatternFilterInfo> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<InjectFilterInfo, PatternFilterInfo> CS$<>9__CachedAnonymousMethodDelegatec;
    [HostFieldAttribute]
public ScopeInfo Scope { get; public set; }
    [HostFieldAttribute]
public SymbolSearchInfo SymbolSearch { get; public set; }
    [NotNullAttribute]
public ScopeInfo get_Scope();
    [CanBeNullAttribute]
public void set_Scope(ScopeInfo value);
    [NotNullAttribute]
public SymbolSearchInfo get_SymbolSearch();
    [CanBeNullAttribute]
public void set_SymbolSearch(SymbolSearchInfo value);
    public sealed virtual InjectInfo Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(InjectInfo other);
    private sealed virtual override void JetBrains.Profiler.Configuration.Info.IInfoWrite.WriteToBridge(BinaryWriter writer);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static PatternFilterInfo <ReadFromXml>b__4(InjectFilterInfo x);
    [CompilerGeneratedAttribute]
private static PatternFilterInfo <ReadFromXml>b__5(InjectFilterInfo x);
}
public enum JetBrains.Profiler.Windows.Info.MeasureType : Enum {
    public byte value__;
    public static MeasureType Sampling;
    public static MeasureType Tracing;
    public static MeasureType TracingInject;
}
[InfoAttribute("F19A68A9-CA9B-4A2E-80C6-8E21F080EAFF")]
public class JetBrains.Profiler.Windows.Info.MemoryInfo : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public ushort AllocationsFactor;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public UInt32 CallstackMatchingDepth;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public Collect CollectAllocations;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool CollectFinalizers;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool DmuInstrumenter;
    public sealed virtual MemoryInfo Clone();
    public sealed virtual bool Equals(MemoryInfo obj);
    private sealed virtual override void JetBrains.Profiler.Configuration.Info.IInfoWrite.WriteToBridge(BinaryWriter writer);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IInfo JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Info.IInfo>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Profiler.Windows.Info.MeterKind : Enum {
    public byte value__;
    public static MeterKind None;
    public static MeterKind PerformanceCounter;
    public static MeterKind ThreadTime;
    public static MeterKind Rdtsc;
    public static MeterKind ThreadCycleTime;
    [ObsoleteAttribute("Use ThreadCycleTime instead")]
public static MeterKind QueryThreadCycleTime;
}
public class JetBrains.Profiler.Windows.Info.PatternFilterInfo : object {
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool Active;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public FilterType Type;
    [CanBeNullAttribute]
private string myAssemblyFilter;
    [CanBeNullAttribute]
private string myAssemblyVersionFilter;
    [CanBeNullAttribute]
private string myMethodFilter;
    [CanBeNullAttribute]
private string myTypeFilter;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string AssemblyFilter { get; public set; }
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public string AssemblyVersionFilter { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string TypeFilter { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string MethodFilter { get; public set; }
    [NotNullAttribute]
public string get_AssemblyFilter();
    [CanBeNullAttribute]
public void set_AssemblyFilter(string value);
    [NotNullAttribute]
public string get_AssemblyVersionFilter();
    [CanBeNullAttribute]
public void set_AssemblyVersionFilter(string value);
    [NotNullAttribute]
public string get_TypeFilter();
    [CanBeNullAttribute]
public void set_TypeFilter(string value);
    [NotNullAttribute]
public string get_MethodFilter();
    [CanBeNullAttribute]
public void set_MethodFilter(string value);
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual PatternFilterInfo Clone();
    public sealed virtual bool Equals(PatternFilterInfo other);
    public sealed virtual void WriteToBridge(BinaryWriter writer);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[InfoAttribute("D65C00BF-B0D3-48FF-8D91-F4BEC378DBB9")]
public class JetBrains.Profiler.Windows.Info.PerformanceInfo : object {
    private static string TagInjectInfo;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool EnableJitInlining;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public MeasureType MeasureType;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public MeterKind MeterKind;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool PrecisionMode;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool ReuseSameNameThreads;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool StartImmediately;
    [CanBeNullAttribute]
private InjectInfo myInjectInfo;
    [HostFieldAttribute]
public InjectInfo InjectInfo { get; public set; }
    [NotNullAttribute]
public InjectInfo get_InjectInfo();
    [CanBeNullAttribute]
public void set_InjectInfo(InjectInfo value);
    public sealed virtual PerformanceInfo Clone();
    public sealed virtual bool Equals(PerformanceInfo obj);
    private sealed virtual override void JetBrains.Profiler.Configuration.Info.IInfoWrite.WriteToBridge(BinaryWriter writer);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IInfo JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Info.IInfo>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.Profiler.Windows.Info.Presenter.AttributeFilterInfoPresenter : object {
    [NotNullAttribute]
public static string GetName(AttributeFilterInfo info);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Info.Presenter.CoverageInfoPresenter : object {
    public static Guid StartImmediatelyGuid;
    public static Guid StatementGatherGuid;
    public static Guid CyclomaticComplexityGatherGuid;
    private static CoverageInfoPresenter();
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(CoverageInfo info);
    [NotNullAttribute]
private static string GetStartDependentServicesName(bool startImmediately);
    [NotNullAttribute]
private static string GetCyclomaticComplexityGatherName(bool cyclomaticComplexity);
    [NotNullAttribute]
public static string GetStatementGatherName(StatementGather statementGather);
}
public static class JetBrains.Profiler.Windows.Info.Presenter.InjectInfoPresenter : object {
    [NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(InjectInfo info);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Info.Presenter.MemoryInfoPresenter : object {
    public static Guid CollectAllocationsGuid;
    public static Guid CollectFinalizersGuid;
    public static Guid CallstackMatchingDepthGuid;
    private static MemoryInfoPresenter();
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(MemoryInfo info);
    private static DescriptionPropertyFlags GetCollectAllocationsFlags(Collect collectAllocationsImmediately, ushort allocationsFactor);
    private static DescriptionPropertyFlags GetCollectTrafficFlags(Collect collectGarbageTraffic);
    private static string GetNumerals(UInt32 n);
    [NotNullAttribute]
private static string GetAllocationsFactorName(ushort allocationsFactor);
    [NotNullAttribute]
private static string GetCollectFinalizersName(bool collectFinalizers);
    [NotNullAttribute]
private static string GetCollectTrafficName(Collect collectTraffic);
    [NotNullAttribute]
private static string GetCollectAllocationsName(Collect collectAllocations, ushort allocationsFactor);
}
public static class JetBrains.Profiler.Windows.Info.Presenter.PatternFilterInfoPresenter : object {
    [NotNullAttribute]
public static string GetName(PatternFilterInfo info);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Info.Presenter.PerformanceInfoPresenter : object {
    public static Guid MeasureTypeGuid;
    public static Guid MeterKindGuid;
    public static Guid StartImmediatelyGuid;
    public static Guid ReuseSameNameThreadsGuid;
    public static Guid EnableJitInliningGuid;
    public static Guid PrecisionModeGuid;
    private static PerformanceInfoPresenter();
    [NotNullAttribute]
[ExtensionAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(PerformanceInfo info);
    [NotNullAttribute]
public static string GetMeterKindName(MeterKind meterKind);
    [NotNullAttribute]
public static string GetMeasureTypeName(MeasureType measureType);
    [NotNullAttribute]
private static string GetEnableJitInliningName(bool enableJitInlining);
    [NotNullAttribute]
private static string GetReuseSameNameThreadsName(bool reuseSameNameThreads);
    [NotNullAttribute]
private static string GetStartImmediatelyName(bool startImmediately);
    [NotNullAttribute]
private static string GetPrecisionModeName(bool precisionMode);
}
public static class JetBrains.Profiler.Windows.Info.Presenter.ScopeInfoPresenter : object {
    public static Guid PatternFiltersGuid;
    public static Guid DenyAttributeFiltersGuid;
    private static ScopeInfoPresenter();
    [NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(ScopeInfo info);
    private static DescriptionPropertyFlags GetPatternFiltersFlags(PatternFilterInfo[] filters);
    private static DescriptionPropertyFlags GetAttributeFiltersFlags(AttributeFilterInfo[] attributes);
    [NotNullAttribute]
private static String[] GetPatternFiltersName(PatternFilterInfo[] filters);
    [NotNullAttribute]
private static String[] GetAttributesName(AttributeFilterInfo[] attributes);
}
public static class JetBrains.Profiler.Windows.Info.Presenter.SymbolSearchInfoPresenter : object {
    public static string AllowRegistryAccess;
    public static string AllowSymbolServerAccess;
    public static string AllowOriginalPathAccess;
    public static string AllowReferencePathAccess;
    public static Guid SearchPathGuid;
    public static Guid SearchPolicyGuid;
    private static SymbolSearchInfoPresenter();
    [NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(SymbolSearchInfo info);
    private static DescriptionPropertyFlags GetSearchPathsFlags(String[] searchPaths);
    [NotNullAttribute]
private static String[] GetSearchPathsName(String[] searchPaths);
    private static DescriptionPropertyFlags GetSearchPolicyFlags(CorSymSearchPolicyAttributes searchPolicy);
    [NotNullAttribute]
private static String[] GetSearchPolicyName(CorSymSearchPolicyAttributes searchPolicy);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Info.Presenter.TimelineInfoPresenter : object {
    public static Guid StartImmediatelyGuid;
    public static Guid EnableNativeAllocationsGuid;
    public static Guid EnableDebugOutputGuid;
    private static TimelineInfoPresenter();
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(TimelineInfo info);
    [NotNullAttribute]
private static string GetStartImmediatelyName(bool startImmediately);
    [NotNullAttribute]
private static string GetEnableNativeAllocationsName(bool enableNativeAllocations);
    [NotNullAttribute]
private static string GetEnableDebugOutputName(bool enableDebugOutput);
}
public class JetBrains.Profiler.Windows.Info.ScopeInfo : object {
    private static string TagPatternFilters;
    private static string TagDenyAttributeFilters;
    private static string TagItem;
    [CanBeNullAttribute]
private AttributeFilterInfo[] myDenyAttributeFilters;
    [CanBeNullAttribute]
private PatternFilterInfo[] myPatternFilters;
    [CompilerGeneratedAttribute]
private static Func`2<PatternFilterInfo, PatternFilterInfo> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<AttributeFilterInfo, AttributeFilterInfo> CS$<>9__CachedAnonymousMethodDelegate4;
    [HostFieldAttribute]
public PatternFilterInfo[] PatternFilters { get; public set; }
    [HostFieldAttribute]
public AttributeFilterInfo[] DenyAttributeFilters { get; public set; }
    [NotNullAttribute]
public PatternFilterInfo[] get_PatternFilters();
    [CanBeNullAttribute]
public void set_PatternFilters(PatternFilterInfo[] value);
    [NotNullAttribute]
public AttributeFilterInfo[] get_DenyAttributeFilters();
    [CanBeNullAttribute]
public void set_DenyAttributeFilters(AttributeFilterInfo[] value);
    public sealed virtual ScopeInfo Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(ScopeInfo other);
    private sealed virtual override void JetBrains.Profiler.Configuration.Info.IInfoWrite.WriteToBridge(BinaryWriter writer);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static PatternFilterInfo <Clone>b__1(PatternFilterInfo x);
    [CompilerGeneratedAttribute]
private static AttributeFilterInfo <Clone>b__2(AttributeFilterInfo x);
}
public enum JetBrains.Profiler.Windows.Info.StatementGather : Enum {
    public byte value__;
    public static StatementGather BitMask;
    public static StatementGather Counter32;
}
public class JetBrains.Profiler.Windows.Info.SymbolSearchInfo : object {
    private static string TagSearchPaths;
    private static string TagItem;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public CorSymSearchPolicyAttributes SearchPolicy;
    [CanBeNullAttribute]
private String[] mySearchPaths;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [HostFieldAttribute]
public String[] SearchPaths { get; public set; }
    [NotNullAttribute]
public String[] get_SearchPaths();
    [CanBeNullAttribute]
public void set_SearchPaths(String[] value);
    public sealed virtual SymbolSearchInfo Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual bool Equals(SymbolSearchInfo other);
    private sealed virtual override void JetBrains.Profiler.Configuration.Info.IInfoWrite.WriteToBridge(BinaryWriter writer);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static string <Clone>b__1(string x);
}
[InfoAttribute("72901AEC-8A8E-4FE3-AB06-0BA00183DF92")]
public class JetBrains.Profiler.Windows.Info.TimelineInfo : object {
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public bool EnableNativeAllocations;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool EnableDebugOutput;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool StartImmediately;
    public sealed virtual TimelineInfo Clone();
    public sealed virtual bool Equals(TimelineInfo obj);
    private sealed virtual override void JetBrains.Profiler.Configuration.Info.IInfoWrite.WriteToBridge(BinaryWriter writer);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IInfo JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Info.IInfo>.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.Windows.KeyValueItem : object {
    [CanBeNullAttribute]
private string myKey;
    [CanBeNullAttribute]
private string myValue;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Key { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string Value { get; public set; }
    [NotNullAttribute]
public string get_Key();
    [CanBeNullAttribute]
public void set_Key(string value);
    [NotNullAttribute]
public string get_Value();
    [CanBeNullAttribute]
public void set_Value(string value);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override KeyValueItem JetBrains.Util.ICloneable<JetBrains.Profiler.Windows.KeyValueItem>.Clone();
    public sealed virtual bool Equals(KeyValueItem obj);
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public KeyValueItem Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Profiler.Windows.Options.CoreDebug : Enum {
    public byte value__;
    public static CoreDebug None;
    public static CoreDebug ShowMessageBox;
    public static CoreDebug InfiniteSleep;
}
public enum JetBrains.Profiler.Windows.Options.CoreLogIndex : Enum {
    public byte value__;
    public static CoreLogIndex Com;
    public static CoreLogIndex Api;
    public static CoreLogIndex Bridge;
    public static CoreLogIndex PdbBridge;
    public static CoreLogIndex EtwBridge;
    public static CoreLogIndex Snapshot;
    public static CoreLogIndex InstrumentationDumpMethods;
    public static CoreLogIndex Flush;
    public static CoreLogIndex MetaDataGt;
    public static CoreLogIndex PdbGt;
    public static CoreLogIndex ModulePathGt;
    public static CoreLogIndex InstrumentationGt;
    public static CoreLogIndex ThreadGt;
    public static CoreLogIndex ClassGt;
    public static CoreLogIndex MethodFilterGt;
    public static CoreLogIndex FuidGt;
    public static CoreLogIndex FieldResolverGt;
    public static CoreLogIndex ClassRecoveryGt;
    public static CoreLogIndex AppDomainRecoveryGt;
    public static CoreLogIndex ThreadRecoveryGt;
    public static CoreLogIndex CoverageGroupGt;
    public static CoreLogIndex CoverageCyclomaticComplexityGt;
    public static CoreLogIndex CoverageModuleGt;
    public static CoreLogIndex MemoryDumpGt;
    public static CoreLogIndex MemoryAllocationGt;
    public static CoreLogIndex AppDomainCb;
    public static CoreLogIndex AssemblyCb;
    public static CoreLogIndex AssemblyReferencesCb;
    public static CoreLogIndex ClassCb;
    public static CoreLogIndex ExceptionCb;
    public static CoreLogIndex ExceptionClrCb;
    public static CoreLogIndex FunctionCb;
    public static CoreLogIndex GcCb;
    public static CoreLogIndex GcAllocationsCb;
    public static CoreLogIndex GcReferencesCb;
    public static CoreLogIndex HandleCb;
    public static CoreLogIndex ModuleCb;
    public static CoreLogIndex ReJitCb;
    public static CoreLogIndex RemotingCb;
    public static CoreLogIndex RuntimeCb;
    public static CoreLogIndex ThreadCb;
    public static CoreLogIndex TransitionCb;
    public static CoreLogIndex VTableCb;
    public static CoreLogIndex InstrumentationEp;
    public static CoreLogIndex FunctionEp;
    public static CoreLogIndex MapperEp;
    public static CoreLogIndex SamplingPf;
    public static CoreLogIndex CommunicationPf;
    public static CoreLogIndex OtherPf;
}
[FlagsAttribute]
public enum JetBrains.Profiler.Windows.Options.CoreLogMask : Enum {
    public ulong value__;
    public static CoreLogMask None;
    public static CoreLogMask Com;
    public static CoreLogMask Api;
    public static CoreLogMask Bridge;
    public static CoreLogMask PdbBridge;
    public static CoreLogMask EtwBridge;
    public static CoreLogMask Snapshot;
    public static CoreLogMask InstrumentationDumpMethods;
    public static CoreLogMask Flush;
    public static CoreLogMask MetaDataGt;
    public static CoreLogMask PdbGt;
    public static CoreLogMask ModulePathGt;
    public static CoreLogMask InstrumentationGt;
    public static CoreLogMask ThreadGt;
    public static CoreLogMask ClassGt;
    public static CoreLogMask MethodFilterGt;
    public static CoreLogMask FuidGt;
    public static CoreLogMask FieldResolverGt;
    public static CoreLogMask ClassRecoveryGt;
    public static CoreLogMask AppDomainRecoveryGt;
    public static CoreLogMask ThreadRecoveryGt;
    public static CoreLogMask CoverageGroupGt;
    public static CoreLogMask CoverageCyclomaticComplexityGt;
    public static CoreLogMask CoverageModuleGt;
    public static CoreLogMask MemoryDumpGt;
    public static CoreLogMask MemoryAllocationGt;
    public static CoreLogMask AppDomainCb;
    public static CoreLogMask AssemblyCb;
    public static CoreLogMask AssemblyReferencesCb;
    public static CoreLogMask ClassCb;
    public static CoreLogMask ExceptionCb;
    public static CoreLogMask ExceptionClrCb;
    public static CoreLogMask FunctionCb;
    public static CoreLogMask GcCb;
    public static CoreLogMask GcAllocationsCb;
    public static CoreLogMask GcReferencesCb;
    public static CoreLogMask HandleCb;
    public static CoreLogMask ModuleCb;
    public static CoreLogMask ReJitCb;
    public static CoreLogMask RemotingCb;
    public static CoreLogMask RuntimeCb;
    public static CoreLogMask ThreadCb;
    public static CoreLogMask TransitionCb;
    public static CoreLogMask VTableCb;
    public static CoreLogMask InstrumentationEp;
    public static CoreLogMask FunctionEp;
    public static CoreLogMask MapperEp;
    public static CoreLogMask SamplingPf;
    public static CoreLogMask CommunicationPf;
    public static CoreLogMask OtherPf;
}
public class JetBrains.Profiler.Windows.Options.CoreOptions : object {
    private static string TagAdditionalEnvironmentVariables;
    private static string TagItem;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public ControlKind ControlKind;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public CoreConfiguration CoreConfiguration;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public CoreDebug CoreDebug;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Nullable`1<CoreLogMask> CoreLogMask;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public CoreRegistration CoreRegistration;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public UInt32 MemoryThresholdInMb;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public InstructionSet RegistryFreeInstructionSet;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[UsedImplicitlyAttribute]
[ObsoleteAttribute("Legacy deserialization support")]
private CoreDebug CoreAttach;
    [UsedImplicitlyAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute("Legacy deserialization support")]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private string CoreRegistrationRegistryFreeInstructionSet;
    [CanBeNullAttribute]
private KeyValueItem[] myAdditionalEnvironmentVariables;
    [CanBeNullAttribute]
private string myCoreTempPath;
    [CanBeNullAttribute]
private string myRemoteEndPoint;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValueItem, KeyValueItem> CS$<>9__CachedAnonymousMethodDelegate2;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string CoreTempPath { get; public set; }
    [HostFieldAttribute]
public KeyValueItem[] AdditionalEnvironmentVariables { get; public set; }
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string RemoteEndPoint { get; public set; }
    private ControlKind JetBrains.Profiler.Configuration.Options.ICoreOptions.ControlKind { get; private set; }
    [NotNullAttribute]
public string get_CoreTempPath();
    [CanBeNullAttribute]
public void set_CoreTempPath(string value);
    [NotNullAttribute]
public KeyValueItem[] get_AdditionalEnvironmentVariables();
    [CanBeNullAttribute]
public void set_AdditionalEnvironmentVariables(KeyValueItem[] value);
    [NotNullAttribute]
public sealed virtual string get_RemoteEndPoint();
    [CanBeNullAttribute]
public sealed virtual void set_RemoteEndPoint(string value);
    public sealed virtual CoreOptions Clone();
    private sealed virtual override ControlKind JetBrains.Profiler.Configuration.Options.ICoreOptions.get_ControlKind();
    private sealed virtual override void JetBrains.Profiler.Configuration.Options.ICoreOptions.set_ControlKind(ControlKind value);
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    private sealed virtual override ICoreOptions JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Options.ICoreOptions>.Clone();
    public sealed virtual bool Equals(CoreOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private static KeyValueItem <Clone>b__1(KeyValueItem x);
}
public class JetBrains.Profiler.Windows.Options.HostOptions : object {
    public static int DefaultFinishProfilingAutomaticallyTimeout;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool AllowKillProcess;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Nullable`1<EtwCollectorLogMask> EtwCollectorLogMask;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public bool UseEtwHostShadowCopy;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public HostLaunchMode EtwHostMode;
    [UsedImplicitlyAttribute]
[ObsoleteAttribute("Legacy deserialization support")]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool FinishProfilingAutomatically;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Nullable`1<int> FinishProfilingAutomaticallyTimeout;
    [CanBeNullAttribute]
private string myHostTempPath;
    [HostFieldAttribute]
[XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
public Nullable`1<PdbServerLogMask> PdbServerLogMask;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public ReprofileDisableReason ReprofileDisableReason;
    [XmlExternalizableAttribute("Mono.Cecil.CustomAttributeArgument")]
[HostFieldAttribute]
public string HostTempPath { get; public set; }
    private ReprofileDisableReason JetBrains.Profiler.Configuration.Options.IHostOptions.ReprofileDisableReason { get; private set; }
    [NotNullAttribute]
public string get_HostTempPath();
    [CanBeNullAttribute]
public void set_HostTempPath(string value);
    public sealed virtual HostOptions Clone();
    public sealed virtual bool Equals(HostOptions other);
    private sealed virtual override ReprofileDisableReason JetBrains.Profiler.Configuration.Options.IHostOptions.get_ReprofileDisableReason();
    private sealed virtual override void JetBrains.Profiler.Configuration.Options.IHostOptions.set_ReprofileDisableReason(ReprofileDisableReason value);
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual void ReadFromXml(XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    private sealed virtual override IHostOptions JetBrains.Util.ICloneable<JetBrains.Profiler.Configuration.Options.IHostOptions>.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Profiler.Windows.Options.PdbServerLogIndex : Enum {
    public byte value__;
    public static PdbServerLogIndex CoreBridge;
    public static PdbServerLogIndex PdbGt;
}
[FlagsAttribute]
public enum JetBrains.Profiler.Windows.Options.PdbServerLogMask : Enum {
    public byte value__;
    public static PdbServerLogMask None;
    public static PdbServerLogMask CoreBridge;
    public static PdbServerLogMask PdbGt;
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Options.Presenter.CoreOptionsPresenter : object {
    public static Guid ControlKindGuid;
    public static Guid CoreConfigurationGuid;
    public static Guid CoreLogMaskGuid;
    public static Guid CoreTempPathGuid;
    public static Guid CoreDebugGuid;
    public static Guid CoreRegistrationGuid;
    public static Guid AdditionalEnvironmentVariablesGuid;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValueItem, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate3;
    private static CoreOptionsPresenter();
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(CoreOptions coreOptions);
    private static String[] GetAdditionalEnvironmentVariablesName(KeyValueItem[] additionalEnvironmentVariables);
    private static DescriptionPropertyFlags GetAdditionalEnvironmentVariablesFlags(KeyValueItem[] additionalEnvironmentVariables);
    private static Pair`2<CoreRegistration, InstructionSet> GetCoreRegistrationValue(CoreRegistration coreRegistration, InstructionSet coreRegistrationRegistryFreeInstructionSet);
    private static DescriptionPropertyFlags GetCoreRegistrationFlags(CoreRegistration coreRegistration);
    [NotNullAttribute]
public static string GetCoreRegistrationName(CoreRegistration coreRegistration, InstructionSet coreRegistrationRegistryFreeInstructionSet);
    private static DescriptionPropertyFlags GetCoreDebugFlags(CoreDebug coreDebug);
    [NotNullAttribute]
public static string GetCoreDebugName(CoreDebug coreDebug);
    private static DescriptionPropertyFlags GetCoreLogMaskFlags(Nullable`1<CoreLogMask> coreLogMask);
    [CanBeNullAttribute]
private static string GetCoreLogMaskDisplay(Nullable`1<CoreLogMask> coreLogMask);
    private static DescriptionPropertyFlags GetCoreConfigurationFlags(CoreConfiguration coreConfiguration);
    [NotNullAttribute]
public static string GetCoreConfigurationName(CoreConfiguration coreConfiguration);
    private static DescriptionPropertyFlags GetControlKindFlags(ControlKind controlKind);
    [NotNullAttribute]
public static string GetControlKindName(ControlKind controlKind);
    [NotNullAttribute]
private static String[] GetCoreLogMaskName(Nullable`1<CoreLogMask> coreLogMask);
    [CompilerGeneratedAttribute]
private static string <GetAdditionalEnvironmentVariablesName>b__0(KeyValueItem x);
    [CompilerGeneratedAttribute]
private static string <GetCoreLogMaskName>b__2(string x);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Windows.Options.Presenter.HostOptionsPresenter : object {
    public static Guid HostTempPathGuid;
    public static Guid ReprofileDisableReasonGuid;
    public static Guid FinishProfilingAutomaticallyTimeoutGuid;
    public static Guid AllowKillProcessGuid;
    public static Guid PdbServerLogMaskGuid;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate2;
    private static HostOptionsPresenter();
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<DescriptionProperty> GetProperties(HostOptions hostOptions);
    [NotNullAttribute]
private static string GetAllowKillProcessName(bool allowKillProcess);
    private static DescriptionPropertyFlags GetPdbServerLogMaskFlags(Nullable`1<PdbServerLogMask> pdbServerLogMask);
    [CanBeNullAttribute]
private static string GetPdbServerLogMaskDisplay(Nullable`1<PdbServerLogMask> pdbServerLogMask);
    [CanBeNullAttribute]
private static string GetFinishProfilingTitle(Nullable`1<int> finishProfilingTimeout);
    [NotNullAttribute]
private static string GetFinishProfilingName(Nullable`1<int> finishProfilingTimeout);
    [NotNullAttribute]
public static string GetReprofileDisableReasonName(ReprofileDisableReason reprofileDisableReason);
    [NotNullAttribute]
private static String[] GetPdbServerLogMaskName(Nullable`1<PdbServerLogMask> pdbServerLogMask);
    [CompilerGeneratedAttribute]
private static string <GetPdbServerLogMaskName>b__1(string x);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Windows.ProcessFilterMode : Enum {
    public byte value__;
    public static ProcessFilterMode RootProcesses;
    public static ProcessFilterMode ChildProcesses;
    public static ProcessFilterMode AllProcesses;
}
public static class JetBrains.Profiler.Windows.SatelliteFiles : object {
    private static FileSystemPath ourApiDirectory;
    private static FileSystemPath ourSelfApiDirectory;
    private static string ApiName { get; }
    private static string RemoteApiName { get; }
    private static string SelfApiName { get; }
    [NotNullAttribute]
public static FileSystemPath ApiFile { get; }
    [NotNullAttribute]
public static FileSystemPath RemoteApiFile { get; }
    [NotNullAttribute]
public static FileSystemPath SelfApiFile { get; }
    private static SatelliteFiles();
    private static string get_ApiName();
    private static string get_RemoteApiName();
    private static string get_SelfApiName();
    public static FileSystemPath get_ApiFile();
    public static FileSystemPath get_RemoteApiFile();
    public static FileSystemPath get_SelfApiFile();
    private static bool IsIncludePdb(bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetApiFiles(bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetRemoteApiFiles(bool includePdb);
    [NotNullAttribute]
public static Tuple`3[] GetSelfApiFiles(bool includePdb);
}
public static class JetBrains.Profiler.Windows.WindowsPrefix : object {
    public static string Name;
}
