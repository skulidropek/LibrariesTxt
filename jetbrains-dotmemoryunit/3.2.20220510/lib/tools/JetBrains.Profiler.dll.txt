public interface JetBrains.Profiler.Configuration.Argument.IArgument {
    public bool IsRequiredFieldsAssigned { get; }
    public abstract virtual bool get_IsRequiredFieldsAssigned();
}
public enum JetBrains.Profiler.Configuration.CoreRegistration : Enum {
    public byte value__;
    public static CoreRegistration Default;
    public static CoreRegistration RegistryFreeInstructionSet;
    public static CoreRegistration RegistryFree;
}
public class JetBrains.Profiler.Configuration.DescriptionProperty : object {
    [CanBeNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public String[] DisplayValues;
    public DescriptionPropertyFlags Flags;
    public Guid Id;
    [CanBeNullAttribute]
public object Value;
    public DescriptionProperty(Guid id, object value, DescriptionPropertyFlags flags, string displayName, String[] displayValues);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Configuration.DescriptionPropertyFlags : Enum {
    public byte value__;
    public static DescriptionPropertyFlags Minor;
    public static DescriptionPropertyFlags Significant;
    public static DescriptionPropertyFlags AnywayHide;
    public static DescriptionPropertyFlags AnywayArray;
}
[AttributeUsageAttribute("384")]
public class JetBrains.Profiler.Configuration.HostFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <StringIgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipEquals>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    public bool StringIgnoreCase { get; public set; }
    public bool SkipEquals { get; public set; }
    public bool Ignore { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_StringIgnoreCase();
    [CompilerGeneratedAttribute]
public void set_StringIgnoreCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipEquals();
    [CompilerGeneratedAttribute]
public void set_SkipEquals(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
}
public interface JetBrains.Profiler.Configuration.HostParameters.IHostParameters {
    public CoreConfiguration ToolsConfiguration { get; public set; }
    public abstract virtual CoreConfiguration get_ToolsConfiguration();
    public abstract virtual void set_ToolsConfiguration(CoreConfiguration value);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Configuration.HostXmlUtil : object {
    public static string TagConfiguration;
    public static string TagArgument;
    public static string TagCoreOptions;
    public static string TagHostOptions;
    public static string TagHostParameters;
    public static string TagInfo;
    [CompilerGeneratedAttribute]
private static Func`2<IArgument, string> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<IInfo, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<IHostParameters, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<ICoreOptions, string> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<IHostOptions, string> CS$<>9__CachedAnonymousMethodDelegate15;
    [NotNullAttribute]
private static string ToString(XmlDocument document);
    [NotNullAttribute]
public static T[] ReadArrayFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string name, string itemName);
    [NotNullAttribute]
public static T[] ReadArrayFromXml_SkipFailed(IHostXmlResurrector hostXmlResurrector, XmlElement element, string name, string itemName);
    public static void WriteArrayToXml(XmlElement element, IEnumerable`1<T> enumerable, string name, string itemName);
    [CanBeNullAttribute]
public static TClass ReadFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    public static void WriteToXml(XmlElement element, TClass data, string tagName);
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToXmlString(IHostParameters hostParameters);
    [NotNullAttribute]
[ExtensionAttribute]
public static string ToXmlString(IArgument argument);
    [NotNullAttribute]
[ExtensionAttribute]
public static string ToXmlString(IInfo info);
    [NotNullAttribute]
[ExtensionAttribute]
public static string ToXmlString(ProfileConfiguration profileConfiguration);
    [NotNullAttribute]
public static ProfileConfiguration CreateProfileConfiguration(string xmlString, IHostXmlResurrector hostXmlResurrector);
    [NotNullAttribute]
[ExtensionAttribute]
public static XmlDocument ToXmlDocument(ProfileConfiguration profileConfiguration);
    public static void FromXmlString(string xmlConfig, Action`1<XmlElement> action);
    public static void WriteArgumentToXml(XmlElement element, IArgument t, string tagName);
    public static void WriteInfoToXml(XmlElement element, IInfo t, string tagName);
    public static void WriteHostParametersToXml(XmlElement element, IHostParameters t, string tagName);
    public static void WriteCoreOptionsToXml(XmlElement element, ICoreOptions t, string tagName);
    public static void WriteHostOptionsToXml(XmlElement element, IHostOptions t, string tagName);
    [CanBeNullAttribute]
public static IArgument ReadArgumentFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static IInfo ReadInfoFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static IHostParameters ReadHostParametersFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static ICoreOptions ReadCoreOptionsFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CanBeNullAttribute]
public static IHostOptions ReadHostOptionsFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element, string tagName);
    [CompilerGeneratedAttribute]
private static string <WriteArgumentToXml>b__c(IArgument x);
    [CompilerGeneratedAttribute]
private static string <WriteInfoToXml>b__e(IInfo x);
    [CompilerGeneratedAttribute]
private static string <WriteHostParametersToXml>b__10(IHostParameters x);
    [CompilerGeneratedAttribute]
private static string <WriteCoreOptionsToXml>b__12(ICoreOptions x);
    [CompilerGeneratedAttribute]
private static string <WriteHostOptionsToXml>b__14(IHostOptions x);
}
public interface JetBrains.Profiler.Configuration.IHostXmlExternalizable {
    public abstract virtual void ReadFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element);
    public abstract virtual void WriteToXml(XmlElement element);
}
public interface JetBrains.Profiler.Configuration.IHostXmlResurrector {
    [NotNullAttribute]
public abstract virtual IHostParameters CreateEmptyHostParametersFrom(string name);
    [NotNullAttribute]
public abstract virtual IArgument CreateEmptyArgumentFrom(string name);
    [NotNullAttribute]
public abstract virtual IInfo CreateEmptyInfoFrom(string name);
    [NotNullAttribute]
public abstract virtual ICoreOptions CreateEmptyCoreOptionsFrom(string name);
    [NotNullAttribute]
public abstract virtual IHostOptions CreateEmptyHostOptionsFrom(string name);
}
public interface JetBrains.Profiler.Configuration.IInterface`1 {
}
public interface JetBrains.Profiler.Configuration.Info.IInfo {
}
public interface JetBrains.Profiler.Configuration.Info.IInfoWrite {
    public abstract virtual void WriteToBridge(BinaryWriter writer);
}
[AttributeUsageAttribute("4")]
public class JetBrains.Profiler.Configuration.Info.InfoAttribute : Attribute {
    public Guid Id;
    public InfoAttribute(string guid);
}
public enum JetBrains.Profiler.Configuration.Options.ControlKind : Enum {
    public byte value__;
    public static ControlKind Manual;
    public static ControlKind Api;
    public static ControlKind ApiFirst;
    public static ControlKind RemoteApi;
}
public interface JetBrains.Profiler.Configuration.Options.ICoreOptions {
    public ControlKind ControlKind { get; public set; }
    public string RemoteEndPoint { get; public set; }
    public abstract virtual ControlKind get_ControlKind();
    public abstract virtual void set_ControlKind(ControlKind value);
    public abstract virtual string get_RemoteEndPoint();
    public abstract virtual void set_RemoteEndPoint(string value);
}
public interface JetBrains.Profiler.Configuration.Options.IHostOptions {
    public ReprofileDisableReason ReprofileDisableReason { get; public set; }
    public abstract virtual ReprofileDisableReason get_ReprofileDisableReason();
    public abstract virtual void set_ReprofileDisableReason(ReprofileDisableReason value);
}
public enum JetBrains.Profiler.Configuration.Options.ReprofileDisableReason : Enum {
    public UInt32 value__;
    public static ReprofileDisableReason None;
    public static ReprofileDisableReason LaunchedByReSharperUnitTestRunner;
    public static ReprofileDisableReason ProcessPidIsUnavailable;
}
public class JetBrains.Profiler.Configuration.ProfileConfiguration : object {
    [HostFieldAttribute]
[CanBeNullAttribute]
public IArgument Argument;
    [CanBeNullAttribute]
[HostFieldAttribute]
public IHostParameters HostParameters;
    [CanBeNullAttribute]
[HostFieldAttribute]
public IInfo Info;
    [HostFieldAttribute]
[CanBeNullAttribute]
public ICoreOptions CoreOptions;
    [CanBeNullAttribute]
[HostFieldAttribute]
public IHostOptions HostOptions;
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual ProfileConfiguration Clone();
    public sealed virtual bool Equals(ProfileConfiguration other);
    public sealed virtual void ReadFromXml(IHostXmlResurrector hostXmlResurrector, XmlElement element);
    public sealed virtual void WriteToXml(XmlElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ProfileConfiguration left, ProfileConfiguration right);
    public static bool op_Inequality(ProfileConfiguration left, ProfileConfiguration right);
}
public class JetBrains.Profiler.Configuration.TitleProperty : object {
    [NotNullAttribute]
public string DisplayValue;
    public TitlePropertyFlags Flags;
    [NotNullAttribute]
public string TooltipValue;
    [NotNullAttribute]
public object Value;
    public TitleProperty(object value, TitlePropertyFlags flags, string displayValue);
    public TitleProperty(object value, TitlePropertyFlags flags, string displayValue, string tooltipValue);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Configuration.TitlePropertyFlags : Enum {
    public byte value__;
    public static TitlePropertyFlags Text;
    public static TitlePropertyFlags FilePath;
}
public static class JetBrains.Profiler.Constants.HostUIConstants : object {
    public static string WindowsServiceIsInSystemGroups;
    public static string WindowsServiceShared;
    public static string SilverlightKillBrowsers;
    public static string KillUsingPortProcess;
    public static string NotAllCoresInstalled;
    public static string OpenUIOpenSnapshotFailed;
    public static string OpenUIOpenSnapshotTimeout;
}
public static class JetBrains.Profiler.Constants.NameEncodingAdapter : object {
    [NotNullAttribute]
public static string Name(HostOperation op);
    [NotNullAttribute]
public static string Name(CoreOperation op);
    [NotNullAttribute]
public static string Name(AlertSeverity op);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IArgumentFactory")]
public class JetBrains.Profiler.Factories.ArgumentFactoryAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public ArgumentFactoryAttribute(int sequenceIndex);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Factories.CoreConfiguration : Enum {
    public byte value__;
    public static CoreConfiguration Release;
    public static CoreConfiguration Debug;
    public static CoreConfiguration Test;
}
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.ICoreOptionsFactory")]
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.Profiler.Factories.CoreOptionsFactoryAttribute : HostFactoryAttribute {
}
[FlagsAttribute]
public enum JetBrains.Profiler.Factories.HostCompatibilityOptions : Enum {
    public UInt32 value__;
    public static HostCompatibilityOptions Default;
    public static HostCompatibilityOptions AsAdministrator;
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IHostOptionsFactory")]
public class JetBrains.Profiler.Factories.HostOptionsFactoryAttribute : HostFactoryAttribute {
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IHostParametersFactory")]
[AttributeUsageAttribute("4")]
public class JetBrains.Profiler.Factories.HostParametersFactoryAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public HostParametersFactoryAttribute(int sequenceIndex);
}
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IHostParametersFactoryGroup")]
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
public class JetBrains.Profiler.Factories.HostParametersFactoryGroupAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public HostParametersFactoryGroupAttribute(int sequenceIndex);
}
public interface JetBrains.Profiler.Factories.IArgumentFactory {
    public ProfileMode ProfileMode { get; }
    [NotNullAttribute]
public IconId DisplayImage { get; }
    public abstract virtual ProfileMode get_ProfileMode();
    public abstract virtual IconId get_DisplayImage();
    [NotNullAttribute]
public abstract virtual MessageResult IsCompatible(IHostParametersFactory factory);
    [NotNullAttribute]
public abstract virtual MessageResult IsCompatible(IHost host, HostCompatibilityOptions options);
    [CanBeNullAttribute]
public abstract virtual TitleProperty CreateDefaultTitleValue(IArgument argument);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<DescriptionProperty> CreateDefaultTitlePresentation(IArgument argument);
}
public interface JetBrains.Profiler.Factories.ICoreOptionsFactory {
}
public interface JetBrains.Profiler.Factories.IFactory`1 {
    [NotNullAttribute]
public Type RelatedType { get; }
    [NotNullAttribute]
public string DisplayName { get; }
    public abstract virtual Type get_RelatedType();
    public abstract virtual string get_DisplayName();
    [NotNullAttribute]
public abstract virtual TInterface CreateEmpty();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<DescriptionProperty> CreateDefaultPresentation(TInterface obj);
}
public interface JetBrains.Profiler.Factories.IHostOptionsFactory {
}
public interface JetBrains.Profiler.Factories.IHostParametersFactory {
    [NotNullAttribute]
public IHostParametersFactoryGroup FactoryGroup { get; }
    [NotNullAttribute]
public Type CoreOptionsType { get; }
    [NotNullAttribute]
public Type HostOptionsType { get; }
    [NotNullAttribute]
public IconId DisplayImage { get; }
    [NotNullAttribute]
public string Description { get; }
    [NotNullAttribute]
public MessageResult IsActive { get; }
    [CanBeNullAttribute]
public IHostParameters AutoConnectHostParameters { get; }
    public abstract virtual IHostParametersFactoryGroup get_FactoryGroup();
    public abstract virtual Type get_CoreOptionsType();
    public abstract virtual Type get_HostOptionsType();
    public abstract virtual IconId get_DisplayImage();
    public abstract virtual string get_Description();
    public abstract virtual MessageResult get_IsActive();
    public abstract virtual IHostParameters get_AutoConnectHostParameters();
    [CanBeNullAttribute]
public abstract virtual TFactoryFeatures GetArgumentFactoryFeatures();
    [CanBeNullAttribute]
public abstract virtual TFactoryFeatures GetInfoFactoryFeatures(ProfileMode profileMode);
    [NotNullAttribute]
public abstract virtual IHost CreateHost(Lifetime lifetime, IHostParameters hostParameters);
    [NotNullAttribute]
public abstract virtual IHostParameters UpdateDisplayFields(IHostParameters hostParameters);
}
public interface JetBrains.Profiler.Factories.IHostParametersFactoryGroup {
    [NotNullAttribute]
public Type[] RelatedTypes { get; }
    public abstract virtual Type[] get_RelatedTypes();
    [NotNullAttribute]
public abstract virtual ProfileGroupDisplayInfo GetInfo(IArgumentFactory argumentFactory);
}
public interface JetBrains.Profiler.Factories.IInfoFactory {
    public HostBridgeType HostBridgeType { get; }
    public InfoType InfoType { get; }
    public abstract virtual HostBridgeType get_HostBridgeType();
    public abstract virtual InfoType get_InfoType();
    [NotNullAttribute]
public abstract virtual string GetProfiler(IInfo info, CoreConfiguration configuration);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<CoreCommand> GetSupportedCoreCommands(IInfo info);
    [NotNullAttribute]
public abstract virtual MessageResult IsCompatible(IHostParametersFactory factory, ProfileMode profileMode);
    [NotNullAttribute]
public abstract virtual MessageResult IsCompatible(IHost host, ProfileMode profileMode);
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IInfoFactory")]
public class JetBrains.Profiler.Factories.InfoFactoryAttribute : HostFactoryAttribute {
    public int SequenceIndex;
    public InfoFactoryAttribute(int sequenceIndex);
}
public enum JetBrains.Profiler.Factories.InfoType : Enum {
    public byte value__;
    public static InfoType Coverage;
    public static InfoType Memory;
    public static InfoType Performance;
    public static InfoType Timeline;
}
public interface JetBrains.Profiler.Factories.IProcessToAttachFilter {
    public abstract virtual bool Filter(ProcessInfo processInfo);
}
public enum JetBrains.Profiler.Factories.ProfileMode : Enum {
    public byte value__;
    public static ProfileMode StartProcess;
    public static ProfileMode AttachToProcess;
}
public class JetBrains.Profiler.FactoryNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [NotNullAttribute]
public string TypeName { get; private set; }
    [CanBeNullAttribute]
public Type Type { get; private set; }
    public FactoryNotFoundException(string message, string typeName);
    public FactoryNotFoundException(string message, Type type);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
private void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
public interface JetBrains.Profiler.Features.IArgumentFactoryFeatures {
}
public interface JetBrains.Profiler.Features.IArgumentFeatures`1 {
}
public interface JetBrains.Profiler.Features.IFactoryFeatures {
}
public interface JetBrains.Profiler.Features.IFeatures`1 {
    [NotNullAttribute]
public TFactoryFeature FactoryFeatures { get; }
    public abstract virtual TFactoryFeature get_FactoryFeatures();
}
public interface JetBrains.Profiler.Features.IInfoFactoryFeatures {
    [NotNullAttribute]
public abstract virtual MessageResult IsProfileSupported(IInfo info);
    [NotNullAttribute]
public abstract virtual MessageResult IsDetachSupported(IInfo info);
}
public interface JetBrains.Profiler.Features.IInfoFeatures`2 {
    [NotNullAttribute]
public TClass Default { get; }
    public abstract virtual TClass get_Default();
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.CopyFileMode : Enum {
    public UInt32 value__;
    public static CopyFileMode None;
    public static CopyFileMode Overwrite;
}
public class JetBrains.Profiler.Host.DevelopmentServerInfo : object {
    private static string SerNamePath;
    private static string SerNameRuntimeVersion;
    private static string SerNameVSVersion;
    [NotNullAttribute]
public string Executable;
    [NotNullAttribute]
public Version2 RuntimeVersion;
    [NotNullAttribute]
public Version2 VsVersion;
    public DevelopmentServerInfo(Version2 runtimeVersion, Version2 vsVersion, string executable);
    protected DevelopmentServerInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.HostCleanUpFlags : Enum {
    public byte value__;
    public static HostCleanUpFlags Regsitry;
    public static HostCleanUpFlags TempFolders;
    public static HostCleanUpFlags TransparentIntegration;
    public static HostCleanUpFlags All;
}
public enum JetBrains.Profiler.Host.HostElevationMode : Enum {
    public byte value__;
    public static HostElevationMode Default;
    public static HostElevationMode Full;
    public static HostElevationMode Limited;
}
[BaseTypeRequiredAttribute("JetBrains.Profiler.Factories.IFactory`1")]
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public abstract class JetBrains.Profiler.Host.HostFactoryAttribute : ComponentAttribute {
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Host.HostUtil : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static IHost CreateHost(IHostParameters hostParameters, Lifetime lifetime, IHostManager hostManager);
}
public interface JetBrains.Profiler.Host.IHost {
    [CanBeNullAttribute]
public ISystemHost Local { get; }
    [NotNullAttribute]
public IHostParameters HostParameters { get; }
    public bool AcceptLocalFileSystem { get; }
    public bool IsXperfExists { get; }
    [NotNullAttribute]
public CoreRegistration[] SupportedAdditionalCoreRegistrations { get; }
    public abstract virtual ISystemHost get_Local();
    public abstract virtual IHostParameters get_HostParameters();
    public abstract virtual bool get_AcceptLocalFileSystem();
    public abstract virtual bool get_IsXperfExists();
    public abstract virtual CoreRegistration[] get_SupportedAdditionalCoreRegistrations();
    [CanBeNullAttribute]
public abstract virtual TFeatures GetArgumentFeatures();
    [CanBeNullAttribute]
public abstract virtual TFeatures GetInfoFeatures(ProfileMode profileMode);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ProcessInfo> GetProcessesToAttach();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<DevelopmentServerInfo> GetDevelopmentServers();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IISExpressInfo> GetIISExpresses();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IISSiteInfo> GetIISExpressSites(string iisExpress, bool useUserConfigurationFile, string configurationFile);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<WcfHostInfo> GetWcfHosts();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<PackageInfo> GetMetroPackages();
    [NotNullAttribute]
public abstract virtual IArgument UpdateDisplayFields(IArgument argument);
    [NotNullAttribute]
public abstract virtual IHostProfileSubscription Profile(Lifetime lifetime, IArgument argument, IInfo info, ICoreOptions coreOptions, IHostOptions hostOptions);
    public abstract virtual void CleanUp(IProgressIndicator progress, HostCleanUpFlags hostCleanUpFlags);
}
public interface JetBrains.Profiler.Host.IHostBrowser {
    [NotNullAttribute]
public abstract virtual string GetDefaultInternetBrowser();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<InternetBrowserInfo> GetInternetBrowsers();
}
public interface JetBrains.Profiler.Host.IHostDirectory {
    [NotNullAttribute]
public abstract virtual string CreateGlobalTempDirectory(Lifetime lifetime, string prefix);
    [NotNullAttribute]
public abstract virtual string CreateUserTempDirectory(Lifetime lifetime, string prefix);
    public abstract virtual bool ExistsDirectory(string remotePath);
    public abstract virtual void CreateDirectory(string remotePath);
    public abstract virtual void DeleteDirectory(string remotePath);
    [NotNullAttribute]
public abstract virtual String[] GetChildDirectories(string remotePath, string searchPattern);
    [NotNullAttribute]
public abstract virtual String[] GetChildFiles(string remotePath, string searchPattern);
}
public interface JetBrains.Profiler.Host.IHostEnvironment {
    [NotNullAttribute]
public OperatingSystem OSVersion { get; }
    public bool HasAdministrativeRights { get; }
    public HostElevationMode ElevationMode { get; }
    [NotNullAttribute]
public IEnumerable`1<InstructionSet> InstructionSets { get; }
    public abstract virtual OperatingSystem get_OSVersion();
    public abstract virtual bool get_HasAdministrativeRights();
    public abstract virtual HostElevationMode get_ElevationMode();
    public abstract virtual IEnumerable`1<InstructionSet> get_InstructionSets();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<Version> GetInstalledRuntimeVersions(InstructionSet instructionSet);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<Version> GetInstalledFrameworkVersions(InstructionSet instructionSet, Version runtimeVersion);
    [NotNullAttribute]
public abstract virtual string GetRuntimeDirectory(InstructionSet instructionSet, Version runtimeVersion);
    [NotNullAttribute]
public abstract virtual string GetFolderPath(InstructionSet instructionSet, SpecialFolder specialFolder);
    [NotNullAttribute]
public abstract virtual string Expand(InstructionSet instructionSet, string str);
}
public interface JetBrains.Profiler.Host.IHostFile {
    [NotNullAttribute]
public abstract virtual string CreateGlobalTempFile(Lifetime lifetime, string prefix);
    [NotNullAttribute]
public abstract virtual string CreateUserTempFile(Lifetime lifetime, string prefix);
    public abstract virtual long GetFileLength(string remoteFile);
    public abstract virtual bool ExistsFile(string remoteFile);
    public abstract virtual void PutFile(IProgressIndicator progress, string localFile, string remoteFile);
    public abstract virtual void GetFile(IProgressIndicator progress, string localFile, string remoteFile);
    public abstract virtual void DeleteFile(string remoteFile);
    public abstract virtual void CopyFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, CopyFileMode mode);
    public abstract virtual void MoveFile(IProgressIndicator progress, string remoteSourceFile, string remoteDestinationFile, MoveFileMode mode);
}
public interface JetBrains.Profiler.Host.IHostService {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<WindowsServiceInfo> GetServices();
}
public class JetBrains.Profiler.Host.IISBindingInfo : object {
    private static string SerNameProtocol;
    private static string SerNameHost;
    private static string SerNamePort;
    private static string SerNameIPAddress;
    [NotNullAttribute]
public string Host;
    [CanBeNullAttribute]
public IPAddress IPAddress;
    public ushort Port;
    [NotNullAttribute]
public string Protocol;
    public IISBindingInfo(string protocol, string host, ushort port, IPAddress ipAddress);
    protected IISBindingInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.IISExpressInfo : object {
    private static string SerNamePath;
    private static string SerNameToolVersion;
    private static string SerNameInstructionSet;
    [NotNullAttribute]
public string Executable;
    public InstructionSet InstructionSet;
    [NotNullAttribute]
public Version2 ToolVersion;
    public IISExpressInfo(InstructionSet instructionSet, Version2 toolVersion, string executable);
    protected IISExpressInfo(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.IISSiteInfo : object {
    private static string SerNameName;
    private static string SerNameId;
    private static string SerNameBindings;
    [NotNullAttribute]
public IISBindingInfo[] Bindings;
    public UInt32 Id;
    [NotNullAttribute]
public string Name;
    public IISSiteInfo(string name, UInt32 id, IISBindingInfo[] bindings);
    protected IISSiteInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum JetBrains.Profiler.Host.InstructionSet : Enum {
    public byte value__;
    public static InstructionSet Unknown;
    public static InstructionSet x86;
    public static InstructionSet x64;
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.InternetBrowserFlags : Enum {
    public UInt32 value__;
    public static InternetBrowserFlags None;
    public static InternetBrowserFlags SupportSilverlight;
}
public class JetBrains.Profiler.Host.InternetBrowserInfo : object {
    [NotNullAttribute]
public string Browser;
    [NotNullAttribute]
public string DisplayBrowser;
    public InternetBrowserFlags Flags;
    public InternetBrowserInfo(string browser, string displayBrowser, InternetBrowserFlags flags);
    public virtual string ToString();
}
public interface JetBrains.Profiler.Host.ISystemHost {
    [NotNullAttribute]
public IProperty`1<bool> HasCommunicationError { get; }
    public abstract virtual IProperty`1<bool> get_HasCommunicationError();
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.MoveFileMode : Enum {
    public UInt32 value__;
    public static MoveFileMode None;
    public static MoveFileMode Overwrite;
    public static MoveFileMode ResetPermissions;
    public static MoveFileMode Modifiable;
}
public class JetBrains.Profiler.Host.PackageInfo : object {
    private static string SerNameDisplayName;
    private static string SerNamePublisherDisplayName;
    private static string SerNameName;
    private static string SerNameFamilyName;
    private static string SerNameFullName;
    private static string SerNameIsFramework;
    private static string SerNameVersion;
    private static string SerNameArchitecture;
    private static string SerNamePublisher;
    private static string SerNamePublisherId;
    private static string SerNameInstalledLocation;
    private static string SerNameApplications;
    [NotNullAttribute]
public ApplicationInfo[] Applications;
    public ProcessorArchitecture Architecture;
    [NotNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public string FamilyName;
    [NotNullAttribute]
public string FullName;
    [NotNullAttribute]
public string InstalledLocation;
    public bool IsFramework;
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Publisher;
    [NotNullAttribute]
public string PublisherDisplayName;
    [NotNullAttribute]
public string PublisherId;
    [NotNullAttribute]
public Version Version;
    public PackageInfo(string displayName, string publisherDisplayName, bool isFramework, string name, string familyName, string fullName, Version version, ProcessorArchitecture architecture, string publisher, string publisherId, string installedLocation, ApplicationInfo[] applications);
    protected PackageInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.ProcessInfo : object {
    private static string SerNameUserInfo;
    private static string SerNameName;
    private static string SerNameExecutable;
    private static string SerNameCommandLine;
    private static string SerNameInstructionSet;
    private static string SerNameMainWindowTitle;
    private static string SerNameProcessId;
    private static string SerNameRuntimeVersionsCount;
    private static string SerNameFlags;
    private static string SerNameRuntimeVersions;
    [NotNullAttribute]
public string CommandLine;
    [NotNullAttribute]
public string Executable;
    public InstructionSet InstructionSet;
    [NotNullAttribute]
public string MainWindowTitle;
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string PackageFullName;
    public int ProcessId;
    [NotNullAttribute]
public Version[] RuntimeVersions;
    [NotNullAttribute]
public UserInfo UserInfo;
    public ProcessInfoFlags Flags;
    public ProcessInfo(int processId, InstructionSet instructionSet, UserInfo userInfo, string name, string packageFullName, string executable, string commandLine, string mainWindowTitle, ProcessInfoFlags flags, Version[] runtimeVersions);
    protected ProcessInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum JetBrains.Profiler.Host.ProcessInfoFlags : Enum {
    public UInt32 value__;
    public static ProcessInfoFlags None;
    public static ProcessInfoFlags PerServiceSid;
    public static ProcessInfoFlags WriteRestricted;
}
public class JetBrains.Profiler.Host.ProfileProcessInfo : object {
    [NotNullAttribute]
public string CommandLine;
    [NotNullAttribute]
public IDictionary`2<string, string> EnvironmentVariables;
    [NotNullAttribute]
public string Executable;
    public bool IsFirstProcess;
    public int ProcessId;
    public InstructionSet InstructionSet;
    [NotNullAttribute]
public RuntimeVersion RuntimeVersion;
    [NotNullAttribute]
public string UserName;
    public ProfileProcessInfo(int processId, bool isFirstProcess, RuntimeVersion runtimeVersion, InstructionSet instructionSet, string userName, string executable, string commandLine, IDictionary`2<string, string> environmentVariables);
}
public enum JetBrains.Profiler.Host.RuntimeInterface : Enum {
    public byte value__;
    public static RuntimeInterface Unknown;
    public static RuntimeInterface V1;
    public static RuntimeInterface V2;
    public static RuntimeInterface V3;
    public static RuntimeInterface V4;
    public static RuntimeInterface V5;
    public static RuntimeInterface V6;
    public static RuntimeInterface V7;
    public static RuntimeInterface V8;
}
public enum JetBrains.Profiler.Host.RuntimeType : Enum {
    public byte value__;
    public static RuntimeType Unknown;
    public static RuntimeType Desktop;
    public static RuntimeType Core;
}
public class JetBrains.Profiler.Host.RuntimeVersion : object {
    public RuntimeInterface Interface;
    public RuntimeType Type;
    public Version Version;
    public RuntimeVersion(RuntimeInterface runtimeInterface, RuntimeType runtimeType, Version runtimeVersion);
}
public class JetBrains.Profiler.Host.UserInfo : object {
    private static string SerNameName;
    private static string SerNameSid;
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Sid;
    public UserInfo(string name, string sid);
    protected UserInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.WcfHostInfo : object {
    private static string SerNamePath;
    private static string SerNameRuntimeVersion;
    private static string SerNameVsVersion;
    private static string SerNameVsInstanceId;
    [NotNullAttribute]
public string Executable;
    [NotNullAttribute]
public Version2 RuntimeVersion;
    [NotNullAttribute]
public string VsInstanceId;
    [NotNullAttribute]
public Version2 VsVersion;
    public WcfHostInfo(Version2 runtimeVersion, Version2 vsVersion, string vsInstanceId, string executable);
    protected WcfHostInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class JetBrains.Profiler.Host.WindowsServiceInfo : object {
    [NotNullAttribute]
public string DisplayServiceName;
    [NotNullAttribute]
public string ServiceName;
    public WindowsServiceInfo(string serviceName, string displayServiceName);
}
public class JetBrains.Profiler.Identities.CoreIdentity : object {
    public Guid CoreGuid;
    public Guid ProcessGuid;
    private CoreIdentity JetBrains.Profiler.Identities.IIdentity.CoreIdentity { get; }
    private SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.SnapshotIdentity { get; }
    public CoreIdentity(Guid processGuid, Guid coreGuid);
    public sealed virtual bool Equals(CoreIdentity other);
    private sealed virtual override CoreIdentity JetBrains.Profiler.Identities.IIdentity.get_CoreIdentity();
    private sealed virtual override SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.get_SnapshotIdentity();
    public sealed virtual bool Equals(IIdentity other);
    public string ToLog();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Identities.IdentityUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToLog(IIdentity identity);
}
public interface JetBrains.Profiler.Identities.IIdentity {
    [NotNullAttribute]
public CoreIdentity CoreIdentity { get; }
    [CanBeNullAttribute]
public SnapshotIdentity SnapshotIdentity { get; }
    public abstract virtual CoreIdentity get_CoreIdentity();
    public abstract virtual SnapshotIdentity get_SnapshotIdentity();
}
public class JetBrains.Profiler.Identities.SnapshotIdentity : object {
    public CoreIdentity CoreIdentity;
    public Guid SequenceGuid;
    public UInt32 SequenceIndex;
    public Guid SnapshotGuid;
    private CoreIdentity JetBrains.Profiler.Identities.IIdentity.CoreIdentity { get; }
    private SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.SnapshotIdentity { get; }
    public SnapshotIdentity(CoreIdentity coreIdentity, Guid sequenceGuid, UInt32 sequenceIndex, Guid snapshotGuid);
    public sealed virtual bool Equals(SnapshotIdentity other);
    private sealed virtual override CoreIdentity JetBrains.Profiler.Identities.IIdentity.get_CoreIdentity();
    private sealed virtual override SnapshotIdentity JetBrains.Profiler.Identities.IIdentity.get_SnapshotIdentity();
    public sealed virtual bool Equals(IIdentity other);
    public string ToLog();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public interface JetBrains.Profiler.IHostManager {
    [NotNullAttribute]
public IEnumerable`1<IHostParametersFactoryGroup> HostParametersFactoryGroups { get; }
    [NotNullAttribute]
public IEnumerable`1<IHostParametersFactory> HostParametersFactories { get; }
    [NotNullAttribute]
public IEnumerable`1<IArgumentFactory> ArgumentFactories { get; }
    [NotNullAttribute]
public IEnumerable`1<IInfoFactory> InfoFactories { get; }
    [NotNullAttribute]
public IEnumerable`1<ProfileGroup> ProfileGroups { get; }
    public abstract virtual IEnumerable`1<IHostParametersFactoryGroup> get_HostParametersFactoryGroups();
    public abstract virtual IEnumerable`1<IHostParametersFactory> get_HostParametersFactories();
    public abstract virtual IEnumerable`1<IArgumentFactory> get_ArgumentFactories();
    public abstract virtual IEnumerable`1<IInfoFactory> get_InfoFactories();
    public abstract virtual IEnumerable`1<ProfileGroup> get_ProfileGroups();
    [NotNullAttribute]
public abstract virtual IArgumentFactory GetArgumentFactory(Type type);
    [NotNullAttribute]
public abstract virtual IInfoFactory GetInfoFactory(Type type);
    [NotNullAttribute]
public abstract virtual IHostParametersFactory GetHostParametersFactory(Type type);
    [NotNullAttribute]
public abstract virtual ICoreOptionsFactory GetCoreOptionsFactory(Type type);
    [NotNullAttribute]
public abstract virtual IHostOptionsFactory GetHostOptionsFactory(Type type);
    [NotNullAttribute]
public abstract virtual IHostParametersFactoryGroup GetHostParametersFactoryGroup(Type type);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IHostParametersFactory> GetProfileGroupFactories(ProfileGroup profileGroup);
}
[ShellComponentAttribute]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.Profiler.Impl.HostManager : HostManagerBase {
    public HostManager(Lifetime lifetime, IComponentContainer parentComponentContainer, ShellPartCatalogSet partsCatalogueSet);
}
public abstract class JetBrains.Profiler.Impl.HostManagerBase : object {
    private IList`1<IArgumentFactory> myArgumentFactories;
    private IList`1<ICoreOptionsFactory> myCoreOptionsFactories;
    private IList`1<IHostOptionsFactory> myHostOptionsFactories;
    private IList`1<IHostParametersFactory> myHostParametersFactories;
    private IList`1<IHostParametersFactoryGroup> myHostParametersFactoryGroups;
    private IList`1<IInfoFactory> myInfoFactories;
    private IList`1<ProfileGroup> myProfilerGroups;
    [CompilerGeneratedAttribute]
private static Func`3<IHostParametersFactory, IArgumentFactory, IHostParametersFactory> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Comparison`1<ArgumentFactoryAttribute> CS$<>9__CachedAnonymousMethodDelegate2a;
    [CompilerGeneratedAttribute]
private static Comparison`1<InfoFactoryAttribute> CS$<>9__CachedAnonymousMethodDelegate2c;
    [CompilerGeneratedAttribute]
private static Comparison`1<HostParametersFactoryAttribute> CS$<>9__CachedAnonymousMethodDelegate2e;
    [CompilerGeneratedAttribute]
private static Comparison`1<HostParametersFactoryGroupAttribute> CS$<>9__CachedAnonymousMethodDelegate30;
    [CompilerGeneratedAttribute]
private static Func`3<IHostParametersFactory, IArgumentFactory, ProfileGroup> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<IHostParametersFactoryGroup, IEnumerable`1<<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup>>> CS$<>9__CachedAnonymousMethodDelegate4f;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup>, bool> CS$<>9__CachedAnonymousMethodDelegate50;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup>, Type> CS$<>9__CachedAnonymousMethodDelegate51;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<Type, <>f__AnonymousType0`2<Type, IHostParametersFactoryGroup>>, bool> CS$<>9__CachedAnonymousMethodDelegate52;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup>, string> CS$<>9__CachedAnonymousMethodDelegate53;
    public IEnumerable`1<IHostParametersFactoryGroup> HostParametersFactoryGroups { get; }
    public IEnumerable`1<IHostParametersFactory> HostParametersFactories { get; }
    public IEnumerable`1<IArgumentFactory> ArgumentFactories { get; }
    public IEnumerable`1<IInfoFactory> InfoFactories { get; }
    public IEnumerable`1<ProfileGroup> ProfileGroups { get; }
    public sealed virtual IEnumerable`1<IHostParametersFactoryGroup> get_HostParametersFactoryGroups();
    public sealed virtual IEnumerable`1<IHostParametersFactory> get_HostParametersFactories();
    public sealed virtual IEnumerable`1<IArgumentFactory> get_ArgumentFactories();
    public sealed virtual IEnumerable`1<IInfoFactory> get_InfoFactories();
    public sealed virtual IEnumerable`1<ProfileGroup> get_ProfileGroups();
    public sealed virtual IEnumerable`1<IHostParametersFactory> GetProfileGroupFactories(ProfileGroup profileGroup);
    public sealed virtual IArgumentFactory GetArgumentFactory(Type type);
    public sealed virtual IInfoFactory GetInfoFactory(Type type);
    public sealed virtual IHostParametersFactory GetHostParametersFactory(Type type);
    public sealed virtual ICoreOptionsFactory GetCoreOptionsFactory(Type type);
    public sealed virtual IHostOptionsFactory GetHostOptionsFactory(Type type);
    public sealed virtual IHostParametersFactoryGroup GetHostParametersFactoryGroup(Type type);
    public sealed virtual IHostParameters CreateEmptyHostParametersFrom(string name);
    public sealed virtual IArgument CreateEmptyArgumentFrom(string name);
    public sealed virtual IInfo CreateEmptyInfoFrom(string name);
    public sealed virtual ICoreOptions CreateEmptyCoreOptionsFrom(string name);
    public sealed virtual IHostOptions CreateEmptyHostOptionsFrom(string name);
    protected void SetArgumentFactories(IEnumerable`1<IArgumentFactory> factories);
    protected void SetInfoFactories(IEnumerable`1<IInfoFactory> factories);
    protected void SetHostParametersFactories(IEnumerable`1<IHostParametersFactory> factories);
    protected void SetHostParametersFactoryGroups(IEnumerable`1<IHostParametersFactoryGroup> factoryGroups);
    protected void SetCoreOptionsFactories(IEnumerable`1<ICoreOptionsFactory> factories);
    protected void SetHostOptionsFactories(IEnumerable`1<IHostOptionsFactory> factories);
    protected void InitializeProfilerGroups();
    private static void CheckCollisions(IList`1<TFactory> factories);
    private static void CheckCollisions(IEnumerable`1<IHostParametersFactoryGroup> factoryGroups);
    private static void SortList(IList`1<T> list, Comparison`1<TAttribute> comparer);
    [CompilerGeneratedAttribute]
private static IHostParametersFactory <GetProfileGroupFactories>b__3(IHostParametersFactory x, IArgumentFactory y);
    [CompilerGeneratedAttribute]
private static int <SetArgumentFactories>b__29(ArgumentFactoryAttribute x, ArgumentFactoryAttribute y);
    [CompilerGeneratedAttribute]
private static int <SetInfoFactories>b__2b(InfoFactoryAttribute x, InfoFactoryAttribute y);
    [CompilerGeneratedAttribute]
private static int <SetHostParametersFactories>b__2d(HostParametersFactoryAttribute x, HostParametersFactoryAttribute y);
    [CompilerGeneratedAttribute]
private static int <SetHostParametersFactoryGroups>b__2f(HostParametersFactoryGroupAttribute x, HostParametersFactoryGroupAttribute y);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IArgumentFactory> <InitializeProfilerGroups>b__31(IHostParametersFactory x);
    [CompilerGeneratedAttribute]
private static ProfileGroup <InitializeProfilerGroups>b__32(IHostParametersFactory x, IArgumentFactory y);
    [CompilerGeneratedAttribute]
private static bool <CheckCollisions>b__34(TFactory x);
    [CompilerGeneratedAttribute]
private static Type <CheckCollisions>b__37(TFactory x);
    [CompilerGeneratedAttribute]
private static bool <CheckCollisions>b__38(IGrouping`2<Type, TFactory> x);
    [CompilerGeneratedAttribute]
private static string <CheckCollisions>b__3a(TFactory x);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup>> <CheckCollisions>b__44(IHostParametersFactoryGroup x);
    [CompilerGeneratedAttribute]
private static bool <CheckCollisions>b__46(<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup> x);
    [CompilerGeneratedAttribute]
private static Type <CheckCollisions>b__49(<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup> x);
    [CompilerGeneratedAttribute]
private static bool <CheckCollisions>b__4a(IGrouping`2<Type, <>f__AnonymousType0`2<Type, IHostParametersFactoryGroup>> x);
    [CompilerGeneratedAttribute]
private static string <CheckCollisions>b__4c(<>f__AnonymousType0`2<Type, IHostParametersFactoryGroup> x);
}
public class JetBrains.Profiler.Launcher.LauncherCanceledException : LauncherException {
    public LauncherCanceledException(string message);
    public LauncherCanceledException(string message, Exception innerException);
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Launcher.LauncherController : object {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegateb;
    private static LauncherController();
    [ExtensionAttribute]
[NotNullAttribute]
public static IHostProfile RunProfiler(ProfileConfiguration configuration, Lifetime lifetime, IHostManager hostManager, IProgressIndicator connectingProgress, Func`2<IHostProfileSubscription, Pair`2<IProgressIndicator, IHostUI>> eventSubscriptionCallback, ICollection`1<string> excludeExecutables);
    private static TResult Rethrow(Func`1<string> failMessage, Func`1<TResult> func);
    private static void CheckMessageResult(MessageResult argumentResult);
    [CompilerGeneratedAttribute]
private static string <RunProfiler>b__0();
    [CompilerGeneratedAttribute]
private static string <RunProfiler>b__2();
    [CompilerGeneratedAttribute]
private static string <RunProfiler>b__6();
    [CompilerGeneratedAttribute]
private static string <Rethrow>b__14(Exception ex);
}
public class JetBrains.Profiler.Launcher.LauncherException : Exception {
    public LauncherException(string message);
    public LauncherException(string message, Exception innerException);
}
public class JetBrains.Profiler.Launcher.NoHostUI : object {
    public static IHostUI Instance;
    private static NoHostUI();
    public sealed virtual bool ShowYesNo(string id, string message, bool defaultButton);
}
public class JetBrains.Profiler.MessageResult : object {
    public static MessageResult Success;
    public static MessageResult UnnamedFail;
    public string Message;
    public bool IsSuccess { get; }
    public bool IsFail { get; }
    public bool IsUnnamedFail { get; }
    public bool IsNamedFail { get; }
    [NotNullAttribute]
public string MessageWithoutUrl { get; }
    public MessageResult(string message);
    private static MessageResult();
    public bool get_IsSuccess();
    public bool get_IsFail();
    public bool get_IsUnnamedFail();
    public bool get_IsNamedFail();
    public string get_MessageWithoutUrl();
    private bool Equals(MessageResult other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.OperationUtil : object {
    public static void Walk(IHostDirectory directory, string topPath, Func`2<string, bool> doDirectory, Action`1<string> doFile);
    public static void CleanUpTemp(IHost host, string path);
    [ExtensionAttribute]
public static void PutFolder(IHost host, string localPath, string remotePath);
    [ExtensionAttribute]
public static void PutFolder(IHost host, string localPath, string remotePath, Func`2<string, bool> directoryFilter, Func`2<string, bool> fileFilter);
    [ExtensionAttribute]
public static void GetFolder(IHost host, string localPath, string remotePath);
    [ExtensionAttribute]
public static void GetFolder(IHost host, string localPath, string remotePath, Func`2<string, bool> directoryFilter, Func`2<string, bool> fileFilter);
}
public static class JetBrains.Profiler.Prefix : object {
    public static string Name;
}
public enum JetBrains.Profiler.Profile.AlertSeverity : Enum {
    public byte value__;
    public static AlertSeverity Warning;
    public static AlertSeverity Error;
}
public abstract class JetBrains.Profiler.Profile.Bridge.BaseBridge : object {
    protected static int TimeoutStart;
    protected static int TimeoutSleep;
    private static string ourId;
    private static ILogger ourLogger;
    private static ReadonlyToken ourReadonlyToken;
    private static Guid ourVersion;
    public ISignal`1<ConnectingEventArgs> Connecting;
    public ICollectionEvents`1<ICoreHostProfile> Connections;
    public ISignal`1<HostAlertEventArgs> Alert;
    private BaseBridgeParam myParam;
    private Thread myThread;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myBlockSubscription;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myHasStopRequest;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsActive;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsThreadStarted;
    [CompilerGeneratedAttribute]
private static Func`3<byte, BinaryReader, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`3<byte, BinaryReader, <>f__AnonymousType1`4<CoreIdentity, ProfileProcessInfo, Guid, string>> CS$<>9__CachedAnonymousMethodDelegatef;
    public HostBridgeType HostBridgeType { get; }
    protected BaseBridge(BaseBridgeParam param);
    private static BaseBridge();
    public HostBridgeType get_HostBridgeType();
    protected void FireAlert(HostAlertEventArgs args);
    public void Activate();
    public void Deactivate();
    public void BlockSubscribtion();
    private bool ThrowIfNeed(Action`1<TValue> action);
    protected abstract virtual void DoWork(Action setThreadStarted, Func`1<bool> isActive, Func`1<bool> hasStopRequest);
    protected abstract virtual void DoJoinThread();
    public void Start();
    private void JoinThread();
    [CanBeNullAttribute]
protected ICommandProcessor TryConnect(Lifetime lifetime, IPacketReader packetReader, IPacketWriter packetWriter, Action throwRequest);
    protected static bool IsQuit(byte answer);
    private static void WriteCleanEnvironments(BinaryWriter writer, IEnumerable`1<CleanBridgeEnvironment> cleanBridgeEnvironments);
    [NotNullAttribute]
private static IDictionary`2<string, string> ReadEnvironmentVariables(BinaryReader reader);
    private static InstructionSet GetInstructionSet(ProcessorArchitecture processorArchitecture);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__5();
    [CompilerGeneratedAttribute]
private bool <Start>b__7();
    [CompilerGeneratedAttribute]
private void <Start>b__8();
    [CompilerGeneratedAttribute]
private static bool <TryConnect>b__9(byte answer, BinaryReader reader);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1`4<CoreIdentity, ProfileProcessInfo, Guid, string> <TryConnect>b__a(byte answer, BinaryReader reader);
}
public class JetBrains.Profiler.Profile.Bridge.BaseBridgeParam : object {
    [NotNullAttribute]
public Func`1<BridgeConnectionParam> ConnectionParam;
    public HostBridgeType HostBridgeType;
    [NotNullAttribute]
public Lifetime Lifetime;
    public BaseBridgeParam(Lifetime lifetime, HostBridgeType hostBridgeType, Func`1<BridgeConnectionParam> connectionParam);
}
public class JetBrains.Profiler.Profile.Bridge.BridgeConnectionParam : object {
    [NotNullAttribute]
public IEnumerable`1<CleanBridgeEnvironment> CleanBridgeEnvironmentVariables;
    public ControlKind ControlKind;
    [NotNullAttribute]
public IHostManager HostManager;
    [NotNullAttribute]
public IInfo Info;
    [CanBeNullAttribute]
public Action`1<int> Kill;
    public UInt32 MemoryThresholdInMb;
    [CanBeNullAttribute]
public string PdbServerId;
    public bool PossibleDetach;
    [NotNullAttribute]
public ISessionFilesManager SessionFilesManager;
    [NotNullAttribute]
public Func`3<HResults, string, string> TranslateAlerts;
    [NotNullAttribute]
public string XmlConfig;
    public BridgeConnectionParam(IHostManager hostManager, ISessionFilesManager sessionFilesManager, string pdbServerId, ControlKind controlKind, IInfo info, string xmlConfig, IEnumerable`1<CleanBridgeEnvironment> cleanBridgeEnvironmentVariables, UInt32 memoryThresholdInMb, Action`1<int> kill, bool possibleDetach, Func`3<HResults, string, string> translateAlerts);
}
public class JetBrains.Profiler.Profile.Bridge.CleanBridgeEnvironment : object {
    [NotNullAttribute]
public string Key;
    public bool StartedWith;
    public CleanBridgeEnvironment(string key, bool startedWith);
}
public class JetBrains.Profiler.Profile.Bridge.CoreDirs : object {
    [CanBeNullAttribute]
public FileSystemPath DiagnosticsDir;
    [CanBeNullAttribute]
public FileSystemPath TemporaryDir;
    [CanBeNullAttribute]
public FileSystemPath SnapshotsDir;
    public CoreDirs(FileSystemPath temporaryDir, FileSystemPath diagnosticsDir, FileSystemPath snapshotsDir);
    public virtual string ToString();
}
public class JetBrains.Profiler.Profile.Bridge.Downloader : object {
    private static int UnblockLogLocalTimeout;
    private static int UnblockLogRemoteTimeout;
    private static int UnblockLogTestTimeout;
    private static ILogger ourLogger;
    private static ReadonlyToken ourReadonlyToken;
    private static Dictionary`2<LogSource, UInt32> ourIndexes;
    public ISignal`1<HostAlertEventArgs> Alert;
    public ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> LogDone;
    private IAsyncExecutor myExecutor;
    private IHost myHost;
    private bool myIsLocal;
    private bool myIsTest;
    private IAsyncOrderedSequenceQueue`2<Guid, int> myLogQueue;
    private IAsyncOrderedSequenceQueue`2<Guid, int> mySnapshotQueue;
    public ISignal`1<HostOperationEventArgs> Operation;
    public ISignal`1<HostScopeEventArgs> Scope;
    public ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> SnapshotDone;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myBlockSubscription;
    private int myId;
    public Downloader(Lifetime lifetime, IThreading threading, IHost host, bool isLocal, bool isTest);
    private static Downloader();
    private sealed virtual override void JetBrains.Profiler.Profile.Bridge.IDownloader.ProcessSnapshot(SnapshotIdentity identity, FileSystemPath localDir, string remoteIndexFile, String[] remoteLocalFiles, Action remoteCleanUp);
    private sealed virtual override void JetBrains.Profiler.Profile.Bridge.IDownloader.ProcessCoreLog(CoreIdentity identity, string remoteLog);
    public sealed virtual void ProcessLog(LogSource logSource, string remoteLog);
    public void BlockSubscribtion();
    private bool ThrowIfNeed(Action`1<TValue> action);
    private void DoOperation(int id, IIdentity identity, HostOperation hostOperation, Action cancel, Action`1<IProgressIndicator> doAction);
    private static void PassExceptionToFinally(Action action);
    private static bool TryAction(int timeout, Action`1<int> action);
    private void FireScope(int id, IIdentity identity, StartFinish action);
    private void FireOperation(int id, IIdentity identity, StartProgressFinish action, HostOperation hostOperation, double progress);
    private void FireSnapshotDone(int id, SnapshotIdentity snapshotIdentity, FileSystemPath localSnapshot);
    private void FireLogDone(int id, IIdentity identity, LogSource logSource, FileSystemPath localLog);
    [NotNullAttribute]
private FileSystemPath DoDownloadSnapshot(int id, SnapshotIdentity identity, Action cancel, FileSystemPath localDir, string remoteIndexFile, String[] remoteDataFiles, Action remoteCleanUp);
    private static void SafeDeleteLocalSnapshot(FileSystemPath localIndexFile);
    [NotNullAttribute]
private static FileSystemPath UnderLog(LogSource logSource, Action`1<FileSystemPath> action);
    [NotNullAttribute]
private FileSystemPath DoDownloadLog(LogSource logSource, int id, IIdentity identity, Action cancel, string remoteLog);
    private static void TrimLog(FileSystemPath localLog);
    private static void SafeDeleteLocalLog(FileSystemPath localLog);
}
public interface JetBrains.Profiler.Profile.Bridge.ICommandProcessor {
    [NotNullAttribute]
public ICoreHostProfile CoreHostProfile { get; }
    public abstract virtual ICoreHostProfile get_CoreHostProfile();
    public abstract virtual void FireAlert(CoreAlertEventArgs args);
    public abstract virtual void BlockSubscribtion();
    public abstract virtual bool Process(byte answer, BinaryReader reader);
}
public interface JetBrains.Profiler.Profile.Bridge.ICoreFilesManager {
    [NotNullAttribute]
public abstract virtual SafeFileHandle CreateTemporaryFile();
    [NotNullAttribute]
public abstract virtual SafeFileHandle CreateDiagnosticFile();
    public abstract virtual KeyValuePair`2<Guid, SafeFileHandle> CreateSnapshotFile();
    public abstract virtual void DeleteSnapshotFile(Guid id);
    public abstract virtual void ProcessSnapshot(SnapshotIdentity snapshotIdentity, Guid indexId, Guid[] dataIds);
    public abstract virtual void ProcessCoreLog(CoreIdentity coreIdentity, string remoteLog);
}
public interface JetBrains.Profiler.Profile.Bridge.IDownloader {
    public abstract virtual void ProcessSnapshot(SnapshotIdentity snapshotIdentity, FileSystemPath localDir, string remoteIndexFile, String[] remoteLocalFiles, Action remoteCleanUp);
    public abstract virtual void ProcessCoreLog(CoreIdentity coreIdentity, string remoteLog);
    public abstract virtual void ProcessLog(LogSource logSource, string remoteLog);
}
public class JetBrains.Profiler.Profile.Bridge.Impl.AsyncExecutor : object {
    private static ILogger ourLogger;
    private IThreading myThreading;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myStopRequest;
    public AsyncExecutor(Lifetime lifetime, IThreading threading);
    private static AsyncExecutor();
    public sealed virtual void Execute(Action`1<Action> process, Action`1<Exception> failed);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
}
internal abstract class JetBrains.Profiler.Profile.Bridge.Impl.CommandProcessor : object {
    private static ILogger ourLogger;
    protected static ReadonlyToken ReadonlyToken;
    protected static object StateLock;
    private ISignal`1<CoreAlertEventArgs> myAlert;
    private ISignal`1<CoreOperationEventArgs> myOperation;
    private CommandProcessorParam myParam;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myBlockSubscription;
    private OperationInfo myCurrentOperation;
    private bool myEnableDetach;
    public ICoreHostProfile CoreHostProfile { get; }
    public CoreIdentity CoreIdentity { get; }
    public ProfileProcessInfo ProfileProcessInfo { get; }
    public ISignal`1<CoreOperationEventArgs> Operation { get; }
    public ISignal`1<CoreAlertEventArgs> Alert { get; }
    public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    protected CommandProcessor(CommandProcessorParam param);
    private static CommandProcessor();
    public sealed virtual ICoreHostProfile get_CoreHostProfile();
    public sealed virtual CoreIdentity get_CoreIdentity();
    public sealed virtual void FireAlert(CoreAlertEventArgs args);
    public sealed virtual void BlockSubscribtion();
    public virtual bool Process(byte answer, BinaryReader reader);
    public sealed virtual ProfileProcessInfo get_ProfileProcessInfo();
    public sealed virtual ISignal`1<CoreOperationEventArgs> get_Operation();
    public sealed virtual ISignal`1<CoreAlertEventArgs> get_Alert();
    public abstract virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    public sealed virtual bool CanClose(CoreCloseWay coreCloseWay);
    public sealed virtual bool Close(CoreCloseWay coreCloseWay);
    protected abstract virtual void SwitchToError();
    protected abstract virtual void SwitchToTerminating();
    private bool ThrowIfNeed(Action`1<TValue> action);
    private void FireOperation(StartProgressFinish action, OperationInfo operationInfo, double progress);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(CoreAlertEventArgs x);
    [CompilerGeneratedAttribute]
private void <Close>b__13();
    [CompilerGeneratedAttribute]
private void <Close>b__14();
}
public class JetBrains.Profiler.Profile.Bridge.Impl.CommandProcessorParam : object {
    [NotNullAttribute]
public CoreIdentity CoreIdentity;
    [NotNullAttribute]
public ICoreFilesManager CoreFilesManager;
    [CanBeNullAttribute]
public Action`1<int> Kill;
    [NotNullAttribute]
public Lifetime Lifetime;
    [NotNullAttribute]
public IPacketWriter PacketWriter;
    public bool PossibleDetach;
    [NotNullAttribute]
public ProfileProcessInfo ProfileProcessInfo;
    [NotNullAttribute]
public Action ThrowRequest;
    [NotNullAttribute]
public Func`3<HResults, string, string> TranslateAlerts;
    public CommandProcessorParam(Lifetime lifetime, ICoreFilesManager coreFilesManager, CoreIdentity coreIdentity, ProfileProcessInfo profileProcessInfo, IPacketWriter packetWriter, Action`1<int> kill, bool possibleDetach, Func`3<HResults, string, string> translateAlerts, Action throwRequest);
}
public class JetBrains.Profiler.Profile.Bridge.Impl.HostBridgeDeclarations : object {
}
public interface JetBrains.Profiler.Profile.Bridge.Impl.IAsyncExecutor {
    public abstract virtual void Execute(Action`1<Action> process, Action`1<Exception> failed);
}
internal class JetBrains.Profiler.Profile.Bridge.Impl.MeasureCommandProcessor : CommandProcessor {
    private static ILogger ourLogger;
    private IProperty`1<MeasureCoreHostProfileStates> myMeasureState;
    private IProperty`1<CoreHostProfileStates> myState;
    private IPacketWriter myWriter;
    public object MeasureStateLock { get; }
    public IProperty`1<MeasureCoreHostProfileStates> MeasureState { get; }
    public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    public MeasureCommandProcessor(CommandProcessorParam param);
    private static MeasureCommandProcessor();
    public sealed virtual object get_MeasureStateLock();
    public sealed virtual IProperty`1<MeasureCoreHostProfileStates> get_MeasureState();
    public sealed virtual void Start();
    public sealed virtual void StopDrop();
    public sealed virtual void StopSave();
    public sealed virtual void StopDropStart();
    public sealed virtual void StopSaveStart();
    public virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    private static CoreHostProfileStates TranslateState(MeasureCoreHostProfileStates state);
    protected virtual void SwitchToError();
    protected virtual void SwitchToTerminating();
    public virtual bool Process(byte answer, BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<MeasureCoreHostProfileStates> x);
    [CompilerGeneratedAttribute]
private void <Start>b__3();
    [CompilerGeneratedAttribute]
private void <StopDrop>b__6();
    [CompilerGeneratedAttribute]
private void <StopSave>b__9();
    [CompilerGeneratedAttribute]
private void <StopDropStart>b__c();
    [CompilerGeneratedAttribute]
private void <StopSaveStart>b__f();
}
internal class JetBrains.Profiler.Profile.Bridge.Impl.MemoryCommandProcessor : CommandProcessor {
    private static ILogger ourLogger;
    private IProperty`1<SwitchCoreHostProfileStates> myAllocationsState;
    private IProperty`1<CoreHostProfileStates> myMemoryState;
    private IProperty`1<CoreHostProfileStates> myState;
    private IPacketWriter myWriter;
    [CompilerGeneratedAttribute]
private static Func`2<CoreHostProfileStates, bool> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<CoreHostProfileStates, bool> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<CoreHostProfileStates, bool> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<CoreHostProfileStates, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<CoreHostProfileStates, bool> CS$<>9__CachedAnonymousMethodDelegate17;
    public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    public IProperty`1<CoreHostProfileStates> MemoryState { get; }
    public IProperty`1<SwitchCoreHostProfileStates> AllocationsState { get; }
    public MemoryCommandProcessor(CommandProcessorParam param);
    private static MemoryCommandProcessor();
    public virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    public sealed virtual IProperty`1<CoreHostProfileStates> get_MemoryState();
    public sealed virtual IProperty`1<SwitchCoreHostProfileStates> get_AllocationsState();
    public sealed virtual void ForceGc();
    public sealed virtual void Dump();
    public sealed virtual void EnableAllocations();
    public sealed virtual void DisableAllocations();
    private static CoreHostProfileStates TranslateState(SwitchCoreHostProfileStates state);
    private static CoreHostProfileStates AggregateStates(CoreHostProfileStates[] states);
    protected virtual void SwitchToError();
    protected virtual void SwitchToTerminating();
    public virtual bool Process(byte answer, BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <ForceGc>b__3();
    [CompilerGeneratedAttribute]
private void <Dump>b__6();
    [CompilerGeneratedAttribute]
private void <EnableAllocations>b__9();
    [CompilerGeneratedAttribute]
private void <DisableAllocations>b__c();
    [CompilerGeneratedAttribute]
private static bool <AggregateStates>b__e(CoreHostProfileStates x);
    [CompilerGeneratedAttribute]
private static bool <AggregateStates>b__f(CoreHostProfileStates x);
    [CompilerGeneratedAttribute]
private static bool <AggregateStates>b__10(CoreHostProfileStates x);
    [CompilerGeneratedAttribute]
private static bool <AggregateStates>b__11(CoreHostProfileStates x);
    [CompilerGeneratedAttribute]
private static bool <AggregateStates>b__12(CoreHostProfileStates x);
}
public interface JetBrains.Profiler.Profile.Bridge.IPacketReader {
    public abstract virtual void Receive(Action`2<byte, BinaryReader> dataReader);
    public abstract virtual TResult Receive(Func`3<byte, BinaryReader, TResult> dataReader);
}
public interface JetBrains.Profiler.Profile.Bridge.IPacketWriter {
    public abstract virtual void Send(byte command, Action`1<BinaryWriter> writerAction);
}
public interface JetBrains.Profiler.Profile.Bridge.ISessionFilesManager {
    [NotNullAttribute]
public abstract virtual ICoreFilesManager CreateCoreFilesManager(int coreProcessId, CoreDirs coreDirs);
}
public enum JetBrains.Profiler.Profile.Bridge.LogSource : Enum {
    public byte value__;
    public static LogSource Core;
    public static LogSource RegSvr32;
    public static LogSource PdbServer;
    public static LogSource EtwHost;
    public static LogSource EtwCollector;
}
public class JetBrains.Profiler.Profile.ConnectingEventArgs : CancelEventArgs {
    [NotNullAttribute]
public CoreIdentity CoreIdentity;
    [NotNullAttribute]
public ProfileProcessInfo ProfileProcessInfo;
    [CanBeNullAttribute]
public CoreDirs CoreDirs;
    public ConnectingEventArgs(ProfileProcessInfo profileProcessInfo, CoreIdentity coreIdentity);
}
public class JetBrains.Profiler.Profile.CoreAlertEventArgs : EventArgs {
    public DateTime DateTime;
    public HResults HResult;
    [NotNullAttribute]
public string Message;
    public AlertSeverity Severity;
    public CoreAlertEventArgs(AlertSeverity severity, HResults hr, string message);
}
public enum JetBrains.Profiler.Profile.CoreCloseWay : Enum {
    public byte value__;
    public static CoreCloseWay Throw;
    public static CoreCloseWay Kill;
    public static CoreCloseWay Detach;
}
public enum JetBrains.Profiler.Profile.CoreCommand : Enum {
    public byte value__;
    public static CoreCommand StartStop;
    public static CoreCommand Dump;
    public static CoreCommand Allocations;
}
public enum JetBrains.Profiler.Profile.CoreHostProfileStates : Enum {
    public byte value__;
    public static CoreHostProfileStates Initializing;
    public static CoreHostProfileStates Terminating;
    public static CoreHostProfileStates Unsupported;
    public static CoreHostProfileStates Error;
    public static CoreHostProfileStates Pending;
    public static CoreHostProfileStates Done;
}
public enum JetBrains.Profiler.Profile.CoreOperation : Enum {
    public byte value__;
    public static CoreOperation SnapShotSaving;
    public static CoreOperation SnapShotFlushing;
}
public class JetBrains.Profiler.Profile.CoreOperationEventArgs : EventArgs {
    public StartProgressFinish Action;
    [NotNullAttribute]
public IIdentity Identity;
    public CoreOperation Operation;
    public double Progress;
    public CoreOperationEventArgs(StartProgressFinish action, CoreOperation operation, IIdentity identity, double progress);
}
public static class JetBrains.Profiler.Profile.CorProfHResults : object {
    public static HResults CORPROF_E_PROFILER_DETACHING;
    public static HResults CORPROF_E_PROFILER_NOT_ATTACHABLE;
    public static HResults CORPROF_E_UNRECOGNIZED_PIPE_MSG_FORMAT;
    public static HResults CORPROF_E_PROFILER_ALREADY_ACTIVE;
    public static HResults CORPROF_E_PROFILEE_INCOMPATIBLE_WITH_TRIGGER;
    public static HResults CORPROF_E_IPC_FAILED;
    public static HResults CORPROF_E_PROFILEE_PROCESS_NOT_FOUND;
    public static HResults CORPROF_E_PROFILER_CANCEL_ACTIVATION;
    public static HResults CORPROF_E_CONCURRENT_GC_NOT_PROFILABLE;
    public static HResults CORPROF_E_INCONSISTENT_FLAGS_WITH_HOST_PROTECTION_SETTING;
}
public class JetBrains.Profiler.Profile.HostAlertEventArgs : EventArgs {
    public DateTime DateTime;
    public HResults HResult;
    [CanBeNullAttribute]
public IIdentity Identity;
    [NotNullAttribute]
public string Message;
    public AlertSeverity Severity;
    public HostAlertEventArgs(AlertSeverity severity, HResults hr, string message, IIdentity identity);
}
public enum JetBrains.Profiler.Profile.HostBridgeType : Enum {
    public byte value__;
    public static HostBridgeType Measure;
    public static HostBridgeType Memory;
}
public enum JetBrains.Profiler.Profile.HostOperation : Enum {
    public byte value__;
    public static HostOperation SnapshotQueueing;
    public static HostOperation SnapshotDownloading;
    public static HostOperation SnapshotSending;
    public static HostOperation LogQueueing;
    public static HostOperation LogDownloading;
    public static HostOperation LogSending;
}
public class JetBrains.Profiler.Profile.HostOperationEventArgs : CancelEventArgs {
    public StartProgressFinish Action;
    public int Id;
    [CanBeNullAttribute]
public IIdentity Identity;
    public HostOperation Operation;
    public double Progress;
    public HostOperationEventArgs(StartProgressFinish action, int id, IIdentity identity, HostOperation operation, double progress);
}
public class JetBrains.Profiler.Profile.HostScopeEventArgs : EventArgs {
    public StartFinish Action;
    public int Id;
    [CanBeNullAttribute]
public IIdentity Identity;
    public HostScopeEventArgs(StartFinish action, int id, IIdentity identity);
}
public interface JetBrains.Profiler.Profile.ICoreHostProfile {
    [NotNullAttribute]
public CoreIdentity CoreIdentity { get; }
    [NotNullAttribute]
public ProfileProcessInfo ProfileProcessInfo { get; }
    [NotNullAttribute]
public ISignal`1<CoreOperationEventArgs> Operation { get; }
    [NotNullAttribute]
public ISignal`1<CoreAlertEventArgs> Alert { get; }
    [NotNullAttribute]
public IProperty`1<CoreHostProfileStates> AggregatedState { get; }
    public abstract virtual CoreIdentity get_CoreIdentity();
    public abstract virtual ProfileProcessInfo get_ProfileProcessInfo();
    public abstract virtual ISignal`1<CoreOperationEventArgs> get_Operation();
    public abstract virtual ISignal`1<CoreAlertEventArgs> get_Alert();
    public abstract virtual IProperty`1<CoreHostProfileStates> get_AggregatedState();
    public abstract virtual bool CanClose(CoreCloseWay coreCloseWay);
    public abstract virtual bool Close(CoreCloseWay coreCloseWay);
}
public interface JetBrains.Profiler.Profile.IHostProfile {
    public HostBridgeType HostBridgeType { get; }
    public bool IsConnectionFilterRequired { get; }
    public bool UseTransparentIntegration { get; }
    [NotNullAttribute]
public IEnumerable`1<MainCloseWay> SupportedMainCloseWays { get; }
    [NotNullAttribute]
public IEnumerable`1<CoreCloseWay> SupportedCoreCloseWays { get; }
    [NotNullAttribute]
public IEnumerable`1<CoreCommand> SupportedCoreCommands { get; }
    [NotNullAttribute]
public IProperty`1<bool> Finished { get; }
    public abstract virtual HostBridgeType get_HostBridgeType();
    public abstract virtual bool get_IsConnectionFilterRequired();
    public abstract virtual bool get_UseTransparentIntegration();
    public abstract virtual IEnumerable`1<MainCloseWay> get_SupportedMainCloseWays();
    public abstract virtual IEnumerable`1<CoreCloseWay> get_SupportedCoreCloseWays();
    public abstract virtual IEnumerable`1<CoreCommand> get_SupportedCoreCommands();
    public abstract virtual IProperty`1<bool> get_Finished();
    public abstract virtual bool CloseAll(CoreCloseWay[] sequenceCoreCloseWays);
    public abstract virtual bool CanCloseMain(MainCloseWay mainCloseWay);
    public abstract virtual void CloseMain(MainCloseWay mainCloseWay);
    [CanBeNullAttribute]
public abstract virtual IDisposable TryUserActionWait();
}
public interface JetBrains.Profiler.Profile.IHostProfileSubscription {
    [NotNullAttribute]
public ISignal`1<HostAlertEventArgs> Alert { get; }
    [NotNullAttribute]
public ISignal`1<ConnectingEventArgs> Connecting { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ICoreHostProfile> Connections { get; }
    [NotNullAttribute]
public ISignal`1<HostScopeEventArgs> Scope { get; }
    [NotNullAttribute]
public ISignal`1<HostOperationEventArgs> Operation { get; }
    [NotNullAttribute]
public ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> SnapshotDone { get; }
    [NotNullAttribute]
public ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> LogDone { get; }
    public abstract virtual ISignal`1<HostAlertEventArgs> get_Alert();
    public abstract virtual ISignal`1<ConnectingEventArgs> get_Connecting();
    public abstract virtual ICollectionEvents`1<ICoreHostProfile> get_Connections();
    public abstract virtual ISignal`1<HostScopeEventArgs> get_Scope();
    public abstract virtual ISignal`1<HostOperationEventArgs> get_Operation();
    public abstract virtual ISignal`1<ResponsibilityEventArgs`1<SnapshotDoneEventArgs>> get_SnapshotDone();
    public abstract virtual ISignal`1<ResponsibilityEventArgs`1<LogDoneEventArgs>> get_LogDone();
    public abstract virtual void Start(IProgressIndicator progressIndicator, IHostUI ui);
}
public interface JetBrains.Profiler.Profile.IHostUI {
    public abstract virtual bool ShowYesNo(string id, string message, bool defaultButton);
}
public interface JetBrains.Profiler.Profile.IMeasureCoreHostProfile {
    [NotNullAttribute]
public object MeasureStateLock { get; }
    [NotNullAttribute]
public IProperty`1<MeasureCoreHostProfileStates> MeasureState { get; }
    public abstract virtual object get_MeasureStateLock();
    public abstract virtual IProperty`1<MeasureCoreHostProfileStates> get_MeasureState();
    public abstract virtual void Start();
    public abstract virtual void StopDrop();
    public abstract virtual void StopSave();
    public abstract virtual void StopDropStart();
    public abstract virtual void StopSaveStart();
}
public interface JetBrains.Profiler.Profile.IMemoryCoreHostProfile {
    [NotNullAttribute]
public IProperty`1<CoreHostProfileStates> MemoryState { get; }
    [NotNullAttribute]
public IProperty`1<SwitchCoreHostProfileStates> AllocationsState { get; }
    public abstract virtual IProperty`1<CoreHostProfileStates> get_MemoryState();
    public abstract virtual IProperty`1<SwitchCoreHostProfileStates> get_AllocationsState();
    public abstract virtual void ForceGc();
    public abstract virtual void Dump();
    public abstract virtual void EnableAllocations();
    public abstract virtual void DisableAllocations();
}
[ExtensionAttribute]
public static class JetBrains.Profiler.Profile.IOUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static RuntimeVersion ReadRuntimeVersion(BinaryReader reader);
}
public interface JetBrains.Profiler.Profile.IServiceHostProfile {
    public bool CanStop { get; }
    public abstract virtual bool get_CanStop();
    public abstract virtual void Stop();
    public abstract virtual bool WaitForStop(TimeSpan timeout);
    public abstract virtual bool WaitForStop(int timeout);
}
public interface JetBrains.Profiler.Profile.IServiceHostProfileSubscription {
}
public interface JetBrains.Profiler.Profile.IStandaloneHostProfile {
    public int ProcessId { get; }
    public bool HasExited { get; }
    public Nullable`1<int> ExitCode { get; }
    public abstract virtual int get_ProcessId();
    public abstract virtual bool get_HasExited();
    public abstract virtual Nullable`1<int> get_ExitCode();
    public abstract virtual bool CloseMainWindow();
    public abstract virtual void Kill();
    public abstract virtual void KillTree();
    public abstract virtual bool WaitForExit(TimeSpan timeout);
    public abstract virtual bool WaitForExit(int timeout);
    public abstract virtual bool WaitForExit();
}
public interface JetBrains.Profiler.Profile.IStandaloneHostProfileSubscription {
}
public class JetBrains.Profiler.Profile.LogDoneEventArgs : EventArgs {
    [CanBeNullAttribute]
public IIdentity Identity;
    [NotNullAttribute]
public FileSystemPath LogFile;
    public LogSource LogSource;
    public LogDoneEventArgs(IIdentity identity, LogSource logSource, FileSystemPath logFile);
}
public enum JetBrains.Profiler.Profile.MainCloseWay : Enum {
    public byte value__;
    public static MainCloseWay StopService;
}
public enum JetBrains.Profiler.Profile.MeasureCoreHostProfileStates : Enum {
    public byte value__;
    public static MeasureCoreHostProfileStates Initializing;
    public static MeasureCoreHostProfileStates Terminating;
    public static MeasureCoreHostProfileStates Unsupported;
    public static MeasureCoreHostProfileStates Error;
    public static MeasureCoreHostProfileStates Pending;
    public static MeasureCoreHostProfileStates Started;
    public static MeasureCoreHostProfileStates Stopped;
}
public class JetBrains.Profiler.Profile.MessageInfo : object {
    private string myExecutableName;
    private int myProcessId;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private AlertSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private HResults <HResult>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    public string Message { get; public set; }
    public string Header { get; private set; }
    public AlertSeverity Severity { get; private set; }
    public HResults HResult { get; private set; }
    public DateTime DateTime { get; private set; }
    public bool HasProcessId { get; }
    public int ProcessId { get; }
    [NotNullAttribute]
public string ExecutableName { get; }
    public MessageInfo(CoreAlertEventArgs alert);
    public MessageInfo(HostAlertEventArgs alert);
    protected MessageInfo(MessageInfo info);
    public MessageInfo(CoreAlertEventArgs alert, int processId, string executableName);
    private void InitializeFields(AlertSeverity severity, string message, DateTime dateTime, HResults results);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(string value);
    [CompilerGeneratedAttribute]
public AlertSeverity get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(AlertSeverity value);
    [CompilerGeneratedAttribute]
public HResults get_HResult();
    [CompilerGeneratedAttribute]
private void set_HResult(HResults value);
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
private void set_DateTime(DateTime value);
    public bool get_HasProcessId();
    public int get_ProcessId();
    public string get_ExecutableName();
}
public static class JetBrains.Profiler.Profile.MessageInfoHelpers : object {
    public static ProfilerAlertException BuildExceptionFromAlertInfo(MessageInfo messageInfo);
}
public static class JetBrains.Profiler.Profile.ProfHResults : object {
    public static HResults PROF_E_NOT_SUPPORTED_CLR_V1;
    public static HResults PROF_E_NOT_SUPPORTED_CLR_V2;
    public static HResults PROF_E_INCOMPATIBLE_BRIDGE_VERSION;
}
public class JetBrains.Profiler.Profile.ProfilerAlertException : ApplicationException {
    public ProfilerAlertException(string message);
}
public static class JetBrains.Profiler.Profile.ResponsibilityEventArgs : object {
    [NotNullAttribute]
public static ResponsibilityEventArgs`1<TArgs> Of(TArgs args);
}
public class JetBrains.Profiler.Profile.ResponsibilityEventArgs`1 : EventArgs {
    private Thread myThread;
    private TArgs myArgs;
    private TArgs myArgsCopy;
    public ResponsibilityEventArgs`1(TArgs args);
    [NotNullAttribute]
public TArgs Take();
    [NotNullAttribute]
public TArgs TakeWithoutResponsibility();
    [CanBeNullAttribute]
public TArgs TryTake();
}
public class JetBrains.Profiler.Profile.SnapshotDoneEventArgs : EventArgs {
    [NotNullAttribute]
public FileSystemPath IndexFile;
    [NotNullAttribute]
public SnapshotIdentity SnapshotIdentity;
    public SnapshotDoneEventArgs(SnapshotIdentity snapshotIdentity, FileSystemPath indexFile);
}
public enum JetBrains.Profiler.Profile.StartFinish : Enum {
    public byte value__;
    public static StartFinish Start;
    public static StartFinish Finish;
}
public enum JetBrains.Profiler.Profile.StartProgressFinish : Enum {
    public byte value__;
    public static StartProgressFinish Start;
    public static StartProgressFinish Progress;
    public static StartProgressFinish Finish;
}
public enum JetBrains.Profiler.Profile.SwitchCoreHostProfileStates : Enum {
    public byte value__;
    public static SwitchCoreHostProfileStates Initializing;
    public static SwitchCoreHostProfileStates Terminating;
    public static SwitchCoreHostProfileStates Unsupported;
    public static SwitchCoreHostProfileStates Error;
    public static SwitchCoreHostProfileStates Pending;
    public static SwitchCoreHostProfileStates Enabled;
    public static SwitchCoreHostProfileStates Disabled;
}
public class JetBrains.Profiler.ProfileGroup : object {
    [NotNullAttribute]
public IArgumentFactory ArgumentFactory;
    [NotNullAttribute]
public IHostParametersFactoryGroup HostParametersFactoryGroup;
    public ProfileGroup(IHostParametersFactoryGroup hostParametersFactoryGroup, IArgumentFactory argumentFactory);
    public sealed virtual bool Equals(ProfileGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Profiler.ProfileGroupDisplayInfo : object {
    [CanBeNullAttribute]
public string Description;
    [NotNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public IconId Image;
    public ProfileGroupDisplayInfo(string displayName, IconId image, string description);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.ICoverageProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IMemoryProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IPerformanceProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IRemoteProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.ITimelineProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IWinFormsUIProfilerZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Profiler.Zones.IWpfUIProfilerZone {
}
