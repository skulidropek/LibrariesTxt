public class JetBrains.dotMemory.Assembler.ComparisonPair`1 : object {
    private TEntity myFirst;
    private TEntity mySecond;
    public TEntity First { get; }
    public TEntity Second { get; }
    public ComparisonPair`1(IFactory firstFactory, IFactory secondFactory, Lifetime lifetime);
    public sealed virtual TEntity get_First();
    public sealed virtual TEntity get_Second();
}
public class JetBrains.dotMemory.Assembler.DataStorageLocation : object {
    public FileSystemPath StateDirectoryPath;
    public FileSystemPath CacheDirectoryPath;
    public DataStorageLocation(FileSystemPath stateDirectoryPath, FileSystemPath cacheDirectoryPath);
    public Root GetRoot();
}
public static class JetBrains.dotMemory.Assembler.DataStoragesRegistrar : object {
    public static void RegisterSharedDataStorages(Injector injector, DataStorageLocation dataStorageLocation, Lifetime lifetime);
    public static void RegisterProbingScopeDataStorages(Injector injector, DataStorageLocation dataStorageLocation, Lifetime lifetime);
    private static void RegisterStateStorages(Injector injector, DataStorageLocation dataStorageLocation, Lifetime lifetime);
    private static void RegisterCacheBinaryStorage(Injector injector, DataStorageLocation dataStorageLocation, Lifetime lifetime);
    private static void RegisterSettingsFile(Injector registry, object token, FileSystemPath settingsFilePath, Lifetime lifetime);
}
public class JetBrains.dotMemory.Assembler.FactoryBase : object {
    public Injector Injector;
    protected FactoryBase(Injector injector);
    public sealed virtual object Resolve(object token, Type typeToResolve, Registry sessionContext);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Assembler.FilePhysicalStorage : object {
    private FileSystemPath myBaseDirectoryPath;
    public FilePhysicalStorage(FileSystemPath baseDirectoryPath);
    public sealed virtual bool IsStorageExists(string storageName);
    public sealed virtual Stream CreateStorage(string storageName, bool createAlways);
    public sealed virtual Stream OpenStorage(string storageName);
    public sealed virtual void DeleteStorage(string storageName);
}
public abstract class JetBrains.dotMemory.Assembler.GlobalScopeCore : StandardFactory`1<IGlobalScopeFactory> {
    protected static string DebugId;
    protected GlobalScopeCore(Lifetime lifetime, IComponentContainer shellComponentContainer);
    private static GlobalScopeCore();
    private static void RegisterSettingsComponents(Lifetime lifetime, Injector injector);
    private static void RegisterDalComponents(Lifetime lifetime, Injector injector);
    private static void RegisterModelComponents(Lifetime lifetime, Injector injector);
    private static void RegisterShellComponents(Injector injector, IComponentContainer container);
}
public enum JetBrains.dotMemory.Assembler.GraphKind : Enum {
    public int value__;
    public static GraphKind Direct;
    public static GraphKind Reverse;
    public static GraphKind DominatorTree;
}
public interface JetBrains.dotMemory.Assembler.IGlobalScopeFactory {
}
public interface JetBrains.dotMemory.Assembler.IWorkspaceIndex {
}
public static class JetBrains.dotMemory.Assembler.ModelAssembler : object {
    public static void RegisterComponents(Lifetime lifetime, IRegistry registry);
}
public class JetBrains.dotMemory.Assembler.NotResolvedException : Exception {
}
public class JetBrains.dotMemory.Assembler.ObjectScopeCore : StandardFactory {
    protected ObjectScopeCore(Injector[] parentInjectors);
    private static void RegisterModel(IInjector injector);
}
public class JetBrains.dotMemory.Assembler.ObjectSetScopeCore : StandardFactory {
    private static int MemoryCacheTimeout;
    protected static string RealServiceKey;
    private static string ServiceDiskCacheKey;
    protected ObjectSetScopeCore(IObjectSetReference objectSetReference, Injector parentInjector, ObjectSetId setId, Lifetime lifetime);
    private static void RegisterModel(IInjector injector, ObjectSetId setId, IObjectSetReference objectSetReference, Lifetime lifetime);
    private static IParameterConfigurator GetObjectSetIdForService(ObjectSetId setId);
}
public abstract class JetBrains.dotMemory.Assembler.ProfilingSessionScopeCore : StandardFactory {
    private static string Id;
    private Lifetime myInternalLifetime;
    protected Lifetime RootLifetime;
    private ReadonlyToken myReadonlyToken;
    private IProfilingSessionDescriptor myProfilingSessionDescriptor;
    private bool myIsConstructing;
    private IReadonlyCollectionEvents`1<IFactory> mySnapshotSharedScopes;
    protected ListEvents`1<ISnapshotScope> SnapshotScopesList;
    [CompilerGeneratedAttribute]
private static Func`2<IReadonlyCollectionEvents`1<ISnapshotScope>, IReadOnlyList`1<ISnapshot>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<ISnapshotScope, ISnapshot> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<SnapshotProvider, IDataProvider`1<SnapshotDescriptor>> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<SnapshotDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    public IProfilingSessionDescriptor ProfilingSessionDescriptor { get; }
    public IReadonlyCollectionEvents`1<IFactory> SnapshotSharedScopes { get; }
    protected ProfilingSessionScopeCore(Lifetime lifetime, IProfilingSessionDescriptor profilingSessionDescriptor, Injector parentInjector);
    private static ProfilingSessionScopeCore();
    public IProfilingSessionDescriptor get_ProfilingSessionDescriptor();
    public IReadonlyCollectionEvents`1<IFactory> get_SnapshotSharedScopes();
    protected abstract virtual IFactory CreateSnapshotScopeFactory(SnapshotDescriptor snapshotDescriptor);
    private static void RegisterSnapshotDescriptorList(Injector injector, ProfilingSessionScopeCore self);
    private static void RegisterDal(IProfilingSessionDescriptor profilingSessionDescriptor, Injector injector);
    private static void RegisterModel(Lifetime lifetime, Injector injector);
    private ListEvents`1<SnapshotDescriptor> CreateSnapshotDescriptorsCollection(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static IReadOnlyList`1<ISnapshot> <RegisterModel>b__4(IReadonlyCollectionEvents`1<ISnapshotScope> snapshotScopes);
    [CompilerGeneratedAttribute]
private static ISnapshot <RegisterModel>b__5(ISnapshotScope _);
    [CompilerGeneratedAttribute]
private static IDataProvider`1<SnapshotDescriptor> <CreateSnapshotDescriptorsCollection>b__8(SnapshotProvider snapshotProvider);
    [CompilerGeneratedAttribute]
private static bool <CreateSnapshotDescriptorsCollection>b__9(SnapshotDescriptor snapshotDescriptor);
}
public static class JetBrains.dotMemory.Assembler.RegistrationConstants : object {
    public static TimeSpan MemoryCacheTimeout;
    public static TimeSpan ObjectSetMemoryCacheTimeout;
    private static RegistrationConstants();
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Assembler.RegistrationContextExtension : object {
    [ExtensionAttribute]
public static RegistrationContext AsSingleton(RegistrationContext registrationContext, Lifetime lifetime);
}
public class JetBrains.dotMemory.Assembler.SnapshotsComparisonScope : StandardFactory {
    private static string RealServiceToken;
    public SnapshotsComparisonScope(Lifetime lifetime, Injector parentInjector, ISnapshotScope snapshotScope1, ISnapshotScope snapshotScope2, DataStorageLocation dataStorageLocation);
    private static void RegisterModel(Lifetime lifetime, IRegistry injector, ISnapshotScope snapshotScope1, ISnapshotScope snapshotScope2);
}
public abstract class JetBrains.dotMemory.Assembler.SnapshotScopeCore : StandardFactory`1<ISnapshotScope> {
    private static string RealServiceKey;
    private static Dictionary`2<SectionType, UInt16[]> SupportedVersionOf;
    protected static string DebugId;
    private SnapshotId mySnapshotId;
    private List`1<SectionsGroup> mySectionGroups;
    private SnapshotDataAccessor mySnapshotData;
    private int myCallTreeCount;
    private int myFuidToCallPointIndexCount;
    private int myFuidToCallPointCount;
    [CompilerGeneratedAttribute]
private static Func`2<Lifetime, BinaryReader> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<Lifetime, BinaryReader> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Converter`2<SectionsGroup, ISectionAccessor> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`3<ICompactTreeReaderProvider, Lifetime, IEntityReference`1<ICompactTreeReader>> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`3<IEntityProvider`1<IReadOnlyList`1<FuidToCallPointIndex>>, Lifetime, IEntityReference`1<IReadOnlyList`1<FuidToCallPointIndex>>> CS$<>9__CachedAnonymousMethodDelegate27;
    [CompilerGeneratedAttribute]
private static Func`4<Lifetime, IEntityProvider`1<IObjectArrayInfoIndex>, IEntityProvider`1<IObjectArrayDimensions>, IEntityReference`1<IObjectArrayInfo>> CS$<>9__CachedAnonymousMethodDelegate55;
    [CompilerGeneratedAttribute]
private static Func`3<TypeSection, Lifetime, IEntityReference`1<ITypeSection>> CS$<>9__CachedAnonymousMethodDelegate56;
    [CompilerGeneratedAttribute]
private static Func`2<SectionReaderBase`1<EnvironmentSection>, ushort> CS$<>9__CachedAnonymousMethodDelegate6f;
    [CompilerGeneratedAttribute]
private static Func`2<SectionReaderBase`1<MetadataSection>, ushort> CS$<>9__CachedAnonymousMethodDelegate70;
    public SnapshotId SnapshotId { get; }
    protected SnapshotScopeCore(Lifetime lifetime, Injector parentInjector, SnapshotDescriptor snapshotDescriptor);
    private static SnapshotScopeCore();
    private static void RegisterDiagnostics(Injector injector);
    private static void RegisterMainSnaphsotData(Injector injector, SnapshotDescriptor snapshotDescriptor);
    public sealed virtual SnapshotId get_SnapshotId();
    private SnapshotDalOptions RegisterDal(Lifetime lifetime, Injector injector, MultiFileSnapshotProsector prosector);
    private void HandleSection(Lifetime lifetime, MultiFileSnapshotSectionDescriptor sectionDescriptor, Injector injector, Builder dalOptionsBuilder);
    private SectionsGroup RegisterGCDependentSection(int gcNumber);
    private BinaryReader GetReader(MultiFileSnapshotSectionDescriptor sectionDescriptor, Lifetime lifetime);
    private Func`2<Lifetime, BinaryReader> GetReaderExtractor(MultiFileSnapshotSectionDescriptor sectionDescriptor);
    private static void ThrowIfVersionIsNot(UInt16[] expected, MultiFileSnapshotSectionDescriptor sectionDescriptor);
    private static void RegisterModel(Lifetime lifetime, Injector injector, string snapshotIndexFile, int snapshotSequenceNumber, DateTime snapshotTakenTime, GCNumber snapshotGCNumber, SnapshotDalOptions dalOptions);
    private static IEntityReference`1<GraphData> CreateDirectGraphDataMemoryCache(IEntityProvider`1<GraphData> dataProvider, Lifetime lifetime);
    private static IEntityReference`1<GraphData> CreateReverseGraphDataMemoryCache(IEntityProvider`1<GraphData> dataProvider, Lifetime lifetime);
    private static IEntityReference`1<GraphData> CreateDominatorTreeTopdownGraphDataMemoryCache(IEntityProvider`1<GraphData> dataProvider, Lifetime lifetime);
    private static IEntityReference`1<IDirectGraph> CreateDirectGraph(IEntityReference`1<GraphData> graphDataReference);
    private static IEntityReference`1<IReverseGraph> CreateReverseGraph(IEntityReference`1<GraphData> graphDataReference);
    private static IEntityReference`1<IDominatorTreeTopdownGraph> CreateDominatorTreeTopdownGraph(IEntityReference`1<GraphData> graphReference);
    private static IEntityReference`1<IReadOnlyList`1<GraphReferenceDetails>> CreateDirectGraphDetailsMemoryCache(IEntityProvider`1<IReadOnlyList`1<GraphReferenceDetails>> dataProvider, Lifetime lifetime);
    private static IEntityReference`1<IReadOnlyList`1<GraphReferenceDetails>> CreateReverseGraphDetailsMemoryCache(IEntityProvider`1<IReadOnlyList`1<GraphReferenceDetails>> dataProvider, Lifetime lifetime);
    private static IEntityReference`1<IDirectGraphDetails> CreateDirectGraphDetails(IEntityReference`1<IReadOnlyList`1<GraphReferenceDetails>> graphDetailsReference);
    private static IEntityReference`1<IReverseGraphDetails> CreateReverseGraphDetails(IEntityReference`1<IReadOnlyList`1<GraphReferenceDetails>> graphDetailsReference);
    private static IDirectDetailedGraph CreateDirectDetailedGraph(IDirectGraphIndexReader indexReader, IDirectGraphReferenceTargetsReader graphReferenceTargetsReader, IDirectGraphReferenceDetailsReader graphReferenceDetailsReader);
    private static IReverseDetailedGraph CreateReverseDetailedGraph(IReverseGraphIndexReader indexReader, IReverseGraphReferenceTargetsReader graphReferenceTargetsReader, IReverseGraphReferenceDetailsReader graphReferenceDetailsReader);
    [CompilerGeneratedAttribute]
private static BinaryReader <RegisterDal>b__1(Lifetime _);
    [CompilerGeneratedAttribute]
private static BinaryReader <RegisterDal>b__2(Lifetime _);
    [CompilerGeneratedAttribute]
private static ISectionAccessor <RegisterDal>b__3(SectionsGroup _);
    [CompilerGeneratedAttribute]
private static IEntityReference`1<ICompactTreeReader> <HandleSection>b__10(ICompactTreeReaderProvider dataProvider, Lifetime lt);
    [CompilerGeneratedAttribute]
private static IEntityReference`1<IReadOnlyList`1<FuidToCallPointIndex>> <HandleSection>b__17(IEntityProvider`1<IReadOnlyList`1<FuidToCallPointIndex>> provider, Lifetime lt);
    [CompilerGeneratedAttribute]
private static IEntityReference`1<IObjectArrayInfo> <RegisterModel>b__49(Lifetime lt, IEntityProvider`1<IObjectArrayInfoIndex> indexProvider, IEntityProvider`1<IObjectArrayDimensions> dimensionsProvider);
    [CompilerGeneratedAttribute]
private static IEntityReference`1<ITypeSection> <RegisterModel>b__4d(TypeSection typeSection, Lifetime lt);
    [CompilerGeneratedAttribute]
private static ushort <.cctor>b__6d(SectionReaderBase`1<EnvironmentSection> _);
    [CompilerGeneratedAttribute]
private static ushort <.cctor>b__6e(SectionReaderBase`1<MetadataSection> _);
}
public class JetBrains.dotMemory.Assembler.StandardFactory : FactoryBase {
    public StandardFactory(string name, Injector[] parentInjectors);
    private static Injector CreateStandardDotMemoryInjector(string name, Injector[] parentInjectors);
}
public class JetBrains.dotMemory.Assembler.StandardFactory`1 : StandardFactory {
    public StandardFactory`1(Injector[] parentInjector);
}
public class JetBrains.dotMemory.Assembler.WorkspaceIndex : SettingsFileLive {
    public WorkspaceIndex(IContextBoundSettingsFileLive settingsFile);
}
[ZoneMarkerAttribute]
public class JetBrains.dotMemory.Assembler.ZoneMarker : object {
}
