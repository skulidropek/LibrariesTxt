public class JetBrains.dotMemory.Dal.Interface.Allocations.FuidCallPoint : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <CallTreePtr>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DfsEnterNo>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DfsExitNo>k__BackingField;
    public UInt32 CallTreePtr { get; private set; }
    public UInt32 DfsEnterNo { get; private set; }
    public UInt32 DfsExitNo { get; private set; }
    public FuidCallPoint(UInt32 callTreePtr, UInt32 dfsNo, UInt32 dfsExitNo);
    [CompilerGeneratedAttribute]
public UInt32 get_CallTreePtr();
    [CompilerGeneratedAttribute]
private void set_CallTreePtr(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DfsEnterNo();
    [CompilerGeneratedAttribute]
private void set_DfsEnterNo(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DfsExitNo();
    [CompilerGeneratedAttribute]
private void set_DfsExitNo(UInt32 value);
}
public class JetBrains.dotMemory.Dal.Interface.Allocations.FuidToCallPointIndex : ValueType {
    [CompilerGeneratedAttribute]
private UInt32 <Fuid>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Offset>k__BackingField;
    public UInt32 Fuid { get; private set; }
    public UInt32 Offset { get; private set; }
    public FuidToCallPointIndex(UInt32 fuid, UInt32 offset);
    [CompilerGeneratedAttribute]
public UInt32 get_Fuid();
    [CompilerGeneratedAttribute]
private void set_Fuid(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(UInt32 value);
}
public interface JetBrains.dotMemory.Dal.Interface.Allocations.IAllocationsStatistics {
    public UInt32 CallTreeNumber { get; }
    public IList`1<TypeByMethodAllocationStatistics> StatisticsPerTypeAndFunction { get; }
    public abstract virtual UInt32 get_CallTreeNumber();
    public abstract virtual IList`1<TypeByMethodAllocationStatistics> get_StatisticsPerTypeAndFunction();
}
public interface JetBrains.dotMemory.Dal.Interface.Allocations.IAllocationSwitches {
    public bool InitialState { get; }
    public IReadOnlyList`1<DateTime> Switches { get; }
    public abstract virtual bool get_InitialState();
    public abstract virtual IReadOnlyList`1<DateTime> get_Switches();
}
public interface JetBrains.dotMemory.Dal.Interface.Allocations.ICallTree {
    public abstract virtual IEnumerable`1<MetadataId> GetCallstack(UInt32 callTreeNodePtr);
    public abstract virtual MetadataId GetFunction(UInt32 callTreeNodePtr);
    public abstract virtual UInt32 GetTreeEntranceTime(UInt32 callTreeNodePtr);
    public abstract virtual UInt32 GetTreeExitTime(UInt32 callTreeNodePtr);
    public abstract virtual IEnumerable`1<UInt32> GetChildren(Nullable`1<UInt32> parentNodePtr);
    public abstract virtual bool HasParent(UInt32 callTreeNodePtr);
    public abstract virtual Nullable`1<UInt32> GetParent(UInt32 callTreeNodePtr);
}
public interface JetBrains.dotMemory.Dal.Interface.Allocations.IFuidCallPointsExtractor {
    public abstract virtual IEnumerable`1<FuidCallPoint> GetCallPoints(FuidToCallPointIndex forFuid, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Dal.Interface.Allocations.IGC0Allocations {
    public IReadOnlyList`1<ObjectAllocationDescription> AllocationDescriptions { get; }
    public UInt32 CallTreeNumber { get; }
    public abstract virtual IReadOnlyList`1<ObjectAllocationDescription> get_AllocationDescriptions();
    public abstract virtual UInt32 get_CallTreeNumber();
}
public interface JetBrains.dotMemory.Dal.Interface.Allocations.IObjectAllocationGCNumberCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.Allocations.IObjectAllocationPtrCollection {
}
public class JetBrains.dotMemory.Dal.Interface.Allocations.ObjectAllocationDescription : ValueType {
    public ulong ObjectID;
    public UInt32 CallTreeNodePrt;
    public UInt32 Fuid;
    public ObjectAllocationDescription(ulong objectID, UInt32 callTreeNodePrt, UInt32 fuid);
}
public class JetBrains.dotMemory.Dal.Interface.Allocations.TypeByMethodAllocationStatistics : ValueType {
    public TypeId TypeId;
    public UInt32 CallTreeNodePtr;
    public UInt32 Fuid;
    public UInt32 TotalObjectsAllocated;
    public ulong TotalSizeAllocated;
    public bool IsTotalClassStatistics;
    public bool IsTotalByClassAndFunction;
    public TypeByMethodAllocationStatistics(TypeId typeId, UInt32 callTreeNodePtr, UInt32 fuid, UInt32 totalObjectsAllocated, ulong totalSizeAllocated, bool isTotalClassStatistics, bool isTotalByClassAndFunction);
}
public class JetBrains.dotMemory.Dal.Interface.ArrayDimensionInfo : ValueType {
    public int Length;
    public int LowerBound;
    public ArrayDimensionInfo(int length, int lowerBound);
}
public class JetBrains.dotMemory.Dal.Interface.CompletedSnapshotingProgress : SnapshotingProgress {
    public CompletedSnapshotingProgress(SnapshotId snapshotId, int snapshotOrderNumber);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Dal.Interface.CoreLogsHandlerExtension : object {
    [ExtensionAttribute]
public static void OnLogDone(ICoreLogsHandler handler, ResponsibilityEventArgs`1<LogDoneEventArgs> responsibilityArgs);
}
public class JetBrains.dotMemory.Dal.Interface.CoreLogsNoopHandler : object {
    public sealed virtual void OnLogDone(LogDoneEventArgs args);
}
public class JetBrains.dotMemory.Dal.Interface.CoreLogsRedirectHandler : object {
    private static ILogger ourLogger;
    private static CoreLogsRedirectHandler();
    public sealed virtual void OnLogDone(LogDoneEventArgs args);
    [DebuggerStepThroughAttribute]
[AsyncStateMachineAttribute("JetBrains.dotMemory.Dal.Interface.CoreLogsRedirectHandler/<RedirectToOurLogAsync>d__0")]
private static void RedirectToOurLogAsync(TransientLifetime lifetime, string tag, FileSystemPath logFile);
}
[ValueSerializerAttribute("JetBrains.dotMemory.Dal.Interface.CrossWorkspaceComparisonIdValueSerializer")]
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Interface.CrossWorkspaceComparisonId : object {
    public static CrossWorkspaceComparisonId Invalid;
    [DataMemberAttribute]
private Guid myGuid;
    public Guid Guid { get; }
    public CrossWorkspaceComparisonId(Guid guid);
    private static CrossWorkspaceComparisonId();
    public Guid get_Guid();
    public sealed virtual bool Equals(CrossWorkspaceComparisonId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CrossWorkspaceComparisonId left, CrossWorkspaceComparisonId right);
    public static bool op_Inequality(CrossWorkspaceComparisonId left, CrossWorkspaceComparisonId right);
    public virtual string ToString();
    public static CrossWorkspaceComparisonId NewId();
}
public class JetBrains.dotMemory.Dal.Interface.CrossWorkspaceComparisonIdValueSerializer : ValueSerializerBase`1<CrossWorkspaceComparisonId> {
    [CompilerGeneratedAttribute]
private static Func`2<CrossWorkspaceComparisonId, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<string, CrossWorkspaceComparisonId> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(CrossWorkspaceComparisonId value);
    [CompilerGeneratedAttribute]
private static CrossWorkspaceComparisonId <.ctor>b__1(string value);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Dal.Interface.DataStorageExtension : object {
    [ExtensionAttribute]
public static T ReadObject(IDataStorage dataStorage, string name, Version version, Func`2<BinaryReader, T> readData);
    [ExtensionAttribute]
public static T ReadObjectSafe(IDataStorage dataStorage, string name, Version version, Func`2<BinaryReader, T> readData);
    [ExtensionAttribute]
public static void Write(IDataStorage dataStorage, Lifetime lifetime, string name, Version formatVersion, Action`1<BinaryWriter> writeAction);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Dal.Interface.Diagnostics.ExceptionExtension : object {
    [ExtensionAttribute]
public static Exception WithZippedSnapshotData(Exception exception, ISnapshotDiagnosticService diagnosticService, SectionType[] sectionTypes);
}
public interface JetBrains.dotMemory.Dal.Interface.Diagnostics.ISnapshotDiagnosticService {
    [NotNullAttribute]
public abstract virtual FileSystemPath ZipSnapshotData(SectionType[] sectionTypes);
}
public class JetBrains.dotMemory.Dal.Interface.Dumps.DumpException : Exception {
    private static string KindSerializationKey;
    private static string DetailsSerializationKey;
    public DumpExceptionKind Kind;
    public string Details;
    public DumpException(DumpExceptionKind kind, string details);
    protected DumpException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum JetBrains.dotMemory.Dal.Interface.Dumps.DumpExceptionKind : Enum {
    public int value__;
    public static DumpExceptionKind Unknown;
    public static DumpExceptionKind NotADump;
    public static DumpExceptionKind NoClrInfo;
    public static DumpExceptionKind X64BitDumpOn32BitOs;
    public static DumpExceptionKind X64BitDumpOf32BitProcess;
    public static DumpExceptionKind NotADumpWithFullMemory;
    public static DumpExceptionKind DacNotFound;
    public static DumpExceptionKind CantWalkTheHeap;
    public static DumpExceptionKind NoRoots;
    public static DumpExceptionKind NoValidRoots;
}
public interface JetBrains.dotMemory.Dal.Interface.Dumps.IDebuggerLibsCollector {
    public abstract virtual void CollectAndPackDebuggerLibs(FileSystemPath targetPath, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Dal.Interface.Dumps.IProcessDumpImporter {
}
public class JetBrains.dotMemory.Dal.Interface.FieldNameNode : object {
    public SectionPointer`1<IFieldNamesCollection> Next;
    public MetadataId MetadataId;
    public FieldNameNode(SectionPointer`1<IFieldNamesCollection> next, MetadataId metadataId);
}
public class JetBrains.dotMemory.Dal.Interface.GCNumber : ValueType {
    private int myNumber;
    private GCNumber(int number);
    public static int op_Explicit(GCNumber on);
    public static GCNumber op_Explicit(int number);
    public static bool op_Equality(GCNumber l, GCNumber r);
    public static bool op_Inequality(GCNumber l, GCNumber r);
    public static bool op_GreaterThan(GCNumber l, GCNumber r);
    public static bool op_LessThan(GCNumber l, GCNumber r);
    public static bool op_GreaterThanOrEqual(GCNumber l, GCNumber r);
    public static bool op_LessThanOrEqual(GCNumber l, GCNumber r);
    public sealed virtual bool Equals(GCNumber other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(GCNumber other);
    public string ToString(string format);
    public virtual string ToString();
}
public class JetBrains.dotMemory.Dal.Interface.GentleBinaryReader`1 : BinaryReader {
    public T Stream { get; }
    public GentleBinaryReader`1(T input);
    public GentleBinaryReader`1(T input, Encoding encoding);
    public T get_Stream();
    protected virtual void Dispose(bool disposing);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Interface.GlobalObjectNumber : ValueType {
    public static GlobalObjectNumber Invalid;
    [DataMemberAttribute]
private int myNumber;
    private GlobalObjectNumber(int number);
    private static GlobalObjectNumber();
    public static int op_Explicit(GlobalObjectNumber on);
    public static GlobalObjectNumber op_Explicit(int number);
    public static bool op_Equality(GlobalObjectNumber l, GlobalObjectNumber r);
    public static bool op_Inequality(GlobalObjectNumber l, GlobalObjectNumber r);
    public static bool op_GreaterThan(GlobalObjectNumber l, GlobalObjectNumber r);
    public static bool op_LessThan(GlobalObjectNumber l, GlobalObjectNumber r);
    public static bool op_GreaterThanOrEqual(GlobalObjectNumber l, GlobalObjectNumber r);
    public static bool op_LessThanOrEqual(GlobalObjectNumber l, GlobalObjectNumber r);
    public sealed virtual bool Equals(GlobalObjectNumber other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(GlobalObjectNumber other);
    public string ToString(string format);
    public virtual string ToString();
}
public class JetBrains.dotMemory.Dal.Interface.GlobalObjectNumbersCollection : ChunkArray`1<GlobalObjectNumber> {
    public GlobalObjectNumbersCollection(int length);
}
public class JetBrains.dotMemory.Dal.Interface.GraphData : object {
    public ChunkArray`1<int> Index;
    public ChunkArray`1<ObjectNumber> References;
    public GraphData(ChunkArray`1<int> index, ChunkArray`1<ObjectNumber> references);
}
public class JetBrains.dotMemory.Dal.Interface.GraphReferenceDetails : ValueType {
    public static int NotArray;
    private int myArrayIndex;
    private SectionPointer`1<IFieldNamesCollection> myFieldNameSectionPointer;
    public int ArrayIndex { get; }
    public SectionPointer`1<IFieldNamesCollection> FieldNameSectionPointer { get; }
    public GraphReferenceDetails(int arrayIndex, UInt32 fieldNameSectionPointer);
    public int get_ArrayIndex();
    public SectionPointer`1<IFieldNamesCollection> get_FieldNameSectionPointer();
}
[FlagsAttribute]
public enum JetBrains.dotMemory.Dal.Interface.GraphRootFlags : Enum {
    public byte value__;
    public static GraphRootFlags Regular;
    public static GraphRootFlags Pinning;
    public static GraphRootFlags Weak;
    public static GraphRootFlags Interior;
    public static GraphRootFlags RefCounted;
}
public enum JetBrains.dotMemory.Dal.Interface.GraphRootKind : Enum {
    public byte value__;
    public static GraphRootKind Other;
    public static GraphRootKind Stack;
    public static GraphRootKind Finalizer;
    public static GraphRootKind Handle;
    public static GraphRootKind Static;
}
public class JetBrains.dotMemory.Dal.Interface.HeapDescription : ValueType {
    private GenerationMark myGenerationMark;
    private ulong myStart;
    private ulong myEnd;
    private ulong myReserved;
    private PropertyChangedEventHandler PropertyChanged;
    public ulong Size { get; }
    public GenerationMark GenerationMark { get; }
    public ulong Start { get; }
    public ulong End { get; }
    public ulong Reserved { get; }
    public HeapDescription(GenerationMark generationMark, ulong start, ulong end, ulong reserved);
    public ulong get_Size();
    public GenerationMark get_GenerationMark();
    public ulong get_Start();
    public ulong get_End();
    public ulong get_Reserved();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public interface JetBrains.dotMemory.Dal.Interface.IAllocationDataState {
    public string Caption { get; }
    public bool CanBeSwitched { get; }
    public bool ActiveState { get; }
    public bool IsCollecting { get; }
    public abstract virtual string get_Caption();
    public abstract virtual bool get_CanBeSwitched();
    public abstract virtual void Switch();
    public abstract virtual bool get_ActiveState();
    public abstract virtual bool get_IsCollecting();
}
public interface JetBrains.dotMemory.Dal.Interface.IAllocationStatesDataProvider {
    public abstract virtual IEnumerable`1<ITimelineRange> GetRanges();
}
public interface JetBrains.dotMemory.Dal.Interface.IAllocationStatesHistoryManager {
    public IListEvents`1<ITimelineRange> AllocationCollectedRanges { get; }
    public IProperty`1<IAllocationDataState> CurrentState { get; }
    public bool AllocationDataAvailable { get; }
    public abstract virtual IListEvents`1<ITimelineRange> get_AllocationCollectedRanges();
    public abstract virtual IProperty`1<IAllocationDataState> get_CurrentState();
    public abstract virtual bool get_AllocationDataAvailable();
}
public interface JetBrains.dotMemory.Dal.Interface.IAllocationStatesWriter {
    public abstract virtual void Write(ITimelineRange timelineRange);
}
public interface JetBrains.dotMemory.Dal.Interface.IAppDomainStaticFieldData {
    public long AppDomainData { get; }
    public abstract virtual long get_AppDomainData();
}
public interface JetBrains.dotMemory.Dal.Interface.IAppdomainStaticReference {
    public long AppdomainData { get; }
    public abstract virtual long get_AppdomainData();
}
public interface JetBrains.dotMemory.Dal.Interface.IContextStaticFieldData {
    public long ContextData { get; }
    public abstract virtual long get_ContextData();
}
public interface JetBrains.dotMemory.Dal.Interface.IContextStaticReference {
    public long ContextData { get; }
    public abstract virtual long get_ContextData();
}
public interface JetBrains.dotMemory.Dal.Interface.ICoreEvents {
    public ISignal`1<HostOperationEventArgs> Operation { get; }
    public ISignal`1<HostScopeEventArgs> OperationScope { get; }
    public abstract virtual ISignal`1<HostOperationEventArgs> get_Operation();
    public abstract virtual ISignal`1<HostScopeEventArgs> get_OperationScope();
}
public interface JetBrains.dotMemory.Dal.Interface.ICoreLogsHandler {
    public abstract virtual void OnLogDone(LogDoneEventArgs args);
}
public interface JetBrains.dotMemory.Dal.Interface.IDataStorage {
    public abstract virtual void Write(string name, Version formatVersion, Action`1<BinaryWriter> writeAction);
    public abstract virtual bool Contains(string name, Version formatVersion);
    public abstract virtual bool Read(string name, Version formatVersion, Action`1<BinaryReader> readAction);
    public abstract virtual bool Delete(string name, Version formatVersion);
    public abstract virtual T GetOrCreate(string name, Version formatVersion, IExecutionController executionController, Func`2<IExecutionController, TW> create, Action`3<TW, BinaryWriter, IExecutionController> write, Func`3<BinaryReader, IExecutionController, T> read);
}
public interface JetBrains.dotMemory.Dal.Interface.IDirectGraphIndexReader {
}
public interface JetBrains.dotMemory.Dal.Interface.IDirectGraphReferenceDetailsReader {
}
public interface JetBrains.dotMemory.Dal.Interface.IDirectGraphReferenceTargetsReader {
}
public interface JetBrains.dotMemory.Dal.Interface.IDominatorTreeIndexReader {
}
public interface JetBrains.dotMemory.Dal.Interface.IDominatorTreeReferenceTargetsReader {
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotMemory.Dal.Interface.IDotMemoryDalZone {
}
public interface JetBrains.dotMemory.Dal.Interface.IEnterTimeCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IExitTimeCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IGlobalObjectNumbersCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IGlobalProfilingController {
    public IProperty`1<ICommand> KillAllProcessesCommand { get; }
    public abstract virtual IProperty`1<ICommand> get_KillAllProcessesCommand();
}
public interface JetBrains.dotMemory.Dal.Interface.IGraphIndexReader {
    public int EntriesCount { get; }
    public abstract virtual int GetFirstReferenceIndex(int objectIndex);
    public abstract virtual int get_EntriesCount();
}
public interface JetBrains.dotMemory.Dal.Interface.IGraphReferenceDetailsReader {
    public int EntriesCount { get; }
    public abstract virtual GraphReferenceDetails GetReferenceDetails(int referenceIndex);
    public abstract virtual int get_EntriesCount();
}
public interface JetBrains.dotMemory.Dal.Interface.IGraphReferenceTargetsReader {
    public int EntriesCount { get; }
    public abstract virtual ObjectNumber GetObjectNumber(int referenceIndex);
    public abstract virtual ObjectNumber[] GetObjectNumbers(int referenceIndex, int count);
    public abstract virtual int get_EntriesCount();
}
public interface JetBrains.dotMemory.Dal.Interface.IGraphRoot {
    public ObjectNumber ObjectNumber { get; }
    public GraphRootKind Kind { get; }
    public GraphRootFlags Flag { get; }
    public ulong Data { get; }
    public abstract virtual ObjectNumber get_ObjectNumber();
    public abstract virtual GraphRootKind get_Kind();
    public abstract virtual GraphRootFlags get_Flag();
    public abstract virtual ulong get_Data();
}
public interface JetBrains.dotMemory.Dal.Interface.IGraphRootCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IGraphRootTargetsCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IHeapsCollection {
    public ulong PrivateBytesSize { get; }
    public abstract virtual ulong get_PrivateBytesSize();
}
public interface JetBrains.dotMemory.Dal.Interface.IObjectAddressCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IObjectArrayDimensions {
}
public interface JetBrains.dotMemory.Dal.Interface.IObjectArrayInfoIndex {
}
public interface JetBrains.dotMemory.Dal.Interface.IObjectRetainedSizeCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IObjectRootReferencesCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IObjectSizeCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IObjectTypeCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.IPhysicalStorage {
    public abstract virtual bool IsStorageExists(string storageName);
    public abstract virtual Stream CreateStorage(string storageName, bool createAlways);
    public abstract virtual Stream OpenStorage(string storageName);
    public abstract virtual void DeleteStorage(string storageName);
}
public interface JetBrains.dotMemory.Dal.Interface.IProbingScopeCacheDataStorage {
}
public interface JetBrains.dotMemory.Dal.Interface.IProbingScopeStateDataStorage {
}
public interface JetBrains.dotMemory.Dal.Interface.IProfiler {
    public abstract virtual void Start(StartingProfilerStatus startingStatus);
    public abstract virtual void Stop();
}
public interface JetBrains.dotMemory.Dal.Interface.IProfilerDal {
    public IReadonlyListEvents`1<HostAlertEventArgs> Alerts { get; }
    public abstract virtual IReadonlyListEvents`1<HostAlertEventArgs> get_Alerts();
}
public interface JetBrains.dotMemory.Dal.Interface.IProfilingCore {
    public IMemoryCoreHostProfile Core { get; }
    public ICoreEvents Events { get; }
    public Lifetime Lifetime { get; }
    public abstract virtual IMemoryCoreHostProfile get_Core();
    public abstract virtual ICoreEvents get_Events();
    public abstract virtual Lifetime get_Lifetime();
}
public interface JetBrains.dotMemory.Dal.Interface.IProfilingSessionCommands {
    public IProperty`1<bool> IsProfiling { get; }
    public IProperty`1<bool> IsProfilerTakingSnapshot { get; }
    public IProperty`1<IAllocationDataState> AllocationState { get; }
    public ICommand SwitchAllocationState { get; }
    public ICommand GetSnapshotCommand { get; }
    public ICommand ForceGcCommand { get; }
    public ICommand DetachCommand { get; }
    public ICommand KillProcessCommand { get; }
    public IProperty`1<ICommand> KillAllProcessesCommand { get; }
    public abstract virtual IProperty`1<bool> get_IsProfiling();
    public abstract virtual IProperty`1<bool> get_IsProfilerTakingSnapshot();
    public abstract virtual IProperty`1<IAllocationDataState> get_AllocationState();
    public abstract virtual ICommand get_SwitchAllocationState();
    public abstract virtual ICommand get_GetSnapshotCommand();
    public abstract virtual ICommand get_ForceGcCommand();
    public abstract virtual ICommand get_DetachCommand();
    public abstract virtual ICommand get_KillProcessCommand();
    public abstract virtual IProperty`1<ICommand> get_KillAllProcessesCommand();
}
public interface JetBrains.dotMemory.Dal.Interface.IProfilingSessionController {
    public IListEvents`1<CoreAlertEventArgs> Alerts { get; }
    public IProfilingSessionCommands Commands { get; }
    public abstract virtual IListEvents`1<CoreAlertEventArgs> get_Alerts();
    public abstract virtual IProfilingSessionCommands get_Commands();
}
public interface JetBrains.dotMemory.Dal.Interface.IProfilingSessionDescriptor {
    public ProfilingSessionId SessionId { get; }
    public int ProcessId { get; }
    public FileSystemPath ExecutablePath { get; }
    public ListEvents`1<SnapshotProvider> SnapshotProviders { get; }
    public IDataProvider`1<bool> IsActive { get; }
    public IProfilingCore ProfilingCore { get; }
    public ListEvents`1<SnapshotDescriptor> SnapshotDescriptors { get; }
    public abstract virtual ProfilingSessionId get_SessionId();
    public abstract virtual int get_ProcessId();
    public abstract virtual FileSystemPath get_ExecutablePath();
    public abstract virtual ListEvents`1<SnapshotProvider> get_SnapshotProviders();
    public abstract virtual IDataProvider`1<bool> get_IsActive();
    public abstract virtual IProfilingCore get_ProfilingCore();
    public abstract virtual ListEvents`1<SnapshotDescriptor> get_SnapshotDescriptors();
}
public interface JetBrains.dotMemory.Dal.Interface.IRawAfterGCHeaps {
}
public interface JetBrains.dotMemory.Dal.Interface.IRawBeforeGCHeaps {
}
public interface JetBrains.dotMemory.Dal.Interface.IRawHeaps {
    public PtrSize SizeofPointer { get; }
    public abstract virtual PtrSize get_SizeofPointer();
}
public interface JetBrains.dotMemory.Dal.Interface.IRawMemoryBlocks {
}
public interface JetBrains.dotMemory.Dal.Interface.IRawPrimitiveStaticField {
    public FieldType FieldType { get; }
    public Byte[] Value { get; }
    public abstract virtual FieldType get_FieldType();
    public abstract virtual Byte[] get_Value();
}
public interface JetBrains.dotMemory.Dal.Interface.IRawReferenceStaticField {
    public ulong Address { get; }
    public ulong ObjectId { get; }
    public abstract virtual ulong get_Address();
    public abstract virtual ulong get_ObjectId();
}
public interface JetBrains.dotMemory.Dal.Interface.IRawStaticField {
    public long ClassId { get; }
    public SectionPointer`1<IFieldNamesCollection> FieldNameOffset { get; }
    public IStaticFieldData Data { get; }
    public abstract virtual long get_ClassId();
    public abstract virtual SectionPointer`1<IFieldNamesCollection> get_FieldNameOffset();
    public abstract virtual IStaticFieldData get_Data();
}
public interface JetBrains.dotMemory.Dal.Interface.IRawStaticReference {
    public long ClassId { get; }
    public long FieldNameOffset { get; }
    public ulong ObjectId { get; }
    public abstract virtual long get_ClassId();
    public abstract virtual long get_FieldNameOffset();
    public abstract virtual ulong get_ObjectId();
}
public interface JetBrains.dotMemory.Dal.Interface.IRawStructStaticField {
    public ulong ObjectId { get; }
    public abstract virtual ulong get_ObjectId();
}
public interface JetBrains.dotMemory.Dal.Interface.IRealtimeSnapshotProgressProvider {
    public IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> Snapshots { get; }
    public abstract virtual IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> get_Snapshots();
}
public interface JetBrains.dotMemory.Dal.Interface.IRealtimeSnapshotWithProgress {
    public IRealtimeChartSnapshotMark RealtimeSnapshot { get; }
    public IProgressIndicatorModel ProgressIndicator { get; }
    public int SequenceNumber { get; }
    public abstract virtual IRealtimeChartSnapshotMark get_RealtimeSnapshot();
    public abstract virtual IProgressIndicatorModel get_ProgressIndicator();
    public abstract virtual int get_SequenceNumber();
}
public interface JetBrains.dotMemory.Dal.Interface.IReverseGraphIndexReader {
}
public interface JetBrains.dotMemory.Dal.Interface.IReverseGraphReferenceDetailsReader {
}
public interface JetBrains.dotMemory.Dal.Interface.IReverseGraphReferenceTargetsReader {
}
public interface JetBrains.dotMemory.Dal.Interface.IRvaStaticFieldData {
}
public interface JetBrains.dotMemory.Dal.Interface.IRvaStaticReference {
}
public interface JetBrains.dotMemory.Dal.Interface.ISectionAccessor {
    public abstract virtual T TryGet(Lifetime lifetime);
    public abstract virtual T Get(Lifetime lifetime);
}
public interface JetBrains.dotMemory.Dal.Interface.ISectionGroupCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.ISharedCacheDataStorage {
}
public interface JetBrains.dotMemory.Dal.Interface.ISharedStateDataStorage {
}
public interface JetBrains.dotMemory.Dal.Interface.ISnapshotDiskManager {
    public abstract virtual FileSystemPath Move(FileSystemPath sourceIndexFilePath, FileSystemPath targeIndexFilePath, IProgressIndicator progressIndicator);
    public abstract virtual void Delete(FileSystemPath indexFilePath, IProgressIndicator progressIndicator);
}
public interface JetBrains.dotMemory.Dal.Interface.IStaticFieldData {
    public StaticType Type { get; }
    public abstract virtual StaticType get_Type();
}
public interface JetBrains.dotMemory.Dal.Interface.IStaticReference {
    public TypeId TypeId { get; }
    public ObjectNumber ObjectNumber { get; }
    public SectionPointer`1<IFieldNamesCollection> FieldName { get; }
    public abstract virtual TypeId get_TypeId();
    public abstract virtual ObjectNumber get_ObjectNumber();
    public abstract virtual SectionPointer`1<IFieldNamesCollection> get_FieldName();
}
public interface JetBrains.dotMemory.Dal.Interface.IThreadStaticFieldData {
    public long AppDomainData { get; }
    public long ThreadData { get; }
    public abstract virtual long get_AppDomainData();
    public abstract virtual long get_ThreadData();
}
public interface JetBrains.dotMemory.Dal.Interface.IThreadStaticReference {
    public long AppdomainData { get; }
    public long ThreadData { get; }
    public abstract virtual long get_AppdomainData();
    public abstract virtual long get_ThreadData();
}
public interface JetBrains.dotMemory.Dal.Interface.ITimelineRange {
    public ulong StartTick { get; public set; }
    public ulong EndTick { get; public set; }
    public bool IsFinished { get; public set; }
    public abstract virtual ulong get_StartTick();
    public abstract virtual void set_StartTick(ulong value);
    public abstract virtual ulong get_EndTick();
    public abstract virtual void set_EndTick(ulong value);
    public abstract virtual bool get_IsFinished();
    public abstract virtual void set_IsFinished(bool value);
}
public interface JetBrains.dotMemory.Dal.Interface.ITraverseTimeCollection {
}
public interface JetBrains.dotMemory.Dal.Interface.ITypeSectionBuilder {
    public Dictionary`2<long, TypeId> ClassIndexSectionMap { get; }
    public abstract virtual Dictionary`2<long, TypeId> get_ClassIndexSectionMap();
}
public class JetBrains.dotMemory.Dal.Interface.ObjectData.FinalizedObject : ValueType {
    public TypeId TypeId;
    public ulong AllocationPtr;
    public GCNumber AllocationGCNumber;
    public bool IsDead;
    public FinalizedObject(TypeId typeId, ulong allocationPtr, GCNumber allocationGCNumber, bool isDead);
    public static FinalizedObject V0ReadFrom(BinaryReader reader);
    public static void V0WriteTo(BinaryWriter writer, FinalizedObject obj);
}
public enum JetBrains.dotMemory.Dal.Interface.ObjectData.GenerationMark : Enum {
    public byte value__;
    public static GenerationMark Gen0;
    public static GenerationMark Gen1;
    public static GenerationMark Gen2;
    public static GenerationMark Loh;
}
public class JetBrains.dotMemory.Dal.Interface.ObjectData.ObjectType : ValueType {
    public static ObjectType UnresolvedType;
    public MetadataId MetadataId;
    public TypeId BaseType;
    public UInt32 ArrayRank;
    [NotNullAttribute]
public TypeId[] GenericArguments;
    public bool IsArray { get; }
    public ObjectType(MetadataId metadataId, TypeId baseType, UInt32 arrayRank, TypeId[] genericArguments);
    private static ObjectType();
    public bool get_IsArray();
}
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Interface.ObjectNumber : ValueType {
    public static ObjectNumber Invalid;
    [DataMemberAttribute]
private int myNumber;
    private ObjectNumber(int number);
    private static ObjectNumber();
    public static int op_Implicit(ObjectNumber on);
    public static ObjectNumber op_Explicit(int number);
    public static bool op_Equality(ObjectNumber l, ObjectNumber r);
    public static bool op_Inequality(ObjectNumber l, ObjectNumber r);
    public static bool op_GreaterThan(ObjectNumber l, ObjectNumber r);
    public static bool op_LessThan(ObjectNumber l, ObjectNumber r);
    public static bool op_GreaterThanOrEqual(ObjectNumber l, ObjectNumber r);
    public static bool op_LessThanOrEqual(ObjectNumber l, ObjectNumber r);
    public sealed virtual bool Equals(ObjectNumber other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(ObjectNumber other);
    public string ToString(string format);
    public virtual string ToString();
    public static ObjectNumber Parse(string value);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Dal.Interface.ObjectNumberExtensions : object {
    [ExtensionAttribute]
public static int ToValidatedIndex(ObjectNumber objectNumber, int totalObjectsCount);
}
public enum JetBrains.dotMemory.Dal.Interface.ProcessType : Enum {
    public int value__;
    public static ProcessType Unknown;
    public static ProcessType Silverlight;
    public static ProcessType Standalone;
}
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.dotMemory.Dal.Interface.ProfilingSessionId/Serializer")]
public class JetBrains.dotMemory.Dal.Interface.ProfilingSessionId : Uid {
    public static ProfilingSessionId Invalid;
    public ProfilingSessionId(Guid guid);
    private static ProfilingSessionId();
    public static ProfilingSessionId NewId();
}
public enum JetBrains.dotMemory.Dal.Interface.PtrSize : Enum {
    public int value__;
    public static PtrSize X32;
    public static PtrSize X64;
}
public class JetBrains.dotMemory.Dal.Interface.RawHeap : object {
    public ulong End;
    public byte Generation;
    public ulong ReservedEnd;
    public ulong Start;
    public RawHeap(byte generation, ulong start, ulong end, ulong reservedEnd);
    public sealed virtual int CompareTo(RawHeap other);
    public sealed virtual bool Equals(RawHeap other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.dotMemory.Dal.Interface.RawMemoryBlock : object {
    public ulong NewEnd;
    public ulong NewStart;
    public ulong OldEnd;
    public ulong OldStart;
    public RawMemoryBlock(ulong newStart, ulong newEnd, ulong oldStart);
}
public static class JetBrains.dotMemory.Dal.Interface.RawSectionType : object {
    public static ushort FunctionUniqueId;
    public static ushort GarbageCollectionStart;
    public static ushort BeforeGCHeaps;
    public static ushort AfterGCHeaps;
    public static ushort MovedMemoryBlocks;
    public static ushort SurvivedMemoryBlocks;
    public static ushort GarbageCollectionEnd;
    public static ushort GraphIndex;
    public static ushort GraphReferences;
    public static ushort GraphReferenceNames;
    public static ushort FinalizedObjects;
    public static ushort RootReferences;
    public static ushort ObjectIdList;
    public static ushort ObjectSize;
    public static ushort ObjectClass;
    public static ushort ObjectArrayDimensionIndex;
    public static ushort ObjectArrayDimensions;
    public static ushort FieldValuesIndex;
    public static ushort FieldValues;
    public static ushort AllocationCallTree;
    public static ushort AllocationSurvivedGC0;
    public static ushort AllocationStatistics;
    public static ushort FuidToCallPointIndex;
    public static ushort FuidCallPoints;
    public static ushort AllocationSwitches;
    public static ushort StaticReferences;
    public static ushort StaticFields;
    public static ushort StaticData;
    public static ushort FieldName;
}
public interface JetBrains.dotMemory.Dal.Interface.Realtime.IRealtimeChartSnapshotMark {
    public ulong Tick { get; }
    public SnapshotId SnapshotId { get; }
    public int SequenceNumber { get; }
    public ProgressProvider ProgressProvider { get; }
    public abstract virtual ulong get_Tick();
    public abstract virtual SnapshotId get_SnapshotId();
    public abstract virtual int get_SequenceNumber();
    public abstract virtual ProgressProvider get_ProgressProvider();
}
public interface JetBrains.dotMemory.Dal.Interface.Realtime.IRealtimeChartSnapshotsData {
    public IReadonlyCollectionEvents`1<IRealtimeChartSnapshotMark> SnapshotMarks { get; }
    public abstract virtual IReadonlyCollectionEvents`1<IRealtimeChartSnapshotMark> get_SnapshotMarks();
}
public static class JetBrains.dotMemory.Dal.Interface.Realtime.RealtimeConstants : object {
    public static int TicksPerSecond;
    public static int MaxPointsToShowOnMainChart;
    public static double PerformanceCountersUpdateSpan;
    public static double UIUpdateSpan;
    public static double FloatingChartRangeInMinutes;
    public static double ViewportMinSecondsPerPixel;
    public static double ViewportMinTicksPerPixel;
}
public class JetBrains.dotMemory.Dal.Interface.RootReferencesDescriptor : ValueType {
    public static int NotRoot;
    public int RootIndex;
    public int RootsCount;
    public RootReferencesDescriptor(int rootIndex, int rootsCount);
}
public class JetBrains.dotMemory.Dal.Interface.Section.FieldDescription : ValueType {
    public static Dictionary`2<FieldType, int> FieldSizes;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <NameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArrayMember>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArrayIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArrayLength>k__BackingField;
    public SectionPointer`1<IFieldNamesCollection> NameOffset { get; private set; }
    public FieldType Type { get; private set; }
    public Byte[] Value { get; private set; }
    public bool IsArrayMember { get; private set; }
    public int ArrayIndex { get; private set; }
    public int ArrayLength { get; private set; }
    public FieldDescription(SectionPointer`1<IFieldNamesCollection> offset, FieldType fieldType, Byte[] value, bool isArray, int arrayIndex, int arrayLength);
    private static FieldDescription();
    [CompilerGeneratedAttribute]
public SectionPointer`1<IFieldNamesCollection> get_NameOffset();
    [CompilerGeneratedAttribute]
private void set_NameOffset(SectionPointer`1<IFieldNamesCollection> value);
    [CompilerGeneratedAttribute]
public FieldType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(FieldType value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_IsArrayMember();
    [CompilerGeneratedAttribute]
private void set_IsArrayMember(bool value);
    [CompilerGeneratedAttribute]
public int get_ArrayIndex();
    [CompilerGeneratedAttribute]
private void set_ArrayIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ArrayLength();
    [CompilerGeneratedAttribute]
private void set_ArrayLength(int value);
}
public enum JetBrains.dotMemory.Dal.Interface.Section.FieldType : Enum {
    public byte value__;
    public static FieldType Unresolved;
    public static FieldType Bool;
    public static FieldType Char;
    public static FieldType Sbyte;
    public static FieldType Byte;
    public static FieldType Int16;
    public static FieldType UInt16;
    public static FieldType Int32;
    public static FieldType UInt32;
    public static FieldType Int64;
    public static FieldType UInt64;
    public static FieldType Float;
    public static FieldType Double;
    public static FieldType String;
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotMemory.Dal.Interface.Section.IFieldNamesCollection {
    public FieldNameNode Item { get; }
    public abstract virtual FieldNameNode get_Item(SectionPointer`1<IFieldNamesCollection> offset);
}
public interface JetBrains.dotMemory.Dal.Interface.Section.IFieldValuesProvider {
    public abstract virtual IReadOnlyList`1<FieldDescription> GetFieldValues(ObjectNumber objectNumber);
    public abstract virtual bool HasFields(ObjectNumber objectNumber);
    public abstract virtual int GetLogicalFieldsCount(ObjectNumber objectNumber);
    public abstract virtual IEnumerable`1<FieldDescription> FetchArrayValues(ObjectNumber objectNumber, int skip, int pageSize);
}
public interface JetBrains.dotMemory.Dal.Interface.Section.IGarbageCollectionEndSection {
    public DateTime Time { get; }
    public abstract virtual DateTime get_Time();
}
public interface JetBrains.dotMemory.Dal.Interface.Section.IGarbageCollectionStartSection {
    public DateTime Time { get; }
    public IReadOnlyList`1<bool> GenerationCollectedMarks { get; }
    public abstract virtual DateTime get_Time();
    public abstract virtual bool IsGenerationCollected(GenerationMark generationMark);
    public abstract virtual IReadOnlyList`1<bool> get_GenerationCollectedMarks();
}
public interface JetBrains.dotMemory.Dal.Interface.Section.ISnapshottedFinalizedObjectSet {
    public long TotalCount { get; }
    public abstract virtual long get_TotalCount();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotMemory.Dal.Interface.Section.IStaticReferencesCollection {
    public IStaticReference Item { get; }
    public abstract virtual IStaticReference get_Item(SectionPointer`1<IStaticReference> offset);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotMemory.Dal.Interface.Section.ITypeSection {
    public ObjectType Item { get; }
    public int Count { get; }
    public abstract virtual ObjectType get_Item(TypeId typeId);
    public abstract virtual int get_Count();
}
public interface JetBrains.dotMemory.Dal.Interface.Section.ITypeSectionData {
    public IReadOnlyList`1<TypeDescriptor> TypesDescriptors { get; }
    public IReadOnlyList`1<TypeId> GenericArguments { get; }
    public abstract virtual IReadOnlyList`1<TypeDescriptor> get_TypesDescriptors();
    public abstract virtual IReadOnlyList`1<TypeId> get_GenericArguments();
}
public class JetBrains.dotMemory.Dal.Interface.Section.MethodId : ValueType {
    private MetadataId myMetadataId;
    public MetadataId MetadataId { get; }
    public MethodId(MetadataId metadataId);
    public MetadataId get_MetadataId();
    public static bool op_Equality(MethodId left, MethodId right);
    public static bool op_Inequality(MethodId left, MethodId right);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(MethodId other);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Interface.Section.TypeId : ValueType {
    public static TypeId Invalid;
    public static TypeId Unresolved;
    [DataMemberAttribute]
private int myId;
    public TypeId(int id);
    private static TypeId();
    public static int op_Implicit(TypeId typeNumber);
    public static TypeId op_Explicit(int number);
    public static bool op_Equality(TypeId left, TypeId right);
    public static bool op_Inequality(TypeId left, TypeId right);
    public sealed virtual bool Equals(TypeId other);
    public sealed virtual int CompareTo(TypeId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.dotMemory.Dal.Interface.Section.TypeIdTwoBytesCompressor : object {
    private ushort myInvalidValue;
    public ushort InvalidValue { get; }
    public TypeIdTwoBytesCompressor(ushort invalidValue);
    public sealed virtual ushort Compress(TypeId value);
    public sealed virtual TypeId Decompress(ushort value);
    public sealed virtual ushort get_InvalidValue();
}
public class JetBrains.dotMemory.Dal.Interface.SectionPointer`1 : ValueType {
    private UInt32 myValue;
    public UInt32 Value { get; }
    public bool IsValid { get; }
    public SectionPointer`1(UInt32 value);
    public UInt32 get_Value();
    public bool get_IsValid();
}
public enum JetBrains.dotMemory.Dal.Interface.SectionType : Enum {
    public ushort value__;
    public static SectionType Environment;
    public static SectionType ObjectSize;
    public static SectionType ObjectTypeId;
    public static SectionType ObjectAddress;
    public static SectionType ObjectArrayDimensionIndex;
    public static SectionType ObjectArrayDimensions;
    public static SectionType ObjectGlobalNumber;
    public static SectionType ObjectAllocationGCNumber;
    public static SectionType ObjectAllocationPtr;
    public static SectionType ObjectRootReferences;
    public static SectionType RootReferences;
    public static SectionType FinalizerGCRoots;
    public static SectionType TypeSection;
    public static SectionType TypeSectionGenericArguments;
    public static SectionType AccessibilityMask;
    public static SectionType DirectGraphIndex;
    public static SectionType ReverseGraphIndex;
    public static SectionType DirectGraphReferences;
    public static SectionType ReverseGraphReferences;
    public static SectionType DirectGraphDetails;
    public static SectionType ReverseGraphDetails;
    public static SectionType ReverseToDerectReferenceMap;
    public static SectionType DominatorTreeParent;
    public static SectionType DominatorTreeIndex;
    public static SectionType DominatorTreeReferences;
    public static SectionType DominatorTreeEnterTime;
    public static SectionType DominatorTreeExitTime;
    public static SectionType ShortestRootPathTree;
    public static SectionType ShortestRootPathHash;
    public static SectionType ShortestPairsPath;
    public static SectionType ShortestPairHash;
    public static SectionType RetainedSize;
    public static SectionType FieldValuesIndex;
    public static SectionType FieldValues;
    public static SectionType FieldName;
    public static SectionType FinalizedObjects;
    public static SectionType Heaps;
    public static SectionType AllocationCallTree;
    public static SectionType AllocationSurvivedGC0;
    public static SectionType AllocationStatistics;
    public static SectionType FuidToCallPointIndex;
    public static SectionType FuidCallPoints;
    public static SectionType AllocationSwitches;
    public static SectionType Metadata;
    public static SectionType FunctionUniqueId;
    public static SectionType GarbageCollectionStart;
    public static SectionType GarbageCollectionEnd;
    public static SectionType StaticReferences;
    public static SectionType StaticFields;
    public static SectionType StaticData;
}
public class JetBrains.dotMemory.Dal.Interface.SectionTypeWithVersion : ValueType {
    public SectionType SectionType;
    public ushort Version;
    public SectionTypeWithVersion(SectionType sectionType, ushort version);
}
public class JetBrains.dotMemory.Dal.Interface.SnapshotDalInfo : object {
    public UInt32 SnapshotNumber;
    public FileSystemPath SnapshotIndexFilePath;
    public SnapshotDalInfo(UInt32 snapshotNumber, FileSystemPath snapshotIndexFilePath);
}
public class JetBrains.dotMemory.Dal.Interface.SnapshotDescriptor : object {
    public SnapshotId SnapshotId;
    public UInt32 SnapshotOrderNumber;
    public IDataProvider`1<string> SnapshotName;
    public SnapshotDescriptor(UInt32 snapshotOrderNumber, SnapshotId snapshotId, IDataProvider`1<string> snapshotName, FileSystemPath indexFilePath);
    public sealed virtual bool Equals(SnapshotDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.dotMemory.Dal.Interface.SnapshotId/Serializer")]
public class JetBrains.dotMemory.Dal.Interface.SnapshotId : Uid {
    public static SnapshotId Invalid;
    public SnapshotId(Guid guid);
    private static SnapshotId();
    public static SnapshotId NewId();
}
public class JetBrains.dotMemory.Dal.Interface.SnapshotingProgress : object {
    private ReadonlyToken myReadonlyToken;
    private object myStepsAccess;
    public SnapshotId SnapshotId;
    public int SnapshotOrderNumber;
    public ListEvents`1<SnapshotingStep> Steps;
    public string InitialSnapshotName;
    [CompilerGeneratedAttribute]
private static Func`2<SnapshotingStep, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public SnapshotingProgress(SnapshotId snapshotId, int snapshotOrderNumber);
    public void AddStep(SnapshotingStepId stepName, ProgressProvider stepProgress);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <ToString>b__2(SnapshotingStep _);
}
public class JetBrains.dotMemory.Dal.Interface.SnapshotingStep : object {
    private SnapshotingStepId myId;
    private ProgressProvider myProgressProvider;
    public ProgressProvider ProgressProvider { get; }
    public SnapshotingStepId Id { get; }
    public string Name { get; }
    public SnapshotingStep(SnapshotingStepId id, ProgressProvider progressProvider);
    public ProgressProvider get_ProgressProvider();
    public SnapshotingStepId get_Id();
    public string get_Name();
    public virtual string ToString();
}
public enum JetBrains.dotMemory.Dal.Interface.SnapshotingStepId : Enum {
    public int value__;
    public static SnapshotingStepId Save;
    public static SnapshotingStepId Download;
    public static SnapshotingStepId Move;
    public static SnapshotingStepId WaitingForConvert;
    public static SnapshotingStepId Convert;
}
public static class JetBrains.dotMemory.Dal.Interface.SnapshotingStepName : object {
    private static Dictionary`2<SnapshotingStepId, string> ourMap;
    private static SnapshotingStepName();
    public static string NameOf(SnapshotingStepId kind);
}
public class JetBrains.dotMemory.Dal.Interface.SnapshotProvider : object {
    public SnapshotId SnapshotId;
    public int SnapshotOrderNumber;
    public IDataController`1<string> SnapshotName;
    public SnapshotingProgress SnapshotingProgress;
    public IDataProvider`1<SnapshotDescriptor> SnapshotDescriptor;
    public SnapshotProvider(SnapshotingProgress snapshotingProgress, IDataController`1<string> snapshotName, IDataProvider`1<SnapshotDescriptor> snapshotDescriptor);
}
public class JetBrains.dotMemory.Dal.Interface.StartingProfilerStatus : object {
    private IDataController`1<string> myStatusMessage;
    private ProgressIndicator myProgressIndicator;
    public IDataController`1<string> StatusMessage { get; }
    public ProgressIndicator ProgressIndicator { get; }
    public StartingProfilerStatus(IDataController`1<string> statusMessage, ProgressIndicator progressIndicator);
    public IDataController`1<string> get_StatusMessage();
    public ProgressIndicator get_ProgressIndicator();
}
public enum JetBrains.dotMemory.Dal.Interface.StaticType : Enum {
    public int value__;
    public static StaticType Rva;
    public static StaticType AppDomain;
    public static StaticType Thread;
    public static StaticType Context;
}
public class JetBrains.dotMemory.Dal.Interface.TypeDescriptor : ValueType {
    public UInt32 MetadataIndex;
    public UInt32 MetadataToken;
    public TypeId BaseType;
    public UInt32 ArrayRank;
    public int GenericArgumentsCount;
    public int GenericArgumentsIndex;
    public TypeDescriptor(UInt32 metadataIndex, UInt32 metadataToken, TypeId baseType, UInt32 arrayRank, int genericArgumentsCount, int genericArgumentsIndex);
}
public class JetBrains.dotMemory.Dal.Interface.ValueWithObjectNumber`1 : ValueType {
    public ObjectNumber ObjectNumber;
    public TValue Value;
    public ValueWithObjectNumber`1(TValue value, ObjectNumber objectNumber);
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceDirectoriesProvider {
    public abstract virtual FileSystemPath CreateWorkspaceDirectory();
    public abstract virtual FileSystemPath CreateTempDirectory(Lifetime lifetime);
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceDiskUtil {
    public abstract virtual void DeleteWorkspace(FileSystemPath workspaceIndexFilePath);
    public abstract virtual FileSystemPath ExportWorkspace(FileSystemPath workspaceIndexFilePath, FileSystemPath zipArchiveFilePath, IExecutionController executionController);
    [NotNullAttribute]
public abstract virtual FileSystemPath ImportWorkspace(FileSystemPath workspacePath, IExecutionController executionController);
    public abstract virtual FileSystemPath ImportProcessDump(FileSystemPath dumpPath, IExecutionController executionController);
    public abstract virtual FileSystemPath MakeNewWorkspaceFilePath();
    public abstract virtual WorkspaceSettingsKey GetWorkspaceSettingsEntry(FileSystemPath workspaceIndexFilePath);
    public abstract virtual string GetWorkspaceName(FileSystemPath workspaceIndexFilePath);
    public abstract virtual string MakeNewWorkspaceName(ProfileConfiguration profileConfiguration);
    public abstract virtual void LockWorkspaceFileFromSimultaneouslyOpening(FileSystemPath workspaceDirectory, Lifetime lifetime);
    public abstract virtual bool IsWorkspaceOpened(FileSystemPath workspaceIndexFilePath);
    public abstract virtual IWorkspaceInfo GetWorkspaceInfo(FileSystemPath workspaceFilePath);
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceExporter {
    public abstract virtual void WriteIndexAndData(IWorkspaceIndex workspaceIndex, FileSystemPath sourceFolder, FileSystemPath workspacePath, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceImporter {
    [CanBeNullAttribute]
public abstract virtual IWorkspaceInfo TryReadInfo(FileSystemPath workspacePath);
    [NotNullAttribute]
public abstract virtual IWorkspaceIndex ReadData(FileSystemPath workspacePath, FileSystemPath targetFolder, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceIndex {
    [NotNullAttribute]
public IReadOnlyList`1<IWsProfilingSession> ProfilingSessions { get; }
    public abstract virtual IReadOnlyList`1<IWsProfilingSession> get_ProfilingSessions();
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceIndexSerializer {
    public abstract virtual void Serialize(IWorkspaceIndex workspaceIndex, Stream stream);
    [NotNullAttribute]
public abstract virtual IWorkspaceInfo DeserializeInfo(Stream stream);
    [NotNullAttribute]
public abstract virtual IWorkspaceIndex DeserializeIndex(Stream stream);
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceInfo {
    [NotNullAttribute]
public Version Version { get; }
    [NotNullAttribute]
public string ProductName { get; }
    [NotNullAttribute]
public Version ProductVersion { get; }
    [NotNullAttribute]
public string Name { get; public set; }
    public DateTime CreationTime { get; public set; }
    [CanBeNullAttribute]
public string ContentSignature { get; }
    public WorkspaceSource Source { get; }
    public abstract virtual Version get_Version();
    public abstract virtual string get_ProductName();
    public abstract virtual Version get_ProductVersion();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual DateTime get_CreationTime();
    public abstract virtual void set_CreationTime(DateTime value);
    public abstract virtual string get_ContentSignature();
    public abstract virtual WorkspaceSource get_Source();
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceStorage {
    public IListEvents`1<ProfileConfigurationHistoryItem> ProfileConfigurations { get; }
    public IListEvents`1<WorkspaceHistoryItem> Workspaces { get; }
    public abstract virtual void AddWorkspace(FileSystemPath workspaceIndexFilePath, ProfileConfiguration profileConfiguration);
    public abstract virtual IListEvents`1<ProfileConfigurationHistoryItem> get_ProfileConfigurations();
    public abstract virtual IListEvents`1<WorkspaceHistoryItem> get_Workspaces();
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWsProfilingSession {
    public ProfilingSessionId Id { get; }
    [NotNullAttribute]
public string ProcessName { get; public set; }
    public int ProcessId { get; public set; }
    [NotNullAttribute]
public IReadOnlyList`1<IWsSnapshot> Snapshots { get; }
    public abstract virtual ProfilingSessionId get_Id();
    public abstract virtual string get_ProcessName();
    public abstract virtual void set_ProcessName(string value);
    public abstract virtual int get_ProcessId();
    public abstract virtual void set_ProcessId(int value);
    public abstract virtual IReadOnlyList`1<IWsSnapshot> get_Snapshots();
}
public interface JetBrains.dotMemory.Dal.Interface.Workspace.IWsSnapshot {
    [NotNullAttribute]
public SnapshotId Id { get; }
    public int Index { get; }
    [CanBeNullAttribute]
public string Name { get; public set; }
    public abstract virtual SnapshotId get_Id();
    public abstract virtual int get_Index();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.ProfileConfigurationHistoryItem : object {
    private ProfileConfiguration myProfileConfiguration;
    private IProperty`1<DateTime> myAccessTime;
    private FullLifetimeDefinition myPersistenceLifetimeDefinition;
    public ProfileConfiguration ProfileConfiguration { get; }
    public IProperty`1<DateTime> AccessTime { get; }
    public ProfileConfigurationHistoryItem(ProfileConfiguration profileConfiguration, IProperty`1<DateTime> accessTime, FullLifetimeDefinition persistenceLifetimeDefinition);
    public ProfileConfiguration get_ProfileConfiguration();
    public IProperty`1<DateTime> get_AccessTime();
    public void Delete();
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.ProfilingSessionFolder : object {
    private FileSystemPath myFullPath;
    private TimelineFolder myTimelineFolder;
    public TimelineFolder TimelineFolder { get; }
    public ProfilingSessionFolder(FileSystemPath path);
    public TimelineFolder get_TimelineFolder();
    public FileSystemPath SnapshotFile(SnapshotId snapshotId, int snapshotOrderNumber);
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.TimelineFolder : object {
    public FileSystemPath FullPath;
    public FileSystemPath AllocationRangesFile;
    public FileSystemPath MemoryStateFile;
    public FileSystemPath SnapshotMarksFileName;
    public TimelineFolder(FileSystemPath fullPath);
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceDescription : object {
    public FileSystemPath IndexFilePath;
    public WorkspaceDescription(FileSystemPath indexFilePath);
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceException : Exception {
    private WorkspaceId myWorkspaceId;
    private string myWorkspaceName;
    public WorkspaceId WorkspaceId { get; }
    [NotNullAttribute]
public string WorkspaceName { get; }
    protected WorkspaceException(string message, WorkspaceId workspaceId, string workspaceName);
    public WorkspaceId get_WorkspaceId();
    public string get_WorkspaceName();
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceFolder : object {
    private FileSystemPath myWorkspaceFolderPath;
    public WorkspaceFolder(FileSystemPath workspaceFolderPath);
    public ProfilingSessionFolder ProfilingSessionFolder(ProfilingSessionId profilingSessionId);
}
[DebuggerDisplayAttribute("{Name}:{WorkspaceId}")]
public class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceHistoryItem : object {
    [CanBeNullAttribute]
private ProfileConfiguration myProfileConfiguration;
    private WorkspaceId myWorkspaceId;
    private FileSystemPath myWorkspaceIndexFilePath;
    private DateTime myCreateTime;
    private Version myWorkspaceVersion;
    public string ProductName;
    private JetSemanticVersion myProductVersion;
    private IProperty`1<string> myName;
    private IProperty`1<string> myNote;
    private IProperty`1<long> mySize;
    private IProperty`1<DateTime> myAccessTime;
    private IProperty`1<bool> myIsPinned;
    private FullLifetimeDefinition myFullLifetimeDefinition;
    [CanBeNullAttribute]
public ProfileConfiguration ProfileConfiguration { get; }
    [NotNullAttribute]
public WorkspaceId WorkspaceId { get; }
    [NotNullAttribute]
public FileSystemPath WorkspaceIndexFilePath { get; }
    [NotNullAttribute]
public IProperty`1<string> Name { get; }
    [NotNullAttribute]
public IProperty`1<string> Note { get; }
    public DateTime CreateTime { get; }
    [NotNullAttribute]
public IProperty`1<long> Size { get; }
    [NotNullAttribute]
public IProperty`1<DateTime> AccessTime { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsPinned { get; }
    public Version WorkspaceVersion { get; }
    [NotNullAttribute]
public JetSemanticVersion ProductVersion { get; }
    [NotNullAttribute]
public FullLifetimeDefinition FullLifetimeDefinition { get; }
    public WorkspaceHistoryItem(ProfileConfiguration profileConfiguration, WorkspaceId workspaceId, FileSystemPath workspaceIndexFilePath, DateTime createTime, Version workspaceVersion, string productName, JetSemanticVersion productVersion, IProperty`1<string> name, IProperty`1<string> note, IProperty`1<long> size, IProperty`1<DateTime> accessTime, IProperty`1<bool> isPinned, FullLifetimeDefinition fullLifetimeDefinition);
    public ProfileConfiguration get_ProfileConfiguration();
    public WorkspaceId get_WorkspaceId();
    public FileSystemPath get_WorkspaceIndexFilePath();
    public IProperty`1<string> get_Name();
    public IProperty`1<string> get_Note();
    public DateTime get_CreateTime();
    public IProperty`1<long> get_Size();
    public IProperty`1<DateTime> get_AccessTime();
    public IProperty`1<bool> get_IsPinned();
    public Version get_WorkspaceVersion();
    public JetSemanticVersion get_ProductVersion();
    public FullLifetimeDefinition get_FullLifetimeDefinition();
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceLockedException : WorkspaceException {
    public WorkspaceLockedException(WorkspaceId workspaceId, string workspaceName);
}
public class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceMissingException : WorkspaceException {
    public WorkspaceMissingException(WorkspaceId workspaceId, string workspaceName);
}
[SettingsKeyAttribute("System.Reflection.Missing", "Workspace information")]
public class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Workspace id")]
public WorkspaceId WorkspaceId;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Workspace name")]
public string WorkspaceName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "User note")]
public string UserNote;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Create time")]
public DateTime CreateTime;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Version of workspace")]
public string WorkspaceVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Full product name")]
public string ProductName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "The version of dotMemory created this workspace")]
public string ProductVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Content signature")]
public string ContentSignature;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Workspace source")]
public WorkspaceSource WorkspaceSource;
    public WorkspaceSettingsKey(WorkspaceId workspaceId, string workspaceName);
    public WorkspaceSettingsKey(WorkspaceId workspaceId, string workspaceName, DateTime createTime, string workspaceVersion, string productName, string productVersion, string contentSignature, WorkspaceSource workspaceSource);
    public WorkspaceSettingsKey Copy(WorkspaceId newWorkspaceId, string newWorkspaceName, DateTime newCreationTime);
}
public enum JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceSource : Enum {
    public int value__;
    [EnumMemberAttribute]
public static WorkspaceSource Unknown;
    [EnumMemberAttribute]
public static WorkspaceSource DotMemory;
    [EnumMemberAttribute]
public static WorkspaceSource ClrDump;
}
public static class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceStructure : object {
    private static string ProfilingDataFolderName;
    private static string TimelineFolderName;
    private static string SnapshotsFolderName;
    private static string StateFolderName;
    private static string DataCacheFolderName;
    private static string TimelineMemoryStateFileName;
    private static string TimelineSnapshotMarksFileName;
    private static string TimelineAllocationRangesFileName;
    public static RootFolder Root();
    public static SnapshotsFolderElement SnapshotsFolder();
    public static FolderElement SnapshotStateFolder(int snapshotOrderNumber);
    public static TimelineFolderElement TimelineFolder();
}
public static class JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceVersion : object {
    public static Version ProducedByThisDotMemoryCode;
    public static Version MinimalCompatible;
    private static WorkspaceVersion();
    public static CompatibilityStatus CheckCompatibility(Version workspaceVersion);
    public static void ThrowIfNotCompatible(IWorkspaceInfo workspaceInfo);
}
[ValueSerializerAttribute("JetBrains.dotMemory.Dal.Interface.WorkspaceId/Serializer")]
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Interface.WorkspaceId : Uid {
    public static WorkspaceId Invalid;
    public WorkspaceId(Guid guid);
    private static WorkspaceId();
    public static WorkspaceId NewId();
}
public class JetBrains.dotMemory.Dal.Interface.WorkspaceName : object {
    private IProperty`1<string> myName;
    private IProperty`1<string> myNote;
    public IProperty`1<string> Name { get; }
    public IProperty`1<string> Note { get; }
    public IProperty`1<string> get_Name();
    public IProperty`1<string> get_Note();
}
[ZoneMarkerAttribute]
public class JetBrains.dotMemory.Dal.Interface.ZoneMarker : object {
}
