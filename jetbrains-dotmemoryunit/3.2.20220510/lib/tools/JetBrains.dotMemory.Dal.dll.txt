public class JetBrains.dotMemory.Dal.AccessibilityMask : ChunkArray`1<AccessMark> {
    private int myAccessibleObjectsCount;
    public int AccessibleNodesCount { get; }
    public AccessibilityMask(int accessibleObjectsCount, int count);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_AccessibleNodesCount();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.AccessibilityMaskDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public AccessibilityMaskDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IAccessibilityMask GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.AccessibilityMaskReader : object {
    private static int SizeOfNode;
    private BinaryReader myReader;
    private int myCount;
    private long myHeaderSize;
    private int myAccessibleNodesCount;
    public int Count { get; }
    public int AccessibleNodesCount { get; }
    public AccessMark Item { get; }
    public AccessibilityMaskReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<AccessMark> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual int get_AccessibleNodesCount();
    public sealed virtual AccessMark get_Item(int index);
}
[SectionAttribute("32772")]
public class JetBrains.dotMemory.Dal.AccessibilityMaskWriter : DataWriter {
    private static int Version;
    public AccessibilityMaskWriter(BinaryWriter writer);
    public void Write(int traversedNodesCount, IReadOnlyCollection`1<byte> mask);
}
public class JetBrains.dotMemory.Dal.ActiveProfilingSessionDescriptor : object {
    public ProfilingSessionId SessionId;
    public int ProcessId;
    public FileSystemPath ExecutablePath;
    public ProfilingCore ProfilingCore;
    public FileSystemPath DataDirectoryPath;
    public ListEvents`1<RawSnapshotProvider> RawSnapshots;
    public IDataProvider`1<bool> IsActiveProvider;
    public ActiveProfilingSessionDescriptor(ProfilingSessionId sessionId, int processId, FileSystemPath executablePath, FileSystemPath dataDirectoryPath, ProfilingCore profilingCore, ListEvents`1<RawSnapshotProvider> rawSnapshots, IDataProvider`1<bool> isActiveProvider);
    public virtual string ToString();
}
internal class JetBrains.dotMemory.Dal.AllocationDataState : object {
    private IMemoryCoreHostProfile myCore;
    private State myState;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActiveState>k__BackingField;
    public string Caption { get; private set; }
    public bool ActiveState { get; private set; }
    public bool IsCollecting { get; }
    public bool CanBeSwitched { get; }
    private AllocationDataState(string caption, IMemoryCoreHostProfile core, State state);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Caption();
    [CompilerGeneratedAttribute]
private void set_Caption(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ActiveState();
    [CompilerGeneratedAttribute]
private void set_ActiveState(bool value);
    public sealed virtual bool get_IsCollecting();
    public sealed virtual bool get_CanBeSwitched();
    public sealed virtual void Switch();
    public IAllocationDataState Change(SwitchCoreHostProfileStates allocationState);
    private static State MergeStates(State allocations, State traffic);
    private static State TranslateCoreState(SwitchCoreHostProfileStates coreState);
    internal static AllocationDataState Unavailable(IMemoryCoreHostProfile core);
    private static AllocationDataState Pending(IMemoryCoreHostProfile core);
    private static AllocationDataState Enabled(IMemoryCoreHostProfile core);
    private static AllocationDataState Disabled(IMemoryCoreHostProfile core);
}
internal class JetBrains.dotMemory.Dal.Allocations.ObjectAllocationGCNumberCollection : ChunkArray`1<GCNumber> {
    public ObjectAllocationGCNumberCollection(int length);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.Allocations.ObjectAllocationGCNumberDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectAllocationGCNumberDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectAllocationGCNumberCollection GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotMemory.Dal.Allocations.ObjectAllocationGCNumberReader : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    private BinaryReader myRandomAccessReader;
    private int myObjectsCount;
    private int mySizeofHeader;
    private BinaryReader myEnumeratorReader;
    public int Count { get; }
    public GCNumber Item { get; }
    public ObjectAllocationGCNumberReader(Func`2<Lifetime, BinaryReader> getReader, Lifetime lifetime);
    public sealed virtual IEnumerator`1<GCNumber> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual GCNumber get_Item(int index);
}
internal class JetBrains.dotMemory.Dal.Allocations.ObjectAllocationPtrCollection : ChunkArray`1<ulong> {
    public ObjectAllocationPtrCollection(int length);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.Allocations.ObjectAllocationPtrDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectAllocationPtrDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectAllocationPtrCollection GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotMemory.Dal.Allocations.ObjectAllocationPtrReader : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    private BinaryReader myRandomAccessReader;
    private PtrReader myPtrReader;
    private int myObjectsCount;
    private int mySizeofHeader;
    private BinaryReader myEnumeratorReader;
    public int Count { get; }
    public ulong Item { get; }
    public ObjectAllocationPtrReader(Func`2<Lifetime, BinaryReader> getReader, Lifetime lifetime);
    public sealed virtual IEnumerator`1<ulong> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual ulong get_Item(int index);
}
public class JetBrains.dotMemory.Dal.AllocationsStatistics : object {
    private ChunkArray`1<TypeByMethodAllocationStatistics> myTypeAllocationStatistics;
    private UInt32 myCallTreeNumber;
    public UInt32 CallTreeNumber { get; }
    public IList`1<TypeByMethodAllocationStatistics> StatisticsPerTypeAndFunction { get; }
    public AllocationsStatistics(ChunkArray`1<TypeByMethodAllocationStatistics> typeAllocationStatistics, UInt32 callTreeNumber);
    public sealed virtual UInt32 get_CallTreeNumber();
    public sealed virtual IList`1<TypeByMethodAllocationStatistics> get_StatisticsPerTypeAndFunction();
}
[UsedImplicitlyAttribute]
[SectionAttribute("12693")]
public class JetBrains.dotMemory.Dal.AllocationsStatisticsDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public AllocationsStatisticsDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IAllocationsStatistics GetData(IExecutionController executionController);
}
public class JetBrains.dotMemory.Dal.AllocationStatesDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public AllocationStatesDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IEnumerable`1<ITimelineRange> GetRanges();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.AllocationStatesHistoryManager : object {
    private IProfilingSessionCommands myProfilingSessionCommands;
    private IListEvents`1<ITimelineRange> myAllocationCollectedRanges;
    private PropertyChangedEventHandler PropertyChanged;
    public IListEvents`1<ITimelineRange> AllocationCollectedRanges { get; }
    public IProperty`1<IAllocationDataState> CurrentState { get; }
    public bool AllocationDataAvailable { get; }
    public AllocationStatesHistoryManager(Lifetime lifetime, ITickProvider tickProvider, IProfilingSessionCommands profilingSessionCommands, ProfilingSessionFolder profilingSessionFolder);
    public sealed virtual IListEvents`1<ITimelineRange> get_AllocationCollectedRanges();
    public sealed virtual IProperty`1<IAllocationDataState> get_CurrentState();
    public sealed virtual bool get_AllocationDataAvailable();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.dotMemory.Dal.AllocationStatesWriter : object {
    private static int Version;
    private BinaryWriter myWriter;
    private int myRangesCount;
    public AllocationStatesWriter(BinaryWriter writer, Lifetime lifetime);
    public sealed virtual void Write(ITimelineRange timelineRange);
}
[SectionAttribute("12693")]
public class JetBrains.dotMemory.Dal.AllocationStatisticsSectionWriter : DataWriter {
    private static ushort Version;
    private BinaryWriter myWriter;
    public AllocationStatisticsSectionWriter(BinaryWriter writer);
    public void Write(RawAllocationsStatistics convertedStatistics);
}
public class JetBrains.dotMemory.Dal.AllocationSwitches : object {
    [CompilerGeneratedAttribute]
private bool <InitialState>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DateTime> <Switches>k__BackingField;
    public bool InitialState { get; private set; }
    public IReadOnlyList`1<DateTime> Switches { get; private set; }
    public AllocationSwitches(bool initialState, IReadOnlyList`1<DateTime> switches);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InitialState();
    [CompilerGeneratedAttribute]
private void set_InitialState(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<DateTime> get_Switches();
    [CompilerGeneratedAttribute]
private void set_Switches(IReadOnlyList`1<DateTime> value);
}
[UsedImplicitlyAttribute]
[SectionAttribute("12553")]
public class JetBrains.dotMemory.Dal.AllocationSwitchesProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public AllocationSwitchesProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IAllocationSwitches GetData(IExecutionController executionController);
}
public class JetBrains.dotMemory.Dal.AppdomainStaticReference : object {
    [CompilerGeneratedAttribute]
private TypeId <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectNumber <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppdomainData>k__BackingField;
    public TypeId TypeId { get; private set; }
    public ObjectNumber ObjectNumber { get; private set; }
    public SectionPointer`1<IFieldNamesCollection> FieldName { get; private set; }
    public long AppdomainData { get; private set; }
    public AppdomainStaticReference(ObjectNumber objectNumber, TypeId typeId, SectionPointer`1<IFieldNamesCollection> fieldName, long appdomainData);
    [CompilerGeneratedAttribute]
public sealed virtual TypeId get_TypeId();
    [CompilerGeneratedAttribute]
private void set_TypeId(TypeId value);
    [CompilerGeneratedAttribute]
public sealed virtual ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectNumber(ObjectNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual SectionPointer`1<IFieldNamesCollection> get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(SectionPointer`1<IFieldNamesCollection> value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_AppdomainData();
    [CompilerGeneratedAttribute]
private void set_AppdomainData(long value);
}
public class JetBrains.dotMemory.Dal.BinaryDataStorage : DataStorage {
    public BinaryDataStorage(IPhysicalStorage physicalStorage, ISettings settings);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Dal.BinaryReaderExtensions : object {
    [ExtensionAttribute]
public static ulong ReadPtr(BinaryReader reader, UInt64Reader specificReader);
    [ExtensionAttribute]
public static BinaryReader SeekTo(BinaryReader reader, SectionOffset`1<T> offset);
    [ExtensionAttribute]
public static BinaryReader SeekTo(BinaryReader reader, SectionPointer`1<T> pointer);
    [ExtensionAttribute]
public static SectionPointer`1<T> ReadOffsetAsPointer(BinaryReader reader);
    [ExtensionAttribute]
public static SectionOffset`1<T> ReadSectionOffset(BinaryReader reader);
    [ExtensionAttribute]
public static SectionPointer`1<T> ReadSectionPointer(BinaryReader reader);
    [ExtensionAttribute]
public static int ReadPackedValue(BinaryReader reader);
    [ExtensionAttribute]
public static BinaryReader SeekTo(BinaryReader reader, long offset);
    [ExtensionAttribute]
public static BinaryReader SeekTo(BinaryReader reader, int elementIndex, int elementSize, long contentOffset);
    [ExtensionAttribute]
public static BinaryWriter SeekTo(BinaryWriter writer, long offset);
}
[SectionAttribute("12673")]
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.CallTree : object {
    public static UInt32 RootExitTime;
    public static UInt32 PureNativeCodeEntranceTime;
    public static UInt32 PureNativeCodeExitTime;
    private Func`2<Lifetime, ICompactTreeReader> myGetCompactTree;
    private IFuidToMetadataIdConverter myFuidToMetadataIdConverter;
    public CallTree(Func`2<Lifetime, ICompactTreeReader> getCompactTree, IFuidToMetadataIdConverter fuidToMetadataIdConverter);
    public sealed virtual IEnumerable`1<MetadataId> GetCallstack(UInt32 callTreeNodePtr);
    public sealed virtual MetadataId GetFunction(UInt32 callTreeNodePtr);
    public sealed virtual UInt32 GetTreeEntranceTime(UInt32 callTreeNodePtr);
    public sealed virtual UInt32 GetTreeExitTime(UInt32 callTreeNodePtr);
    private static UInt32 CalculateExitTime(UInt32 callTreeNodePtr, ICompactTreeReader compactTree);
    public sealed virtual IEnumerable`1<UInt32> GetChildren(Nullable`1<UInt32> parentNodePtr);
    public sealed virtual bool HasParent(UInt32 callTreeNodePtr);
    public sealed virtual Nullable`1<UInt32> GetParent(UInt32 callTreeNodePtr);
    private bool IsReachableNode(UInt32 callTreeNodePtr, ICompactTreeReader compactTree);
}
internal class JetBrains.dotMemory.Dal.ContextStaticReference : object {
    [CompilerGeneratedAttribute]
private TypeId <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectNumber <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContextData>k__BackingField;
    public TypeId TypeId { get; private set; }
    public ObjectNumber ObjectNumber { get; private set; }
    public SectionPointer`1<IFieldNamesCollection> FieldName { get; private set; }
    public long ContextData { get; private set; }
    public ContextStaticReference(ObjectNumber objectNumber, TypeId typeId, SectionPointer`1<IFieldNamesCollection> fieldName, long contextData);
    [CompilerGeneratedAttribute]
public sealed virtual TypeId get_TypeId();
    [CompilerGeneratedAttribute]
private void set_TypeId(TypeId value);
    [CompilerGeneratedAttribute]
public sealed virtual ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectNumber(ObjectNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual SectionPointer`1<IFieldNamesCollection> get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(SectionPointer`1<IFieldNamesCollection> value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ContextData();
    [CompilerGeneratedAttribute]
private void set_ContextData(long value);
}
public class JetBrains.dotMemory.Dal.Conversion.ClassSectionNodeEqualityComparer : object {
    private IClassSection myClassSection;
    public ClassSectionNodeEqualityComparer(IClassSection classSection);
    public sealed virtual bool Equals(ClassSectionNode left, ClassSectionNode right);
    public sealed virtual int GetHashCode(ClassSectionNode node);
    private ClassSectionNode GetClassSectionNode(SectionOffset`1<IClassSection> offset);
    private static bool IsGenericType(ClassSectionNode node);
    private static bool IsPlainType(ClassSectionNode node);
    private bool EqualsArray(ClassSectionNode x, ClassSectionNode y);
    private bool EqualsGenericType(ClassSectionNode x, ClassSectionNode y);
    private static bool EqualsPlainType(ClassSectionNode x, ClassSectionNode y);
    private int GetHashCodeArray(ClassSectionNode node);
    private int GetHashCodeGenericType(ClassSectionNode node);
    private static int GetHashCodePlainType(ClassSectionNode node);
    [CompilerGeneratedAttribute]
private int <GetHashCodeGenericType>b__0(int current, SectionOffset`1<IClassSection> genericArgument);
}
internal class JetBrains.dotMemory.Dal.Conversion.ExternalSnapshotConverter : object {
    private IExternalExecutor myExternalExecutor;
    public ExternalSnapshotConverter(IExternalExecutor externalExecutor);
    public sealed virtual void Convert(FileSystemPath rawIndexFilePath, FileSystemPath targetIndexFilePath, IExecutionController executionController);
    internal static bool PerformConversion(Source source, IExecutionController executionController);
}
public class JetBrains.dotMemory.Dal.Conversion.OptimizedProgressIndicator : object {
    private IProgressIndicator mySource;
    private int myStepsCount;
    private int myAdvanceTrigger;
    private int myCounter;
    public OptimizedProgressIndicator(IProgressIndicator source);
    public sealed virtual IExecutionController StartProgress(int stepsCount, string operationName);
    public sealed virtual IExecutionController CreateSubOperation(int parentStepsCount);
    public sealed virtual void Yield();
    public sealed virtual void AdvanceProgress();
    public sealed virtual void AttachTask(ITask task, int parentStepsCount, bool isShared);
    public sealed virtual void WaitForTask(ITask task, int parentStepsCount, bool isShared);
    public sealed virtual void Dispose();
}
public class JetBrains.dotMemory.Dal.Conversion.RawAllocationsStatistics : ValueType {
    private UInt32 myCallTreeNumber;
    private UInt32 myCallTreeNullPtr;
    private IEnumerable`1<Node> myStatistcs;
    public UInt32 CallTreeNullPtr { get; }
    public UInt32 CallTreeNumber { get; }
    public IEnumerable`1<Node> Statistics { get; }
    public RawAllocationsStatistics(UInt32 callTreeNumber, UInt32 callTreeNullPtr, IEnumerable`1<Node> statistcs);
    public UInt32 get_CallTreeNullPtr();
    public UInt32 get_CallTreeNumber();
    public IEnumerable`1<Node> get_Statistics();
}
[RawSectionAttribute("12690")]
public class JetBrains.dotMemory.Dal.Conversion.RawAllocationStatisticsReader : object {
    private BinaryReader myReader;
    public RawAllocationStatisticsReader(BinaryReader reader);
    public RawAllocationsStatistics Read();
}
public class JetBrains.dotMemory.Dal.Conversion.RawAppDomainStaticReference : object {
    [CompilerGeneratedAttribute]
private long <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FieldNameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppDomainData>k__BackingField;
    public long ClassId { get; private set; }
    public long FieldNameOffset { get; private set; }
    public ulong ObjectId { get; private set; }
    public long AppDomainData { get; private set; }
    public RawAppDomainStaticReference(long classId, long appDomainData, long fieldNameOffset, ulong objectId);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClassId();
    [CompilerGeneratedAttribute]
private void set_ClassId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_FieldNameOffset();
    [CompilerGeneratedAttribute]
private void set_FieldNameOffset(long value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(ulong value);
    [CompilerGeneratedAttribute]
public long get_AppDomainData();
    [CompilerGeneratedAttribute]
private void set_AppDomainData(long value);
}
[RawSectionAttribute("12610")]
public class JetBrains.dotMemory.Dal.Conversion.RawClassIndexReader : object {
    private BinaryReader myReader;
    private int myCount;
    public int Count { get; }
    public RawClassIndexReader(BinaryReader reader);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<SectionOffset`1<IClassSection>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.dotMemory.Dal.Conversion.RawContextStaticReference : object {
    [CompilerGeneratedAttribute]
private long <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FieldNameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContextData>k__BackingField;
    public long ClassId { get; private set; }
    public long FieldNameOffset { get; private set; }
    public ulong ObjectId { get; private set; }
    public long ContextData { get; private set; }
    public RawContextStaticReference(long classId, long contextData, long fieldNameOffset, ulong objectId);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClassId();
    [CompilerGeneratedAttribute]
private void set_ClassId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_FieldNameOffset();
    [CompilerGeneratedAttribute]
private void set_FieldNameOffset(long value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(ulong value);
    [CompilerGeneratedAttribute]
public long get_ContextData();
    [CompilerGeneratedAttribute]
private void set_ContextData(long value);
}
public class JetBrains.dotMemory.Dal.Conversion.RawGraphRoot : ValueType {
    public ulong ObjectId;
    public GraphRootKind Kind;
    public GraphRootFlags Flag;
    public ulong Data;
    public RawGraphRoot(ulong objectId, byte kind, byte flag, ulong data);
}
[RawSectionAttribute("12545")]
[RawSectionAttribute("12546")]
public class JetBrains.dotMemory.Dal.Conversion.RawHeapsReader : object {
    private BinaryReader myReader;
    private PtrReader myPtrReader;
    private int myHeapsCount;
    private int mySizeOfHeader;
    private ulong myPrivateBytes;
    private ulong myVirtualBytes;
    public int Count { get; }
    public PtrSize SizeofPointer { get; }
    public ulong PrivateBytes { get; }
    public ulong VirtualBytes { get; }
    public RawHeapsReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<RawHeap> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual PtrSize get_SizeofPointer();
    public ulong get_PrivateBytes();
    public ulong get_VirtualBytes();
}
[RawSectionAttribute("12547")]
public class JetBrains.dotMemory.Dal.Conversion.RawMovedMemoryBlocksReader : object {
    private BinaryReader myReader;
    private PtrReader myPtrReader;
    private int myBlocksCount;
    private int mySizeOfHeader;
    public int Count { get; }
    public RawMovedMemoryBlocksReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<RawMemoryBlock> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
}
public class JetBrains.dotMemory.Dal.Conversion.RawObjectClassesReader : object {
    private BinaryReader myReader;
    private int myCount;
    private long myHeaderSize;
    public int Count { get; }
    public RawObjectClassesReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<long> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
}
[RawSectionAttribute("12612")]
public class JetBrains.dotMemory.Dal.Conversion.RawReferencesReader : object {
    private BinaryReader myReader;
    private PtrReader myPtrReader;
    private int myReferencesCount;
    private long mySizeOfHeader;
    public int Count { get; }
    public RawReferencesReader(BinaryReader reader);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<ulong> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[RawSectionAttribute("12551")]
public class JetBrains.dotMemory.Dal.Conversion.RawRootCollectionReader : object {
    private BinaryReader myReader;
    private UInt64Reader myPtrReader;
    private int myRootsCount;
    private long mySizeOfHeader;
    public int Count { get; }
    public RawRootCollectionReader(BinaryReader reader);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<RawGraphRoot> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.dotMemory.Dal.Conversion.RawRvaStaticReference : object {
    [CompilerGeneratedAttribute]
private long <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FieldNameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ObjectId>k__BackingField;
    public long ClassId { get; private set; }
    public long FieldNameOffset { get; private set; }
    public ulong ObjectId { get; private set; }
    public RawRvaStaticReference(long classId, long fieldNameOffset, ulong objectId);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClassId();
    [CompilerGeneratedAttribute]
private void set_ClassId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_FieldNameOffset();
    [CompilerGeneratedAttribute]
private void set_FieldNameOffset(long value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(ulong value);
}
public class JetBrains.dotMemory.Dal.Conversion.RawSectionGroup : Dictionary`2<ushort, MultiFileSnapshotSectionDescriptor> {
}
public class JetBrains.dotMemory.Dal.Conversion.RawSnapshotProsector : object {
    private FileSystemPath myIndexFilePath;
    private Dictionary`2<ushort, IList`1<MultiFileSnapshotSectionDescriptor>> mySectionDescriptors;
    private ChunkList`1<RawSectionGroup> mySectionGroups;
    [CompilerGeneratedAttribute]
private static Func`1<IList`1<MultiFileSnapshotSectionDescriptor>> CS$<>9__CachedAnonymousMethodDelegate1;
    public IReadOnlyList`1<RawSectionGroup> SectionGroups { get; }
    public FileSystemPath IndexFilePath { get; }
    public RawSnapshotProsector(FileSystemPath indexFilePath);
    private void LoadSectionIndex(BinaryReader reader);
    public IReadOnlyList`1<RawSectionGroup> get_SectionGroups();
    [NotNullAttribute]
public IEnumerable`1<MultiFileSnapshotSectionDescriptor> GetSectionDescriptors(ushort sectionType);
    public BinaryReader GetReaderByDescriptor(MultiFileSnapshotSectionDescriptor descriptor, Lifetime lifetime);
    public BinaryReader GetReaderForWideSection(ushort sectionType, Lifetime lifetime);
    public FileSystemPath get_IndexFilePath();
    private Stream OpenFileForReading(int fileIndex, long startFilePosition, long size, SectionType sectionType);
    [CompilerGeneratedAttribute]
private static IList`1<MultiFileSnapshotSectionDescriptor> <LoadSectionIndex>b__0();
}
public class JetBrains.dotMemory.Dal.Conversion.RawStaticFieldsReader : object {
    private BinaryReader myReader;
    private PtrReader myPtrReader;
    private UInt32 myCount;
    private int mySizeOfHeader;
    public RawStaticFieldsReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<IRawStaticField> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class JetBrains.dotMemory.Dal.Conversion.RawStaticReferencesReader : object {
    private BinaryReader myReader;
    private PtrReader myPtrReader;
    private UInt32 myCount;
    private int mySizeOfHeader;
    public RawStaticReferencesReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<IRawStaticReference> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[RawSectionAttribute("12548")]
public class JetBrains.dotMemory.Dal.Conversion.RawSurvivedMemoryBlocksReader : object {
    private BinaryReader myReader;
    private PtrReader myPtrReader;
    private int myBlocksCount;
    private int mySizeOfHeader;
    public int Count { get; }
    public RawSurvivedMemoryBlocksReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<RawMemoryBlock> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
}
public class JetBrains.dotMemory.Dal.Conversion.RawThreadStaticReference : object {
    [CompilerGeneratedAttribute]
private long <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FieldNameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppDomainData>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ThreadData>k__BackingField;
    public long ClassId { get; private set; }
    public long FieldNameOffset { get; private set; }
    public ulong ObjectId { get; private set; }
    public long AppDomainData { get; private set; }
    public long ThreadData { get; private set; }
    public RawThreadStaticReference(long classId, long appDomainData, long threadData, long fieldNameOffset, ulong objectId);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClassId();
    [CompilerGeneratedAttribute]
private void set_ClassId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_FieldNameOffset();
    [CompilerGeneratedAttribute]
private void set_FieldNameOffset(long value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(ulong value);
    [CompilerGeneratedAttribute]
public long get_AppDomainData();
    [CompilerGeneratedAttribute]
private void set_AppDomainData(long value);
    [CompilerGeneratedAttribute]
public long get_ThreadData();
    [CompilerGeneratedAttribute]
private void set_ThreadData(long value);
}
internal static class JetBrains.dotMemory.Dal.Conversion.ReverseGraphBuilder : object {
    public static ReverseGraphBuilderResult Build(GraphData directGraph, IReadOnlyList`1<byte> accessibilityMask, IExecutionController executionController);
}
public class JetBrains.dotMemory.Dal.Conversion.SnapshotConverter : object {
    private static double CompactMapPreallocationFactor;
    private static ILogger ourLogger;
    private ObjectAddressTranslator myAddressTranslator;
    private IDictionary`2<GlobalObjectNumber, FinalizedObject> myFinalizationQueue;
    private bool myIsFirstSnapshot;
    private UInt32 myLastSnapshotNumber;
    [CanBeNullAttribute]
private SnapshotConverterIntermediateDataCapsule myCapsule;
    private RawSnapshotProsector myRawSnapshotProsector;
    private MultiFileSnapshotWriter mySnapshotWriter;
    private int mySnapshotGCNumber;
    [CompilerGeneratedAttribute]
private static Func`2<GraphRoot, ObjectNumber> CS$<>9__CachedAnonymousMethodDelegate31;
    [CompilerGeneratedAttribute]
private static Func`2<GraphRoot, ObjectNumber> CS$<>9__CachedAnonymousMethodDelegate32;
    [CompilerGeneratedAttribute]
private static Func`2<GraphRoot, ObjectNumber> CS$<>9__CachedAnonymousMethodDelegate33;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<<>f__AnonymousType0`2<TypeId, UInt32>, Node>, Node> CS$<>9__CachedAnonymousMethodDelegate43;
    [CompilerGeneratedAttribute]
private static Func`3<UInt32, Node, UInt32> CS$<>9__CachedAnonymousMethodDelegate48;
    [CompilerGeneratedAttribute]
private static Func`3<ulong, Node, ulong> CS$<>9__CachedAnonymousMethodDelegate49;
    [CompilerGeneratedAttribute]
private static Func`3<ObjectNumber, int, <>f__AnonymousType1`2<ObjectNumber, ObjectNumber>> CS$<>9__CachedAnonymousMethodDelegate64;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<ObjectNumber, ObjectNumber>, bool> CS$<>9__CachedAnonymousMethodDelegate65;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<ObjectNumber, ObjectNumber>, ObjectNumber> CS$<>9__CachedAnonymousMethodDelegate66;
    [CompilerGeneratedAttribute]
private static Func`2<IReadOnlyCollection`1<RawFinalizedObject>, int> CS$<>9__CachedAnonymousMethodDelegate8a;
    [CompilerGeneratedAttribute]
private static Func`2<RawFinalizedObject, ulong> CS$<>9__CachedAnonymousMethodDelegate8b;
    [CompilerGeneratedAttribute]
private static Func`2<RawFinalizedObject, ulong> CS$<>9__CachedAnonymousMethodDelegate8c;
    public SnapshotConverter(SnapshotConverterIntermediateDataCapsule capsule);
    private static SnapshotConverter();
    public sealed virtual void Convert(FileSystemPath rawSnapshotIndexFilePath, FileSystemPath targetIndexFilePath, IExecutionController executionController);
    private IReadOnlyCollection`1<IReadOnlyCollection`1<RawFinalizedObject>> ReadFinalizedObjects(FinalizedObjectsCountApproximation objectsCount);
    private IEnumerable`1<FinalizedObject> ConvertFinalizedObjects(IDictionary`2<ObjectNumber, RawFinalizedObject> numberedRawFinObjs, IDictionary`2<long, TypeId> typeIds, ObjectAddressTranslationResult translationResult, int aliveCount);
    private void WriteFinalizedObjects(IEnumerable`1<FinalizedObject> finalizedObjects, FinalizedObjectsCountApproximation objectsCount);
    private void WriteHashes(ShortestPairsFinderResult shortestPairsFinderResult, IDfsData dfsData, IReadOnlyList`1<TypeId> types, IExecutionController executionController);
    private void ShortestRootPathTree(IBfsData bfsData, IReadOnlyList`1<int> directToReverseReferenceMap, IExecutionController executionController);
    private void WriteTranslationResult(ObjectAddressTranslationResult translationResult, int aliveCount);
    private Tuple`2<IEnumerable`1<GraphRoot>, HashSet`1<ObjectNumber>> ReadAndWriteRoots(IGraph directGraph, IDictionary`2<ulong, ObjectNumber> objectIdToNumber, IReadOnlyList`1<TypeId> types, IDictionary`2<long, TypeId> classIndexSectionMap, ITypeSectionData typeSectionData, IExecutionController executionController);
    private IReadOnlyCollection`1<GraphRoot> ProcessStaticFields(IDictionary`2<ulong, ObjectNumber> objectIdToNumber, IDictionary`2<long, TypeId> classIndexSectionMap);
    private static IReadOnlyList`1<ObjectNumber> DistinctRoots(IEnumerable`1<GraphRoot> processedRoots);
    private void ConvertObjectAllocationStatistcs(IDictionary`2<long, TypeId> classIndexSectionMap, IExecutionController progressIndicator);
    private void WriteAccessibilityMask(int traversedNodesCount, IReadOnlyCollection`1<byte> mask, IExecutionController executionController);
    private void WriteHeapSection(IExecutionController executionController);
    private IReadOnlyList`1<TypeId> ConvertObjectClassSection(IDictionary`2<long, TypeId> classIndexSectionMap, IExecutionController executionController);
    private void RetainedSize(IReadOnlyList`1<ObjectNumber> dominatorTreeParent, IDfsData dfsData, IExecutionController executionController);
    private ShortestPairsFinderResult DominatorsAndPairs(IDirectGraph directGraph, IReverseGraph reverseGraph, IReadOnlyList`1<int> directToReverseReferenceMap, IReadOnlyList`1<ObjectNumber> roots, IExecutionController executionController);
    private void WriteReverseGraphReferenceDetails(IReadOnlyCollection`1<int> revereseGraphReferenceNamesMap, IExecutionController executionController);
    private ReverseGraphBuilderResult CleanAndWriteReverseGraph(GraphData directGraph, IReadOnlyList`1<byte> traversedObjectsMask, IExecutionController executionController);
    private void WriteDirectReferences(IReadOnlyCollection`1<ObjectNumber> references);
    private GraphData ReadAndRenumberDirectGraph(IDictionary`2<ulong, ObjectNumber> objectIdToNumber, IExecutionController executionController);
    private GCRoots ReadRoots(IDictionary`2<ulong, ObjectNumber> objectIdToNumber, IExecutionController executionController);
    private void WriteRoots(IReadOnlyCollection`1<GraphRoot> rootCollection, SectionType sectionType, IExecutionController executionController);
    private static IReadOnlyList`1<GraphRoot> SortAndClearRoots(IEnumerable`1<GraphRoot> rootCollection, IExecutionController executionController);
    private IDictionary`2<ulong, ObjectNumber> BuildObjectIdMap(IExecutionController executionController);
    private Tuple`2<IDictionary`2<long, TypeId>, ITypeSectionData> BuildTypeSection(IExecutionController executionController);
    private void TranslateAddresses(IDictionary`2<ulong, ObjectNumber> objectIdToNumber, IReadOnlyCollection`1<IReadOnlyCollection`1<RawFinalizedObject>> finalizedObjectsPerGc, IExecutionController progressIndicator, ObjectAddressTranslationResult& outTranslatedAddresses, IDictionary`2& outNumberedRawFinObjects);
    private SnapshotStorageSection CreateSnapshotStorage(MultiFileSnapshotSectionDescriptor descriptor, Lifetime lifetime);
    public static SnapshotConverter Create();
    private static bool IsDiskFullException(IOException ex);
    private static void DeleteMultifileSnapshotFiles(FileSystemPath indexFile);
    [CompilerGeneratedAttribute]
private FileSystemPath <Convert>b__0(int fileIndex);
    [CompilerGeneratedAttribute]
private static ObjectNumber <ReadAndWriteRoots>b__2b(GraphRoot _);
    [CompilerGeneratedAttribute]
private static ObjectNumber <ReadAndWriteRoots>b__2d(GraphRoot _);
    [CompilerGeneratedAttribute]
private static ObjectNumber <ReadAndWriteRoots>b__2e(GraphRoot root);
    [CompilerGeneratedAttribute]
private static Node <ConvertObjectAllocationStatistcs>b__3e(IGrouping`2<<>f__AnonymousType0`2<TypeId, UInt32>, Node> groupNode);
    [CompilerGeneratedAttribute]
private static UInt32 <ConvertObjectAllocationStatistcs>b__3f(UInt32 sum, Node next);
    [CompilerGeneratedAttribute]
private static ulong <ConvertObjectAllocationStatistcs>b__40(ulong sum, Node next);
    [CompilerGeneratedAttribute]
private BinaryReader <RetainedSize>b__56(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType1`2<ObjectNumber, ObjectNumber> <DominatorsAndPairs>b__5f(ObjectNumber _, int i);
    [CompilerGeneratedAttribute]
private static bool <DominatorsAndPairs>b__60(<>f__AnonymousType1`2<ObjectNumber, ObjectNumber> pair);
    [CompilerGeneratedAttribute]
private static ObjectNumber <DominatorsAndPairs>b__61(<>f__AnonymousType1`2<ObjectNumber, ObjectNumber> pair);
    [CompilerGeneratedAttribute]
private BinaryReader <WriteReverseGraphReferenceDetails>b__69(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private BinaryReader <ReadAndRenumberDirectGraph>b__79(Lifetime lifetime1);
    [CompilerGeneratedAttribute]
private BinaryReader <BuildObjectIdMap>b__7f(Lifetime lifetime1);
    [CompilerGeneratedAttribute]
private static int <TranslateAddresses>b__86(IReadOnlyCollection`1<RawFinalizedObject> x);
    [CompilerGeneratedAttribute]
private static ulong <TranslateAddresses>b__87(RawFinalizedObject finObj);
    [CompilerGeneratedAttribute]
private static ulong <TranslateAddresses>b__88(RawFinalizedObject finObj);
}
public class JetBrains.dotMemory.Dal.Conversion.SnapshotConverterIntermediateDataCapsule : object {
    public IDictionary`2<ulong, ObjectNumber> Id2NumberMap;
    public IDictionary`2<long, TypeId> Class2TypeMap;
}
public class JetBrains.dotMemory.Dal.ConvertSnapshotPipelineBuilder : object {
    private static ProgressProvider WaitingForProcessingProgress;
    private ILogger myLogger;
    private ReadonlyToken myReadonlyToken;
    private Lifetime myLifetime;
    private IThreading myMainThread;
    private ActiveProfilingSessionDescriptor myProfilingSessionDescriptor;
    private ISnapshotDiskManager mySnapshotDiskManager;
    private IDotMemoryGlobalState myDotMemoryGlobalState;
    private Func`3<RawSnapshotDescriptor, IExecutionController, RawSnapshotDescriptor> myConvertSnapshotRemotely;
    private IRemoteCommunicator myRemoteCommunicator;
    private IDataController`1<int> myReadyToConvertSnapshotOrderNumber;
    public ListEvents`1<SnapshotProvider> SnapshotProviders;
    public ConvertSnapshotPipelineBuilder(Lifetime lifetime, ActiveProfilingSessionDescriptor profilingSessionDescriptor, IRemotableReference`1<ISnapshotConverter> remoteSnapshotConverter, IThreading mainThread, ISnapshotDiskManager snapshotDiskManager, IDotMemoryGlobalState dotMemoryGlobalState);
    private static ConvertSnapshotPipelineBuilder();
    private void OnNewRawSnapshotAdded(Lifetime rawSnapshotLifetime, RawSnapshotProvider rawSnapshotProvider);
    private IDataProvider`1<RawSnapshotDescriptor> ConvertSnapshot(IDataProvider`1<RawSnapshotDescriptor> rawSnapshotProvider);
    private static RawSnapshotDescriptor MoveSnapshotFilesToTheStorage(FileSystemPath profilingSessionRootPath, RawSnapshotDescriptor snapshotDescriptor, ISnapshotDiskManager snapshotDiskManager);
    private static Func`3<RawSnapshotDescriptor, IExecutionController, RawSnapshotDescriptor> GetConvertSnapshotLambdaAntiClosure(IRemotableReference`1<ISnapshotConverter> remoteSnapshotConverter);
    [CompilerGeneratedAttribute]
private RawSnapshotDescriptor <ConvertSnapshot>b__c(RawSnapshotDescriptor snapshotDescriptor);
}
public class JetBrains.dotMemory.Dal.CoreEvents : object {
    private ISignal`1<HostOperationEventArgs> myOperation;
    private ISignal`1<HostScopeEventArgs> myOperationScope;
    public ISignal`1<HostOperationEventArgs> Operation { get; }
    public ISignal`1<HostScopeEventArgs> OperationScope { get; }
    public CoreEvents(IHostProfileSubscription hostProfileSubscription, Lifetime lifetime);
    public sealed virtual ISignal`1<HostOperationEventArgs> get_Operation();
    public sealed virtual ISignal`1<HostScopeEventArgs> get_OperationScope();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.DataStorage : object {
    private ILogger myLogger;
    private IPhysicalStorage myPhysicalStorage;
    private ISettings mySettings;
    private Dictionary`2<string, object> myWritingPerKeyAccess;
    private object myCreateTasksAccess;
    private Dictionary`2<DataKey, ITask> myCreateTasks;
    private object myDataKeysAccess;
    private Dictionary`2<DataKey, string> myDataKeys;
    private List`1<DataKey> myLockedKeys;
    private object myLockedKeysAccess;
    [CompilerGeneratedAttribute]
private static Func`1<object> CS$<>9__CachedAnonymousMethodDelegatee;
    public DataStorage(IPhysicalStorage physicalStorage, ISettings settings);
    private void LoadDataIndex(IKeyBase`1<StoredDataIndex> dataIndex, string dataName);
    public sealed virtual void Write(string name, Version formatVersion, Action`1<BinaryWriter> writeAction);
    public sealed virtual bool Contains(string name, Version formatVersion);
    public sealed virtual T GetOrCreate(string name, Version formatVersion, IExecutionController executionController, Func`2<IExecutionController, TW> create, Action`3<TW, BinaryWriter, IExecutionController> write, Func`3<BinaryReader, IExecutionController, T> read);
    private void AddNewValue(Dictionary`2<DataKey, string> dictionary, DataKey key);
    private BinaryReader GetPermanentAccess(string dataKey, Version formatVersion, Lifetime lifetime);
    private BinaryReader GetPermanentAccessOrCreate(string dataKey, Version formatVersion, Action`1<BinaryWriter> writeAction, Lifetime lifetime);
    public sealed virtual bool Read(string name, Version formatVersion, Action`1<BinaryReader> readAction);
    public sealed virtual bool Delete(string name, Version formatVersion);
    private IDisposable LockDataAccess(DataKey key);
    [CompilerGeneratedAttribute]
private static object <GetPermanentAccessOrCreate>b__d();
}
public class JetBrains.dotMemory.Dal.DataWriter : object {
    protected BinaryWriter Writer;
    public SectionTypeWithVersion SectionTypeWithVersion;
    protected DataWriter(BinaryWriter writer, SectionType sectionType, ushort formatVersion);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.Diagnostics.SnapshotDiagnosticService : object {
    private static ISet`1<SectionType> ourSensitiveSectionTypes;
    private SnapshotDescriptor mySnapshotDescriptor;
    private ProfilingSessionFolder myProfilingSessionFolder;
    [CompilerGeneratedAttribute]
private static Comparison`1<MultiFileSnapshotSectionDescriptor> CS$<>9__CachedAnonymousMethodDelegate2;
    public SnapshotDiagnosticService(SnapshotDescriptor snapshotDescriptor, ProfilingSessionFolder profilingSessionFolder);
    private static SnapshotDiagnosticService();
    public sealed virtual FileSystemPath ZipSnapshotData(SectionType[] sectionTypes);
    [CompilerGeneratedAttribute]
private static int <ZipSnapshotData>b__1(MultiFileSnapshotSectionDescriptor a, MultiFileSnapshotSectionDescriptor b);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.DiskReaderAllocationStatesHistoryManager : object {
    private IListEvents`1<ITimelineRange> myAllocationCollectedRanges;
    private bool myAllocationDataAvailable;
    private PropertyChangedEventHandler PropertyChanged;
    public IListEvents`1<ITimelineRange> AllocationCollectedRanges { get; private set; }
    public IProperty`1<IAllocationDataState> CurrentState { get; }
    public bool AllocationDataAvailable { get; private set; }
    public DiskReaderAllocationStatesHistoryManager(Lifetime lifetime, ProfilingSessionFolder profilingSessionFolder);
    public sealed virtual IListEvents`1<ITimelineRange> get_AllocationCollectedRanges();
    private void set_AllocationCollectedRanges(IListEvents`1<ITimelineRange> value);
    public sealed virtual IProperty`1<IAllocationDataState> get_CurrentState();
    public sealed virtual bool get_AllocationDataAvailable();
    private void set_AllocationDataAvailable(bool value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
internal class JetBrains.dotMemory.Dal.Dumps.ClassDumper : object {
    private static UInt32 ArtificialArrayMetadataIndex;
    private static UInt32 ArtificialArrayMetadataToken;
    private ILogger myLogger;
    private IMetadataIndexProvider myMetadataIndexProvider;
    private IDictionary`2<string, ClrType> myKnownSimpleTypes;
    private IDictionary`2<LooseTypeId, long> myOffsets;
    private SimpleChunkHashSet`1<string> myFailedTypeNames;
    private BinaryWriter myDataWriter;
    private BinaryWriter myIndexWriter;
    private int myTypesCount;
    public ClassDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess, IMetadataIndexProvider metadataIndexProvider);
    public void ReportKnownType(ClrType type);
    public sealed virtual long GetOffset(ClrType type);
    private TypeEntry ProcessType(ClrType type, Context context);
    private bool TryProcessTypeByName(string typeName, Context context, TypeEntry& typeEntry);
    private TypeEntry ProcessArrayType(ClrType type, Context context);
    private bool TryProcessArrayTypeByName(string typeName, Context context, TypeEntry& typeEntry);
    private TypeEntry ProcessRegularType(ClrType type, Context context);
    private bool TryProcessRegularTypeByName(string typeName, Context context, TypeEntry& typeEntry);
    private bool TryResolveGenericArguments(string typeName, Context context, String& plainTypeName, IReadOnlyCollection`1& genericArgumentTypeEntries);
    private long WriteArrayType(int rank, TypeEntry elementTypeEntry);
    private long WriteRegularType(UInt32 metadataIndex, UInt32 metadataToken, TypeEntry parentTypeEntry, IReadOnlyCollection`1<TypeEntry> genericArgumentTypeEntries);
    private void WriteOffset(TypeEntry entry);
    private void UpdateValueAtPositions(TypeEntry entry, long value);
    private void LogMessage(string message, Object[] args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter writer);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.Dumps.DebuggerLibsCollector : object {
    private ILogger myLogger;
    public sealed virtual void CollectAndPackDebuggerLibs(FileSystemPath targetPath, IExecutionController executionController);
    private void CollectFiles(FileSystemPath folderPath, string searchPattern, ZipFile zip, Int64& totalBytes, string additionalSuffix);
    private static ZipFile CreateZip();
}
internal class JetBrains.dotMemory.Dal.Dumps.DumpMemoryReader : object {
    private ClrRuntime myRuntime;
    public DumpMemoryReader(ClrRuntime runtime);
    public sealed virtual ulong ReadPlatformSpecificValue(ulong address);
}
[FlagsAttribute]
internal enum JetBrains.dotMemory.Dal.Dumps.DumpTypeFlags : Enum {
    public ulong value__;
    public static DumpTypeFlags Normal;
    public static DumpTypeFlags DataSegs;
    public static DumpTypeFlags FullMemory;
    public static DumpTypeFlags HandleData;
    public static DumpTypeFlags FilterMemory;
    public static DumpTypeFlags ScanMemory;
    public static DumpTypeFlags UnloadedModules;
    public static DumpTypeFlags IndirectlyReferencedMemory;
    public static DumpTypeFlags FilterModulePaths;
    public static DumpTypeFlags ProcessThreadData;
    public static DumpTypeFlags PrivateReadWriteMemory;
    public static DumpTypeFlags WithoutOptionalData;
    public static DumpTypeFlags FullMemoryInfo;
    public static DumpTypeFlags ThreadInfo;
    public static DumpTypeFlags CodeSegs;
    public static DumpTypeFlags WithoutAuxiliaryState;
    public static DumpTypeFlags FullAuxiliaryState;
    public static DumpTypeFlags PrivateWriteCopyMemory;
    public static DumpTypeFlags IgnoreInaccessibleMemory;
    public static DumpTypeFlags TokenInformation;
    public static DumpTypeFlags ModuleHeaders;
    public static DumpTypeFlags FilterTriage;
}
internal static class JetBrains.dotMemory.Dal.Dumps.EnvironmentDumper : object {
    public static void WriteEnvironment(ISnapshotAccess snapshotAccess, byte pointerSize);
    private static void WriteVersion(BinaryWriter writer, Version version);
}
internal class JetBrains.dotMemory.Dal.Dumps.FieldNameDumper : object {
    private IDictionary`2<FieldNamePathId, long> myOffsets;
    private BinaryWriter myWriter;
    public FieldNameDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess);
    public sealed virtual long GetFieldNameOffset(FieldNamePathId pathId);
    private long WriteFieldPathStep(FieldNamePathId pathId);
}
internal class JetBrains.dotMemory.Dal.Dumps.FieldNamePathId : object {
    public UInt32 MetadataIndex;
    public UInt32 MetadataToken;
    public FieldNamePathId ParentPathId;
    public FieldNamePathId(UInt32 metadataIndex, UInt32 metadataToken, FieldNamePathId parentPathId);
    public sealed virtual bool Equals(FieldNamePathId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class JetBrains.dotMemory.Dal.Dumps.FinalizedObjectsDumper : object {
    public static void WriteSections(ISnapshotAccess snapshotAccess, ClrHeap heap, IObjectAddressFilter objectAddressFilter, IClassOffsetProvider classOffsetProvider);
    private static void WriteDummySections(ISnapshotAccess snapshotAccess, ClrHeap heap);
    private static void WriteActualSections(ISnapshotAccess snapshotAccess, ClrHeap heap, IObjectAddressFilter objectAddressFilter, IClassOffsetProvider classOffsetProvider);
}
internal static class JetBrains.dotMemory.Dal.Dumps.GCBracketDumper : object {
    public static void WriteSections(ISnapshotAccess snapshotAccess, ClrHeap heap, IObjectAddressFilter objectAddressFilter, IClassOffsetProvider classOffsetProvider);
    private static void WriteOpeningBracket(ISnapshotAccess snapshotAccess);
    private static void WriteClosingBracket(ISnapshotAccess snapshotAccess);
    private static void WriteEmptyMovedBlocks(ISnapshotAccess snapshotAccess, byte pointerSize);
}
internal static class JetBrains.dotMemory.Dal.Dumps.HeapsDumper : object {
    private static ushort HeapsSectionVersion;
    public static void WriteSections(ISnapshotAccess snapshotAccess, ClrHeap heap);
    private static void WriteHeaps(ClrHeap heap, BinaryWriter writer);
    private static void WriteHeapEntry(BinaryWriter writer, byte pointerSize, CounterReference counterReference, Generation generation, ulong startAddress, ulong length, ulong endReservedAddress);
}
internal interface JetBrains.dotMemory.Dal.Dumps.IClassOffsetProvider {
    public abstract virtual long GetOffset(ClrType type);
}
internal interface JetBrains.dotMemory.Dal.Dumps.IDumpMemoryReader {
    public abstract virtual ulong ReadPlatformSpecificValue(ulong address);
}
internal interface JetBrains.dotMemory.Dal.Dumps.IFieldNameOffsetProvider {
    public abstract virtual long GetFieldNameOffset(FieldNamePathId pathId);
}
internal interface JetBrains.dotMemory.Dal.Dumps.IMetadataIndexProvider {
    public abstract virtual UInt32 GetMetadataIndex(ClrModule module);
}
internal class JetBrains.dotMemory.Dal.Dumps.IndefiniteProgress : object {
    private static int StepsCount;
    private IExecutionController myExecutionController;
    private int myStepIndex;
    private int myElementIndex;
    private int myNextThreshold;
    public IndefiniteProgress(IExecutionController executionController);
    public void YieldAndProgress();
    public sealed virtual void Dispose();
}
internal interface JetBrains.dotMemory.Dal.Dumps.IObjectAddressDumper {
    public abstract virtual void WriteAddress(ulong address);
}
internal interface JetBrains.dotMemory.Dal.Dumps.IObjectClassDumper {
    public abstract virtual void WriteType(ClrType type);
}
internal interface JetBrains.dotMemory.Dal.Dumps.IObjectReferencesDumper {
    public abstract virtual void MarkNextObject();
    public abstract virtual void WriteReference(ulong referencedAddress, int arrayIndex, long fieldNameOffset);
}
internal interface JetBrains.dotMemory.Dal.Dumps.IObjectSizeDumper {
    public abstract virtual void WriteSize(ulong size);
}
internal class JetBrains.dotMemory.Dal.Dumps.LooseTypeId : object {
    public string Name;
    public UInt32 MetadataIndex;
    public UInt32 MetadataToken;
    public static LooseTypeId Unknown;
    public LooseTypeId(string name, UInt32 metadataIndex, UInt32 metadataToken);
    private static LooseTypeId();
    public sealed virtual bool Equals(LooseTypeId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static LooseTypeId GetId(ClrType type, IMetadataIndexProvider metadataIndexProvider);
}
internal class JetBrains.dotMemory.Dal.Dumps.Metadata.DumpAssembliesProvider : object {
    private ILogger myLogger;
    private MetadataLoader myMetadataLoader;
    private IDictionary`2<string, IMetadataAccess> myMetadataAccessByAssemblyName;
    private IDictionary`2<ulong, AssemblyNameInfo> myAssemblyNamesByMetadataAddress;
    private IDictionary`2<ulong, IMetadataAssembly> myAssembliesByMetadataAddress;
    private ICollection`1<ulong> myFailedMetadataAddresses;
    public bool ReportKnownModule(ClrModule module, Stream stream);
    public sealed virtual bool TryGetAssembly(ClrModule module, IMetadataAssembly& assembly);
    public sealed virtual IMetadataAccess ResolveAssembly(AssemblyNameInfo name, FileSystemPath& assemblyLocation, IModuleReferenceResolveContext moduleReferenceResolveContext);
    public sealed virtual void DumpDebugInformation(IndentedTextWriter textWriter);
    private bool IsKnownAssembly(AssemblyNameInfo name);
    private static string GetKey(AssemblyNameInfo name);
}
internal interface JetBrains.dotMemory.Dal.Dumps.Metadata.IDumpAssembliesProvider {
    public abstract virtual bool TryGetAssembly(ClrModule module, IMetadataAssembly& assembly);
}
internal class JetBrains.dotMemory.Dal.Dumps.Metadata.MetadataModuleStream : Stream {
    private ClrRuntime myRuntime;
    private ClrModule myModule;
    private long myLength;
    private long myPosition;
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public MetadataModuleStream(ClrModule module);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
}
internal class JetBrains.dotMemory.Dal.Dumps.MetadataDumper : object {
    private BinaryWriter myWriter;
    private IDictionary`2<ulong, UInt32> myModuleMetadataAddressToMetadataIndexDictionary;
    private UInt32 myModulesCount;
    public MetadataDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess);
    public sealed virtual UInt32 GetMetadataIndex(ClrModule module);
    public void ReportKnownModule(ClrModule module, Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter writer);
}
internal static class JetBrains.dotMemory.Dal.Dumps.MockAllocationsDumper : object {
    public static void WriteSections(ISnapshotAccess snapshotAccess);
}
internal class JetBrains.dotMemory.Dal.Dumps.ObjectAddressDumper : object {
    private byte myPointerSize;
    private BinaryWriter myWriter;
    private int myObjectsCount;
    private ulong myMinAddress;
    private ulong myMaxAddress;
    public ObjectAddressDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess, byte pointerSize);
    public sealed virtual void WriteAddress(ulong address);
}
internal class JetBrains.dotMemory.Dal.Dumps.ObjectArrayDimensionsDumper : object {
    private BinaryWriter myDimensionsWriter;
    private BinaryWriter myIndexWriter;
    private int myEntriesCount;
    private int myObjectsCount;
    public ObjectArrayDimensionsDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess);
    public void WriteArrayDimensions(ulong objectAddress, ClrType type);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter writer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryWriter writer);
}
internal class JetBrains.dotMemory.Dal.Dumps.ObjectClassDumper : object {
    private IClassOffsetProvider myClassOffsetProvider;
    private BinaryWriter myWriter;
    private int myObjectsCount;
    public ObjectClassDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess, IClassOffsetProvider classOffsetProvider);
    public sealed virtual void WriteType(ClrType type);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter writer);
}
internal class JetBrains.dotMemory.Dal.Dumps.ObjectReferencesDumper : object {
    private byte myPointerSize;
    private BinaryWriter myIndexWriter;
    private BinaryWriter myReferencesWriter;
    private BinaryWriter myReferenceNamesWriter;
    private int myReferencesCount;
    private int myObjectsCount;
    public ObjectReferencesDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess, byte pointerSize);
    public sealed virtual void MarkNextObject();
    public sealed virtual void WriteReference(ulong referencedAddress, int arrayIndex, long fieldNameOffset);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter w);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(BinaryWriter writer);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(BinaryWriter writer);
}
internal class JetBrains.dotMemory.Dal.Dumps.ObjectSizeDumper : object {
    private BinaryWriter myWriter;
    private int myObjectsCount;
    public ObjectSizeDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess);
    public sealed virtual void WriteSize(ulong size);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter w);
}
internal class JetBrains.dotMemory.Dal.Dumps.ObjectValueDumper : object {
    private static IDictionary`2<ClrElementType, FieldTypeEntry> ourTypesDictionary;
    private ILogger myLogger;
    private IDumpMemoryReader myDumpMemoryReader;
    private IMetadataIndexProvider myMetadataIndexProvider;
    private IDumpAssembliesProvider myAssembliesProvider;
    private IFieldNameOffsetProvider myFieldNameOffsetProvider;
    private IObjectReferencesDumper myObjectReferencesDumper;
    private IObjectAddressQueue myObjectAddressQueue;
    private IObjectAddressFilter myObjectAddressFilter;
    private IDictionary`2<LooseTypeId, TypeFieldsInfo> myCachedFields;
    private IDictionary`2<LooseTypeId, long> myCachedWrapperFieldNameOffsets;
    private BinaryWriter myValuesWriter;
    private BinaryWriter myIndexWriter;
    private int myObjectsCount;
    private long myAcceptedReferencesCount;
    private long mySkippedReferencesCount;
    private long myAcceptedValuesCount;
    private long mySkippedValuesCount;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Action`2<BinaryWriter, object> CS$<>9__CachedAnonymousMethodDelegate1a;
    public long AcceptedReferencesCount { get; }
    public long SkippedReferencesCount { get; }
    public long AcceptedValuesCount { get; }
    public long SkippedValuesCount { get; }
    public ObjectValueDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess, IDumpMemoryReader dumpMemoryReader, IMetadataIndexProvider metadataIndexProvider, IDumpAssembliesProvider assembliesProvider, IFieldNameOffsetProvider fieldNameOffsetProvider, IObjectReferencesDumper objectReferencesDumper, IObjectAddressQueue objectAddressQueue, IObjectAddressFilter objectAddressFilter);
    private static ObjectValueDumper();
    public void WriteValue(ulong objectAddress, ClrType type);
    private bool WriteObject(ulong objectAddress, ClrType type);
    private bool WriteArray(ulong objectAddress, ClrType type);
    private bool TryGetFieldOffsetInWrapperClass(ClrType type, Int64& offset);
    private TypeFieldsInfo EnumerateFields(ClrType type);
    private void EnumerateFieldsRec(ClrType type, FieldNamePathId parentPathId, ulong offset, ICollection`1<FieldInfo> simpleFields, ICollection`1<FieldInfo> referenceFields);
    private bool TryGetValidFieldMetadataIndex(ClrInstanceField field, ClrType originalType, UInt32 originalMetadataIndex, UInt32& fieldMetadataIndex);
    private bool IsValidFieldForModule(ClrInstanceField field, ClrModule module);
    private bool WriteString(ulong objectAddress, ClrType type);
    private static string GetLogDetailsString(string typeName, int index, string fieldName);
    private void LogSkippedReference(ulong toAddress, ulong fromAddress, string viaObjectTypeName, int viaIndex, string viaFieldName);
    private void LogSkippedValue(ulong objectAddress, string typeName, int index, string fieldName);
    public long get_AcceptedReferencesCount();
    public long get_SkippedReferencesCount();
    public long get_AcceptedValuesCount();
    public long get_SkippedValuesCount();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter writer);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__a(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__b(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__c(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__d(BinaryWriter writer, object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__e(BinaryWriter writer, object value);
}
public class JetBrains.dotMemory.Dal.Dumps.PatchedSymbolLocator : DefaultSymbolLocator {
    private ILogger myLogger;
    private FileSystemPath myDumpFolder;
    private IEnumerable`1<DacInfo> myDacs;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public PatchedSymbolLocator(IEnumerable`1<DacInfo> dacs, FileSystemPath dumpFolder);
    public virtual string FindBinary(string fileName, int buildTimeStamp, int imageSize, bool checkProperties);
    private string TryFindDacInTheDumpFolder(DacInfo dac);
    private static Version GetVersion(FileVersionInfo versionInfo);
    private static Version GetVersion(VersionInfo versionInfo);
    protected virtual void Trace(string format, Object[] args);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(string _);
}
internal class JetBrains.dotMemory.Dal.Dumps.ProcessDumpImporter : object {
    private static string ContentSignatureTemplate;
    private static string ourDefaultDumpSnapshotName;
    private IWorkspaceDirectoriesProvider myWorkspaceDirectoriesProvider;
    private IExternalExecutor myExternalExecutor;
    private IKey`1<DotMemoryInternalSettingsKey> myInternalSettingsKey;
    public ProcessDumpImporter(IWorkspaceDirectoriesProvider workspaceDirectoriesProvider, IExternalExecutor externalExecutor, IKey`1<DotMemoryInternalSettingsKey> internalSettingsKey);
    private static ProcessDumpImporter();
    public sealed virtual IWorkspaceInfo TryReadInfo(FileSystemPath dumpPath);
    public sealed virtual IWorkspaceIndex ReadData(FileSystemPath dumpPath, FileSystemPath targetFolder, IExecutionController executionController);
    private void CreateProfilingSessionFromProcessDumpRuntime(FileSystemPath dumpPath, int runtimeIndex, ProcessDumpRuntime runtime, JsonWorkspaceIndex workspaceIndex, FileSystemPath targetFolder, FileSystemPath tempDirectory, IExecutionController executionController);
    private static JsonWorkspaceIndex CreateWorkspaceIndex(FileSystemPath dumpPath);
}
internal static class JetBrains.dotMemory.Dal.Dumps.ProcessDumpLoader : object {
    private static UInt32 DumpSignature;
    private static int LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR;
    private static ILogger ourLogger;
    private static bool ourAttemptToLoadProperDebugEngineIsPerformed;
    private static ProcessDumpLoader();
    public static bool IsDump(FileSystemPath dumpPath);
    public static IReadOnlyList`1<ProcessDumpRuntime> LoadDump(Lifetime lifetime, FileSystemPath dumpPath, IExecutionController executionController);
    private static void CheckClrBitness(DataTarget dump, ClrInfo clrInfo);
    private static void CheckDacAvailability(DataTarget dump, ClrInfo clrInfo);
    private static string GetDacInfoString(Architecture architecture, ClrFlavor flavor, VersionInfo versionInfo);
    private static void LogClrInfo(ClrInfo info, int index);
    private static bool TryReadHeader(FileSystemPath dumpPath, DumpHeader& header);
    private static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, int dwFlags);
    private static void EnsureProperDebugEngineIsLoaded();
}
internal class JetBrains.dotMemory.Dal.Dumps.ProcessDumpRuntime : object {
    private static int LoggingThreshold;
    private ILogger myLogger;
    private ClrInfo myClrInfo;
    private UInt32 myPointerSize;
    public string SuggestedProcessName { get; }
    public UInt32 PointerSize { get; }
    public ProcessDumpRuntime(ClrInfo clrInfo, UInt32 pointerSize);
    public string get_SuggestedProcessName();
    public UInt32 get_PointerSize();
    public void ExportAsRawSnapshot(FileSystemPath targetRawSnapshotPath, IExecutionController executionController);
    private void ProcessMetadata(ClrRuntime runtime, MetadataDumper metadataDumper, DumpAssembliesProvider assembliesProvider, IExecutionController executionController);
    private void ReportKnownTypes(ClrHeap heap, ClassDumper classDumper);
    private IObjectAddressSet EnumerateAndFilterAllObjects(ClrHeap heap, IExecutionController executionController);
    private void ProcessRoots(ClrHeap heap, RootReferencesDumper rootReferencesDumper);
}
internal static class JetBrains.dotMemory.Dal.Dumps.ProcessDumpRuntimeExporterRoutine : object {
    public static string Name;
    public static bool Execute(Source source, IExecutionController executionController);
}
public class JetBrains.dotMemory.Dal.Dumps.ProcessDumpSnapshotConverterRoutine : object {
    public static string Name;
    public static bool Execute(Source source, IExecutionController executionController);
}
internal class JetBrains.dotMemory.Dal.Dumps.RootReferencesDumper : object {
    private IMetadataIndexProvider myMetadataIndexProvider;
    private IObjectAddressQueue myObjectAddressQueue;
    private IObjectAddressFilter myObjectAddressFilter;
    private ClrHeap myHeap;
    private byte myPointerSize;
    private BinaryWriter myWriter;
    private int myRootsCount;
    public int RootsCount { get; }
    public RootReferencesDumper(Lifetime lifetime, ISnapshotAccess snapshotAccess, IMetadataIndexProvider metadataIndexProvider, IObjectAddressQueue objectAddressQueue, IObjectAddressFilter objectAddressFilter, ClrHeap heap, byte pointerSize);
    public void WriteRoot(ClrRoot root);
    private static void GetKindAndFlags(ClrRoot root, GraphRootKind& kind, GraphRootFlags& flags);
    public int get_RootsCount();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(BinaryWriter writer);
}
internal interface JetBrains.dotMemory.Dal.Dumps.Snapshot.ISnapshotAccess {
    public abstract virtual BinaryWriter GetSectionWriter(Lifetime lifetime, ushort sectionType, ushort version);
}
internal class JetBrains.dotMemory.Dal.Dumps.Snapshot.LazySnapshotAccess : object {
    private object myLock;
    private FileSystemPath myIndexFilePath;
    private BinaryWriter myIndexWriter;
    private long mySectionsCountPosition;
    private UInt32 mySectionsCount;
    private bool myIndexFinalized;
    public LazySnapshotAccess(Lifetime lifetime, FileSystemPath indexFilePath);
    private void FinalizeIndex();
    public sealed virtual BinaryWriter GetSectionWriter(Lifetime lifetime, ushort sectionType, ushort version);
    [CompilerGeneratedAttribute]
private void <FinalizeIndex>b__1(BinaryWriter w);
}
internal class JetBrains.dotMemory.Dal.Dumps.Structures.ArrayTreeSet32 : object {
    private static int RegularLevelSize;
    private static int LastLevelSize;
    private bool myEnableLogging;
    private UInt32[][][][] myLevel0Array;
    private Int32[] myArrayStats;
    private int myCount;
    private static ILogger ourLogger;
    public int Count { get; }
    public ArrayTreeSet32(bool enableLogging);
    public bool Add(UInt32 value);
    public bool Contains(UInt32 value);
    public int get_Count();
    private void LogStats();
}
internal class JetBrains.dotMemory.Dal.Dumps.Structures.ChunkStack`1 : object {
    private ChunkList`1<T> myList;
    private int mySize;
    public int Size { get; }
    public int MaxSize { get; }
    public void Push(T value);
    public T Pop();
    public int get_Size();
    public int get_MaxSize();
}
internal interface JetBrains.dotMemory.Dal.Dumps.Structures.IObjectAddressFilter {
    public abstract virtual bool Contains(ulong objectAddress);
}
internal interface JetBrains.dotMemory.Dal.Dumps.Structures.IObjectAddressQueue {
    public int Count { get; }
    public abstract virtual void Enqueue(ulong objectAddress);
    public abstract virtual ulong Dequeue();
    public abstract virtual int get_Count();
}
internal interface JetBrains.dotMemory.Dal.Dumps.Structures.IObjectAddressSet {
    public int Count { get; }
    public abstract virtual bool Add(ulong objectAddress);
    public abstract virtual int get_Count();
}
internal class JetBrains.dotMemory.Dal.Dumps.Structures.ObjectAddressQueue32 : object {
    private ChunkStack`1<UInt32> myStack;
    private ArrayTreeSet32 myProcessedValues;
    public int Count { get; }
    public sealed virtual void Enqueue(ulong objectAddress);
    public sealed virtual ulong Dequeue();
    public sealed virtual int get_Count();
}
internal class JetBrains.dotMemory.Dal.Dumps.Structures.ObjectAddressQueue64 : object {
    private ChunkStack`1<ulong> myStack;
    private SimpleChunkHashSet`1<ulong> myProcessedValues;
    public int Count { get; }
    public sealed virtual void Enqueue(ulong objectAddress);
    public sealed virtual ulong Dequeue();
    public sealed virtual int get_Count();
}
internal class JetBrains.dotMemory.Dal.Dumps.Structures.ObjectAddressSet32 : object {
    private ArrayTreeSet32 myTreeSet;
    public int Count { get; }
    public sealed virtual bool Add(ulong objectAddress);
    public sealed virtual bool Contains(ulong objectAddress);
    public sealed virtual int get_Count();
}
internal class JetBrains.dotMemory.Dal.Dumps.Structures.ObjectAddressSet64 : object {
    private SimpleChunkHashSet`1<ulong> myHashSet;
    public int Count { get; }
    public sealed virtual bool Add(ulong objectAddress);
    public sealed virtual bool Contains(ulong objectAddress);
    public sealed virtual int get_Count();
}
internal class JetBrains.dotMemory.Dal.Dumps.Structures.SimpleChunkHashSet`1 : object {
    private static int HASH_MASK;
    private bool myEnableLogging;
    private ChunkArray`1<Entry<T>> myEntries;
    private ChunkArray`1<int> myHashToEntryIndex;
    private int myEntriesUsed;
    private ILogger myLogger;
    public int Count { get; }
    public int Capacity { get; }
    public SimpleChunkHashSet`1(int capacity, bool enableLogging);
    public bool Add(T element);
    public bool Contains(T element);
    private bool Contains(T element, Int32& hashCode, Int32& headIndex);
    private void Resize();
    public int get_Count();
    public int get_Capacity();
    internal static int GetInitialCapacity(int desiredCapacity);
    internal static int GetNewCapacity(int currentCapacity);
    private void LogStats(int newCapacity);
}
internal static class JetBrains.dotMemory.Dal.Dumps.TypeNameSplitter : object {
    private static ILogger ourLogger;
    public static bool SplitArray(string typeName, Int32& rank, String& componentTypeName);
    public static bool SplitType(string typeName, String& baseTypeName, IReadOnlyList`1& genericArgumentTypeNames);
    public static bool IsArray(string typeName);
    private static void LogVerbose(string message, Object[] arguments);
}
[ExtensionAttribute]
internal static class JetBrains.dotMemory.Dal.Dumps.WriterExtensions : object {
    [ExtensionAttribute]
public static void SeekBackAndWrite(BinaryWriter writer, long offset, Action`1<BinaryWriter> writeAction);
    [ExtensionAttribute]
public static void WritePlatformSpecificValue(BinaryWriter writer, ulong value, byte pointerSize);
    [ExtensionAttribute]
public static void WriteAndUpdateOnLifetimeTermination(BinaryWriter writer, Lifetime lifetime, Action`1<BinaryWriter> writeAction);
}
[SectionAttribute("12560")]
[RawSectionAttribute("12560")]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.FieldNamesReader : object {
    private BinaryReader myReader;
    public FieldNameNode Item { get; }
    public FieldNamesReader(BinaryReader reader);
    public sealed virtual FieldNameNode get_Item(SectionPointer`1<IFieldNamesCollection> offset);
}
[RawSectionAttribute("12617")]
[RawSectionAttribute("12616")]
[UsedImplicitlyAttribute]
[SectionAttribute("12617")]
[SectionAttribute("12616")]
public class JetBrains.dotMemory.Dal.FieldValuesProvider : object {
    private static long NoFields;
    private BinaryReader myValuesIndexReader;
    private BinaryReader myValuesReader;
    private UInt32 myCount;
    private long myIndexDataOffset;
    private int myIndexOffsetScale;
    public FieldValuesProvider(BinaryReader valuesIndexReader, BinaryReader valuesReader);
    public sealed virtual IReadOnlyList`1<FieldDescription> GetFieldValues(ObjectNumber objectNumber);
    public sealed virtual IEnumerable`1<FieldDescription> FetchArrayValues(ObjectNumber objectNumber, int skip, int pageSize);
    public sealed virtual bool HasFields(ObjectNumber objectNumber);
    public sealed virtual int GetLogicalFieldsCount(ObjectNumber objectNumber);
    private int ReadLogicalFieldCount(long valueOffset);
    private IReadOnlyList`1<FieldDescription> ReadFieldValues(long valueOffset);
    private IReadOnlyList`1<FieldDescription> ReadArrayFields();
    private IReadOnlyList`1<FieldDescription> ReadString();
    private IReadOnlyList`1<FieldDescription> ReadObjectFields();
}
[SectionAttribute("12550")]
public class JetBrains.dotMemory.Dal.FinalizedObjectsWriter : DataWriter {
    private static ushort Version;
    private long myObjectsApproxTotalCount;
    private int myObjectsCount;
    public int ObjectsCount { get; }
    public FinalizedObjectsWriter(BinaryWriter writer, Lifetime lifetime);
    public int get_ObjectsCount();
    public void SetObjectsApproxTotalCount(long count);
    public void Write(FinalizedObject obj);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(long headerPosition);
}
[SectionAttribute("12691")]
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.FuidCallPointsExtractor : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public FuidCallPointsExtractor(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IEnumerable`1<FuidCallPoint> GetCallPoints(FuidToCallPointIndex forFuid, IExecutionController executionController);
}
[SectionAttribute("12692")]
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.FuidToCallPointIndexDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public FuidToCallPointIndexDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IReadOnlyList`1<FuidToCallPointIndex> GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[SectionAttribute("288")]
[DefaultMemberAttribute("Item")]
[RawSectionAttribute("288")]
public class JetBrains.dotMemory.Dal.FunctionUniqueIdMetadataReader : object {
    private static int NodeSize;
    private Func`2<Lifetime, BinaryReader> myGetReader;
    private BinaryReader myEnumeratorReader;
    private BinaryReader myRandomAccesReader;
    private int myCount;
    private int myHeaderSize;
    public int Count { get; }
    public MetadataId Item { get; }
    public FunctionUniqueIdMetadataReader(Lifetime lifetime, Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IEnumerator`1<MetadataId> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual MetadataId get_Item(int index);
}
[SectionAttribute("12552")]
public class JetBrains.dotMemory.Dal.GarbageCollectionEndReader : object {
    [CompilerGeneratedAttribute]
private DateTime <Time>k__BackingField;
    public DateTime Time { get; private set; }
    public GarbageCollectionEndReader(BinaryReader reader);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Time();
    [CompilerGeneratedAttribute]
private void set_Time(DateTime value);
}
[RawSectionAttribute("12544")]
[SectionAttribute("12544")]
public class JetBrains.dotMemory.Dal.GarbageCollectionStartReader : object {
    private DateTime myTime;
    private Boolean[] myMarks;
    public DateTime Time { get; }
    public IReadOnlyList`1<bool> GenerationCollectedMarks { get; }
    public GarbageCollectionStartReader(BinaryReader reader);
    public sealed virtual DateTime get_Time();
    public sealed virtual bool IsGenerationCollected(GenerationMark generationMark);
    public sealed virtual IReadOnlyList`1<bool> get_GenerationCollectedMarks();
}
public class JetBrains.dotMemory.Dal.GC0Allocations : object {
    private ChunkArray`1<ObjectAllocationDescription> myDescriptions;
    private UInt32 myCallTreeNumber;
    public IReadOnlyList`1<ObjectAllocationDescription> AllocationDescriptions { get; }
    public UInt32 CallTreeNumber { get; }
    public GC0Allocations(ChunkArray`1<ObjectAllocationDescription> descriptions, UInt32 callTreeNumber);
    public sealed virtual IReadOnlyList`1<ObjectAllocationDescription> get_AllocationDescriptions();
    public sealed virtual UInt32 get_CallTreeNumber();
}
[UsedImplicitlyAttribute]
[SectionAttribute("12689")]
public class JetBrains.dotMemory.Dal.GC0AllocationsProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public GC0AllocationsProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IGC0Allocations GetData(IExecutionController executionController);
}
[SectionAttribute("29761")]
public class JetBrains.dotMemory.Dal.GenericArgumentsWriter : DataWriter {
    private static ushort Version;
    public GenericArgumentsWriter(BinaryWriter writer);
    public void Write(IReadOnlyCollection`1<TypeId> genericsNumbers);
}
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.GlobalObjectNumbersReader : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    private int myHeaderSize;
    private int myCount;
    private BinaryReader myReader;
    public int Count { get; }
    public GlobalObjectNumber Item { get; }
    public GlobalObjectNumbersReader(Lifetime lifetime, Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual int get_Count();
    public sealed virtual GlobalObjectNumber get_Item(int objectNumber);
    public sealed virtual IEnumerator`1<GlobalObjectNumber> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[SectionAttribute("32816")]
[UsedImplicitlyAttribute]
[RawSectionAttribute("12611")]
[RawSectionAttribute("12612")]
[SectionAttribute("32784")]
[SectionAttribute("37138")]
[SectionAttribute("12611")]
[SectionAttribute("32800")]
[SectionAttribute("37137")]
public class JetBrains.dotMemory.Dal.GraphDataProvider : object {
    public static string IndexReaderMarker;
    public static string ReferencesReaderMarker;
    private Func`2<Lifetime, BinaryReader> myGetIndexReader;
    private Func`2<Lifetime, BinaryReader> myGetReferencesReader;
    public GraphDataProvider(Func`2<Lifetime, BinaryReader> getIndexReader, Func`2<Lifetime, BinaryReader> getReferencesReader);
    public sealed virtual GraphData GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[SectionAttribute("12613")]
[RawSectionAttribute("12613")]
[SectionAttribute("32832")]
public class JetBrains.dotMemory.Dal.GraphDetailsDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public GraphDetailsDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IReadOnlyList`1<GraphReferenceDetails> GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.GraphEnterTimeDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetTimeReader;
    public GraphEnterTimeDataProvider(Func`2<Lifetime, BinaryReader> getTimeReader);
    public sealed virtual IEnterTimeCollection GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.GraphExitTimeDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetTimeReader;
    public GraphExitTimeDataProvider(Func`2<Lifetime, BinaryReader> getTimeReader);
    public sealed virtual IExitTimeCollection GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[SectionAttribute("32784")]
[SectionAttribute("12611")]
public class JetBrains.dotMemory.Dal.GraphIndexDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetIndexReader;
    public GraphIndexDataProvider(Func`2<Lifetime, BinaryReader> getIndexReader);
    public sealed virtual ChunkArray`1<int> GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[RawSectionAttribute("12611")]
[SectionAttribute("12611")]
[SectionAttribute("32784")]
[SectionAttribute("37137")]
internal class JetBrains.dotMemory.Dal.GraphIndexReader : object {
    private static int SizeofHeader;
    private BinaryReader myReader;
    private int myEntriesCount;
    public int EntriesCount { get; }
    public GraphIndexReader(BinaryReader reader);
    public sealed virtual int GetFirstReferenceIndex(int objectIndex);
    public sealed virtual int get_EntriesCount();
    private void SeekTo(int index);
    [ConditionalAttribute("DEBUG")]
private void ThrowIfOutOfRange(int index);
    private int ReadData();
}
[SectionAttribute("37137")]
[SectionAttribute("12611")]
[SectionAttribute("32784")]
public class JetBrains.dotMemory.Dal.GraphIndexWriter : DataWriter {
    private static ushort Version;
    public GraphIndexWriter(BinaryWriter writer, SectionType sectionType);
    public void Write(IReadOnlyCollection`1<int> indicies);
}
[UsedImplicitlyAttribute]
[SectionAttribute("12613")]
[SectionAttribute("32832")]
[RawSectionAttribute("12613")]
internal class JetBrains.dotMemory.Dal.GraphReferenceDetailsReader : object {
    private static int SizeofHeader;
    private static int SizeofNode;
    private BinaryReader myReader;
    private int myEntriesCount;
    public int EntriesCount { get; }
    public GraphReferenceDetailsReader(BinaryReader reader);
    public sealed virtual GraphReferenceDetails GetReferenceDetails(int referenceIndex);
    public sealed virtual int get_EntriesCount();
    [ConditionalAttribute("DEBUG")]
private void ThrowIfOutOfRange(int index);
}
[SectionAttribute("32832")]
[SectionAttribute("12613")]
public class JetBrains.dotMemory.Dal.GraphReferenceDetailsWriter : DataWriter {
    private static ushort Version;
    private int myCount;
    public GraphReferenceDetailsWriter(BinaryWriter writer, bool direct, Lifetime lifetime);
    public void Write(int arrayIndex, ulong fieldSectionPointer);
    [CompilerGeneratedAttribute]
private long <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(long headerPosition);
}
[SectionAttribute("37143")]
public class JetBrains.dotMemory.Dal.GraphReferenceIdTreeWriter : DataWriter {
    private static ushort Version;
    public GraphReferenceIdTreeWriter(BinaryWriter writer);
    public void Write(IReadOnlyCollection`1<GraphReferenceId> references);
}
[SectionAttribute("32800")]
[SectionAttribute("37138")]
[SectionAttribute("32832")]
public class JetBrains.dotMemory.Dal.GraphReferencesWriter : DataWriter {
    private static ushort Version;
    public GraphReferencesWriter(BinaryWriter writer, SectionType sectionType);
    public void Write(IReadOnlyCollection`1<ObjectNumber> references);
}
[UsedImplicitlyAttribute]
[SectionAttribute("32800")]
[SectionAttribute("32816")]
[SectionAttribute("37138")]
[RawSectionAttribute("12612")]
internal class JetBrains.dotMemory.Dal.GraphReferenceTargetsReader : object {
    private static int SizeofHeader;
    private BinaryReader myReader;
    private int myEntriesCount;
    public int EntriesCount { get; }
    public GraphReferenceTargetsReader(BinaryReader reader);
    public sealed virtual ObjectNumber GetObjectNumber(int referenceIndex);
    public sealed virtual ObjectNumber[] GetObjectNumbers(int referenceIndex, int count);
    public sealed virtual int get_EntriesCount();
    private void SeekTo(int index);
    private int ReadData();
    [ConditionalAttribute("DEBUG")]
private void ThrowIfOutOfRange(int index, int count);
}
internal class JetBrains.dotMemory.Dal.GraphRoot : object {
    private ObjectNumber myObjectNumber;
    private GraphRootKind myKind;
    private GraphRootFlags myFlag;
    private ulong myData;
    public ObjectNumber ObjectNumber { get; }
    public GraphRootKind Kind { get; }
    public GraphRootFlags Flag { get; }
    public ulong Data { get; }
    public GraphRoot(ObjectNumber objectNumber, GraphRootKind kind, GraphRootFlags flag, ulong data);
    public GraphRoot(ObjectNumber objectNumber, byte kind, byte flag, ulong data);
    public sealed virtual ObjectNumber get_ObjectNumber();
    public sealed virtual GraphRootKind get_Kind();
    public sealed virtual GraphRootFlags get_Flag();
    public sealed virtual ulong get_Data();
    public sealed virtual bool Equals(IGraphRoot other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(IGraphRoot other);
}
internal class JetBrains.dotMemory.Dal.GraphRootCollection : ChunkArray`1<IGraphRoot> {
    public GraphRootCollection(int length);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.GraphRootCollectionDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public GraphRootCollectionDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    private sealed virtual override IGraphRootCollection JetBrains.dotMemory.Core.IEntityProvider<JetBrains.dotMemory.Dal.Interface.IGraphRootCollection>.GetData(IExecutionController executionController);
    private sealed virtual override IGraphRootTargetsCollection JetBrains.dotMemory.Core.IEntityProvider<JetBrains.dotMemory.Dal.Interface.IGraphRootTargetsCollection>.GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotMemory.Dal.GraphRootCollectionReader : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    private int mySizeofNode;
    private BinaryReader myEnumeratorReader;
    private BinaryReader myRandomAccessReader;
    private long myHeaderSize;
    private int myCount;
    public IGraphRoot Item { get; }
    public int Count { get; }
    public GraphRootCollectionReader(Func`2<Lifetime, BinaryReader> getReader, Lifetime lifetime);
    private static IGraphRoot ReadNodeFromCurrentPosition(BinaryReader reader);
    public sealed virtual IGraphRoot get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<IGraphRoot> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class JetBrains.dotMemory.Dal.GraphRootTargetsCollection : ChunkArray`1<ObjectNumber> {
    public GraphRootTargetsCollection(int length);
    public GraphRootTargetsCollection(IReadOnlyCollection`1<ObjectNumber> source);
}
[SectionAttribute("37139")]
[SectionAttribute("37140")]
public class JetBrains.dotMemory.Dal.GraphTraverseTimeWriter : DataWriter {
    private static ushort Version;
    public GraphTraverseTimeWriter(BinaryWriter writer, SectionType sectionType);
    public void Write(IReadOnlyCollection`1<int> times);
}
public class JetBrains.dotMemory.Dal.HashCollection : ChunkArray`1<UInt32> {
    public HashCollection(int length);
}
[SectionAttribute("37153")]
[SectionAttribute("37144")]
public class JetBrains.dotMemory.Dal.HashDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public HashDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IHashCollection GetData(IExecutionController executionController);
}
[SectionAttribute("37144")]
[SectionAttribute("37153")]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.HashReader : object {
    private BinaryReader myBinaryReader;
    private long myHeaderSize;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public UInt32 Item { get; }
    public HashReader(BinaryReader binaryReader);
    public sealed virtual IEnumerator`1<UInt32> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual UInt32 get_Item(int index);
}
public class JetBrains.dotMemory.Dal.HeapsCollection : ChunkArray`1<HeapDescription> {
    [CompilerGeneratedAttribute]
private ulong <PrivateBytesSize>k__BackingField;
    public ulong PrivateBytesSize { get; private set; }
    public HeapsCollection(ulong privateBytesSize, int length);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_PrivateBytesSize();
    [CompilerGeneratedAttribute]
private void set_PrivateBytesSize(ulong value);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.HeapsDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public HeapsDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IHeapsCollection GetData(IExecutionController executionController);
}
[SectionAttribute("37120")]
public class JetBrains.dotMemory.Dal.HeapsWriter : DataWriter {
    private static ushort Version;
    private BinaryWriter myWriter;
    public HeapsWriter(BinaryWriter writer);
    public void Write(ICollection`1<RawHeap> heaps, ulong privateBytes);
}
public interface JetBrains.dotMemory.Dal.IProfilerCore {
    public IHostProfile Host { get; }
    public ICoreEvents Events { get; }
    public abstract virtual IHostProfile get_Host();
    public abstract virtual ICoreEvents get_Events();
}
internal class JetBrains.dotMemory.Dal.ObjectAddressCollection : ChunkArray`1<ulong> {
    public ObjectAddressCollection(int length);
}
[UsedImplicitlyAttribute]
[RawSectionAttribute("12608")]
internal class JetBrains.dotMemory.Dal.ObjectAddressCollectionDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectAddressCollectionDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectAddressCollection GetData(IExecutionController executionController);
}
[DefaultMemberAttribute("Item")]
[RawSectionAttribute("12608")]
internal class JetBrains.dotMemory.Dal.ObjectAddressCollectionReader : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    private BinaryReader myRandomAccessReader;
    private PtrReader myPtrReader;
    private int myObjectsCount;
    private int mySizeofHeader;
    private BinaryReader myEnumeratorReader;
    public int Count { get; }
    public ulong Item { get; }
    public ObjectAddressCollectionReader(Func`2<Lifetime, BinaryReader> getReader, Lifetime lifetime);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<ulong> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual ulong get_Item(int index);
}
[SectionAttribute("36928")]
public class JetBrains.dotMemory.Dal.ObjectAllocationGCNumberWriter : DataWriter {
    private static ushort Version;
    public ObjectAllocationGCNumberWriter(BinaryWriter writer);
    public void Write(IReadOnlyCollection`1<GCNumber> gcNumbers);
}
[SectionAttribute("36944")]
public class JetBrains.dotMemory.Dal.ObjectAllocationPtrWriter : DataWriter {
    private static ushort Version;
    private PtrWriter myPtrWriter;
    public ObjectAllocationPtrWriter(PtrSize ptrSize, BinaryWriter writer);
    public void Write(IReadOnlyCollection`1<ulong> allocationAddresses);
}
internal class JetBrains.dotMemory.Dal.ObjectArrayDimensions : ChunkArray`1<ArrayDimensionInfo> {
    public ObjectArrayDimensions(int length);
}
[UsedImplicitlyAttribute]
[RawSectionAttribute("12615")]
internal class JetBrains.dotMemory.Dal.ObjectArrayDimensionsDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectArrayDimensionsDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectArrayDimensions GetData(IExecutionController executionController);
}
[RawSectionAttribute("12615")]
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotMemory.Dal.ObjectArrayDimensionsReader : object {
    private BinaryReader myReader;
    private int myObjectsCount;
    private long myHeaderSize;
    public int Count { get; }
    public ArrayDimensionInfo Item { get; }
    public ObjectArrayDimensionsReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<ArrayDimensionInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual ArrayDimensionInfo get_Item(int index);
}
internal class JetBrains.dotMemory.Dal.ObjectArrayInfoIndex : ChunkArray`1<int> {
    public ObjectArrayInfoIndex(int length);
}
[RawSectionAttribute("12614")]
internal class JetBrains.dotMemory.Dal.ObjectArrayInfoIndexDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectArrayInfoIndexDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectArrayInfoIndex GetData(IExecutionController executionController);
}
[RawSectionAttribute("12614")]
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotMemory.Dal.ObjectArrayInfoIndexReader : object {
    private static int NodeSize;
    private BinaryReader myReader;
    private int myObjectsCount;
    private long myHeaderSize;
    public int Count { get; }
    public int Item { get; }
    public ObjectArrayInfoIndexReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual int get_Item(int index);
}
[SectionAttribute("36880")]
public class JetBrains.dotMemory.Dal.ObjectClassWriter : DataWriter {
    private static ushort Version;
    private int myCount;
    public ObjectClassWriter(BinaryWriter writer, Lifetime lifetime);
    public void Write(TypeId typeNumber);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(long headerPosition);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.ObjectGlobalNumberDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectGlobalNumberDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual GlobalObjectNumbersCollection GetData(IExecutionController executionController);
}
[SectionAttribute("36912")]
public class JetBrains.dotMemory.Dal.ObjectGlobalNumberWriter : DataWriter {
    private static ushort Version;
    public ObjectGlobalNumberWriter(BinaryWriter writer);
    public void Write(IReadOnlyCollection`1<GlobalObjectNumber> globalObjectNumbers);
}
[SectionAttribute("37153")]
[SectionAttribute("37144")]
public class JetBrains.dotMemory.Dal.ObjectHashWriter : DataWriter {
    private static int Version;
    public ObjectHashWriter(BinaryWriter writer, SectionType sectionType);
    public void Write(IReadOnlyCollection`1<UInt32> hashCodes);
}
[UsedImplicitlyAttribute]
[SectionAttribute("37136")]
public class JetBrains.dotMemory.Dal.ObjectNumberTreeDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectNumberTreeDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectNumberTreeParentCollection GetData(IExecutionController executionController);
}
public class JetBrains.dotMemory.Dal.ObjectNumberTreeParentCollection : ChunkArray`1<ObjectNumber> {
    public ObjectNumberTreeParentCollection(int length);
    public ObjectNumberTreeParentCollection(IReadOnlyCollection`1<ObjectNumber> source);
}
[DefaultMemberAttribute("Item")]
[UsedImplicitlyAttribute]
[SectionAttribute("37136")]
public class JetBrains.dotMemory.Dal.ObjectNumberTreeReader : object {
    private BinaryReader myReader;
    private long myHeaderSize;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public ObjectNumber Item { get; }
    public ObjectNumberTreeReader(BinaryReader reader, Lifetime lifetime);
    public sealed virtual IEnumerator`1<ObjectNumber> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual ObjectNumber get_Item(int index);
}
[SectionAttribute("37136")]
public class JetBrains.dotMemory.Dal.ObjectNumberTreeWriter : DataWriter {
    private static ushort Version;
    public ObjectNumberTreeWriter(BinaryWriter writer, SectionType sectionType);
    public void Write(IReadOnlyCollection`1<ObjectNumber> tree);
}
internal class JetBrains.dotMemory.Dal.ObjectRetainedSizeCollection : ChunkArray`1<ulong> {
    public ObjectRetainedSizeCollection(int length);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.ObjectRetainedSizeCollectionDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectRetainedSizeCollectionDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectRetainedSizeCollection GetData(IExecutionController executionController);
}
[DefaultMemberAttribute("Item")]
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.ObjectRetainedSizeCollectionReader : object {
    private static int SizeOfItem;
    private BinaryReader myBinaryReader;
    private int myCount;
    private long myHeaderSize;
    public int Count { get; }
    public ulong Item { get; }
    public ObjectRetainedSizeCollectionReader(BinaryReader binaryReader);
    public sealed virtual IEnumerator`1<ulong> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual ulong get_Item(int index);
}
public class JetBrains.dotMemory.Dal.ObjectRootReferencesCollection : ChunkArray`1<RootReferencesDescriptor> {
    public ObjectRootReferencesCollection(int length);
}
public class JetBrains.dotMemory.Dal.ObjectRootReferencesDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectRootReferencesDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectRootReferencesCollection GetData(IExecutionController executionController);
}
[SectionAttribute("29744")]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.ObjectRootReferencesReader : object {
    private BinaryReader myBinaryReader;
    private static int ourNodeSize;
    private long myHeaderSize;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public RootReferencesDescriptor Item { get; }
    public ObjectRootReferencesReader(BinaryReader binaryReader);
    private static ObjectRootReferencesReader();
    public sealed virtual IEnumerator`1<RootReferencesDescriptor> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual RootReferencesDescriptor get_Item(int index);
}
[SectionAttribute("36960")]
public class JetBrains.dotMemory.Dal.ObjectRootReferencesWriter : DataWriter {
    private static ushort Version;
    private BinaryWriter myWriter;
    public ObjectRootReferencesWriter(BinaryWriter writer, int objectCount);
    public void Write(int rootsIndex, int rootsCount);
}
internal class JetBrains.dotMemory.Dal.ObjectSizeCollection : ChunkArray`1<ulong> {
    public ObjectSizeCollection(int length);
}
[RawSectionAttribute("12609")]
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.ObjectSizeCollectionDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectSizeCollectionDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectSizeCollection GetData(IExecutionController executionController);
}
[RawSectionAttribute("12609")]
[DefaultMemberAttribute("Item")]
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.ObjectSizeCollectionReader : object {
    private static int NodeSize;
    private BinaryReader myReader;
    private int myObjectsCount;
    private long myHeaderSize;
    public int Count { get; }
    public ulong Item { get; }
    public ObjectSizeCollectionReader(BinaryReader reader);
    public sealed virtual IEnumerator`1<ulong> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual ulong get_Item(int index);
}
internal class JetBrains.dotMemory.Dal.ObjectTypeCollection : ChunkArray`1<TypeId> {
    public ObjectTypeCollection(int length);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.ObjectTypeCollectionDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ObjectTypeCollectionDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IObjectTypeCollection GetData(IExecutionController executionController);
}
[DefaultMemberAttribute("Item")]
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.ObjectTypeCollectionReader : object {
    private static int NodeSize;
    private Func`2<Lifetime, BinaryReader> myGetReader;
    private BinaryReader myEnumeratorReader;
    private BinaryReader myRandomAccesReader;
    private int myCount;
    private int myHeaderSize;
    public int Count { get; }
    public TypeId Item { get; }
    public ObjectTypeCollectionReader(Func`2<Lifetime, BinaryReader> getReader, Lifetime lifetime);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<TypeId> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual TypeId get_Item(int index);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.ProfilerDal : object {
    private static string DebugId;
    private ILogger myLogger;
    private ReadonlyToken myReadonlyToken;
    private CollectionEvents`1<ActiveProfilingSessionDescriptor> myProfilingSessionDescriptors;
    private IProperty`1<RunningMode> myRunningMode;
    private ProfilingState myProfilingState;
    private IHostManager myHostManager;
    private Lifetime myLifetime;
    private IThreading myMainThread;
    private ProfileConfiguration myProfileConfiguration;
    private IAlertUser myAlertUser;
    private object mySnapshotDescriptorPipesAccess;
    private Dictionary`2<SnapshotId, Action`2<SnapshotIdentity, FileSystemPath>> mySnapshotDescriptorPipes;
    private FileSystemPath myProfilingSessionsRootPath;
    private object myAlertsAccess;
    private ListEvents`1<HostAlertEventArgs> myAlerts;
    private IHostProfile myHostProfile;
    private ICoreEvents myEvents;
    private SimpleCommand myKillAllProcessesCommand;
    private Property`1<ICommand> myKillAllProcessesCommandProperty;
    private IDotMemoryGlobalState myDotMemoryGlobalState;
    private ICoreLogsHandler myCoreLogsHandler;
    [CompilerGeneratedAttribute]
private static Func`2<CoreCloseWay, bool> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Action`1<ConnectingEventArgs> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<CoreCloseWay, bool> CS$<>9__CachedAnonymousMethodDelegate21;
    public IReadonlyListEvents`1<HostAlertEventArgs> Alerts { get; }
    public IProperty`1<ICommand> KillAllProcessesCommand { get; }
    public IHostProfile Host { get; }
    public ICoreEvents Events { get; }
    public ProfilerDal(Lifetime lifetime, CollectionEvents`1<ActiveProfilingSessionDescriptor> profilingSessionDescriptorsCollection, IProperty`1<RunningMode> runningMode, ProfilingState profilingState, IHostManager hostManager, IThreading mainThread, ProfileConfiguration profileConfiguration, FileSystemPath workspaceRootDirectory, IAlertUser alertUser, IDotMemoryGlobalState dotMemoryGlobalState, ICoreLogsHandler coreLogsHandler);
    private static ProfilerDal();
    public sealed virtual void Start(StartingProfilerStatus startingStatus);
    private void Start(Lifetime lifetime, IHostProfileSubscription hostProfileSubscription);
    private void CreateProfilingSession(Lifetime lifetime, IHostProfileSubscription hostProfileSubscription, ICoreHostProfile core, Lifetime connectionLifetime);
    private ListEvents`1<RawSnapshotProvider> CreateSnapshotProvidersCollection(Lifetime lifetime, SnapshotProgressHandler snapshotProgressHandler);
    public sealed virtual void Stop();
    public sealed virtual IReadonlyListEvents`1<HostAlertEventArgs> get_Alerts();
    private void Launcher_OnSnapshotDone(ResponsibilityEventArgs`1<SnapshotDoneEventArgs> responsibilityArgs);
    private void Launcher_OnLogDone(ResponsibilityEventArgs`1<LogDoneEventArgs> responsibilityArgs);
    public sealed virtual bool ShowYesNo(string id, string message, bool defaultButton);
    public sealed virtual IProperty`1<ICommand> get_KillAllProcessesCommand();
    public sealed virtual IHostProfile get_Host();
    public sealed virtual ICoreEvents get_Events();
    [CompilerGeneratedAttribute]
private void <Start>b__5();
    [CompilerGeneratedAttribute]
private void <Start>b__6(HostAlertEventArgs args);
    [CompilerGeneratedAttribute]
private static bool <Start>b__8(CoreCloseWay _);
    [CompilerGeneratedAttribute]
private static void <Start>b__9(ConnectingEventArgs args);
    [CompilerGeneratedAttribute]
private void <Stop>b__1d();
    [CompilerGeneratedAttribute]
private static bool <Stop>b__1e(CoreCloseWay _);
    [CompilerGeneratedAttribute]
private bool <Stop>b__1f();
    [CompilerGeneratedAttribute]
private void <Stop>b__20();
}
public class JetBrains.dotMemory.Dal.ProfilingCore : object {
    private IMemoryCoreHostProfile myCore;
    private ICoreEvents myEvents;
    private Lifetime mySessionLifetime;
    public IMemoryCoreHostProfile Core { get; }
    public ICoreEvents Events { get; }
    public Lifetime Lifetime { get; }
    public ProfilingCore(IMemoryCoreHostProfile core, ICoreEvents events, Lifetime sessionLifetime);
    public sealed virtual IMemoryCoreHostProfile get_Core();
    public sealed virtual ICoreEvents get_Events();
    public sealed virtual Lifetime get_Lifetime();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.ProfilingSessionCommands : object {
    private static ReadonlyToken ourReadonlyToken;
    private SimpleCommand myGetSnapshotCommand;
    private DelegateCommand mySwitchAllocationState;
    private SimpleCommand myForceGcCommand;
    private SimpleCommand myDetachCommand;
    private SimpleCommand myKillProcessCommand;
    private IProperty`1<bool> myIsProfiling;
    private IProperty`1<bool> myIsProfilerTakingSnapshot;
    private IGlobalProfilingController myGlobalProfilingController;
    private IProperty`1<IAllocationDataState> myAllocationDataState;
    private object myAllocationStateAccess;
    private PropertyChangedEventHandler PropertyChanged;
    public IProperty`1<bool> IsProfilerTakingSnapshot { get; }
    public IProperty`1<IAllocationDataState> AllocationState { get; }
    public ICommand SwitchAllocationState { get; }
    public IProperty`1<bool> IsProfiling { get; }
    public ICommand GetSnapshotCommand { get; }
    public ICommand ForceGcCommand { get; }
    public ICommand DetachCommand { get; }
    public ICommand KillProcessCommand { get; }
    public IProperty`1<ICommand> KillAllProcessesCommand { get; }
    public ProfilingSessionCommands(IMemoryCoreHostProfile core, IGlobalProfilingController globalProfilingController, Lifetime lifetime);
    private static ProfilingSessionCommands();
    public sealed virtual IProperty`1<bool> get_IsProfilerTakingSnapshot();
    public sealed virtual IProperty`1<IAllocationDataState> get_AllocationState();
    public sealed virtual ICommand get_SwitchAllocationState();
    public sealed virtual IProperty`1<bool> get_IsProfiling();
    public sealed virtual ICommand get_GetSnapshotCommand();
    public sealed virtual ICommand get_ForceGcCommand();
    public sealed virtual ICommand get_DetachCommand();
    public sealed virtual ICommand get_KillProcessCommand();
    public sealed virtual IProperty`1<ICommand> get_KillAllProcessesCommand();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__5();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7(PropertyChangedEventArgs`1<SwitchCoreHostProfileStates> args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.ProfilingSessionController : object {
    private IProfilingSessionCommands mySessionCommands;
    private IAlertUser myAlertUser;
    private object myAlertsAccess;
    private ListEvents`1<CoreAlertEventArgs> myAlerts;
    private PropertyChangedEventHandler PropertyChanged;
    public IListEvents`1<CoreAlertEventArgs> Alerts { get; }
    public IProfilingSessionCommands Commands { get; }
    public ProfilingSessionController(IMemoryCoreHostProfile core, IProfilingSessionCommands sessionCommands, IAlertUser alertUser, Lifetime lifetime);
    public sealed virtual IListEvents`1<CoreAlertEventArgs> get_Alerts();
    public sealed virtual IProfilingSessionCommands get_Commands();
    private void SetupErrorHandling(ISignal`1<CoreAlertEventArgs> errorSignal, FileSystemPath executableFilePath, Lifetime lifetime);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.dotMemory.Dal.ProfilingSessionDescriptor : object {
    private ReadonlyToken myReadonlyToken;
    private ProfilingSessionId mySessionId;
    private int myProcessId;
    private FileSystemPath myExecutablePath;
    private ListEvents`1<SnapshotProvider> mySnapshotProviders;
    private IDataProvider`1<bool> myIsActive;
    private IProfilingCore myProfilingCore;
    private ListEvents`1<SnapshotDescriptor> mySnapshotDescriptors;
    public ProfilingSessionId SessionId { get; }
    public int ProcessId { get; }
    public FileSystemPath ExecutablePath { get; }
    public ListEvents`1<SnapshotProvider> SnapshotProviders { get; }
    public IDataProvider`1<bool> IsActive { get; }
    public IProfilingCore ProfilingCore { get; }
    public ListEvents`1<SnapshotDescriptor> SnapshotDescriptors { get; }
    public ProfilingSessionDescriptor(Lifetime lifetime, ProfilingSessionId sessionId, int processId, FileSystemPath executablePath, ListEvents`1<SnapshotProvider> snapshotProviders, IDataProvider`1<bool> isActive, IProfilingCore profilingCore);
    public sealed virtual ProfilingSessionId get_SessionId();
    public sealed virtual int get_ProcessId();
    public sealed virtual FileSystemPath get_ExecutablePath();
    public sealed virtual ListEvents`1<SnapshotProvider> get_SnapshotProviders();
    public sealed virtual IDataProvider`1<bool> get_IsActive();
    public sealed virtual IProfilingCore get_ProfilingCore();
    public sealed virtual ListEvents`1<SnapshotDescriptor> get_SnapshotDescriptors();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(Lifetime snapshotLifetime, SnapshotProvider snapshotProvider);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(SnapshotDescriptor snapshotDescriptor);
}
public class JetBrains.dotMemory.Dal.PtrReader : object {
    private PtrSize mySize;
    public PtrSize SizeOf { get; }
    public PtrReader(PtrSize size);
    public PtrSize get_SizeOf();
    public ulong Read(BinaryReader reader);
}
public class JetBrains.dotMemory.Dal.PtrWriter : object {
    public PtrSize SizeOf;
    public PtrWriter(PtrSize sizeOf);
    public void Write(ulong value, BinaryWriter writer);
}
public interface JetBrains.dotMemory.Dal.Raw.IRawSnapshotDataAccessor {
    [NotNullAttribute]
public IReadOnlyList`1<RawSectionGroup> SectionGroups { get; }
    public abstract virtual IReadOnlyList`1<RawSectionGroup> get_SectionGroups();
    [NotNullAttribute]
public abstract virtual IEnvironmentSection GetEnvironment(Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<bool> GetGenerationCollectedMarks(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<RawHeap> GetBeforeGCHeaps(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<RawMemoryBlock> GetSurvivedMemoryBlocks(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<RawMemoryBlock> GetMovedMemoryBlocks(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<RawFinalizedObject> GetFinalizedObjects(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<ObjectAllocationDescription> GetAllocationsSurvivedGC0(RawSectionGroup sectionGroup, IExecutionController progressIndicator);
}
public interface JetBrains.dotMemory.Dal.Raw.ISupportMultiFileRawSnapshot {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<MultiFileSnapshotSectionDescriptor> GetSectionDescriptors(ushort sectionType);
    [NotNullAttribute]
public abstract virtual string GetSatelliteFileName(MultiFileSnapshotSectionDescriptor descriptor);
}
public class JetBrains.dotMemory.Dal.Raw.RawSnapshotDataAccessor : object {
    private RawSnapshotProsector myRawSnapshotProsector;
    [NotNullAttribute]
public IReadOnlyList`1<RawSectionGroup> SectionGroups { get; }
    public RawSnapshotDataAccessor(RawSnapshotProsector rawSnapshotProsector);
    public RawSnapshotDataAccessor(FileSystemPath indexFilePath);
    public sealed virtual IReadOnlyList`1<RawSectionGroup> get_SectionGroups();
    [NotNullAttribute]
public sealed virtual IEnvironmentSection GetEnvironment(Lifetime lifetime);
    [NotNullAttribute]
public sealed virtual IReadOnlyList`1<bool> GetGenerationCollectedMarks(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public sealed virtual IReadOnlyCollection`1<RawHeap> GetBeforeGCHeaps(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public sealed virtual IReadOnlyCollection`1<RawMemoryBlock> GetSurvivedMemoryBlocks(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public sealed virtual IReadOnlyCollection`1<RawMemoryBlock> GetMovedMemoryBlocks(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public sealed virtual IReadOnlyCollection`1<RawFinalizedObject> GetFinalizedObjects(RawSectionGroup sectionGroup, Lifetime lifetime);
    [NotNullAttribute]
public sealed virtual IReadOnlyList`1<ObjectAllocationDescription> GetAllocationsSurvivedGC0(RawSectionGroup sectionGroup, IExecutionController progressIndicator);
    [NotNullAttribute]
public sealed virtual IEnumerable`1<MultiFileSnapshotSectionDescriptor> GetSectionDescriptors(ushort sectionType);
    [NotNullAttribute]
public sealed virtual string GetSatelliteFileName(MultiFileSnapshotSectionDescriptor descriptor);
}
public class JetBrains.dotMemory.Dal.Raw.Readers.RawFinalizedObject : ValueType {
    public static byte NormalFlag;
    public static byte CriticalFlag;
    public ulong Address;
    public long ClassOffset;
    public RawFinalizedObject(ulong address, long classOffset, UInt32 flags);
}
[RawSectionAttribute("12550")]
public class JetBrains.dotMemory.Dal.Raw.Readers.RawFinalizedObjectsReader : object {
    private BinaryReader myBinReader;
    private PtrReader myPtrReader;
    private int myObjectsCount;
    private long mySizeOfHeader;
    public int Count { get; }
    public RawFinalizedObjectsReader(BinaryReader binReader);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<RawFinalizedObject> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Dal.Raw.SupportMultiFileRawSnapshotExtension : object {
    [NotNullAttribute]
[ExtensionAttribute]
public static MultiFileSnapshotSectionDescriptor GetSectionDescriptor(ISupportMultiFileRawSnapshot this, ushort sectionType);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetSatelliteFileName(ISupportMultiFileRawSnapshot this, ushort sectionType);
}
public class JetBrains.dotMemory.Dal.Raw.Translation.Memoryblock : object {
    private ISkippingStrategy mySkippingStrategy;
    private int myLevelsCount;
    private MemoryBlockNode myStartNode;
    private MemoryBlockNode[] myEndNodes;
    private UInt64[] myEndAddresses;
    private ulong myStartAddress;
    public ulong StartAddress { get; }
    public int LevelsCount { get; }
    public IEnumerable`1<ObjectAddressDescription> Objects { get; }
    public bool IsEmpty { get; }
    private ulong RealStart { get; }
    private Memoryblock(int levelsCount, ISkippingStrategy skippingStrategy);
    public ulong get_StartAddress();
    public int get_LevelsCount();
    public IEnumerable`1<ObjectAddressDescription> get_Objects();
    public bool get_IsEmpty();
    private ulong get_RealStart();
    public IEnumerable`1<ObjectAddressDescription> GetObjectsOnLevel(int level);
    public void GetObjectNumbers(IEnumerable`1<T> objects, Func`2<T, ulong> addressGetter, IDictionary`2<ObjectNumber, T> numberedObjs);
    public void InsertObject(ObjectNumber objNumber, ulong objAddress);
    public void InsertObjectsIfAbsent(IEnumerable`1<T> objects, Func`2<T, ulong> addressGetter, Func`2<T, ObjectNumber> numberGetter, IDictionary`2<ObjectNumber, T> numberedObjs);
    public void Move(ulong shift, bool positive);
    public void Concat(Memoryblock rightBlock);
    public void SplitAt(ulong address, Memoryblock result);
}
[ObsoleteAttribute("Use Memoryblock instead. This one for test purposes only and will be removed soon.")]
public class JetBrains.dotMemory.Dal.Raw.Translation.Memoryblock0 : object {
    private ISkippingStrategy mySkippingStrategy;
    private int myLevelsCount;
    private MemoryBlockNode myStartNode;
    private MemoryBlockNode[] myEndNodes;
    private UInt64[] myEndAddresses;
    private ulong myStartAddress;
    public ulong StartAddress { get; }
    public int LevelsCount { get; }
    public IEnumerable`1<ObjectAddressDescription> Objects { get; }
    public bool IsEmpty { get; }
    private ulong RealStart { get; }
    private Memoryblock0(int levelsCount, ISkippingStrategy skippingStrategy);
    public ulong get_StartAddress();
    public int get_LevelsCount();
    public IEnumerable`1<ObjectAddressDescription> get_Objects();
    public bool get_IsEmpty();
    private ulong get_RealStart();
    public IEnumerable`1<ObjectAddressDescription> GetObjectsOnLevel(int level);
    public void GetObjectNumbers(IEnumerable`1<T> objects, Func`2<T, ulong> addressGetter, IDictionary`2<ObjectNumber, T> numberedObjs);
    public void InsertObject(ObjectNumber objNumber, ulong objAddress);
    public void InsertObjectsIfAbsent(IEnumerable`1<T> objects, Func`2<T, ulong> addressGetter, Func`2<T, ObjectNumber> numberGetter, IDictionary`2<ObjectNumber, T> numberedObjs);
    public void Move(ulong shift, bool positive);
    public void Concat(Memoryblock0 rightBlock);
    public void SplitAt(ulong address, Memoryblock0 result);
}
public class JetBrains.dotMemory.Dal.Raw.Translation.MemoryBlockNode : object {
    private ObjectNumber myObjectNumber;
    [CompilerGeneratedAttribute]
private UInt64[] <RelativeAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryBlockNode[] <Next>k__BackingField;
    public ObjectNumber ObjectNumber { get; }
    public UInt64[] RelativeAddress { get; private set; }
    public MemoryBlockNode[] Next { get; private set; }
    public MemoryBlockNode(ObjectNumber objectNumber, int levelsCount);
    public ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
public UInt64[] get_RelativeAddress();
    [CompilerGeneratedAttribute]
private void set_RelativeAddress(UInt64[] value);
    [CompilerGeneratedAttribute]
public MemoryBlockNode[] get_Next();
    [CompilerGeneratedAttribute]
private void set_Next(MemoryBlockNode[] value);
}
public class JetBrains.dotMemory.Dal.Raw.Translation.ObjectAddressDescription : ValueType {
    public ObjectNumber ObjectNumber;
    public ulong Address;
    public ObjectAddressDescription(ObjectNumber objectNumber, ulong address);
}
public class JetBrains.dotMemory.Dal.Raw.Translation.ObjectAddressTranslationResult : object {
    private ChunkArray`1<GlobalObjectNumber> myGlobalObjectNumbers;
    private ChunkArray`1<GCNumber> myAllocationGCNumbers;
    private ChunkArray`1<ulong> myAllocationPtrs;
    public IReadOnlyList`1<GlobalObjectNumber> GlobalObjectNumbers { get; }
    public IReadOnlyList`1<GCNumber> AllocationGCNumbers { get; }
    public IReadOnlyList`1<ulong> AllocationPtrs { get; }
    public int Count { get; }
    internal ObjectAddressTranslationResult(int objectsCount);
    internal void AddObject(ObjectAddressDescription obj, int objGlobalNumber, int gcNumber);
    internal void CopyFrom(ObjectAddressTranslationResult other, ObjectNumber otherObjNumber, ObjectNumber objNumber);
    public IReadOnlyList`1<GlobalObjectNumber> get_GlobalObjectNumbers();
    public IReadOnlyList`1<GCNumber> get_AllocationGCNumbers();
    public IReadOnlyList`1<ulong> get_AllocationPtrs();
    public int get_Count();
}
public class JetBrains.dotMemory.Dal.Raw.Translation.ObjectAddressTranslationScope : object {
    private ObjectAddressTranslator myParent;
    private IRawSnapshotDataAccessor myRawSnapshotAccessor;
    private Manipulator myMemManipulator;
    private IEnumerator`1<RawSectionGroup> myReversedSectionGroup;
    private ObjectAddressTranslationResult myResult;
    private int myStepsAvailable;
    private Memoryblock myMemAfterGC;
    private int mySnapshotObjectsCount;
    private ChunkArray`1<ObjectAddressDescription> mySnapshotObjects;
    private int myGcNumber;
    private RawSectionGroup myPrevSectionGroup;
    private bool myCanStepBack;
    [CompilerGeneratedAttribute]
private static Func`2<RawMemoryBlock, ulong> CS$<>9__CachedAnonymousMethodDelegate2;
    public int StepsAvailable { get; }
    public bool CanStepBack { get; }
    [NotNullAttribute]
public RawSectionGroup CurrentSectionGroup { get; }
    internal ObjectAddressTranslationScope(ObjectAddressTranslator parent, IRawSnapshotDataAccessor rawSnapshotAccessor, int gcNumber, int objectsCount);
    public int get_StepsAvailable();
    public bool get_CanStepBack();
    public RawSectionGroup get_CurrentSectionGroup();
    public void GetObjectNumbers(IEnumerable`1<T> objects, Func`2<T, ulong> addressGetter, IDictionary`2<ObjectNumber, T> numberedObjs);
    public void TranslateObjectsIfAbsent(IEnumerable`1<T> objects, Func`2<T, ulong> addressGetter, Func`2<T, ObjectNumber> numberGetter, IDictionary`2<ObjectNumber, T> numberedObjs);
    [NotNullAttribute]
public ObjectAddressTranslationScope TranslateObject(ObjectNumber objNumber, ulong objAddress);
    [NotNullAttribute]
public ObjectAddressTranslationScope Back(IExecutionController progressIndicator);
    [NotNullAttribute]
public ObjectAddressTranslationScope Back(int gcSteps, IExecutionController progressIndicator);
    [NotNullAttribute]
public ObjectAddressTranslationResult EndTranslation();
    private static bool IsHeapCollected(RawHeap heap, IReadOnlyList`1<bool> collectedMarks);
    [CompilerGeneratedAttribute]
private static ulong <Back>b__0(RawMemoryBlock x);
}
public class JetBrains.dotMemory.Dal.Raw.Translation.ObjectAddressTranslator : object {
    private int myGlobalObjectNumber;
    private int mySnapshotGCNumber;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ObjectAddressDescription> <PrevSnapshotObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectAddressTranslationResult <PrevSnapshotResult>k__BackingField;
    internal IReadOnlyList`1<ObjectAddressDescription> PrevSnapshotObjects { get; internal set; }
    internal ObjectAddressTranslationResult PrevSnapshotResult { get; internal set; }
    internal ObjectAddressTranslator(int snapshotGcNumber, int globalObjectNumber, IReadOnlyList`1<ObjectAddressDescription> prevSnapshotObjects, ObjectAddressTranslationResult prevSnapshotResult);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<ObjectAddressDescription> get_PrevSnapshotObjects();
    [CompilerGeneratedAttribute]
internal void set_PrevSnapshotObjects(IReadOnlyList`1<ObjectAddressDescription> value);
    [CompilerGeneratedAttribute]
internal ObjectAddressTranslationResult get_PrevSnapshotResult();
    [CompilerGeneratedAttribute]
internal void set_PrevSnapshotResult(ObjectAddressTranslationResult value);
    internal int NextGlobalObjectNumber();
    public ObjectAddressTranslationScope BeginTranslation(IRawSnapshotDataAccessor rawSnapshotAccessor, int objectsCount);
}
[AttributeUsageAttribute("4")]
public class JetBrains.dotMemory.Dal.RawSectionAttribute : Attribute {
    public RawSectionAttribute(ushort rawSectionType);
}
public class JetBrains.dotMemory.Dal.RawSnapshotDescriptor : object {
    public SnapshotId SnapshotId;
    public int SnapshotOrderNumber;
    public FileSystemPath IndexFilePath;
    public RawSnapshotDescriptor(int snapshotOrderNumber, SnapshotId snapshotId, FileSystemPath indexFilePath);
}
public class JetBrains.dotMemory.Dal.RawSnapshotProvider : object {
    public SnapshotingProgress SnapshotingProgress;
    public IDataProvider`1<RawSnapshotDescriptor> RawSnapshot;
    public RawSnapshotProvider(SnapshotingProgress snapshotingProgress, IDataProvider`1<RawSnapshotDescriptor> rawSnapshot);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.Realtime.DataGenerationRealtimeSnapshotProgressProvider : object {
    private Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> <Snapshots>k__BackingField;
    public IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> Snapshots { get; private set; }
    public DataGenerationRealtimeSnapshotProgressProvider(IRealtimeChartSnapshotsData realtimeChartSnapshotsData, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> get_Snapshots();
    [CompilerGeneratedAttribute]
private void set_Snapshots(IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> value);
    private IRealtimeSnapshotWithProgress ToRealtimeProgressIndicator(IRealtimeChartSnapshotMark snapshot);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.Realtime.DataReadingRealtimeSnapshotProgressProvider : object {
    private Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> <Snapshots>k__BackingField;
    public IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> Snapshots { get; private set; }
    public DataReadingRealtimeSnapshotProgressProvider(Lifetime lifetime, IRealtimeChartSnapshotsData realtimeChartSnapshotsData);
    [CompilerGeneratedAttribute]
public sealed virtual IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> get_Snapshots();
    [CompilerGeneratedAttribute]
private void set_Snapshots(IReadonlyCollectionEvents`1<IRealtimeSnapshotWithProgress> value);
    private IRealtimeSnapshotWithProgress ToProgressIndicator(IRealtimeChartSnapshotMark realtimeSnapshot);
}
public interface JetBrains.dotMemory.Dal.Realtime.IRealtimeSnapshotProvider {
    public ISignal`1<IRealtimeChartSnapshotMark> NewSnapshotMark { get; }
    public abstract virtual ISignal`1<IRealtimeChartSnapshotMark> get_NewSnapshotMark();
}
public class JetBrains.dotMemory.Dal.Realtime.RealtimeChartSnapshotMark : object {
    private ulong myTick;
    private SnapshotId mySnapshotId;
    private int mySequenceNumber;
    private ProgressProvider myProgressProvider;
    public ulong Tick { get; }
    public SnapshotId SnapshotId { get; }
    public int SequenceNumber { get; }
    public ProgressProvider ProgressProvider { get; }
    public RealtimeChartSnapshotMark(ulong tick, SnapshotId snapshotId, int sequenceNumber, ProgressProvider progressProvider);
    public sealed virtual ulong get_Tick();
    public sealed virtual SnapshotId get_SnapshotId();
    public sealed virtual int get_SequenceNumber();
    public sealed virtual ProgressProvider get_ProgressProvider();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.Realtime.RealtimeChartSnapshotsDataReader : object {
    private static int GuildBytesRepresentationLengths;
    private IListEvents`1<IRealtimeChartSnapshotMark> mySnapshots;
    public IReadonlyCollectionEvents`1<IRealtimeChartSnapshotMark> SnapshotMarks { get; }
    public RealtimeChartSnapshotsDataReader(Func`1<BinaryReader> getReader, Lifetime lifetime);
    public sealed virtual IReadonlyCollectionEvents`1<IRealtimeChartSnapshotMark> get_SnapshotMarks();
    private static IList`1<IRealtimeChartSnapshotMark> ReadData(BinaryReader reader);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.Realtime.RealtimeChartSnapshotsDataWriter : object {
    private ReadonlyToken myReadonlyToken;
    private object mySnapshotsAccess;
    private ListEvents`1<IRealtimeChartSnapshotMark> mySnapshotMarks;
    public IReadonlyCollectionEvents`1<IRealtimeChartSnapshotMark> SnapshotMarks { get; }
    public RealtimeChartSnapshotsDataWriter(IRealtimeSnapshotProvider snapshotProvider, Func`1<BinaryWriter> getWriter, Lifetime lifetime);
    public sealed virtual IReadonlyCollectionEvents`1<IRealtimeChartSnapshotMark> get_SnapshotMarks();
    private void PersistMarksIntoStorage(BinaryWriter writer);
    private void StoreSnapshotMarkToCollection(IRealtimeChartSnapshotMark value);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.Realtime.RealtimeSnapshotProvider : object {
    private IDataSink`1<ulong> myCurrentTickSink;
    private object myAccess;
    private ISignal`1<IRealtimeChartSnapshotMark> myNewSnapshotMarkSignal;
    public ISignal`1<IRealtimeChartSnapshotMark> NewSnapshotMark { get; }
    public RealtimeSnapshotProvider(Lifetime lifetime, IProfilingSessionDescriptor profilingSessionDescriptor, ITickProvider tickProvider);
    public sealed virtual ISignal`1<IRealtimeChartSnapshotMark> get_NewSnapshotMark();
    private void OnNewSnapshotProvider(Lifetime _, SnapshotProvider snapshotProvider);
    private void FireNewSnapshotMarkSignal(SnapshotProvider snapshotProvider, SnapshotingStep step);
}
public class JetBrains.dotMemory.Dal.Realtime.RealtimeSnapshotWithProgress : object {
    [CompilerGeneratedAttribute]
private int <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IRealtimeChartSnapshotMark <RealtimeSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private IProgressIndicatorModel <ProgressIndicator>k__BackingField;
    public int SequenceNumber { get; private set; }
    [NotNullAttribute]
public IRealtimeChartSnapshotMark RealtimeSnapshot { get; private set; }
    [NotNullAttribute]
public IProgressIndicatorModel ProgressIndicator { get; private set; }
    public RealtimeSnapshotWithProgress(IRealtimeChartSnapshotMark realtimeSnapshot, IProgressIndicatorModel progressIndicator, int sequenceNumber);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SequenceNumber();
    [CompilerGeneratedAttribute]
private void set_SequenceNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IRealtimeChartSnapshotMark get_RealtimeSnapshot();
    [CompilerGeneratedAttribute]
private void set_RealtimeSnapshot(IRealtimeChartSnapshotMark value);
    [CompilerGeneratedAttribute]
public sealed virtual IProgressIndicatorModel get_ProgressIndicator();
    [CompilerGeneratedAttribute]
private void set_ProgressIndicator(IProgressIndicatorModel value);
}
[SectionAttribute("37143")]
public class JetBrains.dotMemory.Dal.ReferenceIdTreeDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ReferenceIdTreeDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IReferenceIdTreeParentCollection GetData(IExecutionController executionController);
}
public class JetBrains.dotMemory.Dal.ReferenceIdTreeParentCollection : ChunkArray`1<GraphReferenceId> {
    public ReferenceIdTreeParentCollection(IReadOnlyCollection`1<GraphReferenceId> source);
    public ReferenceIdTreeParentCollection(int length);
}
[SectionAttribute("37143")]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.ReferenceIdTreeReader : object {
    private BinaryReader myReader;
    private long myHeaderSize;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public GraphReferenceId Item { get; }
    public ReferenceIdTreeReader(BinaryReader reader, Lifetime lifetime);
    public sealed virtual IEnumerator`1<GraphReferenceId> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual GraphReferenceId get_Item(int index);
}
[SectionAttribute("37152")]
public class JetBrains.dotMemory.Dal.RetainedSizeWriter : DataWriter {
    private static ushort Version;
    public RetainedSizeWriter(BinaryWriter writer);
    public void Write(IReadOnlyCollection`1<ulong> sizes);
}
[SectionAttribute("32848")]
public class JetBrains.dotMemory.Dal.ReverseToDerectReferenceMapWriter : DataWriter {
    private static ushort Version;
    public ReverseToDerectReferenceMapWriter(BinaryWriter writer);
    public void Write(IReadOnlyCollection`1<int> reverseToDerectReferenceMap);
}
public class JetBrains.dotMemory.Dal.ReverseToDirectReferenceMap : ChunkArray`1<int> {
    public ReverseToDirectReferenceMap(int length);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.ReverseToDirectReferenceMapDataProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ReverseToDirectReferenceMapDataProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IReverseToDirectReferenceMap GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.ReverseToDirectReferenceMapReader : object {
    private BinaryReader myRandomAccessReader;
    private long myHeaderSize;
    private int mySizeofNode;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public int Item { get; }
    public ReverseToDirectReferenceMapReader(Func`2<Lifetime, BinaryReader> getReader, Lifetime lifetime);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual int get_Item(int index);
}
[SectionAttribute("29744")]
[SectionAttribute("29745")]
public class JetBrains.dotMemory.Dal.RootCollectionWriter : DataWriter {
    private static ushort Version;
    private int myCount;
    public RootCollectionWriter(BinaryWriter writer, SectionType sectionType, Lifetime lifetime);
    public void Write(IGraphRoot root);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(long headerPosition);
}
public class JetBrains.dotMemory.Dal.RvaStaticReference : object {
    [CompilerGeneratedAttribute]
private TypeId <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectNumber <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <FieldName>k__BackingField;
    public TypeId TypeId { get; private set; }
    public ObjectNumber ObjectNumber { get; private set; }
    public SectionPointer`1<IFieldNamesCollection> FieldName { get; private set; }
    public RvaStaticReference(ObjectNumber objectNumber, TypeId typeId, SectionPointer`1<IFieldNamesCollection> fieldName);
    [CompilerGeneratedAttribute]
public sealed virtual TypeId get_TypeId();
    [CompilerGeneratedAttribute]
private void set_TypeId(TypeId value);
    [CompilerGeneratedAttribute]
public sealed virtual ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectNumber(ObjectNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual SectionPointer`1<IFieldNamesCollection> get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(SectionPointer`1<IFieldNamesCollection> value);
}
public class JetBrains.dotMemory.Dal.Section.HeaderWithPtrAndCount : ValueType {
    public int Sizeof;
    public UInt64Reader PtrReader;
    public int Count;
    public HeaderWithPtrAndCount(int sizeof, UInt64Reader ptrReader, int count);
}
[ObsoleteAttribute]
public class JetBrains.dotMemory.Dal.Section.HeaderWithPtrAndCountBuilder : object {
    private int mySizeof;
    private byte myPtrSize;
    private int myCount;
    public HeaderWithPtrAndCountBuilder(BinaryReader reader);
    public HeaderWithPtrAndCount BuildHeader();
}
[MeansImplicitUseAttribute]
[AttributeUsageAttribute("4")]
public class JetBrains.dotMemory.Dal.SectionAttribute : Attribute {
    public SectionAttribute(SectionType sectionType);
}
public class JetBrains.dotMemory.Dal.SectionsGroup : object {
    private Dictionary`2<Type, Func`2<Lifetime, object>> myAccessors;
    public void Add(Func`2<Lifetime, object> accessor);
    public sealed virtual T TryGet(Lifetime lifetime);
    public sealed virtual T Get(Lifetime lifetime);
}
[SectionAttribute("37145")]
public class JetBrains.dotMemory.Dal.ShortestPairsCollection : object {
    private IReadOnlyList`1<GraphReferenceId> myP;
    private IReadOnlyList`1<ObjectNumber> myQ;
    public IReadOnlyList`1<GraphReferenceId> P { get; }
    public IReadOnlyList`1<ObjectNumber> Q { get; }
    public ShortestPairsCollection(IReadOnlyList`1<GraphReferenceId> p, IReadOnlyList`1<ObjectNumber> q);
    public sealed virtual IReadOnlyList`1<GraphReferenceId> get_P();
    public sealed virtual IReadOnlyList`1<ObjectNumber> get_Q();
}
public class JetBrains.dotMemory.Dal.ShortestPairsEntityProvider : object {
    private Func`2<Lifetime, BinaryReader> myGetReader;
    public ShortestPairsEntityProvider(Func`2<Lifetime, BinaryReader> getReader);
    public sealed virtual IShortestPairsCollection GetData(IExecutionController executionController);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.ShortestPairsReader : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<GraphReferenceId> <P>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ObjectNumber> <Q>k__BackingField;
    public IReadOnlyList`1<GraphReferenceId> P { get; private set; }
    public IReadOnlyList`1<ObjectNumber> Q { get; private set; }
    public ShortestPairsReader(BinaryReader binaryReader);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<GraphReferenceId> get_P();
    [CompilerGeneratedAttribute]
private void set_P(IReadOnlyList`1<GraphReferenceId> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<ObjectNumber> get_Q();
    [CompilerGeneratedAttribute]
private void set_Q(IReadOnlyList`1<ObjectNumber> value);
}
public class JetBrains.dotMemory.Dal.ShortestPairsWriter : DataWriter {
    private static ushort Version;
    public ShortestPairsWriter(BinaryWriter writer);
    public void Write(ShortestPairsFinderResult shortestPairsFinderResult);
}
public class JetBrains.dotMemory.Dal.Snapshot.MultiFileSnapshotProsector : object {
    private FileSystemPath myIndexFilePath;
    private int mySectionsCount;
    private long mySectionsOffset;
    private DateTime myCreationTime;
    private GCNumber myGCNumber;
    public FileSystemPath IndexFilePath { get; }
    public DateTime CreationTime { get; }
    public GCNumber GCNumber { get; }
    public MultiFileSnapshotProsector(FileSystemPath indexFilePath);
    public FileSystemPath get_IndexFilePath();
    public DateTime get_CreationTime();
    public GCNumber get_GCNumber();
    public void EnumerateSections(Action`1<MultiFileSnapshotSectionDescriptor> action);
    private static Version ReadVersion(BinaryReader reader);
}
public class JetBrains.dotMemory.Dal.Snapshot.MultiFileSnapshotSectionDescriptor : object {
    public static int WideSectionSequentialNumber;
    public SectionType SectionType;
    public ushort Version;
    public int FileIndex;
    public long Start;
    public long Size;
    public int SectionSequentialNumber;
    public MultiFileSnapshotSectionDescriptor(ushort sectionType, ushort version, int fileIndex, long start, long size, int sectionSequentialNumber);
}
internal class JetBrains.dotMemory.Dal.Snapshot.MultiFileSnapshotWriter : SnapshotWriter {
    private Lifetime myLifetime;
    private object myIndexWriterAccess;
    private ObjectPool`1<int> myFileIndexPool;
    private object myFileIndexCounterAccess;
    private int myFileIndexCounter;
    private List`1<BinaryWriter> myWritersPool;
    public MultiFileSnapshotWriter(Lifetime lifetime, FileSystemPath indexFilePath, DateTime snapshotCreationTime, GCNumber snapshotGCNumber);
    private int GetNextFileIndex();
    private void AddSectionInfoIntoIndex(ushort sectionType, ushort version, int fileIndex, long start, long size, int sectionSequentialNumber);
    public void AddExistingSections(IEnumerable`1<MultiFileSnapshotSectionDescriptor> sectionDescriptors, Func`2<int, FileSystemPath> getFilePath);
    protected virtual void AddSection(int sequentialSectionNumber, Func`2<BinaryWriter, SectionTypeWithVersion> writeAction);
}
internal abstract class JetBrains.dotMemory.Dal.Snapshot.SnapshotWriter : object {
    private FileSystemPath myIndexFilePath;
    private BinaryWriter myIndexWriter;
    private long mySectionsCountPosition;
    private UInt32 mySectionsCount;
    protected FileSystemPath IndexFilePath { get; }
    protected BinaryWriter IndexWriter { get; }
    protected SnapshotWriter(Lifetime lifetime, FileSystemPath indexFilePath, ushort storageType, Version snapshotVersion, DateTime snapshotCreationTime, GCNumber snapshotGCNumber);
    private static void WriteVersion(Version snapshotVersion, BinaryWriter writer);
    protected void IncSectionsCount();
    protected FileSystemPath get_IndexFilePath();
    protected BinaryWriter get_IndexWriter();
    public void WriteSection(int sequentialSectionNumber, Func`2<BinaryWriter, SectionTypeWithVersion> writeAction);
    protected abstract virtual void AddSection(int sequentialSectionNumber, Func`2<BinaryWriter, SectionTypeWithVersion> writeAction);
    private void FinalizeIndex();
}
internal static class JetBrains.dotMemory.Dal.Snapshot.StorageUtil : object {
    [NotNullAttribute]
public static FileSystemPath GetSatteliteFileName(FileSystemPath indexFilePath, int fileIndex);
}
internal static class JetBrains.dotMemory.Dal.SnapshotConstants : object {
    public static UInt32 ClientMemorySnapshotType;
    public static ushort RawSnapshotSupportedVersion;
    public static int MinSupportedMainVersion;
    public static int MainVersion;
    public static int Build;
    private static int MarketingVersion;
    public static Version SnapshotVersion;
    private static SnapshotConstants();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.SnapshotDiskManager : object {
    public sealed virtual FileSystemPath Move(FileSystemPath sourceIndexFilePath, FileSystemPath targeIndexFilePath, IProgressIndicator progressIndicator);
    public sealed virtual void Delete(FileSystemPath indexFilePath, IProgressIndicator progressIndicator);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.SnapshotProgressHandler : object {
    private static string Id;
    private static string HostScopeEvent;
    private static string HostOperationEvent;
    private static string CoreOperationEvent;
    private ILogger myLogger;
    private CoreIdentity myCoreIdentity;
    private IDotMemoryGlobalState myDotMemoryGlobal;
    private object myAccess;
    private Dictionary`2<int, SnapshotIdentity> myEventIdToSnapshotIdentity;
    private Dictionary`2<SnapshotIdentity, SnapshotingProgressData> mySnapshotingProgresses;
    public Signal`1<SnapshotingProgress> NewSnapshotingStarted;
    public SnapshotProgressHandler(Lifetime lifetime, ProfilingCore profilingCore, IDotMemoryGlobalState dotMemoryGlobal);
    private static SnapshotProgressHandler();
    private void CoreEventsScopeHandler(HostScopeEventArgs args);
    private void ProfilerEventsHandler(CoreOperationEventArgs args);
    private void CoreEventsHandler(HostOperationEventArgs operation);
    private SnapshotingProgressData GetSnapshotingProgressData(SnapshotIdentity snapshotIdentity);
    private static string CoreIdentityToString(IIdentity identity);
    private static string SnapshotIdentityToString(IIdentity identity);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.SnapshotsTakingNormalizedTickProvider : object {
    private object myLock;
    private ITickHolder myCurrentTickHolder;
    private long myCurrentPauseBegin;
    private long myTotalPause;
    [CompilerGeneratedAttribute]
private IAsyncDataProvider`1<ulong> <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private static AcceptNewValue`1<long> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<long, ulong> CS$<>9__CachedAnonymousMethodDelegate5;
    public IAsyncDataProvider`1<ulong> Provider { get; private set; }
    public SnapshotsTakingNormalizedTickProvider(ITickHolder currentTickHolder, IProfilingSessionCommands profilingSessionCommands, ITickProvider tickProvider, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncDataProvider`1<ulong> get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(IAsyncDataProvider`1<ulong> value);
    private long Normalize(ulong newTick);
    private void OnPauseStop();
    private void OnPauseStart();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private static bool <.ctor>b__1(long prevTick, long newTick);
    [CompilerGeneratedAttribute]
private static ulong <.ctor>b__2(long tick);
}
[SectionAttribute("12550")]
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.SnapshottedFinalizedObjectSetReader : object {
    private static Byte[] ourZeroBytes;
    private BinaryReader myReader;
    private long myTotalCount;
    private int myObjectsCount;
    private long myHeaderSize;
    private bool myIsEnumerated;
    public static BinaryReader DummyBinReader { get; }
    public int Count { get; }
    public long TotalCount { get; }
    public SnapshottedFinalizedObjectSetReader(BinaryReader reader);
    private static SnapshottedFinalizedObjectSetReader();
    public static BinaryReader get_DummyBinReader();
    public sealed virtual IEnumerator`1<FinalizedObject> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual long get_TotalCount();
}
[SettingsIndexedKeyAttribute("JetBrains.dotMemory.Dal.Interface.Workspace.WorkspaceSettingsKey", "ProfilingSessionDalDescriptor", "JetBrains.dotMemory.Dal.Interface.ProfilingSessionId")]
public class JetBrains.dotMemory.Dal.StatePersistence.ProfilingSessionDalDescriptor : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Profiled process id")]
public int ProcessId;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Profiled executable full path")]
public string ExecutablePath;
    public ProfilingSessionDalDescriptor(string executablePath, int processId);
}
[SettingsIndexedKeyAttribute("JetBrains.dotMemory.Dal.StatePersistence.ProfilingSessionDalDescriptor", "SnapshotDalDescriptor", "JetBrains.dotMemory.Dal.Interface.SnapshotId")]
public class JetBrains.dotMemory.Dal.StatePersistence.SnapshotDalDescriptor : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "SnapshotId")]
public SnapshotId SnapshotId;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "SnapshotOrderNumber")]
public int SnapshotOrderNumber;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "SnapshotName")]
public string SnapshotName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "IsVisible")]
public bool IsVisible;
    public SnapshotDalDescriptor(SnapshotId snapshotId, int snapshotOrderNumber, string snapshotName);
}
[SettingsIndexedKeyAttribute("System.Reflection.Missing", "DataStorageKey", "System.String")]
public class JetBrains.dotMemory.Dal.StatePersistence.StoredDataIndex : object {
    [SettingsIndexedEntryAttribute("DataFormatVersions")]
public IIndexedEntry`2<string, string> DataFormatVersions;
}
public class JetBrains.dotMemory.Dal.StaticFields.Data.AppDomainStaticFieldData : object {
    [CompilerGeneratedAttribute]
private long <AppDomainData>k__BackingField;
    public StaticType Type { get; }
    public long AppDomainData { get; private set; }
    public AppDomainStaticFieldData(long appDomainData);
    public sealed virtual StaticType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual long get_AppDomainData();
    [CompilerGeneratedAttribute]
private void set_AppDomainData(long value);
}
public class JetBrains.dotMemory.Dal.StaticFields.Data.ContextStaticFieldData : object {
    [CompilerGeneratedAttribute]
private long <ContextData>k__BackingField;
    public StaticType Type { get; }
    public long ContextData { get; private set; }
    public ContextStaticFieldData(long contextData);
    public sealed virtual StaticType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual long get_ContextData();
    [CompilerGeneratedAttribute]
private void set_ContextData(long value);
}
public class JetBrains.dotMemory.Dal.StaticFields.Data.RvaStaticFieldData : object {
    public StaticType Type { get; }
    public sealed virtual StaticType get_Type();
}
public class JetBrains.dotMemory.Dal.StaticFields.Data.ThreadStaticFieldData : object {
    [CompilerGeneratedAttribute]
private long <AppDomainData>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ThreadData>k__BackingField;
    public StaticType Type { get; }
    public long AppDomainData { get; private set; }
    public long ThreadData { get; private set; }
    public ThreadStaticFieldData(long appDomainData, long threadData);
    public sealed virtual StaticType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual long get_AppDomainData();
    [CompilerGeneratedAttribute]
private void set_AppDomainData(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ThreadData();
    [CompilerGeneratedAttribute]
private void set_ThreadData(long value);
}
public class JetBrains.dotMemory.Dal.StaticFields.RawPrimitiveStaticField : object {
    [CompilerGeneratedAttribute]
private long <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <FieldNameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private IStaticFieldData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <FieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public long ClassId { get; private set; }
    public SectionPointer`1<IFieldNamesCollection> FieldNameOffset { get; private set; }
    public IStaticFieldData Data { get; private set; }
    public FieldType FieldType { get; private set; }
    public Byte[] Value { get; private set; }
    public RawPrimitiveStaticField(long classId, SectionPointer`1<IFieldNamesCollection> fieldNameOffset, IStaticFieldData data, FieldType fieldType, Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClassId();
    [CompilerGeneratedAttribute]
private void set_ClassId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual SectionPointer`1<IFieldNamesCollection> get_FieldNameOffset();
    [CompilerGeneratedAttribute]
private void set_FieldNameOffset(SectionPointer`1<IFieldNamesCollection> value);
    [CompilerGeneratedAttribute]
public sealed virtual IStaticFieldData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(IStaticFieldData value);
    [CompilerGeneratedAttribute]
public sealed virtual FieldType get_FieldType();
    [CompilerGeneratedAttribute]
private void set_FieldType(FieldType value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Byte[] value);
}
public class JetBrains.dotMemory.Dal.StaticFields.RawReferenceStaticField : object {
    [CompilerGeneratedAttribute]
private long <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <FieldNameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private IStaticFieldData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ObjectId>k__BackingField;
    public long ClassId { get; private set; }
    public SectionPointer`1<IFieldNamesCollection> FieldNameOffset { get; private set; }
    public IStaticFieldData Data { get; private set; }
    public ulong Address { get; private set; }
    public ulong ObjectId { get; private set; }
    public RawReferenceStaticField(long classId, SectionPointer`1<IFieldNamesCollection> fieldNameOffset, IStaticFieldData data, ulong address, ulong objectId);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClassId();
    [CompilerGeneratedAttribute]
private void set_ClassId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual SectionPointer`1<IFieldNamesCollection> get_FieldNameOffset();
    [CompilerGeneratedAttribute]
private void set_FieldNameOffset(SectionPointer`1<IFieldNamesCollection> value);
    [CompilerGeneratedAttribute]
public sealed virtual IStaticFieldData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(IStaticFieldData value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(ulong value);
}
public class JetBrains.dotMemory.Dal.StaticFields.RawStructStaticField : object {
    [CompilerGeneratedAttribute]
private long <ClassId>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <FieldNameOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private IStaticFieldData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ObjectId>k__BackingField;
    public long ClassId { get; private set; }
    public SectionPointer`1<IFieldNamesCollection> FieldNameOffset { get; private set; }
    public IStaticFieldData Data { get; private set; }
    public ulong ObjectId { get; private set; }
    public RawStructStaticField(long classId, SectionPointer`1<IFieldNamesCollection> fieldNameOffset, IStaticFieldData data, ulong objectId);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ClassId();
    [CompilerGeneratedAttribute]
private void set_ClassId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual SectionPointer`1<IFieldNamesCollection> get_FieldNameOffset();
    [CompilerGeneratedAttribute]
private void set_FieldNameOffset(SectionPointer`1<IFieldNamesCollection> value);
    [CompilerGeneratedAttribute]
public sealed virtual IStaticFieldData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(IStaticFieldData value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(ulong value);
}
[UsedImplicitlyAttribute]
[SectionAttribute("12624")]
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.StaticReferencesReader : object {
    private BinaryReader myReader;
    public IStaticReference Item { get; }
    public StaticReferencesReader(BinaryReader reader);
    public sealed virtual IStaticReference get_Item(SectionPointer`1<IStaticReference> offset);
}
[SectionAttribute("12624")]
public class JetBrains.dotMemory.Dal.StaticReferencesWriter : DataWriter {
    private static ushort Version;
    public StaticReferencesWriter(BinaryWriter writer);
    public void WriteAppdomainStatic(ObjectNumber objectNumber, TypeId typeId, long fieldnameOffset, long appdomainData);
    public void WriteThreadStatic(ObjectNumber objectNumber, TypeId typeId, long fieldnameOffset, long appdomainData, long threadData);
    public void WriteContextStatic(ObjectNumber objectNumber, TypeId typeId, long fieldnameOffset, long contextData);
    public void WriteRvaStatic(ObjectNumber objectNumber, TypeId typeId, long fieldnameOffset);
}
public class JetBrains.dotMemory.Dal.StreamReadOnlyRegion : Stream {
    private Stream myStream;
    private long myCurrentPostion;
    private long myRegionStartPosition;
    private long mySize;
    private object myRegionId;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public StreamReadOnlyRegion(Stream stream);
    public void Initialize(long startPosition, long size, object regionId);
    public virtual void Close();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual void SetLength(long value);
}
public class JetBrains.dotMemory.Dal.ThreadStaticReference : object {
    [CompilerGeneratedAttribute]
private TypeId <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectNumber <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionPointer`1<IFieldNamesCollection> <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AppdomainData>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ThreadData>k__BackingField;
    public TypeId TypeId { get; private set; }
    public ObjectNumber ObjectNumber { get; private set; }
    public SectionPointer`1<IFieldNamesCollection> FieldName { get; private set; }
    public long AppdomainData { get; private set; }
    public long ThreadData { get; private set; }
    public ThreadStaticReference(ObjectNumber objectNumber, TypeId typeId, SectionPointer`1<IFieldNamesCollection> fieldName, long appdomainData, long threadData);
    [CompilerGeneratedAttribute]
public sealed virtual TypeId get_TypeId();
    [CompilerGeneratedAttribute]
private void set_TypeId(TypeId value);
    [CompilerGeneratedAttribute]
public sealed virtual ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectNumber(ObjectNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual SectionPointer`1<IFieldNamesCollection> get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(SectionPointer`1<IFieldNamesCollection> value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_AppdomainData();
    [CompilerGeneratedAttribute]
private void set_AppdomainData(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ThreadData();
    [CompilerGeneratedAttribute]
private void set_ThreadData(long value);
}
public class JetBrains.dotMemory.Dal.TimelineRange : object {
    [CompilerGeneratedAttribute]
private ulong <StartTick>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EndTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFinished>k__BackingField;
    public ulong StartTick { get; public set; }
    public ulong EndTick { get; public set; }
    public bool IsFinished { get; public set; }
    public TimelineRange(ulong startTick, ulong endTick, bool isFinished);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_StartTick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartTick(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_EndTick();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndTick(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFinished();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFinished(bool value);
}
public class JetBrains.dotMemory.Dal.TraverseTimeCollection : ChunkArray`1<int> {
    public TraverseTimeCollection(int length);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.dotMemory.Dal.TypeSection : object {
    private ChunkArray`1<ObjectType> myArray;
    public ObjectType Item { get; }
    public int Count { get; }
    public TypeSection(Func`2<Lifetime, BinaryReader> getTypesReader, Func`2<Lifetime, BinaryReader> getGenericArgumentsReader);
    public sealed virtual ObjectType get_Item(TypeId typeId);
    public sealed virtual int get_Count();
}
[SectionAttribute("29760")]
public class JetBrains.dotMemory.Dal.TypeSectionBuilder : object {
    private IReadOnlyCollection`1<SectionOffset`1<IClassSection>> myClassIndex;
    private IClassSection myClassSection;
    private Dictionary`2<ClassSectionNode, TypeId> myClassNodeToTypeIdMap;
    private Dictionary`2<long, TypeId> myFinalMap;
    [CanBeNullAttribute]
private SnapshotConverterIntermediateDataCapsule myCapsule;
    private int myNodesCount;
    private IList`1<TypeId> myGenericArguments;
    private TypeDescriptor[] myTypeDescriptors;
    public Dictionary`2<long, TypeId> ClassIndexSectionMap { get; }
    public TypeSectionBuilder(IReadOnlyCollection`1<SectionOffset`1<IClassSection>> classIndex, IClassSection classSection, SnapshotConverterIntermediateDataCapsule capsule);
    public ITypeSectionData Build(IExecutionController progress);
    public sealed virtual Dictionary`2<long, TypeId> get_ClassIndexSectionMap();
    private TypeId GetTypeId(SectionOffset`1<IClassSection> classSectionOffset);
    private TypeId CreateNode(ClassSectionNode classSectionNode, SectionOffset`1<IClassSection> classSectionOffset);
}
public class JetBrains.dotMemory.Dal.TypeSectionData : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TypeDescriptor> <TypesDescriptors>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TypeId> <GenericArguments>k__BackingField;
    public IReadOnlyList`1<TypeDescriptor> TypesDescriptors { get; private set; }
    public IReadOnlyList`1<TypeId> GenericArguments { get; private set; }
    public TypeSectionData(IReadOnlyList`1<TypeDescriptor> typesDescriptors, IReadOnlyList`1<TypeId> genericArguments);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<TypeDescriptor> get_TypesDescriptors();
    [CompilerGeneratedAttribute]
private void set_TypesDescriptors(IReadOnlyList`1<TypeDescriptor> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<TypeId> get_GenericArguments();
    [CompilerGeneratedAttribute]
private void set_GenericArguments(IReadOnlyList`1<TypeId> value);
}
[DefaultMemberAttribute("Item")]
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.TypeSectionReader : object {
    private static int NodeSize;
    private static int TypeIdSize;
    private static long TypesHeaderSize;
    private static long GenericsHeaderSize;
    private BinaryReader myTypesReader;
    private BinaryReader myGenericArgumentsReader;
    private int myTypesCount;
    public ObjectType Item { get; }
    public int Count { get; }
    public TypeSectionReader(BinaryReader typesReader, BinaryReader genericArgumentsReader);
    public sealed virtual ObjectType get_Item(TypeId typeId);
    public sealed virtual int get_Count();
    internal static ObjectType Read0000(BinaryReader typesReader, BinaryReader genericArgumentsReader);
    private static TypeId[] ReadGenericArguments(BinaryReader reader, int argumentsCount);
}
[SectionAttribute("29760")]
public class JetBrains.dotMemory.Dal.TypeSectionWriter : DataWriter {
    private static ushort Version;
    public TypeSectionWriter(BinaryWriter writer);
    public void Write(ITypeSectionData typeSectionData);
    private void WriteTypeDescriptor(TypeDescriptor typeDescriptor);
}
public class JetBrains.dotMemory.Dal.Workspace.ConfigurationWorkspaceIndexSerializer : object {
    public sealed virtual void Serialize(IWorkspaceIndex workspaceIndex, Stream stream);
    public sealed virtual IWorkspaceInfo DeserializeInfo(Stream stream);
    public sealed virtual IWorkspaceIndex DeserializeIndex(Stream stream);
}
public static class JetBrains.dotMemory.Dal.Workspace.DummyRealtimeData : object {
    public static void Generate(FileSystemPath profilingSessionFolder);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Workspace.JsonWorkspaceIndex : JsonWorkspaceInfo {
    private List`1<JsonWsProfilingSession> myProfilingSessions;
    [DataMemberAttribute]
public IReadOnlyList`1<JsonWsProfilingSession> ProfilingSessions { get; }
    private IReadOnlyList`1<IWsProfilingSession> JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceIndex.ProfilingSessions { get; }
    public JsonWorkspaceIndex(Version version, string productName, Version productVersion, string name, DateTime creationTime, string contentSignature);
    public JsonWorkspaceIndex(Version version, string productName, Version productVersion, string name, DateTime creationTime, string contentSignature, IEnumerable`1<JsonWsProfilingSession> profilingSessions);
    public JsonWorkspaceIndex(string name);
    public JsonWorkspaceIndex(string name, IEnumerable`1<JsonWsProfilingSession> profilingSessions);
    public JsonWorkspaceIndex(string name, DateTime creationTime, string contentSignature);
    public IReadOnlyList`1<JsonWsProfilingSession> get_ProfilingSessions();
    private sealed virtual override IReadOnlyList`1<IWsProfilingSession> JetBrains.dotMemory.Dal.Interface.Workspace.IWorkspaceIndex.get_ProfilingSessions();
    public void AddProfilingSession(JsonWsProfilingSession session);
}
public class JetBrains.dotMemory.Dal.Workspace.JsonWorkspaceIndexSerializer : object {
    private static ILogger ourLogger;
    private JsonSerializer mySerializer;
    private JsonSerializer myDeserializer;
    private static JsonWorkspaceIndexSerializer();
    public sealed virtual void Serialize(IWorkspaceIndex workspaceIndex, Stream stream);
    public sealed virtual IWorkspaceInfo DeserializeInfo(Stream stream);
    public sealed virtual IWorkspaceIndex DeserializeIndex(Stream stream);
    private static JsonWorkspaceIndex ConvertIndex(IWorkspaceIndex workspaceIndex);
    private static JsonWsProfilingSession ConvertWsSession(IWsProfilingSession session);
    private static JsonWsSnapshot ConvertWsSnapshot(IWsSnapshot snapshot);
    private static void OnDeserializationError(object sender, ErrorEventArgs args);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Workspace.JsonWorkspaceInfo : object {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkspaceSource <Source>k__BackingField;
    [DataMemberAttribute]
public Version Version { get; private set; }
    [DataMemberAttribute]
public string ProductName { get; private set; }
    [DataMemberAttribute]
public Version ProductVersion { get; private set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public DateTime CreationTime { get; public set; }
    [DataMemberAttribute]
public string ContentSignature { get; private set; }
    [DataMemberAttribute]
public WorkspaceSource Source { get; public set; }
    public JsonWorkspaceInfo(Version version, string productName, Version productVersion, string name, DateTime creationTime, string contentSignature);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductName();
    [CompilerGeneratedAttribute]
private void set_ProductName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_ProductVersion();
    [CompilerGeneratedAttribute]
private void set_ProductVersion(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentSignature();
    [CompilerGeneratedAttribute]
private void set_ContentSignature(string value);
    [CompilerGeneratedAttribute]
public sealed virtual WorkspaceSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(WorkspaceSource value);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Workspace.JsonWsProfilingSession : object {
    private List`1<JsonWsSnapshot> mySnapshots;
    [CompilerGeneratedAttribute]
private ProfilingSessionId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [DataMemberAttribute]
public ProfilingSessionId Id { get; private set; }
    [DataMemberAttribute]
public string ProcessName { get; public set; }
    [DataMemberAttribute]
public int ProcessId { get; public set; }
    [DataMemberAttribute]
public IReadOnlyList`1<JsonWsSnapshot> Snapshots { get; }
    private IReadOnlyList`1<IWsSnapshot> JetBrains.dotMemory.Dal.Interface.Workspace.IWsProfilingSession.Snapshots { get; }
    public JsonWsProfilingSession(ProfilingSessionId id, string processName, int processId);
    public JsonWsProfilingSession(ProfilingSessionId id, string processName, int processId, IEnumerable`1<JsonWsSnapshot> snapshots);
    [CompilerGeneratedAttribute]
public sealed virtual ProfilingSessionId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(ProfilingSessionId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProcessName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProcessName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProcessId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProcessId(int value);
    public IReadOnlyList`1<JsonWsSnapshot> get_Snapshots();
    private sealed virtual override IReadOnlyList`1<IWsSnapshot> JetBrains.dotMemory.Dal.Interface.Workspace.IWsProfilingSession.get_Snapshots();
    public void AddSnapshot(JsonWsSnapshot snapshot);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Dal.Workspace.JsonWsSnapshot : object {
    [CompilerGeneratedAttribute]
private SnapshotId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public SnapshotId Id { get; private set; }
    [DataMemberAttribute]
public int Index { get; private set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    public JsonWsSnapshot(SnapshotId id, int index);
    [CompilerGeneratedAttribute]
public sealed virtual SnapshotId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(SnapshotId value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
}
public class JetBrains.dotMemory.Dal.Workspace.RawWorkspaceImporter : object {
    private Func`2<FileSystemPath, IRawSnapshotDataAccessor> myRawSnapshotAccessorFactory;
    private ISnapshotConverter myConverter;
    [CompilerGeneratedAttribute]
private static Func`2<ZipEntry, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<ZipEntry, long> CS$<>9__CachedAnonymousMethodDelegate6;
    public RawWorkspaceImporter(Func`2<FileSystemPath, IRawSnapshotDataAccessor> rawSnapshotAccessorFactory, ISnapshotConverter converter);
    public sealed virtual IWorkspaceInfo TryReadInfo(FileSystemPath workspacePath);
    private IWorkspaceIndex TryReadIndex(FileSystemPath workspacePath);
    public sealed virtual IWorkspaceIndex ReadData(FileSystemPath workspacePath, FileSystemPath targetFolder, IExecutionController executionController);
    private static void UnzipPartial(ZipFile zip, string satelliteFileName, long limit, FileSystemPath workspaceFolder);
    private static IWorkspaceIndex CreateWorkspaceIndex(string name, IEnvironmentSection environment);
    private void CreateWorkspaceFromSnapshot(FileSystemPath rawIndexFile, FileSystemPath targetFolder, ProfilingSessionId sessionId, IExecutionController executionController);
    private static void Unzip(FileSystemPath workspacePath, FileSystemPath unzippedFolder, IExecutionController executionController);
    [CompilerGeneratedAttribute]
private static bool <TryReadIndex>b__0(ZipEntry x);
    [CompilerGeneratedAttribute]
private static long <Unzip>b__5(ZipEntry x);
}
public class JetBrains.dotMemory.Dal.Workspace.SettingsWorkspaceIndexSerializer : object {
    private ISettingsFactory mySettingsFactory;
    public SettingsWorkspaceIndexSerializer(ISettingsFactory settingsFactory);
    public sealed virtual void Serialize(IWorkspaceIndex workspaceIndex, Stream stream);
    public sealed virtual IWorkspaceInfo DeserializeInfo(Stream stream);
    public sealed virtual IWorkspaceIndex DeserializeIndex(Stream stream);
    public void Serialize(IWorkspaceIndex workspaceIndex, FileSystemPath workspaceIndexFilePath);
    public IWorkspaceInfo DeserializeInfo(FileSystemPath workspaceIndexFilePath);
    public IWorkspaceIndex DeserializeIndex(FileSystemPath workspaceIndexFilePath);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.Workspace.WorkspaceDirectoriesProvider : object {
    public static string WorkspacesDirectoryName;
    private static string TempDirectoryName;
    private IKey`1<OptionsGeneralSettingsKey> mySettings;
    private RelativePath myProductPathPostfix;
    public WorkspaceDirectoriesProvider(IKey`1<OptionsGeneralSettingsKey> settings, IAnyProductSettingsLocation productLocation);
    private FileSystemPath GetWorkspaceStorageDirectory();
    private FileSystemPath GetProductStorageDirectory();
    public sealed virtual FileSystemPath CreateWorkspaceDirectory();
    public sealed virtual FileSystemPath CreateTempDirectory(Lifetime lifetime);
}
[UsedImplicitlyAttribute]
internal class JetBrains.dotMemory.Dal.Workspace.WorkspaceDiskUtil : object {
    public static int MaxWorkspaceNameLength;
    private static string LockFileName;
    private ISettingsFactory mySettingsFactory;
    private IAnyProductSettingsLocation myProductLocation;
    private IWorkspaceDirectoriesProvider myWorkspaceDirectoriesProvider;
    private IEnumerable`1<IWorkspaceImporter> myWorkspaceImporters;
    private SettingsWorkspaceIndexSerializer myIndexSerializer;
    [CompilerGeneratedAttribute]
private static Func`2<IArgument, object> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<EverythingArgument, object> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<WindowsServiceArgument, object> CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static Func`2<DevelopmentServerArgument, object> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<WcfHostArgument, object> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<SilverlightArgument, object> CS$<>9__CachedAnonymousMethodDelegate18;
    [CompilerGeneratedAttribute]
private static Func`2<MetroArgument, object> CS$<>9__CachedAnonymousMethodDelegate19;
    [CompilerGeneratedAttribute]
private static Func`2<IISArgument, object> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<IISExpressArgument, bool> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Func`2<IISExpressArgument, object> CS$<>9__CachedAnonymousMethodDelegate1c;
    [CompilerGeneratedAttribute]
private static Func`2<IISExpressArgument, bool> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<IISExpressArgument, object> CS$<>9__CachedAnonymousMethodDelegate1e;
    [CompilerGeneratedAttribute]
private static Func`2<AttachArgument, object> CS$<>9__CachedAnonymousMethodDelegate1f;
    [CompilerGeneratedAttribute]
private static Func`2<StandaloneArgument, object> CS$<>9__CachedAnonymousMethodDelegate20;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate21;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<FileSystemPath, string> CS$<>9__CachedAnonymousMethodDelegate25;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<GuidIndex, WorkspaceHistoryItemSettingsKey>, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate2a;
    public WorkspaceDiskUtil(ISettingsFactory settingsFactory, IAnyProductSettingsLocation productLocation, IWorkspaceDirectoriesProvider workspaceDirectoriesProvider, IEnumerable`1<IWorkspaceImporter> workspaceImporters);
    public sealed virtual FileSystemPath MakeNewWorkspaceFilePath();
    public sealed virtual string MakeNewWorkspaceName(ProfileConfiguration profileConfiguration);
    public sealed virtual WorkspaceSettingsKey GetWorkspaceSettingsEntry(FileSystemPath workspaceIndexFilePath);
    public sealed virtual string GetWorkspaceName(FileSystemPath workspaceIndexFilePath);
    public sealed virtual void LockWorkspaceFileFromSimultaneouslyOpening(FileSystemPath workspaceDirectory, Lifetime lifetime);
    public sealed virtual bool IsWorkspaceOpened(FileSystemPath workspaceIndexFilePath);
    public sealed virtual void DeleteWorkspace(FileSystemPath workspaceIndexFilePath);
    public sealed virtual FileSystemPath ExportWorkspace(FileSystemPath workspaceIndexFilePath, FileSystemPath zipArchiveFilePath, IExecutionController executionController);
    public sealed virtual IWorkspaceInfo GetWorkspaceInfo(FileSystemPath workspaceFilePath);
    public sealed virtual FileSystemPath ImportWorkspace(FileSystemPath workspacePath, IExecutionController executionController);
    private FileSystemPath ImportWorkspace(FileSystemPath workspacePath, IWorkspaceImporter workspaceImporter, IExecutionController executionController);
    public sealed virtual FileSystemPath ImportProcessDump(FileSystemPath dumpPath, IExecutionController executionController);
    private FileSystemPath SaveWorkspaceIndex(IWorkspaceIndex workspaceIndex, FileSystemPath workspaceDirectory);
    private FileSystemPath TryGetCompatibleWorkspaceBySignature(IWorkspaceInfo workspaceInfo);
    private IReadOnlyList`1<FileSystemPath> GetWorkspaces();
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__0(IArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__1(EverythingArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__2(WindowsServiceArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__3(DevelopmentServerArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__5(WcfHostArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__7(SilverlightArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__8(MetroArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__9(IISArgument _);
    [CompilerGeneratedAttribute]
private static bool <MakeNewWorkspaceName>b__a(IISExpressArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__b(IISExpressArgument _);
    [CompilerGeneratedAttribute]
private static bool <MakeNewWorkspaceName>b__d(IISExpressArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__e(IISExpressArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__f(AttachArgument _);
    [CompilerGeneratedAttribute]
private static object <MakeNewWorkspaceName>b__11(StandaloneArgument _);
    [CompilerGeneratedAttribute]
private static string <MakeNewWorkspaceName>b__4(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static string <MakeNewWorkspaceName>b__6(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static string <MakeNewWorkspaceName>b__c(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static string <MakeNewWorkspaceName>b__10(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static string <MakeNewWorkspaceName>b__12(FileSystemPath path);
    [CompilerGeneratedAttribute]
private static FileSystemPath <GetWorkspaces>b__29(Pair`2<GuidIndex, WorkspaceHistoryItemSettingsKey> x);
}
[SettingsIndexedKeyAttribute("JetBrains.dotMemory.Core.Workspace.ProfileConfigurationSettingsKey", "Recent workspace item", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.dotMemory.Dal.Workspace.WorkspaceHistoryItemSettingsKey : object {
    private static string KeyDescription;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Disk path")]
public string WorkspacePath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Last access date")]
public DateTime AccessTime;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "Is pinned")]
public bool IsPinned;
    public WorkspaceHistoryItemSettingsKey(string workspacePath);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Dal.Workspace.WorkspaceSettingsKeyExtension : object {
    [ExtensionAttribute]
public static IWorkspaceInfo ToWorkspaceInfo(WorkspaceSettingsKey workspaceSettings);
    [ExtensionAttribute]
public static IWorkspaceIndex ToWorkspaceIndex(WorkspaceSettingsKey workspaceSettings, ISettings settingsStore);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Dal.Workspace.WorkspaceStorage : object {
    private static ReadonlyToken ourReadonlyToken;
    private ILogger myLogger;
    private ISettingsFactory mySettingsFactory;
    private IFileSystemTracker myFileSystemTracker;
    private Lifetime myLifetime;
    private object myWorkspaceListFileAccess;
    private SettingsFileLive myWorkspaceListFile;
    private Dictionary`2<ProfileConfiguration, Pair`2<GuidIndex, ProfileConfigurationHistoryItem>> myProfileConfigurationsIndex;
    private ListEvents`1<WorkspaceHistoryItem> myWorkspaces;
    private ListEvents`1<ProfileConfigurationHistoryItem> myProfileConfigurations;
    [CompilerGeneratedAttribute]
private static Func`2<Pair`2<GuidIndex, WorkspaceHistoryItemSettingsKey>, WorkspaceHistoryItemSettingsKey> CS$<>9__CachedAnonymousMethodDelegate1b;
    [CompilerGeneratedAttribute]
private static Action`1<IIndexedKey`1<WorkspaceHistoryItemSettingsKey>> CS$<>9__CachedAnonymousMethodDelegate1d;
    [CompilerGeneratedAttribute]
private static Func`2<IRecentNode, FileSystemPath> CS$<>9__CachedAnonymousMethodDelegate33;
    public IListEvents`1<ProfileConfigurationHistoryItem> ProfileConfigurations { get; }
    public IListEvents`1<WorkspaceHistoryItem> Workspaces { get; }
    public WorkspaceStorage(Lifetime lifetime, IAnyProductSettingsLocation productLocation, ISettingsFactory settingsFactory, IFileSystemTracker fileSystemTracker, IHostManager hostManager, IHistoryManager oldHistoryManager);
    private static WorkspaceStorage();
    [CanBeNullAttribute]
private ProfileConfiguration LoadProfileConfiguration(Pair`2<GuidIndex, ProfileConfigurationSettingsKey> pair, IHostManager hostManager);
    private void LoadWorkspaceItems(GuidIndex profileConfigurationIndex, ProfileConfiguration profileConfiguration);
    public sealed virtual IListEvents`1<ProfileConfigurationHistoryItem> get_ProfileConfigurations();
    public sealed virtual IListEvents`1<WorkspaceHistoryItem> get_Workspaces();
    public sealed virtual void AddWorkspace(FileSystemPath workspaceIndexFilePath, ProfileConfiguration profileConfiguration);
    private void AddWorkspace(FileSystemPath workspaceIndexFilePath, ProfileConfiguration profileConfiguration, Nullable`1<GuidIndex> workspaceSettingsKeyIndex, Nullable`1<GuidIndex> profileConfigurationSettingsKeyIndex);
    private GuidIndex AddProfileConfiguration(ProfileConfiguration profileConfiguration, Nullable`1<GuidIndex> existentSettingsKeyIndex);
    private void DetachWorkspacesFromProfileConfiguration(ProfileConfiguration profileConfiguration);
    private WorkspaceHistoryItem CreateWorkspaceHistoryItem(ProfileConfiguration profileConfiguration, IIndexedKey`1<WorkspaceHistoryItemSettingsKey> whiKey, FileSystemPath workspaceFilePath, FullLifetimeDefinition fullLtd);
    private static WorkspaceSettingsKey InitializeWorkspaceIdForOldWorkspaceIfNeeded(WorkspaceSettingsKey workspaceSettingsEntry, IKey`1<WorkspaceSettingsKey> workspaceKey, SettingsFileLive workspaceFile);
    private long GetWorkspaceSize(FileSystemPath workspaceFilePath);
    private void MigrateHistoryFromOldStorage(IHistoryManager oldHistoryManager);
    private void ProcessHistoryChoice(IHistoryChoice historyChoice);
    private void ImportWorkspaceFromOldHistory(FileSystemPath workspaceIndexFilePath, ProfileConfiguration profileConfiguration);
    private void DeleteCorruptedKeys(List`1<GuidIndex> corruptedKeys);
    [CompilerGeneratedAttribute]
private void <AddWorkspace>b__c(IIndexedKey`1<WorkspaceHistoryItemSettingsKey> _);
    [CompilerGeneratedAttribute]
private static WorkspaceHistoryItemSettingsKey <DetachWorkspacesFromProfileConfiguration>b__17(Pair`2<GuidIndex, WorkspaceHistoryItemSettingsKey> _);
    [CompilerGeneratedAttribute]
private static void <DetachWorkspacesFromProfileConfiguration>b__1a(IIndexedKey`1<WorkspaceHistoryItemSettingsKey> _);
    [CompilerGeneratedAttribute]
private static FileSystemPath <ProcessHistoryChoice>b__31(IRecentNode _);
}
public class JetBrains.dotMemory.Dal.Workspace.ZippedConfigurationWorkspaceImporter : ZippedWorkspaceImporterBase {
    [CompilerGeneratedAttribute]
private static Func`2<ZipEntry, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    protected virtual ZipEntry TryGetIndexEntry(ZipFile zip);
    [CompilerGeneratedAttribute]
private static bool <TryGetIndexEntry>b__9(ZipEntry x);
}
public class JetBrains.dotMemory.Dal.Workspace.ZippedJsonWorkspaceProcessor : ZippedWorkspaceProcessorBase {
    private static string ourWorkspaceDotJson;
    private bool myCompatibilityMode;
    [CompilerGeneratedAttribute]
private static Func`2<ZipEntry, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    public ZippedJsonWorkspaceProcessor(bool compatibilityMode);
    private static ZippedJsonWorkspaceProcessor();
    protected virtual ZipEntry TryGetIndexEntry(ZipFile zip);
    protected virtual void AddIndexEntry(ZipFile zip, IWorkspaceIndex workspaceIndex, Stream serializedIndex);
    [CompilerGeneratedAttribute]
private static bool <TryGetIndexEntry>b__1(ZipEntry x);
}
public class JetBrains.dotMemory.Dal.Workspace.ZippedSettingsWorkspaceImporter : ZippedWorkspaceProcessorBase {
    private static string ourWorkspaceDotIdx;
    [CompilerGeneratedAttribute]
private static Func`2<ZipEntry, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public ZippedSettingsWorkspaceImporter(ISettingsFactory settingsFactory);
    private static ZippedSettingsWorkspaceImporter();
    protected virtual ZipEntry TryGetIndexEntry(ZipFile zip);
    protected virtual void AddIndexEntry(ZipFile zip, IWorkspaceIndex workspaceIndex, Stream stream);
    [CompilerGeneratedAttribute]
private static bool <TryGetIndexEntry>b__0(ZipEntry x);
}
public abstract class JetBrains.dotMemory.Dal.Workspace.ZippedWorkspaceImporterBase : object {
    protected IWorkspaceIndexSerializer Serializer;
    [CompilerGeneratedAttribute]
private static Func`2<ZipEntry, long> CS$<>9__CachedAnonymousMethodDelegate3;
    protected ZippedWorkspaceImporterBase(IWorkspaceIndexSerializer serializer);
    public sealed virtual IWorkspaceInfo TryReadInfo(FileSystemPath workspacePath);
    public sealed virtual IWorkspaceIndex ReadData(FileSystemPath workspacePath, FileSystemPath targetFolder, IExecutionController executionController);
    protected virtual ISet`1<RelativePath> GetContentPaths();
    [CanBeNullAttribute]
protected abstract virtual ZipEntry TryGetIndexEntry(ZipFile zip);
    private static void TuneupWorkspaceInfo(FileSystemPath workspacePath, ZipEntry indexEntry, IWorkspaceInfo workspaceInfo);
    [CompilerGeneratedAttribute]
private static long <ReadData>b__2(ZipEntry x);
}
public abstract class JetBrains.dotMemory.Dal.Workspace.ZippedWorkspaceProcessorBase : ZippedWorkspaceImporterBase {
    protected ZippedWorkspaceProcessorBase(IWorkspaceIndexSerializer serializer);
    public sealed virtual void WriteIndexAndData(IWorkspaceIndex workspaceIndex, FileSystemPath sourceFolder, FileSystemPath workspacePath, IExecutionController executionController);
    private static ISet`1<RelativePath> ExcludeDataCacheFolder(FileSystemPath rootFullPath, ISet`1<RelativePath> paths);
    protected abstract virtual void AddIndexEntry(ZipFile zip, IWorkspaceIndex workspaceIndex, Stream serializedIndex);
}
[ZoneMarkerAttribute]
public class JetBrains.dotMemory.Dal.ZoneMarker : object {
}
