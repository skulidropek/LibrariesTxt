public enum JetBrains.dotMemory.Model.Interface.AccessMark : Enum {
    public byte value__;
    public static AccessMark Accessible;
    public static AccessMark Inaccessible;
    public static AccessMark StaticsStorage;
}
[DataContractAttribute]
public class JetBrains.dotMemory.Model.Interface.Allocations.AllocationsInfoLink : object {
    [CompilerGeneratedAttribute]
private CallTreeLink <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ObjectsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <BytesCount>k__BackingField;
    [DataMemberAttribute]
public CallTreeLink Link { get; private set; }
    [DataMemberAttribute]
public UInt32 ObjectsCount { get; private set; }
    [DataMemberAttribute]
public ulong BytesCount { get; private set; }
    public AllocationsInfoLink(CallTreeLink link, UInt32 objectsCount, ulong bytesCount);
    [CompilerGeneratedAttribute]
public CallTreeLink get_Link();
    [CompilerGeneratedAttribute]
private void set_Link(CallTreeLink value);
    [CompilerGeneratedAttribute]
public UInt32 get_ObjectsCount();
    [CompilerGeneratedAttribute]
private void set_ObjectsCount(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_BytesCount();
    [CompilerGeneratedAttribute]
private void set_BytesCount(ulong value);
    public void Add(UInt32 objectsCount, ulong bytesCount);
}
public class JetBrains.dotMemory.Model.Interface.Allocations.BactraceTreeLink : AllocationsInfoLink {
    [CompilerGeneratedAttribute]
private CallTreeLink <Origin>k__BackingField;
    public CallTreeLink Origin { get; private set; }
    public BactraceTreeLink(CallTreeLink link, UInt32 objectsCount, ulong bytesCount, CallTreeLink origin);
    [CompilerGeneratedAttribute]
public CallTreeLink get_Origin();
    [CompilerGeneratedAttribute]
private void set_Origin(CallTreeLink value);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Model.Interface.Allocations.CallTreeLink : ValueType {
    [DataMemberAttribute]
private SnapshotId mySnapshotId;
    [DataMemberAttribute]
private UInt32 myCallTreeNumber;
    [DataMemberAttribute]
private UInt32 myCallTreePtr;
    public SnapshotId SnapshotId { get; }
    public UInt32 CallTreeNumber { get; }
    public UInt32 CallTreePtr { get; }
    public CallTreeLink(SnapshotId snapshotId, UInt32 callTreeNumber, UInt32 callTreePtr);
    public SnapshotId get_SnapshotId();
    public UInt32 get_CallTreeNumber();
    public UInt32 get_CallTreePtr();
    public sealed virtual bool Equals(CallTreeLink other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class JetBrains.dotMemory.Model.Interface.Allocations.DfsInfoLink : ValueType {
    [DataMemberAttribute]
public CallTreeLink Link;
    [DataMemberAttribute]
public UInt32 DfsEnterTime;
    [DataMemberAttribute]
public UInt32 DfsExitTime;
    public DfsInfoLink(CallTreeLink link, UInt32 dfsEnterTime, UInt32 dfsExitTime);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IAggregatedByAllocationRootGroup {
    public Nullable`1<MethodId> FunctionId { get; }
    public bool IsPreviousToProfilation { get; }
    public bool IsSkipped { get; }
    public ulong TotalAllocatedObjectsCount { get; }
    public ulong TotalAllocatedObjectsSize { get; }
    public abstract virtual Nullable`1<MethodId> get_FunctionId();
    public abstract virtual bool get_IsPreviousToProfilation();
    public abstract virtual bool get_IsSkipped();
    public abstract virtual ulong get_TotalAllocatedObjectsCount();
    public abstract virtual ulong get_TotalAllocatedObjectsSize();
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IAllocationCallstackService {
    public abstract virtual IEnumerable`1<MethodId> GetCallstack(IAllocationPoint allocationPoint, IExecutionController executionController);
    public abstract virtual IReadOnlyCollection`1<IObjectsByAllocationRootGroup> AggregateObjectsByAllocationRoot(IEnumerable`1<IAllocationPoint> allocationPoints, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IAllocationInfoAggregator {
    [ObsoleteAttribute]
[NotNullAttribute]
public abstract virtual FunctionAggregate`1<BactraceTreeLink> Aggregate(ISnapshotScope snapshotScope, IReadOnlyCollection`1<ObjectNumber> objectNumbers, IExecutionController executionController);
    [NotNullAttribute]
public abstract virtual FunctionAggregate`1<BactraceTreeLink> Aggregate(IReadOnlyCollection`1<IAllocationPoint> allocationPoints, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IAllocationPoint {
    public UInt32 CallTreeNumber { get; }
    public UInt32 CallTreeNodePtr { get; }
    public UInt32 Fuid { get; }
    public ISnapshot Snapshot { get; }
    public ObjectNumber ObjectNumber { get; }
    public bool IsPreviousToProfilation { get; }
    public bool IsSkippedAllocation { get; }
    public abstract virtual UInt32 get_CallTreeNumber();
    public abstract virtual UInt32 get_CallTreeNodePtr();
    public abstract virtual UInt32 get_Fuid();
    public abstract virtual ISnapshot get_Snapshot();
    public abstract virtual ObjectNumber get_ObjectNumber();
    public abstract virtual bool get_IsPreviousToProfilation();
    public abstract virtual bool get_IsSkippedAllocation();
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IAllocationPointsService {
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IAllocationPoint> GetAllocationPoints(ISnapshotScope snapshotScope, IObjectSetReference objectSetReference, IExecutionController executionController);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IAllocationPoint> GetAllocationPoints(ISnapshotScope snapshotScope, IReadOnlyCollection`1<ObjectNumber> objectNumbers, IExecutionController executionController);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<IAllocationPoint> GetAllocationPoints(ISnapshotScope snapshotScope, IReadOnlyCollection`1<FinalizedObject> finalizedObjects, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IBacktraceNodeExpander {
    public abstract virtual IReadOnlyCollection`1<FunctionStatistics`1<BactraceTreeLink>> Expand(IReadOnlyCollection`1<BactraceTreeLink> nodeLinks, ICallTreeForestLong callTreeForestLong, IExecutionController executionController);
    public abstract virtual bool HasChildren(IReadOnlyCollection`1<BactraceTreeLink> nodeLinks, ICallTreeForestLong forestLong);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.ICallTreeForestLong {
    public abstract virtual ICallTree GetCallTree(SnapshotId snapshotId, UInt32 callTreeNumber);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.ICallTreeForestShort {
    public abstract virtual IEntityReference`1<ICallTree> GetCallTreeReference(SnapshotId snapshotId, int callTreeNumber);
    public abstract virtual ICallTree GetCallTree(SnapshotId snapshotId, int callTreeNumber, Lifetime lifetime);
    public abstract virtual IReadOnlyList`1<FuidToCallPointIndex> GetCallPointIndices(SnapshotId snapshotId, int callTreeNumber, IExecutionController controller);
    public abstract virtual IFuidCallPointsExtractor GetFuidCallPointsExtractor(SnapshotId snapshotId, int callTreeNunmer);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IObjectsByAllocationRootGroup {
    public IEnumerable`1<ObjectNumber> AllocatedObjects { get; }
    public abstract virtual IEnumerable`1<ObjectNumber> get_AllocatedObjects();
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IObjectsByCallTreeGroup {
    public UInt32 CallTreeNumber { get; }
    public SnapshotId SnapshotId { get; }
    public IReadOnlyList`1<ObjectNumberCallTreeEntranceTime> Group { get; }
    public abstract virtual UInt32 get_CallTreeNumber();
    public abstract virtual SnapshotId get_SnapshotId();
    public abstract virtual IReadOnlyList`1<ObjectNumberCallTreeEntranceTime> get_Group();
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IObjectsByCallTreeGrouper {
    public abstract virtual IReadOnlyCollection`1<IObjectsByCallTreeGroup> Group(ISnapshotScope snapshotScope, IObjectSetReference objectSetReference, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.IObjectToCallTreeNodeLinker {
    public abstract virtual void LinkObjectsToNode(IObjectsByCallTreeGroup objectGroup, UInt32 nodeEnterTime, UInt32 nodeExitTime, Action`2<bool, ObjectNumber> linkAction);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.ITreeFindByNameIndexBuilder {
    public abstract virtual IReadOnlyCollection`1<ITreeFindByNameIndexEntry> BuildSearchIndex(IReadOnlyCollection`1<IObjectsByCallTreeGroup> objectGroups, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.ITreeFindByNameIndexEntry {
    public MethodId Method { get; }
    public IReadOnlyList`1<ITreeFindByNameIndexEntryData> Groups { get; }
    public abstract virtual MethodId get_Method();
    public abstract virtual IReadOnlyList`1<ITreeFindByNameIndexEntryData> get_Groups();
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.ITreeFindByNameIndexEntryData {
    public SnapshotId SnapshotId { get; }
    public UInt32 CallTreeNumber { get; }
    public IReadOnlyList`1<UInt32> DfsEnterTimes { get; }
    public abstract virtual SnapshotId get_SnapshotId();
    public abstract virtual UInt32 get_CallTreeNumber();
    public abstract virtual IReadOnlyList`1<UInt32> get_DfsEnterTimes();
}
public interface JetBrains.dotMemory.Model.Interface.Allocations.ITreeNodeStatistics {
    public UInt32 OwnAllocatedObjectsCount { get; }
    public ulong OwnAllocatedObjectsSize { get; }
    public UInt32 SubTreeAllocatedObjectsCount { get; }
    public ulong SubTreeAllocatedObjectsSize { get; }
    public MethodId FunctionId { get; }
    public bool AllObjectsAllocatedInNode { get; }
    public abstract virtual UInt32 get_OwnAllocatedObjectsCount();
    public abstract virtual ulong get_OwnAllocatedObjectsSize();
    public abstract virtual UInt32 get_SubTreeAllocatedObjectsCount();
    public abstract virtual ulong get_SubTreeAllocatedObjectsSize();
    public abstract virtual MethodId get_FunctionId();
    public abstract virtual UInt32 GetCallTreePtr(SnapshotId snapshotId, UInt32 callTreeNumber);
    public abstract virtual bool ContainsLinkToCallTree(SnapshotId snapshotId, UInt32 callTreeNumber);
    public abstract virtual bool get_AllObjectsAllocatedInNode();
    public abstract virtual IEnumerable`1<DfsInfoLink> GetCallTreeLinks();
}
public class JetBrains.dotMemory.Model.Interface.Allocations.ObjectNumberCallTreeEntranceTime : ValueType {
    [CompilerGeneratedAttribute]
private ObjectNumber <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Time>k__BackingField;
    public ObjectNumber ObjectNumber { get; private set; }
    public UInt32 Time { get; private set; }
    public ObjectNumberCallTreeEntranceTime(ObjectNumber objectNumber, UInt32 time);
    [CompilerGeneratedAttribute]
public ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectNumber(ObjectNumber value);
    [CompilerGeneratedAttribute]
public UInt32 get_Time();
    [CompilerGeneratedAttribute]
private void set_Time(UInt32 value);
}
public class JetBrains.dotMemory.Model.Interface.AnnularSector : ValueType {
    public double Alpha1;
    public double Alpha2;
    public double SmallRadius;
    public double LargeRadius;
    public AnnularSector(double alpha1, double alpha2, double smallRadius, double largeRadius);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.Async.ApmCollectionExtension : object {
    [ExtensionAttribute]
public static AsyncCollection`1<T> ToAsyncCollection(T collection, IDataProvider`1<ProgressProvider[]> progressProvider, IAsyncTaskDispatcher asyncTaskDispatcher, object taskId);
}
public class JetBrains.dotMemory.Model.Interface.Async.AsyncCollection`1 : object {
    public T Collection;
    public IDataProvider`1<ProgressProvider[]> ProgressProvider;
    public Action SetAsMostPriority;
    public AsyncCollection`1(T collection, IDataProvider`1<ProgressProvider[]> progressProvider, Action setAsMostPriority);
}
public class JetBrains.dotMemory.Model.Interface.Async.AsyncNotifier`1 : object {
    public IDataNotifier`1<T> Notifier;
    public Action SetAsMostPriority;
    public IDataProvider`1<ProgressProvider[]> ProgressProvider;
    public AsyncNotifier`1(IDataNotifier`1<T> notifier, Action setAsMostPriority, IDataProvider`1<ProgressProvider[]> progressProvider);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.Async.AsyncNotifierExtension : object {
    [ExtensionAttribute]
public static AsyncNotifier`1<T> PublishAsyncNotifier(IDataProvider`1<T> pipe, Lifetime lifetime, IAsyncTaskDispatcher asyncTaskDispatcher, object taskId);
}
public class JetBrains.dotMemory.Model.Interface.Async.AsyncPipe`1 : object {
    public IDataProvider`1<T> Provider;
    public Action SetAsMostPriority;
    public AsyncPipe`1(IDataProvider`1<T> provider, Action setAsMostPriority);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.Async.AsyncPipeExtension : object {
    [ExtensionAttribute]
public static AsyncNotifier`1<T> PublishAndActivate(AsyncPipe`1<T> pipe, Lifetime lifetime);
    [ExtensionAttribute]
public static AsyncPipe`1<T> AsAsyncPipe(IDataProvider`1<T> provider, IAsyncTaskDispatcher asyncTaskDispatcher, object asyncTaskId);
}
public class JetBrains.dotMemory.Model.Interface.Async.GetAsyncNotifier`1 : MulticastDelegate {
    public GetAsyncNotifier`1(object object, IntPtr method);
    public virtual AsyncNotifier`1<T> Invoke(Lifetime lifetime);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, AsyncCallback callback, object object);
    public virtual AsyncNotifier`1<T> EndInvoke(IAsyncResult result);
}
public class JetBrains.dotMemory.Model.Interface.BfsData : object {
    private ChunkArray`1<byte> myMark;
    private StubChunkArray`1<ObjectNumber> mySpanningTree;
    private StubChunkArray`1<ObjectNumber> myProcessOrder;
    private StubChunkArray`1<int> myLevel;
    private IArray`1<int> myReferenceIndexSpanningTree;
    [CompilerGeneratedAttribute]
private int <GraphSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TraversedNodesCount>k__BackingField;
    public int GraphSize { get; private set; }
    public int TraversedNodesCount { get; public set; }
    public IArray`1<byte> Mark { get; }
    public IArray`1<ObjectNumber> SpanningTree { get; }
    public IArray`1<int> ReferenceIndexSpanningTree { get; }
    public IArray`1<ObjectNumber> ProcessOrder { get; }
    public IArray`1<int> Level { get; }
    public BfsData(int size, bool collectSpanningTree, bool collectEdgeSpanningTree, bool collectOrder, bool collectLevel);
    [CompilerGeneratedAttribute]
public sealed virtual int get_GraphSize();
    [CompilerGeneratedAttribute]
private void set_GraphSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TraversedNodesCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TraversedNodesCount(int value);
    public sealed virtual IArray`1<byte> get_Mark();
    public sealed virtual IArray`1<ObjectNumber> get_SpanningTree();
    public sealed virtual IArray`1<int> get_ReferenceIndexSpanningTree();
    public sealed virtual IArray`1<ObjectNumber> get_ProcessOrder();
    public sealed virtual IArray`1<int> get_Level();
}
[DataContractAttribute]
public class JetBrains.dotMemory.Model.Interface.CanNavigateAnswer : object {
    [CompilerGeneratedAttribute]
private int <Pid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanNavigate>k__BackingField;
    [DataMemberAttribute]
public int Pid { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public bool CanNavigate { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Pid();
    [CompilerGeneratedAttribute]
public void set_Pid(int value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public bool get_CanNavigate();
    [CompilerGeneratedAttribute]
public void set_CanNavigate(bool value);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.Comparison.ComparisonPairExtensions : object {
    [ExtensionAttribute]
public static TEntity GetItem(IComparisonPair`1<TEntity> pair, bool first);
}
[DebuggerDisplayAttribute("{TypeName}:{BaseTypeStatistics}, {OtherTypeStatistics}")]
public class JetBrains.dotMemory.Model.Interface.Comparison.CrossWorkspaceTypeStatistics : ValueType {
    private ITypeName myTypeName;
    private TypeStatistics myBaseTypeStatistics;
    private TypeStatistics myOtherTypeStatistics;
    public ITypeName TypeName { get; }
    [CanBeNullAttribute]
public TypeStatistics BaseTypeStatistics { get; }
    [CanBeNullAttribute]
public TypeStatistics OtherTypeStatistics { get; }
    public CrossWorkspaceTypeStatistics(ITypeName typeName, TypeStatistics baseTypeStatistics, TypeStatistics otherTypeStatistics);
    public ITypeName get_TypeName();
    public TypeStatistics get_BaseTypeStatistics();
    public TypeStatistics get_OtherTypeStatistics();
}
public interface JetBrains.dotMemory.Model.Interface.Comparison.IComparisonDescription {
    public ISnapshotScope OldSnapshot { get; }
    public ISnapshotScope NewSnapshot { get; }
    public string ComparisonId { get; }
    public SnapshotId OldSnapshotId { get; }
    public SnapshotId NewSnapshotId { get; }
    public abstract virtual ISnapshotScope get_OldSnapshot();
    public abstract virtual ISnapshotScope get_NewSnapshot();
    public abstract virtual string get_ComparisonId();
    public abstract virtual SnapshotId get_OldSnapshotId();
    public abstract virtual SnapshotId get_NewSnapshotId();
}
public interface JetBrains.dotMemory.Model.Interface.Comparison.IComparisonDescriptionBuilder {
    public abstract virtual IComparisonDescription Build(ISnapshotScope snapshot1, ISnapshotScope snapshot2);
}
public interface JetBrains.dotMemory.Model.Interface.Comparison.IComparisonPair`1 {
    public TEntity First { get; }
    public TEntity Second { get; }
    public abstract virtual TEntity get_First();
    public abstract virtual TEntity get_Second();
}
public interface JetBrains.dotMemory.Model.Interface.Comparison.ICrossWorkspaceSnapshotsComparisonService {
    public abstract virtual IReadOnlyCollection`1<CrossWorkspaceTypeStatistics> Calculate(IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Comparison.ISnapshotComparer {
    public abstract virtual IReadOnlyCollection`1<TypeComparisonInfo> Compare(IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Comparison.ISnapshotsComparisonSummaryCalculator {
    public abstract virtual SnapshotsComparisonSummary Calculate(IExecutionController executionController);
}
public class JetBrains.dotMemory.Model.Interface.Comparison.SnapshotsComparisonSummary : object {
    private int mySurvivedCount;
    private int myDeadCount;
    private int myNewCount;
    private long mySurvivedBytes;
    private long myDeadBytes;
    private long myNewBytes;
    private PropertyChangedEventHandler PropertyChanged;
    public int DeadCount { get; }
    public int NewCount { get; }
    public int SurvivedCount { get; }
    public long DeadBytes { get; }
    public long NewBytes { get; }
    public long SurvivedBytes { get; }
    public SnapshotsComparisonSummary(int deadCount, int newCount, int survivedCount, long deadBytes, long newBytes, long survivedBytes);
    public int get_DeadCount();
    public int get_NewCount();
    public int get_SurvivedCount();
    public long get_DeadBytes();
    public long get_NewBytes();
    public long get_SurvivedBytes();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public enum JetBrains.dotMemory.Model.Interface.Comparison.SurvivedObjectsOrigin : Enum {
    public int value__;
    public static SurvivedObjectsOrigin None;
    public static SurvivedObjectsOrigin FromOldSnapshot;
    public static SurvivedObjectsOrigin FromNewSnapshot;
}
public class JetBrains.dotMemory.Model.Interface.Comparison.TypeComparisonInfo : object {
    private TypeId myTypeId;
    [CompilerGeneratedAttribute]
private int <NewObjectsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <NewBytesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CollectedObjectsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <CollectedBytesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SurvivedObjectsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SurvivedBytesCount>k__BackingField;
    public int NewObjectsCount { get; private set; }
    public ulong NewBytesCount { get; private set; }
    public int CollectedObjectsCount { get; private set; }
    public ulong CollectedBytesCount { get; private set; }
    public int SurvivedObjectsCount { get; private set; }
    public ulong SurvivedBytesCount { get; private set; }
    public TypeId TypeId { get; }
    public TypeComparisonInfo(TypeId typeId);
    [CompilerGeneratedAttribute]
public int get_NewObjectsCount();
    [CompilerGeneratedAttribute]
private void set_NewObjectsCount(int value);
    [CompilerGeneratedAttribute]
public ulong get_NewBytesCount();
    [CompilerGeneratedAttribute]
private void set_NewBytesCount(ulong value);
    [CompilerGeneratedAttribute]
public int get_CollectedObjectsCount();
    [CompilerGeneratedAttribute]
private void set_CollectedObjectsCount(int value);
    [CompilerGeneratedAttribute]
public ulong get_CollectedBytesCount();
    [CompilerGeneratedAttribute]
private void set_CollectedBytesCount(ulong value);
    [CompilerGeneratedAttribute]
public int get_SurvivedObjectsCount();
    [CompilerGeneratedAttribute]
private void set_SurvivedObjectsCount(int value);
    [CompilerGeneratedAttribute]
public ulong get_SurvivedBytesCount();
    [CompilerGeneratedAttribute]
private void set_SurvivedBytesCount(ulong value);
    public TypeId get_TypeId();
    public void AddCollected(int objectsCount, ulong bytesCount);
    public void AddNew(int objectsCount, ulong bytesCount);
    public void AddSurvived(int objectsCount, ulong bytesCount);
}
public static class JetBrains.dotMemory.Model.Interface.Conditional : object {
    public static string Debug;
}
public enum JetBrains.dotMemory.Model.Interface.DataKind : Enum {
    public int value__;
    public static DataKind Interface;
    public static DataKind Class;
    public static DataKind ValueType;
    public static DataKind Enum;
    public static DataKind Delegate;
}
public static class JetBrains.dotMemory.Model.Interface.DebugAssert : object {
    [ConditionalAttribute("DEBUG")]
public static void That(bool condition);
}
public class JetBrains.dotMemory.Model.Interface.DfsData : object {
    private int mySize;
    private StubChunkArray`1<ObjectNumber> myPreOrder;
    private StubChunkArray`1<ObjectNumber> myPostOrder;
    private StubChunkArray`1<int> myExitTime;
    private StubChunkArray`1<int> myEnterTime;
    private StubChunkArray`1<ObjectNumber> mySpanningTree;
    private ChunkArray`1<byte> myMarks;
    [CompilerGeneratedAttribute]
private int <TraversedNodesCount>k__BackingField;
    public int GraphSize { get; }
    public int TraversedNodesCount { get; public set; }
    public IArray`1<byte> Mark { get; }
    public IArray`1<ObjectNumber> SpanningTree { get; }
    public IArray`1<int> EnterTime { get; }
    public IArray`1<int> ExitTime { get; }
    public IArray`1<ObjectNumber> PreOrder { get; }
    public IArray`1<ObjectNumber> PostOrder { get; }
    public DfsData(int size, bool collectSpanningTree, bool collectPreOrder, bool collectEnterTime, bool collectPostOrder, bool collectExitTime);
    public sealed virtual int get_GraphSize();
    [CompilerGeneratedAttribute]
public sealed virtual int get_TraversedNodesCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TraversedNodesCount(int value);
    public sealed virtual IArray`1<byte> get_Mark();
    public sealed virtual IArray`1<ObjectNumber> get_SpanningTree();
    public sealed virtual IArray`1<int> get_EnterTime();
    public sealed virtual IArray`1<int> get_ExitTime();
    public sealed virtual IArray`1<ObjectNumber> get_PreOrder();
    public sealed virtual IArray`1<ObjectNumber> get_PostOrder();
}
public class JetBrains.dotMemory.Model.Interface.Dominators.CompactDominatorTree : object {
    private CompactDominatorTreeNode myRoot;
    [NotNullAttribute]
public CompactDominatorTreeNode Root { get; }
    private CompactDominatorTree(CompactDominatorTreeNode root);
    public CompactDominatorTreeNode get_Root();
    public static CompactDominatorTree Build(IObjectSetReference objectSetRef, IEntityReference`1<IDominatorTreeParentCollection> dominatorParentsRef, IEntityReference`1<IObjectTypeCollection> objectTypesRef, IEntityReference`1<IObjectSizeCollection> objectSizesRef, IExecutionController executionController);
}
public class JetBrains.dotMemory.Model.Interface.Dominators.CompactDominatorTreeNode : object {
    private CompactDominatorTreeNode myParent;
    private TypeId myObjectsType;
    private IArray`1<CompactDominatorTreeNode> myChildren;
    private int myObjectsCount;
    private int myRetainedObjectsCount;
    private ulong myRetainedBytes;
    private bool myIsContainedInSet;
    public TypeId ObjectsType { get; }
    public int ObjectsCount { get; }
    public int RetainedObjectsCount { get; }
    public ulong RetainedBytes { get; }
    public bool IsContainedInSet { get; }
    [NotNullAttribute]
public IReadOnlyList`1<CompactDominatorTreeNode> Children { get; }
    [CanBeNullAttribute]
public CompactDominatorTreeNode Parent { get; }
    private CompactDominatorTreeNode(CompactDominatorTreeNode parent, TypeId objectType);
    public TypeId get_ObjectsType();
    public int get_ObjectsCount();
    public int get_RetainedObjectsCount();
    public ulong get_RetainedBytes();
    public bool get_IsContainedInSet();
    public IReadOnlyList`1<CompactDominatorTreeNode> get_Children();
    public CompactDominatorTreeNode get_Parent();
}
public interface JetBrains.dotMemory.Model.Interface.Dominators.IDominatorTreeCalculator {
    public abstract virtual ChunkArray`1<ObjectNumber> Calculate(TraverseGraphResult dfsResult, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Dominators.IDominatorTreeParentCollection {
}
public interface JetBrains.dotMemory.Model.Interface.Dominators.IObjectNumberTreeParentCollection {
}
public class JetBrains.dotMemory.Model.Interface.FunctionAggregate`1 : object {
    private IReadOnlyCollection`1<FunctionStatistics`1<T>> myGroups;
    private UInt32 myTotalObjectsCount;
    private ulong myTotalMemoryAmount;
    private UInt32 mySkippedObjectsCount;
    private ulong mySkippedMemoryAmount;
    private UInt32 myPriorToProfilationObjectsCount;
    private ulong myPriorToProfilationMemoryAmount;
    [NotNullAttribute]
public IReadOnlyCollection`1<FunctionStatistics`1<T>> Groups { get; }
    public UInt32 TotalObjectsCount { get; }
    public ulong TotalMemoryAmount { get; }
    public UInt32 SkippedObjectsCount { get; }
    public ulong SkippedMemoryAmount { get; }
    public UInt32 PriorToProfilationObjectsCount { get; }
    public ulong PriorToProfilationMemoryAmount { get; }
    public FunctionAggregate`1(IReadOnlyCollection`1<FunctionStatistics`1<T>> groups, UInt32 skippedObjectsCount, ulong skippedMemoryAmount, UInt32 priorToProfilationObjectsCount, ulong priorToProfilationMemoryAmount);
    public FunctionAggregate`1(IReadOnlyCollection`1<FunctionStatistics`1<T>> groups);
    public IReadOnlyCollection`1<FunctionStatistics`1<T>> get_Groups();
    public UInt32 get_TotalObjectsCount();
    public ulong get_TotalMemoryAmount();
    public UInt32 get_SkippedObjectsCount();
    public ulong get_SkippedMemoryAmount();
    public UInt32 get_PriorToProfilationObjectsCount();
    public ulong get_PriorToProfilationMemoryAmount();
}
public static class JetBrains.dotMemory.Model.Interface.FunctionSignatureModel.FunctionSignatureConstants : object {
    public static string OpenFunctionBrace;
    public static string CloseFunctionBrace;
    public static string ParameterDelimiter;
    public static string ParameterTypeAndNameDelimeter;
    public static string FunctionNameDelimeter;
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.FunctionSignatureModel.FunctionSignatureExtenstions : object {
    [CompilerGeneratedAttribute]
private static Func`2<IParameter, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static string GetSignature(IFunctionSignature signature);
    [CompilerGeneratedAttribute]
private static string <GetSignature>b__0(IParameter p);
}
public interface JetBrains.dotMemory.Model.Interface.FunctionSignatureModel.IFunctionService {
    public abstract virtual IFunctionSignature Get(MethodId methodId);
}
public interface JetBrains.dotMemory.Model.Interface.FunctionSignatureModel.IFunctionSignature {
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public IFunctionSignature ExplicitlyImplementedMethod { get; }
    [NotNullAttribute]
public ITypeName DeclaringClass { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<string> GenericArguments { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<IParameter> Parameters { get; }
    [NotNullAttribute]
public ITypeName ReturnValue { get; }
    public bool IsCtor { get; }
    public bool NonClrMethod { get; }
    public abstract virtual string get_Name();
    public abstract virtual IFunctionSignature get_ExplicitlyImplementedMethod();
    public abstract virtual ITypeName get_DeclaringClass();
    public abstract virtual IReadOnlyCollection`1<string> get_GenericArguments();
    public abstract virtual IReadOnlyCollection`1<IParameter> get_Parameters();
    public abstract virtual ITypeName get_ReturnValue();
    public abstract virtual bool get_IsCtor();
    public abstract virtual bool get_NonClrMethod();
}
public interface JetBrains.dotMemory.Model.Interface.FunctionSignatureModel.IFunctionSignatureCache {
    [NotNullAttribute]
public abstract virtual IFunctionSignature GetOrCreate(MethodId methodId, Func`2<MethodId, IFunctionSignature> createFunctionSignature);
}
public interface JetBrains.dotMemory.Model.Interface.FunctionSignatureModel.IParameter {
    public string Name { get; }
    public ITypeName Type { get; }
    public abstract virtual string get_Name();
    public abstract virtual ITypeName get_Type();
}
public class JetBrains.dotMemory.Model.Interface.FunctionStatistics`1 : object {
    private MethodId myMethodId;
    private IReadOnlyCollection`1<T> myLinks;
    private UInt32 myTotalObjectsCount;
    private ulong myTotalMemoryAmount;
    public IReadOnlyCollection`1<T> Links { get; }
    public UInt32 TotalObjectsCount { get; }
    public ulong TotalMemoryAmount { get; }
    public MethodId MethodId { get; }
    public FunctionStatistics`1(MethodId methodId, IReadOnlyCollection`1<T> links);
    public IReadOnlyCollection`1<T> get_Links();
    public UInt32 get_TotalObjectsCount();
    public ulong get_TotalMemoryAmount();
    public MethodId get_MethodId();
}
public class JetBrains.dotMemory.Model.Interface.Graph : object {
    private ChunkArray`1<int> myNodes;
    private ChunkArray`1<ObjectNumber> myAdjacencyList;
    public int NodesCount { get; }
    public int EdgesCount { get; }
    public GraphData GraphData { get; }
    public Graph(GraphData graphData);
    public sealed virtual int get_NodesCount();
    public sealed virtual int get_EdgesCount();
    public GraphData get_GraphData();
    public sealed virtual int GetReferencesCount(ObjectNumber objectNumber);
    public sealed virtual IEnumerable`1<ObjectNumber> GetReferencedObjectNumbers(ObjectNumber objectNumber);
    public sealed virtual IEnumerable`1<GraphReferenceId> GetReferenceIds(ObjectNumber objectNumber);
    private int GetLastIndex(int nodeNumber);
}
public static class JetBrains.dotMemory.Model.Interface.GraphAlgorithm : object {
    public static byte Unmarked;
    private static byte Gray;
    public static byte Marked;
    public static UInt32 HashBase;
    public static IDfsData Dfs(IGraph graph, IEnumerable`1<ObjectNumber> roots, IDfsData dfsData, IExecutionController executionController);
    public static IBfsData Bfs(IGraph graph, IEnumerable`1<ObjectNumber> roots, IBfsData bfsData, IExecutionController executionController);
    public static GraphData BuildTopDownTree(IReadOnlyList`1<ObjectNumber> treeParentData, IExecutionController executionController);
    public static IReadOnlyList`1<UInt32> CalculateTreeHash(IReadOnlyList`1<ObjectNumber> treeParentData, Func`2<ObjectNumber, UInt32> getHashCode, IExecutionController executionController);
}
public class JetBrains.dotMemory.Model.Interface.GraphReference : object {
    public ObjectNumber ObjectNumber;
    public int ArrayIndex;
    public SectionPointer`1<IFieldNamesCollection> FieldNameOffset;
    public GraphReference(ObjectNumber objectNumber, int arrayIndex, SectionPointer`1<IFieldNamesCollection> fieldNameOffset);
}
public class JetBrains.dotMemory.Model.Interface.GraphReferenceId : ValueType {
    public static GraphReferenceId Invalid;
    private ObjectNumber myTarget;
    private int myReferenceIndex;
    public int ReferenceIndex { get; }
    public ObjectNumber Target { get; }
    public GraphReferenceId(ObjectNumber target, int referenceIndex);
    private static GraphReferenceId();
    public int get_ReferenceIndex();
    public ObjectNumber get_Target();
    public sealed virtual bool Equals(GraphReferenceId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(GraphReferenceId l, GraphReferenceId r);
    public static bool op_Inequality(GraphReferenceId l, GraphReferenceId r);
}
public interface JetBrains.dotMemory.Model.Interface.IAccessibilityMask {
    public int AccessibleNodesCount { get; }
    public abstract virtual int get_AccessibleNodesCount();
}
public interface JetBrains.dotMemory.Model.Interface.IAllObjectsSetReference {
}
public interface JetBrains.dotMemory.Model.Interface.IBfsData {
    public int GraphSize { get; }
    public int TraversedNodesCount { get; public set; }
    public IArray`1<byte> Mark { get; }
    public IArray`1<ObjectNumber> SpanningTree { get; }
    public IArray`1<int> ReferenceIndexSpanningTree { get; }
    public IArray`1<ObjectNumber> ProcessOrder { get; }
    public IArray`1<int> Level { get; }
    public abstract virtual int get_GraphSize();
    public abstract virtual int get_TraversedNodesCount();
    public abstract virtual void set_TraversedNodesCount(int value);
    public abstract virtual IArray`1<byte> get_Mark();
    public abstract virtual IArray`1<ObjectNumber> get_SpanningTree();
    public abstract virtual IArray`1<int> get_ReferenceIndexSpanningTree();
    public abstract virtual IArray`1<ObjectNumber> get_ProcessOrder();
    public abstract virtual IArray`1<int> get_Level();
}
public interface JetBrains.dotMemory.Model.Interface.ICallTreeProvider {
    public int CallTreeCount { get; }
    public abstract virtual ICallTree GetCallTree(int callTreeIndex, Lifetime lifetime);
    public abstract virtual IEntityReference`1<ICallTree> GetCallTreeReference(int callTreeIndex);
    public abstract virtual int get_CallTreeCount();
}
public interface JetBrains.dotMemory.Model.Interface.ICompactTreeReaderProvider {
}
public interface JetBrains.dotMemory.Model.Interface.ICuttedSessionDetector {
    public bool IsSessionCutted { get; }
    public int SnapshotIndexCutPoint { get; }
    public GCNumber GCNumberCutPoint { get; }
    public abstract virtual bool get_IsSessionCutted();
    public abstract virtual int get_SnapshotIndexCutPoint();
    public abstract virtual GCNumber get_GCNumberCutPoint();
}
public interface JetBrains.dotMemory.Model.Interface.IDetailedGraph {
    public abstract virtual IReadOnlyCollection`1<GraphReference> GetReferences(ObjectNumber objectNumber);
}
public interface JetBrains.dotMemory.Model.Interface.IDfsData {
    public int GraphSize { get; }
    public int TraversedNodesCount { get; public set; }
    public IArray`1<byte> Mark { get; }
    public IArray`1<ObjectNumber> SpanningTree { get; }
    public IArray`1<int> EnterTime { get; }
    public IArray`1<int> ExitTime { get; }
    public IArray`1<ObjectNumber> PreOrder { get; }
    public IArray`1<ObjectNumber> PostOrder { get; }
    public abstract virtual int get_GraphSize();
    public abstract virtual int get_TraversedNodesCount();
    public abstract virtual void set_TraversedNodesCount(int value);
    public abstract virtual IArray`1<byte> get_Mark();
    public abstract virtual IArray`1<ObjectNumber> get_SpanningTree();
    public abstract virtual IArray`1<int> get_EnterTime();
    public abstract virtual IArray`1<int> get_ExitTime();
    public abstract virtual IArray`1<ObjectNumber> get_PreOrder();
    public abstract virtual IArray`1<ObjectNumber> get_PostOrder();
}
public interface JetBrains.dotMemory.Model.Interface.IDirectDetailedGraph {
}
public interface JetBrains.dotMemory.Model.Interface.IDirectGraph {
}
public interface JetBrains.dotMemory.Model.Interface.IDirectGraphDetails {
}
public interface JetBrains.dotMemory.Model.Interface.IDirectPath {
}
public interface JetBrains.dotMemory.Model.Interface.IDominatorTreeTopdownGraph {
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotMemory.Model.Interface.IDotMemoryModelZone {
}
public interface JetBrains.dotMemory.Model.Interface.IFieldGraphNavigator {
    public abstract virtual IEnumerable`1<ObjectNumber> Get(ObjectNumber start, string fieldName);
    public abstract virtual IEnumerable`1<ObjectNumber> Get(IEnumerable`1<ObjectNumber> descriptors, IEnumerable`1<string> path);
}
public interface JetBrains.dotMemory.Model.Interface.IFieldNameService {
    public abstract virtual string GetFieldName(GraphReferenceId reverseGraphReferenceId);
    public abstract virtual string GetFieldName(GraphReference reverseGraphReference);
    [NotNullAttribute]
public abstract virtual string GetFieldName(IStaticReference staticReference);
    public abstract virtual string GetFieldNameWithoutExactIndicies(GraphReferenceId reverseGraphReferenceId);
}
public interface JetBrains.dotMemory.Model.Interface.IGetObjectsDirectlyRetainedByDependencyProperty {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<RetainedObjectAndDependencyPropertyNames> Get(IExecutionController controller, IEnumerable`1<ObjectNumber> start);
}
public interface JetBrains.dotMemory.Model.Interface.IGraph {
    public int NodesCount { get; }
    public int EdgesCount { get; }
    public abstract virtual int get_NodesCount();
    public abstract virtual int get_EdgesCount();
    public abstract virtual int GetReferencesCount(ObjectNumber objectNumber);
    public abstract virtual IEnumerable`1<ObjectNumber> GetReferencedObjectNumbers(ObjectNumber objectNumber);
    public abstract virtual IEnumerable`1<GraphReferenceId> GetReferenceIds(ObjectNumber objectNumber);
}
public interface JetBrains.dotMemory.Model.Interface.IGraphDetails {
    public abstract virtual GraphReference GetArcDetails(GraphReferenceId graphReferenceId);
}
public interface JetBrains.dotMemory.Model.Interface.IHashCollection {
}
public interface JetBrains.dotMemory.Model.Interface.IHeapFragmentationMap {
    public HeapDescription HeapDescription { get; }
    public int HeapIndex { get; }
    public UInt32 ObjectsCount { get; }
    public ulong TotalUsedBytesCount { get; }
    public ulong NotPinnedBytesCount { get; }
    public ulong ClrReservedBytesCount { get; }
    public ulong PinnedBytesCount { get; }
    public double Utilization { get; }
    public double Fragmentation { get; }
    public ulong MaxFreeBlock { get; }
    public IReadOnlyCollection`1<IMemoryFragment> MemoryFragments { get; }
    public abstract virtual HeapDescription get_HeapDescription();
    public abstract virtual int get_HeapIndex();
    public abstract virtual UInt32 get_ObjectsCount();
    public abstract virtual ulong get_TotalUsedBytesCount();
    public abstract virtual ulong get_NotPinnedBytesCount();
    public abstract virtual ulong get_ClrReservedBytesCount();
    public abstract virtual ulong get_PinnedBytesCount();
    public abstract virtual double get_Utilization();
    public abstract virtual double get_Fragmentation();
    public abstract virtual ulong get_MaxFreeBlock();
    public abstract virtual IReadOnlyCollection`1<IMemoryFragment> get_MemoryFragments();
}
public interface JetBrains.dotMemory.Model.Interface.IHeapsService {
    public abstract virtual IReadOnlyCollection`1<IHeapFragmentationMap> CalculateHeapsFragmentationMaps(ulong resultion, IExecutionController executionController);
    public abstract virtual IReadOnlyCollection`1<ObjectByHeapStats> Aggregate(IObjectSet objectSet, IExecutionController executionController);
    public abstract virtual ulong MaxHeapSize(IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.IIndependentPathsFinder {
    public abstract virtual IEnumerable`1<IReversePath> FindPathsToDominator(ObjectNumber objectNumber, int maxPathsCount, IExecutionController executionController, IEnumerable`1<GraphReferenceId> excludedReferences, IEnumerable`1<ObjectNumber> excludedObjects);
}
public interface JetBrains.dotMemory.Model.Interface.IInstanceTypeNameRenderer {
    public abstract virtual string Render(ITypeName typeName, IReadOnlyList`1<ArrayDimensionInfo> arrayInfo);
}
public interface JetBrains.dotMemory.Model.Interface.IMainWindowTitle {
    public IProperty`1<string> Title { get; }
    public abstract virtual IProperty`1<string> get_Title();
}
public interface JetBrains.dotMemory.Model.Interface.IMemoryFragment {
    public ulong Left { get; }
    public ulong Right { get; }
    public int ObjectsCount { get; }
    public MemoryFragmentType Type { get; }
    public abstract virtual ulong get_Left();
    public abstract virtual ulong get_Right();
    public abstract virtual int get_ObjectsCount();
    public abstract virtual MemoryFragmentType get_Type();
}
public interface JetBrains.dotMemory.Model.Interface.IMemoryProfilerModel {
    public abstract virtual void AddSnapshotIntoSequence(string snapshotFilePath, IProgressIndicator progress);
}
public interface JetBrains.dotMemory.Model.Interface.IMergedDominatorTreeBuilder {
    public abstract virtual IMergedDominatorTreeNode Build(IExecutionController executionController);
    public abstract virtual IMergedDominatorTreeNode BuildTop(int topTypeCount, int maxLevelsCount, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.IMergedDominatorTreeNode {
    public ulong OwnSize { get; }
    public ulong RetainedSize { get; }
    public string Title { get; }
    public UInt32 MergedObjectsCount { get; }
    public TypeId Type { get; }
    public IReadOnlyCollection`1<IMergedDominatorTreeNode> Children { get; }
    public abstract virtual ulong get_OwnSize();
    public abstract virtual ulong get_RetainedSize();
    public abstract virtual string get_Title();
    public abstract virtual UInt32 get_MergedObjectsCount();
    public abstract virtual TypeId get_Type();
    public abstract virtual IReadOnlyCollection`1<IMergedDominatorTreeNode> get_Children();
}
public interface JetBrains.dotMemory.Model.Interface.IModelService`1 {
}
public interface JetBrains.dotMemory.Model.Interface.IModelService`2 {
    public abstract virtual void add_ProgressChanged(EventHandler`1<EventArgs`1<TProgress>> value);
    public abstract virtual void remove_ProgressChanged(EventHandler`1<EventArgs`1<TProgress>> value);
    public abstract virtual void add_Completed(EventHandler`1<EventArgs`1<TResult>> value);
    public abstract virtual void remove_Completed(EventHandler`1<EventArgs`1<TResult>> value);
}
public interface JetBrains.dotMemory.Model.Interface.Imprints.IComparisonSpecificWorkspaceImprintProvider {
    public abstract virtual IWorkspaceImprint GetOtherWorkspaceImprint(IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Imprints.IProcessImprint {
    public ProfilingSessionId SessionId { get; }
    public FileSystemPath ExecutablePath { get; }
    public IEnumerable`1<ISnapshotImprint> Snapshots { get; }
    public abstract virtual ProfilingSessionId get_SessionId();
    public abstract virtual FileSystemPath get_ExecutablePath();
    public abstract virtual IEnumerable`1<ISnapshotImprint> get_Snapshots();
}
public interface JetBrains.dotMemory.Model.Interface.Imprints.ISnapshotImprint {
    public SnapshotId SnapshotId { get; }
    public string SnapshotName { get; }
    public DateTime CreationTime { get; }
    public long TotalMemoryAmount { get; }
    public long TotalNetMemoryAmount { get; }
    public long UsedNetMemoryAmount { get; }
    public int ObjectsNumber { get; }
    public abstract virtual SnapshotId get_SnapshotId();
    public abstract virtual string get_SnapshotName();
    public abstract virtual DateTime get_CreationTime();
    public abstract virtual long get_TotalMemoryAmount();
    public abstract virtual long get_TotalNetMemoryAmount();
    public abstract virtual long get_UsedNetMemoryAmount();
    public abstract virtual int get_ObjectsNumber();
}
public interface JetBrains.dotMemory.Model.Interface.Imprints.IWorkspaceImprint {
    public WorkspaceId WorkspaceId { get; }
    public FileSystemPath WorkspacePath { get; }
    public WorkspaceStatus WorkspaceStatus { get; }
    public string ProductName { get; }
    public IEnumerable`1<IProcessImprint> Processes { get; }
    public abstract virtual WorkspaceId get_WorkspaceId();
    public abstract virtual FileSystemPath get_WorkspacePath();
    public abstract virtual WorkspaceStatus get_WorkspaceStatus();
    public abstract virtual string get_ProductName();
    public abstract virtual IEnumerable`1<IProcessImprint> get_Processes();
}
public interface JetBrains.dotMemory.Model.Interface.Imprints.IWorkspaceImprintCollection {
    public IListEvents`1<IWorkspaceImprint> Imprints { get; }
    public abstract virtual IListEvents`1<IWorkspaceImprint> get_Imprints();
    public abstract virtual void ReloadImprint(WorkspaceId workspaceId, IExecutionController executionController);
    public abstract virtual void SetImprint(WorkspaceId workspaceId, IWorkspaceImprint workspaceImprint);
}
public interface JetBrains.dotMemory.Model.Interface.Imprints.IWorkspaceImprintProvider {
    public abstract virtual IWorkspaceImprint GetImprint(FileSystemPath workspacePath, IExecutionController executionController);
}
public enum JetBrains.dotMemory.Model.Interface.Imprints.WorkspaceStatus : Enum {
    public int value__;
    public static WorkspaceStatus Available;
    public static WorkspaceStatus Locked;
    public static WorkspaceStatus LockedByCurrentProcess;
    public static WorkspaceStatus IncompatibleNewer;
    public static WorkspaceStatus IncompatibleOlder;
}
public interface JetBrains.dotMemory.Model.Interface.INamespaceNode {
    [CanBeNullAttribute]
public INamespaceNode ParentNamespace { get; }
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IReadOnlyList`1<string> FullNamespace { get; }
    public abstract virtual INamespaceNode get_ParentNamespace();
    public abstract virtual string get_Name();
    public abstract virtual IReadOnlyList`1<string> get_FullNamespace();
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.INamespaceNodeExtension : object {
    [ExtensionAttribute]
public static string GetNamespaceDisplayName(INamespaceNode namespaceNode);
    [ExtensionAttribute]
public static string JoinNamespace(IEnumerable`1<string> namespaceParts);
    [ExtensionAttribute]
public static IReadOnlyCollection`1<string> SplitNamespace(string namespace);
}
[ServiceContractAttribute]
public interface JetBrains.dotMemory.Model.Interface.INavigationService {
    [OperationContractAttribute]
public abstract virtual CanNavigateAnswer CanNavigateToFqn(string fqn);
    [OperationContractAttribute]
public abstract virtual void NavigateToFqn(string fqn);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.EventHandlers.IEventHandlersInspection {
    public abstract virtual IEnumerable`1<ObjectNumber> GetEventHandlersDescendants(IExecutionController controller);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.EventHandlers.IObjectHandlerService {
    public abstract virtual IEnumerable`1<ObjectNumber> GetHandlers(IEnumerable`1<ObjectNumber> objects, IExecutionController executionController);
}
public class JetBrains.dotMemory.Model.Interface.Inspections.FinalizedObjects.FinalizedObjectsIssue : object {
    private TypeId myTypeId;
    private FinalizedObjectTypeHint myTypeHint;
    private int myObjectsFinalized;
    private int myObjectsQueued;
    public TypeId TypeId { get; }
    public FinalizedObjectTypeHint TypeHint { get; }
    public int ObjectsFinalized { get; }
    public int ObjectsQueued { get; }
    public int TotalObjectsAffected { get; }
    public FinalizedObjectsIssue(TypeId typeId, FinalizedObjectTypeHint typeHint, int objectsFinalized, int objectsQueued);
    public TypeId get_TypeId();
    public FinalizedObjectTypeHint get_TypeHint();
    public int get_ObjectsFinalized();
    public int get_ObjectsQueued();
    public int get_TotalObjectsAffected();
}
[FlagsAttribute]
public enum JetBrains.dotMemory.Model.Interface.Inspections.FinalizedObjects.FinalizedObjectTypeHint : Enum {
    public int value__;
    public static FinalizedObjectTypeHint None;
    public static FinalizedObjectTypeHint Disposable;
    public static FinalizedObjectTypeHint WeakReference;
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.FinalizedObjects.IFinalizedObjectIssueSet {
    public long ObjectsTotalCount { get; }
    public int ObjectsCount { get; }
    public int TypesCount { get; }
    public abstract virtual long get_ObjectsTotalCount();
    public abstract virtual int get_ObjectsCount();
    public abstract virtual int get_TypesCount();
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.FinalizedObjects.IFinalizedObjectsInspection {
    [NotNullAttribute]
public abstract virtual IFinalizedObjectIssueSet FindIssues(IExecutionController controller);
}
public static class JetBrains.dotMemory.Model.Interface.Inspections.GraphTraversal : object {
    private static byte White;
    private static byte Grey;
    private static byte Black;
    public static void Run(IGraph graph, IEnumerable`1<ObjectNumber> roots, IGraphTraversalLogic logic, IExecutionController controller);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.IBindingInfo {
    public ObjectNumber ObjectNumber { get; }
    public string FieldName { get; }
    public abstract virtual ObjectNumber get_ObjectNumber();
    public abstract virtual string get_FieldName();
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.IDependencyPropertyLeakInspection {
    public abstract virtual IEnumerable`1<RetainedObjectAndDependencyPropertyNames> GetDependencyPropertyLeaks(IExecutionController controller);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.IGraphTraversalLogic {
    public abstract virtual bool EnterWhite(ObjectNumber current);
    public abstract virtual void EnterGrey(ObjectNumber current);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.IObjectIsReachableCollection {
    public abstract virtual bool Reachable(ObjectNumber objectNumber);
    public abstract virtual bool NotReachable(ObjectNumber objectNumber);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.IReachableObjectsService {
    [NotNullAttribute]
public abstract virtual IObjectIsReachableCollection MarkReachable(IEnumerable`1<ObjectNumber> markedObjects, IExecutionController controller);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.IWpfBindingInspection {
    public abstract virtual IEnumerable`1<WpfBindingInfo> GetLeakRoots(IExecutionController controller);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.IXNameWpfInspection {
    public abstract virtual IEnumerable`1<XNameInfo> GetLeakRoots(IExecutionController controller);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.SparseArrays.ISparseArraysInspection {
    public abstract virtual IEnumerable`1<SparseArrayIssue> FindIssues(IExecutionController controller);
}
public class JetBrains.dotMemory.Model.Interface.Inspections.SparseArrays.SparseArrayIssue : object {
    [CompilerGeneratedAttribute]
private ObjectNumber <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ElementSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndicesUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public ObjectNumber ObjectNumber { get; private set; }
    public int ElementSize { get; private set; }
    public int IndicesUsed { get; private set; }
    public int Length { get; private set; }
    public ulong WastedMemory { get; }
    public double UsePercentage { get; }
    public SparseArrayIssue(ObjectNumber objectNumber, int elementSize, int indicesUsage, int length);
    [CompilerGeneratedAttribute]
public ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectNumber(ObjectNumber value);
    [CompilerGeneratedAttribute]
public int get_ElementSize();
    [CompilerGeneratedAttribute]
private void set_ElementSize(int value);
    [CompilerGeneratedAttribute]
public int get_IndicesUsed();
    [CompilerGeneratedAttribute]
private void set_IndicesUsed(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public ulong get_WastedMemory();
    public double get_UsePercentage();
}
public class JetBrains.dotMemory.Model.Interface.Inspections.Strings.DuplicatedStringIssue : object {
    public IList`1<ObjectNumber> Carriers;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HashCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <WastedBytes>k__BackingField;
    public string Value { get; private set; }
    public int HashCode { get; private set; }
    public ulong WastedBytes { get; private set; }
    public DuplicatedStringIssue(string value, ulong wastedBytes, int hashCode, IList`1<ObjectNumber> carriers);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_HashCode();
    [CompilerGeneratedAttribute]
private void set_HashCode(int value);
    [CompilerGeneratedAttribute]
public ulong get_WastedBytes();
    [CompilerGeneratedAttribute]
private void set_WastedBytes(ulong value);
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.Strings.IDuplicatedStringsInspection {
    public abstract virtual IEnumerable`1<DuplicatedStringIssue> GetDuplicatedStrings(IExecutionController controller);
}
public class JetBrains.dotMemory.Model.Interface.Inspections.WpfBindingInfo : object {
    [CompilerGeneratedAttribute]
private ObjectNumber <ObjectNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    public ObjectNumber ObjectNumber { get; private set; }
    public string FieldName { get; private set; }
    public WpfBindingInfo(ObjectNumber objectNumber, string fieldName);
    [CompilerGeneratedAttribute]
public sealed virtual ObjectNumber get_ObjectNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectNumber(ObjectNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
    public virtual string ToString();
}
public interface JetBrains.dotMemory.Model.Interface.Inspections.WpfCollectionBinding.IWpfCollectionBindingInspection {
    public abstract virtual IEnumerable`1<ObjectNumber> GetLeakRoots(IExecutionController controller);
}
public class JetBrains.dotMemory.Model.Interface.Inspections.XNameInfo : ValueType {
    public ObjectNumber ObjectNumber;
    public string XName;
    public XNameInfo(ObjectNumber objectNumber, string xName);
    public static bool op_Equality(XNameInfo left, XNameInfo right);
    public static bool op_Inequality(XNameInfo left, XNameInfo right);
    private bool Equals(XNameInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Model.Interface.InstanceTypeNameRenderer : TypeNameRenderer {
    public InstanceTypeNameRenderer(TypeNamePart mainParts, TypeNamePart genericArgumentsParts);
    public InstanceTypeNameRenderer(ObjectRendererSettings settings);
    public sealed virtual string Render(ITypeName typeName, IReadOnlyList`1<ArrayDimensionInfo> arrayInfo);
}
public class JetBrains.dotMemory.Model.Interface.InvalidWorkspaceFileException : Exception {
    private FileSystemPath myFilePath;
    public FileSystemPath FilePath { get; }
    public InvalidWorkspaceFileException(FileSystemPath filePath, Exception innerException);
    public FileSystemPath get_FilePath();
}
public interface JetBrains.dotMemory.Model.Interface.IObjectArrayInfo {
    public abstract virtual UInt32 GetArrayRank(ObjectNumber objectNumber);
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<ArrayDimensionInfo> GetArrayInfo(ObjectNumber objectNumber);
}
public interface JetBrains.dotMemory.Model.Interface.IObjectByTypeAggregator {
    public abstract virtual TypeAggregate Aggregate(IObjectSetReference objectSetReference, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.IObjectSet {
}
public interface JetBrains.dotMemory.Model.Interface.IObjectSetReference {
    public ObjectSetId Id { get; }
    public abstract virtual ObjectSetId get_Id();
}
public interface JetBrains.dotMemory.Model.Interface.IObjectSetReferenceFactory {
    [NotNullAttribute]
public abstract virtual IObjectSetReference Create(Lifetime lifetime, ObjectSetId id, IObjectSetReference superSetReference, IObjectSetGenerator objectSetGenerator);
    [NotNullAttribute]
[ObsoleteAttribute("SHould be removed after refactoring complete")]
public abstract virtual IObjectSetReference Create(Lifetime lifetime, IObjectSetReference superSetReference, IObjectSetGenerator objectSetGenerator);
}
public interface JetBrains.dotMemory.Model.Interface.IObjectSetStaticticsCalculator {
    public abstract virtual ObjectSetStatistic Calculate(IObjectSetReference objectSetReference, IExecutionController controller);
}
public interface JetBrains.dotMemory.Model.Interface.IPath {
}
public interface JetBrains.dotMemory.Model.Interface.IPathFinder {
    public abstract virtual IEnumerable`1<ObjectNumber> FindPathFromClosestRoot(ObjectNumber objectNumber, IEnumerable`1<ObjectNumber> objectsToExclude, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.IReferenceIdTreeParentCollection {
}
public interface JetBrains.dotMemory.Model.Interface.IReverseDetailedGraph {
}
public interface JetBrains.dotMemory.Model.Interface.IReverseGraph {
}
public interface JetBrains.dotMemory.Model.Interface.IReverseGraphDetails {
}
public interface JetBrains.dotMemory.Model.Interface.IReversePath {
}
public interface JetBrains.dotMemory.Model.Interface.IReverseToDirectReferenceMap {
}
public interface JetBrains.dotMemory.Model.Interface.IRootsService {
    public abstract virtual bool IsRoot(ObjectNumber objectNumber);
    public abstract virtual IReadOnlyCollection`1<IGraphRoot> GetRootReferences(ObjectNumber objectNumber);
    public abstract virtual IStaticReference GetStaticReferenceFrom(IGraphRoot staticGraphRoot);
}
public interface JetBrains.dotMemory.Model.Interface.IServiceBuilder`1 {
    [NotNullAttribute]
public abstract virtual TService Build(IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.IShortestPairHashCollection {
}
public interface JetBrains.dotMemory.Model.Interface.IShortestPairsCollection {
    public IReadOnlyList`1<GraphReferenceId> P { get; }
    public IReadOnlyList`1<ObjectNumber> Q { get; }
    public abstract virtual IReadOnlyList`1<GraphReferenceId> get_P();
    public abstract virtual IReadOnlyList`1<ObjectNumber> get_Q();
}
public interface JetBrains.dotMemory.Model.Interface.IShortestPairsFinder {
    public abstract virtual ShortestPairsFinderResult FindAllPairs(IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.IShortestPairsHashCalculator {
    public abstract virtual IReadOnlyList`1<UInt32> CalculateHashes(ShortestPairsFinderResult pairsFinderResult, IReadOnlyList`1<UInt32> bfsRollingHash, IDfsData dfsData);
}
public interface JetBrains.dotMemory.Model.Interface.IShortestRootPathHashCollection {
}
public interface JetBrains.dotMemory.Model.Interface.IShortestRootPathTree {
}
public interface JetBrains.dotMemory.Model.Interface.ISnapshotConverter {
    public abstract virtual void Convert(FileSystemPath rawSnapshotIndexFilePath, FileSystemPath targetIndexFilePath, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.ISnapshotScope {
    public SnapshotId SnapshotId { get; }
    public abstract virtual SnapshotId get_SnapshotId();
}
public interface JetBrains.dotMemory.Model.Interface.ISnapshotServiceLocator {
    public abstract virtual T Get(ISnapshot snapshot, Lifetime lt);
}
public interface JetBrains.dotMemory.Model.Interface.ISnapshotTopTypesService {
    public abstract virtual IReadOnlyCollection`1<TypeStatistics> GetTopTypes(int topTypesCount, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.ISourceCodeRangesExtractor {
    [CanBeNullAttribute]
public abstract virtual SourceCodeRange GetSourceCodeRanges(IMetadataAssembly assembly, MetadataToken token);
}
public interface JetBrains.dotMemory.Model.Interface.ISunburstDiagramGenerator`1 {
    public abstract virtual ISunburstDiagramNode`1<TModelNode> GenerateSunburstDiagram(IReadOnlyCollection`1<TModelNode> treeRoots, ulong totalSize, string rootName, Func`2<TModelNode, IEnumerable`1<TModelNode>> getChildren, Func`2<TModelNode, ulong> getSubTreeSize, Func`2<TModelNode, ulong> getOwnSize, Func`2<TModelNode, string> getTitle, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.ISunburstDiagramNode {
    public AnnularSector Geometry { get; }
    public IEnumerable`1<ISunburstDiagramNode> Children { get; }
    public string Title { get; }
    public ulong OwnSize { get; }
    public ulong SubTreeSize { get; }
    public abstract virtual AnnularSector get_Geometry();
    public abstract virtual IEnumerable`1<ISunburstDiagramNode> get_Children();
    public abstract virtual string get_Title();
    public abstract virtual ulong get_OwnSize();
    public abstract virtual ulong get_SubTreeSize();
}
public interface JetBrains.dotMemory.Model.Interface.ISunburstDiagramNode`1 {
    public TModelNode ModelNode { get; }
    public abstract virtual TModelNode get_ModelNode();
    public abstract virtual void AddChild(ISunburstDiagramNode`1<TModelNode> child);
}
public interface JetBrains.dotMemory.Model.Interface.ITreeNodeExpander`1 {
    public abstract virtual IReadOnlyCollection`1<TNode> ExpandNode(TNode parent, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.ITwoWayDominatorsSection {
}
public interface JetBrains.dotMemory.Model.Interface.ITwoWayParallelPathsSection {
    public IReversePath LeftPath { get; }
    public IReversePath RightPath { get; }
    public abstract virtual IReversePath get_LeftPath();
    public abstract virtual IReversePath get_RightPath();
}
public interface JetBrains.dotMemory.Model.Interface.ITwoWayPathBuilder {
    public abstract virtual IReadOnlyList`1<ITwoWayPathSection> BuildTwoWayPath(ObjectNumber objectNumber, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.ITwoWayPathSection {
}
public interface JetBrains.dotMemory.Model.Interface.ITypeName {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IReadOnlyList`1<string> Namespace { get; }
    [NotNullAttribute]
public IReadOnlyList`1<ITypeName> GenericArguments { get; }
    [CanBeNullAttribute]
public string ArrayPostfix { get; }
    [NotNullAttribute]
public INamespaceNode NamespaceNode { get; }
    public TypeId TypeId { get; }
    [NotNullAttribute]
public Int32[] ArrayRanks { get; }
    public abstract virtual string get_Name();
    public abstract virtual IReadOnlyList`1<string> get_Namespace();
    public abstract virtual IReadOnlyList`1<ITypeName> get_GenericArguments();
    public abstract virtual string get_ArrayPostfix();
    public abstract virtual INamespaceNode get_NamespaceNode();
    public abstract virtual TypeId get_TypeId();
    public abstract virtual Int32[] get_ArrayRanks();
}
public interface JetBrains.dotMemory.Model.Interface.ITypeNameCache {
    [NotNullAttribute]
public abstract virtual ITypeName GetOrCreate(TypeId typeId, Func`2<TypeId, ITypeName> createTypeName);
}
public interface JetBrains.dotMemory.Model.Interface.ITypeService {
    public abstract virtual ITypeName GetTypeName(TypeId typeId);
    public abstract virtual ITypeName GetTypeName(IMetadataTypeInfo metadataTypeInfo);
    public abstract virtual ITypeName GetTypeName(IMetadataType metadataType);
}
public interface JetBrains.dotMemory.Model.Interface.IVSNavigationManager {
    public bool HasDestination { get; }
    [CanBeNullAttribute]
public string Title { get; }
    [CanBeNullAttribute]
public EndpointAddress Destination { get; }
    public abstract virtual void StoreNavigationResult(string title, EndpointAddress endpointAddress);
    public abstract virtual void ClearNavigationResult();
    public abstract virtual bool get_HasDestination();
    public abstract virtual string get_Title();
    public abstract virtual EndpointAddress get_Destination();
}
public interface JetBrains.dotMemory.Model.Interface.IWorkspaceState {
}
public class JetBrains.dotMemory.Model.Interface.MainWindowTitle : object {
    private IProperty`1<string> myTitle;
    public IProperty`1<string> Title { get; }
    public sealed virtual IProperty`1<string> get_Title();
}
public class JetBrains.dotMemory.Model.Interface.MemoryFragment : object {
    private MemoryFragmentType myFragmentType;
    private int myObjectsCount;
    [CompilerGeneratedAttribute]
private ulong <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Right>k__BackingField;
    public ulong Left { get; private set; }
    public ulong Right { get; private set; }
    public int ObjectsCount { get; }
    public MemoryFragmentType Type { get; }
    public MemoryFragment(MemoryFragmentType fragmentType, ulong left);
    public MemoryFragment(MemoryFragmentType fragmentType, ulong left, ulong right);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Left();
    [CompilerGeneratedAttribute]
private void set_Left(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Right();
    [CompilerGeneratedAttribute]
private void set_Right(ulong value);
    public sealed virtual int get_ObjectsCount();
    public sealed virtual MemoryFragmentType get_Type();
    public void PushObjectBack(ulong newRight);
}
public enum JetBrains.dotMemory.Model.Interface.MemoryFragmentType : Enum {
    public int value__;
    public static MemoryFragmentType Filled;
    public static MemoryFragmentType Empty;
    public static MemoryFragmentType FilledWithPinned;
    public static MemoryFragmentType ClrReserved;
}
public class JetBrains.dotMemory.Model.Interface.MergedDominatorTreeAggregationNode : object {
    [CompilerGeneratedAttribute]
private ulong <OwnSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <RetainedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MergedObjectsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`3<ulong, IMergedDominatorTreeNode, ulong> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`3<ulong, IMergedDominatorTreeNode, ulong> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`3<UInt32, IMergedDominatorTreeNode, UInt32> CS$<>9__CachedAnonymousMethodDelegate5;
    public ulong OwnSize { get; private set; }
    public ulong RetainedSize { get; private set; }
    public string Title { get; }
    public UInt32 MergedObjectsCount { get; private set; }
    public TypeId Type { get; }
    public IReadOnlyCollection`1<IMergedDominatorTreeNode> Children { get; }
    public MergedDominatorTreeAggregationNode(ulong ownSize, ulong retainedSize, UInt32 mergedObjectsCount);
    public MergedDominatorTreeAggregationNode(IEnumerable`1<IMergedDominatorTreeNode> aggregatedNodes);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_OwnSize();
    [CompilerGeneratedAttribute]
private void set_OwnSize(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_RetainedSize();
    [CompilerGeneratedAttribute]
private void set_RetainedSize(ulong value);
    public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual UInt32 get_MergedObjectsCount();
    [CompilerGeneratedAttribute]
private void set_MergedObjectsCount(UInt32 value);
    public sealed virtual TypeId get_Type();
    public sealed virtual IReadOnlyCollection`1<IMergedDominatorTreeNode> get_Children();
    [CompilerGeneratedAttribute]
private static ulong <.ctor>b__0(ulong ulong, IMergedDominatorTreeNode node);
    [CompilerGeneratedAttribute]
private static ulong <.ctor>b__1(ulong ulong, IMergedDominatorTreeNode node);
    [CompilerGeneratedAttribute]
private static UInt32 <.ctor>b__2(UInt32 i, IMergedDominatorTreeNode node);
}
public class JetBrains.dotMemory.Model.Interface.MergedDominatorTreeNode : object {
    private ulong myOwnSize;
    private ulong myRetainedSize;
    private string myTitle;
    private List`1<IMergedDominatorTreeNode> myChildren;
    private List`1<ObjectNumber> myMergedNodes;
    private TypeId myTypeId;
    public ulong OwnSize { get; }
    public ulong RetainedSize { get; public set; }
    public string Title { get; }
    public UInt32 MergedObjectsCount { get; }
    public TypeId Type { get; }
    public IReadOnlyCollection`1<IMergedDominatorTreeNode> Children { get; }
    public IEnumerable`1<ObjectNumber> MergedNodes { get; }
    public MergedDominatorTreeNode(string title, TypeId typeId);
    public sealed virtual ulong get_OwnSize();
    public sealed virtual ulong get_RetainedSize();
    public void set_RetainedSize(ulong value);
    public sealed virtual string get_Title();
    public sealed virtual UInt32 get_MergedObjectsCount();
    public sealed virtual TypeId get_Type();
    public sealed virtual IReadOnlyCollection`1<IMergedDominatorTreeNode> get_Children();
    public IEnumerable`1<ObjectNumber> get_MergedNodes();
    public void AddMergedNode(ObjectNumber objectNumber, ulong nodeSize, ulong nodeRetainedSize);
    public void AddChild(IMergedDominatorTreeNode node);
}
public interface JetBrains.dotMemory.Model.Interface.Metadata.IMetadataService {
    public abstract virtual IMetadataAssembly GetAssemblyFrom(TypeId typeId);
    public abstract virtual IMetadataAssembly GetAssemblyFrom(MetadataId mid);
    [NotNullAttribute]
public abstract virtual IModuleInformation GetModuleFrom(TypeId typeId);
    public abstract virtual IMetadataTypeInfo GetMetadataTypeInfo(TypeId typeId);
    public abstract virtual IMetadataMethod Get(MethodId methodId);
    [CanBeNullAttribute]
public abstract virtual IMetadataTypeInfo Get(SectionPointer`1<IFieldNamesCollection> fieldId);
    public abstract virtual bool IsArray(TypeId typeId);
    public abstract virtual bool IsArray(SectionPointer`1<IFieldNamesCollection> fieldId);
    [CanBeNullAttribute]
public abstract virtual string GetFieldName(SectionPointer`1<IFieldNamesCollection> fieldId);
    public abstract virtual string GetFieldDeclaredType(SectionPointer`1<IFieldNamesCollection> fieldId);
    public abstract virtual string GetTypeResolvedFullName(IMetadataTypeInfo typeInfo);
    public abstract virtual string GetMethodSignature(IMetadataMethod metadataMethod, String& namespace);
    public abstract virtual DataKind GetDataKind(TypeId typeId);
    public abstract virtual DataKind GetDataKind(IMetadataTypeInfo typeInfo);
}
public interface JetBrains.dotMemory.Model.Interface.Metadata.IModuleInformation {
    public string ModuleName { get; }
    public Guid Mvid { get; }
    public abstract virtual string get_ModuleName();
    public abstract virtual Guid get_Mvid();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotMemory.Model.Interface.Metadata.IModuleInformationProvider {
    public IModuleInformation Item { get; }
    public abstract virtual IModuleInformation get_Item(SectionIndex`1<IMetadataSection> index);
}
public class JetBrains.dotMemory.Model.Interface.ModelEntityKind : object {
    private static int ourCounter;
    private int myValue;
    public static ModelEntityKind ArrayOfDelegates;
    public static ModelEntityKind ArrayOfValueTypes;
    public static ModelEntityKind ArrayOfEnums;
    public static ModelEntityKind ArrayOfClasses;
    public static ModelEntityKind ArrayOfInterfaces;
    public static ModelEntityKind OfDelegate;
    public static ModelEntityKind OfValueType;
    public static ModelEntityKind OfEnum;
    public static ModelEntityKind OfClass;
    public static ModelEntityKind OfInterface;
    public static ModelEntityKind OfUnresolved;
    public static ModelEntityKind ByQuery;
    public static ModelEntityKind FromNameSpace;
    public static ModelEntityKind FromAssembly;
    public static ModelEntityKind OfHeap;
    public static ModelEntityKind OfGeneration;
    public static ModelEntityKind ObjectSetDominatedViaPath;
    public static ModelEntityKind ObjectSetAtDominationPath;
    public static ModelEntityKind TwoWayCluster;
    public static ModelEntityKind PathsPassThrough;
    public static ModelEntityKind AllObjects;
    public static ModelEntityKind Traffic;
    public static ModelEntityKind Snapshot;
    public static ModelEntityKind Roots;
    public static ModelEntityKind Inspection;
    public static ModelEntityKind RetainedObjects;
    public static ModelEntityKind Object;
    public static ModelEntityKind Objects;
    public static ModelEntityKind Comparisons;
    public static ModelEntityKind ComparisonGroup;
    public static ModelEntityKind Comparison;
    public static ModelEntityKind MergedPathNodeObjectSet;
    public static ModelEntityKind History;
    public static ModelEntityKind Converter;
    public static ModelEntityKind Ctor;
    public static ModelEntityKind Method;
    public static ModelEntityKind Field;
    public static ModelEntityKind UnresolvedField;
    public static ModelEntityKind NotAnEntity;
    private ModelEntityKind(int value);
    private static ModelEntityKind();
    public static bool op_Equality(ModelEntityKind left, ModelEntityKind right);
    public static bool op_Inequality(ModelEntityKind left, ModelEntityKind right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected static ModelEntityKind CreateUnique();
}
public class JetBrains.dotMemory.Model.Interface.NavigationResult : object {
    private ObjectNumber myObj;
    private int myDepth;
    public ObjectNumber Obj { get; }
    public int Depth { get; }
    public NavigationResult(ObjectNumber obj, int depth);
    public ObjectNumber get_Obj();
    public int get_Depth();
}
public static class JetBrains.dotMemory.Model.Interface.ObjectArrayPostfixBuilder : object {
    [CompilerGeneratedAttribute]
private static Func`2<ArrayDimensionInfo, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public static string Build(ITypeName typeName, IReadOnlyList`1<ArrayDimensionInfo> arrayInfo);
    [CompilerGeneratedAttribute]
private static string <Build>b__0(ArrayDimensionInfo _);
}
public class JetBrains.dotMemory.Model.Interface.ObjectByHeapStats : ValueType {
    public HeapDescription HeapDescription;
    public int ObjectsCount;
    public ulong UsedBytesCount;
    public int HeapIndex;
    public ObjectByHeapStats(GenerationMark generationMark, ulong start, ulong end, ulong reserved, int objectsCount, ulong usedBytesCount, int heapIndex);
}
public class JetBrains.dotMemory.Model.Interface.ObjectGraph.Dominator : ValueType {
    public ObjectNumber ObjectNumber;
    public ulong RetainedSize;
    public Dominator(ObjectNumber objectNumber, ulong retainedSize);
}
public interface JetBrains.dotMemory.Model.Interface.ObjectGraph.IDominatorTree {
    public abstract virtual ICollection`1<Dominator> GetDominatedPathOf(ObjectNumber objectNumber, IExecutionController executionController);
    public abstract virtual ulong GetMinRetainedSize(IEnumerable`1<ObjectNumber> set, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.ObjectGraph.IObjectGraphService {
    public abstract virtual IEnumerable`1<ObjectNumber> GetRetainedSet(IEnumerable`1<ObjectNumber> objectSet, IExecutionController executionController);
}
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.dotMemory.Model.Interface.ObjectId/Serializer")]
public class JetBrains.dotMemory.Model.Interface.ObjectId : object {
    [DataMemberAttribute]
private ObjectNumber myObjectNumber;
    public ObjectId(ObjectNumber objectNumber);
    public sealed virtual bool Equals(ObjectId other);
    public sealed virtual bool Equals(ID other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.dotMemory.Model.Interface.ObjectRendererSettings : ValueType {
    private TypeNamePart myMainParts;
    private TypeNamePart myGenericArgumentsParts;
    public TypeNamePart MainParts { get; }
    public TypeNamePart GenericArgumentsParts { get; }
    public ObjectRendererSettings(TypeNamePart mainParts, TypeNamePart genericArgumentsParts);
    public TypeNamePart get_MainParts();
    public TypeNamePart get_GenericArgumentsParts();
}
public interface JetBrains.dotMemory.Model.Interface.Objects.IPathToRootsExplorer {
    public abstract virtual IEnumerable`1<PathInfo> GetAllShortestPathsFromRoots(ObjectNumber objectNumber, IExecutionController executionController);
    public abstract virtual IEnumerable`1<PathInfo> GetDirectShortestSetToSetPaths(IList`1<ObjectNumber> fromSet, IList`1<ObjectNumber> toSet, IExecutionController executionController);
}
[DataContractAttribute]
[ValueSerializerAttribute("JetBrains.dotMemory.Model.Interface.ObjectSetId/Serializer")]
public class JetBrains.dotMemory.Model.Interface.ObjectSetId : Uid {
    public ObjectSetId(Guid guid);
    public static ObjectSetId NewId();
}
[DataContractAttribute]
public class JetBrains.dotMemory.Model.Interface.ObjectSets.CountSizeStats : object {
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private int <ItemsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesCount>k__BackingField;
    [DataMemberAttribute]
public int ItemsCount { get; private set; }
    [DataMemberAttribute]
public long BytesCount { get; private set; }
    public CountSizeStats(int itemsCount, long bytesCount);
    [CompilerGeneratedAttribute]
public int get_ItemsCount();
    [CompilerGeneratedAttribute]
private void set_ItemsCount(int value);
    [CompilerGeneratedAttribute]
public long get_BytesCount();
    [CompilerGeneratedAttribute]
private void set_BytesCount(long value);
    [StringFormatMethodAttribute("template")]
public string ItemsCountToString(string template);
    [StringFormatMethodAttribute("template")]
public string ItemsCountToStringPrecisely(string template);
    [StringFormatMethodAttribute("template")]
public string BytesCountToString(string template);
    [StringFormatMethodAttribute("template")]
public string BytesCountToStringPrecisely(string template);
    public sealed virtual bool Equals(CountSizeStats other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public interface JetBrains.dotMemory.Model.Interface.ObjectSets.IHeapGroup {
    public GenerationMark GenerationMark { get; }
    public int ObjectsCount { get; }
    public ulong OccupiedMemory { get; }
    public IEnumerable`1<MemoryBlock> OccupiedBlocks { get; }
    public ulong Start { get; }
    public ulong End { get; }
    public IHeapFragmentationMap Map { get; }
    public abstract virtual GenerationMark get_GenerationMark();
    public abstract virtual int get_ObjectsCount();
    public abstract virtual ulong get_OccupiedMemory();
    public abstract virtual IEnumerable`1<MemoryBlock> get_OccupiedBlocks();
    public abstract virtual ulong get_Start();
    public abstract virtual ulong get_End();
    public abstract virtual IHeapFragmentationMap get_Map();
}
public interface JetBrains.dotMemory.Model.Interface.ObjectSets.IObjectSetCountSizeStatsCalculator {
    public abstract virtual CountSizeStats Calculate(IExecutionController executionController);
}
public class JetBrains.dotMemory.Model.Interface.ObjectSets.MemoryBlock : ValueType {
    [CompilerGeneratedAttribute]
private ulong <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <End>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeapGroup <Heap>k__BackingField;
    public ulong Start { get; private set; }
    public ulong End { get; private set; }
    public IHeapGroup Heap { get; private set; }
    public MemoryBlock(ulong start, ulong end, IHeapGroup heap);
    [CompilerGeneratedAttribute]
public ulong get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_End();
    [CompilerGeneratedAttribute]
private void set_End(ulong value);
    [CompilerGeneratedAttribute]
public IHeapGroup get_Heap();
    [CompilerGeneratedAttribute]
private void set_Heap(IHeapGroup value);
}
public class JetBrains.dotMemory.Model.Interface.ObjectSets.ObjectLocation : object {
    private ulong myStartAddress;
    private int mySize;
    public ulong StartAddress { get; }
    public int Size { get; }
    public ObjectLocation(ulong startAddress, int size);
    public ulong get_StartAddress();
    public int get_Size();
}
public class JetBrains.dotMemory.Model.Interface.ObjectSetStatistic : ValueType {
    private UInt32 myCount;
    private ulong mySize;
    private ObjectNumber myObjectNumber;
    private bool myCalculated;
    public UInt32 Count { get; }
    public ulong Size { get; }
    public ObjectNumber Object { get; }
    public bool Calculated { get; }
    public ObjectSetStatistic(UInt32 count, ulong size);
    public ObjectSetStatistic(UInt32 count, ulong size, ObjectNumber objectNumber);
    public UInt32 get_Count();
    public ulong get_Size();
    public ObjectNumber get_Object();
    public bool IsOneObjectSet();
    public bool get_Calculated();
}
public interface JetBrains.dotMemory.Model.Interface.ObjectTagging.IGlobalObjectTaggingService {
    public IReadonlyListEvents`1<TaggedGlobalObject> TaggedObjectsList { get; }
    public abstract virtual void SetTag(GlobalObjectNumber globalObjectNumber, ObjectTag tag);
    public abstract virtual IReadonlyListEvents`1<TaggedGlobalObject> get_TaggedObjectsList();
}
public interface JetBrains.dotMemory.Model.Interface.ObjectTagging.IObjectTaggingService {
    public IReadonlyListEvents`1<TaggedObject> TaggedObjectsProvider { get; }
    public abstract virtual void SetTag(ObjectNumber objectNumber, ObjectTag tag);
    public abstract virtual IReadonlyListEvents`1<TaggedObject> get_TaggedObjectsProvider();
}
public class JetBrains.dotMemory.Model.Interface.ObjectTagging.ObjectTag : object {
    private string myText;
    private int myTagCode;
    private PropertyChangedEventHandler PropertyChanged;
    public int TagCode { get; }
    public string Text { get; }
    public ObjectTag(int tagCode, string text);
    public int get_TagCode();
    public string get_Text();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.ObjectTagging.ObjectTaggingServiceExtension : object {
    [ExtensionAttribute]
public static ObjectTag GetMark(IObjectTaggingService self, ObjectNumber objectNumber);
    [ExtensionAttribute]
public static void SubscribeChangesObsolete(IObjectTaggingService self, Lifetime lifetime, Action`1<ObjectNumber> handler);
    [ExtensionAttribute]
public static void SubscribeChanges(IObjectTaggingService self, Lifetime lifetime, Action`2<Lifetime, TaggedObject> handler);
    [ExtensionAttribute]
public static IDataNotifier`1<ObjectTag> CreateObjectTagDatapipeOut(IObjectTaggingService objectTaggingService, Lifetime lifetime, ObjectNumber objectNumber);
}
public static class JetBrains.dotMemory.Model.Interface.ObjectTagging.PredefinedObjectTag : object {
    public static ObjectTag GroupZero;
    public static ObjectTag GroupOne;
    public static ObjectTag GroupTwo;
    public static ObjectTag GroupThree;
    public static ObjectTag GroupFour;
    public static ObjectTag GroupFive;
    public static ObjectTag GroupSix;
    public static ObjectTag GroupSeven;
    public static ObjectTag GroupEight;
    public static ObjectTag GroupNine;
    private static PredefinedObjectTag();
    public static bool IsPredefined(ObjectTag objectTag);
}
public class JetBrains.dotMemory.Model.Interface.ObjectTagging.TaggedGlobalObject : object {
    public GlobalObjectNumber GlobalObjectNumber;
    public ObjectTag Tag;
    public TaggedGlobalObject(GlobalObjectNumber globalObjectNumber, ObjectTag tag);
}
public class JetBrains.dotMemory.Model.Interface.ObjectTagging.TaggedObject : object {
    public ObjectNumber ObjectNumber;
    public ObjectTag Tag;
    public TaggedObject(ObjectNumber objectNumber, ObjectTag tag);
}
public class JetBrains.dotMemory.Model.Interface.PathInfo : ValueType {
    private ObjectNumber myFromObjectNumber;
    private IEnumerable`1<PathNode> myPath;
    public IEnumerable`1<PathNode> Path { get; }
    public ObjectNumber FromObjectNumber { get; }
    public PathInfo(ObjectNumber fromObjectNumber, IEnumerable`1<PathNode> path);
    public IEnumerable`1<PathNode> get_Path();
    public ObjectNumber get_FromObjectNumber();
}
public class JetBrains.dotMemory.Model.Interface.PathNode : ValueType {
    private ObjectNumber myObjectNumber;
    private GraphReferenceId myReferenceId;
    public static PathNode Invalid;
    public ObjectNumber ObjectNumber { get; }
    public GraphReferenceId ReferenceId { get; }
    public PathNode(ObjectNumber objectNumber, GraphReferenceId referenceId);
    private static PathNode();
    public ObjectNumber get_ObjectNumber();
    public GraphReferenceId get_ReferenceId();
    public sealed virtual bool Equals(PathNode other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.dotMemory.Model.Interface.Persistence.IPersistent {
}
public interface JetBrains.dotMemory.Model.Interface.Persistence.IPersistent`1 {
    public abstract virtual IPersistentFactory`1<T> GetPersistentFactory();
}
public interface JetBrains.dotMemory.Model.Interface.Persistence.IPersistentFactory`1 {
    public abstract virtual T Instantiate(IFactory factory, Object[] parameters);
}
[ValueSerializerAttribute("JetBrains.dotMemory.Model.Interface.ProbingId/Serializer")]
[DataContractAttribute]
public class JetBrains.dotMemory.Model.Interface.ProbingId : object {
    [DataMemberAttribute]
private int myId;
    private ProbingId(int id);
    public static int op_Explicit(ProbingId probingId);
    public static ProbingId op_Explicit(int id);
    public static bool op_Equality(ProbingId l, ProbingId r);
    public static bool op_Inequality(ProbingId l, ProbingId r);
    public sealed virtual bool Equals(ProbingId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string ToString(string format);
    public virtual string ToString();
}
public enum JetBrains.dotMemory.Model.Interface.ProfilingMode : Enum {
    public int value__;
    public static ProfilingMode Unknown;
    public static ProfilingMode Attach;
}
public class JetBrains.dotMemory.Model.Interface.ProfilingProcess : object {
    private string myProcessName;
    private int myProcessId;
    private IProperty`1<bool> myIsSelected;
    public string ProcessName { get; }
    public int ProcessId { get; }
    public IProperty`1<bool> IsSelected { get; }
    public ProfilingProcess(string processName, int processId);
    public string get_ProcessName();
    public int get_ProcessId();
    public IProperty`1<bool> get_IsSelected();
}
public class JetBrains.dotMemory.Model.Interface.ProfilingState : object {
    private ProfilingMode myProfilingMode;
    public ProfilingMode ProfilingMode { get; }
    public ProfilingState(ProfilingMode profilingMode);
    public ProfilingMode get_ProfilingMode();
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IAllocatedFromGCObjectSetGenerator {
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IAllocatedInFunctionObjectSetGenerator {
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IAllocatedOnStackTraceObjectSetGenerator {
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IAssemblyProperty {
    public abstract virtual IQueryClause Like(IReadOnlyCollection`1<string> assemblies);
    public abstract virtual IQueryClause NotLike(IReadOnlyCollection`1<string> assemblies);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IComparableObjectProperty`1 {
    public abstract virtual Func`2<IObjectSetReference, IObjectSetGenerator> EqualTo(TProperty value);
    public abstract virtual Func`2<IObjectSetReference, IObjectSetGenerator> NotEqualTo(TProperty value);
    public abstract virtual Func`2<IObjectSetReference, IObjectSetGenerator> GreaterThan(TProperty value);
    public abstract virtual Func`2<IObjectSetReference, IObjectSetGenerator> GreaterThanOrEqual(TProperty value);
    public abstract virtual Func`2<IObjectSetReference, IObjectSetGenerator> LessThan(TProperty value);
    public abstract virtual Func`2<IObjectSetReference, IObjectSetGenerator> LessThanOrEqual(TProperty value);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IEquatableObjectProperty`1 {
    public abstract virtual IQueryClause EqualTo(TProperty value);
    public abstract virtual IQueryClause NotEqualTo(TProperty value);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.INamespaceProperty {
    public abstract virtual IQueryClause Like(IReadOnlyCollection`1[] namespaces);
    public abstract virtual IQueryClause NotLike(IReadOnlyCollection`1[] namespaces);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IObjectFilter {
    public abstract virtual IObjectMatcher GetMatcher(IExecutionController controller, Lifetime lifetime);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IObjectMatcher {
    public abstract virtual bool Matches(ObjectNumber objectNumber);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IObjectSetGenerator {
    public SnapshotId SnapshotId { get; }
    public abstract virtual SnapshotId get_SnapshotId();
    public abstract virtual IEnumerable`1<ObjectNumber> GetObjectSet(IObjectSetReference superSetReference, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IProperty {
    public string Name { get; }
    public int Weight { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_Weight();
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IQueryClause {
    public abstract virtual IObjectSetGenerator GetGenerator();
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IQueryService {
    public abstract virtual IObjectSetGenerator Select(Func`2[] sequence);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.IQuerySyntaxSugar {
    public ITypeIdProperty TypeId { get; }
    public INamespaceProperty Namespace { get; }
    public IAssemblyProperty Assembly { get; }
    public IQueryClause RetainedObjectsSet { get; }
    public abstract virtual ITypeIdProperty get_TypeId();
    public abstract virtual INamespaceProperty get_Namespace();
    public abstract virtual IAssemblyProperty get_Assembly();
    public abstract virtual IQueryClause GenerationIs(GenerationMark generationMark);
    public abstract virtual IQueryClause GenerationIs2(GenerationMark[] generationMarks);
    public abstract virtual IQueryClause GenerationIsNot2(GenerationMark[] generationMarks);
    public abstract virtual IQueryClause HeapIs(int heapIndex);
    public abstract virtual IQueryClause IsNotDominated();
    public abstract virtual IQueryClause DominatedViaPath(IReadOnlyList`1<TypeId> dominationPath);
    public abstract virtual IQueryClause DominatedViaPath(IReadOnlyList`1<TypeId> dominationPath, ISet`1<TypeId> types);
    public abstract virtual IQueryClause AtDominationPath(IReadOnlyList`1<TypeId> dominationPath);
    public abstract virtual IQueryClause AtDominationPath(IReadOnlyList`1<TypeId> dominationPath, ISet`1<TypeId> types);
    public abstract virtual IQueryClause SimilarRetentionClusterIs(UInt32 clusterId);
    public abstract virtual IQueryClause SimilarRetentionPathNode(int clusterId, SimilarRetentionPathNodeId nodeId);
    public abstract virtual IQueryClause get_RetainedObjectsSet();
    public abstract virtual IQueryClause DeadObjectsSet(IComparisonDescription comparisonDescription);
    public abstract virtual IQueryClause NewObjectsSet(IComparisonDescription comparisonDescription);
    public abstract virtual IQueryClause SurvivedObjectsSet(SurvivedObjectsOrigin survivedObjectsOrigin, IComparisonDescription comparisonDescription);
    public abstract virtual IQueryClause AllocatedAfterGCNumber(GCNumber fromGC);
    public abstract virtual IQueryClause AllocatedInFunction(Nullable`1<MethodId> functionId, bool isSkipped);
    public abstract virtual IQueryClause AllocatedInFunctionTree(IEnumerable`1<DfsInfoLink> callTreeLinks, bool ownAllocatedObjects);
    public abstract virtual IQueryClause AllocatedOnStackOf(CallTreeLink[] origins);
    public abstract virtual IQueryClause EventHandlersDescendants();
    public abstract virtual IQueryClause XNameWpfLeakRoots();
    public abstract virtual IQueryClause WpfBindingInspectionLeakRoots(string fieldName);
    public abstract virtual IQueryClause DuplicatedStringValueIs(string value);
    public abstract virtual IQueryClause WpfCollectionBindingLeakRoots();
    public abstract virtual IQueryClause DependencyPropertyLeakRoots();
    public abstract virtual IQueryClause PinnedObjects();
}
public interface JetBrains.dotMemory.Model.Interface.Queries.ISimpleObjectProperty`1 {
    public abstract virtual Func`2<IObjectSet, IObjectSetGenerator> EqualTo(TProperty value);
    public abstract virtual Func`2<IObjectSet, IObjectSetGenerator> NotEqualTo(TProperty value);
}
public interface JetBrains.dotMemory.Model.Interface.Queries.ITypeIdProperty {
    public abstract virtual IQueryClause BelongsTo(IEnumerable`1<TypeId> collection);
    public abstract virtual IQueryClause NotBelongsTo(IEnumerable`1<TypeId> collection);
}
[DataContractAttribute]
public enum JetBrains.dotMemory.Model.Interface.Queries.PredicateType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static PredicateType GreaterThan;
    [EnumMemberAttribute]
public static PredicateType GreaterThanOrEqual;
    [EnumMemberAttribute]
public static PredicateType LessThan;
    [EnumMemberAttribute]
public static PredicateType LessThanOrEqual;
    [EnumMemberAttribute]
public static PredicateType EqualTo;
    [EnumMemberAttribute]
public static PredicateType NotEqualTo;
}
public class JetBrains.dotMemory.Model.Interface.Queries.QueryClause : object {
    private Func`1<IObjectSetGenerator> myGetGenerator;
    public QueryClause(Func`1<IObjectSetGenerator> getGenerator);
    public sealed virtual IObjectSetGenerator GetGenerator();
}
[DefaultMemberAttribute("Item")]
public abstract class JetBrains.dotMemory.Model.Interface.ReadonlyListBase`1 : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Contains(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    public abstract virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.IList<T>.IndexOf(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    public virtual T get_Item(int index);
    public virtual void set_Item(int index, T value);
}
public class JetBrains.dotMemory.Model.Interface.RetainedObjectAndDependencyPropertyNames : object {
    public ObjectNumber RetainedObject;
    public IList`1<string> DependendencyPropertyNames;
    public RetainedObjectAndDependencyPropertyNames(ObjectNumber retainedObject, IList`1<string> dependendencyPropertyNames);
}
public static class JetBrains.dotMemory.Model.Interface.RetainedSizeCalculator : object {
    public static IReadOnlyCollection`1<ulong> Calculate(IReadOnlyList`1<ulong> sizes, IReadOnlyList`1<ObjectNumber> dominatorParent, IReadOnlyList`1<ObjectNumber> enterTimesOrder, IExecutionController executionController);
}
public enum JetBrains.dotMemory.Model.Interface.RunningMode : Enum {
    public int value__;
    public static RunningMode Error;
    public static RunningMode Profiling;
    public static RunningMode ProfilingFinished;
    public static RunningMode SavedWorkspace;
}
public interface JetBrains.dotMemory.Model.Interface.ServiceSetup.IServiceSetuper`1 {
    public ITask`1<TService> Task { get; }
    public abstract virtual ITask`1<TService> get_Task();
}
public class JetBrains.dotMemory.Model.Interface.ShortestPairsFinderResult : ValueType {
    public IDominatorTreeParentCollection Domintors;
    public ChunkArray`1<GraphReferenceId> P;
    public ChunkArray`1<ObjectNumber> Q;
    public IBfsData BfsData;
    public ShortestPairsFinderResult(IDominatorTreeParentCollection domintors, ChunkArray`1<GraphReferenceId> p, ChunkArray`1<ObjectNumber> q, IBfsData bfsData);
}
[DataContractAttribute]
public class JetBrains.dotMemory.Model.Interface.SimilarRetentionPathNodeId : object {
    [DataMemberAttribute]
public int PathSectionNumber;
    [DataMemberAttribute]
public int NodeInSectionNumber;
    [DataMemberAttribute]
public PathSectionKind SectionKind;
    public SimilarRetentionPathNodeId(int pathSectionNumber, int nodeInSectionNumber, PathSectionKind sectionKind);
    public sealed virtual bool Equals(SimilarRetentionPathNodeId other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(SimilarRetentionPathNodeId left, SimilarRetentionPathNodeId right);
    public static bool op_Inequality(SimilarRetentionPathNodeId left, SimilarRetentionPathNodeId right);
    public virtual string ToString();
}
public interface JetBrains.dotMemory.Model.Interface.Snapshot.ISnapshot {
    public int SnapshotIndex { get; }
    public DateTime SnapshotTakenTime { get; }
    public bool IsAllocationCollected { get; }
    public bool IsTrafficCollected { get; }
    public bool IsFinalizerCollected { get; }
    public string SnapshotIndexFile { get; }
    public int ObjectsCount { get; }
    public int CallTreeCount { get; }
    public SnapshotId SnapshotId { get; }
    public GCNumber GCNumber { get; }
    public abstract virtual int get_SnapshotIndex();
    public abstract virtual DateTime get_SnapshotTakenTime();
    public abstract virtual IObjectSet GetRoots(Lifetime lifetime);
    public abstract virtual IObjectSet GetAllObjects(IExecutionController executionController, Lifetime lifetime);
    public abstract virtual bool get_IsAllocationCollected();
    public abstract virtual bool get_IsTrafficCollected();
    public abstract virtual bool get_IsFinalizerCollected();
    public abstract virtual ulong GetObjectsSize(IExecutionController ec);
    public abstract virtual string get_SnapshotIndexFile();
    public abstract virtual int get_ObjectsCount();
    public abstract virtual int get_CallTreeCount();
    public abstract virtual SnapshotId get_SnapshotId();
    public abstract virtual GCNumber get_GCNumber();
}
public interface JetBrains.dotMemory.Model.Interface.Snapshot.ISnapshotSummaryCalculator {
    public abstract virtual SnapshotSummary Calculate(IExecutionController executionController);
}
public class JetBrains.dotMemory.Model.Interface.Snapshot.SnapshotSummary : object {
    [CompilerGeneratedAttribute]
private int <ObjectsNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalMemoryAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalNetMemoryAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UsedNetMemoryAmount>k__BackingField;
    public int ObjectsNumber { get; private set; }
    public long TotalMemoryAmount { get; private set; }
    public long TotalNetMemoryAmount { get; private set; }
    public long UsedNetMemoryAmount { get; private set; }
    public SnapshotSummary(int objectsNumber, long totalMemoryAmount, long totalNetMemoryAmount, long usedNetMemoryAmount);
    [CompilerGeneratedAttribute]
public int get_ObjectsNumber();
    [CompilerGeneratedAttribute]
private void set_ObjectsNumber(int value);
    [CompilerGeneratedAttribute]
public long get_TotalMemoryAmount();
    [CompilerGeneratedAttribute]
private void set_TotalMemoryAmount(long value);
    [CompilerGeneratedAttribute]
public long get_TotalNetMemoryAmount();
    [CompilerGeneratedAttribute]
private void set_TotalNetMemoryAmount(long value);
    [CompilerGeneratedAttribute]
public long get_UsedNetMemoryAmount();
    [CompilerGeneratedAttribute]
private void set_UsedNetMemoryAmount(long value);
}
public enum JetBrains.dotMemory.Model.Interface.SnapshotByTrigger.SnapshotByTriggerState : Enum {
    public int value__;
    public static SnapshotByTriggerState NotStarted;
    public static SnapshotByTriggerState Started;
    public static SnapshotByTriggerState Active;
}
public class JetBrains.dotMemory.Model.Interface.SourceCodeRange : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public FileSystemPath File { get; private set; }
    public int Line { get; private set; }
    public int Column { get; private set; }
    public SourceCodeRange(FileSystemPath file, int line, int column);
    [CompilerGeneratedAttribute]
public FileSystemPath get_File();
    [CompilerGeneratedAttribute]
private void set_File(FileSystemPath value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(int value);
}
public interface JetBrains.dotMemory.Model.Interface.Traffic.IFunctionTrafficAggregator {
    public abstract virtual FunctionAggregate`1<BactraceTreeLink> Aggregate(GCNumber fromGC, GCNumber toGC, IExecutionController executionController);
    public abstract virtual FunctionAggregate`1<BactraceTreeLink> AggregateForTypes(IEnumerable`1<TypeId> typeIds, GCNumber fromGC, GCNumber toGC, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Traffic.ITrafficService {
    public abstract virtual bool CanBeCalculated(GCNumber fromGC, GCNumber toGC, IExecutionController executionController);
}
public interface JetBrains.dotMemory.Model.Interface.Traffic.ITypeTrafficAggregator {
    public abstract virtual TypeAggregate Aggregate(GCNumber fromGC, GCNumber toGC, IExecutionController executionController);
    public abstract virtual TypeAggregate AggregateForFunction(IEnumerable`1<CallTreeLink> allocationOrigins, GCNumber fromGC, GCNumber toGC, IExecutionController executionController);
}
public class JetBrains.dotMemory.Model.Interface.Traffic.MemoryTrafficSummary : object {
    private int myAllocatedObjectsCount;
    private int myCollectedObjectsCount;
    private long myAllocatedBytesCount;
    private long myCollectedBytesCount;
    private PropertyChangedEventHandler PropertyChanged;
    public int AllocatedObjectsCount { get; }
    public int CollectedObjectsCount { get; }
    public long AllocatedBytesCount { get; }
    public long CollectedBytesCount { get; }
    public MemoryTrafficSummary(int allocatedObjectsCount, int collectedObjectsCount, long allocatedBytesCount, long collectedBytesCount);
    public int get_AllocatedObjectsCount();
    public int get_CollectedObjectsCount();
    public long get_AllocatedBytesCount();
    public long get_CollectedBytesCount();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public enum JetBrains.dotMemory.Model.Interface.Traffic.MemoryTrafficSummaryState : Enum {
    public int value__;
    public static MemoryTrafficSummaryState None;
    public static MemoryTrafficSummaryState NoTraffic;
    public static MemoryTrafficSummaryState NoCollected;
}
[ObsoleteAttribute]
public class JetBrains.dotMemory.Model.Interface.TraverseGraphResult : object {
    public IArray`1<ObjectNumber> SpanningTree;
    public IArray`1<ObjectNumber> TimeOrder;
    public int TraversedNodesCount;
    public IArray`1<byte> TraversedObjects;
    public TraverseGraphResult(int traversedNodesCount, IArray`1<ObjectNumber> timeOrder, IArray`1<ObjectNumber> spanningTree, IArray`1<byte> traversedObjects);
}
public class JetBrains.dotMemory.Model.Interface.TypeAggregate : ValueType {
    private IReadOnlyCollection`1<TypeStatistics> myGroups;
    private UInt32 myTotalObjectsCount;
    private ulong myTotalMemoryAmount;
    public IReadOnlyCollection`1<TypeStatistics> Groups { get; }
    public UInt32 TotalObjectsCount { get; }
    public ulong TotalMemoryAmount { get; }
    public TypeAggregate(IReadOnlyCollection`1<TypeStatistics> groups);
    public IReadOnlyCollection`1<TypeStatistics> get_Groups();
    public UInt32 get_TotalObjectsCount();
    public ulong get_TotalMemoryAmount();
    public virtual string ToString();
}
public static class JetBrains.dotMemory.Model.Interface.TypeNameConstant : object {
    public static char TypeNamePartDelimeterChar;
    public static string TypeNamePartDelimeter;
    public static char OpenArrayBraceChar;
    public static string OpenArrayBrace;
    public static char CloseArrayBraceChar;
    public static string CloseArrayBrace;
    public static char ArrayDimensionDelimeterChar;
    public static string ArrayDimensionDelimeter;
    public static string ObjectArrayDimensionDelimeter;
    public static char OpenGenericBraceChar;
    public static string OpenGenericBrace;
    public static char GenericArgumentDelimiterChar;
    public static string GenericArgumentDelimiter;
    public static string CloseGenericBrace;
    public static char GenericArgumentsNumberMark;
    public static string GenericArgumentsNumberMarkString;
    public static string NestedClassJoinSign;
    public static char GlobalNamespaceTerminator;
    public static string GlobalNamespace;
    public static char OpenNamespaceBraceChar;
    public static string OpenNamespaceBrace;
    public static char CloseNamespaceBraceChar;
    public static string CloseNamespaceBrace;
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.TypeNameExtension : object {
    private static TypeNameRenderer ourFullyQualifiedNameRenderer;
    private static TypeNameRenderer ourDecalredNameRenderer;
    private static TypeNameRenderer ourNamespaceRenderer;
    private static TypeNameRenderer ourBracedNamespaceRenderer;
    private static InstanceTypeNameRenderer ourDeclaredInstanceTypeNameRenderer;
    private static InstanceTypeNameRenderer ourFullyQualifiedInstanceTypeNameRenderer;
    private static TypeNameExtension();
    [ExtensionAttribute]
public static string GetFullyQualifiedName(ITypeName typeName);
    [ExtensionAttribute]
public static string GetFullyQualifiedName(ITypeName typeName, IReadOnlyList`1<ArrayDimensionInfo> arrayInfo);
    [ExtensionAttribute]
public static string GetShortName(ITypeName typeName, IReadOnlyList`1<ArrayDimensionInfo> arrayInfo);
    [ExtensionAttribute]
public static string GetNamespace(ITypeName typeName);
    [ExtensionAttribute]
public static string GetBracedNamespace(ITypeName typeName);
}
[FlagsAttribute]
public enum JetBrains.dotMemory.Model.Interface.TypeNamePart : Enum {
    public int value__;
    public static TypeNamePart None;
    public static TypeNamePart Namespace;
    public static TypeNamePart Name;
    public static TypeNamePart ArrayDetails;
    public static TypeNamePart All;
    public static TypeNamePart NameArrayDetails;
}
[ObsoleteAttribute("Use TypeNameHighlightRenderer instead.")]
public class JetBrains.dotMemory.Model.Interface.TypeNameRenderer : object {
    private TypeNamePart myMainParts;
    private TypeNamePart myGenericArgumentsParts;
    private bool myNamespaceAfter;
    public TypeNameRenderer(TypeNamePart mainParts, TypeNamePart genericArgumentsParts, bool namespaceAfter);
    public string Render(ITypeName typeName);
    public static string GetPresentableString(ITypeName typeName, TypeNamePart displayParts, TypeNamePart genericArgumentsParts, bool namespaceAsPostfix);
}
[DebuggerDisplayAttribute("{ObjectsCount}, {BytesCount}")]
public class JetBrains.dotMemory.Model.Interface.TypeStatistics : object {
    private TypeId myTypeId;
    [CompilerGeneratedAttribute]
private UInt32 <ObjectsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <BytesCount>k__BackingField;
    public TypeId TypeId { get; }
    public UInt32 ObjectsCount { get; public set; }
    public ulong BytesCount { get; public set; }
    public TypeStatistics(TypeId typeId, UInt32 objectsCount, ulong bytesCount);
    public TypeId get_TypeId();
    [CompilerGeneratedAttribute]
public UInt32 get_ObjectsCount();
    [CompilerGeneratedAttribute]
public void set_ObjectsCount(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_BytesCount();
    [CompilerGeneratedAttribute]
public void set_BytesCount(ulong value);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.WcfCommonUtil : object {
    public static void CallService(Action`1<T> act, EndpointAddress address, Binding binding, Action`1<CommunicationException> onCommunicationError, Action`1<TimeoutException> onTimeoutException);
    [ExtensionAttribute]
public static void CloseGracefully(ICommunicationObject communicationObject);
    [ExtensionAttribute]
public static ServiceEndpoint AddEndpoint(ServiceHost host, Binding transport);
}
public static class JetBrains.dotMemory.Model.Interface.WcfNetTcpUtil : object {
    private static string OurNetTcpBaseAddressTemplate;
    private static ushort DynamicPortRangeStart;
    [CompilerGeneratedAttribute]
private static Func`2<TcpConnectionInformation, int> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IPEndPoint, int> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<IPEndPoint, int> CS$<>9__CachedAnonymousMethodDelegate9;
    public static NetTcpBinding CreateBinding(Nullable`1<TimeSpan> closeTimeout, Nullable`1<TimeSpan> openTimeout, Nullable`1<TimeSpan> receiveTimeout, Nullable`1<TimeSpan> sendTimeout);
    public static Uri CreateAddress(ushort port);
    public static ushort GetAvailablePort(ushort startingPort);
    [CompilerGeneratedAttribute]
private static int <GetAvailablePort>b__2(TcpConnectionInformation n);
    [CompilerGeneratedAttribute]
private static int <GetAvailablePort>b__4(IPEndPoint n);
    [CompilerGeneratedAttribute]
private static int <GetAvailablePort>b__6(IPEndPoint n);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Model.Interface.WcfUdpDiscoveryUtil : object {
    public static Uri DefaultScope;
    public static TimeSpan DiscoveryDurationLimit;
    private static WcfUdpDiscoveryUtil();
    [ExtensionAttribute]
public static void AddServiceDiscovery(ServiceHost host);
    [ExtensionAttribute]
public static void AddScopeToEndPoint(ServiceEndpoint endpoint);
    [ExtensionAttribute]
public static void AddScopeToEndPoint(ServiceEndpoint endpoint, Uri scope);
}
[ZoneMarkerAttribute]
public class JetBrains.dotMemory.Model.Interface.ZoneMarker : object {
}
