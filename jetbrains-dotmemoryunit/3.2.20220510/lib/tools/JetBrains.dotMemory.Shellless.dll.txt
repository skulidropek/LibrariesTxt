public static class JetBrains.dotMemory.Shellless.ConsoleUtils.ConsoleDecoration : object {
    public static IDisposable Colors(ConsoleColor foreground, ConsoleColor background);
    public static IDisposable ForegroundColor(ConsoleColor foreground);
}
public class JetBrains.dotMemory.Shellless.ConsoleUtils.ConsoleException : Exception {
    private int myExitCode;
    public int ExitCode { get; }
    public ConsoleException(int exitCode, string message);
    public ConsoleException(int exitCode, string message, Exception innerException);
    public ConsoleException(int exitCode, Exception innerException);
    public int get_ExitCode();
    public static ConsoleException Wrap(Exception exception);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Shellless.ConsoleUtils.ConsoleExtension : object {
    [ExtensionAttribute]
[StringFormatMethodAttribute("message")]
public static void Info(IConsole console, string message, Object[] args);
    [StringFormatMethodAttribute("message")]
[ExtensionAttribute]
public static void Warn(IConsole console, string message, Object[] args);
    [StringFormatMethodAttribute("message")]
[ExtensionAttribute]
public static void Error(IConsole console, string message, Object[] args);
    [ExtensionAttribute]
public static void Error(IConsole console, Exception exception);
}
public interface JetBrains.dotMemory.Shellless.ConsoleUtils.IConsole {
    public abstract virtual void Info(string message);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
    [NotNullAttribute]
public abstract virtual TextReader OpenStandardInput();
    [NotNullAttribute]
public abstract virtual TextWriter OpenStandardOutput();
    public abstract virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    public abstract virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
}
public class JetBrains.dotMemory.Shellless.ConsoleUtils.StandardConsole : object {
    private static ILogger ourLogger;
    private object myMutex;
    private static StandardConsole();
    public sealed virtual void Info(string message);
    public sealed virtual void Warn(string message);
    public sealed virtual void Error(string message);
    public sealed virtual TextReader OpenStandardInput();
    public sealed virtual TextWriter OpenStandardOutput();
    public sealed virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    public sealed virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
}
internal class JetBrains.dotMemory.Shellless.Profiling.Impl.DummyHostUI : object {
    private static ILogger ourLogger;
    private static DummyHostUI();
    public sealed virtual bool ShowYesNo(string id, string message, bool defaultButton);
}
public class JetBrains.dotMemory.Shellless.Profiling.Impl.ProfilerCore : object {
    private static ILogger ourLogger;
    private Queue`1<Action`1<IMemoryCoreHostProfile>> myCommandsQueue;
    private EventWaitHandle myAwakeEvent;
    private object myMutex;
    private IMemoryCoreHostProfile myCore;
    private Lifetime myLifetime;
    private CoreCloseWay myCloseWay;
    private Action`1<Exception> OnError;
    [CompilerGeneratedAttribute]
private static Action`1<IMemoryCoreHostProfile> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Action`1<IMemoryCoreHostProfile> CS$<>9__CachedAnonymousMethodDelegateb;
    public Lifetime Lifetime { get; }
    public int ProcessId { get; }
    public Version RuntimeVersion { get; }
    public string Executable { get; }
    public ProfilerCore(IMemoryCoreHostProfile core, Lifetime lifetime, CoreCloseWay closeWay);
    private static ProfilerCore();
    public sealed virtual Lifetime get_Lifetime();
    public sealed virtual int get_ProcessId();
    public sealed virtual Version get_RuntimeVersion();
    public sealed virtual string get_Executable();
    public sealed virtual void EnqueueDump();
    public sealed virtual void EnqueueForceGc();
    public sealed virtual bool TryDumpNow();
    public sealed virtual bool TryForceGcNow();
    public sealed virtual void Close();
    public sealed virtual void add_OnError(Action`1<Exception> value);
    public sealed virtual void remove_OnError(Action`1<Exception> value);
    private void EnsureSupported();
    private void PumpCommands(object obj);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2(PropertyChangedEventArgs`1<CoreHostProfileStates> args);
    [CompilerGeneratedAttribute]
private static void <EnqueueDump>b__7(IMemoryCoreHostProfile core);
    [CompilerGeneratedAttribute]
private static void <EnqueueForceGc>b__a(IMemoryCoreHostProfile core);
    [CompilerGeneratedAttribute]
private void <Close>b__f(IMemoryCoreHostProfile core);
}
public class JetBrains.dotMemory.Shellless.Profiling.Impl.ProfilingLaunch : object {
    private static ILogger ourLogger;
    private object myMutex;
    private ExceptionAggregator myExceptionAggregator;
    private IDictionary`2<CoreIdentity, IProfilingClient> myClients;
    private CoreCloseWay myCloseWay;
    private Lifetime myLifetime;
    private IHostProfile myHostProfile;
    private int myCoWorkersCount;
    public bool IsFinished { get; }
    public bool IsSucceeded { get; }
    public Lifetime Lifetime { get; }
    [CanBeNullAttribute]
public AggregateException Exception { get; }
    internal CoreCloseWay CloseWay { get; }
    public ProfilingLaunch(CoreCloseWay closeWay, Lifetime lifetime);
    private static ProfilingLaunch();
    public sealed virtual bool get_IsFinished();
    public sealed virtual bool get_IsSucceeded();
    public sealed virtual Lifetime get_Lifetime();
    public sealed virtual AggregateException get_Exception();
    internal CoreCloseWay get_CloseWay();
    public sealed virtual void CoWorkerStarted();
    public sealed virtual void CoWorkerExited(Exception exception);
    public sealed virtual void Close();
    internal void Started(IHostProfile hostProfile);
    internal void Finished();
    [NotNullAttribute]
internal IProfilingClient GetClient(CoreIdentity coreIdentity);
    internal void AddClient(CoreIdentity coreIdentity, Func`2<IProfilingLaunch, IProfilingClient> clientFactory);
    internal void RemoveClient(CoreIdentity coreIdentity);
    internal void CatchError(Exception exception);
    private void EnsureFinished();
}
public class JetBrains.dotMemory.Shellless.Profiling.Impl.ProfilingLauncher : object {
    private static ILogger ourLogger;
    private IConsole myConsole;
    private IHostManager myHostManager;
    private ICoreLogsHandler myCoreLogsHandler;
    public ProfilingLauncher(IConsole console, IHostManager hostManager, ICoreLogsHandler coreLogsHandler);
    private static ProfilingLauncher();
    [NotNullAttribute]
public sealed virtual IProfilingLaunch Launch(Lifetime lifetime, ProfileConfiguration configuration, Func`3<IProfilerCore, IProfilingLaunch, IProfilingClient> onConnect);
    private void ValidateConfiguration(ProfileConfiguration configuration);
    private Pair`2<IProgressIndicator, IHostUI> Subscribe(IHostProfileSubscription subscription, ProfilingLaunch launch, Func`3<IProfilerCore, IProfilingLaunch, IProfilingClient> onConnect);
    private void OnAlert(ProfilingLaunch launch, HostAlertEventArgs args);
    private void OnAlert(ProfilingLaunch launch, IProfilerCore profilerCore, CoreAlertEventArgs args);
    private static void OnSnapshotSaved(ProfilingLaunch launch, ResponsibilityEventArgs`1<SnapshotDoneEventArgs> args);
}
public interface JetBrains.dotMemory.Shellless.Profiling.IProfilerCore {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    public int ProcessId { get; }
    public Version RuntimeVersion { get; }
    public string Executable { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual int get_ProcessId();
    public abstract virtual Version get_RuntimeVersion();
    public abstract virtual string get_Executable();
    public abstract virtual void EnqueueDump();
    public abstract virtual void EnqueueForceGc();
    public abstract virtual bool TryDumpNow();
    public abstract virtual bool TryForceGcNow();
    public abstract virtual void Close();
    public abstract virtual void add_OnError(Action`1<Exception> value);
    public abstract virtual void remove_OnError(Action`1<Exception> value);
}
public interface JetBrains.dotMemory.Shellless.Profiling.IProfilingClient {
    public int ProcessId { get; }
    public abstract virtual int get_ProcessId();
    public abstract virtual void OnSnapshotSaved(RawSnapshotDescriptor snapshotDescriptor);
    public abstract virtual void OnClose();
}
public interface JetBrains.dotMemory.Shellless.Profiling.IProfilingLaunch {
    public bool IsFinished { get; }
    public bool IsSucceeded { get; }
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [CanBeNullAttribute]
public AggregateException Exception { get; }
    public abstract virtual bool get_IsFinished();
    public abstract virtual bool get_IsSucceeded();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual AggregateException get_Exception();
    public abstract virtual void CoWorkerStarted();
    public abstract virtual void CoWorkerExited(Exception exception);
    public abstract virtual void Close();
}
public interface JetBrains.dotMemory.Shellless.Profiling.IProfilingLauncher {
    [NotNullAttribute]
public abstract virtual IProfilingLaunch Launch(Lifetime lifetime, ProfileConfiguration configuration, Func`3<IProfilerCore, IProfilingLaunch, IProfilingClient> onConnect);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Shellless.Profiling.ProfilingLaunchExtension : object {
    [ExtensionAttribute]
public static void CoWorkerExited(IProfilingLaunch launch);
}
public interface JetBrains.dotMemory.Shellless.UpdatesTracker.IShelllessUpdatesTracker {
    public abstract virtual void CheckForUpdatesAsync(ProductTraits[] products);
}
public class JetBrains.dotMemory.Shellless.UpdatesTracker.ProductTraits : object {
    private static string TraitName;
    private static string TraitVersion;
    private IDictionary`2<string, string> myTraits;
    public string Name { get; }
    public string Version { get; }
    protected ProductTraits(string name, Version version);
    protected void AddTrait(string name, string value);
    protected bool IsUnderTeamCity();
    public string get_Name();
    public string get_Version();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    public virtual string ToString();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Shellless.UpdatesTracker.ShelllessUpdatesTracker : object {
    private static string UpdatesUrl;
    private static ILogger ourLogger;
    private PermanentUserId myUserId;
    public ShelllessUpdatesTracker(PermanentUserId userId);
    private static ShelllessUpdatesTracker();
    [AsyncStateMachineAttribute("JetBrains.dotMemory.Shellless.UpdatesTracker.ShelllessUpdatesTracker/<CheckForUpdatesAsync>d__0")]
[DebuggerStepThroughAttribute]
public sealed virtual void CheckForUpdatesAsync(ProductTraits[] products);
}
public class JetBrains.dotMemory.Shellless.Utils.ExceptionAggregator : object {
    private static ILogger ourLogger;
    private List`1<Exception> myExceptions;
    private Action`1<Exception> myLogError;
    private object myLastResult;
    public bool IsEmpty { get; }
    public ExceptionAggregator(Action`1<Exception> logError);
    private static ExceptionAggregator();
    public bool get_IsEmpty();
    [NotNullAttribute]
public ExceptionAggregator Try(Action action);
    [NotNullAttribute]
public ExceptionAggregator TryAndReturn(Func`1<TResult> func);
    [NotNullAttribute]
public ExceptionAggregator TryWithLastResult(Action`1<TLastResult> action);
    [NotNullAttribute]
public ExceptionAggregator ThrowIfAny();
    [NotNullAttribute]
public ExceptionAggregator Catch(Exception exception);
    [NotNullAttribute]
public ExceptionAggregator Catch(AggregateException aggregateException);
    [CanBeNullAttribute]
public AggregateException ToException();
}
public class JetBrains.dotMemory.Shellless.Utils.SafeResult`1 : object {
    private T myValue;
    private Exception myException;
    [NotNullAttribute]
public T Value { get; }
    [CanBeNullAttribute]
public Exception Exception { get; }
    private SafeResult`1(T value);
    private SafeResult`1(Exception exception);
    public T get_Value();
    public Exception get_Exception();
    public static SafeResult`1<T> Succeeded(T value);
    public static SafeResult`1<T> Failed(Exception exception);
}
[ExtensionAttribute]
public static class JetBrains.dotMemory.Shellless.Utils.UniqueFileUtils : object {
    [ExtensionAttribute]
public static FileSystemPath MakeUniqueFile(FileSystemPath filePath);
    private static bool TryCreateNewFile(FileSystemPath path);
}
public interface JetBrains.dotMemory.Shellless.Workspace.Impl.IWorkspaceFileNameGenerator {
    [NotNullAttribute]
public string AnyWorkspaceWildcard { get; }
    public abstract virtual string get_AnyWorkspaceWildcard();
    [NotNullAttribute]
public abstract virtual string GetWorkspaceWildcard(string workspaceName);
    [NotNullAttribute]
public abstract virtual string Generate(string workspaceName);
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Shellless.Workspace.Impl.NonRecoverableWorkspaceBuilder : ShelllessWorkspaceBuilder {
    public NonRecoverableWorkspaceBuilder(Lifetime lifetime, FileSystemPath tempFolder, IWorkspaceFileNameGenerator fileNameGenerator, IWorkspaceExporter workspaceExporter);
    protected virtual void Cleanup();
}
[UsedImplicitlyAttribute]
public class JetBrains.dotMemory.Shellless.Workspace.Impl.RecoverableWorkspaceBuilder : ShelllessWorkspaceBuilder {
    private static string DotRecovery;
    private bool myIsWorkspaceDirty;
    public RecoverableWorkspaceBuilder(Lifetime lifetime, FileSystemPath tempFolder, IWorkspaceFileNameGenerator fileNameGenerator, IWorkspaceExporter workspaceExporter);
    public sealed virtual IReadOnlyList`1<FileSystemPath> GetRecoverables();
    protected virtual void DoCommitSnapshot(WsSnapshot snapshot);
    protected virtual void OnWorkspaceSaved(FileSystemPath workspaceZipFile);
    public sealed virtual FileSystemPath Recover(FileSystemPath recoveryFile);
    protected virtual void Cleanup();
}
public abstract class JetBrains.dotMemory.Shellless.Workspace.Impl.ShelllessWorkspaceBuilder : WorkspaceBuilderBase {
    private static string DotTmp;
    private JsonWorkspaceIndexSerializer mySerializer;
    private IWorkspaceFileNameGenerator myFileNameGenerator;
    private IWorkspaceExporter myWorkspaceExporter;
    [CompilerGeneratedAttribute]
private FileSystemPath <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <OutputFile>k__BackingField;
    protected FileSystemPath OutputDirectory { get; private set; }
    protected FileSystemPath OutputFile { get; private set; }
    protected ShelllessWorkspaceBuilder(Lifetime lifetime, FileSystemPath tempFolder, IWorkspaceFileNameGenerator fileNameGenerator, IWorkspaceExporter workspaceExporter);
    [CompilerGeneratedAttribute]
protected FileSystemPath get_OutputDirectory();
    [CompilerGeneratedAttribute]
private void set_OutputDirectory(FileSystemPath value);
    [CompilerGeneratedAttribute]
protected FileSystemPath get_OutputFile();
    [CompilerGeneratedAttribute]
private void set_OutputFile(FileSystemPath value);
    public virtual void SetOutputDirectory(FileSystemPath directory);
    public virtual void SetOutputFile(FileSystemPath file, bool overwrite);
    protected virtual void OnWorkspaceSaved(FileSystemPath workspaceZipFile);
    public virtual FileSystemPath Build();
    protected virtual void ProfilingSessionAdding(WsProfilingSession session);
    protected virtual void DoCommitSnapshot(WsSnapshot snapshot);
    protected virtual void Sweep();
    private void SaveMeta();
    protected void SaveWorkspace(FileSystemPath workspaceTempFolder, FileSystemPath workspaceZipFile);
    [NotNullAttribute]
protected static FileSystemPath GetWorkspaceIndexFilePath(FileSystemPath workspaceTempFolder);
    [NotNullAttribute]
protected FileSystemPath GetWorkspaceZipFilePath();
}
public class JetBrains.dotMemory.Shellless.Workspace.Impl.TimestampedWorkspaceFileNameGenerator : object {
    private static string TestWildcardSuffix;
    private static string AnyTestWildcard;
    public string AnyWorkspaceWildcard { get; }
    public sealed virtual string get_AnyWorkspaceWildcard();
    public sealed virtual string GetWorkspaceWildcard(string workspaceName);
    public sealed virtual string Generate(string workspaceName);
}
public abstract class JetBrains.dotMemory.Shellless.Workspace.Impl.WorkspaceBuilderBase : object {
    protected IDictionary`2<ProfilingSessionId, WsProfilingSession> Sessions;
    protected IDictionary`2<SnapshotId, WsSnapshot> Snapshots;
    protected object Mutex;
    private FileSystemPath myWorkspaceTempFolder;
    private string myWorkspaceName;
    [CompilerGeneratedAttribute]
private static Func`2<WsSnapshot, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<SnapshotId, WsSnapshot>, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<WsSnapshot, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    [NotNullAttribute]
protected string WorkspaceName { get; }
    public bool IsEmpty { get; }
    public FileSystemPath WorkspaceRootFolder { get; }
    protected WorkspaceBuilderBase(Lifetime lifetime, FileSystemPath tempFolder);
    protected string get_WorkspaceName();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual FileSystemPath get_WorkspaceRootFolder();
    public sealed virtual void SetWorkspaceName(string name);
    public sealed virtual void AddProfilingSession(ProfilingSessionId profilingSessionId, int processId, string processName);
    public sealed virtual void UpdateProfilingSessionInfo(ProfilingSessionId profilingSessionId, int processId, string processName);
    public sealed virtual ProfilingSessionId AddProfilingSession(int processId, string processName);
    public sealed virtual FileSystemPath AddSnapshot(ProfilingSessionId sessionId, SnapshotId snapshotId, int snapshotIndex);
    public sealed virtual void CommitSnapshot(SnapshotId snapshotId);
    public abstract virtual void SetOutputDirectory(FileSystemPath directory);
    public abstract virtual void SetOutputFile(FileSystemPath file, bool overwrite);
    public abstract virtual FileSystemPath Build();
    protected virtual void ProfilingSessionAdding(WsProfilingSession session);
    protected virtual void ProfilingSessionAdded(WsProfilingSession session);
    protected virtual void SnapshotAdding(WsSnapshot snapshot);
    protected virtual void SnapshotAdded(WsSnapshot snapshot);
    protected virtual void DoCommitSnapshot(WsSnapshot snapshot);
    protected virtual void Sweep();
    protected virtual void Cleanup();
    protected WsProfilingSession GetSession(ProfilingSessionId sessionId);
    protected WsSnapshot GetSnapshot(SnapshotId snapshotId);
    private FileSystemPath GetSnapshotIndexFilePath(SnapshotId snapshotId);
    [CompilerGeneratedAttribute]
private static bool <get_IsEmpty>b__1(WsSnapshot x);
    [CompilerGeneratedAttribute]
private static bool <Sweep>b__7(KeyValuePair`2<SnapshotId, WsSnapshot> pair);
    [CompilerGeneratedAttribute]
private static bool <Cleanup>b__9(WsSnapshot x);
}
public interface JetBrains.dotMemory.Shellless.Workspace.ISupportWorkspaceRecovery {
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<FileSystemPath> GetRecoverables();
    [NotNullAttribute]
public abstract virtual FileSystemPath Recover(FileSystemPath recoveryFile);
}
public interface JetBrains.dotMemory.Shellless.Workspace.IWorkspaceBuilder {
    public bool IsEmpty { get; }
    public FileSystemPath WorkspaceRootFolder { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual void SetOutputDirectory(FileSystemPath directory);
    public abstract virtual void SetOutputFile(FileSystemPath file, bool overwrite);
    public abstract virtual void SetWorkspaceName(string name);
    [NotNullAttribute]
public abstract virtual ProfilingSessionId AddProfilingSession(int processId, string processName);
    [NotNullAttribute]
public abstract virtual void AddProfilingSession(ProfilingSessionId profilingSessionId, int processId, string processName);
    [NotNullAttribute]
public abstract virtual void UpdateProfilingSessionInfo(ProfilingSessionId profilingSessionId, int processId, string processName);
    [NotNullAttribute]
public abstract virtual FileSystemPath AddSnapshot(ProfilingSessionId sessionId, SnapshotId snapshotId, int snapshotIndex);
    public abstract virtual void CommitSnapshot(SnapshotId snapshotId);
    [NotNullAttribute]
public abstract virtual FileSystemPath Build();
    public abstract virtual FileSystemPath get_WorkspaceRootFolder();
}
