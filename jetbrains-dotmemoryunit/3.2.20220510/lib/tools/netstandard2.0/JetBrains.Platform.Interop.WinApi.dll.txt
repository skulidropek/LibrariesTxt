public enum JetBrains.Profiler.Windows.Api.ApiState : Enum {
    public byte value__;
    public static ApiState None;
    public static ApiState Inactive;
    public static ApiState Active;
}
public static class JetBrains.Profiler.Windows.Api.CoverageProfiler : object {
    private static IStorage ourStorage;
    private static string MethodPrefix;
    public static bool IsActive { get; }
    public static bool CanDetach { get; }
    private static CoverageProfiler();
    private static HResults IsActive_Entry(ulong clrStamp);
    private static HResults Begin_Entry(ulong clrStamp);
    private static HResults BeginGroup_Entry(ulong clrStamp, string name);
    private static HResults EndGroup_Entry(ulong clrStamp);
    private static HResults Start_Entry(ulong clrStamp);
    private static HResults Stop_Entry(ulong clrStamp);
    private static HResults EndDrop_Entry(ulong clrStamp);
    private static HResults EndSave_Entry(ulong clrStamp);
    private static HResults CanDetach_Entry(ulong clrStamp);
    private static HResults Detach_Entry(ulong clrStamp);
    public static bool get_IsActive();
    public static bool get_CanDetach();
    public static void Begin();
    public static void BeginGroup(string name);
    public static void EndGroup();
    public static void Start();
    public static void Stop();
    public static void EndDrop();
    public static void EndSave();
    public static void Detach();
}
internal static class JetBrains.Profiler.Windows.Api.Impl.Helper : object {
    public static string Dll;
    public static ulong ClrStamp;
    private static Helper();
    public static IStorage CreateStorage(string name);
    public static bool CheckHResult_Boolean(HResults hr);
    public static void CheckHResult(HResults hr);
    private static string GetThrowMessageFromHResult(HResults hr);
}
internal interface JetBrains.Profiler.Windows.Api.Impl.IStorage {
    public bool IsActive { get; public set; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
}
internal static class JetBrains.Profiler.Windows.Api.Impl.Names : object {
    public static string Prefix;
    public static string SuffixOld;
    public static string Suffix;
    private static Names();
}
internal static class JetBrains.Profiler.Windows.Api.Impl.StateUtil : object {
    private static string Prefix;
    private static string ourEventName;
    private static string ourEventNameOld;
    public static ApiState State { get; }
    private static StateUtil();
    public static ApiState get_State();
}
internal class JetBrains.Profiler.Windows.Api.Impl.Storage_Win : object {
    private IntPtr myHandle;
    private Byte* pData;
    public bool IsActive { get; public set; }
    public Storage_Win(string name);
    public sealed virtual bool get_IsActive();
    public sealed virtual void set_IsActive(bool value);
    protected virtual override void Finalize();
    private static UInt32 GetAllocationGranularity();
    private static string GetName(string name);
    private void CleanUp();
}
[FlagsAttribute]
internal enum JetBrains.Profiler.Windows.Api.Impl.WinApi.AccessRights : Enum {
    public UInt32 value__;
    public static AccessRights SYNCHRONIZE;
}
[FlagsAttribute]
internal enum JetBrains.Profiler.Windows.Api.Impl.WinApi.FileMapAccessRights : Enum {
    public UInt32 value__;
    public static FileMapAccessRights FILE_MAP_WRITE;
    public static FileMapAccessRights FILE_MAP_READ;
}
internal enum JetBrains.Profiler.Windows.Api.Impl.WinApi.HResults : Enum {
    public UInt32 value__;
    public static HResults S_OK;
    public static HResults S_FALSE;
    public static HResults E_FAIL;
    public static HResults CORE_API_E_NO_PROFILER_DETECTED;
    public static HResults CORE_API_E_API_DISABLED;
    public static HResults CORE_API_E_NOT_SUPPORTED;
    public static HResults CORE_API_E_UNRECOVERABLE_ERROR;
    public static HResults CORE_API_E_INVALID_CALL_SEQUENCE;
    public static HResults CORE_API_E_NOT_IMPLEMENTED;
    public static HResults CORE_API_E_INVALID_SECTION_TYPE;
}
internal static class JetBrains.Profiler.Windows.Api.Impl.WinApi.Kernel32Dll : object {
    private static string Dll;
    internal static IntPtr OpenEventW(AccessRights dwDesiredAccess, bool inheritHandle, string name);
    public static WaitResult WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
    public static void GetSystemInfo(SYSTEM_INFO* lpSystemInfo);
    public static IntPtr GetModuleHandleW(string lpModuleName);
    public static UInt32 GetCurrentProcessId();
    public static IntPtr CreateFileMappingW(IntPtr hFile, Void* lpSemaphoreAttributes, MemoryProtectionConstants flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    public static Void* MapViewOfFile(IntPtr hFileMappingObject, FileMapAccessRights dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);
    public static bool UnmapViewOfFile(Void* lpBaseAddress);
    public static bool CloseHandle(IntPtr hObject);
}
[FlagsAttribute]
internal enum JetBrains.Profiler.Windows.Api.Impl.WinApi.MemoryProtectionConstants : Enum {
    public UInt32 value__;
    public static MemoryProtectionConstants PAGE_READWRITE;
}
internal enum JetBrains.Profiler.Windows.Api.Impl.WinApi.ProcessorArchitecture : Enum {
    public ushort value__;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_INTEL;
    public static ProcessorArchitecture PROCESSOR_ARCHITECTURE_AMD64;
}
internal class JetBrains.Profiler.Windows.Api.Impl.WinApi.SYSTEM_INFO : ValueType {
    public ProcessorArchitecture wProcessorArchitecture;
    public ushort wReserved;
    public UInt32 dwPageSize;
    public IntPtr lpMinimumApplicationAddress;
    public IntPtr lpMaximumApplicationAddress;
    public IntPtr dwActiveProcessorMask;
    public UInt32 dwNumberOfProcessors;
    public UInt32 dwProcessorType;
    public UInt32 dwAllocationGranularity;
    public ushort wProcessorLevel;
    public ushort wProcessorRevision;
}
internal enum JetBrains.Profiler.Windows.Api.Impl.WinApi.WaitResult : Enum {
    public UInt32 value__;
    public static WaitResult WAIT_OBJECT_0;
}
internal enum JetBrains.Profiler.Windows.Api.Impl.WinApi.WinError : Enum {
    public int value__;
    public static WinError ERROR_ALREADY_EXISTS;
}
public static class JetBrains.Profiler.Windows.Api.MemoryProfiler : object {
    private static IStorage ourStorage;
    private static string MethodPrefix;
    public static bool IsActive { get; }
    public static bool CanDetach { get; }
    public static bool CanControlAllocations { get; }
    private static MemoryProfiler();
    private static HResults IsActive_Entry(ulong clrStamp);
    private static HResults Dump_Entry(ulong clrStamp);
    private static HResults CanDetach_Entry(ulong clrStamp);
    private static HResults Detach_Entry(ulong clrStamp);
    private static HResults CanControlAllocations_Entry(ulong clrStamp);
    private static HResults EnableAllocations_Entry(ulong clrStamp);
    private static HResults DisableAllocations_Entry(ulong clrStamp);
    public static bool get_IsActive();
    public static bool get_CanDetach();
    public static bool get_CanControlAllocations();
    public static void Dump();
    public static void Detach();
    public static void EnableAllocations();
    public static void DisableAllocations();
}
public static class JetBrains.Profiler.Windows.Api.PerformanceProfiler : object {
    private static IStorage ourStorage;
    private static string MethodPrefix;
    public static bool IsActive { get; }
    public static bool CanDetach { get; }
    private static PerformanceProfiler();
    private static HResults IsActive_Entry(ulong clrStamp);
    private static HResults Begin_Entry(ulong clrStamp);
    private static HResults BeginGroup_Entry(ulong clrStamp, string name);
    private static HResults EndGroup_Entry(ulong clrStamp);
    private static HResults Start_Entry(ulong clrStamp);
    private static HResults Stop_Entry(ulong clrStamp);
    private static HResults EndDrop_Entry(ulong clrStamp);
    private static HResults EndSave_Entry(ulong clrStamp);
    private static HResults CanDetach_Entry(ulong clrStamp);
    private static HResults Detach_Entry(ulong clrStamp);
    public static bool get_IsActive();
    public static bool get_CanDetach();
    public static void Begin();
    public static void BeginGroup(string name);
    public static void EndGroup();
    public static void Start();
    public static void Stop();
    public static void EndDrop();
    public static void EndSave();
    public static void Detach();
}
public class JetBrains.Profiler.Windows.Api.ProfilingApiException : ApplicationException {
    public ProfilingApiException(string message);
}
public static class JetBrains.Profiler.Windows.Api.TimelineProfiler : object {
    private static IStorage ourStorage;
    private static string MethodPrefix;
    public static bool IsActive { get; }
    public static bool CanDetach { get; }
    private static TimelineProfiler();
    private static HResults IsActive_Entry(ulong clrStamp);
    private static HResults Begin_Entry(ulong clrStamp);
    private static HResults EndDrop_Entry(ulong clrStamp);
    private static HResults EndSave_Entry(ulong clrStamp);
    private static HResults CanDetach_Entry(ulong clrStamp);
    private static HResults Detach_Entry(ulong clrStamp);
    public static bool get_IsActive();
    public static bool get_CanDetach();
    public static void Begin();
    public static void EndDrop();
    public static void EndSave();
    public static void Detach();
}
