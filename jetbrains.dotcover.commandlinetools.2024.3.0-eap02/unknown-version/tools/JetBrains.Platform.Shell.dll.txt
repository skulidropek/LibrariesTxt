public class JetBrains.Application.AbstractTreeBuilder.AbstractTreeBuilder : object {
    private IAbstractTreeControl myTreeControl;
    private IAbstractTreeStructure myTreeStructure;
    private ITreeStructurePresenter myPresenter;
    private IComparer`1<IAbstractTreeNode> myNodeComparer;
    private Dictionary`2<IAbstractTreeNode, object> myNodeToSavedItemMap;
    private JetHashSet`1<IAbstractTreeNode> myNodesWithDummyChild;
    private int myTransactionLevel;
    [CanBeNullAttribute]
private IShellLocks myShellLocks;
    public IComparer`1<IAbstractTreeNode> NodeComparer { get; public set; }
    public AbstractTreeBuilder(IAbstractTreeControl treeControl, IAbstractTreeStructure treeStructure, ITreeStructurePresenter presenter, bool buildTree, IShellLocks shellLocks);
    public void CheckConsistency();
    private void AddNodes(IList`1<IAbstractTreeNode> list, IAbstractTreeNode parentNode);
    public void UpdateAll();
    public void UpdateSubtree(IAbstractTreeNode rootNode, object rootItem);
    public void UpdateNode(IAbstractTreeNode rootNode, object rootItem);
    public void SortSubtree(IAbstractTreeNode rootNode);
    public IComparer`1<IAbstractTreeNode> get_NodeComparer();
    public void set_NodeComparer(IComparer`1<IAbstractTreeNode> value);
    private void OnExpandedChanged(IAbstractTreeControl treeControl, IAbstractTreeNode node);
    private void RemoveAllChildren(IAbstractTreeNode parentNode, bool physicallyRemove);
    private void UpdateChildren(IAbstractTreeNode parentNode);
    private void InitializeNewNode(IAbstractTreeNode node, object item);
    public void StartTransaction();
    public void EndTransaction();
    public void SortAll();
    private void ExecuteOrQueue(string actionName, Action action);
    public object ItemByNode(IAbstractTreeNode node);
    [ObsoleteAttribute("Doesn't dispose itemPath enumerator!")]
public void BuildNodeByPath(IEnumerable`1<object> itemsPath, Action`1<IAbstractTreeNode> onFinished);
    private void BuildNodeByPath(IAbstractTreeNode fromNode, IEnumerator`1<object> itemsPath, Action`1<IAbstractTreeNode> onFinished);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0();
}
public class JetBrains.Application.AbstractTreeBuilder.ExpandedChangedHandler : MulticastDelegate {
    public ExpandedChangedHandler(object object, IntPtr method);
    public virtual void Invoke(IAbstractTreeControl treeControl, IAbstractTreeNode node);
    public virtual IAsyncResult BeginInvoke(IAbstractTreeControl treeControl, IAbstractTreeNode node, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface JetBrains.Application.AbstractTreeBuilder.IAbstractTreeControl {
    public IAbstractTreeNode Root { get; }
    public abstract virtual IAbstractTreeNode get_Root();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExpandedChanged(ExpandedChangedHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExpandedChanged(ExpandedChangedHandler value);
    public abstract virtual void StartTransaction();
    public abstract virtual void EndTransaction();
}
public interface JetBrains.Application.AbstractTreeBuilder.IAbstractTreeNode {
    public IAbstractTreeNode Parent { get; }
    public IEnumerable`1<IAbstractTreeNode> Children { get; }
    public bool Expanded { get; public set; }
    public IPresentableItem PresentableItem { get; }
    public abstract virtual IAbstractTreeNode get_Parent();
    public abstract virtual IEnumerable`1<IAbstractTreeNode> get_Children();
    public abstract virtual bool get_Expanded();
    public abstract virtual void set_Expanded(bool value);
    public abstract virtual IAbstractTreeNode AddChild();
    public abstract virtual IAbstractTreeNode AddDummyChild();
    public abstract virtual void RemoveChild(IAbstractTreeNode child);
    public abstract virtual void SortChildren(IComparer`1<IAbstractTreeNode> nodeComparer);
    public abstract virtual IPresentableItem get_PresentableItem();
}
public interface JetBrains.Application.AbstractTreeBuilder.IAbstractTreeStructure {
    public object Root { get; }
    public bool AutoExpandSingleChild { get; }
    public abstract virtual object get_Root();
    public abstract virtual IEnumerable GetChildren(object item);
    public abstract virtual bool AreChildrenEquivalent(object child1, object child2);
    public abstract virtual int GetChildEquivalenceHashCode(object child);
    public abstract virtual object SaveItem(object item);
    public abstract virtual object RestoreItem(object o);
    public abstract virtual bool CanHaveChildren(object item);
    public abstract virtual bool IsInitiallyExpanded(object item);
    public abstract virtual bool get_AutoExpandSingleChild();
}
public interface JetBrains.Application.AbstractTreeBuilder.ITreeStructurePresenter {
    public abstract virtual void UpdateNode(IAbstractTreeNode node, object item);
    public abstract virtual void DisposeNode(IAbstractTreeNode node, object item);
}
public class JetBrains.Application.ActivityTrackingNew.ActivityDescriptor : ValueType {
    [NotNullAttribute]
private string myGroup;
    [NotNullAttribute]
private string myId;
    [NotNullAttribute]
public string Group { get; }
    [NotNullAttribute]
public string Id { get; }
    public ActivityDescriptor(string group, string id);
    public string get_Group();
    public string get_Id();
    public static ActivityDescriptor OfAction(string actionId);
    public sealed virtual bool Equals(ActivityDescriptor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ActivityDescriptor left, ActivityDescriptor right);
    public static bool op_Inequality(ActivityDescriptor left, ActivityDescriptor right);
    public virtual string ToString();
}
public interface JetBrains.Application.ActivityTrackingNew.IActivityTracking {
    public abstract virtual void TrackAction(string actionId);
    public abstract virtual void TrackActivity(string activityGroup, string activityId, int count);
}
public interface JetBrains.Application.ActivityTrackingNew.IFeatureSuggesterActionTrackingEnabler {
    public abstract virtual bool ShouldTrackAction(string actionId);
}
public interface JetBrains.Application.ActivityTrackingNew.IUsageStatisticsCounters {
    [NotNullAttribute]
public IProperty`1<bool> IsAvailable { get; }
    public abstract virtual IProperty`1<bool> get_IsAvailable();
    [NotNullAttribute]
public abstract virtual IProperty`1<int> GetActivityUsageCounter(Lifetime lifetime, ActivityDescriptor activityDescriptor);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.ActivityTrackingNew.PermanentDeviceId : object {
    private IDataAccess`1<string> myStorageAccess;
    public PermanentDeviceId(DataAccess dataAccess);
    public string GetUniqueDeviceId();
    private string GenerateId();
    private char GetOSChar();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.ActivityTrackingNew.PermanentUserId : object {
    private static string InstallationIdDataName;
    private IDataAccess`1<Guid> myStorageAccess;
    public PermanentUserId(DataAccess dataAccess);
    public Guid GetUniqueUserId();
    public static Guid StringToGuid(string s);
    public static string GuidToString(Guid guid);
    [ObsoleteAttribute("Do not use the method. Inject the component.")]
public static PermanentUserId CreatePermanentUserId();
    [ObsoleteAttribute("Do not use the method. Inject the component.")]
public static Guid GetUniqueUserId2();
}
[ExtensionAttribute]
public static class JetBrains.Application.ActivityTrackingNew.UsageCounterProviderEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<int> GetActionUsageCounter(IUsageStatisticsCounters usageStatisticsCounters, Lifetime lifetime, string actionId);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.ActivityTrackingNew.UsageStatistics : object {
    private IEnumerable`1<IActivityTracking> myTrackerList;
    public UsageStatistics(IEnumerable`1<IActivityTracking> trackers);
    [ObsoleteAttribute("This event is already converted to new API")]
public void TrackActionConverted(string actionId);
    public void TrackActionForSuggester(string actionId);
    public void TrackActivityForSuggester(string activityGroup, string actionId, int count);
    [ObsoleteAttribute("This event is already converted to new API")]
public void TrackActivityConverted(string activityGroup, string activityId, int count);
    [ObsoleteAttribute("This system will be removed soon. Contact slava.tutushkin for details on the new API")]
public void TrackAction(string actionId);
    [ObsoleteAttribute("This system will be removed soon. Contact slava.tutushkin for details on the new API")]
public void TrackActivity(string activityGroup, string activityId, int count);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.AdvancedSettingsLayersEditingTrait : object {
    public IProperty`1<bool> IsAdvancedLayerEditingOn;
    public AdvancedSettingsLayersEditingTrait(Lifetime lifetime, IEnumerable`1<ISettingsApplicationTrait> viewTraits, IEnumerable`1<ISettingsApplicationTrait> enumTraits);
}
[RdTypeAttribute]
public class JetBrains.Application.Alter.AlterAction : object {
    [CompilerGeneratedAttribute]
private IAlterRequest <Request>k__BackingField;
    public IAlterRequest Request { get; }
    public AlterAction(IAlterRequest request);
    [CompilerGeneratedAttribute]
public IAlterRequest get_Request();
    public sealed virtual void Accept(IAlterRunnableVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RdTypeAttribute]
public class JetBrains.Application.Alter.AlterBatch : object {
    private List`1<IAlterRunnable> myData;
    private AlterBatch(List`1<IAlterRunnable> list);
    public sealed virtual void Accept(IAlterRunnableVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RdTypeAttribute]
public class JetBrains.Application.Alter.AlterCommit : object {
    [CompilerGeneratedAttribute]
private AlterRevisionId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private AlterRevisionId <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IAlterRequest <AlterRequest>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public AlterRevisionId Id { get; }
    public AlterRevisionId Parent { get; }
    public IAlterRequest AlterRequest { get; }
    [NullableAttribute("2")]
public string Message { get; }
    public AlterCommit(AlterRevisionId id, AlterRevisionId parent, IAlterRequest alterRequest, string message);
    [CompilerGeneratedAttribute]
public AlterRevisionId get_Id();
    [CompilerGeneratedAttribute]
public AlterRevisionId get_Parent();
    [CompilerGeneratedAttribute]
public IAlterRequest get_AlterRequest();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Message();
    public virtual string ToString();
    public sealed virtual void Accept(IAlterRunnableVisitor visitor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("JetBrains.Application.Alter.AlterCommitDatabaseDebugView")]
public class JetBrains.Application.Alter.AlterCommitDatabase : object {
    private Dictionary`2<AlterRevisionId, AlterCommit> myRevisions;
    private ReaderWriterLockSlim myLock;
    public int Count { get; }
    [NullableAttribute("2")]
public AlterCommit Item { get; }
    public int get_Count();
    [NullableContextAttribute("2")]
public AlterCommit get_Item(AlterRevisionId id);
    [NullableContextAttribute("2")]
public AlterCommit Get(AlterRevisionId id);
    public void Add(AlterCommit commit);
    public void Put(AlterCommit commit);
    public void Gc(AlterRevisionId a, AlterRevisionId b);
    public void Gc(AlterRevisionId head);
    public void Clear();
    [PureAttribute]
public bool IsBasedOn(AlterRevisionId base, AlterRevisionId successor);
    [NullableContextAttribute("2")]
[PureAttribute]
public AlterCommit FindBase(AlterRevisionId x, AlterRevisionId y);
    [IteratorStateMachineAttribute("JetBrains.Application.Alter.AlterCommitDatabase/<Log>d__14")]
[PureAttribute]
public IEnumerable`1<AlterCommit> Log(AlterRevisionId start, Nullable`1<AlterRevisionId> till);
    private sealed virtual override IEnumerator`1<AlterCommit> System.Collections.Generic.IEnumerable<JetBrains.Application.Alter.AlterCommit>.GetEnumerator();
    public sealed virtual IEnumerator GetEnumerator();
    [CompilerGeneratedAttribute]
private int <FindBase>g__Height|13_0(AlterCommit c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Alter.AlterCommitDatabaseDebugView : object {
    private AlterCommitDatabase myRepo;
    [UsedImplicitlyAttribute]
public string AsGraphviz { get; }
    public AlterCommitDatabaseDebugView(AlterCommitDatabase repo);
    public string get_AsGraphviz();
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Alter.AlterRevisionId : ValueType {
    public static AlterRevisionId Initial;
    public OWORD Id;
    public AlterRevisionId(OWORD id);
    private static AlterRevisionId();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(AlterRevisionId left, AlterRevisionId right);
    public static bool op_Inequality(AlterRevisionId left, AlterRevisionId right);
    public bool Equals(AlterRevisionId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.Alter.AlterVisitorHelper : object {
    [ExtensionAttribute]
public static IEnumerable`1<IAlterRequest> CollectRequests(IAlterRunnable self);
    [ExtensionAttribute]
public static void ForEachRequest(IAlterRunnable self, Action`1<IAlterRequest> onRequest);
}
public interface JetBrains.Application.Alter.IAlterHacksPump {
    public abstract virtual void Pump();
}
public interface JetBrains.Application.Alter.IAlterRequest {
}
public interface JetBrains.Application.Alter.IAlterRequestNeedWriteLockMarker {
}
public interface JetBrains.Application.Alter.IAlterResponse {
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.Alter.IAlterRunnable {
    public abstract virtual void Accept(IAlterRunnableVisitor visitor);
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.Alter.IAlterRunnableVisitor {
    public abstract virtual void Visit(AlterCommit commit);
    public abstract virtual void Visit(AlterAction action);
}
internal class JetBrains.Application.Application.Env.AssertionModeInitializerRef : AssertionModeInitializer {
    [ModuleInitializerAttribute]
internal static void Init();
}
public static class JetBrains.Application.Application.Environment.Infra.TeamCityExceptionReporting : object {
    public static void CreateAndInstallAll();
    public static void CreateAndInstallExceptionReporter();
    public static void CreateAndInstallLoggerListener();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.ApplicationHost : object {
    [CompilerGeneratedAttribute]
private HostInfo <HostInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostProductInfo <HostProductInfo>k__BackingField;
    public HostInfo HostInfo { get; }
    public IHostProductInfo HostProductInfo { get; }
    public ApplicationHost(HostInfo hostInfo, IHostProductInfo hostProductInfo);
    [CompilerGeneratedAttribute]
public sealed virtual HostInfo get_HostInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IHostProductInfo get_HostProductInfo();
    public virtual string ToString();
    public string HostProductInfoToString();
    public sealed virtual FileSystemPath GetHostFolder(HostFolderLifetime folderLifetime, ApplicationHostDetails folderDetails);
    public sealed virtual RelativePath GetHostRelativeFolder(ApplicationHostDetails folderDetails);
    public sealed virtual string HostIdentifier(ApplicationHostDetails folderDetails);
}
public class JetBrains.Application.ApplicationPackageArtifactLocallyInstalled : ApplicationPackageArtifact {
    private static string SerializationIdentity;
    private FileSystemPath myLocalInstallDirectory;
    [NotNullAttribute]
public FileSystemPath LocalInstallDirectory { get; }
    public ApplicationPackageArtifactLocallyInstalled(IStructuredStorage sstg);
    public ApplicationPackageArtifactLocallyInstalled(CsexpReader reader);
    public ApplicationPackageArtifactLocallyInstalled(ApplicationPackageArtifact package, FileSystemPath localInstallDirectory);
    public ApplicationPackageArtifactLocallyInstalled(SubplatformName sname, JetSemanticVersion version, string companyNameHuman, string companyNameLegal, DateTime builtOn, Nullable`1<DateTime> bestBefore, Nullable`1<DateTime> birthDate, FileSystemPath localInstallDirectory, IEnumerable`1<ApplicationPackageFile> files, ICollection`1<ApplicationPackageReference> references);
    private static ApplicationPackageArtifactLocallyInstalled();
    public sealed virtual FileSystemPath get_LocalInstallDirectory();
    protected virtual void AssertValid();
    protected virtual void SerializeCore(CsexpArchive ar);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.ApplicationPackagesFiles : object {
    private Lazy`1<JetRelativePathPrefixTree`1<FileInPackage>> myTree;
    public ApplicationPackagesFiles(ApplicationPackagesLocallyInstalled packages, ILogger logger);
    public IEnumerable`1<FileInPackage> GetFiles(RelativePath root);
}
[ExtensionAttribute]
public static class JetBrains.Application.ApplicationPackagesFilesEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemPath> GetFileSystemPaths(ApplicationPackagesFiles applicationPackagesFiles, RelativePath root);
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemPath> GetExtensionsFileSystemPaths(ApplicationPackagesFiles applicationPackagesFiles, RelativePath root);
    [ExtensionAttribute]
public static IEnumerable`1<FileInPackage> GetExtensionsFiles(ApplicationPackagesFiles applicationPackagesFiles, RelativePath root);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatch : object {
    public IListEvents`1<BuildEntityPointer> BuildEntryPoints;
    public ISignal`1<InOutEventArgs`2<BuildAppFullRequest, BuildAppSession>> BuildRequestedFull;
    public ISignal`1<InOutEventArgs`2<SimpleBuildRequest, Task`1<BuildAppSession>>> BuildRequestedSimple;
    public IListEvents`1<BuildAppSession> RunningBuildSessions;
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatchActivateLogOnBuild : object {
    public BuildAppDispatchActivateLogOnBuild(Lifetime lifetimeComponent, BuildAppDispatch dispatch, BuildLog buildlog, ILogger logger);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "VSVersionRootSuffixDoNotCompileFlagAndOtherUserBuildPreferencesSettingDescription")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatchSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "VisualStudioVersionForLocalInstallSettingDescription")]
public string VisualStudioVersion;
}
[ShellComponentAttribute("9")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.BuildAppDispatchTurnSimpleBuildRequestIntoFull : object {
    [NullableContextAttribute("1")]
public BuildAppDispatchTurnSimpleBuildRequestIntoFull(Lifetime lifetime, BuildAppDispatch dispatch, ILazy`1<IInputArtifactStringTable> stringtable, ILazy`1<BuildScriptEntrySources> buildScriptSources, ILazy`1<BuildRequestEntryBinaries> buildRequestEntryBinaries, ILogger logger, IThreading threading);
}
public class JetBrains.Application.Build.App.Dispatch.BuildAppFullRequest : object {
    [NotNullAttribute]
public BuildRunnerCommandString CommandString;
    [NotNullAttribute]
public ImmutableArray`1<AssemblyQualifiedTypeName> Objectives { get; }
    public BuildAppFullRequest(BuildRunnerCommandString commandString);
    public ImmutableArray`1<AssemblyQualifiedTypeName> get_Objectives();
    [CompilerGeneratedAttribute]
private AssemblyQualifiedTypeName <get_Objectives>b__3_0(string sObj);
}
public class JetBrains.Application.Build.App.Dispatch.BuildAppRunnerBootstrapped : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<ImmutableFileItem> Files;
    public BuildAppRunnerBootstrapped(IReadOnlyCollection`1<ImmutableFileItem> files);
    public virtual string ToString();
}
public class JetBrains.Application.Build.App.Dispatch.BuildAppSession : object {
    [NotNullAttribute]
public Task`1<BuildRunnerResult> AsyncBuildResult;
    [NotNullAttribute]
public IListEvents`1<BuildLogRecord> LogEntries;
    [NotNullAttribute]
public BuildAppFullRequest Request;
    public BuildAppSession(BuildAppFullRequest request, Task`1<BuildRunnerResult> asyncBuildResult);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.BuildOutputFolders : object {
    private static Missing BuildOutputs;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ILazy`1<IInputArtifactStringTable> myStringtable;
    private IThreading myThreading;
    public BuildOutputFolders(Lifetime lifetime, ILazy`1<IInputArtifactStringTable> stringtable, IThreading threading, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Dispatch.BuildOutputFolders/<GetBuildOutputDir>d__6")]
public Task`1<FileSystemPath> GetBuildOutputDir(string displayname);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Dispatch.BuildOutputFolders/<GetCurrentBuildOutputsBaseDir>d__7")]
public Task`1<FileSystemPath> GetCurrentBuildOutputsBaseDir();
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Dispatch.BuildOutputFolders/<CheckSpawnOutputsCleanup>d__8")]
private Task CheckSpawnOutputsCleanup(FileSystemPath basedir);
    [CompilerGeneratedAttribute]
private void <CheckSpawnOutputsCleanup>b__8_1(DirectoryEntryData ded);
    [CompilerGeneratedAttribute]
private void <CheckSpawnOutputsCleanup>b__8_4(DirectoryEntryData ded);
}
[ShellComponentAttribute("20")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch : object {
    private static string BuildRunnerCoreRunCmd;
    private static string SelfBootstrapObjective;
    private IProperty`1<CachedBootstrapper> myCurrentCachedBootstrapper;
    private int myCurrentlyRunningBootstrapBuildsCount;
    public Func`4<IListEvents`1<BuildLogRecord>, ProductHomeDirArtifact, IncrementalBuild, Task`1<BuildAppRunnerBootstrapped>> BuildBootstrappedRunnerAsync;
    public RunBootstrapperBuildForDispatch(Lifetime lifetimeComponent, IThreading threading, ILazy`1<IInputArtifactStringTable> iast, ILazy`1<BuildAppDispatch> dispatch, ILazy`1<IFileSystemTracker> futureFileTracker, ILogger loggerComponent);
    private static RunBootstrapperBuildForDispatch();
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.RunBuildForEntryPointFromCommandLine : object {
    public RunBuildForEntryPointFromCommandLine(Lifetime lifeComponent, IProductCommandLine cmdline, BuildAppDispatch dispatch, IThreading threading, IStatusBar statusbar, ApplicationShutdownRequests shutdowner, ILogger logger);
    private static void Init_IndicatorPresentation(Lifetime lifetime, IProperty`1<State> State, IProperty`1<TimeSpan> ShutdownSecondsRemaining, StatusBarProgressIndicator indicator, string sRunBuildFor, TimeSpan InitialShutdownWaitTime);
}
[ShellComponentAttribute("9")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Dispatch.RunBuildWhenAppDispatchRequires : object {
    public RunBuildWhenAppDispatchRequires(Lifetime lifetimeComponent, BuildAppDispatch dispatch, IIsolatedBuildRunners buildrunner, RunBootstrapperBuildForDispatch bootstrapperBuildForDispatch, ILazy`1<BuildOutputFolders> futureOutfolders, IThreading threading);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.Build.App.IBuildApplicationZone {
}
[ZoneDefinitionAttribute]
public class JetBrains.Application.Build.App.ICmdlineBuildAppEnvironmentZone : object {
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.IsolatedBuildRunnersComponent : object {
    private Lazy`1<IIsolatedBuildRunners> myCore;
    public IsolatedBuildRunnersComponent(Lifetime lifetime, IBuiltInBuildEngineExtraction builtInBuildEngineExtraction, IThreading threading, IComponentContainer container, JetEnvironment environment, ILogger logger);
    private sealed virtual override BuildRunnerSession JetBrains.Build.Running.IIsolatedBuildRunners.BeginRunBuildScript(Lifetime lifetime, BuildRunnerRequest request);
    private static Type TryGetEngineImplementationFromCatalog(IPartCatalogSet catalogset, OnError onerror);
}
[ZoneDefinitionAttribute]
public class JetBrains.Application.Build.App.ITeamCityBuildAppEnvironmentZone : object {
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.BuildAppStartupArtifactValues : object {
    public BuildAppStartupArtifactValues(InputArtifactStringTableRawStorage stringtable, IProductCommandLine cmdline, ILogger Logger);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.BuildRequestEntryBinaries : object {
    private ILogger Logger;
    private IProductCommandLine myCmdline;
    public BuildRequestEntryBinaries(IProductCommandLine cmdline, ILogger logger);
    public void AddBuildScriptAndEngineBinariesToRequest(EitherBuildRunnerRequest request, ProductHomeDirArtifact homedir);
    public static void AddBuildScriptAndEngineBinariesToRequest(EitherBuildRunnerRequest request, ICommandLine cmdline, ProductHomeDirArtifact homedir, ILogger logger);
    private static void AddBuildScriptAndEngineBinariesToRequest_Engine(EitherBuildRunnerRequest request, ICommandLine cmdline, ProductHomeDirArtifact homedir, ILogger logger);
    private static void AddBuildScriptAndEngineBinariesToRequest_Script(EitherBuildRunnerRequest request, ICommandLine cmdline, ProductHomeDirArtifact homedir, ILogger logger);
    [NotNullAttribute]
private static List`1<ImmutableFileItem> FilterOutNonBinSstg(List`1<ImmutableFileItem> binfilesUnfiltered);
    [CanBeNullAttribute]
private static FileSystemPath ParseRealtivelyIfPossible(string sBin, ProductHomeDirArtifact homedir, ILogger logger);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.BuildScriptEntrySources : object {
    public static bool OptionUseOnlyShellBuildScriptInEntryBuild;
    public static RelativePath PlatformCoreShellBuildScriptPath;
    private ILogger Logger;
    private IProductCommandLine myCmdline;
    public BuildScriptEntrySources(IProductCommandLine cmdline, ILogger logger);
    private static BuildScriptEntrySources();
    public void AddBuildScriptSourcesFromCommandLineToRequest(EitherBuildRunnerRequest request, ProductHomeDirArtifact homedir);
    public static void AddBuildScriptSourcesFromCommandLineToRequest(EitherBuildRunnerRequest request, ICommandLine cmdl, ProductHomeDirArtifact homedir, bool isAddingSourceFilesFromNonKeyedParameters, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Params.BuildScriptEntrySources/<AddBuildScriptSourcesFromWellKnownEntryBuildSourcesLocationsToRequestAsync>d__7")]
public Task AddBuildScriptSourcesFromWellKnownEntryBuildSourcesLocationsToRequestAsync(OuterLifetime lifetime, EitherBuildRunnerRequest request, ProductHomeDirArtifact homedir, ITaskHost tasker);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Params.BuildScriptEntrySources/<AddBuildScriptSourcesFromWellKnownEntryBuildSourcesLocationsToRequestAsync>d__8")]
public static Task AddBuildScriptSourcesFromWellKnownEntryBuildSourcesLocationsToRequestAsync(OuterLifetime lifetime, EitherBuildRunnerRequest request, ProductHomeDirArtifact homedir, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Params.BuildScriptEntrySources/<GetWellKnownEntryBuildSourcesLocationsAsync>d__9")]
[NotNullAttribute]
public static Task`1<ImmutableArray`1<RelativePath>> GetWellKnownEntryBuildSourcesLocationsAsync(OuterLifetime lifetime, ProductHomeDirArtifact homedir, ITaskHost tasker, ILogger logger);
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent : object {
    private InputArtifactStringTableRawStorage myStorage;
    private IInputArtifactStringTableIndexer JetBrains.Application.Build.Runner.IInputArtifactStringTable.Artifacts { get; }
    private IDictionaryEvents`2<string, string> JetBrains.Application.Build.Runner.IInputArtifactStringTable.MapArtifactNameToValue { get; }
    private IDictionaryEvents`2<StringSlice, String[]> JetBrains.Application.Build.Runner.IInputArtifactStringTable.MapLocalNameToFullNames { get; }
    public InputArtifactStringTableComponent(InputArtifactStringTableRawStorage storage, IEnumerable`1<IFillInputArtifactStringTableRawStorage> fillers);
    private sealed virtual override IInputArtifactStringTableIndexer JetBrains.Application.Build.Runner.IInputArtifactStringTable.get_Artifacts();
    private sealed virtual override IDictionaryEvents`2<string, string> JetBrains.Application.Build.Runner.IInputArtifactStringTable.get_MapArtifactNameToValue();
    private sealed virtual override IDictionaryEvents`2<StringSlice, String[]> JetBrains.Application.Build.Runner.IInputArtifactStringTable.get_MapLocalNameToFullNames();
    private sealed virtual override string JetBrains.Application.Build.Runner.IInputArtifactStringTable.TryGetPreferredFullNameByLocalName(StringSlice localname);
}
[ShellComponentAttribute("40")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.BuildPwcAndGoAutomation : AAutomation {
    public IProperty`1<bool> CanSetInternalMode;
    public SignalCommand CmdPwcAndGo;
    public IListEvents`1<IInstalledIde> InstalledAllIdes;
    public IProperty`1<IInstalledIde> SelectedIdeVersion;
    public IProperty`1<bool> IsCompileSolutionAfterOpen;
    public IProperty`1<bool> IsSetVsInternalMode;
    public BuildPwcAndGoAutomation(Lifetime lifetime, DevenvParametersForBuild devparams, ILazy`1<RiderDiscoveryHost> riderDiscoveryHost, IInputArtifactStringTable stringtable, BuildAppDispatch dispatch, IUIApplication uiapp, ILogger logger);
    private void BindSelectedIdeTwoWay(Lifetime lifetime, IProperty`1<string> settingsVersion, IProperty`1<IInstalledIde> modelVersion, IListEvents`1<IInstalledIde> installedAllIdes, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Params.LocalSettings.BuildPwcAndGoAutomation/<FillDiscoveredRidersAsync>d__8")]
private Task FillDiscoveredRidersAsync(Lifetime lifetime, ILazy`1<RiderDiscoveryHost> futureRiderDiscoveryHost, IThreading threading);
    private static FileSystemPath GetIdePath(IInstalledIde ide, IListEvents`1<IInstalledIde> installedIdes);
    private void InitFillDiscoveredRiders(Lifetime lifetime, ILazy`1<RiderDiscoveryHost> futureRiderDiscoveryHost, IUIApplication uiapp);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.BuildSettingsPerHomeDir : object {
    public Func`2<Lifetime, IContextBoundSettingsStoreLive> BindForCurrentHomeDir;
    public BuildSettingsPerHomeDir(ISettingsStore settingsStore, BuildSettingsPerHomeDirStorage buildSettingsPerHomeDirStorage);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.BuildSettingsPerHomeDirStorage : FileSettingsStorageProviderBase {
    public static string BuildSettingsFileName;
    public static string LayerId;
    private static Dictionary`2<PropertyId, object> ourMountsMetadata;
    public BuildSettingsPerHomeDirStorage(Lifetime lifetime, IThreading threading, IFileSystemTracker fileTracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    private static BuildSettingsPerHomeDirStorage();
    private static Property`1<FileSystemPath> GetPath(Lifetime lifetime);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "ExtraArtifactsForBuildSettingDescription")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.BuildToolSettings : object {
    public static Expression`1<Func`2<BuildToolSettings, IIndexedEntry`2<string, string>>> ArtifactNameToValueExpression;
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "BuildArtifactSettingDescription")]
public IIndexedEntry`2<string, string> ArtifactNameToValue;
    private static BuildToolSettings();
}
[ShellComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.DevenvParametersForBuild : object {
    [NotNullAttribute]
private ILogger myLogger;
    public List`1<InstalledVs> InstalledVsVersions;
    public IProperty`1<VsHive> LocalInstallSelectedVsVersion;
    public DevenvParametersForBuild(Lifetime lifetime, ILogger logger, BuildSettingsPerHomeDir settingsStore, IInputArtifactStringTable stringtable, IThreading threading);
    private void BindVsVersionTwoWay(Lifetime lifetime, IProperty`1<string> settingsVersion, IProperty`1<VsHive> modelVersion);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1(LocalInstallTargetArtifact art);
    [CompilerGeneratedAttribute]
private VsHive <BindVsVersionTwoWay>b__4_0(string str);
}
public interface JetBrains.Application.Build.App.Params.LocalSettings.IInstalledIde {
    public string InstallPath { get; }
    public string DisplayNameLong { get; }
    public string DisplayNameShort { get; }
    public abstract virtual string get_InstallPath();
    public abstract virtual string get_DisplayNameLong();
    public abstract virtual string get_DisplayNameShort();
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledRider : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public FileSystemPath ExePath { get; }
    public FileSystemPath Path { get; }
    public string InstallPath { get; }
    public string DisplayNameLong { get; }
    public string DisplayNameShort { get; }
    public string Version { get; }
    public InstalledRider(FileSystemPath path, string version, FileSystemPath exePath);
    [CompilerGeneratedAttribute]
public FileSystemPath get_ExePath();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Path();
    public sealed virtual string get_InstallPath();
    public sealed virtual string get_DisplayNameLong();
    public sealed virtual string get_DisplayNameShort();
    [CompilerGeneratedAttribute]
public string get_Version();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected bool Equals(InstalledRider other);
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledRiderSerializer : object {
    public string ConvertToString(InstalledRider val);
    public InstalledRider ConvertFromString(IEnumerable`1<IInstalledIde> ides, string val);
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledVisualStudio : object {
    [CompilerGeneratedAttribute]
private InstalledVs <Value>k__BackingField;
    public string DisplayNameLong { get; }
    public string DisplayNameShort { get; }
    public string InstallPath { get; }
    public InstalledVs Value { get; }
    public InstalledVisualStudio(InstalledVs value);
    public sealed virtual string get_DisplayNameLong();
    public sealed virtual string get_DisplayNameShort();
    public sealed virtual string get_InstallPath();
    [CompilerGeneratedAttribute]
public InstalledVs get_Value();
    public virtual string ToString();
}
public class JetBrains.Application.Build.App.Params.LocalSettings.InstalledVisualStudioSerializer : object {
    [NotNullAttribute]
public string ConvertToString(InstalledVisualStudio val);
    public InstalledVisualStudio ConvertFromString(IEnumerable`1<IInstalledIde> ides, string val);
}
public class JetBrains.Application.Build.App.Params.LocalSettings.LatestInstalledRider : object {
    public static string Value;
    public string InstallPath { get; }
    public string DisplayNameLong { get; }
    public string DisplayNameShort { get; }
    public sealed virtual string get_InstallPath();
    public sealed virtual string get_DisplayNameLong();
    public sealed virtual string get_DisplayNameShort();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.Build.App.Params.LocalSettings.LatestInstalledRiderSerializer : object {
    public string ConvertToString(LatestInstalledRider val);
    public LatestInstalledRider ConvertFromString(IEnumerable`1<IInstalledIde> ides, string val);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Build.App.Params.LocalSettings.RiderDiscoveryHost : object {
    [ItemNotNullAttribute]
[NotNullAttribute]
public IEnumerable`1<InstalledRider> Discover();
    [NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<InstalledRider> DiscoverAllRiders();
    [ItemNotNullAttribute]
[NotNullAttribute]
[UsedImplicitlyAttribute]
private static IEnumerable`1<InstalledRider> DiscoverRiders();
    [NotNullAttribute]
private static IEnumerable`1<InstalledRider> DiscoverInUserProfile();
    [CanBeNullAttribute]
private static IEnumerable`1<InstalledRider> TryFoundRiderDescriptionFile(FileSystemPath folder);
    [NotNullAttribute]
private static IEnumerable`1<InstalledRider> DiscoverInProgramFiles();
    [CanBeNullAttribute]
private static InstalledRider TryGetRiderFromFolder(FileSystemPath path, string version);
}
internal class JetBrains.Application.Build.App.Params.LocalSettings.RiderVersionComparer : object {
    private Regex regex;
    private IEnumerable`1<string> groups;
    public sealed virtual int Compare(string x, string y);
    private static int CompareVersion(string x, string y);
    private static string GetNotEmptyStringVersion(string s);
}
internal class JetBrains.Application.Build.App.Params.LocalSettings.RiderVersionEqualityComparer : object {
    public sealed virtual bool Equals(InstalledRider x, InstalledRider y);
    public sealed virtual int GetHashCode(InstalledRider obj);
}
[ShellComponentAttribute("9")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Params.LocalSettings.SyncInputArtifactStringsFromLocalSettings : object {
    public SyncInputArtifactStringsFromLocalSettings(Lifetime lifetime, IThreading threading, InputArtifactStringTableRawStorage stringtable, BuildSettingsPerHomeDir buildSettingsPerHomeDir, BuildAppStartupArtifactValues ensurestartup, ILogger logger);
    private static bool IsIgnoreArtSave(IInputArtifactStringTableEntry art);
}
public class JetBrains.Application.Build.App.Params.SimpleBuildRequest : object {
    [NotNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public AssemblyQualifiedTypeName MainObjective;
    [NotNullAttribute]
public ICollection`1<object> Parameters;
    private SimpleBuildRequest(AssemblyQualifiedTypeName mainObjective, string sDisplayName, Object[] parameters);
    [NotNullAttribute]
public static SimpleBuildRequest CreateBinaryStage();
    [NotNullAttribute]
public static SimpleBuildRequest CreateBinaryStage(Object[] parameters);
    [NotNullAttribute]
public static SimpleBuildRequest CreateBinaryStage(AssemblyQualifiedTypeName aqtnBinaryStageObjective);
    [NotNullAttribute]
public static SimpleBuildRequest CreateExplicit(Object[] parameters);
    [NotNullAttribute]
public static SimpleBuildRequest CreateExplicit(AssemblyQualifiedTypeName aqtnMainStage, Object[] parameters);
    [NotNullAttribute]
public static SimpleBuildRequest CreateExplicitWithName(AssemblyQualifiedTypeName aqtnMainStage, string finalname, Object[] parameters);
    [NotNullAttribute]
public static string MakeDisplayNameForObjective(AssemblyQualifiedTypeName objective);
    public virtual string ToString();
}
public static class JetBrains.Application.Build.App.Params.SimpleBuildRequestFiller : object {
    public static void SetInputArtifactsFromStringTable(EitherBuildRunnerRequest request, IInputArtifactStringTable stringtable, ICollection`1<object> parametersToExclude, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Params.SimpleBuildRequestFiller/<WrapEntryPointWithFullRequestAsync>d__1")]
public static Task WrapEntryPointWithFullRequestAsync(OuterLifetime lifetime, SimpleBuildRequest simple, EitherBuildRunnerRequest target, IInputArtifactStringTable stringtable, BuildScriptEntrySources sources, BuildRequestEntryBinaries binaries, ITaskHost tasker, ILogger logger);
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Profile.ProfileProperties : object {
    private IProperty`1<int> myFileSystemTimestamp;
    private IThreading myThreading;
    private IProperty`1<IDirectedGraph`1<SubplatformName>> myGraph;
    [NotNullAttribute]
public IProperty`1<ProfileDescription> SelectedFullProfile;
    [NotNullAttribute]
public IProperty`1<ProfileNameArtifact> SelectedProfileName;
    [NotNullAttribute]
public IProperty`1<ProfilesArtifact> Profiles;
    public ProfileProperties(Lifetime lifetime, IThreading threading, IInputArtifactStringTable table, SyncInputArtifactStringsFromLocalSettings dependency, ILogger logger);
    public bool AddProfile(UserDefinedProfileDescription value);
    public bool RemoveProfile(string name);
    public bool UpdateProfile(string name, IEnumerable`1<SubplatrformPrefixAndKind> changes);
    public void RefreshProfilesAccordingFileSystem();
}
[ExtensionAttribute]
public static class JetBrains.Application.Build.App.Profile.TreeNodeKindEx : object {
    [ExtensionAttribute]
public static TrieNodeKind ToTrieNodeKind(SubplatformCompileKind kind);
    [ExtensionAttribute]
public static string ToPresentableName(TrieNodeKind enum);
}
public class JetBrains.Application.Build.App.Profile.TrieNodeData : object {
    private TrieNodeKind myKind;
    [CompilerGeneratedAttribute]
private string <MainText>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <SubplatformPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public TrieNodeKind Kind { get; public set; }
    public string CheckBoxText { get; }
    public string MainText { get; }
    [NotNullAttribute]
public RelativePath SubplatformPrefix { get; }
    public TrieNodeData(TrieNodeKind kind, RelativePath prefix, string mainText);
    public TrieNodeKind get_Kind();
    public void set_Kind(TrieNodeKind value);
    public string get_CheckBoxText();
    [CompilerGeneratedAttribute]
public string get_MainText();
    [CompilerGeneratedAttribute]
public RelativePath get_SubplatformPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public enum JetBrains.Application.Build.App.Profile.TrieNodeKind : Enum {
    public byte value__;
    public static TrieNodeKind ExcludedType;
    public static TrieNodeKind SourceType;
    public static TrieNodeKind BinaryType;
    public static TrieNodeKind MixedType;
}
[ExtensionAttribute]
public static class JetBrains.Application.Build.App.Profile.TrieUtils : object {
    [ExtensionAttribute]
public static QualifiedNamesTrie`1<TrieNodeData> BuildTrie(ProfileDescription profile);
    [ExtensionAttribute]
[NotNullAttribute]
public static ITrieNode<TrieNodeData, string> GetRoot(QualifiedNamesTrie`1<TrieNodeData> trie);
    [ExtensionAttribute]
public static bool TryUpdate(QualifiedNamesTrie`1<TrieNodeData> that, QualifiedNamesTrie`1<TrieNodeData> other);
    private static bool DoTryUpdate(ITrieNode<TrieNodeData, string> node, ITrieNode<TrieNodeData, string> otherNode);
}
[ShellComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.ShellBasedBuiltInBuildEngineExtraction : object {
    private ApplicationPackagesLocallyInstalled myAppPackages;
    private Optional`1<PartCatalog> myCatalog;
    public ShellBasedBuiltInBuildEngineExtraction(ApplicationPackagesLocallyInstalled appPackages, Optional`1<ShellPartCatalogSet> catalogset);
    private static IReadOnlyCollection`1<ImmutableFileItem> CollectBuiltInEngineDlls(ApplicationPackagesLocallyInstalled appPackages, Optional`1<PartCatalog> catalog);
    private static IReadOnlyCollection`1<ImmutableFileItem> CollectBuiltInEngineDlls_RealAppPackages(IApplicationPackageLocallyInstalled appkgWithThisAssembly, ApplicationPackagesLocallyInstalled appPackages, Optional`1<PartCatalog> catalogset);
    private sealed virtual override IReadOnlyCollection`1<ImmutableFileItem> JetBrains.Build.Running.IBuiltInBuildEngineExtraction.GetBuildEngineFiles();
}
[ShellComponentAttribute("9")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.TeamCity.RunBuildForTeamCity : object {
    public RunBuildForTeamCity(IProductCommandLine cmdline, ApplicationShutdownRequests applicationShutdownRequests, ILogger logger);
}
[ZoneMarkerAttribute]
[ZoneActivatorAttribute("10")]
public class JetBrains.Application.Build.App.TeamCity.TeamCityBuildAppActivator : object {
}
[ShellComponentAttribute("9")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog : object {
    private static string TeamCityBuildStatusTextMacro;
    private Features myFeatures;
    public IListEvents`1<string> CurrentStepNames;
    public IProperty`1<string> TagString;
    public TeamCityBuildLog(Lifetime lifetime, BuildAppDispatch dispatch, IInputArtifactStringTable stringtable, ILogger logger, Features features);
    private TeamCityBuildLog(Lifetime lifetime, IInputArtifactStringTable stringtable, ILogger logger, IListEvents`1<BuildLogRecord> logentries, Features features);
    private TeamCityBuildLog(Lifetime lifetime, IInputArtifactStringTable stringtable, ILogger logger, Features features);
    private static TeamCityBuildLog();
    [NotNullAttribute]
public static TeamCityBuildLog CreateForSingleSession(Lifetime lifetime, IInputArtifactStringTable stringtable, ILogger logger, IListEvents`1<BuildLogRecord> logentries, Features features);
    private void InitCommon_ApplyTags(IInputArtifactStringTable stringtable, ILogger logger);
    private void InitCommon_BuildStatus(Lifetime lifetime, Features features);
    private void InitCommon_ReportEngineStats(Lifetime lifetime);
    private void InitPerSession(Lifetime lifeSession, IListEvents`1<BuildLogRecord> logentries);
    private void IssueTeamCityMessageOnLogRecord(BuildLogRecord logrecord);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Lifetime lifeSession, BuildAppSession session);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private void <InitPerSession>b__11_0(AddRemoveIndexEventArgs`1<BuildLogRecord> args);
}
[ShellComponentAttribute("40")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomation : AAutomation {
    public IProperty`1<string> BinaryStageObjectiveName;
    public UiCommandAutomation CmdRunBinaryStage;
    public UiCommandAutomation CmdRunCustomEntry;
    public UiCommandAutomation CmdRunSourceStage;
    public UiCommandAutomation CmdRunUnitTests;
    public SignalCommand CmdSaveLastOutputs;
    public IProperty`1<string> CustomEntryTypeName;
    public IListEvents`1<UiCommandAutomation> EntryPointToolbarItems;
    public IListEvents`1<UiCommandAutomation> GeneralToolbar;
    public IProperty`1<bool> IsBuildRunning;
    [NotNullAttribute]
public ICollectionEvents`1<BuildOutputFileArtifact> LastBuildOutputFiles;
    public IProperty`1<string> LastBuildOutputsSummary;
    [NotNullAttribute]
public IProperty`1<ChunkedMemoryStream> LastFullBuildResults;
    public LocalInstallAutomation LocalInstallAutomation;
    public IProperty`1<string> RunningBuildText;
    public IProperty`1<string> SourceStageObjectiveName;
    public IProperty`1<string> UnitTestRunnerParameters;
    public BuildAppDispatchAutomation(Lifetime lifetime, BuildAppDispatch dispatch, IThreading threading, LocalInstallAutomation localInstallAutomation, BuildAppDispatchAutomationInteractivityBase interactivity, IInputArtifactStringTable stringtable, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomation/<BeginUpdateOutputFilesOnSessionEndAsync>d__18")]
private Task BeginUpdateOutputFilesOnSessionEndAsync(Lifetime lifetime, BuildAppSession session, IThreading threading);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomationInteractivityBase : object {
    public virtual FileSystemPath BrowseForFolder(string title, FileSystemPath initial);
}
[ToolWindowDescriptorAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildAppDispatchWindow : ToolWindowDescriptor {
}
public class JetBrains.Application.Build.App.Ux.BuildArtifactsAutomation : AAutomation {
    public IList`1<BuildArtifactSwatchAutomation> Swatches;
    public SwatchPanelAutomation SwatchPanel;
    public BuildArtifactsAutomation(Lifetime lifetime, BuildExecutor executorAsync, IThreading threading);
}
public class JetBrains.Application.Build.App.Ux.BuildArtifactsSetAutomation : AAutomation {
    public IListEvents`1<BuildArtifactsAutomation> Items;
    public BuildArtifactsSetAutomation(Lifetime lifetime);
}
[ToolWindowDescriptorAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildArtifactsToolWindow : ToolWindowDescriptor {
}
public class JetBrains.Application.Build.App.Ux.BuildArtifactSwatchAutomation : AAutomation {
    public IProperty`1<ColorCode> Color;
    public IProperty`1<string> DisplayName;
    public IProperty`1<bool> IsActive;
    public IProperty`1<StateFlags> State;
    public SwatchIndicatorAutomation Swatch;
    public BuildArtifactSwatchAutomation(Lifetime lifetime, BuildEntityPointer artifact, StringAbbreviatorLive`1<BuildEntityPointer> abbrev);
}
public class JetBrains.Application.Build.App.Ux.BuildDisplayAutomation : AAutomation {
    private BuildExecutor myBuildExecutorAsync;
    private Lifetime myLifetime;
    private IThreading myThreading;
    public IProperty`1<BuildArtifactsAutomation> BuildArtifacts;
    public IProperty`1<BuildStepsAutomation> BuildSteps;
    public LogAutomation Log;
    public BuildDisplayAutomation(Lifetime lifetime, IThreading threading);
    public void BindToBuildExecutorAsync(BuildExecutor executorAsync);
}
[ShellComponentAttribute("0")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildLog : object {
    private Lifetime myLifetimeComponent;
    private ILogger myLogger;
    private IThreading myThreading;
    private ToolWindowManager myToolWindowManager;
    public BuildLog(Lifetime lifetime, ToolWindowManager toolWindowManager, IThreading threading, ILogger logger);
    public virtual void ShowApplicationLog(Lifetime lifetimeRecording, string title);
    [NotNullAttribute]
public virtual LogAutomation ShowManualLog(Lifetime lifetimeRecording, string title, bool createToolWindow);
}
[ToolWindowDescriptorAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildLogToolWindow : ToolWindowDescriptor {
}
[ShellComponentAttribute("44")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildStepsAndArtifactsWindowShow : object {
    public BuildStepsAndArtifactsWindowShow(Lifetime lifetime, BuildAppDispatch dispatch, ToolWindowManager toolWindowManager);
}
public class JetBrains.Application.Build.App.Ux.BuildStepsAutomation : AAutomation {
    public IList`1<BuildStepSwatchAutomation> Swatches;
    public SwatchPanelAutomation SwatchPanel;
    public BuildStepsAutomation(Lifetime lifetime, BuildExecutor executorAsync, IThreading threading);
}
public class JetBrains.Application.Build.App.Ux.BuildStepsSetAutomation : AAutomation {
    public IListEvents`1<BuildStepsAutomation> Items;
    public BuildStepsSetAutomation(Lifetime lifetime);
}
[ToolWindowDescriptorAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.BuildStepsToolWindow : ToolWindowDescriptor {
}
public class JetBrains.Application.Build.App.Ux.BuildStepSwatchAutomation : AAutomation {
    public IProperty`1<ColorCode> Color;
    public IProperty`1<string> DisplayName;
    public IProperty`1<bool> IsActive;
    public SwatchIndicatorAutomation Swatch;
    public BuildStepSwatchAutomation(Lifetime lifetime, BuildEntityPointer step, StringAbbreviatorLive`1<BuildEntityPointer> abbrSteps);
}
public class JetBrains.Application.Build.App.Ux.CommandShortcutAutomation : AAutomation {
    private SignalCommand myCommand;
    public UiCommandAutomation CommandAutomation;
    public CommandShortcutAutomation(Lifetime lifetime, IListEvents`1<UiCommandAutomation> commands, string commandName, string displayName);
}
[ShellComponentAttribute("40")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.LocalInstallAutomation : AAutomation {
    private static ILogger ourLogger;
    private static string Profilename;
    private BuildAppDispatch myBuildAppDispatch;
    private Lifetime myLifetime;
    private IProperty`1<bool> myPBDRHintHasProfile;
    private IProperty`1<bool> myRootSuffixTextHasProfile;
    private IThreading myThreading;
    public SignalCommand AddProfileSuffixCommand;
    [NotNullAttribute]
public IReadOnlyList`1<CheckBoxData> HighLevelCheckboxes;
    public IListEvents`1<InstalledVs> InstalledDevenvs;
    public IProperty`1<bool> IsProductBinariesDirExplicitlySpecified;
    public SignalCommand LocalInstallCommand;
    public IProperty`1<VsHive> LocalInstallSelectedDevenv;
    [NotNullAttribute]
public IReadOnlyList`1<CheckBoxData> LowLevelCheckboxes;
    public SignalCommand PrepareWorkingCopyCommand;
    public IProperty`1<string> ProductBinariesDirRelativeHintText;
    public IProperty`1<string> ProductHomeDir;
    [NotNullAttribute]
public BuildPwcAndGoAutomation PwcAndGo;
    public IProperty`1<bool> RootSuffixCheck;
    public IProperty`1<string> RootSuffixText;
    public LocalInstallAutomation(Lifetime lifetime, DevenvParametersForBuild devenvParams, BuildAppDispatch dispatch, IThreading threading, IInputArtifactStringTable stringtable, BuildPwcAndGoAutomation pwcAndGo);
    private static LocalInstallAutomation();
    private void AddProfileSuffix();
    private void BindPBDRHint(Lifetime lifetime, IInputArtifactStringTable stringtable);
    private void BindRootSuffixCombo(Lifetime lifetime, IInputArtifactStringTable stringtable);
    private static IReadOnlyList`1<CheckBoxData> FillHighLevelOptions(Lifetime lifetime, IInputArtifactStringTable stringtable);
    private static IReadOnlyList`1<CheckBoxData> FillLowLevelOptions(Lifetime lifetime, IInputArtifactStringTable stringtable);
    private static string RecognizeProfileSuffix(string text, string profile);
    private void RunCommand(SimpleBuildRequest req);
    private static string SubstituteProfileSuffix(string text, string profileName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_5();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_8();
    [CompilerGeneratedAttribute]
internal static void <FillHighLevelOptions>g__Add|24_0(string title, string tooltip, <>c__DisplayClass24_0& );
    [CompilerGeneratedAttribute]
internal static void <FillLowLevelOptions>g__Add|25_0(string title, string tooltip, <>c__DisplayClass25_0& );
}
public class JetBrains.Application.Build.App.Ux.LogAutomation : AAutomation {
    private static LoggingLevel RunningItemFakeLoggingLevel;
    private Nullable`1<DateTime> myPivotTimeValue;
    private ReadonlyToken myReadonly;
    private IThreading myThreading;
    public IListEvents`1<LogRecordAutomation> AllRecords;
    public DelegateCommand CopySelectionCommand;
    public IDictionary`2<LoggingLevel, IProperty`1<int>> CountMessagesByKind;
    public SearchModelEventHandler FilterEditboxBehavior;
    public IProperty`1<bool> IsListeningAutomatically;
    public IProperty`1<bool> IsShowingRunningItem;
    public IProperty`1<LoggingLevel> MaxLevelToShow;
    public IProperty`1<LogRecordAutomation[]> SelectedItems;
    public ISignal`1<OutEventArgs`1<LogRecordAutomation[]>> SelectedItemsRequested;
    public IProperty`1<IFilterDescriptor> TreeFilter;
    public IListEvents`1<LogRecordAutomation> TreeItemsSource;
    public LogAutomation(Lifetime lifetime, IThreading threading, bool isListeningInitial);
    public void AddRecord(BuildLogRecord value);
    private void ShowRunningItem(Lifetime lifeRunningItem, IThreading threading);
}
public class JetBrains.Application.Build.App.Ux.NoRecentBuildsCueBanner : NestedAutomationWrapper {
}
public class JetBrains.Application.Build.App.Ux.ProfileExplorerViewModel : AAutomation {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ProfileProperties myProfileProperties;
    [CompilerGeneratedAttribute]
private SignalCommand <AddProfileCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeCheckedToBinaryCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeCheckedToSourceCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeToBinaryCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeToExcludedCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ChangeToSourceCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CurrentProfileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <InputNewProfileText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanRemoveProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<String[]> <Profiles>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <RefreshCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private SignalCommand <RemoveProfileCommand>k__BackingField;
    public ISignal`1<OutEventArgs`1<ITrieNode[]>> SelectedItemsRequested;
    [CompilerGeneratedAttribute]
private ListEvents`1<ITrieNode<TrieNodeData, string>> <Roots>k__BackingField;
    public SignalCommand AddProfileCommand { get; }
    public DelegateCommand ChangeCheckedToBinaryCommand { get; public set; }
    public DelegateCommand ChangeCheckedToSourceCommand { get; public set; }
    public DelegateCommand ChangeToBinaryCommand { get; }
    public DelegateCommand ChangeToExcludedCommand { get; }
    public DelegateCommand ChangeToSourceCommand { get; }
    public IProperty`1<string> CurrentProfileName { get; }
    public IProperty`1<string> InputNewProfileText { get; }
    public IProperty`1<bool> CanRemoveProfile { get; }
    public IProperty`1<String[]> Profiles { get; }
    public SignalCommand RefreshCommand { get; }
    public SignalCommand RemoveProfileCommand { get; }
    public ListEvents`1<ITrieNode<TrieNodeData, string>> Roots { get; }
    public ProfileExplorerViewModel(Lifetime lifetime, IThreading threading, ProfileProperties profileProperties);
    [CompilerGeneratedAttribute]
public SignalCommand get_AddProfileCommand();
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeCheckedToBinaryCommand();
    [CompilerGeneratedAttribute]
public void set_ChangeCheckedToBinaryCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeCheckedToSourceCommand();
    [CompilerGeneratedAttribute]
public void set_ChangeCheckedToSourceCommand(DelegateCommand value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeToBinaryCommand();
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeToExcludedCommand();
    [CompilerGeneratedAttribute]
public DelegateCommand get_ChangeToSourceCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CurrentProfileName();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_InputNewProfileText();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanRemoveProfile();
    [CompilerGeneratedAttribute]
public IProperty`1<String[]> get_Profiles();
    [CompilerGeneratedAttribute]
public SignalCommand get_RefreshCommand();
    [CompilerGeneratedAttribute]
public SignalCommand get_RemoveProfileCommand();
    [CompilerGeneratedAttribute]
public ListEvents`1<ITrieNode<TrieNodeData, string>> get_Roots();
    private void AddProfile();
    private void Refresh();
    private void RemoveProfile();
    private void ChangeCheckedToType(SubplatformCompileKind type);
    private void ChangeToType(SubplatformCompileKind type);
    private void DoChangeToType(SubplatformCompileKind kind, Func`2<ITrieNode<TrieNodeData, string>, bool> filter);
    private void RunCommand(Action func, string nameCmd);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_3(Lifetime lt, QualifiedNamesTrie`1<TrieNodeData> x);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_6();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_7();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_8();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_9(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_15();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_10(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_16();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_11(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_17();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_12(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_18();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__3_13(object o);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_19();
}
[ToolWindowDescriptorAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.ProfileExplorerWindow : ToolWindowDescriptor {
}
public class JetBrains.Application.Build.App.Ux.ProfileName : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; public set; }
    public ProfileName(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected bool Equals(ProfileName other);
}
[ActionAttribute("Build Application Dispatch")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.ShowBuildAppDispatchWindowAction : ActivateToolWindowActionHandler`1<BuildAppDispatchWindow> {
}
[ActionAttribute("Build Log")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.ShowBuildLogToolWindowAction : ActivateToolWindowActionHandler`1<BuildLogToolWindow> {
}
[ActionAttribute("Profile Explorer")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.ShowProfileExplorerWindowAction : ActivateToolWindowActionHandler`1<ProfileExplorerWindow> {
}
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.SwatchIndicatorAutomation : AAutomation {
    public IProperty`1<ColorCode> Color;
    public IProperty`1<bool> IsActive;
    public IProperty`1<string> Text;
    public SwatchIndicatorAutomation(Lifetime lifetime);
}
public class JetBrains.Application.Build.App.Ux.SwatchPanelAutomation : AAutomation {
    [NotNullAttribute]
public IListEvents`1<IAutomation> Items;
    [NotNullAttribute]
public IProperty`1<int> MaxAllowedSwatchChars;
    [NotNullAttribute]
public IThreading Threading;
    public SwatchPanelAutomation(Lifetime lifetime, IThreading threading);
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Build.App.Ux.TaskBarBuildProgress : object {
    public TaskBarBuildProgress(Lifetime lifetime, ITaskBarManager taskBarManager, BuildAppDispatch dispatch, IIsApplicationActiveState appActiveState);
}
[CommandLineSwitchAttribute("Artifact", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineArtifact : object {
    public static char ShortSyntaxPrefixChar;
    private static CmdLineArtifact();
}
[CommandLineSwitchAttribute("BuildEngine", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineBuildEngine : object {
}
[CommandLineSwitchAttribute("BuildRunnerRequest", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineBuildRunnerRequest : object {
}
[CommandLineSwitchAttribute("BuildScriptBin", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineBuildScriptBin : object {
}
[CommandLineSwitchAttribute("BuildScriptSrc", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineBuildScriptSrc : object {
}
[CommandLineSwitchAttribute("OutputsDir", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineOutputsDir : object {
}
[CommandLineSwitchAttribute("OutputsFile", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineOutputsFile : object {
}
[CommandLineSwitchAttribute("RunBuild", "1", "")]
public class JetBrains.Application.Build.CmdLineKeys.CmdLineRunBuild : object {
    public static char ShortSyntaxPrefixChar;
    private static CmdLineRunBuild();
}
[BuildHelperAttribute]
public class JetBrains.Application.Build.License.AddDeploymentPackagingThirdPartyLibrariesInfo : object {
    private ILogger myLogger;
    private ThirdPartyLibrariesForProduct[] myThirdPartyLibrariesForProducts;
    public AddDeploymentPackagingThirdPartyLibrariesInfo(ThirdPartyLibrariesForProduct[] thirdPartyLibrariesForProducts, ILogger logger);
    private sealed virtual override Task`1<ImmutableArray`1<ImmutableFileItem>> JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings.AddFilesAsync(OuterLifetime lifetime, IReadOnlyCollection`1<IHaveJetNugetPackage> packages);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Build.License.ThirdPartyLibrariesForProduct : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<LibraryLicenseEntry> Libraries;
    [NotNullAttribute]
public string ProductTechnicalName;
    public ThirdPartyLibrariesForProduct(string productTechnicalName, IReadOnlyCollection`1<LibraryLicenseEntry> libraries);
    public virtual string ToString();
}
public static class JetBrains.Application.Build.License.ThirdPartyLibrariesTasks : object {
    private static HashSet`1<LicensesApprovedByLegalTeam> ourKnownOpenSourceBaseLicenses;
    private static ThirdPartyLibrariesTasks();
    [AsyncStateMachineAttribute("JetBrains.Application.Build.License.ThirdPartyLibrariesTasks/<CollectThirdPartyLibraries>d__1")]
[BuildStepAttribute]
public static Task`1<ThirdPartyLibrariesForProduct[]> CollectThirdPartyLibraries(Lifetime lifetime, InputPackage[] inputs, ThirdPartyLicenseInfo[] thirdPartyLicenseInfos, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.License.ThirdPartyLibrariesTasks/<CollectThirdPartyLibraries_ProductsWithPackages>d__2")]
private static Task`1<ImmutableArray`1<PackagesShippedWithProduct>> CollectThirdPartyLibraries_ProductsWithPackages(Lifetime lifetime, InputPackage[] inputs, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.License.ThirdPartyLibrariesTasks/<CollectThirdPartyLibraries_LicenseMetadataForPackages>d__3")]
private static Task`1<Dictionary`2<string, ValueTuple`2<List`1<LibraryLicenseEntry>, OneToListMap`2<LibraryLicenseEntry, RelativePath>>>> CollectThirdPartyLibraries_LicenseMetadataForPackages(Lifetime lifetime, ImmutableArray`1<PackagesShippedWithProduct> productsWithPackages, IReadOnlyDictionary`2<string, IJetNugetPackage> lookupDeployablePackages, IReadOnlyDictionary`2<string, ValueTuple`2<List`1<LibraryLicenseEntry>, JetRelativePathPrefixTree`1<ThirdPartyLicenseInfo>>> lookupThirdPartyLicenses, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.License.ThirdPartyLibrariesTasks/<CollectThirdPartyLibraries_LicenseInfoForProducts>d__4")]
private static Task`1<ImmutableArray`1<ThirdPartyLibrariesForProduct>> CollectThirdPartyLibraries_LicenseInfoForProducts(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, ImmutableArray`1<PackagesShippedWithProduct> productsWithPackages, Dictionary`2<string, ValueTuple`2<List`1<LibraryLicenseEntry>, OneToListMap`2<LibraryLicenseEntry, RelativePath>>> mapPackageToMetadata);
    [BuildStepAttribute]
public static PostCompileValidationResult ValidateLicenses(ThirdPartyLibrariesForProduct[] requestLicenseCalc);
}
public class JetBrains.Application.Build.License.ThirdPartyUtils : object {
    private static ILogger ourLogger;
    private static ThirdPartyUtils();
    [IteratorStateMachineAttribute("JetBrains.Application.Build.License.ThirdPartyUtils/<GetOnlyThirdPartyLibraryLicenses>d__1")]
[NotNullAttribute]
[ItemNotNullAttribute]
private static IEnumerable`1<LibraryLicenseEntry> GetOnlyThirdPartyLibraryLicenses(IEnumerable`1<LibraryLicenseEntry> entries);
    public static void RenderAsJson(StreamWriter sw, IReadOnlyCollection`1<LibraryLicenseEntry> entries);
    public static void RenderAsHtmlMarkup(StreamWriter sw, IReadOnlyCollection`1<LibraryLicenseEntry> entries);
    public static void RenderAsXml(Stream sw, string urn, IReadOnlyCollection`1<LibraryLicenseEntry> entries);
    [NotNullAttribute]
public static ImmutableFileItem RenderThirdPartyLibsFile(string productTechnicalName, RelativePath thirdPartyFileName, string urn, ThirdPartyLibrariesForProduct[] thirdpartylibs, ILogger logger);
}
public static class JetBrains.Application.Build.NgenTasks : object {
    [AsyncStateMachineAttribute("JetBrains.Application.Build.NgenTasks/<ExecuteNgenAsync>d__0")]
[BuildStepAttribute]
public static Task`1<TeamCityPostCompileNgenResultFile> ExecuteNgenAsync(Lifetime lifetime, InputPackage[] packagesInput, TeamCityPostCompileNgenTargetRuntime[] runtimes, Optional`1<ListProducePackagesFromPreviousBuilds> maybeTransits, IBuildTaskHost tasker, Optional`1<NugetConfigFile> nugetConfigFile, NgenService ngen, ILogger logger, SdkLicenseAgreementArtifact sdkLicenseAgreementArtifact);
    private static DistributedCache OpenCache(Optional`1<NugetConfigFile> nugetConfigFile, ILogger logger);
    [NotNullAttribute]
private static IJetNugetPackage PackEmittedAssembliesIntoNuget(IReadOnlyCollection`1<ImmutableFileItem> assembliesAfterNgen, JetPackageIdentity pkgidOriginal, TeamCityPostCompileNgenTargetRuntime runtime, ILogger logger, SdkLicenseAgreementArtifact sdkLicenseAgreementArtifact);
    private static TeamCityPostCompileNgenResultFile WrapForCompileResult(IJetNugetPackage[] nupkgsNgen, Optional`1<ListProducePackagesFromPreviousBuilds> maybeTransits, ILogger logger);
}
public static class JetBrains.Application.Build.Runner.BuildRunner : object {
    public static ILogger Logger;
    private static BuildRunner();
    public static Task RunAsync(BuildStorage storage, IList`1<BuildStorageArtifact> artifactsToCalculate, IBuildTaskHost tasker);
    public static Task`1<IList`1<object>> RunAsync(ICollection`1<FileSystemPath> assemblies, IEnumerable`1<object> inputs, IList`1<Type> outputs, IBuildTaskHost tasker);
    public static Task`1<IList`1<object>> RunAsync(IEnumerable`1<Assembly> assemblies, IEnumerable`1<object> inputs, IList`1<Type> outputs, IBuildTaskHost tasker);
    [PublicAPIAttribute]
public static int RunCommandLine(string objective, Hashtable artifactStringValues, String[] dirsWithBuildScriptSources, String[] filesWithBuildScriptBinaries, String[] filesWithBuildEngine, int nMaxLoggingLevel);
    [PublicAPIAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
public static int RunCommandLineInterface();
    [PublicAPIAttribute]
public static int RunTeamCity(string objective, Hashtable artifactStringValues, String[] dirsWithBuildScriptSources, String[] filesWithBuildScriptBinaries, String[] filesWithBuildEngine);
    [NotNullAttribute]
private static BuildRunnerCommandString FillCommandStringObject(string objective, Hashtable artifactStringValues, String[] dirsWithBuildScriptSources, String[] filesWithBuildScriptBinaries, String[] filesWithBuildEngine);
    private static void InitDefaultAppFileLogging();
    private static void LogIntoCommandLine(Lifetime lifetime, LoggingLevel loglevelMax, BuildRunnerSession session);
    private static void LogIntoCommandLine_Single(BuildLogRecord logrec);
    private static void LogSummaryIntoCommandLine(LoggingLevel nMaxLoggingLevel, BuildRunnerSession session, TimeSpan duration);
    private static SessionStartedHandler RunCommandLine_OnSessionStarted(LoggingLevel nMaxLoggingLevel);
    private static UInt32 RunCommandLineInterfaceCore();
    private static void RunCommandLineInterfaceCore_FillRequestFromCommandLine(BuildRunnerRequest request, ICommandLine cmdl);
    private static SessionStartedHandler RunCommandLineInterfaceCore_InitLoggerAndHandling();
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Runner.BuildRunner/<RunOnStorageAsync>d__16")]
[NotNullAttribute]
public static Task`1<IList`1<object>> RunOnStorageAsync(BuildStorage storage, IList`1<Type> outputs, IBuildTaskHost tasker);
    private static Task RunTeamCity_OnSessionStarted(Lifetime lifetime, BuildRunnerSession session, bool isLogRecordChannelRunning);
}
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTable {
    public IInputArtifactStringTableIndexer Artifacts { get; }
    public IDictionaryEvents`2<string, string> MapArtifactNameToValue { get; }
    public IDictionaryEvents`2<StringSlice, String[]> MapLocalNameToFullNames { get; }
    public abstract virtual IInputArtifactStringTableIndexer get_Artifacts();
    public abstract virtual IDictionaryEvents`2<string, string> get_MapArtifactNameToValue();
    public abstract virtual IDictionaryEvents`2<StringSlice, String[]> get_MapLocalNameToFullNames();
    public abstract virtual string TryGetPreferredFullNameByLocalName(StringSlice localname);
}
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry {
    public bool IsDefined { get; }
    public IProperty`1<string> LiveString { get; }
    public StringSlice LocalName { get; }
    public IInputArtifactStringTable Owner { get; }
    public string String { get; public set; }
    public abstract virtual bool get_IsDefined();
    public abstract virtual IProperty`1<string> get_LiveString();
    public abstract virtual StringSlice get_LocalName();
    public abstract virtual IInputArtifactStringTable get_Owner();
    public abstract virtual string get_String();
    public abstract virtual void set_String(string value);
    public abstract virtual IInputArtifactStringTableEntry`1<TArtifact> Cast();
}
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry`1 {
    public IProperty`1<TArtifact> LiveValue { get; }
    public TArtifact Value { get; public set; }
    public abstract virtual IProperty`1<TArtifact> get_LiveValue();
    public abstract virtual TArtifact get_Value();
    public abstract virtual void set_Value(TArtifact value);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.Build.Runner.IInputArtifactStringTableIndexer {
    public IInputArtifactStringTableEntry Item { get; }
    public IInputArtifactStringTable Owner { get; }
    public abstract virtual IInputArtifactStringTableEntry get_Item(StringSlice localname);
    public abstract virtual IInputArtifactStringTable get_Owner();
    public abstract virtual IInputArtifactStringTableEntry`1<TArtifact> GetItem();
}
public class JetBrains.Application.Build.Runner.InputArtifactStringTable : object {
    private ArtifactsIndexer myArtifactsIndexer;
    private JetHashSet`1<StringSlice> myHashKeysBetweenTableAndStringProp;
    private Lifetime myLifetime;
    private IDictionary`2<Pair`2<StringSlice, Type>, IUntypedProperty> myMapArtifactPropertiesParsed;
    private IDictionary`2<StringSlice, IProperty`1<string>> myMapArtifactPropertiesString;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private IDictionaryEvents`2<string, string> <MapArtifactNameToValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionaryEvents`2<StringSlice, String[]> <MapLocalNameToFullNames>k__BackingField;
    public IInputArtifactStringTableIndexer Artifacts { get; }
    public IDictionaryEvents`2<string, string> MapArtifactNameToValue { get; }
    public IDictionaryEvents`2<StringSlice, String[]> MapLocalNameToFullNames { get; }
    public InputArtifactStringTable(Lifetime lifetime, IThreading threading, ILogger logger);
    public sealed virtual IInputArtifactStringTableIndexer get_Artifacts();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionaryEvents`2<string, string> get_MapArtifactNameToValue();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionaryEvents`2<StringSlice, String[]> get_MapLocalNameToFullNames();
    [CanBeNullAttribute]
public sealed virtual string TryGetPreferredFullNameByLocalName(StringSlice localname);
    private void Ctor_WatchArtifactStringIntoProperties(Lifetime lifetime);
    private void SetOrRemoveValue(StringSlice localname, string value);
    [CanBeNullAttribute]
private string TryGetValue(StringSlice localname);
    private IProperty`1<TValue> WatchArtifactParsedValue(StringSlice localname);
    [NotNullAttribute]
private IProperty`1<string> WatchArtifactString(StringSlice localname);
    [NotNullAttribute]
public static ICollection`1<Pair`2<InputArtifactStringName, string>> EnumArtifactsOnCommandLine(ICommandLine cmdline, bool isAllowShortSyntax, ILogger Logger);
    public static void FillFromCommandLine(InputArtifactStringTable stringtable, ICommandLine cmdline, bool isAllowShortSyntax, ILogger Logger);
    public static void FillFromCommandLine(BuildRunnerRequest request, ICommandLine cmdline, bool isAllowShortSyntax, ILogger Logger);
    public static void FillPredefined(IInputArtifactStringTable stringtable, ILogger logger);
    [CompilerGeneratedAttribute]
private void <Ctor_WatchArtifactStringIntoProperties>b__16_0(AddRemoveEventArgs`1<KeyValuePair`2<string, string>> args);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Build.Validation.ComponentInstantiationValidator : object {
    private static ISet`1<StringSource> ourWhitelist;
    private static string IgnoreExternalComponentInstantiationErrorsEnvVarName;
    private static int ourIgnoreExternalComponentInstantiationErrorsCounter;
    public static bool IgnoreExternalComponentInstantiationErrors { get; }
    private static ComponentInstantiationValidator();
    public static bool get_IgnoreExternalComponentInstantiationErrors();
    public static LocalDisposable UsingIgnoreExternalComponentInstantiationErrors();
    [BuildStepAttribute]
public static PostCompileValidationResult Run(Lifetime lifetime, ProductPartCatalogForBuild productPartCatalogForBuild, PackageZoningInvalid[] invalids, SuppressMissingRequirementValidation[] zonesToSuppressValidation, AllAssembliesOnEverything allass, ILogger logger, IBuildTaskHost tasker);
    internal static void Check(Lifetime lifetime, ILogger logger, PartCatalog partCatalog, List`1<string> errors);
    [CompilerGeneratedAttribute]
internal static ComponentProperties <Check>g__GetComponentProperties|7_0(PartCatalogType pct, PartCatalogAttribute pca, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static InstantiationRequirement <Check>g__GetComponentRequirements|7_1(PartCatalogType pct, PartCatalogAttribute pca, <>c__DisplayClass7_0& );
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Build.Validation.PostCompileValidationResult : object {
    public ImmutableArray`1<string> Errors;
    public PostCompileValidationResult(ImmutableArray`1<string> errors);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Build.Validation.PostCompileValidationSubsetForLocalInstallFromBuildApp : object {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Errors>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ImmutableArray`1<string> Errors { get; public set; }
    public PostCompileValidationSubsetForLocalInstallFromBuildApp(ImmutableArray`1<string> Errors);
    [CompilerGeneratedAttribute]
private PostCompileValidationSubsetForLocalInstallFromBuildApp(PostCompileValidationSubsetForLocalInstallFromBuildApp original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Errors(ImmutableArray`1<string> value);
    [BuildStepAttribute]
public static PostCompileValidationResult DontMissAnyLocalInstallValidationsInFullValidation(PostCompileValidationSubsetForLocalInstallFromBuildApp[] localinstalls);
    public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PostCompileValidationSubsetForLocalInstallFromBuildApp left, PostCompileValidationSubsetForLocalInstallFromBuildApp right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PostCompileValidationSubsetForLocalInstallFromBuildApp left, PostCompileValidationSubsetForLocalInstallFromBuildApp right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(PostCompileValidationSubsetForLocalInstallFromBuildApp other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public PostCompileValidationSubsetForLocalInstallFromBuildApp <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ImmutableArray`1& Errors);
}
public static class JetBrains.Application.Build.Validation.PublicAPIValidator : object {
    [BuildStepAttribute]
public static PostCompileValidationResult ValidatePlugins(Lifetime lifetime, ILogger logger, AllAssembliesOnPackagesEx allass, InputPackage[] inputPackages);
    [CompilerGeneratedAttribute]
internal static IMetadataMethod <ValidatePlugins>g__ValidateMethod|0_1(string methodName, string parameterTypes, IMetadataType returnType, <>c__DisplayClass0_0& , <>c__DisplayClass0_1& , <>c__DisplayClass0_2& );
    [CompilerGeneratedAttribute]
internal static void <ValidatePlugins>g__ValidationError|0_2(string error, <>c__DisplayClass0_0& , <>c__DisplayClass0_1& );
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Build.Validation.ValidateComponentSpecificZoning : object {
    private static string ComponentAssemblyDataName;
    [NotNullAttribute]
public ImmutableArray`1<string> Errors;
    public bool IsValid { get; }
    [BuildStepAttribute]
public ValidateComponentSpecificZoning(ProductPartCatalogForBuild productPartCatalogForBuild, PackageZoningInvalid[] invalids, AllAssembliesOnEverything allass, ILogger logger);
    private static ValidateComponentSpecificZoning();
    public bool get_IsValid();
    [BuildStepAttribute]
public static ValueTuple`2<PostCompileValidationResult, PostCompileValidationSubsetForLocalInstallFromBuildApp> MountToPostCompileValidation(ValidateComponentSpecificZoning item);
    private static void CheckActivatorNotPullingNewEnvZones(PartCatalogType ctypeActivator, ICollection`1<ZonePart> zonesTransitive, PartCatalogZoneMapping zonemapping, IDictionary`2<PartCatalogType, ModuleZoneLevel> cacheZoneLevel, IList`1<ValidationException> errors, ILogger logger);
    private static void CheckComponents(ProductPartCatalogForBuild productPartCatalogForBuild, PartCatalogZoneMapping zonemapping, IList`1<ValidationException> errors, IDictionary`2<PartCatalogType, ModuleZoneLevel> cacheZoneLevel, ILogger logger);
    private static void CheckEnvComponentNotZonedByShell(PartCatalogType ctypeComponent, ICollection`1<ZonePart> zonesTransitive, PartCatalogZoneMapping zonemapping, IDictionary`2<PartCatalogType, ModuleZoneLevel> cacheZoneLevel, IList`1<ValidationException> errors, ILogger logger);
    private static void CheckOnlyActivatorsHaveIActivate(PartCatalogType ctypeComponent, IList`1<ValidationException> errors);
    private static void CheckZoneDefinitions(ProductPartCatalogForBuild productPartCatalogForBuild, IList`1<ValidationException> errors, IDictionary`2<PartCatalogType, ModuleZoneLevel> cacheZoneLevel, ILogger logger);
    private static IList`1<ValidationException> GetValidationErrors(ProductPartCatalogForBuild productPartCatalogForBuild, ILogger logger);
    private static void ReportEnvZoneRequireNonEnv(PartCatalogType ctypeZone, ZonePart zone, KeyValuePair`2<ZonePart, ZonePart[]> pairBase, IList`1<ValidationException> errors);
    private static void ReportZoneNamingViolation(PartCatalogType ctypeZone, ModuleZoneLevel zonelevel, Nullable`1<ModuleZoneLevel> zonelevelFromNaming, IList`1<ValidationException> errors);
    private static AttrKinds TypeToKindBits(PartCatalogType ctype);
}
public static class JetBrains.Application.Build.Validation.ValidateDigitalSignatures : object {
    private static ImmutableHashSet`1<string> ourWhitelistedUnsignedFiles;
    private static ValidateDigitalSignatures();
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Validation.ValidateDigitalSignatures/<Validate>d__1")]
[BuildStepAttribute]
public static Task`1<PostCompileValidationResult> Validate(Lifetime lifetime, IEnumerable`1<InputPackage> allPackages, BuildChainFlavor buildChainFlavor, IBuildTaskHost tasker, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[BuildArtifactAttribute]
public class JetBrains.Application.Build.Validation.ValidateImplementationPackagesShipped : object {
    [CompilerGeneratedAttribute]
private SubplatformName <SubplatformShouldBeReferenced>k__BackingField;
    [CompilerGeneratedAttribute]
private SubplatformName <SubplatformWithProduct>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private Request <UnsatisfiedRequest>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<SubplatformName> <ProductSubplatformsWithFeatureZone>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<SubplatformName> <ProductSubplatformsWithConditionalImplementationZone>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<SubplatformName> <SubplatformsCurrentlyShippedForProduct>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public SubplatformName SubplatformShouldBeReferenced { get; public set; }
    public SubplatformName SubplatformWithProduct { get; public set; }
    public string ProductName { get; public set; }
    public Request UnsatisfiedRequest { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<SubplatformName> ProductSubplatformsWithFeatureZone { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<SubplatformName> ProductSubplatformsWithConditionalImplementationZone { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<SubplatformName> SubplatformsCurrentlyShippedForProduct { get; public set; }
    public ValidateImplementationPackagesShipped(SubplatformName SubplatformShouldBeReferenced, SubplatformName SubplatformWithProduct, string ProductName, Request UnsatisfiedRequest, ImmutableArray`1<SubplatformName> ProductSubplatformsWithFeatureZone, ImmutableArray`1<SubplatformName> ProductSubplatformsWithConditionalImplementationZone, ImmutableArray`1<SubplatformName> SubplatformsCurrentlyShippedForProduct);
    [CompilerGeneratedAttribute]
protected ValidateImplementationPackagesShipped(ValidateImplementationPackagesShipped original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public SubplatformName get_SubplatformShouldBeReferenced();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SubplatformShouldBeReferenced(SubplatformName value);
    [CompilerGeneratedAttribute]
public SubplatformName get_SubplatformWithProduct();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SubplatformWithProduct(SubplatformName value);
    [CompilerGeneratedAttribute]
public string get_ProductName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProductName(string value);
    [CompilerGeneratedAttribute]
public Request get_UnsatisfiedRequest();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UnsatisfiedRequest(Request value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SubplatformName> get_ProductSubplatformsWithFeatureZone();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProductSubplatformsWithFeatureZone(ImmutableArray`1<SubplatformName> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SubplatformName> get_ProductSubplatformsWithConditionalImplementationZone();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProductSubplatformsWithConditionalImplementationZone(ImmutableArray`1<SubplatformName> value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SubplatformName> get_SubplatformsCurrentlyShippedForProduct();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SubplatformsCurrentlyShippedForProduct(ImmutableArray`1<SubplatformName> value);
    [BuildStepAttribute]
public static ImmutableArray`1<PostCompileValidationResult> MountToPostCompileValidation(ImmutableArray`1<ValidateImplementationPackagesShipped> validations);
    public ValidationException ToException();
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Validation.ValidateImplementationPackagesShipped/<ValidateByRequests>d__33")]
[BuildStepAttribute]
public static Task`1<ImmutableArray`1<ValidateImplementationPackagesShipped>> ValidateByRequests(ImmutableArray`1<Request> requests, AllAssembliesOnPackagesEx allassPkg, Lifetime lifetime, InputPackage[] inputs, SubplatformsInAllInputPackages subsInInputs, ITaskHost tasker, ILogger logger);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ValidateImplementationPackagesShipped left, ValidateImplementationPackagesShipped right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ValidateImplementationPackagesShipped left, ValidateImplementationPackagesShipped right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ValidateImplementationPackagesShipped other);
    [CompilerGeneratedAttribute]
public virtual ValidateImplementationPackagesShipped <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(SubplatformName& SubplatformShouldBeReferenced, SubplatformName& SubplatformWithProduct, String& ProductName, Request& UnsatisfiedRequest, ImmutableArray`1& ProductSubplatformsWithFeatureZone, ImmutableArray`1& ProductSubplatformsWithConditionalImplementationZone, ImmutableArray`1& SubplatformsCurrentlyShippedForProduct);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ToException>b__32_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ToException>b__32_1();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ToException>b__32_2();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ToException>b__32_3();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ToException>b__32_4();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ToException>b__32_5();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ToException>b__32_6();
}
public static class JetBrains.Application.Build.Validation.ValidateNoPrereleasePackages : object {
    private static JetHashSet`1<string> ourAllowedPrereleasePackageIds;
    private static ValidateNoPrereleasePackages();
    [BuildStepAttribute]
public static PostCompileValidationResult Validate(ILogger logger, InputPackage[] inputPackages, BuildChainFlavor buildChainFlavor, Optional`1<AllPackagesZip> maybeAllPackagesZip, ProductBinaryPackageArtifact[] binaryPackages, PushToNugetGalleryArtifact[] nuGetGallery);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Build.Validation.ZonesValidationResult : object {
    [NotNullAttribute]
public IList`1<Error> Errors;
    [NotNullAttribute]
public IList`1<Error> Warnings;
    public ZonesValidationResult(IStructuredStorage sstg);
    public ZonesValidationResult(IEnumerable`1<Error> errors, IEnumerable`1<Error> warnings);
    [BuildStepAttribute]
public static ValueTuple`2<PostCompileValidationResult, PostCompileValidationSubsetForLocalInstallFromBuildApp> MountToPostCompileValidation(ZonesValidationResult zvr);
    [BuildStepAttribute]
public static LocalInstallWithPostInstallStepsPart MountToLocalInstallBinaries(ProductBinariesDirArtifact bindir, ZonesValidationResult result, PackageZoningInvalid[] invalids, SuppressMissingRequirementValidation[] zonesToSuppressValidation, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Validation.ZonesValidationResult/<RunAsync>d__6")]
[BuildStepAttribute]
public static Task`1<ZonesValidationResult> RunAsync(Lifetime lifetime, ProductPartCatalogForBuild productPartCatalogForBuild, PackageZoningInvalid[] invalids, SuppressMissingRequirementValidation[] zonesToSuppressValidation, AllAssembliesOnEverything allass, ILogger logger, IBuildTaskHost tasker);
    public void Serialize(CsexpArchive ar);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    private static bool AllZonesAreSuppresed(JetHashSet`1<AssemblyQualifiedTypeName> suppresedZonesHashSet, Error e);
    private static void WriteZoneValidationResult(Stream stream, ZonesValidationResult result, PackageZoningInvalid[] invalids, SuppressMissingRequirementValidation[] zonesToSuppressValidation);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__8_0(CsexpWriter writer);
    [CompilerGeneratedAttribute]
internal static void <WriteZoneValidationResult>g__WriteLine|10_0(string text, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static void <WriteZoneValidationResult>g__WriteError|10_1(Error error, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static void <WriteZoneValidationResult>g__WriteCollection|10_2(ICollection`1<Error> errors, <>c__DisplayClass10_0& );
}
public static class JetBrains.Application.Build.Validation.ZonesValidator : object {
    private static ILogger Logger;
    private static ZonesValidator();
    [AsyncStateMachineAttribute("JetBrains.Application.Build.Validation.ZonesValidator/<ValidateAsync>d__1")]
[NotNullAttribute]
public static Task`1<Error[]> ValidateAsync(PartCatalog catalog, ITaskHost tasker);
    private static ZonePart[] GetNameZones(IMetadataTypeInfo info, AssemblyData assemblyData);
    private static bool IsTypeEligibleForFullCheck(PartCatalogType pctype);
    [NotNullAttribute]
private static ICollection`1<ZonePart> MakeMinimalSet(IReadOnlyCollection`1<ZonePart> allzones);
    private static bool ValidateCustomAttributeOwner(IMetadataEntity entity, TypeRequirementsValidationContext ctx);
    private static bool ValidateMethod(ImageBodyReader bodyReader, IMetadataMethod metadataMethod, TypeRequirementsValidationContext ctx);
    private static bool ValidateMethodBody(IMethodBody body, TypeRequirementsValidationContext ctx);
    private static bool ValidatePartTypeRequirements(TypeRequirementsValidationContext ctx);
    private static bool ValidateType(IMetadataType type, TypeRequirementsValidationContext ctx);
    private static bool ValidateTypeDeclaration(IMetadataTypeInfo referencedTypeInfo, TypeRequirementsValidationContext ctx);
    private static bool ValidateTypeSpecialization(IMetadataClassType referencedType, TypeRequirementsValidationContext ctx);
    private static void ValidateZoneDefinitionZones(PartCatalogType pctype, IMetadataTypeInfo metype, ZonePart[] zonesRequiredByType, PartCatalogZoneMapping zonemapping, ConcurrentQueue`1<Error> errorlog);
}
public class JetBrains.Application.BuildScript.Application.ApplicationPackageArtifact : object {
    private static string SerializationIdentity;
    public static string StructuredStorageStreamName;
    private Nullable`1<DateTime> myBestBefore;
    private Nullable`1<DateTime> myBirthDate;
    private DateTime myBuiltOn;
    [NotNullAttribute]
private string myCompanyNameHuman;
    [NotNullAttribute]
private string myCompanyNameLegal;
    [NotNullAttribute]
private ICollection`1<ApplicationPackageFile> myFiles;
    [NotNullAttribute]
private ICollection`1<ApplicationPackageReference> myReferences;
    [NotNullAttribute]
private string mySubplatformName_String;
    [CanBeNullAttribute]
private SubplatformName mySubplatformName_Typed;
    [NotNullAttribute]
private JetSemanticVersion myVersion;
    public Nullable`1<DateTime> BestBefore { get; }
    public Nullable`1<DateTime> BirthDate { get; }
    public DateTime BuiltOn { get; }
    [NotNullAttribute]
public string CompanyNameHuman { get; }
    [NotNullAttribute]
public string CompanyNameLegal { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public ICollection`1<ApplicationPackageFile> Files { get; }
    [NotNullAttribute]
public string Id { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public ICollection`1<ApplicationPackageReference> References { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    [NotNullAttribute]
public JetSemanticVersion Version { get; }
    public ApplicationPackageArtifact(CsexpReader reader);
    public ApplicationPackageArtifact(IStructuredStorage sstg);
    public ApplicationPackageArtifact(IApplicationPackage other);
    public ApplicationPackageArtifact(SubplatformName sname, JetSemanticVersion version, string companyNameHuman, string companyNameLegal, DateTime builtOn, Nullable`1<DateTime> bestBefore, Nullable`1<DateTime> birthDate, IEnumerable`1<ApplicationPackageFile> files, ICollection`1<ApplicationPackageReference> references);
    private static ApplicationPackageArtifact();
    public sealed virtual Nullable`1<DateTime> get_BestBefore();
    public sealed virtual Nullable`1<DateTime> get_BirthDate();
    public sealed virtual DateTime get_BuiltOn();
    public sealed virtual string get_CompanyNameHuman();
    public sealed virtual string get_CompanyNameLegal();
    public sealed virtual ICollection`1<ApplicationPackageFile> get_Files();
    public sealed virtual string get_Id();
    public sealed virtual ICollection`1<ApplicationPackageReference> get_References();
    public sealed virtual SubplatformName get_SubplatformName();
    public sealed virtual JetSemanticVersion get_Version();
    public void GetObjectData(CsexpWriter writer);
    public virtual string ToString();
    protected virtual void AssertValid();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    protected virtual void SerializeCore(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__39_0(CsexpWriter writer);
}
public class JetBrains.Application.BuildScript.Application.ApplicationPackageFile : object {
    [CanBeNullAttribute]
private AssemblyNameInfo myAssemblyName;
    [NotNullAttribute]
private RelativePath myLocalInstallPath;
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    [NotNullAttribute]
public RelativePath LocalInstallPath { get; }
    public ApplicationPackageFile(RelativePath localInstallPath, AssemblyNameInfo assname);
    public ApplicationPackageFile(CsexpReader reader);
    public AssemblyNameInfo get_AssemblyName();
    public RelativePath get_LocalInstallPath();
    public void Serialize(CsexpWriter writer);
    public virtual string ToString();
    internal void SerializeCore(CsexpArchive ar);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Application.ApplicationPackageIsCompileTimeOnly : object {
    public bool IsCompileTimeOnly;
    public ApplicationPackageIsCompileTimeOnly(bool isCompileTimeOnly);
    public ApplicationPackageIsCompileTimeOnly(IStructuredStorage sstg);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__3_0(Stream stm);
}
[XamlSerializableAttribute]
public class JetBrains.Application.BuildScript.Application.ApplicationPackageReference : object {
    [NotNullAttribute]
private string myCompanyNameHuman;
    [NotNullAttribute]
private SubplatformName mySubplatformName;
    [NotNullAttribute]
public string CompanyNameHuman { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    [NotNullAttribute]
public string PackageId { get; }
    public ApplicationPackageReference(SubplatformName subplatformName, string companyNameHuman);
    public ApplicationPackageReference(CsexpReader reader);
    public string get_CompanyNameHuman();
    public SubplatformName get_SubplatformName();
    public string get_PackageId();
    public void Serialize(CsexpWriter writer);
    public virtual string ToString();
    internal void SerializeCore(CsexpArchive ar);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Application.ApplicationPackageReferenceEx : object {
    [ExtensionAttribute]
public static Nullable`1<ImmutableArray`1<JetRuntimeId>> GetRuntimeIdsFromMetadata(ApplicationPackageReference thіs, SerializedValuesResolver resolver);
}
public class JetBrains.Application.BuildScript.Application.ApplicationPackageRuntimeOnlyReferences : object {
    [NotNullAttribute]
private List`1<SubplatformName> myRuntimeOnlyRefs;
    private static string SerializationIdentity;
    private static string StructuredStorageStreamName;
    [NotNullAttribute]
public List`1<SubplatformName> RuntimeOnlyRefs { get; }
    public ApplicationPackageRuntimeOnlyReferences(List`1<SubplatformName> runtimeOnlyRefs);
    public ApplicationPackageRuntimeOnlyReferences(CsexpReader reader);
    public ApplicationPackageRuntimeOnlyReferences(IStructuredStorage sstg);
    private static ApplicationPackageRuntimeOnlyReferences();
    public List`1<SubplatformName> get_RuntimeOnlyRefs();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    public void GetObjectData(CsexpWriter writer);
    public void Serialize(CsexpWriter writer);
    public virtual string ToString();
    internal void SerializeCore(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__8_0(CsexpWriter writer);
}
public static class JetBrains.Application.BuildScript.Application.BuildCommandLineSwitchNames : object {
    public static string Artifact;
    public static string BuildEngine;
    public static string BuildRunnerRequest;
    public static string BuildScriptBin;
    public static string BuildScriptSrc;
    public static string OutputsDir;
    public static string OutputsFile;
    public static string RunBuild;
}
public class JetBrains.Application.BuildScript.Application.Catalogs.CalculateModuleZoneTraitsForPartCatalogTables : object {
    public static string TraitNamespace;
    public static PartCatalogTrait ModuleZoneTraitNameForIZone { get; }
    private string JetBrains.Application.Table.Emit.ICalculateTraitsForPartCatalogTables.TraitNamespace { get; }
    private static CalculateModuleZoneTraitsForPartCatalogTables();
    public static PartCatalogTrait get_ModuleZoneTraitNameForIZone();
    public static PartCatalogTrait GetModuleZoneTraitName(ZonePart zone);
    private sealed virtual override void JetBrains.Application.Table.Emit.ICalculateTraitsForPartCatalogTables.CalculateTraits(EmitTimeTables tables, OneToSetMap`2<TypeRef, TraitNameRecord> typetraits);
    private sealed virtual override string JetBrains.Application.Table.Emit.ICalculateTraitsForPartCatalogTables.get_TraitNamespace();
}
public static class JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogs : object {
    public static ICollection`1<ICalculateTraitsForPartCatalogTables> StandardTraitCalculators;
    private static PartCatalogs();
    public static PartCatalog CreateWithMetadataReader(Lifetime lifetime, IEnumerable`1<AssemblyNameInfo> assemblies, IAssemblyMasterBinder masterbinder, ILogger logger);
    public static PartCatalog CreateWithMetadataReaderFromAssemblyFiles(Lifetime lifetime, ICollection`1<FileSystemPath> filesAssembliesForCataloging, Nullable`1<RuntimeAssemblySources> gacsources, IEnumerable`1<FileSystemPath> filesAdditionalAssemblyReferences, ILogger logger);
    public static PartCatalog CreateWithMetadataReaderFromAssemblyFiles(Lifetime lifetime, ICollection`1<AssemblyNameAndLocation> filesAssembliesForCataloging, Nullable`1<RuntimeAssemblySources> gacsources, IEnumerable`1<AssemblyNameAndLocation> filesAdditionalAssemblyReferences, ILogger logger);
    public static PartCatalog CreateWithMetadataReaderFromRuntimeAssemblies(Lifetime lifetime, IEnumerable`1<Assembly> assemblies, Nullable`1<RuntimeAssemblySources> gacsources, ILogger logger);
    public static PartCatalog CreateWithMetadataReaderFromRuntimeAssembly(Lifetime lifetime, Assembly assembly, Nullable`1<RuntimeAssemblySources> gacsources, ILogger logger);
    public static CatalogTables CreateWithMetadataReaderRaw(Lifetime lifetime, IEnumerable`1<AssemblyNameInfo> assemblies, IAssemblyMasterBinder masterbinder, ILogger logger);
}
public class JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping : object {
    private ILogger Logger;
    [CompilerGeneratedAttribute]
private IDictionary`2<AssemblyNameInfo, AssemblyData> <MapAssemblies>k__BackingField;
    public IDictionary`2<AssemblyNameInfo, AssemblyData> MapAssemblies { get; }
    private PartCatalogZoneMapping(ILogger logger);
    [CompilerGeneratedAttribute]
public IDictionary`2<AssemblyNameInfo, AssemblyData> get_MapAssemblies();
    [NotNullAttribute]
public static PartCatalogZoneMapping GetOrCreate(PartCatalog catalog);
    [CanBeNullAttribute]
public ICollection`1<ZoneMarker> GetPartZones(PartCatalogType part);
    [CanBeNullAttribute]
public ZonePart[] GetPartZonesTransitivelyClosed(PartCatalogType part);
    public bool IsPartInZones(PartCatalogType part, JetHashSet`1<ZonePart> activeModuleZoneValues, CachedPartsPerZone cachedPartsPerZone);
    public void TraceModuleZones();
    [NotNullAttribute]
private static PartCatalogZoneMapping Calculate(PartCatalog catalog, ILogger logger);
}
public static class JetBrains.Application.BuildScript.Application.CompanyGlobalHostFolderLocations : object {
    public static FileSystemPath GetHostsFolder(HostFolderLifetime folderLifetime);
    public static FileSystemPath GetHostFolder(HostInfo hostInfo, HostFolderLifetime folderLifetime, ApplicationHostDetails folderDetails);
    public static RelativePath GetRelativeHostFolder(HostInfo hostInfo, ApplicationHostDetails folderDetails);
}
public static class JetBrains.Application.BuildScript.Application.CoreImages : object {
    public static ByteArrayIconGroup GenericProductIcon;
    public static RasterDeviceImages GenericProductSplash;
    private static string TextIcon;
    private static string TextSplash;
    private static CoreImages();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Application.Eula.EulaFileArtifact : LicenseAgreementArtifact {
    [BuildStepAttribute]
public static Tuple`2<EulaFileArtifact, SubplatformComponentForPackagingFast[]> Load(AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> homedir);
}
public class JetBrains.Application.BuildScript.Application.Eula.LicenseAgreementArtifact : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <TargetPath>k__BackingField;
    public static RelativePath LicenseRootPath;
    public string Content { get; public set; }
    public RelativePath TargetPath { get; public set; }
    private static LicenseAgreementArtifact();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public RelativePath get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(RelativePath value);
    public static Tuple`2<TArtifact, SubplatformComponentForPackagingFast[]> Load(AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> homedir, Func`3<FileSystemPath, SubplatformOnSources, TArtifact> factory);
    public ImmutableFileItem CreateSimpleFileItem();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <CreateSimpleFileItem>b__10_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <CreateSimpleFileItem>b__10_1(StreamWriter writer);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Application.Eula.LicenseAgreementArtifactEx : object {
    [ExtensionAttribute]
public static TArtifact WithRelativePath(TArtifact artifact, Func`2<RelativePath, RelativePath> λChangePath);
    [ExtensionAttribute]
public static PackageBuilder SetLicense(PackageBuilder packageBuilder, TArtifact licenseAgreementArtifact, bool addFile);
    [ExtensionAttribute]
public static JetPackageBuilder SetLicense(JetPackageBuilder packageBuilder, TArtifact licenseAgreementArtifact, bool addFile);
    private static LicenseMetadata GetLicenseMetadata(TArtifact licenseAgreementArtifact, ICollection`1<IPackageFile> files, bool addFile);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Application.Eula.SdkLicenseAgreementArtifact : LicenseAgreementArtifact {
    [BuildStepAttribute]
public static Tuple`2<SdkLicenseAgreementArtifact, SubplatformComponentForPackagingFast[]> Load(AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> homedir);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Application.Eula.ToolboxSubscriptionAgreementArtifact : LicenseAgreementArtifact {
    [BuildStepAttribute]
public static Tuple`2<ToolboxSubscriptionAgreementArtifact, SubplatformComponentForPackagingFast[]> Load(AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> homedir);
}
public static class JetBrains.Application.BuildScript.Application.HostFolderLocations : object {
    public static FileSystemPath GetHostsFolder(HostFolderLifetime folderLifetime);
    public static FileSystemPath GetHostFolder(HostInfo hostInfo, HostFolderLifetime folderLifetime, ApplicationHostDetails folderDetails);
    public static RelativePath GetRelativeHostFolder(HostInfo hostInfo, ApplicationHostDetails folderDetails);
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.Application.HostInfo>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.Application.HostInfo>")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.BuildScript.Application.HostInfo : object {
    public static HostInfo Default;
    [DataMemberAttribute]
public string ShortName;
    [DataMemberAttribute]
public string Hive;
    [DataMemberAttribute]
public UInt32 Wave;
    [DataMemberAttribute]
public bool SupportsSideBySide;
    public string FullIdentifierName { get; }
    public HostInfo(IStructuredStorage storage);
    public HostInfo(string shortName, string hive, UInt32 wave, bool supportSideBySide);
    private static HostInfo();
    public virtual string ToString();
    public static HostInfo CreateForCurrentWave(string sHostShortName);
    public string get_FullIdentifierName();
    public string GetRootSuffix();
    public HostInfo NewWithRootSuffix(string rootSuffix);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    private void Serialize(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__14_0(CsexpWriter writer);
}
public interface JetBrains.Application.BuildScript.Application.IApplicationPackage {
    public Nullable`1<DateTime> BestBefore { get; }
    public Nullable`1<DateTime> BirthDate { get; }
    public DateTime BuiltOn { get; }
    [NotNullAttribute]
public string CompanyNameHuman { get; }
    [NotNullAttribute]
public string CompanyNameLegal { get; }
    [NotNullAttribute]
public ICollection`1<ApplicationPackageFile> Files { get; }
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public ICollection`1<ApplicationPackageReference> References { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    [NotNullAttribute]
public JetSemanticVersion Version { get; }
    public abstract virtual Nullable`1<DateTime> get_BestBefore();
    public abstract virtual Nullable`1<DateTime> get_BirthDate();
    public abstract virtual DateTime get_BuiltOn();
    public abstract virtual string get_CompanyNameHuman();
    public abstract virtual string get_CompanyNameLegal();
    public abstract virtual ICollection`1<ApplicationPackageFile> get_Files();
    public abstract virtual string get_Id();
    public abstract virtual ICollection`1<ApplicationPackageReference> get_References();
    public abstract virtual SubplatformName get_SubplatformName();
    public abstract virtual JetSemanticVersion get_Version();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Application.IApplicationPackageEx : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Don't use. Use ApplicationPackages class.")]
public static ApplicationPackageArtifact FindPackageWithAssembly(IEnumerable`1<ApplicationPackageArtifact> thіs, Assembly assembly, OnError onerror);
    [ExtensionAttribute]
[ObsoleteAttribute("Don't use. Use ApplicationPackages class.")]
public static ApplicationPackageArtifact FindPackageWithAssembly(IEnumerable`1<ApplicationPackageArtifact> thіs, AssemblyNameInfo name, OnError onerror);
    [ExtensionAttribute]
[ObsoleteAttribute("Don't use. Use ApplicationPackages class.")]
public static bool HasAssembly(ApplicationPackageArtifact thіs, AssemblyNameInfo name);
}
[ObsoleteAttribute("Use with caution, seems like the ApplicationPackagesLocallyInstalled class fails to expose the enumerable to the container right now, so use the class itself for the enumeration.")]
public interface JetBrains.Application.BuildScript.Application.IApplicationPackageLocallyInstalled {
    [NotNullAttribute]
public FileSystemPath LocalInstallDirectory { get; }
    public abstract virtual FileSystemPath get_LocalInstallDirectory();
}
public interface JetBrains.Application.BuildScript.Application.IApplicationTrait {
}
public interface JetBrains.Application.BuildScript.Application.IWindowBranding {
    [NotNullAttribute]
public string CompanyName { get; }
    [NotNullAttribute]
public string ProductDisplayName { get; }
    [NotNullAttribute]
public IProperty`1<ByteArrayIconGroup> WindowIcon { get; }
    public abstract virtual string get_CompanyName();
    public abstract virtual string get_ProductDisplayName();
    public abstract virtual IProperty`1<ByteArrayIconGroup> get_WindowIcon();
    [NotNullAttribute]
public abstract virtual string MakeWindowCaption(string caption);
}
public abstract class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute : PartAttribute {
    private static ILogger Logger;
    private static AutoselectZoneAttribute();
    public static ZonePart AutoselectZoneByAttributePrimitiveValue(PartCatalog catalog, ulong valuePrimitive, OnError onerror);
    public static ZonePart AutoselectZoneByAttributeValue(IEnumerable`1<PartCatalog> catalogset, TValue value, OnError onerror);
    public static void AutoselectZonesByAttributePrimitiveValuesRange(PartCatalog catalog, ulong value, RangeOp op, OnError onerror, FrugalLocalList`1& zones);
}
[AttributeUsageAttribute("1024")]
public class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByClrImplementationAttribute : AutoselectZoneAttribute {
    public AutoselectZoneByClrImplementationAttribute(JetClrImplementation clrImplementation);
}
[AttributeUsageAttribute("1024")]
public class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByClrVersionAttribute : AutoselectZoneAttribute {
    public AutoselectZoneByClrVersionAttribute(int nClrVersionMajor);
}
[AttributeUsageAttribute("1024")]
public class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByCpuArchitectureAttribute : AutoselectZoneAttribute {
    public AutoselectZoneByCpuArchitectureAttribute(JetArchitecture architecture);
}
[AttributeUsageAttribute("1024")]
public class JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByOsAttribute : AutoselectZoneAttribute {
    public AutoselectZoneByOsAttribute(JetPlatform platform);
}
[ZoneDefinitionAttribute]
[AutoselectZoneByCpuArchitectureAttribute("3")]
public interface JetBrains.Application.BuildScript.Application.Zones.IArm64CpuArchitectureHostZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByCpuArchitectureAttribute("2")]
public interface JetBrains.Application.BuildScript.Application.Zones.IArmCpuArchitectureHostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IAvaloniaUIEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IClrImplementationHostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.ICpuArchitectureHostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IEnvironmentZone {
}
public interface JetBrains.Application.BuildScript.Application.Zones.IHostSpecificZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IInternalVisibilityZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByOsAttribute("1")]
public interface JetBrains.Application.BuildScript.Application.Zones.ILinuxHostZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByOsAttribute("2")]
public interface JetBrains.Application.BuildScript.Application.Zones.IMacHostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IModeReportExceptionsAlwaysOnEnvironmentZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByClrImplementationAttribute("1")]
public interface JetBrains.Application.BuildScript.Application.Zones.INetCoreHostZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByClrImplementationAttribute("2")]
public interface JetBrains.Application.BuildScript.Application.Zones.INetFrameworkHostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IOperatingSystemHostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IOuterWorldConnectEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IPublicVisibilityZone {
}
public interface JetBrains.Application.BuildScript.Application.Zones.IRequire`1 {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IReSharperExternalServicesZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByClrVersionAttribute("2")]
public interface JetBrains.Application.BuildScript.Application.Zones.ISinceClr2HostZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByClrVersionAttribute("4")]
public interface JetBrains.Application.BuildScript.Application.Zones.ISinceClr4HostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.ISinceFramework45HostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneAvaloniaUIEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneCmdEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneTabWellAvaloniaUIEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneTabWellUIEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneTabWellWpfUIEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IStandaloneUIEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IUIInteractiveEnvZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IUnixHostZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByOsAttribute("3")]
public interface JetBrains.Application.BuildScript.Application.Zones.IWindowsNtHostZone {
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.BuildScript.Application.Zones.IWpfUIEnvZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByCpuArchitectureAttribute("1")]
public interface JetBrains.Application.BuildScript.Application.Zones.IX64CpuArchitectureHostZone {
}
[ZoneDefinitionAttribute]
[AutoselectZoneByCpuArchitectureAttribute("0")]
public interface JetBrains.Application.BuildScript.Application.Zones.IX86CpuArchitectureHostZone {
}
public interface JetBrains.Application.BuildScript.Application.Zones.IZone {
}
public static class JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers : object {
    public static string IZoneFullName;
    public static string NamespaceZoneMarkerClassName;
    public static StringSource RequireFullNameWithoutGenericArgs;
    public static string ZoneDefinitionAttributeFullName;
    public static string ZoneMarkerAttributeTypeFullName;
    public static string ZoneMarkerAttributeTypeLocalName;
    public static string ZoneNameSuffixAny;
    public static string ZoneNameSuffixEnv1;
    public static string ZoneNameSuffixEnv2;
    public static string ZoneNameSuffixHost;
    private static ModuleZoneHelpers();
    [NotNullAttribute]
public static ICollection`1<ZonePart> AddZoneBasesAndRequirements(IEnumerable`1<ZonePart> zones, ILogger logger);
    [NotNullAttribute]
public static IDictionary`2<ZonePart, ZonePart[]> AddZoneBasesAndRequirements2(IEnumerable`1<ZonePart> zones, bool isCollectingPaths, ILogger logger);
    [CanBeNullAttribute]
public static ICollection`1<ModuleZoneWithOrigin> GetNameZonesTransitivelyClosedAndExplained(string fullname, AssemblyData assembly, ILogger logger);
    [CanBeNullAttribute]
public static ICollection`1<ModuleZoneWithOrigin> GetPartZonesTransitivelyClosedAndExplained(PartCatalogType part, PartCatalogZoneMapping zonemapping, ILogger logger);
    public static ZoneFlags GetZoneFlags(ZonePart zoneWithAttr);
    public static ModuleZoneLevel GetZoneLevel(PartCatalogType ctypeZone, IDictionary`2<PartCatalogType, ModuleZoneLevel> cacheZoneLevel);
    public static Nullable`1<ModuleZoneLevel> GuessZoneDefinitionLevelFromNaming(PartCatalogType ctypeZone);
    public static IEnumerable`1<PartCatalogType> GetZonePartCatalogTypesByBase(PartCatalog catalog);
    public static IEnumerable`1<PartCatalogType> GetZonePartCatalogTypesByBase(PartCatalogSet partCatalogSet);
    public static IEnumerable`1<PartCatalogType> GetZonePartCatalogTypesByBase(Type baseZoneType, IPartCatalogSet partCatalogSet);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers/<InheritedZones>d__20")]
public static IEnumerable`1<ZonePart> InheritedZones(ZonePart part);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers/<RequiredZones>d__21")]
public static IEnumerable`1<ZonePart> RequiredZones(ZonePart part);
    public static void SubtractSortedModuleZoneSets(ZonePart[] minuend, ZonePart[] subtrahend, FrugalLocalList`1& difference);
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.Application.Zones.ModuleZoneLevel : Enum {
    public int value__;
    public static ModuleZoneLevel GeneralPopulation;
    public static ModuleZoneLevel Host;
    public static ModuleZoneLevel Environment;
}
[AttributeUsageAttribute("1036")]
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionAttribute : PartAttribute {
    [PublicAPIAttribute]
public ZoneDefinitionAttribute(ZoneFlags zoneflags);
}
[AttributeUsageAttribute("1036")]
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionConfigurableFeatureAttribute : PartAttribute {
    public string FeatureName;
    public string Description;
    public bool IsInProductSection;
    [PublicAPIAttribute]
public ZoneDefinitionConfigurableFeatureAttribute(string FeatureName, string Description, bool IsInProductSection);
}
[AttributeUsageAttribute("1036")]
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionProductAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <ProductPresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductTechnicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyNameLegal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionMarketingString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductTwitterUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductUrlEvaluate>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProductIcon>k__BackingField;
    public string ProductPresentableName { get; public set; }
    public string ProductTechnicalName { get; public set; }
    public string CompanyNameLegal { get; public set; }
    public string CompanyName { get; public set; }
    public string VersionMarketingString { get; public set; }
    public string Version { get; public set; }
    public string ProductUrl { get; public set; }
    public string ProductTwitterUrl { get; public set; }
    public string ProductUrlEvaluate { get; public set; }
    public Type ProductIcon { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProductPresentableName();
    [CompilerGeneratedAttribute]
public void set_ProductPresentableName(string value);
    [CompilerGeneratedAttribute]
public string get_ProductTechnicalName();
    [CompilerGeneratedAttribute]
public void set_ProductTechnicalName(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyNameLegal();
    [CompilerGeneratedAttribute]
public void set_CompanyNameLegal(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
public void set_CompanyName(string value);
    [CompilerGeneratedAttribute]
public string get_VersionMarketingString();
    [CompilerGeneratedAttribute]
public void set_VersionMarketingString(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ProductUrl();
    [CompilerGeneratedAttribute]
public void set_ProductUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ProductTwitterUrl();
    [CompilerGeneratedAttribute]
public void set_ProductTwitterUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ProductUrlEvaluate();
    [CompilerGeneratedAttribute]
public void set_ProductUrlEvaluate(string value);
    [CompilerGeneratedAttribute]
public Type get_ProductIcon();
    [CompilerGeneratedAttribute]
public void set_ProductIcon(Type value);
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.Application.Zones.ZoneFlags : Enum {
    public int value__;
    public static ZoneFlags AutoEnable;
}
[AttributeUsageAttribute("1036")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private Type[] <Zones>k__BackingField;
    [NotNullAttribute]
public Type[] Zones { get; public set; }
    public ZoneMarkerAttribute(Type[] zones);
    [CompilerGeneratedAttribute]
public Type[] get_Zones();
    [CompilerGeneratedAttribute]
public void set_Zones(Type[] value);
}
public class JetBrains.Application.BuildScript.Application.Zones.ZonePart : object {
    public PartCatalogType ZoneInterfaceType;
    private ZonePart(PartCatalogType ctypeZoneInterface);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ZonePart other);
    public static ZonePart FromPartType(PartCatalogType ctypeZoneInterface);
    [NotNullAttribute]
public static ZonePart FromType(Type type, IPartCatalogSet catalogset);
    [NotNullAttribute]
public static ZonePart FromType(IPartCatalogSet catalogset);
    public virtual int GetHashCode();
    public static bool op_Equality(ZonePart left, ZonePart right);
    public static bool op_Inequality(ZonePart left, ZonePart right);
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.ApplicationHostDetails : Enum {
    public int value__;
    public static ApplicationHostDetails Shared;
    public static ApplicationHostDetails PerHost;
    public static ApplicationHostDetails PerWave;
    public static ApplicationHostDetails PerHostAndWave;
}
public class JetBrains.Application.BuildScript.AssemblyNamesList : object {
    private string StreamName_List;
    [NotNullAttribute]
public IList`1<AssemblyNameInfo> AssemblyNames;
    public AssemblyNamesList(IStructuredStorage storage);
    public AssemblyNamesList(IList`1<AssemblyNameInfo> assemblyNames);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact/BinaryStageObjectiveArtifactSerializer")]
public class JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact : object {
    [NotNullAttribute]
public AssemblyQualifiedTypeName BinaryStageObjective;
    public BinaryStageObjectiveArtifact(AssemblyQualifiedTypeName binaryStageObjective);
    public static BinaryStageObjectiveArtifact Parse(string value);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.BindingRedirects.BindingRedirects : object {
    public static string GenerateLauncherAppDomainBindingRedirects();
    [NotNullAttribute]
public static SubplatformFileForPackagingFast[] GenerateAppConfigForBuildScriptClassOfThatProject(AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir);
    public static SubplatformFileForPackagingFast[] GenerateAppConfigForBuildScriptClassOfThatSubplatformProjects(AllAssembliesOnEverything allAssembliesOnEverything, String[] projectNames);
    [CompilerGeneratedAttribute]
internal static string <GenerateLauncherAppDomainBindingRedirects>g__FormatSingleTarget|0_0(AssemblyNameInfo assname);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerArtifact : BuildOutputFileArtifact {
    public BuildRunnerArtifact(ImmutableFileItem file);
    public BuildRunnerArtifact(IStructuredStorage sstg);
    [BuildStepAttribute]
public static BuildRunnerArtifact PublishPlatformCoreForRefs(AllAssembliesOnPackagesEx allasspkg);
    [BuildStepAttribute]
public static BuildRunnerArtifact PublishWaveBundlePackageForRefs(InputPackage[] ipkgs);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreArtifact : BuildOutputFileArtifact {
    public BuildRunnerCoreArtifact(ImmutableFileItem file);
    public BuildRunnerCoreArtifact(IStructuredStorage sstg);
    [BuildStepAttribute]
public static BuildRunnerArtifact[] AsBuildRunner(BuildRunnerCoreArtifact[] cores);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreAssemblyLists : object {
    [NotNullAttribute]
public IList`1<IAssemblyItem> BuildRunnerCoreAssemblies;
    [NotNullAttribute]
public IList`1<IAssemblyItem> BuildScriptReferenceAssemblies;
    public BuildRunnerCoreAssemblyLists(IList`1<IAssemblyItem> buildRunnerCoreAssemblies, IList`1<IAssemblyItem> buildScriptReferenceAssemblies);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreExePacked : BuildOutputFileArtifact {
    [NotNullAttribute]
public ProductNameAndVersionArtifact Branding;
    [NotNullAttribute]
public StuffedLauncherArtifact Launcher;
    public ImmutableArray`1<ImmutableFileItem> NetCoreSupplementaryFiles;
    public BuildRunnerCoreExePacked(StuffedLauncherArtifact launcher, ProductNameAndVersionArtifact branding, ImmutableArray`1<ImmutableFileItem> netCoreSupplementaryFiles);
    public BuildRunnerCoreExePacked(IStructuredStorage sstg);
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreExePackedNuget : BuildOutputPackageFileArtifact {
    public BuildRunnerCoreExePackedNuget(IJetNugetPackage nupkg);
    public BuildRunnerCoreExePackedNuget(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildScriptReferencesNuget : BuildOutputPackageFileArtifact {
    public BuildScriptReferencesNuget(IJetNugetPackage package);
    public BuildScriptReferencesNuget(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.BuildApp.Artifacts.TeamCityBuildTags/TeamCityBuildTagsSerializer")]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.TeamCityBuildTags : object {
    public String[] Tags;
    public TeamCityBuildTags(String[] tags);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Artifacts.WarmUpBuildRunnerCoreBootstrap : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.BuildApp.Artifacts.WarmUpBuildRunnerCoreBootstrap/<Run>d__0")]
[BuildStepAttribute]
public static Task`1<WarmUpBuildRunnerCoreBootstrap> Run(Lifetime lifetime, Optional`1<IncrementalBuild> maybeIncremental, ISourceStageBinStageBuild nestedrunner, Optional`1<AllAssembliesFilterByProfile> allAssembliesFilterByProfile, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.BuildAppEnvironmentConfig : object {
    public AssemblyQualifiedTypeMemberName MainMethod;
    public ZonePart Zone;
    public BuildAppEnvironmentConfig(ZonePart zone, AssemblyQualifiedTypeMemberName mainMethod);
}
public static class JetBrains.Application.BuildScript.BuildApp.BuildResults : object {
    public static RelativePath BuildResultsFileName;
    private static BuildResults();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildApp.Tasks.PartialLocalEmitBuildSystem : object {
    [BuildStepAttribute]
public PartialLocalEmitBuildSystem(Lifetime lifetime, ProductHomeDirArtifact homedir, INestedBuildRunner nester, AllAssembliesOnSources allass, Optional`1<SkipLocalCompilationArtifact> skiplocal, ILogger logger);
}
[AttributeUsageAttribute("12")]
public class JetBrains.Application.BuildScript.BuildEntryPointAttribute : BuildPartAttribute {
    public BuildEntryPointAttribute(Type typeNextLevelEntryPoint);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.BuildSystemDirEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetDevKitBuildSystemDir(ProductHomeDirArtifact homeDirArtifact);
    [NotNullAttribute]
public static FileSystemPath GetDevKitBuildSystemDir(FileSystemPath homedir);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetDevKitConfigDir(ProductHomeDirArtifact homeDirArtifact);
    [NotNullAttribute]
public static FileSystemPath GetDevKitConfigDir(FileSystemPath homedir);
    public static FileSystemPath GetDevKitDir(FileSystemPath homedir);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetDevKitScriptsDir(ProductHomeDirArtifact homeDirArtifact);
    [NotNullAttribute]
public static FileSystemPath GetDevKitScriptsDir(FileSystemPath homedir);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.BuildVersionSuffix : object {
    public int Build;
    [CanBeNullAttribute]
public string PrereleaseMetadata;
    public int Revision;
    public BuildVersionSuffix(int build, int revision, string prereleaseMetadata);
    public BuildVersionSuffix(IStructuredStorage storage);
    [NotNullAttribute]
public static BuildVersionSuffix CreateFromDate(DateTime date, string prereleasemetadata);
    [NotNullAttribute]
public static BuildVersionSuffix CreateFromDateRough(DateTime date, TimeSpan roughness, string prereleasemetadata);
    [NotNullAttribute]
public static BuildVersionSuffix CreateFromSemanticVersion(JetSemanticVersion semver);
    [BuildStepAttribute]
public static BuildVersionSuffix DefaultBuildVersionSuffixForNow(Optional`1<PackageDefaultPrereleaseMetadata> maybeprereleasemetadata, Optional`1<IncrementalBuild> incremental, ILogger logger);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BuildVersionSuffix other);
    public virtual int GetHashCode();
    public static bool op_Equality(BuildVersionSuffix left, BuildVersionSuffix right);
    public static bool op_Inequality(BuildVersionSuffix left, BuildVersionSuffix right);
    [NotNullAttribute]
public JetSemanticVersion ToSemanticVersion(Version2 majorminor);
    public virtual string ToString();
    [NotNullAttribute]
public Version ToVersion(Version2 majorminor);
    [NotNullAttribute]
[BuildStepAttribute]
public static SerializedHostComponentItemArtifact[] WriteApplicationPackageObjects(BuildVersionSuffix suffix, ILogger logger);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.BuildVersionSuffixEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ProductNameAndVersionArtifact EnsureProductVersionBuildRevision(BuildVersionSuffix suffix, ProductNameAndVersionArtifact nameAndVersion);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.BuiltOn>")]
public class JetBrains.Application.BuildScript.BuiltOn : object {
    public DateTime BuiltOnUtc;
    [BuildStepAttribute]
public static BuiltOn DefaultIsNow { get; }
    public BuiltOn(string text);
    public BuiltOn(DateTime builton);
    public static BuiltOn get_DefaultIsNow();
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.Compile.Actions.ActionSystemTasks : object {
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackagingFast> EmbedVsCommandsGuidIntoPackage(ICollection`1<SubplatformVsCommandsGuidArtifact> guids, AllAssembliesOnSources allassSrc);
    [BuildStepAttribute]
public static ICollection`1<SubplatformVsCommandsGuidArtifact> UseLegacyGuidForPlatformSubplatformVsCommands(AllAssembliesOnEverything allass);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact/SubplatformVsCommandsGuidArtifactSerializer")]
public class JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact : object {
    public static Guid AutogeneratedActionsCommandGuidsNamespace;
    public static Guid AutogeneratedCommandGroupsGuidsNamespace;
    public static Guid BeforeWaveReSharperActionGuid;
    public Guid ActionsCommandGroupGuid;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformVsCommandsGuidArtifact(SubplatformName subplatformName, Guid actionsCommandGroupGuid);
    private static SubplatformVsCommandsGuidArtifact();
    public static Guid GenerateGuidForActions(SubplatformName sname);
    public static Guid GenerateGuidForGroups(SubplatformName sname);
    public virtual string ToString();
    private static SubplatformVsCommandsGuidArtifact Parse(string text);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.AddTargetsFileToIncludeAssembliesInProject : object {
    private AllAssembliesOnSources myAllassSrc;
    private ILogger myLogger;
    private IFrameworkNameProvider myFrameworkNameProvider;
    [NotNullAttribute]
private IFrameworkCompatibilityProvider myFrameworkCompatibilityProvider;
    private NuGetFramework myTargetFramework;
    private double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.Priority { get; }
    public AddTargetsFileToIncludeAssembliesInProject(AllAssembliesOnSources allassSrc, ILogger logger, IFrameworkNameProvider frameworkNameProvider, IFrameworkCompatibilityProvider frameworkCompatibilityProvider);
    private OneToListMap`2<NuGetFramework, Tuple`2<SubplatformFileForPackaging, AssemblyItem>> CollectAssemblies(ICollection`1<SubplatformFileForPackaging> assemblies, ILogger logger);
    private void RenderPropsFile(TextWriter targetWriter, Subplatform subplatform, Func`3<PackageFileRole, RelativePath, RelativePath> getTargetRelativePath, IEnumerable`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>> assemblies, ICollection`1<SubplatformFileForPackaging> contentFiles, IEnumerable`1<SubplatformFileForPackaging> propsFiles, ILogger logger);
    private void RenderTargetsFile(TextWriter targetWriter, Func`3<PackageFileRole, RelativePath, RelativePath> getTargetRelativePath, IEnumerable`1<Tuple`2<SubplatformFileForPackaging, AssemblyItem>> assemblies, IEnumerable`1<SubplatformFileForPackaging> targets, ILogger logger);
    [NotNullAttribute]
private NuGetFramework RenderTargetsFile_GetRequiredNetfx(AssemblyItem ai, ILogger logger);
    [NotNullAttribute]
private static NuGetFramework RenderTargetsFile_GetRequiredNetfx_GetClr(AssemblyItem ai, ILogger logger);
    [CanBeNullAttribute]
private NuGetFramework RenderTargetsFile_GetRequiredNetfx_TryGetTargetNetfxSafe(AssemblyItem ai, ILogger logger);
    private sealed virtual override double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.get_Priority();
    private sealed virtual override Task`1<Transformed> JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.ApplyTransformAsync(OuterLifetime lifetime, IReadOnlyCollection`1<SubplatformFileForPackaging> items);
    [CompilerGeneratedAttribute]
internal static RelativePath <RenderPropsFile>g__GetTargetRelativePathFromPackaging|7_0(SubplatformFileForPackaging file, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static RelativePath <RenderTargetsFile>g__GetTargetRelativePathFromPackaging|8_0(SubplatformFileForPackaging file, <>c__DisplayClass8_0& );
}
public enum JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode : Enum {
    public int value__;
    public static AuthenticodeSigningMode CodeFile;
    public static AuthenticodeSigningMode CodeMacBundle;
    public static AuthenticodeSigningMode Pgp;
}
public class JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningParameters : object {
    [CanBeNullAttribute]
public MacOsSigningParameters MacOs;
    public bool SkipDistributedCache;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService : object {
    private static string _regexContentNameNegativeCharset;
    private static string _sInvalidCharsReplacementString;
    private ILogger ourLogger;
    private SignatureVerifierLogger ourSignatureVerifierLogger;
    private Optional`1<IsModeRunningLocallyWithoutSignServerInfo> myIsModeRunningLocallyWithoutSignServerInfo;
    private Optional`1<SignServerFlavor> myFlavor;
    private Optional`1<SignServerPgpKeyIdentity> myPgpKeyIdentity;
    private Optional`1<NugetConfigFile> myNugetConfigFile;
    private Optional`1<SignServerInfo> mySsi;
    private Lazy`1<string> mySsiAuthToken;
    private bool JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.IsAvailable { get; }
    public AuthenticodeSigningService(Optional`1<SignServerInfo> ssi, Optional`1<SignServerFlavor> flavor, Optional`1<SignServerPgpKeyIdentity> pgpKeyIdentity, Optional`1<NugetConfigFile> nugetConfigFile, Optional`1<IsModeRunningLocallyWithoutSignServerInfo> isModeRunningLocallyWithoutSignServerInfo, ILogger logger);
    private static AuthenticodeSigningService();
    private sealed virtual override bool JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.get_IsAvailable();
    private sealed virtual override bool JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.IsSigningThisFileTypeSupported(AuthenticodeSigningMode mode, ImmutableFileItem file);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<JetBrains-Application-BuildScript-Compile-CodeSigning-IAuthenticodeSigningService-SignAsync>d__14")]
private sealed virtual override Task`1<ImmutableFileItem> JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.SignAsync(AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    private sealed virtual override Task`1<VerifySignatureResult> JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.VerifySignatureAsync(AuthenticodeSigningMode mode, ImmutableFileItem file, OnError onerror);
    private string RefreshAuthorizationToken();
    private Lazy`1<string> NewLazyAuthorizationToken();
    private static string TryGetContentType(AuthenticodeSigningMode mode, ImmutableFileItem file);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<ApplySignatureAsync>d__19")]
private Task`1<ImmutableFileItem> ApplySignatureAsync(AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<AttemptAtSigningAsync>d__20")]
private Task`1<ImmutableFileItem> AttemptAtSigningAsync(AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    private static string GetCharsetConstrainedContentName(string sRawContentName, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<CreateSigningTask>d__22")]
private Task`1<string> CreateSigningTask(AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<WaitForSigningTaskComplete>d__23")]
private Task WaitForSigningTaskComplete(string taskId);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<DownloadSignedArtifact>d__24")]
private Task`1<ImmutableFileItem> DownloadSignedArtifact(string taskId, ImmutableFileItem file);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<VerifySignatureCoreAsync>d__25")]
private static Task`1<VerifySignatureResult> VerifySignatureCoreAsync(ImmutableFileItem file, OnError onerror, SignatureVerifierLogger signatureVerifierLogger, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<VerifyAuthenticodeSignature>d__26")]
private static Task`1<VerifySignatureResult> VerifyAuthenticodeSignature(Stream file, SignatureData signatureData, ComputeHashInfo computeHashInfo, OnError onerror, SignatureVerifierLogger signatureVerifierLogger, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<VerifyMachoSignature>d__27")]
private static Task`1<VerifySignatureResult> VerifyMachoSignature(ImmutableFileItem file, OnError onerror, SignatureVerifierLogger signatureVerifierLogger, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService/<VerifyDmgSignature>d__28")]
private static Task`1<VerifySignatureResult> VerifyDmgSignature(ImmutableFileItem file, OnError onerror, SignatureVerifierLogger signatureVerifierLogger, ILogger logger);
    private static VerifySignatureResult ConvertVerifySignatureStatus(VerifySignatureStatus status);
    private static T ReadHttpResponseStreamAsJson(HttpWebResponse response, T schema, String& body);
    private static Uri MakeUri(Uri uri, string relativeUri);
    [CompilerGeneratedAttribute]
internal static void <CreateSigningTask>g__AddStringQuery|22_0(string name, string value, <>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static void <CreateSigningTask>g__AddBooleanQuery|22_1(string name, bool value, <>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static void <CreateSigningTask>g__AddOptionsQuery|22_2(string name, IReadOnlyCollection`1<OptionFlags> values, <>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static void <CreateSigningTask>g__AddBase64GZippedQuery|22_3(string name, string value, <>c__DisplayClass22_0& );
    [CompilerGeneratedAttribute]
internal static void <CreateSigningTask>g__AddMacOsSigningParameters|22_4(<>c__DisplayClass22_0& );
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.CodeSigning.DigestUtil : object {
    private static Encoding ourNoBomUtf8Encoding;
    private static Char[] ourLowerHexDigits;
    private static Regex ourDigestChecksumLine;
    private static Regex ourDigestGnuLine;
    private static Regex ourDigestSvfLine;
    private static DigestUtil();
    [ExtensionAttribute]
[NotNullAttribute]
public static ImmutableFileItem CreateDigest(ImmutableFileItem input, Algorithm algorithm, Format format);
    [ExtensionAttribute]
[NotNullAttribute]
public static ImmutableFileItem CreateDigest(ImmutableFileItem input, RelativePath digestRelativePath, Algorithm algorithm, Format format);
    [ExtensionAttribute]
[NotNullAttribute]
public static ImmutableFileItem CreateDigest(IEnumerable`1<ImmutableFileItem> inputs, RelativePath digestRelativePath, Algorithm algorithm, Format format);
    public static Tuple`2[] ReadDigest(Stream stream, Format format);
    [NotNullAttribute]
private static Byte[] FromLowerHexString(string hashStr);
    [ExtensionAttribute]
[NotNullAttribute]
public static StringBuilder AppendHash(StringBuilder builder, Byte[] hash);
    [ExtensionAttribute]
public static HashAlgorithm CreateHashAlgorithm(Algorithm algorithm);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetExtension(Algorithm algorithm);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetBsdName(Algorithm algorithm);
    public static Algorithm ParseBsdName(string algorithm);
}
public interface JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService {
    public bool IsAvailable { get; }
    public abstract virtual bool get_IsAvailable();
    public abstract virtual bool IsSigningThisFileTypeSupported(AuthenticodeSigningMode mode, ImmutableFileItem file);
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<ImmutableFileItem> SignAsync(AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    [NotNullAttribute]
public abstract virtual Task`1<VerifySignatureResult> VerifySignatureAsync(AuthenticodeSigningMode mode, ImmutableFileItem file, OnError onerror);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx : object {
    private static ILogger ourLogger;
    private static ISignAuthenticodeEx();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx/<EnsureSignedAsync>d__1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use SignAsync where possible because VerifySignatureAsync works differently on different platforms.")]
[ItemNotNullAttribute]
public static Task`1<ImmutableFileItem> EnsureSignedAsync(IAuthenticodeSigningService signingService, AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use the async version directly.")]
public static ImmutableFileItem Sign(IAuthenticodeSigningService signingService, AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use the async version.")]
public static ImmutableFileItem SignIfAvailable(IAuthenticodeSigningService signingService, AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    [ExtensionAttribute]
[ItemNotNullAttribute]
public static Task`1<ImmutableFileItem> SignIfAvailableAsync(IAuthenticodeSigningService signingService, AuthenticodeSigningMode mode, ImmutableFileItem file, string contentName, AuthenticodeSigningParameters parameters);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx/<SignIfNeededAsync>d__5")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<ImmutableFileItem> SignIfNeededAsync(IAuthenticodeSigningService signingService, AuthenticodeSigningMode mode, ImmutableFileItem file, BuildChainFlavor flavor, bool alwaysSignOnBuildAgents, ILogger logger, AuthenticodeSigningParameters parameters);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.Compile.CodeSigning.IsModeRunningLocallyWithoutSignServerInfo>")]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.IsModeRunningLocallyWithoutSignServerInfo : object {
    public static bool DefaultIsOn;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public IsModeRunningLocallyWithoutSignServerInfo(bool isOn);
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
public static class JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsAdHocSigningUtil : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsAdHocSigningUtil/<SignAsync>d__0")]
[NotNullAttribute]
[ItemNotNullAttribute]
public static Task`1<ImmutableFileItem> SignAsync(ImmutableFileItem machOFile, MacOsSigningParameters parameters);
}
public class JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters : object {
    public bool Deep;
    [CanBeNullAttribute]
public string Entitlements;
    public bool Force;
    [CanBeNullAttribute]
public string Identity;
    [CanBeNullAttribute]
public OptionFlags[] Options;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToCommandLineString(OptionFlags option);
    [ExtensionAttribute]
[NotNullAttribute]
public static string ToCommandLineString(IEnumerable`1<OptionFlags> options);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerFlavor/SignServerFlavorSerializer")]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerFlavor : object {
    [NotNullAttribute]
public string FlavorName;
    public SignServerFlavor(string flavorName);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerInfo>")]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerInfo : ToolServerInfo {
    public SignServerInfo(string serialized);
    public SignServerInfo(string username, string password, Uri uri);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerPgpKeyIdentity/SignServerPgpKeyIdentitySerializer")]
public class JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerPgpKeyIdentity : object {
    [NotNullAttribute]
public string KeyIdentity;
    public SignServerPgpKeyIdentity(string keyIdentity);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.Compile.CodeSigning.StrongNameSignatureHelpers : object {
    [NotNullAttribute]
public static ImmutableFileItem SignDelaySignedAssembly(ImmutableFileItem assembly, Byte[] snk);
}
public enum JetBrains.Application.BuildScript.Compile.CodeSigning.VerifySignatureResult : Enum {
    public int value__;
    public static VerifySignatureResult Valid;
    public static VerifySignatureResult Invalid;
    public static VerifySignatureResult InvalidNoSignature;
    public static VerifySignatureResult InvalidChain;
    public static VerifySignatureResult InvalidSignature;
    public static VerifySignatureResult InvalidTimestamp;
    public static VerifySignatureResult SkippedNotYetImplemented;
    public static VerifySignatureResult SkippedIncompatiblePlatform;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.CompiledSubplatformFile : SubplatformFileForPackagingBase {
    public CompiledSubplatformFile(SubplatformName subname, ImmutableFileItem file, PackageFileRole role);
    [BuildStepAttribute]
public static IEnumerable`1<SubplatformFileForPackaging> PackCompiledFiles(IEnumerable`1<CompiledSubplatformFile> compileds);
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Compile.CompileNativeDegreeOfParallelismArtifact/CompileNativeDegreeOfParallelismArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.CompileNativeDegreeOfParallelismArtifact/CompileNativeDegreeOfParallelismArtifactSerializer")]
public class JetBrains.Application.BuildScript.Compile.CompileNativeDegreeOfParallelismArtifact : object {
    public OccupyStrategy Strategy;
    public CompileNativeDegreeOfParallelismArtifact(OccupyStrategy strategy);
    public virtual string ToString();
    [NotNullAttribute]
public static CompileNativeDegreeOfParallelismArtifact Parse(string str);
}
public static class JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks : object {
    private static TimeSpan CompileStandardSubplatformProjectsBuildTimeout;
    private static CompileStandardSubplatformProjectsTasks();
    [BuildStepAttribute]
public static CompileSubplatformsInput CompilationNeedsNuggetsLocallyRestored(LocalRestoredPackageReferenceArtifact[] nuggets);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<CompileSubplatformsAsync>d__2")]
[BuildStepAttribute]
public static Task`1<CompiledSubplatformFile[]> CompileSubplatformsAsync(Lifetime lifetime, AllAssembliesOnSources allassSrc, IAuthenticodeSigningService signingService, CompileSubplatformsInput[] inputs, ProductBinariesDirArtifact bindir, Optional`1<SkipLocalCompilationArtifact> skip, SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper refsdeploy, ValidateCleanCompilation[] cleancompile, Optional`1<IncrementalBuild> incremental, ProfileNameArtifact profile, IInvokeMsbuild invokemsbuild, ProjectShortNamesArtifact shortnames, BuildChainFlavor flavor, List`1<JetSdkProjectParameterArtifact> projectparams, BinarySubplatformsForSdkMini binarySubplatformsForSdkMini, DotNetCoreSdkHelper sdkhelper, IJetNugetPackageManager nugetter, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<AssertCleanCompileAsync>d__3")]
private static Task AssertCleanCompileAsync(Lifetime lifetime, BuildResults built, ValidateCleanCompilation[] cleancompile, AllAssembliesOnSources allassSrc, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<CollectBuildOutputsAsync>d__4")]
[NotNullAttribute]
private static Task`1<CompiledSubplatformFile[]> CollectBuildOutputsAsync(Lifetime lifetime, AllAssembliesOnSources allass, IAuthenticodeSigningService signingService, FileSystemPath pathBinDir, bool isSeparateFolderForEachProject, ProjectShortNamesArtifact shortnames, BuildChainFlavor flavor, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<CollectBuildOutputSingleAsync>d__5")]
private static Task`1<CompiledSubplatformFile[]> CollectBuildOutputSingleAsync(SubplatformProjectWrapper subandproj, IAuthenticodeSigningService signingService, FileSystemPath pathBinDir, bool isSeparateFolderForEachProject, ProjectShortNamesArtifact shortnames, BuildChainFlavor flavor, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<CollectOutputsOfOneProjectAsync>d__6")]
private static Task`1<IList`1<CompiledSubplatformFile>> CollectOutputsOfOneProjectAsync(SubplatformProjectWrapper subandproj, RelativePath relProjectOutputDir, FileSystemPath pathBinDir, RelativePath relOverridePackageFolder, bool isExemptFromManagedAssemblies, bool alwaysSignOnBuildAgents, BuildChainFlavor flavor, IAuthenticodeSigningService signingService, ILogger logger);
    private static void OverrideSdkProjectParameters(List`1<JetSdkProjectParameterArtifact> projectparams, IReadOnlyCollection`1<JetSdkProjectParameterArtifact> overrides);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks/<PreparePropertiesAsync>d__8")]
[NotNullAttribute]
private static Task`1<ValueTuple`2<IDictionary`2<string, string>, FileSystemPath>> PreparePropertiesAsync(Lifetime lifetime, ProductBinariesDirArtifact bindir, SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper refsdeploy, ProfileNameArtifact maybeProfile, bool isIncremental, List`1<JetSdkProjectParameterArtifact> projectparams, BinarySubplatformsForSdkMini binarySubplatformsForSdkMini, ILogger logger);
    private static bool ShouldAlwaysSignOnBuildAgents(SubplatformProjectWrapper subandproj);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.CompileSubplatformsInput : object {
}
public static class JetBrains.Application.BuildScript.Compile.CompileTasksSinceClr4 : object {
    [BuildStepAttribute]
public static CompileLevelEntryPoint LinkCompileLevelEntryPointToBinaries(SubplatformBinariesPackage[] subbins, DeployablePackage[] dpkgs);
}
public static class JetBrains.Application.BuildScript.Compile.CopyrightValidator : object {
    private static String[] ourStringsToRemove;
    private static CopyrightValidator();
    public static CopyrightValidationResult ValidateCopyright(string copyright, bool requireCopyrightWord, bool requireCopyrightYear);
    private static bool ValidateYearString(string yearString);
    [NotNullAttribute]
public static string TrimCopyright(string copyrightString, String[] stringsToRemove);
    public static String[] SplitCopyright(string copyrightString);
    public static string PrettifyCopiright(string copyrightString);
    public static bool ValidateCopyrightHolders(string copyrightString);
}
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Compile.EmbeddedPackageFileLicense : object {
    [NotNullAttribute]
public List`1<RelativePath> TargetPackageFiles;
    [NotNullAttribute]
public LibraryLicenseEntry License;
    public EmbeddedPackageFileLicense(LibraryLicenseEntry license, List`1<RelativePath> targetPackageFiles);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact : object {
    public RelativePath MoveToFolder;
    public string PackageId;
    [CanBeNullAttribute]
public JetSemanticVersion PackageVersion;
    public SubplatformName Subplatform;
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformTasks : object {
    [BuildStepAttribute]
public static void EmbedFilesFromPackageIntoSubplatform(EmbedPackageInSubplatformArtifact[] embeds, RetrievedPackageReferenceArtifact[] pkgs, AllAssembliesOnEverything allass, PackageVersionLocks verlocks, ILogger logger, IList`1& fileForPackagingFast, IList`1& embeddedPackageFiles);
    public static ImmutableArray`1<ValueTuple`3<EmbedPackageInSubplatformArtifact, PackageReferenceInfo, PackageReferenceArtifact>> GetPackageReferenceInfos(EmbedPackageInSubplatformArtifact[] embeds, AllAssembliesOnEverything allass, PackageVersionLocks verlocks, ILogger logger);
    [BuildStepAttribute]
public static IList`1<PackageReferenceArtifact> RequirePackages(EmbedPackageInSubplatformArtifact[] embeds, AllAssembliesOnEverything allass, PackageVersionLocks verlocks, ILogger logger);
}
public static class JetBrains.Application.BuildScript.Compile.EmitsApplicationPackageForNuget : object {
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackaging> CreateAppPkg(AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass, TransformedSubplatformFileForPackaging[] filesAfterTransforms, BuildVersionSuffix versuffix, SubplatformPackagesTimesArtifact packagetimes, ILogger logger);
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackagingFast> CreateAppPkgCompanionArtifactsFast(AllAssembliesOnSources allassSrc);
}
public static class JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog : object {
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackaging> EmbedCatalogInPackage(ICollection`1<PackagePartCatalogArtifact> catalogs);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog/<EmitCatalogAsync>d__1")]
[BuildStepAttribute]
public static Task`1<ICollection`1<PackagePartCatalogArtifact>> EmitCatalogAsync(Lifetime lifetime, AllAssembliesOnEverything allass, TransformedSubplatformFileForPackaging[] subfiles, IBuildTimeRealizedAssemblyItemUnification unification, RetrievedPackageReferenceArtifact[] retrs, InputPackage[] inputs, PackageExcludedFromSubplatformCatalogingAssemblyResolve[] nonresolvable, SubplatformWhitelistMissingAssemblyReferencesArtifact[] whitelistmissingSrc, IBuildTaskHost tasker, ILogger logger);
    private static SubplatformDataForCataloging EmitCatalog_CollectInitial(SubplatformOnSources subplatform, AllAssembliesAccess aaa, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFiles, ILookup`2<SubplatformName, RetrievedPackageReferenceArtifact> lookupReferencedPackages, JetHashSet`1<string> hashPackagesFromSubplatforms, ILookup`2<string, InputPackage> lookupInputPackages, JetHashSet`1<JetPackageIdentity> hashSkipPackages, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog/<EmitCatalog_CreateAsync>d__3")]
private static Task`1<PackagePartCatalogArtifact> EmitCatalog_CreateAsync(SubplatformDataForCataloging subdatum, Dictionary`2<JetPackageIdentity, AsyncLazy`1<ICollection`1<IAssemblyItem>>> mapExpandedPackageItems, IBuildTimeRealizedAssemblyItemUnification unification, JetHashSet`1<AssemblyNameInfo> hashSkipAssemblies, ILogger logger);
    [NotNullAttribute]
private static Dictionary`2<JetPackageIdentity, AsyncLazy`1<ICollection`1<IAssemblyItem>>> EmitCatalog_ExpandPackages(SubplatformDataForCataloging[] subdata, JetHashSet`1<AssemblyNameInfo> hashSkipAssemblies, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog/<EmitCatalogAsync_WhitelistMissingAssemblies>d__5")]
private static Task`1<JetHashSet`1<AssemblyNameInfo>> EmitCatalogAsync_WhitelistMissingAssemblies(Lifetime lifetime, InputPackage[] inputs, SubplatformWhitelistMissingAssemblyReferencesArtifact[] whitelistmissingSrc, IBuildTaskHost tasker, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages/<CreateLightweightMetadataFiles>d__0")]
[BuildStepAttribute]
public static Task`1<ICollection`1<LightweightMetadataFile>> CreateLightweightMetadataFiles(Lifetime lifetime, AllAssembliesOnSources allassembliesSrc, AllAssembliesOnEverything allAssembliesOnEverything, ICollection`1<SubplatformFileForPackagingFast> fastfiles, ICollection`1<SubplatformComponentForPackagingFast> fastcomponents, BuildVersionSuffix versuffix, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages/<CreateSubplatformPackages>d__1")]
[BuildStepAttribute]
public static Task`1<Tuple`2<List`1<SubplatformBinariesPackage>, List`1<SubplatformProgramDatabasePackage>>> CreateSubplatformPackages(Lifetime lifetime, TransformedSubplatformFileForPackaging[] subplatformFileForPackagings, SubplatformComponentForPackaging[] packagecomponents, AllAssembliesOnSources allassembliesSrc, AllAssembliesOnEverything allAssembliesOnEverything, RetrievedPackageReferenceArtifact[] packagerefs, BuildVersionSuffix versuffix, SourcesValidationResult[] sourcesValidationResult, WaveBundleReferencePackage wavepkg, IBuildTaskHost tasker, ILogger logger, SdkLicenseAgreementArtifact sdkLicenseArtifact, LicenseAgreementForSubplatform[] agreementsForSubplatforms);
    public static string GetLightJetMetadataFilename(Subplatform subplatform);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages/<AssertNoItemsForAbsentSubplatformsAsync>d__3")]
private static Task AssertNoItemsForAbsentSubplatformsAsync(Lifetime lifetime, AllAssembliesOnSources allassSrc, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFilesForPackaging, ILookup`2<SubplatformName, SubplatformComponentForPackaging> lookupPackageComponents, IBuildTaskHost tasker, ILogger logger);
    private static PublicKeyToken CalculatePubKeyTokenBySnk(FileSystemPath productHomeDir, SubplatformOnSources sub, ConcurrentDictionary`2<OWORD, PublicKeyToken> cachePkTokenBySnkHash, ILogger logger);
    private static AppPkgForPackaging CreateSubplatformPackages_AppPkg(Lifetime lifetimeStep, SubplatformOnSources subplatform, ILookup`2<SubplatformName, SubplatformComponentForPackaging> lookupPackageComponents);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages/<CreateSubplatformPackages_Main>d__6")]
private static Task`1<SubplatformBinariesPackage> CreateSubplatformPackages_Main(Lifetime lifetime, SubplatformOnSources subplatform, AppPkgForPackaging apppkginfo, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFilesForPackagingBySubplatform, RetrievedPackageReferenceArtifact[] packagerefs, BuildVersionSuffix versuffix, AllAssembliesAccess aaa, WaveBundleReferencePackage wavepkg, IBuildTaskHost tasker, ILogger logger, LicenseAgreementArtifact licenseAgreementArtifact);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages/<CreateSubplatformPackages_Pdb>d__7")]
private static Task`1<SubplatformProgramDatabasePackage> CreateSubplatformPackages_Pdb(Lifetime lifetime, SubplatformOnSources subplatform, AppPkgForPackaging apppkginfo, ILookup`2<SubplatformName, TransformedSubplatformFileForPackaging> lookupFilesForPackagingBySubplatform, IBuildTaskHost tasker, ILogger logger, LicenseAgreementArtifact licenseAgreementArtifact);
    private static LicenseAgreementArtifact GetLicense(SubplatformName subplatformName, SdkLicenseAgreementArtifact resharperSdkLicenseAgreementArtifact, ILookup`2<SubplatformName, LicenseAgreementArtifact> lookupPackageLicenses);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.EmptyTransformSubplatformFilesForPackaging : object {
    private double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.Priority { get; }
    private sealed virtual override Task`1<Transformed> JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.ApplyTransformAsync(OuterLifetime lifetime, IReadOnlyCollection`1<SubplatformFileForPackaging> items);
    private sealed virtual override double JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.get_Priority();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion>")]
public class JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion : object {
    public string TargetFrameworkVersion;
    [NotNullAttribute]
public FrameworkName TargetFrameworkName { get; }
    public ForceTargetFrameworkVersion(string targetFrameworkVersion);
    public FrameworkName get_TargetFrameworkName();
    public virtual string ToString();
}
[BuildHelperAttribute]
[ObsoleteAttribute("Not broken, but seems like it has no uses: either use INestedBuildRunner to run a fully inherited build on the same sources, or ISourceStageBinStageBuild to run a source stage correctly.")]
public interface JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources {
    [NotNullAttribute]
public abstract virtual Task`1<TArtifact> RunNestedBuildOnSourcesForArtifactAsync(OuterLifetime lifetime, Action`1<IBuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
    [NotNullAttribute]
public abstract virtual Task`1<TArtifact[]> RunNestedBuildOnSourcesForArtifactsAsync(OuterLifetime lifetime, Action`1<IBuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
    [NotNullAttribute]
public abstract virtual Task`1<ICollection`1<BuildOutputFileArtifact>> RunNestedBuildOnSourcesForArtifactsAsync(OuterLifetime lifetime, AssemblyQualifiedTypeName objective, Action`1<IBuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
}
public interface JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    public abstract virtual Task`1<Transformed> ApplyTransformAsync(OuterLifetime lifetime, IReadOnlyCollection`1<SubplatformFileForPackaging> items);
}
public static class JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants : object {
    [NotNullAttribute]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethod;
    [NotNullAttribute]
[ObsoleteAttribute("Use ConsoleMainMethod.")]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethodScattered;
    [NotNullAttribute]
public static AssemblyQualifiedTypeMemberName MainMethod;
    [NotNullAttribute]
[ObsoleteAttribute("Use MainMethod.")]
public static AssemblyQualifiedTypeMemberName MainMethodScattered;
    private static LauncherCompileTimeConstants();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry/LibraryLicenseEntrySerializer")]
public class JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry : object {
    [NotNullAttribute]
public string PackageId;
    [NotNullAttribute]
public string DisplayName;
    [CanBeNullAttribute]
public Uri ProjectUri;
    [NotNullAttribute]
public JetSemanticVersion Version;
    public LicensesApprovedByLegalTeam License;
    [NotNullAttribute]
public Uri LicenseUri;
    [NotNullAttribute]
public string LicenseDisplayName;
    [NotNullAttribute]
public string Copyright;
    [NotNullAttribute]
public IReadOnlyCollection`1<string> Authors;
    [NotNullAttribute]
public static LibraryLicenseEntry JetBrainsOwnedPackageLicense;
    private LibraryLicenseEntry(string packageId, string displayName, Uri projectUri, JetSemanticVersion version, LicensesApprovedByLegalTeam license, string copyright, IReadOnlyCollection`1<string> authors);
    private static LibraryLicenseEntry();
    [NotNullAttribute]
public static LibraryLicenseEntry CreateLicense(string packageId, string displayName, Uri projectUri, JetSemanticVersion version, LicensesApprovedByLegalTeam license, string copyright, IReadOnlyCollection`1<string> authors);
    [NotNullAttribute]
public static LibraryLicenseEntry CreateLicense(IJetNugetPackage package);
    [NotNullAttribute]
private static string ConvertPackageIdToDisplayName(string packageId);
    [NotNullAttribute]
private static LibraryLicenseEntry CreateJetBrainsPackageLicense(string packageId, LicensesApprovedByLegalTeam license);
    [NotNullAttribute]
public static LibraryLicenseEntry CreateJetBrainsPackageLicense(SubplatformName subplatformName, LicensesApprovedByLegalTeam license);
    public sealed virtual bool Equals(LibraryLicenseEntry other);
    public static bool op_Equality(LibraryLicenseEntry left, LibraryLicenseEntry right);
    public static bool op_Inequality(LibraryLicenseEntry left, LibraryLicenseEntry right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(LibraryLicenseEntry other);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <ToString>b__22_0(StringBuilder _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Compile.LicenseAgreementForSubplatform : object {
    [CompilerGeneratedAttribute]
private SubplatformName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseAgreementArtifact <LicenseAgreement>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public SubplatformName Name { get; public set; }
    public LicenseAgreementArtifact LicenseAgreement { get; public set; }
    public LicenseAgreementForSubplatform(SubplatformName Name, LicenseAgreementArtifact LicenseAgreement);
    [CompilerGeneratedAttribute]
private LicenseAgreementForSubplatform(LicenseAgreementForSubplatform original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public SubplatformName get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(SubplatformName value);
    [CompilerGeneratedAttribute]
public LicenseAgreementArtifact get_LicenseAgreement();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LicenseAgreement(LicenseAgreementArtifact value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LicenseAgreementForSubplatform left, LicenseAgreementForSubplatform right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LicenseAgreementForSubplatform left, LicenseAgreementForSubplatform right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(LicenseAgreementForSubplatform other);
    [CompilerGeneratedAttribute]
public LicenseAgreementForSubplatform <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(SubplatformName& Name, LicenseAgreementArtifact& LicenseAgreement);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.LicenseDeclarationsApprovedByLegalTeam : object {
    private static string CopyrightAntoineAubryAndContributors;
    private static string CopyrightAndriiRublov;
    private static string CopyrightAutofacProject;
    private static string CopyrightCharlesCook;
    private static string CopyrightCharliePooleRobProuse;
    private static string CopyrightDanielDoubrovkineVestrisInc;
    private static string CopyrightJamesNewtonKing;
    private static string CopyrightJbEvainNovellInc;
    private static string CopyrightJetBrains;
    private static string CopyrightKirillOsenkov;
    private static string CopyrightLevelDbAuthors;
    private static string CopyrightMicrosoftCorporation;
    private static string CopyrightNetFoundationAndContributors;
    private static string CopyrightSharpZipLibContributors;
    private static string CopyrightXamarinInc;
    private static string CopyrightTylerBrinks;
    private static string CopyrightJimmyBogard;
    private static string CopyrightGodot;
    private static ILogger ourLogger;
    private static string ReadLicenseTextFromPackage;
    private static ConcurrentDictionary`2<JetPackageIdentity, Lazy`1<LicensesApprovedByLegalTeam>> ourLicenseCache;
    private static LicenseDeclarationsApprovedByLegalTeam();
    private static void CreateSimpleSpdxLicenses();
    private static void CreateSpdxExpressionLicenses();
    private static void CreateCustomLicenses();
    private static void CreatePackageIdentityMappings();
    private static void CreateLicenseFileMappings();
    [ExtensionAttribute]
[NotNullAttribute]
public static Uri GetLicenseUri(LicensesApprovedByLegalTeam license, string copyright);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetCopyright(IJetNugetPackage package);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetLicenseDisplayName(LicensesApprovedByLegalTeam license, string copyright);
    [ExtensionAttribute]
public static LicenseInfo GetLicenseInfo(LicensesApprovedByLegalTeam license);
    [ExtensionAttribute]
public static bool HasLicense(IJetNugetPackage package);
    [ExtensionAttribute]
public static LicensesApprovedByLegalTeam ToLicensesApprovedByLegalTeam(IJetNugetPackage package, bool ignoreCache);
    private static LicensesApprovedByLegalTeam CalculateLicense(IJetNugetPackage package);
    private static void LogPacketsWithExclusion(JetPackageIdentity package, LicenseExclusion exclusion);
    [NotNullAttribute]
internal static Uri MakeOwnUrlForBrandedLicenses(LicenseInfo license, string copyright);
    [NotNullAttribute]
internal static string MakeDisplayNameForBrandedLicenses(LicenseInfo license, string copyright);
}
public class JetBrains.Application.BuildScript.Compile.LicenseInfo : object {
    [CompilerGeneratedAttribute]
private LicensesApprovedByLegalTeam <License>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullTextComment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpdxExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LicenseUri>k__BackingField;
    [CanBeNullAttribute]
private Func`3<LicenseInfo, string, Uri> myCopyrightToUriEmbeddingFunc;
    [CanBeNullAttribute]
private Func`3<LicenseInfo, string, string> myCopyrightToDisplayNameEmbeddingFunc;
    public LicensesApprovedByLegalTeam License { get; public set; }
    public LicenseKind Kind { get; public set; }
    [NotNullAttribute]
public string LicenseName { get; public set; }
    public string FullText { get; private set; }
    public string FullTextComment { get; private set; }
    public string SpdxExpression { get; public set; }
    public Uri LicenseUri { get; public set; }
    public bool HasFullText { get; }
    public bool IsCopyrightMandatory { get; }
    [CompilerGeneratedAttribute]
public LicensesApprovedByLegalTeam get_License();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_License(LicensesApprovedByLegalTeam value);
    [CompilerGeneratedAttribute]
public LicenseKind get_Kind();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Kind(LicenseKind value);
    [CompilerGeneratedAttribute]
public string get_LicenseName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LicenseName(string value);
    [CompilerGeneratedAttribute]
public string get_FullText();
    [CompilerGeneratedAttribute]
private void set_FullText(string value);
    [CompilerGeneratedAttribute]
public string get_FullTextComment();
    [CompilerGeneratedAttribute]
private void set_FullTextComment(string value);
    [CompilerGeneratedAttribute]
public string get_SpdxExpression();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SpdxExpression(string value);
    [CompilerGeneratedAttribute]
public Uri get_LicenseUri();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LicenseUri(Uri value);
    public bool get_HasFullText();
    public bool get_IsCopyrightMandatory();
    public Uri GetLicenseUri(string copyright);
    public string GetDisplayName(string copyright);
    public static LicenseInfo CreateStandardLicense(LicensesApprovedByLegalTeam license, string licenseName, string spdxExpression, Uri licenseUri, Func`3<LicenseInfo, string, Uri> copyrightToUriEmbeddingFunc, Func`3<LicenseInfo, string, string> copyrightToDisplayNameEmbeddingFunc);
    public static LicenseInfo CreateCustomLicense(LicensesApprovedByLegalTeam license, string licenseName, string fullText, string fullTextComment, Uri licenseUri);
    public void AddLicenseText(string licenseText, string licenseTextComment);
}
public enum JetBrains.Application.BuildScript.Compile.LicensesApprovedByLegalTeam : Enum {
    public int value__;
    public static LicensesApprovedByLegalTeam ANTLRPD;
    public static LicensesApprovedByLegalTeam Apache20;
    public static LicensesApprovedByLegalTeam BSD3Clause;
    public static LicensesApprovedByLegalTeam BSL10;
    public static LicensesApprovedByLegalTeam MIT;
    public static LicensesApprovedByLegalTeam MPL11;
    public static LicensesApprovedByLegalTeam MSPL;
    public static LicensesApprovedByLegalTeam MSRL;
    public static LicensesApprovedByLegalTeam Apache20_with_LLVMException;
    public static LicensesApprovedByLegalTeam ActiproEULA2008;
    public static LicensesApprovedByLegalTeam ActiproEULA2013;
    public static LicensesApprovedByLegalTeam Apache20_and_MicrosoftNetLibrary_and_MITCharliePooleRobProuseAndContributors_and_MITJamesNewtonKing;
    public static LicensesApprovedByLegalTeam DevExpressEULA;
    public static LicensesApprovedByLegalTeam JetBrainsAiTermsOfService;
    public static LicensesApprovedByLegalTeam JetBrainsReSharperSDK;
    public static LicensesApprovedByLegalTeam JetBrainsRiderSDK;
    public static LicensesApprovedByLegalTeam JetBrainsDotPeek;
    public static LicensesApprovedByLegalTeam JetBrainsDotCoverCLT;
    public static LicensesApprovedByLegalTeam JetBrainsDotMemoryCLT;
    public static LicensesApprovedByLegalTeam JetBrainsDotTraceCLT;
    public static LicensesApprovedByLegalTeam JetBrainsReSharperCLT;
    public static LicensesApprovedByLegalTeam JetBrainsDotMemoryUnit;
    public static LicensesApprovedByLegalTeam JetBrainsUserAgreement;
    public static LicensesApprovedByLegalTeam JetBrainsToolboxSubscriptionAgreement;
    public static LicensesApprovedByLegalTeam MicrosoftExpressionBlendSDK;
    public static LicensesApprovedByLegalTeam MicrosoftNetLibrary12Clause;
    public static LicensesApprovedByLegalTeam MicrosoftNetLibrary13ClauseThirdPartyNotices600;
    public static LicensesApprovedByLegalTeam MicrosoftNetLibrary13ClauseThirdPartyNotices800;
    public static LicensesApprovedByLegalTeam MicrosoftNetLibrary13ClauseThirdPartyNoticesAdditionalNotices800;
    public static LicensesApprovedByLegalTeam MicrosoftNetLibraryMITThirdPartyNotices600;
    public static LicensesApprovedByLegalTeam MicrosoftNetLibraryMITThirdPartyNotices800;
    public static LicensesApprovedByLegalTeam MicrosoftSqlServerSMO;
    public static LicensesApprovedByLegalTeam MicrosoftVisualStudio2017;
    public static LicensesApprovedByLegalTeam MicrosoftWindowsApiCodePack;
    public static LicensesApprovedByLegalTeam MicrosoftWindowsSDK;
    public static LicensesApprovedByLegalTeam YWorksYFilesWPFSLA;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.Application.BuildScript.Compile.LicenseTexts : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DevExpressEULA { get; }
    internal static string MicrosoftExpressionBlendSDK { get; }
    internal static string MicrosoftExpressionBlendSDK_Comment { get; }
    internal static string MicrosoftNetLibrary12Clause { get; }
    internal static string MicrosoftSqlServerSMO { get; }
    internal static string MicrosoftSqlServerSMO_Comment { get; }
    internal static string MicrosoftVisualStudio2017 { get; }
    internal static string MicrosoftVisualStudio2017_Comment { get; }
    internal static string MicrosoftWindowsApiCodePack { get; }
    internal static string MicrosoftWindowsApiCodePack_Comment { get; }
    internal static string MicrosoftWindowsSDK { get; }
    internal static string MicrosoftWindowsSDK_Comment { get; }
    internal static string ToolboxSubscriptionAgreement_Comment { get; }
    internal static string YWorksYFilesWPFSLA { get; }
    internal static string YWorksYFilesWPFSLA_Comment { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DevExpressEULA();
    internal static string get_MicrosoftExpressionBlendSDK();
    internal static string get_MicrosoftExpressionBlendSDK_Comment();
    internal static string get_MicrosoftNetLibrary12Clause();
    internal static string get_MicrosoftSqlServerSMO();
    internal static string get_MicrosoftSqlServerSMO_Comment();
    internal static string get_MicrosoftVisualStudio2017();
    internal static string get_MicrosoftVisualStudio2017_Comment();
    internal static string get_MicrosoftWindowsApiCodePack();
    internal static string get_MicrosoftWindowsApiCodePack_Comment();
    internal static string get_MicrosoftWindowsSDK();
    internal static string get_MicrosoftWindowsSDK_Comment();
    internal static string get_ToolboxSubscriptionAgreement_Comment();
    internal static string get_YWorksYFilesWPFSLA();
    internal static string get_YWorksYFilesWPFSLA_Comment();
}
public class JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler : TaskScheduler {
    [ThreadStaticAttribute]
private static bool _currentThreadIsProcessingItems;
    private LinkedList`1<Task> _tasks;
    private int _maxDegreeOfParallelism;
    private int _delegatesQueuedOrRunning;
    public int MaximumConcurrencyLevel { get; }
    public LimitedConcurrencyLevelTaskScheduler(int maxDegreeOfParallelism);
    protected sealed virtual void QueueTask(Task task);
    private void NotifyThreadPoolOfPendingWork();
    protected sealed virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected sealed virtual bool TryDequeue(Task task);
    public sealed virtual int get_MaximumConcurrencyLevel();
    protected sealed virtual IEnumerable`1<Task> GetScheduledTasks();
    [CompilerGeneratedAttribute]
private void <NotifyThreadPoolOfPendingWork>b__6_0(object _);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.MakeArtifactUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IReadOnlyCollection`1<T> GetMarkerArtifacts(InputPackage package, ILogger logger);
}
public static class JetBrains.Application.BuildScript.Compile.MsbuildFileJet : object {
}
public class JetBrains.Application.BuildScript.Compile.MsiMarkerArtifact : object {
    public JetArchitecture Architecture;
    [NotNullAttribute]
public RelativePath InPackageLocation;
    [NotNullAttribute]
public Version Version;
    public MsiMarkerArtifact(RelativePath inPackageLocation, Version version, JetArchitecture architecture);
    public MsiMarkerArtifact(IStructuredStorage storage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    public virtual string ToString();
}
[PublicAPIAttribute]
public abstract class JetBrains.Application.BuildScript.Compile.NativeSolutions.BaseNativeSubplatformArtifact : object {
    public CMakeConfiguration Configuration;
    [NotNullAttribute]
public JetRuntimeId RuntimeId;
    public SubplatformName SubplatformName;
    public NativeSubplatformType SubplatformType;
    protected BaseNativeSubplatformArtifact(NativeSubplatformType subplatformType, CMakeConfiguration configuration, JetRuntimeId runtimeId, SubplatformName sname);
    [NotNullAttribute]
public static SubplatformCompilationRequirements[] ToCompilationRequirements(IEnumerable`1<BaseNativeSubplatformArtifact> nasubs);
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.CMakeCompiler : Enum {
    public int value__;
    public static CMakeCompiler Clang;
    public static CMakeCompiler Msvc;
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.CMakeConfiguration : Enum {
    public int value__;
    public static CMakeConfiguration Debug;
    public static CMakeConfiguration Release;
    public static CMakeConfiguration RelWithDebInfo;
    public static CMakeConfiguration MinSizeRel;
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.CMakeGenerator : Enum {
    public int value__;
    public static CMakeGenerator UnixMakefiles;
    public static CMakeGenerator NMakeMakefiles;
    public static CMakeGenerator VisualStudio;
    public static CMakeGenerator Ninja;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileNativeSolutions : object {
    private static UInt32 IncreaseTheValueIfYouWantTheRebuild;
    [BuildStepAttribute]
public static Task`1<LocalPrepareWorkingCopy> RunPrepareWorkingCopy(ILogger logger, LocalRestoredPackageReferenceArtifact[] restoredPackages, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, Calculated cppSkipCompiling, Optional`1<CppEnableDeveloperMode> cppEnableDeveloperMode, Optional`1<CppSuppressUnityBuild> cppSuppressUnityBuild, TargetEnvironmentArtifact targetEnvironmentArtifact, CompileTargetArtifact compileTargetArtifact, NativeSolutionArtifact[] solutionArtifacts, IInvokeMsbuild invokeMsbuild, IJetNugetPackageManager nugetter, ITaskHost tasker);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileNativeSolutions/<RunCompile>d__2")]
[BuildStepAttribute]
public static Task`1<Tuple`2<IReadOnlyCollection`1<CompiledSubplatformFile>, IReadOnlyCollection`1<SubplatformComponentForPackaging>>> RunCompile(Lifetime lifetime, ILogger logger, AllAssembliesOnEverything allass, LocalRestoredPackageReferenceArtifact[] restoredPackages, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, InputPackage[] inputPackages, Calculated cppSkipCompiling, BuildChainFlavor buildChainFlavor, IAuthenticodeSigningService signingService, Optional`1<IncrementalBuild> incrementalBuild, Optional`1<CompileNativeDegreeOfParallelismArtifact> degreeOfParallelism, Optional`1<CppEnableDeveloperMode> cppEnableDeveloperMode, Optional`1<CppSuppressUnityBuild> cppSuppressUnityBuild, Optional`1<CppUseCompilationCache> cppUseCompilationCache, TargetEnvironmentArtifact targetEnvironmentArtifact, CompileTargetArtifact compileTargetArtifact, NativeSolutionArtifact[] solutionArtifacts, IInvokeMsbuild invokeMsbuild, IJetNugetPackageManager nugetter, ITaskHost tasker, SetupProductRoot prodroot, NugetConfigFile nugetConfigFile);
    [ExtensionAttribute]
private static void Validate(IEnumerable`1<NativeSolutionArtifact> solutionArtifacts, ProductHomeDirArtifact productHomeDirArtifact);
    [NotNullAttribute]
private static RelativePath GetCacheId(Task`1<string> solutionNameTask, JetRuntimeId runtimeId, CMakeConfiguration configuration);
    [ExtensionAttribute]
private static string GetFolderName(JetRuntimeId runtimeId, CMakeConfiguration configuration);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileNativeSolutions/<CalculateHashAsync>d__6")]
[ExtensionAttribute]
private static Task CalculateHashAsync(IHasher hasher, Lifetime lifetime, ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, BuildChainFlavor buildChainFlavor, ICMakeTarget target, IEnumerable`1<Subplatform> subplatformReferences, SynchronizedList`1<CompiledSubplatformFile> alreadyCompiledFiles, IReadOnlyCollection`1<InputPackage> inputPackages, ITaskHost tasker);
    [NotNullAttribute]
private static ICompilerEnvironmentInitializer CreateCompilerEnvironment(ILogger logger, IInvokeMsbuild invokeMsbuild, ExternalBuildTools externalBuildTools);
    [NotNullAttribute]
private static IReadOnlyCollection`1<SolutionItem> GetUnorderedSolutions(ILogger logger, ExternalBuildTools externalBuildTools, ICompilerEnvironmentProvider compilerEnvironmentProvider, TargetEnvironmentArtifact targetEnvironmentArtifact, IEnumerable`1<NativeSolutionArtifact> solutionArtifacts);
    [NotNullAttribute]
private static IReadOnlyCollection`1<SolutionItemWithSubplatforms> GetOrderedSolutions(ILogger logger, AllAssembliesOnEverything allass, ExternalBuildTools externalBuildTools, ICompilerEnvironmentProvider compilerEnvironmentProvider, TargetEnvironmentArtifact targetEnvironmentArtifact, IReadOnlyCollection`1<NativeSolutionArtifact> solutionArtifacts);
    private static void RunCMake(ILogger logger, FileSystemPath objDir, FileSystemPath solutionDir, FileSystemPath cmakeExe, IEnumerable`1<string> options, IEnumerable`1<KeyValuePair`2<string, EnvironmentValue>> additionalEnvironmentVariables);
    [ItemNotNullAttribute]
private static Task`1<PwcSolutionResult> PwcSolutionNonIncremental(PwcParam param, IAuthenticodeSigningService signingService, FileSystemPath binDir, FileSystemPath libDir);
    [ItemNotNullAttribute]
private static Task`1<PwcSolutionResult> PwcSolutionIncremental(Task`1<string> solutionNameTask, PwcParam param, Optional`1<CppEnableDeveloperMode> cppEnableDeveloperMode);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileNativeSolutions/<PwcTargetNonIncremental>d__13")]
[ItemNotNullAttribute]
private static Task`1<PwcTargetResult> PwcTargetNonIncremental(Lifetime lifetime, ILogger logger, Task`1<string> solutionNameTask, PwcParam pwcParam, Task`1<PwcSolutionResult> pwcSolutionTask, ICMakeTarget target);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileNativeSolutions/<PwcTargetIncremental>d__14")]
[ItemNotNullAttribute]
private static Task`1<PwcTargetResult> PwcTargetIncremental(Lifetime lifetime, ILogger logger, Optional`1<CppEnableDeveloperMode> cppEnableDeveloperMode, Task`1<string> solutionNameTask, PwcParam pwcParam, Task`1<PwcSolutionResult> pwcSolutionTask, ICMakeTarget target);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileTargetArtifact/CompileTargetArtifactSerializer")]
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.CompileTargetArtifact : object {
    public CMakeCompiler Compiler;
    public CMakeGenerator Generator;
    public CompileTargetArtifact(CMakeGenerator generator, CMakeCompiler compiler);
    public virtual string ToString();
    [NotNullAttribute]
private static CompileTargetArtifact FromString(string str);
}
internal abstract class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.BaseFileGenerator : object {
    protected static string Beget;
    protected static string Compile;
    protected ILogger Logger;
    protected ExternalBuildTools ExternalBuildTools;
    protected RelativePath RelativeObjBaseDir;
    protected SolutionItem Solution;
    protected ProductBinariesDirArtifact ProductBinariesDirArtifact;
    protected ProductHomeDirArtifact ProductHomeDirArtifact;
    protected CompileTargetArtifact CompileTargetArtifact;
    protected BaseFileGenerator(ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, CompileTargetArtifact compileTargetArtifact, ExternalBuildTools externalBuildTools, RelativePath relativeObjBaseDir, SolutionItem solution);
    public sealed virtual Task`1<RelativePath> WriteCMakeConfigurationAsync();
    [NotNullAttribute]
protected RelativePath WriteScript(string solutionName, string suffix, string text);
    [NotNullAttribute]
protected RelativePath WriteText(string filename, string text);
    [NotNullAttribute]
private string GenerateCMakeScriptText();
    [NotNullAttribute]
protected List`1<RelativePath> GetOldFiles(FileSystemPath scanDir);
    protected void DeleteFiles(IReadOnlyCollection`1<RelativePath> files);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CacheUtil : object {
    private static Regex ourCacheEntry;
    private static Regex ourCacheEntryQuoted;
    private static Regex ourCompiler;
    private static CacheUtil();
    [CanBeNullAttribute]
private static IReadOnlyCollection`1<Tuple`3<string, string, string>> ReadCMakeCache(FileSystemPath cmakeCache, Func`2<string, bool> filter);
    public static void CleanUpObjDirIfNeed(ILogger logger, ICMakeTarget target, FileSystemPath objDir);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeCommonConfig : object {
    [NotNullAttribute]
public ExternalBuildTools ExternalBuildTools;
    public FileSystemPath BinDir;
    public String[] Definitions;
    public FileSystemPath LibDir;
    public bool SuppressUnityBuild;
    public CMakeCommonConfig(ExternalBuildTools externalBuildTools);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeTarget : object {
    private static string WindowsCMakeVisualStudioGenerator;
    private static string WindowsPlatformToolsetClangCl;
    private static string WindowsPlatformToolsetMsvc;
    private static string ourWindowsVcInstallDirVar;
    private static Version ourWindowsTargetPlatformVersion;
    private static MsbuildToolsetPackageIdentity ourWindowsToolsetPackage;
    [NotNullAttribute]
private ExternalBuildTools myExternalBuildTools;
    private ICompilerEnvironmentProvider myCompilerEnvironmentProvider;
    [CompilerGeneratedAttribute]
private CMakeUnit <Unit>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> <GetSourcePaths>k__BackingField;
    public CMakeUnit Unit { get; }
    public Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> GetSourcePaths { get; }
    public MsbuildToolsetPackageIdentity WindowsToolsetPackage { get; }
    public Version WindowsTargetPlatformVersion { get; }
    public string WindowsPlatformToolset { get; }
    public string ToolsetId { get; }
    public string WindowsVcInstallDirVar { get; }
    public string VariableName { get; }
    public string ShortDirectoryName { get; }
    public string DirectoryName { get; }
    private CMakeTarget(CMakeUnit unit, ExternalBuildTools externalBuildTools, ICompilerEnvironmentProvider compilerEnvironmentProvider, Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> getSourcePaths);
    private static CMakeTarget();
    [CompilerGeneratedAttribute]
public sealed virtual CMakeUnit get_Unit();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> get_GetSourcePaths();
    public sealed virtual MsbuildToolsetPackageIdentity get_WindowsToolsetPackage();
    public sealed virtual Version get_WindowsTargetPlatformVersion();
    public sealed virtual string get_WindowsPlatformToolset();
    public sealed virtual string get_ToolsetId();
    public sealed virtual string get_WindowsVcInstallDirVar();
    public sealed virtual string get_VariableName();
    public sealed virtual string get_ShortDirectoryName();
    public sealed virtual string get_DirectoryName();
    public sealed virtual FileSystemPath GetNMakeExe();
    public sealed virtual IReadOnlyCollection`1<KeyValuePair`2<string, FileSystemPath>> GetCompilers();
    public sealed virtual IReadOnlyCollection`1<string> GetOptions();
    public sealed virtual Task`1<IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> GetBuildEnvironmentVariables();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeTarget/<GetCMakeEnvironmentVariables>d__34")]
public sealed virtual Task`1<IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> GetCMakeEnvironmentVariables();
    public virtual string ToString();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeTarget/<GetTargets>d__36")]
private static IEnumerable`1<ValueTuple`2<CMakeGenerator, CMakeCompiler>> GetTargets(JetRuntimeId runtimeId);
    [NotNullAttribute]
public static IReadOnlyCollection`1<ICMakeTarget> Create(IReadOnlyCollection`1<JetRuntimeId> rids, Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> getSourcePaths, IReadOnlyCollection`1<CMakeConfiguration> configurations, ExternalBuildTools externalBuildTools, ICompilerEnvironmentProvider locateBuildTools);
    [CanBeNullAttribute]
private FileSystemPath GetMakeProgram();
    [NotNullAttribute]
private string GetMlNameVc();
    [NotNullAttribute]
private string GetArmasmNameVc();
    [CompilerGeneratedAttribute]
[NotNullAttribute]
private string <GetOptions>g__GetWindowsCMakeArchitecture|32_0();
    [CompilerGeneratedAttribute]
internal static void <GetBuildEnvironmentVariables>g__AddPathToFile|33_0(RelativePath x, <>c__DisplayClass33_0& , <>c__DisplayClass33_1& );
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeUnit : object {
    public CMakeCompiler Compiler;
    [NotNullAttribute]
public CMakeConfiguration[] Configurations;
    public CMakeGenerator Generator;
    public bool NeedBuildType;
    [NotNullAttribute]
public JetRuntimeId RuntimeId;
    public CMakeUnit(JetRuntimeId runtimeId, CMakeGenerator generator, CMakeCompiler compiler, bool needBuildType, IEnumerable`1<CMakeConfiguration> configurations);
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CollectUtil : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CollectUtil/<CollectFromDisk>d__0")]
[ExtensionAttribute]
public static Task`1<ImmutableArray`1<CompiledSubplatformFile>> CollectFromDisk(IEnumerable`1<NativeFile> files, Lifetime lifetime, SubplatformName subplatformName, FileSystemPath binDir, Calculated skipcompile, ITaskHost tasker, ILogger logger);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static SubplatformComponentForPackaging CreateSubplatformComponent(IEnumerable`1<NativeFile> files, NativeSubplatformType subplatformType, SubplatformName subplatformName, CMakeConfiguration configuration);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CollectUtil/<SignOnDisk>d__2")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<IReadOnlyCollection`1<RelativePath>> SignOnDisk(IReadOnlyCollection`1<NativeFile> files, ILogger logger, NativeSubplatformType subplatformType, JetRuntimeId runtimeId, FileSystemPath binDir, BuildChainFlavor buildChainFlavor, IAuthenticodeSigningService signingService, ProductHomeDirArtifact productHomeDirArtifact);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CollectUtil/<CreateSymbolReferenceFileFromDisk>d__3")]
[ExtensionAttribute]
[ItemCanBeNullAttribute]
public static Task`1<CompiledSubplatformFile> CreateSymbolReferenceFileFromDisk(IReadOnlyCollection`1<NativeFile> files, OuterLifetime lifetime, ILogger logger, BuildChainFlavor buildChainFlavor, ExternalBuildTools externalBuildTools, SubplatformName subplatformName, FileSystemPath binDir, RelativePath relativeSymbolReferenceFile, Calculated cppSkipCompiling);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CollectUtil/<ExtractInputLibrariesToMemoryAsync>d__4")]
[NotNullAttribute]
public static Task`1<ImmutableArray`1<ImmutableFileItem>> ExtractInputLibrariesToMemoryAsync(Lifetime lifetime, IEnumerable`1<InputPackage> inputPackages, ILogger logger, ITaskHost tasker);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CollectUtil/<ExtractInputLibrariesAsync>d__5")]
[NotNullAttribute]
public static Task ExtractInputLibrariesAsync(Lifetime lifetime, InputPackage[] inputPackages, ILogger logger, FileSystemPath libDir, ITaskHost tasker);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ExtractLibrariesAsync(IReadOnlyCollection`1<CompiledSubplatformFile> compiledFiles, ILogger logger, FileSystemPath libDir);
    public static void WalkSortedSourcePaths(FileSystemPath rootDir, IEnumerable`1<RelativePath> paths, Action`1<FileSystemPath> action);
    [CompilerGeneratedAttribute]
internal static bool <WalkSortedSourcePaths>g__FilterFiles|7_0(FileSystemPath file);
    [CompilerGeneratedAttribute]
internal static bool <WalkSortedSourcePaths>g__FilterDirectories|7_1(FileSystemPath dir);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CommandLineOptions : object {
    public static JetArchitecture WindowsPreferredToolArchitecture { get; }
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CommandLineOptions/<GetCMakeCommonOptions>d__0")]
[NotNullAttribute]
public static IEnumerable`1<string> GetCMakeCommonOptions(CMakeCommonConfig config, bool noOmission);
    public static JetArchitecture get_WindowsPreferredToolArchitecture();
    [NotNullAttribute]
public static string MakeMsBuildProperty(string key, string value);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CommandLineOptions/<GetMsBuildScriptOptions>d__4")]
[NotNullAttribute]
public static IEnumerable`1<string> GetMsBuildScriptOptions();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CommandLineOptions/<GetNMakeScriptOptions>d__5")]
[NotNullAttribute]
public static IEnumerable`1<string> GetNMakeScriptOptions();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CommandLineOptions/<GetUnixMakeScriptOptions>d__6")]
[NotNullAttribute]
public static IEnumerable`1<string> GetUnixMakeScriptOptions();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CommandLineOptions/<GetNinjaScriptOptions>d__7")]
[NotNullAttribute]
public static IEnumerable`1<string> GetNinjaScriptOptions();
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerDirs : object {
    public static CompilerDirs Empty;
    [NotNullAttribute]
public IReadOnlyCollection`1<FileSystemPath> IncludeDirs;
    [NotNullAttribute]
public IReadOnlyCollection`1<FileSystemPath> LibraryDirs;
    [CanBeNullAttribute]
public FileSystemPath LlvmInstallDir;
    [CanBeNullAttribute]
public FileSystemPath VsInstallDir;
    [NotNullAttribute]
public FileSystemPath WindowsSdkDir;
    public CompilerDirs(IReadOnlyCollection`1<FileSystemPath> includeDirs, IReadOnlyCollection`1<FileSystemPath> libraryDirs, FileSystemPath windowsSdkDir, FileSystemPath vsInstallDir, FileSystemPath llvmInstallDir);
    private static CompilerDirs();
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironment : object {
    [NotNullAttribute]
public CompilerDirs CompilerDirs;
    private Func`2<RelativePath, FileSystemPath> mySearchInPath;
    public CompilerEnvironment(Func`2<RelativePath, FileSystemPath> searchInPath, CompilerDirs compilerDirs);
    [NotNullAttribute]
public FileSystemPath SearchInPath(RelativePath relativeFile);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironmentClang : object {
    private ILogger myLogger;
    private ExternalBuildTools myExternalBuildTools;
    public ICompilerEnvironmentProvider Provider { get; }
    public CompilerEnvironmentClang(ILogger logger, ExternalBuildTools externalBuildTools);
    public sealed virtual ICompilerEnvironmentProvider get_Provider();
    public sealed virtual void Initialize(IReadOnlyCollection`1<SolutionItem> solutions);
    public sealed virtual CompilerEnvironment Get(ICMakeTarget target);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironmentEmpty : object {
    public ICompilerEnvironmentProvider Provider { get; }
    public sealed virtual ICompilerEnvironmentProvider get_Provider();
    public sealed virtual void Initialize(IReadOnlyCollection`1<SolutionItem> solutions);
    public sealed virtual CompilerEnvironment Get(ICMakeTarget target);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironmentMsBuild : object {
    private IInvokeMsbuild myInvokeMsbuild;
    private ILogger myLogger;
    private Dictionary`2<Tuple`3<JetRuntimeId, CMakeGenerator, CMakeCompiler>, CompilerEnvironment> myStorage;
    public ICompilerEnvironmentProvider Provider { get; }
    public CompilerEnvironmentMsBuild(ILogger logger, IInvokeMsbuild invokeMsbuild);
    public sealed virtual ICompilerEnvironmentProvider get_Provider();
    public sealed virtual void Initialize(IReadOnlyCollection`1<SolutionItem> solutions);
    public sealed virtual CompilerEnvironment Get(ICMakeTarget target);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CompilerEnvironmentMsBuild/<LocateBuildToolsAsync>d__8")]
[ItemNotNullAttribute]
private Task`1<CompilerEnvironment> LocateBuildToolsAsync(ICMakeTarget target);
    [NotNullAttribute]
private Task`1<FullCompilerDirs> RunProbingLocateBuildAsync(ICMakeTarget target);
    [NotNullAttribute]
private static Tuple`3<JetRuntimeId, CMakeGenerator, CMakeCompiler> MakeKey(CMakeUnit unit);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.Constants : object {
    private static string GeneratedSuffix;
    public static string CMakeSourceFilesPrefix;
    public static string NativeSolutionPrefix;
    public static string GeneratedSuffixCMake;
    public static string GeneratedSuffixCMakeLock;
    public static string GeneratedSuffixCmd;
    public static string GeneratedSuffixSh;
    public static string GeneratedSuffixSln;
    public static string CMakeLists;
    public static string JbProductDir;
    public static string JbGenDefinitions;
    public static string JbGenOutputDir;
    public static string JbGenLibraryDir;
    public static string CCompiler;
    public static string CxxCompiler;
    public static string AsmMasmCompiler;
    public static string AsmMarmasmCompiler;
    public static string RcCompiler;
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ConventionsUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string Format(CMakeUnit unit, char delimiter, FormatMode mode);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetFolderName(CMakeGenerator generator);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetFolderName(CMakeCompiler compiler);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetFolderName(CMakeConfiguration configuration);
    [ExtensionAttribute]
public static WellKnownConfiguration GetMsBuildConfiguration(CMakeConfiguration configuration);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetOsXArchitectureName(JetArchitecture architecture);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.EnvironmentValue : object {
    [CanBeNullAttribute]
public IReadOnlyCollection`1<FileSystemPath> Paths;
    [CanBeNullAttribute]
public string Str;
    public EnvironmentValue(IReadOnlyCollection`1<FileSystemPath> paths);
    public EnvironmentValue(FileSystemPath path);
    public EnvironmentValue(string str);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ExternalBuildTools : object {
    private static string ourPackageIdCMakeWindows;
    private static string PackageIdNinjaWindows;
    private static string PackageIdClangMacOsArm64;
    private static string PackageIdClangMacOsX64;
    private static string PackageIdCMakeOsX;
    private IInvokeMsbuild myInvokeMsbuild;
    private Lazy`1<FileSystemPath> myCMakeExeLazy;
    private Lazy`1<ImmutableDictionary`2<JetRuntimeId, Lazy`1<FileSystemPath>>> myClangExeMapLazy;
    private Lazy`1<FileSystemPath> myUnixMakeExeLazy;
    private Lazy`1<FileSystemPath> myNinjaExeLazy;
    private Lazy`1<Task`1<FileSystemPath>> mySymbolStorageUploaderExe;
    public ExternalBuildTools(Lifetime lifetime, ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, LocalRestoredPackageReferenceArtifact[] restoredPackages, IInvokeMsbuild invokeMsbuild, IJetNugetPackageManager nugetter, ITaskHost tasker);
    private static ExternalBuildTools();
    [NotNullAttribute]
private static FileSystemPath GetCMakeExecutable(ProductHomeDirArtifact productHomeDir, LocalRestoredPackageReferenceArtifact[] restoredPackages);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ExternalBuildTools/<GetMsBuildExecutable>d__13")]
[NotNullAttribute]
private static Task`1<FileSystemPath> GetMsBuildExecutable(IInvokeMsbuild invokeMsbuild, MsbuildToolsetPackageIdentity toolset);
    [NotNullAttribute]
private static FileSystemPath GetClangExecutable(ProductHomeDirArtifact productHomeDir, LocalRestoredPackageReferenceArtifact[] restoredPackages, JetRuntimeId runtimeId);
    [NotNullAttribute]
private static FileSystemPath GetUnixMakeExecutable();
    [NotNullAttribute]
private static FileSystemPath GetNinjaExecutable(ProductHomeDirArtifact productHomeDir, LocalRestoredPackageReferenceArtifact[] restoredPackages);
    public Task`1<FileSystemPath> GetMsBuildExe(MsbuildToolsetPackageIdentity x);
    public FileSystemPath GetCMakeExe();
    public FileSystemPath GetClangExe(JetRuntimeId runtimeId);
    public FileSystemPath GetUnixMakeExe();
    public FileSystemPath GetNinjaExe();
    public Task`1<FileSystemPath> GetSymbolStorageUploaderExe();
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd : BaseFileGenerator {
    private static string GenRebuild;
    private static string GenArch;
    private static string GenConfig;
    private static Regex ourSolutionRegex;
    public FileGeneratorCmd(ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, CompileTargetArtifact compileTargetArtifact, ExternalBuildTools externalBuildTools, RelativePath relativeObjBaseDir, SolutionItem solution);
    private static FileGeneratorCmd();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<WriteBegetScriptAsync>d__5")]
public sealed virtual Task`1<RelativePath> WriteBegetScriptAsync(Task`1<string> solutionNameTask, IEnumerable`1<string> commonConfig);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<WriteCompileScriptAsync>d__6")]
public sealed virtual Task`1<RelativePath> WriteCompileScriptAsync(Task`1<string> solutionNameTask);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<WritePatchedSolutionAsync>d__7")]
public sealed virtual Task`1<RelativePath> WritePatchedSolutionAsync(Task`1<string> solutionNameTask, ICMakeTarget target);
    public sealed virtual Task DeleteOldFilesAsync();
    [NotNullAttribute]
private static string MakeMultiline(char separator, IEnumerable`1<string> arguments);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<UnderEnvironment>d__10")]
private static Task UnderEnvironment(StringBuilder builder, Func`2<ICMakeTarget, Task`1<IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>>> getEnvironmentVariables, Func`3<Func`2<ICMakeTarget, Task>, Action, Task> action);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<GenerateBegetScriptText>d__11")]
private Task`1<string> GenerateBegetScriptText(string solutionName, IEnumerable`1<string> commonConfig);
    private static string GetFolderName(Tuple`2<CMakeGenerator, CMakeCompiler> tuple);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<GenerateCompileScriptText>d__13")]
private Task`1<string> GenerateCompileScriptText(string solutionName);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<WriteCompileScriptNMake>d__14")]
private Task WriteCompileScriptNMake(string solutionName, ICMakeTarget[] filteredTargets, StringBuilder builder, Func`2<ICMakeTarget, Task> writeEnvironment, Action cleanEnvironment);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<WriteCompileScriptVisualStudio>d__15")]
private Task WriteCompileScriptVisualStudio(string solutionName, IReadOnlyCollection`1<ICMakeTarget> filteredTargets, StringBuilder builder, Func`2<ICMakeTarget, Task> writeEnvironment, Action cleanEnvironment);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<WriteCompileScriptNinja>d__16")]
private Task WriteCompileScriptNinja(string solutionName, ICMakeTarget[] filteredTargets, StringBuilder builder, Func`2<ICMakeTarget, Task> writeEnvironment, Action cleanEnvironment);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorCmd/<UnderCondition>d__17")]
private static Task UnderCondition(StringBuilder builder, string name, JetArchitecture architecture, CMakeConfiguration configuration, Func`1<Task> action);
    [CompilerGeneratedAttribute]
private void <DeleteOldFilesAsync>b__8_0();
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh : BaseFileGenerator {
    private static string GenRebuild;
    private static string GenArch;
    private static string GenConfig;
    public FileGeneratorSh(ILogger logger, ProductHomeDirArtifact productHomeDirArtifact, ProductBinariesDirArtifact productBinariesDirArtifact, CompileTargetArtifact compileTargetArtifact, ExternalBuildTools externalBuildTools, RelativePath relativeObjBaseDir, SolutionItem solution);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh/<WriteBegetScriptAsync>d__4")]
public sealed virtual Task`1<RelativePath> WriteBegetScriptAsync(Task`1<string> solutionNameTask, IEnumerable`1<string> commonConfig);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh/<WriteCompileScriptAsync>d__5")]
public sealed virtual Task`1<RelativePath> WriteCompileScriptAsync(Task`1<string> solutionNameTask);
    public sealed virtual Task`1<RelativePath> WritePatchedSolutionAsync(Task`1<string> solutionNameTask, ICMakeTarget target);
    public sealed virtual Task DeleteOldFilesAsync();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh/<GenerateBegetScriptText>d__8")]
[NotNullAttribute]
private Task`1<string> GenerateBegetScriptText(string solutionName, IEnumerable`1<string> commonConfig);
    private static string GetFolderName(Tuple`2<CMakeGenerator, CMakeCompiler> tuple);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh/<GenerateCompileScriptText>d__10")]
[NotNullAttribute]
private Task`1<string> GenerateCompileScriptText(string solutionName);
    [NotNullAttribute]
private static string MultilineEscaping(string s);
    [NotNullAttribute]
private static string MakeMultiline(char separator, IEnumerable`1<string> arguments);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh/<UnderEnvironment>d__13")]
private static Task UnderEnvironment(StringBuilder builder, Func`2<ICMakeTarget, Task`1<IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>>> getEnvironmentVariables, Func`3<Func`2<ICMakeTarget, Task>, Action, Task> action);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh/<WriteCompileScriptMake>d__14")]
private Task WriteCompileScriptMake(string solutionName, IReadOnlyCollection`1<ICMakeTarget> filteredTargets, StringBuilder builder, Func`2<ICMakeTarget, Task> writeEnvironment, Action cleanEnvironment);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.FileGeneratorSh/<UnderCondition>d__15")]
private static Task UnderCondition(StringBuilder builder, string name, JetArchitecture architecture, CMakeConfiguration configuration, Func`1<Task> action);
    [CompilerGeneratedAttribute]
private void <DeleteOldFilesAsync>b__7_0();
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.IBaseFileGenerator {
    [NotNullAttribute]
public abstract virtual Task`1<RelativePath> WriteCMakeConfigurationAsync();
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICMakeTarget {
    [NotNullAttribute]
public string ToolsetId { get; }
    [NotNullAttribute]
public CMakeUnit Unit { get; }
    [NotNullAttribute]
public Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> GetSourcePaths { get; }
    [NotNullAttribute]
public string VariableName { get; }
    [NotNullAttribute]
public string ShortDirectoryName { get; }
    [NotNullAttribute]
public string DirectoryName { get; }
    [NotNullAttribute]
public MsbuildToolsetPackageIdentity WindowsToolsetPackage { get; }
    [CanBeNullAttribute]
public Version WindowsTargetPlatformVersion { get; }
    public string WindowsPlatformToolset { get; }
    [NotNullAttribute]
public string WindowsVcInstallDirVar { get; }
    public abstract virtual string get_ToolsetId();
    public abstract virtual CMakeUnit get_Unit();
    public abstract virtual Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> get_GetSourcePaths();
    public abstract virtual string get_VariableName();
    public abstract virtual string get_ShortDirectoryName();
    public abstract virtual string get_DirectoryName();
    public abstract virtual MsbuildToolsetPackageIdentity get_WindowsToolsetPackage();
    public abstract virtual Version get_WindowsTargetPlatformVersion();
    public abstract virtual string get_WindowsPlatformToolset();
    public abstract virtual string get_WindowsVcInstallDirVar();
    [NotNullAttribute]
public abstract virtual FileSystemPath GetNMakeExe();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<KeyValuePair`2<string, FileSystemPath>> GetCompilers();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<string> GetOptions();
    [NotNullAttribute]
public abstract virtual Task`1<IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> GetBuildEnvironmentVariables();
    [NotNullAttribute]
public abstract virtual Task`1<IReadOnlyCollection`1<KeyValuePair`2<string, EnvironmentValue>>> GetCMakeEnvironmentVariables();
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICompilerEnvironmentInitializer {
    [NotNullAttribute]
public ICompilerEnvironmentProvider Provider { get; }
    public abstract virtual ICompilerEnvironmentProvider get_Provider();
    public abstract virtual void Initialize(IReadOnlyCollection`1<SolutionItem> solutions);
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICompilerEnvironmentProvider {
    [NotNullAttribute]
public abstract virtual CompilerEnvironment Get(ICMakeTarget target);
}
internal interface JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.IFileGenerator {
    [NotNullAttribute]
public abstract virtual Task`1<RelativePath> WriteBegetScriptAsync(Task`1<string> solutionNameTask, IEnumerable`1<string> commonConfig);
    [NotNullAttribute]
public abstract virtual Task`1<RelativePath> WriteCompileScriptAsync(Task`1<string> solutionNameTask);
    [NotNullAttribute]
public abstract virtual Task`1<RelativePath> WritePatchedSolutionAsync(Task`1<string> solutionNameTask, ICMakeTarget target);
    [NotNullAttribute]
public abstract virtual Task DeleteOldFilesAsync();
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.NativeMsbuildProperties : object {
    public static string BinDir;
    public static string LibDir;
    public static string ObjDir;
    public static string NativePreprocessorDefinitions;
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.NativePreprocessorDefinitions : object {
    private static DateTime ourBaseDateTime;
    public static String[] DefaultDefinitions;
    private static NativePreprocessorDefinitions();
    private static void CreateDateTimeVersion(ILogger logger, Version2 majorminor, Version& version, DateTime& dateTime);
    [NotNullAttribute]
private static String[] MakeDefinitions(bool isSigned, DateTime time, Version version);
    [ExtensionAttribute]
[NotNullAttribute]
public static String[] GenerateDefinitions(Version2 majorminor, ILogger logger, IAuthenticodeSigningService signingService);
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.NativeSolutionsUtil : object {
    public static string EnvironmentVariable_Path;
    public static string EnvironmentVariable_Include;
    public static string EnvironmentVariable_Lib;
    public static char PathDelimitterChar;
    public static string PathDelimitterStr;
    private static NativeSolutionsUtil();
    [ExtensionAttribute]
[NotNullAttribute]
private static IEnumerable`1<TValue> SelectPathList(string path, Func`2<FileSystemPath, TValue> converter);
    [NotNullAttribute]
public static FileSystemPath SearchInPathDirs(RelativePath executable);
    [NotNullAttribute]
public static IReadOnlyCollection`1<FileSystemPath> GetIsolatedPathDirs_Windows();
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetFullObjDir(ProductHomeDirArtifact productHomeDir, RelativePath relativeObjBaseDir, string solutionName, ICMakeTarget target);
    [NotNullAttribute]
public static string GetPrefixName(string solutionName);
    [NotNullAttribute]
public static string GetUserVisualStudioSolutionName(string solutionName, ICMakeTarget target);
    [NotNullAttribute]
public static FileSystemPath GetUserVisualStudioSolutionFile(ProductHomeDirArtifact productHomeDir, RelativePath solutionDir, string solutionName, ICMakeTarget target);
    [NotNullAttribute]
public static FileSystemPath GetDefaultVisualStudioSolutionFile(FileSystemPath objDir, string solutionName);
    [ExtensionAttribute]
[NotNullAttribute]
public static FileSystemPath GetFileFormDevelopmentRestoredPackages(LocalRestoredPackageReferenceArtifact[] restoredPackages, ProductHomeDirArtifact productHomeDir, string packageId, RelativePath relativeFile);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.SolutionItem : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<string> Projects;
    [NotNullAttribute]
public NativeSolutionArtifact SolutionArtifact;
    [NotNullAttribute]
public IReadOnlyCollection`1<ICMakeTarget> Targets;
    public SolutionItem(NativeSolutionArtifact solutionArtifact, IReadOnlyCollection`1<string> projects, IReadOnlyCollection`1<ICMakeTarget> targets);
}
internal class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.SolutionItemWithSubplatforms : SolutionItem {
    [NotNullAttribute]
public ImmutableDictionary`2<ValueTuple`2<JetRuntimeId, CMakeConfiguration>, JetHashSet`1<Subplatform>> SubplatformReferences;
    [NotNullAttribute]
public JetHashSet`1<Subplatform> SubplatformRoots;
    public SolutionItemWithSubplatforms(NativeSolutionArtifact solutionArtifact, IReadOnlyCollection`1<string> projects, IReadOnlyCollection`1<ICMakeTarget> targets, JetHashSet`1<Subplatform> subplatformRoots, ImmutableDictionary`2<ValueTuple`2<JetRuntimeId, CMakeConfiguration>, JetHashSet`1<Subplatform>> subplatformReferences);
}
internal static class JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.SolutionUtil : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.SolutionUtil/<RunCompileWithCache>d__0")]
public static Task RunCompileWithCache(Lifetime lifetime, ILogger logger, FileSystemPath binDir, bool useCache, Calculated cppSkipCompiling, NugetConfigFile nugetConfigFile, RelativePath cacheId, ITaskHost tasker, Func`2<IHasher, Task> calculateHashAsync, Func`1<Task> compilator, Func`1<Task`1<IReadOnlyCollection`1<ImmutableFileItem>>> collectorWithSideEffects);
    [NotNullAttribute]
public static Task`1<string> GetSolutionNameAsync(ProductHomeDirArtifact productHomeDir, RelativePath solutionDir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.SolutionUtil/<Compile>d__2")]
public static Task Compile(ILogger logger, IInvokeMsbuild invokeMsbuild, ExternalBuildTools externalBuildTools, Optional`1<CompileNativeDegreeOfParallelismArtifact> degreeOfParallelism, RelativePath solutionDir, IEnumerable`1<string> projects, ICMakeTarget target, CMakeConfiguration configuration, Task`1<FileSystemPath> objDirTask, Task`1<FileSystemPath> solutionFileTask, bool rebuild);
    public static void ApplyEnvironment(IDictionary`2<string, string> environmentVariables, IEnumerable`1<KeyValuePair`2<string, EnvironmentValue>> additionalEnvironmentVariables);
    private static int CalculateDegreeOfParallelism(Optional`1<CompileNativeDegreeOfParallelismArtifact> degreeOfParallelism);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeDefaultHelper : object {
    [ExtensionAttribute]
[PublicAPIAttribute]
public static bool ToDebugFlag(CMakeConfiguration configuration);
    [ExtensionAttribute]
[ItemNotNullAttribute]
[PublicAPIAttribute]
public static NativeSolutionArtifact[] GetSolution(IEnumerable`1<BaseNativeSubplatformArtifact> subplatformArtifacts, RelativePath subplatformPrefix, RelativePath solutionDir, AllAssembliesOnEverything allass, Func`2<BaseNativeSubplatformArtifact, IEnumerable`1<NativeFile>> getFiles, Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> getSourcePaths, PostfixMode mode);
    [ExtensionAttribute]
[NotNullAttribute]
private static RelativePath GetPostfix(BaseNativeSubplatformArtifact nativeSubplatformArtifact, PostfixMode mode);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeDefaultHelper/<GetAssociatedSymbols>d__4")]
[ExtensionAttribute]
[ItemNotNullAttribute]
private static IEnumerable`1<NativeFile> GetAssociatedSymbols(IEnumerable`1<NativeFile> files, JetPlatform platform);
}
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeFile : object {
    public bool AlwaysSignOnWindowsBuildAgents;
    public CMakeConfiguration Configuration;
    [CanBeNullAttribute]
public RelativePath MacOsEntitlementsFile;
    [NotNullAttribute]
public RelativePath Path;
    [NotNullAttribute]
public string Project;
    public PackageFileRole Role;
    [CanBeNullAttribute]
public Tuple`2<string, NativeTestsType> Test;
    private NativeFile(CMakeConfiguration configuration, string project, RelativePath path);
    public NativeFile(CMakeConfiguration configuration, string project, RelativePath path, PackageFileRole role, bool alwaysSignOnWindowsBuildAgents, RelativePath macOsEntitlementsFile);
    public NativeFile(JetRuntimeId runtimeId, CMakeConfiguration configuration, string project, RelativePath path, NativeTestsType testType, RelativePath macOsEntitlementsFile);
}
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeLibrariesMarkerArtifact : object {
    public NativeLibrariesMarkerArtifact(IStructuredStorage storage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeLicenseProvider : object {
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeLicenseProvider/<GetLicenses>d__0")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformThirdPartyLicenseInfo> GetLicenses();
}
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativePackage : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<NativeFile> Files;
    [NotNullAttribute]
public JetRuntimeId RuntimeId;
    [NotNullAttribute]
public Subplatform Subplatform;
    public NativeSubplatformType SubplatformType;
    public NativePackage(NativeSubplatformType subplatformType, JetRuntimeId runtimeId, Subplatform subplatform, IReadOnlyCollection`1<NativeFile> files);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeSolutionArtifact : object {
    [NotNullAttribute]
public Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> GetSourcePaths;
    [NotNullAttribute]
public IReadOnlyCollection`1<NativePackage> Packages;
    [NotNullAttribute]
public RelativePath SolutionDir;
    public NativeSolutionArtifact(RelativePath solutionDir, IReadOnlyCollection`1<NativePackage> packages, Func`2<JetRuntimeId, IEnumerable`1<RelativePath>> getSourcePaths);
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeSubplatformType : Enum {
    public int value__;
    public static NativeSubplatformType Core;
    public static NativeSubplatformType Libraries;
    public static NativeSubplatformType Tests;
}
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeTest : object {
    public CMakeConfiguration Configuration;
    [NotNullAttribute]
public RelativePath Executable;
    [NotNullAttribute]
public string Name;
    public NativeTestsType Type;
    public NativeTest(NativeTestsType type, RelativePath executable, CMakeConfiguration configuration, string name);
}
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeTestsMarkerArtifact : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<NativeTestsMarkerItemArtifact> TestSuites;
    public NativeTestsMarkerArtifact(IStructuredStorage storage);
    public NativeTestsMarkerArtifact(IReadOnlyCollection`1<NativeTestsMarkerItemArtifact> testSuites);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    public virtual string ToString();
}
public class JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeTestsMarkerItemArtifact : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public RelativePath RelativePath;
    public NativeTestsType Type;
    public NativeTestsMarkerItemArtifact(string name, NativeTestsType type, RelativePath relativePath);
    public NativeTestsMarkerItemArtifact(IStructuredStorage storage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeTestsType : Enum {
    public int value__;
    public static NativeTestsType Boost;
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.NestedBuildRunnerOnSources : object {
    private AllAssembliesOnSources myAllassSrc;
    private AllAssembliesFilterByProfile myPrfilter;
    private INestedBuildRunner myRunner;
    public NestedBuildRunnerOnSources(INestedBuildRunner runner, AllAssembliesOnSources allassSrc, Optional`1<AllAssembliesFilterByProfile> maybePrfilter);
    private Task`1<TResolve> RunNestedBuildOnSourcesCore(OuterLifetime lifeCall, AssemblyQualifiedTypeName objective, Action`1<IBuildRunnerRequest> FAdjustRequest, Func`2<BuildRunnerResult, TResolve> FResolve, AllAssembliesFilter aafilter);
    private sealed virtual override Task`1<TArtifact> JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources.RunNestedBuildOnSourcesForArtifactAsync(OuterLifetime lifetime, Action`1<IBuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
    private sealed virtual override Task`1<TArtifact[]> JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources.RunNestedBuildOnSourcesForArtifactsAsync(OuterLifetime lifetime, Action`1<IBuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
    private sealed virtual override Task`1<ICollection`1<BuildOutputFileArtifact>> JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources.RunNestedBuildOnSourcesForArtifactsAsync(OuterLifetime lifetime, AssemblyQualifiedTypeName objective, Action`1<IBuildRunnerRequest> FAdjustRequest, AllAssembliesFilter aafilter);
}
public enum JetBrains.Application.BuildScript.Compile.OccupyStrategy : Enum {
    public int value__;
    public static OccupyStrategy AllProcessors;
    public static OccupyStrategy LeaveOneProcessorFree;
    public static OccupyStrategy HalfProcessorsPlusOne;
    public static OccupyStrategy OneProcessor;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Compile.OccupyStrategyEx : object {
    [ExtensionAttribute]
public static int ConvertToProcessorCount(OccupyStrategy strategy);
}
public enum JetBrains.Application.BuildScript.Compile.PackageFileRole : Enum {
    public int value__;
    public static PackageFileRole Other;
    public static PackageFileRole ManagedAssembly;
    public static PackageFileRole NativeExecutableOrSharedLibrary;
    public static PackageFileRole NativeLinkLibrary;
    public static PackageFileRole ProgramDatabase;
    public static PackageFileRole BuildTargets;
    public static PackageFileRole XmlDocumentation;
    public static PackageFileRole NugetBuildFile;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.PackagePartCatalogArtifact : object {
    private static RelativePath DefaultFileName;
    public PrecalculatedPartCatalog Catalog;
    public SubplatformName SubplatformName;
    public PackagePartCatalogArtifact(IStructuredStorage sstg);
    public PackagePartCatalogArtifact(SubplatformName subplatform, PrecalculatedPartCatalog catalog);
    private static PackagePartCatalogArtifact();
    [NotNullAttribute]
public static PackagePartCatalogArtifact CreateFromStream(SubplatformName subplatform, IReadOnlyDictionary`2<AssemblyNameInfo, RelativePath> assemblies, Action`1<Stream> FWrite);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
public static class JetBrains.Application.BuildScript.Compile.RequestPlatformCleanCompile : object {
    [BuildStepAttribute]
public static ValidateCleanCompilation Yield();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.Compile.SkipAssemblyRewrites>")]
public class JetBrains.Application.BuildScript.Compile.SkipAssemblyRewrites : object {
    public bool IsSkipAssemblyRewrites;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public SkipAssemblyRewrites(bool isSkipAssemblyRewrites);
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalHeadNode : object {
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalNode : object {
    [NotNullAttribute]
public GlobalHeadNode HeadNode;
    [NotNullAttribute]
public GlobalSectionNode[] Sections;
    public GlobalNode(GlobalHeadNode head, GlobalSectionNode[] sections);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalSectionHeadNode : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Stage;
    public GlobalSectionHeadNode(string name, string stage);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.GlobalSectionNode : object {
    [NotNullAttribute]
public GlobalSectionHeadNode Head;
    [NotNullAttribute]
public KeyValuePair`2[] Properties;
    public GlobalSectionNode(GlobalSectionHeadNode head, KeyValuePair`2[] properties);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectHeadNode : object {
    [NotNullAttribute]
public string Location;
    [NotNullAttribute]
public string Name;
    public Guid ProjectGuid;
    public Guid ProjectType;
    public ProjectHeadNode(Guid projectType, string name, string location, Guid projectGuid);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectNode : object {
    [NotNullAttribute]
public ProjectHeadNode Head;
    [NotNullAttribute]
public ProjectSectionNode[] Sections;
    public ProjectNode(ProjectHeadNode head, ProjectSectionNode[] sections);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectSectionHeadNode : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public string Stage;
    public ProjectSectionHeadNode(string name, string stage);
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.ProjectSectionNode : object {
    [NotNullAttribute]
public ProjectSectionHeadNode Head;
    [NotNullAttribute]
public KeyValuePair`2[] Properties;
    public ProjectSectionNode(ProjectSectionHeadNode head, KeyValuePair`2[] properties);
}
public static class JetBrains.Application.BuildScript.Compile.SolutionFileParser.SlnFileParser : object {
    private static string formatMicrosoftVisualStudioSolutionFile;
    private static string formatFormatVersion;
    private static string formatProject;
    private static string formatEndProject;
    private static string formatProjectSection;
    private static string formatEndProjectSection;
    private static string formatGlobal;
    private static string formatEndGlobal;
    private static string formatGlobalSection;
    private static string formatEndGlobalSection;
    private static Parser`1<string> QuotedString;
    private static Parser`1<Version> Version2;
    private static Parser`1<string> Space;
    private static Parser`1<string> Comment;
    private static Parser`1<string> Separator;
    private static Parser`1<Version> FormatVersion;
    private static Parser`1<KeyValuePair`2<string, string>> Property;
    private static Parser`1<KeyValuePair`2<string, string>> SpecialProperty;
    private static Parser`1<ProjectSectionHeadNode> ProjectSectionHead;
    private static Parser`1<GlobalSectionHeadNode> GlobalSectionHead;
    private static Parser`1<ProjectHeadNode> ProjectHead;
    private static Parser`1<GlobalHeadNode> GlobalHead;
    private static Parser`1<ProjectSectionNode> ProjectSection;
    private static Parser`1<GlobalSectionNode> GlobalSection;
    private static Parser`1<Tuple`2<ProjectNode, GlobalSectionNode[]>> Project;
    private static Parser`1<GlobalNode> Global;
    public static Parser`1<SolutionNode> Solution;
    private static SlnFileParser();
}
public class JetBrains.Application.BuildScript.Compile.SolutionFileParser.SolutionNode : object {
    [NotNullAttribute]
public Version FileVersion;
    [NotNullAttribute]
public GlobalNode Global;
    [NotNullAttribute]
public ProjectNode[] Projects;
    [NotNullAttribute]
public KeyValuePair`2[] Properties;
    public SolutionNode(Version fileVersion, KeyValuePair`2[] properties, ProjectNode[] projects, GlobalNode global);
}
public static class JetBrains.Application.BuildScript.Compile.SpdxExpressionValidator : object {
    public static bool Validate(NuGetLicenseExpression expression, List`1<NuGetLicenseExpression> allowedLicenses);
    private static bool ValidateOperator(NuGetLicenseExpression expression, List`1<NuGetLicenseExpression> allowedLicenses);
    private static bool ValidateLogicalOperator(NuGetLicenseExpression expression, List`1<NuGetLicenseExpression> allowedLicenses);
    private static bool SearchAllowedLicense(NuGetLicenseExpression expression, List`1<NuGetLicenseExpression> allowedLicenses);
    public static bool CompareLicense(NuGetLicenseExpression left, NuGetLicenseExpression right);
}
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements>")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements : object {
    private static EscapeChars EscapingRules;
    [NotNullAttribute]
public SubplatformName Name;
    public RuntimeRequirement Runtime;
    public SubplatformCompilationRequirements(SubplatformName name, JetRuntimeId runtimeId);
    public SubplatformCompilationRequirements(SubplatformName name, Nullable`1<JetPlatform> platform, Nullable`1<JetArchitecture> architecture, Nullable`1<JetLinuxLibC> linuxLibC);
    public SubplatformCompilationRequirements(string text);
    private static SubplatformCompilationRequirements();
    public bool Equals(SubplatformCompilationRequirements other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackaging : SubplatformComponentForPackagingBase {
    public SubplatformComponentForPackaging(SubplatformName subplatformName, object componentForSerialization);
    public SubplatformComponentForPackaging(IStructuredStorage sstg);
    public SubplatformComponentForPackaging(SubplatformComponentForPackagingBase copyctor);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingBase : object {
    [NotNullAttribute]
public object ComponentForSerialization;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformComponentForPackagingBase(SubplatformName subplatformName, object componentForSerialization);
    public SubplatformComponentForPackagingBase(IStructuredStorage sstg);
    public SubplatformComponentForPackagingBase(SubplatformComponentForPackagingBase copyctor);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingFast : SubplatformComponentForPackagingBase {
    public SubplatformComponentForPackagingFast(SubplatformName subplatformName, object componentForSerialization);
    public SubplatformComponentForPackagingFast(IStructuredStorage sstg);
    [BuildStepAttribute]
public static SubplatformComponentForPackaging[] FastToCommon(SubplatformComponentForPackagingFast[] fasts, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging : SubplatformFileForPackagingBase {
    public SubplatformFileForPackaging(SubplatformName subname, ImmutableFileItem file, PackageFileRole role);
    public SubplatformFileForPackaging(SubplatformFileForPackagingBase copyctor);
}
public class JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingBase : object {
    [NotNullAttribute]
public ImmutableFileItem File;
    public PackageFileRole Role;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformFileForPackagingBase(SubplatformFileForPackagingBase copyctor);
    public SubplatformFileForPackagingBase(SubplatformName subname, ImmutableFileItem file, PackageFileRole role);
    public static int Comparison(SubplatformFileForPackagingBase x, SubplatformFileForPackagingBase y);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingFast : SubplatformFileForPackagingBase {
    public SubplatformFileForPackagingFast(ImmutableFileItem file, SubplatformName subname);
    public SubplatformFileForPackagingFast(SubplatformName subname, ImmutableFileItem file, PackageFileRole role);
    public SubplatformFileForPackagingFast(SubplatformFileForPackagingBase copyctor);
    [BuildStepAttribute]
public static SubplatformFileForPackaging[] FastToCommon(SubplatformFileForPackagingFast[] fasts, ILogger logger);
}
public class JetBrains.Application.BuildScript.Compile.SubplatformOriginalRevision : object {
    private static string StreamName_Rev;
    private static string StreamName_Sname;
    [NotNullAttribute]
public string RevisionIdentity;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformOriginalRevision(IStructuredStorage sstg);
    public SubplatformOriginalRevision(SubplatformName sname, string rid);
    private static SubplatformOriginalRevision();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.SubplatformOriginalRevision/<EmbedInPackages>d__6")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformComponentForPackagingFast> EmbedInPackages(AllAssembliesOnSources allassSrc, ILogger logger);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CanBeNullAttribute]
private static string TryGetRevisionForFolder(FileSystemPath dir, FileSystemPath dirUppermost, Dictionary`2<FileSystemPath, Boxed`1<string>> cacheCheckedFolders);
    public static ValueTuple`3<string, string, string> ParseRevision(string rev);
    [CompilerGeneratedAttribute]
internal static string <TryGetRevisionForFolder>g__ReadGitHead|9_0(FileSystemPath gitDir, <>c__DisplayClass9_0& );
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformThirdPartyLicenseInfo : object {
    [NotNullAttribute]
public SubplatformName SubplatformName;
    [CanBeNullAttribute]
public IList`1<RelativePath> Files;
    [CanBeNullAttribute]
public LibraryLicenseEntry LibraryLicense;
    public SubplatformThirdPartyLicenseInfo(SubplatformName subplatformName);
    public SubplatformThirdPartyLicenseInfo(SubplatformName subplatformName, RelativePath[] files);
    public SubplatformThirdPartyLicenseInfo(SubplatformName subplatformName, LibraryLicenseEntry licenseEntry, RelativePath[] files);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Compile.SubplatformThirdPartyLicenseInfo/<LoadFromSubPlatforms>d__6")]
[BuildStepAttribute]
public static IEnumerable`1<ThirdPartyLicenseInfo> LoadFromSubPlatforms(AllAssembliesOnPackages assembliesOnPackages, BuildVersionSuffix buildVersionSuffix, IEnumerable`1<SubplatformThirdPartyLicenseInfo> subplatformThirdPartyLicenseInfos, ILogger logger);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact : object {
    [NotNullAttribute]
public WhitelistMissingAssemblyReferences AssemblyReferences;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public SubplatformWhitelistMissingAssemblyReferencesArtifact(SubplatformName name, WhitelistMissingAssemblyReferences refs);
    [BuildStepAttribute]
public static List`1<SubplatformComponentForPackagingFast> EmitIntoPackageComponents(SubplatformWhitelistMissingAssemblyReferencesArtifact[] arts);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact/<WhitelistAssembliesFromDevelopmentOnlyDependencies>d__4")]
[BuildStepAttribute]
public static Task`1<List`1<SubplatformWhitelistMissingAssemblyReferencesArtifact>> WhitelistAssembliesFromDevelopmentOnlyDependencies(Lifetime lifetime, AllAssembliesOnSources allassSrc, RetrievedPackageReferenceArtifact[] rpras, IBuildTaskHost tasker, ILogger logger);
}
public enum JetBrains.Application.BuildScript.Compile.SymbolsMarker : Enum {
    public int value__;
    public static SymbolsMarker Native;
    public static SymbolsMarker Managed;
}
public class JetBrains.Application.BuildScript.Compile.SymbolsMarkerArtifact : object {
    public SymbolsMarkerFlags Flags;
    public SymbolsMarker Marker;
    public SymbolsMarkerArtifact(SymbolsMarker marker, SymbolsMarkerFlags flags);
    public SymbolsMarkerArtifact(IStructuredStorage storage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    public virtual string ToString();
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.Compile.SymbolsMarkerFlags : Enum {
    public UInt32 value__;
    public static SymbolsMarkerFlags None;
    public static SymbolsMarkerFlags IncludeBinaries;
}
public static class JetBrains.Application.BuildScript.Compile.SymbolStorage.SymbolStorageUploaderDownloader : object {
    private static JetRuntimeId ourToolRuntimeId;
    private static JetPackageIdentity ourPackageIdentity;
    private static SymbolStorageUploaderDownloader();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.SymbolStorage.SymbolStorageUploaderDownloader/<GetExecutableAsync>d__2")]
public static Task`1<FileSystemPath> GetExecutableAsync(Lifetime lifetime, IJetNugetPackageManager nugetter, ITaskHost tasker, ILogger logger);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Compile.ThirdPartyLicenseInfo : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<RelativePath> Files;
    [NotNullAttribute]
public LibraryLicenseEntry LibraryLicenseEntry;
    public ThirdPartyLicenseInfo(LibraryLicenseEntry libraryLicenseEntry, RelativePath[] files);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.TimeBombSpan/TimeBombSpanSerializer")]
public class JetBrains.Application.BuildScript.Compile.TimeBombSpan : object {
    public Nullable`1<TimeSpan> TimeSpan;
    public TimeBombSpan(Nullable`1<TimeSpan> timeSpan);
    [BuildStepAttribute]
public static TimeBombSpan DefaultValue(BuildChainFlavor buildChainFlavor);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging : SubplatformFileForPackagingBase {
    public TransformedSubplatformFileForPackaging(SubplatformName subname, ImmutableFileItem file, PackageFileRole role);
    public TransformedSubplatformFileForPackaging(SubplatformFileForPackagingBase copyctor);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging/<ApplyTransformAsync>d__2")]
[BuildStepAttribute]
public static Task`1<TransformedSubplatformFileForPackaging[]> ApplyTransformAsync(Lifetime lifetime, SubplatformFileForPackaging[] original, ITransformSubplatformFilesForPackaging[] transformers, ILogger logger);
}
public static class JetBrains.Application.BuildScript.Compile.TransformSubplatformFilesForPackaging : object {
    public static AssertTransformationsOrder AssertNoMoreManagedAssemblies(ITransformSubplatformFilesForPackaging owner, JetHashSet`1<SubplatformFileForPackaging> expected);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk : object {
    public bool IsOverwriting;
    public CanAutofixFilesOnDisk(bool isOverwriting);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation/SkipWorkingCopyDirectoryCaseFoldingValidationConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation/SkipWorkingCopyDirectoryCaseFoldingValidationSerializer")]
public class JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation : object {
    public bool IsSkipWorkingCopyDirectoryCaseFoldingValidation;
    public SkipWorkingCopyDirectoryCaseFoldingValidation(bool isSkipWorkingCopyDirectoryCaseFoldingValidation);
    public virtual string ToString();
    private static SkipWorkingCopyDirectoryCaseFoldingValidation Deserialize(string value);
    private static string Serialize(SkipWorkingCopyDirectoryCaseFoldingValidation value);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.SourcesValidationResult : object {
    [CanBeNullAttribute]
public string ErrorMessage;
    public SourcesValidationResult(string errorMessage);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation>")]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation : object {
    [NotNullAttribute]
public RelativePath SubplatformOrCollection;
    public ValidateCleanCompilation(RelativePath subplatformOrCollection);
    public ValidateCleanCompilation(string text);
    [BuildStepAttribute]
public static JetSdkProjectParameterArtifact[] EmitCleanCompileIntoSdkParameters(ValidateCleanCompilation[] validates);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding : object {
    public ICollection`1<FileWithProblem> FilesWithEncodingProblems;
    [BuildStepAttribute]
public ValidateFileEncoding(SourcesValidationResult& plug, AllAssembliesOnSources allassSrc, SourceFilesForEncodingCheck[] filters, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger);
    private static void FixFileEncoding(RelativePath relFile, AllAssembliesOnSources allassSrc, ILogger logger);
    private static FileEncodingVerdict IsSuspiciousFileEncoding(FileSystemPath file, ILogger logger);
    private void ReportAndAutofix(ICollection`1<FileWithProblem> problems, AllAssembliesOnSources allassSrc, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private void ValidateCore(AllAssembliesOnSources allassSrc, SourceFilesForEncodingCheck[] filters, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateLineEndings : object {
    [BuildStepAttribute]
public ValidateLineEndings(SourcesValidationResult& plug, AllAssembliesOnSources allassSrc, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger);
    private Nullable`1<EolsMustBe> GetConstraint(FileSystemPath file);
    private bool ProcessFile(FileSystemPath file, AllAssembliesOnSources allassSrc, SubplatformOnSources subplatform, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private string RenderLineEnding(string ending);
    private string RenderLineEndingsTimes(IDictionary`2<string, int> mapLineEndingsCount);
    [CompilerGeneratedAttribute]
private string <RenderLineEndingsTimes>b__4_1(KeyValuePair`2<string, int> pair);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidatePackageReferences : object {
    [BuildStepAttribute]
public ValidatePackageReferences(RetrievedPackageReferenceArtifact[] retrs, Optional`1<SkipSourcesValidation> skipval, ILogger logger, SourcesValidationResult& result);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.ValidateWorkingCopyDirectoryCaseFolding : object {
    [BuildStepAttribute]
public ValidateWorkingCopyDirectoryCaseFolding(IWorkingCopyTreeHelper wcHelper, ProductHomeDirArtifact homeDir, Optional`1<SkipSourcesValidation> skipVal, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipWorkingCopyDirectoryCaseFoldingValidation> skipWcCaseFolding, ILogger logger, SourcesValidationResult& result);
    public static List`1<FileSystemCasingConflict> ValidateCore(FileSystemPath baseDir, ILogger logger, WorkingCopyTreeNodes wc, Func`2<FileSystemPath, ICollection`1<DirectoryEntryData>> directoryEnumerator);
    private static void OnIndexFoldingError(FileSystemPath fullDir, string childLocalIndex, string childLocalFs, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.DiskToDiskCasingConflict : FileSystemCasingConflict {
    public string LocalName;
    public string LocalNameInterned;
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.DiskToIndexCasingConflict : FileSystemCasingConflict {
    public string DiskName;
    public string IndexName;
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.FileSystemCasingConflict : object {
    public FileSystemPath Directory;
}
public static class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.GitIndexFile : object {
    private static Encoding ourEncoding;
    private static int Sha1Length;
    private static Byte[] ourExpectedSignature;
    private static GitIndexFile();
    public static IEnumerable`1<GitIndexEntry> ReadIndexEntries(Stream input);
    private static Byte[] ReadBytes(Stream stream, int count);
    private static byte ReadByteExact(Stream stream);
    private static UInt32 ReadUInt32Be(Stream stream);
    private static ushort ReadUInt16Be(Stream stream);
    [CompilerGeneratedAttribute]
internal static GitIndexHeader <ReadIndexEntries>g__ReadHeader|5_0(<>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static GitIndexEntry <ReadIndexEntries>g__ReadEntry|5_1(<>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static int <ReadIndexEntries>g__ReadVariableWidthEncodedInt|5_2(<>c__DisplayClass5_0& );
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.IndexCasingConflict : ValueType {
    public IEnumerable`1<string> ConflictedNames;
    public string IndexPath;
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.IWorkingCopyTreeHelper {
    public WorkingCopyTreeNodes WorkingCopyTreeRoot { get; }
    public abstract virtual WorkingCopyTreeNodes get_WorkingCopyTreeRoot();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.WorkingCopyTreeHelper : object {
    private Lazy`1<WorkingCopyTreeNodes> myWorkingCopyTreeRoot;
    [NotNullAttribute]
public WorkingCopyTreeNodes WorkingCopyTreeRoot { get; }
    public WorkingCopyTreeHelper(ProductHomeDirArtifact homedir, ILogger logger);
    public sealed virtual WorkingCopyTreeNodes get_WorkingCopyTreeRoot();
}
public class JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.WorkingCopyTreeNodes : object {
    public static char Separator;
    private JetHashSet`1<Parented> myCaseFolding;
    private IDictionary`2<StringSlice, List`1<StringSlice>> myMapPathToChildrenCaseSensitive;
    private static WorkingCopyTreeNodes();
    public void ForEachNonLeafNode(Action`2<StringSlice, IReadOnlyList`1<StringSlice>> callback);
    public StringSlice GetLocalNameCasingInIndex(StringSlice directory, StringSlice localname);
    public void InsertPath(StringSlice fullpath, Action`1<IndexCasingConflict> indexCasingConflictAction);
    private void ForEachNonLeafNode_Children(StringSlice dir, List`1<StringSlice> children, Action`2<StringSlice, IReadOnlyList`1<StringSlice>> callback);
    private void InsertLinkFromParent(StringSlice& fullpath, Action`1<IndexCasingConflict> indexCasingConflictAction);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.CompileLevelEntryPoint : object {
}
[BuildEntryPointAttribute]
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.CompileSources : object {
}
public static class JetBrains.Application.BuildScript.Compression : object {
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public static ImmutableFileItem ZipCompress(RelativePath archivename, IEnumerable`1<ImmutableFileItem> files, ILogger logger, string comment, WhenToCompressEntry whencompress);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.DeployablePackage : BuildOutputPackageFileArtifact {
    public DeployablePackageFlags Flags;
    [NotNullAttribute]
public IReadOnlyCollection`1<SubplatformName> Subplatforms;
    public DeployablePackage(IEnumerable`1<SubplatformName> subnames, IJetNugetPackage package, DeployablePackageFlags flags);
    public DeployablePackage(SubplatformName subname, IJetNugetPackage package, DeployablePackageFlags flags);
    public DeployablePackage(IStructuredStorage sstg);
    public virtual string ToString();
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
public static class JetBrains.Application.BuildScript.DepsJson.DepsJsonBuilder : object {
    private static HashSet`1<string> ourRequiredPackages;
    private static HashSet`1<string> ourAssemblyOverrides;
    private static Version ourDefaultVersion;
    private static DepsJsonBuilder();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.DepsJson.DepsJsonBuilder/<GenerateDepsJsonFiles>d__0")]
[BuildStepAttribute]
public static Task`1<SubplatformFileForPackagingFast[]> GenerateDepsJsonFiles(Lifetime lt, AllAssembliesOnEverything aas, ICollection`1<DepsJsonFile> input, RetrievedPackageReferenceArtifact[] references, ILogger logger, IJetNugetPackageManager packman, InputPackage[] inputPackages, IBuildTaskHost tasker);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.DepsJson.DepsJsonBuilder/<FindDuplicatedPackages>d__1")]
private static IEnumerable`1<DepsJsonPackage> FindDuplicatedPackages(List`1<DepsJsonPackage> sortedDeps);
    private static void DumpDepsJson(IEnumerable`1<DepsJsonPackage> source, Stream stream);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.DepsJson.DepsJsonBuilder/<TryBuildDepsJsonPackageIfNeededImpl>d__3")]
[ItemCanBeNullAttribute]
private static Task`1<DepsJsonPackage> TryBuildDepsJsonPackageIfNeededImpl(Lifetime lifetime, IHaveJetNugetPackage package, bool forceAnyRidForWindowsDesktopMock, ITaskHost tasker, ILogger logger);
    private static Version GetVersion(FileFromPackage`1<IHaveJetNugetPackage> file, ILogger logger);
    private static DependencyContext BuildDependencyContext(IEnumerable`1<DepsJsonPackage> packages);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.DepsJson.DepsJsonFile : object {
    public SubplatformName Subplatform;
    public string Host;
    public ISet`1<string> ExcludedPackageReferences;
    public IDictionary`2<RelativePath, RuntimeIdentifier> AdditionalLibraries;
    public IList`1<DepsJsonPackage> AdditionalPackages;
    public bool ForceAnyRidForWindowsDesktopMock;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.DepsJson.DepsJsonPackage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, ImmutableDictionary`2<RuntimeIdentifier, RuntimeFile>> <Libraries>k__BackingField;
    public string Name { get; }
    public ImmutableDictionary`2<string, ImmutableDictionary`2<RuntimeIdentifier, RuntimeFile>> Libraries { get; }
    public DepsJsonPackage(string name, ImmutableDictionary`2<string, ImmutableDictionary`2<RuntimeIdentifier, RuntimeFile>> libraries);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, ImmutableDictionary`2<RuntimeIdentifier, RuntimeFile>> get_Libraries();
}
public class JetBrains.Application.BuildScript.DepsJson.RuntimeIdentifier : object {
    public static RuntimeIdentifier Any;
    public static RuntimeIdentifier Windows;
    public static RuntimeIdentifier Linux;
    public static RuntimeIdentifier OSX;
    public static RuntimeIdentifier Unix;
    private string myRid;
    public RuntimeIdentifier(string rid);
    private static RuntimeIdentifier();
    public virtual string ToString();
    protected bool Equals(RuntimeIdentifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.Application.BuildScript.DockerInfo.DockerInfoLicenseProvider : object {
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.DockerInfo.DockerInfoLicenseProvider/<GetLicenses>d__0")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformThirdPartyLicenseInfo> GetLicenses();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Dummy.DumpProjectFileStats : object {
    [BuildStepAttribute]
public DumpProjectFileStats(AllAssembliesOnSources allass);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Dummy.TestDependentCompile : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Dummy.TestDependentCompile/<DepComp>d__0")]
[BuildStepAttribute]
public static Task`1<TestDependentCompile> DepComp(ProductHomeDirArtifact homedir, INestedBuildRunner nester, IBuildTaskHost tasker, ILogger logger);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalEmitBuildSystem : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalExtractForIntegrationTests : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalExtractForIntegrationTests/<Enter>d__0")]
[BuildStepAttribute]
public static Task`1<EntryLocalExtractForIntegrationTests> Enter(Lifetime lifetime, ISourceStageBinStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalExtractPackagesToBinDir : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalExtractPackagesToBinDir/<Enter>d__0")]
[BuildStepAttribute]
public static Task`1<EntryLocalExtractPackagesToBinDir> Enter(Lifetime lifetime, ISourceStageBinStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalInstall : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalInstall/<Enter>d__0")]
[BuildStepAttribute]
public static Task`1<EntryLocalInstall> Enter(Lifetime lifetime, ISourceStageBinStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalMakePackedInstaller : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalPrepareWorkingCopy : object {
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage : BuildOutputFileArtifact {
    public EntryLocalRunBinaryStage(ImmutableFileItem file);
    public EntryLocalRunBinaryStage(IStructuredStorage sstg);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage/<RunBinaryStage>d__2")]
[BuildStepAttribute]
public static Task`1<EntryLocalRunBinaryStage[]> RunBinaryStage(Lifetime lifetime, BinaryStageObjectiveArtifact objective, ISourceStageBinStageBuild stagedbuild);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunNativeTests : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunNativeTests/<Enter>d__0")]
[BuildStepAttribute]
public static Task`1<EntryLocalRunNativeTests> Enter(Lifetime lifetime, ISourceStageBinStageBuild build);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunSourceStage : BuildOutputFileArtifact {
    public EntryLocalRunSourceStage(ImmutableFileItem file);
    public EntryLocalRunSourceStage(IStructuredStorage sstg);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunSourceStage/<RunSourceStage>d__2")]
[BuildStepAttribute]
public static Task`1<EntryLocalRunSourceStage[]> RunSourceStage(Lifetime lifetime, SourceStageObjectiveArtifact objective, ISourceStageBinStageBuild nestedrunner);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunUnitTests : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunUnitTests/<Enter>d__0")]
[BuildStepAttribute]
public static Task`1<EntryLocalRunUnitTests> Enter(Lifetime lifetime, ISourceStageBinStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryLocalSavePackagesToBinDir : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.EntryLocalSavePackagesToBinDir/<Enter>d__0")]
[BuildStepAttribute]
public static Task`1<EntryLocalSavePackagesToBinDir> Enter(Lifetime lifetime, ISourceStageBinStageBuild build);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryOpenInIde : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryStdAfx : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.EntryPoints.EntryStdAfxSn : object {
    [BuildStepAttribute]
public EntryStdAfxSn(ILogger logger, BuildOutputFileArtifact& output);
}
public static class JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks/<EntryCompileAsync>d__0")]
[BuildStepAttribute]
public static Task`1<EntryRunMultiHostCompileStage[]> EntryCompileAsync(Lifetime lifetime, ProductHomeDirArtifact homedir, Optional`1<MultiHostBuildPreviousLayerResults> maybePrevResults, Optional`1<MultiHostBuildArtifact[]> maybeArtifacts, AllAssembliesOnSources allassSrc, INestedBuildRunner nester, NugetConfigFile nuconfig, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks/<EntryPostCompileAsync>d__1")]
[BuildStepAttribute]
public static Task`1<EntryRunMultiHostBuildPostCompileStage[]> EntryPostCompileAsync(Lifetime lifetime, Optional`1<MultiHostBuildPreviousLayerResults> maybePrevResults, Optional`1<MultiHostBuildArtifact[]> maybeArtifacts, MultiHostBuildPostCompileObjective[] objectives, INestedBuildRunner nester, NugetConfigFile nuconfig, ILogger logger);
    private static UInt32 AssertPrevLayersConsistent(Optional`1<MultiHostBuildPreviousLayerResults> maybePrevResults, Nullable`1<PlannedLayers> maybePlanned, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks/<GetCompilationRequirements>d__3")]
private static Task`1<Dictionary`2<SubplatformName, SubplatformCompilationRequirements>> GetCompilationRequirements(Lifetime lifetime, ProductHomeDirArtifact homedir, Optional`1<MultiHostBuildArtifact[]> maybeArtifacts, INestedBuildRunner nester, NugetConfigFile nuconfig, ILogger logger, AllAssembliesOnSources allass);
    private static ImmutableArray`1<IJetNugetPackage> GetPrevPackages(Optional`1<MultiHostBuildPreviousLayerResults> maybePrevResults, ILogger logger);
    private static bool IsCompatibleWithCurrentRuntime(RuntimeRequirement requirement);
    private static ValueTuple`4<Nullable`1<UInt32>, Nullable`1<NodeOnLayer>, ImmutableArray`1<SubplatformOnSources>, ImmutableArray`1<IJetNugetPackage>> PickWhatToRun(Optional`1<MultiHostBuildPreviousLayerResults> maybePrevResults, ILogger logger, PlannedLayers& layers, AllAssembliesAccess aaaAllLayers);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks/<ReportIfAllAssembliesFiltered>d__7")]
private static Task ReportIfAllAssembliesFiltered(Lifetime lifetime, ProductHomeDirArtifact homedir, AllAssembliesOnSources allassSrc, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks/<RunCompileAsync>d__8")]
private static Task`1<ICollection`1<DeployablePackage>> RunCompileAsync(Lifetime lifetime, ImmutableArray`1<SubplatformOnSources> subplatforms, ProductHomeDirArtifact homedir, Optional`1<MultiHostBuildArtifact[]> maybeArtifacts, ImmutableArray`1<IJetNugetPackage> packagesPrev, INestedBuildRunner nester, NugetConfigFile nuconfig, ILogger logger);
    private static void SetCommonStageInputs(IBuildRunnerRequest request, Optional`1<MultiHostBuildArtifact[]> maybeArtifacts, NugetConfigFile nuconfig);
    private static void SetupCommonSourceStageInputs(IBuildRunnerRequest request, ProductHomeDirArtifact homedir, Optional`1<MultiHostBuildArtifact[]> maybeArtifacts, NugetConfigFile nuconfig);
    private static PlannedLayers TossSubsIntoBuildLayers(AllAssembliesAccess aaa, Dictionary`2<SubplatformName, SubplatformCompilationRequirements> mapRequirementsAsDeclared, ILogger logger);
}
public static class JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks : object {
    public static RelativePath AbuildCurrentExeFileName;
    public static string BuildEngineAndCoreScriptFileName;
    public static RelativePath CmdMakeIsolatedRequestFileName;
    public static RelativePath CmdRunIsolatedRequestFileName;
    public static string IsolatedRequestDefaultOutputDirName;
    public static string IsolatedRequestFileName;
    public static string IsolatedResultDefaultOutputDirName;
    private static TeamCityTasks();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks/<GetPackagesFromParentBuildsAsync>d__7")]
[BuildStepAttribute]
public static Task`1<DeployablePackagesFromParentBuilds> GetPackagesFromParentBuildsAsync(Lifetime lifetime, IJetNugetPackageManager nugetter, IBuildTaskHost tasker, TeamCityPropertiesMockable tcprops, Optional`1<TeamCityMakeIsolatedRequestBootstrapMode> maybeBootstrapMode, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks/<InvokeInnerOnIsolatedRequest>d__8")]
[BuildStepAttribute]
public static Task`1<List`1<TeamCityCompileCoreAndBootstrapResultOuterFile>> InvokeInnerOnIsolatedRequest(Lifetime lifetimeStep, TeamCityCompileCoreAndBootstrapRequestFileLocation requestlocation, INestedBuildRunner nestedrunner, ILogger logger);
    [NotNullAttribute]
[BuildStepAttribute]
public static TeamCityCompileCoreAndBootstrapResultInnerFile MakeCompileCoreAndBootstrapResult_IncludeCompileResult(TeamCityCompileResultFile compileresult);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks/<MakeCompileCoreAndBootstrapResult_PrepareBootstrapper>d__10")]
[NotNullAttribute]
[BuildStepAttribute]
public static Task`1<List`1<TeamCityCompileCoreAndBootstrapResultInnerFile>> MakeCompileCoreAndBootstrapResult_PrepareBootstrapper(Lifetime lifetimeStep, DeployablePackage[] deployables, ProductHomeDirArtifact homedir, AllAssembliesOnEverything allass, INestedBuildRunner nestedrunner, NugetConfigFile nugetconfig, ILogger logger);
    [BuildStepAttribute]
public static TeamCityCompileResultFile MakeCompileResult(IList`1<DeployablePackage> dpkgs, Optional`1<ListProducePackagesFromPreviousBuilds> transits, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks/<MakeIsolatedRequestAsync>d__12")]
[BuildStepAttribute]
public static Task`1<List`1<EntryTeamCityMakeIsolatedRequest>> MakeIsolatedRequestAsync(Lifetime lifetime, IBuildTaskHost tasker, GetArtifactStringsFromEnvironment artsFromEnvironment, TeamCityMakeIsolatedRequestHomeDir homedir, NugetConfigFile nuconfig, BuildRunnerCoreExeLocation runnercore, IJetNugetPackageManager nugetter, TeamCityPropertiesMockable tcprops, Optional`1<TeamCityMakeIsolatedRequestBootstrapMode> maybeBootstrapMode, Optional`1<TeamCityMakeIsolatedRequestObjective> maybeObjective, Optional`1<AllAssembliesFilter> maybeAafilter, ILogger logger);
    public static void PublishAndAssignToRequestBuildNumber(EitherBuildRunnerRequest request, ILogger logger);
    public static void UnmakeRootDir(FileSystemPath productHomeDir, ILogger logger);
    private static ImmutableFileItem EmitEntryScripts_MakeIsolatedRequest(TeamCityCompileCoreAndBootstrapResultInnerFile fiBuildRunnerCoreIntoBootstrap, TeamCityCompileCoreAndBootstrapResultInnerFile fiNugetConfigIntoBootstrap, TeamCityCompileCoreAndBootstrapResultInnerFile fiBuildEngineOrScriptBinaries, TeamCityCompileCoreAndBootstrapResultInnerFile fiMonoRuntimeEntry, TeamCityCompileCoreAndBootstrapResultInnerFile fiDotNetRuntimeEntry);
    private static ImmutableFileItem EmitEntryScripts_RunIsolatedRequest(RelativePath relBuildRunnerCoreIntoBootstrap, RelativePath relRequest, TeamCityMakeIsolatedRequestBootstrapMode bootstrapmode, TeamCityMakeIsolatedRequestHomeDir homedirForDiag);
    private static List`1<EntryTeamCityMakeIsolatedRequest> MakeIsolatedRequestAsync_Bootstrappers(BuildRunnerCoreExeLocation runnercore, RelativePath relRequest, TeamCityMakeIsolatedRequestHomeDir homedirForDiag, TeamCityMakeIsolatedRequestBootstrapMode teamCityMakeIsolatedRequestBootstrapMode, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.BuildScript.Git.ConfigureGitBlame : object {
    private static RelativePath ourGitConfigPath;
    private static RelativePath ourGitBlameIgnoreRevsFile;
    private static ConfigureGitBlame();
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy PrepareGitConfig(ProductHomeDirArtifact homeDir, ILogger logger);
    private static void PrepareGitConfig(FileSystemPath repoRoot, ILogger logger);
    private static void SetGitConfigIfNotSet(ILogger logger, FileSystemPath gitConfigFile, string sectionName, string parameterName, string parameterValue);
    [CompilerGeneratedAttribute]
internal static void <SetGitConfigIfNotSet>g__ProcessTargetSectionLine|4_0(string line, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <SetGitConfigIfNotSet>g__FinishTargetSection|4_1(<>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
internal static void <SetGitConfigIfNotSet>g__FinishConfigFile|4_2(<>c__DisplayClass4_0& );
}
public static class JetBrains.Application.BuildScript.Git.SparseCheckout : object {
    private static BackSlashSeparatedRelativePath Dotnet;
    public static ImmutableArray`1<string> MinimalSparseCheckout { get; }
    private static SparseCheckout();
    public static ImmutableArray`1<string> get_MinimalSparseCheckout();
    public static ImmutableArray`1<string> CalculateSparseCheckoutRulesForSubplatforms(AllAssembliesOnSources allass);
    private static string AsGitPath(BackSlashSeparatedRelativePath rel);
    private static string SubplatformGitPath(SubplatformName sname);
}
public static class JetBrains.Application.BuildScript.GlobalDefines : object {
    public static string ReSharperPlatformPresentableName;
    private static string FullVersion;
    private static GlobalFullVersionParser ourParsed;
    public static int MajorVersionNumber;
    public static int MinorVersionNumber;
    public static int BugfixReleaseNumber;
    public static string EapSuffixString;
    public static Version Version4;
    public static JetSemanticVersion SemanticVersion;
    public static bool IsEap;
    public static bool IsDevelopmentBuild;
    public static bool IsExperimentalBuild;
    public static string ExperimentalBuildDescription;
    public static string MarketingVersionStringWithoutSuffix;
    public static string FullMarketingVersionString;
    public static string FullMarketingVersionStringWithoutSpaces;
    public static string WaveMarketingName;
    public static UInt32 WaveTechnicalNumber;
    public static RelativePath StandaloneHostIconFile;
    public static Int32[] AllSupportedVsHosts;
    public static string VsHostIdentifierPrefix;
    public static RelativePath VsHostIconFile;
    private static GlobalDefines();
}
public class JetBrains.Application.BuildScript.GlobalFullVersionParser : object {
    public int First;
    public int Second;
    public int Third;
    public string Suffix;
    public GlobalFullVersionParser(string fullVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper : object {
    private Lazy`1<JetDispatcherTaskScheduler> myScheduler;
    private IBuildTaskHost myTasker;
    public JetDispatcherTaskScheduler StaScheduler { get; }
    public BuildStaThreadHelper(Lifetime lifetime, IBuildTaskHost tasker);
    public JetDispatcherTaskScheduler get_StaScheduler();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper/<ExecuteOnStaAsync>d__5")]
public Task ExecuteOnStaAsync(Lifetime lifetime, Func`1<Task> F);
    public SchedulerAwaiter YieldTo(OuterLifetime lifetime);
}
public static class JetBrains.Application.BuildScript.Helpers.DebuggerHelpers : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Helpers.DebuggerHelpers/<PreparePostMortemCdbAsync>d__0")]
public static Task`1<FinalizeDebuggerStartInfoDelegate> PreparePostMortemCdbAsync(OuterLifetime lifeStep, IJetNugetPackageManager packman, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Helpers.DebuggerHelpers/<SelfAttachPostMortemCdbAsync>d__1")]
public static Task SelfAttachPostMortemCdbAsync(OuterLifetime lifeStep, IJetNugetPackageManager packman, Optional`1<IsEvadeSelfDebug> maybeIsEvade, ITaskHost tasker, ILogger logger);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper : object {
    private Result`1<LocallyExpandable> myMaybePackage;
    public bool IsAvailable { get; }
    [NotNullAttribute]
public LocallyExpandable Package { get; }
    [NotNullAttribute]
public JetPackageIdentity PackageId { get; }
    public DotNetCoreSdkHelper(Lifetime lifetime, ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter, ITaskHost tasker, ILogger logger);
    public bool get_IsAvailable();
    public LocallyExpandable get_Package();
    public JetPackageIdentity get_PackageId();
    [NotNullAttribute]
public Task`1<FileSystemPath> GetDotnetHostPath();
    [NotNullAttribute]
public Task`1<FileSystemPath> GetMsbuildDllPath();
    [NotNullAttribute]
public static FileSystemPath GetNetCoreLocalExpandDir(ProductHomeDirArtifact homedir);
    public static Result`1<LocallyExpandable> GetNetCoreSdkPackageForCurrentRuntime(OuterLifetime lifetime, ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter, ITaskHost tasker, ILogger logger);
    public static Result`1<JetPackageIdentity> GetNetCoreSdkPackageIdFor(JetRuntimeId runtimeId);
    public static Result`1<JetPackageIdentity> GetNetCoreSdkPackageIdForCurrentRuntime();
    [NotNullAttribute]
public LocallyExpandable GetOrThrowNotAvailableException();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper/<NetCoreSdkInstallHelper>d__15")]
public static Task`1<ValueTuple`3<FileSystemPath, FileSystemPath, JetPackageIdentity>> NetCoreSdkInstallHelper(OuterLifetime lifetime, ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter, ITaskHost tasker, ILogger logger);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment : object {
    public static ILogger Logger;
    public static string PropertyNamePrefix;
    private ITeamCityProperties myTeamCityProperties;
    public GetArtifactStringsFromEnvironment(TeamCityPropertiesMockable tcprops);
    private static GetArtifactStringsFromEnvironment();
    public void ApplyArtifactStringsToRequest(BuildRunnerRequest request, Sources sources);
    [NotNullAttribute]
public IDictionary`2<string, string> GetArtifactStrings(Sources sources);
    private static KeyValuePair`2<string, string> TryExtractArtifact(string key, string value);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx : object {
    private static ILogger Logger;
    private static IBuildRunnerRequestEx();
    [ExtensionAttribute]
[NotNullAttribute]
public static IBuildRunnerRequest WithCompiledBinaries(IBuildRunnerRequest thіs, ICollection`1<InputPackage> binaries);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBuildRunnerRequest WithCompiledBinaries(IBuildRunnerRequest thіs, ICollection`1<IJetNugetPackage> binaries, CustomEngineInBinaries customengine);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBuildRunnerRequest WithCompiledBinariesForScriptAlreadyInInputs(IBuildRunnerRequest thіs, CustomEngineInBinaries customengine);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBuildRunnerRequest WithCompiledBinariesForScriptAndInputs(IBuildRunnerRequest thіs, IReadOnlyCollection`1<TArtifact> artifacts, CustomEngineInBinaries customengine);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBuildRunnerRequest WithSourcesFromDisk(IBuildRunnerRequest thіs, ProductHomeDirArtifact homedir, AllAssembliesOnEverything allass);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBuildRunnerRequest WithSourcesFromDisk(IBuildRunnerRequest thіs, AllAssembliesOnSources allass);
    private static void WithCompiledBinaries_Engine(IBuildRunnerRequest request, IEnumerable`1<IHaveJetNugetPackage> binaries, CustomEngineInBinaries customengine);
}
public static class JetBrains.Application.BuildScript.Helpers.Icons.AppleDoubleWriter : object {
    private static UInt32 ADH_MAGIC;
    private static UInt32 ADH_VERSION;
    private static string ADH_MACOSX;
    private static UInt32 ATTR_HDR_MAGIC;
    private static UInt32 ICNS_MAGIC;
    private static UInt32 ICNS_REFMAGIC;
    public static void WriteAppleDoubleIcns(Stream icnsData, Stream file, bool onlyRsrc);
}
public static class JetBrains.Application.BuildScript.Helpers.Icons.IcoToIcns : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Helpers.Icons.IcoToIcns/<ConvertAsync>d__2")]
public static Task`1<ImmutableByteStream> ConvertAsync(ImmutableByteStream ico, SkiaHelper skia, NugetConfigFile nucfg, ILogger logger);
    public static void ConvertNoCache(Stream ico, Stream icns, SkiaTypes skiaTypes);
    private static void WritePng(BinaryWriter destination, string prefix, SkiaBitmap bitmap);
    private static void WriteArgb(BinaryWriter destination, string prefix, SkiaBitmap bitmap);
    private static void ApplePackBitsCompress(Stream input, BinaryWriter writer);
    [CompilerGeneratedAttribute]
internal static void <ApplePackBitsCompress>g__Flush|6_0(<>c__DisplayClass6_0& );
}
public class JetBrains.Application.BuildScript.Helpers.Icons.SkiaBitmap : object {
    private object myInstance;
    private Type mySkBitmapType;
    private Type mySkColorTypeType;
    private Type mySkColorType;
    private Type mySkAlphaType;
    private Type mySkEncodedImageFormat;
    private PropertyInfo myWidthProperty;
    private PropertyInfo myHeightProperty;
    private MethodInfo myDisposeMethod;
    private MethodInfo myGetPixelMethod;
    private MethodInfo mySetPixelMethod;
    private PropertyInfo myAplhaField;
    private PropertyInfo myRedField;
    private PropertyInfo myGreenField;
    private PropertyInfo myBlueField;
    public int Width { get; }
    public int Height { get; }
    public SkiaBitmap(Stream stream, SkiaTypes skiaTypes);
    public SkiaBitmap(int width, int height, SkiaTypes skiaTypes);
    private SkiaBitmap(SkiaTypes skiaTypes);
    public int get_Width();
    public int get_Height();
    public sealed virtual void Dispose();
    public ValueTuple`4<byte, byte, byte, byte> GetPixel(int x, int y);
    public void SetPixel(int x, int y, byte r, byte g, byte b);
    public void SetPixel(int x, int y, byte r, byte g, byte b, byte a);
    public void Encode(Stream stream);
    [CompilerGeneratedAttribute]
private bool <Encode>b__23_0(MethodInfo x);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Helpers.Icons.SkiaHelper : object {
    public static JetPackageIdentity LibSkiaSharp;
    public static JetPackageIdentity LibSkiaSharpNativeLin;
    public static JetPackageIdentity LibSkiaSharpNativeMac;
    public static JetPackageIdentity LibSkiaSharpNativeWin;
    public AsyncLazy`1<SkiaTypes> Types;
    public string Identity;
    public SkiaHelper(Lifetime lifetime, IJetNugetPackageManager nugetter, ITaskHost tasker, ILogger logger);
    private static SkiaHelper();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Helpers.Icons.SkiaHelper/<InstallSkiaSharp>d__8")]
private static Task`1<SkiaTypes> InstallSkiaSharp(Lifetime lifetime, IJetNugetPackageManager nugetter, ITaskHost tasker, ILogger logger);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Helpers.Icons.StructExtensions : object {
    private static ConcurrentDictionary`2<Type, FieldInfo[]> ourFieldCache;
    private static StructExtensions();
    [ExtensionAttribute]
public static ulong ReadUInt64BigEndian(BinaryReader reader);
    [ExtensionAttribute]
public static void WriteUInt32BigEndian(BinaryWriter writer, UInt32 value);
    [ExtensionAttribute]
public static void WriteUInt32LittleEndian(BinaryWriter writer, UInt32 value);
    [ExtensionAttribute]
public static void WriteUInt16BigEndian(BinaryWriter writer, ushort value);
    [ExtensionAttribute]
public static void WriteUInt16LittleEndian(BinaryWriter writer, ushort value);
    [ExtensionAttribute]
public static T ReadStructLittleEndian(Stream stream);
    [ExtensionAttribute]
public static void WriteStructBigEndian(Stream stream, T obj);
    [ExtensionAttribute]
private static void WriteStruct(Stream stream, T obj, bool littleEndian);
    [ExtensionAttribute]
private static T ReadStruct(Stream stream, bool littleEndian);
    [ExtensionAttribute]
private static object SwitchEndianness(object obj);
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Helpers.ToolServerInfo/ToolServerInfoSerializer")]
public class JetBrains.Application.BuildScript.Helpers.ToolServerInfo : object {
    [NotNullAttribute]
public string Password;
    [NotNullAttribute]
public Uri Uri;
    [NotNullAttribute]
public string Username;
    public ToolServerInfo(string username, string password, Uri uri);
    public ToolServerInfo(string serialized);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.HostEnvironmentZoneArtifact : object {
    [NotNullAttribute]
public AssemblyQualifiedTypeName EnvironmentZoneTypeName;
    public HostEnvironmentZoneArtifact(AssemblyQualifiedTypeName environmentZoneTypeName);
    public HostEnvironmentZoneArtifact(IStructuredStorage sstg);
    [NotNullAttribute]
public static HostEnvironmentZoneArtifact Create();
    [NotNullAttribute]
public static HostEnvironmentZoneArtifact Create(ZonePart zone);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
public enum JetBrains.Application.BuildScript.HostFolderLifetime : Enum {
    public int value__;
    public static HostFolderLifetime TempFolder;
    public static HostFolderLifetime LocalAppdataCaches;
    public static HostFolderLifetime LocalAppdata;
    public static HostFolderLifetime RoamingAppdata;
}
public interface JetBrains.Application.BuildScript.ILocalBuildOptimizationArtifact {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.InputPackage : BuildOutputPackageFileArtifact {
    public InputPackage(IJetNugetPackage package);
    public InputPackage(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.AllPackagesZip : BuildOutputFileArtifact {
    public AllPackagesZip(ImmutableFileItem file);
    public AllPackagesZip(IStructuredStorage sstg);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(AllPackagesZip zip);
    public virtual string ToString();
}
public abstract class JetBrains.Application.BuildScript.Install.BaseSavePackagesTasks : object {
    private static string PackageReferencePrefix;
    private static string SubplatformReferencePrefix;
    private static BaseSavePackagesTasks();
    protected static FileSystemPath GetOutputDir(Optional`1<ProductBinariesDirArtifact> maybeBindir, Optional`1<SavePackagesParameters> maybeParams, string subDir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.BaseSavePackagesTasks/<CollectPackagesAsync>d__3")]
protected static Task`1<IReadOnlyCollection`1<InputPackage>> CollectPackagesAsync(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, IReadOnlyCollection`1<InputPackage> ipkgs, AllAssembliesOnEverything allass, JetHashSet`1<SubplatformName> setOfSubs);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.BaseSavePackagesTasks/<CollectPropsFilesAsync>d__4")]
protected static Task`1<IReadOnlyCollection`1<ImmutableFileItem>> CollectPropsFilesAsync(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, IReadOnlyCollection`1<InputPackage> ipkgs);
    [CompilerGeneratedAttribute]
internal static string <CollectPropsFilesAsync>g__SubplatformReferencePropsFileNameFromSubplatformName|4_2(SubplatformName subplatformName);
    [CompilerGeneratedAttribute]
internal static string <CollectPropsFilesAsync>g__SubplatformReferencePropsFileImportedPropertyNameFromSubplatformName|4_3(SubplatformName subplatformName);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.CdnGalleryPackagesJson : BuildOutputFileArtifact {
    public CdnGalleryPackagesJson(IStructuredStorage sstg);
    public CdnGalleryPackagesJson(ImmutableFileItem jsonFile);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(CdnGalleryPackagesJson packagesJson);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.CdnLatestUpdatesJson : BuildOutputFileArtifact {
    public CdnLatestUpdatesJson(IStructuredStorage sstg);
    public CdnLatestUpdatesJson(ImmutableFileItem jsonFile);
    public virtual string ToString();
    [BuildStepAttribute]
public static IEnumerable`1<InstallersPortablesZipsDeployableFile> ToDeployable(CdnLatestUpdatesJson[] jsons);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.ContentPackExecutableArtifact : object {
    [NotNullAttribute]
public StuffedLauncherArtifact Launcher;
    public ContentPackExecutableArtifact(StuffedLauncherArtifact launcher);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme : object {
    private IsModeAssert myIsModeAssert;
    private ILogger myLogger;
    private string myOriginTag;
    [BuildStepAttribute]
public DeployedFilesNamingScheme(BuildVersionSuffix versuffix, BuildChainFlavor buildChainFlavor, IsModeAssert isModeAssert, ILogger logger);
    public virtual string ToString();
    [NotNullAttribute]
[PureAttribute]
public Construction Name(string name);
    [NotNullAttribute]
[PureAttribute]
public Construction CompanyName();
    [NotNullAttribute]
public static string VersionRemoveWhitespace(string version);
}
public static class JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles : object {
    public static string DeploymentPackagingIdentityFileName;
    public static string DeploymentPackagingIdentityValueName;
    private static DeploymentPackagingIdentityFiles();
    [NotNullAttribute]
public static ImmutableFileItem RenderIdentityFile(BuildVersionSuffix buildversuffix);
}
public abstract class JetBrains.Application.BuildScript.Install.DevEnv.VsExtensionsHelperConstants : object {
    [NotNullAttribute]
public static RelativePath DevEnvExtensionsRelPath;
    [NotNullAttribute]
public static RelativePath CompanyExtensionsRelPath;
    [NotNullAttribute]
protected static RelativePath SinceVs11ExtensionsConfigurationChangedFileRelPath;
    [NotNullAttribute]
public static RelativePath LocalAppDataVsComponentModelCacheFolderRelPath;
    private static VsExtensionsHelperConstants();
    [NotNullAttribute]
public static RelativePath GetExtensionFolderRelPath(HostInfo hostInfo);
}
public class JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry : object {
    public bool IsBackground;
    public string VerbNameHuman;
    [CanBeNullAttribute]
public string CommandLineParam;
    [CanBeNullAttribute]
public RelativePath IconFile;
    public Nullable`1<int> IconIndex;
    private DirectoryAssociationEntry(bool isBackground, string verbNameHuman, string commandLineParam, RelativePath iconFile, Nullable`1<int> iconIndex);
    private DirectoryAssociationEntry(CsexpReader reader);
    public static DirectoryAssociationEntry FolderContextMenu(string verbNameHuman, Nullable`1<int> iconIndex, RelativePath iconFile, string commandLineParameter);
    public static DirectoryAssociationEntry FolderBackgroundContextMenu(string verbNameHuman, Nullable`1<int> iconIndex, RelativePath iconFile, string commandLineParameter);
    public static DirectoryAssociationEntry Load(CsexpReader reader);
    public static void Save(DirectoryAssociationEntry entry, CsexpWriter writer);
    public static void Serialize(CsexpArchive ar, Boolean& IsBackground, String& VerbNameHuman, String& CommandLineParam, RelativePath& IconFile, Nullable`1& IconIndex);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Dmg.BuildDmgRequest : object {
    [NotNullAttribute]
public SitFileArtifact SitFile;
    [CanBeNullAttribute]
public ImmutableFileItem CopyBackgroundPictureFile;
    public bool CreateSymbolicLinkToApplications;
    public BuildDmgRequest(SitFileArtifact sitFile, ImmutableFileItem copyBackgroundPictureFile, bool createSymbolicLinkToApplications);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Dmg.DmgFileArtifact : BuildOutputFileArtifact {
    public DmgFileArtifact(ImmutableFileItem file);
    public DmgFileArtifact(IStructuredStorage sstg);
    [BuildStepAttribute]
public static DmgsDeployableFile[] ToDeployable(DmgFileArtifact[] dmgFiles);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Dmg.DmgsDeployableFile : BuildOutputFileArtifact {
    public DmgsDeployableFile(IStructuredStorage sstg);
    public DmgsDeployableFile(ImmutableFileItem file);
}
public static class JetBrains.Application.BuildScript.Install.Dmg.DmgTasks : object {
    private static JetPackageIdentity ourMakedmgPyPackageId;
    public static string RiderDmgFileNamePrefix;
    private static DmgTasks();
    [BuildStepAttribute]
public static BuildDmgRequest[] RequestDmgForRider(SitFileInputDirArtifact inputdir);
    [BuildStepAttribute]
public static BuildDmgRequest[] RequestDmgForDotTrace(SitFileInputDirArtifact inputdir);
    [BuildStepAttribute]
public static BuildDmgRequest[] RequestDmgForDotMemory(SitFileInputDirArtifact inputdir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Dmg.DmgTasks/<BuildDmgs>d__5")]
[BuildStepAttribute]
public static Task`1<DmgFileArtifact[]> BuildDmgs(Lifetime lifetime, BuildDmgRequest[] buildDmgRequests, BuildChainFlavor flavor, IAuthenticodeSigningService signer, IJetNugetPackageManager nugetter, IBuildTaskHost tasker, ILogger logger);
    private static void HdiutilExecute(string verb, CommandLineBuilderJet cmdl, TreatStderr treatStderr);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Dmg.SitFileArtifact : BuildOutputFileArtifact {
    public SitFileArtifact(ImmutableFileItem file);
    public SitFileArtifact(IStructuredStorage sstg);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Install.Dmg.SitFileInputDirArtifact>")]
public class JetBrains.Application.BuildScript.Install.Dmg.SitFileInputDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath SitFileInputDir;
    public SitFileInputDirArtifact(FileSystemPath sitFileInputDir);
    public SitFileInputDirArtifact(string text);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDir : object {
    [NotNullAttribute]
public ImmutableFileItem WrittenPathsList;
    public ExtractPackagesToBinDir(ImmutableFileItem writtenPathsList);
}
public static class JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks : object {
    private static string ExtractedFromPackagesToFileName;
    private static UInt32 OptionConcurrentDecompressions;
    private static UInt32 OptionConcurrentDiskReads;
    private static UInt32 OptionConcurrentDiskWrites;
    public static int OptionEachDecompressionBufferSize;
    private static ExtractPackagesToBinDirTasks();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks/<ExtractInputPackagesAsync>d__5")]
[BuildStepAttribute]
public static Task`1<ExtractPackagesToBinDir> ExtractInputPackagesAsync(Lifetime lifetime, ProductBinariesDirArtifact bindir, InputPackage[] ipkgs, AllAssembliesOnEverything assembliesOnEverything, IEnumerable`1<ExtractPackageRelativePath> relativePaths, Optional`1<ExtractPackagesToBinDirBehaviorArtifact> maybeBehavior, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks/<PreExtractPackagesOnPrepareWorkingCopy>d__6")]
[BuildStepAttribute]
public static Task`1<LocalPrepareWorkingCopy> PreExtractPackagesOnPrepareWorkingCopy(Lifetime lifetime, ProductBinariesDirArtifact bindir, RetrievedPackageReferenceArtifact[] retrsRaw, InputPackage[] inputs, IEnumerable`1<ExtractPackageRelativePath> relativePaths, AllAssembliesOnEverything assembliesOnEverything, Optional`1<ExtractPackagesToBinDirBehaviorArtifact> maybeBehavior, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks/<RunStreamingDecompressionAndWritesAsync>d__7`1")]
public static Task RunStreamingDecompressionAndWritesAsync(Lifetime lifetime, ImmutableArray`1<FileWriteOperation`1<TPackage>> operations, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks/<ScheduleWriteOperations>d__8`1")]
[PureAttribute]
public static Task`1<ImmutableArray`1<FileWriteOperation`1<TPackage>>> ScheduleWriteOperations(Lifetime lifetime, IReadOnlyCollection`1<TPackage> packages, FileSystemPath pathTargetDir, IEnumerable`1<ExtractPackageRelativePath> extractPackageRelativePaths, Optional`1<ExtractPackagesToBinDirBehaviorArtifact> maybeBehavior, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks/<ExecuteOperationAsync>d__9`1")]
private static Task`1<OpIterationResult> ExecuteOperationAsync(FileWriteOperation`1<TPackage> operation, OperationsContext opsctx, OpIterationMode itmode);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks/<ExecuteOperationAsync_Disk>d__10`1")]
private static Task`1<OpIterationResult> ExecuteOperationAsync_Disk(FileWriteOperation`1<TPackage> operation, OperationsContext opsctx, OpIterationMode opIterationMode, IList`1<TaskCompletionSource`1<ValueTuple`2<Lazy`1<Byte[]>, UInt32>>> bufferchannel);
}
public class JetBrains.Application.BuildScript.Install.FileAssociationEntry : object {
    public bool IsPrivateType;
    public string Extension;
    [CanBeNullAttribute]
public string TypeNameHuman;
    [CanBeNullAttribute]
public string VerbNameHuman;
    [CanBeNullAttribute]
public RelativePath IconFile;
    public Nullable`1<int> IconIndex;
    private FileAssociationEntry(bool isPrivateType, string extension, string typeNameHuman, string verbNameHuman, RelativePath iconFile, Nullable`1<int> iconIndex);
    private FileAssociationEntry(CsexpReader reader);
    public static FileAssociationEntry RegisterPrivateType(string extension, string typeNameHuman, Nullable`1<int> iconIndex, RelativePath iconFile);
    public static FileAssociationEntry RegisterAssociation(string extension, string typeNameHuman, string verbNameHuman, Nullable`1<int> iconIndex, RelativePath iconFile);
    public static FileAssociationEntry RegisterAnyFileAssociation(string verbNameHuman, Nullable`1<int> iconIndex, RelativePath iconFile);
    public static FileAssociationEntry Load(CsexpReader reader);
    public static void Save(FileAssociationEntry entry, CsexpWriter writer);
    public static void Serialize(CsexpArchive ar, String& Extension, Boolean& IsPrivateType, String& TypeNameHuman, String& VerbNameHuman, RelativePath& IconFile, Nullable`1& IconIndex);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath : object {
    [NotNullAttribute]
public JetPackageIdentity PackageIdentity;
    [NotNullAttribute]
public RelativePath FolderToExtract;
    public ExtractPackageRelativePath(JetPackageIdentity identity, RelativePath relativePath);
    [BuildStepAttribute]
public static ExtractPackageRelativePath[] EmptyDefault();
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehavior : Enum {
    public int value__;
    public static ExtractPackagesToBinDirBehavior ExtractCopyToBinDir;
    public static ExtractPackagesToBinDirBehavior StrictExtract;
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehaviorArtifact/BehaviorArtifactSerializer")]
public class JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehaviorArtifact : object {
    public ExtractPackagesToBinDirBehavior Behavior;
    public ExtractPackagesToBinDirBehaviorArtifact(ExtractPackagesToBinDirBehavior behavior);
    public virtual string ToString();
    private static ExtractPackagesToBinDirBehaviorArtifact Parse(string text);
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings {
    public abstract virtual Task`1<ImmutableArray`1<ImmutableFileItem>> AddFilesAsync(OuterLifetime lifetime, IReadOnlyCollection`1<IHaveJetNugetPackage> packages);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagingsEx : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagingsEx/<AddFilesAsync>d__0")]
[ExtensionAttribute]
public static Task`1<List`1<ImmutableFileItem>> AddFilesAsync(IAddFilesToDeploymentPackagings[] emitters, Lifetime lifetime, IReadOnlyCollection`1<IHaveJetNugetPackage> nupkgs, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallAppConfig : object {
    public static string AppConfigFileName;
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public InstallAppConfig(SubplatformProjectWrapper subandproj);
    public InstallAppConfig(SubplatformName subplatform, RelativePath projectInSubplatform);
    private static InstallAppConfig();
    [NotNullAttribute]
public static InstallAppConfig[] FromBuildScriptClassInThatProject(AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.InstallAppConfig/<PickForPackaging>d__6")]
[BuildStepAttribute]
public static Task`1<SubplatformFileForPackagingFast[]> PickForPackaging(Lifetime lifetime, InstallAppConfig[] requests, AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir, IBuildTaskHost tasker, ILogger logger);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExeBootstrapper : BuildOutputFileArtifact {
    public InstallerExeBootstrapper(ImmutableFileItem file);
    public InstallerExeBootstrapper(IStructuredStorage sstg);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(InstallerExeBootstrapper[] bootstrappers);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExeBootstrapperForVsMarketplace : BuildOutputFileArtifact {
    public InstallerExeBootstrapperForVsMarketplace(ImmutableFileItem file);
    public InstallerExeBootstrapperForVsMarketplace(IStructuredStorage sstg);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(InstallerExeBootstrapperForVsMarketplace[] bootstrappers);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedLight : BuildOutputFileArtifact {
    public LauncherConfig Configuration;
    public InstallerExePackedLight(IStructuredStorage sstg);
    public InstallerExePackedLight(StuffedLauncherArtifact launcher);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(InstallerExePackedLight[] installerExePackedLight);
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWeb : BuildOutputFileArtifact {
    public LauncherConfig Configuration;
    public InstallerExePackedWeb(IStructuredStorage sstg);
    public InstallerExePackedWeb(StuffedLauncherArtifact launcher);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(InstallerExePackedWeb[] installerExePackedWeb);
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedChannelId : BuildOutputFileArtifact {
    public LauncherConfig Configuration;
    [NotNullAttribute]
public string ChannelId;
    public InstallerExePackedWithEmbeddedChannelId(IStructuredStorage sstg);
    public InstallerExePackedWithEmbeddedChannelId(StuffedLauncherArtifact launcher, string channelId);
    [BuildStepAttribute]
public static IEnumerable`1<InstallersPortablesZipsDeployableFile> ToDeployable(InstallerExePackedWithEmbeddedChannelId[] installers);
    public virtual string ToString();
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackages : BuildOutputFileArtifact {
    public LauncherConfig Configuration;
    public InstallerExePackedWithEmbeddedPackages(IStructuredStorage sstg);
    public InstallerExePackedWithEmbeddedPackages(StuffedLauncherArtifact launcher);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(InstallerExePackedWithEmbeddedPackages installerExePackedWithEmbedded);
    public virtual string ToString();
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesDescriptor : object {
    [DataMemberAttribute]
public int Wave;
    [DataMemberAttribute]
public string InstallerExeFileName;
    [DataMemberAttribute]
public DateTime SubscriptionCheckDate;
    [DataMemberAttribute]
public string PrereleaseSuffix;
    [DataMemberAttribute]
public string PresentableVersion;
    [DataMemberAttribute]
public string TechnicalVersion;
    [DataMemberAttribute]
public string ShellPackageVersion;
    [DataMemberAttribute]
public string InstallerExeSha256;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesForToolbox : BuildOutputFileArtifact {
    public LauncherConfig Configuration;
    public InstallerExePackedWithEmbeddedPackagesForToolbox(IStructuredStorage sstg);
    public InstallerExePackedWithEmbeddedPackagesForToolbox(StuffedLauncherArtifact launcher);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(InstallerExePackedWithEmbeddedPackagesForToolbox installerExePackedWithEmbedded);
    public virtual string ToString();
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesForToolboxJSon : BuildOutputFileArtifact {
    public InstallerExePackedWithEmbeddedPackagesForToolboxJSon(IStructuredStorage sstg);
    public InstallerExePackedWithEmbeddedPackagesForToolboxJSon(ImmutableFileItem jsonFile);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(InstallerExePackedWithEmbeddedPackagesForToolboxJSon installerExePackedWithEmbedded);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.InstallersPortablesZipsDeployableFile : BuildOutputFileArtifact {
    public InstallersPortablesZipsDeployableFile(IStructuredStorage sstg);
    public InstallersPortablesZipsDeployableFile(ImmutableFileItem file);
}
public enum JetBrains.Application.BuildScript.Install.IsolationOptions : Enum {
    public int value__;
    public static IsolationOptions NotIsolated;
    public static IsolationOptions IsolatedToProductBinariesDir;
    public static IsolationOptions PerUserInstall;
}
public abstract class JetBrains.Application.BuildScript.Install.Launcher.BaseTechnicalLauncherNamingScheme : object {
    [NotNullAttribute]
protected static string GetExeFileSuffix(JetRuntimeId runtimeId);
}
public class JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase : LauncherArtifactBase {
    public LaunchersCompilationIdentityHash CompileIdentity;
    protected CleanLauncherArtifactBase(LauncherConfig config, ImmutableFileItem executable, ImmutableFileItem programDatabase, LauncherNetCoreSupplementaryFiles netCoreSupplementaryFiles, LaunchersCompilationIdentityHash compileidentity);
    protected CleanLauncherArtifactBase(IStructuredStorage storage);
    protected virtual void GetObjectDataCore(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private void <GetObjectDataCore>b__3_0(Stream stream);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherCompileTimeArtifact : CleanLauncherArtifactBase {
    public CleanLauncherCompileTimeArtifact(LauncherConfig config, ImmutableFileItem executable, ImmutableFileItem programDatabase, LauncherNetCoreSupplementaryFiles netCoreSupplementaryFiles, LaunchersCompilationIdentityHash compileidentity);
    public CleanLauncherCompileTimeArtifact(IStructuredStorage storage);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.CleanLaunchersCompileTimePackedCacheArtifact : BuildOutputPackageFileArtifact {
    public CleanLaunchersCompileTimePackedCacheArtifact(IJetNugetPackage package);
    public CleanLaunchersCompileTimePackedCacheArtifact(IStructuredStorage sstg);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks : object {
    public static string LauncherFilenamePrefix;
    private static string LauncherModeCore;
    public static LauncherConfig[] SupportedConfigurations;
    private static IDictionary`2<string, LauncherConfig> ourMapExpectedFileSuffices;
    private static RelativePath SourcesSubdirMsil;
    public static RelativePath LauncherSourcesDirRel { get; }
    private static CleanLauncherTasks();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks/<ExpandLauncherFilesForPackaging>d__5")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformFileForPackagingFast> ExpandLauncherFilesForPackaging(CleanLauncherCompileTimeArtifact[] launchers, AllAssembliesOnSources allassSrc);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks/<PackCompiledForCachingAsync>d__6")]
public static Task`1<IJetNugetPackage> PackCompiledForCachingAsync(Lifetime lifetime, CleanLauncherArtifactBase[] compiled, IJetNugetPackageManager nugetter, SdkLicenseAgreementArtifact sdkLicenseAgreementArtifact);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks/<PackCompileTimeForCachingAsync>d__7")]
[BuildStepAttribute]
public static Task`1<CleanLaunchersCompileTimePackedCacheArtifact> PackCompileTimeForCachingAsync(Lifetime lifetime, CleanLauncherCompileTimeArtifact[] compiled, IJetNugetPackageManager nugetter, SdkLicenseAgreementArtifact sdkLicenseAgreementArtifact);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks/<ProduceCleanLauncherCompileTimeArtifacts>d__8")]
[BuildStepAttribute]
public static Task`1<CleanLauncherCompileTimeArtifact[]> ProduceCleanLauncherCompileTimeArtifacts(Lifetime lifetime, AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> maybehomedir, Optional`1<ProductBinariesDirArtifact> maybebindir, SubplatformsInAllInputPackages inputs, Optional`1<SkipLocalCompilationArtifact> skiplocal, IAuthenticodeSigningService signer, IInvokeMsbuild invokemsbuild, IBuildTaskHost tasker, IJetNugetPackageManager nugetter, BuildChainFlavor flavor, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks/<CompileLaunchersAsync>d__9")]
private static Task`1<CleanLauncherCompileTimeArtifact[]> CompileLaunchersAsync(Lifetime lifetime, IReadOnlyList`1<ImmutableFileItem> sourcesCommon, LaunchersCompilationIdentityHash identity, IAuthenticodeSigningService signer, IInvokeMsbuild invokemsbuild, BuildChainFlavor flavor, IBuildTaskHost tasker, ILogger logger);
    private static LaunchersCompilationIdentityHash ExtractCompilationIdentityFromLauncherExecutable(ImmutableFileItem fi, OnError onerror);
    internal static TLauncherArtifact[] ExtractFromBinarySubplatform(SubplatformOnPackageEx subCore, CtorDelegate`1<TLauncherArtifact> ctor, ILogger logger);
    private static ImmutableArray`1<ValueTuple`2<ImmutableFileItem, ImmutableArray`1<byte>>> GatherSourceCode(ProductHomeDirArtifact productHomeDirArtifact, IJetNugetPackageManager nugetter, ILogger logger);
    public static RelativePath get_LauncherSourcesDirRel();
    private static bool IsFullSet(IReadOnlyCollection`1<TLauncherArtifact> launchers, Nullable`1<LaunchersCompilationIdentityHash> identityExpected, OnError onerror);
    private static LaunchersCompilationIdentityHash MakeIdentityHash(ImmutableArray`1<ValueTuple`2<ImmutableFileItem, ImmutableArray`1<byte>>> sources, MsbuildToolsetPackageIdentity toolsetMsbuild, LauncherConfig[] configs);
    [NotNullAttribute]
private static string MakeLauncherFileNameWithoutExtension(Nullable`1<LauncherConfig> configUnlessCore);
    private static ValueTuple`2<ImmutableFileItem, ImmutableArray`1<byte>> MakeStableNugetConfigOnPackageSources(IJetNugetPackageManager nugetter);
    [NotNullAttribute]
private static ImmutableFileItem RenderManagedAttributesWithLauncherResources(IReadOnlyCollection`1<NativeResourceForLauncher> resources);
    private static TLauncherArtifact[] TossLauncherFiles(IReadOnlyCollection`1<ImmutableFileItem> fis, CtorDelegate`1<TLauncherArtifact> ctor, OnError onerror, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks/<TryDownloadCachedPackageAsync>d__21")]
[ItemCanBeNullAttribute]
private static Task`1<CleanLauncherCompileTimeArtifact[]> TryDownloadCachedPackageAsync(Lifetime lifetime, LaunchersCompilationIdentityHash identity, IJetNugetPackageManager nugetter, ILogger logger);
    [CanBeNullAttribute]
private static CleanLauncherCompileTimeArtifact[] TryReadFromBinDir(Optional`1<ProductBinariesDirArtifact> maybebindir, LaunchersCompilationIdentityHash identity, Optional`1<SkipLocalCompilationArtifact> skiplocal, ILogger logger);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.CompileTimeLauncherHosts : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.CompileTimeLauncherHosts/<EmbedCompileTimeLauncherHosts>d__0")]
[BuildStepAttribute]
public static Task`1<Tuple`2<IList`1<SubplatformFileForPackagingFast>, IList`1<SubplatformComponentForPackagingFast>>> EmbedCompileTimeLauncherHosts(Lifetime lifetime, StandaloneLauncherHostInPackageArtifact[] hosts, ICollection`1<CleanLauncherCompileTimeArtifact> cleanlaunchers, IAuthenticodeSigningService signer, BuildChainFlavor buildflavor, IJetNugetPackageManager nugetter, SkiaHelper skiahelper, IBuildTaskHost tasker, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.EntryLocalSingleExeStandaloneLauncherStuffed : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.EntryLocalSingleExeStandaloneLauncherStuffed/<Enter>d__0")]
[BuildStepAttribute]
public static Task`1<Tuple`2<EntryLocalSingleExeStandaloneLauncherStuffed, BuildOutputFileArtifact[]>> Enter(Lifetime lifetime, ISourceStageBinStageBuild build);
}
public class JetBrains.Application.BuildScript.Install.Launcher.GuiLauncherNamingScheme : object {
    [NotNullAttribute]
public static ILauncherNamingScheme Instance;
    private static GuiLauncherNamingScheme();
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public interface JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme {
    [NotNullAttribute]
public abstract virtual string GetExeFileSuffix(LauncherConfig config);
}
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherArtifactBase : object {
    public LauncherConfig Configuration;
    [NotNullAttribute]
public ImmutableFileItem Executable;
    [CanBeNullAttribute]
public ImmutableFileItem ProgramDatabase;
    public LauncherNetCoreSupplementaryFiles NetCoreSupplementaryFiles;
    protected LauncherArtifactBase(LauncherConfig configuration, ImmutableFileItem executable, ImmutableFileItem programDatabase, LauncherNetCoreSupplementaryFiles netCoreSupplementaryFiles);
    protected LauncherArtifactBase(IStructuredStorage storage);
    public static int Comparison(LauncherArtifactBase x, LauncherArtifactBase y);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
    protected virtual void GetObjectDataCore(IStructuredStorage storage);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine : object {
    [ExtensionAttribute]
public static CommandLineBuilderJet AppendLauncherSwitch(CommandLineBuilderJet cmdl, Name name);
    [ExtensionAttribute]
public static CommandLineBuilderJet AppendLauncherSwitch(CommandLineBuilderJet cmdl, Mode value);
    [ExtensionAttribute]
public static CommandLineBuilderJet AppendLauncherSwitch(CommandLineBuilderJet cmdl, Target value);
    [ExtensionAttribute]
public static CommandLineBuilderJet AppendLauncherSwitch(CommandLineBuilderJet cmdl, Name name, string value);
    public static string RenderUnescaped(Mode value);
    public static string RenderUnescaped(Target value);
    public static string RenderUnescaped(Name name);
    public static string RenderUnescaped(Name name, string value);
}
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder : object {
    private bool myIsFrozen;
    [NotNullAttribute]
private IDictionary`2<Name, string> myMapNameToValue;
    [NotNullAttribute]
public IReadOnlyDictionary`2<Name, string> AllArgs { get; }
    private bool JetBrains.Util.Collections.IFreezable.IsFrozen { get; }
    public LauncherCommandLineBuilder(LauncherCommandLineBuilder other);
    public IReadOnlyDictionary`2<Name, string> get_AllArgs();
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArg(Mode mode);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArg(Target target);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArg(Name name, string value);
    public LauncherCommandLineBuilder AddArg(Name name);
    public LauncherCommandLineBuilder AddArgs(LauncherCommandLineBuilder other);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArgsForRunningManagedMethodByAssemblyName(Expression`1<Func`1<object>> method);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArgsForRunningManagedMethodByAssemblyName(MemberInfo method);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArgsForRunningManagedMethodByAssemblyName(AssemblyQualifiedTypeMemberName method);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArgsForRunningManagedMethodByAssemblyName(string sAssemblyName, string sTypeName, string sMethodName);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArgsForRunningManagedMethodByAssemblyPath(Expression`1<Func`1<object>> method);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArgsForRunningManagedMethodByAssemblyPath(MemberInfo method);
    [NotNullAttribute]
public LauncherCommandLineBuilder AddArgsForRunningManagedMethodByAssemblyPath(FileSystemPath pathAssemblyFile, string sTypeName, string sMethodName);
    public void RenderAsCommandLineAndFreeze(CommandLineBuilderJet target);
    [NotNullAttribute]
public NativeResourceForLauncher RenderAsResourceAndFreeze();
    public virtual string ToString();
    private void AssertIsNotFrozen();
    private sealed virtual override void JetBrains.Util.Collections.IFreezable.Freeze();
    private sealed virtual override bool JetBrains.Util.Collections.IFreezable.get_IsFrozen();
}
[IsReadOnlyAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig/LauncherConfigSerializer")]
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig : ValueType {
    [NotNullAttribute]
public JetMsilableRuntimeId MsilableRuntimeId;
    public LauncherSubsystem Subsystem;
    private LauncherConfig(JetMsilableRuntimeId msilableRuntimeId, LauncherSubsystem subsystem);
    public static LauncherConfig CreateMsil(LauncherSubsystem subsystem);
    public static LauncherConfig CreateNative(JetRuntimeId runtimeId, LauncherSubsystem subsystem);
    public sealed virtual int CompareTo(LauncherConfig other);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LauncherConfig other);
    [NotNullAttribute]
[PureAttribute]
public string GetDefaultExeFileSuffix();
    public virtual int GetHashCode();
    public static bool op_Equality(LauncherConfig left, LauncherConfig right);
    public static bool op_Inequality(LauncherConfig left, LauncherConfig right);
    public static LauncherConfig Parse(string text);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherConfigEx : object {
    [ExtensionAttribute]
public static bool IsInSet(LauncherConfig config, StandaloneLauncherCpuSets set);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherHostHelpers : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherHostHelpers/<StuffStandaloneLauncherHost>d__0")]
[NotNullAttribute]
public static Task`1<ValueTuple`2<IReadOnlyCollection`1<StuffedLauncherArtifact>, ProductNameAndVersionArtifact>> StuffStandaloneLauncherHost(Lifetime lifetime, StandaloneLauncherHostBase host, ICollection`1<CleanLauncherArtifactBase> launchersClean, ICollection`1<NativeResourceForLauncher> resources, LauncherCommandLineBuilder lcmdl, IAuthenticodeSigningService signer, IEnumerable`1<object> components, object nameSuffix, BuildVersionSuffix buildVersionSuffix, BuildChainFlavor buildflavor, IJetNugetPackageManager nugetter, SkiaHelper skiahelper, IBuildTaskHost tasker, ILogger logger, string installationHive);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller : object {
    public static string LauncherFilenamePrefix;
    private static LocalLazy`1<ResourceValues> GlobalResourceValues;
    private static LauncherInstaller();
    [NotNullAttribute]
public static FileSystemPath FindLauncherExecutableAtRuntime(LauncherConfig config);
    public static bool IsHostComponentsResourcePresentInExecutable();
    public static bool IsProductContentResourcePresentInExecutable();
    public static NativeResourceForLauncher MakeHostComponentsNativeResource(ICollection`1<object> allcomponents);
    public static NativeResourceForLauncher PackageProductContent(ICollection`1<ProductContentFile> filesToInstall, LauncherCommandLineBuilder cmdl, ILogger logger);
    [NotNullAttribute]
public static SerializedValuesResolver ReadHostComponentsFromNativeExecutable(Lifetime lifetime);
    [NotNullAttribute]
public static Stream ReadProductContentResourceFromStuffedExecutable();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller/<StuffLauncherAsync>d__9")]
public static Task`1<StuffedLauncherArtifact> StuffLauncherAsync(OuterLifetime lifetime, CleanLauncherArtifactBase cleanLauncherArtifact, ICollection`1<NativeResourceForLauncher> resources, ProductNameAndVersionArtifact product, IAuthenticodeSigningService signer, BuildChainFlavor buildflavor, SkiaHelper skiaHelper, IJetNugetPackageManager nugetter, IBuildTaskHost tasker, ILogger logger, string sPreferredFileNameNoExt, ILauncherNamingScheme namingscheme, RelativePath netCoreAppBinaryRelativePath, string macOsEntitlements);
    private static NativeResourceForLauncher PackageProductContent_Itss(ICollection`1<ProductContentFile> filesToInstall, ILogger logger);
    [NotNullAttribute]
private static NativeResourceForLauncher PackageProductContent_Zip(ICollection`1<ProductContentFile> filesToInstall, ILogger logger);
    [NotNullAttribute]
private static ICollection`1<NativeResourceForLauncher> StuffLauncher_AddIdentityNativeResource(ICollection`1<NativeResourceForLauncher> resources, CleanLauncherArtifactBase cleanLauncherArtifact);
    private static ICollection`1<NativeResourceForLauncher> StuffLauncher_AddProductInfoNativeResourcesIfMissing(ICollection`1<NativeResourceForLauncher> original, ProductNameAndVersionArtifact product);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller/<StuffLauncher_AddSplashNativeResourceIfMissing>d__14")]
[NotNullAttribute]
private static Task`1<ICollection`1<NativeResourceForLauncher>> StuffLauncher_AddSplashNativeResourceIfMissing(OuterLifetime lifetime, ICollection`1<NativeResourceForLauncher> resources, ProductNameAndVersionArtifact product, DpiResolution resolution, NativeResourceTypeAndName resid, SkiaHelper skiahelper, IJetNugetPackageManager nugetter, IBuildTaskHost tasker, ILogger logger);
    private static void StuffLauncher_WriteIcons(IEnumerable`1<NativeResourceForLauncher> icons, FileSystemPath pathExe, ILogger logger);
    private static void StuffLauncher_WriteResource(NativeResourceForLauncher resource, Void* hRes, FileSystemPath pathExe, ILogger logger);
    private static void StuffLauncher_WriteVersionInfo(FileSystemPath pathExe, ProductNameAndVersionArtifact product, string sOriginalfileName, ILogger logger);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper : object {
    private ILookup`2<LauncherConfig, CleanLauncherArtifactBase> mapConfigToCleanLauncher;
    private AllAssembliesOnEverything myAllass;
    private BuildChainFlavor myBuildflavor;
    private IJetNugetPackageManager myNugetter;
    private ProductHomeDirArtifact myProductHomeDir;
    private IAuthenticodeSigningService mySigner;
    private SkiaHelper mySkiaHelper;
    private IBuildTaskHost myTasker;
    public LauncherInstallHelper(CleanLauncherCompileTimeArtifact[] cleans, NetCoreCleanLauncherArtifact[] netCoreCleans, IAuthenticodeSigningService signer, IBuildTaskHost tasker, BuildChainFlavor buildflavor, AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter, SkiaHelper skiaHelper);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper/<EmbedInSubplatformAsync>d__9")]
[NotNullAttribute]
public Task`1<ImmutableArray`1<SubplatformFileForPackagingFast>> EmbedInSubplatformAsync(OuterLifetime lifetime, StuffingParams lparams, ILogger logger);
    [NotNullAttribute]
public Task`1<ImmutableArray`1<StuffedLauncherArtifact>> StuffLaunchersAsync(OuterLifetime lifetime, StuffingParams lparams, ILogger logger);
}
public class JetBrains.Application.BuildScript.Install.Launcher.LauncherNamingScheme : object {
    [NotNullAttribute]
private IDictionary`2<LauncherConfig, string> myMap;
    public LauncherNamingScheme(IDictionary`2<LauncherConfig, string> map);
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherSplashes : object {
    private static bool OptionDebugRendering;
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherSplashes/<MakeSplashFileWithSkiaAsync>d__1")]
[NotNullAttribute]
public static Task`1<ImmutableByteStream> MakeSplashFileWithSkiaAsync(OuterLifetime lifeOuter, string sCompanyName, string sProductName, SkiaHelper skiahelper, DpiResolution resolution, IJetNugetPackageManager nugetter, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.Launcher.LauncherSplashes/<Run>d__2")]
[UsedImplicitlyAttribute]
public static Task`1<EntryStdAfx> Run(Lifetime lifetime, SkiaHelper skiahelper, BuildStaThreadHelper sta, IJetNugetPackageManager nugetter, IBuildTaskHost tasker, ILogger logger);
    [CompilerGeneratedAttribute]
internal static void <MakeSplashFileWithSkiaAsync>g__SetTextSize|1_3(object skPaint, double fontsizePt, DpiResolution resolution);
    [CompilerGeneratedAttribute]
internal static ImmutableByteStream <MakeSplashFileWithSkiaAsync>g__SaveAsPng|1_7(object skSurface);
}
public enum JetBrains.Application.BuildScript.Install.Launcher.LauncherSubsystem : Enum {
    public int value__;
    public static LauncherSubsystem Windows;
    public static LauncherSubsystem Console;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Install.Launcher.LauncherSubsystemEx : object {
    public static string ILSuffix;
    public static string WindowsArm64Suffix;
    public static string WindowsX64Suffix;
    public static string WindowsX86SSuffix;
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetExeFileSuffix(JetRuntimeId runtimeId, LauncherSubsystem subSystem);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetExeFileSuffix(LauncherSubsystem subsystem);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.NetCoreCleanLauncherArtifact : CleanLauncherArtifactBase {
    private static string AppHostFileNamePrefix;
    private static string AppHostAppBinaryRelativePathWaterMark;
    private static Byte[] ourAppHostAppBinaryRelativePathWaterMarkAsBytes;
    private static JetPackageIdentity ourDotNetCoreLauncherPackageId;
    public NetCoreCleanLauncherArtifact(LauncherConfig config, ImmutableFileItem executable);
    public NetCoreCleanLauncherArtifact(IStructuredStorage storage);
    private static NetCoreCleanLauncherArtifact();
    [BuildStepAttribute]
public static Task`1<NetCoreCleanLauncherArtifact[]> ExtractNetCoreCleanLaunchersFromPackage(IJetNugetPackageManager nugetter, ILogger logger);
    [NotNullAttribute]
public static ImmutableFileItem StuffLauncher_WriteAppName(ImmutableFileItem fileExe, RelativePath relAppBinary);
    [NotNullAttribute]
public static AuthenticodeSigningParameters StuffLauncher_MacOsCodeSignParameters(string entitlements);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherHostArtifact : object {
    public StandaloneLauncherHostBase StandaloneLauncherHost;
    public SingleExeStandaloneLauncherHostArtifact(StandaloneLauncherHostBase wrappedLauncher);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherStuffed : BuildOutputFileArtifact {
    public LauncherConfig Configuration;
    public ProductNameAndVersionArtifact ProductNameAndVersionAsStuffed;
    public ProductNameAndVersionArtifact ProductNameAndVersionAsSupplied;
    public SingleExeStandaloneLauncherStuffed(ImmutableFileItem file, LauncherConfig configuration, ProductNameAndVersionArtifact productNameAndVersionArtifactAsSupplied, ProductNameAndVersionArtifact productNameAndVersionArtifactAsStuffed);
    public SingleExeStandaloneLauncherStuffed(IStructuredStorage sstg);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile[] ToDeployable(SingleExeStandaloneLauncherStuffed[] singleExes);
    public virtual string ToString();
    protected virtual void GetObjectDataCore(IStructuredStorage sstg);
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets : Enum {
    public UInt32 value__;
    public static StandaloneLauncherCpuSets NativeWinNT;
    public static StandaloneLauncherCpuSets Managed;
    public static StandaloneLauncherCpuSets Suppress32Bit;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostArtifact : StandaloneLauncherHostBase {
    public StandaloneLauncherHostArtifact(AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod);
    public StandaloneLauncherHostArtifact(ZonePart zone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact product, ByteArrayIconGroup icon, AssemblyQualifiedTypeMemberName managedEntryPointMethod);
    public StandaloneLauncherHostArtifact(AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, RasterDeviceImages splashScreen, string marketingVersionString, ImmutableArray`1<ByteArrayIconGroup> extraIcons, ImmutableArray`1<FileAssociationEntry> fileAssociations, ImmutableArray`1<DirectoryAssociationEntry> directoryAssociations, Version verNetFxRequired, ILauncherNamingScheme namingscheme, Nullable`1<StandaloneLauncherCpuSets> cpusets, string exename);
    public virtual string ToString();
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostArtifact WithMarketingVersionString(string marketingVersionString);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostArtifact WithSplash(RasterDeviceImages splash);
}
public abstract class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase : object {
    public StandaloneLauncherCpuSets CpuSets;
    [NotNullAttribute]
public AssemblyQualifiedTypeName EnvironmentZone;
    [CanBeNullAttribute]
public string ExecutableName;
    public ImmutableArray`1<ByteArrayIconGroup> ExtraIcons;
    public ImmutableArray`1<FileAssociationEntry> FileAssociations;
    public ImmutableArray`1<DirectoryAssociationEntry> DirectoryAssociations;
    [NotNullAttribute]
public AssemblyQualifiedTypeMemberName ManagedEntryPointMethod;
    [NotNullAttribute]
public ILauncherNamingScheme NamingScheme;
    [CanBeNullAttribute]
public Version NetFxRequiredVersion;
    [NotNullAttribute]
public ProductNameAndVersionArtifact ProductNameAndVersion;
    [CanBeNullAttribute]
public RasterDeviceImages SplashScreen;
    public bool StartMenuLink;
    public LauncherSubsystem Subsystem;
    [CanBeNullAttribute]
public string MarketingVersionString;
    [NotNullAttribute]
public WindowBrandingArtifact WindowBranding;
    protected StandaloneLauncherHostBase(AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, RasterDeviceImages splashScreen, string marketingVersionString, ImmutableArray`1<ByteArrayIconGroup> extraIcons, ImmutableArray`1<FileAssociationEntry> fileAssociations, ImmutableArray`1<DirectoryAssociationEntry> directoryAssociations, Version verNetFxRequired, ILauncherNamingScheme namingscheme, Nullable`1<StandaloneLauncherCpuSets> cpusets, string exename);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostInPackageArtifact : StandaloneLauncherHostBase {
    [NotNullAttribute]
public SubplatformName Subplatform;
    public StandaloneLauncherHostInPackageArtifact(SubplatformName subplatform, AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod);
    public StandaloneLauncherHostInPackageArtifact(SubplatformName subplatform, ZonePart zone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact product, ByteArrayIconGroup icon, AssemblyQualifiedTypeMemberName managedEntryPointMethod);
    private StandaloneLauncherHostInPackageArtifact(SubplatformName subplatform, AssemblyQualifiedTypeName environmentZone, LauncherSubsystem subsystem, ProductNameAndVersionArtifact productNameAndVersion, WindowBrandingArtifact windowBranding, AssemblyQualifiedTypeMemberName managedEntryPointMethod, bool makeShortcut, RasterDeviceImages splashScreen, string marketingVersionString, ImmutableArray`1<ByteArrayIconGroup> extraIcons, ImmutableArray`1<FileAssociationEntry> fileAssociations, ImmutableArray`1<DirectoryAssociationEntry> directoryAssociations, Version verNetFxRequired, ILauncherNamingScheme namingscheme, Nullable`1<StandaloneLauncherCpuSets> cpusets, string exename);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithCpuSets(StandaloneLauncherCpuSets cpusets);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithExecutableName(string exename);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithExtraIcons(ByteArrayIconGroup[] icongroups);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithFileAssociations(FileAssociationEntry[] assocs);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithDirectoryAssociations(DirectoryAssociationEntry[] assocs);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithMarketingVersionString(string marketingVersionString);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithNamingScheme(ILauncherNamingScheme namingscheme);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithSplash(RasterDeviceImages splash);
    [PureAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public StandaloneLauncherHostInPackageArtifact WithStartMenuLink(bool isStartMenuLink);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostOsIntegration : object {
    private static string StreamName;
    private bool myIsWithStartMenuLink;
    private string myMarketingVersionString;
    private ProductNameAndVersionArtifact myProductNameAndVersion;
    [NotNullAttribute]
public IList`1<FileAssociationEntry> FileAssociations;
    [NotNullAttribute]
public IList`1<DirectoryAssociationEntry> DirectoryAssociations;
    [NotNullAttribute]
public IList`1<LauncherLocation> Launchers;
    public bool IsEmpty { get; }
    public bool IsWithStartMenuLink { get; }
    [NotNullAttribute]
public string MarketingVersionString { get; }
    [NotNullAttribute]
public ProductNameAndVersionArtifact ProductNameAndVersion { get; }
    public StandaloneLauncherHostOsIntegration(ProductNameAndVersionArtifact productNameAndVersion, string marketingVersionString, IEnumerable`1<FileAssociationEntry> fileAssociations, IEnumerable`1<DirectoryAssociationEntry> directoryAssociations, bool isWithStartMenuLink, IEnumerable`1<LauncherLocation> launchers);
    public StandaloneLauncherHostOsIntegration(StandaloneLauncherHostBase host, IEnumerable`1<LauncherLocation> launchers);
    public StandaloneLauncherHostOsIntegration(IStructuredStorage sstg);
    private static StandaloneLauncherHostOsIntegration();
    public bool get_IsEmpty();
    public bool get_IsWithStartMenuLink();
    public string get_MarketingVersionString();
    public ProductNameAndVersionArtifact get_ProductNameAndVersion();
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    private void SerializeCore(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__19_0(CsexpWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.Launcher.StuffedLauncherArtifact : LauncherArtifactBase {
    public StuffedLauncherArtifact(LauncherConfig config, ImmutableFileItem executable, ImmutableFileItem programDatabase, LauncherNetCoreSupplementaryFiles netCoreSupplementaryFiles);
    public StuffedLauncherArtifact(IStructuredStorage storage);
}
public class JetBrains.Application.BuildScript.Install.Launcher.TechnicalConsoleLauncherNamingScheme : BaseTechnicalLauncherNamingScheme {
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public class JetBrains.Application.BuildScript.Install.Launcher.TechnicalGuiLauncherNamingScheme : BaseTechnicalLauncherNamingScheme {
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
public class JetBrains.Application.BuildScript.Install.Launcher.WrappedNamingScheme : object {
    private ILauncherNamingScheme myNested;
    private Func`2<string, string> myWrap;
    public WrappedNamingScheme(ILauncherNamingScheme nested, Func`2<string, string> wrap);
    [NotNullAttribute]
public static ILauncherNamingScheme PrefixWith(ILauncherNamingScheme nested, string prefix);
    private sealed virtual override string JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(LauncherConfig config);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.LocalInstallCommitPart : object {
    [BuildStepAttribute]
public static LocalInstallCommitPart LinkToLocalInstallParts(LocalInstallPart[] lips);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.LocalInstallPart : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Install.LocalInstallRootSuffix/LocalInstallRootSuffixSerializer")]
public class JetBrains.Application.BuildScript.Install.LocalInstallRootSuffix : object {
    [NotNullAttribute]
public string RootSuffix;
    public LocalInstallRootSuffix(string rootSuffix);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.LocalInstallWithPostInstallStepsPart : object {
    [BuildStepAttribute]
public static LocalInstallWithPostInstallStepsPart LinkToLocalInstallParts(LocalInstallPart[] lips, LocalInstallCommitPart[] licps);
}
public static class JetBrains.Application.BuildScript.Install.LocalMakePackedInstallerTasks : object {
    [BuildStepAttribute]
public static EntryLocalMakePackedInstaller InstallPackedInstaller(ProductBinariesDirArtifact bindir, InstallerExePackedWithEmbeddedPackages installerExePacked, InstallerExePackedWithEmbeddedPackagesForToolbox installerExePackedForToolbox, InstallerExePackedWithEmbeddedPackagesForToolboxJSon installerExePackedForToolboxJson, SbomInJson sbom, ICollection`1<InstallerExeBootstrapper> bootstrappers, ICollection`1<InstallerExeBootstrapperForVsMarketplace> vsMarketplaces, ICollection`1<InstallerExePackedLight> lightInstallers, ICollection`1<InstallerExePackedWeb> webInstallers, ICollection`1<InstallerExePackedWithEmbeddedChannelId> marketingInstallers, CdnGalleryPackagesJson galleryPackagesJson, AllPackagesZip allPackagesZip, ProductMainPackagesJson productMainPackagesJson, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact : object {
    public IsolationOptions IsolationOptions;
    public LocalRegisterIsolationOptionsArtifact(IsolationOptions isolationOptions);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsOverrideArtifact : object {
    public IsolationOptions IsolationOptions;
    public LocalRegisterIsolationOptionsOverrideArtifact(IStructuredStorage storage);
    public LocalRegisterIsolationOptionsOverrideArtifact(IsolationOptions isolationOptions);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_1(BinaryWriter writer);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDir : object {
    [NotNullAttribute]
public ImmutableFileItem WrittenPathsList;
    public LocalSavePackagesToBinDir(ImmutableFileItem writtenPathsList);
}
public class JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDirTasks : BaseSavePackagesTasks {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDirTasks/<DoLocalSavePackagesToBinDir>d__0")]
[BuildStepAttribute]
public static Task`1<LocalSavePackagesToBinDir> DoLocalSavePackagesToBinDir(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, InputPackage[] inputPackages, AllAssembliesOnEverything allass, Optional`1<ProductBinariesDirArtifact> maybeBindir, Optional`1<SavePackagesParameters> maybeParams);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDirTasks/<WritePackageFilesAsync>d__1")]
private static Task`1<FileSystemPath[]> WritePackageFilesAsync(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, IReadOnlyCollection`1<InputPackage> ipkgs, FileSystemPath dir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDirTasks/<WritePropsFilesAsync>d__2")]
private static Task`1<FileSystemPath[]> WritePropsFilesAsync(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, IReadOnlyCollection`1<ImmutableFileItem> files, FileSystemPath dir);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Install.LocalSaveZippedPackagesToBinDir : object {
}
public class JetBrains.Application.BuildScript.Install.LocalSaveZippedPackagesToBinDirTasks : BaseSavePackagesTasks {
    private static string PackagesZipFileName;
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.LocalSaveZippedPackagesToBinDirTasks/<DoLocalSavePackagesToBinDir>d__1")]
[BuildStepAttribute]
public static Task`1<LocalSaveZippedPackagesToBinDir> DoLocalSavePackagesToBinDir(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, InputPackage[] inputPackages, AllAssembliesOnEverything allass, DeployedFilesNamingScheme naming, Optional`1<ProductBinariesDirArtifact> maybeBindir, Optional`1<SavePackagesParameters> maybeParams);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.LocalSaveZippedPackagesToBinDirTasks/<WritePackageFilesAsync>d__2")]
private static Task WritePackageFilesAsync(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, IReadOnlyCollection`1<InputPackage> ipkgs, FileSystemPath dir, RelativePath zipName);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.LocalSaveZippedPackagesToBinDirTasks/<WritePropsFilesAsync>d__3")]
private static Task WritePropsFilesAsync(Lifetime lifetime, IBuildTaskHost tasker, ILogger logger, IReadOnlyCollection`1<ImmutableFileItem> files, FileSystemPath dir, RelativePath zipName);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.LocalUninstallArtifact : object {
}
public static class JetBrains.Application.BuildScript.Install.MsiTransmitter : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Install.MsiTransmitter/<PatchThroughPackagedMsiArtifactAsync>d__0")]
[BuildStepAttribute]
public static Task`1<Tuple`2<SharedMsiArtifact[], LocalInstallPart>> PatchThroughPackagedMsiArtifactAsync(Lifetime lifetime, InputPackage[] ipkgs, ExtractPackageRelativePath[] packageFolders, IBuildTaskHost tasker, ILogger logger);
}
public static class JetBrains.Application.BuildScript.Install.NugetTargetFrameworks : object {
    private static NugetTargetFrameworks();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.PackagedMsi.SharedMsiArtifact : object {
    public RelativePath InPackageLocation;
    public JetArchitecture Architecture;
    public SubplatformName SubplatformName;
    public RelativePath PackageLocation;
    public bool NoAutoUninstall;
    public SharedMsiArtifact(IStructuredStorage structuredStorage);
    [BuildStepAttribute]
public static SubplatformComponentForPackaging[] EmbedInPackages(SharedMsiArtifact[] msies, AllAssembliesOnSources allassSrc);
    public SharedMsiArtifact WithPackageLocation(RelativePath packageLocation);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    private void Serialize(CsexpArchive ar);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__9_0(CsexpWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.PostInstallExecutableArtifact : object {
    public static string KeyPostInstallExecutable;
    public string PresentableName;
    public string Description;
    public RelativePath RegisterExecutablePath;
    public string RegisterExecutableArgs;
    public RelativePath UnregisterExecutablePath;
    public string UnregisterExecutableArgs;
    public PostInstallExecutableArtifact(IStructuredStorage structuredStorage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    public virtual string ToString();
    [BuildStepAttribute]
public static PostInstallExecutableArtifact[] EmptyDefault();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__9_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__9_1(BinaryWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.ProductMainPackagesJson : BuildOutputFileArtifact {
    public ProductMainPackagesJson(ImmutableFileItem file);
    public ProductMainPackagesJson(IStructuredStorage sstg);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(ProductMainPackagesJson packagesJson);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Install.SavePackagesParameters>")]
public class JetBrains.Application.BuildScript.Install.SavePackagesParameters : object {
    public static XNamespace Xns;
    public bool IsWritingPackageReferenceProps;
    public bool IsWritingDeployScript;
    [CanBeNullAttribute]
public JetHashSet`1<SubplatformName> Subplatforms;
    [CanBeNullAttribute]
public FileSystemPath TargetDirOverride;
    public SavePackagesParameters(JetHashSet`1<SubplatformName> subplatforms, FileSystemPath targetDirOverride, bool isWritingPackageReferenceProps, bool isWritingDeployScript);
    public SavePackagesParameters(string text);
    private static SavePackagesParameters();
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.SbomInJson : BuildOutputFileArtifact {
    public SbomInJson(ImmutableFileItem file);
    public SbomInJson(IStructuredStorage sstg);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(SbomInJson sbom);
}
public class JetBrains.Application.BuildScript.Install.StorageContentWriter : object {
    private Lifetime myLifetime;
    private IStorage myStorage;
    public StorageContentWriter(Lifetime lifetime, FileSystemPath stotagePath);
    public void WriteFile(Stream streamRead, string partName);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Install.VersionJSon : BuildOutputFileArtifact {
    public VersionJSon(IStructuredStorage sstg);
    public VersionJSon(ImmutableFileItem jsonFile);
    public virtual string ToString();
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(VersionJSon versionJSon);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact : object {
    public string Name;
    public RelativePath RelToHomeDir { get; }
    [BuildStepAttribute]
public IntermediateOutputFolderPerProfileArtifact(ProfileNameArtifact profile);
    public RelativePath get_RelToHomeDir();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.BuildScript.IProductInfo {
    public string ProductTechnicalName { get; }
    public string ProductPresentableName { get; }
    public string CompanyNameLegal { get; }
    public string CompanyName { get; }
    public JetSemanticVersion Version { get; }
    public string VersionMarketingString { get; }
    public string ProductUrl { get; }
    public string ProductTwitterUrl { get; }
    public string ProductUrlEvaluate { get; }
    public ByteArrayIconGroup ProductIcon { get; }
    public DateTime BuildDate { get; }
    public DateTime SubscriptionCheckDate { get; }
    public abstract virtual string get_ProductTechnicalName();
    public abstract virtual string get_ProductPresentableName();
    public abstract virtual string get_CompanyNameLegal();
    public abstract virtual string get_CompanyName();
    public abstract virtual JetSemanticVersion get_Version();
    public abstract virtual string get_VersionMarketingString();
    public abstract virtual string get_ProductUrl();
    public abstract virtual string get_ProductTwitterUrl();
    public abstract virtual string get_ProductUrlEvaluate();
    public abstract virtual ByteArrayIconGroup get_ProductIcon();
    public abstract virtual DateTime get_BuildDate();
    public abstract virtual DateTime get_SubscriptionCheckDate();
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.ISourceStageBinStageBuild {
    [NotNullAttribute]
public abstract virtual Task`1<ImmutableArray`1<TObjective>> RunSourceStageAsync(OuterLifetime lifetime, Action`1<IBuildRunnerRequest> FAdjustRequest);
    [NotNullAttribute]
public abstract virtual Task`1<ImmutableArray`1<BuildOutputFileArtifact>> RunSourceStageAsync(OuterLifetime lifetime, AssemblyQualifiedTypeName binaryStageObjective, Action`1<IBuildRunnerRequest> FAdjustRequest);
    [NotNullAttribute]
public abstract virtual Task`1<ICollection`1<TObjective>> RunTwoStageAsync(OuterLifetime lifetime);
    [NotNullAttribute]
public abstract virtual Task`1<ICollection`1<BuildOutputFileArtifact>> RunTwoStageAsync(OuterLifetime lifetime, AssemblyQualifiedTypeName binaryStageObjective);
}
public static class JetBrains.Application.BuildScript.JetBrainsBundle : object {
    public static string Id;
    public static int Version;
    private static JetBrainsBundle();
}
public static class JetBrains.Application.BuildScript.LiveTemplateCompiler : object {
    private static string CompilerPackageName;
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.LiveTemplateCompiler/<CompileLiveTemplates>d__1")]
[BuildStepAttribute]
public static Task`1<Tuple`2<LocalPrepareWorkingCopy, CompileSubplatformsInput>> CompileLiveTemplates(AllAssembliesOnSources allAssembliesOnSources, LocalRestoredPackageReferenceArtifact[] restoredRefs, DotNetCoreSdkHelper sdkhelper, ILogger logger);
    private static Task RunCompiler(LiveTemplateItem liveTemplateItem, FileSystemPath compilerExec, FileSystemPath dotnetHost, ILogger logger);
    private static IEnumerable`1<LiveTemplateItem> ExtractLiveTemplateItems(SubplatformProjectWrapper projectFile);
    private static IEnumerable`1<FileSystemPath> SearchFiles(FileSystemPath root, string pattern);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.LiveTemplateCompiler/<SearchRecursive>d__6")]
private static IEnumerable`1<FileSystemPath> SearchRecursive(FileSystemPath root, String[] parts, int depth);
}
public static class JetBrains.Application.BuildScript.LocalCleanupConflictingAssembliesAndJetMetadata : object {
    public static void DeleteProblematicFilesFromBinDir(AllAssembliesOnEverything allass, ProductBinariesDirArtifact productBinariesDirArtifact, ILogger logger);
    private static void DeleteProblematicAssemblyFiles(IList`1<Subplatform> subplatforms, ICollection`1<DirectoryEntryData> deds, ILogger logger);
    private static void DeleteProblematicJetMetadata(IList`1<Subplatform> subplatforms, ICollection`1<DirectoryEntryData> deds, ILogger logger);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.LocalInstallTargetArtifact/LocalInstallTargetArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.LocalInstallTargetArtifact/LocalInstallTargetArtifactSerializer")]
public class JetBrains.Application.BuildScript.LocalInstallTargetArtifact : object {
    [NotNullAttribute]
public VsHive VsHive;
    [NotNullAttribute]
public static LocalInstallTargetArtifact DefaultFallback { get; }
    public LocalInstallTargetArtifact(VsHive hive);
    public static LocalInstallTargetArtifact get_DefaultFallback();
    [NotNullAttribute]
public static LocalInstallTargetArtifact FromString(string str);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.LocalizationFilesArtifact : BuildOutputFileArtifact {
    public LocalizationFilesArtifact(ImmutableFileItem file);
    public LocalizationFilesArtifact(IStructuredStorage sstg);
    [BuildStepAttribute]
public static LocalizationFilesArtifact CollectLocalizationFiles(ProductHomeDirArtifact homeDir, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.LocalizationFilesArtifact/<CollectReSharperLocFiles>d__3")]
private static IEnumerable`1<ImmutableFileItem> CollectReSharperLocFiles(FileSystemPath homeDir);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.LocalizationFilesArtifact/<CollectRiderLocFiles>d__4")]
private static IEnumerable`1<ImmutableFileItem> CollectRiderLocFiles(FileSystemPath homeDir);
    private static string GetModuleName(FileSystemPath pathWithLocFiles);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact : object {
    [NotNullAttribute]
public ICollection`1<PackageReferenceArtifact> PackageReferences;
    [NotNullAttribute]
public RelativePath RestoredLocation;
    [NotNullAttribute]
public JetNugetPackageMetadata RetrievedPackageManifest;
    public LocalRestoredPackageReferenceArtifact(ICollection`1<PackageReferenceArtifact> packageReferences, JetNugetPackageMetadata retrievedPackageManifest, RelativePath restoredLocation);
    [BuildStepAttribute]
public static LocalRestorePackages Aggregate(LocalRestoredPackageReferenceArtifact[] locref);
    public virtual string ToString();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.LocalRestoredPackages : object {
    private Dictionary`2<RestoredPackageKey, LocalRestoredPackageReferenceArtifact> MapLocalRestoredBySub;
    private Dictionary`2<JetPackageIdentity, IJetNugetPackage> MapRetrievedByIdentity;
    private AllAssembliesOnSources myAllAssembliesOnSources;
    private LocalRestoredPackageReferenceArtifact[] myRestoreds;
    public LocalRestoredPackages(AllAssembliesOnSources allassSrc, RetrievedPackageReferenceArtifact[] retrieveds, LocalRestoredPackageReferenceArtifact[] restoreds, ILogger logger);
    public FileSystemPath GetRestoreLocation(SubplatformName subplatform, JetPackageIdentity package, OnError onerror);
    public IJetNugetPackage GetRetrievedPackage(JetPackageIdentity package, OnError onerror);
    private FileSystemPath GetRestoreLocation_Fail(SubplatformName subplatform, JetPackageIdentity package, OnError onerror);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.LocalRestorePackages : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.BuildScript.MonoRuntimeConfig : object {
    public static string MonoRuntimeBootstrapperFileName;
    public static string MonoDownloadProjectBootstrapperFileName;
    public static string DotNetSdkCmdBootstrapperFileName;
    public static string NuGetConfigBootstrapperFileName;
    public static bool IsMonoRuntimeAvailableForThisEnvironment { get; }
    private static MonoRuntimeConfig();
    public static bool get_IsMonoRuntimeAvailableForThisEnvironment();
    public static FileSystemPath GetFullPathToMonoRuntimeBootstrapperFile(ProductHomeDirArtifact homedir);
    public static ICollection`1<FileSystemPath> GetMonoRuntimeBootstrapperRequiredFiles(ProductHomeDirArtifact homedir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.MonoRuntimeConfig/<GetMonoRuntimeExecutableForThisEnvironmentAsync>d__8")]
public static Task`1<FileSystemPath> GetMonoRuntimeExecutableForThisEnvironmentAsync(OuterLifetime lifetime, ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter, ITaskHost tasker);
}
public static class JetBrains.Application.BuildScript.NugetApplicationPackageConvention : object {
    [NotNullAttribute]
public static RelativePath GetJetMetadataEffectivePath(IHaveJetNugetPackage nupkg);
    [NotNullAttribute]
public static RelativePath GetJetMetadataEffectivePath(ApplicationPackageArtifact apppkg);
    [NotNullAttribute]
public static RelativePath GetJetMetadataEffectivePath(Subplatform subplatform);
    public static string GetSubplatformPackageId(Subplatform subplatform);
    [NotNullAttribute]
public static JetSemanticVersion GetSubplatformPackageVersion(Subplatform subplatform, BuildVersionSuffix dt);
    [NotNullAttribute]
public static VersionRange GetSubplatformReferencedPackageVersionRange(JetSemanticVersion subplatformVersion);
    [NotNullAttribute]
public static VersionRange GetSubplatformReferencedPackageVersionRange(Subplatform subplatform, BuildVersionSuffix buildSuffix);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.NugetApplicationPackageTasks : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.NugetApplicationPackageTasks/<CollectPackageReferencesFromSourceProjects>d__0")]
[BuildStepAttribute]
public static Task`1<PackageReferenceArtifact[]> CollectPackageReferencesFromSourceProjects(Lifetime lifetime, AllAssembliesOnSources allass, PackageVersionLocks verlocks, IBuildTaskHost tasker, ILogger logger, TargetEnvironmentArtifact targetEnvironmentArtifact);
    [ExtensionAttribute]
public static bool IsRegularManagedRefs(PackageReferenceFlags flags);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.NugetApplicationPackageTasks/<LocalRestoreReferencedNugetPackages>d__2")]
[BuildStepAttribute]
public static Task`1<LocalRestoredPackageReferenceArtifact[]> LocalRestoreReferencedNugetPackages(Lifetime lifetime, RetrievedPackageReferenceArtifact[] pkgsRaw, ProductHomeDirArtifact homedir, LocalRestoreNugetPackagesCentralCacheArtifact centralcache, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.NugetApplicationPackageTasks/<RetrieveNugetPackageReferences>d__3")]
[BuildStepAttribute]
public static Task`1<RetrievedPackageReferenceArtifact[]> RetrieveNugetPackageReferences(Lifetime lifetime, PackageReferenceArtifact[] references, IJetNugetPackageManager packman, InputPackage[] inputPackages, IBuildTaskHost tasker, ILogger logger);
    public static void TryCleanOutOldMetadataFiles(AllAssembliesOnSources allassembliesSrc, FileSystemPath binDir, ILogger logger);
}
public static class JetBrains.Application.BuildScript.NuGetHelpers.JetPackageEqualityComparer : object {
    public static IEqualityComparer`1<string> IdComparer;
    public static IEqualityComparer`1<IPackageName> Id;
    public static IEqualityComparer`1<IPackageName> IdAndVersion;
    public static IEqualityComparer`1<IPackageMetadata> IdV4;
    public static IEqualityComparer`1<JetPackageIdentity> JetId;
    private static JetPackageEqualityComparer();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.LocalRestoreNugetPackagesCentralCacheArtifact : object {
    [NotNullAttribute]
public LocalRestoreNugetPackagesCentralCache CentralCache;
    public LocalRestoreNugetPackagesCentralCacheArtifact(LocalRestoreNugetPackagesCentralCache centralcache);
    [BuildStepAttribute]
[NotNullAttribute]
public static LocalRestoreNugetPackagesCentralCacheArtifact CreateInLocalAppDataIfSupported();
    public virtual string ToString();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetCompatibilityProvider : CompatibilityProvider {
    public NuGetCompatibilityProvider(IFrameworkNameProvider mappings);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetFrameworkMapping : object {
    private IFrameworkMappings myFrameworkMappingsImplementation;
    public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierSynonyms { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierShortNames { get; }
    public IEnumerable`1<FrameworkSpecificMapping> ProfileShortNames { get; }
    public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> EquivalentFrameworks { get; }
    public IEnumerable`1<FrameworkSpecificMapping> EquivalentProfiles { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> SubSetFrameworks { get; }
    public IEnumerable`1<OneWayCompatibilityMappingEntry> CompatibilityMappings { get; }
    public IEnumerable`1<string> NonPackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> PackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> EquivalentFrameworkPrecedence { get; }
    public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> ShortNameReplacements { get; }
    public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> FullNameReplacements { get; }
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierSynonyms();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierShortNames();
    public sealed virtual IEnumerable`1<FrameworkSpecificMapping> get_ProfileShortNames();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_EquivalentFrameworks();
    public sealed virtual IEnumerable`1<FrameworkSpecificMapping> get_EquivalentProfiles();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_SubSetFrameworks();
    public sealed virtual IEnumerable`1<OneWayCompatibilityMappingEntry> get_CompatibilityMappings();
    public sealed virtual IEnumerable`1<string> get_NonPackageBasedFrameworkPrecedence();
    public sealed virtual IEnumerable`1<string> get_PackageBasedFrameworkPrecedence();
    public sealed virtual IEnumerable`1<string> get_EquivalentFrameworkPrecedence();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_ShortNameReplacements();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_FullNameReplacements();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NugetFrameworkNameProvider : FrameworkNameProvider {
    public NugetFrameworkNameProvider(IEnumerable`1<IFrameworkMappings> mappings, IEnumerable`1<IPortableFrameworkMappings> portableMappings);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetFrameworkReducer : FrameworkReducer {
    public NuGetFrameworkReducer(IFrameworkNameProvider mappings, IFrameworkCompatibilityProvider compat);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell : object {
    public static string ContentFileItemsSubdirForNetCoreTfx;
    public static ILogger Logger;
    private static NugetHelpersShell();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell/<ExtractBinDirFilesFromPackagesAsync>d__2`1")]
public static Task`1<ImmutableArray`1<ImmutableFileItem>> ExtractBinDirFilesFromPackagesAsync(Lifetime lifetime, IEnumerable`1<THavePackage> packages, ITaskHost tasker, Action`1<ExtractedFileConflict> λOnConflict);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell/<ExtractBinDirFilesFromPackagesCoreAsync>d__3`1")]
public static Task`1<ImmutableArray`1<FileFromPackage`1<THavePackage>>> ExtractBinDirFilesFromPackagesCoreAsync(Lifetime lifetime, IEnumerable`1<THavePackage> packages, ITaskHost tasker, Action`1<ExtractedFileConflict> λOnConflict);
    public static List`1<TPackage> FindPackagesAndTheirReferencesForJetRuntimeIds(IEnumerable`1<TPackage> packages, IEnumerable`1<string> idsPackage, IEnumerable`1<JetRuntimeId> rids, OnError onError);
    public static Task`1<IReadOnlyCollection`1<TPackage>> FindPackagesWithManagedSymbolsAsync(Lifetime lifetime, IReadOnlyCollection`1<TPackage> packagesWithBinaries, IEnumerable`1<TPackage> allpackages, ITaskHost tasker);
    [ExtensionAttribute]
public static ICollection`1<TValue> ForEachPackageJetMetadata(IEnumerable`1<TPackage> thіs, GetJetMetadataMethod method, Func`3<TPackage, SerializedValuesResolver, TValue> λ, OnError onerror, IBindTypeByName typebinder);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell/<ForEachPackageJetMetadataAsync>d__7`2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use SelectOnTaskHostAsync on packages, and nupkg.GetJetMetadata inside. This way it will work correctly in parallel on our pool, and no special helper method is needed.")]
public static Task`1<IReadOnlyCollection`1<TValue>> ForEachPackageJetMetadataAsync(IEnumerable`1<TPackage> thіs, Lifetime lifetime, GetJetMetadataMethod method, ITaskHost tasker, Func`3<TPackage, SerializedValuesResolver, TValue> λ, OnError onerror, IBindTypeByName typebinder);
    public static SerializedValuesResolver GenerateFakeJetMetadata(Lifetime lifetime, IHaveJetNugetPackage package, OnError onerror, ImmutableArray`1<FileFromPackage`1<THavePackage>> contentitems);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetContentEntriesWithJetMetadata2 wherever possible.")]
public static IReadOnlyCollection`1<ImmutableFileItem> GetContentEntriesWithJetMetadata(IHaveJetNugetPackage thіs, GetJetMetadataMethod metadatamethod);
    [ExtensionAttribute]
public static ImmutableArray`1<FileFromPackage`1<THavePackage>> GetContentEntriesWithJetMetadata2(THavePackage thіs, GetJetMetadataMethod metadatamethod);
    [ExtensionAttribute]
public static SerializedValuesResolver GetJetMetadata(IHaveJetNugetPackage thіs, Lifetime lifetime, OnError onerror, GetJetMetadataMethod method, IBindTypeByName typebinder);
    [ExtensionAttribute]
public static JetPackageMetadata GetJetPackageMetadata(IHaveJetNugetPackage pkg, ILogger logger);
    [ExtensionAttribute]
public static bool HasJetMetadata(IHaveJetNugetPackage thіs, OnError onerror, GetJetMetadataMethod method);
    [ExtensionAttribute]
public static bool IsReferencingWavePackage(IHaveJetNugetPackage thіs);
    [BuildStepAttribute]
public static NugetConfigFileLocalPath LocateNugetConfigUnderProductHomeDir(ProductHomeDirArtifact homedir, ILogger logger);
    public static Func`3<IHaveJetNugetPackage, IEnumerable`1<PackageDependency>, IEnumerable`1<PackageDependency>> PackageDependencyFilterForJetRuntimeIds(IEnumerable`1<JetRuntimeId> rids);
    public static Optional`1<NugetConfigFile> ReadConfigFileInHomeDir(Optional`1<ProductHomeDirArtifact> homedir);
    [ExtensionAttribute]
public static bool ShouldHaveJetMetadataInPackage(IHaveJetNugetPackage thіs);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.NuGetHelpers.NuGetPortableFrameworkMappings : DefaultPortableFrameworkMappings {
}
public static class JetBrains.Application.BuildScript.NuGetHelpers.PackageBuilderPatcher : object {
    public static PackageBuilder Create();
}
public class JetBrains.Application.BuildScript.Obfuscation.MetadataWriter.IlMutableMetadataAccess : object {
    private Stream myOriginalStream;
    [CompilerGeneratedAttribute]
private ILReaderMetadataAccess <ReaderAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Replacement> <Replacements>k__BackingField;
    public ILReaderMetadataAccess ReaderAccess { get; }
    public IList`1<Replacement> Replacements { get; }
    public IlMutableMetadataAccess(Stream stream, DateTime timestamp);
    [CompilerGeneratedAttribute]
public ILReaderMetadataAccess get_ReaderAccess();
    [CompilerGeneratedAttribute]
public IList`1<Replacement> get_Replacements();
    public void Replace(int offset, string name);
    public void ReplaceBytes(int offset, Byte[] bytes);
    public void WriteToFolder(Stream streamOutput);
}
public class JetBrains.Application.BuildScript.Obfuscation.MetadataWriter.Replacement : object {
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ReplaceBytes>k__BackingField;
    public int Offset { get; }
    public Byte[] ReplaceBytes { get; }
    public Replacement(int offset, Byte[] replaceText);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public Byte[] get_ReplaceBytes();
}
public class JetBrains.Application.BuildScript.Obfuscation.NamesCollection : object {
    private HashSet`1<string> myUsedNames;
    private JetHashSet`1<string> myExclusionSet;
    private Dictionary`2<string, string> myNamesChanges;
    private Random myRandom;
    public NamesCollection(HashSet`1<string> usedNames, JetHashSet`1<string> exclusionSet);
    public void Dump(StreamWriter writer);
    public string Rename(string name);
    private bool IsNoramalIdent(string name);
    private string GenerateNewName(string nameRoot);
    private string Substitute(string name, string newNameRoot, int offset);
    public string GetNameRoot(string name);
    public string GetNameRoot(string name, Int32& offset);
}
public class JetBrains.Application.BuildScript.Obfuscation.Obfuscator : object {
    private List`1<IMetadataAssembly> myLibraries;
    private List`1<IMetadataAssembly> myUserAssemblies;
    private List`1<AssemblyData> myLibraryMetadataAccesses;
    private List`1<AssemblyData> myUserAssembliesMetadataAccesses;
    private JetHashSet`1<string> myExcludedStringsSet;
    private HashSet`1<string> myUsedNames;
    private NamesCollection myNamesCollection;
    private Dictionary`2<IMetadataAssembly, IlMutableMetadataAccess> myRelationMap;
    public IList`1<ImmutableFileItem> RewrittenFiles;
    public Obfuscator(Lifetime lifetime, ICollection`1<AssemblyFileAndKeyPair> libraryPaths, ICollection`1<AssemblyFileAndKeyPair> userAssemblies);
    private static bool IsUpToDate(IEnumerable`1<FileSystemPath> libraryPaths, IEnumerable`1<FileSystemPath> userAssemblies);
    private static FileSystemPath GetConfigPath(IEnumerable`1<FileSystemPath> libraryPaths, IEnumerable`1<FileSystemPath> userAssemblies);
    public void Dump(StreamWriter writer);
    public void Obfuscate();
    private void ApplyReplacementsToFiles();
    private void RenameRefs();
    private void RenameRefs(IMetadataAssembly assembly);
    private void RenameTypeRefs(IMetadataAssembly assembly);
    private void RenameMemberRefs(IMetadataAssembly assembly);
    private void RenameDefs();
    private void RenameTypeDefs(IMetadataAssembly assembly);
    private void RenameStringAtOffset(IMetadataAssembly assembly, ILReaderMetadataAccess access, int offset);
    private void RenameMemberDefs(IMetadataAssembly assembly);
    private int ToAbsolute(int offset, ILReaderMetadataAccess access);
    private void BuildExclusionList();
    private void ExcludeObfuscationAttrs(IMetadataAssembly assembly);
    private bool HasObfuscationAttributes(IMetadataEntity metadataMethod);
    private void ExcludeVirtualMethods(IMetadataAssembly assembly);
    private bool IsVirtual(IMetadataMethod metadataMethod);
    private void ExcludeUserDefs(IMetadataAssembly assembly, bool user);
    private bool IsExternal(MetadataToken methodToken, ILReaderMetadataAccess access);
    private void ExcludeToken(ILReaderMetadataAccess access, MetadataToken defToken, int skip);
    private void ExcludeInterfaceMethodImpls(IMetadataAssembly assembly);
    private void GetUniqueNames(IMetadataAssembly assembly);
    public void WriteResults();
    private void LoadMemberRefs(IMetadataAssembly assembly);
    private void LoadTypeRefs(IMetadataAssembly assembly);
    private bool IsTypeOuterRef(ILReaderMetadataAccess access, int offset);
    public static ImmutableFileItem DiagnosticSerializeObfuscatorInputs(List`1<AssemblyFileAndKeyPair> assembliesToObfuscateLib, List`1<AssemblyFileAndKeyPair> assembliesToObfuscateUser);
    public static void DiagnosticDeserializeObfuscatorInputs(IStructuredStorage sstgInputs, List`1& assembliesToObfuscateLib, List`1& assembliesToObfuscateUser);
    [CompilerGeneratedAttribute]
internal static void <DiagnosticSerializeObfuscatorInputs>g__WriteList|40_2(IEnumerable`1<AssemblyFileAndKeyPair> list, IStructuredStorage sstgList);
    [CompilerGeneratedAttribute]
internal static List`1<AssemblyFileAndKeyPair> <DiagnosticDeserializeObfuscatorInputs>g__ReadList|41_0(IStructuredStorage sstgList);
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.OpenInIdeInternalModeApplicabilityArtifact/OpenInIdeInternalModeApplicabilityArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInIdeInternalModeApplicabilityArtifact/OpenInIdeInternalModeApplicabilityArtifactSerializer")]
public class JetBrains.Application.BuildScript.OpenInIdeInternalModeApplicabilityArtifact : object {
    public bool CanSetInternalMode;
    public OpenInIdeInternalModeApplicabilityArtifact(bool canSetInternalMode);
    private static OpenInIdeInternalModeApplicabilityArtifact Deserialize(string value);
    private static string Serialize(OpenInIdeInternalModeApplicabilityArtifact value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioBuildSolutionArtifact/OpenInVisualStudioBuildSolutionArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioBuildSolutionArtifact/OpenInVisualStudioBuildSolutionArtifactSerializer")]
public class JetBrains.Application.BuildScript.OpenInVisualStudioBuildSolutionArtifact : object {
    public bool BuildSolution;
    public OpenInVisualStudioBuildSolutionArtifact(bool buildSolution);
    private static OpenInVisualStudioBuildSolutionArtifact Deserialize(string value);
    private static string Serialize(OpenInVisualStudioBuildSolutionArtifact value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioInstallDirArtifact/OpenInVisualStudioInstallDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.OpenInVisualStudioInstallDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath InstallPath;
    public OpenInVisualStudioInstallDirArtifact(FileSystemPath installPath);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioInternalModeArtifact/OpenInVisualStudioInternalModeArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.OpenInVisualStudioInternalModeArtifact/OpenInVisualStudioInternalModeArtifactSerializer")]
public class JetBrains.Application.BuildScript.OpenInVisualStudioInternalModeArtifact : object {
    public bool InternalMode;
    public OpenInVisualStudioInternalModeArtifact(bool internalMode);
    private static OpenInVisualStudioInternalModeArtifact Deserialize(string value);
    private static string Serialize(OpenInVisualStudioInternalModeArtifact value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.OpenInVisualStudioVersionArtifact>")]
public class JetBrains.Application.BuildScript.OpenInVisualStudioVersionArtifact : object {
    [NotNullAttribute]
public string IdeNameAndVersion;
    public OpenInVisualStudioVersionArtifact(string value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata/PackageDefaultPrereleaseMetadataSerializer")]
public class JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata : object {
    [NotNullAttribute]
public string PrereleaseMetadata;
    [NotNullAttribute]
[BuildStepAttribute]
public static PackageDefaultPrereleaseMetadata DefaultValue { get; }
    public PackageDefaultPrereleaseMetadata(string prereleasemetadata);
    public static PackageDefaultPrereleaseMetadata get_DefaultValue();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PackageFileRoleEx : object {
    [ExtensionAttribute]
public static RelativePath GetBaseFolderInPackage(PackageFileRole thіs);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PackageReferenceArtifact : object {
    [NotNullAttribute]
public PackageReferenceInfo PackageReferenceInfo;
    public PackageReferenceFlags ReferencingContextFlags;
    [CanBeNullAttribute]
public RelativePath ReferencingProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName ReferencingSubplatformName;
    public PackageReferenceArtifact(PackageReferenceInfo pri, SubplatformName subplatform, RelativePath relProjectInSubplatform, PackageReferenceFlags flags);
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class JetBrains.Application.BuildScript.PackageReferencesFileInfo : ValueType {
    public FileFormat Format;
    public PackageReferenceFlags PackageReferenceFlags;
    [NotNullAttribute]
public RelativePath PathUnderProjectDir;
    [CanBeNullAttribute]
public RelativePath ReferencingProjectInSubplatform;
    [CanBeNullAttribute]
public SubplatformName ReferencingSubplatformName;
    public PackageReferencesFileInfo(SubplatformName referencingSubplatformName, RelativePath referencingProjectInSubplatform, RelativePath pathUnderProject, PackageReferenceFlags packageReferenceFlags, FileFormat format);
    [NotNullAttribute]
public ImmutableByteStream AddReferenceToFile(JetPackageIdentity pkgid, Nullable`1<bool> isDevOnly, ProductHomeDirArtifact homedir, ILogger logger);
    public static int Compare(PackageReferencesFileInfo& black, PackageReferencesFileInfo& white);
    public static PackageReferencesFileInfo FromMainSolutionPackageVersionLocks();
    [NotNullAttribute]
public static List`1<PackageReferencesFileInfo> FromSubplatform(SubplatformOnSources subplatform, IReadOnlyCollection`1<JetRuntimeId> rids);
    [NotNullAttribute]
public FileSystemPath GetFullPath(ProductHomeDirArtifact homedir);
    public ImmutableArray`1<PackageReferenceInfo> ReadPackageReferences(ProductHomeDirArtifact homedir, PackageVersionLocks verlocks, ILogger logger);
    public virtual string ToString();
    [NotNullAttribute]
public ImmutableByteStream UpdateReferenceInFile(string sPackageId, ProductHomeDirArtifact homedir, Nullable`1<bool> setIsDevelopmentDependency, JetSemanticVersion setVersion, ILogger logger);
    [NotNullAttribute]
private ImmutableByteStream AddReferenceToFile_Original(JetPackageIdentity pkgid, Nullable`1<bool> isDevOnly, ProductHomeDirArtifact homedir, ILogger logger);
    private ImmutableByteStream AddReferenceToFile_PackageLock(JetPackageIdentity pkgid, Nullable`1<bool> isDevOnly, ProductHomeDirArtifact homedir, ILogger logger);
    [NotNullAttribute]
private ImmutableByteStream AddReferenceToFile_TaskItem(JetPackageIdentity pkgid, Nullable`1<bool> isDevOnly, ProductHomeDirArtifact homedir, ILogger logger);
    private static ImmutableArray`1<PackageReferenceInfo> GetPackageReferencesFromMsbuildTaskItems(ImmutableByteStream stream, PackageVersionLocks verlocks, string fileForDiag, ILogger logger);
    private static ImmutableArray`1<PackageReferenceInfo> GetPackageReferencesFromPackageVersionLocks(ImmutableByteStream stream, string origin, ILogger logger);
    private static ImmutableArray`1<PackageReferenceInfo> GetPackageReferencesFromOriginal(FileSystemPath packagesConfigPath, PackageVersionLocks verlocks, string fileForDiag, ILogger logger);
    [NotNullAttribute]
private ImmutableByteStream UpdateReferenceInFile_Original(string sPackageId, ProductHomeDirArtifact homedir, Nullable`1<bool> setIsDevelopmentDependency, JetSemanticVersion setVersion, ILogger logger);
    private ImmutableByteStream UpdateReferenceInFile_PackageLock(string sPackageId, ProductHomeDirArtifact homedir, Nullable`1<bool> setIsDevelopmentDependency, JetSemanticVersion setVersion, ILogger logger);
    [NotNullAttribute]
private ImmutableByteStream UpdateReferenceInFile_TaskItem(string sPackageId, ProductHomeDirArtifact homedir, Nullable`1<bool> setIsDevelopmentDependency, JetSemanticVersion setVersion, ILogger logger);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadata>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadata>")]
[DataContractAttribute]
public class JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadata : object {
    [CanBeNullAttribute]
[DataMemberAttribute]
public JetSubplatformZoningSpecArtifact ZoningSpec;
    [CanBeNullAttribute]
[DataMemberAttribute]
public ProductInfo ProductInfo;
    [CanBeNullAttribute]
[DataMemberAttribute]
public JetSubplatformSpec Spec;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PackageSpecification.JetPackageMetadataEx : object {
    private static Regex PackageMetadataRegex;
    private static JetPackageMetadataEx();
    [ExtensionAttribute]
public static string ConvertToString(JetPackageMetadata metadata);
    [CanBeNullAttribute]
public static JetPackageMetadata ConvertFromString(string text);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec>")]
[DataContractAttribute]
public class JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec : object {
    [CanBeNullAttribute]
[DataMemberAttribute]
public string HostName;
    [CanBeNullAttribute]
[DataMemberAttribute]
public string ComplementedProductName;
    [CanBeNullAttribute]
[DataMemberAttribute]
public Int32[] VsHosts;
    [ObsoleteAttribute("Not supported. Kept to prevent deserialization errors.")]
[CanBeNullAttribute]
[DataMemberAttribute]
public string AutomaticFeature;
    [CanBeNullAttribute]
[DataMemberAttribute]
public string BinaryPackageFor;
    [CanBeNullAttribute]
[DataMemberAttribute]
public String[] BinaryPackageRuntimeIds;
    [DataMemberAttribute]
public ProductInstallSpec InstallOptions;
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpecEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Nullable`1<ImmutableArray`1<JetRuntimeId>> GetBinaryPackageRuntimeIds(JetSubplatformSpec spec);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact>")]
[DataContractAttribute]
public class JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact : object {
    [DataMemberAttribute]
public String[] Activates;
    [DataMemberAttribute]
public String[][] Requires;
    [DataMemberAttribute]
public JetZoneDefSpec[] ZoneDefs;
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.JetZoneDefSpec>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.JetZoneDefSpec>")]
public class JetBrains.Application.BuildScript.PackageSpecification.JetZoneDefSpec : object {
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public String[] Extends;
    [DataMemberAttribute]
public String[] Requires;
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.PackageSpecification.PackageZoningSpecTasks : object {
    private static KeyEnumerator`2<StringSource, ZonesAndTypes, StringSource, StringSource> myFEnumNameParts;
    private static PackageZoningSpecTasks();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PackageSpecification.PackageZoningSpecTasks/<EmitZoningSpecsForAllAssembliesAsync>d__1")]
[BuildStepAttribute]
public static Task`1<ICollection`1<SubplatformComponentForPackaging>> EmitZoningSpecsForAllAssembliesAsync(Lifetime lifetime, AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass, ICollection`1<PackagePartCatalogArtifact> catalogs, IBuildTimeRealizedAssemblyItemUnification unification, IBuildTaskHost tasker, ILogger logger);
    private static List`1<JetHashSet`1<ZonePart>> CalculatePackageZoneMinRequirements(PartCatalog catalog, PartCatalogZoneMapping zoning, JetHashSet`1<StringSource> hashAssembliesOur);
    private static void CalculatePackageZoneMinRequirements_AssemblyRecurseNames(TrieNode<StringSource, ZonesAndTypes> node, ZonePart[] current, List`1<JetHashSet`1<ZonePart>> output);
    private static void CalculatePackageZoneMinRequirements_AssemblyRecurseNames_AddSet(ZonePart[] current, List`1<JetHashSet`1<ZonePart>> output);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PackageSpecification.PackageZoningSpecTasks/<EmitZoningSpecForSubplatformAsync>d__5")]
private static Task`1<JetSubplatformZoningSpecArtifact> EmitZoningSpecForSubplatformAsync(Lifetime lifetime, SubplatformOnSources sub, AllAssembliesOnEverything allass, IBuildTimeRealizedAssemblyItemUnification unification, Dictionary`2<SubplatformName, AsyncLazy`1<CatalogTables>> mapSubToCatalogTables, ILogger logger);
    private static AsyncLazy`1<CatalogTables> LoadCatablesForSub(Lifetime lifetime, Subplatform sub, ILookup`2<SubplatformName, PrecalculatedPartCatalog> lookupCatalogs, ILogger logger);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.BuildScript.PackageSpecification.ProductInfo>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.BuildScript.PackageSpecification.ProductInfo>")]
[DataContractAttribute]
public class JetBrains.Application.BuildScript.PackageSpecification.ProductInfo : object {
    [DataMemberAttribute]
public string ProductTechnicalName;
    [DataMemberAttribute]
public string ProductPresentableName;
    [DataMemberAttribute]
public string ProductDetails;
    [DataMemberAttribute]
public string CompanyNameLegal;
    [DataMemberAttribute]
public string CompanyName;
    [DataMemberAttribute]
[CanBeNullAttribute]
public Version _VersionObsolete;
    [DataMemberAttribute]
public JetSemanticVersion Version;
    [DataMemberAttribute]
public string VersionMarketingString;
    [DataMemberAttribute]
public string ProductUrl;
    [DataMemberAttribute]
public string ProductTwitterUrl;
    [DataMemberAttribute]
public string ProductUrlEvaluate;
    [DataMemberAttribute]
public DateTime BuildDate;
    [DataMemberAttribute]
public DateTime SubscriptionCheckDate;
    [DataMemberAttribute]
public string Icon;
    private string JetBrains.Application.BuildScript.IProductInfo.ProductTechnicalName { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductPresentableName { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.CompanyNameLegal { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.CompanyName { get; }
    private JetSemanticVersion JetBrains.Application.BuildScript.IProductInfo.Version { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.VersionMarketingString { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductUrl { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductTwitterUrl { get; }
    private string JetBrains.Application.BuildScript.IProductInfo.ProductUrlEvaluate { get; }
    private ByteArrayIconGroup JetBrains.Application.BuildScript.IProductInfo.ProductIcon { get; }
    private DateTime JetBrains.Application.BuildScript.IProductInfo.BuildDate { get; }
    private DateTime JetBrains.Application.BuildScript.IProductInfo.SubscriptionCheckDate { get; }
    public string FullNameAndCompany();
    public string FullName();
    public virtual string ToString();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductTechnicalName();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductPresentableName();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_CompanyNameLegal();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_CompanyName();
    private sealed virtual override JetSemanticVersion JetBrains.Application.BuildScript.IProductInfo.get_Version();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_VersionMarketingString();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductUrl();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductTwitterUrl();
    private sealed virtual override string JetBrains.Application.BuildScript.IProductInfo.get_ProductUrlEvaluate();
    private sealed virtual override ByteArrayIconGroup JetBrains.Application.BuildScript.IProductInfo.get_ProductIcon();
    private sealed virtual override DateTime JetBrains.Application.BuildScript.IProductInfo.get_BuildDate();
    private sealed virtual override DateTime JetBrains.Application.BuildScript.IProductInfo.get_SubscriptionCheckDate();
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec : Enum {
    public int value__;
    public static ProductInstallSpec Is64bitOnly;
    public static ProductInstallSpec SupportsPlugins;
    public static ProductInstallSpec NGenAssemblies;
    public static ProductInstallSpec EtwHostService;
    public static ProductInstallSpec FileAssociations;
    public static ProductInstallSpec DirectoryAssociations;
    public static ProductInstallSpec DoNotInstallByDefault;
}
internal class JetBrains.Application.BuildScript.PackageSpecification.ZonesAndTypes : object {
    public bool IsWithParts;
    [CanBeNullAttribute]
public ZonePart[] Zones;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PackageVersionLocks : object {
    public static string MainSolutionPackageVersionsFileLocalName;
    [NotNullAttribute]
public ImmutableSortedDictionary`2<PackageVersionLockKey, PackageVersionLockMetadata> Versions;
    public PackageVersionLocks(ImmutableSortedDictionary`2<PackageVersionLockKey, PackageVersionLockMetadata> versions);
    private static PackageVersionLocks();
    [NotNullAttribute]
public static FileSystemPath GetMainSolutionPackageVersionsFilePath(ProductHomeDirArtifact homedir);
    [NotNullAttribute]
public static RelativePath GetMainSolutionPackageVersionsFileRelToHomeDir();
    public static PackageVersionLocks LoadFrom(XDocument xd, string origin, ILogger logger);
    [BuildStepAttribute]
public static PackageVersionLocks LoadFromDevKit(ProductHomeDirArtifact homedir, ILogger logger);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PackageVersionLocksEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static JetPackageIdentity LookupPackageIdentity(PackageVersionLocks verlocks, string id);
    [ExtensionAttribute]
public static ValueTuple`2<JetPackageIdentity, bool> LookupPackageIdentityAndIsDevOnly(PackageVersionLocks verlocks, string id);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Nullable`1<PackageVersionLockMetadata> TryLookup(PackageVersionLocks verlocks, string id);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.ParserEx : object {
    private static Parser`1<T> ParseSingleEnumValue(string name);
    public static Parser`1<T> CreateEnumParser();
    [ExtensionAttribute]
public static Parser`1<IEnumerable`1<T>> XUntil(Parser`1<T> parser, Parser`1<U> until);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.PerMachineInstallArtifact/PerMachineInstallArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PerMachineInstallArtifact/PerMachineInstallArtifactSerializer")]
public class JetBrains.Application.BuildScript.PerMachineInstallArtifact : object {
    public bool IsPerMachine;
    public PerMachineInstallArtifact(bool perMachine);
}
public static class JetBrains.Application.BuildScript.PreCompile.AssetsJsonGenerate : object {
    private static String[] TmpRids;
    private static string TargetFileLocalName;
    private static AssetsJsonGenerate();
    [BuildStepAttribute]
public static List`1<GeneratedMsbuildCustomXml> GenerateAssetsJsonFilesForFullSdkProjects(AllAssembliesOnSources assembliesOnSources, ProductHomeDirArtifact homeDir, Optional`1<ForceTargetFrameworkVersion> forceTargetFrameworkVersion);
    private static string RenderJsonText(TargetFrameworkId targetFramework);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.PreCompile.Autofix.AutofixAllowedDefineConstant>")]
public class JetBrains.Application.BuildScript.PreCompile.Autofix.AutofixAllowedDefineConstant : object {
    private static char TextSeparator;
    [NotNullAttribute]
public string DefineConstant;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public AutofixAllowedDefineConstant(SubplatformName sname, string define);
    public AutofixAllowedDefineConstant(string text);
    private static AutofixAllowedDefineConstant();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.PreCompile.Autofix.Helpers : object {
    public static bool IsCanPatchPackageConfig;
    private static Helpers();
    public static Nullable`1<bool> ApplyVersionLocksIfLive(PackageVersionLocks verlocks, ConcurrentDictionary`2<PackageVersionLockKey, PackageVersionLockMetadata> verlocksEdits, Optional`1<CanAutofixFilesOnDisk> isModeLive, ProductHomeDirArtifact homedir, ILogger logger);
    [ExtensionAttribute]
public static void ErrorOrWarning(ILogger logger, string message, Optional`1<CanAutofixFilesOnDisk> isModeLive);
    public static XmlElement FindUnconditionalProperty(XmlDocument xml, XmlNamespaceManager ns, string propertyname, bool bFailIfMissing);
    [ExtensionAttribute]
[NotNullAttribute]
public static XmlNamespaceManager GetMsbuildNs(XmlNode xml);
    public static XmlElement GetUnconditionalPropertyGroup(XmlDocument xml, XmlNamespaceManager ns);
    public static void RemoveAllProjectPropertiesInList(XmlDocument xml, IList`1<string> propsToRemove);
    [ExtensionAttribute]
public static void RemoveSelf(XmlNode xmlNode);
    public static Nullable`1<bool> SaveIfLive(XmlDocument xml, FileSystemPath file, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static Nullable`1<bool> SaveIfLive(XDocument xdoc, FileSystemPath file, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static Nullable`1<bool> SaveIfLive(ImmutableByteStream xmlstream, FileSystemPath file, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
}
[BuildHelperAttribute]
public interface JetBrains.Application.BuildScript.PreCompile.Autofix.IAutofixSingleProjectStage {
    public abstract virtual bool RunStage(SubplatformProjectWrapper subandproj, XDocument xdoc);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.Autofix.LocalAutofixProjectFiles : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.Autofix.LocalAutofixProjectFiles/<InvokeLocalAutofixProjectFiles>d__0")]
[BuildStepAttribute]
public static Task`1<Tuple`2<LocalAutofixProjectFiles, SourcesValidationResult>> InvokeLocalAutofixProjectFiles(Lifetime lifetime, INestedBuildRunner nester, Optional`1<CanAutofixFilesOnDisk> isModeLive, Optional`1<SkipSourcesValidation> skipval, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.Autofix.LocalAutofixProjectFiles/<SpawnCompileStageValidation>d__1")]
[BuildStepAttribute]
public static Task`1<EntryLocalAutofixFiles> SpawnCompileStageValidation(Lifetime lifetime, ISourceStageBinStageBuild nester, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
}
public static class JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers : object {
    public static string SdkMiniPackageName;
    public static JetPackageIdentity MainSolutionSdkPackageId;
    public static string ManualUnskipProjectsFileName;
    public static string ProfileEnforcingSdkMini;
    public static String[] SkipAvalonProjects;
    public static String[] SkipUnitTestProjects;
    private static SdkMiniAutofixHelpers();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers/<CheckProjectsSdkAbilityAsync>d__6")]
public static Task`1<ImmutableArray`1<SourceProjectSdkAbilityStatus>> CheckProjectsSdkAbilityAsync(Lifetime lifetime, AllAssembliesOnEverything allassAllForProfiles, AllAssembliesOnSources allassSrcForListingProjects, IBuildTaskHost tasker, ILogger logger);
    public static bool IsSdkMiniProject(XmlDocument xDoc);
    public static bool IsSdkProject(XmlDocument xDoc);
    public static bool IsSdkProject(XDocument xd);
    public static void RenderDetailedSdkStatistics(ImmutableArray`1<SourceProjectSdkAbilityStatus> status, ILogger logger);
    [NotNullAttribute]
public static ImmutableFileItem RewriteProjectFileForSdk(ProjectAndAssembly paass, FileSystemPath pathProjectFile, RelativePath relProjNew, ILogger logger, bool isMakingSideProjects, bool isKeepLegacyNonSdkFormat);
    [NotNullAttribute]
private static JetHashSet`1<SubplatformProjectWrapper> GetProjectsInProfile(string sProfileAsText, AllAssembliesOnEverything allassAllForProfiles, AllAssembliesOnSources allassSrcForListingProjects, ILogger logger);
    [CompilerGeneratedAttribute]
internal static string <RenderDetailedSdkStatistics>g__NumAndPercent|10_3(int item, int total);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixStages : object {
    private ILogger myLogger;
    private Dictionary`2<SubplatformProjectWrapper, SourceProjectSdkAbilityStatus> myProjectsEnforcingSdk;
    public SdkMiniAutofixStages(SolutionSdkStatusReportArtifact sdkstatus, ILogger logger);
    private static void EnsureSdkProjectIfEligible(XDocument xd, SubplatformProjectWrapper subandproj, Dictionary`2<SubplatformProjectWrapper, SourceProjectSdkAbilityStatus> projectsEnforcingSdk, ILogger logger);
    private sealed virtual override bool JetBrains.Application.BuildScript.PreCompile.Autofix.IAutofixSingleProjectStage.RunStage(SubplatformProjectWrapper subandproj, XDocument xdoc);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.Autofix.SolutionSdkStatusReportArtifact : object {
    public ImmutableArray`1<SourceProjectSdkAbilityStatus> ProjectStatuses;
    public SolutionSdkStatusReportArtifact(ImmutableArray`1<SourceProjectSdkAbilityStatus> projectStatuses);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.Autofix.SolutionSdkStatusReportArtifact/<CalcAsync>d__2")]
[BuildStepAttribute]
public static Task`1<SolutionSdkStatusReportArtifact> CalcAsync(Lifetime lifetime, AllAssembliesOnEverything allass, AllAssembliesOnSources allassSrc, IBuildTaskHost tasker, ILogger logger);
    public void RenderDetailedSdkStatistics(ILogger logger);
}
public static class JetBrains.Application.BuildScript.PreCompile.Autofix.Stages : object {
    public static string SubextensionOfGeneratedFiles;
    private static HashSet`1<string> WellKnownGacAssemblies;
    public static string EvaluatedTargetsFileSuffixWithDot;
    public static bool OptionGeneralWildcardInCsprojNotImports;
    private static string DefaultProjectConfigurationName;
    private static Stages();
    public static void CleanupProjectProperties(XmlDocument xml, SubplatformProjectWrapper subandproj);
    public static void CleanupProjectDefines(XmlDocument xml, SubplatformProjectWrapper subandproj, ISet`1<string> defineConstantsAllowed, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void CleanupProjectItemGroups(XmlDocument xml, SubplatformProjectWrapper subandproj);
    public static void CleanupProjectTargets(XmlDocument xml);
    public static void CorrectProjectReferences(XmlDocument xml, SubplatformProjectWrapper subandproj, SubplatformReferencesValidator subvalidator, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void FixNugetPackageReferenceRelativePaths(XmlDocument xml, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static bool GlobalEnsureSameNugetReferenceVersion(AllAssembliesOnSources allass, AllAssembliesOnEverything allassall, InjectToolPackageArtifact[] injections, EmbedPackageInSubplatformArtifact[] embeddings, Optional`1<CanAutofixFilesOnDisk> isModeLive, PackageVersionLocks verlocks, ILogger logger);
    public static void KillOutputPathOverrides(XmlDocument xml, SubplatformProjectWrapper subandproj, ILogger logger);
    public static bool FixDllReferences(XmlDocument xml, SubplatformProjectWrapper subandproj, AllAssembliesOnEverything allassall, LookupFilesInNugetPackages lookupFilesInNugetPackages, PackageVersionLocks verlocks, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private static bool FixDllReferences_ProjectReference(SubplatformProjectWrapper subandproj, XmlDllReference reference, ILookup`2<string, Pair`2<AssemblyNameInfo, Subplatform>> lookupSubplatformAssemblies, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private static bool FixDllReferences_Nuget(SubplatformProjectWrapper subandproj, XmlDllReference reference, LookupFilesInNugetPackages lookupFilesInNugetPackages, Boxed`1<JetHashSet`1<JetPackageIdentity>> hashNuggetRefsLegit, Boolean& isPackagesConfigModificationWarned, PackageVersionLocks verlocks, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void MergeAdjacentItemGroups(XmlDocument xml, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void RemoveEmptyEntities(XmlDocument xml, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void RemoveStuffedAssemblyName(XmlDocument xml);
    public static void SerializeEmptyElementsInShortFormat(XmlDocument xmlDoc);
    public static void SetupStuffingImportDirectives(XmlDocument xml, SubplatformProjectWrapper subandproj);
    public static void SingleProjectConfiguration(XmlDocument xml, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void UpdateReferencePrivateMetadata(XmlDocument xml, Nullable`1<bool> newvalue, ILogger logger);
    public static void NugetRootFolderImpors(XmlDocument xmlDoc, SubplatformProjectWrapper subandproj, ILogger logger);
    public static void MakeImportTargetsUnconditional(XmlDocument xmlDoc, SubplatformProjectWrapper subandproj, ILogger logger);
    public static void RemoveImportMicrosoftCommonProps(XmlDocument xmlDoc, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void MakePathsMatchSourceControlCasing(XmlDocument xml, SubplatformProjectWrapper subandproj, WorkingCopyTreeHelper wch, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private static string ReportXmlAttr(XmlAttribute attr);
    public static void GlobalAssertNoDeepProjects(AllAssembliesOnSources allass, ILogger logger);
    public static void MakeWildcardFriendly(XmlDocument xmlProj, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void EnforceWildcardIncludes(XmlDocument xmlProj, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    private static void EnforceWildcardIncludes_EnsureNoGeneralWildcard(SubplatformProjectWrapper subandproj, List`1<XmlElement> mainwilds, string sItemName, string sGeneralWildcard, ILogger logger);
    private static void EnforceWildcardIncludes_EnsureSingleGeneralWildcard(XmlDocument xmlProj, SubplatformProjectWrapper subandproj, List`1<XmlElement> mainwilds, string sItemName, string sGeneralWildcard, ILogger logger);
    private static void EnforceWildcardIncludes_EnsureSingleGeneralWildcard_Insert(XmlDocument xmlProj, string sItemName, string sGeneralWildcard);
    public static void CustomAddDllReferenceByTemplate(XmlDocument xml, SubplatformProjectWrapper subandproj, AllAssembliesOnEverything allassall, LookupFilesInNugetPackages lookupFilesInNugetPackages, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void RemovePackagesConfigIfSdk(XmlDocument xmlProj, SubplatformProjectWrapper subandproj, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void NeatUp(XmlDocument xmlProj);
    public static bool GlobalAssertPackageVersionLocksFileMergible(ProductHomeDirArtifact homedir, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void PromoteSdkPackageReferenceVersionsAndDevToLocks(XmlDocument xml, SubplatformProjectWrapper subandproj, PackageVersionLocks verlocks, ConcurrentDictionary`2<PackageVersionLockKey, PackageVersionLockMetadata> verlocksEdits, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    public static void EnsureTargetFramework(XmlDocument xml, SubplatformProjectWrapper subandproj, Optional`1<ForceTargetFrameworkVersion> forceTargetFrameworkVersion, Optional`1<CanAutofixFilesOnDisk> isModeLive, ILogger logger);
    [CompilerGeneratedAttribute]
internal static bool <GlobalEnsureSameNugetReferenceVersion>g__ReferenceInfoEqualityComparer|9_8(PackageReferenceInfo priA, PackageReferenceInfo priB);
    [CompilerGeneratedAttribute]
internal static bool <MakeWildcardFriendly>g__ItemHasMetadata|28_9(XmlElement xeItem);
    [CompilerGeneratedAttribute]
internal static int <GlobalAssertPackageVersionLocksFileMergible>g__CompareElements|39_0(XElement xea, XElement xeb);
    [CompilerGeneratedAttribute]
internal static void <EnsureTargetFramework>g__Modify|41_0(XmlElement element, TargetFrameworkId targetFrameworkId, <>c__DisplayClass41_0& );
}
public class JetBrains.Application.BuildScript.PreCompile.Autofix.SubplatformReferencesValidator : object {
    public static bool OptionTraceAllPaths;
    private ILogger myLogger;
    public IDictionary`2<RelativePath, Subplatform> MapProjectToSub;
    public DirectedGraphWithEdges`2<SubplatformName, RefKind> References;
    public SubplatformReferencesValidator(AllAssembliesOnEverything allassAll, ILogger logger);
    public bool ApplyAutofixes(Optional`1<CanAutofixFilesOnDisk> isModeLive);
    public bool ValidateCompileTimeUseOfSubplatform(SubplatformName who, SubplatformName what, string context);
    private static void Ctor_AddImmediateReferences(DirectedGraphWithEdges`2<SubplatformName, RefKind> references, AllAssembliesOnEverything allassAll, ILogger logger);
    private static void Ctor_AddNodes(DirectedGraphWithEdges`2<SubplatformName, RefKind> references, AllAssembliesOnEverything allassAll);
    private static void Ctor_CheckForLoops(ILogger logger, DirectedGraphWithEdges`2<SubplatformName, RefKind> references);
    [NotNullAttribute]
private static IDictionary`2<RelativePath, Subplatform> Ctor_MapProjectToSub(AllAssembliesOnEverything allassAll, ILogger logger);
    private static void Ctor_PropagateTransitive(DirectedGraphWithEdges`2<SubplatformName, RefKind> references, ILogger logger);
    private static void Ctor_SanityCheckEitherImmedOrTransitive(DirectedGraphWithEdges`2<SubplatformName, RefKind> references, ILogger logger);
}
public class JetBrains.Application.BuildScript.PreCompile.Autofix.WalkFilter : object {
    private static Regex ExcludeNone;
    private static Regex IncludeAll;
    public Regex DirExclude;
    public Regex DirInclude;
    public Regex FileExclude;
    public Regex FileInclude;
    public Regex RelativePathExclude;
    public Regex RelativePathInclude;
    public FileSystemPath WalkRoot;
    private static WalkFilter();
    public bool CheckFile(FileSystemPath file);
    public bool CheckFolder(FileSystemPath directory);
    public IEnumerable`1<FileSystemPath> Walk();
    private bool CheckRelative(FileSystemPath path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileSystemPath> <Walk>b__11_0(FileSystemPath path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileSystemPath> <Walk>b__11_1(FileSystemPath path);
}
public static class JetBrains.Application.BuildScript.PreCompile.Autofix.Worker : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.Autofix.Worker/<SubplatformAutofixProjectsAsync>d__0")]
public static Task`1<LocalAutofixFilesSingleRun> SubplatformAutofixProjectsAsync(Lifetime lifetime, AllAssembliesOnSources allasssrc, AllAssembliesOnEverything allassall, InjectToolPackageArtifact[] injections, LookupFilesInNugetPackages lookupFilesInNugetPackages, Optional`1<CanAutofixFilesOnDisk> isModeLive, WorkingCopyTreeHelper wch, PackageVersionLocks verlocks, AutofixAllowedDefineConstant[] defineConstantsAllowed, EmbedPackageInSubplatformArtifact[] embeddings, IBuildTaskHost tasker, Optional`1<ForceTargetFrameworkVersion> forceTargetFrameworkVer, IAutofixSingleProjectStage[] singlestages, SolutionSdkStatusReportArtifact solutionSdkStatusReportArtifact, ILogger logger);
    private static bool SubplatformDecorateProjects_Single(SubplatformProjectWrapper subandproj, AllAssembliesOnEverything allassall, LookupFilesInNugetPackages lookupFilesInNugetPackages, SubplatformReferencesValidator subvalidator, Optional`1<CanAutofixFilesOnDisk> isModeLive, WorkingCopyTreeHelper wch, ISet`1<string> defineConstantsAllowed, PackageVersionLocks verlocks, ILogger logger, ConcurrentDictionary`2<PackageVersionLockKey, PackageVersionLockMetadata> verlocksEdits, Optional`1<ForceTargetFrameworkVersion> fwVer, IAutofixSingleProjectStage[] singlestages);
}
public static class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport._InputsInBinarySubplatforms_ReadMe_ : object {
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini : object {
    public static string FolderNameUnderIntDir;
    public static string ListFileName;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableArray`1<ValueTuple`2<SubstitutedProjectReferenceInfo, string>> SubstitutedProjectReferencesWithFileNames;
    public BinarySubplatformsForSdkMini(ImmutableArray`1<ValueTuple`2<SubstitutedProjectReferenceInfo, string>> substitutedProjectReferencesWithFileNames);
    private static BinarySubplatformsForSdkMini();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini/<CollectAndLoadAsync>d__4")]
[BuildStepAttribute]
public static Task`1<BinarySubplatformsForSdkMini> CollectAndLoadAsync(Lifetime lifetime, IReadOnlyCollection`1<SubstitutedProjectReferenceInfo> substargets, ITaskHost tasker, ILogger logger);
    public ImmutableArray`1<JetSdkProjectParameterArtifact> EmitSdkParametersForSdkMiniTaskBodyOnIsolatedBuild(Lifetime lifetime);
    [BuildStepAttribute]
public static IList`1<JetSdkProjectParameterArtifact> EmitSdkParametersForSdkMiniTaskBodyOnPwc(BinarySubplatformsForSdkMini refinfo, ProductHomeDirArtifact homedir, IntermediateOutputFolderPerProfileArtifact indtdir);
    public ImmutableArray`1<ImmutableFileItem> GetSubstitutionAssemblyItems();
    [NotNullAttribute]
public static ImmutableDictionary`2<RelativePath, ValueTuple`2<string, AssemblyNameInfo>> LoadFromListFile(ImmutableFileItem fi, ILogger logger);
    public static RelativePath RelFolderWithSubstitutedAssembliesForPwc(IntermediateOutputFolderPerProfileArtifact intdir);
    public static RelativePath RelPathToSubstitutionsListForPwc(IntermediateOutputFolderPerProfileArtifact intdir);
    [NotNullAttribute]
public XDocument RenderListDocument();
    [NotNullAttribute]
public ImmutableFileItem RenderListFile();
    [CompilerGeneratedAttribute]
private void <RenderListFile>b__12_0(Stream stream);
}
public static class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsLocalTasks : object {
    [NotNullAttribute]
public static string GetPackagesFileNameInShadowDir(ProfileNameArtifact profile);
    [NotNullAttribute]
public static FileSystemPath GetShadowDirPackagesFilePath(ShadowPackageDirArtifact shadowdir, ProfileNameArtifact profile);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsLocalTasks/<LoadPackages>d__2")]
public static Task`1<ImmutableArray`1<InputPackage>> LoadPackages(OuterLifetime lifetime, AllAssembliesOnSources allassUnfiltered, ProfileNameArtifact profileNameArtifact, ShadowPackageDirArtifact shadowPackageDirArtifact, AllAssembliesFilterByProfile prfilter, IBuildTaskHost buildTaskHost, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsLocalTasks/<PrecompileBinarySubs>d__3")]
public static Task`1<ImmutableArray`1<InputPackage>> PrecompileBinarySubs(OuterLifetime lifetime, AllAssembliesFilterByProfile prfilter, AllAssembliesOnSources unfilteredAllass, INestedBuildRunner nester, IncrementalBuild incrementalBuildOverride, Action`1<UInt32> FReportStep, ILogger logger);
    public static void SavePackages(ImmutableArray`1<InputPackage> packagesCompiled, ShadowPackageDirArtifact shadowPackageDir, ProfileNameArtifact profileName, ILogger logger);
    [CompilerGeneratedAttribute]
internal static PackagesForPwcWithBinarySubplatforms <LoadPackages>g__ReadFromShadowDir|2_2(ShadowPackageDirArtifact shadowPackageDir, ProfileNameArtifact profile, ILogger logger);
    [CompilerGeneratedAttribute]
internal static FileSystemPath <SavePackages>g__WriteToShadowDir|4_1(PackagesForPwcWithBinarySubplatforms instance, ShadowPackageDirArtifact shadowPackageDir, ProfileNameArtifact profile, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.ImplicitEmbeddedGitSubsProjectRefs : object {
    public ImmutableArray`1<ProjectFromBiSub> ReferencedProjects;
    public ImplicitEmbeddedGitSubsProjectRefs(ImmutableArray`1<ProjectFromBiSub> referencedProjects);
}
public class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms : object {
    public ImmutableArray`1<IJetNugetPackage> Packages;
    public PackagesForPwcWithBinarySubplatforms(ImmutableArray`1<IJetNugetPackage> inputpackages);
    [UsedImplicitlyAttribute]
public PackagesForPwcWithBinarySubplatforms(IStructuredStorage sstg);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms/<AssertMatchesCurrentProfile>d__3")]
public Task AssertMatchesCurrentProfile(Lifetime lifetime, AllAssembliesOnSources allassUnfiltered, AllAssembliesFilterByProfile prfilter, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms/<WithAllAssembliesFilterAsync>d__4")]
public Task`1<PackagesForPwcWithBinarySubplatforms> WithAllAssembliesFilterAsync(Lifetime lifetime, AllAssembliesFilterByProfile prfilter, IBuildTaskHost tasker, ILogger logger);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.ShadowPackageDirArtifact>")]
public class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.ShadowPackageDirArtifact : object {
    private static string FolderName;
    [NotNullAttribute]
public FileSystemPath PrecompiledPackagesFolder;
    [BuildStepAttribute]
public ShadowPackageDirArtifact(ProductBinariesDirArtifact productBinDirArtifact);
    internal ShadowPackageDirArtifact(string text);
    public ShadowPackageDirArtifact(FileSystemPath folder);
    private static ShadowPackageDirArtifact();
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo : object {
    public EOriginatingProjectKinds OriginatingProjectKinds;
    [NotNullAttribute]
public RelativePath RelTargetProjectUnderRoot;
    [NotNullAttribute]
public IAssemblyItem TargetAssemblyItem;
    [NotNullAttribute]
public SubplatformOnPackageEx TargetSubplatform;
    public SubstitutedProjectReferenceInfo(IAssemblyItem targetAssemblyItem, RelativePath relTargetProjectUnderRoot, SubplatformOnPackageEx targetSubplatform, EOriginatingProjectKinds originatingProjectKinds);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo/<CollectSubstitutedProjectReferenceInfos>d__5")]
[BuildStepAttribute]
public static Task`1<IList`1<SubstitutedProjectReferenceInfo>> CollectSubstitutedProjectReferenceInfos(Lifetime lifetime, AllAssembliesOnSources allassSrc, AllAssembliesOnPackagesEx allassPkg, AllAssembliesOnEverything allass, ImplicitEmbeddedGitSubsProjectRefs implicitEmbeddedGitSubsProjectRefs, ITaskHost tasker, ILogger logger);
    public virtual string ToString();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo/<FindProjectReferencesFromSourceToBinSubplatforms>d__7")]
private static Task`1<ImmutableArray`1<ProjectReferenceFromSrcToBin>> FindProjectReferencesFromSourceToBinSubplatforms(Lifetime lifetime, AllAssembliesOnSources allassSrc, AllAssembliesOnPackagesEx allassPkg, ImmutableArray`1<ProjectFromBiSub> referencedProjectsInBiSubs, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo/<LookupProjectsFromBinarySubs>d__8")]
private static Task`1<ILookup`2<RelativePath, ValueTuple`3<AssemblyNameInfo, RelativePath, SubplatformName>>> LookupProjectsFromBinarySubs(Lifetime lifetime, AllAssembliesOnPackagesEx allassPkg, ITaskHost tasker, ILogger logger);
    [CompilerGeneratedAttribute]
internal static ImmutableArray`1<ValueTuple`3<AssemblyNameInfo, RelativePath, SubplatformName>> <LookupProjectsFromBinarySubs>g__ListProjectsFromPackage|8_2(SubplatformOnPackageEx sub);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper : object {
    private ILogger Logger;
    private AllAssembliesOnEverything myAllAssemblies;
    private InputPackage[] myInputPackages;
    private IBuildTaskHost myTasker;
    private UsedSubplatformsWithBinRefs[] myUsedSubplatformsWithBinRefs;
    public SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper(AllAssembliesOnEverything allass, InputPackage[] inputs, UsedSubplatformsWithBinRefs[] usedSubplatformsWithBinRefs, IBuildTaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper/<DeployReferenceReplacementsIsolatedAsync>d__6")]
[NotNullAttribute]
public Task`1<FileSystemPath> DeployReferenceReplacementsIsolatedAsync(Lifetime lifetime);
    [NotNullAttribute]
public Task EnsureReferenceReplacementsWrittenIncrementalAsync(Lifetime lifetime, ProductBinariesDirArtifact bindir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper/<DeployReferenceReplacementsCoreAsync>d__8")]
private Task DeployReferenceReplacementsCoreAsync(Lifetime lifetime, FileSystemPath dir, FileCheck filecheck);
}
public static class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesNonSdk : object {
    [BuildStepAttribute]
public static void EmitSubstsForEachRef(AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass, ILogger logger, IList`1& compileitems, ICollection`1& customxmls, UsedSubplatformsWithBinRefs& usedrefs);
    private static ValueTuple`3<ICollection`1<GeneratedMsbuildTaskItem>, ICollection`1<SubplatformName>, GeneratedMsbuildCustomXml> EmitForProject(AllAssembliesOnEverything allass, SubplatformProjectWrapper subandproj, StringBuilder sbVerboseSummary, ILogger logger);
    private static ApplicationPackageFile GetPackageFileOfReferencedProject(SubplatformProjectWrapper doingSubstsIn, SubplatformOnPackageEx spTargetPkg, RelativePath projReferenceToSubst, ILogger logger);
    private static int LongestCommonSubstringLength(string S, string T);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.UsedSubplatformsWithBinRefs : object {
    public ImmutableHashSet`1<SubplatformName> ReferencedFromPreSdk;
    public ImmutableHashSet`1<SubplatformName> ReferencedFromSdkMini;
    public UsedSubplatformsWithBinRefs(ImmutableHashSet`1<SubplatformName> referencedFromPreSdk, ImmutableHashSet`1<SubplatformName> referencedFromSdkMini);
    public static string FolderNameFromSubplatformName(SubplatformName sname);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PreCompile.BuildSourcesProj : object {
    private static string BuilsSourcesProjectNameBase;
    private static BuildSourcesProj();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BuildSourcesProj/<Emit>d__1")]
[BuildStepAttribute]
public static Task`1<Tuple`2<LocalEmitBuildSourcesProj, LocalPrepareWorkingCopy>> Emit(Lifetime lifetime, AllAssembliesOnSources allassOnSrc, ProfileNameArtifact profile, IntermediateOutputFolderPerProfileArtifact folderIntermediatePerProfile, NugetPackageManagerForBuild nugetter, ITaskHost tasker, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
private static XElement AddAliases(XElement item, AssemblyNameInfo name);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BuildSourcesProj/<FindRefAsmsOneLevelFromEngineAssemblies>d__3")]
private static Task`1<IReadOnlyCollection`1<AssemblyNameAndLocation>> FindRefAsmsOneLevelFromEngineAssemblies(Lifetime lifetime, JetHashSet`1<AssemblyNameAndLocation> dllsFromBuildEngineNonGac, FileSystemPath dirBuildEngineRefAsmDlls, NugetPackageManagerForBuild nugetter, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BuildSourcesProj/<IncludeBuildEngineDlls>d__4")]
private static Task IncludeBuildEngineDlls(Lifetime lifetime, XElement xeProject, FileSystemPath dirUnderObj, JetHashSet`1<AssemblyNameInfo> assembliesAlreadyReferenced, NugetPackageManagerForBuild nugetter, ITaskHost tasker, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.BuildSourcesProj/<IncludeBuildScriptSourceRefDlls>d__5")]
private static Task`1<List`1<RelativePath>> IncludeBuildScriptSourceRefDlls(Lifetime lifetime, XElement xeProject, AllAssembliesOnSources allassOnSrc, NugetPackageManagerForBuild nugetter, ITaskHost tasker, FileSystemPath dirUnderObj, JetHashSet`1<AssemblyNameInfo> assembliesAlreadyReferenced, ILogger logger);
    private static void IncludeBuildScriptSources(XElement xeProject, List`1<RelativePath> relDirsWithBuildSources);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.EntryLocalAutofixFiles : object {
}
public static class JetBrains.Application.BuildScript.PreCompile.EntryLocalPrepareWorkingCopyTasks : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.EntryLocalPrepareWorkingCopyTasks/<RunNestedLocalPrepareWorkingCopy>d__0")]
[BuildStepAttribute]
public static Task`1<EntryLocalPrepareWorkingCopy> RunNestedLocalPrepareWorkingCopy(Lifetime lifeStep, ProductHomeDirArtifact homedir, INestedBuildRunner nester, Optional`1<AllAssembliesFilterByProfile> prfilter, ShadowPackageDirArtifact shadowPackageDir, ProfileNameArtifact profileName, ITaskHost tasker, ILogger logger);
}
public static class JetBrains.Application.BuildScript.PreCompile.EntryOpenInVisualStudioTasks : object {
    public static string ResharperBuildSolutionAfterOpenEnvVariable;
    private static EntryOpenInVisualStudioTasks();
    [BuildStepAttribute]
public static EntryOpenInIde RunOpenInVisualStudio(Lifetime lifetime, EntryLocalPrepareWorkingCopy prepareWorkingCopy, LocalMainSolutionFilePath solfilepath, OpenInVisualStudioInstallDirArtifact installDirArtifact, OpenInVisualStudioBuildSolutionArtifact buildSolutionArtifact, OpenInVisualStudioInternalModeArtifact internalModeArtifact, OpenInIdeInternalModeApplicabilityArtifact openInIdeInternalModeApplicabilityArtifact, ProductHomeDirArtifact homedir, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml : GeneratedMsbuildElementBase {
    [NotNullAttribute]
public string Id;
    [NotNullAttribute]
public string XmlDocumentFragment;
    public GeneratedMsbuildCustomXml(SubplatformProjectWrapper subproj, string sId, string sXmlDocumentFragment, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildCustomXml(SubplatformProjectWrapper subproj, string sId, IEnumerable`1<XNode> content, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildCustomXml(SubplatformName subplatform, RelativePath projectInSubplatform, string sId, string sXmlDocumentFragment, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public virtual string ToString();
    protected virtual int CompareToTypeSpecific(GeneratedMsbuildElementBase o);
}
public abstract class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase : object {
    public string Condition;
    public DispositionAgainstCommonTargets Disposition;
    public double Priority;
    public RelativePath ProjectInSubplatform;
    [CanBeNullAttribute]
public string Reason;
    public SubplatformName Subplatform;
    protected GeneratedMsbuildElementBase(SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, double priority, string condition, string reason);
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase>.CompareTo(GeneratedMsbuildElementBase other);
    protected abstract virtual int CompareToTypeSpecific(GeneratedMsbuildElementBase o);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildImport : GeneratedMsbuildElementBase {
    [NotNullAttribute]
public RelativePath ImportTarget;
    public GeneratedMsbuildImport(SubplatformProjectWrapper subproj, RelativePath importTarget, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildImport(SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, RelativePath importTarget, double priority, string condition);
    public virtual string ToString();
    protected virtual int CompareToTypeSpecific(GeneratedMsbuildElementBase o);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject : object {
    [NotNullAttribute]
public ICollection`1<ImmutableFileItem> ItemsToRealize;
    [NotNullAttribute]
public ImmutableFileItem MainImportedProjectFile;
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public ImmutableFileItem ProxyImportedProjectFile;
    [NotNullAttribute]
public SubplatformName Subplatform;
    public GeneratedMsbuildMainImportedProject(SubplatformName subplatform, RelativePath projectInSubplatform, ImmutableFileItem mainImportedProjectFile, ICollection`1<ImmutableFileItem> itemsToRealize, ImmutableFileItem fileProxyImportedProject);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty : GeneratedMsbuildElementBase {
    public string PropertyName;
    public string PropertyValue;
    public GeneratedMsbuildProperty(string propertyName, string propertyValue, SubplatformProjectWrapper subproj, DispositionAgainstCommonTargets disposition, double priority, string condition, string reason);
    public GeneratedMsbuildProperty(XName propertyName, string propertyValue, SubplatformProjectWrapper subproj, DispositionAgainstCommonTargets disposition, double priority, string condition, string reason);
    public GeneratedMsbuildProperty(string propertyName, string propertyValue, SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, double priority, string condition, string reason);
    public virtual string ToString();
    protected virtual int CompareToTypeSpecific(GeneratedMsbuildElementBase o);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildRoslynFeature>")]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildRoslynFeature : object {
    [NotNullAttribute]
public string FeatureValue;
    [NotNullAttribute]
public string Reason;
    public GeneratedMsbuildRoslynFeature(string value, string reason);
    public GeneratedMsbuildRoslynFeature(string serialization);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildTaskItem : GeneratedMsbuildElementBase {
    public ImmutableFileItem File;
    public string ItemGroupName;
    public GeneratedMsbuildTaskItem(string itemGroupName, ImmutableFileItem file, SubplatformProjectWrapper subproj, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public GeneratedMsbuildTaskItem(string itemGroupName, ImmutableFileItem file, SubplatformName subplatform, RelativePath projectInSubplatform, DispositionAgainstCommonTargets disposition, double priority, string condition);
    public virtual string ToString();
    protected virtual int CompareToTypeSpecific(GeneratedMsbuildElementBase o);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile : object {
    [NotNullAttribute]
public ImmutableFileItem File;
    [NotNullAttribute]
public FileSystemPath LocalPath;
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName Subplatform;
    public LocallyWrittenGeneratedMsbuildFile(SubplatformName subplatform, RelativePath projectInSubplatform, ImmutableFileItem file, FileSystemPath localPath);
    [BuildStepAttribute]
public static LocallyWrittenGeneratedMsbuildFile[] LocallyWriteItemsForAllProjects(GeneratedMsbuildMainImportedProject[] projects, AllAssembliesOnSources allassSrc, ILogger logger);
    [BuildStepAttribute]
public static Tuple`2<CompileSubplatformsInput, LocalPrepareWorkingCopy> MountLocallyWrittenGeneratedCompileItems(LocallyWrittenGeneratedMsbuildFile[] items);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LightweightMetadataFile : BuildOutputFileArtifact {
    public LightweightMetadataFile(ImmutableFileItem file);
    public LightweightMetadataFile(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LocalEmitBuildSourcesProj : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks : object {
    private static string FavorOptimizedCodeDotsettingsSourceFileName;
    public static string GeneratedBatchSuffix;
    public static string GeneratedSlnSuffix;
    public static string GeneratedSlnSuffixWithDot;
    private static string SettingsStorageFileExtensionWithDotCopy;
    private static string SolutionDotsettingsSourceFileName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<RelativePath> WellKnownSolutionItems;
    private static LocalMainSolutionFileTasks();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks/<ChooseToolsetForMainSolutionAsync>d__7")]
[BuildStepAttribute]
public static Task`1<LocalToolsetForMainSolution> ChooseToolsetForMainSolutionAsync(Lifetime lifetime, ProductHomeDirArtifact homedir, AllAssembliesOnSources allassSrc, IJetNugetPackageManager nugetter, ITaskHost tasker, IntermediateOutputFolderPerProfileArtifact folderIntermediate, DotNetCoreSdkHelper netcoresdk, ILogger logger);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy EmitSolutionFile(MainSolutionFileContent solfile, LocalMainSolutionFilePath solpath, AllAssembliesOnSources allassSrc, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks/<EmitSolutionSettingsForToolsetAndRuntime>d__9")]
[BuildStepAttribute]
public static Task`1<LocalSolutionSettingsGenerated> EmitSolutionSettingsForToolsetAndRuntime(Lifetime lifetime, LocalToolsetForMainSolution toolsetinfo, DotNetCoreSdkHelper netcore, ILogger logger, ProductHomeDirArtifact homedir, IJetNugetPackageManager nugetter, ITaskHost tasker);
    [BuildStepAttribute]
public static LocalSolutionSettingsGenerated EmitSolutionSettingsForTests();
    public static FileSystemPath GetDirectoryForSolutionToolset(ProductHomeDirArtifact homedir, IntermediateOutputFolderPerProfileArtifact folderIntermediate);
    [BuildStepAttribute]
public static LocalSolutionSettingsGenerated InjectDevKitConfigSettingsIntoSolutionSettings(ProductHomeDirArtifact homedir, LocalMainSolutionSharedSettingsFilePath solsetpath, ILogger logger);
    [BuildStepAttribute]
public static LocalSolutionSettingsGenerated InjectFavorOptimizedCodeIntoSolutionSettings(ProductHomeDirArtifact homedir, LocalMainSolutionSharedSettingsFilePath solsetpath, ILogger logger);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy WriteSolutionSettingsFile(LocalSolutionSettingsGenerated[] packs, LocalMainSolutionSharedSettingsFilePath solsetpath, ILogger logger);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy WriteToolsetMsbuildCmd(ProductHomeDirArtifact homedir, LocalToolsetForMainSolution toolsetinfo, ProfileNameArtifact profile, ILogger logger);
    private static LocalSolutionSettingsGenerated InjectSolutionSettingsFileFromDevKitConfig(RelativePath filename, string purpose, ProductHomeDirArtifact homedir, LocalMainSolutionSharedSettingsFilePath solsetpath, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LocalPreExtractFastFilesForPackaging : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<FileSystemPath> <Extracted>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<FileSystemPath> Extracted { get; public set; }
    public LocalPreExtractFastFilesForPackaging(ImmutableArray`1<FileSystemPath> Extracted);
    [CompilerGeneratedAttribute]
protected LocalPreExtractFastFilesForPackaging(LocalPreExtractFastFilesForPackaging original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<FileSystemPath> get_Extracted();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Extracted(ImmutableArray`1<FileSystemPath> value);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.LocalPreExtractFastFilesForPackaging/<Extract>d__7")]
[BuildStepAttribute]
public static Task`1<LocalPreExtractFastFilesForPackaging> Extract(Lifetime lifetime, ProductBinariesDirArtifact bindir, ICollection`1<SubplatformFileForPackagingFast> fastfiles, ITaskHost tasker, ILogger logger);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy MountIntoPWC(LocalPreExtractFastFilesForPackaging _);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LocalPreExtractFastFilesForPackaging left, LocalPreExtractFastFilesForPackaging right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LocalPreExtractFastFilesForPackaging left, LocalPreExtractFastFilesForPackaging right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LocalPreExtractFastFilesForPackaging other);
    [CompilerGeneratedAttribute]
public virtual LocalPreExtractFastFilesForPackaging <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ImmutableArray`1& Extracted);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LocalPrepareWorkingCopy : object {
    public static LocalPrepareWorkingCopy Item { get; }
    public static LocalPrepareWorkingCopy get_Item();
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy PrepareWorkingCopy(SetupProductRoot prodroot, SetupProductRootExtendedForSln prodrootex, LocalRestorePackages packages);
}
public static class JetBrains.Application.BuildScript.PreCompile.LocalWriteLightweightMetadataFilesAndCleanup : object {
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy Run(AllAssembliesOnEverything allass, ICollection`1<LightweightMetadataFile> metadataFiles, ProductBinariesDirArtifact productBinDirArt, ILogger logger);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.LookupFilesInNugetPackages : object {
    private Lazy`1<ILookup`2<AssemblyNameInfo, NuFileItem>> myLazyLookupByAssemblyNameAndVersion;
    private Lazy`1<ILookup`2<AssemblyNameInfo, NuFileItem>> myLazyLookupByBareAssemblyName;
    private Lazy`1<ILookup`2<AssemblyNameInfo, NuFileItem>> myLazyLookupByFullAssemblyName;
    private Lazy`1<ILookup`2<JetPackageIdentity, NuFileItem>> myLazyLookupByPackage;
    private Lazy`1<ILookup`2<RelativePath, NuFileItem>> myLazyLookupByRelPathEffective;
    private Lazy`1<ILookup`2<RelativePath, NuFileItem>> myLazyLookupByRelPathFull;
    public IList`1<NuFileItem> AllFiles;
    public IDictionary`2<JetPackageIdentity, IJetNugetPackage> AllPackages;
    public ILookup`2<AssemblyNameInfo, NuFileItem> LookupByAssemblyNameAndVersion { get; }
    public ILookup`2<AssemblyNameInfo, NuFileItem> LookupByBareAssemblyName { get; }
    public ILookup`2<AssemblyNameInfo, NuFileItem> LookupByFullAssemblyName { get; }
    public ILookup`2<JetPackageIdentity, NuFileItem> LookupByPackage { get; }
    public ILookup`2<RelativePath, NuFileItem> LookupByRelPathEffective { get; }
    public ILookup`2<RelativePath, NuFileItem> LookupByRelPathFull { get; }
    public LookupFilesInNugetPackages(RetrievedPackageReferenceArtifact[] retrpkgs, ILogger logger);
    public ILookup`2<AssemblyNameInfo, NuFileItem> get_LookupByAssemblyNameAndVersion();
    public ILookup`2<AssemblyNameInfo, NuFileItem> get_LookupByBareAssemblyName();
    public ILookup`2<AssemblyNameInfo, NuFileItem> get_LookupByFullAssemblyName();
    public ILookup`2<JetPackageIdentity, NuFileItem> get_LookupByPackage();
    public ILookup`2<RelativePath, NuFileItem> get_LookupByRelPathEffective();
    public ILookup`2<RelativePath, NuFileItem> get_LookupByRelPathFull();
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ChooseWellKnownCommonTargetsForProjectKind : object {
    private sealed virtual override bool JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.IChooseCommonTargetsForProjectKind.TryGetCommonTargetsImportForProject(RelativePath relProjFileName, String& commonTargetsImport);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DefineConstantArtifact : object {
    public string Name;
    public DefineConstantArtifact(string name);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> EmitDefinesIntoMsbuild(AllAssembliesOnSources allassSrc, DefineConstantArtifact[] defines, ILogger logger);
    [BuildStepAttribute]
[NotNullAttribute]
public static IEnumerable`1<JetSdkProjectParameterArtifact> EmitDefinesIntoSdkProjectParameters(DefineConstantArtifact[] defines);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.AssemblyVersionCs : object {
    [NotNullAttribute]
public static Version CoerceAssemblyVersionToWord(Version version, ILogger logger);
    [BuildStepAttribute]
public static GeneratedAssemblyAttributeArtifact[] PerSubplatformMetadata(AllAssembliesOnSources allass, ILogger logger);
    [BuildStepAttribute]
public static Tuple`2<GeneratedAssemblyAttributeArtifact[], JetSdkProjectParameterArtifact[]> SameForAllMetadata(AllAssembliesOnSources allass, BuildVersionSuffix versuffix, BuildChainFlavor buildChainFlavor, ILogger logger);
    private static void CalculateAssemblyVersion(BuildVersionSuffix versuffix, ILogger logger, BuildChainFlavor buildChainFlavor, Version& verCoerced, JetSemanticVersion& semanticVersion);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor/BuildChainFlavorSerializer")]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor : object {
    public static BuildChainFlavorEnum DefaultValue;
    public BuildChainFlavorEnum Value;
    public BuildChainFlavor(BuildChainFlavorEnum value);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor/<DefineDropApplicationVersionSuffix>d__3")]
[BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineDropApplicationVersionSuffix(BuildChainFlavor buildChainFlavor);
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum : Enum {
    public int value__;
    public static BuildChainFlavorEnum SNAPSHOT;
    public static BuildChainFlavorEnum INTERNAL_DEV;
    public static BuildChainFlavorEnum NIGHTLY_DEV;
    public static BuildChainFlavorEnum EAP;
    public static BuildChainFlavorEnum RC_CHECKED;
    public static BuildChainFlavorEnum RC;
    public static BuildChainFlavorEnum RTM_CHECKED;
    public static BuildChainFlavorEnum RTM;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEx : object {
    [ExtensionAttribute]
public static JetSemanticVersion SdkPackageVersion(BuildChainFlavor flavor, BuildVersionSuffix buildVersionSuffix);
    [ExtensionAttribute]
public static bool UnCheckedArtifactsGroup(BuildChainFlavor flavor);
    [ExtensionAttribute]
public static bool CheckedArtifactsGroup(BuildChainFlavor flavor);
    [ExtensionAttribute]
public static bool IsAuthenticodeSigningAllFiles(BuildChainFlavor flavor);
    [ExtensionAttribute]
public static bool IsNotarizingAllFiles(BuildChainFlavor flavor);
    [ExtensionAttribute]
public static bool Snapshot(BuildChainFlavor flavor);
    [ExtensionAttribute]
public static bool IsOkToOmitCompressionForSpeed(BuildChainFlavor flavor);
    [ExtensionAttribute]
public static WhenToCompressEntry WhenToCompressOrOmit(BuildChainFlavor flavor);
    [ExtensionAttribute]
public static bool IsCompressPeAndPdbInSymbolStorage(BuildChainFlavor flavor);
}
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CodeDomProviderHelper : object {
    private static String[] CodeDomCppProviderLanguageStrings;
    private static String[] CodeDomFsharpProviderLanguageStrings;
    private static JetPackageIdentity ourCodeDomCppProviderNugetPackageIdentity;
    private static JetPackageIdentity ourCodeDomFsharpProviderNugetPackageIdentity;
    private static string CodeDomCppProviderTypeName;
    private static string CodeDomFSharpProviderTypeName;
    private static string CodeDomFsharpProviderAssemblyName;
    private static CodeDomProviderHelper();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CodeDomProviderHelper/<CreateProviderForLanguageAsync>d__7")]
public static Task`1<CodeDomProvider> CreateProviderForLanguageAsync(Lifetime lifetime, string sLanguage, IBuildTaskHost tasker, IJetNugetPackageManager nugetter, IntermediateOutputFolderPerProfileArtifact objdir, ProductHomeDirArtifact homedir, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CodeDomProviderHelper/<CreateProviderForLanguageCppAsync>d__8")]
private static Task`1<CodeDomProvider> CreateProviderForLanguageCppAsync(Lifetime lifetime, IBuildTaskHost tasker, IJetNugetPackageManager nugetter, IntermediateOutputFolderPerProfileArtifact objdir, ProductHomeDirArtifact homedir, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CodeDomProviderHelper/<CreateProviderForLanguageFsharpAsync>d__9")]
private static Task`1<CodeDomProvider> CreateProviderForLanguageFsharpAsync(Lifetime lifetime, IBuildTaskHost tasker, IJetNugetPackageManager nugetter, IntermediateOutputFolderPerProfileArtifact objdir, ProductHomeDirArtifact homedir, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CompilerWarningsDevKit : object {
    [NotNullAttribute]
public static string FileNameUnderConfig;
    private Lazy`1<IReadOnlyCollection`1<Warning>> myLazyWarnings;
    [NotNullAttribute]
public IReadOnlyCollection`1<Warning> Warnings { get; }
    [BuildStepAttribute]
public CompilerWarningsDevKit(ProductHomeDirArtifact homedir);
    public CompilerWarningsDevKit(IReadOnlyCollection`1<Warning> warnings);
    private static CompilerWarningsDevKit();
    public IReadOnlyCollection`1<Warning> get_Warnings();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CompilerWarningsDevKit/<ListWarnings>d__6")]
private static IEnumerable`1<Warning> ListWarnings(ProductHomeDirArtifact homedir);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneralJetSdkProjectParameters : object {
    [BuildStepAttribute]
public static JetSdkProjectParameterArtifact ModeOptimize(IsModeOptimize modeOptimize);
    [BuildStepAttribute]
public static JetSdkProjectParameterArtifact ProductBinariesDirRelativeHint(Optional`1<ProductBinariesDirRelativeHintArtifact> maybeRelHint, ProductBinariesDirArtifact bindir, ProductHomeDirArtifact homedir);
    [BuildStepAttribute]
public static JetSdkProjectParameterArtifact ProfileName(ProfileNameArtifact profilename);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact : object {
    [NotNullAttribute]
public CodeAttributeDeclaration AssemblyAttribute;
    [NotNullAttribute]
public RelativePath ProjectInSubplatform;
    [NotNullAttribute]
public SubplatformName Subplatform;
    public GeneratedAssemblyAttributeArtifact(SubplatformName subplatform, RelativePath projectInSubplatform, CodeAttributeDeclaration assemblyAttribute);
    public sealed virtual int CompareTo(GeneratedAssemblyAttributeArtifact other);
    public sealed virtual int CompareTo(object obj);
    public static bool op_GreaterThan(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
    public static bool op_GreaterThanOrEqual(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
    public static bool op_LessThan(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
    public static bool op_LessThanOrEqual(GeneratedAssemblyAttributeArtifact left, GeneratedAssemblyAttributeArtifact right);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedPerProjectCodeFiles : object {
    private static string TargetName;
    private static string TaskItemNameSpecial;
    private static GeneratedPerProjectCodeFiles();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedPerProjectCodeFiles/<EmitAssemblyCustomAttributesAsync>d__2")]
[BuildStepAttribute]
public static Task`1<Tuple`2<List`1<GeneratedMsbuildTaskItem>, List`1<GeneratedMsbuildCustomXml>>> EmitAssemblyCustomAttributesAsync(Lifetime lifetime, AllAssembliesOnSources allass, GeneratedAssemblyAttributeArtifact[] assemblyattrs, IBuildTaskHost tasker, IJetNugetPackageManager nugetter, ILogger logger, IntermediateOutputFolderPerProfileArtifact objdir, ProductHomeDirArtifact homedir);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit : object {
    public static string ConditionOnOutputInSeparateFolders;
    public static string ConditionOnOutputInSingleFolder;
    public static string GeneralWildcardPrefix;
    public static string RoslynUserFileName;
    private static ManagedProjectsDevKit();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<BinAndObj>d__4")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> BinAndObj(AllAssembliesOnSources allassSrc, ProductBinariesDirArtifact bindir, IntermediateOutputFolderPerProfileArtifact folderIntDirPerProfile, ProjectShortNamesArtifact shortnames);
    [BuildStepAttribute]
public static void CompilerWarnings(AllAssembliesOnSources allassSrc, CompilerWarningsDevKit warninglist, Optional`1<IsTreatWarningsAsErrors> maybeTreatWarningsAsErrors, ValidateCleanCompilation[] cleancompile, ILogger logger, IList`1& propertiesSkipNulls, IList`1& xmls);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<DefaultDefineConstants>d__6")]
[BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefaultDefineConstants();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<DefineSolutionDirectories>d__7")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> DefineSolutionDirectories(AllAssembliesOnSources allassSrc);
    [BuildStepAttribute]
public static Tuple`2<List`1<GeneratedMsbuildProperty>, List`1<GeneratedMsbuildRoslynFeature>> DeterministicBuild(AllAssembliesOnSources allassSrc);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildCustomXml> DontCopyReferences(AllAssembliesOnSources allassSrc);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<EnableXmlDocGeneration>d__10")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> EnableXmlDocGeneration(AllAssembliesOnSources allassSrc, ProjectShortNamesArtifact shortnames);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<FixLeftoversFromSdkProjects>d__11")]
[BuildStepAttribute]
[NotNullAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> FixLeftoversFromSdkProjects(AllAssembliesOnSources allassSrc);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<GeneralSettings>d__12")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> GeneralSettings(AllAssembliesOnSources allassSrc, IsModeOptimize optimize, List`1<ForceModeOptimize> forceModeOptimizeArtifacts);
    [NotNullAttribute]
public static RelativePath GetProjectIntermediateOutputPathWithMacros(SubplatformProjectWrapper project, ProjectShortNamesArtifact shortnames, bool isSharedBetweenAllConfigs);
    [CanBeNullAttribute]
public static Nullable`1<ProjectLanguageInfo> GuessSourceExtensionByProjectExtension(string sProjExtension);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> HackAwayExtensionsImplicitlyExpandNETStandardFacades(AllAssembliesOnSources allassSrc);
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> HackRoslynForMono(AllAssembliesOnSources allassSrc);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<IncludeSourcesByGeneralWildcard>d__17")]
public static IEnumerable`1<GeneratedMsbuildCustomXml> IncludeSourcesByGeneralWildcard(AllAssembliesOnSources allassSrc, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<LanguageSettings>d__18")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> LanguageSettings(AllAssembliesOnSources allassSrc);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<MsbuildWarnings>d__19")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> MsbuildWarnings(AllAssembliesOnSources allassSrc);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<RoslynFeatures>d__20")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> RoslynFeatures(AllAssembliesOnSources allassSrc, GeneratedMsbuildRoslynFeature[] features);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<RoslynKillerV2HideSourceCodeFilesFromVisualStudio>d__21")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildCustomXml> RoslynKillerV2HideSourceCodeFilesFromVisualStudio(AllAssembliesOnSources allassSrc, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<SkipGetTargetFrameworkProperties>d__22")]
[NotNullAttribute]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildCustomXml> SkipGetTargetFrameworkProperties(AllAssembliesOnSources allassSrc, IsModeOptimize optimize);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<StrongNameSign>d__23")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> StrongNameSign(AllAssembliesOnSources allassSrc, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<SubplatformsAware>d__24")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> SubplatformsAware(AllAssembliesOnSources allassSrc, ProfileNameArtifact profile, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<SuppressInProcessCompiler>d__25")]
[BuildStepAttribute]
public static IEnumerable`1<GeneratedMsbuildProperty> SuppressInProcessCompiler(AllAssembliesOnSources allassSrc);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit/<TargetFrameworkAndToolsetPackages>d__26")]
[BuildStepAttribute]
public static Task`1<Tuple`2<IEnumerable`1<GeneratedMsbuildImport>, IEnumerable`1<GeneratedMsbuildProperty>>> TargetFrameworkAndToolsetPackages(Lifetime lifetime, AllAssembliesOnSources allassSrc, Optional`1<ForceTargetFrameworkVersion> forceTargetFrameworkVersion, SolutionToolsetHelpers toolsetter, ILogger logger, LocalToolsetForMainSolution toolset);
    [NotNullAttribute]
private static FrameworkName ReadTargetFrameworkForProject(Optional`1<ForceTargetFrameworkVersion> forceTargetFrameworkVersion, SubplatformProjectWrapper subandproj, ILogger logger);
    [CompilerGeneratedAttribute]
internal static GeneratedMsbuildProperty <CompilerWarnings>g__WarningsToProperty|5_0(XName propname, IEnumerable`1<Warning> warns, SubplatformProjectWrapper subandproj);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAssert>")]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAssert : object {
    public static string DefineConstant;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public IsModeAssert(bool isOn);
    private static IsModeAssert();
    [BuildStepAttribute]
public static IsModeAssert DefaultValue(BuildChainFlavor buildChainFlavor);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAssert/<DefineConstantInMsbuild>d__4")]
[BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeAssert mode);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize>")]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize : object {
    public static bool DefaultValue;
    public static string DefineConstant;
    public static string DefineConstantOff;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public IsModeOptimize(bool isOn);
    private static IsModeOptimize();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize/<DefineConstantInMsbuild>d__6")]
[BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeOptimize mode);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions>")]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions : object {
    public static string DefineConstant;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public IsModeReportExceptions(bool isOn);
    private static IsModeReportExceptions();
    [BuildStepAttribute]
public static IEnumerable`1<GeneratedAssemblyAttributeArtifact> ApplyAssemblyCustomAttribute(IsModeReportExceptions mode, AllAssembliesOnSources allassSrc, AllAssembliesOnEverything allass);
    [BuildStepAttribute]
public static IsModeReportExceptions DefaultValue(BuildChainFlavor buildChainFlavor);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions/<DefineConstantInMsbuild>d__5")]
[BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeReportExceptions mode);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeStatistics/IsModeStatisticsSerializer")]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeStatistics : object {
    public static bool DefaultValue;
    public static string DefineConstant;
    public bool IsOn;
    public IsModeStatistics(bool isOn);
    private static IsModeStatistics();
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeStatistics/<DefineConstantInMsbuild>d__5")]
[BuildStepAttribute]
public static IEnumerable`1<DefineConstantArtifact> DefineConstantInMsbuild(IsModeStatistics mode);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsTreatWarningsAsErrors>")]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsTreatWarningsAsErrors : object {
    public static bool DefaultValue;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public IsTreatWarningsAsErrors(bool isOn);
    private static IsTreatWarningsAsErrors();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeploy/ProductsToDeploySerializer")]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeploy : object {
    public static ProductsToDeployEnum DefaultValue;
    public ProductsToDeployEnum Value;
    public ProductsToDeploy(ProductsToDeployEnum value);
    private static ProductsToDeploy();
    public virtual string ToString();
    public bool HasReSharperUltimate();
    public bool HasRider();
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeployEnum : Enum {
    public int value__;
    public static ProductsToDeployEnum RIDER;
    public static ProductsToDeployEnum RESHARPER_ULTIMATE;
    public static ProductsToDeployEnum ALL;
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProjectShortNamesArtifact : object {
    [NotNullAttribute]
public IReadOnlyDictionary`2<Pair`2<SubplatformName, RelativePath>, string> ShortNames;
    [BuildStepAttribute]
public ProjectShortNamesArtifact(AllAssembliesOnSources allassSrc);
    public string GetShortName(SubplatformProjectWrapper subandproj);
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__MakeName|0_0(SubplatformProjectWrapper subandproj);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SolutionToolsetHelpers : object {
    [NotNullAttribute]
private ProductHomeDirArtifact myHomedir;
    [NotNullAttribute]
private IntermediateOutputFolderPerProfileArtifact myIntdir;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ConcurrentDictionary`2<string, string> myMapUsedUpFolderIds;
    [NotNullAttribute]
private IJetNugetPackageManager myPackman;
    [NotNullAttribute]
private ITaskHost myTasker;
    public SolutionToolsetHelpers(IJetNugetPackageManager packman, ITaskHost tasker, ProductHomeDirArtifact homedir, IntermediateOutputFolderPerProfileArtifact intdir, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SolutionToolsetHelpers/<FillPropertiesAndInstallPackagesAsync>d__7")]
public Task FillPropertiesAndInstallPackagesAsync(Lifetime lifetime, IReadOnlyCollection`1<Request> requests, string folderid, string progresstitle);
    public static void ToManagedProjectStuffing(Request request, SubplatformProjectWrapper subandproj, ImmutableArray`1& props, ImmutableArray`1& imports, ILogger logger);
    [NotNullAttribute]
private FileSystemPath GetToolsetDir(string folderid);
    [NotNullAttribute]
private string UseBaseDirMacrosForFullPaths(FileSystemPath path);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.EmitsPerProjectGeneratedTargets : object {
    public static string GeneratedTargetsFileNameBase;
    public static string GeneratedProxyImportedProjectName;
    public static string GeneratedTargetsFileExt;
    private static EmitsPerProjectGeneratedTargets();
    [BuildStepAttribute]
public static IList`1<GeneratedMsbuildMainImportedProject> EmitPerProjectGeneratedTargets(AllAssembliesOnSources allassSrc, GeneratedMsbuildTaskItem[] taskitems, GeneratedMsbuildImport[] imports, GeneratedMsbuildProperty[] properties, GeneratedMsbuildCustomXml[] customxml, IChooseCommonTargetsForProjectKind[] targetchoosers, ProfileNameArtifact profile, ILogger logger);
    [CanBeNullAttribute]
private static GeneratedMsbuildMainImportedProject DoForProject(SubplatformProjectWrapper subandproj, ICollection`1<GeneratedMsbuildElementBase> elementsHere, ProfileNameArtifact profile, IChooseCommonTargetsForProjectKind[] targetchoosers, ImmutableFileItem fileProxyImportedProject, ILogger logger);
    private static ImmutableFileItem EmitProxyImportedProjectFile(ProfileNameArtifact profile);
    [CanBeNullAttribute]
private static string GetCommonTargetsImport(IChooseCommonTargetsForProjectKind[] projectkind, RelativePath relProjectFile, ILogger logger);
    [NotNullAttribute]
private static RelativePath MakeGeneratedTargetsFileName(ProfileNameArtifact profile);
    private static void WriteElement(GeneratedMsbuildElementBase element, XmlElement xmlProject, IList`1<ImmutableFileItem> itemsToRealize, ILogger logger);
    private static void WriteElement_CustomXml(GeneratedMsbuildCustomXml element, XmlElement xmlProject, ILogger logger);
    private static void WriteElement_Import(GeneratedMsbuildImport element, XmlElement xmlProject, ILogger logger);
    private static void WriteElement_Property(GeneratedMsbuildProperty element, XmlElement xmlProject, ILogger logger);
    private static void WriteElement_TaskItem(GeneratedMsbuildTaskItem element, XmlElement xmlProject, IList`1<ImmutableFileItem> itemsToRealize, ILogger logger);
    private static void WriteElementsSection(ICollection`1<GeneratedMsbuildElementBase> elementsUnfiltered, XmlElement xmlProject, DispositionAgainstCommonTargets disposition, IList`1<ImmutableFileItem> itemsToRealize, ILogger logger);
    private static void WriteMainCommonTargets(XmlElement xmlProject, SubplatformProjectWrapper subandproj, IChooseCommonTargetsForProjectKind[] targetsImport, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ForceModeOptimize : object {
    [NotNullAttribute]
public SubplatformName SubplatformName;
    public ForceModeOptimize(SubplatformName subplatformName);
    [BuildStepAttribute]
public static List`1<JetSdkProjectParameterArtifact> ToSdkProjectParameterArtifacts(IReadOnlyCollection`1<ForceModeOptimize> forceds, AllAssembliesOnEverything allass, ILogger logger);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.HackCleanupLegacyGeneratedFiles : object {
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy CleanupLegacyGeneratedFilesFromSdkProjects(AllAssembliesOnSources allassSrc, ILogger logger);
}
public interface JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.IChooseCommonTargetsForProjectKind {
    [CanBeNullAttribute]
public abstract virtual bool TryGetCommonTargetsImportForProject(RelativePath relProjFileName, String& commonTargetsImport);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact : object {
    [NotNullAttribute]
public string ItemSpec;
    [NotNullAttribute]
public string ParameterName;
    public JetSdkProjectParameterArtifact(string sParameterName, string sItemSpec);
    public sealed virtual int CompareTo(JetSdkProjectParameterArtifact other);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual bool Equals(JetSdkProjectParameterArtifact other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [NotNullAttribute]
public static ImmutableFileItem WriteOut(IReadOnlyCollection`1<JetSdkProjectParameterArtifact> parameters);
    [BuildStepAttribute]
public static LocalPrepareWorkingCopy WriteToProductRootOnPwc(JetSdkProjectParameterArtifact[] parameters, LocalMainSolutionFilePath solpath, ILogger logger);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.PrepareGitSubplatforms : object {
    private static List`1<string> ourDefaultReferences;
    private static Regex ourSubplatformPackageIdRegex;
    private static Dictionary`2<string, string> ourKnownSubplatformPropsNames;
    private static PrepareGitSubplatforms();
    [BuildStepAttribute]
public static PackageReferenceArtifact[] RequestRestorePackageReferencesFromBinarySubs(AllAssembliesOnEverything allass, AllAssembliesOnSources allassSrc);
    [BuildStepAttribute]
public static ValueTuple`3<ICollection`1<GeneratedMsbuildCustomXml>, UsedSubplatformsWithBinRefs, ImplicitEmbeddedGitSubsProjectRefs> PrepareGitSubs(AllAssembliesOnEverything allAss, AllAssembliesOnSources allAssSrc, ILogger logger, ProductHomeDirArtifact homedir, LocalRestoredPackageReferenceArtifact[] restoredRefs, Optional`1<ForceTargetFrameworkVersion> forceTargetFrameworkVersion);
    private static bool TryEmmitImportedProjects(SubplatformProjectWrapper projWrapper, StringBuilder sbVerboseSummary, IReadOnlyCollection`1<Subplatform> referencedSbPlsFromCurrent, GeneratedMsbuildCustomXml& customXml, ICollection`1& restoreSubs, ICollection`1& referencedProjectsFromBiSubs);
    private static GeneratedMsbuildCustomXml EmitDefaultReferences(SubplatformProjectWrapper projectWrapper);
    private static IEnumerable`1<XElement> EmitReferencesAsPackageReferences(StringBuilder sbVerboseSummary, IEnumerable`1<PackageWithInfo> referencedPackages);
    private static IEnumerable`1<XElement> EmitReferencesAsAssemblies(StringBuilder sbVerboseSummary, IEnumerable`1<PackageWithInfo> referencedPackages, ProductHomeDirArtifact homeDir, TargetFrameworkId targetFramework);
    private static bool TryEmitReferences(SubplatformProjectWrapper projectWrapper, StringBuilder sbVerboseSummary, LocalRestoredPackageReferenceArtifact[] restoredRefs, ProductHomeDirArtifact homeDir, TargetFrameworkId targetFramework, AllAssembliesAccess aaa, IReadOnlyCollection`1<Subplatform> referencedSbPlsFromCurrent, ILogger logger, GeneratedMsbuildCustomXml& customXml);
    private static string WrapMsbConst(string value);
    private static T CatchSilent(StringBuilder sb, Func`1<T> action);
    private static IEnumerable`1<FileSystemPath> ExtractPropsAndTargets(LocalRestoredPackageReferenceArtifact reference, StringBuilder sbLog, ProductHomeDirArtifact homeDir, TargetFrameworkId targetFramework);
    private static IEnumerable`1<AssemblyNameAndLocation> ExtractAssemblies(LocalRestoredPackageReferenceArtifact reference, StringBuilder sbLog, ProductHomeDirArtifact homeDir, TargetFrameworkId targetFramework);
    private static bool TrySelectFramework(IEnumerable`1<PathWithFramework> pathsWithFrameworks, TargetFrameworkId targetFramework, TargetFrameworkId& selectedFramework);
    private static IEnumerable`1<PackageWithInfo> FilterByOnlyReferencedPackages(IEnumerable`1<LocalRestoredPackageReferenceArtifact> restoredRefs, SubplatformProjectWrapper projectWrapper, AllAssembliesAccess aaa, IReadOnlyCollection`1<Subplatform> originTransitiveSubRefs, StringBuilder sb);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.PrepareGitSubplatforms/<FilterCandidatesByPlatform>d__14")]
private static IEnumerable`1<PathWithFramework> FilterCandidatesByPlatform(IEnumerable`1<DirectoryEntryData> entryDataSeq, string folderName, TargetFrameworkId targetFramework, StringBuilder sbVerboseSummary);
    private static bool TryMatchPath(RelativePath executablePath, string folderName, String& framework, String& platform, String& architecture);
    private static List`1<Subplatform> ExtractSubplatformReferencesFromCsproj(SubplatformProjectWrapper projectWrapper, IReadOnlyCollection`1<Subplatform> originTransitiveSubRefs, StringBuilder sbVerboseSummary);
    [CanBeNullAttribute]
private static string ParseSubplatformPathFromProjectImport(string packageId);
    private static ImmutableArray`1<ValueTuple`2<ProjectAndAssembly, SubplatformName>> CollectProjectsFromBinarySub(IReadOnlyCollection`1<SubplatformOnPackageEx> subs);
    private static bool IsAppropriateArchitecture(ProcessorArchitecture assProcArch);
}
public static class JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SdkMiniEmitSideProjects : object {
    public static string ProfileSupportingSdkMini;
    private static RelativePath SdkUserFileName;
    private static SdkMiniEmitSideProjects();
    [NotNullAttribute]
public static GeneratedMsbuildMainImportedProject EmitSideGeneratedTargets(GeneratedMsbuildMainImportedProject generated);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SdkMiniEmitSideProjects/<RunAsync>d__3")]
public static Task`1<LocalPrepareWorkingCopy> RunAsync(Lifetime lifetime, AllAssembliesOnSources allassSrc, LocalMainSolutionFilePath solfilepathOld, LocalSolutionSettingsGenerated[] solsetpacks, ITaskHost tasker, ILogger logger);
    [NotNullAttribute]
private static string AdjustSolutionFileName(string original);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SdkMiniEmitSideProjects/<GetNonSdkProjectsReadyForSdkAsync>d__5")]
[NotNullAttribute]
private static Task`1<JetHashSet`1<ValueTuple`2<SubplatformName, RelativePath>>> GetNonSdkProjectsReadyForSdkAsync(Lifetime lifetime, AllAssembliesOnSources allassSrc, ITaskHost tasker, ILogger logger);
    private static ProjectAndAssembly RefitProjectForSdk(ProjectAndAssembly paass, SubplatformOnSources sub, FileSystemPath pathSub, JetHashSet`1<ValueTuple`2<SubplatformName, RelativePath>> hashProjectsForSdkMode, bool isSdkUser, ILogger logger);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppEnableDeveloperMode>")]
public class JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppEnableDeveloperMode : object {
    public static bool DefaultValue;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public CppEnableDeveloperMode(bool isOn);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppSuppressUnityBuild>")]
public class JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppSuppressUnityBuild : object {
    public static bool DefaultValue;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public CppSuppressUnityBuild(bool isOn);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppUseCompilationCache>")]
public class JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppUseCompilationCache : object {
    public static bool DefaultValue;
    public bool IsOn;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public CppUseCompilationCache(bool isOn);
    private static CppUseCompilationCache();
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.PreCompile.PackageFileRoleEx : object {
    [ExtensionAttribute]
public static bool IsIncludedInMainPackage(PackageFileRole thіs);
    [ExtensionAttribute]
public static bool IsIncludedInSymbolsPackage(PackageFileRole thіs);
    [ExtensionAttribute]
public static bool IsInstalled(PackageFileRole thіs);
    [ExtensionAttribute]
public static bool IsListedInAppPackage(PackageFileRole thіs);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.SetupProductRoot : object {
    [NotNullAttribute]
public IReadOnlyCollection`1<ImmutableFileItem> Files;
    [BuildStepAttribute]
public SetupProductRoot(ProductHomeDirArtifact homedir, NugetConfigFile nugetconfig, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.PreCompile.SolutionItems : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<RelativePath> <Paths>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<RelativePath> Paths { get; }
    public SolutionItems(ImmutableArray`1<RelativePath> paths);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<RelativePath> get_Paths();
}
public static class JetBrains.Application.BuildScript.PreCompile.ToolPackages.CachedRoslynTask : object {
    private static string DisableRefasmerMarkerFile;
    private static string DisableCachedRoslynMarkerFile;
    private static CachedRoslynTask();
    [BuildStepAttribute]
public static void Inject(ProductHomeDirArtifact homedir, List`1& packages, List`1& features, ILogger logger);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact : object {
    public string Condition;
    public RelativePath FileToImportFromPackage;
    public string PackageId;
    [CanBeNullAttribute]
public JetSemanticVersion PackageVersion;
    public string SubplatformNamePassFilterRegex;
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageTasks : object {
    public static ImmutableArray`1<ValueTuple`2<InjectToolPackageArtifact, PackageReferenceInfo>> GetPackageReferenceInfos(InjectToolPackageArtifact[] injections, PackageVersionLocks verlocks, ILogger logger);
    [BuildStepAttribute]
public static List`1<GeneratedMsbuildImport> Inject(AllAssembliesOnSources allass, InjectToolPackageArtifact[] injections, LocalRestoredPackages packages, PackageVersionLocks verlocks, ILogger logger);
    [BuildStepAttribute]
public static List`1<PackageReferenceArtifact> RequestRetrieval(AllAssembliesOnSources allass, InjectToolPackageArtifact[] injections, PackageVersionLocks verlocks, ILogger logger);
    [CanBeNullAttribute]
private static Regex MakeRegexPassFilter(InjectToolPackageArtifact injection);
}
public static class JetBrains.Application.BuildScript.PreCompile.ToolPackages.MsbuildCopyWithMoveAside : object {
    [BuildStepAttribute]
public static IEnumerable`1<InjectToolPackageArtifact> Inject { get; }
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.PreCompile.ToolPackages.MsbuildCopyWithMoveAside/<get_Inject>d__1")]
public static IEnumerable`1<InjectToolPackageArtifact> get_Inject();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.ProductBinariesDirArtifact/ProductBinariesDirArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ProductBinariesDirArtifact/ProductBinariesDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.ProductBinariesDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath ProductBinariesDir;
    public ProductBinariesDirArtifact(FileSystemPath productBinariesDir);
    [BuildStepAttribute]
public ProductBinariesDirArtifact(ProductHomeDirArtifact homedir, Optional`1<ProductBinariesDirRelativeHintArtifact> maybeRelativeHint, Optional`1<ProfileNameArtifact> maybeProfileNameHint, ILogger logger);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact/ProductBinariesDirRelativeHintArtifactSerializer")]
public class JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact : object {
    [NotNullAttribute]
public IPath ProductBinariesDirRelativeHint;
    public ProductBinariesDirRelativeHintArtifact(IPath productBinariesDirRelativeHint);
    public virtual string ToString();
}
public class JetBrains.Application.BuildScript.ProductHeadlineBuilder : object {
    private StringBuilder myHeadline;
    [NotNullAttribute]
public ProductHeadlineBuilder ProductName(string productName);
    [NotNullAttribute]
public ProductHeadlineBuilder Version(BuildVersionSuffix version);
    [NotNullAttribute]
public ProductHeadlineBuilder Version(JetSemanticVersion version);
    [NotNullAttribute]
public ProductHeadlineBuilder Copyright(int sinceYear, bool useAnsiMark, string company);
    [NotNullAttribute]
public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.ProductHomeDirArtifact/ProductHomeDirArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.ProductHomeDirArtifact/ProductHomeDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.ProductHomeDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath ProductHomeDir;
    public ProductHomeDirArtifact(FileSystemPath productHomeDir);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.ProductNameAndVersionArtifact : object {
    [NotNullAttribute]
private string myCompanyNameHuman;
    [NotNullAttribute]
private string myCompanyNameLegal;
    [NotNullAttribute]
private string myProductName;
    [NotNullAttribute]
private string myProductMarketingName;
    [NotNullAttribute]
private JetSemanticVersion myProductVersion;
    private string Stream_CompanyNameHuman;
    private string Stream_CompanyNameLegal;
    private string Stream_ProductName;
    private string Stream_ProductMarketingName;
    private string Stream_ProductVersion;
    public string CompanyNameHuman { get; }
    public string CompanyNameLegal { get; }
    public string ProductName { get; }
    public string ProductMarketingName { get; }
    public JetSemanticVersion ProductVersion { get; }
    public ProductNameAndVersionArtifact(string sProductName, SubplatformOnSources subplatform, BuildVersionSuffix suffix);
    public ProductNameAndVersionArtifact(string sCompanyNameHuman, string sCompanyNameLegal, string sProductName, JetSemanticVersion versionProduct);
    public ProductNameAndVersionArtifact(string companyNameHuman, string companyNameLegal, string productName, string productMarketingName, JetSemanticVersion versionProduct);
    public ProductNameAndVersionArtifact(IStructuredStorage storage);
    public ProductNameAndVersionArtifact(CsexpReader reader);
    public string get_CompanyNameHuman();
    public string get_CompanyNameLegal();
    public string get_ProductName();
    public string get_ProductMarketingName();
    public JetSemanticVersion get_ProductVersion();
    public void GetObjectData(CsexpWriter writer);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
    private static void Serialize(CsexpArchive ar, String& companyNameHuman, String& companyNameLegal, String& productName, String& productMarketingName, JetSemanticVersion& productVersion);
}
[FlagsAttribute]
public enum JetBrains.Application.BuildScript.ProductNameFlags : Enum {
    public int value__;
    public static ProductNameFlags O;
    public static ProductNameFlags Name;
    public static ProductNameFlags Company;
    public static ProductNameFlags VersionMarketing;
    public static ProductNameFlags VersionFromPackage;
    public static ProductNameFlags BuildDateFromPackage;
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.ProductPartCatalogForBuild : object {
    [NotNullAttribute]
public IAssemblyMasterBinder MasterBinder;
    [NotNullAttribute]
public PartCatalog ProductPartCatalog;
    protected ProductPartCatalogForBuild(Tuple`2<PartCatalog, IAssemblyMasterBinder> data);
    [NotNullAttribute]
public static ProductPartCatalogForBuild CreateOnCatalog(PartCatalog catalog, IAssemblyMasterBinder masterbinder);
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Util.Reflection.SimpleTypeConverter`1<JetBrains.Application.BuildScript.ProfileNameArtifact>")]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.ProfileNameArtifact>")]
public class JetBrains.Application.BuildScript.ProfileNameArtifact : object {
    [NotNullAttribute]
public string ProfileName;
    public ProfileNameArtifact(string profile);
    [BuildStepAttribute]
public static ProfileNameArtifact InferDefaultProfileNameFromProductHomeDir(ProductHomeDirArtifact homedir, ILogger logger);
    public virtual string ToString();
}
public static class JetBrains.Application.BuildScript.ProfileNameArtUtil : object {
    private static Regex ourPattern;
    private static ProfileNameArtUtil();
    public static bool TryValidateName(string profile);
    public static void ValidateName(string profile);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.PublicApiValidationResult : object {
    private static string PluginsSource;
    private static string WaveSpecificPluginsSource;
    private static string MarketplaceGraphQL;
    private static string MarketplaceDownload;
    [CanBeNullAttribute]
public string ErrorMessage;
    public PublicApiValidationResult(string errorMessage);
    private static PublicApiValidationResult();
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PublicApiValidationResult/<ValidateApi>d__4")]
[BuildStepAttribute]
public static Task`1<IEnumerable`1<PublicApiValidationResult>> ValidateApi(Lifetime lifetime, ILogger logger, IBuildTaskHost taskHost, NugetPackageManagerForBuild nugetter, InputPackage[] inputPackages, AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> homedir, Optional`1<ProductBinariesDirArtifact> bindir, Optional`1<SkipSourcesValidation> skipval, Optional`1<CanAutofixFilesOnDisk> isModeLive);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.PublicApiValidationResult/<Validate>d__7")]
private static Task`1<IEnumerable`1<string>> Validate(Lifetime lifetime, ILogger logger, IBuildTaskHost taskHost, NugetPackageManagerForBuild nugetPackageManagerForBuild, InputPackage[] inputPackages, AllAssembliesOnEverything allass, Optional`1<ProductHomeDirArtifact> homedir, Optional`1<ProductBinariesDirArtifact> bindir, Optional`1<SkipSourcesValidation> skipval, Optional`1<CanAutofixFilesOnDisk> isModeLive);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Func`1<Stream>> <Validate>g__GetMetadata|7_1(IEnumerable`1<IHaveJetNugetPackage> packages);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Func`1<Stream>> <Validate>g__GetStreams|7_2(IEnumerable`1<IAssemblyItem> assemblies);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact : object {
    public bool IsSynthetic;
    [NotNullAttribute]
public IJetNugetPackage Package;
    [NotNullAttribute]
public ICollection`1<PackageReferenceArtifact> PackageReferences;
    private IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.Package { get; }
    public RetrievedPackageReferenceArtifact(PackageReferenceArtifact[] packageReferences, IJetNugetPackage package, bool isSynthetic);
    [BuildStepAttribute]
public static DeployablePackage[] DeployNonDevelopmentPackageReferences(RetrievedPackageReferenceArtifact[] pkgs, ILogger logger);
    public virtual string ToString();
    private sealed virtual override IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.get_Package();
}
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.RuntimeSpecificPackageReferenceMetadata>")]
public class JetBrains.Application.BuildScript.RuntimeSpecificPackageReferenceMetadata : object {
    [NotNullAttribute]
public string PackageId;
    [ItemNotNullAttribute]
public ImmutableArray`1<JetRuntimeId> RuntimeIds;
    public RuntimeSpecificPackageReferenceMetadata(string packageId, ImmutableArray`1<JetRuntimeId> runtimeIds);
    public RuntimeSpecificPackageReferenceMetadata(string serialized);
    public virtual string ToString();
    [BuildStepAttribute]
public static SubplatformComponentForPackagingFast[] EmbedRuntimeSpecificPackageRefsIntoSubplatform(PackageReferenceArtifact[] pkgrefs);
    [BuildStepAttribute]
public static SubplatformComponentForPackagingFast[] EmbedRuntimeSpecificSubplatformRefsIntoSubplatform(AllAssembliesOnSources allassSrc);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.SerializedHostComponentItemArtifact : object {
    [NotNullAttribute]
public object ComponentForSerialization;
    public SerializedHostComponentItemArtifact(object componentForSerialization);
}
public class JetBrains.Application.BuildScript.ShellLicenseProvider : object {
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.ShellLicenseProvider/<GetLicenses>d__0")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformThirdPartyLicenseInfo> GetLicenses();
}
[BuildArtifactAttribute]
[TypeConverterAttribute("JetBrains.Build.Helpers.General.BooleanArtifactConverter`1<JetBrains.Application.BuildScript.SkipLocalCompilationArtifact>")]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.SkipLocalCompilationArtifact>")]
public class JetBrains.Application.BuildScript.SkipLocalCompilationArtifact : object {
    public bool IsSkipCompileAll;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public SkipLocalCompilationArtifact(bool isSkipCompileAll);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.SkipLocalCompilationCpp>")]
public class JetBrains.Application.BuildScript.SkipLocalCompilationCpp : object {
    public bool IsSkipCompileCpp;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public SkipLocalCompilationCpp(bool isSkipCompileCpp);
    [NullableContextAttribute("1")]
public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.SkipSourcesValidation>")]
public class JetBrains.Application.BuildScript.SkipSourcesValidation : object {
    public bool IsSkipSourcesValidation;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public SkipSourcesValidation(bool isSkipSourcesValidation);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration>")]
public class JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration : object {
    public bool IsSkipOsIntegration;
    private bool JetBrains.Build.Helpers.General.IBooleanArtifact.Value { get; }
    public SkipStandaloneHostOsIntegration(bool isSkipOsIntegration);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Build.Helpers.General.IBooleanArtifact.get_Value();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembilesEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static AllAssembliesAccess CreateAccess(AllAssembliesOnEverything thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static AllAssembliesOnSources Filter(AllAssembliesOnSources thіs, IAllAssembliesOnSrcFilter collinfo);
    [ExtensionAttribute]
[NotNullAttribute]
public static AllAssembliesOnPackages Filter(AllAssembliesOnPackages thіs, AllAssembliesFilter collinfo);
    [ExtensionAttribute]
[NotNullAttribute]
public static AllAssembliesOnSources FilterBinDependencies(AllAssembliesOnSources thіs, AllAssembliesFilterByProfile collinfo);
    [ExtensionAttribute]
[ObsoleteAttribute("Use FindSubplatformByClass.")]
[NotNullAttribute]
public static Subplatform FindByClass(AllAssemblies allass);
    [ExtensionAttribute]
[NotNullAttribute]
public static SubplatformProjectWrapper FindProjectByClass(AllAssembliesOnSources allassSrc);
    [ExtensionAttribute]
[NotNullAttribute]
public static Subplatform FindSubplatformByClass(AllAssembliesOnEverything allass);
    [NotNullAttribute]
public static Subplatform FindSubplatformByClass(Type typeFromSubBinariesOrBuildScript, IEnumerable`1<Subplatform> subplatforms);
    public static SubplatformOnSources FindSubplatformByPathInside(IEnumerable`1<Subplatform> subplatforms, RelativePath relSampleFileUnderHomeDir, OnError onerror);
    [ExtensionAttribute]
public static Subplatform FindSubplatformOfAssembly(AllAssemblies allass, AssemblyNameInfo assname, OnError onerror);
    [NotNullAttribute]
public static RelativePath GetBuildScriptFilePathByClass(Type typeFromBuildScript);
    [ExtensionAttribute]
[ObsoleteAttribute("On AllAssembliesOnEverything, call FindSubplatformByClass on some class from that subplatform, and then check if it's a SubplatformOnSources.")]
public static bool Has(AllAssemblies thіs, SubplatformName what);
    [ExtensionAttribute]
[ObsoleteAttribute("Call FindSubplatformByClass on some class from that subplatform, and then check if it's a SubplatformOnSources.")]
public static bool HasInSources(AllAssembliesOnEverything thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static ProductHomeDirArtifact ProductHomeDirArtifact(AllAssembliesOnSources thіs);
    [ExtensionAttribute]
public static bool TryFindProjectByClass(AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir, SubplatformProjectWrapper& subandproj);
    public static Subplatform TryFindSubplatformByClass(Type typeFromSubBinariesOrBuildScript, IEnumerable`1<Subplatform> subplatforms, OnError onerror);
}
public class JetBrains.Application.BuildScript.Solution.AllAssemblies : object {
    public IList`1<Subplatform> Subplatforms;
    public AllAssemblies(IEnumerable`1<Subplatform> subplatforms);
}
public class JetBrains.Application.BuildScript.Solution.AllAssembliesAccess : object {
    public AllAssemblies AllAssemblies;
    public IDictionary`2<SubplatformName, Subplatform> CacheByName;
    public DirectedGraph`1<Subplatform> SubplatformReferences;
    public AllAssembliesAccess(AllAssembliesOnEverything allAssemblies);
    [NotNullAttribute]
public ICollection`1<Subplatform> AddChildrenTransitively(Subplatform sub);
    [NotNullAttribute]
public ICollection`1<Subplatform> AddChildrenTransitively(IEnumerable`1<Subplatform> subs);
    [NotNullAttribute]
public IList`1<Subplatform> AddReferencesTransitively(Subplatform sub);
    [NotNullAttribute]
public IList`1<Subplatform> AddReferencesTransitively(IEnumerable`1<Subplatform> subs);
    [NotNullAttribute]
public Subplatform Find(SubplatformName name);
    private static ReadOnlyDictionary`2<SubplatformName, Subplatform> Ctor_CacheByName(AllAssemblies allass, ILogger Logger);
    private DirectedGraph`1<Subplatform> Ctor_References(ILogger Logger);
    [CompilerGeneratedAttribute]
private object <Find>b__8_0();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesAndBuildSources : object {
    public static RelativePath BuildSourcesFolderName;
    private static AllAssembliesAndBuildSources();
    [ExtensionAttribute]
public static IEnumerable`1<FileSystemPath> GetActualSubplatformFoldersWithBuildScriptSources(AllAssembliesOnSources thіs);
    [ExtensionAttribute]
public static IEnumerable`1<RelativePath> GetPossibleSubplatformFoldersWithBuildScriptSources(AllAssembliesOnSources thіs);
    [ExtensionAttribute]
public static IEnumerable`1<RelativePath> GetPossibleSubplatformFoldersWithBuildScriptSources(AllAssembliesOnEverything thіs);
    private static IEnumerable`1<RelativePath> GetPossibleSubplatformFoldersWithBuildScriptSources(SubplatformOnSources subplatform);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesFilter/AllAssembliesCollectionInfoSerializer")]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesFilter : object {
    public string SubplatformMaskOnPackages;
    public string SubplatformMaskOnSources;
    [NotNullAttribute]
public AllAssembliesOnPackages Filter(AllAssembliesOnPackages allass);
    [NotNullAttribute]
public sealed virtual AllAssembliesOnSources Filter(AllAssembliesOnSources allass);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile/AllAssembliesCollectionInfoSerializer")]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile/AllAssembliesCollectionInfoTypeConverter")]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile : object {
    public string SubplatformMaskOnBinaries;
    public string SubplatformMaskOnSources;
    [NotNullAttribute]
public sealed virtual AllAssembliesOnSources Filter(AllAssembliesOnSources allass);
    [NotNullAttribute]
public AllAssembliesOnSources FilterBinDependencies(AllAssembliesOnSources allass);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfileEx : object {
    [ExtensionAttribute]
public static bool IsBinariesEmpty(AllAssembliesFilterByProfile that);
    [ExtensionAttribute]
public static bool IsSourcesEmpty(AllAssembliesFilterByProfile that);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesLocator : object {
    public static string DefaultIntermediateOutputPathFolderName;
    public static string DefaultProductBinariesDirFolderName;
    public static string JetMetadataInApplicationPackageExt;
    public static string JetMetadataLightInApplicationPackageExt;
    internal static ILogger Logger;
    public static string ProductHomeDirEnvironmentVariableName;
    public static string ProductHomeDirMarkerFile;
    public static string ProgramDatabasePackageIdAppendix;
    public static string ProjectsCollectionDirMarkerFile;
    public static string ProjectsHiddenFromSolutionDirMarkerFile;
    public static string SubplatformRootDirMarkerFileName;
    public static string SubplatformRootDirStrongNameKeyPairFileName;
    public static string SubplatformsCollectionDirMarkerFileName;
    public static string SdkBasedPluginEmbeddingDirMarkerFileName;
    private static AllAssembliesLocator();
    public static AllAssembliesOnPackages GetAllAssembliesOnLocallyInstalledBinariesFlat(ProductBinariesDirArtifact bindir);
    public static Task`1<AllAssembliesOnSources> GetAllAssembliesOnSourcesAsync(OuterLifetime lifetime, FileSystemPath pathToProductHomeDir, ITaskHost tasker, ILogger logger);
    public static AllAssembliesOnSources GetAllAssembliesOnSourcesLegacyNonParallel(FileSystemPath pathToProductHomeDir, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesLocator/<GetAllAssembliesOnSourcesCoreAsync>d__17")]
private static Task`1<AllAssembliesOnSources> GetAllAssembliesOnSourcesCoreAsync(OuterLifetime lifetime, FileSystemPath pathToProductHomeDir, ITaskHost maybeTasker, ILogger logger);
    public static FileSystemPath GetProductHomeDirOnSources(FileSystemPath pathInsideProductDir);
    public static FileSystemPath GetProductHomeDirOnSourcesOnProcessEntryPoint();
    public static List`1<FileSystemPath> GetProjectFilesUnderFolder(FileSystemPath pathFolderWithProjects, bool isDeep);
    [IteratorStateMachineAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesLocator/<GetSubplatformOnSourcesFolders>d__21")]
private static IEnumerable`1<SubFolderCandidate> GetSubplatformOnSourcesFolders(FileSystemPath pathProductHomeDir);
    public static string GetSubplatformPackageId(SubplatformName subplatformname, string sCompanyNameHuman);
    public static string GetSubplatformPackageId(Subplatform subplatform);
    [ExtensionAttribute]
public static IEnumerable`1<AssemblyNameInfo> SelectManyAssemblies(AllAssemblies thіs);
    [ExtensionAttribute]
public static IEnumerable`1<SubplatformProjectWrapper> SelectManyProjects(AllAssembliesOnSources allassSrc);
    [ExtensionAttribute]
public static IEnumerable`1<SubplatformProjectWrapper> SelectManyProjects_NonSdk(AllAssembliesOnSources allassSrc);
    [ExtensionAttribute]
public static IEnumerable`1<SubplatformProjectWrapper> SelectManyProjects_WithGeneratedTargets(AllAssembliesOnSources allassSrc);
    public static FileSystemPath TryGetProductHomeDirOnSources(FileSystemPath pathInsideProductDir);
    private static void CreateSubplatformFromMetadataFile(FileSystemPath pathMetadataStorage, List`1<SubplatformOnPackage> output, bool isLightweight);
    private static void FetchAssemblyNameAndFlagsFromProjectFile(FileSystemPath file, bool isSdkBasedPluginEmbedding, AssemblyNameInfo& assname, EFlags& flags);
    private static bool IsNamedSdk(XmlDocument xmldoc, XmlNamespaceManager nsman, string possibleName, String[] possibleNames);
    private static string FetchPropertyValue(string sProperty, string valuePattern, FileSystemPath file, XmlDocument xmldoc, XmlNamespaceManager nsman);
    private static string TryFetchPropertyValue(string sProperty, string valuePattern, FileSystemPath file, XmlDocument xmldoc, bool isSdkBasedPluginEmbedding, XmlNamespaceManager nsman);
    [CompilerGeneratedAttribute]
internal static ProjectAndAssembly <GetAllAssembliesOnSourcesCoreAsync>g__DoSingleProjectFile|17_2(FileSystemPath projfile, FileSystemPath pathSubplatform, SubFolderCandidate subOnSrcFolder);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything : AllAssemblies {
    public AllAssembliesOnEverything(IEnumerable`1<Subplatform> subplatforms);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackages : AllAssemblies {
    [NotNullAttribute]
public IList`1<SubplatformOnPackage> Subplatforms;
    public AllAssembliesOnPackages(ICollection`1<SubplatformOnPackage> subplatforms);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackagesEx : AllAssemblies {
    [NotNullAttribute]
public IList`1<SubplatformOnPackageEx> Subplatforms;
    [BuildStepAttribute]
public AllAssembliesOnPackagesEx(AllAssembliesOnPackages allassPkg, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources : AllAssemblies {
    [NotNullAttribute]
public FileSystemPath ProductHomeDir;
    [NotNullAttribute]
public IList`1<SubplatformOnSources> Subplatforms;
    public AllAssembliesOnSources(FileSystemPath pathProductHomeDir, ICollection`1<SubplatformOnSources> subplatforms);
}
public static class JetBrains.Application.BuildScript.Solution.AllAssembliesTasks : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesTasks/<CollectAllAssembliesStep>d__0")]
[BuildStepAttribute]
public static Task`1<AllAssembliesOnEverything> CollectAllAssembliesStep(Lifetime lifetime, Optional`1<ProductHomeDirArtifact> homedir, Optional`1<AllAssembliesFilter> maybecollinfo, Optional`1<AllAssembliesFilterByProfile> maybePrfilter, SubplatformsInAllInputPackages allinputs, ITaskHost tasker, ILogger logger);
    [BuildStepAttribute]
public static AllAssembliesOnPackages ExtractAllAssembliesOnPackages(AllAssembliesOnEverything allass);
    [BuildStepAttribute]
public static AllAssembliesOnSources ExtractAllAssembliesOnSources(AllAssembliesOnEverything allass, ProductHomeDirArtifact homedir);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Solution.AllAssembliesTasks/<FindSubplatformsInInputPackagesAsync>d__3")]
[BuildStepAttribute]
public static Task`1<SubplatformsInAllInputPackages> FindSubplatformsInInputPackagesAsync(Lifetime lifetime, InputPackage[] inputs, IBuildTaskHost tasker, ILogger logger);
}
public interface JetBrains.Application.BuildScript.Solution.IAllAssembliesOnSrcFilter {
    [NotNullAttribute]
public abstract virtual AllAssembliesOnSources Filter(AllAssembliesOnSources allass);
}
public enum JetBrains.Application.BuildScript.Solution.OutputType : Enum {
    public byte value__;
    public static OutputType Executable;
    public static OutputType Library;
    public static OutputType Unknown;
}
public class JetBrains.Application.BuildScript.Solution.PackageOriginalProjects : object {
    private static string StreamName;
    [NotNullAttribute]
public IList`1<ProjectAndAssembly> ProjectInSubplatformPath_AssemblyName;
    public PackageOriginalProjects(IEnumerable`1<ProjectAndAssembly> entries);
    public PackageOriginalProjects(IStructuredStorage sstg);
    private static PackageOriginalProjects();
    [BuildStepAttribute]
public static ICollection`1<SubplatformComponentForPackagingFast> EmbedInPackages(AllAssembliesOnSources allassSrc);
    public AssemblyNameInfo GetAssemblyNameOfProject(RelativePath project, OnError onerror);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private IList`1<ProjectAndAssembly> <.ctor>b__2_0(StreamReader reader);
    [CompilerGeneratedAttribute]
private ProjectAndAssembly <.ctor>b__2_2(string l);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__6_0(StreamWriter writer);
}
public class JetBrains.Application.BuildScript.Solution.Profiles.ProfileDescription : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public SubplatrformAndKind[] SubplatformAndKinds;
    public ProfileDescription(string name, SubplatrformAndKind[] subplatformAndKinds);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifact/ProfilesArtifactSerializer")]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifact/ProfilesArtifactConverter")]
public class JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifact : object {
    public UserDefinedProfileDescription[] Descriptions;
    public ProfilesArtifact(UserDefinedProfileDescription[] descriptions);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifactEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static UserDefinedProfileDescription GetConfigBy(ProfilesArtifact that, string profileName);
}
public static class JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifactParser : object {
    public static string PROFILE_SECTION_SEP;
    public static char PROFILE_ITEMS_SEP;
    public static char PROFILE_ITEM_SEP;
    private static Parser`1<string> ourProfileNameRule;
    public static Parser`1<SubplatformCompileKind> SubplatformKindRule;
    private static Parser`1<SubplatrformPrefixAndKind> ourProfileItemRule;
    public static Parser`1<UserDefinedProfileDescription> ProfileTerm;
    public static Parser`1<ProfilesArtifact> ProfileConfigs;
    private static ProfilesArtifactParser();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.ProfileTasks : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Solution.Profiles.ProfileTasks/<CreateFilterByProfileAsync>d__0")]
[BuildStepAttribute]
public static Task`1<Optional`1<AllAssembliesFilterByProfile>> CreateFilterByProfileAsync(Lifetime lifetime, ProfileNameArtifact profile, ProfilesArtifact configs, ProductHomeDirArtifact homedir, ILogger logger, ITaskHost tasker);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.Solution.Profiles.ProfileTasks/<CreateFilterByProfileAsync>d__1")]
public static Task`1<AllAssembliesFilterByProfile> CreateFilterByProfileAsync(Lifetime lifetime, UserDefinedProfileDescription selectedConfig, ProductHomeDirArtifact homedir, ITaskHost tasker, ILogger logger);
    public static AllAssembliesFilterByProfile CreateFilterByProfile(UserDefinedProfileDescription selectedConfig, IEnumerable`1<Subplatform> subplatforms, ILogger logger);
    public static AllAssembliesFilterByProfile CreateAllAssembliesFilterByProfile(ProfileDescription description);
    public static UserDefinedProfileDescription CompactUserDefinedProfile(UserDefinedProfileDescription description);
    public static ProfileDescription BuildPlainProfile(UserDefinedProfileDescription description, IDirectedGraph`1<SubplatformName> graph);
    [ExtensionAttribute]
private static void UpdateMarkup(SubplatformsGraphMarkup graphMarkup, KeyValuePair`2<SubplatformName, SubplatformCompileKind> change, IDirectedGraph`1<SubplatformName> graph);
    private static void ApplyOp(IDirectedGraph`1<SubplatformName> g, SubplatformsGraphMarkup markup, SubplatformName node, Func`3<SubplatformCompileKind, SubplatformCompileKind, SubplatformCompileKind> op);
    public static DirectedGraph`1<SubplatformName> CreateSubplatformsGraph(IEnumerable`1<Subplatform> subplatforms, ILogger logger);
    private static void AssertNoLoops(IDirectedGraph`1<T> graph);
}
public enum JetBrains.Application.BuildScript.Solution.Profiles.SubplatformCompileKind : Enum {
    public int value__;
    public static SubplatformCompileKind None;
    public static SubplatformCompileKind Excluded;
    public static SubplatformCompileKind Source;
    public static SubplatformCompileKind Binary;
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformCompileKindEx : object {
    [ExtensionAttribute]
public static SubplatformCompileKind Max(SubplatformCompileKind l, SubplatformCompileKind r);
    [ExtensionAttribute]
public static SubplatformCompileKind Min(SubplatformCompileKind l, SubplatformCompileKind r);
}
[ExtensionAttribute]
internal static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformKindEx : object {
    [ExtensionAttribute]
public static string ConvertToString(SubplatformCompileKind kind);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformsGraphMarkup : object {
    private Dictionary`2<SubplatformName, SubplatformCompileKind> myMarkup;
    public SubplatformCompileKind Item { get; public set; }
    public ProfileDescription CreateProfileDescription(string prName);
    public SubplatformCompileKind get_Item(SubplatformName name);
    public void set_Item(SubplatformName name, SubplatformCompileKind value);
    public bool Contains(SubplatformName name);
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatformsGraphMarkupEx : object {
    [ExtensionAttribute]
public static SubplatformsGraphMarkup CreateEmptyMarkup(IDirectedGraph`1<SubplatformName> g);
}
public class JetBrains.Application.BuildScript.Solution.Profiles.SubplatrformAndKind : object {
    [NotNullAttribute]
public SubplatformName Name;
    public SubplatformCompileKind Kind;
    public SubplatrformAndKind(SubplatformName name, SubplatformCompileKind kind);
    public virtual string ToString();
}
public class JetBrains.Application.BuildScript.Solution.Profiles.SubplatrformPrefixAndKind : object {
    [NotNullAttribute]
public RelativePath Prefix;
    public SubplatformCompileKind Kind;
    public SubplatrformPrefixAndKind(RelativePath prefix, SubplatformCompileKind kind);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.Profiles.SubplatrformPrefixAndKindEx : object {
    [ExtensionAttribute]
public static bool IsMatchedTo(SubplatrformPrefixAndKind that, SubplatformName s);
}
public class JetBrains.Application.BuildScript.Solution.Profiles.UserDefinedProfileDescription : object {
    [NotNullAttribute]
public string Name;
    [NotNullAttribute]
public SubplatrformPrefixAndKind[] OrderedSubplatformPrefixAndKinds;
    public UserDefinedProfileDescription(string name, SubplatrformPrefixAndKind[] orderedSubplatformPrefixAndKinds);
    public virtual string ToString();
}
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Solution.ProjectAndAssembly/ProjectAndAssemblySerializer")]
public class JetBrains.Application.BuildScript.Solution.ProjectAndAssembly : object {
    [NotNullAttribute]
public AssemblyNameInfo AssemblyName;
    public EFlags Flags;
    [NotNullAttribute]
public RelativePath ProjectFileInSubplatform;
    public bool IsAnySdk { get; }
    public ProjectAndAssembly(RelativePath projectFileInSubplatform, AssemblyNameInfo assemblyName, EFlags flags);
    public sealed virtual bool Equals(ProjectAndAssembly other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.BuildScript.Solution.ProjectAndAssembly>.CompareTo(ProjectAndAssembly other);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public bool get_IsAnySdk();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.ProjectAndAssemblyEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string ExtensionWithDot(ProjectAndAssembly that, OnError onerror);
    [ExtensionAttribute]
public static RelativePath GetApplicationPackageFileLocalInstallPath(ProjectAndAssembly that, OnError onerror);
}
public class JetBrains.Application.BuildScript.Solution.Subplatform : object {
    [NotNullAttribute]
public IList`1<AssemblyNameInfo> Assemblies;
    [NotNullAttribute]
public SubplatformName Name;
    [NotNullAttribute]
public SubplatformInfo SubplatformInfo;
    public Subplatform(SubplatformName name, IEnumerable`1<AssemblyNameInfo> assemblies, SubplatformInfo subplatformInfo);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Solution.SubplatformEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetCompanyNameHuman(Subplatform thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetCompanyNameLegal(Subplatform thіs);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use JetBrains.Application.BuildScript.Solution.SubplatformEx.GetVersion(JetBrains.Application.BuildScript.Solution.Subplatform,JetBrains.Application.BuildScript.BuildVersionSuffix)")]
public static Version2 GetVersion2(Subplatform thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static JetSemanticVersion GetVersion(Subplatform thіs, BuildVersionSuffix buildVersionSuffix);
    [ExtensionAttribute]
public static JetPackageIdentity GetIdentity(Subplatform thіs, BuildVersionSuffix buildVersionSuffix);
}
[PublicAPIAttribute]
[XamlSerializableAttribute]
public class JetBrains.Application.BuildScript.Solution.SubplatformInfo : object {
    [CompilerGeneratedAttribute]
private string <CompanyNameHuman>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyNameLegal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompileTimeOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SubplatformReference> <SubplatformReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private JetSemanticVersion <VersionOverride>k__BackingField;
    [CanBeNullAttribute]
public string CompanyNameHuman { get; public set; }
    [CanBeNullAttribute]
public string CompanyNameLegal { get; public set; }
    public bool IsCompileTimeOnly { get; public set; }
    [NotNullAttribute]
[DesignerSerializationVisibilityAttribute("2")]
public List`1<SubplatformReference> SubplatformReferences { get; }
    [CanBeNullAttribute]
public JetSemanticVersion VersionOverride { get; public set; }
    public SubplatformInfo(string companyNameHuman, string companyNameLegal, JetSemanticVersion versionOverride, List`1<SubplatformReference> subplatformReferences, bool isCompileTimeOnly);
    [CompilerGeneratedAttribute]
public string get_CompanyNameHuman();
    [CompilerGeneratedAttribute]
public void set_CompanyNameHuman(string value);
    [CompilerGeneratedAttribute]
public string get_CompanyNameLegal();
    [CompilerGeneratedAttribute]
public void set_CompanyNameLegal(string value);
    [CompilerGeneratedAttribute]
public bool get_IsCompileTimeOnly();
    [CompilerGeneratedAttribute]
public void set_IsCompileTimeOnly(bool value);
    [CompilerGeneratedAttribute]
public List`1<SubplatformReference> get_SubplatformReferences();
    [CompilerGeneratedAttribute]
public JetSemanticVersion get_VersionOverride();
    [CompilerGeneratedAttribute]
public void set_VersionOverride(JetSemanticVersion value);
    [NotNullAttribute]
public static SubplatformInfo FromAppPackage(ApplicationPackageArtifact package, ApplicationPackageRuntimeOnlyReferences packageRuntimeOnlyRefs, ApplicationPackageIsCompileTimeOnly apppkgIsCompileTimeOnly);
}
public static class JetBrains.Application.BuildScript.Solution.SubPlatformInfoReader : object {
    [NotNullAttribute]
public static SubplatformInfo Read(Stream stream);
}
[TypeConverterAttribute("JetBrains.Util.Reflection.SimpleTypeConverter`1<JetBrains.Application.BuildScript.Solution.SubplatformName>")]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Solution.SubplatformName>")]
public class JetBrains.Application.BuildScript.Solution.SubplatformName : object {
    [NotNullAttribute]
public RelativePath RelativePath;
    public SubplatformName(RelativePath relativePath);
    internal SubplatformName(string text);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SubplatformName other);
    public virtual int GetHashCode();
    public static bool op_Equality(SubplatformName left, SubplatformName right);
    public static bool op_Inequality(SubplatformName left, SubplatformName right);
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.BuildScript.Solution.SubplatformName>.CompareTo(SubplatformName other);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
}
public class JetBrains.Application.BuildScript.Solution.SubplatformOnPackage : Subplatform {
    [NotNullAttribute]
public ApplicationPackageArtifact ApplicationPackage;
    public SubplatformOnPackage(ApplicationPackageArtifact package, ApplicationPackageRuntimeOnlyReferences appPkgRuntimeOnlyRefs, ApplicationPackageIsCompileTimeOnly apppkgIsCompileTimeOnly);
    [NotNullAttribute]
public static IEnumerable`1<AssemblyNameInfo> GetAssembliesFromPackageFiles(ApplicationPackageArtifact package);
}
public class JetBrains.Application.BuildScript.Solution.SubplatformOnPackageEx : SubplatformOnPackage {
    [NotNullAttribute]
public IJetNugetPackage Package;
    [NotNullAttribute]
public Optional`1<PackageOriginalProjects> PackageOriginalProjects;
    private IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.Package { get; }
    public SubplatformOnPackageEx(IJetNugetPackage package, ApplicationPackageArtifact apppkg, Optional`1<PackageOriginalProjects> projects, Optional`1<ApplicationPackageRuntimeOnlyReferences> runtimeOnlyRefs, Optional`1<ApplicationPackageIsCompileTimeOnly> pkgIsCompileOnly);
    private sealed virtual override IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.get_Package();
}
public class JetBrains.Application.BuildScript.Solution.SubplatformOnSources : Subplatform {
    [NotNullAttribute]
public IList`1<RelativePath> ProjectFiles;
    [NotNullAttribute]
public IList`1<ProjectAndAssembly> ProjectFilesEx;
    public SubplatformOnSources(SubplatformName name, ICollection`1<ProjectAndAssembly> projectfiles, SubplatformInfo si);
}
public static class JetBrains.Application.BuildScript.Solution.SubplatformPlatformCoreShell : object {
    public static string CompanyNameHuman;
    public static SubplatformName Name;
    [NotNullAttribute]
public static string PackageId { get; }
    private static SubplatformPlatformCoreShell();
    public static string get_PackageId();
}
public class JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper : object {
    [NotNullAttribute]
public AllAssembliesOnSources AllAssembliesOnSources;
    [NotNullAttribute]
public ProjectAndAssembly ProjectAndAssembly;
    [NotNullAttribute]
public SubplatformOnSources SubplatformOnSources;
    [NotNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    [NotNullAttribute]
public RelativePath ProjectInSubplatform { get; }
    [NotNullAttribute]
public SubplatformName SubplatformName { get; }
    public SubplatformProjectWrapper(SubplatformOnSources subplatform, ProjectAndAssembly projectAndAssembly, AllAssembliesOnSources allassSrc);
    public AssemblyNameInfo get_AssemblyName();
    public RelativePath get_ProjectInSubplatform();
    public SubplatformName get_SubplatformName();
    public bool ProjHasFlag(EFlags flag);
    public bool IsAnySdkProj();
    public sealed virtual bool Equals(SubplatformProjectWrapper other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NotNullAttribute]
public FileSystemPath GetProjectFileAbsPath();
    [NotNullAttribute]
public RelativePath GetProjectFileRelToRoot();
    public static bool op_Equality(SubplatformProjectWrapper left, SubplatformProjectWrapper right);
    public static bool op_Inequality(SubplatformProjectWrapper left, SubplatformProjectWrapper right);
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper>.CompareTo(SubplatformProjectWrapper other);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
}
[PublicAPIAttribute]
[XamlSerializableAttribute]
public class JetBrains.Application.BuildScript.Solution.SubplatformReference : object {
    [CompilerGeneratedAttribute]
private SubplatformName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompileTimeOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRuntimeOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ImmutableArray`1<JetRuntimeId>> <RuntimeIds>k__BackingField;
    public SubplatformName Name { get; public set; }
    public bool IsCompileTimeOnly { get; public set; }
    public bool IsRuntimeOnly { get; public set; }
    public Nullable`1<ImmutableArray`1<JetRuntimeId>> RuntimeIds { get; public set; }
    [CompilerGeneratedAttribute]
public SubplatformName get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(SubplatformName value);
    [CompilerGeneratedAttribute]
public bool get_IsCompileTimeOnly();
    [CompilerGeneratedAttribute]
public void set_IsCompileTimeOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRuntimeOnly();
    [CompilerGeneratedAttribute]
public void set_IsRuntimeOnly(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<ImmutableArray`1<JetRuntimeId>> get_RuntimeIds();
    [CompilerGeneratedAttribute]
public void set_RuntimeIds(Nullable`1<ImmutableArray`1<JetRuntimeId>> value);
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.Solution.SubplatformsInAllInputPackages : AllAssemblies {
    [NotNullAttribute]
public IList`1<SubplatformOnPackageEx> Subplatforms;
    public SubplatformsInAllInputPackages(ICollection`1<SubplatformOnPackageEx> subplatforms);
}
public class JetBrains.Application.BuildScript.SolutionGenerator.Generator : object {
    private static ILogger Logger;
    private GeneratorInfo myGeneratorInfo;
    private ProjectTypeGuidOracle myProjectTypeGuidOracle;
    public Generator(AllAssembliesOnSources allAssembliesOnSources, ProjectTypeGuidOracle projectTypeGuidOracle, IReadOnlyCollection`1<RelativePath> solutionItemsUnderRoot);
    private static Generator();
    public static ValueTuple`3<ImmutableFileItem, int, int> WriteSolutionFile(AllAssembliesOnSources allAssembliesOnSources, ProjectTypeGuidOracle projectTypeGuidOracle, IReadOnlyCollection`1<RelativePath> solutionItemsUnderRoot);
    private void AddProject(ProjectAndAssembly projAndAss, SubplatformOnSources subplatformInfo);
    private static void AddSolutionItem(RelativePath relSolutionItemUnderRoot, GeneratorInfo generatorInfo, ILogger logger);
    [CanBeNullAttribute]
public static VirtualProject GetOrCreateVirtualProject(RelativePath relVirtualProjectsPath, GeneratorInfo generatorInfo);
    private void Generate(TextWriter writer);
    private void WriteSln(TextWriter writer);
    [CompilerGeneratedAttribute]
private bool <Generate>b__8_3(PackageReferencesFileInfo info);
    [CompilerGeneratedAttribute]
private void <Generate>b__8_5(RelativePath relToRoot);
    [CompilerGeneratedAttribute]
private void <Generate>b__8_8(RelativePath relToRoot);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Generate>b__8_0(RelativePath relToRoot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class JetBrains.Application.BuildScript.SolutionGenerator.GeneratorInfo : object {
    [CompilerGeneratedAttribute]
private List`1<RelativePath> <InputSolutionItems>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GeneratorProject> <Projects>k__BackingField;
    [CompilerGeneratedAttribute]
private AllAssembliesOnSources <SubplatformsToProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, VirtualProject> <VirtualProjects>k__BackingField;
    [PublicAPIAttribute]
public List`1<RelativePath> InputSolutionItems { get; }
    [PublicAPIAttribute]
public List`1<GeneratorProject> Projects { get; }
    [PublicAPIAttribute]
public AllAssembliesOnSources SubplatformsToProjects { get; }
    [PublicAPIAttribute]
public Dictionary`2<string, VirtualProject> VirtualProjects { get; }
    public GeneratorInfo(AllAssembliesOnSources allAssembliesOnSources);
    [CompilerGeneratedAttribute]
public List`1<RelativePath> get_InputSolutionItems();
    [CompilerGeneratedAttribute]
public List`1<GeneratorProject> get_Projects();
    [CompilerGeneratedAttribute]
public AllAssembliesOnSources get_SubplatformsToProjects();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, VirtualProject> get_VirtualProjects();
}
[PublicAPIAttribute]
public class JetBrains.Application.BuildScript.SolutionGenerator.GeneratorProject : object {
    private static ILogger ourLogger;
    private string myFileName;
    private Guid myGuid;
    private VirtualProject myParent;
    private ProjectTypeGuidOracle myProjectTypeGuidOracle;
    private RelativePath myRelativePath;
    private static Guid ourGuidNamespaceForProjectGuids;
    private GeneratorProject(FileSystemPath projectFilePath, GeneratorInfo generatorInfo, RelativePath relativePath, VirtualProject parent, ProjectTypeGuidOracle projectTypeGuidOracle);
    private static GeneratorProject();
    public static GeneratorProject CreateFromFile(FileSystemPath projectFilePath, GeneratorInfo generatorInfo, ProjectTypeGuidOracle projectTypeGuidOracle, bool isPluginEmbedding);
    public virtual string ToString();
    public void WriteConf(TextWriter writer);
    public void WriteDecl(TextWriter writer);
    public void WriteParent(TextWriter writer);
    [NotNullAttribute]
public static ProjectTypeGuidOracle GetProjectTypeGuidOracle(bool isCpsNotNative);
}
[PublicAPIAttribute]
public class JetBrains.Application.BuildScript.SolutionGenerator.VirtualProject : object {
    private static string FolderProj;
    private string myName;
    private VirtualProject myParent;
    public string Guid;
    private FrugalLocalLazy`1<List`1<RelativePath>> mySolutionItemsRelToRoot;
    public List`1<RelativePath> SolutionItemsRelToRoot { get; }
    public VirtualProject(string name, VirtualProject parent);
    public List`1<RelativePath> get_SolutionItemsRelToRoot();
    public void WriteDecl(TextWriter writer);
    public void WriteProject(TextWriter writer);
}
[BuildHelperAttribute]
public class JetBrains.Application.BuildScript.SourceStageBinStageBuild : object {
    private Optional`1<AllAssembliesFilterByProfile> myAllAssembliesFilterByProfile;
    private ILogger myLogger;
    private Optional`1<ProductBinariesDirArtifact> myMaybeBinDir;
    private Optional`1<IncrementalBuild> myMaybeIncremental;
    private INestedBuildRunner myNestedBuildRunner;
    private NugetConfigFile myNugetConfig;
    private ProductHomeDirArtifact myProductHomeDir;
    private ProfileNameArtifact myProfileName;
    [NotNullAttribute]
private ShadowPackageDirArtifact myShadowPackageDirArtifact;
    private IBuildTaskHost myTasker;
    public SourceStageBinStageBuild(ProductHomeDirArtifact homedir, INestedBuildRunner nester, ShadowPackageDirArtifact shadowPackageDirArtifact, Optional`1<ProductBinariesDirArtifact> maybeBinDir, NugetConfigFile nugetconfig, IBuildTaskHost tasker, ProfileNameArtifact profileName, Optional`1<AllAssembliesFilterByProfile> allAssembliesFilterByProfile, Optional`1<IncrementalBuild> maybeIncremental, ILogger logger);
    [NotNullAttribute]
private static IReadOnlyCollection`1<InputPackage> MakeInputsFromFreshlyCompiledAndPrevInputs(ValueTuple`2<BuildRunnerResult, ImmutableArray`1<InputPackage>> t);
    private sealed virtual override Task`1<ImmutableArray`1<TObjective>> JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunSourceStageAsync(OuterLifetime lifetime, Action`1<IBuildRunnerRequest> FAdjustRequest);
    private sealed virtual override Task`1<ImmutableArray`1<BuildOutputFileArtifact>> JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunSourceStageAsync(OuterLifetime lifetime, AssemblyQualifiedTypeName objectiveForSourceStage, Action`1<IBuildRunnerRequest> FAdjustRequest);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.SourceStageBinStageBuild/<RunSourceStageCoreAsync>d__14`1")]
[NotNullAttribute]
private Task`1<TRetVal> RunSourceStageCoreAsync(OuterLifetime lifetimeOuter, AssemblyQualifiedTypeName objectiveForSourceStage, Action`1<IBuildRunnerRequest> FAdjustRequest, Func`2<ValueTuple`2<BuildRunnerResult, ImmutableArray`1<InputPackage>>, TRetVal> FWithResult);
    private sealed virtual override Task`1<ICollection`1<BuildOutputFileArtifact>> JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunTwoStageAsync(OuterLifetime lifetime, AssemblyQualifiedTypeName binaryStageObjective);
    private sealed virtual override Task`1<ICollection`1<TObjective>> JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunTwoStageAsync(OuterLifetime lifetime);
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.SourceStageBinStageBuild/<RunTwoStageCoreAsync>d__17`1")]
private Task`1<TRetVal> RunTwoStageCoreAsync(OuterLifetime lifetimeOuter, AssemblyQualifiedTypeName binaryStageObjective, Func`2<BuildRunnerResult, TRetVal> FWithResult);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.SourceStageObjectiveArtifact>")]
[TypeConverterAttribute("JetBrains.Util.Reflection.SimpleTypeConverter`1<JetBrains.Application.BuildScript.SourceStageObjectiveArtifact>")]
public class JetBrains.Application.BuildScript.SourceStageObjectiveArtifact : object {
    [NotNullAttribute]
public AssemblyQualifiedTypeName SourceStageObjective;
    public SourceStageObjectiveArtifact(AssemblyQualifiedTypeName sourceStageObjective);
    public SourceStageObjectiveArtifact(string value);
    public virtual string ToString();
}
public class JetBrains.Application.BuildScript.StandaloneBackend.StandaloneRuntimeSpecificBackendUtil : object {
    [AsyncStateMachineAttribute("JetBrains.Application.BuildScript.StandaloneBackend.StandaloneRuntimeSpecificBackendUtil/<ExtractSelectedProductsRuntimeSpecific>d__0`1")]
public static Task`1<T[]> ExtractSelectedProductsRuntimeSpecific(Lifetime lifetime, string resultArtifactName, string productTechnicalName, Func`2<ImmutableFileItem, T> artifactBuilder, InputPackage[] inputPackages, AllAssembliesOnEverything allass, IAddFilesToDeploymentPackagings[] emitters, SubplatformsInAllInputPackages subsInInputs, IBuildTaskHost tasker, Func`1<IEnumerable`1<ImmutableFileItem>> produceAdditionalFiles, IsModeAssert isModeAssert, DeployedFilesNamingScheme naming, ILogger logger);
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.SubplatformBinariesPackage : object {
    [NotNullAttribute]
public IJetNugetPackage Package;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    private IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.Package { get; }
    public SubplatformBinariesPackage(SubplatformName subname, IJetNugetPackage package);
    [BuildStepAttribute]
public static DeployablePackage[] DeployMe(SubplatformBinariesPackage[] pkgs);
    private sealed virtual override IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.get_Package();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact/SubplatformPackagesTimesArtifactSerializer")]
public class JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact : object {
    public Nullable`1<DateTime> BestBefore;
    public DateTime BuiltOn;
    [BuildStepAttribute]
public SubplatformPackagesTimesArtifact(BuiltOn builton, Optional`1<TimeBombSpan> maybeTimeBomb, ILogger logger);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[BuildEntryPointAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.SubplatformProgramDatabasePackage : object {
    [NotNullAttribute]
public IJetNugetPackage Package;
    [NotNullAttribute]
public SubplatformName SubplatformName;
    private IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.Package { get; }
    public SubplatformProgramDatabasePackage(SubplatformName subname, IJetNugetPackage package);
    [BuildStepAttribute]
public static DeployablePackage[] DeployMe(SubplatformProgramDatabasePackage[] pkgs);
    private sealed virtual override IJetNugetPackage JetBrains.Util.Storage.Packages.IHaveJetNugetPackage.get_Package();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.TargetEnvironmentArtifact/TargetEnvironmentArtifactSerializer")]
public class JetBrains.Application.BuildScript.TargetEnvironmentArtifact : object {
    public IReadOnlyCollection`1<JetRuntimeId> Rids;
    public TargetEnvironmentArtifact(IReadOnlyCollection`1<JetRuntimeId> rids);
    public virtual string ToString();
    [NotNullAttribute]
private static TargetEnvironmentArtifact FromString(string str);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Testing.ExtractForIntegrationTests : object {
}
public abstract class JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables : object {
    public static string EnvInTestTargetVsHive;
    public static string EnvInTestTargetStandaloneApp;
    public static string EnvInTestTargetArchitecture;
    [ObsoleteAttribute("Obsolete. Please use EnvInTestTargetArchitecture instead.")]
public static string EnvInTestProcessorArchitecture;
    public static string EnvInTestRunInVirtualEnvironment;
    public static string EnvInTestRunOnSingleMachine;
    public static string EnvInTestCheckoutDir;
    public static string EnvInTestInstallDir;
    public static string EnvInTestAllowCaptureTraces;
    public static string EnvInTestCleanupUserSettings;
    public static string EnvInTestProductLoggingLevel;
    public static string EnvInTestRetryCounter;
    public static string EnvInTestPerformanceLogDir;
    public static string EnvInTestTeamCityArtifactsDir;
    private static Lazy`1<InTestsRunMode> ourLazyRunMode;
    [ItemCanBeNullAttribute]
public static Lazy`1<FileSystemPath> InTestsArtifactsDir;
    public static InTestsRunMode InTestsRunMode { get; }
    private static IntegrationTestsEnvironmentVariables();
    public static InTestsRunMode get_InTestsRunMode();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Testing.IntegrationTestsHomeDirArtifact/IntegrationTestsHomeDirArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.IntegrationTestsHomeDirArtifact/IntegrationTestsHomeDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.Testing.IntegrationTestsHomeDirArtifact : object {
    public static string InTestsDataForVm;
    public static string InTestsDataForVmBin;
    public static string InTestsInstallerName;
    public static string InTestsCLTZipName;
    public static string InTestsCLTZipNameMask;
    [NotNullAttribute]
public FileSystemPath InTestHomeDir;
    public IntegrationTestsHomeDirArtifact(FileSystemPath inTestHomeDir);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Testing.IntegrationTestsProductsToInstall>")]
public class JetBrains.Application.BuildScript.Testing.IntegrationTestsProductsToInstall : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> ProductTechnicalNames;
    public IntegrationTestsProductsToInstall(ImmutableArray`1<string> products);
    public IntegrationTestsProductsToInstall(string serialized);
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.Testing.InTestsRunMode : Enum {
    public int value__;
    public static InTestsRunMode Local;
    public static InTestsRunMode SingleMachine;
    public static InTestsRunMode VirtualEnvironment;
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Testing.InTestsSingleMachineResult : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Testing.ManagedTestResult : BuildOutputFileArtifact {
    public ManagedTestResult(ImmutableFileItem file);
    public ManagedTestResult(IStructuredStorage sstg);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.NativeTestsFilter/NativeTestsFilterSerializer")]
public class JetBrains.Application.BuildScript.Testing.NativeTestsFilter : object {
    public string TestSuitesMask;
    [NotNullAttribute]
public IReadOnlyCollection`1<TValue> Filter(IEnumerable`1<TValue> data, Func`2<TValue, string> testSuiteSelector);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Testing.NativeTestsResult : object {
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
[TypeConverterAttribute("JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact/TestDataHomeDirArtifactConverter")]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact/TestDataHomeDirArtifactSerializer")]
public class JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact : object {
    [NotNullAttribute]
public FileSystemPath TestDataHomeDir;
    public TestDataHomeDirArtifact(FileSystemPath testDataHomeDir);
    public virtual string ToString();
}
public enum JetBrains.Application.BuildScript.Testing.TestRunnerClr : Enum {
    public byte value__;
    public static TestRunnerClr ClrLatest;
    public static TestRunnerClr Clr2;
    public static TestRunnerClr Clr4;
}
public enum JetBrains.Application.BuildScript.Testing.TestRunnerCpuArchitecture : Enum {
    public byte value__;
    public static TestRunnerCpuArchitecture CpuSameAsHost;
    public static TestRunnerCpuArchitecture CpuX86;
    public static TestRunnerCpuArchitecture CpuAmd64;
    public static TestRunnerCpuArchitecture CpuArm;
}
public class JetBrains.Application.BuildScript.Testing.TestsFilter : ValueType {
    [CanBeNullAttribute]
public String[] CategoryExclude;
    [CanBeNullAttribute]
public String[] CategoryInclude;
    [CanBeNullAttribute]
public string NamespaceFilter;
    [CanBeNullAttribute]
public string ClassFilter;
    [CanBeNullAttribute]
public String[] TestFilter;
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Testing.UnitTestBatchParameter>")]
public class JetBrains.Application.BuildScript.Testing.UnitTestBatchParameter : object {
    public static int InvalidBatchNum;
    public int BatchNum;
    [NotNullAttribute]
public FileSystemPath ExcludesFile;
    [NotNullAttribute]
public FileSystemPath IncludesFile;
    public UnitTestBatchParameter(string serialized);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.UnitTestEpisode/UnitTestEpisodeSerializer")]
public class JetBrains.Application.BuildScript.Testing.UnitTestEpisode : object {
    public string SeasonId;
    public int TotalEpisodesCount;
    public int EpisodeNumber;
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.UnitTestFilter/UnitTestFilterSerializer")]
public class JetBrains.Application.BuildScript.Testing.UnitTestFilter : object {
    [CanBeNullAttribute]
public string AssemblyBareNameFilter;
    [CanBeNullAttribute]
public String[] CategoryExclude;
    [CanBeNullAttribute]
public String[] CategoryInclude;
    [CanBeNullAttribute]
public string NamespaceFilter;
    [CanBeNullAttribute]
public string ClassFilter;
    [CanBeNullAttribute]
public String[] TestFilter;
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.UnitTestPlatform/UnitTestPlatformSerializer")]
public class JetBrains.Application.BuildScript.Testing.UnitTestPlatform : object {
    public Nullable`1<TestRunnerClr> TestRunnerClr;
    public Nullable`1<TestRunnerCpuArchitecture> TestRunnerCpuArchitecture;
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.BuildScript.Testing.UnitTestPlatformEx : object {
    [ExtensionAttribute]
public static TestRunnerClr DetermineTestRunnerClr(UnitTestPlatform unitTestPlatform);
    [ExtensionAttribute]
public static TestRunnerCpuArchitecture DetermineTestRunnerCpuArchitecture(UnitTestPlatform unitTestPlatform);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.BuildScript.Testing.UnitTestResult : BuildOutputFileArtifact {
    public UnitTestResult(ImmutableFileItem file);
    public UnitTestResult(IStructuredStorage sstg);
    [BuildStepAttribute]
public static UnitTestResult[] AllTestsAreUnitTests(ManagedTestResult[] managedTests, NativeTestsResult[] nativeTests);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.BuildScript.Testing.UnitTestRunnerParameters/UnitTestRunnerParametersSerializer")]
public class JetBrains.Application.BuildScript.Testing.UnitTestRunnerParameters : object {
    public ICollection`1<UnitTestRunnerParametersForSingleRun> Parameters;
    public UnitTestRunnerParameters(ICollection`1<UnitTestRunnerParametersForSingleRun> parameters);
}
public static class JetBrains.Application.BuildScript.Testing.UnitTestRunnerSerialization : object {
    private static char PartsDelimitter;
    private static char Delimitter;
    private static string λέξις_AssemblyBareNameFilter;
    private static string λέξις_CategoryInclude;
    private static string λέξις_CategoryExclude;
    private static string λέξις_NamespaceFilter;
    private static string λέξις_ClassFilter;
    private static string λέξις_TestFilter;
    private static char λέξις_μικρός_AssemblyBareNameFilter;
    private static char λέξις_μικρός_CategoryInclude;
    private static char λέξις_μικρός_CategoryExclude;
    private static char λέξις_μικρός_NamespaceFilter;
    private static char λέξις_μικρός_ClassFilter;
    private static char λέξις_μικρός_TestFilter;
    private static Parser`1<string> Value;
    private static Parser`1<string> QuotedXmlEscapedValue;
    private static Parser`1<UnitTestPart> Clr;
    private static Parser`1<UnitTestPart> Achitecture;
    private static Parser`1<UnitTestPart> FilterCategoryInclude;
    private static Parser`1<UnitTestPart> FilterCategoryExclude;
    private static Parser`1<UnitTestPart> FilterAssemblyBareNameFilter;
    private static Parser`1<UnitTestPart> FilterNamespaceFilter;
    private static Parser`1<UnitTestPart> FilterClassFilter;
    private static Parser`1<UnitTestPart> FilterTestFilter;
    private static Parser`1<UnitTestPlatform> UnitTestPlatform;
    private static Parser`1<UnitTestRunnerParameters> UnitTestRunnerParameters;
    private static UnitTestRunnerSerialization();
    public static UnitTestRunnerParameters DeserializeRunnerParameters(string input);
    public static string Serialize(UnitTestRunnerParameters parameters);
    public static UnitTestPlatform DeserializePlatform(string input);
    public static string Serialize(UnitTestPlatform parameters);
    public static string Serialize(UnitTestRunnerParametersForSingleRun parameter);
    private static void ToString(UnitTestRunnerParameters parameters, StringBuilder sb);
    private static void ToString(UnitTestRunnerParametersForSingleRun parameter, StringBuilder sb);
    private static void ToString(UnitTestFilter unitTestFilter, StringBuilder sb);
    private static void AppendAttribute(StringBuilder sb, string attributeName, string value);
    private static void ToString(UnitTestPlatform unitTestPlatform, StringBuilder sb);
    private static UnitTestRunnerParameters Build(IEnumerable`1<UnitTestRunnerParametersForSingleRun> runs);
    private static UnitTestRunnerParametersForSingleRun BuildSingleRun(IEnumerable`1<UnitTestPart> parts);
    private static UnitTestPlatform BuildPlatform(IEnumerable`1<UnitTestPart> parts);
    private static UnitTestFilter BuildFilters(IEnumerable`1<UnitTestPart> parts);
}
public class JetBrains.Application.BuildScript.Testing.UnitTestStatistics : object {
    public string Hive;
    public DateTime StartDate;
    public DateTime EndDate;
    public UnitTestStatisticsItem[] StatisticsPlain;
}
public class JetBrains.Application.BuildScript.Testing.UnitTestStatisticsItem : object {
    public string Assembly;
    public string Class;
    public TimeSpan Duration;
    public int TestCount;
}
public static class JetBrains.Application.BuildScript.UltimateLicensingConstants : object {
    public static int LicenseVersion;
    public static DateTime ProductBuiltDateUsedForSubscriptionCheck;
    public static string UrlToShowWhenLicenseServerIsBlacklisted;
    private static UltimateLicensingConstants();
    public static IList`1<Pair`2<string, string>> GetOptInSubscriptions(string productName);
}
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Validation.PublicApiMetadata>")]
public class JetBrains.Application.BuildScript.Validation.PublicApiMetadata : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public static string PublicApiFileName;
    public string Content { get; }
    private PublicApiMetadata(string content);
    [CompilerGeneratedAttribute]
public string get_Content();
    public virtual string ToString();
    public virtual int GetHashCode();
    [BuildStepAttribute]
public static SubplatformComponentForPackagingFast[] EmbedMetadataIntoSubplatform(Lifetime lifetime, ILogger logger, AllAssembliesOnSources allass, Optional`1<ProductHomeDirArtifact> homedir, SolutionItems& solutionItems);
    [CanBeNullAttribute]
public static PublicApiMetadata GetMetadata(Lifetime lifetime, ILogger logger, Subplatform subplatform, Optional`1<ProductHomeDirArtifact> homedir);
}
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.BuildScript.Validation.PublicApiPluginsMetadata>")]
public class JetBrains.Application.BuildScript.Validation.PublicApiPluginsMetadata : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public static string PublicApiPluginsFileName;
    public string Content { get; }
    private PublicApiPluginsMetadata(string content);
    [CompilerGeneratedAttribute]
public string get_Content();
    public virtual string ToString();
    public virtual int GetHashCode();
    [BuildStepAttribute]
public static SubplatformComponentForPackagingFast[] EmbedMetadataIntoSubplatform(Lifetime lifetime, ILogger logger, AllAssembliesOnSources allass, Optional`1<ProductHomeDirArtifact> homedir, SolutionItems& solutionItems);
    [CanBeNullAttribute]
public static PublicApiPluginsMetadata GetMetadata(Lifetime lifetime, ILogger logger, Subplatform subplatform, Optional`1<ProductHomeDirArtifact> homedir);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.WaveBundleReferencePackage : BuildOutputPackageFileArtifact {
    public WaveBundleReferencePackage(IJetNugetPackage package);
    public WaveBundleReferencePackage(IStructuredStorage sstg);
    [BuildStepAttribute]
public static Tuple`2<WaveBundleReferencePackage, ICollection`1<DeployablePackage>> AddBundleReference(AllAssembliesOnSources allassSrc, Optional`1<PackageDefaultPrereleaseMetadata> maybeprereleasemetadata, InputPackage[] inputs, SdkLicenseAgreementArtifact licenseAgreementArtifact, ILogger logger);
    [NotNullAttribute]
public static IJetNugetPackage CreateBundlePackage(Optional`1<PackageDefaultPrereleaseMetadata> maybeprereleasemetadata, LicenseAgreementArtifact licenseAgreementArtifact);
    [NotNullAttribute]
private static JetPackageIdentity MakeBundlePackageIdentity(Optional`1<PackageDefaultPrereleaseMetadata> maybeprereleasemetadata);
}
[BuildArtifactAttribute]
public class JetBrains.Application.BuildScript.WindowBrandingArtifact : object {
    [CanBeNullAttribute]
private IProperty`1<ByteArrayIconGroup> myWindowIconProperty;
    private string myCompanyName;
    private string myProductDisplayName;
    private ByteArrayIconGroup myWindowIcon;
    private string Stream_CompanyName;
    private string Stream_ProductDisplayName;
    private string Stream_WindowIcon;
    public string CompanyName { get; }
    public string ProductDisplayName { get; }
    public IProperty`1<ByteArrayIconGroup> WindowIcon { get; }
    public WindowBrandingArtifact(IStructuredStorage storage);
    public WindowBrandingArtifact(string sProductDisplayName, ByteArrayIconGroup iconStatic, string companyName);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage storage);
    public sealed virtual string MakeWindowCaption(string caption);
    public sealed virtual string get_CompanyName();
    public sealed virtual string get_ProductDisplayName();
    public sealed virtual IProperty`1<ByteArrayIconGroup> get_WindowIcon();
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__9_0(Stream stream);
}
public static class JetBrains.Application.BuildScript.WindowBrandingHelpers : object {
    public static string WindowCaptionMaker(string caption, string sProductDisplayName);
}
public class JetBrains.Application.changes.ChangeEventArgs : EventArgs {
    [NotNullAttribute]
private IChangeMap myChangeMap;
    [NotNullAttribute]
public IChangeMap ChangeMap { get; }
    public ChangeEventArgs(IChangeMap changeMap);
    public IChangeMap get_ChangeMap();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DerivedComponentsInstantiationRequirementAttribute("1")]
public abstract class JetBrains.Application.changes.ChangeManager : object {
    public ISignal`1<ChangeEventArgs> Changed2;
    public bool IsInChange { get; }
    public ISignal`1<ChangeEventArgs> Changed { get; }
    public abstract virtual void ExecuteAfterChange(Action action);
    public abstract virtual void OnProviderChanged(IChangeProvider changeProvider, object change, ITaskExecutor executor);
    public abstract virtual void RegisterChangeProvider(Lifetime lifetime, IChangeProvider changeProvider);
    public abstract virtual void AddDependency(Lifetime lifetime, IChangeProvider target, IChangeProvider source);
    public abstract virtual void Dump(TextWriter to);
    public abstract virtual bool get_IsInChange();
    public ISignal`1<ChangeEventArgs> get_Changed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.changes.ChangeManagerImpl : ChangeManager {
    private static Statistics Statistics;
    private IThreading myThreading;
    private ILogger myLogger;
    private ReaderWriterLockSlim myLock;
    private Dictionary`2<IChangeProvider, HashSet`1<IChangeProvider>> myNodeToIncomingNodesMap;
    private Dictionary`2<IChangeProvider, HashSet`1<IChangeProvider>> myNodeToOutgoingNodesMap;
    private LazyForkedContentModelData`1<State> myState;
    private Dictionary`2<IChangeProvider, CacheEntry> myCachedDependentProviders;
    public bool IsInChange { get; }
    public long EventCounter { get; }
    public ChangeManagerImpl(Lifetime lifetime, IThreading threading, ILogger logger);
    private static ChangeManagerImpl();
    public virtual bool get_IsInChange();
    public long get_EventCounter();
    public ISet`1<IChangeProvider> GetAllProviders();
    public sealed virtual ICollection`1<IChangeProvider> GetDependentNodes(IChangeProvider changeProvider);
    public sealed virtual ICollection`1<IChangeProvider> GetDependsUponNodes(IChangeProvider changeProvider);
    private List`1<IChangeProvider> GetOrCalculateDependentProviders(IChangeProvider changeProvider);
    private void ClearCachedDependentProviders();
    public virtual void OnProviderChanged(IChangeProvider changeProvider, object change, ITaskExecutor executor);
    public virtual void ExecuteAfterChange(Action action);
    private void ExecutePendingActions();
    public virtual void RegisterChangeProvider(Lifetime lifetime, IChangeProvider changeProvider);
    public virtual void AddDependency(Lifetime lifetime, IChangeProvider target, IChangeProvider source);
    public void CheckCyclicDependency();
    public virtual void Dump(TextWriter to);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
internal static void <GetOrCalculateDependentProviders>g__FindReachableNodes|18_0(IDependencyGraph dependencyGraph, IChangeProvider changeProvider, HashSet`1<IChangeProvider> reachable);
    [CompilerGeneratedAttribute]
internal static void <OnProviderChanged>g__InvokeOrderedDependentProviders|22_0(ITaskExecutor executor, IEnumerable`1<IChangeProvider> dependentProviders, ChangeMap changeMap);
    [CompilerGeneratedAttribute]
private bool <CheckCyclicDependency>g__CheckCycles|27_0();
    [CompilerGeneratedAttribute]
[PureAttribute]
private IChangeProvider <CheckCyclicDependency>g__FindNextNode|27_1(HashSet`1<IChangeProvider> removedNodes);
    [CompilerGeneratedAttribute]
private int <Dump>g__GetProviderIndex|28_0(IChangeProvider provider);
    [CompilerGeneratedAttribute]
private string <Dump>g__GetProviders|28_1(IEnumerable`1<IChangeProvider> providers);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.changes.ChangeMap : object {
    private Dictionary`2<IChangeProvider, object> myChangeProviderToChangesMap;
    public void ContributeChange(IChangeProvider changeProvider, object change);
    public sealed virtual object GetChange(IChangeProvider changeProvider);
    [MustUseReturnValueAttribute]
public sealed virtual TChange GetChange(IChangeProvider changeProvider);
    public sealed virtual IEnumerable`1<TChange> GetChanges();
}
[ExtensionAttribute]
public static class JetBrains.Application.changes.ChangeMapEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[MustUseReturnValueAttribute]
public static TChange GetChange(IChangeMap changeMap, IChangeProvider changeProvider);
}
public class JetBrains.Application.changes.CyclicDependencyException : ApplicationException {
    private IChangeProvider myOffendingProvider;
    public IChangeProvider OffendingProvider { get; }
    public CyclicDependencyException(IChangeProvider offendingProvider);
    public IChangeProvider get_OffendingProvider();
}
public class JetBrains.Application.changes.FileSystemChange : object {
    private IList`1<FileSystemChangeDelta> myFileSystemChangeDeltas;
    public IList`1<FileSystemChangeDelta> Deltas { get; }
    public FileSystemChange(IList`1<FileSystemChangeDelta> fileSystemChangeDeltas);
    public IList`1<FileSystemChangeDelta> get_Deltas();
}
public class JetBrains.Application.changes.FileSystemChangeDelta : object {
    private IList`1<FileSystemChangeDelta> myChildrenDeltas;
    private FileSystemChangeType myChangeType;
    private VirtualFileSystemPath myOldPath;
    private VirtualFileSystemPath myNewPath;
    public FileSystemChangeType ChangeType { get; }
    public VirtualFileSystemPath OldPath { get; }
    public VirtualFileSystemPath NewPath { get; }
    public FileSystemChangeDelta(IList`1<FileSystemChangeDelta> childrenDeltas, FileSystemChangeType changeType, VirtualFileSystemPath oldPath, VirtualFileSystemPath newPath);
    [CanBeNullAttribute]
public FileSystemChangeDelta FindChangeDelta(VirtualFileSystemPath path);
    [NotNullAttribute]
public FileSystemChangeDelta FindNearestParentChangeDelta(VirtualFileSystemPath path);
    public virtual string ToString();
    public IList`1<FileSystemChangeDelta> GetChildren();
    public void AppendChild(FileSystemChangeDelta chilDelta);
    public FileSystemChangeType get_ChangeType();
    public VirtualFileSystemPath get_OldPath();
    public VirtualFileSystemPath get_NewPath();
    public void Accept(IFileSystemChangeDeltaVisitor visitor);
    private void DumpInternal(VirtualFileSystemPath prefix, TextWriter writer, int level);
    public void Dump(VirtualFileSystemPath prefix, TextWriter writer);
    public string Dump(VirtualFileSystemPath prefix);
}
[ExtensionAttribute]
public static class JetBrains.Application.changes.FileSystemChangeEx : object {
    [ExtensionAttribute]
public static void VisitDeltasRecursively(FileSystemChange change, Action`1<FileSystemChangeDelta> processDelta);
}
public enum JetBrains.Application.changes.FileSystemChangeType : Enum {
    public int value__;
    public static FileSystemChangeType ADDED;
    public static FileSystemChangeType DELETED;
    public static FileSystemChangeType CHANGED;
    public static FileSystemChangeType SUBTREE_CHANGED;
    public static FileSystemChangeType RENAMED;
    public static FileSystemChangeType UNKNOWN;
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.changes.IChangeMap {
    [MustUseReturnValueAttribute]
public abstract virtual object GetChange(IChangeProvider changeProvider);
    [MustUseReturnValueAttribute]
public abstract virtual TChange GetChange(IChangeProvider changeProvider);
    [MustUseReturnValueAttribute]
public abstract virtual IEnumerable`1<TChange> GetChanges();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.changes.IChangeProvider {
    public abstract virtual object Execute(IChangeMap changeMap);
}
public interface JetBrains.Application.changes.IChangeProviderWithForksSupport {
}
internal interface JetBrains.Application.changes.IDependencyGraph {
    public abstract virtual ICollection`1<IChangeProvider> GetDependentNodes(IChangeProvider provider);
    public abstract virtual ICollection`1<IChangeProvider> GetDependsUponNodes(IChangeProvider provider);
}
public interface JetBrains.Application.changes.IFileSystemChangeDeltaVisitor {
    public abstract virtual void Visit(FileSystemChangeDelta delta);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Changes.ModificationStamp : ValueType {
    public int Value;
    public ModificationStamp(int value);
    public bool Equals(ModificationStamp other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [EditorBrowsableAttribute("1")]
public static ModificationStamp Max(ModificationStamp x, ModificationStamp y);
    public static bool op_Equality(ModificationStamp left, ModificationStamp right);
    public static bool op_GreaterThan(ModificationStamp x, ModificationStamp y);
    public static ModificationStamp op_Increment(ModificationStamp x);
    public static bool op_Inequality(ModificationStamp left, ModificationStamp right);
    public static bool op_LessThan(ModificationStamp x, ModificationStamp y);
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.Changes.ModificationStamp>.CompareTo(ModificationStamp other);
}
public class JetBrains.Application.changes.Pattern : object {
    private VirtualFileSystemPath myBasePath;
    private IInteractionContext myContext;
    private bool myIsRecursive;
    private Regex myRegex;
    private string myOriginalPattern;
    private static Char[] ourWildcards;
    public string OriginalPattern { get; }
    public VirtualFileSystemPath BasePath { get; }
    public bool IsRecursive { get; }
    public Regex Regex { get; }
    public Pattern(VirtualFileSystemPath basePath, IInteractionContext context, string pattern);
    private static Pattern();
    public string get_OriginalPattern();
    public VirtualFileSystemPath get_BasePath();
    public bool get_IsRecursive();
    public Regex get_Regex();
    private void ConvertPattern(string originalNAntPattern);
    private string ToRegexPattern(string pattern);
    public bool MatchWith(VirtualFileSystemPath path);
    public virtual string ToString();
    public sealed virtual bool Equals(Pattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static void WritePattern(Pattern excludePattern, BinaryWriter writer);
}
public class JetBrains.Application.changes.RecursiveFileSystemChangeDeltaVisitor : object {
    public virtual void Visit(FileSystemChangeDelta delta);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.Application.CommandProcessing.Command : ValueType {
    public static Command Empty;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public Command(string Name);
    private static Command();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual string ToString();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Command left, Command right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Command left, Command right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(Command other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name);
}
[NullableContextAttribute("1")]
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.CommandProcessing.ICommandProcessor {
    public IProperty`1<bool> IsExecutingCommand { get; }
    public Command CurrentCommand { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IProperty`1<string> CurrentBatchChangeName { get; }
    public abstract virtual IProperty`1<bool> get_IsExecutingCommand();
    public abstract virtual Command get_CurrentCommand();
    public abstract virtual void BeginCommand(Lifetime commandLifetime, string commandName);
    public abstract virtual void ProlongCurrentCommand(Lifetime prolongationLifetime, string prolongationReason);
    public abstract virtual void ExecuteBeforeCurrentCommandFinished(Action action);
    public abstract virtual IProperty`1<string> get_CurrentBatchChangeName();
    public abstract virtual void BeginBatchTextChange(Lifetime batchCommandLifetime, string commandName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.CommandProcessing.ICommandProcessorEx : object {
    [ExtensionAttribute]
public static void WithCommand(ICommandProcessor commandProcessor, string commandName, Action action);
    [ExtensionAttribute]
[GuardAttribute("-1")]
public static void ExecuteOutsideCommandScope(ICommandProcessor commandProcessor, Lifetime lifetime, Action action);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static IDisposable UsingBatchTextChange(ICommandProcessor commandProcessor, string commandName);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static IDisposable UsingCommand(ICommandProcessor commandProcessor, string commandName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.CommandProcessing.StandaloneCommandProcessor : object {
    private ILogger myLogger;
    private IThreading myThreading;
    private LazyForkedContentModelData`1<CommandsPerFork> myState;
    public IProperty`1<bool> IsExecutingCommand { get; }
    public Command CurrentCommand { get; }
    public ISignal`1<string> BeforeCommandStarted { get; }
    public ISignal`1<string> AfterCommandFinished { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IProperty`1<string> CurrentBatchChangeName { get; }
    public StandaloneCommandProcessor(Lifetime lifetime, ILogger logger, IThreading threading);
    public sealed virtual IProperty`1<bool> get_IsExecutingCommand();
    public sealed virtual Command get_CurrentCommand();
    public sealed virtual void BeginCommand(Lifetime commandLifetime, string commandName);
    public sealed virtual void ProlongCurrentCommand(Lifetime prolongationLifetime, string prolongationReason);
    public sealed virtual void ExecuteBeforeCurrentCommandFinished(Action action);
    public ISignal`1<string> get_BeforeCommandStarted();
    public ISignal`1<string> get_AfterCommandFinished();
    public sealed virtual IProperty`1<string> get_CurrentBatchChangeName();
    public sealed virtual void BeginBatchTextChange(Lifetime batchCommandLifetime, string commandName);
}
public class JetBrains.Application.Communication.ConfigLoader`1 : object {
    private static TimeSpan ourConfigTrustPeriod;
    private ILogger myLogger;
    private WebProxySettingsReader myProxySettingsReader;
    private IThreading myThreading;
    private IConfigLoader`1<T> myConfigLoader;
    private T modreq(System.Runtime.CompilerServices.IsVolatile) myConfig;
    private DateTime myLoadTime;
    private bool myIsConfigLoaded;
    private object myConfigLock;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    public IProperty`1<Lazy`1<ConfigLocation>> ConfigLocation { get; }
    public ISimpleSignal Changed { get; }
    public ConfigLoader`1(Lifetime lifetime, ILogger logger, WebProxySettingsReader proxySettingsReader, IThreading threading, IConfigLoader`1<T> configLoader);
    private static ConfigLoader`1();
    public IProperty`1<Lazy`1<ConfigLocation>> get_ConfigLocation();
    private void ReloadConfig(Lifetime urlLifetime, ConfigLocation location);
    private T TryLoadConfig(ConfigLocation location);
    private T TryLoadConfigFromFile(IDataAccess`1<string> debugFileAccess);
    [CanBeNullAttribute]
private T TryDownloadConfigFile(string url);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_Changed();
    public T Get();
    public bool IsEmpty();
    [CompilerGeneratedAttribute]
private void <Get>b__19_0(Lifetime lifetime);
}
public abstract class JetBrains.Application.Communication.ConfigLoaderBase`1 : object {
    [CompilerGeneratedAttribute]
private string <ConfigName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Lazy`1<ConfigLocation>> <ConfigLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private OnConfigUriChangedBehavior <OnUriChangedBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ReloadConfigInterval>k__BackingField;
    public string ConfigName { get; }
    public IProperty`1<Lazy`1<ConfigLocation>> ConfigLocation { get; }
    public OnConfigUriChangedBehavior OnUriChangedBehavior { get; }
    public TimeSpan ReloadConfigInterval { get; }
    protected ConfigLoaderBase`1(string configName, OnConfigUriChangedBehavior onUriChangedBehavior, TimeSpan reloadConfigInterval);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConfigName();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Lazy`1<ConfigLocation>> get_ConfigLocation();
    [CompilerGeneratedAttribute]
public sealed virtual OnConfigUriChangedBehavior get_OnUriChangedBehavior();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ReloadConfigInterval();
    public abstract virtual T TryLoadConfig(StreamReader streamReader);
    public abstract virtual T GetNotLoadedValue(string reason);
    public abstract virtual bool EqualConfigs(T c1, T c2);
    public abstract virtual bool IsConfigLoaded(T config);
    public virtual string DumpConfig(T config);
}
[ExtensionAttribute]
public static class JetBrains.Application.Communication.ConfigLoaderEx : object {
    [ExtensionAttribute]
public static void Bind(IConfigLoader`1<T> configLoader, Lifetime lifetime, ICurrentRegion currentRegion, ProductSettingsLocation productSettingsLocation, DataAccess dataAccess, Func`2<Region, string> getUrl);
    [ExtensionAttribute]
public static void Bind(IConfigLoader`1<T> configLoader, Lifetime lifetime, ICurrentRegion currentRegion, JetBrainsResourceMappingAccessor resourceMappingAccessor, string defaultUrl, ProductSettingsLocation productSettingsLocation, DataAccess dataAccess);
}
public class JetBrains.Application.Communication.ConfigLocation : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataAccess`1<string> <DebugFileAccess>k__BackingField;
    [NotNullAttribute]
public string Url { get; }
    [CanBeNullAttribute]
public IDataAccess`1<string> DebugFileAccess { get; }
    public ConfigLocation(string url, IDataAccess`1<string> debugFileAccess);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public IDataAccess`1<string> get_DebugFileAccess();
}
public static class JetBrains.Application.Communication.ConfigLocationEx : object {
    public static string GetConfigFileName(string url);
    public static IDataAccess`1<string> CreateDebugFileAccess(string defaultUrl, ProductSettingsLocation productSettingsLocation, DataAccess dataAccess, Region region);
}
public interface JetBrains.Application.Communication.IConfigLoader`1 {
    public string ConfigName { get; }
    public IProperty`1<Lazy`1<ConfigLocation>> ConfigLocation { get; }
    public OnConfigUriChangedBehavior OnUriChangedBehavior { get; }
    public TimeSpan ReloadConfigInterval { get; }
    public abstract virtual string get_ConfigName();
    public abstract virtual IProperty`1<Lazy`1<ConfigLocation>> get_ConfigLocation();
    [CanBeNullAttribute]
public abstract virtual T TryLoadConfig(StreamReader streamReader);
    [CanBeNullAttribute]
public abstract virtual T GetNotLoadedValue(string reason);
    public abstract virtual bool EqualConfigs(T c1, T c2);
    public abstract virtual bool IsConfigLoaded(T config);
    public abstract virtual OnConfigUriChangedBehavior get_OnUriChangedBehavior();
    public abstract virtual TimeSpan get_ReloadConfigInterval();
    public abstract virtual string DumpConfig(T config);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "SetsUpApplicationsAccessToTheWorldWideWebSettingDescription")]
public class JetBrains.Application.Communication.InternetSettings : object {
}
public interface JetBrains.Application.Communication.IPortListener {
    public bool ContinueListening { get; }
    public abstract virtual bool get_ContinueListening();
    public abstract virtual void OnBytesReceived(IPEndPoint from, Byte[] data);
}
public class JetBrains.Application.Communication.JetBrainsResourceMapping : object {
    [NotNullAttribute]
private string myRawString;
    [NotNullAttribute]
private IReadOnlyList`1<Pair`2<string, string>> myUriMapping;
    public static JetBrainsResourceMapping Empty;
    public static JetBrainsResourceMapping ChinaFallback;
    public JetBrainsResourceMapping(string json);
    private static JetBrainsResourceMapping();
    [CanBeNullAttribute]
public static IReadOnlyList`1<Pair`2<string, string>> TryParse(string json);
    [NotNullAttribute]
public string MapUri(string uriString);
    private static bool Matches(string prefix, string uriWithoutProtocol);
    protected bool Equals(JetBrainsResourceMapping other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Communication.JetBrainsResourceMappingAccessor : object {
    private ICurrentRegion myCurrentRegion;
    private JetBrainsAccountConfigReloadPolicy myConfigReloadPolicy;
    private ConfigLoader`1<JetBrainsResourceMapping> myConfigLoader;
    public ISimpleSignal Changed { get; }
    public JetBrainsResourceMappingAccessor(Lifetime lifetime, ILogger logger, ICurrentRegion currentRegion, WebProxySettingsReader proxySettingsReader, IThreading threading, ProductSettingsLocation productSettingsLocation, DataAccess dataAccess, JetBrainsAccountConfigReloadPolicy configReloadPolicy);
    public ISimpleSignal get_Changed();
    [NotNullAttribute]
public JetBrainsResourceMapping Get();
}
public enum JetBrains.Application.Communication.OnConfigUriChangedBehavior : Enum {
    public int value__;
    public static OnConfigUriChangedBehavior RESET_CONFIG;
    public static OnConfigUriChangedBehavior RESET_CONFIG_AND_SCHEDULE_RELOAD;
    public static OnConfigUriChangedBehavior SCHEDULE_RELOAD;
}
public class JetBrains.Application.Communication.SecureWebClient : WebClient {
    private LifetimeDefinition myLifetimeDefinition;
    private Nullable`1<TimeSpan> myWebRequestTimeout;
    [CompilerGeneratedAttribute]
private static string <UserAgent>k__BackingField;
    [CanBeNullAttribute]
public static string UserAgent { get; public set; }
    public SecureWebClient(TimeSpan webRequestTimeout);
    [CompilerGeneratedAttribute]
public static string get_UserAgent();
    [CompilerGeneratedAttribute]
public static void set_UserAgent(string value);
    protected virtual WebRequest GetWebRequest(Uri uri);
    protected virtual void Dispose(bool disposing);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Communication.ShellWebProxySettingsReader : object {
    public ShellWebProxySettingsReader(Lifetime lifetime, WebProxySettingsReader webProxySettingsReader, ISettingsStore settingsStore, ISettingsOptimization settingsOptimization);
    private static void ReadSettings(WebProxySettingsReader webProxySettingsReader, ISettingsOptimization settingsOptimization, IContextBoundSettingsStoreLive contextBoundSettingsStoreLive, SettingsKey settingsKey);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Communication.SocketManager : object {
    private ILogger myLogger;
    public static Int32[] MULTICAST_PORTS;
    public static IPAddress MULTICAST_ADDRESS;
    private object LOCK;
    private Dictionary`2<IPEndPoint, Entry> myThreads;
    public SocketManager(Lifetime lifetime, ILogger logger);
    private static SocketManager();
    private UdpClient AttachToPort(IPEndPoint ipPoint);
    [CanBeNullAttribute]
private Entry GetEntry(IPEndPoint ipPoint);
    private void RemovePortListener(IPEndPoint ipPoint, IPortListener listener);
    private bool AddPortListener(IPEndPoint ipPoint, IPortListener listener);
    private void RemovePortThread(IPEndPoint ipPoint);
    public static bool IsFromUs(IPEndPoint from, ILogger logger);
    private void Send(IPEndPoint address, Byte[] dataBytes, ICollection`1<AddressFamily> gatewayAddressFamilies);
    private JetHashSet`1<AddressFamily> GetGatewayAddressFamilies();
    public void AddPortListener(Lifetime lifetime, IPortListener listener, IPAddress multicastAddress, Int32[] ports);
    private void RemovePortListener(IPortListener listener);
    public void Send(Byte[] data);
    private void DisposeInternal();
}
[SettingsKeyAttribute("JetBrains.Application.Communication.InternetSettings", "JetBrains.Application.Resources.Strings", "GovernsTheUseOfAProxyServerWhenDownloadingFromInternetSettingDescription")]
public class JetBrains.Application.Communication.WebProxySettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherToUseUserDefinedProxySettingsInsteadOfTheSystemWideProxySettingsSettingDescription")]
public bool IsCustomProxy;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IfIsCustomProxyUseThisProxyHostnameSettingDescription")]
public string Hostname;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IfIsCustomProxyUseThisProxyPortSettingDescription")]
public int Port;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IfIsCustomProxyUseThisProxyUsernameForPasswordProtectedProxiesOnlySettingDescription")]
public string Username;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IfIsCustomProxyUseThisProxyPasswordForPasswordProtectedProxiesOnlyIgnoredIfUsernameIsEmptySettingDescription")]
public string Password;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IfIsCustomProxyAndCreatingCustomProxyFromTheProvidedSettingsFailedReportsTheErrorAnEmptyStringIfLastProxyUseWasSuccessfulThisErrorWontBeExposedAsADownloadExceptionBecauseOnThisErrorProxySettingsSilentlyFallBackToDefaultAlwaysSetOnTheGlobalContextSettingDescription")]
public string LastProxyCreationError;
    protected bool Equals(WebProxySettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Communication.WebProxySettingsReader : object {
    private ILogger myLogger;
    [CanBeNullAttribute]
private IDataAccess`1<WebProxySettings> myAccess;
    private WebProxySettings mySettings;
    private IWebProxy myWebProxy;
    [CompilerGeneratedAttribute]
private ISimpleSignal <WebProxySettingsChanged>k__BackingField;
    public ISimpleSignal WebProxySettingsChanged { get; }
    public WebProxySettingsReader(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation, ILogger logger);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_WebProxySettingsChanged();
    [NotNullAttribute]
public IWebProxy GetWebProxy();
    [CanBeNullAttribute]
public WebProxySettings GetWebProxySettings();
    public static Pair`2<IWebProxy, string> WebProxySettingsToProxy(WebProxySettings proxySettings);
    internal string SetSettings(WebProxySettings proxySettings);
    private void TraceSettings(string action, WebProxySettings proxySettings);
}
[ShellComponentAttribute("20")]
internal class JetBrains.Application.ComponentInstantiationRequirementsChecker : object {
    public ComponentInstantiationRequirementsChecker(Lifetime lifetime, ILogger logger, FullPartCatalogSet partCatalogSet);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public static void Check(Lifetime lifetime, ILogger logger, PartCatalog partCatalog);
}
[AttributeUsageAttribute("4")]
public class JetBrains.Application.ComponentModel.RdTypeAttribute : PartAttribute {
}
public static class JetBrains.Application.ComposeVerdictWithPriority : object {
    [NotNullAttribute]
public static IProperty`1<TVerdict> Create(Lifetime lifetime, CollectionEvents`1<VerdictTeller`1<TVerdict>> tellers);
    private static void BindPropToList(Lifetime lifetime, IProperty`1<TVerdict> propComposite, IListEvents`1<VerdictTeller`1<TVerdict>> listTellers);
    private static TVerdict UpdateActiveTellers_GetCompositeState(IList`1<ActiveTeller`1<TVerdict>> tellers);
    private static void UpdateActiveTellers(Lifetime lifetimeComponent, List`1<ActiveTeller`1<TVerdict>> tellers, IProperty`1<TVerdict> propComposite);
    [NotNullAttribute]
private static IProperty`1<TVerdict> UpdateActiveTellers_Activate(Lifetime lifetimeComponent, ActiveTeller`1<TVerdict> teller, Action FUpdateOnPropChange);
}
[ExtensionAttribute]
public static class JetBrains.Application.Configuration.ComponentSettingsProviderExtensions : object {
    [ExtensionAttribute]
public static void Upgrade(IComponentSettingsProvider legacySettingsProvider, XmlExternalizationScope scope, string sectionName, Action`1<XmlElement> action);
}
[ObsoleteAttribute("For usage only in settings upgraders. Do not create a component!")]
public class JetBrains.Application.Configuration.GlobalSettingsTable : SettingsTableBase {
    private static XmlExternalizationScope ourConfigScope;
    private IComponentSettingsProvider mySettings;
    public GlobalSettingsTable(IComponentSettingsProvider settings, ProductConfigurations productConfigurations);
}
public interface JetBrains.Application.Configuration.IComponentSettingsProvider {
    public abstract virtual void LoadSettings(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
}
public interface JetBrains.Application.Configuration.ISaveSettings {
    public abstract virtual void LoadSettings();
    public abstract virtual void SaveSettings();
}
[ObsoleteAttribute("Deprecated functionality. Use SettingsStore and its infrastructure.")]
public interface JetBrains.Application.Configuration.IXmlConfigurable {
    public abstract virtual void ConfigureFromXml(XmlElement element);
}
public interface JetBrains.Application.Configuration.IXmlReadable {
    public abstract virtual void ReadFromXml(XmlElement element);
}
public interface JetBrains.Application.Configuration.IXmlRegistrable {
    public abstract virtual void RegisterFromXml(XmlElement element, IDictionary extraData);
}
public interface JetBrains.Application.Configuration.IXmlUpgradable {
    [NotNullAttribute]
public IEnumerable`1<string> LegacyTagNames { get; }
    public abstract virtual IEnumerable`1<string> get_LegacyTagNames();
    public abstract virtual bool UpgradeFromXml(XmlElement element, Version version);
}
public interface JetBrains.Application.Configuration.IXmlWritable {
    public abstract virtual void WriteToXml(XmlElement element);
}
[ObsoleteAttribute]
public abstract class JetBrains.Application.Configuration.SettingsComponentBase : object {
    private static string ConfigurationElementName;
    private Dictionary`2<XmlExternalizationScope, Dictionary`2<string, XmlElement>> myXmlSettingsBag;
    [CanBeNullAttribute]
private Version myVersionUpgradingFrom;
    [CanBeNullAttribute]
private XmlDocument myXmlDocumentSettings;
    private ProductConfigurations myProductConfigurations;
    [NotNullAttribute]
protected ICollection`1<XmlExternalizationScope> ValidXmlExternalizationScopes { get; }
    protected SettingsComponentBase(ProductConfigurations productConfigurations);
    private void ComponentReadFromXmlBag(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
    protected abstract virtual bool OnLoadSettingsXmlBag(Action`2<XmlDocument, XmlExternalizationScope> funcDeserializeXmlBag);
    protected void ShouldUpgradeSettings(Version version);
    protected abstract virtual ICollection`1<XmlExternalizationScope> get_ValidXmlExternalizationScopes();
    private bool ComponentReadFromXmlBag_TrySettingsElement(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
    private bool ComponentReadFromXmlBag_TryUpgrade(IXmlReadable component, XmlExternalizationScope scope);
    private void DeserializeXmlBag(XmlDocument document, XmlExternalizationScope scope);
    private void AssertValidComponent(object component, XmlExternalizationScope scope, string sectionName);
    public sealed virtual void LoadSettings(IXmlReadable component, XmlExternalizationScope scope, string sectionName);
    public void LoadSettingsWithXmlExternalizationUtil(object target, XmlExternalizationScope scope, string sectionName);
    public bool Init();
}
public abstract class JetBrains.Application.Configuration.SettingsTableBase : object {
    private static string BOOLEAN_SETTINGS_TAG;
    private static string INTEGER_SETTINGS_TAG;
    private static string SETTING_ENCRYPTED_ATTRIBUTE;
    private static string SETTING_NAME_ATTRIBUTE;
    private static string SETTING_TAG;
    private static string STRING_SETTINGS_TAG;
    protected static string ConfigName;
    [NotNullAttribute]
private PropertiesCollection`1<bool> myBooleanPropertiesCollection;
    [NotNullAttribute]
private JetHashSet`1<string> myEncryptedSettings;
    [NotNullAttribute]
private PropertiesCollection`1<int> myIntegerPropertiesCollection;
    [NotNullAttribute]
private PropertiesCollection`1<string> myStringPropertiesCollection;
    private ProductConfigurations myProductConfigurations;
    public PropertiesCollection`1<bool> BoolProperties { get; }
    public PropertiesCollection`1<int> IntProperties { get; }
    public PropertiesCollection`1<string> StringProperties { get; }
    protected SettingsTableBase(ProductConfigurations productConfigurations);
    public PropertiesCollection`1<bool> get_BoolProperties();
    public PropertiesCollection`1<int> get_IntProperties();
    public PropertiesCollection`1<string> get_StringProperties();
    public sealed virtual bool GetBoolean(string settingName);
    public sealed virtual bool GetBoolean(string settingName, bool defaultVal);
    public sealed virtual int GetInteger(string settingName);
    public sealed virtual int GetInteger(string settingName, int defaultVal);
    public sealed virtual string GetString(string settingName);
    public sealed virtual string GetString(string settingName, string defaultVal);
    public sealed virtual void SetBoolean(string settingName, bool val);
    public sealed virtual void SetInteger(string settingName, int val);
    public sealed virtual void SetString(string settingName, string val);
    public bool IsEncrypted(string settingName);
    private void ReadHashtable(XmlElement element, string tagName, IDictionary`2<string, string> table);
    private void WriteHashtable(XmlElement element, string tagName, SortedDictionary`2<string, string> table);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement element);
}
public abstract class JetBrains.Application.Configuration.SettingTablesUpgrader : object {
    private static WorkspaceSettingsTable ourWorkspaceSettingsTable;
    private static GlobalSettingsTable ourGlobalSettingsTable;
    private static object ourLock;
    protected ProductConfigurations ProductConfigurations;
    protected SettingTablesUpgrader(ProductConfigurations productConfigurations);
    private static SettingTablesUpgrader();
    private sealed virtual override void JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader.Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    protected abstract virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
[ObsoleteAttribute("%MEANINGFUL EXPLANATION HERE%")]
public class JetBrains.Application.Configuration.ShellSettingsComponent : SettingsComponentBase {
    private static XmlExternalizationScope[] ourValidXmlExternalizationScopes;
    public static PropertyId`1<Func`1<IEnumerable`1<Tuple`2<FileSystemPath, Version>>>> PropGetLegacySettingsFiles;
    private IApplicationHost myApplicationHost;
    private IEnumerable`1<ISettingsApplicationTrait> mySettingsApplicationTraits;
    private ProductSettingsLocation myProductSettingsLocation;
    private IThreading myThreading;
    protected ICollection`1<XmlExternalizationScope> ValidXmlExternalizationScopes { get; }
    public ShellSettingsComponent(IApplicationHost applicationHost, IEnumerable`1<ISettingsApplicationTrait> settingsApplicationTraits, IThreading threading, ProductSettingsLocation productSettingsLocation, ProductConfigurations productConfigurations);
    private static ShellSettingsComponent();
    protected virtual ICollection`1<XmlExternalizationScope> get_ValidXmlExternalizationScopes();
    [CanBeNullAttribute]
private XmlDocument GetWorkspaceDocument();
    protected virtual bool OnLoadSettingsXmlBag(Action`2<XmlDocument, XmlExternalizationScope> funcDeserializeXmlBag);
    [CanBeNullAttribute]
private XmlDocument GetUserSettingsDocument_CurrentVersion();
    [CanBeNullAttribute]
private XmlDocument GetUserSettingsDocument_LegacyVersion();
    [CanBeNullAttribute]
private XmlDocument GetUserSettingsDocument();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgrade : SettingsUpgradeBase`2<IGlobalSettingsUpgrader, GlobalSettingsUpgraderAttribute> {
    private IShellLocks myLocks;
    private ProductSettingsLocation myProductSettingsLocation;
    private ProductConfigurations myProductConfigurations;
    private IApplicationHost myProductNameAndVersion;
    private IEnumerable`1<ISettingsApplicationTrait> mySettingsApplicationTraits;
    public GlobalSettingsUpgrade(Lifetime lifetime, ISettingsStore settingsStore, IComponentContainer parentContainer, ShellPartCatalogSet catalogueSet, ProductSettingsLocation productSettingsLocation, ProductConfigurations productConfigurations, IShellLocks locks, ResetSettings resetSettings, GlobalSettings globalSettings, IApplicationHost productNameAndVersion, IEnumerable`1<ISettingsApplicationTrait> settingsApplicationTraits);
    protected virtual SettingsScalarEntry IsUpgradedFlagEntry(ISettingsSchema schema);
    protected virtual void DoUpgrade(IGlobalSettingsUpgrader settingsUpgrader, IComponentSettingsProvider solutionSettingsComponent, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    protected virtual IComponentSettingsProvider CreateLegacySettingsComponent();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "GlobalSettingsUpgradedSettingDescription")]
public class JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgradedSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "GlobalSettingsUpgradedSettingDescription")]
public bool IsUpgraded;
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader")]
public class JetBrains.Application.Configuration.Upgrade.GlobalSettingsUpgraderAttribute : ComponentAttribute {
    public GlobalSettingsUpgraderAttribute(Instantiation instantiation);
}
public interface JetBrains.Application.Configuration.Upgrade.IGlobalSettingsUpgrader {
    public abstract virtual void Upgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
}
public interface JetBrains.Application.Configuration.Upgrade.ISettingsUpgrader {
}
public abstract class JetBrains.Application.Configuration.Upgrade.SettingsUpgradeBase`2 : object {
    protected virtual void DoUpgrade(IComponentContainer parentContainer, IPartCatalogSet catalogueSet, IContextBoundSettingsStore boundSettingsStore);
    protected abstract virtual SettingsScalarEntry IsUpgradedFlagEntry(ISettingsSchema schema);
    protected abstract virtual void DoUpgrade(TSettingsUpgrader settingsUpgrader, IComponentSettingsProvider solutionSettingsComponent, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime);
    protected abstract virtual IComponentSettingsProvider CreateLegacySettingsComponent();
}
[ExtensionAttribute]
public static class JetBrains.Application.Configuration.Upgrade.SettingsUpgradeEx : object {
    [ExtensionAttribute]
public static void UpgradeValue(IContextBoundSettingsStore boundSettingsStore, Expression`1<Func`2<TKey, T>> expression, T value);
    [ExtensionAttribute]
public static void UpgradeIndexedValue(IContextBoundSettingsStore boundSettingsStore, Expression`1<Func`2<TSettingKey, IIndexedEntry`2<TKey, TValue>>> expression, TKey key, TValue value);
}
[ObsoleteAttribute("For usage only in settings upgraders. Do not create a component!")]
public class JetBrains.Application.Configuration.WorkspaceSettingsTable : SettingsTableBase {
    private static XmlExternalizationScope ourConfigScope;
    private IComponentSettingsProvider mySettings;
    public WorkspaceSettingsTable(IComponentSettingsProvider settings, ProductConfigurations productConfigurations);
}
[BaseTypeRequiredAttribute("JetBrains.Application.Configuration.IXmlConfigurable")]
public class JetBrains.Application.Configuration.XmlConfigurableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ConfigurationResourceName>k__BackingField;
    public string ConfigurationResourceName { get; public set; }
    public XmlConfigurableAttribute(string configurationResourceName);
    [CompilerGeneratedAttribute]
public string get_ConfigurationResourceName();
    [CompilerGeneratedAttribute]
public void set_ConfigurationResourceName(string value);
}
public static class JetBrains.Application.Configuration.XmlConfigurableHelper : object {
    public static void InitializeComponent_XmlConfigurable(IXmlConfigurable configurable);
}
[AttributeUsageAttribute("384")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.Configuration.XmlExternalizableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXmlSerializer>k__BackingField;
    [CanBeNullAttribute]
public object DefaultValue { get; public set; }
    [CanBeNullAttribute]
public string SettingName { get; public set; }
    public bool UseXmlSerializer { get; public set; }
    public XmlExternalizableAttribute(object defaultvalue);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public string get_SettingName();
    [CompilerGeneratedAttribute]
public void set_SettingName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseXmlSerializer();
    [CompilerGeneratedAttribute]
public void set_UseXmlSerializer(bool value);
}
public enum JetBrains.Application.Configuration.XmlExternalizationScope : Enum {
    public int value__;
    public static XmlExternalizationScope Any;
    public static XmlExternalizationScope Local;
    public static XmlExternalizationScope Shared;
    public static XmlExternalizationScope UserSettings;
    public static XmlExternalizationScope WorkspaceSettings;
}
public static class JetBrains.Application.Configuration.XmlExternalizationUtil : object {
    private static string XmlArrayItemElemName;
    private static string XmlIsNullAttrName;
    public static string XmlExternalizableElementName;
    public static string XmlStreamElementName;
    private static XmlExternalizationUtil();
    public static void ApplyDefaults(object externalizable);
    public static void ApplyDefaults(object externalizable, object proptoken);
    public static void ReadFromXml(XmlReader reader, object externalizable);
    public static void ReadFromXml(XmlElement parent, object externalizable);
    public static void ReadFromXml(XmlElement parent, object externalizable, object proptoken);
    public static void ReadFromXml(XmlReader reader, object externalizable, object proptoken);
    public static void ReadStreamElementsFromXml(XmlElement parent, Action`1<XmlReader> action);
    public static void ReadStreamFromXml(XmlElement parent, Action`1<XmlReader> action);
    public static void ReadStructFromXml(XmlElement parent, T& externalizable);
    public static void ReadStructFromXml(XmlElement parent, T& externalizable, object proptoken);
    public static void TryReadFromXml(XmlReader reader, object externalizable);
    public static void TryReadFromXml(XmlReader reader, object externalizable, object proptoken);
    public static void WriteStreamToXml(XmlElement parent, Action`1<XmlWriter> action);
    public static void WriteToXml(XmlElement parent, object externalizable);
    public static void WriteToXml(XmlWriter writer, object externalizable);
    public static void WriteToXml(XmlElement parent, object externalizable, object proptoken);
    public static void WriteToXml(XmlWriter writer, object externalizable, object proptoken);
    private static bool EqualsWithArrays(object o1, object o2);
    [NotNullAttribute]
private static List`1<ExternalizableMember> GetExternalizableMembers(object instance);
    private static object ParseValue(string value, Type targetType);
    private static void ReadFromXml_FillMembersWithValues(XmlReader reader, IDictionary`2<string, ExternalizableMember> members);
    private static void ReadFromXml_FillMembersWithValues(XmlElement parent, IDictionary`2<string, ExternalizableMember> members);
    [CanBeNullAttribute]
private static object ReadFromXml_FillMembersWithValues_Value(XmlReader reader, Type type);
    [CanBeNullAttribute]
private static object ReadFromXml_FillMembersWithValues_Value(XmlElement element, Type target);
    [NotNullAttribute]
private static Array ToArrayOfType(Type type, IEnumerable`1<object> source);
    private static void ReadFromXml_FillMembersWithValues_ValueXmlSerializer(XmlReader reader, ExternalizableMember item);
    private static void ReadFromXmlCore(object externalizable, Action`1<Dictionary`2<string, ExternalizableMember>> funcFillMembersWithValues, object proptoken);
    private static void WriteToXml_Value(XmlElement parent, string name, object val);
    private static void WriteToXml_Value(XmlWriter writer, string name, object val);
    private static void WriteToXml_XmlSerializerValue(XmlWriter writer, ExternalizableMember item, object value);
    public static void ReadFromSubTag(XmlElement element, IXmlReadable externalizable, string tagName);
    public static void WriteToSubTag(XmlElement element, IXmlWritable setting, string tagName);
    public static bool ArrayEquals(Array array1, Array array2);
}
[ExtensionAttribute]
public static class JetBrains.Application.Configuration.XmlReadableExtensions : object {
    [ExtensionAttribute]
public static IXmlReadable CreateReadable(Action`1<XmlElement> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
public class JetBrains.Application.ContentModel.ContentModelFork : ValueType {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
internal static ContentModelForkDefinition CurrentForkDefinition;
    public static bool IsCurrentlyForked { get; }
    [NullableAttribute("2")]
public static string CurrentForkName { get; }
    public static Lifetime CurrentForkLifetimeOrEternal { get; }
    public static bool IsCurrentForkIsAboutToTerminate { get; }
    private static ContentModelFork();
    public static bool get_IsCurrentlyForked();
    public static void AssertNotForked();
    public static void AssertNotForked(string reason);
    public static void AssertForked();
    public static void AssertForked(string reason);
    public static void HardAssertForkPrimaryThread();
    public static bool CheckCurrentThreadIsForkPrimaryThread();
    public static void HardAssertNotForked(string reason);
    public static void ThrowNotSupportedIfForked(string reason);
    [NullableContextAttribute("2")]
public static string get_CurrentForkName();
    public static Lifetime get_CurrentForkLifetimeOrEternal();
    public static bool get_IsCurrentForkIsAboutToTerminate();
    [MustDisposeResourceAttribute]
public static IDisposable CreateTemporaryForkForCurrentThread(string name, IShellLocks shellLocks);
    private static void OnForkFinalTermination();
    [MustUseReturnValueAttribute]
public static ThreadTransitionCookie CaptureCurrentForkForThreadTransition();
    [MustDisposeResourceAttribute]
[MustUseReturnValueAttribute]
public static IDisposable SetupForkForCurrentChildReadThread(ThreadTransitionCookie cookie);
    [MustDisposeResourceAttribute]
public static TemporaryForkOverrideCookie TemporaryOverrideForkInCurrentThread(string name, IShellLocks shellLocks);
    public static void TemporaryExecuteCodeOutsideOfForkedContextForTests(Action action);
    [MustDisposeResourceAttribute]
public static TemporaryForkOverrideCookie TemporaryExitForkInCurrentThread(IShellLocks shellLocks);
    private static void AcquireReadLockAndSetupInterruptionInNewlyCreatedFork(ContentModelReadWriteLock contentModelLocks);
    [MustUseReturnValueAttribute]
public static object TryGetAttachedForkedDataFor(object owner, ForkAttachedDataDescriptor fieldDescriptor);
    public static void SetAttachedForkedDataFor(object owner, ForkAttachedDataDescriptor fieldDescriptor, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.ContentModel.ContentModelForkDefinition : object {
    private LifetimeDefinition myLifetimeDefinition;
    private bool myNotSupportedInForksExceptionIsThrown;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<object, object> myForkedData;
    private ConcurrentUserDataHolder myLazyForkedData;
    private ConditionalWeakTable`2<object, AttachedFieldsHolder> myWeakForkedData;
    [CompilerGeneratedAttribute]
private int <PrimaryThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForkName>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <ShellLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ReaderWriterLockSlim <RwLock>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentWriteLockInterruptionSource <ForkWriteLockInterruption>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentWriteLockPoliteInterruptionSource <ForkWriteLockInterruptionPolite>k__BackingField;
    [NullableAttribute("2")]
private LifetimeDefinition modreq(System.Runtime.CompilerServices.IsVolatile) myWriteLockLifetimeDefinition;
    [CompilerGeneratedAttribute]
private int <ForkedWriteLockTimeStamp>k__BackingField;
    private SequentialLifetimes myBackgroundForkReadersAllowedSequentialLifetimes;
    private Lifetime myBackgroundForkReadersAllowedLifetime;
    private SequentialLifetimes myNoNewWriteLockInForksSequentialLifetimes;
    private Lifetime myNoNewWriteLockInForkLifetime;
    public Lifetime Lifetime { get; }
    internal bool NotSupportedInForksExceptionIsThrown { get; internal set; }
    public int PrimaryThreadId { get; }
    private string ForkName { get; }
    public IShellLocks ShellLocks { get; }
    public ReaderWriterLockSlim RwLock { get; }
    public ContentWriteLockInterruptionSource ForkWriteLockInterruption { get; }
    public ContentWriteLockPoliteInterruptionSource ForkWriteLockInterruptionPolite { get; }
    public bool IsWriteLockRequestedOrHeldBySomeForkThread { get; internal set; }
    public int ForkedWriteLockTimeStamp { get; internal set; }
    public ConcurrentUserDataHolder LazyForkedData { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ConcurrentDictionary`2<object, object> ForkedData { get; }
    public ConditionalWeakTable`2<object, AttachedFieldsHolder> WeaklyAttachedForkedData { get; }
    [MustDisposeResourceAttribute]
public ContentModelForkDefinition(string forkName, IShellLocks shellLocks);
    public Lifetime get_Lifetime();
    internal bool get_NotSupportedInForksExceptionIsThrown();
    internal void set_NotSupportedInForksExceptionIsThrown(bool value);
    [CompilerGeneratedAttribute]
public int get_PrimaryThreadId();
    [PureAttribute]
public bool CheckForkPrimaryThread();
    [CompilerGeneratedAttribute]
private string get_ForkName();
    [CompilerGeneratedAttribute]
public IShellLocks get_ShellLocks();
    [CompilerGeneratedAttribute]
public ReaderWriterLockSlim get_RwLock();
    [CompilerGeneratedAttribute]
public ContentWriteLockInterruptionSource get_ForkWriteLockInterruption();
    [CompilerGeneratedAttribute]
public ContentWriteLockPoliteInterruptionSource get_ForkWriteLockInterruptionPolite();
    public bool get_IsWriteLockRequestedOrHeldBySomeForkThread();
    internal void set_IsWriteLockRequestedOrHeldBySomeForkThread(bool value);
    public Task AwaitCurrentWriteLockCompletion(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public int get_ForkedWriteLockTimeStamp();
    [CompilerGeneratedAttribute]
internal void set_ForkedWriteLockTimeStamp(int value);
    [MustUseReturnValueAttribute]
public Lifetime BackgroundForkReadersAllowedLifetime();
    public void TerminateBackgroundForkReadersAllowedLifetime();
    public void FireNextBackgroundForkReadersAllowedLifetime();
    [MustUseReturnValueAttribute]
public Lifetime NoNewWriteLockInForkLifetime();
    public void FireNextNoNewWriteLockInForkLifetime();
    public ConcurrentUserDataHolder get_LazyForkedData();
    public ConcurrentDictionary`2<object, object> get_ForkedData();
    public ConditionalWeakTable`2<object, AttachedFieldsHolder> get_WeaklyAttachedForkedData();
    public void AssertNotTerminated();
    public virtual string ToString();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.ContentModel.ForkAttachedDataDescriptor : object {
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWeakReference>k__BackingField;
    public string FieldName { get; }
    public bool IsWeakReference { get; public set; }
    public ForkAttachedDataDescriptor(string fieldName);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public bool get_IsWeakReference();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsWeakReference(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.ContentModel.ForkedContentModelData`1 : ValueType {
    [NullableAttribute("2")]
private T myData;
    [IsReadOnlyAttribute]
[MustUseReturnValueAttribute]
public T GetValueForCurrentFork(object owner);
    public void SetValueForCurrentFork(object owner, T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.ContentModel.LazyForkedContentModelData`1 : object {
    [CompilerGeneratedAttribute]
private Func`1<T> <factory>P;
    private Key`1<T> myDataKey;
    [NullableAttribute("2")]
private T myData;
    public T ValueForCurrentFork { get; }
    public LazyForkedContentModelData`1(Func`1<T> factory);
    public T get_ValueForCurrentFork();
}
public class JetBrains.Application.ContentModel.NotSupportedInContentModelForksException : OperationCanceledException {
    public NotSupportedInContentModelForksException(string reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.ContentModel.Progress.ForkedUiTaskExecutor : object {
    private bool myAssertPrimaryThread;
    public static ITaskExecutor PrimaryThreadAffineInstance;
    public static ITaskExecutor FreeThreadedInstance;
    private ForkedUiTaskExecutor(bool assertPrimaryThread);
    private static ForkedUiTaskExecutor();
    public sealed virtual bool ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.ContentModel.WeaklyReferencedForkedContentModelData`1 : ValueType {
    [NullableAttribute("2")]
private WeakReference`1<T> myWeakReference;
    [IsReadOnlyAttribute]
[MustUseReturnValueAttribute]
public T TryGetValueForCurrentFork(object owner, ForkAttachedDataDescriptor fieldDescriptor);
    public void SetValueForCurrentFork(object owner, ForkAttachedDataDescriptor fieldDescriptor, T value);
}
public class JetBrains.Application.ContextNotifications.ContextNotificationActionModel : object {
    private IconId myIcon;
    private string myTooltip;
    private ICommand myCommand;
    [NotNullAttribute]
public ICommand Command { get; }
    [NotNullAttribute]
public IconId Icon { get; }
    [CanBeNullAttribute]
public string Tooltip { get; }
    public ContextNotificationActionModel(IconId icon, string tooltip, ICommand command);
    public ContextNotificationActionModel(IconId icon, string tooltip, Action action, Func`1<bool> canExecute);
    public ICommand get_Command();
    public IconId get_Icon();
    public string get_Tooltip();
}
public abstract class JetBrains.Application.ContextNotifications.ContextNotificationHostBase : object {
    [NotNullAttribute]
private ContextNotificationViewModel myContextNotificationViewModel;
    [NotNullAttribute]
private Signal`1<ContextNotificationModel> myNotificationCreated;
    [NotNullAttribute]
private EscapeHandler myEscapeHandler;
    public ContextNotificationViewModel ViewModel { get; }
    public ISignal`1<ContextNotificationModel> NotificationCreated { get; }
    protected ContextNotificationHostBase(Lifetime lifetime, IThreading threading, IActionManager actionManager);
    public virtual void Create(ContextNotificationModel model);
    protected virtual bool CanRemoveLastTask(IDataContext context);
    public sealed virtual ContextNotificationViewModel get_ViewModel();
    public sealed virtual ISignal`1<ContextNotificationModel> get_NotificationCreated();
}
public abstract class JetBrains.Application.ContextNotifications.ContextNotificationModel : object {
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private GroupingEvent myGroupingEvent;
    [NotNullAttribute]
private ObservableCollection`1<ContextNotificationActionModel> myActions;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public string Title { get; }
    public double TitleExtraWidth { get; }
    public bool HasProgress { get; }
    public double Fraction { get; }
    [NotNullAttribute]
protected GroupingEvent GroupingEvent { get; }
    public bool IsVisible { get; public set; }
    public bool CanExecute { get; }
    public ObservableCollection`1<ContextNotificationActionModel> Actions { get; }
    protected ContextNotificationModel(LifetimeDefinition lifetimeDefinition, IThreading threading);
    private void Initialize();
    public Lifetime get_Lifetime();
    public abstract virtual string get_Title();
    public virtual double get_TitleExtraWidth();
    public virtual bool get_HasProgress();
    public virtual double get_Fraction();
    protected GroupingEvent get_GroupingEvent();
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    public virtual void Cancel();
    public virtual void Execute();
    public virtual bool get_CanExecute();
    public ObservableCollection`1<ContextNotificationActionModel> get_Actions();
    protected virtual void FillActions();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged();
}
public class JetBrains.Application.ContextNotifications.ContextNotificationViewModel : object {
    private static TimeSpan ourFromMilliseconds;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ObservableCollection`1<ContextNotificationModel> myTasks;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ObservableCollection`1<ContextNotificationModel> Tasks { get; }
    public ContextNotificationViewModel(Lifetime lifetime, IThreading threading);
    private static ContextNotificationViewModel();
    public ObservableCollection`1<ContextNotificationModel> get_Tasks();
    public void Add(Lifetime lifetime, ContextNotificationModel model);
    private void AddInternal(ContextNotificationModel model);
    private void AddModel(ContextNotificationModel task);
    private void RemoveBackgroundOperation(ContextNotificationModel task);
    public bool Any();
    public bool RemoveLast();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public interface JetBrains.Application.ContextNotifications.IContextNotificationHost {
    [NotNullAttribute]
public ISignal`1<ContextNotificationModel> NotificationCreated { get; }
    [NotNullAttribute]
public ContextNotificationViewModel ViewModel { get; }
    public abstract virtual void Create(ContextNotificationModel model);
    public abstract virtual ISignal`1<ContextNotificationModel> get_NotificationCreated();
    public abstract virtual ContextNotificationViewModel get_ViewModel();
}
public class JetBrains.Application.Crossgen.Crossgen2 : object {
    private Lifetime myLifetime;
    private CrossgenLogger myLogger;
    private FileSystemPath myBinDir;
    private CrossgenOptions myOptions;
    private FileSystemPath myCliPath;
    public static string MarkerFileName;
    public static string BinCopied;
    public static string StartMarkerFile;
    private ICollection`1<FileSystemPath> myRuntimeReferences;
    private static string NetCore;
    private FileSystemPath NetCoreDir { get; }
    private Crossgen2(Lifetime lifetime, CrossgenLogger logger, FileSystemPath binDir, FileSystemPath cliPath, ICollection`1<FileSystemPath> runtimeReferences, CrossgenOptions options);
    private FileSystemPath get_NetCoreDir();
    public static Task RunAsync(Lifetime lifetime, CrossgenOptions options, CrossgenDirs binDirs);
    public static void RunSync(Lifetime lifetime, CrossgenOptions options, CrossgenDirs binDirs);
    private void Start();
    private RunnerBase CreateRunner(ICollection`1<FileSystemPath> allManagedAssemblies);
    private void WriteMapFile(ICollection`1<FileSystemPath> paths);
    private static void WriteStartMarkerFile(FileSystemPath dir, string startMarker);
    private static void WriteBinCopiedMarkerFile(FileSystemPath dir, string startMarker);
    private void WriteMarkerFile();
    private void CreateNiDepsJsons();
    private static void AssertDirectoryIsEmpty(FileSystemPath dir);
    private static void PrepareDestinationDirectory(ILogger logger, CrossgenDirs dirs, string marker);
    private ICollection`1<FileSystemPath> CollectAllManagedAssemblies(ICollection`1<FileSystemPath> runtimeReferences);
    private static bool IsManagedAssembly(FileSystemPath path);
    private static CrossgenDirs GetNetCoreDirs(CrossgenDirs binDirs);
    private static FileSystemPath GetNetCoreDir(FileSystemPath binDir);
    private static FileSystemPath GetCliPath(FileSystemPath binDir, CrossgenOptions options);
    private static ICollection`1<FileSystemPath> CollectRuntimeReferences(ILog logger, Lifetime lifetime, FileSystemPath cliPath, FileSystemPath originalNetCoreDir);
    private static ICollection`1<FileSystemPath> GetFiles(FileSystemPath directory, string mask);
    private static ICollection`1<FileSystemPath> GetDirectories(FileSystemPath directory);
    private static bool HasExtenstion(FileSystemPath path, string extension);
    private static bool IsDll(FileSystemPath path);
    private static bool IsPdb(FileSystemPath path);
    private static bool IsNiDllOrExe(FileSystemPath path);
    private static bool IsDllOrExe(FileSystemPath path);
    private static FileSystemPath ToNi(FileSystemPath path);
    [CompilerGeneratedAttribute]
private void <WriteMarkerFile>b__19_0(StreamWriter writer);
    [CompilerGeneratedAttribute]
private string <CreateNiDepsJsons>b__20_0(Match it);
}
internal class JetBrains.Application.Crossgen.CrossgenAssembliesHelper : object {
    private Dictionary`2<FileSystemPath, IMetadataAssembly> myAssemblies;
    private MetadataLoader myLoader;
    public CrossgenAssembliesHelper(ICollection`1<FileSystemPath> assemblyPaths);
    public List`1<FileSystemPath> FilterOutBadAssemblies(Func`2<IMetadataAssembly, bool> isBadAssembly);
    public List`1<FileSystemPath> GetBadRoots(Func`2<FileSystemPath, bool> isBadAssembly);
    private HashSet`1<AssemblyNameInfo> GetFlattenAssemblies(IEnumerable`1<IMetadataAssembly> assemblies, Func`2<AssemblyNameInfo, bool> exclude);
    private void DepthFirstSearch(IEnumerable`1<IMetadataAssembly> assemblies, PassingOnWayDownDelegate`1<IMetadataAssembly> FEnteringOnWayDown, Action`1<IMetadataAssembly> FPassingOnWayUp);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private ValueTuple`2<FileSystemPath, IMetadataAssembly> <.ctor>b__2_2(FileSystemPath x);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMetadataAssembly> <DepthFirstSearch>b__6_0(IMetadataAssembly assembly);
    [CompilerGeneratedAttribute]
private IMetadataAssembly <DepthFirstSearch>b__6_1(AssemblyNameInfo x);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Crossgen.CrossgenDirs : ValueType {
    [CompilerGeneratedAttribute]
private FileSystemPath <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Destination>k__BackingField;
    public FileSystemPath Source { get; }
    public FileSystemPath Destination { get; }
    public CrossgenDirs(FileSystemPath source, FileSystemPath destination);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Source();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Destination();
    public FileSystemPath Transform(FileSystemPath path);
    public virtual string ToString();
}
public enum JetBrains.Application.Crossgen.CrossgenKind : Enum {
    public int value__;
    public static CrossgenKind SingleFile;
    public static CrossgenKind Batch;
    public static CrossgenKind Composite;
}
public class JetBrains.Application.Crossgen.CrossgenOptions : ValueType {
    [CompilerGeneratedAttribute]
private JetPlatform <TargetPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private JetArchitecture <TargetaArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Marker>k__BackingField;
    [CompilerGeneratedAttribute]
private InstructionSet <InstructionSet>k__BackingField;
    [CompilerGeneratedAttribute]
private CrossgenKind <Kind>k__BackingField;
    public JetPlatform TargetPlatform { get; public set; }
    public JetArchitecture TargetaArchitecture { get; public set; }
    public string Marker { get; public set; }
    public InstructionSet InstructionSet { get; public set; }
    public CrossgenKind Kind { get; public set; }
    public string TargetPlatformAsString { get; }
    [NotNullAttribute]
public string InstructionSetAsString { get; }
    public string TargetArchitectureAsString { get; }
    public CrossgenOptions(JetPlatform TargetPlatform, JetArchitecture TargetaArchitecture, string Marker, InstructionSet InstructionSet, CrossgenKind Kind);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JetPlatform get_TargetPlatform();
    [CompilerGeneratedAttribute]
public void set_TargetPlatform(JetPlatform value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JetArchitecture get_TargetaArchitecture();
    [CompilerGeneratedAttribute]
public void set_TargetaArchitecture(JetArchitecture value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Marker();
    [CompilerGeneratedAttribute]
public void set_Marker(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public InstructionSet get_InstructionSet();
    [CompilerGeneratedAttribute]
public void set_InstructionSet(InstructionSet value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CrossgenKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(CrossgenKind value);
    public string get_TargetPlatformAsString();
    public string get_InstructionSetAsString();
    public string get_TargetArchitectureAsString();
    private static string InstructionToString(InstructionSet instruction);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CrossgenOptions left, CrossgenOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CrossgenOptions left, CrossgenOptions right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CrossgenOptions other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(JetPlatform& TargetPlatform, JetArchitecture& TargetaArchitecture, String& Marker, InstructionSet& InstructionSet, CrossgenKind& Kind);
}
[FlagsAttribute]
public enum JetBrains.Application.Crossgen.InstructionSet : Enum {
    public int value__;
    public static InstructionSet aes;
    public static InstructionSet avx;
    public static InstructionSet avx2;
    public static InstructionSet avxvnni;
    public static InstructionSet bmi1;
    public static InstructionSet bmi2;
    public static InstructionSet fma;
    public static InstructionSet lzcnt;
    public static InstructionSet pclmulqdq;
    public static InstructionSet popcnt;
    public static InstructionSet sse;
    public static InstructionSet sse2;
    public static InstructionSet sse3;
    public static InstructionSet sse41;
    public static InstructionSet sse42;
    public static InstructionSet ssse3;
    public static InstructionSet advsimd;
    public static InstructionSet crc32;
    public static InstructionSet dp;
    public static InstructionSet rdm;
    public static InstructionSet sha1;
    public static InstructionSet sha256;
}
public class JetBrains.Application.DataContext.AmbientApplicationDataRule`1 : DataRule`1<TValue> {
    public AmbientApplicationDataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.AmbientApplicationOrSelectionDataRule`1 : DataRule`1<TValue> {
    public AmbientApplicationOrSelectionDataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.AmbientSelectionDataRule`1 : DataRule`1<TValue> {
    public AmbientSelectionDataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.AmbientSelectionMainThreadDataRule`1 : DataRule`1<TValue> {
    public AmbientSelectionMainThreadDataRule`1(string name, DataConstant`1<TValue> dataconstant, IThreading mainthread, Func`2<IDataContext, TValue> FTryEvaluate);
}
public class JetBrains.Application.DataContext.ApplicationContext : object {
    public static ApplicationContext Instance { get; }
    public static ApplicationContext get_Instance();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public abstract class JetBrains.Application.DataContext.ApplicationDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<Boxed`1<JetPhysicalPoint>> ScreenPoint;
    [NotNullAttribute]
public static DataConstant`1<CurrentSelectionContext> CurrentSelectionContext;
    [NotNullAttribute]
public static DataConstant`1<ApplicationContext> ApplicationContext;
    [NotNullAttribute]
public static DataConstant`1<ComponentContainerForFactoring> ComponentContainerForFactoring;
    private static ApplicationDataConstants();
}
[ExtensionAttribute]
public static class JetBrains.Application.DataContext.ApplicationDataConstantsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
internal static IComponentContainer GetComponentContainer(IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static T GetComponent(IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<T> GetComponents(IDataContext dataContext);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T TryGetComponent(IDataContext dataContext);
}
public class JetBrains.Application.DataContext.ComponentContainerForFactoring : object {
    public IComponentContainer Container;
    public ComponentContainerForFactoring(IComponentContainer container);
}
public class JetBrains.Application.DataContext.CurrentSelectionContext : object {
    public static CurrentSelectionContext Instance { get; }
    public static CurrentSelectionContext get_Instance();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class JetBrains.Application.DataContext.DataConstant`1 : object {
    [NotNullAttribute]
private string myId;
    public string Id { get; }
    public Type Type { get; }
    public DataConstant`1(string id);
    public sealed virtual string get_Id();
    public virtual string ToString();
    public static PropertyId`1<T> op_Implicit(DataConstant`1<T> dataconstant);
    public sealed virtual Type get_Type();
}
public class JetBrains.Application.DataContext.DataConstantPropertyId`1 : PropertyId`1<T> {
    [NotNullAttribute]
private DataConstant`1<T> myDataConstant;
    [NotNullAttribute]
public DataConstant`1<T> DataConstant { get; }
    public DataConstantPropertyId`1(DataConstant`1<T> dataconstant);
    public DataConstant`1<T> get_DataConstant();
    public static DataConstantPropertyId`1<T> op_Implicit(DataConstant`1<T> dataconstant);
    public static DataConstant`1<T> op_Implicit(DataConstantPropertyId`1<T> propertyid);
}
internal class JetBrains.Application.DataContext.DataContext : object {
    private Lifetime myLifetime;
    private DataContextValidator myValidator;
    private IShellLocks myLocks;
    private DataContextState myState;
    private static ILogger ourLogger;
    private IDataConstant myCachedValue0_Constant;
    private IDataConstant myCachedValue1_Constant;
    private IDataConstant myCachedValue2_Constant;
    private IDataConstant myCachedValue3_Constant;
    private object myCachedValue0_Value;
    private object myCachedValue1_Value;
    private object myCachedValue2_Value;
    private object myCachedValue3_Value;
    private Dictionary`2<IDataConstant, object> myCachedValuesTail;
    private object NULL_VALUE;
    private IList`1<IDataConstant> myDataConstantsInUse_Constant;
    private IList`1<bool> myDataConstantsDoCacheNull_Flag;
    [CanBeNullAttribute]
public Thread ThreadIfAffined;
    [NotNullAttribute]
private Evaluator myDataRules;
    private string myDebugInstanceId;
    public DataContextState State { get; }
    [NotNullAttribute]
internal IEnumerable`1<IDataRule> DataRules { get; }
    private bool JetBrains.Application.DataContext.IDataContext.IsEmpty { get; }
    internal DataContext(Lifetime lifetime, DataContextValidator validator, IShellLocks locks, IEnumerable`1<IDataRule> datarulesPlain, ConcurrentDictionary`2<IDataConstant, DataRuleStorageRecord[]> datarulesSorted);
    private DataContext(Lifetime lifetime, DataContextValidator validator, IShellLocks locks, Evaluator dataRulesPlain, string debugInstanceId);
    private static DataContext();
    public sealed virtual DataContextState get_State();
    public sealed virtual IDataContext Prolongate(Lifetime lifetime);
    internal IEnumerable`1<IDataRule> get_DataRules();
    internal object DoGetData(IDataConstant constant);
    private LocalDisposable`1<DataContext> AffineToCurrentThread();
    [NotNullAttribute]
private Dictionary`2<IDataConstant, object> CachedValues_ToDictionarySlow();
    [CanBeNullAttribute]
private object CachedValues_TryGetValue(IDataConstant constant);
    private void CachedValues_Set(IDataConstant constant, object value);
    private sealed virtual override T JetBrains.Application.DataContext.IDataContext.GetData(DataConstant`1<T> dataConstant);
    private sealed virtual override bool JetBrains.Application.DataContext.IDataContext.get_IsEmpty();
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message);
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message, object arg);
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message, object arg1, object arg2);
    [StringFormatMethodAttribute("message")]
private static void Trace(string instanceid, IDataConstant dc, string message, object arg1, object arg2, object arg3);
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__19_1();
}
public class JetBrains.Application.DataContext.DataContextCopier : object {
    private List`1<Func`2<IDataContext, IDataRule>> myCopierList;
    public static Func`3<Lifetime, DataContexts, IDataContext> GetCopier(IDataContext context);
    public void AddConstantToCopy(DataConstant`1<TValue> constant);
    private Func`3<Lifetime, DataContexts, IDataContext> GetCopier(IDataContext context);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.DataContext.DataContexts : object {
    private FindDataRules myFindDataRules;
    private IShellLocks myLocks;
    [NotNullAttribute]
private ConcurrentDictionary`2<IDataConstant, DataRuleStorageRecord[]> myDataRulesSorted;
    private LockObject myDataRulesSortedWriterLock;
    private IDataContext myEmptyDataContext;
    private DataContextValidator myDataContextValidator;
    private ulong myDataRuleGeneration;
    [NotNullAttribute]
public FindDataRules FindDataRules { get; }
    [NotNullAttribute]
public IDataContext Empty { get; }
    public DataContexts(Lifetime lifetime, FindDataRules findDataRules, IShellLocks locks);
    public void RegisterDataRule(Lifetime lifetime, string name, DataConstant`1<TValue> constant, Func`2<IDataContext, TValue> FRule);
    public void RegisterDataRule(Lifetime lifetime, IDataRule rule);
    public void RegisterDataValidator(Lifetime lifetime, DataConstant`1<TValue> dataConstant, Func`3<DataContextState, TValue, bool> validator);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateOnActiveControl(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateOnSelection(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateOnApplicationWideState(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateWithDataRules(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateWithoutDataRules(Lifetime lifetime, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateAtScreenPoint(Lifetime lifetime, JetPhysicalPoint ptScreen, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CreateOnControl(Lifetime lifetime, ControlWrapper controlWrapper, IEnumerable`1<IDataRule> datarulesAdditional);
    [NotNullAttribute]
[GuardAttribute("1")]
public IDataContext CloneWithAdditionalDataRules(Lifetime lifetime, IDataContext dataContext, IEnumerable`1<IDataRule> datarulesAdditional);
    public FindDataRules get_FindDataRules();
    public IDataContext get_Empty();
}
public class JetBrains.Application.DataContext.DataContextState : object {
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    [CompilerGeneratedAttribute]
private bool <ReadLockIsHeldAtCreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteLockTimestampAtCreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteLockTimestampAtLifetimeTermination>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteLockTimestampAtIgnoreMoment>k__BackingField;
    public bool ReadLockIsHeldAtCreationTime { get; }
    public int WriteLockTimestampAtCreationTime { get; }
    public int WriteLockTimestampAtLifetimeTermination { get; private set; }
    public int WriteLockTimestampAtIgnoreMoment { get; private set; }
    public int WriteLockTimestamp { get; }
    public bool IsLifetimeActive { get; }
    public DataContextState(Lifetime lifetime, IShellLocks locks);
    [CompilerGeneratedAttribute]
public bool get_ReadLockIsHeldAtCreationTime();
    [CompilerGeneratedAttribute]
public int get_WriteLockTimestampAtCreationTime();
    [CompilerGeneratedAttribute]
public int get_WriteLockTimestampAtLifetimeTermination();
    [CompilerGeneratedAttribute]
private void set_WriteLockTimestampAtLifetimeTermination(int value);
    [CompilerGeneratedAttribute]
public int get_WriteLockTimestampAtIgnoreMoment();
    [CompilerGeneratedAttribute]
private void set_WriteLockTimestampAtIgnoreMoment(int value);
    public int get_WriteLockTimestamp();
    public bool get_IsLifetimeActive();
    public bool CanGetData();
    public bool CanProlongate(Lifetime prolongationLifetime);
    private static int GetWriteLockTimestamp(IShellLocks locks);
    public void IgnoreWriteLocks();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.DataContext.DataContextValidator : object {
    private OneToListMap`2<Type, Func`3<DataContextState, object, bool>> myValidators;
    public void RegisterValidator(Lifetime lifetime, Func`3<DataContextState, T, bool> validator);
    [ConditionalAttribute("JET_MODE_ASSERT")]
public void AssertDataIsValid(DataContextState state, IDataConstant constant, object value, IDataRule dataRule);
}
public class JetBrains.Application.DataContext.DataRule`1 : object {
    private DataConstant`1<TValue> myDataConstant;
    [CanBeNullAttribute]
private TValue myValue;
    [CanBeNullAttribute]
private Func`2<IDataContext, TValue> myFTryEvaluate;
    [CanBeNullAttribute]
private Func`2<IDataContext, Tuple`2<TValue, bool>> myFTryEvaluateOrMissingValue;
    protected double myPriority;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    private IDataConstant JetBrains.Application.DataContext.IDataRule.OutputType { get; }
    private double JetBrains.Application.DataContext.IDataRule.Priority { get; }
    public DataRule`1(string name, DataConstant`1<TValue> dataconstant, TValue value);
    public DataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
    public DataRule`1(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, Tuple`2<TValue, bool>> FTryEvaluateOrMissingValue);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    private sealed virtual override IDataConstant JetBrains.Application.DataContext.IDataRule.get_OutputType();
    private sealed virtual override double JetBrains.Application.DataContext.IDataRule.get_Priority();
    private sealed virtual override object JetBrains.Application.DataContext.IDataRule.Evaluate(IDataContext context);
}
public static class JetBrains.Application.DataContext.DataRulePriorityClasses : object {
    public static double Assert;
    public static double AboveDefault;
    public static double Default;
    public static double BelowDefault;
    public static double Ambient;
    public static double Desperate;
}
[ExtensionAttribute]
public static class JetBrains.Application.DataContext.DataRules : object {
    [NotNullAttribute]
[PureAttribute]
public static IList`1<IDataRule> AddRule(string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
    [NotNullAttribute]
[PureAttribute]
public static IList`1<IDataRule> AddRule(string name, DataConstant`1<TValue> dataconstant, TValue value);
    [ExtensionAttribute]
[NotNullAttribute]
public static IList`1<IDataRule> AddRule(IList`1<IDataRule> thіs, string name, DataConstant`1<TValue> dataconstant, Func`2<IDataContext, TValue> FTryEvaluate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IList`1<IDataRule> AddRule(IList`1<IDataRule> thіs, string name, DataConstant`1<TValue> dataconstant, TValue value);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.DataContext.IFindDataRules")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.DataContext.ExportFindDataRulesAttribute : ShellComponentAttribute {
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    public double Priority { get; public set; }
    public ExportFindDataRulesAttribute(Instantiation instantiation);
    [CompilerGeneratedAttribute]
public sealed virtual double get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(double value);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.DataContext.FindDataRules : object {
    [CompilerGeneratedAttribute]
private IOrderedImmutableList`2<IFindDataRules, ExportFindDataRulesAttribute> <finders>P;
    public FindDataRules(IOrderedImmutableList`2<IFindDataRules, ExportFindDataRulesAttribute> finders);
    public IEnumerable`1<IDataRule> FindActiveDataRules();
    public IEnumerable`1<IDataRule> FindDataRulesAtPoint(JetPhysicalPoint ptScreen);
    public IEnumerable`1<IDataRule> FindDataRulesInControl(ControlWrapper controlWrapper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.DataContext.GetDataRulesAutomationWrapper : NestedAutomationWrapper {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<IDataRule> Rules;
    public GetDataRulesAutomationWrapper(IList`1<IDataRule> rules);
    public GetDataRulesAutomationWrapper(IAutomation content, IList`1<IDataRule> rules);
    public GetDataRulesAutomationWrapper(IProperty`1<IAutomation> contentLive, IList`1<IDataRule> rules);
}
public interface JetBrains.Application.DataContext.IDataConstant {
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public Type Type { get; }
    public abstract virtual string get_Id();
    public abstract virtual Type get_Type();
}
public interface JetBrains.Application.DataContext.IDataContext {
    public DataContextState State { get; }
    public bool IsEmpty { get; }
    public abstract virtual DataContextState get_State();
    public abstract virtual bool get_IsEmpty();
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
public abstract virtual T GetData(DataConstant`1<T> dataConstant);
    [NotNullAttribute]
public abstract virtual IDataContext Prolongate(Lifetime lifetime);
}
public interface JetBrains.Application.DataContext.IDataContextCopierProvider {
    public abstract virtual void ProvideConstantsToCopy(DataContextCopier copier);
}
[ExtensionAttribute]
public static class JetBrains.Application.DataContext.IDataContextEx : object {
    private static IDictionary`2<IDataConstant, PropertyId> myCache;
    private static IDataContextEx();
    [ExtensionAttribute]
public static bool CheckAllNotNull(IDataContext thіs, IDataConstant[] dataConstants);
    [ExtensionAttribute]
public static bool CheckAllNotNull(IDataContext thіs, IDataConstant dataConstant);
    [ExtensionAttribute]
public static bool CheckAnyNotNull(IDataContext thіs, IDataConstant[] dataConstants);
    [ExtensionAttribute]
[NotNullAttribute]
public static PropertyBag ToPropertyBag(IDataContext context, IDataConstant[] constants);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static object GetRawData(IDataContext context, IDataConstant constant);
    [ExtensionAttribute]
[NotNullAttribute]
public static PropertyId ToPropertyId(IDataConstant constant);
    [ExtensionAttribute]
[NotNullAttribute]
public static PropertyId`1<T> ToPropertyId(DataConstant`1<T> constant);
}
public interface JetBrains.Application.DataContext.IDataContextProvider {
    public IDataContext DataContext { get; }
    public abstract virtual IDataContext get_DataContext();
}
public interface JetBrains.Application.DataContext.IDataRule {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IDataConstant OutputType { get; }
    public double Priority { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDataConstant get_OutputType();
    public abstract virtual double get_Priority();
    public abstract virtual object Evaluate(IDataContext context);
}
public interface JetBrains.Application.DataContext.IDataRuleProvider {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> GetDataRules();
}
public interface JetBrains.Application.DataContext.IFindDataRules {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> FindActiveDataRules();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> FindDataRulesAtPoint(JetPhysicalPoint ptScreen);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IDataRule> FindDataRulesInControl(ControlWrapper controlWrapper);
}
[ShellComponentAttribute("9")]
public class JetBrains.Application.DataContext.ShellDataRules : object {
    public ShellDataRules(Lifetime lifetime, DataContexts contexts, IComponentContainer container);
}
[ObsoleteAttribute("There won't be any Defines in the Shared Shell, should stop using these at any places now.")]
public class JetBrains.Application.Defines : object {
    public static bool IsModeAssert;
    [NotNullAttribute]
public static string CompanyName;
    [NotNullAttribute]
public static DateTime DateTimeForSubscriptionCheck;
    [NotNullAttribute]
public static DateTime DateTimeProductBirth;
    [NotNullAttribute]
public static Guid GuidProductUpgradeCodeInstallationCenter;
    [NotNullAttribute]
public static Guid GuidVsPackageCoClass;
    [NotNullAttribute]
public static bool IsModeAnnotateCallStacks;
    [NotNullAttribute]
public static bool IsModeStatistics;
    [NotNullAttribute]
public static bool IsMsiIncludePdb;
    [NotNullAttribute]
public static bool IsMsiIncludeXmlDoc;
    [NotNullAttribute]
public static bool IsMsiProductBinariesStrongName;
    [NotNullAttribute]
public static bool IsReleaseLicenseAgreement;
    [NotNullAttribute]
public static bool IsReSharper;
    [NotNullAttribute]
public static bool IsReSharperMisbehavesEnabled;
    [NotNullAttribute]
public static string LicenseProductFamily;
    [NotNullAttribute]
public static string LicenseSeed;
    [NotNullAttribute]
public static string LicenseSupportIdentifier;
    [NotNullAttribute]
public static string ModeAssertName;
    [NotNullAttribute]
public static string ModeStatisticsName;
    [NotNullAttribute]
public static string MsiSupportedVsVersionsList;
    [NotNullAttribute]
public static string NetfxRequiredVersionBuild;
    [NotNullAttribute]
public static string NetfxRequiredVersionMajor;
    [NotNullAttribute]
public static string NetfxRequiredVersionMinor;
    [NotNullAttribute]
public static string NetfxRequiredVersionRevision;
    [NotNullAttribute]
public static int NumLicenseAppVersion;
    [NotNullAttribute]
public static int NumLicenseFeedbackRequestDays;
    [NotNullAttribute]
public static int NumLicenseFreeTrialDays;
    [NotNullAttribute]
public static int NumLicenseLeftDaysNotification;
    [NotNullAttribute]
public static int NumTimeBombDays;
    [NotNullAttribute]
public static string NUnitCpu;
    [NotNullAttribute]
public static string NUnitInParallel;
    [NotNullAttribute]
public static string NUnitRuntime;
    [NotNullAttribute]
public static string NUnitVersion;
    [NotNullAttribute]
public static string PragmaOnce_Platform_Defines_Targets;
    [NotNullAttribute]
public static string PragmaOnce_Product_Defines_Targets;
    [NotNullAttribute]
public static string ProductDisplayName;
    [NotNullAttribute]
public static string ProductFullName;
    [NotNullAttribute]
public static string ProductName;
    [NotNullAttribute]
public static string ProductStandaloneApplicationCaps;
    [NotNullAttribute]
public static string ProductUpgradeCodeLegacyVS0800;
    [NotNullAttribute]
public static string ProductUpgradeCodeLegacyVS0900;
    [NotNullAttribute]
public static string ProductUpgradeCodeLegacyVS1000;
    [NotNullAttribute]
public static string ProductVisualStudioIntegrationCaps;
    [NotNullAttribute]
public static Uri UriBuy;
    [NotNullAttribute]
public static Uri UriCompany;
    [NotNullAttribute]
public static Uri UriEvaluate;
    [NotNullAttribute]
public static Uri UriProduct;
    [NotNullAttribute]
public static Uri UriProductCommunityNewsgroups;
    [NotNullAttribute]
public static Uri UriProductHelp;
    [NotNullAttribute]
public static Uri UriProductSupportEmail;
    [NotNullAttribute]
public static Uri UriProductUninstallFeedback;
    private static Defines();
}
[DataContractAttribute]
[JsonObjectAttribute]
public abstract class JetBrains.Application.Deploy.BaseDeployItem : object {
    [DataMemberAttribute]
public string File;
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
public abstract class JetBrains.Application.Deploy.BaseItemPushToArtifact : BasePushToArtifact {
    public DeployItemFlags Flags;
    [CanBeNullAttribute]
public RelativePath TargetFileOrDir;
    protected BaseItemPushToArtifact(ImmutableFileItem file, DeployItemFlags flags, RelativePath targetFileOrDir);
    protected BaseItemPushToArtifact(ImmutableFileItem file, RelativePath targetFileOrDir);
    protected BaseItemPushToArtifact(ImmutableFileItem file);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
public abstract class JetBrains.Application.Deploy.BasePushToArtifact : object {
    [NotNullAttribute]
public ImmutableFileItem File;
    protected BasePushToArtifact(ImmutableFileItem file);
    public virtual string ToString();
}
[MemberwiseSerializableAttribute]
public abstract class JetBrains.Application.Deploy.BasePushTorGalleryArtifact : BasePushToArtifact {
    protected BasePushTorGalleryArtifact(ImmutableFileItem file);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.DeployDigest : BuildOutputFileArtifact {
    public DeployDigest(ImmutableFileItem file);
    public DeployDigest(IStructuredStorage sstg);
    [BuildStepAttribute]
public static IEnumerable`1<InstallersPortablesZipsDeployableFile> ToDeployable(DeployDigest[] thisFiles);
    public virtual string ToString();
}
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Deploy.DeployFileItem : BaseDeployItem {
    [DataMemberAttribute]
public DeployItemFlags Flag;
    [CanBeNullAttribute]
[DataMemberAttribute]
public string TargetFileOrDir;
    public virtual string ToString();
}
[DataContractAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum JetBrains.Application.Deploy.DeployItemFlags : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DeployItemFlags Default;
    [EnumMemberAttribute]
public static DeployItemFlags Overwrite;
    [EnumMemberAttribute]
public static DeployItemFlags Unzip;
}
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Deploy.DeployScript : object {
    public static string DeployJson;
    [CanBeNullAttribute]
[DataMemberAttribute]
public String[] ListedPackageIds;
    [CanBeNullAttribute]
[DataMemberAttribute]
public String[] NuGetGallery;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeployFileItem[] ReSharperCdn;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeployFileItem[] RiderCdn;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeployFileItem[] NintendoPluginCdn;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeployFileItem[] PlayStationPluginCdn;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeployFileItem[] XboxPluginCdn;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeployFileItem[] IntelliJBucket;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeployFileItem[] ThirdPartyLibrariesBucket;
    [CanBeNullAttribute]
[DataMemberAttribute]
public DeploySnapItem[] SnapStore;
    [CanBeNullAttribute]
[DataMemberAttribute]
public String[] SymbolServer;
}
[BuildArtifactAttribute]
public class JetBrains.Application.Deploy.DeployScriptFile : BuildOutputFileArtifact {
    public DeployScriptFile(ImmutableFileItem file);
    public DeployScriptFile(IStructuredStorage sstg);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ToDeployable(DeployScriptFile thisFile);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.Deploy.DeployScriptTasks : object {
    [BuildStepAttribute]
public static Tuple`2<DeployScriptFile, IEnumerable`1<DeployDigest>> BuildDeployJson(ILogger logger, DeployedFilesNamingScheme naming, PushToListedPackageIdArtifact[] listedPackagesIds, PushToReSharperCdnArtifact[] reSharperCdn, PushToRiderCdnArtifact[] riderCdn, PushToXboxPluginCdnArtifact[] xboxPluginCdn, PushToNintendoPluginCdnArtifact[] nintendoPluginCdn, PushToPlayStationPluginArtifact[] playStationPluginCdn, PushToNugetGalleryArtifact[] nuGetGallery, PushToSnapStoreArtifact[] snapStore, PushToSymbolServerArtifact[] symbolServer, PushToIntelliJBucketArtifact[] intelliJBucket, PushToThirdPartyLibrariesBucketArtifact[] thirdPartyLibrariesBucket);
    public static Tuple`2<DeployScriptFile, IEnumerable`1<DeployDigest>> CreateDeployScriptFile(ILogger logger, DeployedFilesNamingScheme naming, PushToListedPackageIdArtifact[] listedPackageIds, PushToReSharperCdnArtifact[] reSharperCdn, PushToRiderCdnArtifact[] riderCdn, PushToNintendoPluginCdnArtifact[] nintendoPluginCdn, PushToPlayStationPluginArtifact[] playStationPluginCdn, PushToXboxPluginCdnArtifact[] xboxPluginCdn, PushToNugetGalleryArtifact[] nuGetGallery, PushToSnapStoreArtifact[] snapStore, PushToSymbolServerArtifact[] symbolServer, PushToIntelliJBucketArtifact[] intelliJBucket, PushToThirdPartyLibrariesBucketArtifact[] thirdPartyLibrariesBucket);
    [CompilerGeneratedAttribute]
internal static DeployFileItem <CreateDeployScriptFile>g__CreateFileItem|1_0(BaseItemPushToArtifact artifact);
    [CompilerGeneratedAttribute]
internal static DeploySnapItem <CreateDeployScriptFile>g__CreateSnapItem|1_1(PushToSnapStoreArtifact artifact);
    [IteratorStateMachineAttribute("JetBrains.Application.Deploy.DeployScriptTasks/<<CreateDeployScriptFile>g__GutZip|1_2>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<ImmutableFileItem> <CreateDeployScriptFile>g__GutZip|1_2(ImmutableFileItem zipFile, RelativePath targetFileOrDir);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<ImmutableFileItem> <CreateDeployScriptFile>g__GutPermanentArtifacts|1_3(BaseItemPushToArtifact item);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<ImmutableFileItem> <CreateDeployScriptFile>g__GutOverwritableArtifacts|1_4(BaseItemPushToArtifact item);
}
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Deploy.DeploySnapItem : BaseDeployItem {
    [DataMemberAttribute]
public string SnapName;
    [CanBeNullAttribute]
[DataMemberAttribute]
public KeyValuePair`2[] ReleaseChannels;
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.Deploy.DeployUtil : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ImmutableFileItem CreateDeployDigest(ImmutableFileItem item);
}
public static class JetBrains.Application.Deploy.Dmg.DeployScriptTasks : object {
    [NullableContextAttribute("1")]
[BuildStepAttribute]
public static DmgsDeployableFile[] BuildDeployJsonForDmgs(DmgFileArtifact[] dmgFiles, DeployedFilesNamingScheme naming, BuildChainFlavor flavor, ProductsToDeploy productsToDeploy, ILogger logger);
}
public class JetBrains.Application.Deploy.MavenArtifactCoordinates : object {
    [NotNullAttribute]
public string GroupId;
    [NotNullAttribute]
public string ArtifactId;
    [NotNullAttribute]
public string Version;
    [NotNullAttribute]
public string Classifier;
    [NotNullAttribute]
public string Packaging;
    public RelativePath FilePath { get; }
    public MavenArtifactCoordinates(string groupId, string artifactId, string version, string classifier, string packaging);
    public RelativePath get_FilePath();
    public virtual string ToString();
    public MavenArtifactCoordinates WithPackaging(string packaging);
    private bool Equals(MavenArtifactCoordinates other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.Deploy.MavenPomBuilder : object {
    [NotNullAttribute]
public MavenArtifactCoordinates Coordinates;
    public MavenPomBuilder(MavenArtifactCoordinates coordinates);
    public string GetPomContent();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToIntelliJBucketArtifact : BaseItemPushToArtifact {
    public PushToIntelliJBucketArtifact(ImmutableFileItem file, MavenArtifactCoordinates coordinates);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToListedPackageIdArtifact : object {
    public string PackageId;
    public PushToListedPackageIdArtifact(string packageId);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToNintendoPluginCdnArtifact : BaseItemPushToArtifact {
    public PushToNintendoPluginCdnArtifact(ImmutableFileItem file);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToNugetGalleryArtifact : BasePushTorGalleryArtifact {
    public PushToNugetGalleryArtifact(ImmutableFileItem file);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToPlayStationPluginArtifact : BaseItemPushToArtifact {
    public PushToPlayStationPluginArtifact(ImmutableFileItem file);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToReSharperCdnArtifact : BaseItemPushToArtifact {
    private PushToReSharperCdnArtifact(ImmutableFileItem file, DeployItemFlags flags, RelativePath targetFileOrDir);
    [NotNullAttribute]
public static PushToReSharperCdnArtifact CreateOverwritableFile(ImmutableFileItem file);
    [NotNullAttribute]
public static PushToReSharperCdnArtifact CreatePermanentFile(DeployedFilesNamingScheme naming, ImmutableFileItem file, RelativePath subDir);
    [NotNullAttribute]
public static PushToReSharperCdnArtifact CreatePermanentFileInRoot(ImmutableFileItem file);
    [NotNullAttribute]
public static PushToReSharperCdnArtifact CreateArchiveToUnzip(DeployedFilesNamingScheme naming, ImmutableFileItem file, RelativePath subDir);
    [NotNullAttribute]
public static RelativePath GetDeployDir(DeployedFilesNamingScheme naming, RelativePath sudDir);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToRiderCdnArtifact : BaseItemPushToArtifact {
    private PushToRiderCdnArtifact(ImmutableFileItem file, RelativePath targetFileOrDir);
    [NotNullAttribute]
public static PushToRiderCdnArtifact CreatePermanentFile(ImmutableFileItem file, RelativePath subDir);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToSnapStoreArtifact : BasePushToArtifact {
    public string SnapName;
    [CanBeNullAttribute]
public KeyValuePair`2[] ReleaseChannels;
    public PushToSnapStoreArtifact(ImmutableFileItem file, string snapName, KeyValuePair`2[] releaseChannels);
    public virtual string ToString();
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToSymbolServerArtifact : BasePushToArtifact {
    public PushToSymbolServerArtifact(ImmutableFileItem file);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToThirdPartyLibrariesBucketArtifact : BaseItemPushToArtifact {
    public PushToThirdPartyLibrariesBucketArtifact(ImmutableFileItem file);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Deploy.PushToXboxPluginCdnArtifact : BaseItemPushToArtifact {
    public PushToXboxPluginCdnArtifact(ImmutableFileItem file);
}
public class JetBrains.Application.Diagnostics.ApplicationPerformanceException : ApplicationException {
    public ApplicationPerformanceException(string message);
}
[ActionAttribute("DumpComponentContainersStatisticsAction", "JetBrains.Application.Resources.Strings", "DumpComponentContainersStatisticsActionText")]
public class JetBrains.Application.Diagnostics.DumpComponentContainersStatisticsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public static class JetBrains.Application.Diagnostics.Dumper : object {
    public static void DumpToFile(Action`1<StreamWriter> writer, ICommonFileDialogs filedlg);
    public static void DumpToNotepad(Action`1<StreamWriter> writer, string extensionWithDot, string prefix, Encoding encoding);
    [AsyncStateMachineAttribute("JetBrains.Application.Diagnostics.Dumper/<DumpToNotepadAsync>d__2")]
public static Task DumpToNotepadAsync(Func`2<StreamWriter, Task> writer, string extensionWithDot);
    private static void OpenFileInNotepad(FileSystemPath path);
    public static string GetText(Action`1<StreamWriter> action);
}
[ActionAttribute("DumpComponentContainersCtorStepsToJsonAction", "Dump Startup Tasks to Json")]
public class JetBrains.Application.Diagnostics.DumpStartupTasksToJsonAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public static void DumpToJson(StreamWriter writer, IComponentContainer container);
}
[ActionAttribute("DumpUnwantedContainerDependenciesAction", "JetBrains.Application.Resources.Strings", "DumpUnwantedComponentContainersDependenciesActionText")]
public class JetBrains.Application.Diagnostics.DumpUnwantedContainerDependenciesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    [AsyncStateMachineAttribute("JetBrains.Application.Diagnostics.DumpUnwantedContainerDependenciesAction/<DoAsync>d__2")]
private static Task DoAsync(IDataContext context);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "FocusMonitorActionText")]
public class JetBrains.Application.Diagnostics.FocusMonitorAction : object {
    [NullableAttribute("1")]
public DataConstant`1<FocusMonitorActionFlags> Flags;
    [NullableContextAttribute("1")]
private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    [NullableContextAttribute("1")]
private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.Diagnostics.FocusMonitorAutomation : AAutomation {
    public static string FocusMonitorViewName;
    private static int LogLengthLimit;
    private ListEvents`1<FocusRecord> myLogOnMainThread;
    [CanBeNullAttribute]
private Func`2<FocusRecord, bool> myIsMonitorFocused;
    private int myThisPid;
    public SignalCommand ClearCommand;
    public IProperty`1<bool> IsLiveLoggingEnabled;
    public IListEvents`1<LogEntryBase> LogEntries;
    public IProperty`1<LogEntryBase> SelectedLogEntry;
    public IProperty`1<LogEntryBase> LastLogEntry;
    public Orientation DetailsOrientation;
    public FocusMonitorAutomation(Lifetime lifetime, IThreading threading, TrackFocus trackFocus, int thisPid, Orientation detailsOrientation, Func`2<FocusRecord, bool> isMonitorFocused);
    private static FocusMonitorAutomation();
    public bool IsExternalProcess(int pid);
    public WindowRecordTooltipAutomation GetTooltip(WindowRecord wndrec);
    private void Init_LogEntries(Lifetime lifetime, TrackFocus trackFocus, IThreading threading);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public interface JetBrains.Application.Diagnostics.IContextDumper {
    public abstract virtual void Dump(IDataContext context, Action`1<StreamWriter> dump, string prefix, string extensionWithDot, Encoding encoding);
}
public interface JetBrains.Application.Diagnostics.IStartupTasksDumper {
    public abstract virtual IEnumerable`1<EventData> Dump(IComponentContainer container);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Diagnostics.NotepadContextDumper : object {
    public virtual void Dump(IDataContext context, Action`1<StreamWriter> dump, string prefix, string extensionWithDot, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.Application.Diagnostics.ReentrancyGuardFreezeMonitorCore : object {
    public static int DefaultActionExecutionThresholdMs;
    private IThreading myThreading;
    private ILogger myLogger;
    private Reasons`1<string> myEnableReasons;
    private HashSet`1<string> myActionsToIgnore;
    public Property`1<TimeSpan> ActionExecutionThreshold;
    public Property`1<TimeSpan> CheckPumpingInterval;
    public IEnumerable`1<string> ActionsToIgnore { get; public set; }
    protected ReentrancyGuardFreezeMonitorCore(Lifetime lifetime, IThreading threading, ILogger logger);
    public IEnumerable`1<string> get_ActionsToIgnore();
    public void set_ActionsToIgnore(IEnumerable`1<string> value);
    public void EnableMonitoring(Lifetime lifetime, string reason);
    protected virtual void WhenEnabled(Lifetime lifetime);
    protected virtual bool ShouldIgnoreAction(string name);
    protected virtual Task`1<object> CollectStackTraces(Lifetime lifetime);
    protected virtual void ReportFreeze(FreezeInfo info);
    [IteratorStateMachineAttribute("JetBrains.Application.Diagnostics.ReentrancyGuardFreezeMonitorCore/<GetWellKnownActionsToIgnore>d__16")]
protected virtual IEnumerable`1<string> GetWellKnownActionsToIgnore();
    [NullableContextAttribute("2")]
public static Nullable`1<bool> IsEnabledByCommandLine(IProductCommandLine cmdline);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "ReentrancyGuardFreezeMonitorSettingsDescription")]
public class JetBrains.Application.Diagnostics.ReentrancyGuardFreezeMonitorSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "EnablePerformanceAssertionsOnReentrancyGuardActionExecutionSettingDescription")]
public bool AssertReentrancyGuardFreezes;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "CommaSeparatedListOfGuardedActionNames_Text")]
public string GuardedActionsToIgnore;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IfGuardedActionExecutionTimeExceeds_Text")]
public int GuardedActionExecutionThresholdMs;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "AMinimalPeriodBetweenCallsToClrStack_Text")]
public int ClrStackThrottlingMs;
}
[ShellComponentAttribute("20")]
internal class JetBrains.Application.Diagnostics.StartupTasksToJsonDumperComponent : object {
    public StartupTasksToJsonDumperComponent(Lifetime lifetime, IProductCommandLine commandLine, IComponentContainer container, IContainerComposingProgress composingProgress);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.DiskCleanup.AutomaticDiskCleanup : DiskCleanupComponent {
    private ISettingsStore mySettingsStore;
    private DateTime myScheduledTime;
    private SequentialLifetimes myAutomaticCleanupSequentialLifetimes;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAllowed>k__BackingField;
    public IProperty`1<bool> IsAllowed { get; }
    public AutomaticDiskCleanup(Lifetime lifetime, IThreading threading, ILogger logger, ISettingsStore settingsStore);
    private void OnAutomaticCleanupCompleted();
    private void TryScheduleCleanupAt(DateTime scheduleTime, string reason);
    private void UpdateFromSettings(Lifetime lifetime, bool isFirstStart);
    private void PerformAutomaticCleanup(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsAllowed();
    [CompilerGeneratedAttribute]
private void <PerformAutomaticCleanup>b__7_2(Task`1<DiskCleanupResult> task);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.DiskCleanup.CleanupInfo : ValueType {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private CleanupPolicy <CleanupPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAccessTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <EvaluationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<PathErrorInfo> <Errors>k__BackingField;
    public static CleanupInfo Invalid;
    public FileSystemPath Path { get; }
    public CleanupPolicy CleanupPolicy { get; }
    public DateTime CreationTimeUtc { get; }
    public DateTime LastAccessTimeUtc { get; }
    public DateTime LastWriteTimeUtc { get; }
    public TimeSpan EvaluationTime { get; }
    public long Size { get; }
    public IReadOnlyCollection`1<PathErrorInfo> Errors { get; }
    public CleanupInfo(FileSystemPath path, CleanupPolicy cleanupPolicy, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, long size, TimeSpan evaluationTime, IReadOnlyCollection`1<PathErrorInfo> errors);
    public CleanupInfo(FileSystemPath path, CleanupPolicy cleanupPolicy, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, long size, TimeSpan evaluationTime);
    private static CleanupInfo();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public CleanupPolicy get_CleanupPolicy();
    [CompilerGeneratedAttribute]
public DateTime get_CreationTimeUtc();
    [CompilerGeneratedAttribute]
public DateTime get_LastAccessTimeUtc();
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTimeUtc();
    [CompilerGeneratedAttribute]
public TimeSpan get_EvaluationTime();
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<PathErrorInfo> get_Errors();
    public static CleanupInfo CreateError(FileSystemPath path, PathErrorInfo[] errors);
    public virtual string ToString();
}
public enum JetBrains.Application.DiskCleanup.CleanupPolicy : Enum {
    public int value__;
    public static CleanupPolicy REMOVE_NESTED_FILES_AND_FOLDERS;
    public static CleanupPolicy REMOVE_ALL;
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.DiskCleanup.DiskCleanupComponent : object {
    protected IThreading myThreading;
    protected ILogger myLogger;
    public DiskCleanupComponent(Lifetime lifetime, IThreading threading, ILogger logger);
    public sealed virtual Task`1<ICollection`1<CleanupInfo>> CollectPathsToCleanAsync(Lifetime lifetime, string pathPattern);
    public sealed virtual Task`1<DiskCleanupResult> PerformCleanup(Lifetime lifetime, IList`1<Pair`2<string, TimeSpan>> pathPatterns);
    [IteratorStateMachineAttribute("JetBrains.Application.DiskCleanup.DiskCleanupComponent/<GetPathsToFind>d__5")]
private static IEnumerable`1<Tuple`3<string, string, TimeSpan>> GetPathsToFind(IContextBoundSettingsStore boundSettingsStore);
    private static DateTime MaxTime(DateTime d1, DateTime d2);
    private static CleanupInfo CalculateCleanupInfo(Lifetime lifetime, FileSystemPath fileOrFolderPath, CleanupPolicy cleanupPolicy);
}
[ExtensionAttribute]
public static class JetBrains.Application.DiskCleanup.DiskCleanupEx : object {
    public static string CurrentlyUsedLockFileName;
    [ExtensionAttribute]
public static IList`1<Pair`2<string, TimeSpan>> ReadDiskCleanupPathPatterns(IContextBoundSettingsStore settings, bool ignoreAge);
}
public class JetBrains.Application.DiskCleanup.DiskCleanupResult : object {
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CleanedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Pair`2<FileSystemPath, string>> <Errors>k__BackingField;
    public DateTime StartTimeUtc { get; }
    public DateTime EndTimeUtc { get; private set; }
    public long CleanedSize { get; private set; }
    public IList`1<Pair`2<FileSystemPath, string>> Errors { get; }
    [CompilerGeneratedAttribute]
public DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
public DateTime get_EndTimeUtc();
    [CompilerGeneratedAttribute]
private void set_EndTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public long get_CleanedSize();
    [CompilerGeneratedAttribute]
private void set_CleanedSize(long value);
    [CompilerGeneratedAttribute]
public IList`1<Pair`2<FileSystemPath, string>> get_Errors();
    public void AddResult(CleanupInfo info, Exception e);
    public DiskCleanupResult Completed();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "DiskCleanupSettingsSettingDescription")]
public class JetBrains.Application.DiskCleanup.DiskCleanupSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherAutomaticCleanupAllowedSettingDescription")]
public bool IsAutomaticCleanupAllowed;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhenCleanupTaskIsQueuedOfApplicationStartSettingDescription")]
public TimeSpan StartTimeout;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "TimeoutBetweenCleanupRunsSettingDescription")]
public TimeSpan BetweenRunsTimeout;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "LastStartTimeSettingDescription")]
public DateTime LastRunTime;
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "PathPatternsToCleanSettingDescription")]
public IIndexedEntry`2<string, PathCleanupEntry> PathsToClean;
}
public interface JetBrains.Application.DiskCleanup.IAutomaticDiskCleanup {
    public IProperty`1<bool> IsAllowed { get; }
    public abstract virtual IProperty`1<bool> get_IsAllowed();
}
public interface JetBrains.Application.DiskCleanup.IDiskCleanup {
    public abstract virtual Task`1<ICollection`1<CleanupInfo>> CollectPathsToCleanAsync(Lifetime lifetime, string pathPattern);
    public abstract virtual Task`1<DiskCleanupResult> PerformCleanup(Lifetime lifetime, IList`1<Pair`2<string, TimeSpan>> pathPatterns);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.DiskCleanup.PathCleanupEntry>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.DiskCleanup.PathCleanupEntry>")]
public class JetBrains.Application.DiskCleanup.PathCleanupEntry : object {
    [NotNullAttribute]
public string Description;
    public TimeSpan ClearAfterTimeout;
    public PathCleanupEntry(string description, TimeSpan clearAfterTimeout);
    protected bool Equals(PathCleanupEntry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class JetBrains.Application.DiskCleanup.PathErrorInfo : ValueType {
    [CompilerGeneratedAttribute]
private FileSystemPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public FileSystemPath Path { get; }
    public Exception Exception { get; }
    public PathErrorInfo(FileSystemPath path, Exception exception);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Path();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public static class JetBrains.Application.Env.Launcher : object {
    [NotNullAttribute]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethod;
    [NotNullAttribute]
[ObsoleteAttribute("Use ConsoleMainMethod.")]
public static AssemblyQualifiedTypeMemberName ConsoleMainMethodScattered;
    private static Launcher();
    [PublicAPIAttribute]
public static int ConsoleMain();
    [PublicAPIAttribute]
[ObsoleteAttribute("Use ConsoleMain.")]
public static int ConsoleMainScattered();
}
public class JetBrains.Application.Env.NativeComponentManagerProxyHostMixin : object {
    private static Boxed`1<NativeComponentManagerProxy> myPerProcessComponentManagerProxy;
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.Priority { get; }
    private bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.IsAvailable { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_Priority();
    private sealed virtual override bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_IsAvailable();
    private sealed virtual override ProductCanBeStartedVerdict JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.RunMainLoop(ComponentContainer containerEnv);
}
public static class JetBrains.Application.Environment.ActivateEx : object {
    public static StringSource IActivateNoArgs;
    public static StringSource IActivateDynamicNoArgs;
    private static ActivateEx();
}
public class JetBrains.Application.Environment.AdditionalDeployedPackages : object {
    [NotNullAttribute]
public static string EnvironmentVariableNamePrefix;
    private static ILogger Logger;
    public FrugalLocalList`1<AdHocPackage> AdditionalAdHocPackages;
    public FrugalLocalList`1<FileSystemPath> AdditionalFiles;
    public FrugalLocalList`1<FileSystemPath> AdditionalFolders;
    public FrugalLocalList`1<JetPackageIdentity> AdditionalPackageReferences;
    public AdditionalDeployedPackages(FrugalLocalList`1<FileSystemPath> folders, FrugalLocalList`1<FileSystemPath> files, FrugalLocalList`1<JetPackageIdentity> pkgrefs, FrugalLocalList`1<AdHocPackage> ahpkgs);
    public AdditionalDeployedPackages(FrugalLocalList`1& folders, FrugalLocalList`1& files, FrugalLocalList`1& pkgrefs, FrugalLocalList`1& ahpkgs);
    private static AdditionalDeployedPackages();
    public static AdditionalDeployedPackages Load(FileSystemPath pathAdditionals);
    [NotNullAttribute]
public static AdditionalDeployedPackages Parse(string text);
    public virtual string ToString();
    [CanBeNullAttribute]
public static FileSystemPath TryReadFromEnvironmentVariable();
    [NotNullAttribute]
private static AdditionalDeployedPackages ParseCore(XmlReader reader);
    private static AdHocPackage ParseCore_AdHocPackage(XmlReader reader);
    private static FormatException ParseCore_AdHocPackage_ThrowAttr(string sAttrName, XmlReader reader, Exception ex);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.AllAssemblies.AssemblyFolderLocator : object {
    public virtual FileSystemPath GetAssemblyPackageLocation(Assembly assembly);
}
public interface JetBrains.Application.Environment.AllAssemblies.IAssemblyFolderLocator {
    public abstract virtual FileSystemPath GetAssemblyPackageLocation(Assembly assembly);
}
public class JetBrains.Application.Environment.ApplicationCloseUpController : object {
    public ApplicationCloseUpController(Lifetime lifetime, ApplicationShutdownRequests shutdowner);
    public virtual bool CanClose();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Environment.ApplicationIdleEvent : object {
    [NotNullAttribute]
public ISimpleSignal Idle;
    public ApplicationIdleEvent(Lifetime lifetime, IThreading threading);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.ApplicationPackageLocallyInstalledEx : object {
    [ExtensionAttribute]
public static bool IsPlugin(IApplicationPackageLocallyInstalled applicationPackageLocallyInstalled);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.ApplicationPackages : object {
    private static Func`2<IEnumerable`1<ApplicationPackageArtifact>, Maps> myDelegateCreateMapping;
    private LocalLazy`2<Maps, IEnumerable`1<ApplicationPackageArtifact>> myMapAssemblyToPackage;
    public ApplicationPackages(IEnumerable`1<ApplicationPackageArtifact> apppkgs);
    private static ApplicationPackages();
    public ApplicationPackageArtifact FindPackageWithAssembly(Assembly assembly, OnError onerror);
    public ApplicationPackageArtifact FindPackageWithAssembly(AssemblyNameInfo name, OnError onerror);
    public ApplicationPackageArtifact FindPackageWithAssembly(StringSource simplename, OnError onerror);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.ApplicationPackagesLocallyInstalled : object {
    private IList`1<IApplicationPackageLocallyInstalled> myList;
    private ILogger myLogger;
    private IEnumerable`1<ApplicationPackageArtifact> myPackages;
    private IDeployedPackagesExpandLocationResolver myResolver;
    public ApplicationPackagesLocallyInstalled(IEnumerable`1<ApplicationPackageArtifact> packages, IDeployedPackagesExpandLocationResolver resolver, ILogger logger);
    [NotNullAttribute]
public static IDeployedPackagesExpandLocationResolver GetOrCreatePackageLocationResolver(SerializedValuesResolver serializedValuesResolver);
    private sealed virtual override IEnumerator`1<IApplicationPackageLocallyInstalled> System.Collections.Generic.IEnumerable<JetBrains.Application.BuildScript.Application.IApplicationPackageLocallyInstalled>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NotNullAttribute]
private IList`1<IApplicationPackageLocallyInstalled> GetOrCreateList();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.ApplicationShutdownRequests : object {
    [NotNullAttribute]
private ILogger myLogger;
    [CanBeNullAttribute]
private ApplicationCloseUpController myCloseUpController;
    [CanBeNullAttribute]
private IHostCommandLine myHostcmdl;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
protected IProperty`1<ProductCanBeStartedVerdict> myVerdict;
    [NotNullAttribute]
public ISimpleSignal ShutdownStarted;
    private double JetBrains.Application.Environment.IProductCanBeStarted.Priority { get; }
    public ApplicationShutdownRequests(Lifetime lifetime, IThreading threading, IHostCommandLine hostcmdl, ILogger logger);
    [GuardAttribute("-1")]
public void ShutdownRequested(ShutdownErrorStatus status);
    [GuardAttribute("-1")]
public void ShutdownRequested(ProductCanBeStartedVerdict verdict);
    private void ShutdownRequested(Action setVerdict);
    [GuardAttribute("-1")]
public void RestartShellRequested();
    private sealed virtual override IProperty`1<ProductCanBeStartedVerdict> JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted(Lifetime lifetime);
    private sealed virtual override double JetBrains.Application.Environment.IProductCanBeStarted.get_Priority();
    public virtual bool CanRestartShell();
    protected virtual void SetVerdict(ShutdownErrorStatus status);
    protected virtual void OnRestartHostProcess(bool isHighIntegrityLevel);
    private static bool OnRestartHostProcess_IsRuansVerb(bool isHighIntegrityLevel, ILogger logger);
    internal void RegisterCloseUpRequestHandler(Lifetime lifetime, ApplicationCloseUpController closeUpController);
    [CompilerGeneratedAttribute]
private void <RestartShellRequested>b__11_0();
}
public static class JetBrains.Application.Environment.ApplicationStartupTraceHelpers : object {
    public static void TraceCatalogSet(IPartCatalogSet catalogset, string catname, bool isDoingZones, ILogger logger);
    public static void TraceCatalogSetDiff(IPartCatalogSet catalogsetLarger, string catnameLarger, IPartCatalogSet catalogsetSmaller, string catnameSmaller, ICollection`1<ZonePart> zonesEnabled, ILogger logger);
    private static void TraceCatalogSetCold(IPartCatalogSet catalogset, string catname, bool isDoingZones, ILogger logger);
    private static void TraceCatalogSetDiffCold(IPartCatalogSet catalogsetLarger, string catnameLarger, IPartCatalogSet catalogsetSmaller, string catnameSmaller, ICollection`1<ZonePart> zonesEnabled, ILogger logger);
}
[CommandLineSwitchAttribute("Disable", "1", "")]
public class JetBrains.Application.Environment.CmdLineDisabledZone : object {
    public static string KeyName;
}
[CommandLineSwitchAttribute("Enable", "1", "")]
public class JetBrains.Application.Environment.CmdLineEnabledZone : object {
    public static string KeyName;
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.Components.AnyProductSettingsLocation : object {
    private HostInfo myHostInfo;
    public static BackSlashSeparatedRelativePath ProductRegistryKeyPrefix_Software;
    public static string LegacyUserSettingsFileName;
    public static string GlobalSettingsStorageFileName;
    public static string AIAssistantStorageFileName;
    public static string LegacyWorkspaceSettingsFileName;
    [NotNullAttribute]
public static string AllProductsFolderName;
    public static string AnyVersionString;
    public AnyProductSettingsLocation(HostInfo hostInfo);
    private static AnyProductSettingsLocation();
    protected virtual FileSystemPath GetSettingsPath(HostFolderLifetime specialFolder, ApplicationHostDetails details);
    [NotNullAttribute]
public sealed virtual RelativePath GetSettingsRelativePath(ApplicationHostDetails details);
    [NotNullAttribute]
public sealed virtual string GetSettingsRegistryKey(ApplicationHostDetails detail);
    [NotNullAttribute]
public sealed virtual FileSystemPath GetUserSettingsDir(HostFolderLifetime basefolder, ApplicationHostDetails details);
    [NotNullAttribute]
public virtual RelativePath GetSettingsPathSuffix(string nameProduct, Version version, IList`1<Tuple`2<string, string>> additionalParameters);
    public virtual IEnumerable`1<Tuple`2<FileSystemPath, Version>> GetLegacyUserSettingsRoamingLegacyDirs(string legacyProductName);
    [NotNullAttribute]
public virtual FileSystemPath GetLegacyUserSettingsXmlPath(IApplicationHost product);
    [NotNullAttribute]
public virtual FileSystemPath GetLegacyWorkspaceXmlPath(IApplicationHost product);
    [NotNullAttribute]
public FileSystemPath GetInstallDir(IApplicationHost product);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.Components.AsyncComposeComponentsManager : object {
    private Reasons`1<string> myReasons;
    private SynchronizationPoint mySyncPoint;
    private Task myLaterAsyncSuspenseCompleted;
    public AsyncComposeComponentsManager(Lifetime lifetime, ILogger logger, SynchronizationPoints synchronizationPoints);
    public sealed virtual void RegisterAsyncCompose(Lifetime lifetime, string containerId);
    public sealed virtual Task WhenLaterAsyncSuspenseCompleted(Lifetime lifetime);
    public sealed virtual void SuspendLaterAsync(Lifetime lifetime, string containerId);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.Components.DisableLeakWatchdogOnShutdown : object {
    public DisableLeakWatchdogOnShutdown(Lifetime lifetime, ApplicationShutdownRequests shutdownRequests);
    public static void ShutDown();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.Components.ExtractProductCommandLineFromHostCommandLine : object {
    [CanBeNullAttribute]
private IProductCommandLine myProductCommandLine;
    [NotNullAttribute]
private IListEvents`1<CommandLineParameter> myParameters;
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.Keys { get; }
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.NonKeyedParameters { get; }
    private string JetBrains.Application.Hosting.IProductCommandLine.KeyPrefix { get; }
    private bool JetBrains.Application.Hosting.IProductCommandLine.IsKeyPrefixOptional { get; }
    private IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.Parameters { get; }
    private FileSystemPath JetBrains.Application.Hosting.ICommandLine.StartupDirectory { get; }
    public ExtractProductCommandLineFromHostCommandLine(Lifetime lifetime, IHostCommandLine hostCommandLine);
    private sealed virtual override bool JetBrains.Application.Hosting.ICommandLine.IsKeyDefined(string key, bool isCaseSensitive);
    private sealed virtual override string JetBrains.Application.Hosting.ICommandLine.TryGetKeyValue(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.GetKeyValues(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_Keys();
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_NonKeyedParameters();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.get_KeyPrefix();
    private sealed virtual override bool JetBrains.Application.Hosting.IProductCommandLine.get_IsKeyPrefixOptional();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.MakeFullCommandLineKeyName(string sShortKeyName);
    private sealed virtual override IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.get_Parameters();
    private sealed virtual override FileSystemPath JetBrains.Application.Hosting.ICommandLine.get_StartupDirectory();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Environment.Components.IAnyProductSettingsLocation {
    [NotNullAttribute]
public abstract virtual RelativePath GetSettingsRelativePath(ApplicationHostDetails details);
    [NotNullAttribute]
public abstract virtual string GetSettingsRegistryKey(ApplicationHostDetails detail);
    [NotNullAttribute]
public abstract virtual FileSystemPath GetUserSettingsDir(HostFolderLifetime basefolder, ApplicationHostDetails details);
    [NotNullAttribute]
public abstract virtual RelativePath GetSettingsPathSuffix(string nameProduct, Version version, IList`1<Tuple`2<string, string>> additionalParameters);
}
[ObsoleteAttribute]
public interface JetBrains.Application.Environment.Components.IComponentStartupShutdown {
    public abstract virtual void OnAfterStartup();
    public abstract virtual void OnBeforeShutdown();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.Components.InitializationStrategyProvider : object {
    protected IThreading Threading;
    protected IAsyncComposeManager AsyncComposeManager;
    public InitializationStrategyProvider(IThreading threading, IAsyncComposeManager asyncComposeManager);
    public virtual IInitializationStrategy InitializationStrategy(Lifetime lifetime);
}
[ZoneActivatorAttribute("10")]
public class JetBrains.Application.Environment.Components.InternalModeProductZoneActivator : object {
    public static string MarkerName;
    private IEnumerable`1<IZonePreferenceStore> myInternalZonePreferenceProviders;
    private IProductCommandLine myCmdline;
    public static Nullable`1<bool> OverrideInternalModeOnNextStart;
    public InternalModeProductZoneActivator(IEnumerable`1<IZonePreferenceStore> internalZonePreferenceProviders, IProductCommandLine cmdline);
    private sealed virtual override bool JetBrains.Application.Environment.IActivateDynamic<JetBrains.Application.BuildScript.Application.Zones.IInternalVisibilityZone>.ActivatorEnabled();
    private sealed virtual override bool JetBrains.Application.Environment.IActivateDynamic<JetBrains.Application.BuildScript.Application.Zones.IPublicVisibilityZone>.ActivatorEnabled();
    public bool IsInternal();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Environment.Components.NotifyComponentStartupShutdown : object {
    public NotifyComponentStartupShutdown(Lifetime lifetime, IComponentContainer componentContainer, IEnumerable`1<IComponentStartupShutdown> components);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.Components.ProductSettingsLocation : object {
    [NotNullAttribute]
public AnyProductSettingsLocation AnyProductSettingsLocation;
    [NotNullAttribute]
public IApplicationHost ApplicationHost;
    [NotNullAttribute]
public FileSystemPath InstallDir { get; }
    public ProductSettingsLocation(AnyProductSettingsLocation anyProductSettingsLocation, IApplicationHost applicationHost);
    [NotNullAttribute]
public FileSystemPath GetUserSettingsNonRoamingDir(ApplicationHostDetails details);
    [NotNullAttribute]
public FileSystemPath GetUserSettingsRoamingDir(ApplicationHostDetails details);
    [NotNullAttribute]
public string GetProductRegistryKey(ApplicationHostDetails details);
    public FileSystemPath get_InstallDir();
}
[EnvironmentComponentAttribute("10")]
internal class JetBrains.Application.Environment.Components.ReportUnhandledExceptions : object {
    public ReportUnhandledExceptions(Lifetime lifetime);
    private static void SetUnhandledExceptionModeToCatch(bool threadScope);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.Components.ResumeLatch : object {
    private bool myWasResumed;
    public ResumeLatch(Lifetime lifetime, SuspendResume suspendResume);
    public bool GetAndResetResumedEvent();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(bool b);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.Components.SuspendResume : object {
    public static string RegistryDataName_IsSuspended;
    [NotNullAttribute]
public Property`1<bool> IsSuspended;
    [NotNullAttribute]
public SimpleSignal ResumeInvoked;
    [NotNullAttribute]
public SimpleSignal SuspendInvoked;
    public SuspendResume(Lifetime lifetime, IProductCommandLine productCommandLine, ProductSettingsLocation productSettingsLocation, IThreading threading);
    private static SuspendResume();
    [GuardAttribute("1")]
public void Resume();
    [GuardAttribute("1")]
public void Suspend();
    [GuardAttribute("1")]
public void ToggleSuspended();
    private void Init_CommandLine(IProductCommandLine productCommandLine);
    private void Init_Registry(Lifetime lifetime, ProductSettingsLocation productSettingsLocation);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.Components.SuspendResumeProductCanBeStarted : object {
    private SuspendResume mySuspendResume;
    private double JetBrains.Application.Environment.IProductCanBeStarted.Priority { get; }
    public SuspendResumeProductCanBeStarted(SuspendResume suspendResume);
    private sealed virtual override double JetBrains.Application.Environment.IProductCanBeStarted.get_Priority();
    private sealed virtual override IProperty`1<ProductCanBeStartedVerdict> JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted(Lifetime lifetime);
}
public class JetBrains.Application.Environment.DeployedPackages : object {
    public static ILogger Logger;
    [NotNullAttribute]
public CatalogTables CatalogTables;
    public EFlags Flags;
    [NotNullAttribute]
public SerializedValuesResolver PackageComponents;
    public DeployedPackages(CatalogTables catables, SerializedValuesResolver components, EFlags flags);
    private static DeployedPackages();
    [NotNullAttribute]
public static DeployedPackages LoadWithCaching(Lifetime lifetime, DeployedPackagesIdentity identity, Lazy`1<ITaskHost> taskerForNugets);
}
public static class JetBrains.Application.Environment.DeployedPackagesCache : object {
    public static string CacheFileExt;
    public static string CacheFileNamePrefix;
    private static ILogger Logger;
    public static UInt32 OldCacheFilesLimit;
    [NotNullAttribute]
public static FileSystemPath GetCacheDirectory { get; }
    private static DeployedPackagesCache();
    public static FileSystemPath get_GetCacheDirectory();
    public static void CleanupCacheDir();
    [NotNullAttribute]
public static FileSystemPath GetCacheFile(DeployedPackagesIdentity identity);
    [NotNullAttribute]
public static FileSystemPath GetCacheFile(OWORD identity);
    [CanBeNullAttribute]
public static DeployedPackages LoadCache(Lifetime lifeFile, Byte* pBuffer, DeployedPackagesIdentity identity, OnError onerror);
    [NotNullAttribute]
public static DeployedPackages LoadWithCaching(Lifetime lifetime, DeployedPackagesIdentity identity, Lazy`1<ITaskHost> taskerForNugets);
    [CanBeNullAttribute]
public static DeployedPackages TryLoadCacheFile(Lifetime lifetime, DeployedPackagesIdentity identity, OnError onerror);
    public static void WriteCache(DeployedPackagesIdentity identity, DeployedPackages packages, Stream streamOutput);
    public static void WriteCacheFile(DeployedPackagesIdentity identity, DeployedPackages packages);
    [PublicAPIAttribute]
private static bool EnsureAlignment(Stream stream, byte alignment);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.DeployedPackagesCacheIdentityEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static DeployedPackagesIdentity WithSubplatformPassFilter(DeployedPackagesIdentity thіs, AssemblyNameInfo subplatformPassFilter);
}
public static class JetBrains.Application.Environment.DeployedPackagesDiscovery : object {
    private static ILogger Logger;
    private static RelativePath[] SubdirectoriesToInclude;
    private static DeployedPackagesDiscovery();
    [NotNullAttribute]
public static DeployedPackagesIdentity CreateFromFolder(FileSystemPath bindir, DiscoveryFlags discoflags);
    private static void ScanEnvVarForAdditionalPackages(DiscoveryFlags discoflags, IList`1<Folder> folders, FileSystemPath bindir, IList`1& retrievenugets);
    private static void ScanEnvVarForAdditionalPackages_AdHocs(AdditionalDeployedPackages additionals, IList`1<Folder> folders);
    [CanBeNullAttribute]
private static IList`1<JetPackageIdentity> ScanEnvVarForAdditionalPackages_Downloads(AdditionalDeployedPackages additionals, DiscoveryFlags discoflags);
    private static void ScanEnvVarForAdditionalPackages_Files(AdditionalDeployedPackages additionals, DiscoveryFlags discoflags, IList`1<Folder> folders);
    private static void ScanEnvVarForAdditionalPackages_Folders(AdditionalDeployedPackages additionals, DiscoveryFlags discoflags, IList`1<Folder> folders, FileSystemPath bindir);
    [NotNullAttribute]
private static Folder ScanFolder(FileSystemPath dir, bool isDiscoveringNugets);
}
public class JetBrains.Application.Environment.DeployedPackagesExpandLocationResolver : object {
    private IDictionary`2<string, string> myMapPackageIdToDirectory;
    public DeployedPackagesExpandLocationResolver(IDictionary`2<string, FileSystemPath> mapPackageIdToDirectory);
    public DeployedPackagesExpandLocationResolver(IStructuredStorage sstg);
    private sealed virtual override FileSystemPath JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver.GetDeployedPackageDirectory(IApplicationPackage package);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__4_0(CsexpWriter writer);
}
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Environment.DeployedPackagesExpandLocationResolverTrivial : object {
    [NotNullAttribute]
private ProductBinariesDirArtifact myBindir;
    public DeployedPackagesExpandLocationResolverTrivial(ProductBinariesDirArtifact bindir);
    private sealed virtual override FileSystemPath JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver.GetDeployedPackageDirectory(IApplicationPackage package);
}
public class JetBrains.Application.Environment.DeployedPackagesIdentity : object {
    public static string Revision;
    public IList`1<Folder> Folders;
    [CanBeNullAttribute]
public AssemblyNameInfo MinimalPackageSetFilter;
    [NotNullAttribute]
public IList`1<JetPackageIdentity> RetrievedNugets;
    [ItemNotNullAttribute]
public ImmutableArray`1<JetRuntimeId> AssertReferencedPackagesOnlyFor;
    public DeployedPackagesIdentity(IList`1<Folder> folders, IList`1<JetPackageIdentity> retrievedNugets, AssemblyNameInfo minimalPackageSetFilter, ImmutableArray`1<JetRuntimeId> assertReferencedPackagesOnlyFor);
    private static DeployedPackagesIdentity();
    public OWORD CalculateIdentityHash();
    public virtual string ToString();
    public void WriteIdentity(Cookie ck);
}
public static class JetBrains.Application.Environment.DeployedPackagesLoader : object {
    private static ILogger Logger;
    private static DeployedPackagesLoader();
    [NotNullAttribute]
public static DeployedPackages Load(Lifetime lifetime, DeployedPackagesIdentity identity, Lazy`1<ITaskHost> taskerForNugets, Diagnostyx diag);
    [NotNullAttribute]
private static ICollection`1<LoadedMetadataFile> ApplyMinimalPackageSetFilter(ICollection`1<LoadedMetadataFile> loadedUnfiltered, AssemblyNameInfo assemblyTarget, ImmutableArray`1<JetRuntimeId> assertReferencedPackagesOnlyFor);
    private static void CollectPackageComponents(ICollection`1<LoadedMetadataFile> loaded, SerializedValuesResolver allcomponents, EFlags& flags);
    private static void CreateAdHocCatalogForUncatalogedAssemblies(Lifetime lifeCreationProcess, ICollection`1<AssemblyNameInfo> assembliesForAdHocCataloging, DeployedPackagesMasterBinderData binderlist, ICollection`1<CatalogTables> catables);
    private static DeployedPackagesExpandLocationResolver CreateExpandLocationResolver(ICollection`1<LoadedMetadataFile> metadata, EFlags& flags);
    [NotNullAttribute]
private static DeployedPackagesMasterBinderData CreateMasterBinderData(ICollection`1<LoadedMetadataFile> loadedFiltered, EFlags& flags);
    private static ICollection`1<LoadedMetadataFile> LoadMetadatas(Lifetime lifetime, DeployedPackagesIdentity identity, Lazy`1<ITaskHost> taskerForNugets, OnError onerror, Diagnostyx diag);
    private static void LoadPrecalculatedCatalogs(Lifetime lifeCreationProcess, ICollection`1<LoadedMetadataFile> loadedFiltered, ICollection`1& catables, ICollection`1& assembliesForAdHocCataloging);
    private static bool LoadPrecalculatedCatalogs_Validate(LoadedMetadataFile loaded, CatalogTables table, IDictionary`2<StringSource, Guid> cacheMvids);
    [NotNullAttribute]
private static ChunkedMemoryStream MergeCatalogs(ICollection`1<CatalogTables> catables);
    private static CatalogTables ProcessPackage(Lifetime lifeCreationProcess, LoadedMetadataFile loaded, IDictionary`2<StringSource, Guid> cacheMvids);
    private static FileSystemPath Redirect(FileSystemPath abspath);
    private static void TryAddMetadataFileFromDisk(Lifetime lifetime, FileSystemPath pathMetadataFile, List`1<LoadedMetadataFile> loadeds, OnError onerror);
    [CanBeNullAttribute]
private static FileSystemPath TryRedirectTo(FileSystemPath path, Func`1<bool> condition);
}
public class JetBrains.Application.Environment.DeployedPackagesMasterBinderData : object {
    [NotNullAttribute]
public AssemblyNameInfo[] PossiblyUnresolvableAssemblies;
    [NotNullAttribute]
public AssemblyNameAndLocation[] ResolvableAssemblyFiles;
    public DeployedPackagesMasterBinderData(AssemblyNameAndLocation[] resolvables, AssemblyNameInfo[] unresolvables);
    public DeployedPackagesMasterBinderData(IStructuredStorage sstg);
    private sealed virtual override void JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData(IStructuredStorage sstg);
    [CompilerGeneratedAttribute]
private Pair`2<AssemblyNameAndLocation[], AssemblyNameInfo[]> <.ctor>b__1_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <JetBrains.Util.Storage.StructuredStorage.IStructuredStorageSerializable.GetObjectData>b__4_0(Stream stream);
}
public static class JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand : object {
    public static FileSystemPath BaseExpansionFolder;
    public static ILogger Logger;
    private static DeployedPackagesNugetAutoexpand();
    [AsyncStateMachineAttribute("JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand/<ExpandNugetPackages>d__2")]
[NotNullAttribute]
public static Task`1<Expanded> ExpandNugetPackages(Lifetime lifetime, IReadOnlyList`1<NugetAutoexpandable> packages, FileSystemPath dirBaseExpansionFolderOverride, ITaskHost tasker, OnError onerror);
}
[AttributeUsageAttribute("196")]
[MeansImplicitUseAttribute("8")]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.Application.Environment.EnvironmentComponentAttribute : ComponentAttribute {
    public EnvironmentComponentAttribute(Instantiation instantiation);
}
public class JetBrains.Application.Environment.EnvironmentPartCatalogSet : object {
    [CompilerGeneratedAttribute]
private PartCatalog <Catalog>k__BackingField;
    public PartCatalog Catalog { get; }
    public EnvironmentPartCatalogSet(PartCatalog& catalog);
    [CompilerGeneratedAttribute]
public sealed virtual PartCatalog get_Catalog();
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.Environment.EnvironmentServiceAttribute : EnvironmentComponentAttribute {
    public EnvironmentServiceAttribute(Instantiation instantiation);
}
public class JetBrains.Application.Environment.EnvironmentZones : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private List`1<ZonePart> <AllZoneParts>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<ZonePart, ZonePart> <ZoneToSuccessorsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<ZonePart, ZonePart> <ZoneToPredecessorsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private OneToListMap`2<ZonePart, ZonePart> <ZoneToInheritorsMap>k__BackingField;
    public List`1<ZonePart> AllZoneParts { get; }
    public OneToListMap`2<ZonePart, ZonePart> ZoneToSuccessorsMap { get; }
    public OneToListMap`2<ZonePart, ZonePart> ZoneToPredecessorsMap { get; }
    public OneToListMap`2<ZonePart, ZonePart> ZoneToInheritorsMap { get; }
    public EnvironmentZones(FullPartCatalogSet catalogset, ILogger logger);
    [CompilerGeneratedAttribute]
public List`1<ZonePart> get_AllZoneParts();
    [CompilerGeneratedAttribute]
public OneToListMap`2<ZonePart, ZonePart> get_ZoneToSuccessorsMap();
    [CompilerGeneratedAttribute]
public OneToListMap`2<ZonePart, ZonePart> get_ZoneToPredecessorsMap();
    [CompilerGeneratedAttribute]
public OneToListMap`2<ZonePart, ZonePart> get_ZoneToInheritorsMap();
    private void BuildZoneRelations();
    public void ExpandToInheritors(JetHashSet`1<ZonePart> allowedActivatorZones, JetHashSet`1<ZonePart> negativeZones);
    public void IncludeAutoenabled(JetHashSet`1<ZonePart> allowedActivatorZones, JetHashSet`1<ZonePart> negativeZones);
    private bool DependenciesSatisfied(JetHashSet`1<ZonePart> allAutoenableZones, ZonePart zonePart);
    public void ExpandToPredecessors(JetHashSet`1<ZonePart> zones);
    public void PropagateNegativeZones(string nameForDiag, JetHashSet`1<ZonePart> zonesNegative);
    public void LogZoneParts(string text, IEnumerable`1<ZonePart> parts);
    public void TraceZonePartsNegative(string name, FrugalLocalList`1<ZonePart> zones);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.EnvironmentZonesExtra : object {
    public Nullable`1<FeatureInfo> TryGetFeatureInfo(ZonePart runningZone);
    public Nullable`1<ProductInfo> TryGetProductInfo(ZonePart runningZone);
}
public class JetBrains.Application.Environment.FullPartCatalogSet : object {
    [CompilerGeneratedAttribute]
private PartCatalog <Catalog>k__BackingField;
    public PartCatalog Catalog { get; }
    public FullPartCatalogSet(PartCatalog& catalog);
    [CompilerGeneratedAttribute]
public sealed virtual PartCatalog get_Catalog();
    [NotNullAttribute]
public static FullPartCatalogSet CreateFromCatalogTablesAndInstallResolver(Lifetime lifetime, CatalogTables tables, IAssemblyMasterBinder masterbinder);
    [NotNullAttribute]
public static FullPartCatalogSet CreateFromCatalogTablesAndInstallResolver(Lifetime lifetime, CatalogTables tables, DeployedPackagesMasterBinderData masterbinderfilelist);
    public static FullPartCatalogSet CreateFromDiskFilesAndInstallResolver(Lifetime lifetime, ICollection`1<AssemblyNameAndLocation> allassemblies, ICollection`1<AssemblyNameAndLocation> extras);
    [NotNullAttribute]
public static FullPartCatalogSet CreateFromPackagesAndInstallResolver(Lifetime lifetime, IList`1<ApplicationPackageArtifact> packages, IDeployedPackagesExpandLocationResolver resolver);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.Helpers.ProductConfigurationsEx : object {
    [ExtensionAttribute]
public static InternalMode GetInternalMode(ProductConfigurations thіs);
    [ExtensionAttribute]
public static bool IsInternalMode(ProductConfigurations thіs);
}
public class JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatHostMixin : object {
    [CanBeNullAttribute]
private DeployedPackages myDeployedPackages;
    private Assembly myMinimalPackageSetFilter;
    private Lazy`1<ProductBinariesDirArtifact> myProductBinariesDirArtifact;
    public CollectProductPackagesInDirectoryFlatHostMixin(Lazy`1<ProductBinariesDirArtifact> productBinariesDirArtifact, Assembly minimalPackageSetFilter);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
}
[ObsoleteAttribute("This is the legacy no-caching version which builds the part catalog each time over the set of files available, and does not support AdditionalDeployedPackages.")]
public class JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatNoCachingHostMixin : object {
    private ILogger Logger;
    private Func`2<AllAssembliesOnPackages, AllAssembliesOnPackages> myAllAssembliesProcessor;
    private IList`1<ApplicationPackageArtifact> myPackages;
    private Lazy`1<ProductBinariesDirArtifact> myProductBinariesDirArtifact;
    private Func`2<AllAssemblies, IList`1<Subplatform>> myΛFilter;
    public CollectProductPackagesInDirectoryFlatNoCachingHostMixin(Lazy`1<ProductBinariesDirArtifact> productBinariesDirArtifact, Func`2<AllAssemblies, IList`1<Subplatform>> λFilter, Func`2<AllAssembliesOnPackages, AllAssembliesOnPackages> allAssembliesProcessor);
    private IList`1<ApplicationPackageArtifact> CollectSubplatformPackages();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.ConsoleLoggerMixin : object {
    private SequentialLifetimes myPushToLogger;
    private ILogEventListener myListener;
    private LoggingLevel myLoggingLevel;
    private IFilter[] myFilters;
    public LoggingLevel LoggingLevel { get; public set; }
    public IFilter[] Filters { get; public set; }
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    public ConsoleLoggerMixin(LoggingLevel level, IFilter[] filters);
    public LoggingLevel get_LoggingLevel();
    public void set_LoggingLevel(LoggingLevel value);
    public IFilter[] get_Filters();
    public void set_Filters(IFilter[] value);
    private void ReConfigure();
    public sealed virtual void InitHost(Lifetime lifetime);
    public void PushToLogger(ILogEventListener listener, LoggingLevel level, IFilter[] filters);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.CreateLoggerOutputToStdOutHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public class JetBrains.Application.Environment.HostParameters.CustomComponentHostMixin : object {
    private Func`1<object> myΛCreateCustomComponent;
    public CustomComponentHostMixin(Func`1<object> λCreateCustomComponent);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.CustomHostCommandLineHostMixin : object {
    private IHostCommandLine myHostCommandLine;
    public CustomHostCommandLineHostMixin(IHostCommandLine hostCommandLine);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.DefaultApplicationHostMixin : object {
    private HostInfo myHostInfo;
    public static string FallbackHostProductName;
    public DefaultApplicationHostMixin(HostInfo hostInfo);
    private static DefaultApplicationHostMixin();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.DefaultHostCommandLineFromProcessRuntimeHostMixin : object {
    private String[] myArgs;
    public DefaultHostCommandLineFromProcessRuntimeHostMixin(String[] args);
    public virtual void Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.EnableMultithreadedJitHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.EnvironmentZoneFromSerializedComponentsHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    public EnvironmentZoneFromSerializedComponentsHostMixin(ISerializedValuesResolverLoader svr);
    private sealed virtual override ZonePart JetBrains.Application.Environment.HostParameters.IHaveEnvironmentZoneHostMixin.GetEnvironmentZone(FullPartCatalogSet catalogset);
    private static void GetEnvironmentZone_FailNotSingle(FullPartCatalogSet catalogset, AssemblyQualifiedTypeName zonetype, FrugalLocalList`1& zoneparts, ILogger logger);
}
public class JetBrains.Application.Environment.HostParameters.EnvironmentZoneHostMixin : object {
    [CompilerGeneratedAttribute]
private ZonePart <ZoneAsPart>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ZoneAsRuntimeType>k__BackingField;
    [CanBeNullAttribute]
public ZonePart ZoneAsPart { get; }
    [CanBeNullAttribute]
public Type ZoneAsRuntimeType { get; }
    public EnvironmentZoneHostMixin(ZonePart zone);
    public EnvironmentZoneHostMixin(Type zone);
    [CompilerGeneratedAttribute]
public ZonePart get_ZoneAsPart();
    [CompilerGeneratedAttribute]
public Type get_ZoneAsRuntimeType();
    private sealed virtual override ZonePart JetBrains.Application.Environment.HostParameters.IHaveEnvironmentZoneHostMixin.GetEnvironmentZone(FullPartCatalogSet catalogset);
}
public abstract class JetBrains.Application.Environment.HostParameters.ExceptionReporterHostMixinBase : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    protected abstract virtual void SetExceptionReporter(Lifetime lifetime);
}
[ObsoleteAttribute("We won't be embedding package info into the entry point. Packages will be collected AD HOC from startup folder.")]
public class JetBrains.Application.Environment.HostParameters.FullPartCatalogFromSerializedComponentsHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    public FullPartCatalogFromSerializedComponentsHostMixin(ISerializedValuesResolverLoader svr);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.GuardAssertHostMixin : object {
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IAssertStartStopHostMixin.Assert(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.HaveHostInfo : object {
    [CompilerGeneratedAttribute]
private Lazy`1<HostInfo> <HosInfo>k__BackingField;
    public Lazy`1<HostInfo> HosInfo { get; }
    public HaveHostInfo(HostInfo hostInfo);
    [CompilerGeneratedAttribute]
public sealed virtual Lazy`1<HostInfo> get_HosInfo();
}
public class JetBrains.Application.Environment.HostParameters.HostInfoFromSerializedComponents : object {
    [CompilerGeneratedAttribute]
private Lazy`1<HostInfo> <HosInfo>k__BackingField;
    [NotNullAttribute]
public Lazy`1<HostInfo> HosInfo { get; }
    public HostInfoFromSerializedComponents(ISerializedValuesResolverLoader loader);
    [CompilerGeneratedAttribute]
public sealed virtual Lazy`1<HostInfo> get_HosInfo();
    [CanBeNullAttribute]
protected virtual HostInfo GetHostInfo(ISerializedValuesResolverLoader loader);
}
public class JetBrains.Application.Environment.HostParameters.HostInfoFromSerializedComponentsWithRootSuffixFromBinDir : HostInfoFromSerializedComponents {
    private Lazy`1<ProductBinariesDirArtifact> myBindirArt;
    public HostInfoFromSerializedComponentsWithRootSuffixFromBinDir(ISerializedValuesResolverLoader loader, Lazy`1<ProductBinariesDirArtifact> bindirart);
    protected virtual HostInfo GetHostInfo(ISerializedValuesResolverLoader loader);
    [CanBeNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
private static HostInfo ReadHostInfoFromBinDir(Lazy`1<ProductBinariesDirArtifact> bindirart);
}
public class JetBrains.Application.Environment.HostParameters.HostInfoHostMixin : object {
    private IHaveHostInfo myHaveHostInfo;
    public HostInfoHostMixin(IHaveHostInfo haveHostInfo);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public enum JetBrains.Application.Environment.HostParameters.HostInitLevels : Enum {
    public int value__;
    public static HostInitLevels Default;
    public static HostInitLevels BeforeDefault;
    public static HostInitLevels HighPriority;
    public static HostInitLevels Native;
    public static HostInitLevels PumpOutLeftovers;
    public static HostInitLevels FallbackExceptionReporting;
    public static HostInitLevels AfterDefault;
}
public interface JetBrains.Application.Environment.HostParameters.IAssertStartStopHostMixin {
    public abstract virtual void Assert(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin {
    public abstract virtual void Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveEnvironmentContainerInitializationStrategyHostMixin {
    public abstract virtual IInitializationStrategy GetInitializationStrategy(ITaskHost taskHost);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveEnvironmentZoneHostMixin {
    [NotNullAttribute]
public abstract virtual ZonePart GetEnvironmentZone(FullPartCatalogSet catalogset);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin {
    [NotNullAttribute]
public abstract virtual FullPartCatalogSet GetFullPartCatalogSet(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.HostParameters.IHaveHostInfo {
    public Lazy`1<HostInfo> HosInfo { get; }
    public abstract virtual Lazy`1<HostInfo> get_HosInfo();
}
public interface JetBrains.Application.Environment.HostParameters.IInitAppHostMixin {
    public HostInitLevels Priority { get; }
    public abstract virtual HostInitLevels get_Priority();
    public abstract virtual void InitHost(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.HostParameters.IInitLoggerHostMixin {
    public abstract virtual void InitLogger();
}
public interface JetBrains.Application.Environment.HostParameters.IJetHostMixin {
}
public class JetBrains.Application.Environment.HostParameters.InitExceptionReporterOnSerializedComponentsHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    public InitExceptionReporterOnSerializedComponentsHostMixin(ISerializedValuesResolverLoader svr);
    [NotNullAttribute]
public static ExceptionReporting ShellLessExceptionReporting__CreateDeadEnd();
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.InitLoggerHostMixin : object {
    private Lazy`1<HostInfo> myHostInfo;
    private LogSubconfiguration myLogSubconfiguration;
    public InitLoggerHostMixin(HostInfo hostInfo, LogSubconfiguration subconfiguration);
    public InitLoggerHostMixin(IHaveHostInfo haveHostInfo);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitLoggerHostMixin.InitLogger();
    private void LogInitialEnvironment();
}
public class JetBrains.Application.Environment.HostParameters.InitStdWindowsAppFxHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private static Application CreateAvalonApplication();
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public interface JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin {
    public RunMessageLoopPriority Priority { get; }
    public bool IsAvailable { get; }
    public abstract virtual RunMessageLoopPriority get_Priority();
    public abstract virtual bool get_IsAvailable();
    public abstract virtual ProductCanBeStartedVerdict RunMainLoop(ComponentContainer containerEnv);
}
public class JetBrains.Application.Environment.HostParameters.JetHostParameters : object {
    public IList`1<IJetHostMixin> Mixins;
    public JetHostParameters(IList`1<IJetHostMixin> host);
}
public class JetBrains.Application.Environment.HostParameters.JetHostParametersCaller : object {
    private ILogger Logger;
    private IList`1<IJetHostMixin> Mixins;
    public JetHostParametersCaller(IList`1<IJetHostMixin> mixins);
    public IInitializationStrategy GetContainerInitializationStrategy(ITaskHost taskHost);
    [HandleProcessCorruptedStateExceptionsAttribute]
public void FillHostInfoContainer(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    [NotNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
public FullPartCatalogSet GetFullPartCatalogSet(Lifetime lifetime);
    [NotNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
public JetEnvironmentAvailableZones GetJetEnvironmentAvailableZones(FullPartCatalogSet catalogset);
    [HandleProcessCorruptedStateExceptionsAttribute]
public void InitHost(Lifetime lifetime);
    [HandleProcessCorruptedStateExceptionsAttribute]
public void InitLogger();
    [HandleProcessCorruptedStateExceptionsAttribute]
public ProductCanBeStartedVerdict RunMainLoop(ComponentContainer containerEnv);
    public void StartStopAsserts(Lifetime lifetime);
}
public class JetBrains.Application.Environment.HostParameters.MakeAdHockProductPackageOnScatteredFilesHostMixin : object {
    public static SubplatformName AdHocApplicationPackageName;
    private ApplicationPackageArtifact myPackage;
    [CanBeNullAttribute]
private ProductBinariesDirArtifact myProductBinariesDirArtifactRaw;
    [CanBeNullAttribute]
private Predicate`1<RelativePath> myΛFilter;
    [NotNullAttribute]
private ProductBinariesDirArtifact ProductBinariesDirArtifact { get; }
    public MakeAdHockProductPackageOnScatteredFilesHostMixin(ProductBinariesDirArtifact productBinariesDirArtifact, Predicate`1<RelativePath> λFilter);
    private static MakeAdHockProductPackageOnScatteredFilesHostMixin();
    public static ApplicationPackageArtifact CollectScatteredDllFilesIntoApplicationPackage(ProductBinariesDirArtifact productBinariesDirArtifact, Predicate`1<RelativePath> λFilter);
    private DeployedPackagesExpandLocationResolverTrivial CreateExpandLocationResolver();
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
    private sealed virtual override FullPartCatalogSet JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(Lifetime lifetime);
    private ProductBinariesDirArtifact get_ProductBinariesDirArtifact();
}
public class JetBrains.Application.Environment.HostParameters.MessagePumpMainLoopHostMixin : object {
    private RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.Priority { get; }
    private bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.IsAvailable { get; }
    private sealed virtual override RunMessageLoopPriority JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_Priority();
    private sealed virtual override bool JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.get_IsAvailable();
    private sealed virtual override ProductCanBeStartedVerdict JetBrains.Application.Environment.HostParameters.IRunMainLoopHostMixin.RunMainLoop(ComponentContainer containerEnv);
}
public class JetBrains.Application.Environment.HostParameters.PumpOutLeftoversHostMixin : object {
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public enum JetBrains.Application.Environment.HostParameters.RunMessageLoopPriority : Enum {
    public int value__;
    public static RunMessageLoopPriority Default;
    public static RunMessageLoopPriority MsoComponentManager;
}
public class JetBrains.Application.Environment.HostParameters.SerializedComponentsIntoEnvironmentContainerHostMixin : object {
    private ISerializedValuesResolverLoader myResolver;
    public SerializedComponentsIntoEnvironmentContainerHostMixin(ISerializedValuesResolverLoader svr);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(ComponentContainer container, EnvironmentPartCatalogSet catalogsetContainer);
}
public class JetBrains.Application.Environment.HostParameters.StdOutGreetingHostMixin : object {
    private Func`1<string> myΛGetText;
    private HostInitLevels myPriority;
    private HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.Priority { get; }
    public StdOutGreetingHostMixin(string text, HostInitLevels priority);
    public StdOutGreetingHostMixin(Func`1<string> λGetText, HostInitLevels priority);
    private sealed virtual override void JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.InitHost(Lifetime lifetime);
    private sealed virtual override HostInitLevels JetBrains.Application.Environment.HostParameters.IInitAppHostMixin.get_Priority();
}
public class JetBrains.Application.Environment.HostParameters.SuppressExceptionReporterHostMixin : ExceptionReporterHostMixinBase {
    protected virtual void SetExceptionReporter(Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.HostParameters.WindowsApplicationHost : object {
    private static Type ourPerfMeasureType;
    private static GroupId ourPerfMeasureGroup;
    private static WindowsApplicationHost();
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full CustomConsoleGreeting(Full input, Func`1<string> λGetText, HostInitLevels priority);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static ProductInfo Hosted(Packages input, HostInfo hostInfo, LogSubconfiguration logconf);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full InEnvironmentZone(ProductInfo input, ZonePart zone);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full InEnvironmentZone(ProductInfo input, Type typeZone);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full InEnvironmentZone(ProductInfo input);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static ProductInfo NameDontCare(Packages input);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
[ObsoleteAttribute("We won't be embedding package info into the entry point. Packages will be collected AD HOC from startup folder.")]
public static Full OnBuildTimeSerializedDataInExeResources(Engine input);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full OnBuildTimeSerializedDataInExeResourcesOnScatteredPackages(Engine input);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Engine OnConsoleEngine(Empty input, String[] args, IFilter[] filters);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Packages OnPackagesInFlatFolder(Engine input, Lazy`1<ProductBinariesDirArtifact> productBinariesDirArtifact, Assembly minimalPackageSetFilter);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Packages OnScatteredFilesInFlatFolder(Engine input, ProductBinariesDirArtifact productBinariesDirArtifact, Predicate`1<RelativePath> λFilter);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Engine OnWindowsNonInteractiveEngine(Empty input);
}
public interface JetBrains.Application.Environment.IActivate`1 {
}
public interface JetBrains.Application.Environment.IActivateBase {
}
public interface JetBrains.Application.Environment.IActivateDynamic`1 {
    public abstract virtual bool ActivatorEnabled();
}
public interface JetBrains.Application.Environment.IActivatorDependsOn`1 {
}
public interface JetBrains.Application.Environment.IDeactivate`1 {
}
public interface JetBrains.Application.Environment.IDeactivateDynamic`1 {
    public abstract virtual bool IsDeactivateActive();
}
public interface JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver {
    [NotNullAttribute]
public abstract virtual FileSystemPath GetDeployedPackageDirectory(IApplicationPackage package);
}
[ObsoleteAttribute("Hosts are not in use anymore, JetEnvironment is the terminal item.")]
public interface JetBrains.Application.Environment.IJetHost {
    [NotNullAttribute]
public JetEnvironment Environment { get; }
    public abstract virtual JetEnvironment get_Environment();
}
public static class JetBrains.Application.Environment.IJetHostEx : object {
    [NotNullAttribute]
public static LifetimeDefinition EntangleGuardedLifetime(Lifetime lifetimeOuterUnguarded, string sIdentity, ReentrancyGuard guard, Action`1<Lifetime> FWithGuardedLifetime);
    public static void PumpOutLeftovers();
    [ConditionalAttribute("JET_MODE_ASSERT")]
private static void AggressivePumpAndGcCollect();
    [NotNullAttribute]
public static ProductCanBeStartedVerdict RunHostMessageLoop(IComponentContainer containerEnv);
}
public interface JetBrains.Application.Environment.IProductCanBeStarted {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    [NotNullAttribute]
public abstract virtual IProperty`1<ProductCanBeStartedVerdict> CreateCanBeStarted(Lifetime lifetime);
}
public interface JetBrains.Application.Environment.ITimebombExplosionReporter {
    public abstract virtual void ReportTimebombed(ICollection`1<ZonePart> zoneParts, ICollection`1<string> timebombedProducts);
}
public interface JetBrains.Application.Environment.ITimebombZoneFilter {
    public bool HasTimebombedPackages { get; }
    public abstract virtual bool get_HasTimebombedPackages();
    public abstract virtual bool IsZoneAllowed(ZonePart zonePart);
}
public interface JetBrains.Application.Environment.IZonePreferenceStore {
    public abstract virtual bool IsEnabled(string zoneName);
}
public class JetBrains.Application.Environment.JetEnvironment : object {
    public static string ContainerId;
    public static string PerformanceMarkerStartEnvironmentContainer;
    public static string PerformanceMarkerFinishEnvironmentContainer;
    [NotNullAttribute]
public JetEnvironmentAvailableZones ActiveEnvironmentZones;
    [NotNullAttribute]
public ComponentContainer Container;
    [NotNullAttribute]
public EnvironmentPartCatalogSet EnvironmentPartCatalogSet;
    [NotNullAttribute]
public FullPartCatalogSet FullPartCatalogSet;
    [GuardAttribute("1")]
private JetEnvironment(Lifetime lifetime, JetHostParametersCaller host);
    [GuardAttribute("2")]
public static ProductCanBeStartedVerdict CreateAndRun(Full hostparams);
    [CanBeNullAttribute]
[GuardAttribute("2")]
public static JetEnvironment CreateDontRun(Lifetime lifetime, JetHostParameters hostparams);
    [NotNullAttribute]
[GuardAttribute("1")]
public static JetEnvironment CreateDontRunGuarded(Lifetime lifetime, JetHostParameters hostparams);
    [GuardAttribute("2")]
private static ProductCanBeStartedVerdict InternalCreate(LifetimeDefinition lifetimeDefinition, JetHostParametersCaller host, JetEnvironment& environment);
    [GuardAttribute("2")]
private static void InternalDestroy(LifetimeDefinition lifetimeDefinition, JetHostParametersCaller host);
    [NotNullAttribute]
private static LifetimeDefinition InternalInitLifetime();
    [NotNullAttribute]
[GuardAttribute("2")]
[HandleProcessCorruptedStateExceptionsAttribute]
private static ProductCanBeStartedVerdict InternalRun(JetHostParametersCaller host, ComponentContainer containerEnv);
}
public class JetBrains.Application.Environment.JetEnvironmentAvailableZones : object {
    private static string IEnvironmentZoneFullName;
    private static ILogger Logger;
    [NotNullAttribute]
public ZonePart[] Zones;
    private JetEnvironmentAvailableZones(ZonePart[] configs);
    private static JetEnvironmentAvailableZones();
    [NotNullAttribute]
public static JetEnvironmentAvailableZones CreateFromEnvironmentModuleZoneAndStandardConfigs(FullPartCatalogSet catalog, ZonePart[] zonesEnvironment);
    public bool Equals(JetEnvironmentAvailableZones other);
    public virtual bool Equals(object obj);
    [NotNullAttribute]
public static ZonePart[] GetAllPossibleStandardConfigs(PartCatalog catalog);
    public virtual int GetHashCode();
    [NotNullAttribute]
public static ZonePart[] GetStandardConfigsForCurrentRuntime(FullPartCatalogSet catalog);
    [NotNullAttribute]
private static ZonePart GetCpuConfig(FullPartCatalogSet catalogset);
    [NotNullAttribute]
private static ZonePart GetOsConfig(FullPartCatalogSet catalogset);
    [NotNullAttribute]
private static ZonePart GetClrConfig(FullPartCatalogSet catalogset);
    [NotNullAttribute]
private static ZonePart GetRuntimeConfig(FullPartCatalogSet catalogset);
    private void TraceConfigurations(ZonePart[] configs);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.JetEnvironmentZones : EnvironmentZones {
    private JetEnvironment myEnvironment;
    private IEnumerable`1<IActivateBase> myProductZonesActivators;
    private ILogger myLogger;
    private OneToSetMap`2<IActivateBase, ZonePart> myActivatedProductZones;
    private OneToSetMap`2<IActivateBase, ZonePart> myDeactivatedProductZones;
    private OneToSetMap`2<IActivateBase, ZonePart> myActivatorDependsOnZones;
    public JetEnvironmentZones(JetEnvironment environment, IEnumerable`1<IActivateBase> productZonesActivators, ILogger logger);
    private void ClearCachedActivatorZones();
    public void PrepareZonesForProductLifetime(Lifetime productLifetime);
    private void BuildActivatorZones();
    [IteratorStateMachineAttribute("JetBrains.Application.Environment.JetEnvironmentZones/<ActivatorZones>d__10")]
public IEnumerable`1<ZonePart> ActivatorZones(JetHashSet`1<ZonePart> zonesNegativeByLicense, JetHashSet`1<ZonePart> allNegativeZones);
    [IteratorStateMachineAttribute("JetBrains.Application.Environment.JetEnvironmentZones/<DisabledZones>d__11")]
public IEnumerable`1<ZonePart> DisabledZones(JetHashSet`1<ZonePart> allNegativeZones);
}
public static class JetBrains.Application.Environment.JetHost : object {
    [NotNullAttribute]
public static Empty New { get; }
    public static Empty get_New();
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.JetHostItems : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ProductCanBeStartedVerdict CreateAndRun(Full input);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full CustomAdd(Full input, IJetHostMixin item);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full CustomRemove(Full input);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
public static Full CustomReplace(Full input, IJetHostMixin newitem);
}
public interface JetBrains.Application.Environment.LicenseCheck.IZoneLicenseChecker {
    public IEnumerable`1<string> Signatures { get; }
    public abstract virtual IEnumerable`1<string> get_Signatures();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.LicenseCheck.RestartShellOnZoneLicenseCheckChanges : object {
    private IProperty`1<ProductCanBeStartedVerdict> myCanBeStarted;
    public double Priority { get; }
    public RestartShellOnZoneLicenseCheckChanges(Lifetime lifetime, ZoneLicenseChecker zoneLicenseChecker, IThreading threading);
    public sealed virtual double get_Priority();
    public sealed virtual IProperty`1<ProductCanBeStartedVerdict> CreateCanBeStarted(Lifetime lifetime);
}
[AttributeUsageAttribute("1036")]
[BaseTypeRequiredAttribute("JetBrains.Application.BuildScript.Application.Zones.IZone")]
public class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    public string PublicKey { get; }
    public ZoneLicenseAttribute(string PublicKey);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseChecker : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private ISimpleSignal <CheckersChanged>k__BackingField;
    private bool myCheckersApplied;
    private IList`1<IZoneLicenseChecker> myCheckers;
    private static String[] ourZonesThatMustRequireLicense;
    public ISimpleSignal CheckersChanged { get; }
    public ZoneLicenseChecker(Lifetime lifetime, License2CheckComponent licenseCheckComponent, ILogger logger);
    private static ZoneLicenseChecker();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_CheckersChanged();
    private static IList`1<IZoneLicenseChecker> ValidateCheckers(PropertyChangedEventArgs`1<IReadOnlyCollection`1<ILicensedEntity>> args);
    public IEnumerable`1<ZonePart> FilterZones(IEnumerable`1<ZonePart> zones);
    public bool IsZoneAllowed(ZonePart part);
    [CompilerGeneratedAttribute]
private bool <FilterZones>b__9_0(ZonePart part);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "SettingsForInternalActionToCreateZoneLicensCheckersSettingDescription")]
public class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseCheckSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "PByPublicKeySettingDescription")]
public IIndexedEntry`2<string, string> PublicKeyToP;
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "QByPublicKeySettingDescription")]
public IIndexedEntry`2<string, string> PublicKeyToQ;
}
public static class JetBrains.Application.Environment.LicenseCheck.ZoneLicenseCheckSettingsEx : object {
    public static Pair`2<string, string> TryGetPandQ(string publicKey, ISettingsStore settingsStore);
    public static void SetPandQ(string publicKey, string p, string q, ISettingsStore settingsStore);
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.LicenseCheck.ZonePartEx : object {
    [ExtensionAttribute]
public static bool DoesNotRequireLicense(ZonePart part);
    [ExtensionAttribute]
public static FrugalLocalList`1<string> GetLicensePublicKeys(ZonePart part);
}
public class JetBrains.Application.Environment.LicenseCheck.ZoneSignatureValidator : object {
    private static string SECRET_EXPONENT;
    private static Byte[] StringToBytes(string s);
    private static bool CompareBytes(Byte[] a, Byte[] b);
    public static bool IsApplicable(string zonePublicKey, string checkerFqn, string checkerSignature);
    public static string Encode(string checkerFqn, string p, string q);
    public static IList`1<string> Encode(ISettingsStore settingsStore, Type[] zoneTypes);
}
[EnvironmentComponentAttribute("18")]
public class JetBrains.Application.Environment.MonoCertificateValidatorRegistrar : object {
}
public static class JetBrains.Application.Environment.ProductCanBeStartedPriorityThresholds : object {
    public static double EnvironmentReady;
    public static double UserSuspend;
    public static double Licensing;
    private static ProductCanBeStartedPriorityThresholds();
}
public enum JetBrains.Application.Environment.ProductCanBeStartedResolution : Enum {
    public int value__;
    public static ProductCanBeStartedResolution Affirmative;
    public static ProductCanBeStartedResolution NegativeTemporary;
    public static ProductCanBeStartedResolution NegativePermanentGraceful;
    public static ProductCanBeStartedResolution NegativePermanentByError;
}
public class JetBrains.Application.Environment.ProductCanBeStartedVerdict : object {
    public ProductCanBeStartedResolution Resolution;
    [CanBeNullAttribute]
public string Comment;
    public int ErrorCode;
    private ProductCanBeStartedVerdict(ProductCanBeStartedResolution resolution, string comment, int errorCode);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict Affirmative(string message);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict NegativeTemporary(string message, int errorCode);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict NegativePermanentGraceful(string message, int errorCode);
    [NotNullAttribute]
public static ProductCanBeStartedVerdict NegativePermanentByError(string message, int errorCode);
    public sealed virtual bool Equals(ProductCanBeStartedVerdict other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ProductCanBeStartedVerdict left, ProductCanBeStartedVerdict right);
    public static bool op_Inequality(ProductCanBeStartedVerdict left, ProductCanBeStartedVerdict right);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.Environment.ProductCanBeStartedVerdictEx : object {
    [ExtensionAttribute]
public static IProperty`1<bool> SelectShouldStartShell(IProperty`1<ProductCanBeStartedVerdict> verdict);
    [ExtensionAttribute]
public static bool ShouldStartShell(ProductCanBeStartedVerdict verdict);
    [ExtensionAttribute]
public static bool ShouldBeRunningStandaloneApplicationHost(ProductCanBeStartedVerdict verdict);
    [ExtensionAttribute]
public static IProperty`1<bool> SelectShouldBeRunningStandaloneApplicationHost(IProperty`1<ProductCanBeStartedVerdict> verdict);
    [ExtensionAttribute]
public static bool IsWithErrors(ProductCanBeStartedVerdict verdict);
    [ExtensionAttribute]
public static bool IsNegativePermanent(ProductCanBeStartedVerdict verdict);
}
[AttributeUsageAttribute("192")]
public class JetBrains.Application.Environment.PublicStaticIntMainAttribute : PartAttribute {
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.ReportsProductsAllowedToRun : object {
    [NotNullAttribute]
public IProperty`1<ProductCanBeStartedVerdict> ProductCanBeStartedVerdict;
    public ReportsProductsAllowedToRun(Lifetime lifetime, IImmutableList`1<IProductCanBeStarted> canstart, IThreading threading, ILogger logger);
    [NotNullAttribute]
private static IProperty`1<ProductCanBeStartedVerdict> Init_ComposeProperty(Lifetime lifetime, ICollectionEvents`1<IProductCanBeStarted> productvalidators, IThreading threading);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.ReSharperZonePreferenceStore : object {
    private FileSystemPath myHostPath;
    public ReSharperZonePreferenceStore(HostInfo hostInfo);
    public sealed virtual bool IsEnabled(string zoneName);
    public void SetEnabled(string zoneName, bool value);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.RunningProducts : object {
    [NotNullAttribute]
[GuardAttribute("1")]
[ObsoleteAttribute("We'll now have the single IProductNameAndVersion for all co-running products, so you should use the single ShellContainerComposed value.")]
public DictionaryEvents`2<IApplicationHost, IComponentContainer> ProductContainersComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
[ObsoleteAttribute("We'll now have the single IProductNameAndVersion for all co-running products, so you should use the single ShellContainerNonComposed value.")]
public DictionaryEvents`2<IApplicationHost, IComponentContainer> ProductContainersNonComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> ShellContainerComposed;
    [NotNullAttribute]
[GuardAttribute("1")]
public IProperty`1<IComponentContainer> ShellContainerNonComposed;
    public RunningProducts(Lifetime lifetime, IApplicationHost productForLegacyCollection, ILogger logger);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.RunsProducts : object {
    public static string ShellContainerId;
    private static ReadonlyToken myReadonlyToken;
    public static string PerformanceMarkerStartShellContainer;
    public static string PerformanceMarkerFinishShellContainer;
    private static ILogger ourPerformanceLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollection`1<ZonePart>> <TimebombedZones>k__BackingField;
    [NotNullAttribute]
public IProperty`1<ICollection`1<ZonePart>> TimebombedZones { get; }
    public RunsProducts(Lifetime lifetime, JetEnvironmentZones zones, ReportsProductsAllowedToRun reportsProductsAllowedToRun, JetEnvironment environment, RunningProducts runningProducts, ILogger logger, ZoneLicenseChecker zoneLicenseChecker, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ITimebombZoneFilter timebombZoneFilter, IInitializationStrategyProvider initializationStrategyProvider, IThreading threading, IEnumerable`1<IShellComponentContainerExtender> shellComponentContainerExtenders, IAsyncComposeManager asyncComposeManager);
    private static RunsProducts();
    [CompilerGeneratedAttribute]
public IProperty`1<ICollection`1<ZonePart>> get_TimebombedZones();
    private static JetHashSet`1<ZonePart> CollectModuleZonesForShell(JetEnvironmentZones zones, JetEnvironment environment, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ITimebombZoneFilter timebombZoneFilter, ZoneLicenseChecker zoneLicenseChecker, ILogger logger);
    [NotNullAttribute]
private static ICollection`1<ZonePart> CollectTimebombedShellZones(JetEnvironmentZones zones, JetEnvironment environment, ProductConfigurations productConfigurations, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ZoneLicenseChecker zoneLicenseChecker, ITimebombZoneFilter timebombZoneFilter, ILogger logger);
    private static void RunProduct(Lifetime lifetimeProduct, JetEnvironment environment, JetEnvironmentZones zones, RunningProducts runningProducts, ZoneUserPreferenceChecker zoneUserPreferenceChecker, ITimebombZoneFilter timebombZoneFilter, ZoneLicenseChecker zoneLicenseChecker, IInitializationStrategyProvider myInitializationStrategyProvider, IEnumerable`1<IShellComponentContainerExtender> shellComponentContainerExtenders, IProperty`1<ICollection`1<ZonePart>> timebombedZones, ILogger logger, IThreading threading, IAsyncComposeManager asyncComposeManager);
}
[ShellComponentAttribute("9")]
public class JetBrains.Application.Environment.RunsPublicStaticIntMain : object {
    public RunsPublicStaticIntMain(Lifetime lifetime, IComponentContainer containerParent, IThreading threading, ShellPartCatalogSet catalogset, ApplicationShutdownRequests shutdowner, ILogger logger);
}
public class JetBrains.Application.Environment.ShellPartCatalogSet : object {
    [CompilerGeneratedAttribute]
private PartCatalog <Catalog>k__BackingField;
    public PartCatalog Catalog { get; }
    public ShellPartCatalogSet(PartCatalog& catalog);
    [CompilerGeneratedAttribute]
public sealed virtual PartCatalog get_Catalog();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.ShellStateMonitor : object {
    [CompilerGeneratedAttribute]
private IProperty`1<Pair`2<ShellState, ShellStartType>> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ShellStartType> <NextStartType>k__BackingField;
    public IProperty`1<Pair`2<ShellState, ShellStartType>> State { get; }
    public IProperty`1<ShellStartType> NextStartType { get; }
    public ShellStateMonitor(Lifetime lifetime, RunningProducts runningProducts, ReportsProductsAllowedToRun reportsProductsAllowedToRun, ILogger logger);
    [CompilerGeneratedAttribute]
public IProperty`1<Pair`2<ShellState, ShellStartType>> get_State();
    [CompilerGeneratedAttribute]
public IProperty`1<ShellStartType> get_NextStartType();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.TimebombExplosionReporter : object {
    public TimebombExplosionReporter(Lifetime lifetime, RunsProducts runsProducts, ILogger logger, IEnumerable`1<ITimebombExplosionReporter> reporters);
    [CanBeNullAttribute]
private static string TryFetchProductName(ZonePart zonePart);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Environment.TimebombZoneFilter : object {
    private ILogger myLogger;
    private JetHashSet`1<AssemblyNameInfo> myAllowedAssemblyNameInfos;
    private static string ProductPresentableNamePropName;
    [CompilerGeneratedAttribute]
private bool <HasTimebombedPackages>k__BackingField;
    public bool HasTimebombedPackages { get; }
    public TimebombZoneFilter(Lifetime lifetime, ILogger logger, IEnumerable`1<ApplicationPackageArtifact> applicationPackages);
    private static TimebombZoneFilter();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasTimebombedPackages();
    public sealed virtual bool IsZoneAllowed(ZonePart zonePart);
}
[BaseTypeRequiredAttribute("JetBrains.Application.Environment.IActivateBase")]
public class JetBrains.Application.Environment.ZoneActivatorAttribute : EnvironmentComponentAttribute {
    public ZoneActivatorAttribute(Instantiation instantiation);
}
[EnvironmentComponentAttribute("2")]
public class JetBrains.Application.Environment.ZoneUserPreferenceChecker : object {
    [CompilerGeneratedAttribute]
private EnvironmentZonesExtra <ZonesExtra>k__BackingField;
    public JetEnvironmentZones Zones;
    private ZoneUserPreferenceStore myZoneUserPreferenceStore;
    [CompilerGeneratedAttribute]
private List`1<CheckableZone> <CheckableZones>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ZonePart> <CheckableZonesSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ZonesReady>k__BackingField;
    private EnvironmentZonesExtra ZonesExtra { get; }
    public List`1<CheckableZone> CheckableZones { get; private set; }
    public HashSet`1<ZonePart> CheckableZonesSet { get; private set; }
    public bool ZonesReady { get; private set; }
    public ZoneUserPreferenceChecker(JetEnvironmentZones zones, ZoneUserPreferenceStore zoneUserPreferenceStore, EnvironmentZonesExtra zonesExtra);
    [CompilerGeneratedAttribute]
private EnvironmentZonesExtra get_ZonesExtra();
    [CompilerGeneratedAttribute]
public List`1<CheckableZone> get_CheckableZones();
    [CompilerGeneratedAttribute]
private void set_CheckableZones(List`1<CheckableZone> value);
    [CompilerGeneratedAttribute]
public HashSet`1<ZonePart> get_CheckableZonesSet();
    [CompilerGeneratedAttribute]
private void set_CheckableZonesSet(HashSet`1<ZonePart> value);
    [CompilerGeneratedAttribute]
public bool get_ZonesReady();
    [CompilerGeneratedAttribute]
private void set_ZonesReady(bool value);
    public bool IsZoneExplicitlyExcluded(ZonePart zonePart);
    private bool IsDependent(CheckableZone zoneBase, CheckableZone zone);
    public void Save();
    public void PrepareZonesForProductLifetime(Lifetime productLifetime);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Environment.ZoneUserPreferenceStore : object {
    private static string SerializedRootListName;
    [CompilerGeneratedAttribute]
private JetHashSet`1<StringSource> <DisabledZonesSet>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<StringSource> <ForceEnabledZonesSet>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeFileThrowAwayAccess <DisabledFeaturesAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeFileThrowAwayAccess <ForceEnabledFeaturesAccess>k__BackingField;
    private bool myWereChangesWhilePreviousSave;
    public static string DisableFeaturesFileName;
    public static string EnableFeaturesFileName;
    private JetHashSet`1<StringSource> DisabledZonesSet { get; }
    private JetHashSet`1<StringSource> ForceEnabledZonesSet { get; }
    private SafeFileThrowAwayAccess DisabledFeaturesAccess { get; }
    private SafeFileThrowAwayAccess ForceEnabledFeaturesAccess { get; }
    public ZoneUserPreferenceStore(IAnyProductSettingsLocation productSettingsLocation, IProductCommandLine productCommandLine, FileSystemPath customSettingsDirOverride);
    private static ZoneUserPreferenceStore();
    [CompilerGeneratedAttribute]
private JetHashSet`1<StringSource> get_DisabledZonesSet();
    [CompilerGeneratedAttribute]
private JetHashSet`1<StringSource> get_ForceEnabledZonesSet();
    [CompilerGeneratedAttribute]
private SafeFileThrowAwayAccess get_DisabledFeaturesAccess();
    [CompilerGeneratedAttribute]
private SafeFileThrowAwayAccess get_ForceEnabledFeaturesAccess();
    [NotNullAttribute]
protected virtual Stream GetPrebuiltDisabledFeaturesStream();
    protected static bool DisableOrEnableFilesExistInDirectory(FileSystemPath directory);
    private void LoadDisabledStream(Stream stream);
    private void LoadEnabledStream(Stream stream);
    public virtual bool IsZoneExplicitlyExcluded(ZonePart zonePart);
    public virtual void Save(IList`1<CheckableZone> checkableZones);
    public static FileSystemPath GetHostFeatureFilesLocation(IAnyProductSettingsLocation productSettingsLocation);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.EventBus.EventBusComponent : object {
    [NotNullAttribute]
private EventBusImpl myEventBus;
    public sealed virtual void Invoke(EventId`1<T> eventId, T args);
    public sealed virtual IEventContext InvokeStartFinish(EventId`1<TStartArgs> startEventId, EventId`1<TFinishArgs> finishEventId, TStartArgs args, Func`1<TFinishArgs> finishArgs);
    public sealed virtual IEventRef`1<T> Event(EventId`1<T> eventId);
    public sealed virtual IEventRef`1<T> Event();
    public sealed virtual void Dispose();
}
[IsReadOnlyAttribute]
public class JetBrains.Application.ExceptionReport.AccessTokenInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <AccessTokenExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [NotNullAttribute]
public string AccessToken { get; }
    public DateTime AccessTokenExpirationTime { get; }
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string RefreshToken { get; }
    public AccessTokenInfo(string accessToken, string name, string refreshToken, DateTime accessTokenExpirationTime);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public DateTime get_AccessTokenExpirationTime();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
}
public static class JetBrains.Application.ExceptionReport.AutoSubmitterExtensions : object {
    private static string ShouldAutomaticallySubmitEnv;
    private static string AutoSubmitExcludeNamespacesEnv;
    private static Lazy`1<IReadOnlyList`1<string>> ourExclusionNamespaces;
    private static AutoSubmitterExtensions();
    public static bool ShouldSubmitAutomatically();
    public static bool IsExceptionNamespaceWhitelisted(ExceptionData exceptionData);
    private static string BuildNodeText(MethodNode methodNode);
    private static string BuildNodeText(IdentifierNode identifierNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.BuildDescriptionExceptionReportDataProvider : object {
    [CompilerGeneratedAttribute]
private ProductConfigurations <myProductConfigurations>P;
    [CompilerGeneratedAttribute]
private IHostProductInfo <myHostProduct>P;
    [CompilerGeneratedAttribute]
private SubProducts <mySubProducts>P;
    public BuildDescriptionExceptionReportDataProvider(ProductConfigurations myProductConfigurations, IHostProductInfo myHostProduct, SubProducts mySubProducts);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
}
public abstract class JetBrains.Application.ExceptionReport.ByOneExceptionSubmitterBase : ExceptionSubmitterBase {
    protected ByOneExceptionSubmitterBase(IThreading threading);
}
public enum JetBrains.Application.ExceptionReport.CredentialsVerificationResult : Enum {
    public int value__;
    public static CredentialsVerificationResult Ok;
    public static CredentialsVerificationResult UserNameProblem;
    public static CredentialsVerificationResult PasswordProblem;
    public static CredentialsVerificationResult UserNameOrPasswordProblem;
    public static CredentialsVerificationResult OtherProblem;
}
public class JetBrains.Application.ExceptionReport.DefaultExceptionReportService : object {
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Log(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Notify(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.RequireAction(ExceptionData exception);
}
internal class JetBrains.Application.ExceptionReport.DiffDataInt : object {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Boolean[] <Modified>k__BackingField;
    public int Length { get; }
    public Int32[] Data { get; }
    public Boolean[] Modified { get; }
    internal DiffDataInt(Int32[] initData);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public Int32[] get_Data();
    [CompilerGeneratedAttribute]
public Boolean[] get_Modified();
}
public class JetBrains.Application.ExceptionReport.EditedExceptionText : object {
    [CompilerGeneratedAttribute]
private string <ExceptionText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SensitiveDataText>k__BackingField;
    public string ExceptionText { get; public set; }
    public string Summary { get; public set; }
    public string SensitiveDataText { get; public set; }
    public EditedExceptionText(string exceptionSummary, string exceptionText, string sensitiveDataText);
    [CompilerGeneratedAttribute]
public string get_ExceptionText();
    [CompilerGeneratedAttribute]
public void set_ExceptionText(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_SensitiveDataText();
    [CompilerGeneratedAttribute]
public void set_SensitiveDataText(string value);
}
public class JetBrains.Application.ExceptionReport.ExceptionAnalyzer.ExceptionStatusBarIndicator : object {
    public static double Priority;
    [CanBeNullAttribute]
private JetStatusBarIndicator myStatusBarIndicator;
    private StatusBarIndicatorState myStatusBarIndicatorState;
    private ExceptionManager myExceptionManager;
    private IIssueTracker myIssueTracker;
    private Lifetime myLifetime;
    private IThreading myInvocator;
    private SequentialLifetimes myBlinkerLifetimes;
    private Action myStatusBarIndicatorClickAction;
    private IShellExceptionReportComponent myShellExceptionReportComponent;
    private IExceptionSubmitter myExceptionSubmitter;
    public ExceptionStatusBarIndicator(Lifetime lifetime, IShellExceptionReportComponent shellExceptionReportComponent, IExceptionSubmitter exceptionSubmitter, ExceptionManager exceptionManager, IIssueTracker issueTracker, IStatusBar statusBar, IThreading invocator, ShellSubmitToTrackerExceptionReportService reportService, Action statusBarIndicatorClickAction);
    public void SetSubmissionInProgressState(int exceptionsBeingSubmittedCount, bool automatic);
    public void SetSubmissionSuccessfulState(int submittedExceptionsCount);
    public void StopBlinking();
    public void OnExceptionBrowserShown();
    public void UpdateIndicatorState(bool hideIndicator);
    protected virtual void OnContextMenu(ContextMenuEventArgs args);
    public void HideIndicator();
    private void ShowIndicator(IconId icon, RichText tooltip);
    public void BlinkIndicatorIfNecessary();
    private void BlinkIndicator();
    private bool CreateStatusBarIndicator(Lifetime lifetime, IStatusBar statusBar);
    [CompilerGeneratedAttribute]
private void <CreateStatusBarIndicator>b__22_0(JetStatusBarClickEventArgs args);
}
public interface JetBrains.Application.ExceptionReport.ExceptionAnalyzer.IShellExceptionReportComponent {
    public int ExceptionCount { get; }
    public IProperty`1<bool> SubmitPrivatelyProperty { get; }
    public IProperty`1<bool> AttachSensitiveData { get; }
    public WebProxySettingsReader ProxySettings { get; }
    public IProperty`1<LoginInformation> LoginInformationProperty { get; }
    public abstract virtual int get_ExceptionCount();
    public abstract virtual IProperty`1<bool> get_SubmitPrivatelyProperty();
    public abstract virtual IProperty`1<bool> get_AttachSensitiveData();
    public abstract virtual WebProxySettingsReader get_ProxySettings();
    public abstract virtual IProperty`1<LoginInformation> get_LoginInformationProperty();
    public abstract virtual void HideNotifier();
    public abstract virtual void ShowExceptionBrowser(bool showSubmittedPage);
}
public enum JetBrains.Application.ExceptionReport.ExceptionAnalyzer.StatusBarIndicatorState : Enum {
    public int value__;
    public static StatusBarIndicatorState NoExceptions;
    public static StatusBarIndicatorState ReadException;
    public static StatusBarIndicatorState NewException;
    public static StatusBarIndicatorState AutomaticSubmissionInProgress;
    public static StatusBarIndicatorState UserSubmissionInProgress;
    public static StatusBarIndicatorState ExceptionsSubmitted;
}
public class JetBrains.Application.ExceptionReport.ExceptionData : PersistableExceptionData {
    public ISignal`1<ExceptionData> Changed;
    public ISimpleSignal ChangedSimple;
    public IProperty`1<EditedExceptionText> EditedTextProperty;
    private Exception myException;
    private LifetimeDefinition myExceptionLifetime;
    public IProperty`1<int> NumberOfTimesHappenedProperty;
    public IProperty`1<ExceptionSubmissionResult> ServerActionProperty;
    [CompilerGeneratedAttribute]
private IProperty`1<ExceptionDataStatus> <StatusProperty>k__BackingField;
    public IProperty`1<DateTime> WhenLastHappenedProperty;
    public IProperty`1<ExceptionDataStatus> StatusProperty { get; private set; }
    public Lifetime ExceptionLifetime { get; }
    public bool IsPending { get; }
    public string FullSensitiveData { get; }
    [CanBeNullAttribute]
public Exception Exception { get; public set; }
    public ExceptionData(Lifetime lifetime, Exception exception, JetSemanticVersion productVersion, Nullable`1<DateTime> whenHappened);
    public ExceptionData(Lifetime lifetime, PersistableExceptionData persistableExceptionData);
    [CompilerGeneratedAttribute]
public IProperty`1<ExceptionDataStatus> get_StatusProperty();
    [CompilerGeneratedAttribute]
private void set_StatusProperty(IProperty`1<ExceptionDataStatus> value);
    public Lifetime get_ExceptionLifetime();
    public bool get_IsPending();
    public string get_FullSensitiveData();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    private void AddDataFromPreviousException();
    private void Init(Lifetime lifetime, Nullable`1<DateTime> whenHappened);
    public void TerminateLifetime();
    private void UpdateFields(PersistableExceptionData persistableExceptionData);
    public void UpdateWith(PersistableExceptionData persistableExceptionData);
    public PersistableExceptionData ToPersistableExceptionData();
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__24_1(PropertyChangedEventArgs`1<DateTime> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__24_2(PropertyChangedEventArgs`1<int> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__24_3(PropertyChangedEventArgs`1<ExceptionDataStatus> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__24_4(PropertyChangedEventArgs`1<EditedExceptionText> args);
    [CompilerGeneratedAttribute]
private ExceptionData <Init>b__24_5(PropertyChangedEventArgs`1<ExceptionSubmissionResult> args);
    [CompilerGeneratedAttribute]
private void <Init>b__24_6(PropertyChangedEventArgs`1<ExceptionSubmissionResult> args);
    [CompilerGeneratedAttribute]
private void <Init>b__24_7(PropertyChangedEventArgs`1<EditedExceptionText> args);
}
public class JetBrains.Application.ExceptionReport.ExceptionDataStatus : EnumPattern {
    public static ExceptionDataStatus Created;
    public static ExceptionDataStatus Read;
    public static ExceptionDataStatus Muted;
    public static ExceptionDataStatus SubmissionInProgress;
    public static ExceptionDataStatus Submited;
    public static ExceptionDataStatus SubmittedMuted;
    protected ExceptionDataStatus(string name);
    private static ExceptionDataStatus();
    public static ExceptionDataStatus FromString(string status);
}
public static class JetBrains.Application.ExceptionReport.ExceptionHelper : object {
    private static Regex myRegex;
    private static ExceptionHelper();
    public static string FilterExceptionString(string s);
    public static string GetExceptionHash(string excString);
    public static string GetExceptionHash(Exception exception);
    public static string FormatStackTrace(Exception e);
    public static string GetExceptionSummary(Exception e);
    private static MethodBase GetFailedMethod(Exception exception);
    private static string GetActualExceptionType(Exception exception);
    private static string GetSummary(Exception exception);
    private static string NormalizeSummaryString(string summaryString);
}
public class JetBrains.Application.ExceptionReport.ExceptionManager : RecursiveFileSystemChangeDeltaVisitor {
    public static int NumberOfExceptionsToStore;
    private Lifetime myLifetime;
    private ReentrancyGuard myGuard;
    private ICollectionEvents`1<ExceptionData> myExceptions;
    private Func`3<PersistableExceptionData, PersistableExceptionData, bool> myExceptionDataEqualityComparer;
    private ExceptionStackTraceCache myExceptionStackTraceCache;
    private ExceptionStorageLocator myStorageLocator;
    private Timer myLoadTimer;
    [CanBeNullAttribute]
private IHostProductInfo myHostProductInfo;
    [CanBeNullAttribute]
private IFileSystemTracker myFileSystemTracker;
    [CanBeNullAttribute]
private IProperty`1<bool> myWatchExceptionStorage;
    [CanBeNullAttribute]
private IExceptionStorageBehavior myExceptionStorageBehavior;
    private bool myIsUpToDate;
    public ISimpleSignal ExceptionsLoaded;
    [CompilerGeneratedAttribute]
private int <PendingCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnreadCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadCountProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubmitInProgressCountProperty>k__BackingField;
    public ICollectionEvents`1<ExceptionData> Exceptions { get; }
    private bool StoreExceptions { get; }
    public int PendingCountProperty { get; private set; }
    public int UnreadCountProperty { get; private set; }
    public int ReadCountProperty { get; private set; }
    public int SubmitInProgressCountProperty { get; private set; }
    public ExceptionManager(Lifetime lifetime, ExceptionStorageLocator storageLocator, IFileSystemTracker fileSystemTracker, IProperty`1<bool> watchExceptionStorage, IExceptionStorageBehavior exceptionStorageBehavior, IHostProductInfo hostProductInfo, Func`3<PersistableExceptionData, PersistableExceptionData, bool> exceptionComparer);
    public static Func`3<PersistableExceptionData, PersistableExceptionData, bool> CreateDefaultExceptionComparer(ExceptionStackTraceCache exceptionStackTraceCache);
    private void UpdateCounters();
    public virtual void Visit(FileSystemChangeDelta delta);
    private void OnFileSystemChanged(FileSystemChangeDelta fileSystemChange);
    public ICollectionEvents`1<ExceptionData> get_Exceptions();
    public ExceptionData CreateExceptionData(Exception exception);
    private JetSemanticVersion GetVersionForException();
    public bool Compare(PersistableExceptionData x, PersistableExceptionData y);
    private bool get_StoreExceptions();
    private void Load();
    private void ProcessAdd(ExceptionData newExceptionData);
    private static FileSystemPath GetRandomFileName(FileSystemPath storagePath);
    private void ProcessRemove(PersistableExceptionData oldExceptionData);
    private void DeleteExceptionData(PersistableExceptionData oldExceptionData);
    private void ProcessChange(ExceptionData exception);
    private void Cleanup();
    public ICollection`1<ExceptionData> GetNewExceptions();
    public ICollection`1<ExceptionData> GetPendingExceptions();
    private int PendingCount();
    [CompilerGeneratedAttribute]
public int get_PendingCountProperty();
    [CompilerGeneratedAttribute]
private void set_PendingCountProperty(int value);
    private int UnreadCount();
    [CompilerGeneratedAttribute]
public int get_UnreadCountProperty();
    [CompilerGeneratedAttribute]
private void set_UnreadCountProperty(int value);
    private int ReadCount();
    [CompilerGeneratedAttribute]
public int get_ReadCountProperty();
    [CompilerGeneratedAttribute]
private void set_ReadCountProperty(int value);
    private int SubmitInProgressCount();
    [CompilerGeneratedAttribute]
public int get_SubmitInProgressCountProperty();
    [CompilerGeneratedAttribute]
private void set_SubmitInProgressCountProperty(int value);
    private int ExceptionCount(Func`2<ExceptionData, bool> predicate);
    private static bool IsPending(ExceptionData e);
    private static bool IsUnread(ExceptionData e);
    private static bool IsSubmitInProgress(ExceptionData e);
    private static bool IsRead(ExceptionData e);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_1(object sender, ElapsedEventArgs args);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.ExceptionReportAutomaticTagsProvider : object {
    public virtual IEnumerable`1<string> GetTags();
}
public abstract class JetBrains.Application.ExceptionReport.ExceptionReportComponentBase : object {
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <ProxySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LoginInformation> <LoginInformationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UserCommentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SubmitPrivatelyProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowBrowserFormAfterSubmission>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SubmitAutomatically>k__BackingField;
    private TimeSpan mySubmitAutomaticallyInterval;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <StoreExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <WatchExceptionStorage>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AttachSensitiveData>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportAttachmentPartsContainer <ReportAttachmentParts>k__BackingField;
    [CompilerGeneratedAttribute]
private IIsApplicationActiveState <IsApplicationActiveState>k__BackingField;
    [CompilerGeneratedAttribute]
private OpensUri <OpensUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Clipboard <Clipboard>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueTracker <IssueTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private IMainWindow <MainWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsHookManager <WindowsHookManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionManager <ExceptionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionStatusBarIndicator <StatusBarIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionReportingIconSet <ExceptionReportingIconSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IStatusBar <StatusBar>k__BackingField;
    [CompilerGeneratedAttribute]
private UIExceptionSubmitterBase <ExceptionSubmitter>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductConfigurations <ProductConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionBarManager <ActionBarManager>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentifierPartsContainer <UserIdentifierPartsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ShellSubmitToTrackerExceptionReportService <ReportService>k__BackingField;
    [CompilerGeneratedAttribute]
private JetBrainsResourceMappingAccessor <ResourceMappingAccessor>k__BackingField;
    [NotNullAttribute]
[ItemNotNullAttribute]
private IReadOnlyList`1<string> myAutomaticReportingTags;
    [CompilerGeneratedAttribute]
private bool <IsUiActive>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ExceptionData> <ExceptionSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IEnumerable`1<ExceptionData>> <ExceptionsSubmittedSignal>k__BackingField;
    [NotNullAttribute]
public WebProxySettingsReader ProxySettings { get; }
    [NotNullAttribute]
public IProperty`1<LoginInformation> LoginInformationProperty { get; }
    [NotNullAttribute]
public IProperty`1<string> UserCommentProperty { get; }
    [NotNullAttribute]
public IProperty`1<bool> SubmitPrivatelyProperty { get; }
    [NotNullAttribute]
public IProperty`1<bool> ShowBrowserFormAfterSubmission { get; }
    [NotNullAttribute]
public IProperty`1<bool> SubmitAutomatically { get; }
    [NotNullAttribute]
public IProperty`1<bool> StoreExceptions { get; }
    [NotNullAttribute]
public IProperty`1<bool> WatchExceptionStorage { get; }
    [NotNullAttribute]
public IProperty`1<bool> AttachSensitiveData { get; }
    public Lifetime Lifetime { get; }
    protected ReportAttachmentPartsContainer ReportAttachmentParts { get; }
    protected IIsApplicationActiveState IsApplicationActiveState { get; }
    protected OpensUri OpensUri { get; }
    protected Clipboard Clipboard { get; }
    protected IUIApplication Environment { get; }
    [NotNullAttribute]
protected IIssueTracker IssueTracker { get; }
    [CanBeNullAttribute]
protected IMainWindow MainWindow { get; }
    [CanBeNullAttribute]
protected IWindowsHookManager WindowsHookManager { get; }
    public ExceptionManager ExceptionManager { get; }
    protected ExceptionStatusBarIndicator StatusBarIndicator { get; }
    protected ExceptionReportingIconSet ExceptionReportingIconSet { get; }
    protected IStatusBar StatusBar { get; }
    protected UIExceptionSubmitterBase ExceptionSubmitter { get; }
    protected ProductConfigurations ProductConfigurations { get; }
    protected IActionBarManager ActionBarManager { get; }
    [NotNullAttribute]
protected UserIdentifierPartsContainer UserIdentifierPartsContainer { get; }
    protected ShellSubmitToTrackerExceptionReportService ReportService { get; }
    [CanBeNullAttribute]
protected JetBrainsResourceMappingAccessor ResourceMappingAccessor { get; }
    public bool IsUiActive { get; private set; }
    [NotNullAttribute]
public ISignal`1<ExceptionData> ExceptionSignal { get; }
    [NotNullAttribute]
public ISignal`1<IEnumerable`1<ExceptionData>> ExceptionsSubmittedSignal { get; }
    public int ExceptionCount { get; }
    public ICollectionEvents`1<ExceptionData> Exceptions { get; }
    public IExceptionBrowser ExceptionBrowser { get; }
    protected ExceptionReportComponentBase(Lifetime lifetime, ExceptionReportingIconSet exceptionReportingIconSet, IMainWindow mainWin, AnyProductSettingsLocation settingsLocation, IStatusBar statusBar, IImmutableList`1<IExceptionReportDataProvider> exceptionReportDataProviders, IIsApplicationActiveState isApplicationActiveState, UITaskExecutor uiTaskExecutor, OpensUri opensUri, IWindowsHookManager windowsHookManager, WebProxySettingsReader proxySettings, IFileSystemTracker fileSystemTracker, IExceptionStorageBehavior exceptionStorageBehavior, Clipboard clipboard, IUIApplication environment, ProductConfigurations productConfigurations, ReportAttachmentPartsContainer reportAttachmentParts, UserIdentifierPartsContainer userIdentifierPartsContainer, IHostProductInfo hostProductInfo, IIssueTracker issueTracker, IActionBarManager actionBarManager, IsModeReportExceptionsComponent isModeReportExceptionsComponent, JetBrainsResourceMappingAccessor resourceMappingAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual WebProxySettingsReader get_ProxySettings();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LoginInformation> get_LoginInformationProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UserCommentProperty();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_SubmitPrivatelyProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowBrowserFormAfterSubmission();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SubmitAutomatically();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_StoreExceptions();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_WatchExceptionStorage();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_AttachSensitiveData();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
protected ReportAttachmentPartsContainer get_ReportAttachmentParts();
    [CompilerGeneratedAttribute]
protected IIsApplicationActiveState get_IsApplicationActiveState();
    [CompilerGeneratedAttribute]
protected OpensUri get_OpensUri();
    [CompilerGeneratedAttribute]
protected Clipboard get_Clipboard();
    [CompilerGeneratedAttribute]
protected IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
protected IIssueTracker get_IssueTracker();
    [CompilerGeneratedAttribute]
protected IMainWindow get_MainWindow();
    [CompilerGeneratedAttribute]
protected IWindowsHookManager get_WindowsHookManager();
    [CompilerGeneratedAttribute]
public ExceptionManager get_ExceptionManager();
    [CompilerGeneratedAttribute]
protected ExceptionStatusBarIndicator get_StatusBarIndicator();
    [CompilerGeneratedAttribute]
protected ExceptionReportingIconSet get_ExceptionReportingIconSet();
    [CompilerGeneratedAttribute]
protected IStatusBar get_StatusBar();
    [CompilerGeneratedAttribute]
protected UIExceptionSubmitterBase get_ExceptionSubmitter();
    [CompilerGeneratedAttribute]
protected ProductConfigurations get_ProductConfigurations();
    [CompilerGeneratedAttribute]
protected IActionBarManager get_ActionBarManager();
    [CompilerGeneratedAttribute]
protected UserIdentifierPartsContainer get_UserIdentifierPartsContainer();
    [CompilerGeneratedAttribute]
protected ShellSubmitToTrackerExceptionReportService get_ReportService();
    [CompilerGeneratedAttribute]
protected JetBrainsResourceMappingAccessor get_ResourceMappingAccessor();
    protected virtual void UpdateStatusIndicator();
    private void ProcessNewExceptions(IIssueTracker issueTracker, Lifetime asyncLifetime, bool isOnTermination, Action`1<ICollection`1<ExceptionData>> continuation);
    protected abstract virtual ShellSubmitToTrackerExceptionReportService ShellSubmitToTrackerExceptionReportServiceFactory();
    protected abstract virtual UIExceptionSubmitterBase SubmitterFactory();
    public abstract virtual void HideNotifier();
    [CompilerGeneratedAttribute]
public bool get_IsUiActive();
    [CompilerGeneratedAttribute]
private void set_IsUiActive(bool value);
    [CompilerGeneratedAttribute]
public ISignal`1<ExceptionData> get_ExceptionSignal();
    [CompilerGeneratedAttribute]
public ISignal`1<IEnumerable`1<ExceptionData>> get_ExceptionsSubmittedSignal();
    public sealed virtual int get_ExceptionCount();
    public ICollectionEvents`1<ExceptionData> get_Exceptions();
    public void StopBlinking();
    public abstract virtual void OnRegisterException(ExceptionData exception);
    public void RegisterException(ExceptionData exception);
    public static bool IsPending(ExceptionData exceptionData);
    protected void OnStatusBarIndicatorClick();
    public virtual void ShowExceptionBrowser(bool showSubmittedPage);
    protected abstract virtual IExceptionBrowser ExceptionBrowserFactory();
    protected virtual ExceptionStatusBarIndicator ExceptionStatusBarIndicatorFactory();
    public IExceptionBrowser get_ExceptionBrowser();
    protected abstract virtual void OnSubmittingExceptionInternal(List`1<ExceptionData> submittedExceptions, bool addDispose);
    private void SubmitExceptionsInternal(string description, bool submitPrivately, bool attachSensitiveData, IIssueTracker issueTracker, IThreading threading, WebProxySettingsReader proxySettingsReader, LoginInformation loginInformation, ICollection`1<ExceptionData> exceptions, IProgressIndicator progressIndicator, bool isOnTermination, Action`1<ICollection`1<ExceptionData>> continuation);
    [CompilerGeneratedAttribute]
internal static IDataContext <.ctor>g__DataContextFunc|86_3(Lifetime _, DataContexts c);
    [CompilerGeneratedAttribute]
private void <UpdateStatusIndicator>b__87_0();
}
public class JetBrains.Application.ExceptionReport.ExceptionReporterIdentifierScheme : ValueType {
    [CompilerGeneratedAttribute]
private string <UserConfigScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentUserIdentifier>k__BackingField;
    public static ExceptionReporterIdentifierScheme Default;
    public string UserConfigScheme { get; public set; }
    public string CurrentUserIdentifier { get; public set; }
    public ExceptionReporterIdentifierScheme(string UserConfigScheme, string CurrentUserIdentifier);
    private static ExceptionReporterIdentifierScheme();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_UserConfigScheme();
    [CompilerGeneratedAttribute]
public void set_UserConfigScheme(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CurrentUserIdentifier();
    [CompilerGeneratedAttribute]
public void set_CurrentUserIdentifier(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ExceptionReporterIdentifierScheme left, ExceptionReporterIdentifierScheme right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ExceptionReporterIdentifierScheme left, ExceptionReporterIdentifierScheme right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ExceptionReporterIdentifierScheme other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& UserConfigScheme, String& CurrentUserIdentifier);
}
public class JetBrains.Application.ExceptionReport.ExceptionReporting : object {
    private IApplicationHost myApplicationHost;
    [NotNullAttribute]
private IList`1<StrategyDisposable> myStrategies;
    [CanBeNullAttribute]
private ExceptionManager myExceptionManager;
    [CanBeNullAttribute]
private ITaskHost myTaskHost;
    [CanBeNullAttribute]
private Nullable`1<Lifetime> myLifetimeNullable;
    private bool myReportIrrelevantExceptions;
    [CompilerGeneratedAttribute]
private IExceptionReportService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskExecutor <TaskExecutor>k__BackingField;
    [NotNullAttribute]
private JetDispatcher myDispatcher;
    [NotNullAttribute]
private IEnumerable`1<IExceptionReportDataProvider> myExceptionReportDataProviders;
    [NotNullAttribute]
public IExceptionReportService Service { get; }
    [NotNullAttribute]
public ITaskExecutor TaskExecutor { get; }
    [CanBeNullAttribute]
private IExceptionReportStrategy CurrentStrategy { get; }
    public ExceptionManager ExceptionManager { get; }
    public ExceptionReporting(IExceptionReportService exceptionReportService, ITaskExecutor taskexecutor, IEnumerable`1<IExceptionReportDataProvider> exceptionReportDataProviders, ExceptionManager exceptionManager, Nullable`1<Lifetime> lifetime, ITaskHost taskHost, IExceptionReportStrategy defaultStrategy, bool reportIrrelevantExceptions);
    [CompilerGeneratedAttribute]
public IExceptionReportService get_Service();
    [CompilerGeneratedAttribute]
public ITaskExecutor get_TaskExecutor();
    public IDisposable SetStrategy(IExceptionReportStrategy strategy);
    private IExceptionReportStrategy get_CurrentStrategy();
    public ExceptionManager get_ExceptionManager();
    public bool IsRelevantException(Exception ex);
    public bool IsRelevantStackTrace(string stackTraceString);
    private bool IsRelevant(string text, string companyName, string productName);
    public void Process(Exception exception);
    private void ProcessExceptionInternal(Exception exception);
    private void CollectExceptionData(Exception exception);
    [NotNullAttribute]
public IDisposable AttachToLogger();
}
public class JetBrains.Application.ExceptionReport.ExceptionsReport : ReportBase {
    [CompilerGeneratedAttribute]
private ExceptionData[] <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubmitPrivately>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AttachSensitiveData>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueTracker <IssueTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <WebProxy>k__BackingField;
    public ExceptionData[] Exceptions { get; }
    public string Description { get; }
    public bool SubmitPrivately { get; }
    public bool AttachSensitiveData { get; }
    public IIssueTracker IssueTracker { get; }
    public IWebProxy WebProxy { get; }
    public ExceptionsReport(ExceptionData[] exceptions, string description, bool submitPrivately, bool attachSensitiveData, IIssueTracker issueTracker, IWebProxy webProxy);
    [CompilerGeneratedAttribute]
public ExceptionData[] get_Exceptions();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public bool get_SubmitPrivately();
    [CompilerGeneratedAttribute]
public bool get_AttachSensitiveData();
    [CompilerGeneratedAttribute]
public IIssueTracker get_IssueTracker();
    [CompilerGeneratedAttribute]
public IWebProxy get_WebProxy();
    public virtual string Send(LoginInformation loginInformation, IProgressIndicator progressIndicator, String[]& errors);
}
public class JetBrains.Application.ExceptionReport.ExceptionStackFrame : object {
    [CompilerGeneratedAttribute]
private string <FullyQualifiedTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAnonymous>k__BackingField;
    public string FullyQualifiedTypeName { get; public set; }
    public string MethodName { get; public set; }
    public string Signature { get; public set; }
    public int Index { get; public set; }
    public int Id { get; public set; }
    public bool IsAnonymous { get; }
    public ExceptionStackFrame(int id, string fullyQualifiedTypeName, string methodName, string signature, int index, bool isAnonymous);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedTypeName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public bool get_IsAnonymous();
    public string GetFrameType();
    public sealed virtual bool Equals(ExceptionStackFrame stackFrame);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public class JetBrains.Application.ExceptionReport.ExceptionStackTrace : object {
    private FastIntDiffProvider myProvider;
    private IWeightedSimilarityProvider mySimilarityProvider;
    [CompilerGeneratedAttribute]
private List`1<ExceptionStackFrame> <Frames>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <FrameIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExceptionClasses>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExceptionMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Int32[]> <ExceptionMessagesRaw>k__BackingField;
    public List`1<ExceptionStackFrame> Frames { get; public set; }
    public Int32[] FrameIds { get; public set; }
    public List`1<string> ExceptionClasses { get; public set; }
    protected List`1<string> ExceptionMessages { get; protected set; }
    protected List`1<Int32[]> ExceptionMessagesRaw { get; protected set; }
    [CompilerGeneratedAttribute]
public List`1<ExceptionStackFrame> get_Frames();
    [CompilerGeneratedAttribute]
public void set_Frames(List`1<ExceptionStackFrame> value);
    [CompilerGeneratedAttribute]
public Int32[] get_FrameIds();
    [CompilerGeneratedAttribute]
public void set_FrameIds(Int32[] value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExceptionClasses();
    [CompilerGeneratedAttribute]
public void set_ExceptionClasses(List`1<string> value);
    [CompilerGeneratedAttribute]
protected List`1<string> get_ExceptionMessages();
    [CompilerGeneratedAttribute]
protected void set_ExceptionMessages(List`1<string> value);
    [CompilerGeneratedAttribute]
protected List`1<Int32[]> get_ExceptionMessagesRaw();
    [CompilerGeneratedAttribute]
protected void set_ExceptionMessagesRaw(List`1<Int32[]> value);
    public void AddExceptionMessage(string message);
    public int ExceptionMessagesCount();
    public sealed virtual bool Equals(ExceptionStackTrace other);
    private bool CheckStackTraceEquality(ExceptionStackTrace other);
    private bool CheckMessageEquality(ExceptionStackTrace other);
    public static double GetSimilarity(IList`1<DiffFragment> fragments, int oldLength, int newLength, IWeightedSimilarityProvider similarityProvider);
}
public class JetBrains.Application.ExceptionReport.ExceptionStackTraceCache : object {
    private Dictionary`2<PersistableExceptionData, ExceptionStackTrace> myCache;
    private JetHashSet`1<ExceptionStackFrame> myFrameIndex;
    private int myCurrentId;
    public ExceptionStackTraceCache(Lifetime lifetime, ExceptionManager exceptionManager);
    public sealed virtual void Dispose();
    public ExceptionStackFrame GetStackFrame(string fqtn, string method, string parameters, int index, bool isAnonymous);
    public ExceptionStackTrace GetStackTrace(PersistableExceptionData data);
    public void RemoveCachedStackTrace(PersistableExceptionData data);
    private void Cleanup();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(AddRemoveEventArgs`1<ExceptionData> args);
}
public static class JetBrains.Application.ExceptionReport.ExceptionStackTraceParser : object {
    private static Regex ourExceptionClassesRegex;
    private static Regex ourExceptionMessagesRegex;
    private static Regex ourAnonymousFQTNRegex;
    private static Regex ourAnonymousMethodNameRegex;
    private static Regex ourAnonymousConstructorRegex;
    private static Regex ourNewExceptionStartRegex;
    private static string NEW_EXCEPTION_START;
    private static ExceptionStackTraceParser();
    public static ExceptionStackTrace Parse(string text, bool needExceptionClasses, bool needExceptionMessages, ExceptionStackTraceCache exceptionStackTraceCache);
    private static void ParseExceptionNew(string text, ExceptionStackTrace stackTrace, bool needExceptionMessages, ExceptionStackTraceCache cache);
    private static void ParseExceptionOld(string text, ExceptionStackTrace stackTrace, ExceptionStackTraceCache cache);
    [CanBeNullAttribute]
public static ExceptionStackFrame[] Parse(string text);
    private static string DumpParameters(CompositeNode list);
    private static string MakeTypeName(IdentifierNode identifierNode);
}
public abstract class JetBrains.Application.ExceptionReport.ExceptionStorageLocator : object {
    protected static string ExceptionStorage;
    public bool StoresExceptions { get; }
    public virtual bool get_StoresExceptions();
    public abstract virtual FileSystemPath GetStorageLocation();
}
public enum JetBrains.Application.ExceptionReport.ExceptionSubmissionAction : Enum {
    public int value__;
    public static ExceptionSubmissionAction NewIssue;
    public static ExceptionSubmissionAction Comment;
}
public class JetBrains.Application.ExceptionReport.ExceptionSubmissionResult : object {
    [CompilerGeneratedAttribute]
private string <IssueId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <IssueUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionSubmissionStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionSubmissionAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <WhenSubmitted>k__BackingField;
    public string IssueId { get; private set; }
    public Uri IssueUri { get; private set; }
    public string Message { get; public set; }
    public ExceptionSubmissionStatus Status { get; private set; }
    public ExceptionSubmissionAction Action { get; private set; }
    public DateTime WhenSubmitted { get; private set; }
    [CompilerGeneratedAttribute]
public string get_IssueId();
    [CompilerGeneratedAttribute]
private void set_IssueId(string value);
    [CompilerGeneratedAttribute]
public Uri get_IssueUri();
    [CompilerGeneratedAttribute]
private void set_IssueUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public ExceptionSubmissionStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(ExceptionSubmissionStatus value);
    [CompilerGeneratedAttribute]
public ExceptionSubmissionAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(ExceptionSubmissionAction value);
    [CompilerGeneratedAttribute]
public DateTime get_WhenSubmitted();
    [CompilerGeneratedAttribute]
private void set_WhenSubmitted(DateTime value);
    public static ExceptionSubmissionResult CreateSuccess(string issueId, string message, ExceptionSubmissionAction action, Uri uri);
    public static ExceptionSubmissionResult CreateLoginProblem(string message);
    public static ExceptionSubmissionResult CreateConnectionProblem(string message);
    public static ExceptionSubmissionResult CreateContentProblem(string message);
}
public enum JetBrains.Application.ExceptionReport.ExceptionSubmissionStatus : Enum {
    public int value__;
    public static ExceptionSubmissionStatus Success;
    public static ExceptionSubmissionStatus LoginProblem;
    public static ExceptionSubmissionStatus ConnectionProblem;
    public static ExceptionSubmissionStatus ContentProblem;
}
public abstract class JetBrains.Application.ExceptionReport.ExceptionSubmitterBase : object {
    [CanBeNullAttribute]
protected IThreading Threading;
    protected ExceptionSubmitterBase(IThreading threading);
    protected abstract virtual void OnBeforeExceptionsSubmitted();
    protected virtual void OnAfterExceptionsSubmitted(ExceptionData[] exceptions, Action`1<ExceptionData[]> afterExceptionsSubmitted);
    protected abstract virtual IProgressIndicator CreateProgressIndicator(int workItemCount);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionSubmitter.SubmitException(ExceptionsReport report, LoginInformation loginInformation, Action`1<ExceptionData[]> afterExceptionsSubmitted);
}
[EnvironmentComponentAttribute("73")]
public class JetBrains.Application.ExceptionReport.ExceptionTemporaryShelf : object {
    private SequentialLifetimes mySequentialLifetimes;
    private ConcurrentQueue`1<Exception> myExceptions;
    private ExceptionReporting myReporting;
    public ExceptionTemporaryShelf(Lifetime lifetime);
    public void AttachToLogger();
    private static void AttachToLogger(Lifetime lifetime, ExceptionReporting reporting, ConcurrentQueue`1<Exception> exceptions);
    public void Terminate();
}
[EnvironmentComponentAttribute("2")]
public class JetBrains.Application.ExceptionReport.ExceptionTemporaryShelfActivator : object {
    public ExceptionTemporaryShelfActivator(Lifetime lifetime, ExceptionTemporaryShelf shelf, RunningProducts runningProducts);
}
[ShellComponentAttribute("2")]
public class JetBrains.Application.ExceptionReport.ExceptionTemporaryShelfTerminator : object {
    public ExceptionTemporaryShelfTerminator(ExceptionTemporaryShelf shelf, IEnumerable`1<IPreferredExceptionReportProvider> preferredExceptionReportProviders);
}
internal class JetBrains.Application.ExceptionReport.FastIntDiffProvider : object {
    public double GetSimilarityFast(Int32[] reportFrames, Int32[] problemFrames, IWeightedSimilarityProvider similarityProvider);
    private static void LCSInt(DiffDataInt reportData, int lowerReportData, int upperReportData, DiffDataInt problemData, int lowerProblemData, int upperProblemData, Int32[] downVector, Int32[] upVector);
    private static SMSRD SMSInt(DiffDataInt reportData, int lowerReportData, int upperReportData, DiffDataInt problemData, int lowerProblemData, int upperProblemData, Int32[] downVector, Int32[] upVector);
    private double CalculateSimilarity(DiffDataInt dataA, DiffDataInt dataB, IWeightedSimilarityProvider similarityProvider);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.ExceptionReport.IExceptionReportDataProvider {
    public abstract virtual void ProvideExceptionData(Exception ex);
}
public interface JetBrains.Application.ExceptionReport.IExceptionReportService {
    public abstract virtual void Log(ExceptionData exception);
    public abstract virtual void Notify(ExceptionData exception);
    public abstract virtual void RequireAction(ExceptionData exception);
}
public interface JetBrains.Application.ExceptionReport.IExceptionReportStrategy {
    public abstract virtual void Process(ExceptionData exception, IExceptionReportService service, ITaskExecutor taskExecutor);
}
public interface JetBrains.Application.ExceptionReport.IExceptionStorageBehavior {
    public bool StoreExceptions { get; }
    public abstract virtual bool get_StoreExceptions();
}
public interface JetBrains.Application.ExceptionReport.IExceptionSubmitter {
    public abstract virtual void SubmitException(ExceptionsReport report, LoginInformation loginInformation, Action`1<ExceptionData[]> afterExceptionsSubmitted);
}
public interface JetBrains.Application.ExceptionReport.IIssueTracker {
    unknown bool IsInternal {public set; }
    public abstract virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public abstract virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator, IEnumerable`1<string> tags);
    public abstract virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    public abstract virtual Nullable`1<LoginInformation> Register();
    public abstract virtual Uri GetUrlForAttachmentsUpload();
    public abstract virtual Task`1<string> LoginViaBrowserAsync();
    public abstract virtual AccessTokenInfo GetAccessToken(string refreshToken);
    public abstract virtual void set_IsInternal(bool value);
}
public interface JetBrains.Application.ExceptionReport.IPreferredExceptionReportProvider {
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.ExceptionReport.IsModeReportExceptionsComponent : object {
    private Lazy`1<IProperty`1<bool>> myIsShowingExceptionsToUser;
    public static bool IsModeReportExceptionsCore;
    public IProperty`1<bool> IsShellStartedInInternalMode;
    public IProperty`1<bool> IsShowingExceptionsToUser { get; }
    public IsModeReportExceptionsComponent(ProductConfigurations configs, JetEnvironment environment, ILogger logger);
    private static IsModeReportExceptionsComponent();
    public static bool GetBasedOnType(AssemblyQualifiedTypeName typename, string sTypeHint, ILogger logger);
    public static bool GetBasedOnTypes(ZonePart[] zoneparts, string sTypeHint, ILogger logger);
    public IProperty`1<bool> get_IsShowingExceptionsToUser();
}
public interface JetBrains.Application.ExceptionReport.ISolutionLeakDataProvider {
    public abstract virtual IEnumerable`1<Pair`2<string, object>> GetData();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.LocalizationExceptionReportDataProvider : object {
    public sealed virtual void ProvideExceptionData(Exception ex);
}
public class JetBrains.Application.ExceptionReport.LoginInformation : ValueType {
    private string myUserName;
    [CompilerGeneratedAttribute]
private bool <SubmitAnonymously>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EMail>k__BackingField;
    public bool SubmitAnonymously { get; public set; }
    [NotNullAttribute]
public string UserName { get; public set; }
    [CanBeNullAttribute]
public string AccessToken { get; public set; }
    [CanBeNullAttribute]
public string EMail { get; public set; }
    public bool IsEmpty { get; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SubmitAnonymously();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SubmitAnonymously(bool value);
    public string get_UserName();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UserName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AccessToken(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_EMail();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EMail(string value);
    public bool get_IsEmpty();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.MemoryInfoExceptionReportDataProvider : object {
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
}
public class JetBrains.Application.ExceptionReport.MemoryLeakException : Exception {
    public MemoryLeakException(string message);
}
public class JetBrains.Application.ExceptionReport.NullExceptionStorageLocator : ExceptionStorageLocator {
    public bool StoresExceptions { get; }
    public virtual bool get_StoresExceptions();
    public virtual FileSystemPath GetStorageLocation();
}
public class JetBrains.Application.ExceptionReport.PersistableExceptionData : object {
    [NotNullAttribute]
protected string myHash;
    public static string ExternalDataKey;
    [CompilerGeneratedAttribute]
private DateTime <WhenLastHappened>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfTimesHappened>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionSubmissionResult <ServerAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PersistedFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private JetSemanticVersion <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionText <RenderedException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private EditedExceptionText <EditedText>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, IList`1<object>> <DataFromMatchedExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SensitiveData>k__BackingField;
    public DateTime WhenLastHappened { get; protected set; }
    public int NumberOfTimesHappened { get; protected set; }
    public string Status { get; public set; }
    public ExceptionSubmissionResult ServerAction { get; protected set; }
    public string PersistedFileName { get; public set; }
    [CanBeNullAttribute]
public JetSemanticVersion ProductVersion { get; protected set; }
    public ExceptionText RenderedException { get; protected set; }
    public string StackTrace { get; protected set; }
    public string Message { get; public set; }
    public IDictionary Data { get; protected set; }
    public EditedExceptionText EditedText { get; public set; }
    public IDictionary`2<object, IList`1<object>> DataFromMatchedExceptions { get; protected set; }
    public string ExceptionType { get; protected set; }
    public string Hash { get; }
    public string Summary { get; protected set; }
    public string SensitiveData { get; protected set; }
    public string FullStacktrace { get; }
    public string FullSummary { get; }
    public string HeaderText { get; }
    public string TechnicalInformation { get; }
    public PersistableExceptionData(JetSemanticVersion productVersion, Nullable`1<DateTime> whenHappened);
    public PersistableExceptionData(Exception exception, JetSemanticVersion productVersion, Nullable`1<DateTime> whenHappened);
    public PersistableExceptionData(ExceptionData exceptionData);
    private static PersistableExceptionData();
    [CompilerGeneratedAttribute]
public DateTime get_WhenLastHappened();
    [CompilerGeneratedAttribute]
protected void set_WhenLastHappened(DateTime value);
    [CompilerGeneratedAttribute]
public int get_NumberOfTimesHappened();
    [CompilerGeneratedAttribute]
protected void set_NumberOfTimesHappened(int value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public ExceptionSubmissionResult get_ServerAction();
    [CompilerGeneratedAttribute]
protected void set_ServerAction(ExceptionSubmissionResult value);
    [CompilerGeneratedAttribute]
public string get_PersistedFileName();
    [CompilerGeneratedAttribute]
public void set_PersistedFileName(string value);
    [CompilerGeneratedAttribute]
public JetSemanticVersion get_ProductVersion();
    [CompilerGeneratedAttribute]
protected void set_ProductVersion(JetSemanticVersion value);
    [CompilerGeneratedAttribute]
public ExceptionText get_RenderedException();
    [CompilerGeneratedAttribute]
protected void set_RenderedException(ExceptionText value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
protected void set_StackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IDictionary get_Data();
    [CompilerGeneratedAttribute]
protected void set_Data(IDictionary value);
    [CompilerGeneratedAttribute]
public EditedExceptionText get_EditedText();
    [CompilerGeneratedAttribute]
public void set_EditedText(EditedExceptionText value);
    [CompilerGeneratedAttribute]
public IDictionary`2<object, IList`1<object>> get_DataFromMatchedExceptions();
    [CompilerGeneratedAttribute]
protected void set_DataFromMatchedExceptions(IDictionary`2<object, IList`1<object>> value);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
protected void set_ExceptionType(string value);
    public string get_Hash();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
protected void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_SensitiveData();
    [CompilerGeneratedAttribute]
protected void set_SensitiveData(string value);
    public string get_FullStacktrace();
    public string get_FullSummary();
    public string get_HeaderText();
    public string get_TechnicalInformation();
    public static void AddExternalDataLine(Exception ex, string line);
    public ExceptionData ToExceptionData(Lifetime lifetime);
}
public class JetBrains.Application.ExceptionReport.ProductExceptionStorageLocator : ExceptionStorageLocator {
    private FileSystemPath myStoragePath;
    [CanBeNullAttribute]
private IProperty`1<bool> myStoreExceptions;
    public bool StoresExceptions { get; }
    public ProductExceptionStorageLocator(AnyProductSettingsLocation settingsLocation, IProperty`1<bool> storeExceptions);
    public virtual FileSystemPath GetStorageLocation();
    public virtual bool get_StoresExceptions();
}
public class JetBrains.Application.ExceptionReport.ReportAllExceptionReportStrategy : object {
    public sealed virtual void Process(ExceptionData exception, IExceptionReportService service, ITaskExecutor taskExecutor);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.RuntimeInfoExceptionReportDataProvider : object {
    public Lazy`1<string> DotNetFrameworkVersionString;
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
    [CompilerGeneratedAttribute]
private object <JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData>b__0_1();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.SccRevisionExceptionReportDataProviderEnv : object {
    private LocalLazy`2<string, ValueTuple`4<IEnumerable`1<SubplatformOriginalRevision>, JetEnvironment, ApplicationPackages, ILogger>> myRevTexts;
    public SccRevisionExceptionReportDataProviderEnv(IEnumerable`1<SubplatformOriginalRevision> origs, JetEnvironment env, ApplicationPackages apppkgs, ILogger logger);
    [NotNullAttribute]
public static string RenderPackageRevisions(ICollection`1<ApplicationPackageArtifact> packages, IEnumerable`1<SubplatformOriginalRevision> revs);
    [EnvironmentComponentAttribute("36")]
public static void WriteToLogs(SccRevisionExceptionReportDataProviderEnv parent, ILogger logger);
    private static string LazyGetRevTexts(ValueTuple`4<IEnumerable`1<SubplatformOriginalRevision>, JetEnvironment, ApplicationPackages, ILogger> args);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.SccRevisionExceptionReportDataProviderShell : object {
    private LocalLazy`2<string, ValueTuple`3<IEnumerable`1<SubplatformOriginalRevision>, SubProducts, ILogger>> myRevTexts;
    public SccRevisionExceptionReportDataProviderShell(IEnumerable`1<SubplatformOriginalRevision> origs, SubProducts subs, ILogger logger);
    private static string LazyGetRevTexts(ValueTuple`3<IEnumerable`1<SubplatformOriginalRevision>, SubProducts, ILogger> args);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(Exception ex);
}
public class JetBrains.Application.ExceptionReport.ShellSubmitToTrackerExceptionReportService : SubmitToTrackerExceptionReportService {
    private ExceptionReportComponentBase myOwner;
    public ShellSubmitToTrackerExceptionReportService(Lifetime lifetime, ExceptionManager exceptionManager, ExceptionReportComponentBase owner, IThreading invocator, IMainWindow mainWindow, OpensUri opensUri, ExceptionReportingIconSet exceptionReportingIconSet, IWindowBranding branding, InternalMode internalMode, IIssueTracker issueTracker);
    public virtual void Notify(ExceptionData exception);
    public virtual void RequireAction(ExceptionData exception);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(ExceptionData exception);
    [CompilerGeneratedAttribute]
private void <RequireAction>b__3_0();
}
public class JetBrains.Application.ExceptionReport.SmartExceptionReportStrategy : object {
    private JetHashSet`1<string> myIgnoredExceptions;
    private ISettingsStore mySettingsStore;
    public SmartExceptionReportStrategy(ISettingsStore settingsStore);
    public sealed virtual void Process(ExceptionData exceptionData, IExceptionReportService service, ITaskExecutor taskExecutor);
}
public class JetBrains.Application.ExceptionReport.SubmitNothingExceptionReportStrategy : object {
    public sealed virtual void Process(ExceptionData exception, IExceptionReportService service, ITaskExecutor taskExecutor);
}
public class JetBrains.Application.ExceptionReport.TempFolderExceptionStorageLocator : ExceptionStorageLocator {
    private FileSystemPath myStoragePath;
    public TempFolderExceptionStorageLocator(string folderName);
    public virtual FileSystemPath GetStorageLocation();
}
public abstract class JetBrains.Application.ExceptionReport.UIExceptionSubmitterBase : ByOneExceptionSubmitterBase {
    private bool myProgressInStatusBar;
    [CanBeNullAttribute]
private IExceptionBrowser myExceptionBrowser;
    private ExceptionStatusBarIndicator myStatusBarIndicator;
    [CompilerGeneratedAttribute]
private ITheming <Theming>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionReportingIconSet <IconSet>k__BackingField;
    private IStatusBar myStatusBar;
    private Action`1<JetStatusBarClickEventArgs> myStatusBarClickHandler;
    private ExceptionReportComponentBase myOwner;
    [CompilerGeneratedAttribute]
private IMainWindow <MainWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private IIsApplicationActiveState <IsApplicationActiveState>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsHookManager <WindowsHookManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueTracker <IssueTracker>k__BackingField;
    private ISignal`1<IEnumerable`1<ExceptionData>> myExceptionsSubmittedSignal;
    private IProperty`1<bool> myShowSubmissionResultsProperty;
    private IProperty`1<string> myUserCommentProperty;
    [CompilerGeneratedAttribute]
private IWindowBranding <WindowBranding>k__BackingField;
    private LifetimeDefinition myCurrentLifetimeDefinition;
    protected ITheming Theming { get; }
    protected ExceptionReportingIconSet IconSet { get; }
    protected IMainWindow MainWindow { get; }
    protected IIsApplicationActiveState IsApplicationActiveState { get; }
    protected IWindowsHookManager WindowsHookManager { get; }
    protected IShellLocks Locks { get; }
    protected Lifetime Lifetime { get; }
    protected IIssueTracker IssueTracker { get; }
    protected IWindowBranding WindowBranding { get; }
    public IExceptionBrowser ExceptionBrowser { get; public set; }
    unknown ExceptionStatusBarIndicator StatusBarIndicator {public set; }
    public UIExceptionSubmitterBase(Lifetime lifetime, IIssueTracker issueTracker, bool progressInStatusBar, ExceptionStatusBarIndicator statusBarIndicator, ITheming theming, ExceptionReportingIconSet iconSet, IStatusBar statusBar, IThreading threading, Action`1<JetStatusBarClickEventArgs> statusBarClickHandler, ExceptionReportComponentBase owner, IMainWindow mainWindow, IIsApplicationActiveState isApplicationActiveState, IWindowsHookManager windowsHookManager, ISignal`1<IEnumerable`1<ExceptionData>> exceptionsSubmittedSignal, IProperty`1<bool> showSubmissionResultsProperty, IProperty`1<string> userCommentProperty, IWindowBranding windowBranding, IShellLocks locks);
    [CompilerGeneratedAttribute]
protected ITheming get_Theming();
    [CompilerGeneratedAttribute]
protected ExceptionReportingIconSet get_IconSet();
    [CompilerGeneratedAttribute]
protected IMainWindow get_MainWindow();
    [CompilerGeneratedAttribute]
protected IIsApplicationActiveState get_IsApplicationActiveState();
    [CompilerGeneratedAttribute]
protected IWindowsHookManager get_WindowsHookManager();
    [CompilerGeneratedAttribute]
protected IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
protected Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
protected IIssueTracker get_IssueTracker();
    [CompilerGeneratedAttribute]
protected IWindowBranding get_WindowBranding();
    public IExceptionBrowser get_ExceptionBrowser();
    public void set_ExceptionBrowser(IExceptionBrowser value);
    public void set_StatusBarIndicator(ExceptionStatusBarIndicator value);
    protected virtual void OnBeforeExceptionsSubmitted();
    protected abstract virtual void OnAfterAnyExceptionSubmitted(List`1<ExceptionData> submittedExceptions);
    protected virtual void OnAfterExceptionsSubmitted(ExceptionData[] exceptions, Action`1<ExceptionData[]> afterExceptionsSubmitted);
    private void ShowErrors(ExceptionData[] exceptions);
    private void ShowSubmittedExceptions();
    protected virtual IProgressIndicator CreateProgressIndicator(int workItemCount);
    [CompilerGeneratedAttribute]
private void <OnAfterExceptionsSubmitted>b__45_1();
}
public class JetBrains.Application.ExceptionReport.UIProgressIndicatorWrapper : object {
    private IProgressIndicator myProgressIndicator;
    private IThreading myThreading;
    public string CurrentItemText { get; public set; }
    public bool IsCanceled { get; }
    public string TaskName { get; public set; }
    public UIProgressIndicatorWrapper(IProgressIndicator progressIndicator, IThreading threading);
    public sealed virtual void Dispose();
    public sealed virtual string get_CurrentItemText();
    public sealed virtual void set_CurrentItemText(string value);
    public sealed virtual bool get_IsCanceled();
    public sealed virtual string get_TaskName();
    public sealed virtual void set_TaskName(string value);
    public sealed virtual void Advance(double units);
    public sealed virtual void Start(int totalWorkUnits);
    public sealed virtual void Stop();
    [CompilerGeneratedAttribute]
private void <Stop>b__14_0();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.ExceptionReport.UserIdentifierStorage : object {
    private IDataAccess`1<ExceptionReporterIdentifierScheme> myDataAccess;
    public UserIdentifierStorage(DataAccess dataAccess, IAnyProductSettingsLocation productSettingsLocation);
    public static string BuildUserIdentifierConfig(IEnumerable`1<IUserIdentifierPart> userIdentifierParts);
    public void Save(string userIdentifierScheme, string currentIdentifier);
    public void Save(IEnumerable`1<IUserIdentifierPart> identifierParts, string currentIdentifier);
    public ExceptionReporterIdentifierScheme GetIdentifierScheme();
    public void ResetUserIdentifier();
    public void ResetSelectedIdentifier();
    public void Reset();
}
[MigrateSettingsAttribute]
public class JetBrains.Application.ExceptionReport.UserLoginInformationMigrateSettings : object {
    private UserIdentifierStorage myUserIdentifierStorage;
    public UserLoginInformationMigrateSettings(UserIdentifierStorage userIdentifierStorage);
    [IteratorStateMachineAttribute("JetBrains.Application.ExceptionReport.UserLoginInformationMigrateSettings/<GetEntriesToMigrate>d__2")]
public sealed virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [IteratorStateMachineAttribute("JetBrains.Application.ExceptionReport.UserLoginInformationMigrateSettings/<GetKeysToMigrate>d__3")]
public sealed virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public sealed virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[ExtensionAttribute]
public static class JetBrains.Application.ExceptionReport.Utils.LoginInformationUtils : object {
    [ExtensionAttribute]
public static UserIdentifier ToUserIdentifier(LoginInformation loginInformation);
    [ExtensionAttribute]
public static LoginInformation ToLoginInformation(UserIdentifier userIdentifier);
}
[ExtensionAttribute]
public static class JetBrains.Application.Extensions.AssemblyNameEx : object {
    public static T EvaluateWithRetry(int retryCount, Func`1<T> func);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute("Use overload with IAssemblyLocation")]
public static AssemblyInfo GetAssemblyInfo(FileSystemPath fileSystemPath, AssemblyExistsService assemblyExistsService, int retryCount);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static AssemblyInfo GetAssemblyInfo(IAssemblyLocation assemblyLocation, AssemblyExistsService assemblyExistsService, int retryCount);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static AssemblyNameInfo GetAssemblyNameInfo(VirtualFileSystemPath fileSystemPath, AssemblyExistsService assemblyExistsService, int retryCount);
}
[ExtensionAttribute]
public static class JetBrains.Application.Extensions.DataFlowEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable AssertUiThreadFiring(ISignal`1<TValue> signal, IThreading getComponent);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable AssertUiThreadModifications(ICollectionEvents`1<T> collection, IThreading getComponent);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable AssertUiThreadModifications(IProperty`1<TValue> property, IThreading getComponent);
    [ExtensionAttribute]
public static void BeginSetGuarded(IProperty`1<TValue> property, OuterLifetime lifetime, TValue value, IThreading threading, object cookie);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use other overloads.")]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, Lifetime lifetime, ReentrancyGuard guard);
    [ExtensionAttribute]
[NotNullAttribute]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, Lifetime lifetime, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static Property`1<TValue> EnsureGuarded(Property`1<TValue> property, ReentrancyGuard guard);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TValue> EnsureGuarded(IProperty`1<TValue> property, Lifetime lifetime, ReentrancyGuard guard);
    [ExtensionAttribute]
[NotNullAttribute]
public static Signal`1<TValue> EnsureGuarded(Signal`1<TValue> signal, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static SimpleSignal EnsureGuarded(SimpleSignal signal, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static CollectionEvents`1<TValue> EnsureGuarded(CollectionEvents`1<TValue> coll, ReentrancyGuard guard);
    [ExtensionAttribute]
[NotNullAttribute]
public static DictionaryEvents`2<TKey, TValue> EnsureGuarded(DictionaryEvents`2<TKey, TValue> dictionaryEvents, ReentrancyGuard guard);
    [ExtensionAttribute]
[NotNullAttribute]
public static Property`1<TValue> EnsurePrimaryThread(Property`1<TValue> property, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TValue> EnsurePrimaryThread(IProperty`1<TValue> property, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static DictionaryEvents`2<TKey, TValue> EnsurePrimaryThread(DictionaryEvents`2<TKey, TValue> collection, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDictionaryEvents`2<TKey, TValue> EnsurePrimaryThread(IDictionaryEvents`2<TKey, TValue> collection, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static ListEvents`1<TValue> EnsurePrimaryThread(ListEvents`1<TValue> collection, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static IListEvents`1<TValue> EnsurePrimaryThread(IListEvents`1<TValue> collection, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static ISignal`1<TValue> EnsurePrimaryThread(ISignal`1<TValue> signal, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static ISimpleSignal EnsurePrimaryThread(ISimpleSignal signal, IThreading threading);
    [ExtensionAttribute]
public static void FlowIntoGuarded_NoReplay(IProperty`1<TValue> source, Lifetime lifetime, IProperty`1<TValue> target, ReentrancyGuard guard, object cookie, bool bPushInitialValuesImmediately);
    [ExtensionAttribute]
public static void FlowIntoGuarded_NoReplay(ISignal`1<TValue> source, Lifetime lifetime, ISignal`1<TValue> target, ReentrancyGuard guard, object cookie);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("This method is not used in real code, will probably be removed.")]
public static IDisposable FlowIntoGuarded_Replay(ICollectionEvents`1<TValue> source, ICollectionEvents`1<TValue> target, object cookie, bool bPushInitialValuesImmediately, UnguardedCallbackMerger merger, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("This method is not used in real code, will probably be removed.")]
public static IDisposable FlowIntoGuarded_Replay(ICollectionEvents`1<TValue> source, ICollectionEvents`1<TValue> target, object cookie, bool bPushInitialValuesImmediately, IThreading invocator);
    [ExtensionAttribute]
[NotNullAttribute]
private static IDisposable FlowIntoGuardedWithReplayCore(IReadonlyCollectionEvents`1<TValue> source, ICollectionEvents`1<TValue> target, object cookie, bool bPushInitialValuesImmediately, Action`1<Action> executeOrQueue, IThreading threading);
}
[ExtensionAttribute]
public static class JetBrains.Application.Extensions.DataJson : object {
    [CanBeNullAttribute]
public static IList`1<Product> TryFetchData(StreamReader streamReader);
    [CanBeNullAttribute]
public static IList`1<Product> TryFetchDataFromFile(FileSystemPath path, ILogger logger);
    [CanBeNullAttribute]
public static IList`1<Product> TryFetchDataFromWeb(IWebProxy proxy, ILogger logger, int timeoutInMilliseconds);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Release TryFindWhatsNew(Product product, JetSemanticVersion expectedVersion, ILogger logger);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Release TryFindWhatsNew(IList`1<Product> infos, string productName, JetSemanticVersion expectedVersion, ILogger logger);
}
public class JetBrains.Application.Extensions.Extension : object {
    [CompilerGeneratedAttribute]
private IPackage <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IPackage> <Dependents>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackage <LocalPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackage <InfoPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private PluginVerificationResult <VerificationResult>k__BackingField;
    public IPackage Package { get; }
    public ICollection`1<IPackage> Dependents { get; }
    public IPackage LocalPackage { get; }
    [CanBeNullAttribute]
public IPackage InfoPackage { get; }
    public PluginVerificationResult VerificationResult { get; }
    public Extension(IPackage package, ICollection`1<IPackage> dependents, IPackage localPackage, IPackage infoPackage, PluginVerificationResult verificationResult);
    [CompilerGeneratedAttribute]
public IPackage get_Package();
    [CompilerGeneratedAttribute]
public ICollection`1<IPackage> get_Dependents();
    [CompilerGeneratedAttribute]
public IPackage get_LocalPackage();
    [CompilerGeneratedAttribute]
public IPackage get_InfoPackage();
    [CompilerGeneratedAttribute]
public PluginVerificationResult get_VerificationResult();
}
[ExtensionAttribute]
public static class JetBrains.Application.Extensions.ExtensionEx : object {
    [ExtensionAttribute]
public static bool CanBeInstalled(Extension extension, IExtensionManager extensionManager);
    [ExtensionAttribute]
public static bool ToBeInstalled(Extension extension, IExtensionManager extensionManager);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Extensions.ExtensionManager : object {
    private IProviderSettings myProviderSettings;
    private ILogger myLogger;
    private ILazy`1<ShellCultureOptionsReader> myShellCultureOptionsReader;
    private IThreading myThreading;
    [NotNullAttribute]
private ISharedPackageRepository mySharedRepository;
    [NotNullAttribute]
private IPackageRepository myInstalledRepository;
    [NotNullAttribute]
private BundledRepository myBundledRepository;
    [NotNullAttribute]
private PluginsRepository myPluginsRepository;
    [NotNullAttribute]
private PackageName myWaveName;
    private AggregateRepository mySourceRepository;
    private IPackageManager myPackageManager;
    private IPackageRepository myInfoRepository;
    public ExtensionManager(Lifetime lifetime, IExtensionSourceProvider extensionSourceProvider, IProviderSettings providerSettings, IApplicationHost host, ProductConfigurations configurations, EnvironmentZonesExtra environmentZonesExtra, ApplicationPackagesLocallyInstalled applicationPackagesLocallyInstalled, ApplicationPackagesFiles applicationPackagesFiles, ILogger logger, IPackageRepositoryFactory packageRepositoryFactory, ILazy`1<ShellCultureOptionsReader> shellCultureOptionsReader, IThreading threading);
    private static IEnumerable`1<BundledPackage> GetInstalledPackagesPackages(ApplicationPackagesLocallyInstalled applicationPackages, IPackageName wavePackage);
    [IteratorStateMachineAttribute("JetBrains.Application.Extensions.ExtensionManager/<Fetch>d__14")]
public sealed virtual IEnumerable`1<Extension> Fetch();
    public sealed virtual ICollectionEvents`1<Extension> FetchAsync(Lifetime lifetime, Action onFinished);
    private IEnumerable`1<IPackage> GetDependents(WaveDependentsWalker dependentsWalker, IPackageName package);
    public sealed virtual bool Install(Extension extension);
    public sealed virtual bool Uninstall(Extension extension, bool removeDependencies);
    public sealed virtual bool Update(Extension extension);
    private ExtensionVerificationReport GetVerificationReport();
    public sealed virtual bool IsBundledPackage(IPackage package);
    public static bool ExtensionManagerLacksAdminRights();
    public static LocalPaths GetLocalPaths();
}
public static class JetBrains.Application.Extensions.ExtensionManagerAction : object {
    public static string ActionID;
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Extensions.ExtensionManagerProviderSettings : object {
    private IProperty`1<bool> myIncludePrereleasePackages;
    public bool IncludePrereleasePackages { get; public set; }
    public ExtensionManagerProviderSettings(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    public sealed virtual bool get_IncludePrereleasePackages();
    public sealed virtual void set_IncludePrereleasePackages(bool value);
    public static bool GetIncludePrereleasePackagesValue(Nullable`1<bool> includePrereleasePackages);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Extensions.ExtensionsSettingsLoader : object {
    private static string SettingsFolderName;
    private Lifetime myLifetime;
    private ExtensionsSettingsMountPointProvider myExtensionsSettingsMountPointProvider;
    private IThreading myThreading;
    private IFileSystemTracker myFileSystemTracker;
    private IFileSettingsStorageBehavior myBehaviour;
    private UserInjectedSettingsLayers myUserInjectedSettingsLayers;
    private InternKeyPathComponent myInterned;
    public ExtensionsSettingsLoader(Lifetime lifetime, ApplicationPackagesFiles applicationPackagesFiles, ExtensionsSettingsMountPointProvider extensionsSettingsMountPointProvider, IThreading threading, IFileSystemTracker fileSystemTracker, IFileSettingsStorageBehavior behaviour, UserInjectedSettingsLayers userInjectedSettingsLayers, InternKeyPathComponent interned);
    private void LoadSettingsFile(string extensionId, FileSystemPath path);
    private void ExecuteOrQueue(Lifetime lifetime, Action action, string name);
    private void AddSettingsFile(Lifetime lifetime, string extensionId, FileSystemPath path);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Extensions.ExtensionsSettingsMountPointProvider : object {
    private IFileSettingsStorageBehavior myBehaviour;
    private Lazy`1<ISettingsStorageMountPoint> myExtensionsMountPoint;
    private IFileSystemTracker myFileSystemTracker;
    private Lazy`1<Identity> myId;
    private Lifetime myLifetime;
    private CollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private IThreading myThreading;
    private InternKeyPathComponent myInterned;
    private ProductSettingsLocation myProductSettingsLocation;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Icon>k__BackingField;
    public IProperty`1<IconId> Icon { get; }
    public Identity Id { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    public ExtensionsSettingsMountPointProvider(Lifetime lifetime, IThreading threading, IFileSystemTracker fileSystemTracker, IFileSettingsStorageBehavior behaviour, InternKeyPathComponent interned, ProductSettingsLocation productSettingsLocation);
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_Icon();
    public Identity get_Id();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    private ISettingsStorageMountPoint CreateMountPoint();
    private Identity GetHostId();
}
[ShellComponentAttribute("10")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.Extensions.ExtensionsUpdatesChecker : object {
    private IPackageRepositoryFactory myPackageRepositoryFactory;
    private IProviderSettings myProviderSettings;
    private WebProxySettingsReader myProxySettingsReader;
    private ILogger myLogger;
    private PluginsRepository myPluginsRepository;
    public ExtensionsUpdatesChecker(Lifetime lifetime, IPackageRepositoryFactory packageRepositoryFactory, IProviderSettings providerSettings, IApplicationHost applicationHost, WebProxySettingsReader proxySettingsReader, ILogger logger);
    public sealed virtual IList`1<UpdateInfo> GetUpdates();
    private static ProductInfo GetProductInfo(IPackageMetadata package);
}
public interface JetBrains.Application.Extensions.IExtensionManager {
    public abstract virtual IEnumerable`1<Extension> Fetch();
    public abstract virtual ICollectionEvents`1<Extension> FetchAsync(Lifetime lifetime, Action onFinished);
    public abstract virtual bool Install(Extension extension);
    public abstract virtual bool Uninstall(Extension extension, bool removeDependencies);
    public abstract virtual bool Update(Extension extension);
    public abstract virtual bool IsBundledPackage(IPackage package);
}
public interface JetBrains.Application.Extensions.IProviderSettings {
    public bool IncludePrereleasePackages { get; public set; }
    public abstract virtual bool get_IncludePrereleasePackages();
    public abstract virtual void set_IncludePrereleasePackages(bool value);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Extensions.JetPackageRepositoryFactoryEnvironmentComponent : JetPackageRepositoryFactory {
    private string myUserAgent;
    public JetPackageRepositoryFactoryEnvironmentComponent(IProductInfo product, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    private JetPackageRepositoryFactoryEnvironmentComponent(string userAgentName, string userAgentVersion, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public static JetPackageRepositoryFactory Create(HostInfo hostInfo);
    [IteratorStateMachineAttribute("JetBrains.Application.Extensions.JetPackageRepositoryFactoryEnvironmentComponent/<GetParameters>d__4")]
private IEnumerable`1<KeyValuePair`2<string, string>> GetParameters(IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    public virtual IPackageRepository CreateRepository(string packageSource);
    [CompilerGeneratedAttribute]
private void <CreateRepository>b__5_0(object sender, WebRequestEventArgs e);
}
[ShellComponentAttribute("18")]
public class JetBrains.Application.Extensions.JetPackageRepositoryFactoryShellComponent : JetPackageRepositoryFactoryEnvironmentComponent {
    private WebProxySettingsReader myProxySettingsReader;
    public JetPackageRepositoryFactoryShellComponent(IProductInfo product, SubProducts subProducts, WebProxySettingsReader proxySettingsReader);
    public virtual IPackageRepository CreateRepository(string packageSource);
    [CompilerGeneratedAttribute]
private void <CreateRepository>b__2_0(object sender, WebRequestEventArgs eventArgs);
}
public class JetBrains.Application.Extensions.JetPriorityPackageRepository : PackageRepositoryBase {
    private IPackageRepository myPrimaryRepository;
    private IPackageRepository mySecondaryRepository;
    public string Source { get; }
    public bool SupportsPrereleasePackages { get; }
    public JetPriorityPackageRepository(IPackageRepository primaryRepository, IPackageRepository secondaryRepository);
    public virtual string get_Source();
    public virtual IQueryable`1<IPackage> GetPackages();
    public virtual bool get_SupportsPrereleasePackages();
    public sealed virtual bool Exists(string packageId, SemanticVersion version);
    public sealed virtual IPackage FindPackage(string packageId, SemanticVersion version);
    public sealed virtual IEnumerable`1<IPackage> FindPackagesById(string packageId);
    public sealed virtual IDisposable StartOperation(string operation, string mainPackageId, string mainPackageVersion);
    public virtual void AddPackage(IPackage package);
    public virtual void RemovePackage(IPackage package);
    public sealed virtual IQueryable`1<IPackage> Search(string searchTerm, IEnumerable`1<string> targetFrameworks, bool allowPrereleaseVersions);
    public sealed virtual IEnumerable`1<IPackage> GetUpdates(IEnumerable`1<IPackageName> packages, bool includePrerelease, bool includeAllVersions, IEnumerable`1<FrameworkName> targetFrameworks, IEnumerable`1<IVersionSpec> versionConstraints);
    public sealed virtual IPackage ResolveDependency(PackageDependency dependency, IPackageConstraintProvider constraintProvider, bool allowPrereleaseVersions, bool preferListedPackages, DependencyVersion dependencyVersion);
}
public class JetBrains.Application.Extensions.NullFileSystem : object {
    private static NullFileSystem _instance;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public static IFileSystem Instance { get; }
    public ILogger Logger { get; public set; }
    public string Root { get; }
    private static NullFileSystem();
    public static IFileSystem get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Logger(ILogger value);
    public sealed virtual string get_Root();
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual IEnumerable`1<string> GetFiles(string path, string filter, bool recursive);
    public sealed virtual IEnumerable`1<string> GetDirectories(string path);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void DeleteFiles(IEnumerable`1<IPackageFile> files, string rootDir);
    public sealed virtual bool FileExists(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void AddFile(string path, Stream stream);
    public sealed virtual void AddFile(string path, Action`1<Stream> writeToStream);
    public sealed virtual void AddFiles(IEnumerable`1<IPackageFile> files, string rootDir);
    public sealed virtual Stream CreateFile(string path);
    public sealed virtual Stream OpenFile(string path);
    public sealed virtual DateTimeOffset GetLastModified(string path);
    public sealed virtual DateTimeOffset GetCreated(string path);
    public sealed virtual DateTimeOffset GetLastAccessed(string path);
    public sealed virtual void MakeFileWritable(string path);
    public sealed virtual void MoveFile(string source, string destination);
}
public class JetBrains.Application.Extensions.ReadOnlyPackageRepository : PackageRepositoryBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IPackage> <packages>P;
    public string Source { get; }
    public bool SupportsPrereleasePackages { get; }
    public ReadOnlyPackageRepository(IEnumerable`1<IPackage> packages);
    public virtual string get_Source();
    public virtual bool get_SupportsPrereleasePackages();
    public virtual IQueryable`1<IPackage> GetPackages();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Extensions.Settings.DefaultExtensionManagerSettings : HaveDefaultSettings`1<PackageSourceSettings> {
    private HostInfo myHostInfo;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public DefaultExtensionManagerSettings(ILogger logger, ISettingsSchema settingsSchema, HostInfo hostInfo);
    public virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public static PackageSourceSettings GetDefaultExtensionsPackageSource(HostInfo hostInfo);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Extensions.Settings.EnvironmentExtensionSourceProvider : object {
    [CompilerGeneratedAttribute]
private ISignal`1<IExtensionSourceProvider> <Changed>k__BackingField;
    public ISignal`1<IExtensionSourceProvider> Changed { get; protected set; }
    public EnvironmentExtensionSourceProvider(Lifetime lifetime);
    public virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public virtual void DisablePackageSource(PackageSource source);
    public virtual bool IsPackageSourceEnabled(PackageSource source);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IExtensionSourceProvider> get_Changed();
    [CompilerGeneratedAttribute]
protected void set_Changed(ISignal`1<IExtensionSourceProvider> value);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "ExtensionManagerOptionsSettingDescription")]
public class JetBrains.Application.Extensions.Settings.ExtensionManagerSettings : object {
}
public class JetBrains.Application.Extensions.Settings.ExtensionSourceProvider : object {
    private IContextBoundSettingsStore myContextBoundSettingsStore;
    private ISettingsOptimization mySettingsOptimization;
    private ILogger myLogger;
    private SettingsIndexedKey mySourceSettingsKey;
    [CompilerGeneratedAttribute]
private ISignal`1<IExtensionSourceProvider> <Changed>k__BackingField;
    public ISignal`1<IExtensionSourceProvider> Changed { get; }
    public ExtensionSourceProvider(Lifetime lifetime, IContextBoundSettingsStore contextBoundSettingsStore, ISettingsOptimization settingsOptimization, ILogger logger);
    public sealed virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public sealed virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public sealed virtual void DisablePackageSource(PackageSource source);
    public sealed virtual bool IsPackageSourceEnabled(PackageSource source);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<IExtensionSourceProvider> get_Changed();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
public interface JetBrains.Application.Extensions.Settings.IExtensionSourceProvider {
    public ISignal`1<IExtensionSourceProvider> Changed { get; }
    public abstract virtual ISignal`1<IExtensionSourceProvider> get_Changed();
}
[SettingsIndexedKeyAttribute("JetBrains.Application.Extensions.Settings.ExtensionManagerSettings", "JetBrains.Application.Resources.Strings", "PackageSourcesSettingDescription", "System.String")]
public class JetBrains.Application.Extensions.Settings.PackageSourceSettings : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "NameSettingDescription")]
public string Name { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SourceSettingDescription")]
public string Source { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IsEnabledSettingDescription")]
public bool IsEnabled { get; public set; }
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "OrderSettingDescription")]
public int Order { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public PackageSource ToPackageSource();
    public sealed virtual bool Equals(PackageSourceSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Extensions.Settings.ShellExtensionSourceProvider : EnvironmentExtensionSourceProvider {
    private ExtensionSourceProvider myExtensionSourceProvider;
    public ShellExtensionSourceProvider(Lifetime lifetime, ISettingsStore settingsStore, ISettingsOptimization settingsOptimization, ILogger logger);
    public virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public virtual void DisablePackageSource(PackageSource source);
    public virtual bool IsPackageSourceEnabled(PackageSource source);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
public class JetBrains.Application.Extensions.WaveDependentsWalker : PackageWalker {
    [CompilerGeneratedAttribute]
private IPackageName <waveName>P;
    [CompilerGeneratedAttribute]
private Func`2<PackageDependency, IPackage> <factory>P;
    [CompilerGeneratedAttribute]
private IPackageRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IPackageName, HashSet`1<IPackage>> <DependentsLookup>k__BackingField;
    protected bool RaiseErrorOnCycle { get; }
    protected bool IgnoreWalkInfo { get; }
    protected IPackageRepository Repository { get; }
    private IDictionary`2<IPackageName, HashSet`1<IPackage>> DependentsLookup { get; private set; }
    public WaveDependentsWalker(IPackageRepository repository, IPackageName waveName, Func`2<PackageDependency, IPackage> factory);
    protected virtual bool get_RaiseErrorOnCycle();
    protected virtual bool get_IgnoreWalkInfo();
    [CompilerGeneratedAttribute]
protected IPackageRepository get_Repository();
    [CompilerGeneratedAttribute]
private IDictionary`2<IPackageName, HashSet`1<IPackage>> get_DependentsLookup();
    [CompilerGeneratedAttribute]
private void set_DependentsLookup(IDictionary`2<IPackageName, HashSet`1<IPackage>> value);
    protected virtual IPackage ResolveDependency(PackageDependency dependency);
    protected virtual bool OnAfterResolveDependency(IPackage package, IPackage dependency);
    public IEnumerable`1<IPackage> GetDependents(IPackageName package);
}
public class JetBrains.Application.FeaturesPage.CheckableZoneItem : object {
    private Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private CheckableZone <CheckableZone>k__BackingField;
    private List`1<CheckableZoneItem> myReferencedZones;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Checked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CheckedAtStartup>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UnavailableText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GroupOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <LanguageIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <LanguageText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <AvailableVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <UnavailableVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <NeedRestartVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public CheckableZone CheckableZone { get; }
    public IProperty`1<bool> Enabled { get; }
    public IProperty`1<bool> Checked { get; }
    public IProperty`1<bool> CheckedAtStartup { get; }
    public IProperty`1<string> UnavailableText { get; }
    public string GroupName { get; public set; }
    public int GroupOrder { get; public set; }
    public string NameOrder { get; public set; }
    public IconId LanguageIcon { get; private set; }
    public IProperty`1<string> LanguageText { get; }
    public IProperty`1<Visibility> AvailableVisibility { get; }
    public IProperty`1<Visibility> UnavailableVisibility { get; }
    public IProperty`1<Visibility> NeedRestartVisibility { get; }
    public string Description { get; }
    public CheckableZoneItem(Lifetime lifetime, CheckableZone checkableZone);
    [CompilerGeneratedAttribute]
public CheckableZone get_CheckableZone();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_Checked();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CheckedAtStartup();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UnavailableText();
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public int get_GroupOrder();
    [CompilerGeneratedAttribute]
public void set_GroupOrder(int value);
    [CompilerGeneratedAttribute]
public string get_NameOrder();
    [CompilerGeneratedAttribute]
public void set_NameOrder(string value);
    public void SetDependencies(List`1<CheckableZoneItem> referencedZones);
    private void CalculateEnabled();
    public void Save();
    [CompilerGeneratedAttribute]
public IconId get_LanguageIcon();
    [CompilerGeneratedAttribute]
private void set_LanguageIcon(IconId value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_LanguageText();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_AvailableVisibility();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_UnavailableVisibility();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_NeedRestartVisibility();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void <.ctor>b__29_2(Lifetime lt1, bool ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[XmlIncludeAttribute("JetBrains.Application.Feedback.Reports.TextAttachment")]
[XmlIncludeAttribute("JetBrains.Application.Feedback.Reports.FieldAttachment")]
[XmlIncludeAttribute("JetBrains.Application.Feedback.Reports.FileAttachment")]
public class JetBrains.Application.Feedback.Reports.Attachment : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected Attachment(Attachment original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Attachment left, Attachment right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Attachment left, Attachment right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(Attachment other);
    [CompilerGeneratedAttribute]
public virtual Attachment <Clone>$();
}
public enum JetBrains.Application.Feedback.Reports.AttachmentUploadMethod : Enum {
    public int value__;
    public static AttachmentUploadMethod XmlRpc;
    public static AttachmentUploadMethod Ftp;
}
public class JetBrains.Application.Feedback.Reports.FeedbackCenterReport : ReportBase {
    private string myProduct;
    private IExceptionHandlingService myService;
    private IContextBoundSettingsStore mySettingsStore;
    private RequestType myType;
    public FeedbackCenterReport(string product, RequestType type, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore);
    public virtual string Send(LoginInformation loginInformation, IProgressIndicator progressIndicator, String[]& errors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Feedback.Reports.FieldAttachment : TextAttachment {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected FieldAttachment(FieldAttachment original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FieldAttachment left, FieldAttachment right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FieldAttachment left, FieldAttachment right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TextAttachment other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FieldAttachment other);
    [CompilerGeneratedAttribute]
public virtual Attachment <Clone>$();
}
public class JetBrains.Application.Feedback.Reports.FileAttachment : Attachment {
    [CompilerGeneratedAttribute]
private string <FileUri>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string FileUri { get; public set; }
    public long Size { get; public set; }
    [CompilerGeneratedAttribute]
protected FileAttachment(FileAttachment original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FileUri();
    [CompilerGeneratedAttribute]
public void set_FileUri(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FileAttachment left, FileAttachment right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FileAttachment left, FileAttachment right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Attachment other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FileAttachment other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Attachment <Clone>$();
}
public interface JetBrains.Application.Feedback.Reports.IReport {
    public ICollection`1<FileAttachmentBase> FileAttachments { get; }
    public abstract virtual string Send(LoginInformation loginInformation, IProgressIndicator progressIndicator, String[]& errors);
    public abstract virtual void AttachPart(TextPart part);
    public abstract virtual void AttachText(string key, string value);
    public abstract virtual void AttachField(string id, string value);
    public abstract virtual void AttachFile(FileAttachmentBase fileAttachment);
    public abstract virtual ICollection`1<FileAttachmentBase> get_FileAttachments();
}
public interface JetBrains.Application.Feedback.Reports.IReportFactory {
    public abstract virtual IReport CreateReport(RequestType requestType);
}
public abstract class JetBrains.Application.Feedback.Reports.ReportBase : object {
    protected HashSet`1<FileAttachmentBase> FileAttachments;
    protected HashSet`1<TextPart> Parts;
    protected HashSet`1<TextAttachment> TextAttachments;
    private ICollection`1<FileAttachmentBase> JetBrains.Application.Feedback.Reports.IReport.FileAttachments { get; }
    public abstract virtual string Send(LoginInformation loginInformation, IProgressIndicator progressIndicator, String[]& errors);
    public sealed virtual void AttachPart(TextPart part);
    public sealed virtual void AttachText(string key, string value);
    public sealed virtual void AttachField(string key, string value);
    public sealed virtual void AttachFile(FileAttachmentBase fileAttachment);
    private sealed virtual override ICollection`1<FileAttachmentBase> JetBrains.Application.Feedback.Reports.IReport.get_FileAttachments();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Feedback.Reports.ReportFactory : object {
    [CompilerGeneratedAttribute]
private IApplicationHost <applicationDescriptor>P;
    [CompilerGeneratedAttribute]
private IExceptionHandlingService <exceptionHandlingService>P;
    [CompilerGeneratedAttribute]
private ISettingsStore <settingsStore>P;
    public ReportFactory(IApplicationHost applicationDescriptor, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore);
    public sealed virtual IReport CreateReport(RequestType requestType);
}
public enum JetBrains.Application.Feedback.Reports.RequestType : Enum {
    public int value__;
    public static RequestType Performance;
    public static RequestType BugReport;
    public static RequestType Feedback;
    public static RequestType Exception;
}
public class JetBrains.Application.Feedback.Reports.TextAttachment : Attachment {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
protected TextAttachment(TextAttachment original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TextAttachment left, TextAttachment right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TextAttachment left, TextAttachment right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Attachment other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TextAttachment other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Attachment <Clone>$();
}
public class JetBrains.Application.Feedback.Reports.TextPart : ValueType {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Title { get; public set; }
    public string Text { get; public set; }
    [XmlAttributeAttribute]
public string Id { get; public set; }
    public TextPart(string Title, string Text, string Id);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TextPart left, TextPart right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TextPart left, TextPart right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TextPart other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Title, String& Text, String& Id);
}
public class JetBrains.Application.FileSystemTracker.DockerInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsRunningInDocker>k__BackingField;
    [CompilerGeneratedAttribute]
private JetHashSet`1<FileSystemPath> <MountedFolders>k__BackingField;
    private static Regex ourMountInfoRegex;
    private static DockerInfo ourNoDocker;
    public bool IsRunningInDocker { get; }
    public JetHashSet`1<FileSystemPath> MountedFolders { get; }
    private DockerInfo(bool isRunningInDocker, JetHashSet`1<FileSystemPath> mountedFolders);
    private static DockerInfo();
    [CompilerGeneratedAttribute]
public bool get_IsRunningInDocker();
    [CompilerGeneratedAttribute]
public JetHashSet`1<FileSystemPath> get_MountedFolders();
    [NotNullAttribute]
public static DockerInfo Evaluate();
    private static JetHashSet`1<FileSystemPath> EvaluateMountedFolders();
    private static bool EvaluateIsRunningInDocker();
    private static IList`1<string> GetReversedNonEmptyLines(string path);
}
[ExtensionAttribute]
public static class JetBrains.Application.FileSystemTracker.DockerInfoEx : object {
    [ExtensionAttribute]
public static bool IsDockerMountRoot(FileSystemPath path, DockerInfo dockerInfo);
    [ExtensionAttribute]
public static bool IsIsDocker(FileSystemPath path, DockerInfo dockerInfo);
}
public class JetBrains.Application.FileSystemTracker.EventsBufferSizes : object {
    private ConcurrentDictionary`2<VirtualFileSystemPath, int> myEventsBufferSizesAtOverflowMoment;
    private static int ourDefaultBufferSize;
    public void OnEventsBufferOverflow(VirtualFileSystemPath path, int currentSize);
    public int GetDefaultBufferSize();
    private static int CalculateDefaultBufferSize();
    public int GetMaxBufferSize();
    public int GetEventsBufferSize(VirtualFileSystemPath path);
    public IList`1<Pair`2<VirtualFileSystemPath, int>> GetBufferOverflowSizes();
}
public class JetBrains.Application.FileSystemTracker.FileSystemChangesPathTrie : FileSystemChangesPathTrieBase`1<FileSystemEvent> {
    private ILogger myLogger;
    public FileSystemChangesPathTrie(ILogger logger);
    private static FileSystemChangeType GetChangeType(FileSystemEventType watcherChangeType);
    protected virtual FileSystemChangeDelta CreateFileSystemChangeDelta(FileSystemEvent data, IList`1<FileSystemChangeDelta> childrenDeltas, VirtualFileSystemPath newPath);
    public IList`1<FileSystemChangeDelta> GetDeltas(VirtualFileSystemPath[] roots, Func`2<VirtualFileSystemPath, bool> isIgnoredFolder);
}
public abstract class JetBrains.Application.FileSystemTracker.FileSystemChangesPathTrieBase`1 : FileSystemPathTrie`1<T> {
    private FileSystemPathInternStrategy myInternStrategy;
    protected FileSystemChangesPathTrieBase`1(FileSystemPathInternStrategy internStrategy);
    [CanBeNullAttribute]
protected FileSystemChangeDelta Convert(string newPathKey, IInteractionContext context, ITrieNode<T, VirtualFileSystemPath> node, Func`2<VirtualFileSystemPath, bool> isIgnoredFolder);
    protected abstract virtual FileSystemChangeDelta CreateFileSystemChangeDelta(T data, IList`1<FileSystemChangeDelta> childrenDeltas, VirtualFileSystemPath newPath);
    protected IList`1<FileSystemChangeDelta> GetDeltas(Func`2<VirtualFileSystemPath, bool> isIgnoredFolder);
    private void ProcessTypicalDelta(Func`2<VirtualFileSystemPath, bool> isIgnoredFolder, IInteractionContext context, TrieEntry<T, VirtualFileSystemPath> entry, List`1<FileSystemChangeDelta> deltas);
    private void ProcessDeltasFromUncOrUnixAbsEntry(TrieEntry<T, VirtualFileSystemPath> uncEntry, IInteractionContext context, IList`1<FileSystemChangeDelta> result, Func`2<VirtualFileSystemPath, bool> isIgnoredFolder);
}
public class JetBrains.Application.FileSystemTracker.FileSystemScanner : object {
    private Pattern[] myIncludePatterns;
    private Pattern[] myExcludePatterns;
    private FileSystemPathTrie`1<VirtualFileSystemEntryInfo> myTrie;
    private Hashtable mySearchDirectories;
    private JetHashSet`1<VirtualFileSystemPath> myScannedPaths;
    private List`1<VirtualFileSystemPath> myRootPaths;
    public FileSystemPathTrie`1<VirtualFileSystemEntryInfo> Trie { get; }
    public VirtualFileSystemPath[] RootPaths { get; }
    public FileSystemScanner(Pattern[] includePatterns, Pattern[] excludePatterns);
    public FileSystemPathTrie`1<VirtualFileSystemEntryInfo> get_Trie();
    public VirtualFileSystemPath[] get_RootPaths();
    private bool ScanDirectory(VirtualFileSystemPath path, bool recursive);
    private bool IsPathIncluded(VirtualFileSystemPath path);
    public void Scan();
}
[FlagsAttribute]
public enum JetBrains.Application.FileSystemTracker.FileSystemTrackerDumpFlags : Enum {
    public int value__;
    public static FileSystemTrackerDumpFlags WatchersState;
    public static FileSystemTrackerDumpFlags AccumulatedChanges;
    public static FileSystemTrackerDumpFlags EventsBuffersStats;
    public static FileSystemTrackerDumpFlags AllButEventsBuffersStats;
    public static FileSystemTrackerDumpFlags All;
}
[ExtensionAttribute]
public static class JetBrains.Application.FileSystemTracker.FileSystemTrackerEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AdviseFileChangesOnce(IFileSystemTracker self, Lifetime lt, VirtualFileSystemPath pathToAdvise, Action`1<FileSystemChangeDelta> handler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.FileSystemTracker.FileSystemTrackerImpl : object {
    private static ILogger ourLog;
    private Lifetime myLifetime;
    private ViewableCollection`1<FileSystemTrackerRequestCookie> myRootsViewable;
    protected object myAccumulatedChangesLock;
    protected FileSystemChangesPathTrie myAccumulatedChanges;
    private Queue`1<FileSystemEvent> mySerializedFileSystemEvents;
    private bool myIsEnabled;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsDisposing;
    private IProperty`1<bool> myAutoCommitAllowed;
    private IProperty`1<bool> myAutoCommitEnabled;
    private ICollectionEvents`1<object> myAutoCommitSuppressors;
    private ISignal`1<FileSystemChange> myChangedSignal;
    private SortedOneToListMap`2<HandlingPriority, Action`1<FileSystemChange>> myPrioritySinks;
    private FileSystemPathTrie`1<WatchedDirectoryNode> myDirs;
    private ConcurrentDictionary`2<VirtualFileSystemPath, bool> myDispatchFilterWatcher;
    private ConcurrentDictionary`2<VirtualFileSystemPath, bool> myDispatchFilterFile;
    private CommitThread myCommitThread;
    [NullableAttribute("2")]
private SynchronizationPoint mySyncPoint;
    private SequentialLifetimes mySyncPointLifetimes;
    private EventsBufferSizes myEventsBufferSizes;
    public bool AsyncCommitAllowed { get; }
    public bool Enabled { get; public set; }
    [UsedImplicitlyAttribute]
private WatchedDirectoryNode[] Nodes { get; }
    [UsedImplicitlyAttribute]
private WatchedDirectoryNode[] Watchers { get; }
    public IProperty`1<bool> AutoCommitEnabled { get; }
    public IProperty`1<bool> AutoCommitAllowed { get; }
    public ISignal`1<FileSystemChange> Changed { get; }
    [NullableContextAttribute("2")]
public FileSystemTrackerImpl(Lifetime lifetime, SynchronizationPoints synchronizationPoints, IThreading threading);
    private static FileSystemTrackerImpl();
    public virtual bool get_AsyncCommitAllowed();
    protected virtual void SetDefaultIgnoreAndDoNotListenToFolders(Lifetime lifetime);
    private void IgnoreFusionLogFolder(Lifetime lifetime);
    private void EvaluateAutoCommitAllowed();
    private void DisposeWatchers();
    private void Visit(Action`1<WatchedDirectoryNode> action);
    public virtual void CheckConsistency();
    public sealed virtual void IgnoreChangesInFolder(Lifetime lifetime, VirtualFileSystemPath folderPath);
    protected ITrieNode<WatchedDirectoryNode, VirtualFileSystemPath> GetOrCreateNode(VirtualFileSystemPath directoryPath, NodeAndPath parentVisitor);
    protected WatchedDirectoryNode GetOrCreate(VirtualFileSystemPath directoryPath);
    public sealed virtual void DoNotListenToTheWholeFolder(Lifetime lifetime, VirtualFileSystemPath folderPath, string ignoreReason);
    public sealed virtual bool IsFolderAllowedToBeListenedTo(VirtualFileSystemPath folderPath);
    protected virtual void TryInitFileSystemWatcher(WatchedDirectoryNode node);
    protected virtual JetFileSystemWatcher CreateWatcher(WatcherData watcherData, WinError& rc);
    protected void ClearChanges();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    private WatchedDirectoryNode[] get_Nodes();
    private WatchedDirectoryNode[] get_Watchers();
    private void ProcessNewDirectoryRecursively(FileSystemPathTrie`1<FileSystemEvent> changeAccumulator, VirtualFileSystemPath directoryPath, JetFileSystemWatcher watcher);
    public virtual IProperty`1<bool> get_AutoCommitEnabled();
    public virtual IProperty`1<bool> get_AutoCommitAllowed();
    private static void DumpFileSystemChange(VirtualFileSystemPath prefix, TextWriter writer, FileSystemChange change);
    public sealed virtual void SuppressAutoCommit(Lifetime lifetime, object suppressor);
    public virtual void DumpState(TextWriter writer, VirtualFileSystemPath prefix, FileSystemTrackerDumpFlags flags);
    private static NodeAndPath GetRecursiveAncestorNode(NodeAndPath nodePath);
    private bool HasAnyDirectFileRequests(NodeAndPath nodePath);
    private void SyncWatchers(NodeAndPath nodePath, bool syncDescedantsOnChange);
    public void ViewRoots(Lifetime lifetime, Action`2<Lifetime, FileSystemTrackerRequestCookie> viewer);
    private FileSystemTrackerRequestCookie AddToWatches(VirtualFileSystemPath path, bool isDirectory, bool watchRecursively);
    public virtual FileSystemTrackerRequestCookie AdviseFileChanges(VirtualFileSystemPath filePath);
    public virtual void AdviseFileChanges(Lifetime lifetime, VirtualFileSystemPath path, Action`1<FileSystemChangeDelta> onChangeAction);
    public sealed virtual void AdviseDirectoryChanges(Lifetime lifetime, VirtualFileSystemPath path, bool watchRecursively, Action`1<FileSystemChangeDelta> onChangeAction);
    public sealed virtual void RegisterPrioritySink(Lifetime lifetime, Action`1<FileSystemChange> handler, HandlingPriority priority);
    private void RegisterSink(Lifetime lifetime, VirtualFileSystemPath prefix, Action`1<FileSystemChangeDelta> onChangeAction);
    public virtual FileSystemTrackerRequestCookie AdviseFileChanges(Lifetime lifetime, VirtualFileSystemPath filePath);
    public virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(Lifetime lifetime, VirtualFileSystemPath directoryPath, bool watchRecursively);
    public virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(VirtualFileSystemPath directoryPath, bool watchRecursively);
    public virtual void UnadviseChanges(FileSystemTrackerRequestCookie[] requestCookies);
    private void RemoveCookiePath(FileSystemTrackerRequestCookie requestCookie);
    public bool IsDirectoryBeingWatched(VirtualFileSystemPath directory);
    private void RepairSomeLostChanges();
    public IList`1<FileSystemChangeDelta> GetAccumulatedChangesAndFlush(VirtualFileSystemPath[] paths);
    public IList`1<FileSystemChangeDelta> GetAccumulatedChanges(VirtualFileSystemPath[] paths);
    public void ProcessPendingWatchers();
    public virtual void CommitChanges(VirtualFileSystemPath[] paths);
    private void DoCommit(VirtualFileSystemPath[] paths);
    public virtual ISignal`1<FileSystemChange> get_Changed();
    protected bool IsIgnoredFolder(VirtualFileSystemPath folderPath);
    protected bool IsInsideIgnoredFolder(VirtualFileSystemPath folderPath);
    private sealed virtual override void JetBrains.Util.JetFileSystemWatcher.IWatcherEvents.OnFileSystemChanged(FileSystemEvent[] events);
    public void DispatchChange(FileSystemChange change);
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_0();
}
public class JetBrains.Application.FileSystemTracker.FileSystemTrackerRequestCookie : object {
    private VirtualFileSystemPath myPath;
    private VirtualFileSystemPath myPathDirectory;
    private bool myIsDirectory;
    private bool myIsRecursive;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public bool IsValid { get; internal set; }
    public bool IsRecursive { get; }
    public VirtualFileSystemPath Path { get; }
    internal VirtualFileSystemPath PathDirectory { get; }
    internal string CanonicalName { get; }
    public bool IsFile { get; }
    public bool IsDirectory { get; }
    internal FileSystemTrackerRequestCookie(VirtualFileSystemPath pathToTrack, bool isDirectory, bool isRecursive);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
internal void set_IsValid(bool value);
    public bool get_IsRecursive();
    internal void Invalidate();
    public VirtualFileSystemPath get_Path();
    internal VirtualFileSystemPath get_PathDirectory();
    internal string get_CanonicalName();
    public bool get_IsFile();
    public bool get_IsDirectory();
    public void Dump(TextWriter writer, VirtualFileSystemPath volatilePrefix);
    public bool Equals(FileSystemTrackerRequestCookie obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.Application.FileSystemTracker.HandlingPriority : Enum {
    public int value__;
    public static HandlingPriority Existence;
    public static HandlingPriority Caching;
    public static HandlingPriority Other;
}
public interface JetBrains.Application.FileSystemTracker.IFileSystemTracker {
    public bool Enabled { get; public set; }
    [ObsoleteAttribute("Use SuppressAutoCommit instead")]
public IProperty`1<bool> AutoCommitEnabled { get; }
    public IProperty`1<bool> AutoCommitAllowed { get; }
    public ISignal`1<FileSystemChange> Changed { get; }
    public abstract virtual FileSystemTrackerRequestCookie AdviseFileChanges(VirtualFileSystemPath filePath);
    public abstract virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(VirtualFileSystemPath directoryPath, bool watchRecursively);
    public abstract virtual void UnadviseChanges(FileSystemTrackerRequestCookie[] requestCookies);
    public abstract virtual FileSystemTrackerRequestCookie AdviseFileChanges(Lifetime lifetime, VirtualFileSystemPath filePath);
    public abstract virtual FileSystemTrackerRequestCookie AdviseDirectoryChanges(Lifetime lifetime, VirtualFileSystemPath directoryPath, bool watchRecursively);
    public abstract virtual void AdviseFileChanges(Lifetime lifetime, VirtualFileSystemPath path, Action`1<FileSystemChangeDelta> onChangeAction);
    public abstract virtual void AdviseDirectoryChanges(Lifetime lifetime, VirtualFileSystemPath path, bool watchRecursively, Action`1<FileSystemChangeDelta> onChangeAction);
    public abstract virtual void CommitChanges(VirtualFileSystemPath[] paths);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual IProperty`1<bool> get_AutoCommitEnabled();
    public abstract virtual IProperty`1<bool> get_AutoCommitAllowed();
    public abstract virtual void SuppressAutoCommit(Lifetime lifetime, object suppressor);
    public abstract virtual void DumpState(TextWriter writer, VirtualFileSystemPath prefix, FileSystemTrackerDumpFlags flags);
    public abstract virtual void CheckConsistency();
    public abstract virtual void IgnoreChangesInFolder(Lifetime lifetime, VirtualFileSystemPath folderPath);
    public abstract virtual void DoNotListenToTheWholeFolder(Lifetime lifetime, VirtualFileSystemPath folderPath, string ignoreReason);
    public abstract virtual bool IsFolderAllowedToBeListenedTo(VirtualFileSystemPath folderPath);
    public abstract virtual ISignal`1<FileSystemChange> get_Changed();
    public abstract virtual void RegisterPrioritySink(Lifetime lifetime, Action`1<FileSystemChange> handler, HandlingPriority priority);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ContextHelpActionText")]
[VsOverrideActionAttribute("({5EFC7975-14BC-11CF-9B2B-00AA00573819}:377)")]
public class JetBrains.Application.Help.ContextHelpActionHandler : object {
    public sealed virtual IActionRequirement GetRequirement(IDataContext context);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Help.ContextHelpActionManager : object {
    private ContextHelpDataContextBasedHandler myContextHelpDataContextBasedHandler;
    private List`1<IContextHelpActionHandler> myHandlers;
    public ContextHelpActionManager(IEnumerable`1<IContextHelpActionHandler> allHandlers, ContextHelpDataContextBasedHandler contextHelpDataContextBasedHandler);
    public bool IsAvailable(IDataContext context);
    public bool Show(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public static class JetBrains.Application.Help.ContextHelpDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<Action> ShowContextHelpActionHandler;
    private static ContextHelpDataConstants();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Help.ContextHelpDataContextBasedHandler : object {
    public double Priority { get; }
    public sealed virtual double get_Priority();
    public sealed virtual bool IsAvailable(IDataContext context);
    public sealed virtual bool Show(IDataContext context);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public enum JetBrains.Application.Help.HelpId : Enum {
    public int value__;
    public static HelpId None;
    public static HelpId Empty;
    public static HelpId AI_Assistant;
    public static HelpId AI_prompt_library;
    public static HelpId Chat_with_AI;
    public static HelpId settings_DPA_monitoring;
    public static HelpId monitoring_counters;
    public static HelpId Actions_List;
    public static HelpId Analysis_Subject;
    public static HelpId Analyzing_Concurrency_Profiling_Results_Timeline_;
    public static HelpId Basic_Concepts;
    public static HelpId Building_Solution;
    public static HelpId CLR_Activity;
    public static HelpId Call_Tree;
    public static HelpId Code_Analysis__Solution_Wide_Analysis;
    public static HelpId Coding_Assistance__Color_Assistance;
    public static HelpId Compare_Assemblies;
    public static HelpId Comparison;
    public static HelpId ConfigureAwait_Analysis;
    public static HelpId Configuring_Keyboard_Shortcuts;
    public static HelpId Create_Unit_Tests;
    public static HelpId Debug_Output;
    public static HelpId Debugging_Without_Source_Code;
    public static HelpId Dynamic_Program_Analysis;
    public static HelpId Enforcing_Code_Formatting_Rules;
    public static HelpId Exceptions;
    public static HelpId File_I_O;
    public static HelpId Filtering_by_Solution;
    public static HelpId Fixing_Issues_Found_by_DPA;
    public static HelpId Get_Started_with_Performance_Viewer;
    public static HelpId HTTP_Requests;
    public static HelpId Indentation_Style;
    public static HelpId Inspecting_Code_in_Specific_Scope;
    public static HelpId Interval_Filters;
    public static HelpId Memory_Allocation;
    public static HelpId Narrowing_DPA_Scope;
    public static HelpId Navigation_and_Search_Structural_Navigation;
    public static HelpId file_structure;
    public static HelpId Navigation_and_Search__Finding_Usages__Finding_Usages_Advanced;
    public static HelpId Navigation_and_Search__Finding_Usages__Optimizing_References;
    public static HelpId Navigation_and_Search__Finding_Usages__Viewing_Filtering_and_Grouping_Results;
    public static HelpId Navigation_and_Search__Navigating_Between_To_do_Items;
    public static HelpId Navigation_and_Search__Navigating_to_Exception;
    public static HelpId Options_Code_Cleanup_General;
    public static HelpId Options_Source_Browsing;
    public static HelpId Plain_List;
    public static HelpId Profile_ASP_Web_Site;
    public static HelpId Profile_Running_Process;
    public static HelpId Profile_Standalone_Application;
    public static HelpId Profile_Static_Method;
    public static HelpId Profile_WCF_Service;
    public static HelpId Profile_Windows_Service;
    public static HelpId Profiling_Guidelines__Advanced_Profiling_Using_dotTrace_API;
    public static HelpId Profiling_Guidelines__Profiling_Unit_Tests;
    public static HelpId Profiling_Guidelines__Starting_a_Profiling_Session;
    public static HelpId Refactorings_Invert_Boolean;
    public static HelpId Refactorings_Make_Partial;
    public static HelpId Refactorings_Transform_Parameters;
    public static HelpId Refactorings__Adjust_Namespaces;
    public static HelpId Refactorings__Change_Signature;
    public static HelpId Refactorings__Convert_Abstract_Class_to_Interface;
    public static HelpId Refactorings__Convert_Anonymous_to_Named_Type;
    public static HelpId Refactorings__Set_Params_Modifier;
    public static HelpId Refactorings__Convert_Indexer_to_Method;
    public static HelpId Refactorings__Convert_Interface_to_Abstract_Class;
    public static HelpId Refactorings__Convert_Method_to_Property;
    public static HelpId Refactorings__Convert_Property_to_Auto_Property;
    public static HelpId Refactorings__Convert_Property_to_Method;
    public static HelpId Refactorings__Convert_Static_to_Extension_Method;
    public static HelpId Refactorings__Copy_Type;
    public static HelpId Refactorings__Encapsulate_Field;
    public static HelpId Refactorings__Extract_Class;
    public static HelpId Refactorings__Extract_Global_Using;
    public static HelpId Refactorings__Extract_Interface;
    public static HelpId Refactorings__Extract_Method;
    public static HelpId Refactorings__Extract_Superclass;
    public static HelpId Refactorings__Index;
    public static HelpId Refactorings__Inline_Class;
    public static HelpId Refactorings__Inline_Field;
    public static HelpId Refactorings__Inline_Global_Using;
    public static HelpId Refactorings__Inline_Method;
    public static HelpId Refactorings__Inline_Parameter;
    public static HelpId Refactorings__Inline_Variable;
    public static HelpId Refactorings__Introduce_Field;
    public static HelpId Refactorings__Introduce_Parameter;
    public static HelpId Refactorings__Introduce_Variable;
    public static HelpId Refactorings__Make_Method_Non_Static;
    public static HelpId Refactorings__Make_Method_Static;
    public static HelpId Refactorings__Move_Types_into_Matching_Files;
    public static HelpId Refactorings__Move__Instance_Method_to_Another_Type;
    public static HelpId Refactorings__Move__Type_to_Another_File;
    public static HelpId Refactorings__Move__Type_to_Another_Namespace;
    public static HelpId Refactorings__Move__Type_to_Another_Type;
    public static HelpId Refactorings__Move__Type_to_Folder;
    public static HelpId Refactorings__Move__Type_to_Outer_Scope;
    public static HelpId Refactorings__Pull_Members_Up;
    public static HelpId Refactorings__Push_Members_Down;
    public static HelpId Refactorings__Remove_Unused_References;
    public static HelpId Refactorings__Rename;
    public static HelpId Refactorings__Replace_Constructor_with_Factory_Method;
    public static HelpId Refactorings__Safe_Delete;
    public static HelpId Refactorings__Use_Base_Type_Where_Possible;
    public static HelpId Reference_Options_Code_Editing_Language_Injections;
    public static HelpId Reference_Options_Code_Editing_Third_Party_Code;
    public static HelpId Reference_Options_Languages_CPP_Formatting_Style_Blank_Lines;
    public static HelpId Reference_Options_Languages_JSON_Inspections;
    public static HelpId Reference_Options_Languages_JSON_Schema_Catalogs;
    public static HelpId Reference_Options_Languages_JSON_Typing_Assistance;
    public static HelpId Reference_Options_Languages_JSON_Value_Helpers;
    public static HelpId Reference_Options_Languages_TypeScript_Generated_Code;
    public static HelpId Reference_Options_Protobuf_Formatting_Style;
    public static HelpId Reference_Options_TeamCity_General;
    public static HelpId Reference_Options_TeamCity_Source_Control_Perforce;
    public static HelpId Reference_Options_TeamCity_Source_Control_Subversion;
    public static HelpId Reference_Options_TeamCity_Source_Control_TFS;
    public static HelpId Reference_Options_Tools_AI_Assistant;
    public static HelpId Reference_Options_Tools_Build_General;
    public static HelpId Reference_Options_Tools_Build_Heuristics;
    public static HelpId Reference_Options_Tools_Build_NuGet;
    public static HelpId Reference_Options_Tools_Build_Presentation;
    public static HelpId Reference_Options_Tools_Debugger;
    public static HelpId Reference_Options_Tools_Debugger_CPP;
    public static HelpId Reference_Options_Tools_Unit_Testing_CPP_Tests;
    public static HelpId Reference_Options_Tools_Unit_Testing_xUnit;
    public static HelpId Reference_Options_dotCover_Filtering;
    public static HelpId Reference_Options_dotTrace_Profiles;
    public static HelpId Reference_Timeline_Viewer_Keyboard_Shortcuts;
    public static HelpId Reference_Timeline_Viewer_in_Visual_Studio_Options_General;
    public static HelpId Reference__Code_Style;
    public static HelpId Reference__Completion_Filters;
    public static HelpId Reference__Dialog_Boxes__Options;
    public static HelpId Reference__Dialog_Boxes__Options__Decompiler;
    public static HelpId Reference__Dialog_Boxes__Options__Filters;
    public static HelpId Reference__Dialog_Boxes__Options__Folder_Substitutions;
    public static HelpId Reference__Dialog_Boxes__Options__Source_Preview;
    public static HelpId Reference__Dialog_Boxes__Options__Subsystems;
    public static HelpId Reference__Dialog_Boxes__Options__Symbol_server_integration;
    public static HelpId Reference__Dialog_Boxes__Options__System_Module_Folding;
    public static HelpId Reference__Dialog_Boxes__Options__View;
    public static HelpId Reference__Keyboard_Shortcuts;
    public static HelpId Reference__Legend_of_Performance_Profiling_Views;
    public static HelpId Reference__Options_Decompiler;
    public static HelpId Reference__Options_Diff;
    public static HelpId Reference__Options_Symbol_Server;
    public static HelpId Reference__Options_Visual_Studio_Commands;
    public static HelpId Reference__Options__Code_Inspection__Code_Annotations;
    public static HelpId Reference__Options__Code_Inspection__Custom_Patterns;
    public static HelpId Reference__Options__Code_Inspection__Entity_Framework;
    public static HelpId Reference__Options__Code_Inspection__Generated_Code;
    public static HelpId Reference__Options__Code_Inspection__Ignored_Code;
    public static HelpId Reference__Options__Code_Inspection__Inspection_Severity;
    public static HelpId Reference__Options__Code_Inspection__Settings;
    public static HelpId Reference__Options__Code_Inspection__Settings_Auto_Import;
    public static HelpId Reference__Options__Environment__Completing_Characters;
    public static HelpId Reference__Options__Environment__Disk_Cleanup;
    public static HelpId Reference__Options__Environment__Editor;
    public static HelpId Reference__Options__Environment__Editor__Editor_Appearance;
    public static HelpId Reference__Options__Environment__Editor__Editor_Behavior;
    public static HelpId Reference__Options__Environment__Extension_Manager;
    public static HelpId Reference__Options__Environment__Feedback;
    public static HelpId Reference__Options__Environment__General;
    public static HelpId Reference__Options__Environment__IntelliSense__Autopopup;
    public static HelpId Reference__Options__Environment__IntelliSense__Completion_Appearance;
    public static HelpId Reference__Options__Environment__IntelliSense__Completion_Behavior;
    public static HelpId Reference__Options__Environment__IntelliSense__General;
    public static HelpId Reference__Options__Environment__IntelliSense__Parameter_Info;
    public static HelpId Reference__Options__Environment__Keyboard;
    public static HelpId Reference__Options__Environment__Languages;
    public static HelpId Reference__Options__Environment__Parameter_Name_Hints;
    public static HelpId Reference__Options__Environment__Performance_Guide;
    public static HelpId Reference__Options__Environment__Postfix_Templates;
    public static HelpId Reference__Options__Environment__Search_and_Navigation;
    public static HelpId Reference__Options__Environment__Tabs;
    public static HelpId Reference__Options__Environment__Updates;
    public static HelpId Reference__Options__Environment__Visual_Studio_Integration;
    public static HelpId Reference__Options__Environment__Web_Proxy_Settings;
    public static HelpId Reference__Options__General_Formatter_Style;
    public static HelpId Reference__Options__Languages__ASP_NET__Other;
    public static HelpId Reference__Options__Languages__ASP_NET__Web_Naming_Style;
    public static HelpId Reference__Options__Languages__CPP__Clang_Tidy;
    public static HelpId Reference__Options__Languages__CPP__Code_Completion;
    public static HelpId Reference__Options__Languages__CPP__Code_Generation;
    public static HelpId Reference__Options__Languages__CPP__Code_Style;
    public static HelpId Reference__Options__Languages__CPP__Formatting_Style_Tabs_and_Indents;
    public static HelpId Reference__Options__Languages__CPP__Formatting_Style__Braces_Layout;
    public static HelpId Reference__Options__Languages__CPP__Formatting_Style__Indentation_and_Alignment;
    public static HelpId Reference__Options__Languages__CPP__Formatting_Style__Spaces;
    public static HelpId Reference__Options__Languages__CPP__Formatting_Style__Wrapping_and_Aligning;
    public static HelpId Reference__Options__Languages__CPP__Inspections;
    public static HelpId Reference__Options__Languages__CPP__Naming_Style;
    public static HelpId Reference__Options__Languages__CPP__Order_of_Includes;
    public static HelpId Reference__Options__Languages__CPP__Shaders;
    public static HelpId Reference__Options__Languages__CPP__Unreal_Engine;
    public static HelpId Reference__Options__Languages__CSS__Formatting_Style_Tabs_and_Indents;
    public static HelpId Reference__Options__Languages__CSS__Formatting_Style__Code_Layout;
    public static HelpId Reference__Options__Languages__CSS__Formatting_Style__Line_Breaks;
    public static HelpId Reference__Options__Languages__CSS__Formatting_Style__Spaces;
    public static HelpId Reference__Options__Languages__CSS__Inspections;
    public static HelpId Reference__Options__Languages__CSharp__CSharp_Naming_Style;
    public static HelpId Reference__Options__Languages__CSharp__Formatting_Style_Tabs_and_Indents;
    public static HelpId Reference__Options__Languages__CSharp__Formatting_Style__Blank_Lines;
    public static HelpId Reference__Options__Languages__CSharp__Formatting_Style__Braces_Layout;
    public static HelpId Reference__Options__Languages__CSharp__Formatting_Style__Line_Breaks_and_Wrapping;
    public static HelpId Reference__Options__Languages__CSharp__Formatting_Style__Other;
    public static HelpId Reference__Options__Languages__CSharp__Formatting_Style__Spaces;
    public static HelpId Reference__Options__Languages__CSharp__Localization;
    public static HelpId Reference__Options__Languages__CSharp__Namespace_Imports;
    public static HelpId Reference__Options__Languages__CSharp__Null_Checking;
    public static HelpId Reference__Options__Languages__CSharp__Type_Members_Layout;
    public static HelpId Reference__Options__Languages__Common__Context_Actions;
    public static HelpId Reference__Options__Languages__Common__File_Header_Text;
    public static HelpId Reference__Options__Languages__Common__Generated_Members;
    public static HelpId Reference__Options__Languages__HTML__Code_Style;
    public static HelpId Reference__Options__Languages__HTML__Formatting_Style;
    public static HelpId Reference__Options__Languages__HTML__Other;
    public static HelpId Reference__Options__Languages__JavaScript__Code_Style;
    public static HelpId Reference__Options__Languages__JavaScript__Formatting_Style_Tabs_and_Indents;
    public static HelpId Reference__Options__Languages__JavaScript__Formatting_Style__Braces_Layout;
    public static HelpId Reference__Options__Languages__JavaScript__Formatting_Style__Line_Breaks;
    public static HelpId Reference__Options__Languages__JavaScript__Formatting_Style__Other;
    public static HelpId Reference__Options__Languages__JavaScript__Formatting_Style__Spaces;
    public static HelpId Reference__Options__Languages__JavaScript__Inspections_Analysis;
    public static HelpId Reference__Options__Languages__JavaScript__Naming_Style;
    public static HelpId Reference__Options__Languages__Razor__Code_Style;
    public static HelpId Reference__Options__Languages__TypeScript_Naming_Style;
    public static HelpId Reference__Options__Languages__TypeScript__Code_Style;
    public static HelpId Reference__Options__Languages__TypeScript__Formatting_Braces_Layout;
    public static HelpId Reference__Options__Languages__TypeScript__Formatting_Line_Breaks;
    public static HelpId Reference__Options__Languages__TypeScript__Formatting_Other;
    public static HelpId Reference__Options__Languages__TypeScript__Formatting_Spaces;
    public static HelpId Reference__Options__Languages__TypeScript__Formatting_Style_Tabs_and_Indents;
    public static HelpId Reference__Options__Languages__TypeScript__Inspections;
    public static HelpId Reference__Options__Languages__Virtual_Formatting_Style_Braces_Layout;
    public static HelpId Reference__Options__Languages__Virtual_Formatting_Style_Tabs_and_Indents;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__Code_Style;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__Formatting_Style_Tabs_and_Indents;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Blank_Lines;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Line_Breaks_and_Wrapping;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Other;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Spaces;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__Namespace_Imports;
    public static HelpId Reference__Options__Languages__Visual_Basic__NET__VB_Naming_Style;
    public static HelpId Reference__Options__Languages__XAML__Editor;
    public static HelpId Reference__Options__Languages__XAML__Xaml_Naming_Style;
    public static HelpId Reference__Options__Languages__XML__Editor;
    public static HelpId Reference__Options__Languages__XML__Formatting_Style;
    public static HelpId Reference__Options__ShaderLab_Formatting;
    public static HelpId Reference__Options__Tools__Code_Cleanup;
    public static HelpId Reference__Options__Tools__External_Sources;
    public static HelpId Reference__Options__Tools__Localization;
    public static HelpId Reference__Options__Tools__NodeJS;
    public static HelpId Reference__Options__Tools__Stack_Trace_Explorer_Options;
    public static HelpId Reference__Options__Tools__To_Do_Items;
    public static HelpId Reference__Options__Tools__Unit_Testing__General;
    public static HelpId Reference__Options__Tools__Unit_Testing__MSTest;
    public static HelpId Reference__Options__Tools__Unit_Testing__NUnit;
    public static HelpId Reference__Options__Tools__Unit_Testing__QUnit;
    public static HelpId Reference__Options__Tools__Unit_Testing__Test_Linker;
    public static HelpId Reference__Options__Tools__Unit_Testing__Test_Runner;
    public static HelpId Reference__Options__Tools__Unit_Testing__VSTest;
    public static HelpId Reference__Options__Tools__Web_Linters_ESLint;
    public static HelpId Reference__Options__Tools__Web_Linters_JSLint;
    public static HelpId Reference__Options__Tools__Web_Linters_TSLint;
    public static HelpId Reference__Options__XML_Doc_Comments_Formatting_Style;
    public static HelpId Reference__Options__dotCover;
    public static HelpId Reference__Options__dotCover__Continuous_Testing;
    public static HelpId Reference__Options__dotCover__General;
    public static HelpId Reference__Template_Editor;
    public static HelpId Reference__Windows__Type_Hierarchy_Window;
    public static HelpId Reference__Windows__Unit_Test_Explorer;
    public static HelpId Reference__Windows__Unit_Test_Sessions;
    public static HelpId Reference_dotMemory_Options_General;
    public static HelpId Resources__LocalizationManager;
    public static HelpId Resources__Refactorings;
    public static HelpId SQL_Client;
    public static HelpId Settings_CPP_Formatting_General;
    public static HelpId Settings_DPA_ASP;
    public static HelpId Settings_DPA_Database;
    public static HelpId Settings_DPA_Memory_Allocation;
    public static HelpId Settings_Grammar_Spelling_General;
    public static HelpId Settings_Grammar_Spelling_Grammar;
    public static HelpId Settings_Grammar_Spelling_Spelling;
    public static HelpId Settings_Inlay_Hints_CPP_Aggregate_Initialization;
    public static HelpId Settings_Inlay_Hints_CPP_Other;
    public static HelpId Settings_Inlay_Hints_CPP_Parameter_Name_Hints;
    public static HelpId Settings_Inlay_Hints_CPP_Type_Conversion_Hints;
    public static HelpId Settings_Inlay_Hints_CPP_Type_Name_Hints;
    public static HelpId Settings_Inlay_Hints_CPP_Unreal_Blueprint;
    public static HelpId Settings_Inlay_Hints_CS_Other;
    public static HelpId Settings_Inlay_Hints_CS_Interceptors;
    public static HelpId Settings_Inlay_Hints_CS_Parameter_Name_Hints;
    public static HelpId Settings_Inlay_Hints_CS_Type_Conversion_Hints;
    public static HelpId Settings_Inlay_Hints_CS_Type_Name_Hints;
    public static HelpId Settings_Inlay_Hints_Unity;
    public static HelpId Settings_Inlay_Hints_VB_Other;
    public static HelpId Settings_Inlay_Hints_VB_Parameter_Name_Hints;
    public static HelpId Settings_Inlay_Hints_XAML;
    public static HelpId Settings_Unity_Engine;
    public static HelpId Specifying_License_Information;
    public static HelpId Starting_Local_Profiling_Session_VS;
    public static HelpId Studying_Profiling_Results__Formatting_Functions;
    public static HelpId Studying_Profiling_Results__Performance_Forecasting;
    public static HelpId StyleCop_Styles;
    public static HelpId Subsystems;
    public static HelpId Templates__Applying_Templates__Creating_Files_from_Templates;
    public static HelpId Thread_State;
    public static HelpId Using_Clang_Format;
    public static HelpId Using_EditorConfig;
    public static HelpId Using_product_as_a_Symbol_Server;
    public static HelpId dotCover__Color_Scheme;
    public static HelpId Reference__Options__Tools;
    public static HelpId solution_personal_layer;
    public static HelpId Unable_to_Open_a_Snapshot;
    public static HelpId Dispose_Analysis;
    public static HelpId Settings_ReSpeller;
    public static HelpId settings_dpa_filtering;
    public static HelpId dpa_closure;
    public static HelpId dpa_large_object_heap;
    public static HelpId dpa_small_object_heap;
    public static HelpId dpa_db_commands_count;
    public static HelpId dpa_db_record_count;
    public static HelpId dpa_db_connection_count;
    public static HelpId dpa_db_command_duration;
    public static HelpId dpa_mvc_action_duration;
    public static HelpId dpa_razor_handler_duration;
    public static HelpId dpa_razor_view_component_duration;
    public static HelpId MigratingToTimelineViewer;
    public static HelpId dotTrace_Introduction;
    public static HelpId dpa_debugging_memory;
    public static HelpId Fix_Asp_Issues;
    public static HelpId Fix_Database_Issues;
    public static HelpId dpa_prerequisites;
    public static HelpId Get_Started_with_Timeline_Profiling_Basic;
    public static HelpId ReSpeller_dictionaries;
    public static HelpId ExcludedCallTreePaths;
    public static HelpId Threads_Diagram;
    public static HelpId Process_Overview;
    public static HelpId Background_GC;
    public static HelpId Garbage_Collection;
    public static HelpId Running;
    public static HelpId Waiting;
    public static HelpId Settings_Godot_Engine;
    public static HelpId Settings_Languages_Unreal_Engine;
    public static HelpId Settings_Languages_FSHARP_Interactive;
    public static HelpId Settings_Inlay_Hints_Virtual_Indenting;
}
public interface JetBrains.Application.Help.IContextHelpActionHandler {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    public abstract virtual bool IsAvailable(IDataContext context);
    public abstract virtual bool Show(IDataContext context);
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.Host.TeamCity.ITeamCityEnvZone {
}
public class JetBrains.Application.Host.TeamCity.JetTeamCityHost : object {
    public static ILogger Logger;
    private static JetTeamCityHost();
    [PublicAPIAttribute]
public static void RunApplication(Func`2<Lifetime, SerializedValuesResolver> FResolve);
}
public class JetBrains.Application.Hosting.CommandLineAdapter : object {
    private ICommandLine myCommandLine;
    public ICommandLine CommandLine { get; }
    public string DefaultKeyMarker { get; }
    public char DefaultShortcutMarker { get; }
    public string DefaultNonKeyedMarker { get; }
    public char DefaultValueSeparator { get; }
    public CommandLineAdapter(ICommandLine commandLine);
    public ICommandLine get_CommandLine();
    public sealed virtual IEnumerable`1<CommandLineArgument> GetArguments(KeyDefinitionSet keyDefinitions);
    public sealed virtual string get_DefaultKeyMarker();
    public sealed virtual char get_DefaultShortcutMarker();
    public sealed virtual string get_DefaultNonKeyedMarker();
    public sealed virtual char get_DefaultValueSeparator();
    public sealed virtual bool IsKeyOrShortcutMarker(char ch);
}
public class JetBrains.Application.Hosting.CommandLineParameter : ValueType {
    [CanBeNullAttribute]
public string Key;
    [CanBeNullAttribute]
public string Value;
    public CommandLineParameter(string key, string value);
    public CommandLineParameter(string key);
    public virtual string ToString();
}
[AttributeUsageAttribute("12")]
public class JetBrains.Application.Hosting.CommandLineSwitchAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParametersCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; }
    public int ParametersCount { get; }
    public string Description { get; }
    public CommandLineSwitchAttribute(string name, int parametersCount, string description);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_ParametersCount();
    [CompilerGeneratedAttribute]
public string get_Description();
}
public class JetBrains.Application.Hosting.HostCommandLine : object {
    private IList`1<string> myKeys;
    private IList`1<string> myKeysAsReadonly;
    private IList`1<string> myNonKeyedParameters;
    private OneToListMap`2<string, string> myMapKeyToValues;
    private OneToListMap`2<string, string> myMapIgnoreCaseKeyToValues;
    private IListEvents`1<CommandLineParameter> myParameters;
    private IList`1<string> myNonKeyedParametersAsReadOnly;
    private IList`1<string> myOriginalArgsAsReadonly;
    private IList`1<string> myOriginalArgs;
    private FileSystemPath myStartupDirectory;
    private string myRawCommandLine;
    public IList`1<string> Keys { get; }
    public IList`1<string> NonKeyedParameters { get; }
    private bool JetBrains.Application.Hosting.IHostCommandLine.IsProductDecorationRequiredOnKeys { get; }
    private IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.Parameters { get; }
    private FileSystemPath JetBrains.Application.Hosting.ICommandLine.StartupDirectory { get; }
    [NotNullAttribute]
public IList`1<string> OriginalArgs { get; }
    public HostCommandLine(FileSystemPath startupDirectory, String[] args, string rawCommandLine);
    public HostCommandLine(FileSystemPath startupDirectory, String[] args);
    public HostCommandLine(FileSystemPath startupDirectory);
    public sealed virtual string GetNonKeyedTailRaw(int startNonKeyedParamIndex);
    public sealed virtual IList`1<string> get_Keys();
    public sealed virtual bool IsKeyDefined(string key, bool isCaseSensitive);
    public sealed virtual string TryGetKeyValue(string key, bool isCaseSensitive);
    public sealed virtual IList`1<string> GetKeyValues(string key, bool isCaseSensitive);
    public sealed virtual IList`1<string> get_NonKeyedParameters();
    private sealed virtual override string JetBrains.Application.Hosting.IHostCommandLine.MakeFullCommandLineKeyName(string keyWithProductDecoration);
    private sealed virtual override bool JetBrains.Application.Hosting.IHostCommandLine.get_IsProductDecorationRequiredOnKeys();
    private sealed virtual override IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.get_Parameters();
    private sealed virtual override FileSystemPath JetBrains.Application.Hosting.ICommandLine.get_StartupDirectory();
    public void AddParameters(String[] args);
    private void TossParsedParameters(IList`1<CommandLineParameter> parameters);
    [NotNullAttribute]
public static IList`1<CommandLineParameter> Parse(String[] args);
    private static bool IsKeyed(string arg);
    public IList`1<string> get_OriginalArgs();
    [NotNullAttribute]
public static string GetCommandLineParameterText(CommandLineParameter parameter, string sProductName, bool isOmittingDefaultProductName);
    [NotNullAttribute]
public static string GetCommandLineText(IEnumerable`1<CommandLineParameter> parameters, string sProductName, bool isOmittingDefaultProductName);
    [NotNullAttribute]
public static HostCommandLine CreateFromCurrentEnvironment(String[] args);
}
public interface JetBrains.Application.Hosting.ICommandLine {
    [NotNullAttribute]
public IList`1<string> Keys { get; }
    [NotNullAttribute]
public IList`1<string> NonKeyedParameters { get; }
    [NotNullAttribute]
public IListEvents`1<CommandLineParameter> Parameters { get; }
    [NotNullAttribute]
public FileSystemPath StartupDirectory { get; }
    public abstract virtual bool IsKeyDefined(string key, bool isCaseSensitive);
    [CanBeNullAttribute]
public abstract virtual string TryGetKeyValue(string key, bool isCaseSensitive);
    [NotNullAttribute]
public abstract virtual IList`1<string> GetKeyValues(string key, bool isCaseSensitive);
    public abstract virtual IList`1<string> get_Keys();
    public abstract virtual IList`1<string> get_NonKeyedParameters();
    public abstract virtual IListEvents`1<CommandLineParameter> get_Parameters();
    public abstract virtual FileSystemPath get_StartupDirectory();
}
[ExtensionAttribute]
public static class JetBrains.Application.Hosting.ICommandLineEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetArguments(ICommandLine commandLine, String[] keys);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Remove it with Common.Util.Shell.CommanLineParser. Use ICommandLineMapper<> instead.")]
public static string GetNonKeyedTail(ICommandLine commandLine, int startNonKeyedParamIndex);
}
public interface JetBrains.Application.Hosting.IHostCommandLine {
    public bool IsProductDecorationRequiredOnKeys { get; }
    public abstract virtual bool get_IsProductDecorationRequiredOnKeys();
    [NotNullAttribute]
public abstract virtual string MakeFullCommandLineKeyName(string sKeyWithProductDecoration);
}
[ExtensionAttribute]
public static class JetBrains.Application.Hosting.IHostCommandLineEx : object {
    [ExtensionAttribute]
public static bool IsKeyDefinedInAnyProduct(IHostCommandLine thіs, string key, bool isCaseSensitive);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Hosting.IProductCommandLine {
    [NotNullAttribute]
public string KeyPrefix { get; }
    public bool IsKeyPrefixOptional { get; }
    public abstract virtual string get_KeyPrefix();
    public abstract virtual bool get_IsKeyPrefixOptional();
    [NotNullAttribute]
public abstract virtual string MakeFullCommandLineKeyName(string sShortKeyName);
}
public class JetBrains.Application.Hosting.ParsedOptionsResult`1 : object {
    public TResult Result;
    [NotNullAttribute]
public IHelpGenerator HelpGenerator;
    public ParsedOptionsResult`1(TResult result, IHelpGenerator helpGenerator);
}
[ExtensionAttribute]
public static class JetBrains.Application.Hosting.ParserHelpers : object {
    public static ParsedOptionsResult`1<TResult> ParseOptionsWithFallback(string commandLine, Action`1<string> displayHelp, Action`1<Builder> mapperConfigurator);
    public static TResult ParseOptions(string commandLine, String& help);
    public static TResult ParseOptions(string commandLine, Action`1<string> displayHelp);
    [ExtensionAttribute]
public static void UnixStyleHelpCaseInsensitiveAutoWidth(Builder config);
    [ExtensionAttribute]
public static void UnixStyleHelpCaseInsensitiveCustomWidth(Builder config, int totalWidth, int optionColumnWidth);
    private static TResult ParseOptionsCore(ICommandLineParser commandLineParser, String& helpString, IHelpGenerator& helpGenerator, Action`1<Builder> mapperConfigurator);
}
public class JetBrains.Application.Hosting.ProductCommandLine : object {
    private IHostCommandLine myCommandLineHost;
    private string myProductPrefix;
    private bool myIsKeyPrefixOptional;
    private IListEvents`1<CommandLineParameter> myParameters;
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.Keys { get; }
    private IList`1<string> JetBrains.Application.Hosting.ICommandLine.NonKeyedParameters { get; }
    private string JetBrains.Application.Hosting.IProductCommandLine.KeyPrefix { get; }
    private bool JetBrains.Application.Hosting.IProductCommandLine.IsKeyPrefixOptional { get; }
    private IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.Parameters { get; }
    private FileSystemPath JetBrains.Application.Hosting.ICommandLine.StartupDirectory { get; }
    public ProductCommandLine(Lifetime lifetime, IHostCommandLine cmdlHost, string sProductPrefix, bool isKeyPrefixOptional);
    private sealed virtual override bool JetBrains.Application.Hosting.ICommandLine.IsKeyDefined(string key, bool isCaseSensitive);
    private static void AssertValidKey(string key);
    private string PrefixKey(string key);
    private sealed virtual override string JetBrains.Application.Hosting.ICommandLine.TryGetKeyValue(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.GetKeyValues(string key, bool isCaseSensitive);
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_Keys();
    private sealed virtual override IList`1<string> JetBrains.Application.Hosting.ICommandLine.get_NonKeyedParameters();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.get_KeyPrefix();
    private sealed virtual override bool JetBrains.Application.Hosting.IProductCommandLine.get_IsKeyPrefixOptional();
    private sealed virtual override string JetBrains.Application.Hosting.IProductCommandLine.MakeFullCommandLineKeyName(string sShortKeyName);
    private sealed virtual override IListEvents`1<CommandLineParameter> JetBrains.Application.Hosting.ICommandLine.get_Parameters();
    private sealed virtual override FileSystemPath JetBrains.Application.Hosting.ICommandLine.get_StartupDirectory();
}
public class JetBrains.Application.Hosting.RawCommandLineAdapter : CommandLineAdapter {
    public RawCommandLineAdapter(ICommandLine commandLine);
    public sealed virtual string GetNonKeyedTailRaw(int startNonKeyedParamIndex);
}
[EnvironmentComponentAttribute("18")]
public class JetBrains.Application.HostProductInfoComponent : object {
    private HostInfo myHostInfo;
    private Lazy`1<ApplicationPackageArtifact> myHostPackage;
    public RasterDeviceImages ProductAboutBoxImage { get; }
    public string HelpUrl { get; }
    public bool ApplyPreferredProductArgumentToHelpUrl { get; }
    public string ProductTechnicalName { get; }
    public string ProductPresentableName { get; }
    public string CompanyNameLegal { get; }
    public string CompanyName { get; }
    public JetSemanticVersion Version { get; }
    public string VersionMarketingString { get; }
    public string ProductUrl { get; }
    public string ProductTwitterUrl { get; }
    public string ProductUrlEvaluate { get; }
    public ByteArrayIconGroup ProductIcon { get; }
    public DateTime BuildDate { get; }
    public DateTime SubscriptionCheckDate { get; }
    public HostProductInfoComponent(Lifetime lifetime, HostInfo hostInfo, ApplicationPackages apppkgs, ILogger logger, Assembly assemblyInPackage);
    public virtual RasterDeviceImages get_ProductAboutBoxImage();
    public virtual string get_HelpUrl();
    public virtual bool get_ApplyPreferredProductArgumentToHelpUrl();
    public sealed virtual string get_ProductTechnicalName();
    public virtual string get_ProductPresentableName();
    public virtual string get_CompanyNameLegal();
    public virtual string get_CompanyName();
    public sealed virtual JetSemanticVersion get_Version();
    public virtual string get_VersionMarketingString();
    public virtual string get_ProductUrl();
    public virtual string get_ProductTwitterUrl();
    public virtual string get_ProductUrlEvaluate();
    public virtual ByteArrayIconGroup get_ProductIcon();
    public sealed virtual DateTime get_BuildDate();
    public sealed virtual DateTime get_SubscriptionCheckDate();
}
[ExtensionAttribute]
public static class JetBrains.Application.I18n.CultureAwareSingularToPlural : object {
    [ExtensionAttribute]
public static string GetPlural(string singular);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public abstract class JetBrains.Application.I18n.CultureContextComponent : object {
    [CompilerGeneratedAttribute]
private IProperty`1<CultureInfo> <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private static IProperty`1<CultureContextComponent> <Instance>k__BackingField;
    public IProperty`1<CultureInfo> Culture { get; protected set; }
    public static IProperty`1<CultureContextComponent> Instance { get; }
    private static CultureContextComponent();
    [CompilerGeneratedAttribute]
public IProperty`1<CultureInfo> get_Culture();
    [CompilerGeneratedAttribute]
protected void set_Culture(IProperty`1<CultureInfo> value);
    [CompilerGeneratedAttribute]
public static IProperty`1<CultureContextComponent> get_Instance();
    public abstract virtual IEnumerable`1<CultureInfo> GetInstalledCultures();
    public abstract virtual JetResourceManager CreateResourceManager(string baseName, Assembly assembly);
    public abstract virtual void ActivatePlugins(ApplicationPackagesFiles applicationPackagesFiles);
}
[EnvironmentComponentAttribute("18")]
public class JetBrains.Application.I18n.CultureContextComponentBase : CultureContextComponent {
    protected Lifetime Lifetime;
    [CanBeNullAttribute]
private ApplicationPackagesFiles myApplicationPackagesFiles;
    [CanBeNullAttribute]
private CultureContextComponent myFallbackInstance;
    protected I18nDebugMarker DebugMode;
    protected CultureContextComponentBase(Lifetime lifetime, CultureOptionsReader cultureOptionsReader);
    public CultureContextComponentBase(Lifetime lifetime, CultureOptionsReader cultureOptionsReader, ApplicationPackagesFiles applicationPackagesFiles);
    private void UpdateCulture(CultureOptionsReader cultureOptionsReader);
    public virtual void ActivatePlugins(ApplicationPackagesFiles applicationPackagesFiles);
    public virtual IEnumerable`1<CultureInfo> GetInstalledCultures();
    public virtual JetResourceManager CreateResourceManager(string baseName, Assembly assembly);
    private FileSystemPath ResolveResourcesFile(string baseName);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__6_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1();
}
[ShellComponentAttribute("18")]
public class JetBrains.Application.I18n.CultureContextComponentPluginActivator : object {
    public CultureContextComponentPluginActivator(ILogger logger, ApplicationPackagesFiles applicationPackagesFiles);
}
public static class JetBrains.Application.I18n.CultureEnvVars : object {
    public static string JET_BACKEND_CULTURE;
    public static string JET_I18N_DEBUG;
    public static string JET_I18N_DEBUG_LOWLINE;
    public static string ExtensionRoot;
    public static string ResourcesExtension;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "ReSharperCultureSettingsSettingDescription")]
public class JetBrains.Application.I18n.CultureOptions : object {
    public static string DefaultCulture;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "CultureSettingDescription")]
public string Culture;
    public CultureOptions(string culture);
    private bool Equals(CultureOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.I18n.CultureOptionsReader : object {
    [NotNullAttribute]
private IDataAccess`1<CultureOptions> myDataAccess;
    [CanBeNullAttribute]
private CultureOptions myOptions;
    private bool mySilent;
    [CompilerGeneratedAttribute]
private ISignal`1<CultureInfo> <CultureChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ShellRestartRequested>k__BackingField;
    [NotNullAttribute]
public ISignal`1<CultureInfo> CultureChanged { get; }
    [NotNullAttribute]
public ISimpleSignal ShellRestartRequested { get; }
    public CultureOptionsReader(IApplicationHost host, ProductSettingsLocation settingsLocation, DataAccess dataAccess);
    [CompilerGeneratedAttribute]
public ISignal`1<CultureInfo> get_CultureChanged();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_ShellRestartRequested();
    [CanBeNullAttribute]
public CultureOptions Get();
    public void Set(CultureOptions options);
}
public class JetBrains.Application.I18n.ErrorJetResourceManager : JetResourceManager {
    public static ErrorJetResourceManager Instance;
    private static ILogger ourLog;
    private static ErrorJetResourceManager();
    public virtual string GetString(string name, CultureInfo culture);
}
public class JetBrains.Application.I18n.FallbackCultureContextComponent : CultureContextComponentBase {
    public virtual JetResourceManager CreateResourceManager(string baseName, Assembly assembly);
}
public class JetBrains.Application.I18n.FallbackJetResourceManager : JetResourceManager {
    private static ILogger ourLog;
    public FallbackJetResourceManager(Lifetime lifetime, CultureContextComponent cultureContextComponent, string baseName, Assembly assembly, I18nDebugMarker debugMode);
    private static FallbackJetResourceManager();
    public virtual string GetString(string name, CultureInfo culture);
}
public enum JetBrains.Application.I18n.I18nDebugMarker : Enum {
    public int value__;
    public static I18nDebugMarker None;
    public static I18nDebugMarker EarthMarker;
    public static I18nDebugMarker UnicodeLowLine;
}
[ExtensionAttribute]
public static class JetBrains.Application.I18n.I18NUtils : object {
    public static IEnumerable`1<CultureInfo> GetAvailableCultures(IExtensionManager extensionManager, CultureContextComponent cultureContextComponent);
    [IteratorStateMachineAttribute("JetBrains.Application.I18n.I18NUtils/<SelectAvailableCultures>d__1`1")]
[ExtensionAttribute]
public static IEnumerable`1<TValue> SelectAvailableCultures(IExtensionManager extensionManager, Func`3<Extension, CultureInfo, TValue> factory);
    [CanBeNullAttribute]
private static CultureInfo GetCulture(IPackage package);
    public static CultureInfo GetCultureInfo(string cultureTag);
    public static void SetCultureSilently(Lifetime lifetime, CultureOptionsReader cultureOptionsReader, IContextBoundSettingsStoreLive contextBoundSettingsStoreLiv, CultureInfo culture);
}
public class JetBrains.Application.I18n.JetResourceManager : object {
    private static ILogger ourLog;
    private static string Label;
    private ReaderWriterLockSlim myLock;
    private Lifetime myLifetime;
    private CultureContextComponent myCultureContextComponent;
    protected string BaseName;
    [CanBeNullAttribute]
private ResourceManager myDefaultResourceManager;
    private ResourceManager myFileBasedResourceManager;
    private I18nDebugMarker myDebugMarker;
    private Lazy`1<ChoiceFormatter> myChoiceFormatter;
    [CanBeNullAttribute]
public ChoiceFormatter ChoiceFormatter { get; }
    protected JetResourceManager(Lifetime lifetime);
    public JetResourceManager(Lifetime lifetime, CultureContextComponent cultureContextComponent, string baseName, Assembly assembly, string resourceDir, I18nDebugMarker debugMode);
    private static JetResourceManager();
    public ChoiceFormatter get_ChoiceFormatter();
    public virtual string GetString(string name, CultureInfo culture);
    private string GetStringImpl(string name, CultureInfo culture, I18nDebugMarker debugMarker);
    private string MakeDebugStringIfNeeded(string value, I18nDebugMarker debugMarker);
    public static string GetString(Type resourceType, string resourceName);
    public static string GetDescriptionViaAttribute(ICustomAttributeProvider provider);
    [CompilerGeneratedAttribute]
private ChoiceFormatter <.ctor>b__13_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__13_1();
}
[ExtensionAttribute]
public static class JetBrains.Application.I18n.LocalizedStringUtils : object {
    [ExtensionAttribute]
public static string JoinEnumeration(IEnumerable`1<string> strs);
}
public class JetBrains.Application.I18n.Plurals.ChoiceFormatter : object {
    [CompilerGeneratedAttribute]
private CultureContextComponent <cultureContextComponent>P;
    [CompilerGeneratedAttribute]
private Mapper <mapper>P;
    private static ILogger ourLogger;
    [NotNullAttribute]
private ConcurrentDictionary`2<string, IReadOnlyDictionary`2<string, string>> myCache;
    public ChoiceFormatter(CultureContextComponent cultureContextComponent, Mapper mapper);
    private static ChoiceFormatter();
    public sealed virtual object GetFormat(Type formatType);
    public sealed virtual string Format(string format, object arg, IFormatProvider formatProvider);
    private static IReadOnlyDictionary`2<string, string> ExtractMappings(string format);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.I18n.Plurals.Mapper : ValueType {
    [CompilerGeneratedAttribute]
private Func`2<int, string> <mapper>P;
    public Mapper(Func`2<int, string> mapper);
    public string Map(int n);
}
public static class JetBrains.Application.I18n.Plurals.MappingsParser : object {
    private static IReadOnlyDictionary`2<string, OperatorInfo> ourOperators;
    private static MappingsParser();
    public static Mapper Parse(string mappings);
    [CompilerGeneratedAttribute]
internal static void <Parse>g__ApplyOperator|2_0(string op, <>c__DisplayClass2_0& );
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.I18n.RestartShellConfigurator : object {
    public RestartShellConfigurator(Lifetime lifetime, CultureOptionsReader cultureOptionsReader, CultureContextComponent cultureContextComponent);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.I18n.RestartShellOnCultureChanges : object {
    [NotNullAttribute]
private IProperty`1<ProductCanBeStartedVerdict> myVerdict;
    public double Priority { get; }
    public RestartShellOnCultureChanges(Lifetime lifetime, IThreading threading, CultureOptionsReader cultureOptionsReader);
    public sealed virtual double get_Priority();
    public sealed virtual IProperty`1<ProductCanBeStartedVerdict> CreateCanBeStarted(Lifetime lifetime);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.I18n.ShellCultureOptionsReader : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private CultureOptionsReader myCultureOptionsReader;
    [NotNullAttribute]
private IContextBoundSettingsStoreLive myContextBoundSettingsStoreLive;
    public ShellCultureOptionsReader(Lifetime lifetime, CultureOptionsReader cultureOptionsReader, ISettingsStore settingsStore, ISettingsOptimization settingsOptimization, GlobalPerProductStorage globalPerProductStorage);
    private static void OnChange(CultureOptionsReader cultureOptionsReader, IContextBoundSettingsStoreLive contextBoundSettingsStoreLive, ISettingsOptimization settingsOptimization, SettingsKey settingsKey);
    public void SetCultureSilently(CultureInfo culture);
    public CultureInfo GetCulture();
}
public class JetBrains.Application.I18n.StandaloneCultureContextComponent : CultureContextComponentBase {
    public StandaloneCultureContextComponent(Lifetime lifetime);
    public static void Ensure(Lifetime lifetime);
}
[BuildHelperAttribute]
public class JetBrains.Application.I18n.VsCultureContextComponentForBuild : CultureContextComponentBase {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.IApplicationHost {
    public HostInfo HostInfo { get; }
    public IHostProductInfo HostProductInfo { get; }
    public abstract virtual HostInfo get_HostInfo();
    public abstract virtual IHostProductInfo get_HostProductInfo();
    public abstract virtual FileSystemPath GetHostFolder(HostFolderLifetime folderLifetime, ApplicationHostDetails hostDetails);
    public abstract virtual RelativePath GetHostRelativeFolder(ApplicationHostDetails hostDetails);
    public abstract virtual string HostIdentifier(ApplicationHostDetails hostDetails);
}
public interface JetBrains.Application.IApplicationHostImages {
    [NotNullAttribute]
public RasterDeviceImages ProductAboutBoxImage { get; }
    public abstract virtual RasterDeviceImages get_ProductAboutBoxImage();
}
public interface JetBrains.Application.IApplicationShortcutsTrait {
    public bool IsOobeChoosingAltKeyboardScheme { get; }
    public abstract virtual bool get_IsOobeChoosingAltKeyboardScheme();
}
public class JetBrains.Application.Icons.Animation.RotatedIconId : AnimatedIconId {
    [NotNullAttribute]
public IconId StaticIcon;
    public RotatedIconId(IconId iconidStatic);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.Animation.RotatedIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.ColorIcons.ColorIconIdOwner : object {
    public static JetSize IconSize;
    public static JetSize SwatchCornerRadii;
    public static JetThickness SwatchPadding;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static ColorIconIdOwner();
    private static Nullable`1<bool> GetIsDark(IconTheme theme);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner : object {
    [NotNullAttribute]
private ShellPartCatalogSet myCatalogset;
    [NotNullAttribute]
private ILogger myLogger;
    private FrugalLocalLazy`1<Dictionary`2<string, Tuple`2<string, string>>> myHashAllNamesCaseInsensitive;
    private FrugalLocalLazy`1<Dictionary`2<string, string>> myHashAllNamesCaseSensitive;
    private LocalLazy`2<Dictionary`2<CompiledIconPackIdentity, IconPack>, CompiledIconIdOwner> myMapIconPacks;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    public CompiledIconIdOwner(Lifetime lifetime, ShellPartCatalogSet catalogset, ILogger logger);
    [NotNullAttribute]
private static Dictionary`2<CompiledIconPackIdentity, IconPack> LoadIconsMap(CompiledIconIdOwner instance);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertUniqueNames(string iconPackResName, Object[] names);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public static class JetBrains.Application.Icons.CompiledIcons.CompiledIconIdV1SerializationHelpers : object {
    public static ValueTuple`2<string, ImmutableArray`1<ValueTuple`2<string, ImmutableArray`1<ValueTuple`2<Drawing, string>>>>> LoadFromAssemblyLevelPackAttribute(PartCatalogAttribute packattribute);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass")]
public class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsAttribute : PartAttribute {
}
public abstract class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass : AnyCompiledIconClass {
    [NotNullAttribute]
public virtual ThemedIconThemeImage[] GetThemeImages();
    private void ThrowNoImages(FieldInfo[] fields);
}
public class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId : IconId {
    private static Type TypeofCompiledIconCsClass;
    [CanBeNullAttribute]
private Nullable`1<PartCatalogType> myIconClassCatalogType;
    [CanBeNullAttribute]
private Type myIconClassRuntimeType;
    [NotNullAttribute]
public string FullName { get; }
    public StringSource SimpleName { get; }
    public CompiledIconCsId(PartCatalogType typeofIconClass);
    public CompiledIconCsId(Type typeofIconClass);
    private static CompiledIconCsId();
    public string get_FullName();
    public StringSource get_SimpleName();
    [NotNullAttribute]
public Type BindToIconClassRuntimeType();
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object oo);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CanBeNullAttribute]
public Nullable`1<PartCatalogType> TryGetIconClassCatalogType();
    [CanBeNullAttribute]
public Type TryGetIconClassRuntimeType();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner : object {
    private static ILogger Logger;
    public static string ThemeImageLiteralFieldNamePrefix;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static CompiledIconCsIdOwner();
    public static TiImage TryGetImageCore(CompiledIconCsId iconid, IconTheme theme, OnError onerror);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public class JetBrains.Application.Icons.CompiledIconsCs.IsIconNamesInPrivateSpaceAttribute : PartAttribute {
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.ComposedIcons.CompositeIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public class JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconId : IconId {
    public double Alpha;
    [NotNullAttribute]
public IconId BaseIcon;
    public double BlurRadius;
    public Nullable`1<JetRgbaColor> MonochromeColor;
    public EffectOnIconId(IconId baseicon, double alpha, Nullable`1<JetRgbaColor> colorMonochrome, double fBlurRadius);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static ImageSource ApplyEffectAlpha(ImageSource image, double alpha);
    [NotNullAttribute]
private static ImageSource ApplyEffectBlur(ImageSource image, double radius);
    [NotNullAttribute]
private static ImageSource ApplyEffectMonochrome(ImageSource image, Color colorMonochrome);
    private static bool ApplyEffectMonochrome_Brush(Brush brush, Color colorMonochrome);
    private static bool ApplyEffectMonochrome_Drawing(Drawing drawing, Color colorMonochrome);
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
}
public interface JetBrains.Application.Icons.IIconIdOwner {
    [NotNullAttribute]
public Type IconIdType { get; }
    public abstract virtual Type get_IconIdType();
    [CanBeNullAttribute]
public abstract virtual ImageSource TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public interface JetBrains.Application.Icons.IIconIdOwner2 {
    [CanBeNullAttribute]
public abstract virtual TiImage TryGetImage2(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public class JetBrains.Application.Icons.ImageSourceIcons.ImageSourceIconId : IconId {
    private ImageSource myImageSource;
    public ImageSource ImageSource { get; }
    public ImageSourceIconId(ImageSource imageSource);
    public ImageSource get_ImageSource();
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.ImageSourceIcons.ImageSourceIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public interface JetBrains.Application.Icons.IThemedIconManager {
    [NotNullAttribute]
public IProperty`1<IconTheme> CurrentIconTheme { get; }
    public ThemedIconManagerIcons Icons { get; }
    public abstract virtual IProperty`1<IconTheme> get_CurrentIconTheme();
    public abstract virtual ThemedIconManagerIcons get_Icons();
    [NotNullAttribute]
public abstract virtual IThemedIconManagerRawApi GetRawApi();
}
[ExtensionAttribute]
public static class JetBrains.Application.Icons.IThemedIconManagerEx : object {
    [ExtensionAttribute]
public static ThemedIconLoader GetIcon(IThemedIconManager thіs);
}
public interface JetBrains.Application.Icons.IThemedIconManagerPerThemeCache {
    [NotNullAttribute]
public abstract virtual Bitmap GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    [NotNullAttribute]
public abstract virtual ImageSource GetIconImageSource(IconId iconid);
    [NotNullAttribute]
public abstract virtual TiImage GetIconTiImage(IconId iconid);
    [CanBeNullAttribute]
public abstract virtual ImageSource TryGetIconImageSource(IconId id);
    [CanBeNullAttribute]
public abstract virtual TiImage TryGetIconTiImage(IconId id);
}
public interface JetBrains.Application.Icons.IThemedIconManagerRawApi {
    [NotNullAttribute]
public abstract virtual Bitmap GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    [NotNullAttribute]
public abstract virtual IProperty`1<Bitmap> GetIconGdipBitmapLive(IconId iconId, RasterizationResolution resolution);
    [NotNullAttribute]
public abstract virtual ImageSource GetIconImageSource(IconId id);
    [NotNullAttribute]
public abstract virtual IProperty`1<ImageSource> GetIconImageSourceLive(IconId iconId);
    [NotNullAttribute]
public abstract virtual TiImage GetIconTiImage(IconId id);
    [NotNullAttribute]
public abstract virtual IProperty`1<TiImage> GetIconTiImageLive(IconId iconId);
    [CanBeNullAttribute]
public abstract virtual ImageSource TryGetIconImageSource(IconId id);
    [CanBeNullAttribute]
public abstract virtual TiImage TryGetIconTiImage(IconId id);
}
public class JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIcon : IconId {
    [NotNullAttribute]
public string Name;
    public ImmutableArray`1<ThemeImage> ThemeImages;
    public RuntimeTiIcon(string name, ImmutableArray`1<ThemeImage> themeimages);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected bool Equals(RuntimeTiIcon other);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIconOwner : object {
    [NotNullAttribute]
public static IIconIdOwner2 Default;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    private static RuntimeTiIconOwner();
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
    private sealed virtual override TiImage JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.Settings.IconsForIconThemeSelectionSampleUi : object {
    private IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.SampleIcons { get; }
    private sealed virtual override IEnumerable`1<IconId> JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample.get_SampleIcons();
}
[SettingsKeyAttribute("JetBrains.Application.UI.Utils.UserInterfaceSettings", "JetBrains.Application.Resources.Strings", "ControlsThemeSelectionForThemedIconsSettingDescription")]
public class JetBrains.Application.Icons.Settings.ThemedIconSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "UserInterfaceSettings_IconThemeSelection")]
public IconThemeSelection IconThemeSelection;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "UserInterfaceSettings_IconThemeSelection")]
public IconThemeSelectionExtensionForFluentDesign IconThemeSelectionExtensionForFluentDesign;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("0")]
public class JetBrains.Application.Icons.Settings.ThemedIconSettingsLoader : object {
    private static IconThemeFullSelection DefaultAutoselectOverride;
    private static ILogger Logger;
    private IProperty`1<IconThemeAspect[]> mySuggestedIconTheme;
    public IProperty`1<IconThemeFullSelection> AutoSelectOverride;
    private IProperty`1<IconThemeAspect[]> JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle.SuggestedIconTheme { get; }
    public ThemedIconSettingsLoader(Lifetime lifetime, ISettingsStore store, IThreading threading, IProperty`1<IconThemeFullSelection> propAutoSelectOverride);
    private static ThemedIconSettingsLoader();
    public static IconThemeAspect[] NonAutomaticSelectionToAspects(IconThemeFullSelection selectionWithNoAutos);
    public static IconThemeFullSelection OverrideAutomaticSelection(IconThemeFullSelection selectionWithAutos, IconThemeFullSelection overridesNoAutos);
    private sealed virtual override IProperty`1<IconThemeAspect[]> JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle.get_SuggestedIconTheme();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Icons.Settings.ThemedIconsPreviewAutomation : AAutomation {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<IconId> SampleIconIds;
    public IThemedIconManager SandboxThemeManager;
    public ThemedIconsPreviewAutomation(Lifetime lifetime, IThreading threading, IconIdOwnersMap iconIdOwners, IProperty`1<IconTheme> themeProperty, ImmutableArray`1<IconId> enumSampleIcons, ILogger logger);
}
public static class JetBrains.Application.Icons.Shell.IconExtractor : object {
    private static Lazy`1<IReadOnlyDictionary`2<string, string>> ourExtensionMimeMap;
    private static IReadOnlyDictionary`2<string, Nullable`1<int>> ourProcessPathsCache;
    private static IconExtractor();
    public static Stream GetIconForFile(FileSystemPath appPath);
    public static Stream GetIconForFileType(string extension);
    private static Byte[] ExtractFileTypeIconWin(string extension);
    private static Byte[] ExtractFileTypeIconMac(string extension);
    private static Byte[] ExtractIconMac(string fixedPath);
    private static Byte[] ExtractIconWindows(string fixedPath);
    private static Byte[] ExtractIconLinux(string fixedPath);
    private static Byte[] ExtractFileTypeIconLinux(string extension);
    private static Byte[] GetContentTypeIconLinux(string contentType);
    [CompilerGeneratedAttribute]
internal static Byte[] <ExtractIconMac>g__Extract|5_0(string fixedPath);
    [CompilerGeneratedAttribute]
internal static void <ExtractIconLinux>g__GetWindows|8_0(Window parent, <>c__DisplayClass8_0& );
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.Shell.ShellFileIconIdOwner : object {
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    public static Byte[] TryGetBytesFromImage(ShellFileIconId iconId);
    public static Byte[] TryGetBytesFromImage(string extension, bool isLargeIcon);
    [CanBeNullAttribute]
public static BitmapSource TryGetFileIconImage(string extension, bool isLargeIcon);
    private static Byte[] ByteFromIcon(Icon ic);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    private sealed virtual override ImageSource JetBrains.Application.Icons.IIconIdOwner.TryGetImage(IconId iconidRaw, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public class JetBrains.Application.Icons.ThemedIconLoader : ValueType {
    [NotNullAttribute]
public IconId IconId;
    [NotNullAttribute]
public IThemedIconManager ThemedIconManager;
    [NotNullAttribute]
[ObsoleteAttribute("This method does not specify the desired image resolution, so it should not be used. No valid image is retrned by the current implementation.")]
public Bitmap CurrentGdipBitmap { get; }
    [NotNullAttribute]
public Bitmap CurrentGdipBitmap96 { get; }
    [NotNullAttribute]
[ObsoleteAttribute("Use GetIconGdipBitmap with DpiResolution for the actual resolution of your control or screen to support Dynamic DPI properly.")]
public Bitmap CurrentGdipBitmapScreenDpi { get; }
    [NotNullAttribute]
public ImageSource CurrentImageSource { get; }
    [NotNullAttribute]
public TiImage CurrentTiImage { get; }
    [NotNullAttribute]
[ObsoleteAttribute("For private use of DotCover only.")]
public IProperty`1<Bitmap> LiveGdipBitmap { get; }
    [NotNullAttribute]
public IProperty`1<Bitmap> LiveGdipBitmap96 { get; }
    [NotNullAttribute]
[ObsoleteAttribute("Use GetIconGdipBitmapLive with DpiResolution for the actual resolution of your control or screen to support Dynamic DPI properly.")]
public IProperty`1<Bitmap> LiveGdipBitmapScreenDpi { get; }
    [NotNullAttribute]
public IProperty`1<ImageSource> LiveImageSource { get; }
    [NotNullAttribute]
public IProperty`1<TiImage> LiveTiImage { get; }
    public ThemedIconLoader(IconId iconId, IThemedIconManager themedIconManager);
    public Bitmap get_CurrentGdipBitmap();
    public Bitmap get_CurrentGdipBitmap96();
    public Bitmap get_CurrentGdipBitmapScreenDpi();
    public ImageSource get_CurrentImageSource();
    public TiImage get_CurrentTiImage();
    public IProperty`1<Bitmap> get_LiveGdipBitmap();
    public IProperty`1<Bitmap> get_LiveGdipBitmap96();
    public IProperty`1<Bitmap> get_LiveGdipBitmapScreenDpi();
    public IProperty`1<ImageSource> get_LiveImageSource();
    public IProperty`1<TiImage> get_LiveTiImage();
    private void AssertValid();
}
public class JetBrains.Application.Icons.ThemedIconManager : object {
    private IProperty`1<IconTheme> myCurrentIconTheme;
    private IProperty`1<ThemedIconManagerPerThemeCache> myCurrentThemeIconData;
    private ThemedIconManagerLiveImages myLiveImages;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme { get; }
    private ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.Icons { get; }
    public ThemedIconManager(Lifetime lifeComponent, IThreading threading, IconIdOwnersMap iconowners, ILogger logger, IReadyImmutableList`1<IThemedIconThemeOracle> themeoracles);
    public ThemedIconManager(Lifetime lifeComponent, ITaskHost tasker, IconIdOwnersMap iconowners, ILogger logger, IReadyImmutableList`1<IThemedIconThemeOracle> themeoracles, JetDispatcher dispatcherForProperties);
    private void Init_ThemeOracles(Lifetime lifeComponent, IReadyImmutableList`1<IThemedIconThemeOracle> themeoracles, JetDispatcher dispatcherForProperties, ILogger logger);
    private sealed virtual override IThemedIconManagerRawApi JetBrains.Application.Icons.IThemedIconManager.GetRawApi();
    private sealed virtual override IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.get_CurrentIconTheme();
    private sealed virtual override ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.get_Icons();
    private sealed virtual override Bitmap JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    private sealed virtual override IProperty`1<Bitmap> JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconGdipBitmapLive(IconId iconId, RasterizationResolution resolution);
    private sealed virtual override ImageSource JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconImageSource(IconId id);
    private sealed virtual override IProperty`1<ImageSource> JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconImageSourceLive(IconId iconId);
    private sealed virtual override TiImage JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconTiImage(IconId id);
    private sealed virtual override IProperty`1<TiImage> JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconTiImageLive(IconId iconId);
    private sealed virtual override ImageSource JetBrains.Application.Icons.IThemedIconManagerRawApi.TryGetIconImageSource(IconId id);
    private sealed virtual override TiImage JetBrains.Application.Icons.IThemedIconManagerRawApi.TryGetIconTiImage(IconId id);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.Icons.ThemedIconManagerCreator : object {
    public IThemedIconManager ThemedIconManager;
    public ThemedIconManagerCreator(Lifetime lifetime, IThreading threading, IconIdOwnersMap iconowners, ILogger logger, IReadyImmutableList`1<IThemedIconThemeOracle> themeoracles);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Icons.ThemedIconManagerIcons : ValueType {
    private IThemedIconManager myThicman;
    public ThemedIconLoader Item { get; }
    public ThemedIconManagerIcons(IThemedIconManager thicman);
    public ThemedIconLoader get_Item(IconId id);
}
internal class JetBrains.Application.Icons.ThemedIconManagerLiveImages : object {
    private LockObject myLock;
    private StrongToWeakDictionary`2<IconId, IProperty`1<Bitmap>> myMapIdToGdipBitmap96;
    private StrongToWeakDictionary`2<IconId, IProperty`1<Bitmap>> myMapIdToGdipBitmapScreenDpi;
    private StrongToWeakDictionary`2<IconId, IProperty`1<ImageSource>> myMapIdToImageSource;
    private StrongToWeakDictionary`2<IconId, IProperty`1<TiImage>> myMapIdToTiImage;
    private IThemedIconManager myThemedIconManager;
    public ThemedIconManagerLiveImages(Lifetime lifetime, IThemedIconManager themedIconManager);
    [NotNullAttribute]
public IProperty`1<Bitmap> GetLiveGdipBitmap(IconId iconId, RasterizationResolution resolution);
    [NotNullAttribute]
public IProperty`1<ImageSource> GetLiveImageSource(IconId iconId);
    [NotNullAttribute]
public IProperty`1<TiImage> GetLiveTiImage(IconId iconId);
    private void Init_DropAllImages();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
public class JetBrains.Application.Icons.ThemedIconManagerPerThemeCache : object {
    public static TimeSpan IconInfoExpiration;
    private ConcurrentDictionary`2<IconId, CachedIconInfo> myCache;
    private FreeThreadedGroupingEvent myGeventCheckCache;
    private IconIdOwnersMap myIconOwners;
    private OnError myOnerrorLogger;
    private IconTheme myTheme;
    public ThemedIconManagerPerThemeCache(Lifetime lifetime, IconTheme theme, IconIdOwnersMap iconowners, ITaskHost tasker, ILogger logger);
    private static ThemedIconManagerPerThemeCache();
    [NotNullAttribute]
public sealed virtual Bitmap GetIconGdipBitmap(IconId id, RasterizationResolution resolution);
    [NotNullAttribute]
public sealed virtual ImageSource GetIconImageSource(IconId iconid);
    [NotNullAttribute]
public sealed virtual TiImage GetIconTiImage(IconId iconid);
    [CanBeNullAttribute]
public sealed virtual ImageSource TryGetIconImageSource(IconId id);
    [CanBeNullAttribute]
public sealed virtual TiImage TryGetIconTiImage(IconId id);
    [CanBeNullAttribute]
private TiImage ConvertAvalon2Ti(ImageSource avalonimage, IconId iconid, OnError onerror);
    [CanBeNullAttribute]
private ImageSource ConvertTi2Avalon(TiImage tiimage, IconId iconid, OnError onerror);
    private Bitmap CreateRasterizedBitmapCore(IconId iconid, RasterizationResolution resolution);
    [NotNullAttribute]
private CachedIconInfo GetCachedIconInfo(IconId iconid);
    private void TryCreateImageForIconCore(IconId iconid, bool isNeedTiNotAvalon, OnError onerror, TiImage& tiimage, ImageSource& avalonimage);
    private void TryCreateImageForIconCore_Owner1(IconId iconid, IIconIdOwner owner, bool isNeedTiNotAvalon, OnError onerror, TiImage& tiimage, ImageSource& avalonimage);
    private void TryCreateImageForIconCore_Owner2(IconId iconid, IIconIdOwner2 owner2, bool isNeedTiNotAvalon, OnError onerror, TiImage& tiimage, ImageSource& avalonimage);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("JetBrains.Application.Icons.ThemedIconManagerPerThemeCache/<<-ctor>b__6_0>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__6_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Icons.ToolWindowLocationIcons.ToolWindowLocationIconIdOwner : object {
    private IIconIdOwner2 myCompiledIconCsIdOwner;
    private Type JetBrains.Application.Icons.IIconIdOwner.IconIdType { get; }
    public ToolWindowLocationIconIdOwner(CompiledIconCsIdOwner compiledIconCsIdOwner);
    private sealed virtual override Type JetBrains.Application.Icons.IIconIdOwner.get_IconIdType();
    public sealed virtual ImageSource TryGetImage(IconId iconid, IconTheme theme, IThemedIconManagerPerThemeCache themedIconManagerPerThemeCache, OnError onerror);
}
public interface JetBrains.Application.IFeaturePartsContainer {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<T> GetFeatureParts(Func`2<T, bool> isApplicable);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.IHostProductInfo {
    public string HelpUrl { get; }
    public bool ApplyPreferredProductArgumentToHelpUrl { get; }
    public abstract virtual string get_HelpUrl();
    public abstract virtual bool get_ApplyPreferredProductArgumentToHelpUrl();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Infra.AssemblyExistsService : object {
    private Lifetime myLifetime;
    private bool myIsNoCache;
    private ConcurrentDictionary`2<VirtualFileSystemPath, CachedFileSystemData> myExistsMap;
    public AssemblyExistsService(Lifetime lifetime, IFileSystemTracker fileSystemTracker);
    protected AssemblyExistsService(Lifetime lifetime, IFileSystemTracker fileSystemTracker, bool isNoCache);
    [NotNullAttribute]
public CachedFileSystemData GetFileSystemData(VirtualFileSystemPath fileSystemPath);
    public bool AssemblyExists(VirtualFileSystemPath fileSystemPath);
    public bool AssemblyExists(IAssemblyLocation assemblyLocation);
    private void Remove(VirtualFileSystemPath oldPath);
    private void Refresh(VirtualFileSystemPath oldPath);
    private void ApplyExternalChange(FileSystemChange fsc);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
[ShellComponentAttribute("2")]
public class JetBrains.Application.Infra.AssemblyInfoDatabase : object {
    private static int DefaultRetryCount;
    public static string ReleaseConfiguration;
    public static string DebugConfiguration;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IAssemblyInfoDatabaseBridge myBridge;
    private IFileSystemTracker myTracker;
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, AssemblyNameAndId> myAssemblyNameAndIdMap;
    private OptimizedPersistentSortedMap`2<Pair`2<VirtualFileSystemPath, int>, AssemblyNameAndId> myBundleAssemblyNameAndIdMap;
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, Pair`2<TargetFrameworkId, DateTime>> myTargetFrameworkIdMap;
    private OptimizedPersistentSortedMap`2<Pair`2<VirtualFileSystemPath, int>, Pair`2<TargetFrameworkId, DateTime>> myBundleTargetFrameworkIdMap;
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, Pair`2<ICollection`1<AssemblyNameInfo>, DateTime>> myReferencedNamesMap;
    private OptimizedPersistentSortedMap`2<Pair`2<VirtualFileSystemPath, int>, Pair`2<ICollection`1<AssemblyNameInfo>, DateTime>> myBundleReferencedNamesMap;
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, Pair`2<string, DateTime>> myBuildConfigurationMap;
    private OptimizedPersistentSortedMap`2<Pair`2<VirtualFileSystemPath, int>, Pair`2<string, DateTime>> myBundleBuildConfigurationMap;
    private OptimizedPersistentSortedMap`2<int, int> myMvidToReferencedAssemblyInfoSet;
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, Pair`2<AppHostType, DateTime>> myAppHostTypeMap;
    private OptimizedPersistentSortedMap`2<VirtualFileSystemPath, Pair`2<BundleManifest, DateTime>> myBundleHeaderMap;
    private static HashSet`1<string> ourExtensions;
    private EffectiveReferencedAssemblyNamesExtractor myAssemblyNamesExtractor;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private AssemblyExistsService <ExistsService>k__BackingField;
    private ConcurrentDictionary`2<VirtualFileSystemPath, bool> myBlessedAssemblies;
    private Dictionary`2<VirtualFileSystemPath, FileSystemTrackerRequestCookie> myCookies;
    public AssemblyExistsService ExistsService { get; }
    public AssemblyInfoDatabase(Lifetime lifetime, ILogger logger, ShellCaches shellCaches, IAssemblyInfoDatabaseBridge bridge, IFileSystemTracker tracker, EffectiveReferencedAssemblyNamesExtractor assemblyNamesExtractor, AssemblyExistsService assemblyExistsService, IThreading threading);
    private static AssemblyInfoDatabase();
    [CompilerGeneratedAttribute]
public AssemblyExistsService get_ExistsService();
    private Task`1<TResult> GetAsync(Lifetime lifetime, IAssemblyLocation assemblyLocation, Func`2<IAssemblyLocation, TCalculationResult> calculate, Func`2<TCalculationResult, TResult> transform);
    public sealed virtual ICollection`1<AssemblyNameInfo> GetReferencedAssemblyNames(IAssemblyLocation assemblyLocation);
    public sealed virtual string GetBuildConfiguration(IAssemblyLocation assemblyLocation);
    private TValue GetCachedOrCalculate(IAssemblyLocation assemblyLocation, Func`2<IAssemblyLocation, TValue> calculate, OptimizedPersistentSortedMap`2<VirtualFileSystemPath, Pair`2<TValue, DateTime>> cache, OptimizedPersistentSortedMap`2<Pair`2<VirtualFileSystemPath, int>, Pair`2<TValue, DateTime>> bundleCache, TValue defaultValue);
    [NotNullAttribute]
private TValue GetCachedOrCalculate(IAssemblyLocation assemblyLocation, VirtualFileSystemPath container, TKey key, OptimizedPersistentSortedMap`2<TKey, Pair`2<TValue, DateTime>> cache, Func`2<IAssemblyLocation, TValue> calculate, TValue defaultValue);
    private ICollection`1<AssemblyNameInfo> GetReferencedAssemblyNamesRaw(IAssemblyLocation assemblyLocation);
    [CanBeNullAttribute]
private static string GetBuildConfigurationRaw(IAssemblyLocation assemblyLocation);
    private static int CalculateDependencyHash(AssemblyId sourceId, AssemblyNameInfo assemblyName);
    public bool HasReferenceToAssemblyName(AssemblyId sourceId, AssemblyNameInfo targetName);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual TargetFrameworkId GetTargetFrameworkId(VirtualFileSystemPath assemblyPath);
    public sealed virtual TargetFrameworkId GetTargetFrameworkId(IAssemblyLocation assemblyLocation);
    [CanBeNullAttribute]
private TargetFrameworkId GetTargetFrameworkId(IAssemblyLocation assemblyLocation, VirtualFileSystemPath container, TKey key, OptimizedPersistentSortedMap`2<TKey, Pair`2<TargetFrameworkId, DateTime>> targetFrameworkIdMap);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual Nullable`1<AssemblyId> GetAssemblyId(VirtualFileSystemPath fileSystemPath);
    public sealed virtual Nullable`1<AssemblyId> GetAssemblyId(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual Task`1<Nullable`1<AssemblyId>> GetAssemblyIdAsync(Lifetime lifetime, VirtualFileSystemPath fileSystemPath);
    public sealed virtual Task`1<Nullable`1<AssemblyId>> GetAssemblyIdAsync(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    public sealed virtual AppHostType GetAppHostType(IAssemblyLocation fileLocation);
    public sealed virtual BundleManifest GetBundleHeader(IAssemblyLocation fileLocation);
    private BundleManifest GetBundleHeader(AssemblyLocation fileLocation);
    private AppHostType GetAppHostType(AssemblyLocation fileLocation, BundleManifest& bundleHeader);
    [CanBeNullAttribute]
private AssemblyNameAndId CalculateAssemblyNameAndId(IAssemblyLocation assemblyLocation);
    [CanBeNullAttribute]
private AssemblyNameAndId CalculateAssemblyNameAndId(IAssemblyLocation assemblyLocation, VirtualFileSystemPath container, TKey key, OptimizedPersistentSortedMap`2<TKey, AssemblyNameAndId> assemblyNameAndIdMap);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual Pair`2<AssemblyNameInfo, AssemblyId> GetAssemblyNameAndId(VirtualFileSystemPath fileSystemPath);
    public sealed virtual Pair`2<AssemblyNameInfo, AssemblyId> GetAssemblyNameAndId(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual Task`1<Pair`2<AssemblyNameInfo, AssemblyId>> GetAssemblyNameAndIdAsync(Lifetime lifetime, VirtualFileSystemPath fileSystemPath);
    public sealed virtual Task`1<Pair`2<AssemblyNameInfo, AssemblyId>> GetAssemblyNameAndIdAsync(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[CanBeNullAttribute]
public sealed virtual AssemblyNameInfo GetAssemblyName(VirtualFileSystemPath fileSystemPath);
    public sealed virtual AssemblyNameInfo GetAssemblyName(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual Task`1<AssemblyNameInfo> GetAssemblyNameAsync(Lifetime lifetime, VirtualFileSystemPath fileSystemPath);
    public sealed virtual Task`1<AssemblyNameInfo> GetAssemblyNameAsync(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public sealed virtual bool AssemblyIsBroken(VirtualFileSystemPath assemblyPath);
    public sealed virtual bool AssemblyIsBroken(IAssemblyLocation assemblyLocation);
    private bool IsBlessedAssembly(VirtualFileSystemPath fileSystemPath);
    private static void WriteReferencedAssemblyNames(UnsafeWriter writer, Pair`2<ICollection`1<AssemblyNameInfo>, DateTime> pair);
    private static Pair`2<ICollection`1<AssemblyNameInfo>, DateTime> ReadReferencedAssemblyNamesInfos(UnsafeReader reader);
    private static void WriteBuildConfiguration(UnsafeWriter writer, Pair`2<string, DateTime> pair);
    private static Pair`2<string, DateTime> ReadBuildConfiguration(UnsafeReader reader);
    private static void WriteBundleIdAndEntryIndex(UnsafeWriter writer, Pair`2<VirtualFileSystemPath, int> value);
    private static Pair`2<VirtualFileSystemPath, int> ReadBundleIdAndEntryIndex(UnsafeReader reader);
    private static void WriteTargetFrameworkId(UnsafeWriter writer, Pair`2<TargetFrameworkId, DateTime> value);
    private static Pair`2<TargetFrameworkId, DateTime> ReadTargetFrameworkIdStamp(UnsafeReader reader);
    private static void WriteAppHostType(UnsafeWriter writer, Pair`2<AppHostType, DateTime> value);
    private static Pair`2<AppHostType, DateTime> ReadAppHostType(UnsafeReader reader);
    private static void WriteBundleHeaderAndDateStamp(UnsafeWriter writer, Pair`2<BundleManifest, DateTime> value);
    private static Pair`2<BundleManifest, DateTime> ReadBundleHeaderAndDateStamp(UnsafeReader reader);
    private static void WriteBundleHeader(UnsafeWriter writer, BundleManifest bundleHeader);
    private static BundleManifest ReadBundleHeader(UnsafeReader reader);
    private static void WriteBundleFileEntry(UnsafeWriter writer, FileEntry fileEntry);
    private static FileEntry ReadBundleFileEntry(UnsafeReader reader);
    protected void Invalidate(VirtualFileSystemPath newPath);
    private void AdviseForFileSystemChanges(VirtualFileSystemPath fileSystemPath);
    public sealed virtual void InvalidateNonBlessedAssemblies();
    private void ApplyExternalChange(FileSystemChange fscd);
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_0(bool _);
    [CompilerGeneratedAttribute]
private bool <IsBlessedAssembly>b__59_0(VirtualFileSystemPath path);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Infra.DefaultAssemblyInfoDatabaseBridge : object {
    [CompilerGeneratedAttribute]
private ISimpleSignal <Invalidated>k__BackingField;
    public ISimpleSignal Invalidated { get; }
    public DefaultAssemblyInfoDatabaseBridge(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Invalidated();
    public sealed virtual TargetFrameworkId GetAssemblyTargetFrameworkId(IAssemblyLocation assemblyLocation);
    public sealed virtual TargetFrameworkId GetAssemblyTargetFrameworkId(VirtualFileSystemPath assemblyPath);
    public sealed virtual bool IsBlessedAssembly(VirtualFileSystemPath assemblyPath);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Infra.EffectiveReferencedAssemblyNamesExtractor : object {
    private IEnumerable`1<ICustomReferencedAssemblyNamesProvider> myProviders;
    public EffectiveReferencedAssemblyNamesExtractor(IEnumerable`1<ICustomReferencedAssemblyNamesProvider> providers);
    [ObsoleteAttribute("Use AssemblyInfoDatabase instead")]
public IEnumerable`1<AssemblyNameInfo> GetReferencedAssemblies(IMetadataAssembly assembly);
    [CanBeNullAttribute]
public AssemblyNameInfo GetReferencedAssembly(IMetadataAssembly assembly, MetadataToken assemblyRefToken);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Infra.FileSystemPathAllowIntern : object {
    public FileSystemPathAllowIntern(Lifetime lifetime);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "OptionsRelatedToVariousHacksSettingDescription")]
public class JetBrains.Application.Infra.HackSettingsKey : object {
}
public interface JetBrains.Application.Infra.IAssemblyInfoDatabase {
    [NotNullAttribute]
public abstract virtual ICollection`1<AssemblyNameInfo> GetReferencedAssemblyNames(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[CanBeNullAttribute]
public abstract virtual TargetFrameworkId GetTargetFrameworkId(VirtualFileSystemPath assemblyPath);
    [CanBeNullAttribute]
public abstract virtual TargetFrameworkId GetTargetFrameworkId(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public abstract virtual Nullable`1<AssemblyId> GetAssemblyId(VirtualFileSystemPath fileSystemPath);
    public abstract virtual Nullable`1<AssemblyId> GetAssemblyId(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[NotNullAttribute]
public abstract virtual Task`1<Nullable`1<AssemblyId>> GetAssemblyIdAsync(Lifetime lifetime, VirtualFileSystemPath fileSystemPath);
    [NotNullAttribute]
public abstract virtual Task`1<Nullable`1<AssemblyId>> GetAssemblyIdAsync(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public abstract virtual Pair`2<AssemblyNameInfo, AssemblyId> GetAssemblyNameAndId(VirtualFileSystemPath fileSystemPath);
    public abstract virtual Pair`2<AssemblyNameInfo, AssemblyId> GetAssemblyNameAndId(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[NotNullAttribute]
public abstract virtual Task`1<Pair`2<AssemblyNameInfo, AssemblyId>> GetAssemblyNameAndIdAsync(Lifetime lifetime, VirtualFileSystemPath fileSystemPath);
    [NotNullAttribute]
public abstract virtual Task`1<Pair`2<AssemblyNameInfo, AssemblyId>> GetAssemblyNameAndIdAsync(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[CanBeNullAttribute]
public abstract virtual AssemblyNameInfo GetAssemblyName(VirtualFileSystemPath fileSystemPath);
    [CanBeNullAttribute]
public abstract virtual AssemblyNameInfo GetAssemblyName(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[NotNullAttribute]
public abstract virtual Task`1<AssemblyNameInfo> GetAssemblyNameAsync(Lifetime lifetime, VirtualFileSystemPath fileSystemPath);
    [NotNullAttribute]
public abstract virtual Task`1<AssemblyNameInfo> GetAssemblyNameAsync(Lifetime lifetime, IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
public abstract virtual bool AssemblyIsBroken(VirtualFileSystemPath assemblyPath);
    public abstract virtual bool AssemblyIsBroken(IAssemblyLocation assemblyLocation);
    public abstract virtual AppHostType GetAppHostType(IAssemblyLocation fileLocation);
    [CanBeNullAttribute]
public abstract virtual BundleManifest GetBundleHeader(IAssemblyLocation fileLocation);
    [CanBeNullAttribute]
public abstract virtual string GetBuildConfiguration(IAssemblyLocation assemblyLocation);
    public abstract virtual void InvalidateNonBlessedAssemblies();
}
public interface JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge {
    public ISimpleSignal Invalidated { get; }
    [CanBeNullAttribute]
public abstract virtual TargetFrameworkId GetAssemblyTargetFrameworkId(IAssemblyLocation assemblyLocation);
    [ObsoleteAttribute("Use overload with IAssemblyLocation")]
[CanBeNullAttribute]
public abstract virtual TargetFrameworkId GetAssemblyTargetFrameworkId(VirtualFileSystemPath assemblyPath);
    public abstract virtual bool IsBlessedAssembly(VirtualFileSystemPath assemblyPath);
    public abstract virtual ISimpleSignal get_Invalidated();
}
public interface JetBrains.Application.Infra.ICustomReferencedAssemblyNamesProvider {
    public abstract virtual ICollection`1<AssemblyNameInfo> PatchReferencedAssemblies(IMetadataAssembly assembly, ICollection`1<AssemblyNameInfo> references);
}
public interface JetBrains.Application.Infra.IExternalSourcesDebugInfoProvider {
    public abstract virtual void Dump(TextWriter sw);
}
public class JetBrains.Application.Infra.StringAbbreviatorLive`1 : object {
    private ILogger Logger;
    private DictionaryEvents`2<TItem, Values<TItem>> mapItemToAbbreviation;
    private Func`2<TItem, string> myFItemToString;
    private Lifetime myLifetime;
    public IProperty`1<int> MaxChars;
    public StringAbbreviatorLive`1(Lifetime lifetime, IThreading threading, Func`2<TItem, string> FItemToString);
    [NotNullAttribute]
public IProperty`1<string> AbbreviateLive(Lifetime lifetime, TItem item);
    private string ItemToString(TItem item);
    private void ReAbbreviate();
}
public static class JetBrains.Application.Infra.TimeStamp : object {
    private static int ourCurrentValue;
    public static ModificationStamp NextValue { get; }
    public static ModificationStamp get_NextValue();
}
public static class JetBrains.Application.Install.BuildApp.BuildRunnerCoreTasks : object {
    public static string ExeFileNameInsidePackage;
    public static string NugetPackageId;
    private static BuildRunnerCoreTasks();
    [BuildStepAttribute]
public static BuildRunnerCoreArtifact[] GatherBuildRunnerCoreArtifact(BuildRunnerCoreExePacked exe, BuildRunnerCoreExePackedNuget nuget, BuildScriptReferencesNuget refs);
    [BuildStepAttribute]
public static BuildRunnerCoreAssemblyLists MakeBuildRunnerCoreAssemblyLists(AllAssembliesOnEverything allassemblies, InputPackage[] inputs, ILogger logger);
    [NotNullAttribute]
[BuildStepAttribute]
public static BuildRunnerCoreExePackedNuget MakeBuildRunnerCoreExePackedNuget(BuildRunnerCoreExePacked pack, SdkLicenseAgreementArtifact sdkLicenseAgreementArtifact);
    [NotNullAttribute]
[BuildStepAttribute]
public static BuildScriptReferencesNuget MakeBuildScriptReferencesNuget(BuildRunnerCoreAssemblyLists asslist, BuildVersionSuffix versuffix, SdkLicenseAgreementArtifact sdkLicenseAgreementArtifact);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.BuildApp.BuildRunnerCoreTasks/<PackBuildRunnerCoreExe>d__6")]
[BuildStepAttribute]
public static Task`1<BuildRunnerCoreExePacked> PackBuildRunnerCoreExe(Lifetime lifetime, InputPackage[] inputs, CleanLauncherPostCompileArtifact[] launchers, BuildRunnerCoreAssemblyLists runnerassemblies, IAuthenticodeSigningService signer, BuildVersionSuffix versuffix, BuildChainFlavor buildflavor, IJetNugetPackageManager nugetter, SkiaHelper skiahelper, IBuildTaskHost tasker, ILogger logger);
}
public class JetBrains.Application.Install.DevEnv.VsExtensionsHelper : VsExtensionsHelperConstants {
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath VsExtensionManagerRegistryKey;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath VsExtensionManagerEnabledExtensionsRegistryKey;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath VsExtensionManagerExtensionTypesRegistryKey;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath SinceVs11ConfigurationChangedRegistryValuePath;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath SinceVs11ExtensionsChangedRegistryValuePath;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath VsExtensionManagerEnableAdminExtensionsRegistryValuePath;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath ConfigPkgDefCacheRegistryKey;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath ConfigPkgDefCacheTimestampRegistryValuePath;
    [NotNullAttribute]
protected static BackSlashSeparatedRelativePath ConfigPkgDefExclusionDirectoriesRegistryValuePath;
    private static ILogger ourLogger;
    private Lifetime myLifetime;
    [NotNullAttribute]
private VsHive myVsHive;
    private bool myIsPerMachine;
    private bool myIsForceCreateMissingDetour;
    private bool myIsHiveTouched;
    [CanBeNullAttribute]
private Boxed`1<Nullable`1<RegistryHiveAccess>> myMaybeHiveAccess;
    [CanBeNullAttribute]
private VsRegEditWrapper myVsRegedit;
    public VsExtensionsHelper(Lifetime lifetime, VsHive vshive, bool perMachine, bool forceCreateMissingDetour);
    private static VsExtensionsHelper();
    public void EnableVsExtension(HostInfo hostInfo, BuildVersionSuffix versionSuffix, OnError onError);
    public void EnableVsExtension(string extensionName, FileSystemPath extensionFolder, OnError onError);
    public void DisableVsExtension(string extensionName, OnError onError);
    [NotNullAttribute]
public ICollection`1<Pair`2<string, string>> GetEnabledExtensions(OnError onError);
    public void InvalidateVsConfiguration(OnError onError);
    public static void WipeVsExtensionCachesAtLocation(FileSystemPath vsHiveFolder, OnError onerror);
    private void EnableVsExtensionInRegistry(string extensionName, FileSystemPath extensionFolder, OnError onError);
    private void DisableVsExtensionInRegistry(string extensionName, OnError onError);
    private void TouchVsConfigurationChangedFile(OnError onerror);
    private void TouchVsConfigurationChangedInRegistry(OnError onError);
    private void InvalidatePkgDefCacheTimestamp(OnError onerror);
    private void FixPkgDefExclusionDirectories(OnError onerror);
    private void WipeVsExtensionCaches(OnError onerror);
    private void ResetVsConfiguration();
    private bool ResetVsConfigurationSinceVs15(OnError onerror);
    private FileSystemPath GetVsHiveLocalAppDataFolder();
    [CanBeNullAttribute]
private string GetStringValue(VsRegHive regHive, BackSlashSeparatedRelativePath path, OnError onerror);
    private bool SetStringValue(VsRegHive regHive, BackSlashSeparatedRelativePath path, string datavalue, OnError onerror);
    private bool SetDwordValue(VsRegHive regHive, BackSlashSeparatedRelativePath path, UInt32 datavalue, OnError onerror);
    private bool SetQwordValue(VsRegHive regHive, BackSlashSeparatedRelativePath path, ulong datavalue, OnError onerror);
    private bool DeleteValue(VsRegHive regHive, BackSlashSeparatedRelativePath path, OnError onerror);
    private ValueTuple`2<BackSlashSeparatedRelativePath, string> GetKeyValueNames(VsRegHive regHive, BackSlashSeparatedRelativePath path, OnError onerror);
    private Nullable`1<RegistryHiveAccess> GetRegistryHiveAccess(OnError onError);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0();
    [CompilerGeneratedAttribute]
private void <TouchVsConfigurationChangedFile>b__26_0();
    [CompilerGeneratedAttribute]
private bool <ResetVsConfigurationSinceVs15>b__32_0();
}
public static class JetBrains.Application.Install.DevEnv.VsHostInfo : object {
    public static string ExtensionCompanyPrefix;
    public static string HostIdentifier(Version2 vsVersion);
    public static string GetFullIdentifierName(VsHive hive, string rootSuffixOverride);
    public static HostInfo GetHostInfo(VsHive hive, string rootSuffix, UInt32 wave);
    [NotNullAttribute]
public static string GetExtensionIdentifier(HostInfo hostInfo);
    [NotNullAttribute]
public static string GetExtensionVersionString(HostInfo hostInfo, BuildVersionSuffix versionSuffix);
    [NotNullAttribute]
public static string GetExtensionFullIdentifier(HostInfo hostInfo, BuildVersionSuffix versionSuffix);
}
public class JetBrains.Application.Install.DevEnv.VsRegEditWrapper : object {
    private ILogger myLogger;
    private static string VsRegEditName;
    private static int VsRegEditTimeoutMs;
    private VsHive myVsHive;
    private FileSystemPath myRegeditPath;
    private Nullable`1<bool> myIsAvailable;
    [CompilerGeneratedAttribute]
private int <LastExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastOutput>k__BackingField;
    public bool IsAvailable { get; }
    public int LastExitCode { get; private set; }
    [CanBeNullAttribute]
public string LastOutput { get; private set; }
    public VsRegEditWrapper(VsHive vsHive);
    public bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public int get_LastExitCode();
    [CompilerGeneratedAttribute]
private void set_LastExitCode(int value);
    [CompilerGeneratedAttribute]
public string get_LastOutput();
    [CompilerGeneratedAttribute]
private void set_LastOutput(string value);
    public bool SetStringValue(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, string value, OnError onError);
    public bool SetDwordValue(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, UInt32 value, OnError onError);
    [CanBeNullAttribute]
public string ReadStringValue(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    public Nullable`1<UInt32> ReadDwordValue(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    public bool DeleteValue(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    public bool DeleteKey(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, OnError onError);
    private bool SetValueCore(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, ValueType type, string value, OnError onError);
    [CanBeNullAttribute]
private string ReadValueCore(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, ValueType type, OnError onError);
    private bool DeleteValueCore(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, string valueName, OnError onError);
    private bool DeleteKeyCore(VsRegHive regHive, BackSlashSeparatedRelativePath keyName, OnError onError);
    private bool IsOperational();
    [HandleProcessCorruptedStateExceptionsAttribute]
private int RunVsRegEdit(Operation operation, VsRegHive regHive, OnError onError, String& output, String[] args);
}
public class JetBrains.Application.Install.Discovery.ControlPanelInstalledProductsDiscovery : object {
    public static BackSlashSeparatedRelativePath UninstallRegistryKey;
    private static ILogger ourLogger;
    private static string CompanyName;
    private static ControlPanelInstalledProductsDiscovery();
    public static ICollection`1<ProductInfo> CollectProducts(String[] productTechnicalNames);
    private static void CollectInstallations(bool perMachine, string productTechnicalName, ICollection`1<ProductInfo> res);
}
public class JetBrains.Application.Install.Discovery.InstalledHostsDiscovery : object {
    private static ILogger ourLogger;
    private ICollection`1<InstallableHostInFolder> myHostsInFolders;
    public InstalledHostsDiscovery(LocalPaths localPaths);
    private static InstalledHostsDiscovery();
    public IEnumerable`1<InstallableHostInFolder> AllInstalledHosts();
    [IteratorStateMachineAttribute("JetBrains.Application.Install.Discovery.InstalledHostsDiscovery/<InstalledPackageList>d__4")]
public IEnumerable`1<InstallablePackageInHost> InstalledPackageList(HostInfo hostInfo);
    [IteratorStateMachineAttribute("JetBrains.Application.Install.Discovery.InstalledHostsDiscovery/<FindHostFolders>d__5")]
public IEnumerable`1<FileSystemPath> FindHostFolders(string hostFullIdentifier);
    [NotNullAttribute]
public static ICollection`1<InstallableHostInFolder> DiscoverHosts(LocalPaths localPaths, bool skipInstallDirValidation);
    public static Nullable`1<bool> VerifyInstallDir(HostInfo hostInfo, FileSystemPath location, bool perMachine, ILogger logger);
    private static bool ValidateHostInstallDir(HostInfo hostInfo, FileSystemPath folder);
    private static bool ValidateHostContent(InstallableHost host);
}
public class JetBrains.Application.Install.Discovery.InstalledProduct : object {
    [NotNullAttribute]
public InstallableHostInFolder HostInFolder;
    public InstalledProductState State;
    public bool IsPerMachine;
    public bool IsGood { get; }
    [NotNullAttribute]
public FileSystemPath Folder { get; }
    [NotNullAttribute]
public InstallableHost Host { get; }
    [NotNullAttribute]
public HostInfo HostInfo { get; }
    [NotNullAttribute]
public string RootSuffix { get; }
    [NotNullAttribute]
public InstallablePackage[] Packages { get; }
    public InstalledProduct(InstallableHostInFolder hostInFolder, bool perMachine, InstalledProductState state);
    public bool get_IsGood();
    public FileSystemPath get_Folder();
    public InstallableHost get_Host();
    public HostInfo get_HostInfo();
    public string get_RootSuffix();
    public InstallablePackage[] get_Packages();
    [NotNullAttribute]
public IEnumerable`1<InstallablePackageInHost> GetMainPackages();
    [NotNullAttribute]
public IEnumerable`1<InstallablePackageInHost> GetOptionalPackages();
    [CompilerGeneratedAttribute]
private InstallablePackageInHost <GetMainPackages>b__16_1(InstallablePackage pkg);
    [CompilerGeneratedAttribute]
private InstallablePackageInHost <GetOptionalPackages>b__17_1(InstallablePackage pkg);
}
public class JetBrains.Application.Install.Discovery.InstalledProductPlugin : object {
    [NotNullAttribute]
public JetPackageIdentity Identity;
    [CanBeNullAttribute]
public ApplicationPackageArtifact Package;
    public PluginVerificationResult State;
    public InstalledProductPlugin(ApplicationPackageArtifact package, PluginVerificationResult state);
    public InstalledProductPlugin(JetPackageIdentity identity, PluginVerificationResult state);
    public string GetPresentableName();
    [CompilerGeneratedAttribute]
private string <GetPresentableName>b__5_0();
}
public static class JetBrains.Application.Install.Discovery.InstalledProductsDiscovery : object {
    [NotNullAttribute]
public static ICollection`1<InstalledProduct> DiscoverProducts(ILogger logger);
    [NotNullAttribute]
public static ICollection`1<InstalledProduct> DiscoverProducts(LocalPaths perMachinePaths, LocalPaths perUserPaths, ILogger logger);
    [NotNullAttribute]
public static ICollection`1<LocalPaths> FindOtherUsersInstallations(LocalPaths currentUserPaths, ILogger logger);
    [NotNullAttribute]
public static ICollection`1<ApplicationPackageArtifact> FindInstalledPluginPackages(InstallableHostInFolder hostInFolder, ILogger logger);
    [NotNullAttribute]
public static IList`1<InstalledProductPlugin> GetInstalledProductPlugins(HostInfo hostInfo, ILogger logger);
    [CompilerGeneratedAttribute]
internal static void <DiscoverProducts>g__CreateProduct|1_0(InstallableHostInFolder hostInFolder, bool perMachine, <>c__DisplayClass1_0& );
}
[FlagsAttribute]
public enum JetBrains.Application.Install.Discovery.InstalledProductState : Enum {
    public int value__;
    public static InstalledProductState Installed;
    public static InstalledProductState BadInstallDir;
    public static InstalledProductState BadVsInstance;
}
public class JetBrains.Application.Install.Discovery.LocalPaths : object {
    public static string JetBrainsDirName;
    public static string InstallationsDirName;
    public static string PackagesFileName;
    public static string UninstallFileName;
    public FileSystemPath RootPath;
    public FileSystemPath InstallationsFolder;
    public bool IsPerMachine;
    public FileSystemPath PackagesFolder { get; }
    private LocalPaths(FileSystemPath rootPath, FileSystemPath installFolder, bool perMachine);
    private static LocalPaths();
    public static LocalPaths FromCurrentRuntime();
    public static LocalPaths CreateLocalPerMachine();
    public static LocalPaths CreateLocalPathsPerUser();
    public static LocalPaths FromLocalAppData(FileSystemPath localAppData);
    public static LocalPaths CreateLocalCustom(FileSystemPath rootFolder, FileSystemPath installFolder);
    public FileSystemPath get_PackagesFolder();
    public virtual string ToString();
    public FileSystemPath NewInstallationsPath(string fullIdentifierName);
    public static FileSystemPath ProgramFiles32();
    public static FileSystemPath RunningProductFolder();
}
[ExtensionAttribute]
public static class JetBrains.Application.Install.Discovery.ToolboxInstalledProductsDiscovery : object {
    private static JsonSerializer ourSerializer;
    private static ILogger ourLogger;
    private static OnError ourLogExceptionSilently;
    private static ToolboxInstalledProductsDiscovery();
    public static IEnumerable`1<ToolboxInstalledProductData> DiscoverProducts();
    [ExtensionAttribute]
private static IEnumerable`1<ToolboxInstalledProductData> GetToolboxInstalledProductData(FileSystemPath toolboxPath);
    [IteratorStateMachineAttribute("JetBrains.Application.Install.Discovery.ToolboxInstalledProductsDiscovery/<GetToolboxInstalledProductFromStateJson>d__6")]
private static IEnumerable`1<ToolboxInstalledProductData> GetToolboxInstalledProductFromStateJson(FileSystemPath installPath);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static ToolboxInstalledProductData GetInstalledProductData(ToolboxHistoryNodeAndPath toolboxHistoryNodeAndPath);
    [CanBeNullAttribute]
private static FileSystemPath GetInstallPath(ToolboxHistoryNodeAndPath toolboxHistoryNodeAndPath);
    [ExtensionAttribute]
private static IEnumerable`1<ToolboxHistoryNodeAndPath> GetChannelInfo(FileSystemPath productRootInstallPath);
    [ExtensionAttribute]
[CanBeNullAttribute]
private static ToolboxHistoryNodeAndPath GetLastHistoryNode(FileSystemPath channelDirectory);
    private static FileSystemPath GetToolboxPath(FileSystemPath localAppData);
    private static FileSystemPath GetToolboxAppRootPath(FileSystemPath toolboxPath);
    [ExtensionAttribute]
private static T Deserialize(FileSystemPath settingsJson);
}
public class JetBrains.Application.Install.ExtensionVerificationReport : object {
    public static RelativePath ReportJsonFileName;
    public IDictionary`2<JetPackageIdentity, PluginVerificationResult> VerificationResults;
    private ExtensionVerificationReport(IEnumerable`1<PackageStateSerialization> serialization);
    private static ExtensionVerificationReport();
    public void AddResult(JetPackageIdentity identity, PluginVerificationResult result);
    public PluginVerificationResult GetVerificationResult(JetPackageIdentity identity);
    public PluginVerificationResult GetVerificationResult(string packageId);
    public void SaveToFile(FileSystemPath filePath);
    [NotNullAttribute]
public static ExtensionVerificationReport LoadFromFolder(FileSystemPath hostFolder, ILogger logger);
    public static FileSystemPath GetReportFilePath(FileSystemPath hostFolder);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Install.ExtractProductsBinaries : BuildOutputFileArtifact {
    public ExtractProductsBinaries(ImmutableFileItem file);
    public ExtractProductsBinaries(IStructuredStorage sstg);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.ExtractProductsBinaries/<ExtractSelectedProducts>d__0")]
[BuildStepAttribute]
public static Task`1<ExtractProductsBinaries> ExtractSelectedProducts(Lifetime lifetimeStep, ExtractProductsParameters parameters, InputPackage[] ipkgs, SubplatformsInAllInputPackages subsInInputs, IBuildTaskHost tasker, ILogger logger);
}
public class JetBrains.Application.Install.Guids.GuidEntry : object {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefineConstant>k__BackingField;
    [CompilerGeneratedAttribute]
private GuidEntryKey <Key>k__BackingField;
    public Guid Guid { get; public set; }
    public bool IsDefineConstant { get; public set; }
    public GuidEntryKey Key { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IsDefineConstant();
    [CompilerGeneratedAttribute]
public void set_IsDefineConstant(bool value);
    [CompilerGeneratedAttribute]
public GuidEntryKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(GuidEntryKey value);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Application.Install.Guids.GuidEntryKeyConverter")]
public class JetBrains.Application.Install.Guids.GuidEntryKey : object {
    [NotNullAttribute]
private string myName;
    [NotNullAttribute]
public string Name { get; }
    public GuidEntryKey(string name);
    public string get_Name();
    public static bool op_Equality(GuidEntryKey left, GuidEntryKey right);
    [NotNullAttribute]
public static string op_Explicit(GuidEntryKey key);
    [NotNullAttribute]
public static GuidEntryKey op_Explicit(string name);
    public static bool op_Inequality(GuidEntryKey left, GuidEntryKey right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(GuidEntryKey other);
}
public class JetBrains.Application.Install.Guids.GuidEntryKeyConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public static class JetBrains.Application.Install.Guids.GuidEntryKeys : object {
}
public class JetBrains.Application.Install.Guids.GuidStore : object {
    private Guid NamespaceGuid;
    private List`1<GuidEntry> myEntries;
    private List`1<GuidEntry> myProposedEntries;
    [CompilerGeneratedAttribute]
private string <AutoGuidCategory>k__BackingField;
    [DesignerSerializationVisibilityAttribute("2")]
public string AutoGuidCategory { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public List`1<GuidEntry> Entries { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public List`1<GuidEntry> ProposedEntries { get; }
    [CompilerGeneratedAttribute]
public string get_AutoGuidCategory();
    [CompilerGeneratedAttribute]
public void set_AutoGuidCategory(string value);
    public List`1<GuidEntry> get_Entries();
    public List`1<GuidEntry> get_ProposedEntries();
    public Guid GetEntry(GuidEntryKey key);
    public Nullable`1<Guid> TryGetEntry(GuidEntryKey key);
    public Guid TryGetEntryOrPropose(GuidEntryKey key);
}
public class JetBrains.Application.Install.HttpFileSystem : object {
    [NotNullAttribute]
private Uri myBaseUri;
    private ILogger myLogger;
    private ConcurrentDictionary`2<RelativePath, IJetNugetPackage> myCachedPackages;
    [CanBeNullAttribute]
private IWebProxy myWebProxy;
    [CanBeNullAttribute]
private string myUserAgent;
    public HttpFileSystem(Uri baseUri, IWebProxy webProxy, ILogger logger, string userAgent);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.HttpFileSystem/<DownloadPackageAsync>d__6")]
public Task`1<IJetNugetPackage> DownloadPackageAsync(OuterLifetime lifetime, RelativePath packagePath);
}
public class JetBrains.Application.Install.HttpPackageGallery : object {
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private Uri myBaseUri;
    [NotNullAttribute]
private Uri myGalleryPackagesUri;
    [CanBeNullAttribute]
private IWebProxy myWebProxy;
    [CanBeNullAttribute]
private string myUserAgent;
    private bool myIsStaging;
    public HttpPackageGallery(Uri baseUri, Uri packagesUri, IWebProxy webProxy, bool isStaging, string userAgent);
    public sealed virtual IList`1<IGalleryPackage> Load(IProgressIndicator pi, OnError onerror);
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.GalleryPackages>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.GalleryPackages>")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Install.Installable.GalleryPackages : object {
    [DataMemberAttribute]
public UInt32 Wave;
    [CanBeNullAttribute]
[DataMemberAttribute]
public string BaseGalleryUrl;
    [NotNullAttribute]
[DataMemberAttribute]
public HttpGalleryPackageInfo[] AllPackages;
    public void Write(TextWriter writer);
    public static GalleryPackages Read(TextReader reader);
    public static GalleryPackages Read(string content);
}
public class JetBrains.Application.Install.Installable.HttpGalleryPackage : object {
    private HttpGalleryPackageInfo myPackageInfo;
    private HttpFileSystem myHttpFileSystem;
    private string JetBrains.Application.Install.Installable.IGalleryPackage.Id { get; }
    private JetSemanticVersion JetBrains.Application.Install.Installable.IGalleryPackage.Version { get; }
    private InstallablePackage JetBrains.Application.Install.Installable.IGalleryPackage.Installable { get; }
    private String[] JetBrains.Application.Install.Installable.IGalleryPackage.DependencyIds { get; }
    public HttpGalleryPackage(HttpGalleryPackageInfo packageInfo, HttpFileSystem fileSystem);
    private sealed virtual override string JetBrains.Application.Install.Installable.IGalleryPackage.get_Id();
    private sealed virtual override JetSemanticVersion JetBrains.Application.Install.Installable.IGalleryPackage.get_Version();
    private sealed virtual override InstallablePackage JetBrains.Application.Install.Installable.IGalleryPackage.get_Installable();
    private sealed virtual override String[] JetBrains.Application.Install.Installable.IGalleryPackage.get_DependencyIds();
    public sealed virtual ValueTuple`2[] GetRuntimeSpecificDependencyIds();
    [AsyncStateMachineAttribute("JetBrains.Application.Install.Installable.HttpGalleryPackage/<JetBrains-Application-Install-Installable-IGalleryPackage-GetPackageBodyAsync>d__12")]
private sealed virtual override Task`1<IJetNugetPackage> JetBrains.Application.Install.Installable.IGalleryPackage.GetPackageBodyAsync(OuterLifetime lifetime);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.HttpGalleryPackageInfo>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.HttpGalleryPackageInfo>")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Install.Installable.HttpGalleryPackageInfo : object {
    [CanBeNullAttribute]
[DataMemberAttribute]
public string PackageFolder;
    [NotNullAttribute]
[DataMemberAttribute]
public InstallablePackage InstallablePackage;
    [NotNullAttribute]
[DataMemberAttribute]
public String[] DependencyIds;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NotNullAttribute]
[DataMemberAttribute]
public ValueTuple`2[] RuntimeSpecificDependencyIds;
}
public interface JetBrains.Application.Install.Installable.IGalleryPackage {
    public string Id { get; }
    public JetSemanticVersion Version { get; }
    public InstallablePackage Installable { get; }
    public String[] DependencyIds { get; }
    public abstract virtual string get_Id();
    public abstract virtual JetSemanticVersion get_Version();
    public abstract virtual InstallablePackage get_Installable();
    public abstract virtual String[] get_DependencyIds();
    [NotNullAttribute]
public abstract virtual ValueTuple`2[] GetRuntimeSpecificDependencyIds();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual Task`1<IJetNugetPackage> GetPackageBodyAsync(OuterLifetime lifetime);
}
public interface JetBrains.Application.Install.Installable.IInstallablePackagesCollectionInterceptor {
    public abstract virtual void OnPackageReferencedByAnotherPackage(JetPackageIdentity package, JetPackageIdentity predecessor);
    public abstract virtual void OnPackageActivatedByZoning(JetPackageIdentity packageIdentity);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.InstallableHost>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.InstallableHost>")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Install.Installable.InstallableHost : object {
    [DataMemberAttribute]
public int VsVersion;
    [DataMemberAttribute]
public UInt32 VsVersionMinor;
    [CanBeNullAttribute]
[DataMemberAttribute]
public HostInfo HostInfo;
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    [CanBeNullAttribute]
[DataMemberAttribute]
public InstallablePackage[] Packages;
    [CanBeNullAttribute]
[DataMemberAttribute]
public string GalleryUrl;
    [CanBeNullAttribute]
[DataMemberAttribute]
public string PresentableName { get; public set; }
    public Guid UpgradeCode { get; }
    public InstallableHost(HostInfo hostInfo, InstallablePackage[] packages, string presentableName, int vsVersion, UInt32 vsVersionMinor);
    [CompilerGeneratedAttribute]
public string get_PresentableName();
    [CompilerGeneratedAttribute]
public void set_PresentableName(string value);
    public VsHive GetVsHive();
    [NotNullAttribute]
public string GetRootSuffix();
    public Guid get_UpgradeCode();
    public static Guid GetUpgradeCode(string hostIdentifierName);
    public void Write(TextWriter writer);
    [CanBeNullAttribute]
public static InstallableHost Read(TextReader reader, OnError onerror);
    [CanBeNullAttribute]
public static HostInfo TryReadHostInfoFast(TextReader reader, OnError onerror);
    private static JsonSerializer CreateJsonSerializer(OnError onerror);
}
public class JetBrains.Application.Install.Installable.InstallableHostInFolder : object {
    [NotNullAttribute]
public InstallableHost Host;
    [NotNullAttribute]
public FileSystemPath Folder;
    public bool IsPerMachine;
    [NotNullAttribute]
public HostInfo HostInfo { get; }
    public InstallableHostInFolder(InstallableHost host, FileSystemPath folder, bool perMachine);
    public HostInfo get_HostInfo();
    public virtual string ToString();
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.InstallablePackage>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.InstallablePackage>")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Install.Installable.InstallablePackage : object {
    [NotNullAttribute]
[DataMemberAttribute]
public PackageMetadata PackageMetadata;
    [CanBeNullAttribute]
[DataMemberAttribute]
public JetSubplatformZoningSpecArtifact ZoningSpec2;
    [CanBeNullAttribute]
[DataMemberAttribute]
public ProductInfo ProductInfo;
    [CanBeNullAttribute]
[DataMemberAttribute]
public JetSubplatformSpec Spec;
    [CompilerGeneratedAttribute]
private UInt32 <Wave>k__BackingField;
    public UInt32 Wave { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Wave();
    [CompilerGeneratedAttribute]
public void set_Wave(UInt32 value);
    public bool IsAutoEnable(JetHashSet`1<string> allActivatedZones);
    public virtual string ToString();
    public string ToString(string indent);
}
[ExtensionAttribute]
public static class JetBrains.Application.Install.Installable.InstallablePackageEx : object {
    public static IComparer`1<InstallablePackage> InstallablePackageComparer { get; }
    [NotNullAttribute]
public static WaveInfo GetWaveInfoFromDependencies(JetNugetPackageMetadata manifest, ILogger logger);
    public static InstallablePackage FromPackageManifest(JetNugetPackageMetadata manifest, WaveInfo waveInfo, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
public static JetPackageIdentity GetPackageIdentity(InstallablePackage inspkg);
    public static IComparer`1<InstallablePackage> get_InstallablePackageComparer();
}
public class JetBrains.Application.Install.Installable.InstallablePackageInHost : object {
    [NotNullAttribute]
public InstallableHost Host;
    [NotNullAttribute]
public InstallablePackage InstallablePackage;
    public InstallablePackageInHost(InstallableHost host, InstallablePackage package);
}
public class JetBrains.Application.Install.Installable.InstallablePackages : object {
    public IList`1<InstallablePackage> InstallablePackageList;
    public PackageDependencies PackageDependencies;
    private OneToSetMap`2<JetPackageIdentity, IGalleryPackage> myGalleryPackages;
    private Dictionary`2<string, InstallablePackage> myDistributivePackages;
    private OneToListMap`2<InstallablePackage, InstallablePackage> mySuccessorsMap;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private OneToListMap`2<InstallablePackage, ValueTuple`2<InstallablePackage, Nullable`1<ImmutableArray`1<JetRuntimeId>>>> myPredecessorsMap;
    private static ILogger ourLogger;
    public InstallablePackages(IEnumerable`1<IGalleryPackage> allPackages);
    public InstallablePackages(IEnumerable`1<IHaveJetNugetPackage> allPackages, ILogger logger);
    private static InstallablePackages();
    [CanBeNullAttribute]
public InstallablePackage GetByPackageId(string id);
    public IEnumerable`1<InstallablePackage> CollectRelatedPackages(InstallablePackage package, InstallablePackage[] optionalPackages);
    public IEnumerable`1<InstallablePackage> CollectRelatedPackages(IEnumerable`1<InstallablePackage> packages, JetRuntimeId[] rids, IInstallablePackagesCollectionInterceptor interceptor);
    public IEnumerable`1<InstallablePackage> CollectRelatedPackagesForCurrentRuntime(IEnumerable`1<InstallablePackage> packages);
    [CanBeNullAttribute]
public InstallablePackage GetMainPackageByProduct(string productTechnicalName);
    [NotNullAttribute]
public InstallablePackage[] GetOptionalPackagesByProduct(string productTechnicalName);
    [CanBeNullAttribute]
public IGalleryPackage FindGalleryPackage(PackageMetadata packageMetadata);
    [CanBeNullAttribute]
public IGalleryPackage FindGalleryPackageById(string packageId);
    public virtual string ToString();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Install.Installable.InstalledProductsDiscoveryComponent : object {
    private static ILogger ourLogger;
    private IApplicationHost myApplicationHost;
    private Lazy`1<bool> myIsLocalInstallation;
    private FileSystemPath myCurrentAssemblyFolder;
    private LocalPaths myLocalPaths;
    private IEnumerable`1<InstallableHostInFolder> myAllHosts;
    public bool IsLocalInstallation { get; }
    public InstalledProductsDiscoveryComponent(IAssemblyFolderLocator locator, IApplicationHost applicationHost);
    private static InstalledProductsDiscoveryComponent();
    public bool get_IsLocalInstallation();
    [CanBeNullAttribute]
public FileSystemPath GetInstalledHostFolder(string hostName);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__6_0();
}
public class JetBrains.Application.Install.Installable.ItemGalleryPackage : object {
    private ILogger myLogger;
    [NotNullAttribute]
private IJetNugetPackage myNupkg;
    private String[] JetBrains.Application.Install.Installable.IGalleryPackage.DependencyIds { get; }
    private string JetBrains.Application.Install.Installable.IGalleryPackage.Id { get; }
    private InstallablePackage JetBrains.Application.Install.Installable.IGalleryPackage.Installable { get; }
    private JetSemanticVersion JetBrains.Application.Install.Installable.IGalleryPackage.Version { get; }
    public ItemGalleryPackage(IJetNugetPackage nupkg, ILogger logger);
    private sealed virtual override String[] JetBrains.Application.Install.Installable.IGalleryPackage.get_DependencyIds();
    public sealed virtual ValueTuple`2[] GetRuntimeSpecificDependencyIds();
    private sealed virtual override Task`1<IJetNugetPackage> JetBrains.Application.Install.Installable.IGalleryPackage.GetPackageBodyAsync(OuterLifetime _);
    private sealed virtual override string JetBrains.Application.Install.Installable.IGalleryPackage.get_Id();
    private sealed virtual override InstallablePackage JetBrains.Application.Install.Installable.IGalleryPackage.get_Installable();
    private sealed virtual override JetSemanticVersion JetBrains.Application.Install.Installable.IGalleryPackage.get_Version();
    [CompilerGeneratedAttribute]
private ValueTuple`2[] <GetRuntimeSpecificDependencyIds>b__5_0(Lifetime lifetime);
}
public class JetBrains.Application.Install.Installable.PackageDependencies : object {
    private OneToListMap`2<string, string> myZoneToSuccessorsMap;
    private OneToListMap`2<string, string> myZoneToPredecessorsMap;
    private OneToListMap`2<string, string> myZoneToInheritorsMap;
    public HashSet`1<string> AllZoneParts;
    public IList`1<InstallablePackage> AllPackages;
    public PackageDependencies(IList`1<InstallablePackage> allPackages);
    public void BuildRelations();
    private void BuildZoneRelations();
    private HashSet`1<string> BuildAllZoneParts(IList`1<InstallablePackage> installablePackages);
    public IEnumerable`1<string> Expand(ICollection`1<string> zones);
    private HashSet`1<string> ExpendToInherited(ICollection`1<string> zones);
}
[TypeConverterAttribute("JetBrains.Util.Serialization.JsonTypeConverter`1<JetBrains.Application.Install.Installable.PackageMetadata>")]
[ValueSerializerAttribute("JetBrains.Util.Serialization.JsonValueSerializer`1<JetBrains.Application.Install.Installable.PackageMetadata>")]
[DataContractAttribute]
[JsonObjectAttribute]
public class JetBrains.Application.Install.Installable.PackageMetadata : object {
    [DataMemberAttribute]
public string Id;
    [DataMemberAttribute]
public JetSemanticVersion Version;
    [DataMemberAttribute]
public string Title;
    [DataMemberAttribute]
public Uri IconUrl;
    [DataMemberAttribute]
public string Description;
    [DataMemberAttribute]
public string Summary;
    [DataMemberAttribute]
public string ReleaseNotes;
    [DataMemberAttribute]
public String[] Authors;
    [DataMemberAttribute]
public string Copyright;
    [DataMemberAttribute]
public string Tags;
    [DataMemberAttribute]
public Uri ProjectUrl;
    [DataMemberAttribute]
public Uri LicenseUrl;
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class JetBrains.Application.Install.Installable.PackageMetadataEx : object {
    public static PackageMetadata FromNuGetManifest(JetNugetPackageMetadata manifest);
    [ExtensionAttribute]
public static string GetNupkgFileName(PackageMetadata metadata);
    [ExtensionAttribute]
[NotNullAttribute]
public static JetPackageIdentity GetIdentity(PackageMetadata metadata);
}
[BuildHelperAttribute]
public class JetBrains.Application.Install.InstallationData.EmptyTransformInstallationData : object {
    private double JetBrains.Application.Install.InstallationData.ITransformInstallationData.Priority { get; }
    private sealed virtual override double JetBrains.Application.Install.InstallationData.ITransformInstallationData.get_Priority();
    private sealed virtual override InstallationDataTransform JetBrains.Application.Install.InstallationData.ITransformInstallationData.ApplyTransform(InstallationDataTransform installdata);
}
public abstract class JetBrains.Application.Install.InstallationData.InstallationData : object {
    public static ILogger Logger;
    public ImmutableArray`1<InstalledFolder> Folders;
    public ImmutableArray`1<PostInstallExecutableArtifact> PostInstallExecutables;
    public ImmutableArray`1<InstalledRegistryKey> RegistryKeys;
    public ImmutableArray`1<InstalledRegistryValue> RegistryValues;
    public ImmutableArray`1<SharedMsiArtifact> SharedMsies;
    protected InstallationData(ImmutableArray`1<InstalledFolder> folders, ImmutableArray`1<InstalledRegistryKey> registryKeys, ImmutableArray`1<InstalledRegistryValue> registryValues, ImmutableArray`1<SharedMsiArtifact> sharedMsies, ImmutableArray`1<PostInstallExecutableArtifact> postInstallExecutables);
    protected InstallationData(IStructuredStorage structuredStorage);
    private static InstallationData();
    public sealed virtual void GetObjectData(IStructuredStorage structuredStorage);
    public virtual string ToString();
    protected void AssertValid();
}
public static class JetBrains.Application.Install.InstallationData.InstallationDataBuildSteps : object {
    [BuildStepAttribute]
[NotNullAttribute]
public static InstallationDataFinal ApplyTransform(InstallationDataOriginal original, ITransformInstallationData[] transformers, ILogger logger);
    [BuildStepAttribute]
public static InstallationDataOriginalPart PackFilesAndRegistryArtifactsIntoOrignialPart(InstalledRegistryKey[] keys, InstalledRegistryValue[] values, InstalledFolder[] files, SharedMsiArtifact[] sharedMsiArtifacts, PostInstallExecutableArtifact[] postInstallExecutables);
    [BuildStepAttribute]
public static InstallationDataOriginal PackTogetherOriginalParts(InstallationDataOriginalPart[] parts);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataFinal : InstallationData {
    [NotNullAttribute]
public static InstallationDataFinal Empty;
    public InstallationDataFinal(ImmutableArray`1<InstalledFolder> folders, ImmutableArray`1<InstalledRegistryKey> registryKeys, ImmutableArray`1<InstalledRegistryValue> registryValues, ImmutableArray`1<SharedMsiArtifact> sharedMsies, ImmutableArray`1<PostInstallExecutableArtifact> postInstallExecutables);
    public InstallationDataFinal(IStructuredStorage structuredStorage);
    private static InstallationDataFinal();
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public static InstallationDataFinal Create(InstallationData addon);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstallationDataFinal WithData(InstallationData addon);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataOriginal : InstallationData {
    [NotNullAttribute]
public static InstallationDataOriginal Empty;
    public InstallationDataOriginal(ImmutableArray`1<InstalledFolder> folders, ImmutableArray`1<InstalledRegistryKey> registryKeys, ImmutableArray`1<InstalledRegistryValue> registryValues, ImmutableArray`1<SharedMsiArtifact> sharedMsies, ImmutableArray`1<PostInstallExecutableArtifact> postInstallExecutables);
    public InstallationDataOriginal(IStructuredStorage structuredStorage);
    private static InstallationDataOriginal();
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstallationDataOriginal WithData(InstallationData addon);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataOriginalPart : InstallationData {
    [NotNullAttribute]
public static InstallationDataOriginalPart Empty;
    public InstallationDataOriginalPart(ImmutableArray`1<InstalledFolder> folders, ImmutableArray`1<InstalledRegistryKey> registryKeys, ImmutableArray`1<InstalledRegistryValue> registryValues, ImmutableArray`1<SharedMsiArtifact> sharedMsies, ImmutableArray`1<PostInstallExecutableArtifact> postInstallExecutables);
    public InstallationDataOriginalPart(IStructuredStorage structuredStorage);
    private static InstallationDataOriginalPart();
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstallationDataOriginalPart WithFolder(InstalledFolder folder);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstallationDataOriginalPart WithRegistryKeys(IEnumerable`1<InstalledRegistryKey> keys);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstallationDataOriginalPart WithRegistryValues(IEnumerable`1<InstalledRegistryValue> values);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstallationDataTransform : InstallationData {
    [NotNullAttribute]
public static InstallationDataTransform Empty;
    public InstallationDataTransform(ImmutableArray`1<InstalledFolder> folders, ImmutableArray`1<InstalledRegistryKey> registryKeys, ImmutableArray`1<InstalledRegistryValue> registryValues, ImmutableArray`1<SharedMsiArtifact> sharedMsies, ImmutableArray`1<PostInstallExecutableArtifact> postInstallExecutables);
    public InstallationDataTransform(IStructuredStorage structuredStorage);
    private static InstallationDataTransform();
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public static InstallationDataTransform Create(InstallationData addon);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstallationDataTransform WithData(InstallationData addon);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstallationDataTransform WithFolder(InstalledFolder folder);
}
public enum JetBrains.Application.Install.InstallationData.InstallationMacroName : Enum {
    public int value__;
    public static InstallationMacroName PackageCodeBase;
    public static InstallationMacroName SystemDir;
    public static InstallationMacroName ProductBinariesDir;
    public static InstallationMacroName DateTime;
}
[ExtensionAttribute]
public static class JetBrains.Application.Install.InstallationData.InstallationMacroNameEx : object {
    [ExtensionAttribute]
public static string MakeMacro(InstallationMacroName name);
}
public enum JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot : Enum {
    public int value__;
    public static InstallationSourceDirRoot ProductBinariesDir;
    public static InstallationSourceDirRoot ReferencesDirectories;
}
public enum JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot : Enum {
    public int value__;
    public static InstallationTargetDirRoot InstallDir;
    public static InstallationTargetDirRoot StartMenuPrograms;
    public static InstallationTargetDirRoot DevEnvInstallDir;
}
[PublicAPIAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledFile : InstalledFileItemBase {
    [ObsoleteAttribute("Not used.")]
public Lazy`1<PropertyBag> Metadata;
    [NotNullAttribute]
public ImmutableFileItem SourceFile;
    public InstalledFile(IStructuredStorage structuredStorage);
    public InstalledFile(ImmutableFileItem source, string sTargetName);
    public virtual void GetObjectData(IStructuredStorage storage);
    public static bool op_Equality(InstalledFile left, InstalledFile right);
    public static bool op_Inequality(InstalledFile left, InstalledFile right);
    private void AddExceptionData(Exception ex);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledFile>.CompareTo(InstalledFile other);
    public sealed virtual bool Equals(InstalledFile other);
    [CompilerGeneratedAttribute]
private object <AddExceptionData>b__8_0();
}
public class JetBrains.Application.Install.InstallationData.InstalledFileAccessControl : object {
    public static PropertyId`1<InstalledFileAccessControl> AccessControl;
    public IList`1<AccessControlEntry> Entries;
    private static InstalledFileAccessControl();
}
public abstract class JetBrains.Application.Install.InstallationData.InstalledFileItemBase : object {
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [NotNullAttribute]
public string TargetName { get; private set; }
    protected InstalledFileItemBase(IStructuredStorage structuredStorage);
    public InstalledFileItemBase(string sTargetName);
    public virtual void GetObjectData(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
private void set_TargetName(string value);
    public static bool op_Equality(InstalledFileItemBase left, InstalledFileItemBase right);
    public static bool op_Inequality(InstalledFileItemBase left, InstalledFileItemBase right);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledFileItemBase>.CompareTo(InstalledFileItemBase other);
    public sealed virtual bool Equals(InstalledFileItemBase other);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledFolder : object {
    public static ILogger Logger;
    public ImmutableArray`1<InstalledFileItemBase> Files;
    public string Id;
    public RelativePath TargetDir;
    public InstallationTargetDirRoot TargetRoot;
    public InstalledFolder(IStructuredStorage structuredStorage);
    public InstalledFolder(string id, InstallationTargetDirRoot targetRoot, RelativePath targetDir, ImmutableArray`1<InstalledFileItemBase> files);
    private static InstalledFolder();
    public void AssertValid();
    public sealed virtual void GetObjectData(IStructuredStorage structuredStorage);
    public virtual string ToString();
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstalledFolder WithFile(InstalledFileItemBase file);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstalledFolder WithFile(ImmutableFileItem source, string sTargetName);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstalledFolder WithFiles(IEnumerable`1<ImmutableFileItem> sources);
    [NotNullAttribute]
[PureAttribute]
[MustUseReturnValueAttribute]
public InstalledFolder WithFiles(IEnumerable`1<InstalledFileItemBase> files);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__9_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__9_1(BinaryWriter writer);
}
public enum JetBrains.Application.Install.InstallationData.InstalledRegistryHive : Enum {
    public int value__;
    public static InstalledRegistryHive Hkcr;
    public static InstalledRegistryHive Hklm;
    public static InstalledRegistryHive Hkcu;
    public static InstalledRegistryHive Hkmu;
}
public abstract class JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase : object {
    public static string KeyName;
    [CompilerGeneratedAttribute]
private InstalledRegistryHive <Hive>k__BackingField;
    [CompilerGeneratedAttribute]
private BackSlashSeparatedRelativePath <Key>k__BackingField;
    public InstalledRegistryHive Hive { get; protected set; }
    [NotNullAttribute]
public BackSlashSeparatedRelativePath Key { get; protected set; }
    protected InstalledRegistryItemBase(IStructuredStorage structuredStorage);
    public InstalledRegistryItemBase(InstalledRegistryHive hive, BackSlashSeparatedRelativePath key);
    public virtual void GetObjectData(IStructuredStorage structuredStorage);
    [CompilerGeneratedAttribute]
public InstalledRegistryHive get_Hive();
    [CompilerGeneratedAttribute]
protected void set_Hive(InstalledRegistryHive value);
    [CompilerGeneratedAttribute]
public BackSlashSeparatedRelativePath get_Key();
    [CompilerGeneratedAttribute]
protected void set_Key(BackSlashSeparatedRelativePath value);
    public RegistryKey GetWindowsRegistryRootKey(IsolationOptions isolation);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase>.CompareTo(InstalledRegistryItemBase other);
    public sealed virtual bool Equals(InstalledRegistryItemBase other);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_1(BinaryWriter writer);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledRegistryKey : InstalledRegistryItemBase {
    public InstalledRegistryKey(InstalledRegistryHive hive, BackSlashSeparatedRelativePath key);
    public InstalledRegistryKey(IStructuredStorage structuredStorage);
    [NotNullAttribute]
public InstalledRegistryKey CreateKey(BackSlashSeparatedRelativePath relpath);
    [NotNullAttribute]
public InstalledRegistryValue CreateValue(string name, object value);
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledRegistryKey>.CompareTo(InstalledRegistryKey other);
    public sealed virtual bool Equals(InstalledRegistryKey registryKeyXml);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledRegistryValue : InstalledRegistryItemBase {
    public static string KeyName;
    private Byte[] myValueBinary;
    [CompilerGeneratedAttribute]
private bool <IsPermanent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private InstalledRegistryValueType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool IsPermanent { get; public set; }
    [CanBeNullAttribute]
public string Name { get; public set; }
    public InstalledRegistryValueType Type { get; public set; }
    public string Value { get; public set; }
    [CanBeNullAttribute]
public Byte[] ValueBinary { get; }
    public InstalledRegistryValue(IStructuredStorage structuredStorage);
    public InstalledRegistryValue(InstalledRegistryHive hive, BackSlashSeparatedRelativePath key, string name, object value);
    public virtual void GetObjectData(IStructuredStorage structuredStorage);
    [CompilerGeneratedAttribute]
public bool get_IsPermanent();
    [CompilerGeneratedAttribute]
public void set_IsPermanent(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public InstalledRegistryValueType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(InstalledRegistryValueType value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public Byte[] get_ValueBinary();
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override int System.IComparable<JetBrains.Application.Install.InstallationData.InstalledRegistryValue>.CompareTo(InstalledRegistryValue other);
    public sealed virtual bool Equals(InstalledRegistryValue registryValueXml);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_1(BinaryWriter writer);
}
public enum JetBrains.Application.Install.InstallationData.InstalledRegistryValueType : Enum {
    public int value__;
    public static InstalledRegistryValueType Dword;
    public static InstalledRegistryValueType String;
    public static InstalledRegistryValueType Binary;
}
[PublicAPIAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile : InstalledFileItemBase {
    private static string StreamName;
    [CompilerGeneratedAttribute]
private FileTextEncoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <OriginalDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalName>k__BackingField;
    [CompilerGeneratedAttribute]
private InstallationTargetDirRoot <OriginalRoot>k__BackingField;
    public FileTextEncoding Encoding { get; private set; }
    public RelativePath OriginalDir { get; private set; }
    public string OriginalName { get; private set; }
    public InstallationTargetDirRoot OriginalRoot { get; private set; }
    public InstalledReplaceTextInFile(IStructuredStorage structuredStorage);
    public InstalledReplaceTextInFile(InstallationTargetDirRoot originalRoot, RelativePath originalDir, string originalName, string sTargetName, FileTextEncoding encoding);
    [CompilerGeneratedAttribute]
public FileTextEncoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(FileTextEncoding value);
    [CompilerGeneratedAttribute]
public RelativePath get_OriginalDir();
    [CompilerGeneratedAttribute]
private void set_OriginalDir(RelativePath value);
    [CompilerGeneratedAttribute]
public string get_OriginalName();
    [CompilerGeneratedAttribute]
private void set_OriginalName(string value);
    [CompilerGeneratedAttribute]
public InstallationTargetDirRoot get_OriginalRoot();
    [CompilerGeneratedAttribute]
private void set_OriginalRoot(InstallationTargetDirRoot value);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InstalledReplaceTextInFile other);
    [NotNullAttribute]
public static string FormatMacroReference(StandardMacrosForReplaceText macroForReplaceText);
    public virtual int GetHashCode();
    public virtual void GetObjectData(IStructuredStorage structuredStorage);
    public static bool op_Equality(InstalledReplaceTextInFile left, InstalledReplaceTextInFile right);
    public static bool op_Inequality(InstalledReplaceTextInFile left, InstalledReplaceTextInFile right);
    [CanBeNullAttribute]
public static Encoding ResolveEncoding(FileTextEncoding encoding);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private object <AssertValid>b__20_0();
    [CompilerGeneratedAttribute]
private object <AssertValid>b__20_1();
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__25_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__25_1(BinaryWriter writer);
}
[PublicAPIAttribute]
public class JetBrains.Application.Install.InstallationData.InstalledShellLink : InstalledFileItemBase {
    private static string StreamName;
    [NotNullAttribute]
public RelativePath ShellLinkTargetDir;
    [NotNullAttribute]
public string ShellLinkTargetName;
    public InstallationTargetDirRoot ShellLinkTargetRoot;
    public InstalledShellLink(IStructuredStorage structuredStorage);
    public InstalledShellLink(string sShellLinkFileTargetName, InstallationTargetDirRoot shellLinkTargetRoot, RelativePath shellLinkTargetDir, string shellLinkTargetName);
    public virtual void GetObjectData(IStructuredStorage storage);
    public static bool op_Equality(InstalledShellLink left, InstalledShellLink right);
    public static bool op_Inequality(InstalledShellLink left, InstalledShellLink right);
    public virtual void AssertValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(InstalledShellLink other);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__3_1(BinaryWriter writer);
}
public interface JetBrains.Application.Install.InstallationData.ITransformInstallationData {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    [CanBeNullAttribute]
public abstract virtual InstallationDataTransform ApplyTransform(InstallationDataTransform installdata);
}
[BuildHelperAttribute]
internal class JetBrains.Application.Install.InstallationData.TransformInstallationData : object {
    public double Priority { get; }
    public sealed virtual double get_Priority();
    public sealed virtual InstallationDataTransform ApplyTransform(InstallationDataTransform installdata);
}
public static class JetBrains.Application.Install.InstallDirInstaller : object {
    public static string RegistryCompanyNameValueName;
    public static string RegistryInstallDirValueName;
    public static string RegistryProductDisplayNameValueName;
    public static string RegistryProductFullNameValueName;
    public static string RegistryProductNameValueName;
    public static string RegistryProductVersionValueName;
    public static string RegistryProductUpgradeCodeValueName;
    public static string RegistryProductInstallDateValueName;
    public static string RegistryProductMarketingVersionValueName;
    private static InstallDirInstaller();
    [BuildStepAttribute]
public static void EmitInstallDirIntoRegistry(Optional`1<HostInfo> maybeHostInfo, ILogger logger, IList`1& keys, IList`1& values);
    public static BackSlashSeparatedRelativePath GetHostRegistryKey(HostInfo hostInfo);
}
public static class JetBrains.Application.Install.Installer.InstallerLocations : object {
    public static FileSystemPath LogsFolder;
    private static InstallerLocations();
}
public static class JetBrains.Application.Install.Installer.InstallerSingleInstanceHelper : object {
    [NotNullAttribute]
public static FileSystemPath GetLockFile();
    public static bool IsAnotherInstanceRunning();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Application.Install.Installer.InstallerStartupOptions/InstallerStartupOptionsSerializer")]
public class JetBrains.Application.Install.Installer.InstallerStartupOptions : object {
    public static String[] ListSeparators;
    public String[] VsVersion;
    public bool SkipVsIntegration;
    public String[] SpecificProductNames;
    public String[] SpecificProductNamesToRemove;
    public String[] InstalledProductsToRemove;
    public String[] HostsToRemove;
    public String[] HostsToReInstall;
    public String[] HostsToModify;
    public String[] HostsToUpdate;
    public String[] HostsToCheckUpdatesInBackground;
    public bool ParticipateInEap;
    public string Hive;
    public bool ReSharper9PlusMsi;
    public bool IgnoreExtensions;
    public bool DisableExtensionVerifier;
    public String[] ExtensionsToInstall;
    public String[] ExtensionsToRemove;
    public bool Silent;
    public bool PerMachine;
    public string LogFile;
    public string LogLevel;
    public string Gallery;
    public string Toolbox;
    public string FeaturedProducts;
    public string WebProxy;
    public string WebUserAgent;
    public string ColorTheme;
    public bool SkipNgenAssemblies;
    public bool SkipEtwService;
    public bool SkipVsUpdateConfiguration;
    public bool LicenseAccepted;
    public string ChannelId;
    private static IDictionary`2<string, Action`2<InstallerStartupOptions, string>> ourCommandLineParameterHandlers;
    private static InstallerStartupOptions();
    public bool IsLightColorTheme();
    public InstallerStartupOptions Clone();
    public string ToCommandLine(bool quoteLists);
    public void SetFromCommandLine(IList`1<string> args, OnError onerror);
    private static bool ParseBoolDefaultTrue(string value);
    private static String[] ParseList(string value);
    private static string ParseHive(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static void <ToCommandLine>g__AppendKey|35_0(string key, string value, bool quote, <>c__DisplayClass35_0& );
    [CompilerGeneratedAttribute]
internal static void <ToCommandLine>g__AppendList|35_1(string key, IEnumerable`1<string> values, <>c__DisplayClass35_0& );
}
public static class JetBrains.Application.Install.Installer.PlatformInstallerConstants : object {
    public static string AllProductsInstallerHumanName;
    public static string AllProductsInstallerFileNamePart;
    public static string DefaultProductionCdnUrl;
    private static string VersionJsonRtmName;
    private static string VersionJsonEapName;
    private static string LatestUpdatesJsonRtmName;
    private static string LatestUpdatesJsonEapName;
    private static string LightInstallerRtmName;
    private static string LightInstallerEapName;
    public static RelativePath InstallerBootstrapName;
    public static RelativePath WebInstallerInBinFolder;
    private static string UpdateGuardRtmName;
    private static string UpdateGuardEapName;
    private static string UpdateGuardProductionUrl;
    private static PlatformInstallerConstants();
    [NotNullAttribute]
public static RelativePath GetVersionJsonName(bool eap);
    [NotNullAttribute]
public static RelativePath GetLatestUpdatesJsonName(bool eap);
    [NotNullAttribute]
public static RelativePath GetGalleryPackagesJsonName(DeployedFilesNamingScheme naming);
    public static string GetLightInstallerNameNoExt(bool eap);
    public static Uri GetDownloadUri();
    public static bool IsStagingMode();
    private static FileSystemPath GetStagingFilePath();
    private static string GetStagingCdnUrl();
    public static Uri GetUpdateGuardUri(bool eap);
}
public static class JetBrains.Application.Install.Installer.WebInstallerUtils : object {
    public static JetSemanticVersion GetRemoteVersion(IWebProxy proxy, ILogger logger, bool eap);
    public static T ReadRemoteStream(Uri uri, IWebProxy proxy, ILogger logger, Func`2<StreamReader, T> read);
}
[DataContractAttribute]
public class JetBrains.Application.Install.Installer.WebInstallerWebProxySettingsSerialization : object {
    [DataMemberAttribute]
public string Host;
    [DataMemberAttribute]
public int Port;
    [DataMemberAttribute]
public string User;
    [DataMemberAttribute]
public string Pass;
    private static string EncPrefix;
    [CanBeNullAttribute]
public static IWebProxy ProxyFromString(string str);
    [NotNullAttribute]
public static string MakeString(WebProxySettings settings);
    [NotNullAttribute]
public static string MakeString(string host, int port, string user, string pass, bool plainText);
    [CanBeNullAttribute]
public static WebInstallerWebProxySettingsSerialization FromString(string str);
    [CanBeNullAttribute]
private static IWebProxy GetWebProxy(WebInstallerWebProxySettingsSerialization pars);
    [CanBeNullAttribute]
private static IWebProxy GetSystemWebProxy();
}
public static class JetBrains.Application.Install.InstallerChannelIdUtil : object {
    public static string ChannelIdValueName;
    public static string ChannelsKeyName;
    private static InstallerChannelIdUtil();
    [CanBeNullAttribute]
public static string GetHostCurrentChannelId(HostInfo hostInfo);
    [NotNullAttribute]
public static ICollection`1<string> GetAllHostChannelIds(HostInfo hostInfo);
    [NotNullAttribute]
public static ICollection`1<string> GetAllComputerChannelIds();
    public static void RegisterInstallerChannelId(string channelId);
    public static void RegisterHostChannelId(HostInfo hostInfo, string channelId);
    private static void AddChannelIdToList(HostInfo hostInfo, ApplicationHostDetails details, string channelId);
    [NotNullAttribute]
private static ICollection`1<string> ReadChannelIdList(HostInfo hostInfo, ApplicationHostDetails details);
}
public interface JetBrains.Application.Install.IPackageGallery {
    [NotNullAttribute]
public abstract virtual IList`1<IGalleryPackage> Load(IProgressIndicator pi, OnError onerror);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.Launcher.CleanLauncherPostCompileArtifact : CleanLauncherArtifactBase {
    public CleanLauncherPostCompileArtifact(LauncherConfig config, ImmutableFileItem executable, ImmutableFileItem programDatabase, LauncherNetCoreSupplementaryFiles netCoreSupplementaryFiles, LaunchersCompilationIdentityHash compileidentity);
    public CleanLauncherPostCompileArtifact(IStructuredStorage storage);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.Launcher.CleanLaunchersPostCompilePackedCacheArtifact : BuildOutputPackageFileArtifact {
    public CleanLaunchersPostCompilePackedCacheArtifact(IJetNugetPackage package);
    public CleanLaunchersPostCompilePackedCacheArtifact(IStructuredStorage sstg);
}
public static class JetBrains.Application.Install.Launcher.CleanLauncherTasksPostCompile : object {
    [AsyncStateMachineAttribute("JetBrains.Application.Install.Launcher.CleanLauncherTasksPostCompile/<AssertIsCachedInPackage>d__0")]
[BuildStepAttribute]
public static Task`1<LauncherAssertIsCachedInPackage> AssertIsCachedInPackage(Lifetime lifetime, CleanLaunchersPostCompilePackedCacheArtifact launchers, IJetNugetPackageManager nugetter, ILogger logger);
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile MountAssertIsCachedInPackageToIpz(LauncherAssertIsCachedInPackage pkg);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.Launcher.CleanLauncherTasksPostCompile/<PackPostCompileForCachingAsync>d__2")]
[BuildStepAttribute]
public static Task`1<CleanLaunchersPostCompilePackedCacheArtifact> PackPostCompileForCachingAsync(Lifetime lifetime, CleanLauncherPostCompileArtifact[] compiled, IJetNugetPackageManager nugetter, SdkLicenseAgreementArtifact sdkLicenseAgreementArtifact);
    [BuildStepAttribute]
public static CleanLauncherPostCompileArtifact[] ProduceCleanLauncherPostCompileArtifacts(SubplatformsInAllInputPackages inputs, ILogger logger);
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.Launcher.LauncherAssertIsCachedInPackage : BuildOutputPackageFileArtifact {
    public LauncherAssertIsCachedInPackage(IJetNugetPackage package);
    public LauncherAssertIsCachedInPackage(IStructuredStorage sstg);
}
public static class JetBrains.Application.Install.LocalInstall.TmpLocalInstallDefaults : object {
    [BuildStepAttribute]
public static void GuessDefaultsForTests_LocalRegisterIsolationOptions(LocalRegisterIsolationOptionsArtifact& registerIsolationOptionsArtifact, Optional`1<LocalRegisterIsolationOptionsOverrideArtifact> overrideIsolationOptions);
    [BuildStepAttribute]
public static void GuessDefaultsForTests_Product(ProductNameAndVersionArtifact& product);
    [BuildStepAttribute]
public static void GuessDefaultsForTests_WindowBranding(ProductNameAndVersionArtifact product, WindowBrandingArtifact& windowBrandingArtifact);
}
public static class JetBrains.Application.Install.LocalInstaller : object {
    [BuildStepAttribute]
[PublicAPIAttribute]
public static LocalInstallPart LocalInstall(LocalRegisterIsolationOptionsArtifact localRegisterIsolationOptionsArtifact, ResolvedInstallationTargetDirRoot[] targetdirs, LocalInstallerRegistryMacro[] macros, InstallationDataFinal data);
    [BuildStepAttribute]
public static LocalInstallCommitPart BuildAppInstall(LocalRegisterIsolationOptionsArtifact localRegisterIsolationOptionsArtifact, ResolvedInstallationTargetDirRoot[] targetdirs, LocalInstallerRegistryMacro[] macros, InstallationDataFinal data, ILogger logger);
    [BuildStepAttribute]
[PublicAPIAttribute]
public static LocalInstallWithPostInstallStepsPart ValidateOnBuildAppInstall(PostCompileValidationSubsetForLocalInstallFromBuildApp[] validated);
    [NotNullAttribute]
public static UninstallableFile[] CommitLocalInstall(InstallationDataFinal data, ICollection`1<LocalInstallerRegistryMacro> macros, ICollection`1<ResolvedInstallationTargetDirRoot> targetdirs, IsolationOptions isolation, ILogger logger);
    [BuildStepAttribute]
public static LocalUninstallArtifact LocalUninstall(LocalRegisterIsolationOptionsArtifact localRegisterIsolationOptionsArtifact, ILogger logger, ResolvedInstallationTargetDirRoot[] targetdirs, LocalInstallerRegistryMacro[] macros, InstallationDataFinal data);
    private static void InstallCore(InstallationDataFinal data, RegistrationStage stage, ICollection`1<LocalInstallerRegistryMacro> macros, ICollection`1<ResolvedInstallationTargetDirRoot> targetdirs, ILogger logger, IsolationOptions isolation, UninstallableFile[]& uninstallableFiles);
    private static void InstallFiles(IList`1<InstalledFolder> installedFolders, RegistrationStage stage, ILogger Logger, Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot, IsolationOptions isolationOptions, List`1<UninstallableFile> localUninstallable);
    private static void InstallFiles_File(InstalledFile filexml, FileSystemPath diTarget, RegistrationStage stage, ILogger Logger);
    private static void InstallFiles_ReplaceTextInFile(InstalledReplaceTextInFile replacement, FileSystemPath diTarget, RegistrationStage stage, Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot, Dictionary`2<string, Lazy`1<string>> macros, IsolationOptions isolationOptions, ILogger Logger);
    private static void InstallFiles_ShellLink(InstalledShellLink link, FileSystemPath diTarget, RegistrationStage stage, IsolationOptions isolationOptions, Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot, ILogger Logger, List`1<UninstallableFile> localUninstallable);
    public static void InstallRegistry(IReadOnlyList`1<InstalledRegistryKey> regkeys, IReadOnlyList`1<InstalledRegistryValue> regvalues, RegistrationStage registrationStage, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static Dictionary`2<string, Lazy`1<string>> PrepReplaceTextInFileMacros(Func`2<InstallationTargetDirRoot, FileSystemPath> FResolveTargetDirRoot);
    private static void RegisterKey(InstalledRegistryKey key, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static void RegisterValue(InstalledRegistryValue value, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static void UnregisterKey(InstalledRegistryKey key, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
    private static void UnregisterValue(InstalledRegistryValue value, IDictionary`2<string, string> macros, IsolationOptions isolation, ILogger logger);
}
public static class JetBrains.Application.Install.LocalInstallStandaloneLaunchers : object {
    [AsyncStateMachineAttribute("JetBrains.Application.Install.LocalInstallStandaloneLaunchers/<EmitInstallTimeLauncherHosts>d__0")]
[BuildStepAttribute]
public static Task`1<Tuple`2<IList`1<StuffedLauncherArtifact>, IList`1<StandaloneLauncherHostOsIntegration>>> EmitInstallTimeLauncherHosts(Lifetime lifetime, StandaloneLauncherHostArtifact[] hosts, SerializedHostComponentItemArtifact[] hostcomponents, CleanLauncherPostCompileArtifact[] launchersClean, NativeResourceForLauncher[] resources, IAuthenticodeSigningService signer, Optional`1<LocalInstallRootSuffix> rootSuffix, BuildChainFlavor buildflavor, IJetNugetPackageManager nugetter, SkiaHelper skiahelper, IBuildTaskHost tasker, ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.Application.Install.LocalInstallStandaloneLaunchers/<InstallLauncherFiles>d__1")]
[BuildStepAttribute]
public static IEnumerable`1<InstalledFolder> InstallLauncherFiles(StuffedLauncherArtifact[] launchers, ILogger logger);
    [BuildStepAttribute]
public static InstallationDataOriginalPart InstallLauncherHostOsIntegration(IList`1<StandaloneLauncherHostOsIntegration> osintegrations, ILogger logger, Optional`1<SkipStandaloneHostOsIntegration> skiposint);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.LocalInstallStandaloneLaunchers/<RetrieveCompileTimeLauncherHostOsIntegrationsAsync>d__3")]
[BuildStepAttribute]
public static Task`1<IList`1<StandaloneLauncherHostOsIntegration>> RetrieveCompileTimeLauncherHostOsIntegrationsAsync(Lifetime lifetime, AllAssembliesOnPackagesEx allassPkg, IBuildTaskHost tasker, ILogger logger);
    private static void MakeLnkAndFileAssocForHost(StandaloneLauncherHostOsIntegration integration, InstallationDataOriginalPart& installdata, ILogger logger);
    [CanBeNullAttribute]
private static RelativePath MakeLnkAndFileAssocForHost_ChooseLauncher(StandaloneLauncherHostOsIntegration hosti, ILogger logger);
}
public static class JetBrains.Application.Install.LocalInstallTasksSinceClr4 : object {
    [BuildStepAttribute]
public static LocalInstallPart Link_ExtractPackagesToBinDir_LocalInstall(ExtractPackagesToBinDir extract);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Install.Ngen.AssemblyToNgenArtifact : object {
    [NotNullAttribute]
public FileSystemPath AssemblyPath;
    public bool IncludeDependencies;
    public AssemblyToNgenArtifact(FileSystemPath assemblyPath, bool includeDependencies);
    public virtual string ToString();
    [BuildStepAttribute]
public static AssemblyToNgenArtifact[] EmptyDefault();
}
public static class JetBrains.Application.Install.Ngen.NgenExcludeList : object {
    private static HashSet`1<string> ourExcludedFileNames;
    private static NgenExcludeList();
    public static bool Contains(FileSystemPath path);
}
public class JetBrains.Application.Install.NoDefaultPackageSourceProvider : object {
    private IPackageSourceProvider myPackageSourceProvider;
    public NoDefaultPackageSourceProvider(IPackageSourceProvider packageSourceProvider);
    public sealed virtual IEnumerable`1<PackageSource> LoadPackageSources();
    public sealed virtual void SavePackageSources(IEnumerable`1<PackageSource> sources);
    public sealed virtual void DisablePackageSource(PackageSource source);
    public sealed virtual bool IsPackageSourceEnabled(PackageSource source);
}
public interface JetBrains.Application.Install.Notarization.INotaryService {
    public bool IsAvailable { get; }
    public abstract virtual bool get_IsAvailable();
    [NotNullAttribute]
public abstract virtual Task NotarizeAsync(ImmutableFileItem file);
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Util.Reflection.SimpleValueSerializer`1<JetBrains.Application.Install.Notarization.NotarizationServerInfo>")]
public class JetBrains.Application.Install.Notarization.NotarizationServerInfo : object {
    [NotNullAttribute]
public string IssuerId;
    [NotNullAttribute]
public string KeyId;
    [NotNullAttribute]
public string PrivateKey;
    public NotarizationServerInfo(string issuerId, string keyId, string privateKey);
    public NotarizationServerInfo(string serialized);
    public virtual string ToString();
}
[BuildHelperAttribute]
public class JetBrains.Application.Install.Notarization.NotaryServiceStub : object {
    private static string FailureMessage;
    public bool IsAvailable { get; }
    private static NotaryServiceStub();
    public virtual bool get_IsAvailable();
    public virtual Task NotarizeAsync(ImmutableFileItem file);
}
public class JetBrains.Application.Install.PackageSourceIds : object {
    public static string WavePackageId;
    public static string IsProduct;
    public static string IsHost;
    public static string IsAutoEnable;
    public static string JetBrainsStable;
    public static string JetBrainsPreRelease;
    public static string JetBrainsLocal;
    public static string JetBrainsCommunity;
    public static string JetBrainsCommunityPreRelease;
    private static PackageSourceIds();
}
public class JetBrains.Application.Install.PluginsRepository : object {
    [NotNullAttribute]
private IFileSystem mySharedFileSystem;
    [CompilerGeneratedAttribute]
private IPackageRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private SharedPackageRepository <SharedRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackageRepository <InstallationRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackageSourceProvider <PackageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IPackagePathResolver <PackagePathResolver>k__BackingField;
    [NotNullAttribute]
public IPackageRepository Repository { get; }
    [NotNullAttribute]
public SharedPackageRepository SharedRepository { get; }
    [NotNullAttribute]
public IPackageRepository InstallationRepository { get; }
    [NotNullAttribute]
public IPackageSourceProvider PackageSource { get; }
    [NotNullAttribute]
public IPackagePathResolver PackagePathResolver { get; }
    public PluginsRepository(IPackageRepositoryFactory packageRepositoryFactory, LocalPaths localPaths, HostInfo hostInfo);
    public PluginsRepository(IPackageRepositoryFactory packageRepositoryFactory, LocalPaths localPaths, FileSystemPath pluginsRoot);
    [CompilerGeneratedAttribute]
public IPackageRepository get_Repository();
    [CompilerGeneratedAttribute]
public SharedPackageRepository get_SharedRepository();
    [CompilerGeneratedAttribute]
public IPackageRepository get_InstallationRepository();
    [CompilerGeneratedAttribute]
public IPackageSourceProvider get_PackageSource();
    [CompilerGeneratedAttribute]
public IPackagePathResolver get_PackagePathResolver();
    [NotNullAttribute]
public IPackageManager GetPackageManager(IPackageRepository sourceRepository, ILogger logger, IPackageRepository localRepository, bool handleEvents);
    private static FileSystemPath GetPluginsRootDir(HostInfo hostInfo, LocalPaths localPaths);
    [CompilerGeneratedAttribute]
private void <GetPackageManager>b__18_0(object _, PackageOperationEventArgs args);
    [CompilerGeneratedAttribute]
private void <GetPackageManager>b__18_1(object _, PackageOperationEventArgs args);
}
public enum JetBrains.Application.Install.PluginVerificationResult : Enum {
    public int value__;
    public static PluginVerificationResult UnknownCompatibility;
    public static PluginVerificationResult Compatible;
    public static PluginVerificationResult Incompatible;
    public static PluginVerificationResult VerificationDisabled;
}
public class JetBrains.Application.Install.ProductContentResourcePackageGallery : object {
    private ILogger myLogger;
    public ProductContentResourcePackageGallery(ILogger logger);
    public virtual string ToString();
    private sealed virtual override IList`1<IGalleryPackage> JetBrains.Application.Install.IPackageGallery.Load(IProgressIndicator pi, OnError onerror);
    private ImmutableArray`1<IJetNugetPackage> LoadDeferred(IProgressIndicator pi, OnError onerror);
    [CompilerGeneratedAttribute]
private ItemGalleryPackage <JetBrains.Application.Install.IPackageGallery.Load>b__3_0(IJetNugetPackage x);
}
[BuildHelperAttribute]
public class JetBrains.Application.Install.ProductPartCatalogFromPackages : ProductPartCatalogForBuild {
    public ProductPartCatalogFromPackages(Lifetime l, InputPackage[] b, IBuildTimeRealizedAssemblyItemUnification d, AllAssembliesOnEverything f, IBuildTaskHost g, ILogger e);
    private static Tuple`2<PartCatalog, IAssemblyMasterBinder> GetProductPartsCatalogFromProductAssemblies(Lifetime lifetime, InputPackage[] ipkgs, IBuildTimeRealizedAssemblyItemUnification realizedAssemblyItemUnification, AllAssembliesOnEverything allass, IBuildTaskHost tasker, ILogger logger);
    private static Nullable`1<InfoFromSub> GetProductPartsCatalogFromProductAssemblies_Single(Lifetime lifetime, Subplatform sub, BindTypeByNameHinted typebinder, ILogger logger);
}
public enum JetBrains.Application.Install.RegistrationStage : Enum {
    public int value__;
    public static RegistrationStage Register;
    public static RegistrationStage Unregister;
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.Install.RiderInstaller.ProductBinaryPackageArtifact : object {
    [CompilerGeneratedAttribute]
private IJetNugetPackage <Package>k__BackingField;
    public IJetNugetPackage Package { get; }
    public ProductBinaryPackageArtifact(IJetNugetPackage item);
    [CompilerGeneratedAttribute]
public sealed virtual IJetNugetPackage get_Package();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.Install.RiderInstaller.RiderAfterInstallInstallEtwService>")]
public class JetBrains.Application.Install.RiderInstaller.RiderAfterInstallInstallEtwService : object {
    public bool InstallEtwService;
    public bool Value { get; }
    public RiderAfterInstallInstallEtwService(bool isInstall);
    public sealed virtual bool get_Value();
    public virtual string ToString();
}
[BuildArtifactAttribute]
[ValueSerializerAttribute("JetBrains.Build.Helpers.General.BooleanArtifactSerializer`1<JetBrains.Application.Install.RiderInstaller.RiderAfterInstallNGenAssemblies>")]
public class JetBrains.Application.Install.RiderInstaller.RiderAfterInstallNGenAssemblies : object {
    public bool NGenAssemblies;
    public bool Value { get; }
    public RiderAfterInstallNGenAssemblies(bool isNgen);
    public sealed virtual bool get_Value();
    public virtual string ToString();
}
[BuildArtifactAttribute]
public class JetBrains.Application.Install.RiderInstaller.RiderArtifact : BuildOutputFileArtifact {
    public RiderArtifact(ImmutableFileItem file);
    public RiderArtifact(IStructuredStorage sstg);
    [BuildStepAttribute]
public static RiderArtifact RequireValidZoning(ZonesValidationResult zvres);
    public virtual string ToString();
}
public class JetBrains.Application.Install.Sbom.Models.Checksum : object {
    [CompilerGeneratedAttribute]
private ChecksumAlgorithm <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChecksumValue>k__BackingField;
    public ChecksumAlgorithm Algorithm { get; public set; }
    [NotNullAttribute]
public string ChecksumValue { get; public set; }
    [CompilerGeneratedAttribute]
public ChecksumAlgorithm get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(ChecksumAlgorithm value);
    [CompilerGeneratedAttribute]
public string get_ChecksumValue();
    [CompilerGeneratedAttribute]
public void set_ChecksumValue(string value);
}
public enum JetBrains.Application.Install.Sbom.Models.ChecksumAlgorithm : Enum {
    public int value__;
    public static ChecksumAlgorithm MD2;
    public static ChecksumAlgorithm MD4;
    public static ChecksumAlgorithm MD5;
    public static ChecksumAlgorithm MD6;
    public static ChecksumAlgorithm SHA1;
    public static ChecksumAlgorithm SHA224;
    public static ChecksumAlgorithm SHA256;
    public static ChecksumAlgorithm SHA384;
    public static ChecksumAlgorithm SHA512;
}
public class JetBrains.Application.Install.Sbom.Models.CreationInfo : object {
    [CompilerGeneratedAttribute]
private string <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Creators>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseListVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [NotNullAttribute]
public string Created { get; public set; }
    [NotNullAttribute]
public List`1<string> Creators { get; public set; }
    [CanBeNullAttribute]
public string LicenseListVersion { get; public set; }
    [CanBeNullAttribute]
public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Creators();
    [CompilerGeneratedAttribute]
public void set_Creators(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_LicenseListVersion();
    [CompilerGeneratedAttribute]
public void set_LicenseListVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
public class JetBrains.Application.Install.Sbom.Models.CrossRef : object {
    [CompilerGeneratedAttribute]
private bool <IsWayBackLink>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public bool IsWayBackLink { get; public set; }
    public bool IsValid { get; public set; }
    public bool IsLive { get; public set; }
    [CanBeNullAttribute]
public string Match { get; public set; }
    public int Order { get; public set; }
    [CanBeNullAttribute]
public string Timestamp { get; public set; }
    [NotNullAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsWayBackLink();
    [CompilerGeneratedAttribute]
public void set_IsWayBackLink(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLive();
    [CompilerGeneratedAttribute]
public void set_IsLive(bool value);
    [CompilerGeneratedAttribute]
public string get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public string get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class JetBrains.Application.Install.Sbom.Models.ExternalDocumentRef : object {
    [CompilerGeneratedAttribute]
private string <ExternalDocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Checksum <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpdxDocument>k__BackingField;
    [NotNullAttribute]
public string ExternalDocumentId { get; public set; }
    public Checksum Checksum { get; public set; }
    [NotNullAttribute]
public string SpdxDocument { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ExternalDocumentId();
    [CompilerGeneratedAttribute]
public void set_ExternalDocumentId(string value);
    [CompilerGeneratedAttribute]
public Checksum get_Checksum();
    [CompilerGeneratedAttribute]
public void set_Checksum(Checksum value);
    [CompilerGeneratedAttribute]
public string get_SpdxDocument();
    [CompilerGeneratedAttribute]
public void set_SpdxDocument(string value);
}
public class JetBrains.Application.Install.Sbom.Models.ExternalRef : object {
    [CompilerGeneratedAttribute]
private ExternalRefCategory <ReferenceCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceLocator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public ExternalRefCategory ReferenceCategory { get; public set; }
    [NotNullAttribute]
public string ReferenceLocator { get; public set; }
    [NotNullAttribute]
public string ReferenceType { get; public set; }
    [CanBeNullAttribute]
public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public ExternalRefCategory get_ReferenceCategory();
    [CompilerGeneratedAttribute]
public void set_ReferenceCategory(ExternalRefCategory value);
    [CompilerGeneratedAttribute]
public string get_ReferenceLocator();
    [CompilerGeneratedAttribute]
public void set_ReferenceLocator(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceType();
    [CompilerGeneratedAttribute]
public void set_ReferenceType(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
public enum JetBrains.Application.Install.Sbom.Models.ExternalRefCategory : Enum {
    public int value__;
    public static ExternalRefCategory OTHER;
    [EnumMemberAttribute]
public static ExternalRefCategory PACKAGE_MANAGER;
    public static ExternalRefCategory SECURITY;
}
public class JetBrains.Application.Install.Sbom.Models.ExtractedLicensingInfo : object {
    [CompilerGeneratedAttribute]
private string <LicenseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractedText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CrossRef> <CrossRefs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [NotNullAttribute]
public string LicenseId { get; public set; }
    [NotNullAttribute]
public string ExtractedText { get; public set; }
    [NotNullAttribute]
public string Name { get; public set; }
    [CanBeNullAttribute]
public List`1<CrossRef> CrossRefs { get; public set; }
    [NotNullAttribute]
public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LicenseId();
    [CompilerGeneratedAttribute]
public void set_LicenseId(string value);
    [CompilerGeneratedAttribute]
public string get_ExtractedText();
    [CompilerGeneratedAttribute]
public void set_ExtractedText(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<CrossRef> get_CrossRefs();
    [CompilerGeneratedAttribute]
public void set_CrossRefs(List`1<CrossRef> value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
public class JetBrains.Application.Install.Sbom.Models.File : object {
    [CompilerGeneratedAttribute]
private string <SPDXID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileType> <FileTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Checksum> <Checksums>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseConcluded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LicenseInfoInFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseComments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CopyrightText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoticeText>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <FileContributors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AttributionTexts>k__BackingField;
    [NotNullAttribute]
public string SPDXID { get; public set; }
    [NotNullAttribute]
public string FileName { get; public set; }
    [CanBeNullAttribute]
public List`1<FileType> FileTypes { get; public set; }
    [NotNullAttribute]
public List`1<Checksum> Checksums { get; public set; }
    [CanBeNullAttribute]
public string LicenseConcluded { get; public set; }
    [CanBeNullAttribute]
public List`1<string> LicenseInfoInFiles { get; public set; }
    [CanBeNullAttribute]
public string LicenseComments { get; public set; }
    [CanBeNullAttribute]
public string CopyrightText { get; public set; }
    [CanBeNullAttribute]
public string Comment { get; public set; }
    [CanBeNullAttribute]
public string NoticeText { get; public set; }
    [CanBeNullAttribute]
public List`1<string> FileContributors { get; public set; }
    [CanBeNullAttribute]
public List`1<string> AttributionTexts { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SPDXID();
    [CompilerGeneratedAttribute]
public void set_SPDXID(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public List`1<FileType> get_FileTypes();
    [CompilerGeneratedAttribute]
public void set_FileTypes(List`1<FileType> value);
    [CompilerGeneratedAttribute]
public List`1<Checksum> get_Checksums();
    [CompilerGeneratedAttribute]
public void set_Checksums(List`1<Checksum> value);
    [CompilerGeneratedAttribute]
public string get_LicenseConcluded();
    [CompilerGeneratedAttribute]
public void set_LicenseConcluded(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_LicenseInfoInFiles();
    [CompilerGeneratedAttribute]
public void set_LicenseInfoInFiles(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_LicenseComments();
    [CompilerGeneratedAttribute]
public void set_LicenseComments(string value);
    [CompilerGeneratedAttribute]
public string get_CopyrightText();
    [CompilerGeneratedAttribute]
public void set_CopyrightText(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_NoticeText();
    [CompilerGeneratedAttribute]
public void set_NoticeText(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_FileContributors();
    [CompilerGeneratedAttribute]
public void set_FileContributors(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AttributionTexts();
    [CompilerGeneratedAttribute]
public void set_AttributionTexts(List`1<string> value);
}
public enum JetBrains.Application.Install.Sbom.Models.FileType : Enum {
    public int value__;
    public static FileType APPLICATION;
    public static FileType ARCHIVE;
    public static FileType AUDIO;
    public static FileType BINARY;
    public static FileType DOCUMENTATION;
    public static FileType IMAGE;
    public static FileType OTHER;
    public static FileType SOURCE;
    public static FileType SPDX;
    public static FileType TEXT;
    public static FileType VIDEO;
}
public class JetBrains.Application.Install.Sbom.Models.Package : object {
    [CompilerGeneratedAttribute]
private string <SPDXID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Supplier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Originator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilesAnalyzed>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageVerificationCode <PackageVerificationCode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Checksum> <Checksums>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseConcluded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <LicenseInfoFromFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseDeclared>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseComments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CopyrightText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExternalRef> <ExternalRefs>k__BackingField;
    [JsonPropertyAttribute("SPDXID")]
[NotNullAttribute]
public string SPDXID { get; public set; }
    [NotNullAttribute]
public string Name { get; public set; }
    [CanBeNullAttribute]
public string VersionInfo { get; public set; }
    [CanBeNullAttribute]
public string PackageFileName { get; public set; }
    [CanBeNullAttribute]
public string Supplier { get; public set; }
    [CanBeNullAttribute]
public string Originator { get; public set; }
    [NotNullAttribute]
public string DownloadLocation { get; public set; }
    [CanBeNullAttribute]
public bool FilesAnalyzed { get; public set; }
    [CanBeNullAttribute]
public PackageVerificationCode PackageVerificationCode { get; public set; }
    [CanBeNullAttribute]
public List`1<Checksum> Checksums { get; public set; }
    [CanBeNullAttribute]
public string Homepage { get; public set; }
    [CanBeNullAttribute]
public string SourceInfo { get; public set; }
    [CanBeNullAttribute]
public string LicenseConcluded { get; public set; }
    [CanBeNullAttribute]
public List`1<string> LicenseInfoFromFiles { get; public set; }
    [CanBeNullAttribute]
public string LicenseDeclared { get; public set; }
    [CanBeNullAttribute]
public string LicenseComments { get; public set; }
    [CanBeNullAttribute]
public string CopyrightText { get; public set; }
    [CanBeNullAttribute]
public string Summary { get; public set; }
    [CanBeNullAttribute]
public string Description { get; public set; }
    [CanBeNullAttribute]
public string Comment { get; public set; }
    [CanBeNullAttribute]
public List`1<ExternalRef> ExternalRefs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SPDXID();
    [CompilerGeneratedAttribute]
public void set_SPDXID(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_VersionInfo();
    [CompilerGeneratedAttribute]
public void set_VersionInfo(string value);
    [CompilerGeneratedAttribute]
public string get_PackageFileName();
    [CompilerGeneratedAttribute]
public void set_PackageFileName(string value);
    [CompilerGeneratedAttribute]
public string get_Supplier();
    [CompilerGeneratedAttribute]
public void set_Supplier(string value);
    [CompilerGeneratedAttribute]
public string get_Originator();
    [CompilerGeneratedAttribute]
public void set_Originator(string value);
    [CompilerGeneratedAttribute]
public string get_DownloadLocation();
    [CompilerGeneratedAttribute]
public void set_DownloadLocation(string value);
    [CompilerGeneratedAttribute]
public bool get_FilesAnalyzed();
    [CompilerGeneratedAttribute]
public void set_FilesAnalyzed(bool value);
    [CompilerGeneratedAttribute]
public PackageVerificationCode get_PackageVerificationCode();
    [CompilerGeneratedAttribute]
public void set_PackageVerificationCode(PackageVerificationCode value);
    [CompilerGeneratedAttribute]
public List`1<Checksum> get_Checksums();
    [CompilerGeneratedAttribute]
public void set_Checksums(List`1<Checksum> value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public string get_SourceInfo();
    [CompilerGeneratedAttribute]
public void set_SourceInfo(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseConcluded();
    [CompilerGeneratedAttribute]
public void set_LicenseConcluded(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_LicenseInfoFromFiles();
    [CompilerGeneratedAttribute]
public void set_LicenseInfoFromFiles(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_LicenseDeclared();
    [CompilerGeneratedAttribute]
public void set_LicenseDeclared(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseComments();
    [CompilerGeneratedAttribute]
public void set_LicenseComments(string value);
    [CompilerGeneratedAttribute]
public string get_CopyrightText();
    [CompilerGeneratedAttribute]
public void set_CopyrightText(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public List`1<ExternalRef> get_ExternalRefs();
    [CompilerGeneratedAttribute]
public void set_ExternalRefs(List`1<ExternalRef> value);
}
public class JetBrains.Application.Install.Sbom.Models.PackageVerificationCode : object {
    [CompilerGeneratedAttribute]
private List`1<string> <PackageVerificationCodeExcludedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageVerificationCodeValue>k__BackingField;
    [CanBeNullAttribute]
public List`1<string> PackageVerificationCodeExcludedFiles { get; public set; }
    [NotNullAttribute]
public string PackageVerificationCodeValue { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_PackageVerificationCodeExcludedFiles();
    [CompilerGeneratedAttribute]
public void set_PackageVerificationCodeExcludedFiles(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PackageVerificationCodeValue();
    [CompilerGeneratedAttribute]
public void set_PackageVerificationCodeValue(string value);
}
public class JetBrains.Application.Install.Sbom.Models.Relationship : object {
    [CompilerGeneratedAttribute]
private string <SpdxElementId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelatedSpdxElement>k__BackingField;
    [CompilerGeneratedAttribute]
private RelationshipType <RelationshipType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [NotNullAttribute]
public string SpdxElementId { get; public set; }
    [NotNullAttribute]
public string RelatedSpdxElement { get; public set; }
    public RelationshipType RelationshipType { get; public set; }
    [NotNullAttribute]
public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SpdxElementId();
    [CompilerGeneratedAttribute]
public void set_SpdxElementId(string value);
    [CompilerGeneratedAttribute]
public string get_RelatedSpdxElement();
    [CompilerGeneratedAttribute]
public void set_RelatedSpdxElement(string value);
    [CompilerGeneratedAttribute]
public RelationshipType get_RelationshipType();
    [CompilerGeneratedAttribute]
public void set_RelationshipType(RelationshipType value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
public enum JetBrains.Application.Install.Sbom.Models.RelationshipType : Enum {
    public int value__;
    public static RelationshipType AMENDS;
    public static RelationshipType ANCESTOR_OF;
    public static RelationshipType BUILD_DEPENDENCY_OF;
    public static RelationshipType BUILD_TOOL_OF;
    public static RelationshipType CONTAINED_BY;
    public static RelationshipType CONTAINS;
    public static RelationshipType COPY_OF;
    public static RelationshipType DATA_FILE_OF;
    public static RelationshipType DEPENDENCY_MANIFEST_OF;
    public static RelationshipType DEPENDENCY_OF;
    public static RelationshipType DEPENDS_ON;
    public static RelationshipType DESCENDANT_OF;
    public static RelationshipType DESCRIBED_BY;
    public static RelationshipType DESCRIBES;
    public static RelationshipType DEV_DEPENDENCY_OF;
    public static RelationshipType DEV_TOOL_OF;
    public static RelationshipType DISTRIBUTION_ARTIFACT;
    public static RelationshipType DOCUMENTATION_OF;
    public static RelationshipType DYNAMIC_LINK;
    public static RelationshipType EXAMPLE_OF;
    public static RelationshipType EXPANDED_FROM_ARCHIVE;
    public static RelationshipType FILE_ADDED;
    public static RelationshipType FILE_DELETED;
    public static RelationshipType FILE_MODIFIED;
    public static RelationshipType GENERATED_FROM;
    public static RelationshipType GENERATES;
    public static RelationshipType HAS_PREREQUISITE;
    public static RelationshipType METAFILE_OF;
    public static RelationshipType OPTIONAL_COMPONENT_OF;
    public static RelationshipType OPTIONAL_DEPENDENCY_OF;
    public static RelationshipType OTHER;
    public static RelationshipType PACKAGE_OF;
    public static RelationshipType PATCH_APPLIED;
    public static RelationshipType PATCH_FOR;
    public static RelationshipType PREREQUISITE_FOR;
    public static RelationshipType PROVIDED_DEPENDENCY_OF;
    public static RelationshipType RUNTIME_DEPENDENCY_OF;
    public static RelationshipType STATIC_LINK;
    public static RelationshipType TEST_CASE_OF;
    public static RelationshipType TEST_DEPENDENCY_OF;
    public static RelationshipType TEST_OF;
    public static RelationshipType TEST_TOOL_OF;
    public static RelationshipType VARIANT_OF;
}
public class JetBrains.Application.Install.Sbom.Models.SpdxDocument : object {
    [CompilerGeneratedAttribute]
private string <SPDXID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpdxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataLicense>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExternalDocumentRef> <ExternalDocumentRefs>k__BackingField;
    [CompilerGeneratedAttribute]
private CreationInfo <CreationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExtractedLicensingInfo> <HasExtractedLicensingInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Package> <Packages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<File> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Relationship> <Relationships>k__BackingField;
    [JsonPropertyAttribute("SPDXID")]
[NotNullAttribute]
public string SPDXID { get; public set; }
    [NotNullAttribute]
public string SpdxVersion { get; }
    [NotNullAttribute]
public string Name { get; public set; }
    [NotNullAttribute]
public string DataLicense { get; }
    [NotNullAttribute]
public string DocumentNamespace { get; public set; }
    [CanBeNullAttribute]
public List`1<ExternalDocumentRef> ExternalDocumentRefs { get; public set; }
    [NotNullAttribute]
public CreationInfo CreationInfo { get; public set; }
    [CanBeNullAttribute]
public string Comment { get; public set; }
    [CanBeNullAttribute]
public List`1<ExtractedLicensingInfo> HasExtractedLicensingInfos { get; public set; }
    [CanBeNullAttribute]
public List`1<Package> Packages { get; public set; }
    [CanBeNullAttribute]
public List`1<File> Files { get; public set; }
    [CanBeNullAttribute]
public List`1<Relationship> Relationships { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SPDXID();
    [CompilerGeneratedAttribute]
public void set_SPDXID(string value);
    [CompilerGeneratedAttribute]
public string get_SpdxVersion();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DataLicense();
    [CompilerGeneratedAttribute]
public string get_DocumentNamespace();
    [CompilerGeneratedAttribute]
public void set_DocumentNamespace(string value);
    [CompilerGeneratedAttribute]
public List`1<ExternalDocumentRef> get_ExternalDocumentRefs();
    [CompilerGeneratedAttribute]
public void set_ExternalDocumentRefs(List`1<ExternalDocumentRef> value);
    [CompilerGeneratedAttribute]
public CreationInfo get_CreationInfo();
    [CompilerGeneratedAttribute]
public void set_CreationInfo(CreationInfo value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public List`1<ExtractedLicensingInfo> get_HasExtractedLicensingInfos();
    [CompilerGeneratedAttribute]
public void set_HasExtractedLicensingInfos(List`1<ExtractedLicensingInfo> value);
    [CompilerGeneratedAttribute]
public List`1<Package> get_Packages();
    [CompilerGeneratedAttribute]
public void set_Packages(List`1<Package> value);
    [CompilerGeneratedAttribute]
public List`1<File> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<File> value);
    [CompilerGeneratedAttribute]
public List`1<Relationship> get_Relationships();
    [CompilerGeneratedAttribute]
public void set_Relationships(List`1<Relationship> value);
}
public class JetBrains.Application.Install.Sbom.PackagesCollectionInterceptor : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`3<ReferenceType, string, JetPackageIdentity>> <PackagesIncludedToProduct>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`3<ReferenceType, SubplatformName, JetPackageIdentity>> <PackagesIncludedForAdditionalSubplatform>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<ReferenceType, JetPackageIdentity>> <Packages>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`3<ReferenceType, JetPackageIdentity, JetPackageIdentity>> <PackagesReferencedByAnotherPackage>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`3<ReferenceType, string, JetPackageIdentity>> PackagesIncludedToProduct { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`3<ReferenceType, SubplatformName, JetPackageIdentity>> PackagesIncludedForAdditionalSubplatform { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<ReferenceType, JetPackageIdentity>> Packages { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`3<ReferenceType, JetPackageIdentity, JetPackageIdentity>> PackagesReferencedByAnotherPackage { get; }
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`3<ReferenceType, string, JetPackageIdentity>> get_PackagesIncludedToProduct();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`3<ReferenceType, SubplatformName, JetPackageIdentity>> get_PackagesIncludedForAdditionalSubplatform();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<ReferenceType, JetPackageIdentity>> get_Packages();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`3<ReferenceType, JetPackageIdentity, JetPackageIdentity>> get_PackagesReferencedByAnotherPackage();
    public sealed virtual void OnPackageIncludedInTheProduct(string productTechnicalName, JetPackageIdentity packageIdentity);
    public sealed virtual void OnPackageIncludedForAdditionalSubplatform(SubplatformName subPlatform, JetPackageIdentity packageIdentity);
    public sealed virtual void OnBinaryPackageIncludedInTheProduct(string productTechnicalName, JetPackageIdentity packageIdentity);
    public sealed virtual void OnAdditionalBinaryPackage(JetPackageIdentity packageIdentity);
    public sealed virtual void OnPackageReferencedByAnotherPackage(JetPackageIdentity parent, JetPackageIdentity child);
    public sealed virtual void OnPackageActivatedByZoning(JetPackageIdentity packageIdentity);
    public sealed virtual void OnSubplatformPackage(JetPackageIdentity packageIdentity);
}
public class JetBrains.Application.Install.Sbom.SbomGenerator : object {
    private ILogger myLogger;
    private Lifetime myLifetime;
    private ITaskHost myTasker;
    private int myPackageId;
    private int myRootPackageId;
    private int myFileId;
    private JsonSerializer myJsonSerializer;
    private static string NoAssertion;
    private static string None;
    private static String[] ourOrganizations;
    private static String[] ourCommunities;
    private static String[] ourBrands;
    private static IEnumerable`1<string> ourAllOrganizations;
    private static ChecksumAlgorithm[] ourPackageChecksumAlgorithms;
    private Dictionary`2<LicensesApprovedByLegalTeam, ExtractedLicensingInfo> myExtractedLicenses;
    public SbomGenerator(ILogger logger, Lifetime lifetime, ITaskHost tasker);
    private static SbomGenerator();
    protected string GetSpdxIdForRootPackage();
    protected string GetSpdxIdForPackage();
    protected string GetSpdxIdForFile();
    protected string GetSpdxId(string customId);
    private string GetCustomLicenseId(LicensesApprovedByLegalTeam license);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.Sbom.SbomGenerator/<GenerateSbom>d__23")]
public Task`1<SpdxDocument> GenerateSbom(InputPackage[] inputPackages, Optional`1<ICollection`1<string>> maybeProductsToEmbed, SubplatformsInAllInputPackages subsInInputs, ProductBinaryPackageArtifact[] binaryPackages, IEnumerable`1<ExtractPackageRelativePath> relativePaths, Optional`1<ExtractPackagesToBinDirBehaviorArtifact> maybeBehavior, string documentName, JetSemanticVersion productVersion, IReadOnlyCollection`1<JetRuntimeId> rids);
    public void WriteToJson(SpdxDocument document, StreamWriter streamWriter);
    private List`1<Relationship> MakeFlatRelationships(string rootPackageSpdxId, IEnumerable`1<Package> productPackages);
    private string GetRelationshipComment(ReferenceType referenceType);
    private List`1<Relationship> MakeRelationships(RootPackage rootPackage, Dictionary`2<string, DescribedPackage> packagesDictionary, PackagesCollectionInterceptor interceptor, IEnumerable`1<Package> productPackages);
    private ICollection`1<string> GetProductTechnicalNamesToInstall(Optional`1<ICollection`1<string>> maybeProductsToEmbed, IReadOnlyCollection`1<InputPackage> inputPackages);
    private Package DescribePackage(IJetNugetPackage inputPackage, JetSemanticVersion productVersion, Func`1<string> spdxIdGenerator);
    private IEnumerable`1<Relationship> CreateDescribesRelationship(IEnumerable`1<Package> rootPackages, string documentSPDXID);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.Sbom.SbomGenerator/<WriteRootPackages>d__31")]
private Task`1<List`1<RootPackage>> WriteRootPackages(InstallablePackages installablePackages, ICollection`1<string> products, IReadOnlyCollection`1<JetRuntimeId> rids, JetSemanticVersion productVersion, bool splitRootPackagesByRid);
    protected string NormalizeCopyright(string copyright);
    protected Checksum CalculateHash(Stream stream, ChecksumAlgorithm algorithm);
    protected string MakePackageDownloadLocation(IJetNugetPackage package, JetSemanticVersion productVersion);
    protected PackageVerificationCode CalculatePackageVerificationCode(IJetNugetPackage package);
    private bool NeedExcludeFile(RelativePath path);
    protected HashAlgorithm CreateHashAlgorithm(ChecksumAlgorithm algorithm);
    protected string GetLicenseIdentifierForPackage(LicensesApprovedByLegalTeam license);
    protected string GetOrCreateLicenseIdentifierForCustomLicense(LicenseInfo licenseInfo);
    [AsyncStateMachineAttribute("JetBrains.Application.Install.Sbom.SbomGenerator/<ExtractPackages>d__40")]
protected Task`1<List`1<File>> ExtractPackages(IEnumerable`1<DescribedPackage> inputPackages, IEnumerable`1<ExtractPackageRelativePath> relativePaths, Optional`1<ExtractPackagesToBinDirBehaviorArtifact> maybeBehavior, List`1<Relationship> relationships);
    protected List`1<FileType> GetFileTypes(string extensionNoDot);
    protected string MakeSupplier(String[] authors);
    protected SupplierType GuessSupplierType(string author);
}
[DataContractAttribute]
public class JetBrains.Application.Install.UninstallableFile : object {
    public static string KeyUninstallableFile;
    [DataMemberAttribute]
public string Path;
    public UninstallableFile(IStructuredStorage storage);
    public sealed virtual void GetObjectData(IStructuredStorage storage);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_1(BinaryReader reader);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4_0(Stream stream);
    [CompilerGeneratedAttribute]
private void <GetObjectData>b__4_1(BinaryWriter writer);
}
public interface JetBrains.Application.Install.Utils.IPackagesCollectionInterceptor {
    public abstract virtual void OnPackageIncludedInTheProduct(string productTechnicalName, JetPackageIdentity packageIdentity);
    public abstract virtual void OnPackageIncludedForAdditionalSubplatform(SubplatformName subPlatform, JetPackageIdentity packageIdentity);
    public abstract virtual void OnBinaryPackageIncludedInTheProduct(string productTechnicalName, JetPackageIdentity packageIdentity);
    public abstract virtual void OnAdditionalBinaryPackage(JetPackageIdentity packageIdentity);
    public abstract virtual void OnSubplatformPackage(JetPackageIdentity packageIdentity);
}
public static class JetBrains.Application.Install.Utils.ProductPackagesUtil : object {
    public static IReadOnlyCollection`1<InputPackage> CalculateProductRelatedPackages(ICollection`1<string> productsTechnicalNames, SubplatformName[] additionalSubplatforms, InputPackage[] inputs, SubplatformsInAllInputPackages subsInInputs, ProductBinaryPackageArtifact[] binaryPackages, ILogger logger, bool productNotFoundAsError, JetRuntimeId[] rids, Nullable`1<int> vsVersion, IPackagesCollectionInterceptor packageCollectionInterceptor);
}
public class JetBrains.Application.Install.Utils.ReferenceClosure : object {
    private List`1<string> myIncludeAssemblies;
    private List`1<PathWildcard> myIncludeExtra;
    private List`1<PathWildcard> myExclude;
    private IEnumerable`1<ImmutableFileItem> myFiles;
    private FileSystemPath myBasePath;
    private ReferenceClosure(IEnumerable`1<ImmutableFileItem> files, FileSystemPath basePath);
    [NotNullAttribute]
public ReferenceClosure IncludeExtra(IEnumerable`1<PathWildcard> wildcards);
    [NotNullAttribute]
public ReferenceClosure IncludeAssembly(string assemblyName);
    [NotNullAttribute]
public ReferenceClosure Exclude(IEnumerable`1<PathWildcard> wildcards);
    [NotNullAttribute]
public IEnumerable`1<ImmutableFileItem> Build();
    [NotNullAttribute]
public static ReferenceClosure Of(string entryAssemblyName, IEnumerable`1<ImmutableFileItem> files, FileSystemPath basePath);
    [NotNullAttribute]
public static ReferenceClosure Of(IEnumerable`1<string> assemblyNameEntries, IEnumerable`1<ImmutableFileItem> files, FileSystemPath basePath);
    private IMetadataAccess LoadMetadata(ImmutableFileItem file, Lifetime lifetime);
}
public static class JetBrains.Application.Install.ValidateWhenMakingInstallers : object {
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile RequireValidation(PostCompileValidationResult[] validateds, DeployedFilesNamingScheme naming);
}
public class JetBrains.Application.Install.WindowsShellIntegrationCleaner : object {
    private IsolationOptions myIsolation;
    private string myProductName;
    private FileAssociationEntry[] myAssociations;
    private OnError myOnError;
    private ICollection`1<BackSlashSeparatedRelativePath> myKeysToRemove;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<ValueTuple`2<BackSlashSeparatedRelativePath, string>> myValuesToRemove;
    public WindowsShellIntegrationCleaner(IsolationOptions isolation, string productName, FileAssociationEntry[] associations, OnError onError);
    public void CollectBrokenAssociations();
    public void RemoveBrokenAssociations(ILogger logger);
    private RegistryHiveAccess GetRegistryHiveAccess();
    private void VerifyApplicationRegistrations(RegistryHiveAccess regHive);
    private void VerifyAssociation(RegistryHiveAccess regHive, string extension);
    private void VerifyProductVerbs(RegistryHiveAccess regHive, BackSlashSeparatedRelativePath key);
    [IteratorStateMachineAttribute("JetBrains.Application.Install.WindowsShellIntegrationCleaner/<EnumShellVerbs>d__13")]
private static IEnumerable`1<ValueTuple`2<BackSlashSeparatedRelativePath, string>> EnumShellVerbs(RegistryHiveAccess regHive, BackSlashSeparatedRelativePath typeKey);
    private static bool IsCommandExeAbsent(string commandLine);
}
public static class JetBrains.Application.Install.WindowsShellIntegrationHelper : object {
    public static BackSlashSeparatedRelativePath SoftwareClassesKey;
    public static BackSlashSeparatedRelativePath ApplicationsKey;
    public static BackSlashSeparatedRelativePath DirectoryKey;
    public static BackSlashSeparatedRelativePath DirectoryBackgroundKey;
    public static BackSlashSeparatedRelativePath SupportedTypesKeyName;
    public static BackSlashSeparatedRelativePath OpenWithProgidsKeyName;
    public static BackSlashSeparatedRelativePath DefaultIconKeyName;
    public static IDictionary`2<string, string> WellKnownSystemTypes;
    private static WindowsShellIntegrationHelper();
    public static void UpdateSystemFileAssociation();
    public static ValueTuple`2<IReadOnlyList`1<InstalledRegistryKey>, IReadOnlyList`1<InstalledRegistryValue>> GetRegistryData(RelativePath exeRelativePath, ProductNameAndVersionArtifact productNameAndVersion, ICollection`1<FileAssociationEntry> fileEntries, ICollection`1<DirectoryAssociationEntry> dirEntries, ILogger logger);
    private static ValueTuple`3<ApplicationRegistration, IList`1<FileTypeAssociation>, IList`1<DirectoryAssociation>> PreprocessShellIntegrationData(RelativePath exeRelativePath, ProductNameAndVersionArtifact productNameAndVersion, ICollection`1<FileAssociationEntry> fileEntries, ICollection`1<DirectoryAssociationEntry> dirEntries, ILogger logger);
    [CompilerGeneratedAttribute]
internal static string <PreprocessShellIntegrationData>g__MakeIconString|11_0(RelativePath iconFile, Nullable`1<int> iconIndex, <>c__DisplayClass11_0& );
    [CompilerGeneratedAttribute]
internal static ShellVerb <PreprocessShellIntegrationData>g__MakeShellVerb|11_1(string verbName, string nameHuman, string icon, string param, <>c__DisplayClass11_0& );
}
public static class JetBrains.Application.Interop.Input.KeyboardStateProvider : object {
    private static Lazy`1<KeyCode> ourLAlt;
    private static Lazy`1<KeyCode> ourRAlt;
    private static Lazy`1<KeyCode> ourLShift;
    private static Lazy`1<KeyCode> ourRShift;
    private static Lazy`1<KeyCode> ourLCtrl;
    private static Lazy`1<KeyCode> ourRCtrl;
    public static KeyboardModifiers Modifiers { get; }
    private static KeyboardStateProvider();
    public static KeyboardModifiers get_Modifiers();
    private static KeyboardModifiers GetWindowsModifiers();
    private static KeyboardModifiers GetMacModifiers();
    private static KeyboardModifiers GetLinuxModifiers();
}
[ExtensionAttribute]
public static class JetBrains.Application.Interop.Input.MouseStateProvider : object {
    public static JetPhysicalPoint Position { get; }
    [ExtensionAttribute]
public static bool IsLeftButtonClick(MouseButtons mouseButtons);
    public static JetPhysicalPoint get_Position();
}
public static class JetBrains.Application.Interop.MessageBox.NativeMessageBox : object {
    private static Dictionary`2<MessageBoxFlags, ValueTuple`3<ValueTuple`2<DialogBoxCommandId, string>, ValueTuple`2<DialogBoxCommandId, string>, ValueTuple`2<DialogBoxCommandId, string>>> ourConfigMap;
    private static NativeMessageBox();
    public static DialogBoxCommandId Show(string text, string caption, MessageBoxFlags flags);
    private static DialogBoxCommandId ShowLinuxMessageBox(string text, string caption, MessageBoxFlags flags);
    private static DialogBoxCommandId ShowMacOsMessageBox(string text, string caption, MessageBoxFlags flags);
    private static Nullable`1<int> ShowX11MessageBox(string title, string message, String[] buttons);
    [CompilerGeneratedAttribute]
internal static XGC <ShowX11MessageBox>g__CreateGc|4_0(UInt32 argb, <>c__DisplayClass4_0& );
}
[GuidAttribute("E3403EA3-34BB-4689-9365-F875E55BC2BA")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IApplicationActiveStateChangeSink {
    public abstract virtual void OnApplicationActiveStateChanged(int isActive);
}
[GuidAttribute("CCF6531D-A313-484D-B678-B7058974AD43")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IForegroundIdleSink {
    public abstract virtual void OnForegroundIdle();
}
[GuidAttribute("6C225FA3-5BD4-4EA9-A418-794A726CB32D")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IInputMessageSink {
    public abstract virtual void OnInputMessage(Void* hwnd, UInt32 message, Void* wParam, Void* lParam, POINT* ppt);
}
[GuidAttribute("D8DA2488-FDDC-43CB-9C2F-12EEDB08397D")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IKeyboardMessageSink {
    public abstract virtual void OnKeyboardMessage(UInt32 virtualKeyCode, UInt32 keystrokeMessageFlags);
}
[GuidAttribute("1C7785EB-3E51-43FF-B7B7-C4377915D20D")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IMouseMessageSink {
    public abstract virtual void OnMouseMessage(UInt32 message, Void* hwnd, POINT pt, UInt32 wHitTestCode, UIntPtr dwExtraInfo);
}
[GuidAttribute("E56A4995-41BE-4977-9B9D-57E3D0141AE6")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.INativeHookHandler {
    public abstract virtual Void* AdviseWindowMessage(IWindowMessageSink sink, Void* hwnd, UInt32 dwMessage, int isIncludingParentWindows, int isDeferredProcessingAllowed);
    public abstract virtual void UnadviseWindowMessage(Void* pCookie);
    public abstract virtual Void* AdviseWindowClassMessage(IWindowMessageSink sink, string className, UInt32 dwMessage, int isDeferredProcessingAllowed);
    public abstract virtual void UnadviseWindowClassMessage(Void* pCookie);
    public abstract virtual Void* AdviseApplicationActiveStateChange(IApplicationActiveStateChangeSink sink);
    public abstract virtual void UnadviseApplicationActiveStateChange(Void* pCookie);
    public abstract virtual Void* AdviseWindowScreenCoordinatesChange(IWindowScreenCoordinatesChangeSink sink, Void* hwnd);
    public abstract virtual void UnadviseWindowScreenCoordinatesChange(Void* pCookie);
    public abstract virtual Void* AdviseWindowRootParentChange(IWindowRootParentChangeSink sink, Void* hwnd);
    public abstract virtual void UnadviseWindowRootParentChange(Void* pCookie);
    public abstract virtual Void* AdviseInputMessage(IInputMessageSink sink);
    public abstract virtual void UnadviseInputMessage(Void* pCookie);
    public abstract virtual Void* StartMouseWheelRedirectingToHoveredWindow();
    public abstract virtual void StopMouseWheelRedirectingToHoveredWindow(Void* pCookie);
    public abstract virtual Void* AdviseForegroundIdle(IForegroundIdleSink sink);
    public abstract virtual void UnadviseForegroundIdle(Void* pCookie);
    public abstract virtual Void* AdviseMouseMessage(IMouseMessageSink sink, int isIncludingNoRemove);
    public abstract virtual void UnadviseMouseMessage(Void* pCookie);
    public abstract virtual Void* AdviseKeyboardMessage(IKeyboardMessageSink sink, int isIncludingNoRemove);
    public abstract virtual void UnadviseKeyboardMessage(Void* pCookie);
}
[GuidAttribute("24FDE11D-94A4-4940-9A13-86826A21FBD7")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IWindowMessageSink {
    public abstract virtual void OnWindowMessage(Void* hwnd, UInt32 message, Void* wParam, Void* lParam, int isDeferred);
}
[GuidAttribute("B374D21C-158B-4542-B917-19512AE65244")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IWindowRootParentChangeSink {
    public abstract virtual void OnWindowRootParentChanged(Void* hwnd, Void* hwndRootParent);
}
[GuidAttribute("C05526B9-5F0C-4C54-8286-53388DB2961C")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.ComImport.IWindowScreenCoordinatesChangeSink {
    public abstract virtual void OnWindowScreenCoordinatesChanged(Void* hwnd, RECT* pRect);
}
[GuidAttribute("2B2E9B1F-C279-4EE0-A0D2-A466504997FD")]
public class JetBrains.Application.Interop.NativeHook.ComImport.NativeHookHandler : object {
}
public class JetBrains.Application.Interop.NativeHook.DummyWindowsHookManager : WindowsHookManager {
    protected IWindowsHookManager Instance { get; }
    public IHookedWindowSelector Windows { get; }
    public DummyWindowsHookManager(Lifetime lifetime, JetDispatcher dispatcher);
    protected virtual IWindowsHookManager get_Instance();
    public virtual IHookedWindowSelector get_Windows();
    public virtual void AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    public virtual IProperty`1<bool> AdviseApplicationActiveStateChange(Lifetime lifetime);
    public virtual IProperty`1<JetPhysicalRect> AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    public virtual IProperty`1<IntPtr> AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    public virtual void StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    public virtual void AdviseForegroundIdle(Lifetime lifetime, Action action);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Interop.NativeHook.HookedMessageSelector : object {
    private HookedWindow myWindow;
    public IHookedWindowAndMessage All { get; }
    public IHookedWindowAndMessage Item { get; }
    [NotNullAttribute]
public HookedWindow Window { get; }
    internal HookedMessageSelector(HookedWindow window);
    public sealed virtual IHookedWindowAndMessage get_All();
    public sealed virtual IHookedWindowAndMessage get_Item(WindowsMessages message);
    public HookedWindow get_Window();
}
public class JetBrains.Application.Interop.NativeHook.HookedWindow : object {
    private IWindowsHookManager myOwner;
    private IntPtr myWindowHandle;
    public IHookedMessageSelector Messages { get; }
    public IWindowsHookManager Owner { get; }
    public IntPtr Handle { get; }
    internal HookedWindow(IWindowsHookManager owner, IntPtr windowHandle);
    public sealed virtual IHookedMessageSelector get_Messages();
    public IWindowsHookManager get_Owner();
    public sealed virtual IntPtr get_Handle();
}
public class JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage : object {
    private WindowsMessages myMessage;
    private HookedWindow myWindow;
    [NotNullAttribute]
public IWindowsHookManager Owner { get; }
    public WindowsMessages Code { get; }
    public IHookedWindow Window { get; }
    internal HookedWindowAndMessage(HookedWindow window, WindowsMessages message);
    public IWindowsHookManager get_Owner();
    public sealed virtual WindowsMessages get_Code();
    public sealed virtual IHookedWindow get_Window();
    public sealed virtual void Advise(Lifetime lifetime, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Interop.NativeHook.HookedWindowSelector : object {
    private IWindowsHookManager myOwner;
    public IHookedWindow All { get; }
    public IHookedWindow Item { get; }
    public IHookedWindow Item { get; }
    public IHookedWindow Item { get; }
    public HookedWindowSelector(IWindowsHookManager owner);
    public sealed virtual IHookedWindow get_All();
    public sealed virtual IHookedWindow get_Item(IntPtr windowhandle);
    public sealed virtual IHookedWindow get_Item(IWin32Window window);
    public sealed virtual IHookedWindow get_Item(Void* windowhandle);
}
public class JetBrains.Application.Interop.NativeHook.HookEventArgs : ValueType {
    public int HookCode;
    public IntPtr lParam;
    public IntPtr wParam;
    public HookEventArgs(int hookCode, IntPtr wParam, IntPtr lParam);
    public CWPRETSTRUCT* GetCwpRetStruct();
    public CWPSTRUCT* GetCwpStruct();
    public MOUSEHOOKSTRUCT* GetMouseHookStruct();
    public MSG* GetMsgStruct();
    public MSLLHOOKSTRUCT* GetMsLlHookStruct();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.Interop.NativeHook.IHookedMessageSelector {
    [NotNullAttribute]
public IHookedWindowAndMessage All { get; }
    [NotNullAttribute]
public IHookedWindowAndMessage Item { get; }
    public abstract virtual IHookedWindowAndMessage get_All();
    public abstract virtual IHookedWindowAndMessage get_Item(WindowsMessages message);
}
public interface JetBrains.Application.Interop.NativeHook.IHookedWindow {
    [NotNullAttribute]
public IHookedMessageSelector Messages { get; }
    public abstract virtual IHookedMessageSelector get_Messages();
}
public interface JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage {
    public WindowsMessages Code { get; }
    [NotNullAttribute]
public IHookedWindow Window { get; }
    public abstract virtual WindowsMessages get_Code();
    public abstract virtual IHookedWindow get_Window();
    public abstract virtual void Advise(Lifetime lifetime, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.Interop.NativeHook.IHookedWindowSelector {
    [NotNullAttribute]
public IHookedWindow All { get; }
    [NotNullAttribute]
public IHookedWindow Item { get; }
    [NotNullAttribute]
public IHookedWindow Item { get; }
    [NotNullAttribute]
public IHookedWindow Item { get; }
    public abstract virtual IHookedWindow get_All();
    public abstract virtual IHookedWindow get_Item(IWin32Window window);
    public abstract virtual IHookedWindow get_Item(IntPtr windowhandle);
    public abstract virtual IHookedWindow get_Item(Void* windowhandle);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Interop.NativeHook.IWindowsHookManager {
    public IHookedWindowSelector Windows { get; }
    public abstract virtual IHookedWindowSelector get_Windows();
    public abstract virtual void AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public abstract virtual void AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public abstract virtual void AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    [NotNullAttribute]
public abstract virtual IProperty`1<bool> AdviseApplicationActiveStateChange(Lifetime lifetime);
    [NotNullAttribute]
public abstract virtual IProperty`1<JetPhysicalRect> AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    [NotNullAttribute]
public abstract virtual IProperty`1<IntPtr> AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    public abstract virtual void StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    public abstract virtual void AdviseForegroundIdle(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager : object {
    private WindowsHook myCwpRetHook;
    private WindowsHook myGetMsgHook;
    [CompilerGeneratedAttribute]
private JetDispatcher <Dispatcher>k__BackingField;
    protected Dictionary`2<IntPtr, Dictionary`2<WindowsMessages, WindowsMessageHookEntry[]>> myHookEntries;
    protected Dictionary`2<string, Dictionary`2<WindowsMessages, Action`1[]>> myClassHandlers;
    private static IEqualityComparer`1<WindowsMessageHookEntry> ourCompareHookEntriesByHandler;
    private WindowsHook myForegroundIdleHook;
    private HashSet`1<Action> myForegroundIdleActions;
    public JetDispatcher Dispatcher { get; }
    private IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.Windows { get; }
    public ManagedWindowsHookManager(Lifetime lifetimeOuter);
    private static ManagedWindowsHookManager();
    [CompilerGeneratedAttribute]
public JetDispatcher get_Dispatcher();
    public void Dump(XmlWriter writer);
    public string DumpToXaml();
    [ObsoleteAttribute("Never used. To be removed in the next release.")]
public void RemoveAll(object owner);
    private void AdviseWindowMessageInternal(Lifetime lifetime, Void* window, WindowsMessages message, Action`1<WindowsMessageEventArgs> action);
    protected void AddRemoveMessageHandler(Void* window, WindowsMessages message, Action`1<WindowsMessageEventArgs> action, Delegate handlerOriginal, bool includeparents, AddRemove addremove);
    protected void AddRemoveHookEntry(WindowsMessageHookEntry entry, AddRemove addremove);
    protected void AddRemoveClassMessageHandler(string className, WindowsMessages message, Action`1<WindowsMessageEventArgs> action, AddRemove addremove);
    protected IEnumerable`1<WindowsMessageHookEntry> EnumAllEntries();
    protected void HookUnhook();
    protected void HookUnhookForegroundIdle();
    protected bool OnHookedMessage(object sender, WindowsMessageEventArgs args);
    protected void RemoveAll();
    private sealed virtual override IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.get_Windows();
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowMessage(Lifetime parentLifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowClassMessage(Lifetime parentLifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseInputMessage(Lifetime parentLifetime, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseApplicationActiveStateChange(Lifetime parentLifetime);
    private sealed virtual override IProperty`1<JetPhysicalRect> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowScreenCoordinatesChange(Lifetime parentLifetime, IntPtr window);
    private sealed virtual override IProperty`1<IntPtr> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowRootParentChange(Lifetime parentLifetime, IntPtr window);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.StartMouseWheelRedirectingToHoveredWindow(Lifetime parentLifetime);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseForegroundIdle(Lifetime parentLifetime, Action action);
    public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__10_0(LifetimeDefinition definition);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1();
    [CompilerGeneratedAttribute]
private bool <HookUnhook>b__19_0(object sender, HookEventArgs args);
    [CompilerGeneratedAttribute]
private bool <HookUnhook>b__19_1(object sender, HookEventArgs args);
    [CompilerGeneratedAttribute]
private bool <HookUnhookForegroundIdle>b__20_0(object sender, HookEventArgs args);
}
public class JetBrains.Application.Interop.NativeHook.NativeWindowsHookManager : object {
    [NotNullAttribute]
private INativeHookHandler myNativeHooks;
    [CompilerGeneratedAttribute]
private JetDispatcher <Dispatcher>k__BackingField;
    public JetDispatcher Dispatcher { get; }
    private IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.Windows { get; }
    public NativeWindowsHookManager(Lifetime lifetimeOuter, JetDispatcher dispatcher, INativeHookHandler nativehooks);
    [CompilerGeneratedAttribute]
public JetDispatcher get_Dispatcher();
    private sealed virtual override IHookedWindowSelector JetBrains.Application.Interop.NativeHook.IWindowsHookManager.get_Windows();
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseApplicationActiveStateChange(Lifetime lifetime);
    private sealed virtual override IProperty`1<JetPhysicalRect> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    private sealed virtual override IProperty`1<IntPtr> JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseForegroundIdle(Lifetime lifetime, Action action);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__4_0(LifetimeDefinition definition);
}
[ObsoleteAttribute("Use WindowsHookManager.")]
public class JetBrains.Application.Interop.NativeHook.WindowsHook : object {
    private static Statistics Statistics;
    private HookEventHandler myHookEventHandler;
    private Void* myHookHandle;
    private HookType myHookType;
    private HOOKPROC myKeepAliveDelegateThunk;
    public WindowsHook(HookType code, HookEventHandler handler);
    protected WindowsHook(HookType code, HookEventHandler handler, HOOKPROC callback);
    private static WindowsHook();
    public static bool IsGlobalHook(HookType type);
    public void Release();
    protected IntPtr CoreHookProc(int code, IntPtr wParam, IntPtr lParam);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Interop.NativeHook.WindowsHookManager : object {
    private static string NativeHooksDllName;
    private IWindowsHookManager myInstance;
    private Lifetime myLifetime;
    private JetDispatcher myDispatcher;
    protected IWindowsHookManager Instance { get; }
    public IHookedWindowSelector Windows { get; }
    public WindowsHookManager(Lifetime lifetime, IThreading threading);
    public WindowsHookManager(Lifetime lifetime, JetDispatcher dispatcher);
    protected virtual IWindowsHookManager get_Instance();
    public virtual IHookedWindowSelector get_Windows();
    public virtual void AdviseWindowMessage(Lifetime lifetime, IntPtr window, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseWindowClassMessage(Lifetime lifetime, string className, WindowsMessages message, bool isDeferredProcessingAllowed, Action`1<WindowsMessageEventArgs> action);
    public virtual void AdviseInputMessage(Lifetime lifetime, Action`1<WindowsMessageEventArgs> action);
    public virtual IProperty`1<bool> AdviseApplicationActiveStateChange(Lifetime lifetime);
    public virtual IProperty`1<JetPhysicalRect> AdviseWindowScreenCoordinatesChange(Lifetime lifetime, IntPtr window);
    public virtual IProperty`1<IntPtr> AdviseWindowRootParentChange(Lifetime lifetime, IntPtr window);
    public virtual void StartMouseWheelRedirectingToHoveredWindow(Lifetime lifetime);
    public virtual void AdviseForegroundIdle(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs : EventArgs {
    [NotNullAttribute]
public IWindowsHookManager WindowsHook;
    public Void* HWnd;
    public WindowsMessages Message;
    public IntPtr WParam;
    public IntPtr LParam;
    public IntPtr LResult;
    public POINT Location;
    public IntPtr WindowHandle { get; }
    public WindowsMessageEventArgs(IWindowsHookManager hookman, CWPRETSTRUCT* pMessage);
    public WindowsMessageEventArgs(IWindowsHookManager hookman, CWPSTRUCT* pMessage);
    public WindowsMessageEventArgs(IWindowsHookManager hookman, MSG* pMessage);
    public WindowsMessageEventArgs(IWindowsHookManager hookman, Void* hwnd, UInt32 message, Void* wParam, Void* lParam, POINT* ppt);
    public IntPtr get_WindowHandle();
}
public interface JetBrains.Application.ISettingsApplicationTrait {
    public Nullable`1<bool> IsAdvancedSettingsLayersEditingSupported { get; }
    public abstract virtual Nullable`1<bool> get_IsAdvancedSettingsLayersEditingSupported();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<Tuple`2<FileSystemPath, Version>> GetLegacySettingsFiles();
}
public interface JetBrains.Application.IShellComponentContainerExtender {
}
[NullableContextAttribute("2")]
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.IStandaloneApplicationTrait {
    public RichText CommandLineHelpText { get; }
    public string MainMenuActionID { get; }
    public string MainToolbarActionID { get; }
    public SingleInstanceStandaloneProductBehaviorFlags SingleInstanceBehavior { get; }
    public abstract virtual RichText get_CommandLineHelpText();
    public abstract virtual string get_MainMenuActionID();
    public abstract virtual string get_MainToolbarActionID();
    public abstract virtual SingleInstanceStandaloneProductBehaviorFlags get_SingleInstanceBehavior();
}
public interface JetBrains.Application.ISubProductInfo {
    public ApplicationPackageArtifact OwnerPackage { get; }
    public abstract virtual ApplicationPackageArtifact get_OwnerPackage();
}
public interface JetBrains.Application.ISubProductPackage {
    public IApplicationPackage Package { get; }
    public IProductInfo SubProductInfo { get; }
    public abstract virtual IApplicationPackage get_Package();
    public abstract virtual IProductInfo get_SubProductInfo();
}
public class JetBrains.Application.JetBrainsShared.ConvertingDataAccess`1 : object {
    private IDataAccess`1<string> myAccess;
    private Func`2<string, T> myFromStringFunc;
    private Func`2<T, string> myToStringFunc;
    public string Description { get; }
    public string Location { get; }
    public ConvertingDataAccess`1(IDataAccess`1<string> access, Func`2<string, T> fromStringFunc, Func`2<T, string> toStringFunc);
    public sealed virtual T Load();
    public sealed virtual void Save(T newValue);
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.JetBrainsShared.DataAccess : object {
    private ConcurrentDictionary`2<Pair`2<BackSlashSeparatedRelativePath, string>, IDataAccess`1<string>> myRegistryAccess;
    private ConcurrentDictionary`2<FileSystemPath, IDataAccess`1<string>> myFileAccess;
    private ConcurrentDictionary`2<string, IDataAccess`1<string>> myWindowsCredentialAccess;
    private ConcurrentDictionary`2<Pair`2<FileSystemPath, string>, IDataAccess`1<IList`1<Pair`2<string, string>>>> myFolderAccess;
    public IDataAccess`1<string> GetOrCreateFileAccess(FileSystemPath filePath, string description);
    public IDataAccess`1<string> GetOrCreateRegistryAccessOrEmpty(string customLocationKey, string key, string description);
    public IDataAccess`1<string> GetOrCreateRegistryOrIsolatedStorageFileAccess(string customLocationKey, string key, string description);
    public IDataAccess`1<string> GetOrCreateRegistryOrFileAccess(IAnyProductSettingsLocation settingsLocation, ApplicationHostDetails hostDetails, string keyName, string description);
    public IDataAccess`1<string> GetOrCreateWindowsCredentialAccessOrEmpty(string name, string description);
    public IDataAccess`1<string> GetOrCreateProtectedDataFileAccessOrEmpty(IAnyProductSettingsLocation settingsLocation, ApplicationHostDetails hostDetails, string keyName, string description);
    public ICollection`1<IDataAccess> GetKnownAccesses();
    public IDataAccess`1<IList`1<Pair`2<string, string>>> GetOrCreateFolderDataAccess(FileSystemPath folderPath, string fileMask, string description);
}
public class JetBrains.Application.JetBrainsShared.DataAccessEnum : EnumPattern {
    public static DataAccessEnum RegistryOrFileAccess;
    public static DataAccessEnum WindowsCredentialAccessOrEmpty;
    public static DataAccessEnum ProtectedDataFileAccessOrEmpty;
    private DataAccessEnum(string name);
    private static DataAccessEnum();
}
[ExtensionAttribute]
public static class JetBrains.Application.JetBrainsShared.DataPersisterEx : object {
    [ExtensionAttribute]
public static IDataAccess`1<T> ToConverting(IDataAccess`1<string> access, Func`2<string, T> fromString, Func`2<T, string> toString);
    [ExtensionAttribute]
public static IDataAccess`1<T> WithJsonLikeSerializer(IDataAccess`1<string> access, JsonLikeSerializer serializer, T defaultValue);
    private static T FromString(string s, JsonLikeSerializer serializer, T defaultValue);
    public static MultipleDataAccess`1<T> CreateMultipleSharedStorageAccessWithPreference(IDataAccess`1[] accesses);
    public static MultipleDataAccess`1<T> CreateMultipleSharedStorageAccessWithMaxValue(IDataAccess`1[] accesses);
    public static T SelectMaxValue(IDictionary`2<IDataAccess`1<T>, T> values);
    public static T PreferValue(IDictionary`2<IDataAccess`1<T>, T> values, IList`1<IDataAccess`1<T>> preferrableAccesses);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "DumpDataAccessActionText")]
public class JetBrains.Application.JetBrainsShared.DumpDataAccessAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.JetBrainsShared.EmptyDataAccess`1 : object {
    public static EmptyDataAccess`1<T> Instance;
    public string Description { get; }
    public string Location { get; }
    private static EmptyDataAccess`1();
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    public sealed virtual T Load();
    public sealed virtual void Save(T newValue);
}
public class JetBrains.Application.JetBrainsShared.FileDataAccess : object {
    private FileSystemPath myFilePath;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public string Location { get; }
    public FileDataAccess(FileSystemPath filePath, string description);
    public sealed virtual string Load();
    protected virtual string Load(FileSystemPath path);
    public sealed virtual void Save(string newValue);
    protected virtual void Save(FileSystemPath path, string newValue);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    [CompilerGeneratedAttribute]
private string <Load>b__2_0();
    [CompilerGeneratedAttribute]
private bool <TryClear>b__12_0();
}
public class JetBrains.Application.JetBrainsShared.FolderDataAccess : object {
    private FileSystemPath myFolderPath;
    private string myFileMask;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public string Location { get; }
    public FolderDataAccess(FileSystemPath folderPath, string fileMask, string description);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    public sealed virtual IList`1<Pair`2<string, string>> Load();
    public sealed virtual void Save(IList`1<Pair`2<string, string>> newValue);
    [CompilerGeneratedAttribute]
private IList`1<FileSystemPath> <Load>b__10_0();
}
public interface JetBrains.Application.JetBrainsShared.IDataAccess {
    [NotNullAttribute]
public string Description { get; }
    [NotNullAttribute]
public string Location { get; }
    public abstract virtual string get_Description();
    public abstract virtual string get_Location();
    [NotNullAttribute]
public abstract virtual string GetRemoveScript();
    public abstract virtual bool TryClear();
}
public interface JetBrains.Application.JetBrainsShared.IDataAccess`1 {
    [CanBeNullAttribute]
public abstract virtual T Load();
    public abstract virtual void Save(T newValue);
}
public class JetBrains.Application.JetBrainsShared.IsolatedStorageFileDataAccess : object {
    private object mySync;
    private string mySubKey;
    private string myKeyName;
    private string myPathInStorage;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public string Location { get; }
    public IsolatedStorageFileDataAccess(string customLocationKey, string keyName, string description);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    private FileSystemPath TryGetPhysicalPath();
    public sealed virtual bool TryClear();
    public sealed virtual string Load();
    public sealed virtual void Save(string newValue);
    [CompilerGeneratedAttribute]
private bool <TryClear>b__12_0();
    [CompilerGeneratedAttribute]
private string <Load>b__13_0();
}
public class JetBrains.Application.JetBrainsShared.MultipleDataAccess`1 : object {
    [NotNullAttribute]
private IList`1<IDataAccess`1<T>> myAccesses;
    [NotNullAttribute]
private Func`2<IDictionary`2<IDataAccess`1<T>, T>, T> myValueSelector;
    [CanBeNullAttribute]
private Func`3<IDataAccess`1<T>, bool, SaveBehavior<T>> mySaveSelector;
    [CanBeNullAttribute]
private string myDescription;
    [CompilerGeneratedAttribute]
private bool <SilentOnLoad>k__BackingField;
    public string Description { get; }
    public string Location { get; }
    public bool SilentOnLoad { get; public set; }
    public MultipleDataAccess`1(IEnumerable`1<IDataAccess`1<T>> accesses, Func`2<IDictionary`2<IDataAccess`1<T>, T>, T> valueSelector, Func`3<IDataAccess`1<T>, bool, SaveBehavior<T>> saveSelector, string description);
    public MultipleDataAccess`1(Func`2<IDictionary`2<IDataAccess`1<T>, T>, T> valueSelector, Func`3<IDataAccess`1<T>, bool, SaveBehavior<T>> saveSelector, string description, IDataAccess`1[] accesses);
    public MultipleDataAccess`1<T> AddAccess(IDataAccess`1<T> access);
    public sealed virtual T Load();
    public sealed virtual void Save(T newValue);
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    [CompilerGeneratedAttribute]
public bool get_SilentOnLoad();
    [CompilerGeneratedAttribute]
public void set_SilentOnLoad(bool value);
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
}
public class JetBrains.Application.JetBrainsShared.ProtectedDataFileAccess : FileDataAccess {
    [CompilerGeneratedAttribute]
private Byte[] <entropy>P;
    public ProtectedDataFileAccess(FileSystemPath filePath, string description, Byte[] entropy);
    protected virtual string Load(FileSystemPath path);
    protected virtual void Save(FileSystemPath path, string newValue);
}
public class JetBrains.Application.JetBrainsShared.RegistryDataAccess : object {
    private BackSlashSeparatedRelativePath mySubKey;
    private string myDataName;
    private RegistryHiveAccess myRegistryHiveAccess;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public string Location { get; }
    public RegistryDataAccess(BackSlashSeparatedRelativePath subKey, string dataName, string description);
    public sealed virtual string Load();
    public sealed virtual void Save(string newValue);
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual string get_Location();
}
[ExtensionAttribute]
public static class JetBrains.Application.JetBrainsShared.SharedStorageAccess : object {
    private static BackSlashSeparatedRelativePath DotNetRegistryRootKeyId;
    private static BackSlashSeparatedRelativePath IdeaRegistryRootKeyId;
    private static SharedStorageAccess();
    private static Pair`2<BackSlashSeparatedRelativePath, string> FixKey(BackSlashSeparatedRelativePath rootPath, string key);
    [ExtensionAttribute]
public static IDataAccess`1<string> GetOrCreateCompanySpecificRoamingFolderFilePersister(DataAccess dataAccess, RelativePath relativePath, string description);
    [ExtensionAttribute]
public static IDataAccess`1<string> CreateDotNetRegistryAccess(DataAccess dataAccess, string key, string description);
    [ExtensionAttribute]
public static IDataAccess`1<string> CreateIdeaRegistryAccess(DataAccess dataAccess, string key, string description);
    public static IDataAccess`1<T> GetOrCreateAccess(string description, IEnumerable`1<KeyValuePair`2<IDataAccess`1<T>, Func`2<bool, SaveBehavior<T>>>> saveBehavior);
    [ExtensionAttribute]
public static IDataAccess`1<string> GetOrCreateAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation, ApplicationHostDetails hostDetails, string keyName, string description, OrderedDictionary`2<DataAccessEnum, Func`2<bool, SaveBehavior<string>>> saveBehavior);
}
public class JetBrains.Application.JetBrainsShared.WindowsCredentialDataAccess : object {
    private string myApplicationName;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; }
    public string Location { get; }
    public WindowsCredentialDataAccess(string name, string description);
    public static string CreateApplicationName(string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    public sealed virtual string Load();
    public sealed virtual void Save(string newValue);
}
public interface JetBrains.Application.License.ILicenseSupport {
    [NotNullAttribute]
public string ProductGuid { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    [CanBeNullAttribute]
public Uri BuyUrl { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public string ProductFamily { get; }
    public int Version { get; }
    public bool SendBuildDateAsVersionToOldServers { get; }
    public string JBProductCode { get; }
    public IEnumerable`1<ProductEdition> Editions { get; }
    [NotNullAttribute]
public abstract virtual LicenseData CreateLicenseData(string licenseKey, string userName, string companyName);
    public abstract virtual string get_ProductGuid();
    public abstract virtual int get_FreeTrialPeriod();
    public abstract virtual int get_FeedbackRequestPeriod();
    public abstract virtual int get_LeftDaysNotification();
    [CanBeNullAttribute]
public abstract virtual string GetLicenseAgreement(LicenseType licenseType);
    public abstract virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    public abstract virtual Uri get_BuyUrl();
    public abstract virtual bool get_DoCheckLicenseReuseOverNetwork();
    [CanBeNullAttribute]
public abstract virtual LicenseData LoadLicense(ISettingsTable settings, FileSystemPath installDir);
    public abstract virtual void SaveLicense(LicenseData license, ISettingsTable settings);
    public abstract virtual string get_ProductFamily();
    public abstract virtual int get_Version();
    public abstract virtual string GetLicenseServerEdition(ProductEdition edition);
    public abstract virtual bool get_SendBuildDateAsVersionToOldServers();
    public abstract virtual string get_JBProductCode();
    public abstract virtual ProductEdition DecodeProductEdition(string productCode, IApplicationHost descriptor);
    public abstract virtual IEnumerable`1<ProductEdition> get_Editions();
    public abstract virtual ProductEdition DecodeProductEdition(int editionCode, IApplicationHost descriptor);
}
public class JetBrains.Application.License.LicenseChecker : object {
    private BigInteger N;
    private bool myHasLicense;
    private string myUsername;
    private string myCompany;
    private BigInteger myCode;
    private static Func`2[] StringToByteConvertors;
    public bool HasLicense { get; }
    public bool IsChecksumOK { get; }
    public int Version { get; }
    public int Type { get; }
    public LicenseType LicenseType { get; }
    public DateTime GenerationDate { get; }
    public DateTime ExpirationDate { get; }
    public DateTime SubscriptionEndDate { get; }
    public int ProductVersion { get; }
    public int CustomerId { get; }
    public int Edition { get; }
    public LicenseChecker(BigInteger n, string username, string company, string license);
    public LicenseChecker(string publickey, string username, string company, string license);
    private static LicenseChecker();
    public bool get_HasLicense();
    public bool get_IsChecksumOK();
    public int get_Version();
    public int get_Type();
    public LicenseType get_LicenseType();
    public DateTime get_GenerationDate();
    public DateTime get_ExpirationDate();
    public DateTime get_SubscriptionEndDate();
    private DateTime GetDateTime(int offset);
    public int get_ProductVersion();
    public int get_CustomerId();
    public int get_Edition();
    private int UserHash();
    public static int CalculateUserHash(string userName, string companyName);
}
public class JetBrains.Application.License.LicenseCheckFailureException : ApplicationException {
    public LicenseCheckFailureException(string message);
}
public class JetBrains.Application.License.LicenseCheckResult : object {
    public string Message;
    public static LicenseCheckResult LICENSE_VALID;
    public static LicenseCheckResult LICENSE_INVALID;
    public static LicenseCheckResult LICENSE_EXPIRED;
    public static LicenseCheckResult UNSUITABLE_LICENSE;
    [StringFormatMethodAttribute("format")]
public LicenseCheckResult(string format, Object[] args);
    private static LicenseCheckResult();
}
public class JetBrains.Application.License.LicenseData : object {
    private string myPublicKey;
    private string myLicenseKey;
    private string myUserName;
    private string myCompanyName;
    private Nullable`1<DateTime> myExpirationDate;
    private Nullable`1<DateTime> myGenerationDate;
    private Nullable`1<DateTime> mySubscriptionEndDate;
    private Nullable`1<LicenseType> myLicenseType;
    private Nullable`1<int> myProductVersion;
    private Nullable`1<int> myCustomerId;
    private Nullable`1<int> myEditionCode;
    private AcceptLicenseDelegate myAcceptLicenseDelegate;
    private LicenseCheckResult myLicenseCheckResult;
    private static string LICENSE;
    private static string USERNAME;
    private static string COMPANY;
    private static string USER_NAME;
    private static string LICENSE_KEY;
    public LicenseType LicenseType { get; }
    public DateTime GenerationDate { get; }
    public DateTime ExpirationDate { get; }
    public DateTime SubscriptionEndDate { get; }
    public int ProductVersion { get; }
    [NotNullAttribute]
public Version ProductVersionAsVersion2 { get; }
    public int CustomerId { get; }
    public int EditionCode { get; public set; }
    public bool IsEndless { get; }
    public bool ContainsSubscription { get; }
    public string LicenseKey { get; public set; }
    public string UserName { get; public set; }
    public string CompanyName { get; public set; }
    public string PublicKey { get; }
    public LicenseData(string publicKey, string licenseKey, string userName, string companyName, AcceptLicenseDelegate acceptLicenseDelegate);
    public LicenseData(string publicKey, string licenseKey, string userName, string companyName);
    public sealed virtual bool Equals(LicenseData licenseData);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public LicenseType get_LicenseType();
    public DateTime get_GenerationDate();
    public DateTime get_ExpirationDate();
    public DateTime get_SubscriptionEndDate();
    public int get_ProductVersion();
    public Version get_ProductVersionAsVersion2();
    public int get_CustomerId();
    public int get_EditionCode();
    public void set_EditionCode(int value);
    public bool get_IsEndless();
    public bool get_ContainsSubscription();
    public string get_LicenseKey();
    public void set_LicenseKey(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_CompanyName();
    public void set_CompanyName(string value);
    [CanBeNullAttribute]
public static LicenseData GetLicenseDataFromUserSettings(string publicKey, AcceptLicenseDelegate acceptor, ISettingsTable settings);
    public static FileSystemPath GetEvaluationLicensePath(FileSystemPath installDir);
    public static LicenseData GetEvaluationLicenseDataFromFile(string publicKey, AcceptLicenseDelegate acceptor, FileSystemPath installDir);
    public void SaveToUserSettings(ISettingsTable settings);
    public string get_PublicKey();
    public LicenseCheckResult Check();
    private LicenseCheckResult CheckValidity();
    public ProductEdition GetEdition(ILicenseSupport licenseSupport, IApplicationHost host);
}
public enum JetBrains.Application.License.LicenseMode : Enum {
    public int value__;
    public static LicenseMode NOT_FOUND;
    public static LicenseMode NOT_CHECKED_YET;
    public static LicenseMode NOT_REQUIRED;
    public static LicenseMode EVALUATION;
    public static LicenseMode USER_LICENSE;
    public static LicenseMode LICENSE_SERVER_FLOATING;
    public static LicenseMode LICENSE_SERVER_PERMANENT;
    public static LicenseMode JB_ACCOUNT;
}
public abstract class JetBrains.Application.License.LicenseSupportBase : object {
    private DateTime myDateTimeForSubscriptionCheck;
    public string ProductGuid { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public Uri BuyUrl { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public string ProductFamily { get; }
    public int Version { get; }
    public bool SendBuildDateAsVersionToOldServers { get; }
    public IEnumerable`1<ProductEdition> Editions { get; }
    public string JBProductCode { get; }
    public virtual string get_ProductGuid();
    public virtual int get_FreeTrialPeriod();
    public virtual int get_FeedbackRequestPeriod();
    public virtual int get_LeftDaysNotification();
    public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    public sealed virtual Uri get_BuyUrl();
    public sealed virtual bool get_DoCheckLicenseReuseOverNetwork();
    public sealed virtual string get_ProductFamily();
    public sealed virtual int get_Version();
    public abstract virtual string GetLicenseAgreement(LicenseType licenseType);
    public abstract virtual LicenseData LoadLicense(ISettingsTable settings, FileSystemPath installDir);
    public abstract virtual void SaveLicense(LicenseData license, ISettingsTable settings);
    public abstract virtual LicenseData CreateLicenseData(string licenseKey, string userName, string companyName);
    public abstract virtual string GetLicenseServerEdition(ProductEdition edition);
    public abstract virtual bool get_SendBuildDateAsVersionToOldServers();
    public abstract virtual IEnumerable`1<ProductEdition> get_Editions();
    public abstract virtual ProductEdition DecodeProductEdition(int editionCode, IApplicationHost descriptor);
    public abstract virtual string get_JBProductCode();
    public abstract virtual ProductEdition DecodeProductEdition(string productCode, IApplicationHost descriptor);
}
public enum JetBrains.Application.License.LicenseType : Enum {
    public int value__;
    public static LicenseType INVALID;
    public static LicenseType COMMERCIAL;
    public static LicenseType NON_COMMERCIAL;
    public static LicenseType SITE;
    public static LicenseType OPENSOURCE;
    public static LicenseType PERSONAL;
    public static LicenseType ACADEMIC;
    public static LicenseType CLASSROOM;
    public static LicenseType FLOATING;
}
[ExtensionAttribute]
public static class JetBrains.Application.License.LicenseTypeEx : object {
    [ExtensionAttribute]
public static string GetLicenseRestrictions(LicenseType licenseType);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "AcceptedAgreementsSettingDescription")]
public class JetBrains.Application.License2.AcceptedAgreementSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "SentAcceptedAgreementsPerDocumentSettingDescription")]
public IIndexedEntry`2<string, string> SentAcceptedAgreements;
}
public class JetBrains.Application.License2.ConsentOptions.AcceptedState : object {
    [CompilerGeneratedAttribute]
private Version <AcceptedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AcceptedTimeMillis>k__BackingField;
    public Version AcceptedVersion { get; public set; }
    public bool IsAccepted { get; public set; }
    public long AcceptedTimeMillis { get; public set; }
    public bool HasAcceptedTime { get; }
    public AcceptedState(Version acceptedVersion, bool isAccepted, DateTime dateTime);
    public AcceptedState(Version acceptedVersion, bool isAccepted, long acceptedTimeMillis);
    [CompilerGeneratedAttribute]
public Version get_AcceptedVersion();
    [CompilerGeneratedAttribute]
public void set_AcceptedVersion(Version value);
    [CompilerGeneratedAttribute]
public bool get_IsAccepted();
    [CompilerGeneratedAttribute]
public void set_IsAccepted(bool value);
    [CompilerGeneratedAttribute]
public long get_AcceptedTimeMillis();
    [CompilerGeneratedAttribute]
public void set_AcceptedTimeMillis(long value);
    public bool get_HasAcceptedTime();
    public virtual string ToString();
    protected bool Equals(AcceptedState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string ToProtocolString(string consentId);
    public static IReadOnlyList`1<Pair`2<string, AcceptedState>> FromProtocolString(string json);
    public static long DateTimeToMilliseconds(DateTime dateTime);
    public static DateTime MillisecondsToDateTime(long millis);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.ConsentOptions.ConsentOptionsEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> GetConsentOptionValues(IConsentOptions consentOptions);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IConsentOption TryGetConsentOption(IConsentOptions consentOptions, string consentOptionId);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.License2.ConsentOptions.ConsentOptionsStub : object {
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<IConsentOption>> <ConsentOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<IConsentOption>> <ConsentOptionsNeedToBeShownToUser>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ConsetOptionsChangeSource> <ConsentOptionValuesChanged>k__BackingField;
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptions { get; }
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptionsNeedToBeShownToUser { get; }
    public ISignal`1<ConsetOptionsChangeSource> ConsentOptionValuesChanged { get; }
    public ConsentOptionsStub(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptions();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptionsNeedToBeShownToUser();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ConsetOptionsChangeSource> get_ConsentOptionValuesChanged();
    public virtual void OnConsentOptionsRecieved(string json);
    public virtual AcceptedState GetConsensetOptionAcceptedState(IConsentOption consentOption);
    public virtual void SetConsentOptions(IEnumerable`1<Pair`2<IConsentOption, bool>> consentOptionValues, ConsetOptionsChangeSource changeSource);
}
public enum JetBrains.Application.License2.ConsentOptions.ConsetOptionsChangeSource : Enum {
    public int value__;
    public static ConsetOptionsChangeSource NONE;
    public static ConsetOptionsChangeSource USER;
    public static ConsetOptionsChangeSource SERVER;
    public static ConsetOptionsChangeSource API;
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.ConsentOptions.ConstentOptionEx : object {
    [ExtensionAttribute]
public static bool IsDeletedOrInvalid(IConsentOption consentOption);
}
public interface JetBrains.Application.License2.ConsentOptions.IConsentOption {
    public string consentId { get; }
    public Version version { get; }
    public string printableName { get; }
    public string text { get; }
    public bool accepted { get; }
    public long acceptanceTime { get; }
    public bool deleted { get; }
    public abstract virtual string get_consentId();
    public abstract virtual Version get_version();
    public abstract virtual string get_printableName();
    public abstract virtual string get_text();
    public abstract virtual bool get_accepted();
    public abstract virtual long get_acceptanceTime();
    public abstract virtual bool get_deleted();
}
public interface JetBrains.Application.License2.ConsentOptions.IConsentOptions {
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptions { get; }
    public IProperty`1<IReadOnlyCollection`1<IConsentOption>> ConsentOptionsNeedToBeShownToUser { get; }
    public ISignal`1<ConsetOptionsChangeSource> ConsentOptionValuesChanged { get; }
    public abstract virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptions();
    public abstract virtual AcceptedState GetConsensetOptionAcceptedState(IConsentOption consentOption);
    public abstract virtual void SetConsentOptions(IEnumerable`1<Pair`2<IConsentOption, bool>> consentOptionValues, ConsetOptionsChangeSource changeSource);
    public abstract virtual IProperty`1<IReadOnlyCollection`1<IConsentOption>> get_ConsentOptionsNeedToBeShownToUser();
    public abstract virtual void OnConsentOptionsRecieved(string json);
    public abstract virtual ISignal`1<ConsetOptionsChangeSource> get_ConsentOptionValuesChanged();
}
public enum JetBrains.Application.License2.DocumentState : Enum {
    public int value__;
    public static DocumentState NONE;
    public static DocumentState UPDATED;
    public static DocumentState ACCEPTED;
    public static DocumentState REJECTED;
}
[EnvironmentComponentAttribute("10")]
internal class JetBrains.Application.License2.DocumentsThatRequireUserConsent : object {
    private ILogger myLogger;
    private Lifetime myLifetime;
    private List`1<IDocumentThatRequiresUserConsentProvider> myProviders;
    private Dictionary`2<IDocumentThatRequiresUserConsent, DocumentState> myDocuments;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> <DocumentsNeedToBeAccepted>k__BackingField;
    public IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> DocumentsNeedToBeAccepted { get; }
    public DocumentsThatRequireUserConsent(Lifetime lifetime, ILogger logger, IEnumerable`1<IDocumentThatRequiresUserConsentProvider> providers);
    private void BindProvider(IDocumentThatRequiresUserConsentProvider provider);
    public void AddProviderIfNotExists(IDocumentThatRequiresUserConsentProvider provider);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> get_DocumentsNeedToBeAccepted();
    public sealed virtual ICollection`1<IDocumentThatRequiresUserConsent> GetAllDocuments();
    public sealed virtual DocumentState GetDocumentState(IDocumentThatRequiresUserConsent document);
    private void RemoveDocument(IDocumentThatRequiresUserConsent document);
    public sealed virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
    private void SetDocumentStateImpl(IDocumentThatRequiresUserConsent document, DocumentState state);
    [CompilerGeneratedAttribute]
private void <BindProvider>b__5_0(PropertyChangedEventArgs`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> args);
}
[ShellComponentAttribute("10")]
internal class JetBrains.Application.License2.DocumentsThatRequireUserConsentShellComponent : object {
    public DocumentsThatRequireUserConsentShellComponent(DocumentsThatRequireUserConsent environmentDocumentsThatRequireUserConsent, IEnumerable`1<IDocumentThatRequiresUserConsentProvider> providers);
}
public class JetBrains.Application.License2.DocumentThatRequiresUserConsent : object {
    [CompilerGeneratedAttribute]
private string <PresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TechnicalName>k__BackingField;
    private static string CssToAdd;
    public string PresentableName { get; }
    public Version Version { get; }
    public string HtmlText { get; }
    public string TechnicalName { get; }
    public DocumentThatRequiresUserConsent(string technicalName, Version version, string htmlText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PresentableName();
    [CompilerGeneratedAttribute]
public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_HtmlText();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TechnicalName();
    [CanBeNullAttribute]
private static string FetchPresentableName(string htmlText);
    public virtual string ToString();
    [CanBeNullAttribute]
public static IDocumentThatRequiresUserConsent TryCreateDocument(string technicalName, string content);
}
public class JetBrains.Application.License2.EnvironmentDependencies : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private OpensUri <OpensUri>k__BackingField;
    [CompilerGeneratedAttribute]
private UserNotifications <UserNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <ProxySettingsReader>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowBranding <WindowBranding>k__BackingField;
    [CompilerGeneratedAttribute]
private SuspendResume <SuspendResume>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<string> <SetClipboardText>k__BackingField;
    public ILogger Logger { get; }
    public ITaskHost TaskHost { get; }
    public OpensUri OpensUri { get; }
    public UserNotifications UserNotifications { get; }
    public WebProxySettingsReader ProxySettingsReader { get; }
    public IThreading Threading { get; }
    public IWindowBranding WindowBranding { get; }
    public SuspendResume SuspendResume { get; }
    public Action`1<string> SetClipboardText { get; public set; }
    public EnvironmentDependencies(ILogger logger, OpensUri opensUri, UserNotifications userNotifications, WebProxySettingsReader proxySettingsReader, IThreading threading, SuspendResume suspendResume, IWindowBranding windowBranding);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    public ITaskHost get_TaskHost();
    [CompilerGeneratedAttribute]
public OpensUri get_OpensUri();
    [CompilerGeneratedAttribute]
public UserNotifications get_UserNotifications();
    [CompilerGeneratedAttribute]
public WebProxySettingsReader get_ProxySettingsReader();
    [CompilerGeneratedAttribute]
public IThreading get_Threading();
    [CompilerGeneratedAttribute]
public IWindowBranding get_WindowBranding();
    [CompilerGeneratedAttribute]
public SuspendResume get_SuspendResume();
    [CompilerGeneratedAttribute]
public Action`1<string> get_SetClipboardText();
    [CompilerGeneratedAttribute]
public void set_SetClipboardText(Action`1<string> value);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.Evaluation.EvaluationEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<ILicensedEntity, ISupportsEvaluation>> WithEapEvaluationSupport(IEnumerable`1<ILicensedEntity> entities);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEvaluationInfo TryGetInfo(IEnumerable`1<IEvaluationInfo> infos, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static bool ShouldTrackUsageOnEvaluationStart(ILicensedEntity entity);
}
internal class JetBrains.Application.License2.Evaluation.EvaluationInfo : object {
    private static DateTime INSTALLER_TIME;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFeedbackRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotificationShown>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUsageDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActuallyUsedDays>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPaused>k__BackingField;
    public string Guid { get; private set; }
    public bool IsStarted { get; }
    public bool IsFeedbackRequested { get; public set; }
    public bool IsNotificationShown { get; public set; }
    public DateTime Started { get; private set; }
    public DateTime LastUsageDate { get; private set; }
    public int ActuallyUsedDays { get; private set; }
    public bool IsPaused { get; private set; }
    private static EvaluationInfo();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(string value);
    public sealed virtual bool get_IsStarted();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFeedbackRequested();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFeedbackRequested(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsNotificationShown();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsNotificationShown(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_Started();
    [CompilerGeneratedAttribute]
private void set_Started(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_LastUsageDate();
    [CompilerGeneratedAttribute]
private void set_LastUsageDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ActuallyUsedDays();
    [CompilerGeneratedAttribute]
private void set_ActuallyUsedDays(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPaused();
    [CompilerGeneratedAttribute]
private void set_IsPaused(bool value);
    public sealed virtual void StartEvaluation();
    public sealed virtual void PauseEvaluation();
    public sealed virtual void ResumeEvaluation();
    public sealed virtual bool SetUsed(bool addCalendarDays);
    public static EvaluationInfo CreateInstallerValue(string guid);
    public static EvaluationInfo CreateExpiredValue(string guid);
    public static EvaluationInfo Merge(IEvaluationInfo older, IEvaluationInfo newer);
    private static DateTime MaxDate(DateTime a, DateTime b);
    private static DateTime MinDate(DateTime a, DateTime b);
}
internal class JetBrains.Application.License2.Evaluation.EvaluationInfoAccess : object {
    private ILogger myLogger;
    private IEnumerable`1<ILicensedEntity> myEntities;
    private DataAccess myDataAccess;
    private IDataAccess`1<IList`1<string>> myLastRunEvalsAccess;
    private Dictionary`2<string, IDataAccess`1<EvaluationInfo>> myEvalInfoAccesses;
    public string Description { get; }
    public string Location { get; }
    public EvaluationInfoAccess(ILogger logger, DataAccess dataAccess, IEnumerable`1<ILicensedEntity> entities);
    private IDataAccess`1<EvaluationInfo> CreateSerializer(ILogger logger, string guid, bool autoStart, bool trackUsageOnStart);
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    [IteratorStateMachineAttribute("JetBrains.Application.License2.Evaluation.EvaluationInfoAccess/<Load>d__13")]
public sealed virtual IEnumerable`1<IEvaluationInfo> Load();
    public sealed virtual void Save(IEnumerable`1<IEvaluationInfo> items);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.Evaluation.EvaluationInfoEx : object {
    [ExtensionAttribute]
public static bool IsRunning(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static int GetLeftDays(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static bool IsExpired(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
    [ExtensionAttribute]
public static bool IsValid(IEvaluationInfo info, ISupportsEvaluation supportsEvaluation);
}
public class JetBrains.Application.License2.Evaluation.EvaluationLicenseViewSubmodel : object {
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    private LicenseCheckResult`1<EvaluationLicenseViewSubmodel> myCheckResult;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ILicensedEntity> <EntitiesToRequestFeedback>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ILicensedEntity> <EntitiesToShowExpirationNotification>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEvaluationInfo> <EvaluationInfos>k__BackingField;
    private Lazy`1<FreeTrialMode> myFreeTrialMode;
    private bool myStoflGuard;
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    private IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.LicenseData { get; }
    public ICollectionEvents`1<ILicensedEntity> EntitiesToRequestFeedback { get; }
    public ICollectionEvents`1<ILicensedEntity> EntitiesToShowExpirationNotification { get; }
    public IEnumerable`1<IEvaluationInfo> EvaluationInfos { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public FreeTrialMode TrialMode { get; }
    public EvaluationLicenseViewSubmodel(Lifetime lifetime, string allModelName, ILicenseData data, ITaskHost taskHost, ILogger logger, EvaluationTracker evaluationTracker, ProductSettingsLocation productSettingsLocation, DataAccess dataAccess);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    private sealed virtual override IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.get_LicenseData();
    [CompilerGeneratedAttribute]
public ICollectionEvents`1<ILicensedEntity> get_EntitiesToRequestFeedback();
    [CompilerGeneratedAttribute]
public ICollectionEvents`1<ILicensedEntity> get_EntitiesToShowExpirationNotification();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IEvaluationInfo> get_EvaluationInfos();
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    public FreeTrialMode get_TrialMode();
    public bool ShouldAutoPause(ILicensedEntity entity);
    private void AutoPauseEvaluationsWithLicenseEntered(ILogger logger, bool forcePause);
    private void CheckLicensesAndFire();
    private void CheckLicensesAndQueueRechecks();
    public void OnFeedbackRequested(IEnumerable`1<ILicensedEntity> entities);
    public void OnExpirationWarningShown(IEnumerable`1<ILicensedEntity> entities);
    public void StartEvaluation(ILicensedEntity entity);
    public void PauseEvaluation(ILicensedEntity entity);
    public void ResumeEvaluation(ILicensedEntity entity);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.License2.Evaluation.EvaluationTracker : object {
    [CompilerGeneratedAttribute]
private ISignal`1<ILicensedEntity> <EntityUsedSignal>k__BackingField;
    public ISignal`1<ILicensedEntity> EntityUsedSignal { get; public set; }
    public EvaluationTracker(Lifetime lifetime, ILogger logger);
    [CompilerGeneratedAttribute]
public ISignal`1<ILicensedEntity> get_EntityUsedSignal();
    [CompilerGeneratedAttribute]
public void set_EntityUsedSignal(ISignal`1<ILicensedEntity> value);
}
public interface JetBrains.Application.License2.Evaluation.IEvaluationInfo {
    public string Guid { get; }
    public bool IsStarted { get; }
    public bool IsFeedbackRequested { get; public set; }
    public bool IsNotificationShown { get; public set; }
    public DateTime Started { get; }
    public DateTime LastUsageDate { get; }
    public int ActuallyUsedDays { get; }
    public bool IsPaused { get; }
    public abstract virtual string get_Guid();
    public abstract virtual bool get_IsStarted();
    public abstract virtual bool get_IsFeedbackRequested();
    public abstract virtual void set_IsFeedbackRequested(bool value);
    public abstract virtual bool get_IsNotificationShown();
    public abstract virtual void set_IsNotificationShown(bool value);
    public abstract virtual DateTime get_Started();
    public abstract virtual DateTime get_LastUsageDate();
    public abstract virtual int get_ActuallyUsedDays();
    public abstract virtual bool get_IsPaused();
    public abstract virtual void StartEvaluation();
    public abstract virtual void PauseEvaluation();
    public abstract virtual void ResumeEvaluation();
    public abstract virtual bool SetUsed(bool addCalendarDays);
}
public enum JetBrains.Application.License2.EvaluationUsageMode : Enum {
    public int value__;
    public static EvaluationUsageMode IMPLICITE_USAGE;
    public static EvaluationUsageMode IMPLICITE_USAGE_EVERY_CALENDAR_DAY;
    public static EvaluationUsageMode EXPLICITE_USAGE;
}
public interface JetBrains.Application.License2.IDescriptionObjectWithUserNotification {
    [CanBeNullAttribute]
public string NotificationTitle { get; }
    [CanBeNullAttribute]
public string NotificationBody { get; }
    [NotNullAttribute]
public IEnumerable`1<Pair`2<string, string>> UrisToOpen { get; }
    [NotNullAttribute]
public IEnumerable`1<Pair`2<string, Action>> AdditionalCommands { get; }
    public abstract virtual string get_NotificationTitle();
    public abstract virtual string get_NotificationBody();
    public abstract virtual IEnumerable`1<Pair`2<string, string>> get_UrisToOpen();
    public abstract virtual IEnumerable`1<Pair`2<string, Action>> get_AdditionalCommands();
}
public interface JetBrains.Application.License2.IDocumentsThatRequireUserConsent {
    public IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> DocumentsNeedToBeAccepted { get; }
    public abstract virtual IProperty`1<ICollection`1<IDocumentThatRequiresUserConsent>> get_DocumentsNeedToBeAccepted();
    public abstract virtual ICollection`1<IDocumentThatRequiresUserConsent> GetAllDocuments();
    public abstract virtual DocumentState GetDocumentState(IDocumentThatRequiresUserConsent document);
    public abstract virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
}
public interface JetBrains.Application.License2.IDocumentThatRequiresUserConsent {
    public string PresentableName { get; }
    public Version Version { get; }
    public string HtmlText { get; }
    public string TechnicalName { get; }
    public abstract virtual string get_PresentableName();
    public abstract virtual Version get_Version();
    public abstract virtual string get_HtmlText();
    public abstract virtual string get_TechnicalName();
}
public interface JetBrains.Application.License2.IDocumentThatRequiresUserConsentProvider {
    public IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> Document { get; public set; }
    public abstract virtual IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> get_Document();
    public abstract virtual void set_Document(IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> value);
    public abstract virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
}
public interface JetBrains.Application.License2.ILicense2CheckComponent {
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISignal`1<LicenseViewModel> LicenseViewModelSaved { get; }
    public abstract virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public abstract virtual void ShowLicenseDialog(string reason);
    public abstract virtual void RegisterShowLicenseDialogHandler(Lifetime lifetime, Func`2<LicenseDialogShowArgs, bool> handler, Func`2<LicenseViewModel, bool> forceShowDialog);
    public abstract virtual ISignal`1<LicenseViewModel> get_LicenseViewModelSaved();
    public abstract virtual void WithLicenseViewModel(Lifetime lifetime, Action`1<LicenseViewModel> action);
    public abstract virtual void WithLicenseViewModel(Lifetime lifetime, Action`2<Lifetime, LicenseViewModel> action);
    public abstract virtual void WithLicenseViewModelSilent(Lifetime lifetime, Action`1<LicenseViewModel> action);
    public abstract virtual IEnumerable`1<string> GetValidLicensePresentation();
    public abstract virtual IEnumerable`1<ILicenseCheckInfo> GetAllowedEntitiesLicenseCheckInfo();
}
public interface JetBrains.Application.License2.ILicenseCheckInfo {
    public ILicensedEntity Entity { get; }
    public ResultWithDescription Result { get; }
    public abstract virtual ILicensedEntity get_Entity();
    public abstract virtual ResultWithDescription get_Result();
}
public interface JetBrains.Application.License2.ILicenseCheckInfo`1 {
    public T Data { get; }
    public abstract virtual T get_Data();
}
public interface JetBrains.Application.License2.ILicenseCheckResult {
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public abstract virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public abstract virtual ISimpleSignal get_ResultChanged();
    [CanBeNullAttribute]
public abstract virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
}
public interface JetBrains.Application.License2.ILicenseData {
    public bool IsFirstRun { get; public set; }
    public IEnumerable`1<ILicensedEntity> LastRunAllEntities { get; }
    public IEnumerable`1<ILicensedEntity> LastRunEnabledEntities { get; }
    public abstract virtual bool get_IsFirstRun();
    public abstract virtual void set_IsFirstRun(bool value);
    public abstract virtual IEnumerable`1<ILicensedEntity> get_LastRunAllEntities();
    public abstract virtual IEnumerable`1<ILicensedEntity> get_LastRunEnabledEntities();
    public abstract virtual IEnumerable`1<T> GetData();
}
public interface JetBrains.Application.License2.ILicenseDataItem {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.License2.ILicensedEntity {
    [NotNullAttribute]
public string TechnicalName { get; }
    [NotNullAttribute]
public string PresentableName { get; }
    public Version EntityVersion { get; }
    public string EntityMarketingVersionString { get; }
    [CanBeNullAttribute]
public ISupportsEvaluation Evaluation { get; }
    [CanBeNullAttribute]
public ISupportsUserLicense UserLicense { get; }
    [NotNullAttribute]
public IEnumerable`1<ISupportsLicenseServer> LicenseServer { get; }
    [NotNullAttribute]
public IEnumerable`1<ISupportsJetBrainsAccount> JetBrainsAccount { get; }
    [CanBeNullAttribute]
public string PurchaseUrl { get; }
    [CanBeNullAttribute]
[LocalizableAttribute("False")]
public string ProductCode { get; }
    public abstract virtual string get_TechnicalName();
    public abstract virtual string get_PresentableName();
    public abstract virtual Version get_EntityVersion();
    public abstract virtual string get_EntityMarketingVersionString();
    public abstract virtual ISupportsEvaluation get_Evaluation();
    public abstract virtual ISupportsUserLicense get_UserLicense();
    public abstract virtual IEnumerable`1<ISupportsLicenseServer> get_LicenseServer();
    public abstract virtual IEnumerable`1<ISupportsJetBrainsAccount> get_JetBrainsAccount();
    public abstract virtual string get_PurchaseUrl();
    public abstract virtual string get_ProductCode();
}
public interface JetBrains.Application.License2.ILicensedEntityWithCustomDescriptions {
    [CanBeNullAttribute]
public abstract virtual IDescriptionObjectWithUserNotification TryGetCustomLicenseNotFoundDescription();
    [CanBeNullAttribute]
public abstract virtual ResultWithDescription TryGetCustomProperlyLicensedDescription();
}
public interface JetBrains.Application.License2.ILicenseViewSubmodel {
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    public IEnumerable`1<ILicenseDataItem> LicenseData { get; }
    public abstract virtual IProperty`1<bool> get_IsOn();
    public abstract virtual IProperty`1<LicenseViewModel> get_AllModel();
    public abstract virtual IEnumerable`1<ILicenseDataItem> get_LicenseData();
}
public interface JetBrains.Application.License2.ISupportsEvaluation {
    public FreeTrialMode TrialMode { get; }
    [NotNullAttribute]
public string ProductGuid { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public EvaluationUsageMode Mode { get; }
    public IList`1<Pair`2<string, string>> OptInSubscriptions { get; }
    public abstract virtual FreeTrialMode get_TrialMode();
    public abstract virtual string get_ProductGuid();
    public abstract virtual int get_FreeTrialPeriod();
    public abstract virtual int get_FeedbackRequestPeriod();
    public abstract virtual int get_LeftDaysNotification();
    public abstract virtual EvaluationUsageMode get_Mode();
    public abstract virtual IList`1<Pair`2<string, string>> get_OptInSubscriptions();
}
public interface JetBrains.Application.License2.ISupportsJetBrainsAccount {
    public string ProductName { get; }
    public string ProductCode { get; }
    public string ProductEdition { get; }
    public int ProductVersion { get; }
    public abstract virtual string get_ProductName();
    public abstract virtual string get_ProductCode();
    public abstract virtual string get_ProductEdition();
    public abstract virtual int get_ProductVersion();
}
public interface JetBrains.Application.License2.ISupportsLicenseServer {
    public string ProductFamily { get; }
    public int LicenseServerVersion { get; }
    public string LicenseServerEdition { get; }
    public bool SendBuildDateAsVersionToOldServers { get; }
    [NotNullAttribute]
public string UrlToShowWhenLicenseServerIsBlacklisted { get; }
    public abstract virtual string get_ProductFamily();
    public abstract virtual int get_LicenseServerVersion();
    public abstract virtual string get_LicenseServerEdition();
    public abstract virtual bool get_SendBuildDateAsVersionToOldServers();
    public abstract virtual string get_UrlToShowWhenLicenseServerIsBlacklisted();
}
public interface JetBrains.Application.License2.ISupportsLicensesWithSubscription {
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public abstract virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
}
public interface JetBrains.Application.License2.ISupportsUserLicense {
    [NotNullAttribute]
public IEnumerable`1<UserLicenseChecker> UserLicenseCheckers { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public abstract virtual IEnumerable`1<UserLicenseChecker> get_UserLicenseCheckers();
    [CanBeNullAttribute]
public abstract virtual string GetLicenseAgreement(LicenseType licenseType);
    public abstract virtual bool get_DoCheckLicenseReuseOverNetwork();
}
public interface JetBrains.Application.License2.JBAccount.IJBAccountInfo {
    public bool IsPrimary { get; }
    public string Account { get; }
    public string UserId { get; }
    public string IdToken { get; }
    [CanBeNullAttribute]
public JBAccountDetails Details { get; }
    public IEnumerable`1<string> UsedAssetIds { get; }
    public IEnumerable`1<string> EncodedAssetDatas { get; }
    public DateTime NextCheckTime { get; }
    public DateTime ValidationDeadline { get; }
    public abstract virtual bool get_IsPrimary();
    public abstract virtual string get_Account();
    public abstract virtual string get_UserId();
    public abstract virtual string get_IdToken();
    public abstract virtual JBAccountDetails get_Details();
    public abstract virtual IEnumerable`1<string> get_UsedAssetIds();
    public abstract virtual IEnumerable`1<string> get_EncodedAssetDatas();
    public abstract virtual DateTime get_NextCheckTime();
    public abstract virtual DateTime get_ValidationDeadline();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.JBAccount.JBAccountEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<ILicensedEntity, ISupportsJetBrainsAccount>> WithJBAccount(IEnumerable`1<ILicensedEntity> entities);
}
internal class JetBrains.Application.License2.JBAccount.JBAccountInfo : object {
    private IEnumerable`1<string> myEncodedAssetDatas;
    private IDictionary`2<string, IAssetData> myDecodedDataCache;
    [CompilerGeneratedAttribute]
private bool <IsPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <UsedAssetIds>k__BackingField;
    [CompilerGeneratedAttribute]
private JBAccountDetails <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextCheckTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ValidationDeadline>k__BackingField;
    public bool IsPrimary { get; internal set; }
    public string Account { get; internal set; }
    public string UserId { get; internal set; }
    public string IdToken { get; internal set; }
    public IEnumerable`1<string> UsedAssetIds { get; internal set; }
    public JBAccountDetails Details { get; internal set; }
    public IEnumerable`1<string> EncodedAssetDatas { get; internal set; }
    public DateTime NextCheckTime { get; internal set; }
    public DateTime ValidationDeadline { get; internal set; }
    public JBAccountInfo(bool isPrimary, string jbAccount, string jbUserId, string idToken, IEnumerable`1<string> usedAssetIds, IEnumerable`1<string> encodedAssetDatas);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPrimary();
    [CompilerGeneratedAttribute]
internal void set_IsPrimary(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Account();
    [CompilerGeneratedAttribute]
internal void set_Account(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserId();
    [CompilerGeneratedAttribute]
internal void set_UserId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IdToken();
    [CompilerGeneratedAttribute]
internal void set_IdToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_UsedAssetIds();
    [CompilerGeneratedAttribute]
internal void set_UsedAssetIds(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual JBAccountDetails get_Details();
    [CompilerGeneratedAttribute]
internal void set_Details(JBAccountDetails value);
    public sealed virtual IEnumerable`1<string> get_EncodedAssetDatas();
    internal void set_EncodedAssetDatas(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_NextCheckTime();
    [CompilerGeneratedAttribute]
internal void set_NextCheckTime(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ValidationDeadline();
    [CompilerGeneratedAttribute]
internal void set_ValidationDeadline(DateTime value);
    [CanBeNullAttribute]
public bool Sqeeze(UserLicenseService userLicenseService);
    [NotNullAttribute]
public IDictionary`2<string, IAssetData> GetAndCacheAssetData(UserLicenseService userLicenseService);
    public void SetAndCacheAssetData(IDictionary`2<string, IAssetData> assetData);
    public void Clear();
}
internal class JetBrains.Application.License2.JBAccount.JBAccountInfoAccess : SingleItemLicenseDataAccess`1<JBAccountInfo> {
    public JBAccountInfoAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.JBAccount.JBAccountInfoEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<IAssetData> GetAssetDatas(IJBAccountInfo info, UserLicenseService userLicenseService);
    [ExtensionAttribute]
public static IEnumerable`1<IAssetData> GetUsedAssetDatas(IJBAccountInfo info, UserLicenseService userLicenseService);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IAssetData Decode(string encodedAssetData, UserLicenseService userLicenseService);
    [ExtensionAttribute]
[PureAttribute]
[NotNullAttribute]
public static IDictionary`2<string, IAssetData> BuildAssetData(IEnumerable`1<string> encodedAssetData, UserLicenseService userLicenseService);
}
public class JetBrains.Application.License2.JBAccount.JBAccountSettings : object {
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    public bool IsOn { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
public void set_IsOn(bool value);
}
public class JetBrains.Application.License2.JBAccount.JBAccountSettingsAccess : SingleItemLicenseDataAccess`1<JBAccountSettings> {
    public JBAccountSettingsAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
public enum JetBrains.Application.License2.JBAccount.JBAccountState : Enum {
    public int value__;
    public static JBAccountState NOT_LOGGED_IN;
    public static JBAccountState LOGGING_IN;
    public static JBAccountState LOGIN_FAILED;
    public static JBAccountState LOGIN_OK;
    public static JBAccountState NETWORK_ERROR;
}
public class JetBrains.Application.License2.JBAccount.JBAcountLicenseViewSubmodel : object {
    private Lifetime myLifetime;
    private EnvironmentDependencies myDependencies;
    private IThreading myThreading;
    private ILogger myLogger;
    private IJetBrainsLicenseServerAccessor myLicenseServerAccessor;
    private UserNotifications myUserNotifications;
    private NewLicenseDataCache myNewLicenseDataCache;
    [CompilerGeneratedAttribute]
private UserLicenseService <UserLicenseService>k__BackingField;
    private LicenseCheckResult`1<string> myCheckResult;
    private JBAccountInfo myInfo;
    private SequentialLifetimes myAccountInaccessibleNotificationLifetimes;
    private WebProxySettingsReader myWebProxySettingsReader;
    private OpensUri myOpensUri;
    private IWindowBranding myWindowBranding;
    private SequentialLifetimes myOAuthenticatorLifetimes;
    private OAuthenticator myOAuthenticator;
    [CompilerGeneratedAttribute]
private IProperty`1<Pair`2<JBAccountState, string>> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<IJBAccountInfo> <AccountInfoUpdated>k__BackingField;
    public UserLicenseService UserLicenseService { get; }
    public IProperty`1<Pair`2<JBAccountState, string>> State { get; }
    public IJBAccountInfo AccountInfo { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    public IEnumerable`1<ILicenseDataItem> LicenseData { get; }
    [CanBeNullAttribute]
public JBAOAuthSettings OAuthSettings { get; }
    public bool IsAllowed { get; }
    public ISignal`1<IJBAccountInfo> AccountInfoUpdated { get; }
    public JBAcountLicenseViewSubmodel(Lifetime lifetime, ILicenseData data, IJetBrainsLicenseServerAccessor licenseServerAccessor, NewLicenseDataCache newLicenseDataCache, UserLicenseService userLicenseService, EnvironmentDependencies dependencies);
    [CompilerGeneratedAttribute]
public UserLicenseService get_UserLicenseService();
    [CompilerGeneratedAttribute]
public IProperty`1<Pair`2<JBAccountState, string>> get_State();
    public IJBAccountInfo get_AccountInfo();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    public sealed virtual IEnumerable`1<ILicenseDataItem> get_LicenseData();
    public JBAOAuthSettings get_OAuthSettings();
    public bool get_IsAllowed();
    [CompilerGeneratedAttribute]
public ISignal`1<IJBAccountInfo> get_AccountInfoUpdated();
    public void LogIn(string jbAccount, string password, string userId);
    private void FetchAssetDataAfterSuccessfulLoginAndUpdateState();
    private NetworkOperationResult`1<string> TryAuthenticate(string jbAccount, string password);
    private NetworkOperationResult`1<Tuple`2<ICollection`1<string>, DateTime>> TryGetEncodedAssetData(string userId);
    private NetworkOperationResult`1<IList`1<AssetDataValidationResult>> TryValidateAssets(string userId, IDictionary`2<string, IAssetData> assetDatas);
    public bool UseAsset(string assetId);
    public bool StopUsingAsset(string assetId);
    private void QuickCheckAndQueue(int retryCount);
    private bool IsMatch(IAssetData data, ISupportsJetBrainsAccount supportsJetBrainsAccount);
    private NetworkOperationResult`1<AssetDataValidationResult> TryValidateAssetData(string userId, IAssetData data, IDictionary`2<Pair`2<string, ISupportsJetBrainsAccount>, ValidateLicenseResponse> duplicateRequestsGuard);
    private static DateTime AdjustNextCheckTime(IEnumerable`1<DateTime> nextCheckTimes);
    public void ValidateAssets(int retryCount);
    private bool ReplaceAssetData(string assetId, string encodedAssetData);
    public void UpdateState();
    public Task CheckForNewAssetsAsync(Lifetime lifetime);
    private void CheckForNewAssets(int retryCount);
    [IteratorStateMachineAttribute("JetBrains.Application.License2.JBAccount.JBAcountLicenseViewSubmodel/<CheckAssetData>d__62")]
public IEnumerable`1<ILicenseCheckInfo> CheckAssetData(IAssetData data, IEnumerable`1<ILicensedEntity> entities);
    [CanBeNullAttribute]
private ILicenseCheckInfo TryCheckAssetData(IAssetData data, ILicensedEntity entity, ISupportsJetBrainsAccount supportsJetBrainsAccount, string warning, string error);
    private Task Enqueue(string actionName, Action action);
    private Task Enqueue(string actionName, Action action, DateTime when);
    public static IJBAccountInfo GetInfo(ILicenseData data, Boolean& usingSharedLoginInfo, ILogger logger);
    private static JetBrainsSharedJBAccrountInfo TryGetValidSharedInfo(ILicenseData data, ILogger logger);
    private static JBAccountInfo WrapInfo(IJBAccountInfo info, JetBrainsSharedJBAccrountInfo sharedInfo, Boolean& isUsingShared, ILogger logger);
    public void LogOut();
    public void TryUse(string loginName, string userId, IEnumerable`1<string> encodedAssetData, IEnumerable`1<string> usedAssetIds);
    public void TryOAuthorize(Lifetime lifetime, string providerName, bool requestCredentials, Action onTokenSet);
    public Task`1<NetworkOperationResult`1<string>> TryObtainTrialLicenseAsync(Lifetime lifetime, string productCodeToRequestFreeTrial, string checkedOptions);
    public void TryCancelOAuthLogin();
    public void TrySetTokenFromBrowser(string text);
    [CompilerGeneratedAttribute]
private void <FetchAssetDataAfterSuccessfulLoginAndUpdateState>b__46_1();
    [CompilerGeneratedAttribute]
private void <CheckForNewAssetsAsync>b__60_0();
}
internal class JetBrains.Application.License2.JBAccount.JetBrainsSharedJBAccrountInfo : object {
    [CompilerGeneratedAttribute]
private string <LoginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdToken>k__BackingField;
    public string LoginName { get; public set; }
    public string UserId { get; public set; }
    public string IdToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LoginName();
    [CompilerGeneratedAttribute]
public void set_LoginName(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public string get_IdToken();
    [CompilerGeneratedAttribute]
public void set_IdToken(string value);
    public virtual string ToString();
}
internal class JetBrains.Application.License2.JBAccount.JetBrainsSharedJBAccrountInfoAccess : object {
    private IDataAccess`1<string> myUserIdAccessAccess;
    private IDataAccess`1<string> myUserLoginAccessAccess;
    private IDataAccess`1<string> myIdTokenAccessAccess;
    public string Description { get; }
    public string Location { get; }
    public JetBrainsSharedJBAccrountInfoAccess(DataAccess dataAccess);
    private static string ConvertToString(string s);
    private static string ConvertFromString(string s);
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    [IteratorStateMachineAttribute("JetBrains.Application.License2.JBAccount.JetBrainsSharedJBAccrountInfoAccess/<Load>d__12")]
public sealed virtual IEnumerable`1<JetBrainsSharedJBAccrountInfo> Load();
    public sealed virtual void Save(IEnumerable`1<JetBrainsSharedJBAccrountInfo> items);
}
public class JetBrains.Application.License2.JBAccount.NetworkOperationResult`1 : object {
    [CompilerGeneratedAttribute]
private ResponseCode <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public ResponseCode Result { get; }
    [CanBeNullAttribute]
public string Description { get; }
    public T Value { get; }
    public bool IsSuccessful { get; }
    public NetworkOperationResult`1(ResponseCode result, string description, T value);
    [CompilerGeneratedAttribute]
public ResponseCode get_Result();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public T get_Value();
    public bool get_IsSuccessful();
    public static NetworkOperationResult`1<T> Ok(T value);
    public static NetworkOperationResult`1<T> NotOk(AbstractResponse response);
    public static NetworkOperationResult`1<T> Error(AbstractResponse response);
    public static NetworkOperationResult`1<T> NetworkError(AbstractResponse response);
    public static NetworkOperationResult`1<T> Create(TResponse response, Func`2<TResponse, T> whenOk);
}
public class JetBrains.Application.License2.JBAccount.OldJBAccountInfoAccess : object {
    private IDataAccess`1<string> myAccountAccess;
    private IDataAccess`1<string> myUserIdAccess;
    private IDataAccess`1<string> myAssetIdAccess;
    private IDataAccess`1<string> myAssetsAccess;
    public string Description { get; }
    public string Location { get; }
    public OldJBAccountInfoAccess(DataAccess dataAccess);
    [CanBeNullAttribute]
private IJBAccountInfo TryLoadInfo();
    private static string Decode(string s);
    private IDataAccess`1[] GetAllAccess();
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    [IteratorStateMachineAttribute("JetBrains.Application.License2.JBAccount.OldJBAccountInfoAccess/<Load>d__14")]
public sealed virtual IEnumerable`1<IJBAccountInfo> Load();
    public sealed virtual void Save(IEnumerable`1<IJBAccountInfo> newValue);
}
[EnvironmentComponentAttribute("2")]
public class JetBrains.Application.License2.License2CheckComponent : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ILicenseDataPersister myPersister;
    private IThreading myThreading;
    private IDocumentsThatRequireUserConsent myDocumentsThatRequireUserConsent;
    private IConsentOptions myConsentOptions;
    private CultureContextComponentBase myCultureContext;
    private IProperty`1<LicenseViewModel> myLicenseViewModel;
    private ILazy`1<ICurrentRegion> myCurrentRegion;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<LicenseViewModel> <LicenseViewModelSaved>k__BackingField;
    private List`1<Func`2<LicenseDialogShowArgs, bool>> myAllowedEntitiesChangedHandlers;
    private IList`1<ShowDialogRequest> myShowDialogRequests;
    private bool myIsShowLicenseDialogEnqueued;
    private bool myIsLicenseDialogRequestedByApi;
    private bool myIsSilent;
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISignal`1<LicenseViewModel> LicenseViewModelSaved { get; }
    public License2CheckComponent(Lifetime lifetime, ILogger logger, LicenseViewModelBuilder viewModelBuilder, ILicenseDataPersister persister, IThreading threading, IDocumentsThatRequireUserConsent documentsThatRequireUserConsent, License2CheckComponentSettings settings, IConsentOptions consentOptions, UserNotifications userNotifications, OpensUri opensUri, CultureContextComponentBase cultureContext, ILazy`1<ICurrentRegion> currentRegion);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<LicenseViewModel> get_LicenseViewModelSaved();
    private void RequestShowLicenseDialog(ShowDialogRequest request);
    private void EnqueueShowLicenseDialog();
    public sealed virtual void ShowLicenseDialog(string reason);
    public sealed virtual void RegisterShowLicenseDialogHandler(Lifetime lifetime, Func`2<LicenseDialogShowArgs, bool> handler, Func`2<LicenseViewModel, bool> forceShowDialog);
    public sealed virtual void WithLicenseViewModel(Lifetime lifetime, Action`1<LicenseViewModel> action);
    public sealed virtual void WithLicenseViewModel(Lifetime lifetime, Action`2<Lifetime, LicenseViewModel> action);
    public sealed virtual void WithLicenseViewModelSilent(Lifetime lifetime, Action`1<LicenseViewModel> action);
    public sealed virtual IEnumerable`1<string> GetValidLicensePresentation();
    public sealed virtual IEnumerable`1<ILicenseCheckInfo> GetAllowedEntitiesLicenseCheckInfo();
    private ILicenseData CreateLicenseData(LicenseViewModel model);
    private void SetAllowedEntities(IReadOnlyCollection`1<ILicensedEntity> allowedEntities, bool emptyIfThereAreDocumentsToBeAccepted);
    [CompilerGeneratedAttribute]
private void <EnqueueShowLicenseDialog>b__23_0(LicenseViewModel model);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.License2CheckComponentEx : object {
    [ExtensionAttribute]
public static void OnLicenseViewModelSaved(ILicense2CheckComponent checkComponent, Lifetime lifetime, Action`1<T> handler);
    [ExtensionAttribute]
public static void WithLicenseViewSubmodel(ILicense2CheckComponent checkComponent, Lifetime lifetime, Action`1<T> handler);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.License2.License2CheckComponentSettings : object {
    public bool DoSync { get; }
    public virtual bool get_DoSync();
}
public class JetBrains.Application.License2.LicenseCheckInfo : object {
    [CompilerGeneratedAttribute]
private ILicensedEntity <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultWithDescription <Result>k__BackingField;
    public ILicensedEntity Entity { get; }
    public ResultWithDescription Result { get; }
    public LicenseCheckInfo(ILicensedEntity entity, ResultWithDescription result);
    public LicenseCheckInfo(ILicensedEntity entity, Result result, string description);
    [StringFormatMethodAttribute("fmt")]
public LicenseCheckInfo(ILicensedEntity entity, Result result, string fmt, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual ILicensedEntity get_Entity();
    [CompilerGeneratedAttribute]
public sealed virtual ResultWithDescription get_Result();
}
public class JetBrains.Application.License2.LicenseCheckInfo`1 : LicenseCheckInfo {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public T Data { get; }
    public LicenseCheckInfo`1(ILicensedEntity entity, T data, ResultWithDescription result);
    public LicenseCheckInfo`1(ILicensedEntity entity, T data, Result result, string description);
    public LicenseCheckInfo`1(ILicensedEntity entity, T data, Result result, string fmt, Object[] args);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Data();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicenseCheckInfoEx : object {
    [ExtensionAttribute]
[PureAttribute]
public static LicenseCheckInfo`1<T> TryApplyWarning(LicenseCheckInfo`1<T> info, string warning);
    [ExtensionAttribute]
[PureAttribute]
public static LicenseCheckInfo`1<T> TryApplyError(LicenseCheckInfo`1<T> info, string error);
}
public class JetBrains.Application.License2.LicenseCheckResult`1 : object {
    private object myLockObject;
    private int myBulkOperationCount;
    private ILogger myLogger;
    private string myName;
    private Dictionary`2<ILicensedEntity, Dictionary`2<TChecker, ILicenseCheckInfo>> myResults;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ResultChanged>k__BackingField;
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public LicenseCheckResult`1(Lifetime lifetime, ILogger logger, string name);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    public ILicenseCheckInfo TryGetInfo(ILicensedEntity entity, Predicate`1<TChecker> includeChecker);
    public void BulkChanges(Action action);
    private IReadOnlyCollection`1<ILicensedEntity> GetAllowedEntities();
    private void UpdateResultsAndFireIfNecessary();
    public void ReplaceResult(ILicenseCheckInfo info, TChecker checker);
    public void AddResult(ILicenseCheckInfo info, TChecker checker);
    public void AddResults(TChecker checker, IEnumerable`1<ILicenseCheckInfo> infos);
    public void RemoveResult(ILicensedEntity entity, TChecker checker);
    public IList`1<ILicenseCheckInfo> GetCheckerResults(TChecker checker);
    public void RemoveResults(TChecker checker);
    public void RemoveAllResults();
    [CompilerGeneratedAttribute]
private void <RemoveAllResults>b__23_0();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicenseCheckResultEx : object {
    [ExtensionAttribute]
public static bool IsLicenseEntityAllowed(ILicenseCheckResult model, ILicensedEntity entity);
    [ExtensionAttribute]
public static bool LicenseEntityWillBeShutdownIn30Min(ILicenseCheckResult model, ILicensedEntity entity);
}
public class JetBrains.Application.License2.LicenseData : object {
    [CompilerGeneratedAttribute]
private bool <IsFirstRun>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastRunAllEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastRunEnabledEntities>k__BackingField;
    private ArrayList myData;
    public bool IsFirstRun { get; public set; }
    public IEnumerable`1<ILicensedEntity> LastRunAllEntities { get; private set; }
    public IEnumerable`1<ILicensedEntity> LastRunEnabledEntities { get; private set; }
    public LicenseData(IEnumerable`1<ILicensedEntity> allEntities, IEnumerable`1<ILicensedEntity> enabledEntities, bool isFirstRun);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFirstRun();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsFirstRun(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ILicensedEntity> get_LastRunAllEntities();
    [CompilerGeneratedAttribute]
private void set_LastRunAllEntities(IEnumerable`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ILicensedEntity> get_LastRunEnabledEntities();
    [CompilerGeneratedAttribute]
private void set_LastRunEnabledEntities(IEnumerable`1<ILicensedEntity> value);
    public sealed virtual IEnumerable`1<T> GetData();
    public void AppendData(T data);
    public void AppendDataRange(IEnumerable`1<T> datas);
    public static JsonLikeSerializer CreateSerializer(IEnumerable`1<ILicensedEntity> entities);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicensedEntityEx : object {
    [ExtensionAttribute]
public static bool RequiresLicense(ILicensedEntity entity);
    [ExtensionAttribute]
public static string GetFullPresentableName(ILicensedEntity entity);
    [ExtensionAttribute]
public static string GetShortPresentableName(ILicensedEntity entity);
    [ExtensionAttribute]
public static ValueTuple`4<bool, bool, bool, bool> HaveSupport(IEnumerable`1<ILicensedEntity> entities);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IDescriptionObjectWithUserNotification TryGetCustomLicenseNotFoundDescription(ILicensedEntity licensedEntity);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ResultWithDescription TryGetCustomProperlyLicensedDescription(ILicensedEntity licensedEntity);
    [ExtensionAttribute]
public static bool IsDisabledByUserPreferences(ILicensedEntity licensedEntity, ZoneUserPreferenceChecker zoneUserPreferenceChecker);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.License2.ILicensedEntity")]
public class JetBrains.Application.License2.LicensedEntityIconsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <IconType32x32>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <IconType16x16>k__BackingField;
    [NotNullAttribute]
public Type IconType32x32 { get; public set; }
    [NotNullAttribute]
public Type IconType16x16 { get; public set; }
    public LicensedEntityIconsAttribute(Type iconType32X32, Type iconType16X16);
    [CompilerGeneratedAttribute]
public Type get_IconType32x32();
    [CompilerGeneratedAttribute]
public void set_IconType32x32(Type value);
    [CompilerGeneratedAttribute]
public Type get_IconType16x16();
    [CompilerGeneratedAttribute]
public void set_IconType16x16(Type value);
}
public class JetBrains.Application.License2.LicenseDialogShowArgs : object {
    [CompilerGeneratedAttribute]
private string <ReasonToShow>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseViewModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocumentsThatRequireUserConsent <DocumentsThatRequireUserConsent>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsentOptions <ConsentOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentRegion <CurrentRegion>k__BackingField;
    public string ReasonToShow { get; }
    public LicenseViewModel Model { get; }
    public IDocumentsThatRequireUserConsent DocumentsThatRequireUserConsent { get; }
    public IConsentOptions ConsentOptions { get; }
    public ICurrentRegion CurrentRegion { get; }
    public LicenseDialogShowArgs(string reasonToShow, LicenseViewModel model, IDocumentsThatRequireUserConsent documentsThatRequireUserConsent, IConsentOptions consentOptions, ICurrentRegion currentRegion);
    [CompilerGeneratedAttribute]
public string get_ReasonToShow();
    [CompilerGeneratedAttribute]
public LicenseViewModel get_Model();
    [CompilerGeneratedAttribute]
public IDocumentsThatRequireUserConsent get_DocumentsThatRequireUserConsent();
    [CompilerGeneratedAttribute]
public IConsentOptions get_ConsentOptions();
    [CompilerGeneratedAttribute]
public ICurrentRegion get_CurrentRegion();
}
public class JetBrains.Application.License2.LicenseServer.EntityInfo : object {
    [CompilerGeneratedAttribute]
private string <TechnicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoObtainTicketAutomatically>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private SupportsLicenseServer <SupportUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentTicketId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermanentTicketEmail>k__BackingField;
    public string TechnicalName { get; internal set; }
    public bool DoObtainTicketAutomatically { get; public set; }
    public DateTime LastUsed { get; internal set; }
    [CanBeNullAttribute]
public SupportsLicenseServer SupportUsed { get; internal set; }
    [CanBeNullAttribute]
public string PermanentTicketId { get; internal set; }
    [CanBeNullAttribute]
public string PermanentTicketEmail { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_TechnicalName();
    [CompilerGeneratedAttribute]
internal void set_TechnicalName(string value);
    [CompilerGeneratedAttribute]
public bool get_DoObtainTicketAutomatically();
    [CompilerGeneratedAttribute]
public void set_DoObtainTicketAutomatically(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUsed();
    [CompilerGeneratedAttribute]
internal void set_LastUsed(DateTime value);
    [CompilerGeneratedAttribute]
public SupportsLicenseServer get_SupportUsed();
    [CompilerGeneratedAttribute]
internal void set_SupportUsed(SupportsLicenseServer value);
    [CompilerGeneratedAttribute]
public string get_PermanentTicketId();
    [CompilerGeneratedAttribute]
internal void set_PermanentTicketId(string value);
    [CompilerGeneratedAttribute]
public string get_PermanentTicketEmail();
    [CompilerGeneratedAttribute]
internal void set_PermanentTicketEmail(string value);
}
public class JetBrains.Application.License2.LicenseServer.IdeServicesAIConfig : object {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public string Uri { get; public set; }
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
public class JetBrains.Application.License2.LicenseServer.IdeServicesConfigJson : object {
    [CompilerGeneratedAttribute]
private IdeConfigurationParam[] <IdeConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Service[] <Services>k__BackingField;
    public IdeConfigurationParam[] IdeConfiguration { get; public set; }
    public Service[] Services { get; public set; }
    [CompilerGeneratedAttribute]
public IdeConfigurationParam[] get_IdeConfiguration();
    [CompilerGeneratedAttribute]
public void set_IdeConfiguration(IdeConfigurationParam[] value);
    [CompilerGeneratedAttribute]
public Service[] get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(Service[] value);
    [CanBeNullAttribute]
public static IdeServicesConfigJson TryLoad(string s);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicenseServer.IdeServicesConfigJsonEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static Service TryGetAIService(IdeServicesConfigJson config);
    [ExtensionAttribute]
[NotNullAttribute]
public static IdeServicesAIConfig TryGetIdeServicesAIConfig(IdeServicesConfigJson config);
}
public interface JetBrains.Application.License2.LicenseServer.ILicenseServerInfo {
    public string Url { get; }
    public IEnumerable`1<EntityInfo> Entities { get; }
    public Tokens AuthTokens { get; }
    public AuthUrls AuthUrls { get; }
    public abstract virtual string get_Url();
    public abstract virtual IEnumerable`1<EntityInfo> get_Entities();
    public abstract virtual Tokens get_AuthTokens();
    public abstract virtual AuthUrls get_AuthUrls();
}
public interface JetBrains.Application.License2.LicenseServer.ISessionSwitchHandler {
    public abstract virtual void SetSessionUnlockHandler(Lifetime lifetime, ILogger logger, Action handler);
}
public interface JetBrains.Application.License2.LicenseServer.ITaskResult {
    public string Name { get; }
    public TaskState State { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual TaskState get_State();
    public abstract virtual string get_Description();
    public abstract virtual void Cancel();
}
internal class JetBrains.Application.License2.LicenseServer.LicenseServerClientNew : object {
    private Lifetime myLifetime;
    private WebProxySettingsReader myProxySettingsReader;
    private ILogger myLogger;
    private ITaskHost myTaskHost;
    private UserNotifications myUserNotifications;
    private BlackListAndCrl myBlackListAndCrl;
    private OAuthenticator myOAuthenticator;
    [CanBeNullAttribute]
private JetBrainsResourceMappingAccessor myResourceMappingAccessor;
    private LicenseCheckResult`1<LicenseServerClientNew> myCheckResult;
    private Dictionary`2<ILicensedEntity, EntityState> myStates;
    private SequentialLifetimes myServerInaccessibleNotificationLifetimes;
    private ICollectionEvents`1<ILicensedEntity> myLicensedEntitiesLicensedByOldLicenseServer;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    private static string AuthorizeMessageSuffix;
    private static string AuthRequiredMessage;
    private static string AuthInProgressMessage;
    private static string AuthErrorFormatMessage;
    public LicenseCheckResult`1<LicenseServerClientNew> Result { get; }
    public string Url { get; }
    public bool Enabled { get; public set; }
    public LicenseServerClientNew(Lifetime lifetime, string url, BlackListAndCrl blackListAndCrl, IEnumerable`1<ILicensedEntity> entities, OAuthenticator oAuthenticator, EnvironmentDependencies environmentDependencies, JetBrainsResourceMappingAccessor resourceMappingAccessor);
    private static LicenseServerClientNew();
    public LicenseCheckResult`1<LicenseServerClientNew> get_Result();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public virtual string ToString();
    private void WithState(ILicensedEntity entity, Action`1<EntityState> action);
    private T WithState(ILicensedEntity entity, Func`2<EntityState, T> action);
    private void NotifyLicenseServerInaccessible(ILicensedEntity entity, State oldState, EntityState state);
    public Task`1<IdeServicesAIConfig> TryFetchAIFromIdeServicesAsync();
    public void ObtainFloatingTicket(ILicensedEntity entity, DateTime lastUsed, SupportsLicenseServer lastSupportUsed, bool doSetSuccessWhenLicenseServerIsUsedTooLongAgo);
    private void QueueObtainFloatingTicket(ILicensedEntity entity, TimeSpan delay);
    private void OnAuthRequiredResponse(ILicensedEntity entity, AuthUrls authUrls, string message);
    private void SetStateOnErrorResponse(ILicensedEntity entity, string errorMessage);
    private void QueueProlongateFloatingTicket(ILicensedEntity entity, long prolongationPeriodInMilliseconds);
    public void ReleaseFloatingTickets();
    public IDictionary`2<ILicensedEntity, IDictionary`2<string, string>> GetAllTicketPropertiesInUse();
    public void ReleaseFloatingTicket(ILicensedEntity entity, bool doUpdateResult);
    public bool SetPermanentTicket(ILicensedEntity entity, string ticketId, DateTime lastUsed, string email, ISupportsLicenseServer support);
    private static ILicenseCheckInfo CreatePermanentTicketInfo(ILicensedEntity entity, string email);
    private void QueuePermanentTicketCheck(ILicensedEntity entity, TimeSpan timeout);
    [StringFormatMethodAttribute("fmt")]
private void Trace(string fmt, Object[] args);
    [StringFormatMethodAttribute("fmt")]
private void TraceResponse(AbstractResponse response, string fmt, Object[] args);
    private static SupportsLicenseServer ToClass(ISupportsLicenseServer s);
    public IList`1<EntityInfo> GetEntityInfos();
    public NetworkOperationResult`1<bool> RequestPermanentActivationCode(string email);
    public NetworkOperationResult`1<bool> ObtainPermanentTickets(string email, string activationCode);
    public NetworkOperationResult`1<bool> ReleasePermanentTickets();
    [CompilerGeneratedAttribute]
private IdeServicesAIConfig <TryFetchAIFromIdeServicesAsync>b__32_0();
    [CompilerGeneratedAttribute]
private IdeServicesAIConfig <TryFetchAIFromIdeServicesAsync>b__32_1(StreamReader reader);
}
internal class JetBrains.Application.License2.LicenseServer.LicenseServerInfo : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<EntityInfo> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private Tokens <AuthTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthUrls <AuthUrls>k__BackingField;
    public string Url { get; internal set; }
    public IEnumerable`1<EntityInfo> Entities { get; internal set; }
    [CanBeNullAttribute]
public Tokens AuthTokens { get; internal set; }
    [CanBeNullAttribute]
public AuthUrls AuthUrls { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<EntityInfo> get_Entities();
    [CompilerGeneratedAttribute]
internal void set_Entities(IEnumerable`1<EntityInfo> value);
    [CompilerGeneratedAttribute]
public sealed virtual Tokens get_AuthTokens();
    [CompilerGeneratedAttribute]
internal void set_AuthTokens(Tokens value);
    [CompilerGeneratedAttribute]
public sealed virtual AuthUrls get_AuthUrls();
    [CompilerGeneratedAttribute]
internal void set_AuthUrls(AuthUrls value);
}
public class JetBrains.Application.License2.LicenseServer.LicenseServerSettings : object {
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAutodetectedLicenseServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlUsed>k__BackingField;
    public static LicenseServerSettings Default;
    public bool IsOn { get; internal set; }
    public bool UseAutodetectedLicenseServer { get; public set; }
    [CanBeNullAttribute]
public string UrlUsed { get; public set; }
    private static LicenseServerSettings();
    [CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
internal void set_IsOn(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseAutodetectedLicenseServer();
    [CompilerGeneratedAttribute]
public void set_UseAutodetectedLicenseServer(bool value);
    [CompilerGeneratedAttribute]
public string get_UrlUsed();
    [CompilerGeneratedAttribute]
public void set_UrlUsed(string value);
}
public class JetBrains.Application.License2.LicenseServer.LicenseServerViewSubmodel : object {
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private ILogger myLogger;
    private WebProxySettingsReader myProxySettingsReader;
    private EnvironmentDependencies myDependencies;
    [CanBeNullAttribute]
private JetBrainsResourceMappingAccessor myResourceMappingAccessor;
    [CompilerGeneratedAttribute]
private BlackListAndCrl <BlackListAndCrl>k__BackingField;
    private Dictionary`2<string, ILicenseServerInfo> myServerInfos;
    private LicenseCheckResult`1<LicenseServerClientNew> myCheckResult;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CurrentLicenseServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OAuthenticator> <CurrentLicenseServerAuthorizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <AutodetectedLicenseServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <UseAutodetecteLicenseServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IdeServicesAIConfig> <IdeServicesAIConfiguration>k__BackingField;
    private LicenseServerClientNew myClient;
    private OneToListMap`2<string, EntityInfo> mySavedDataForUnknownEntities;
    public static string NoLicenseServerDetected;
    private Reasons`1<string> myIgnoreModelResultChanged;
    private FreeThreadedGroupingEvent myAutoObtainRemoveFloatingTicketsGroupingEvent;
    private bool myStoflGuard;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    public BlackListAndCrl BlackListAndCrl { get; }
    public IProperty`1<string> CurrentLicenseServerUrl { get; }
    public IProperty`1<OAuthenticator> CurrentLicenseServerAuthorizer { get; }
    public IProperty`1<string> AutodetectedLicenseServerUrl { get; }
    public IProperty`1<bool> UseAutodetecteLicenseServerUrl { get; }
    public IProperty`1<IdeServicesAIConfig> IdeServicesAIConfiguration { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    private IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.LicenseData { get; }
    public LicenseServerViewSubmodel(Lifetime lifetime, ILicenseData data, EnvironmentDependencies dependencies, BlackListAndCrl blackList, ISessionSwitchHandler sessionSwitchHandler, JetBrainsResourceMappingAccessor resourceMappingAccessor);
    private static LicenseServerViewSubmodel();
    [CompilerGeneratedAttribute]
public BlackListAndCrl get_BlackListAndCrl();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CurrentLicenseServerUrl();
    [CompilerGeneratedAttribute]
public IProperty`1<OAuthenticator> get_CurrentLicenseServerAuthorizer();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_AutodetectedLicenseServerUrl();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_UseAutodetecteLicenseServerUrl();
    [CompilerGeneratedAttribute]
public IProperty`1<IdeServicesAIConfig> get_IdeServicesAIConfiguration();
    public void IgnoreModelResultChanged(Lifetime lifetime, string reason);
    private void TryUpdateRaiEntity(LicenseViewModel allModel, IdeServicesAIConfig result, LicenseServerClientNew client);
    private static OneToListMap`2<string, EntityInfo> SaveDataForUnknownEntities(ILogger logger, ILicenseData data, LicenseViewModel allModel);
    [NotNullAttribute]
private ILicenseServerInfo GetOrCreateInfo(string url);
    public void AutoDetectLicenseServers();
    private static bool IsLicenseEntityAllowedButNotByEval(LicenseViewModel model, ILicensedEntity entity);
    private void AutoObtainRemoveFloatingTickets(LicenseServerClientNew client, ILicenseServerInfo info);
    private void CheckPermanentTicket(LicenseServerClientNew client, ILicenseServerInfo info);
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    private sealed virtual override IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.get_LicenseData();
    public IList`1<string> GetAllServerUrls();
    public OneToListMap`2<string, ILicensedEntity> GetServersWithEntitiesThatDoNotRequireFloatingTicket();
    public void SetServersWithEntitiesThatDoNotRequireFloatingTicket(string licenseServerUrl, List`1<ILicensedEntity> uncheckedEntities);
    public void RemoveServers(IEnumerable`1<string> serversToRemove);
    public void ReleaseFloatingTickets();
    public IDictionary`2<ILicensedEntity, IDictionary`2<string, string>> GetAllTicketPropertiesInUse();
    [CompilerGeneratedAttribute]
private void <AutoDetectLicenseServers>b__35_0();
}
public static class JetBrains.Application.License2.LicenseServer.LisenseServerUtils : object {
    private static HashSet`1<IPAddress> GetLocalAddresses();
    private static string GetHostNameOrAddress(string host);
    public static bool IsLocalIpAddress(string host, ILogger logger);
    public static IEnumerable`1<string> DetectLicenseServers(ILogger logger, IWebProxy proxy, BlackList blackList);
    [IteratorStateMachineAttribute("JetBrains.Application.License2.LicenseServer.LisenseServerUtils/<FindLicenseServerUrls>d__4")]
private static IEnumerable`1<string> FindLicenseServerUrls(ILogger logger);
    [IteratorStateMachineAttribute("JetBrains.Application.License2.LicenseServer.LisenseServerUtils/<TryDnsRequests>d__5")]
private static IEnumerable`1<string> TryDnsRequests(string domain, IList`1<string> servers, ILogger logger);
    private static IEnumerable`1<string> TryDnsRequest(DnsRequest request, ILogger logger);
    private static string GetDefaultDnsSuffix(ILogger logger);
}
internal class JetBrains.Application.License2.LicenseServer.RegistryIdeServiceAIConfigAccess : SingleItemLicenseDataAccess`1<IdeServicesAIConfig> {
    public RegistryIdeServiceAIConfigAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
internal class JetBrains.Application.License2.LicenseServer.RegistryLicenseServerInfoAccess : MultipleItemsLicenseDataAccess`1<LicenseServerInfo> {
    public RegistryLicenseServerInfoAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
public class JetBrains.Application.License2.LicenseServer.RegistryLicenseServerSettingsAccess : SingleItemLicenseDataAccess`1<LicenseServerSettings> {
    public RegistryLicenseServerSettingsAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
public class JetBrains.Application.License2.LicenseServer.SupportsLicenseServer : object {
    [CompilerGeneratedAttribute]
private DateTime <ProductBuiltDateUsedForSubscriptionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LicenseServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseServerEdition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendBuildDateAsVersionToOldServers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlToShowWhenLicenseServerIsBlacklisted>k__BackingField;
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; public set; }
    public string ProductFamily { get; public set; }
    public int LicenseServerVersion { get; public set; }
    public string LicenseServerEdition { get; public set; }
    public bool SendBuildDateAsVersionToOldServers { get; public set; }
    public string UrlToShowWhenLicenseServerIsBlacklisted { get; public set; }
    public SupportsLicenseServer(DateTime productBuiltDateUsedForSubscriptionCheck, string productFamily, int licenseServerVersion, string licenseServerEdition, bool sendBuildDateAsVersionToOldServers, string urlToShowWhenLicenseServerIsBlacklisted);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    [CompilerGeneratedAttribute]
public void set_ProductBuiltDateUsedForSubscriptionCheck(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductFamily();
    [CompilerGeneratedAttribute]
public void set_ProductFamily(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LicenseServerVersion();
    [CompilerGeneratedAttribute]
public void set_LicenseServerVersion(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseServerEdition();
    [CompilerGeneratedAttribute]
public void set_LicenseServerEdition(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SendBuildDateAsVersionToOldServers();
    [CompilerGeneratedAttribute]
public void set_SendBuildDateAsVersionToOldServers(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UrlToShowWhenLicenseServerIsBlacklisted();
    [CompilerGeneratedAttribute]
public void set_UrlToShowWhenLicenseServerIsBlacklisted(string value);
    protected bool Equals(SupportsLicenseServer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SupportsLicenseServer CreateForReSharperUltimate();
    [ObsoleteAttribute("The method is to be removed. Use the overload without parameters")]
public static SupportsLicenseServer CreateForReSharperUltimate(int version, DateTime productBuiltDateUsedForSubscriptionCheck);
}
public class JetBrains.Application.License2.LicenseServer.TaskResult : object {
    private LifetimeDefinition myLifetimeDefinition;
    private TaskState myState;
    private string myDescription;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string Name { get; }
    public TaskState State { get; private set; }
    public string Description { get; private set; }
    public Lifetime Lifetime { get; }
    public TaskResult(Lifetime parentLifetime, string taskName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual TaskState get_State();
    private void set_State(TaskState value);
    public sealed virtual string get_Description();
    private void set_Description(string value);
    public Lifetime get_Lifetime();
    public sealed virtual void Cancel();
    public void SetState(TaskState state, string description);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void AdvisePropertyChanged(Lifetime lifetime, PropertyChangedEventHandler handler);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged(string propertyName);
}
public enum JetBrains.Application.License2.LicenseServer.TaskState : Enum {
    public int value__;
    public static TaskState NONE;
    public static TaskState OK;
    public static TaskState RUNNING;
    public static TaskState ERROR;
    public static TaskState WARNING;
    public static TaskState CANCELED;
}
[EnvironmentComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.License2.LicenseServer.UnixSessionSwitchHandler : object {
    public sealed virtual void SetSessionUnlockHandler(Lifetime lifetime, ILogger logger, Action handler);
}
[EnvironmentComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.License2.LicenseServer.WindowsSessionSwitchHandler : object {
    public sealed virtual void SetSessionUnlockHandler(Lifetime lifetime, ILogger logger, Action handler);
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.AbstractObtainTicketRequest`1 : IntranetLicenseServerRequest`1<TResponse> {
    public string ProductFamilyId;
    public string Edition;
    public int Version;
    public int VersionNumber;
    public int BuildDate;
    private AbstractObtainTicketRequest`1(int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string authorizationHeader);
    private AbstractObtainTicketRequest`1(long salt, string machineId, string hostName, string userName, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string authorizationHeader);
    protected AbstractObtainTicketRequest`1(string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string authorizationHeader);
    protected AbstractObtainTicketRequest`1(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string authorizationHeader);
    public static int GetBuildDateNumber(DateTime buildDate);
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.AbstractRequest`1 : object {
    public long Salt;
    public string MachineId;
    public int ClientVersion;
    public string BuildNumber;
    [CompilerGeneratedAttribute]
private bool <IsGet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpectsSingleStringResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationHeader>k__BackingField;
    public string IdeProductCode;
    public string ActionName { get; }
    public bool IsGet { get; protected set; }
    public bool ExpectsSingleStringResponse { get; protected set; }
    public IResponseSignatureVerifier SignatureVerifier { get; }
    public string AuthorizationHeader { get; public set; }
    protected AbstractRequest`1(long salt, string machineId);
    public abstract virtual string get_ActionName();
    [CompilerGeneratedAttribute]
public bool get_IsGet();
    [CompilerGeneratedAttribute]
protected void set_IsGet(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExpectsSingleStringResponse();
    [CompilerGeneratedAttribute]
protected void set_ExpectsSingleStringResponse(bool value);
    public abstract virtual IResponseSignatureVerifier get_SignatureVerifier();
    [CompilerGeneratedAttribute]
public string get_AuthorizationHeader();
    [CompilerGeneratedAttribute]
public void set_AuthorizationHeader(string value);
}
public static class JetBrains.Application.License2.LicenseServerSupport.AbstractRequestDefaults : object {
    [CompilerGeneratedAttribute]
private static IHostProductInfo <HostProductInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <MachineId>k__BackingField;
    [CompilerGeneratedAttribute]
private static Lazy`1<string> <BuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <IdeProductCode>k__BackingField;
    public static IHostProductInfo HostProductInfo { get; public set; }
    public static Lazy`1<string> UserName { get; }
    public static Lazy`1<string> HostName { get; }
    public static Lazy`1<string> MachineId { get; }
    public static Lazy`1<string> BuildNumber { get; }
    [NotNullAttribute]
public static string IdeProductCode { get; public set; }
    private static AbstractRequestDefaults();
    [CompilerGeneratedAttribute]
public static IHostProductInfo get_HostProductInfo();
    [CompilerGeneratedAttribute]
public static void set_HostProductInfo(IHostProductInfo value);
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_UserName();
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_HostName();
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_MachineId();
    [CompilerGeneratedAttribute]
public static Lazy`1<string> get_BuildNumber();
    [CompilerGeneratedAttribute]
public static string get_IdeProductCode();
    [CompilerGeneratedAttribute]
public static void set_IdeProductCode(string value);
    private static string Caclculate(Func`1<string> calc);
}
public class JetBrains.Application.License2.LicenseServerSupport.AbstractResponse : object {
    public ResponseCode ResponseCode;
    public long Salt;
    public string Message;
    public string Action;
    public AbstractResponse(ResponseCode responseCode, string message, long salt);
    public LicenseAction GetLicenseAction();
    protected virtual LicenseAction GetDefaultLicenseAction();
    public static Dictionary`2<string, string> ParseTicketProperties(string ticketProperties);
    private static void FillResult(object result, XmlElement root);
    [NotNullAttribute]
public static Response CreateResponse(string xml);
    private static object ConvertValue(Type type, string value);
    public static string ValueToString(object value);
    public static string ConvertFieldName(string fieldName);
    public static Response Error(string message, long salt, ResponseCode responseCode, Response originalResponse);
    public static Response NetworkError(string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataRequest : JetBrainsLicenseServerRequest`1<GenericDataResponse> {
    public string ProductCode;
    public string LicenseID;
    public string Uid;
    public string CrlVersion;
    public string BlVersion;
    public string ActionName { get; }
    public GenericDataRequest(string licenseID, string uid, string crlVersion, string blVersion, string productCode);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataResponse : AbstractResponse {
    public string Crl;
    public string Bl;
    public GenericDataResponse(ResponseCode responseCode, string message, long salt, string crl, string bl);
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest : JetBrainsLicenseServerRequest`1<ObtainAgreementResponse> {
    public string ProductCode;
    public string FileName;
    public string ExistingVersion;
    public string LicenseID;
    public string Uid;
    public string ConsentOptions;
    public string BuildDate;
    public bool Eap;
    private static Lazy`1<string> ourBuildDateCached;
    public string ActionName { get; }
    public ObtainAgreementRequest(string fileName, string existingVersion, string consentOptions, string licenseId, string userId, string productCode);
    public ObtainAgreementRequest(IDocumentThatRequiresUserConsent document, IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptionValues, string licenseId, string userId, string productCode);
    private static ObtainAgreementRequest();
    public virtual string get_ActionName();
    private static string ConsentOptionsToString(IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptions);
    private static DateTime RetrieveLinkerTimestamp(FileSystemPath filePath);
}
public class JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementResponse : AbstractResponse {
    public string DocumentHtml;
    public string FileName;
    public string ConsentOptions;
    public ObtainAgreementResponse(string documentHtml);
    public ObtainAgreementResponse(ResponseCode responseCode, string message, long salt, string documentHtml);
}
public class JetBrains.Application.License2.LicenseServerSupport.AuthUrls : object {
    [CompilerGeneratedAttribute]
private string <AuthorizationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeExchangeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationClientId>k__BackingField;
    public string AuthorizationUrl { get; public set; }
    public string CodeExchangeUrl { get; public set; }
    public string AuthorizationClientId { get; public set; }
    public AuthUrls(string authorizationUrl, string codeExchangeUrl, string authorizationClientId);
    [CompilerGeneratedAttribute]
public string get_AuthorizationUrl();
    [CompilerGeneratedAttribute]
public void set_AuthorizationUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CodeExchangeUrl();
    [CompilerGeneratedAttribute]
public void set_CodeExchangeUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationClientId();
    [CompilerGeneratedAttribute]
public void set_AuthorizationClientId(string value);
    protected bool Equals(AuthUrls other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class JetBrains.Application.License2.LicenseServerSupport.ClientUtil : object {
    public static string BlacklistedLicenseServerMessage;
    public static string FipsEnabledLicenseServerMessage;
    public static string ExpiredCertificateLicenseServerMessage;
    public static string InvalidResponseSignatureMessage;
    public static Lazy`1<string> UserAgent;
    public static RemoteCertificateValidationCallback CertificateValidationCallback;
    private static ILogger Logger { get; }
    private static ClientUtil();
    public static string CreateBlacklistedLicenseServerMessage(string url);
    private static ILogger get_Logger();
    [CanBeNullAttribute]
private static string TryExtractUserInfo(string fullUrl);
    public static HttpWebRequest CreateRequest(string fullUrl, bool isGet, IWebProxy proxy, string authorizationHeader, int timeoutInMilliseconds);
    public static TResult ReadResponse(HttpWebRequest webRequest, IWebProxy proxy, Func`2<Stream, TResult> readFunc);
    public static TResult ReadResponse(HttpWebRequest webRequest, IWebProxy proxy, Func`2<StreamReader, TResult> readFunc);
    public static TResult ReadResponse(string url, bool isGet, IWebProxy proxy, Func`2<StreamReader, TResult> readFunc, string authorizationHeader, int timeoutInMilliseconds);
    public static TResult ReadResponse(string url, bool isGet, IWebProxy proxy, Func`2<Stream, TResult> readFunc, string authorizationHeader, int timeoutInMilliseconds);
    [CanBeNullAttribute]
private static string ExecuteRequest(string url, IWebProxy proxy, IResponseSignatureVerifier verifier, string authorizationHeader, int timeoutInMilliseconds);
    [NotNullAttribute]
public static TResponse ExecuteRequest(string baseUrl, AbstractRequest`1<TResponse> request, IWebProxy proxy, BlackList blackList, int timeoutInMilliseconds);
    public static TResponse ToResponse(WebException we, string actionDescription);
    private static string TryGetResponse(WebResponse response);
    public static TResponse ToResponse(Exception e, string actionDescription);
    [CompilerGeneratedAttribute]
internal static void <CreateRequest>g__SetCommonRequestParams|9_0(<>c__DisplayClass9_0& );
}
public class JetBrains.Application.License2.LicenseServerSupport.ClientVersions : object {
    public static int INITIAL_VERSION;
    public static int TOOLBOX_ACTIVATION_CODES_VERSION;
    public static int ACTIONS_IN_JBA_RESPONSE;
    public static int ACTIONS_IN_JBA_RESPONSE_CERTIFICATES_IN_FLS_RESPONSE;
    public static int CONSENT_OPTIONS_IN_GENERIC_DATA_REQUEST_RESPONSE;
    public static int SHA512_IN_JBA_RESPONSE;
    public static int EXTENDED_VALIDATE_KEY;
    public static int IDE_NOTIFICATIONS_VERSION;
    public static int LICENSE_SIZE_NO_RESTRICTION;
    public static int HAS_AUTH;
    public static int IDE_AUTH;
    public static int IDE_TRIAL_VIA_JBA;
    public static int ACTION_RELOGIN;
    public static int ANONYMOUS_TRIALS_VERSION;
    public static int LICENSE_ADDITIONAL_FIELDS_SUPPORT;
    public static int LV_SHA512_SIGNATURES_VERSION;
    public static int PROJECT_DATA_REQUEST;
    public static int AIP_TRIAL_REQUEST;
    public static int LATEST;
    private static ClientVersions();
}
public class JetBrains.Application.License2.LicenseServerSupport.CombinedResponseSignatureVerifier : object {
    private IResponseSignatureVerifier[] myVerifiers;
    public CombinedResponseSignatureVerifier(IResponseSignatureVerifier[] verifiers);
    public sealed virtual SignatureVerificationResult VerifySignature(string url, string xml, string signature);
}
public class JetBrains.Application.License2.LicenseServerSupport.GetPermanentActivationRequest : IntranetLicenseServerRequest`1<GetPermanentActivationResponse> {
    public string ProductFamilyId;
    public string Email;
    public string ActionName { get; }
    public GetPermanentActivationRequest(string productFamilyId, string email, string authorizationHeader);
    public GetPermanentActivationRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, string email, string authorizationHeader);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.GetPermanentActivationResponse : IntranetLicenseServerResponse {
    public GetPermanentActivationResponse(ResponseCode responseCode, string message, long salt);
    public virtual string ToString();
}
public interface JetBrains.Application.License2.LicenseServerSupport.ILicenseServerClient {
    public string LicenseServerUrl { get; }
    public string TicketId { get; }
    public abstract virtual LicenseServerResult DetectLicenseServer();
    public abstract virtual LicenseServerResult DetectLicenseServer(string serverUrl);
    public abstract virtual LicenseServerResult ObtainFloatingTicket(string productFamily, int version, string edition, DateTime buildDate, bool sendBuildDateAsVersionToOldServers);
    public abstract virtual LicenseServerResult ReleaseFloatingTicket();
    public abstract virtual LicenseServerResult RequestPermanentActivationCode(string productFamily, string email);
    public abstract virtual LicenseServerResult ObtainPermanentTicket(string productFamily, int version, string edition, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string email, string activationCode);
    public abstract virtual LicenseServerResult ReleasePermanentTicket();
    public abstract virtual LicenseServerResult CheckPermanentTicket(string productFamily, int version, string edition, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string ticketId);
    public abstract virtual string get_LicenseServerUrl();
    public abstract virtual string get_TicketId();
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.IntranetLicenseServerRequest`1 : AbstractRequest`1<TResponse> {
    public string HostName;
    public string UserName;
    public IResponseSignatureVerifier SignatureVerifier { get; }
    protected IntranetLicenseServerRequest`1(long salt, string machineId, string hostName, string userName);
    public virtual IResponseSignatureVerifier get_SignatureVerifier();
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.IntranetLicenseServerResponse : AbstractResponse {
    public string ServerUid;
    public string AuthorizationUrl;
    public string CodeExchangeUrl;
    public string AuthorizationClientId;
    protected IntranetLicenseServerResponse(ResponseCode responseCode, string message, long salt);
    [CanBeNullAttribute]
public AuthUrls TryGetAuthUrls();
}
public static class JetBrains.Application.License2.LicenseServerSupport.IntranetLicenseServerSignatureVerifier : object {
    private static UserLicenseService ourUserLicenseService;
    public static void Initialize(Lifetime lifetime, UserLicenseService userLicenseService);
    public static IResponseSignatureVerifier GetVerifier(IProperty`1<string> oldLicenseServerUrl);
}
public interface JetBrains.Application.License2.LicenseServerSupport.IPublicKeys {
    public int Radix { get; }
    public string EncriptionModulus { get; }
    public string EncriptionExponent { get; }
    public abstract virtual int get_Radix();
    public abstract virtual string get_EncriptionModulus();
    public abstract virtual string get_EncriptionExponent();
}
public interface JetBrains.Application.License2.LicenseServerSupport.IResponseSignatureVerifier {
    public abstract virtual SignatureVerificationResult VerifySignature(string url, string xml, string signature);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.AssetData : object {
    [CompilerGeneratedAttribute]
private string <AssetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicesedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SubscriptionEndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetectDuplicates>k__BackingField;
    [CompilerGeneratedAttribute]
private INewLicenseData <NewLicenseData>k__BackingField;
    public string AssetId { get; public set; }
    public string LicesedTo { get; public set; }
    public string ProductCode { get; public set; }
    public int ProductVersion { get; public set; }
    public DateTime SubscriptionEndDate { get; public set; }
    public string LicenseRestrictions { get; public set; }
    public bool DetectDuplicates { get; public set; }
    [CanBeNullAttribute]
public INewLicenseData NewLicenseData { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssetId();
    [CompilerGeneratedAttribute]
public void set_AssetId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicesedTo();
    [CompilerGeneratedAttribute]
public void set_LicesedTo(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductCode();
    [CompilerGeneratedAttribute]
public void set_ProductCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(int value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_SubscriptionEndDate();
    [CompilerGeneratedAttribute]
public void set_SubscriptionEndDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseRestrictions();
    [CompilerGeneratedAttribute]
public void set_LicenseRestrictions(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DetectDuplicates();
    [CompilerGeneratedAttribute]
public void set_DetectDuplicates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual INewLicenseData get_NewLicenseData();
    [CompilerGeneratedAttribute]
public void set_NewLicenseData(INewLicenseData value);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.AuthenticateResponse : AbstractResponse {
    public string UserId;
    public AuthenticateResponse(string userId);
    public AuthenticateResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.AuthProvider : object {
    private AuthProviderImagesCache myImagesCache;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ViaProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SvgLogoUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<TiImage> <ImageSourceProperty>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public string ViaProvider { get; }
    [NotNullAttribute]
public string SvgLogoUri { get; }
    [CanBeNullAttribute]
private TiImage ImageSource { get; private set; }
    [NotNullAttribute]
private IProperty`1<TiImage> ImageSourceProperty { get; }
    public AuthProvider(string name, string viaProvider, string svgLogoUri, AuthProviderImagesCache imagesCache);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ViaProvider();
    [CompilerGeneratedAttribute]
public string get_SvgLogoUri();
    private TiImage get_ImageSource();
    private void set_ImageSource(TiImage value);
    [CompilerGeneratedAttribute]
private IProperty`1<TiImage> get_ImageSourceProperty();
    [NotNullAttribute]
public IProperty`1<TiImage> TryGetImageSource();
    protected bool Equals(AuthProvider other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.AuthProviderImagesCache : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private WebProxySettingsReader myProxySettingsReader;
    private IThreading myThreading;
    private ConcurrentDictionary`2<string, TiImage> myFallbackImages;
    private ConcurrentDictionary`2<string, TiImage> myDownloadedImages;
    public AuthProviderImagesCache(Lifetime lifetime, ILogger logger, WebProxySettingsReader proxySettingsReader, IThreading threading);
    [CanBeNullAttribute]
public TiImage TryGetImageSource(string providerName);
    public Task LoadImageAsync(string providerName, string logoUri);
    [CanBeNullAttribute]
private TiImage TryLoadFallbackImage(string providerName);
    [CanBeNullAttribute]
private TiImage TryDownloadImage(string providerName, string logoUri);
    [CanBeNullAttribute]
private TiImage TryLoadImage(Stream stream);
}
public static class JetBrains.Application.License2.LicenseServerSupport.JBAccount.Blake2Utils : object {
    public static string CalculateBlake2Digest(string s);
    public static string CalculateBlake2Digest(Byte[] bytes);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest : JetBrainsLicenseServerRequest`1<ExchangeKeyResponse> {
    public string ProductCode;
    public string OldLicenseKey;
    public string FirstName;
    public string LastName;
    public string Email;
    public string ActionName { get; }
    public ExchangeKeyRequest(string oldLicenseKey, string firstName, string lastName, string email, string productCode);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyResponse : AbstractResponse {
    public string NewLicenseKey;
    public ExchangeKeyResponse(ResponseCode responseCode, string message, long salt);
}
public interface JetBrains.Application.License2.LicenseServerSupport.JBAccount.IAssetData {
    public string AssetId { get; }
    public string LicesedTo { get; }
    public string ProductCode { get; }
    public int ProductVersion { get; }
    public DateTime SubscriptionEndDate { get; }
    public string LicenseRestrictions { get; }
    public bool DetectDuplicates { get; }
    [CanBeNullAttribute]
public INewLicenseData NewLicenseData { get; }
    public abstract virtual string get_AssetId();
    public abstract virtual string get_LicesedTo();
    public abstract virtual string get_ProductCode();
    public abstract virtual int get_ProductVersion();
    public abstract virtual DateTime get_SubscriptionEndDate();
    public abstract virtual string get_LicenseRestrictions();
    public abstract virtual bool get_DetectDuplicates();
    public abstract virtual INewLicenseData get_NewLicenseData();
}
public interface JetBrains.Application.License2.LicenseServerSupport.JBAccount.IJetBrainsAccountConfig {
    public bool IsConfigLoaded { get; }
    public bool Enabled { get; }
    public ResponseCode ResponseCode { get; }
    [CanBeNullAttribute]
public string ErrorMessage { get; }
    public string AuthenticationUri { get; }
    public string LicenseServerUri { get; }
    public string ResetPasswordUri { get; }
    public string AboutJetbrainsAccountUri { get; }
    [CanBeNullAttribute]
public string ProfileUri { get; }
    [CanBeNullAttribute]
public JBAOAuthSettings OAuthSettings { get; }
    public abstract virtual bool get_IsConfigLoaded();
    public abstract virtual bool get_Enabled();
    public abstract virtual ResponseCode get_ResponseCode();
    public abstract virtual string get_ErrorMessage();
    public abstract virtual string get_AuthenticationUri();
    public abstract virtual string get_LicenseServerUri();
    public abstract virtual string get_ResetPasswordUri();
    public abstract virtual string get_AboutJetbrainsAccountUri();
    public abstract virtual string get_ProfileUri();
    public abstract virtual JBAOAuthSettings get_OAuthSettings();
}
public interface JetBrains.Application.License2.LicenseServerSupport.JBAccount.IJetBrainsLicenseServerAccess {
    [CanBeNullAttribute]
public JBAOAuthSettings OAuthSettings { get; }
    public abstract virtual JBAOAuthSettings get_OAuthSettings();
    public abstract virtual AuthenticateResponse TryAuthenticate(string jbAccount, string password);
    public abstract virtual JBAccountDetailsResponse TryGetUserDetails(string userId);
    public abstract virtual ObtainLicenseResponse TryGetAssets(string userId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    public abstract virtual ValidateLicenseResponse TryValidateAsset(string userId, string assetId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck, string licenseHash);
    public abstract virtual ValidateKeyResponse TryValidateKey(string licenseKey, string licenseHash, string productCode, int version, DateTime buildDate);
    public abstract virtual ExchangeKeyResponse TryExchangeKey(string oldLicenseKey, string firstName, string lastName, string email);
    public abstract virtual ObtainTrialResponse TryObtainTrialLicense(string userId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck, string checkedOptions, string ideLicenseId);
    public abstract virtual ObtainAnonTrialResponse TryObtainAnonymousTrialLicense(string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    public abstract virtual ObtainAgreementResponse TryObtainNewDocumentVersion(IDocumentThatRequiresUserConsent document, IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> getConsentOptionValues, string licenceId, string userId, string customProductCode);
    public abstract virtual GenericDataResponse TryObtainGenericData(string crlVersion, string blVersion, string licenceId, string userId);
    public abstract virtual IJetBrainsLicenseServerAccess CreateSandbox(string serverUri);
}
public interface JetBrains.Application.License2.LicenseServerSupport.JBAccount.IJetBrainsLicenseServerAccessor {
    [ObsoleteAttribute("Temporary. Will be removed")]
public string ProductCode { get; public set; }
    public ISimpleSignal Changed { get; }
    public abstract virtual string get_ProductCode();
    public abstract virtual void set_ProductCode(string value);
    public abstract virtual ISimpleSignal get_Changed();
    public abstract virtual IJetBrainsLicenseServerAccess Get();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JBAccountDetails : object {
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JbaLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserPicUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccountId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [JsonPropertyAttribute("full_name")]
[CanBeNullAttribute]
public string FullName { get; public set; }
    [JsonPropertyAttribute("jba_login")]
[CanBeNullAttribute]
public string JbaLogin { get; public set; }
    [JsonPropertyAttribute("email")]
[CanBeNullAttribute]
public string Email { get; public set; }
    [JsonPropertyAttribute("userpic_url")]
[CanBeNullAttribute]
public string UserPicUrl { get; public set; }
    [JsonPropertyAttribute("account_id")]
[CanBeNullAttribute]
public string AccountId { get; public set; }
    [JsonPropertyAttribute("user_id")]
[CanBeNullAttribute]
public string UserId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_JbaLogin();
    [CompilerGeneratedAttribute]
public void set_JbaLogin(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_UserPicUrl();
    [CompilerGeneratedAttribute]
public void set_UserPicUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AccountId();
    [CompilerGeneratedAttribute]
public void set_AccountId(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CanBeNullAttribute]
public static JBAccountDetails TryCreate(string json);
    [CanBeNullAttribute]
public static JBAccountDetails TryParseJWTToken(string idToken);
    public virtual string ToString();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JBAccountDetailsResponse : AbstractResponse {
    public JBAccountDetails AccountDetails;
    public JBAccountDetailsResponse(JBAccountDetails accountDetails);
    public JBAccountDetailsResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JBAOAuthSettings : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<AuthProvider> <AuthProviders>k__BackingField;
    [NotNullAttribute]
public string ClientId { get; }
    [NotNullAttribute]
public string Scope { get; }
    [NotNullAttribute]
public string AuthEndpoint { get; }
    [NotNullAttribute]
public string TokenEndpoint { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<AuthProvider> AuthProviders { get; }
    public JBAOAuthSettings(string clientId, string scope, string authEndpoint, string tokenEndpoint, IReadOnlyCollection`1<AuthProvider> authProviders);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public string get_AuthEndpoint();
    [CompilerGeneratedAttribute]
public string get_TokenEndpoint();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<AuthProvider> get_AuthProviders();
    protected bool Equals(JBAOAuthSettings other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsAccountConfig : object {
    private JetBrainsLicenseServerUriResponse myResponse;
    public bool IsConfigLoaded { get; }
    public bool Enabled { get; }
    public ResponseCode ResponseCode { get; }
    public string ErrorMessage { get; }
    public string AuthenticationUri { get; }
    public string LicenseServerUri { get; }
    public string ResetPasswordUri { get; }
    public string AboutJetbrainsAccountUri { get; }
    public string ProfileUri { get; }
    public JBAOAuthSettings OAuthSettings { get; }
    internal JetBrainsAccountConfig(JetBrainsLicenseServerUriResponse response);
    public sealed virtual bool get_IsConfigLoaded();
    public sealed virtual bool get_Enabled();
    public sealed virtual ResponseCode get_ResponseCode();
    public sealed virtual string get_ErrorMessage();
    public sealed virtual string get_AuthenticationUri();
    public sealed virtual string get_LicenseServerUri();
    public sealed virtual string get_ResetPasswordUri();
    public sealed virtual string get_AboutJetbrainsAccountUri();
    public sealed virtual string get_ProfileUri();
    public sealed virtual JBAOAuthSettings get_OAuthSettings();
    [NotNullAttribute]
public static JetBrainsLicenseServerUriResponse LoadConfig(StreamReader reader, AuthProviderImagesCache imagesCache);
    [CanBeNullAttribute]
private static JBAOAuthSettings TryLoadOAthSettings(XmlElement documentElement, AuthProviderImagesCache imagesCache);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsAccountConfigLoader : ConfigLoaderBase`1<IJetBrainsAccountConfig> {
    [CompilerGeneratedAttribute]
private AuthProviderImagesCache <authProviderImagesCache>P;
    public JetBrainsAccountConfigLoader(AuthProviderImagesCache authProviderImagesCache, JetBrainsAccountConfigReloadPolicy reloadPolicy);
    public virtual IJetBrainsAccountConfig TryLoadConfig(StreamReader streamReader);
    public virtual IJetBrainsAccountConfig GetNotLoadedValue(string reason);
    public virtual bool EqualConfigs(IJetBrainsAccountConfig c1, IJetBrainsAccountConfig c2);
    public virtual bool IsConfigLoaded(IJetBrainsAccountConfig config);
    public virtual string DumpConfig(IJetBrainsAccountConfig config);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsAccountConfigReloadPolicy : object {
    [CompilerGeneratedAttribute]
private OnConfigUriChangedBehavior <OnConfigUriChangedBehavior>k__BackingField;
    public OnConfigUriChangedBehavior OnConfigUriChangedBehavior { get; }
    public TimeSpan ReloadConfigInterval { get; }
    public JetBrainsAccountConfigReloadPolicy(ILogger logger, IEnumerable`1<ILicensedEntity> licensedEntities);
    [CompilerGeneratedAttribute]
public virtual OnConfigUriChangedBehavior get_OnConfigUriChangedBehavior();
    public virtual TimeSpan get_ReloadConfigInterval();
}
internal class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerAccess : object {
    [CompilerGeneratedAttribute]
private IJetBrainsAccountConfig <config>P;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <proxySettingsReader>P;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    public static string DisabledErrorMessage;
    public static string NetworkErrorMessage;
    public string ProductCode { get; public set; }
    public JBAOAuthSettings OAuthSettings { get; }
    public JetBrainsLicenseServerAccess(IJetBrainsAccountConfig config, WebProxySettingsReader proxySettingsReader);
    [CompilerGeneratedAttribute]
public string get_ProductCode();
    [CompilerGeneratedAttribute]
public void set_ProductCode(string value);
    [NotNullAttribute]
private TResponse Evaluate(Func`1<TResponse> func);
    public sealed virtual JBAOAuthSettings get_OAuthSettings();
    public sealed virtual AuthenticateResponse TryAuthenticate(string jbAccount, string password);
    public sealed virtual JBAccountDetailsResponse TryGetUserDetails(string userId);
    public sealed virtual ObtainLicenseResponse TryGetAssets(string userId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    public sealed virtual ValidateLicenseResponse TryValidateAsset(string userId, string assetId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck, string licenseHash);
    public sealed virtual ValidateKeyResponse TryValidateKey(string licenseKey, string licenseHash, string productCode, int version, DateTime buildDate);
    public sealed virtual ExchangeKeyResponse TryExchangeKey(string oldLicenseKey, string firstName, string lastName, string email);
    public sealed virtual ObtainTrialResponse TryObtainTrialLicense(string userId, string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck, string checkedOptions, string ideLicenseId);
    public sealed virtual ObtainAnonTrialResponse TryObtainAnonymousTrialLicense(string productCode, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    public sealed virtual ObtainAgreementResponse TryObtainNewDocumentVersion(IDocumentThatRequiresUserConsent document, IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptionValues, string licenceId, string userId, string customProductCode);
    public sealed virtual GenericDataResponse TryObtainGenericData(string crlVersion, string blVersion, string licenceId, string userId);
    public sealed virtual IJetBrainsLicenseServerAccess CreateSandbox(string serverUri);
}
[EnvironmentComponentAttribute("10")]
internal class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerAccessor : object {
    private WebProxySettingsReader myProxySettingsReader;
    private ConfigLoader`1<IJetBrainsAccountConfig> myConfigLoader;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    public string ProductCode { get; public set; }
    public ISimpleSignal Changed { get; }
    public JetBrainsLicenseServerAccessor(Lifetime lifetime, ILogger logger, WebProxySettingsReader proxySettingsReader, DataAccess dataAccess, ProductSettingsLocation productSettingsLocation, ICurrentRegion currentRegion, JetBrainsResourceMappingAccessor resourceMappingAccessor, IThreading threading, JetBrainsAccountConfigReloadPolicy configReloadPolicy);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProductCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Changed();
    public sealed virtual IJetBrainsLicenseServerAccess Get();
}
public abstract class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerRequest`1 : AbstractRequest`1<TResponse> {
    public string HostName;
    public string UserName;
    public IResponseSignatureVerifier SignatureVerifier { get; }
    protected JetBrainsLicenseServerRequest`1(long salt, string machineId);
    public virtual IResponseSignatureVerifier get_SignatureVerifier();
}
public static class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerSignatureVerifier : object {
    private static UserLicenseService ourUserLicenseService;
    public static void Initialize(Lifetime lifetime, UserLicenseService userLicenseService);
    public static IResponseSignatureVerifier GetVerifier();
}
internal class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerUriResponse : AbstractResponse {
    [CompilerGeneratedAttribute]
private string <AuthenticationUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseServerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResetPasswordUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AboutJetbrainsAccountdUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileUri>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastSyncTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private JBAOAuthSettings <OAuthSettings>k__BackingField;
    [CanBeNullAttribute]
public string AuthenticationUri { get; public set; }
    [CanBeNullAttribute]
public string LicenseServerUri { get; public set; }
    [CanBeNullAttribute]
public string ResetPasswordUri { get; public set; }
    [CanBeNullAttribute]
public string AboutJetbrainsAccountdUri { get; public set; }
    [CanBeNullAttribute]
public string ProfileUri { get; public set; }
    public long LastSyncTicks { get; public set; }
    [CanBeNullAttribute]
public JBAOAuthSettings OAuthSettings { get; public set; }
    public JetBrainsLicenseServerUriResponse(ResponseCode responseCode, string message, long salt);
    [CompilerGeneratedAttribute]
public string get_AuthenticationUri();
    [CompilerGeneratedAttribute]
public void set_AuthenticationUri(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseServerUri();
    [CompilerGeneratedAttribute]
public void set_LicenseServerUri(string value);
    [CompilerGeneratedAttribute]
public string get_ResetPasswordUri();
    [CompilerGeneratedAttribute]
public void set_ResetPasswordUri(string value);
    [CompilerGeneratedAttribute]
public string get_AboutJetbrainsAccountdUri();
    [CompilerGeneratedAttribute]
public void set_AboutJetbrainsAccountdUri(string value);
    [CompilerGeneratedAttribute]
public string get_ProfileUri();
    [CompilerGeneratedAttribute]
public void set_ProfileUri(string value);
    [CompilerGeneratedAttribute]
public long get_LastSyncTicks();
    [CompilerGeneratedAttribute]
public void set_LastSyncTicks(long value);
    [CompilerGeneratedAttribute]
public JBAOAuthSettings get_OAuthSettings();
    [CompilerGeneratedAttribute]
public void set_OAuthSettings(JBAOAuthSettings value);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.JetBrainsLicenseServerUserNotification : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Pair`2<string, string>> <Actions>k__BackingField;
    [NotNullAttribute]
public string Title { get; }
    [NotNullAttribute]
public string Message { get; }
    public NotificationSeverity Severity { get; }
    [NotNullAttribute]
public IReadOnlyList`1<Pair`2<string, string>> Actions { get; }
    public string NotificationTitle { get; }
    public string NotificationBody { get; }
    public IEnumerable`1<Pair`2<string, string>> UrisToOpen { get; }
    public IEnumerable`1<Pair`2<string, Action>> AdditionalCommands { get; }
    public JetBrainsLicenseServerUserNotification(NotificationSeverity severity, string title, string message, IReadOnlyList`1<Pair`2<string, string>> actions);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Pair`2<string, string>> get_Actions();
    [CanBeNullAttribute]
public static JetBrainsLicenseServerUserNotification TryParse(string msg);
    protected bool Equals(JetBrainsLicenseServerUserNotification other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToTextWithHyperlinks();
    public sealed virtual string get_NotificationTitle();
    public sealed virtual string get_NotificationBody();
    public sealed virtual IEnumerable`1<Pair`2<string, string>> get_UrisToOpen();
    public sealed virtual IEnumerable`1<Pair`2<string, Action>> get_AdditionalCommands();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainAnonTrialRequest : JetBrainsLicenseServerRequest`1<ObtainAnonTrialResponse> {
    public string ProductCode;
    public string Edition;
    public int Version;
    public int BuildDate;
    public string ActionName { get; }
    public ObtainAnonTrialRequest(string productCode, string edition, int version, DateTime buildDate);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainAnonTrialResponse : AbstractResponse {
    public EncodedAsset Asset;
    public ObtainAnonTrialResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseRequest : JetBrainsLicenseServerRequest`1<ObtainLicenseResponse> {
    public string UserId;
    public string ProductCode;
    public string Edition;
    public int Version;
    public int BuildDate;
    public string ActionName { get; }
    public ObtainLicenseRequest(string userId, string productCode, string edition, int version, DateTime buildDate);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseResponse : AbstractResponse {
    public long ValidationPeriod;
    public List`1<EncodedAsset> Assets;
    public long ValidationDeadlinePeriod;
    public ObtainLicenseResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest : JetBrainsLicenseServerRequest`1<ObtainTrialResponse> {
    public string UserId;
    public string ProductCode;
    public string Edition;
    public int Version;
    public int BuildDate;
    public string CheckedOptions;
    [CanBeNullAttribute]
public string IdeLicenseId;
    public string ActionName { get; }
    public ObtainTrialRequest(string userId, string productCode, string edition, int version, DateTime buildDate, string checkedOption, string ideLicenseId);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialResponse : AbstractResponse {
    public EncodedAsset Asset;
    public RejectedReason TrialRejectedReason;
    public ObtainTrialResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.RSADecoder : object {
    private static Byte[] EMPTY_BYTE_ARRAY;
    private BigInteger myDigitsMod;
    private BigInteger myPublicExponent;
    private BigInteger myPublicModulus;
    private int myDigitsPerChunk;
    public RSADecoder(BigInteger publicExponent, BigInteger publicModulus);
    protected RSADecoder(BigInteger publicExponent, BigInteger publicModulus, int alphabetSize);
    private static RSADecoder();
    public Byte[] Decode(string data);
    private static BigInteger DecodeChar(char c);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyRequest : JetBrainsLicenseServerRequest`1<ValidateKeyResponse> {
    public string ProductCode;
    public string LicenseKey;
    public string LicenseHash;
    public int Version;
    public int BuildDate;
    public string ActionName { get; }
    public ValidateKeyRequest(string licenseKey, string licenseHash, string productCode, int version, DateTime buildDate);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyResponse : AbstractResponse {
    public long ValidationPeriod;
    public string NewLicenseKey;
    public ValidateKeyResponse(long validationPeriod);
    public ValidateKeyResponse(ResponseCode responseCode, string message, long salt, long validationPeriod);
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest : JetBrainsLicenseServerRequest`1<ValidateLicenseResponse> {
    public string UserId;
    public string AssetId;
    public string ProductCode;
    public string Edition;
    public int Version;
    public int BuildDate;
    public string licenseHash;
    public string ActionName { get; }
    public ValidateLicenseRequest(string userId, string assetId, string productCode, string edition, int version, DateTime buildDate, string licenseHash);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseResponse : AbstractResponse {
    public long ValidationPeriod;
    public long ValidationDeadlinePeriod;
    public string NewEncodedAsset;
    public ValidateLicenseResponse(long validationPeriod);
    public ValidateLicenseResponse(ResponseCode responseCode, string message, long salt, long validationPeriod);
}
public enum JetBrains.Application.License2.LicenseServerSupport.LicenseAction : Enum {
    public int value__;
    public static LicenseAction NONE;
    public static LicenseAction WARN;
    public static LicenseAction REVOKE;
    public static LicenseAction RELOGIN;
}
public static class JetBrains.Application.License2.LicenseServerSupport.LicenseServerPayloadVerificationUtil : object {
    private static string SERVER_UID_PREFIX;
    private static string SERVER_UID_SUFFIX;
    public static bool VerifyPayload(string xml, X509Certificate2 signCert);
}
public class JetBrains.Application.License2.LicenseServerSupport.LicenseServerResult : ValueType {
    [NotNullAttribute]
public ResponseCode ResponseCode;
    [NotNullAttribute]
public string Message;
    [CanBeNullAttribute]
public Exception Exception;
    public static LicenseServerResult Success;
    public bool Successful { get; }
    private LicenseServerResult(ResponseCode success, string message, Exception exception);
    private static LicenseServerResult();
    public bool get_Successful();
    public static LicenseServerResult Error(string message);
    public static LicenseServerResult NetworkError(string message);
    public static LicenseServerResult Error(AbstractResponse response);
    public static LicenseServerResult Error(string message, Exception e);
}
public class JetBrains.Application.License2.LicenseServerSupport.LicenseServerX509WithSha1ResponseSignatureVerifier : X509WithSha1ResponseSignatureVerifier {
    public LicenseServerX509WithSha1ResponseSignatureVerifier(X509Certificate2 rootCertificate, Func`1<CertificateRevocationList> getCurrentCrl, bool checkCertificateTimeValidity);
    protected virtual bool VerifyPayload(string xml, X509Certificate2 signCert);
}
public class JetBrains.Application.License2.LicenseServerSupport.LicenseServerX509WithSha512ResponseSignatureVerifier : X509WithSha512ResponseSignatureVerifier {
    public LicenseServerX509WithSha512ResponseSignatureVerifier(X509Certificate2 rootCertificate, Func`1<CertificateRevocationList> getCurrentCrl, bool checkCertificateTimeValidity);
    protected virtual bool VerifyPayload(string xml, X509Certificate2 signCert);
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketGroupRequest : AbstractObtainTicketRequest`1<ObtainPermanentTicketGroupResponse> {
    public string Email;
    public string ActivationCode;
    public string ProductSelectors;
    public string ActionName { get; }
    public ObtainPermanentTicketGroupRequest(string email, string activationCode, ICollection`1<ProductSelector> productSelectors, string authorizationHeader);
    public ObtainPermanentTicketGroupRequest(long salt, string machineId, string hostName, string userName, string email, string activationCode, IList`1<ProductSelector> productSelectors, string authorizationHeader);
    public virtual string get_ActionName();
    private static string GetProductFamilyIds(IEnumerable`1<ProductSelector> productSelectors);
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketGroupResponse : IntranetLicenseServerResponse {
    public List`1<ObtainedTicket> Tickets;
    public ObtainPermanentTicketGroupResponse(ResponseCode responseCode, string message, long salt);
    public virtual string ToString();
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketRequest : AbstractObtainTicketRequest`1<ObtainPermanentTicketResponse> {
    public string Email;
    public string ActivationCode;
    public string ActionName { get; }
    public ObtainPermanentTicketRequest(string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string email, string activationCode, string authorizationHeader);
    public ObtainPermanentTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string email, string activationCode, string authorizationHeader);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainPermanentTicketResponse : IntranetLicenseServerResponse {
    public string TicketId;
    public string TicketProperties;
    public ObtainPermanentTicketResponse(ResponseCode responseCode, string message, long salt, string ticketId, string ticketProperties);
    public virtual string ToString();
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainTicketRequest : AbstractObtainTicketRequest`1<ObtainTicketResponse> {
    public static IProperty`1<string> OldLicenseServerUrl;
    public static string ObtainTicketActionName;
    public string ActionName { get; }
    public IResponseSignatureVerifier SignatureVerifier { get; }
    public ObtainTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string authorizationHeader);
    public ObtainTicketRequest(string productFamilyId, int version, DateTime buildDate, bool sendBuildDateAsVersionToOldServers, string edition, string authorizationHeader);
    private static ObtainTicketRequest();
    public virtual string get_ActionName();
    public virtual IResponseSignatureVerifier get_SignatureVerifier();
}
public class JetBrains.Application.License2.LicenseServerSupport.ObtainTicketResponse : IntranetLicenseServerResponse {
    public string TicketId;
    public string TicketProperties;
    public long ProlongationPeriod;
    public ObtainTicketResponse(string ticketId, ResponseCode responseCode, string ticketProperties, string message, long salt);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicenseServerSupport.ObtainTicketResponseEx : object {
    public static string LICENSEE_PROPERTY;
    public static string LICENSE_TYPE_PROPERTY;
    public static string MAINTENANCE_DUE_PROPERTY;
    public static string METADATA_PROPERTY;
    public static string ADDITIONAL_PLUGINS_PROPERTY;
    [ExtensionAttribute]
[NotNullAttribute]
public static IDictionary`2<string, string> ParseTicketProperties(ObtainTicketResponse response);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetLicensee(IDictionary`2<string, string> ticketProperties);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetLicenseType(IDictionary`2<string, string> ticketProperties);
    [ExtensionAttribute]
public static LicenseMetadata GetLicenseMetadata(IDictionary`2<string, string> ticketProperties);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string TryGetPlugins(IDictionary`2<string, string> ticketProperties);
    [ExtensionAttribute]
public static LicenseMetadata GetLicenseMetadata(ObtainTicketResponse response);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string TryGetPropertyValue(ObtainTicketResponse response, string propertyName);
}
public class JetBrains.Application.License2.LicenseServerSupport.OldLicenseServerResponseSignatureVerifier : PublicKeysResponseSignatureVerifier {
    [CanBeNullAttribute]
private IProperty`1<string> myOldLicenseServerUrl;
    public OldLicenseServerResponseSignatureVerifier(IPublicKeys publicKeys, IProperty`1<string> oldLicenseServerUrl);
    public virtual SignatureVerificationResult VerifySignature(string url, string xml, string signature);
}
public enum JetBrains.Application.License2.LicenseServerSupport.ParameterValueType : Enum {
    public int value__;
    public static ParameterValueType RAW;
    public static ParameterValueType ENCODED;
}
public class JetBrains.Application.License2.LicenseServerSupport.PingRequest : IntranetLicenseServerRequest`1<PingResponse> {
    public string ActionName { get; }
    public PingRequest(string authorizationHeader);
    public PingRequest(long salt, string machineId, string hostName, string userName, string authorizationHeader);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.PingResponse : IntranetLicenseServerResponse {
    public PingResponse(ResponseCode responseCode, string message, long salt);
}
public class JetBrains.Application.License2.LicenseServerSupport.ProductSelector : object {
    public string ProductFamilyId;
    public int Version;
    public int BuildDate;
    public string Edition;
    public ProductSelector(string productFamilyId, int version, DateTime buildDate, string edition);
    public virtual string ToString();
    protected bool Equals(ProductSelector other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.License2.LicenseServerSupport.ProlongTicketRequest : IntranetLicenseServerRequest`1<ProlongTicketResponse> {
    public string TicketId;
    public string ProductFamilyId;
    public string ActionName { get; }
    public ProlongTicketRequest(string ticketId, string productFamilyId, string authorizationHeader);
    public ProlongTicketRequest(long salt, string machineId, string hostName, string userName, string ticketId, string productFamilyId, string authorizationHeader);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.ProlongTicketResponse : IntranetLicenseServerResponse {
    public string TicketId;
    public ProlongTicketResponse(ResponseCode responseCode, string message, long salt, string ticketId);
    public virtual string ToString();
}
public static class JetBrains.Application.License2.LicenseServerSupport.PublicKeys : object {
    public static IPublicKeys JetBrainsLicenseServer;
    public static IPublicKeys IntranetLicenseServer;
    public static IPublicKeys Asset;
    public static string SIG_START;
    public static string SIG_END;
    private static PublicKeys();
}
public class JetBrains.Application.License2.LicenseServerSupport.PublicKeysResponseSignatureVerifier : object {
    private IPublicKeys myPublicKeys;
    public PublicKeysResponseSignatureVerifier(IPublicKeys publicKeys);
    public virtual SignatureVerificationResult VerifySignature(string url, string xml, string signature);
}
public class JetBrains.Application.License2.LicenseServerSupport.ReleaseTicketRequest : IntranetLicenseServerRequest`1<ReleaseTicketResponse> {
    public string ProductFamilyId;
    public string TicketId;
    public string ActionName { get; }
    public ReleaseTicketRequest(string productFamilyId, string ticketId, string authorizationHeader);
    public ReleaseTicketRequest(long salt, string machineId, string hostName, string userName, string productFamilyId, string ticketId, string authorizationHeader);
    public virtual string get_ActionName();
}
public class JetBrains.Application.License2.LicenseServerSupport.ReleaseTicketResponse : IntranetLicenseServerResponse {
    public ReleaseTicketResponse(ResponseCode responseCode, string message, long salt);
}
public enum JetBrains.Application.License2.LicenseServerSupport.ResponseCode : Enum {
    public int value__;
    public static ResponseCode OK;
    public static ResponseCode ERROR;
    public static ResponseCode NETWORK_ERROR;
    public static ResponseCode SERVER_INTERNAL_ERROR;
}
public class JetBrains.Application.License2.LicenseServerSupport.ServicePointManagerEx : object {
    private static object ourLockObject;
    private static int ourEnsureCount;
    private static RemoteCertificateValidationCallback ourOldCertificateValidationCallback;
    private static bool ourOldExpect100Continue;
    private static SecurityProtocolType ourOldSecurityProtocol;
    private static ILogger Logger { get; }
    private static ServicePointManagerEx();
    private static ILogger get_Logger();
    public static void EnsureParameters(Lifetime lifetime, string text, bool expect100Continue, SecurityProtocolType securityProtocolType, RemoteCertificateValidationCallback certificateValidationCallback);
}
public enum JetBrains.Application.License2.LicenseServerSupport.SignatureVerificationResult : Enum {
    public int value__;
    public static SignatureVerificationResult OK;
    public static SignatureVerificationResult INVALID_SIGNATURE;
    public static SignatureVerificationResult REVOKED_CERTIFICATE;
    public static SignatureVerificationResult EXPIRED_CERTIFICATE;
    public static SignatureVerificationResult FIPS_NOT_SUPPORTED;
}
public class JetBrains.Application.License2.LicenseServerSupport.SynchronizedLifetimeDefinitionForLicenseServerClient : object {
    private LifetimeDefinition myLifetimeDefinition;
    private bool myIsTerminateReqested;
    private bool myActionIsInProgress;
    private bool myIsTerminating;
    public bool IsTerminated { get; }
    public SynchronizedLifetimeDefinitionForLicenseServerClient(string id);
    public SynchronizedLifetimeDefinitionForLicenseServerClient(string id, Lifetime otherThreadLifetime);
    public void Terminate();
    private void TerminateImpl();
    public bool DoIfAlive(Action`1<Lifetime> action);
    public bool get_IsTerminated();
    [CompilerGeneratedAttribute]
private void <TerminateImpl>b__7_0();
}
public class JetBrains.Application.License2.LicenseServerSupport.UrlBuilder : object {
    private string myBaseUrl;
    private OrderedDictionary`2<string, ParameterValue> myParameters;
    public UrlBuilder(string baseUrl, ParameterValueType parameterValueType);
    public UrlBuilder AddParameter(string name, object value, ParameterValueType valueType);
    public UrlBuilder SetParameter(string name, object value, ParameterValueType valueType);
    private static ParameterValue CreateParameterValue(string value, ParameterValueType valueType);
    public virtual string ToString();
}
public class JetBrains.Application.License2.LicenseServerSupport.X509ResponseSignatureVerifier : object {
    private X509Certificate2 myRootCertificate;
    private Func`1<CertificateRevocationList> myGetCurrentCrl;
    private string mySignaturePrefix;
    private HashAlgorithmName myHashAlgorithm;
    private bool myCheckCertificateTimeValidity;
    private static char SEPARATOR;
    public X509ResponseSignatureVerifier(X509Certificate2 rootCertificate, Func`1<CertificateRevocationList> getCurrentCrl, string signaturePrefix, HashAlgorithmName hashAlgorithm, bool checkCertificateTimeValidity);
    public sealed virtual SignatureVerificationResult VerifySignature(string url, string xml, string signatureString);
    protected virtual bool VerifyPayload(string xml, X509Certificate2 signCert);
    [CanBeNullAttribute]
private X509Certificate2 TryGetVerifiedSignCert(string xml, string signatureString, SignatureVerificationResult& verificationResult);
}
public class JetBrains.Application.License2.LicenseServerSupport.X509WithSha1ResponseSignatureVerifier : X509ResponseSignatureVerifier {
    public X509WithSha1ResponseSignatureVerifier(X509Certificate2 rootCertificate, Func`1<CertificateRevocationList> getCurrentCrl, bool checkCertificateTimeValidity);
}
public class JetBrains.Application.License2.LicenseServerSupport.X509WithSha512ResponseSignatureVerifier : X509ResponseSignatureVerifier {
    public X509WithSha512ResponseSignatureVerifier(X509Certificate2 rootCertificate, Func`1<CertificateRevocationList> getCurrentCrl, bool checkCertificateTimeValidity);
}
public class JetBrains.Application.License2.LicenseServerSupport.XPublicKeys : ValueType {
    [CompilerGeneratedAttribute]
private int <Radix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncriptionModulus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncriptionExponent>k__BackingField;
    public int Radix { get; public set; }
    public string EncriptionModulus { get; public set; }
    public string EncriptionExponent { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_Radix();
    [CompilerGeneratedAttribute]
public void set_Radix(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_EncriptionModulus();
    [CompilerGeneratedAttribute]
public void set_EncriptionModulus(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_EncriptionExponent();
    [CompilerGeneratedAttribute]
public void set_EncriptionExponent(string value);
}
public class JetBrains.Application.License2.LicenseViewModel : object {
    private Lifetime myLifetime;
    private ZoneUserPreferenceChecker myZoneUserPreferenceChecker;
    private LicenseCheckResult`1<ILicenseViewSubmodel> myCheckResult;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ILicenseData <OriginalLicenseData>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <DataNeedsToBesSaved>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ILicensedEntity> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicenseViewSubmodel> <Submodels>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ResultWithDescription> <OverallStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLicenseDataCache <NewLicenseDataCache>k__BackingField;
    [CompilerGeneratedAttribute]
private EnvironmentDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastTimeAllEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> <LastTimeEnabledEntities>k__BackingField;
    public string Name { get; }
    public ILicenseData OriginalLicenseData { get; }
    public ISimpleSignal DataNeedsToBesSaved { get; }
    public IReadOnlyList`1<ILicensedEntity> Entities { get; }
    public IEnumerable`1<ILicenseViewSubmodel> Submodels { get; }
    public IProperty`1<ResultWithDescription> OverallStatus { get; }
    public NewLicenseDataCache NewLicenseDataCache { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public EnvironmentDependencies Dependencies { get; }
    private IEnumerable`1<ILicensedEntity> LastTimeAllEntities { get; private set; }
    private IEnumerable`1<ILicensedEntity> LastTimeEnabledEntities { get; private set; }
    public LicenseViewModel(Lifetime parentLifetime, ILogger logger, string name, ILicenseData data, IReadOnlyList`1<ILicensedEntity> entities, IList`1<Func`4<Lifetime, string, ILicenseData, ILicenseViewSubmodel>> submodelBuilders, NewLicenseDataCache newLicenseDataCache, EnvironmentDependencies dependencies, ZoneUserPreferenceChecker zoneUserPreferenceChecker);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ILicenseData get_OriginalLicenseData();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_DataNeedsToBesSaved();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ILicensedEntity> get_Entities();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ILicenseViewSubmodel> get_Submodels();
    [CompilerGeneratedAttribute]
public IProperty`1<ResultWithDescription> get_OverallStatus();
    [CompilerGeneratedAttribute]
public NewLicenseDataCache get_NewLicenseDataCache();
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    public bool IsEntityDisabledByUserPreferences(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
public EnvironmentDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> get_LastTimeAllEntities();
    [CompilerGeneratedAttribute]
private void set_LastTimeAllEntities(IEnumerable`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicensedEntity> get_LastTimeEnabledEntities();
    [CompilerGeneratedAttribute]
private void set_LastTimeEnabledEntities(IEnumerable`1<ILicensedEntity> value);
    internal void ResetRecentEntitiesList();
    public void RefreshOverallStatus();
    private void AddSubmodel(Lifetime submodelLifetime, TSubmodel submodel);
    private void UpdateSubmodelResults(TSubmodel submodel);
    [CanBeNullAttribute]
public TSubmodel TryGetSubmodel();
    private ResultWithDescription CalculateOverallStatus();
    [CompilerGeneratedAttribute]
private void <.ctor>b__42_0(bool args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__42_1();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.License2.LicenseViewModelBuilder : object {
    private Lifetime myLifetime;
    private EnvironmentDependencies myDependencies;
    private IImmutableList`1<ILicensedEntity> myLicensedEntities;
    private IJetBrainsLicenseServerAccessor myLicenseServerAccessor;
    private EvaluationTracker myEvaluationTracker;
    private UserLicenseService myUserLicenseService;
    private ISessionSwitchHandler mySessionSwitchHandler;
    private ZoneUserPreferenceChecker myZoneUserPreferenceChecker;
    [CanBeNullAttribute]
private JetBrainsResourceMappingAccessor myResourceMappingAccessor;
    private ProductSettingsLocation myProductSettingsLocation;
    private DataAccess myDataAccess;
    [CompilerGeneratedAttribute]
private bool <IsSandbox>k__BackingField;
    public IReadOnlyList`1<ILicensedEntity> LicensedEntities { get; }
    private bool IsSandbox { get; private set; }
    public LicenseViewModelBuilder(Lifetime lifetime, ILogger logger, IImmutableList`1<ILicensedEntity> licensedEntities, IThreading threading, IJetBrainsLicenseServerAccessor licenseServerAccessor, EvaluationTracker evaluationTracker, WebProxySettingsReader proxySettingsReader, UserNotifications userNotifications, SuspendResume suspendResume, UserLicenseService userLicenseService, OpensUri opensUri, IWindowBranding windowBranding, ProductSettingsLocation productSettingsLocation, DataAccess dataAccess, ISessionSwitchHandler sessionSwitchHandler, ZoneUserPreferenceChecker zoneUserPreferenceChecker, JetBrainsResourceMappingAccessor resourceMappingAccessor);
    public IReadOnlyList`1<ILicensedEntity> get_LicensedEntities();
    public LicenseViewModel CreateModel(Lifetime modelLifetime, string name, ILicenseData data, ILicense2CheckComponent license2CheckComponent);
    private static string CalculateIdeProductCode(IReadOnlyList`1<ILicensedEntity> licensedEntities);
    private IList`1<Func`4<Lifetime, string, ILicenseData, ILicenseViewSubmodel>> CreateSubmodelBuilders(ILicense2CheckComponent license2CheckComponent, NewLicenseDataCache newLicenseDataCache);
    [CompilerGeneratedAttribute]
private bool get_IsSandbox();
    [CompilerGeneratedAttribute]
private void set_IsSandbox(bool value);
    public LicenseViewModelBuilder CreateSandbox(Lifetime lifetime, string jbaLicenseServerUri);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.LicenseViewModelEx : object {
    [ExtensionAttribute]
public static bool RequiresLicense(LicenseViewModel model);
    [ExtensionAttribute]
public static IEnumerable`1<INewLicenseData> GetAllLicenses(LicenseViewModel model);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetAvailableTrials(LicenseViewModel model);
}
public class JetBrains.Application.License2.NewLicenses.BlackList : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    private Lazy`1<IList`1<Regex>> myRegexes;
    public static BlackList Empty;
    public int Version { get; }
    public BlackList(int version, string masks);
    private static BlackList();
    [CompilerGeneratedAttribute]
public int get_Version();
    public bool IsBlacklisted(string url);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.License2.NewLicenses.BlackListAndCrl : object {
    [CompilerGeneratedAttribute]
private IProperty`1<Ids> <UserIds>k__BackingField;
    private Certificates myCertificates;
    private Lazy`1<CertificateRevocationList> myBuiltInCrl;
    private Lazy`1<BlackList> myBuiltInBlackList;
    [CanBeNullAttribute]
private CertificateRevocationList myDownloadedCrl;
    [CanBeNullAttribute]
private BlackList myDownloadedBlackList;
    public IProperty`1<Ids> UserIds { get; }
    [NotNullAttribute]
public CertificateRevocationList Crl { get; }
    [NotNullAttribute]
public BlackList BlackList { get; }
    public BlackListAndCrl(Lifetime lifetime, IJetBrainsLicenseServerAccessor jetBrainsLicenseServerAccessor, Certificates certificates, IThreading threading, ILogger logger, DataAccess dataAccess);
    [CompilerGeneratedAttribute]
public IProperty`1<Ids> get_UserIds();
    public CertificateRevocationList get_Crl();
    public BlackList get_BlackList();
    [NotNullAttribute]
private BlackList LoadBuiltInBlackList();
    [NotNullAttribute]
private CertificateRevocationList LoadBuiltInCrl();
    private T Decode(string response, CertificateRevocationList crl, Func`3<int, string, T> fetchData);
    [CanBeNullAttribute]
private BlackList DecodeBl(string responseBl);
    [CanBeNullAttribute]
private CertificateRevocationList DecodeCrl(string responseCrl, CertificateRevocationList crl);
}
public class JetBrains.Application.License2.NewLicenses.CertificateRevocationList : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<RevokedCertificate> <RevokedCertificates>k__BackingField;
    public static CertificateRevocationList Empty;
    public int Version { get; }
    public ISet`1<RevokedCertificate> RevokedCertificates { get; }
    private CertificateRevocationList(int version);
    public CertificateRevocationList(int version, Stream crlStream);
    public CertificateRevocationList(int version, string crlText);
    private static CertificateRevocationList();
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public ISet`1<RevokedCertificate> get_RevokedCertificates();
    private ISet`1<RevokedCertificate> LoadFromStream(Stream crlStream);
    private static IList`1<RevokedCertificate> GetRevokedCertificates(Byte[] crlBytes);
    private static IList`1<Byte[]> GetCrlBytes(Stream crlStream);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.License2.NewLicenses.Certificates : object {
    [CompilerGeneratedAttribute]
private Lazy`1<X509Certificate2> <RootCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<X509Certificate2> <LicenseServerRootCertificate>k__BackingField;
    [NotNullAttribute]
public Lazy`1<X509Certificate2> RootCertificate { get; }
    [NotNullAttribute]
public Lazy`1<X509Certificate2> LicenseServerRootCertificate { get; }
    [CompilerGeneratedAttribute]
public Lazy`1<X509Certificate2> get_RootCertificate();
    [CompilerGeneratedAttribute]
public Lazy`1<X509Certificate2> get_LicenseServerRootCertificate();
    [NotNullAttribute]
private X509Certificate2 LoadCertificate(string fileName, string thumbprint);
    [CompilerGeneratedAttribute]
private X509Certificate2 <.ctor>b__6_0();
    [CompilerGeneratedAttribute]
private X509Certificate2 <.ctor>b__6_1();
}
public class JetBrains.Application.License2.NewLicenses.CollectionOfProductDataJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public interface JetBrains.Application.License2.NewLicenses.INewLicenseData {
    public string LicenseId { get; }
    public string LicenseeName { get; }
    public string LicenseeType { get; }
    public string AssigneeName { get; }
    public string AssigneeEmail { get; }
    public string LicenseRestriction { get; }
    public bool CheckConcurrentUse { get; }
    public bool AutoProlongated { get; }
    public string Hash { get; }
    public int GracePeriodDays { get; }
    public IReadOnlyList`1<IProductData> Products { get; }
    public string Metadata { get; }
    public bool Trial { get; }
    public bool AiAllowed { get; }
    public abstract virtual string get_LicenseId();
    public abstract virtual string get_LicenseeName();
    public abstract virtual string get_LicenseeType();
    public abstract virtual string get_AssigneeName();
    public abstract virtual string get_AssigneeEmail();
    public abstract virtual string get_LicenseRestriction();
    public abstract virtual bool get_CheckConcurrentUse();
    public abstract virtual bool get_AutoProlongated();
    public abstract virtual string get_Hash();
    public abstract virtual int get_GracePeriodDays();
    public abstract virtual IReadOnlyList`1<IProductData> get_Products();
    public abstract virtual string get_Metadata();
    public abstract virtual bool get_Trial();
    public abstract virtual bool get_AiAllowed();
}
public interface JetBrains.Application.License2.NewLicenses.IProductData {
    public string Code { get; }
    public DateTime FallbackDate { get; }
    public DateTime PaidUpTo { get; }
    public DateTime ShutdownTime { get; }
    public abstract virtual string get_Code();
    public abstract virtual DateTime get_FallbackDate();
    public abstract virtual DateTime get_PaidUpTo();
    public abstract virtual DateTime get_ShutdownTime();
    public abstract virtual ProductDataApplicability CheckApplicability(DateTime now, DateTime buildDate, int gracePeriodDays, bool isAutoProlongated);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.License2.NewLicenses.LicenseMetadata : ValueType {
    [CompilerGeneratedAttribute]
private string <RawString>k__BackingField;
    public string RawString { get; }
    public int Version { get; }
    public DateTime GenerationDate { get; }
    public string LicenseTypeString { get; }
    public string LicenseKindString { get; }
    public string ActivationTypeString { get; }
    public string BillingPeriodString { get; }
    public string LicenseAgeString { get; }
    public string LicenseExpirationString { get; }
    public string PackTypeString { get; }
    public bool IsValid { get; }
    public LicenseMetadata(string rawString);
    [CompilerGeneratedAttribute]
public string get_RawString();
    public int get_Version();
    public DateTime get_GenerationDate();
    public string get_LicenseTypeString();
    public string get_LicenseKindString();
    public string get_ActivationTypeString();
    public string get_BillingPeriodString();
    public string get_LicenseAgeString();
    public string get_LicenseExpirationString();
    public string get_PackTypeString();
    public bool get_IsValid();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.NewLicenses.LicenseMetadataEx : object {
    [ExtensionAttribute]
public static bool IsAnonymousTrialLicense(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsNamedTrialLicense(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsPaidLicense(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsCommercial(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsPersonal(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsStudent(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsOpenSource(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsClassroom(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsFreeHobby(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsLicensePack(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsSingleProduct(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsLicenseKindUnavailable(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsActivatedByJBA(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsActivatedByCode(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsActivatedByFLS(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsActivatedByAnonymousTrial(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsBilledAnnually(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsBilledMonthly(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsSubscriptionStopped(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsBillingNotApplicable(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsAllProductsPack(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsDotUltimate(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsStudentPack(LicenseMetadata metadata);
    [ExtensionAttribute]
public static bool IsNotPack(LicenseMetadata metadata);
}
public class JetBrains.Application.License2.NewLicenses.NewLicenseData : object {
    [CompilerGeneratedAttribute]
private string <LicenseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssigneeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssigneeEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseRestriction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckConcurrentUse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoProlongated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GracePeriodDays>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IProductData> <Products>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trial>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AiAllowed>k__BackingField;
    public string LicenseId { get; public set; }
    public string LicenseeName { get; public set; }
    public string LicenseeType { get; public set; }
    public string AssigneeName { get; public set; }
    public string AssigneeEmail { get; public set; }
    public string LicenseRestriction { get; public set; }
    public bool CheckConcurrentUse { get; public set; }
    public bool AutoProlongated { get; public set; }
    public string Hash { get; public set; }
    public int GracePeriodDays { get; public set; }
    public IReadOnlyList`1<IProductData> Products { get; public set; }
    public string Metadata { get; public set; }
    public bool Trial { get; public set; }
    public bool AiAllowed { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseId();
    [CompilerGeneratedAttribute]
public void set_LicenseId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseeName();
    [CompilerGeneratedAttribute]
public void set_LicenseeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseeType();
    [CompilerGeneratedAttribute]
public void set_LicenseeType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssigneeName();
    [CompilerGeneratedAttribute]
public void set_AssigneeName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssigneeEmail();
    [CompilerGeneratedAttribute]
public void set_AssigneeEmail(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseRestriction();
    [CompilerGeneratedAttribute]
public void set_LicenseRestriction(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CheckConcurrentUse();
    [CompilerGeneratedAttribute]
public void set_CheckConcurrentUse(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoProlongated();
    [CompilerGeneratedAttribute]
public void set_AutoProlongated(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_GracePeriodDays();
    [CompilerGeneratedAttribute]
public void set_GracePeriodDays(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IProductData> get_Products();
    [CompilerGeneratedAttribute]
public void set_Products(IReadOnlyList`1<IProductData> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Trial();
    [CompilerGeneratedAttribute]
public void set_Trial(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AiAllowed();
    [CompilerGeneratedAttribute]
public void set_AiAllowed(bool value);
    [CanBeNullAttribute]
public static NewLicenseData FromJson(string json);
    public string ToJsonString();
    public virtual string ToString();
    protected bool Equals(NewLicenseData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.License2.NewLicenses.NewLicenseDataCache : object {
    private Lifetime myLifetime;
    private UserNotifications myUserNotifications;
    private ITaskHost myTaskHost;
    private ILogger myLogger;
    private IDictionary`2<Pair`2<INewLicenseData, ILicensedEntity>, NewNamedLicenseData> myData;
    private JetHashSet`1<NewNamedLicenseData> myLastWentOffLicenses;
    private LifetimeDefinition myShownNotificationsLifetimeDefinition;
    private OneToSetMap`2<DateTime, string> myShownNotifications;
    [CompilerGeneratedAttribute]
private ISimpleSignal <LicensesWentOff>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<InOutEventArgs`2<NewNamedLicenseData, bool>> <QueryIsLicenseDataUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseViewModel <Model>k__BackingField;
    public ISimpleSignal LicensesWentOff { get; }
    public ISignal`1<InOutEventArgs`2<NewNamedLicenseData, bool>> QueryIsLicenseDataUsed { get; }
    public LicenseViewModel Model { get; public set; }
    public NewLicenseDataCache(Lifetime lifetime, UserNotifications userNotifications, ITaskHost taskHost, ILogger logger);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_LicensesWentOff();
    [CompilerGeneratedAttribute]
public ISignal`1<InOutEventArgs`2<NewNamedLicenseData, bool>> get_QueryIsLicenseDataUsed();
    [CompilerGeneratedAttribute]
public LicenseViewModel get_Model();
    [CompilerGeneratedAttribute]
public void set_Model(LicenseViewModel value);
    public void Remove(INewLicenseData newLicenseData, ILicensedEntity entity);
    [CanBeNullAttribute]
public NewNamedLicenseData GetOrCreateLicenseData(INewLicenseData newLicenseData, ILicensedEntity entity);
    public void ScheduleCheckNewLicenses(DateTime checkTime);
    private void CleanNotificationsHistory();
    private bool IsLicenseUsed(NewNamedLicenseData licenseData);
    public IDictionary`2<string, Tuple`3<NewNamedLicenseData, IProductData, ProductDataApplicability>> GetBestUsedNotFullySuccessfulLicenses(DateTime now);
    private void CheckNewLicenses();
    private void ShowNotification(Lifetime lifetime, NotificationSeverity severity, string title, string body);
    private void ShowNotifications(List`1<Tuple`3<NotificationSeverity, string, string>> notifications);
    private Dictionary`2<string, Tuple`3<NewNamedLicenseData, IProductData, ProductDataApplicability>> FilterBestUsedLicenses(Dictionary`2<Pair`2<INewLicenseData, ILicensedEntity>, NewNamedLicenseData> newNamedLicenseDatas, DateTime today);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.NewLicenses.NewLicenseDataEx : object {
    [ExtensionAttribute]
public static ICollection`1<Tuple`3<string, int, DateTime>> GetProductCodesForValidation(INewLicenseData data, IEnumerable`1<ILicensedEntity> licensedEntities);
    [ExtensionAttribute]
public static ICollection`1<Tuple`3<string, int, DateTime>> GetKnownProductCodesFromLicenseData(INewLicenseData data, IEnumerable`1<ILicensedEntity> licensedEntities);
    [ExtensionAttribute]
public static bool IsApplicableTo(INewLicenseData data, string productCode, DateTime buildDate);
    [ExtensionAttribute]
public static LicenseMetadata GetMetadata(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsCommercial(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsPersonal(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsStudent(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsOpenSource(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsClassroom(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsTrial(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsAnonymousTrialLicense(INewLicenseData data);
    [ExtensionAttribute]
public static bool IsNamedTrialLicense(INewLicenseData data);
}
public class JetBrains.Application.License2.NewLicenses.NewNamedLicenseData : object {
    private string myCustomLicenseNotApplicableToText;
    [CompilerGeneratedAttribute]
private INewLicenseData <LicenseData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <BuildDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseName>k__BackingField;
    public INewLicenseData LicenseData { get; public set; }
    public string ProductCode { get; }
    public DateTime BuildDate { get; }
    public string LicenseName { get; }
    public string LicenseeName { get; }
    public string AssigneeName { get; }
    public string LicenseId { get; }
    public string LicenseHash { get; }
    public string LicenseRestrictions { get; }
    public DateTime ExpirationDate { get; }
    public bool CheckConcurrentUse { get; }
    public UserLicenseStatus Status { get; }
    private string LicenseIsNotApplicableToText { get; }
    [NotNullAttribute]
public IEnumerable`1<IProductData> ProductDatas { get; }
    [CanBeNullAttribute]
public IProductData ProductData { get; }
    public NewNamedLicenseData(string licenseName, INewLicenseData newLicenseData, string productCode, DateTime buildDate, string customLicenseNotApplicableToText);
    [CompilerGeneratedAttribute]
public sealed virtual INewLicenseData get_LicenseData();
    [CompilerGeneratedAttribute]
public void set_LicenseData(INewLicenseData value);
    [CompilerGeneratedAttribute]
public string get_ProductCode();
    [CompilerGeneratedAttribute]
public DateTime get_BuildDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseName();
    public sealed virtual string get_LicenseeName();
    public sealed virtual string get_AssigneeName();
    public sealed virtual string get_LicenseId();
    public sealed virtual string get_LicenseHash();
    public sealed virtual string get_LicenseRestrictions();
    public sealed virtual DateTime get_ExpirationDate();
    public sealed virtual bool get_CheckConcurrentUse();
    public sealed virtual string DescribeValidLicense();
    public sealed virtual UserLicenseStatus get_Status();
    private string get_LicenseIsNotApplicableToText();
    public IEnumerable`1<IProductData> get_ProductDatas();
    public IProductData get_ProductData();
    [CompilerGeneratedAttribute]
private bool <get_ProductDatas>b__34_0(IProductData data);
    [CompilerGeneratedAttribute]
private int <get_ProductDatas>b__34_1(IProductData d1, IProductData d2);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.NewLicenses.NewNamedLicenseDataEx : object {
    [ExtensionAttribute]
public static LicenseCheckInfo`1<INamedLicenseData> CreateLicenseCheckInfoFor(INamedLicenseData licenseData, ILicensedEntity entity);
}
public class JetBrains.Application.License2.NewLicenses.ProductData : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FallbackDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PaidUpTo>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpiredSubscriptionBehavior <ExpiredBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ShutdownTime>k__BackingField;
    public string Code { get; public set; }
    public DateTime FallbackDate { get; public set; }
    public DateTime PaidUpTo { get; public set; }
    private ExpiredSubscriptionBehavior ExpiredBehavior { get; private set; }
    public DateTime ShutdownTime { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_FallbackDate();
    [CompilerGeneratedAttribute]
public void set_FallbackDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_PaidUpTo();
    [CompilerGeneratedAttribute]
public void set_PaidUpTo(DateTime value);
    [CompilerGeneratedAttribute]
private ExpiredSubscriptionBehavior get_ExpiredBehavior();
    [CompilerGeneratedAttribute]
private void set_ExpiredBehavior(ExpiredSubscriptionBehavior value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ShutdownTime();
    [CompilerGeneratedAttribute]
private void set_ShutdownTime(DateTime value);
    public sealed virtual ProductDataApplicability CheckApplicability(DateTime now, DateTime buildDate, int gracePeriodDays, bool isAutoProlongated);
    protected bool Equals(ProductData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Application.License2.NewLicenses.ProductDataApplicability : Enum {
    public int value__;
    public static ProductDataApplicability OK_ETERNAL_SUBSCRIPTION;
    public static ProductDataApplicability OK_FALLBACK;
    public static ProductDataApplicability OK_ACTIVE_SUBSCRIPTION;
    public static ProductDataApplicability OK_SUBSCRIPTION_GRACE_PERIOD;
    public static ProductDataApplicability OK_30_MIN_TO_SHUTDOWN;
    public static ProductDataApplicability FAILED_SUBSCRIPTION_EXPIRED;
    public static ProductDataApplicability FAILED_FALLBACK_DOES_NOT_MATCH;
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.NewLicenses.ProductDataApplicabilityEx : object {
    [ExtensionAttribute]
public static bool IsSuccess(ProductDataApplicability applicability);
    [ExtensionAttribute]
public static bool IsSuccessNoShutdown(ProductDataApplicability applicability);
    [ExtensionAttribute]
public static bool IsFailed(ProductDataApplicability applicability);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.NewLicenses.ProductDataEx : object {
    [ExtensionAttribute]
public static bool HasFallback(IProductData productData);
    [ExtensionAttribute]
public static bool HasSubscription(IProductData productData);
    [ExtensionAttribute]
public static bool IsFallbackApplicable(IProductData productData, DateTime buildDate);
    [ExtensionAttribute]
public static bool HasActiveSubscription(IProductData productData, DateTime today);
    [ExtensionAttribute]
public static bool HasEternalSubscription(IProductData productData);
}
public class JetBrains.Application.License2.NewLicenses.ProductDataJsonContractResolver : DefaultContractResolver {
    private ILogger myLogger;
    private static Type ourProductDataType;
    private static ProductDataJsonContractResolver();
    protected virtual JsonArrayContract CreateArrayContract(Type objectType);
    protected virtual JsonContract CreateContract(Type objectType);
    public virtual JsonContract ResolveContract(Type type);
    protected virtual JsonConverter ResolveContractConverter(Type objectType);
}
public class JetBrains.Application.License2.NewLicenses.ProductDataJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[EnvironmentComponentAttribute("0")]
public class JetBrains.Application.License2.NewLicenses.UserLicenseService : object {
    [CompilerGeneratedAttribute]
private Certificates <Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private BlackListAndCrl <BlackListAndCrl>k__BackingField;
    private static object ourVerifyCertificateLock;
    public Certificates Certificates { get; }
    public BlackListAndCrl BlackListAndCrl { get; }
    private X509Certificate2 RootCertificate { get; }
    public UserLicenseService(Certificates certificates, BlackListAndCrl blackListAndCrl);
    private static UserLicenseService();
    [CompilerGeneratedAttribute]
public Certificates get_Certificates();
    [CompilerGeneratedAttribute]
public BlackListAndCrl get_BlackListAndCrl();
    private X509Certificate2 get_RootCertificate();
    public INewLicenseData DecodeLicense(string base64);
    public static bool VerifySignature(string text, string signatureBase64, X509Certificate2 signer, HashAlgorithmName hashAlgorithm);
    private static bool VerifySignature(string text, string signatureBase64, RSA csp, HashAlgorithmName hashAlgorithm);
    public static CertificateValidationResult VerifyCertificate(CertificateRevocationList crl, X509Certificate2 primaryCert, bool checkCertificateTimeValidity, X509Certificate2[] additionalCertificates);
    private static CertificateValidationResult FetchResultFromStatus(X509ChainStatus[] chainChainStatus);
}
public static class JetBrains.Application.License2.NewLicenses.UserLicenseUtil : object {
    private static char SEPARATOR;
    public static LicenseParts TryGetLicenseParts(string base64);
}
public class JetBrains.Application.License2.NoLicenseRequiredLicenseViewSubmodel : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    private LicenseCheckResult`1<NoLicenseRequiredLicenseViewSubmodel> myCheckResult;
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    public IEnumerable`1<ILicenseDataItem> LicenseData { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public NoLicenseRequiredLicenseViewSubmodel(Lifetime lifetime, string allModelName, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    public sealed virtual IEnumerable`1<ILicenseDataItem> get_LicenseData();
    public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    private static IEnumerable`1<ILicenseCheckInfo> FilterEntitiesThatDoNotRequireLicenseCheck(LicenseViewModel allModel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(Lifetime notNullLifetiem, LicenseViewModel allModel);
}
public class JetBrains.Application.License2.OAuth.HttpRequestHandler : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    private HttpListener myHttpListener;
    [CompilerGeneratedAttribute]
private IProperty`1<HttpListenerContext> <Context>k__BackingField;
    public int Port { get; }
    public IProperty`1<HttpListenerContext> Context { get; }
    public HttpRequestHandler(Lifetime lifetime, ILogger logger, int port);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public IProperty`1<HttpListenerContext> get_Context();
    private void SubscribeToContext();
    [CompilerGeneratedAttribute]
private void <SubscribeToContext>b__9_0(Task`1<HttpListenerContext> task);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.OAuth.HttRequestHandlerEx : object {
    [ExtensionAttribute]
public static Task`1<HttpListenerContext> ListenOnceAsync(HttpRequestHandler handler, Lifetime lifetime);
}
public class JetBrains.Application.License2.OAuth.OAuthenticator : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private WebProxySettingsReader myWebProxySettingsReader;
    private OpensUri myOpensUri;
    private IThreading myThreading;
    private IWindowBranding myWindowBranding;
    [CanBeNullAttribute]
private Tokens myTokens;
    private SequentialLifetimes myRefreshTokenSequentialLifetimes;
    private TaskCompletionSource`1<CodeStateAndHttpListenerContext> myGetCodeStateAndHttpListenerContextTaskCompletionSource;
    [CompilerGeneratedAttribute]
private IProperty`1<Pair`2<State, string>> <StateWithDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <OpenAuthUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<AuthUrls> <AuthUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReady>k__BackingField;
    public IProperty`1<Pair`2<State, string>> StateWithDescription { get; }
    public IProperty`1<string> OpenAuthUrl { get; }
    [ItemCanBeNullAttribute]
public IProperty`1<AuthUrls> AuthUrls { get; }
    public IProperty`1<bool> IsReady { get; }
    public OAuthenticator(Lifetime lifetime, ILogger logger, WebProxySettingsReader webProxySettingsReader, OpensUri opensUri, IThreading threading, IWindowBranding windowBranding);
    [CompilerGeneratedAttribute]
public IProperty`1<Pair`2<State, string>> get_StateWithDescription();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_OpenAuthUrl();
    [CompilerGeneratedAttribute]
public IProperty`1<AuthUrls> get_AuthUrls();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsReady();
    private void SetState(State state, string description);
    private static string GetAuthorizationSuccessfulHtml(string productName);
    private static string GetAuthorizationFailedHtml(string productName, string error);
    public void Initialize(AuthUrls authUrls, Tokens authTokens);
    public void StartUsing();
    private void ScheduleRefreshToken(Lifetime lifetime, Nullable`1<TimeSpan> timeout);
    private void RefreshTokenImpl(Lifetime tokensLifetime);
    public Tokens GetTokensRefreshedIfNecessary();
    private static string CreateCodeVerifier();
    private static string CreateCodeChallenge(string codeVerifier);
    private static string CreateState();
    [CanBeNullAttribute]
private HttpRequestHandler TryCreateHttpRequestHandler(Lifetime lifetime, IEnumerable`1<int> portRange);
    public void SetCodeAndStateFromBrowser(string codeFromBrowser);
    private void SetCodeStateAndError(CodeStateAndHttpListenerContext codeStateAndHttpListenerContext);
    private Task`1<CodeStateAndHttpListenerContext> GetCodeStateAndHttpListenerContextAsync(Lifetime lifetime, HttpRequestHandler handler);
    [AsyncStateMachineAttribute("JetBrains.Application.License2.OAuth.OAuthenticator/<TryAuthorizeAsync>d__39")]
[ItemCanBeNullAttribute]
public Task`1<Tokens> TryAuthorizeAsync(Lifetime authorizationLifetime, IEnumerable`1<int> portRange, bool forceLogin, bool failOnNoFreePortAvailable);
    public static IList`1<int> GetDefaultPorts();
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_0(Lifetime isReadyLifetime, bool isReady);
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_1(Lifetime authUrlsLifetime, AuthUrls authUrls);
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_2(Lifetime stateLifetime, Pair`2<State, string> stateWithDescription);
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.OAuth.OAuthenticatorEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static string GetAuthorizationHeader(OAuthenticator oAuthenticator);
}
public class JetBrains.Application.License2.OAuth.Tokens : object {
    [CompilerGeneratedAttribute]
private string <IdToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExpiresIn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ObtainedTimeUtc>k__BackingField;
    [JsonPropertyAttribute("id_token")]
public string IdToken { get; public set; }
    [JsonPropertyAttribute("access_token")]
public string AccessToken { get; public set; }
    [JsonPropertyAttribute("refresh_token")]
public string RefreshToken { get; public set; }
    [JsonPropertyAttribute("expires_in")]
public int ExpiresIn { get; public set; }
    public DateTime ObtainedTimeUtc { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IdToken();
    [CompilerGeneratedAttribute]
public void set_IdToken(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public int get_ExpiresIn();
    [CompilerGeneratedAttribute]
public void set_ExpiresIn(int value);
    [CompilerGeneratedAttribute]
public DateTime get_ObtainedTimeUtc();
    [CompilerGeneratedAttribute]
public void set_ObtainedTimeUtc(DateTime value);
    [CanBeNullAttribute]
public static Tokens TryCreate(string json);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.OAuth.TokensEx : object {
    [ExtensionAttribute]
public static bool IsRefreshNeeded(Tokens tokens);
    [ExtensionAttribute]
public static bool IsRefreshNeeded(Tokens tokens, DateTime now);
    [ExtensionAttribute]
public static bool IsRefreshNeeded(Tokens tokens, DateTime now, TimeSpan untilExpiration);
}
public interface JetBrains.Application.License2.Persistence.ILicenseDataAccess`1 {
}
public interface JetBrains.Application.License2.Persistence.ILicenseDataPersister {
    public abstract virtual ILicenseData LoadLicenseData();
    public abstract virtual void SaveLicenseData(ILicenseData licenseData);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.License2.Persistence.LicenseDataPersister : object {
    private ILogger myLogger;
    private ISignal`1<LicenseData> myLoadSignal;
    private ISignal`1<ILicenseData> mySaveSignal;
    private IDataAccess`1<LicenseData> myAccess;
    public LicenseDataPersister(Lifetime lifetime, ILogger logger, IEnumerable`1<ILicensedEntity> entities, AnyProductSettingsLocation settingsLocation, DataAccess dataAccess);
    [NotNullAttribute]
public sealed virtual ILicenseData LoadLicenseData();
    public sealed virtual void SaveLicenseData(ILicenseData licenseData);
    private void AddPersister(Lifetime lifetime, ILicenseDataAccess`1<T> access);
}
public class JetBrains.Application.License2.Persistence.MultipleItemsLicenseDataAccess`1 : object {
    private IDataAccess`1<IEnumerable`1<T>> myAccess;
    public string Description { get; }
    public string Location { get; }
    public MultipleItemsLicenseDataAccess`1(IDataAccess`1<IEnumerable`1<T>> access);
    public MultipleItemsLicenseDataAccess`1(Func`1<IDataAccess`1<IEnumerable`1<T>>> createAccess);
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    public sealed virtual IEnumerable`1<T> Load();
    public sealed virtual void Save(IEnumerable`1<T> newValue);
}
public class JetBrains.Application.License2.Persistence.SingleItemLicenseDataAccess`1 : object {
    private IDataAccess`1<T> myAccess;
    public string Description { get; }
    public string Location { get; }
    public SingleItemLicenseDataAccess`1(IDataAccess`1<T> access);
    public SingleItemLicenseDataAccess`1(Func`1<IDataAccess`1<T>> createAccess);
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    [IteratorStateMachineAttribute("JetBrains.Application.License2.Persistence.SingleItemLicenseDataAccess`1/<Load>d__9")]
public virtual IEnumerable`1<T> Load();
    public virtual void Save(IEnumerable`1<T> newValue);
}
public class JetBrains.Application.License2.PreserveLicenseDataSubmodel`1 : object {
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <ResultChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILicenseDataItem> <LicenseData>k__BackingField;
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    public IEnumerable`1<ILicenseDataItem> LicenseData { get; }
    public PreserveLicenseDataSubmodel`1(Lifetime lifetime, ILicenseData licenseData);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ILicenseDataItem> get_LicenseData();
}
public enum JetBrains.Application.License2.Result : Enum {
    public int value__;
    public static Result SUCCESS;
    public static Result SUCCESS_WITH_WARNING;
    public static Result SUCCESS_WITH_WARNING_DO_NOT_SHOW_DIALOG;
    public static Result SUCCESS_WITH_WARNING_30_MIN_TO_SHUTDOWN;
    public static Result FAILED;
    public static Result FAILED_DONT_SHOW_DIALOG;
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.ResultEx : object {
    private static Dictionary`2<Result, Dictionary`2<Result, Result>> ourCombineMatrix;
    public static ResultWithDescription Empty;
    public static ResultWithDescription ProperlyLicensed;
    public static ResultWithDescription NoLicenseFound;
    private static ResultEx();
    private static void AssertCombineMatrix(Dictionary`2<Result, Dictionary`2<Result, Result>> matrix);
    private static Dictionary`2<Result, Dictionary`2<Result, Result>> GetCombineMatrix();
    [ExtensionAttribute]
public static Result Combine(Result r1, Result r2);
    [ExtensionAttribute]
[PureAttribute]
public static ResultWithDescription Combine(ResultWithDescription r1, ResultWithDescription r2);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsSuccessful(Result result);
    [ExtensionAttribute]
[PureAttribute]
public static bool ContainsWarnings(Result result);
    [ExtensionAttribute]
public static bool Is30MinToShutdown(Result result);
    [ExtensionAttribute]
public static bool IsFailed(Result result);
    public static ResultWithDescription NoLicenseFoundWithCustomDescription(IDescriptionObjectWithUserNotification description);
}
public class JetBrains.Application.License2.ResultWithDescription : object {
    [CompilerGeneratedAttribute]
private Result <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <DescriptionObjects>k__BackingField;
    private String[] myTextDescription;
    public Result Result { get; }
    public Object[] DescriptionObjects { get; }
    public String[] TextDescription { get; }
    public ResultWithDescription(Result result, IEnumerable`1<object> description);
    public ResultWithDescription(Result result, IEnumerable`1<string> description);
    [StringFormatMethodAttribute("fmt")]
public ResultWithDescription(Result result, string fmt, Object[] args);
    [CompilerGeneratedAttribute]
public Result get_Result();
    [CompilerGeneratedAttribute]
public Object[] get_DescriptionObjects();
    public String[] get_TextDescription();
    public virtual string ToString();
    protected bool Equals(ResultWithDescription other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.EnterLicenseAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <ActivationCode>k__BackingField;
    public string ActivationCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ActivationCode();
    [CompilerGeneratedAttribute]
public void set_ActivationCode(string value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
public static class JetBrains.Application.License2.Sandbox.LicenceViewModelSandbox : object {
    public static SandboxedLicenseViewModel CreateSandbox(Lifetime sandboxLifetime, LicenseViewModelBuilder modelBuilder, WebProxySettingsReader webProxySettingsReader, ILicense2CheckComponent licenseCheckComponent, string baseUrl);
    public static IList`1<LicenseTest> ParseTests(string json);
}
public class JetBrains.Application.License2.Sandbox.LicenseTestRun : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Name { get; }
    [CanBeNullAttribute]
public Exception Exception { get; }
    public bool IsSuccessful { get; }
    public LicenseTestRun(string name, Exception exception);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    public bool get_IsSuccessful();
}
public static class JetBrains.Application.License2.Sandbox.LicenseTestRunner : object {
    public static IList`1<TestSet> RunTests(LicenseTestRunnerArgs args, IProgressIndicator progressIndicator);
    private static IDictionary`2<string, ILicensedEntity> PrepareLicenseEntities(IList`1<ILicensedEntity> entities, IList`1<string> productCodes);
}
public class JetBrains.Application.License2.Sandbox.LicenseTestRunnerArgs : object {
    public static string TestServerUrl;
    public static String[] AllProductCodes;
    public static String[] AllLicenseCodes;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <WebProxySettingsReader>k__BackingField;
    [CompilerGeneratedAttribute]
private LicenseViewModelBuilder <LicenseViewModelBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ILicense2CheckComponent <License2CheckComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ILicensedEntity> <LicensedEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ProductCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <LicenseCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private StringBuilder <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<int, LicenseTest, bool> <TestFilter>k__BackingField;
    public ILogger Logger { get; private set; }
    public WebProxySettingsReader WebProxySettingsReader { get; private set; }
    public LicenseViewModelBuilder LicenseViewModelBuilder { get; private set; }
    public ILicense2CheckComponent License2CheckComponent { get; private set; }
    public IList`1<ILicensedEntity> LicensedEntities { get; private set; }
    public string Url { get; }
    public IList`1<string> ProductCodes { get; }
    public IList`1<string> LicenseCodes { get; }
    public StringBuilder StdOut { get; }
    public Func`3<int, LicenseTest, bool> TestFilter { get; }
    public LicenseTestRunnerArgs(string url, IList`1<string> productCodes, IList`1<string> licenseCodes, StringBuilder stdOut, IComponentContainer container, Func`3<int, LicenseTest, bool> testFilter);
    public LicenseTestRunnerArgs(string url, IList`1<string> productCodes, IList`1<string> licenseCodes, StringBuilder stdOut, IDataContext context, Func`3<int, LicenseTest, bool> testFilter);
    private static LicenseTestRunnerArgs();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public WebProxySettingsReader get_WebProxySettingsReader();
    [CompilerGeneratedAttribute]
private void set_WebProxySettingsReader(WebProxySettingsReader value);
    [CompilerGeneratedAttribute]
public LicenseViewModelBuilder get_LicenseViewModelBuilder();
    [CompilerGeneratedAttribute]
private void set_LicenseViewModelBuilder(LicenseViewModelBuilder value);
    [CompilerGeneratedAttribute]
public ILicense2CheckComponent get_License2CheckComponent();
    [CompilerGeneratedAttribute]
private void set_License2CheckComponent(ILicense2CheckComponent value);
    [CompilerGeneratedAttribute]
public IList`1<ILicensedEntity> get_LicensedEntities();
    [CompilerGeneratedAttribute]
private void set_LicensedEntities(IList`1<ILicensedEntity> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public IList`1<string> get_ProductCodes();
    [CompilerGeneratedAttribute]
public IList`1<string> get_LicenseCodes();
    [CompilerGeneratedAttribute]
public StringBuilder get_StdOut();
    [CompilerGeneratedAttribute]
public Func`3<int, LicenseTest, bool> get_TestFilter();
    private void InitComponents(IComponentContainer context);
    private void InitComponents(IDataContext context);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.ObtainAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    public string Uid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
public class JetBrains.Application.License2.Sandbox.SandboxedLicenseViewModel : object {
    [CompilerGeneratedAttribute]
private LicenseViewModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <ProxySettingsReader>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public LicenseViewModel Model { get; }
    public string BaseUri { get; }
    public WebProxySettingsReader ProxySettingsReader { get; }
    public ILogger Logger { get; }
    public SandboxedLicenseViewModel(LicenseViewModel model, string baseUri, WebProxySettingsReader proxySettingsReader, ILogger logger);
    [CompilerGeneratedAttribute]
public LicenseViewModel get_Model();
    [CompilerGeneratedAttribute]
public string get_BaseUri();
    [CompilerGeneratedAttribute]
public WebProxySettingsReader get_ProxySettingsReader();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
}
public abstract class JetBrains.Application.License2.Sandbox.SandboxedLicenseViewModelAction : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual void Parse(IDictionary`2<string, object> token);
    public abstract virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
public class JetBrains.Application.License2.Sandbox.TestSet : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LicenseTestRun> <Tests>k__BackingField;
    public string Url { get; }
    public string Json { get; }
    public IList`1<LicenseTestRun> Tests { get; }
    public IList`1<LicenseTestRun> FailedTests { get; }
    public TestSet(string url, string json);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public string get_Json();
    [CompilerGeneratedAttribute]
public IList`1<LicenseTestRun> get_Tests();
    public IList`1<LicenseTestRun> get_FailedTests();
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.UpdateAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Params>k__BackingField;
    public string Method { get; public set; }
    public string Uri { get; public set; }
    public Dictionary`2<string, string> Params { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Params();
    [CompilerGeneratedAttribute]
public void set_Params(Dictionary`2<string, string> value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.License2.Sandbox.ValidateAction : SandboxedLicenseViewModelAction {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivationCode>k__BackingField;
    public string Uid { get; public set; }
    public string ActivationCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public void set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_ActivationCode();
    [CompilerGeneratedAttribute]
public void set_ActivationCode(string value);
    public virtual void Do(SandboxedLicenseViewModel model, ExpectedResult expected);
}
public static class JetBrains.Application.License2.ShowLicenseDialogReasons : object {
    public static string ShowLicenseRequestedByUser;
    public static string ShowDataSharingOptionsRequestedByUser;
    private static ShowLicenseDialogReasons();
}
public class JetBrains.Application.License2.SimpleDescriptionObjectWithUserNotification : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotificationBody>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Pair`2<string, string>> <UrisToOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Pair`2<string, Action>> <AdditionalCommands>k__BackingField;
    [NotNullAttribute]
public string Text { get; private set; }
    [CanBeNullAttribute]
public string NotificationTitle { get; public set; }
    [CanBeNullAttribute]
public string NotificationBody { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<Pair`2<string, string>> UrisToOpen { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<Pair`2<string, Action>> AdditionalCommands { get; public set; }
    public SimpleDescriptionObjectWithUserNotification(string text, string notificationTitle, string notificationBody, IEnumerable`1<Pair`2<string, string>> urisToOpen, IEnumerable`1<Pair`2<string, Action>> additionalCommands);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NotificationTitle();
    [CompilerGeneratedAttribute]
public void set_NotificationTitle(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NotificationBody();
    [CompilerGeneratedAttribute]
public void set_NotificationBody(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Pair`2<string, string>> get_UrisToOpen();
    [CompilerGeneratedAttribute]
public void set_UrisToOpen(IEnumerable`1<Pair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Pair`2<string, Action>> get_AdditionalCommands();
    [CompilerGeneratedAttribute]
public void set_AdditionalCommands(IEnumerable`1<Pair`2<string, Action>> value);
    public virtual string ToString();
}
public class JetBrains.Application.License2.SupportsJetBrainsAccount : object {
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ProductBuiltDateUsedForSubscriptionCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductEdition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProductVersion>k__BackingField;
    public string ProductName { get; public set; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public string ProductCode { get; }
    public string ProductEdition { get; }
    public int ProductVersion { get; }
    public SupportsJetBrainsAccount(string productName, string productCode, string productEdition, int productVersion, DateTime productBuiltDateUsedForSubscriptionCheck);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductName();
    [CompilerGeneratedAttribute]
public void set_ProductName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductCode();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductEdition();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ProductVersion();
    public static SupportsJetBrainsAccount CreateForReSharperUltimate();
    [ObsoleteAttribute("The method is to be removed. Use the overload without parameters")]
public static SupportsJetBrainsAccount CreateForReSharperUltimate(int version, DateTime productBuiltDateUsedForSubscriptionCheck);
    private bool Equals(SupportsJetBrainsAccount other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SupportsJetBrainsAccount left, SupportsJetBrainsAccount right);
    public static bool op_Inequality(SupportsJetBrainsAccount left, SupportsJetBrainsAccount right);
}
public abstract class JetBrains.Application.License2.UIInteractive.BuiltInConsentOptionsProviderFromResource : object {
    private string myResourceFileName;
    protected BuiltInConsentOptionsProviderFromResource(string resourceFileName);
    public virtual IReadOnlyList`1<IConsentOption> LoadOptions();
}
public abstract class JetBrains.Application.License2.UIInteractive.BuiltInConsentOptionsProviderFromResourceWithSetting`1 : BuiltInConsentOptionsProviderFromResource {
    private Lifetime myLifetime;
    private IConsentOptions myConsentOptions;
    private ILogger myLogger;
    private string myConsentId;
    private Expression`1<Func`2<TSettingKey, bool>> myLambdaExpr;
    protected IContextBoundSettingsStoreLive myContextBoundSettingsStoreLive;
    protected BuiltInConsentOptionsProviderFromResourceWithSetting`1(Lifetime lifetime, ISettingsStore settingsStore, IConsentOptions consentOptions, ILogger logger, string resourceFileName, string consentId, Expression`1<Func`2<TSettingKey, bool>> lambdaExpr);
    public virtual IReadOnlyList`1<IConsentOption> LoadOptions();
    private void DoSync(Action`2<Nullable`1<bool>, bool> syncAction);
    private void SettingToConsentOption();
    private void ConsentOptionToSetting();
    private Nullable`1<bool> GetConsentOptionValue();
    private void SetConsentOptionValue(bool value);
    private bool GetSettingValue();
    protected virtual void SetSettingValue(bool value);
    [CompilerGeneratedAttribute]
private void <SettingToConsentOption>b__9_0(Nullable`1<bool> consentValue, bool settingValue);
    [CompilerGeneratedAttribute]
private void <ConsentOptionToSetting>b__10_0(Nullable`1<bool> consentValue, bool settingValue);
}
[EnvironmentComponentAttribute("16")]
internal class JetBrains.Application.License2.UIInteractive.CommonBuiltInConsentOptionsProvider : BuiltInConsentOptionsProviderFromResource {
}
public class JetBrains.Application.License2.UIInteractive.ConsentOption : object {
    [CompilerGeneratedAttribute]
private string <consentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <accepted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <deleted>k__BackingField;
    [CompilerGeneratedAttribute]
private long <acceptanceTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <printableName>k__BackingField;
    [NotNullAttribute]
public string consentId { get; public set; }
    public Version version { get; public set; }
    [NotNullAttribute]
public string text { get; public set; }
    public bool accepted { get; public set; }
    public bool deleted { get; public set; }
    public long acceptanceTime { get; public set; }
    [NotNullAttribute]
public string printableName { get; public set; }
    public ConsentOption(string consentId, Version version, string text, string printableName, bool accepted, bool deleted, long acceptedTime);
    [CompilerGeneratedAttribute]
public sealed virtual string get_consentId();
    [CompilerGeneratedAttribute]
public void set_consentId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_version();
    [CompilerGeneratedAttribute]
public void set_version(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_text();
    [CompilerGeneratedAttribute]
public void set_text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_accepted();
    [CompilerGeneratedAttribute]
public void set_accepted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_deleted();
    [CompilerGeneratedAttribute]
public void set_deleted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_acceptanceTime();
    [CompilerGeneratedAttribute]
public void set_acceptanceTime(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_printableName();
    [CompilerGeneratedAttribute]
public void set_printableName(string value);
    protected bool Equals(ConsentOption other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ConsentOption left, ConsentOption right);
    public static bool op_Inequality(ConsentOption left, ConsentOption right);
    public virtual string ToString();
    [CanBeNullAttribute]
public static IConsentOption FromJson(string json);
    public static ConsentOption[] OptionsFromJson(string json);
    public static string ToJsonString(IConsentOption consentOption);
}
[ShellComponentAttribute("10")]
internal class JetBrains.Application.License2.UIInteractive.ConsentOptionsShellComponent : object {
    public ConsentOptionsShellComponent(Lifetime lifetime, ConsentOptionsUIInteractive consentOptions, IEnumerable`1<IBuiltInConsentOptionsProvider> builtInConsentOptionsProviders, IEnumerable`1<IConsentOptionsFilter> consentOptionsFilters);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.License2.UIInteractive.ConsentOptionsUIInteractive : ConsentOptionsStub {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ILogger myLogger;
    private AnyProductSettingsLocation myProductSettingsLocation;
    private object myLockObject;
    private IDictionary`2<string, IConsentOption> myConsentOptions;
    private IDictionary`2<string, AcceptedState> myConsentResults;
    private IList`1<IConsentOptionsFilter> myConsentOptionsFilters;
    private bool myAlwaysAccepted;
    private IDataAccess`1<string> myAcceptedOptionsAccess;
    private IDataAccess`1<string> myCachedConsentOptionsAccess;
    public static string ourLastKnownConsentOptionsFileName;
    public static string ourAcceptedConsentOptionsFileName;
    public bool AlwaysAccepted { get; public set; }
    public ConsentOptionsUIInteractive(Lifetime lifetime, IThreading threading, ILogger logger, DataAccess dataAccess, AnyProductSettingsLocation productSettingsLocation);
    private static ConsentOptionsUIInteractive();
    public bool get_AlwaysAccepted();
    public void set_AlwaysAccepted(bool value);
    internal void SetBuiltInOptionsProviders(Lifetime lifetime, IEnumerable`1<IBuiltInConsentOptionsProvider> builtInConsentOptionsProviders);
    private void ApplyAcceptedResults(IReadOnlyList`1<Pair`2<string, AcceptedState>> pairs);
    private void NormalizeAcceptedVersion();
    private void UpdateOptions();
    public virtual void OnConsentOptionsRecieved(string json);
    public virtual AcceptedState GetConsensetOptionAcceptedState(IConsentOption consentOption);
    private void SetConsentOptionsImpl(IEnumerable`1<Pair`2<IConsentOption, AcceptedState>> consentOptionValues, ConsetOptionsChangeSource changeSource);
    public virtual void SetConsentOptions(IEnumerable`1<Pair`2<IConsentOption, bool>> consentOptionValues, ConsetOptionsChangeSource changeSource);
    private void MergeOptions(string title, IReadOnlyList`1<IConsentOption> options);
    [NotNullAttribute]
private IReadOnlyList`1<IConsentOption> LoadLastKnownConsentOptions();
    private void SaveLastKnownConsentOptions();
    private IReadOnlyList`1<Pair`2<string, AcceptedState>> LoadAccepted();
    private void SaveAccepted();
    private IReadOnlyList`1<IConsentOption> LoadBuiltInOptions(IEnumerable`1<IBuiltInConsentOptionsProvider> builtInConsentOptionsProviders);
    private bool IsConsentOptionRelevantToTheUser(IConsentOption option);
    public void SetFilters(Lifetime lifetime, IEnumerable`1<IConsentOptionsFilter> consentOptionsFilters);
    [CompilerGeneratedAttribute]
private ConsentOption[] <LoadLastKnownConsentOptions>b__26_0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IConsentOption> <LoadBuiltInOptions>b__30_0(IBuiltInConsentOptionsProvider provider);
}
public class JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor : object {
    [CompilerGeneratedAttribute]
private string <TechnicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <AcceptedVersionRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private RelativePath <CachedRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotnetAcceptedRegistryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAcceptedRegistryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataAccess`1<Version> <VersionAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataAccess`1<string> <DocumentTextAccess>k__BackingField;
    public string TechnicalName { get; }
    public RelativePath AcceptedVersionRelativePath { get; }
    public RelativePath CachedRelativePath { get; }
    public string DotnetAcceptedRegistryKey { get; }
    public string SharedAcceptedRegistryKey { get; }
    [NotNullAttribute]
public IDataAccess`1<Version> VersionAccess { get; }
    [NotNullAttribute]
public IDataAccess`1<string> DocumentTextAccess { get; }
    private DocumentStorageDescriptor(DataAccess dataAccess, string technicalName, RelativePath acceptedVersionRelativePath, RelativePath cachedRelativePath, string dotnetAcceptedRegistryKey, string sharedAcceptedRegistryKey);
    [CompilerGeneratedAttribute]
public string get_TechnicalName();
    [CompilerGeneratedAttribute]
public RelativePath get_AcceptedVersionRelativePath();
    [CompilerGeneratedAttribute]
public RelativePath get_CachedRelativePath();
    [CompilerGeneratedAttribute]
public string get_DotnetAcceptedRegistryKey();
    [CompilerGeneratedAttribute]
public string get_SharedAcceptedRegistryKey();
    [CompilerGeneratedAttribute]
public IDataAccess`1<Version> get_VersionAccess();
    [CompilerGeneratedAttribute]
public IDataAccess`1<string> get_DocumentTextAccess();
    private IDataAccess`1<string> CreateDocumentTextAccess(DataAccess dataAccess);
    private static Version StringToVersion(string str);
    private static string VersionToString(Version version);
    private IDataAccess`1<Version> CreateVersionAccess(DataAccess dataAccess);
    public static DocumentStorageDescriptor Create(string technicalName, DataAccess dataAccess);
}
public interface JetBrains.Application.License2.UIInteractive.IBuiltInConsentOptionsProvider {
    public abstract virtual IReadOnlyList`1<IConsentOption> LoadOptions();
}
public interface JetBrains.Application.License2.UIInteractive.IConsentOptionsFilter {
    public abstract virtual Nullable`1<bool> IsConsentOptionRelevantToTheUser(IConsentOption consentOption);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.License2.UIInteractive.PrivacyPolicyProvider : object {
    [CompilerGeneratedAttribute]
private IProperty`1<CheckForUpdateAllowedArgs> <CheckForUpdateAllowed>k__BackingField;
    private ILogger myLogger;
    private DataAccess myDataAccess;
    private IJetBrainsLicenseServerAccessor myServerAccessor;
    private IConsentOptions myConsentOptions;
    private Lazy`1<RelativePath> myDocumentNameRelativePath;
    private Lazy`1<RelativePath> myEapDocumentNameRelativePath;
    public static string PrivacyPolicyTechnicalName;
    public static string EulaTechnicalName;
    public static string EulaEapTechnicalName;
    private static Version AlwaysAccepted;
    [CompilerGeneratedAttribute]
private IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> <Document>k__BackingField;
    public IProperty`1<CheckForUpdateAllowedArgs> CheckForUpdateAllowed { get; }
    public IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> Document { get; public set; }
    public PrivacyPolicyProvider(Lifetime lifetime, ILogger logger, DataAccess dataAccess, IThreading threading, IJetBrainsLicenseServerAccessor serverAccessoror, IConsentOptions consentOptions);
    private static PrivacyPolicyProvider();
    [CompilerGeneratedAttribute]
public IProperty`1<CheckForUpdateAllowedArgs> get_CheckForUpdateAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Document(IProperty`1<Pair`2<IDocumentThatRequiresUserConsent, DocumentState>> value);
    [ObsoleteAttribute("The method is intended to be used in tests setup only")]
public static void SetAlwaysAccepted();
    [ObsoleteAttribute("The method is intended to be used in tests setup only")]
public static void CleanAlwaysAccepted();
    public sealed virtual void SetDocumentState(IDocumentThatRequiresUserConsent document, DocumentState state);
    protected virtual bool IsAlwaysAccepted(DataAccess dataAccess);
    private Pair`2<IDocumentThatRequiresUserConsent, DocumentState> GetCurrentDocument();
    private void TryObtainNewVersion(CheckForUpdateAllowedArgs args);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.License2.UIInteractive.PrivacyPolicyProviderCheckForUpdateAllowance : object {
    public PrivacyPolicyProviderCheckForUpdateAllowance(Lifetime lifetime, ILicense2CheckComponent license2Check, PrivacyPolicyProvider privacyPolicyProvider, BlackListAndCrl blackListAndCrl, ILogger logger);
    protected virtual void UpdateCheckForUpdateAllowed(PrivacyPolicyProvider privacyPolicyProvider, BlackListAndCrl blackListAndCrl, ILogger logger, LicenseViewModel model);
}
[ZoneMarkerAttribute]
public class JetBrains.Application.License2.UIInteractive.ZoneMarker : object {
}
[EnvironmentComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.License2.UiInteractiveLicense2CheckComponentSettings : License2CheckComponentSettings {
    public bool DoSync { get; }
    public virtual bool get_DoSync();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.License2.Usage.LicensedEntityUsageTracker : object {
    private ILogger myLogger;
    private Dictionary`2<string, DateTime> myEntitiesUsed;
    private IDataAccess`1<Dictionary`2<string, DateTime>> myAccess;
    [CompilerGeneratedAttribute]
private bool <DataAvailable>k__BackingField;
    public bool DataAvailable { get; private set; }
    public LicensedEntityUsageTracker(Lifetime lifetime, ILogger logger, EvaluationTracker evaluationTracker, IThreading threading, DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
    public bool HasEntityBeenUsedRecently(string entityName, DateTime lastCheckTime);
    public void ReportEntityUsed(ILicensedEntity entity);
    private void Load();
    private void Save();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DataAvailable();
    [CompilerGeneratedAttribute]
private void set_DataAvailable(bool value);
}
public class JetBrains.Application.License2.UserLicenseChecker : object {
    [CompilerGeneratedAttribute]
private string <LicenseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private AcceptLicenseDelegate <AcceptLicenseDelegate>k__BackingField;
    public static string ReSharper;
    public static string ReSharperUltimate;
    public static string ReSharperPublicKey;
    public static int FullEditionCode;
    public static int CSharpEditionCode;
    public static int VbEditionCode;
    public static int UltimateEditionCode;
    public static Dictionary`2<int, string> ReSharperEditionNames;
    [NotNullAttribute]
public string LicenseName { get; }
    [NotNullAttribute]
public string PublicKey { get; }
    [NotNullAttribute]
public string CompanyName { get; }
    [CanBeNullAttribute]
public AcceptLicenseDelegate AcceptLicenseDelegate { get; }
    public UserLicenseChecker(string licenseName, string publicKey, string companyName, AcceptLicenseDelegate acceptLicenseDelegate);
    private static UserLicenseChecker();
    [CompilerGeneratedAttribute]
public string get_LicenseName();
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public string get_CompanyName();
    [CompilerGeneratedAttribute]
public AcceptLicenseDelegate get_AcceptLicenseDelegate();
    public static UserLicenseChecker CreateFor(string licenseName, string publicKey, int version, DateTime dateTimeForSubscriptionCheck, Func`2<LicenseData, LicenseCheckResult> additionalCheck);
    public static UserLicenseChecker CreateForReSharperEditions(string licenseName, int version, DateTime dateTimeForSubscriptionCheck, Int32[] expectedEditions);
    public static UserLicenseChecker CreateForReSharperUltimate();
    public static UserLicenseChecker CreateForReSharperClassroomAndOpenSource(string productName);
    [ObsoleteAttribute("The method is to be removed. Use the overload without parameters")]
public static UserLicenseChecker CreateForReSharperUltimate(int version, DateTime dateTimeForSubscriptionCheck);
    public static UserLicenseChecker CreateForReSharperRegular(int version, DateTime dateTimeForSubscriptionCheck);
}
public class JetBrains.Application.License2.UserLicenses.FileUserLicenseAccess : object {
    private IDataAccess`1<IList`1<Pair`2<string, string>>> myAccess;
    public string Description { get; }
    public string Location { get; }
    public FileUserLicenseAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
    private void LoadFromFile(string fileContent, JetHashSet`1<UserLicense> licenses);
    public sealed virtual string get_Description();
    public sealed virtual string get_Location();
    public sealed virtual string GetRemoveScript();
    public sealed virtual bool TryClear();
    public sealed virtual IEnumerable`1<UserLicense> Load();
    public sealed virtual void Save(IEnumerable`1<UserLicense> newValue);
}
public interface JetBrains.Application.License2.UserLicenses.INamedLicenseData {
    public string LicenseName { get; }
    public string LicenseeName { get; }
    public string AssigneeName { get; }
    public string LicenseId { get; }
    public string LicenseHash { get; }
    public string LicenseRestrictions { get; }
    public DateTime ExpirationDate { get; }
    public bool CheckConcurrentUse { get; }
    public UserLicenseStatus Status { get; }
    public abstract virtual string get_LicenseName();
    public abstract virtual string get_LicenseeName();
    public abstract virtual string get_AssigneeName();
    public abstract virtual string get_LicenseId();
    public abstract virtual string get_LicenseHash();
    public abstract virtual string get_LicenseRestrictions();
    public abstract virtual DateTime get_ExpirationDate();
    public abstract virtual bool get_CheckConcurrentUse();
    public abstract virtual string DescribeValidLicense();
    public abstract virtual UserLicenseStatus get_Status();
}
public interface JetBrains.Application.License2.UserLicenses.INamedLicenseData`1 {
    public TLicenseData LicenseData { get; }
    public abstract virtual TLicenseData get_LicenseData();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.UserLicenses.NamedLicenseDataEx : object {
    [ExtensionAttribute]
public static string GetTitle(INamedLicenseData data);
}
internal class JetBrains.Application.License2.UserLicenses.OldNamedLicenseData : object {
    [CompilerGeneratedAttribute]
private LicenseData <LicenseData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseName>k__BackingField;
    public LicenseData LicenseData { get; public set; }
    public string LicenseName { get; }
    public string LicenseeName { get; }
    public string AssigneeName { get; }
    public string LicenseId { get; }
    public string LicenseHash { get; }
    public string LicenseRestrictions { get; }
    public DateTime ExpirationDate { get; }
    public bool CheckConcurrentUse { get; }
    public UserLicenseStatus Status { get; }
    public OldNamedLicenseData(string licenseName, LicenseData oldLicenseData);
    public OldNamedLicenseData(string licenseName, string publicKey, string licenseKey, string userName, string companyName, AcceptLicenseDelegate acceptLicenseDelegate);
    [CompilerGeneratedAttribute]
public sealed virtual LicenseData get_LicenseData();
    [CompilerGeneratedAttribute]
public void set_LicenseData(LicenseData value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseName();
    public sealed virtual string get_LicenseeName();
    public sealed virtual string get_AssigneeName();
    public sealed virtual string get_LicenseId();
    public sealed virtual string get_LicenseHash();
    public sealed virtual string get_LicenseRestrictions();
    public sealed virtual DateTime get_ExpirationDate();
    public sealed virtual bool get_CheckConcurrentUse();
    public sealed virtual string DescribeValidLicense();
    public sealed virtual UserLicenseStatus get_Status();
}
public class JetBrains.Application.License2.UserLicenses.RegistryUserLicenseAccess : MultipleItemsLicenseDataAccess`1<UserLicense> {
    public RegistryUserLicenseAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
public class JetBrains.Application.License2.UserLicenses.RegistryUserLicenseSettingsAccess : SingleItemLicenseDataAccess`1<UserLicenseSettings> {
    public RegistryUserLicenseSettingsAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
public class JetBrains.Application.License2.UserLicenses.RegistryValidateKeyResultsAccess : SingleItemLicenseDataAccess`1<ValidateKeyResults> {
    public RegistryValidateKeyResultsAccess(DataAccess dataAccess, IAnyProductSettingsLocation settingsLocation);
}
public class JetBrains.Application.License2.UserLicenses.UserLicense : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseKey>k__BackingField;
    [NotNullAttribute]
public string UserName { get; private set; }
    [NotNullAttribute]
public string LicenseKey { get; private set; }
    public string LicenseId { get; }
    public UserLicense(string userName, string licenseKey);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
private void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_LicenseKey();
    [CompilerGeneratedAttribute]
private void set_LicenseKey(string value);
    public string get_LicenseId();
    protected bool Equals(UserLicense other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.License2.UserLicenses.UserLicenseEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<Pair`2<ILicensedEntity, ISupportsUserLicense>> WithUserLicenseSupport(IEnumerable`1<ILicensedEntity> entities);
}
public class JetBrains.Application.License2.UserLicenses.UserLicenseSettings : object {
    [CompilerGeneratedAttribute]
private bool <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserLicense> <SuspendedLicenses>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextKeyValidationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Pair`2<UserLicense, string>> <OldUserLicenseConversion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    public static UserLicenseSettings Default;
    public bool IsOn { get; internal set; }
    public IEnumerable`1<UserLicense> SuspendedLicenses { get; internal set; }
    public DateTime NextKeyValidationTime { get; internal set; }
    public IList`1<Pair`2<UserLicense, string>> OldUserLicenseConversion { get; internal set; }
    public string FirstName { get; internal set; }
    public string LastName { get; internal set; }
    public string Email { get; internal set; }
    private static UserLicenseSettings();
    [CompilerGeneratedAttribute]
public bool get_IsOn();
    [CompilerGeneratedAttribute]
internal void set_IsOn(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<UserLicense> get_SuspendedLicenses();
    [CompilerGeneratedAttribute]
internal void set_SuspendedLicenses(IEnumerable`1<UserLicense> value);
    [CompilerGeneratedAttribute]
public DateTime get_NextKeyValidationTime();
    [CompilerGeneratedAttribute]
internal void set_NextKeyValidationTime(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<Pair`2<UserLicense, string>> get_OldUserLicenseConversion();
    [CompilerGeneratedAttribute]
internal void set_OldUserLicenseConversion(IList`1<Pair`2<UserLicense, string>> value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
internal void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
internal void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
internal void set_Email(string value);
}
public class JetBrains.Application.License2.UserLicenses.UserLicenseStatus : object {
    [CompilerGeneratedAttribute]
private NotificationSeverity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Is30MinToShutdown>k__BackingField;
    public NotificationSeverity Severity { get; }
    public String[] Text { get; }
    public bool Is30MinToShutdown { get; }
    public UserLicenseStatus(NotificationSeverity severity, bool is30MinToShutdown, String[] text);
    [CompilerGeneratedAttribute]
public NotificationSeverity get_Severity();
    [CompilerGeneratedAttribute]
public String[] get_Text();
    [CompilerGeneratedAttribute]
public bool get_Is30MinToShutdown();
}
public class JetBrains.Application.License2.UserLicenses.UserLicenseViewSubmodel : object {
    private object myLock;
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private ILogger myLogger;
    private IJetBrainsLicenseServerAccessor myLicenseServerAccessor;
    private UserNotifications myUserNotifications;
    private ILicense2CheckComponent myLicense2CheckComponent;
    private NewLicenseDataCache myNewLicenseDataCache;
    [CompilerGeneratedAttribute]
private UserLicenseService <UserLicenseService>k__BackingField;
    private Dictionary`2<UserLicense, LicenseState> myAllLicenses;
    private ValidateKeyResults myValidateKeyResults;
    private LicenseCheckResult`1<UserLicense> myCheckResult;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsOn>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LicenseViewModel> <AllModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<UserLicense> <SuspendedLicenses>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextKeyValidationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<UserLicense, string> <myOldUserLicenseConversion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> <AllowedEntities>k__BackingField;
    public UserLicenseService UserLicenseService { get; }
    public IProperty`1<bool> IsOn { get; }
    public IProperty`1<LicenseViewModel> AllModel { get; }
    private ICollectionEvents`1<UserLicense> SuspendedLicenses { get; }
    private DateTime NextKeyValidationTime { get; private set; }
    private Dictionary`2<UserLicense, string> myOldUserLicenseConversion { get; private set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Email { get; public set; }
    private IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.LicenseData { get; }
    public IEnumerable`1<UserLicense> AllLicenses { get; }
    public IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> AllowedEntities { get; }
    public ISimpleSignal ResultChanged { get; }
    public UserLicenseViewSubmodel(Lifetime lifetime, string allModelName, ILicenseData data, ITaskHost taskHost, ILogger logger, IJetBrainsLicenseServerAccessor licenseServerAccessor, UserNotifications userNotifications, ILicense2CheckComponent license2CheckComponent, NewLicenseDataCache newLicenseDataCache, UserLicenseService userLicenseService);
    [CompilerGeneratedAttribute]
public UserLicenseService get_UserLicenseService();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsOn();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<LicenseViewModel> get_AllModel();
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<UserLicense> get_SuspendedLicenses();
    [CompilerGeneratedAttribute]
private DateTime get_NextKeyValidationTime();
    [CompilerGeneratedAttribute]
private void set_NextKeyValidationTime(DateTime value);
    [CompilerGeneratedAttribute]
private Dictionary`2<UserLicense, string> get_myOldUserLicenseConversion();
    [CompilerGeneratedAttribute]
private void set_myOldUserLicenseConversion(Dictionary`2<UserLicense, string> value);
    [CompilerGeneratedAttribute]
public string get_FirstName();
    [CompilerGeneratedAttribute]
public void set_FirstName(string value);
    [CompilerGeneratedAttribute]
public string get_LastName();
    [CompilerGeneratedAttribute]
public void set_LastName(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    private sealed virtual override IEnumerable`1<ILicenseDataItem> JetBrains.Application.License2.ILicenseViewSubmodel.get_LicenseData();
    public IEnumerable`1<UserLicense> get_AllLicenses();
    public LicenseState GetLicenseState(UserLicense userLicense);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlyCollection`1<ILicensedEntity>> get_AllowedEntities();
    public sealed virtual ISimpleSignal get_ResultChanged();
    public sealed virtual ILicenseCheckInfo TryGetInfo(ILicensedEntity entity);
    private IReadOnlyCollection`1<ILicensedEntity> CalculateAllowedEntities();
    private void InitSettings(ILicenseData data);
    private void ScheduleCheckAllLicenses();
    private void SetNextKeysValidation(long validationPeriodInMilliseconds);
    private void SetNextKeysValidation(DateTime nextKeyValidationTime);
    public void ValidateLicenseKey(UserLicense userLicense);
    private long ValidateLicenseKey(INamedLicenseData licenseData, long validationPeriod);
    private long ValidateLicenseKeyImpl(INamedLicenseData licenseData, long validationPeriod, string productCode, int version, DateTime buildDate);
    public bool AddLicense(UserLicense userLicense, bool doCheckSynchronousely, bool validateLicenseKey);
    public void RemoveLicenseFromSuspended(UserLicense userLicense);
    public void RemoveLicense(UserLicense userLicense);
    public void SuspendLicense(UserLicense userLicense);
    private LicenseCheckInfo`1<INamedLicenseData> CreateInfoFor(ILicensedEntity entity, INamedLicenseData licenseData);
    public Nullable`1<Pair`2<LicenseState, string>> TryGetOldLicenseConversionStatus(INamedLicenseData licenseData);
    private Pair`2<LicenseState, string> GetOldLicenseConversionStatusOrNotApplicable(UserLicense userLicense);
    [CanBeNullAttribute]
private LicenseCheckInfo`1<INamedLicenseData> TryCreateInfoForOldLicenseData(ILicensedEntity entity, INamedLicenseData licenseData);
    private ValidateKeyResponse TryValidateUserLicense(INamedLicenseData licenseData, string productCode, int version, DateTime buildDate);
    private void ScheduleKeysExchange();
    public void TryExchangeKey(UserLicense userLicense, bool isSync);
    private void TryExchangeKey(UserLicense userLicense);
    private void CheckLicense(UserLicense userLicense);
    [CanBeNullAttribute]
public static INamedLicenseData CheckLicense(UserLicense license, ISupportsUserLicense supportsUserLicense);
    [CanBeNullAttribute]
private INamedLicenseData CheckLicense(UserLicense license, ILicensedEntity entity);
    public IReadOnlyCollection`1<INamedLicenseData> GetUsedLicenseDatas();
    private IReadOnlyCollection`1<INamedLicenseData> GetFilteredLicenseDatas(Func`3<LicenseState, ILicenseCheckInfo, bool> filter);
    public IList`1<ILicenseCheckInfo`1<INamedLicenseData>> GetResults(UserLicense userLicense);
    public Task`1<NetworkOperationResult`1<string>> TryObtainAnonymousTrialLicenseAsync(Lifetime lifetime, string productCodeToRequestAnonymousFreeTrial);
    private bool TryAddAnonymousTrialLicense(EncodedAsset trialAsset);
    [CompilerGeneratedAttribute]
private bool <TryGetInfo>b__54_0(UserLicense license);
    [CompilerGeneratedAttribute]
private void <ScheduleCheckAllLicenses>b__58_0();
    [CompilerGeneratedAttribute]
private void <SetNextKeysValidation>b__60_0();
}
public class JetBrains.Application.License2.UserLicenses.ValidateKeyResults : object {
    [CompilerGeneratedAttribute]
private IList`1<KeyValuePair`2<string, string>> <LicenseKeyWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<KeyValuePair`2<string, string>> <LicenseKeyErrors>k__BackingField;
    public IList`1<KeyValuePair`2<string, string>> LicenseKeyWarnings { get; }
    public IList`1<KeyValuePair`2<string, string>> LicenseKeyErrors { get; }
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, string>> get_LicenseKeyWarnings();
    [CompilerGeneratedAttribute]
public IList`1<KeyValuePair`2<string, string>> get_LicenseKeyErrors();
    public bool ClearKeyResult(string licenseId);
    public static int RemoveAll(IList`1<T> collection, Func`2<T, bool> match);
    public void SetWarning(string licenseId, string warning);
    public void SetError(string licenseId, string error);
    public string TryGetError(string licenseId);
    public string TryGetWarning(string licenseId);
    public void ClearKeyResult(UserLicense userLicense);
}
public static class JetBrains.Application.License2.Util.AssetUtil : object {
    public static string DescribeValidAsset(string licensee, string licenseRestrictions, DateTime subscriptionEndDate, DateTime expirationDate);
}
public static class JetBrains.Application.License2.Util.EvaluationUtil : object {
    [ObsoleteAttribute("You ain't got a valid BVS at runtime, take the semver of your product package instead.")]
public static Guid MakeEvaluationGuid(Guid seed, BuildVersionSuffix version);
    public static Guid MakeEvaluationGuid(Guid seed, JetSemanticVersion version);
    public static Guid MakeEvaluationGuid(Guid seed, IApplicationPackage apppkg);
}
public class JetBrains.Application.License2.Util.FieldAccess : object {
    private FieldInfo myFieldInfo;
    public string Name { get; }
    public Type Type { get; }
    public FieldAccess(FieldInfo fieldInfo);
    public sealed virtual string get_Name();
    public sealed virtual Type get_Type();
    public sealed virtual object GetValue(object instance);
    public sealed virtual void SetValue(object instance, object value);
}
public interface JetBrains.Application.License2.Util.IPropertyAccess {
    public string Name { get; }
    public Type Type { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type get_Type();
    public abstract virtual object GetValue(object instance);
    public abstract virtual void SetValue(object instance, object value);
}
public class JetBrains.Application.License2.Util.JsonLikeSerializer : object {
    private char myLPar;
    private char myRPar;
    private char myComma;
    private char myColon;
    private List`1<Func`2<Type, TypeConverter>> myConverterFunctions;
    private List`1<Func`2<Type, IEnumerable`1<IPropertyAccess>>> myGetPropertyAccessFunctions;
    private bool myIsEncrypted;
    public static Func`2<Type, IEnumerable`1<IPropertyAccess>> PROPERTIES_ACCESS;
    public static Func`2<Type, IEnumerable`1<IPropertyAccess>> FIELDS_ACCESS;
    public JsonLikeSerializer(bool isEncrypted);
    public JsonLikeSerializer(char lPar, char rPar, char comma, char colon, bool isEncrypted);
    private static JsonLikeSerializer();
    private ICollection`1<IPropertyAccess> GetPropertyAccess(Type type);
    public JsonLikeSerializer AddTypeConverter(Func`2<Type, TypeConverter> converter);
    public JsonLikeSerializer AddPropertyAccess(Func`2<Type, IEnumerable`1<IPropertyAccess>> func);
    public void AddTypeConverter(Func`4<ITypeDescriptorContext, CultureInfo, T, string> FToString, Func`4<ITypeDescriptorContext, CultureInfo, string, T> FFromString);
    public string ObjectToString(object o);
    public T StringToObject(string value, bool ignoreEncryption);
    private object StringToObject(Type type, string value, Int32& pos);
    private static bool TryChar(string value, int pos, char expectedChar);
    private object FillObjectByEnumerable(string value, Int32& pos, object result, bool returnNullIfEmpty, Func`4<object, string, int, int> parseItem);
    private int ParseProperty(object result, string value, int pos, ICollection`1<IPropertyAccess> propertyAccess);
    private int ParseCollectionElement(object collection, Type itemType, string value, int pos);
    private static object StringToObjectByConverter(TypeConverter converter, string value);
    private static void AddItem(object result, object item, Type itemType);
    private object StringToCollection(Type type, Type itemType, string value, Int32& pos);
    private TypeConverter TryGetTypeConverter(Type t);
    private static Type IsGenericIEnumerable(Type type);
    private static Type TryGetGenericICollection(Type type);
    private static Type DoesImplementGenericIEnumerable(Type type);
    private StringBuilder AppendObject(object o, StringBuilder result);
    private StringBuilder AppendEnumerable(IEnumerable items, Action`2<T, StringBuilder> appendItem, StringBuilder result);
}
public class JetBrains.Application.License2.Util.PropertyAccess : object {
    private PropertyInfo myPropertyInfo;
    public string Name { get; }
    public Type Type { get; }
    public PropertyAccess(PropertyInfo propertyInfo);
    public sealed virtual string get_Name();
    public sealed virtual Type get_Type();
    public sealed virtual object GetValue(object instance);
    public sealed virtual void SetValue(object instance, object value);
}
public class JetBrains.Application.Logging.DataSizePerformanceAggregator : PerformanceAggregator`1<DataSizePerformanceAggregator> {
    public DataSizePerformanceAggregator(Lifetime lifetime, ILogger logger, string watchdogName);
    public void AddValue(long bytes);
}
public class JetBrains.Application.Logging.HotspotWatchdog : PerformanceAggregator`1<HotspotWatchdog> {
    public HotspotWatchdog(Lifetime lifetime, ILogger logger, string watchdogName);
    public HotspotWatchdog WithTimeLimitOnInterval(TimeSpan timeLimit, TimeSpan observationInterval);
    public Cookie Measure(string comment);
}
[ExtensionAttribute]
public static class JetBrains.Application.Logging.ILoggerShellEx : object {
    [ExtensionAttribute]
public static void WhenEnabled(ILogger logger, Lifetime lifetime, LoggingLevel level, IThreading threading, Action`1<Lifetime> action);
    [ExtensionAttribute]
public static void WhenTraceEnabled(ILogger logger, Lifetime lifetime, IThreading threading, Action`1<Lifetime> action);
    [ExtensionAttribute]
public static void WhenVerboseEnabled(ILogger logger, Lifetime lifetime, IThreading threading, Action`1<Lifetime> action);
}
public class JetBrains.Application.Logging.PerformanceAggregator : PerformanceAggregator`1<PerformanceAggregator> {
    public PerformanceAggregator(Lifetime lifetime, ILogger logger, MetricUnit unit, string watchdogName);
}
public abstract class JetBrains.Application.Logging.PerformanceAggregator`1 : object {
    protected Lifetime Lifetime;
    [NotNullAttribute]
protected ILogger Logger;
    private MetricUnit myUnit;
    [NotNullAttribute]
protected string WatchdogName;
    [CanBeNullAttribute]
private IShellLocks myLocks;
    private Policy<TThis> myPolicy;
    private List`1<IMetricConsumer<TThis>> myConsumers;
    protected PerformanceAggregator`1(Lifetime lifetime, ILogger logger, MetricUnit unit, string watchdogName);
    public TThis WithThreadingPolicy(IShellLocks shellLocks, Policy<TThis> policy);
    public TThis WithTotalElapsedTime();
    public TThis WithQuantile(double quantile);
    public TThis WithQuantiles(Double[] quantiles);
    public TThis WithDefaultQuantiles();
    public void AddValue(double value, string comment);
    protected TThis AddConsumer(IMetricConsumer<TThis> consumer);
    protected bool CheckPolicy();
}
public class JetBrains.Application.Logging.Scenarios.EnabledScenariosConverter : object {
    [NotNullAttribute]
[ItemNotNullAttribute]
public static IList`1<string> Convert(string scenariosString);
    [NotNullAttribute]
public static string ConvertBack(IEnumerable`1<string> scenarios);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "LogTraceScenariosEnabledInInternalModeSettingDescription")]
public class JetBrains.Application.Logging.Scenarios.LogSetings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "EnabledScenariosFromLogTraceScenariosMapDelimitedByCommaSettingDescription")]
public string EnabledScenariosDelimetedByComma;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "EnabledCustomNamespacesFromLogTraceScenariosMapDelimitedByCommaSettingDescription")]
public string CustomNamespaceTracing;
}
public class JetBrains.Application.Logging.Scenarios.LogTraceScenarios : object {
    public static string CACHES;
    public static string FILES;
    public static string DAEMON;
    public static string FILE_SYSTEM_TRACKER;
    public static Dictionary`2<string, String[]> Map;
    private static LogTraceScenarios();
    public static void SetLoggingLevel(Lifetime lifetime, LoggingLevel loggingLevel, String[] scenarios);
}
[ShellComponentAttribute("18")]
public class JetBrains.Application.Logging.Scenarios.LogTraceScenariosSettingsTracker : object {
    [CompilerGeneratedAttribute]
private IProperty`1<String[]> <EnabledCategories>k__BackingField;
    public IProperty`1<String[]> EnabledCategories { get; }
    public LogTraceScenariosSettingsTracker(Lifetime lifetime, ISettingsStore settings, IStatusBar statusBar, IThreading threading);
    [CompilerGeneratedAttribute]
public IProperty`1<String[]> get_EnabledCategories();
    private void OpenLogFile();
    public static void EnableTraceCategories(Lifetime lifetime, String[] categories);
    [NotNullAttribute]
private static List`1<string> GetCategories(string scenariosFromSetting);
}
public static class JetBrains.Application.Logging.ShellLoggerConfiguration : object {
    public static string LogConfigurationFileName;
    private static string LogConfigurationEnvironmentVariable;
    public static FileSystemPath LoggerConfigurationLocation(HostInfo hostInfo);
    public static FileSystemPath LoggerConfigurationFolder(HostInfo hostInfo);
}
public class JetBrains.Application.Logging.TimePerformanceAggregator : PerformanceAggregator`1<TimePerformanceAggregator> {
    public TimePerformanceAggregator(Lifetime lifetime, ILogger logger, string watchdogName);
    public void AddValue(TimeSpan elapsed);
}
public class JetBrains.Application.ModuleZonePartCatalogFilter : object {
    public static bool OptionFilterOutNonZoneEligibleTypes;
    [NotNullAttribute]
private JetHashSet`1<ZonePart> myActiveModuleZoneValues;
    private LocalLazy`1<CachedPartsPerZone> myCachedPartsPerZone;
    private LocalLazy`2<PartCatalogZoneMapping, PartCatalog> myMapping;
    private LocalLazy`2<PartCatalogTraitOperations, JetHashSet`1<ZonePart>> myTraits;
    private PartCatalogTraitOperations JetBrains.Application.Catalogs.Filtering.IPartCatalogFilterRequiresTraits.Traits { get; }
    public ModuleZonePartCatalogFilter(JetHashSet`1<ZonePart> zones, PartCatalog catalog);
    private static PartCatalogTraitOperations CalculateTraits(JetHashSet`1<ZonePart> zones);
    private sealed virtual override CollectionSource`1<PartCatalogType> JetBrains.Application.Catalogs.Filtering.IPartCatalogFilter.GetParts(CollectionSource`1<PartCatalogType> parts);
    [IteratorStateMachineAttribute("JetBrains.Application.ModuleZonePartCatalogFilter/<GetPartsCore>d__8")]
private IEnumerable`1<PartCatalogType> GetPartsCore(CollectionSource`1<PartCatalogType> parts);
    private sealed virtual override bool JetBrains.Application.Catalogs.Filtering.IPartCatalogFilter.IsPassing(PartCatalogType part);
    private sealed virtual override PartCatalogTraitOperations JetBrains.Application.Catalogs.Filtering.IPartCatalogFilterRequiresTraits.get_Traits();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Navigation.ActionsHistory : object {
    private Stack`1<string> myHistory;
    private IShellLocks myShellLocks;
    private ShellCaches myShellCaches;
    private static string RecentActionsTagName;
    private static string ActionTagName;
    private static string AttrID;
    public ActionsHistory(IShellLocks shellLocks, ShellCaches shellCaches, Lifetime lifetime, IThreading threading);
    private void InitPersistence(Lifetime lifetime);
    public void LogActionExecution(IActionDefWithId actionDefWithId);
    public List`1<string> GetHistory();
    private sealed virtual override void JetBrains.Application.Configuration.IXmlWritable.WriteToXml(XmlElement element);
    private sealed virtual override void JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(XmlElement e);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Navigation.Goto.Controllers.DataContextHolder : object {
    [CanBeNullAttribute]
private IDataContext myDataContext;
    [CanBeNullAttribute]
private Thread myThread;
    [CanBeNullAttribute]
private Lifetime myLifetime;
    [CanBeNullAttribute]
public Thread CurrentDataContextThread { get; }
    public void StoreDataContextForAWhile(Lifetime lifetime, IDataContext dataContext);
    public Thread get_CurrentDataContextThread();
    [CanBeNullAttribute]
public IDataContext GetHoldedDataContext();
}
public interface JetBrains.Application.Navigation.Goto.Controllers.IGotoActionAsyncStrategy {
    public bool IsGuarded { get; }
    public abstract virtual void ExecuteItem(IShellLocks locks, JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute, Func`3<JetPopupMenuItem, ISignal`1<bool>, bool> executeItem);
    public abstract virtual bool get_IsGuarded();
}
public class JetBrains.Application.Navigation.Goto.Controllers.InterruptableDialogStrategy : object {
    private static InterruptableDialogStrategy ourInstance;
    public static InterruptableDialogStrategy Instance { get; }
    public bool IsGuarded { get; }
    private static InterruptableDialogStrategy();
    public static InterruptableDialogStrategy get_Instance();
    public sealed virtual void ExecuteItem(IShellLocks locks, JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute, Func`3<JetPopupMenuItem, ISignal`1<bool>, bool> executeItem);
    public sealed virtual bool get_IsGuarded();
}
public class JetBrains.Application.Navigation.Goto.Controllers.ModalDialogStrategy : object {
    private static ModalDialogStrategy ourInstance;
    public static ModalDialogStrategy Instance { get; }
    public bool IsGuarded { get; }
    private static ModalDialogStrategy();
    public static ModalDialogStrategy get_Instance();
    public sealed virtual void ExecuteItem(IShellLocks locks, JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute, Func`3<JetPopupMenuItem, ISignal`1<bool>, bool> executeItem);
    public sealed virtual bool get_IsGuarded();
}
internal class JetBrains.Application.Navigation.Goto.Filters.LexemReader : object {
    private List`1<FilterLexem> myInputLexems;
    private int myPosition;
    [CompilerGeneratedAttribute]
private int <CurrentOffset>k__BackingField;
    public int Count { get; }
    public int Position { get; }
    public int CurrentOffset { get; private set; }
    public FilterLexem Current { get; }
    public FilterLexem Next { get; }
    public bool Eof { get; }
    public LexemReader(List`1<FilterLexem> inputLexems);
    public int get_Count();
    public int get_Position();
    [CompilerGeneratedAttribute]
public int get_CurrentOffset();
    [CompilerGeneratedAttribute]
private void set_CurrentOffset(int value);
    public FilterLexem get_Current();
    public FilterLexem get_Next();
    private FilterLexem Get(int i);
    public bool MoveNext();
    public bool Has(int itemCount);
    public bool get_Eof();
}
public class JetBrains.Application.Navigation.Goto.Filters.NavigationFilterLexer : object {
    private DfaStates GetCharType(char i);
    [IteratorStateMachineAttribute("JetBrains.Application.Navigation.Goto.Filters.NavigationFilterLexer/<Read>d__2")]
public IEnumerable`1<FilterLexem> Read(string input);
}
public class JetBrains.Application.Navigation.Goto.Filters.NavigationFilterParser : object {
    private NavigationFilterLexer myLexer;
    public IList`1<BaseNode> Parse(string input);
    [NotNullAttribute]
private static BaseNode ParseFilter(LexemReader lexemReader);
    [CanBeNullAttribute]
private static string ParseValue(LexemReader lexemReader);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Navigation.Goto.GotoAction.ActionPresentationStyle : ValueType {
    public bool Recent;
    public bool FullPresentation;
    public static ActionPresentationStyle Default { get; }
    public ActionPresentationStyle(bool recent, bool fullPresentation);
    public static ActionPresentationStyle get_Default();
}
public class JetBrains.Application.Navigation.Goto.GotoAction.GotoActionController : GotoByNameController {
    private static int InstantItemLimit;
    [NotNullAttribute]
private IEnumerable`1<IGotoActionProvider> myItemsProvider;
    private IEnumerable`1<IGotoActionPresenter> myPresenters;
    private IGotoActionAsyncStrategy myStrategy;
    private DataContextHolder myDataContextHolder;
    private UserDataHolder myContext;
    private Dictionary`2<INeedMainThreadToUpdateAction, bool> myUIActionsAvailability;
    public static Key`1<Dictionary`2<INeedMainThreadToUpdateAction, bool>> UIActionAvailabilityKey;
    public static Key`1<object> AllActionsKey;
    private string myInitialCaption;
    [NotNullAttribute]
private IShellLocks myLocks;
    private GotoActionController(Lifetime lifetime, GotoByNameModel model, IShellLocks locks, IEnumerable`1<IGotoActionProvider> itemsProvider, IEnumerable`1<IGotoActionPresenter> presenters, IGotoActionAsyncStrategy strategy, IDataContext dataContext, DataContextHolder dataContextHolder);
    private static GotoActionController();
    protected void InitAsyncAction(IThreading invocator, IShellLocks locks);
    protected virtual void InternalExecuteItem(JetPopupMenuItem item, IShellLocks locks);
    private void InitUIActionsAvailability(IDataContext context);
    public static GotoActionController CreateGotoActionController(Lifetime lifetime, IShellLocks locks, IDataContext context, GotoByNameModel model, IGotoActionAsyncStrategy strategy, DataContextHolder dataContextHolder, LifetimeDefinition lifetimeDefinition);
    protected virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    public virtual JetPopupMenuItem Present(IGotoActionItem item, MatchingInfo matchingInfo);
    protected virtual bool UpdateItems(string filterString, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> itemsConsumer);
    private ValueTuple`2<string, string> ParseFilter(string filterString, UserDataHolder context);
    protected virtual void InitDefaultAsyncAction();
}
public class JetBrains.Application.Navigation.Goto.GotoAction.GotoActionItem : object {
    private DataContextHolder myDataContextHolder;
    private IActionManager myActionManager;
    private ILazy`1<ActionsHistory> myActionsHistory;
    [CompilerGeneratedAttribute]
private ActionPresentationStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EvaluatedText>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionDefWithId <ActionDefWithId>k__BackingField;
    public ActionPresentationStyle Style { get; }
    [NotNullAttribute]
public string EvaluatedText { get; }
    [NotNullAttribute]
public IActionDefWithId ActionDefWithId { get; }
    public GotoActionItem(IActionDefWithId actionDef, ActionPresentationStyle recent, string evaluatedText, DataContextHolder dataContextHolder, IActionManager actionManager, ILazy`1<ActionsHistory> actionsHistory);
    public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public ActionPresentationStyle get_Style();
    [CompilerGeneratedAttribute]
public string get_EvaluatedText();
    [CompilerGeneratedAttribute]
public IActionDefWithId get_ActionDefWithId();
    public sealed virtual void Execute();
    public virtual string ToString();
    protected bool Equals(GotoActionItem other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private void <Execute>b__14_0(Lifetime lifetime);
}
[ShellFeaturePartAttribute("0")]
public class JetBrains.Application.Navigation.Goto.GotoAction.GotoActionItemPresenter : object {
    private IActionManager myActionManager;
    public GotoActionItemPresenter(IActionManager actionManager);
    public sealed virtual bool TryPresent(IGotoActionItem item, IMenuItemDescriptor descriptor);
}
[ShellFeaturePartAttribute("0")]
public class JetBrains.Application.Navigation.Goto.GotoAction.GotoActionProvider : object {
    private IActionManager myActionManager;
    private IActionDependenceHelper myActionDependenceHelper;
    private DataContextHolder myDataContextHolder;
    private IShellLocks myLocks;
    private ILazy`1<ActionsHistory> myActionsHistory;
    private static List`1<string> ourBlessedActionsCollection;
    private static OneToListMap`2<string, string> ourDescriptionMap;
    private static JetHashSet`1<string> ourDontNeedUpdateActions;
    private static GotoActionProvider();
    public GotoActionProvider(IActionManager actionManager, IActionDependenceHelper actionDependenceHelper, DataContextHolder dataContextHolder, IShellLocks locks, ILazy`1<ActionsHistory> actionsHistory);
    public sealed virtual IEnumerable`1<ValueTuple`2<IGotoActionItem, MatchingInfo>> GetMatchingActions(IIdentifierMatcher matcher, UserDataHolder searchContext, Func`1<bool> checkForInterrupt);
    public static Nullable`1<ValueTuple`2<IGotoActionItem, MatchingInfo>> EvaluateAndGetItems(IActionHandlers actionHandlers, IActionDefWithId actionDefWithId, Dictionary`2<INeedMainThreadToUpdateAction, bool> availabilityMap, IDataContext context, ActionPresentationStyle presentationStyle, IIdentifierMatcher matcher, string presentableText, DataContextHolder dataContextHolder, IActionManager actionManager, ILazy`1<ActionsHistory> actionsHistory, Func`2<MatcherScore, int> adjustmentFunc);
    private static int AdjustmentFunc(MatcherScore score);
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.Application.Navigation.Goto.GotoAction.GotoOptionsPageProvider : object {
    private ILazy`1<IOptionPagesList> myOptionPagesList;
    private ILazy`1<OptionsManager> myOptionsManager;
    private ILazy`1<IThreading> myThreading;
    public GotoOptionsPageProvider(ILazy`1<IOptionPagesList> optionPagesList, ILazy`1<OptionsManager> optionsManager, ILazy`1<IThreading> threading);
    [IteratorStateMachineAttribute("JetBrains.Application.Navigation.Goto.GotoAction.GotoOptionsPageProvider/<GetMatchingActions>d__4")]
public sealed virtual IEnumerable`1<ValueTuple`2<IGotoActionItem, MatchingInfo>> GetMatchingActions(IIdentifierMatcher matcher, UserDataHolder searchContext, Func`1<bool> checkForInterrupt);
    [CompilerGeneratedAttribute]
private IList`1<SearchableOptionsPage> <GetMatchingActions>b__4_0();
}
public interface JetBrains.Application.Navigation.Goto.GotoAction.IGotoActionItem {
}
public interface JetBrains.Application.Navigation.Goto.GotoAction.IGotoActionPresenter {
    public abstract virtual bool TryPresent(IGotoActionItem item, IMenuItemDescriptor descriptor);
}
public interface JetBrains.Application.Navigation.Goto.GotoAction.IGotoActionProvider {
    public abstract virtual IEnumerable`1<ValueTuple`2<IGotoActionItem, MatchingInfo>> GetMatchingActions(IIdentifierMatcher matcher, UserDataHolder searchContext, Func`1<bool> checkForInterrupt);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Navigation.Goto.GotoAction.OccurrenceStyles : object {
    private ITheming myTheming;
    [CompilerGeneratedAttribute]
private static JetRgbaColor <ContextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static TextStyle <RecentStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private static JetRgbaColor <RecentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static JetRgbaColor <LineNumberColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static TextStyle <LineNumberStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private static JetRgbaColor <TypeTextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static TextStyle <TypeTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private static JetRgbaColor <AdditionalInfoTextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static TextStyle <AdditionalInfoTextStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private static JetRgbaColor <IgnoredColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static TextStyle <IgnoredStyle>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`3[] ourSetColors;
    public static JetRgbaColor ContextColor { get; private set; }
    public static TextStyle RecentStyle { get; private set; }
    public static JetRgbaColor RecentColor { get; private set; }
    public static JetRgbaColor LineNumberColor { get; private set; }
    public static TextStyle LineNumberStyle { get; private set; }
    public static JetRgbaColor TypeTextColor { get; private set; }
    public static TextStyle TypeTextStyle { get; private set; }
    public static JetRgbaColor AdditionalInfoTextColor { get; private set; }
    public static TextStyle AdditionalInfoTextStyle { get; private set; }
    public static JetRgbaColor IgnoredColor { get; private set; }
    public static TextStyle IgnoredStyle { get; private set; }
    public OccurrenceStyles(Lifetime lifetime, ITheming theming);
    private static OccurrenceStyles();
    [CompilerGeneratedAttribute]
public static JetRgbaColor get_ContextColor();
    [CompilerGeneratedAttribute]
private static void set_ContextColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public static TextStyle get_RecentStyle();
    [CompilerGeneratedAttribute]
private static void set_RecentStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public static JetRgbaColor get_RecentColor();
    [CompilerGeneratedAttribute]
private static void set_RecentColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public static JetRgbaColor get_LineNumberColor();
    [CompilerGeneratedAttribute]
private static void set_LineNumberColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public static TextStyle get_LineNumberStyle();
    [CompilerGeneratedAttribute]
private static void set_LineNumberStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public static JetRgbaColor get_TypeTextColor();
    [CompilerGeneratedAttribute]
private static void set_TypeTextColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public static TextStyle get_TypeTextStyle();
    [CompilerGeneratedAttribute]
private static void set_TypeTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public static JetRgbaColor get_AdditionalInfoTextColor();
    [CompilerGeneratedAttribute]
private static void set_AdditionalInfoTextColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public static TextStyle get_AdditionalInfoTextStyle();
    [CompilerGeneratedAttribute]
private static void set_AdditionalInfoTextStyle(TextStyle value);
    [CompilerGeneratedAttribute]
public static JetRgbaColor get_IgnoredColor();
    [CompilerGeneratedAttribute]
private static void set_IgnoredColor(JetRgbaColor value);
    [CompilerGeneratedAttribute]
public static TextStyle get_IgnoredStyle();
    [CompilerGeneratedAttribute]
private static void set_IgnoredStyle(TextStyle value);
    private static void InvalidateStyles();
    private void PopulateStyles(bool darkTheme);
    public void UsingLightTheme(Action action);
    [CompilerGeneratedAttribute]
private void <.ctor>b__49_0(PropertyChangedEventArgs`1<bool> v);
}
public class JetBrains.Application.Navigation.Goto.GotoAction.OptionPageItem : object {
    private ILazy`1<OptionsManager> myOptionsManager;
    private ILazy`1<IThreading> myThreading;
    [CompilerGeneratedAttribute]
private OptionsPageDescriptor <OptionPage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptionPageFullName>k__BackingField;
    [NotNullAttribute]
public OptionsPageDescriptor OptionPage { get; }
    [NotNullAttribute]
public string OptionPageFullName { get; }
    public OptionPageItem(OptionsPageDescriptor pageDescriptor, string optionPageFullName, ILazy`1<OptionsManager> optionsManager, ILazy`1<IThreading> threading);
    [CompilerGeneratedAttribute]
public OptionsPageDescriptor get_OptionPage();
    [CompilerGeneratedAttribute]
public string get_OptionPageFullName();
    public sealed virtual void Execute();
    public virtual string ToString();
}
[ShellFeaturePartAttribute("16")]
public class JetBrains.Application.Navigation.Goto.GotoAction.OptionPageItemPresenter : object {
    public sealed virtual bool TryPresent(IGotoActionItem item, IMenuItemDescriptor descriptor);
}
public static class JetBrains.Application.Navigation.Goto.GotoAction.ShellItemPresentationUtil : object {
    public static string TextContainerDelimiter;
    private static ShellItemPresentationUtil();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Navigation.Goto.Util.ActionDependenceHelper : object {
    protected IActionManager myActionManager;
    private JetHashSet`1<IActionDefWithId> myCachedDependencesSet;
    private bool myIsInternalMode;
    public ActionDependenceHelper(IActionManager actionManager, ProductConfigurations configuration);
    public sealed virtual bool AvailableFromRoot(IActionDefWithId action);
    [IteratorStateMachineAttribute("JetBrains.Application.Navigation.Goto.Util.ActionDependenceHelper/<GetRootDefs>d__5")]
protected virtual IEnumerable`1<IActionDefWithId> GetRootDefs();
    private void ProcessActionRecursive(IActionDefWithId actionDefWithId);
}
public interface JetBrains.Application.Navigation.Goto.Util.IActionDependenceHelper {
    public abstract virtual bool AvailableFromRoot(IActionDefWithId action);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.Notifications.ApplicationRestartNotification : object {
    private Lifetime myLifetime;
    private IUIApplicationSimple myUI;
    private UserNotifications myUserNotifications;
    private ApplicationShutdownRequests myShutdownRequests;
    protected string ApplicationName { get; }
    public ApplicationRestartNotification(Lifetime lifetime, IUIApplicationSimple ui, UserNotifications userNotifications, ApplicationShutdownRequests shutdownRequests);
    public void RequestRestart(string message, IconId iconId);
    public void RequestRestartShell(string message, IconId iconId);
    protected virtual void RequestRestart(LifetimeDefinition notificationLifedef, string message, IconId iconId, string actionText, Action action);
    protected virtual string get_ApplicationName();
    private void Restart();
    private void RestartShell();
    [CompilerGeneratedAttribute]
private void <RestartShell>b__11_0();
}
public interface JetBrains.Application.Notifications.INotification {
    public LifetimeDefinition LifetimeDefinition { get; }
    public NotificationSeverity Severity { get; }
    [CanBeNullAttribute]
public IconId IconId { get; }
    [CanBeNullAttribute]
public string Title { get; }
    [CanBeNullAttribute]
public string Body { get; }
    [CanBeNullAttribute]
public string Description { get; }
    public DateTime ExpirationTime { get; }
    [NotNullAttribute]
public ISimpleSignal Executed { get; }
    [NotNullAttribute]
public ISimpleSignal Dismissed { get; }
    public bool Silent { get; }
    public bool CanBeExecuted { get; }
    public bool CanBeDismissed { get; }
    [CanBeNullAttribute]
public string ExecuteCommandTitle { get; }
    [CanBeNullAttribute]
public string DismissCommandTitle { get; }
    [NotNullAttribute]
public IEnumerable`1<UserNotificationCommand> AdditionalCommands { get; }
    public abstract virtual LifetimeDefinition get_LifetimeDefinition();
    public abstract virtual NotificationSeverity get_Severity();
    public abstract virtual IconId get_IconId();
    public abstract virtual string get_Title();
    public abstract virtual string get_Body();
    public abstract virtual string get_Description();
    public abstract virtual DateTime get_ExpirationTime();
    public abstract virtual ISimpleSignal get_Executed();
    public abstract virtual ISimpleSignal get_Dismissed();
    public abstract virtual bool get_Silent();
    public abstract virtual bool get_CanBeExecuted();
    public abstract virtual bool get_CanBeDismissed();
    public abstract virtual string get_ExecuteCommandTitle();
    public abstract virtual string get_DismissCommandTitle();
    public abstract virtual IEnumerable`1<UserNotificationCommand> get_AdditionalCommands();
}
public interface JetBrains.Application.Notifications.IRoslynUserNotifications {
    public abstract virtual void NotifyOnUserException(string title, string body);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "NotificationSettingsSettingDescription")]
public class JetBrains.Application.Notifications.NotificationSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "ShowWarningNotificationsForPerformanceIssuesSettingDescription")]
public bool ShowPerformanceNotifications;
}
public enum JetBrains.Application.Notifications.NotificationSeverity : Enum {
    public int value__;
    public static NotificationSeverity INFO;
    public static NotificationSeverity WARNING;
    public static NotificationSeverity CRITICAL;
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Notifications.PerformanceUserNotifications : object {
    private Lifetime myLifetime;
    [NotNullAttribute]
private UserNotifications myUserNotifications;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowPerformanceNotifications>k__BackingField;
    [NotNullAttribute]
public IProperty`1<bool> ShowPerformanceNotifications { get; }
    public PerformanceUserNotifications(Lifetime lifetime, UserNotifications userNotifications, ISettingsStore settingsStore, ProductConfigurations productConfigurations);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowPerformanceNotifications();
    public void TrackPerformance(Lifetime actionLifetime, TimeSpan performanceThreshold, string title, string body);
    public T WithPerformanceNotification(TimeSpan performanceThreshold, string title, string body, Func`1<T> action);
    public void WithPerformanceNotification(TimeSpan performanceThreshold, string title, string body, Action action);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public IDisposable WithPerformanceNotificationCookie(TimeSpan performanceThreshold, string title, string body);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.Notifications.RoslynUserNotifications : object {
    [CompilerGeneratedAttribute]
private UserNotifications <userNotifications>P;
    protected Lifetime MyLifetime;
    public RoslynUserNotifications(Lifetime lifetime, UserNotifications userNotifications);
    public virtual void NotifyOnUserException(string title, string body);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ShowNotificationsActionText")]
public class JetBrains.Application.Notifications.ShowUserNotificationsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.Notifications.UserNotificationCommand : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <Action>k__BackingField;
    [NotNullAttribute]
public string Title { get; }
    [NotNullAttribute]
public Action Action { get; }
    public UserNotificationCommand(string title, Action action);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public Action get_Action();
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Notifications.UserNotifications : object {
    private ILogger myLogger;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private CollectionEvents`1<INotification> <AllNotifications>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <ShowNotifications>k__BackingField;
    private INotification TerminatedNotification;
    [NotNullAttribute]
public CollectionEvents`1<INotification> AllNotifications { get; }
    public SimpleSignal ShowNotifications { get; }
    public UserNotifications(Lifetime lifetime, ILogger logger, IThreading threading);
    [CompilerGeneratedAttribute]
public CollectionEvents`1<INotification> get_AllNotifications();
    [CompilerGeneratedAttribute]
public SimpleSignal get_ShowNotifications();
    public INotification CreateNotification(Lifetime lifetime, NotificationSeverity severity, string title, string body, string description, UserNotificationCommand executed, UserNotificationCommand dismissed, bool closeAfterExecution, IconId iconId, bool silent, IEnumerable`1<UserNotificationCommand> additionalCommands);
    public INotification CreateNotification(Lifetime lifetime, TimeSpan expirationTimeSpan, NotificationSeverity severity, string title, string body, string description, UserNotificationCommand executed, UserNotificationCommand dismissed, bool closeAfterExecution, IconId iconId, bool silent, IEnumerable`1<UserNotificationCommand> additionalCommands);
}
public class JetBrains.Application.PerformanceGuide.Impl.CompositePerformanceSwitchHandler : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private PerformanceSwitchInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceSwitchHandlerGroup <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecommendedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BadValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingPath>k__BackingField;
    private ConcurrentDictionary`2<IPerformanceSwitchHandler, PerformanceSwitchValue> myHandlers;
    public PerformanceSwitchInfo Info { get; }
    public string Id { get; }
    public PerformanceSwitchHandlerGroup Group { get; }
    public string Title { get; }
    public string RecommendedValue { get; }
    private string BadValue { get; }
    public string SettingPath { get; }
    public bool CanSetState { get; }
    public CompositePerformanceSwitchHandler(string id, PerformanceSwitchInfo info, string settingPath, string recommendedValue, string badValue, ILogger logger, IList`1<IPerformanceSwitchHandler> handlers);
    [CompilerGeneratedAttribute]
public sealed virtual PerformanceSwitchInfo get_Info();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual PerformanceSwitchHandlerGroup get_Group();
    public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual string get_RecommendedValue();
    [CompilerGeneratedAttribute]
private string get_BadValue();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SettingPath();
    public sealed virtual bool get_CanSetState();
    public sealed virtual ISignal`1<PerformanceSwitchValue> MonitorExternalStateChanges(Lifetime lifetime);
    private PerformanceSwitchValue CalculatePerformanceSwitchValue();
    private Task`1<PerformanceSwitchValue> ExecuteAllHandlersAsync(Lifetime lifetime, string taskName, Func`3<Lifetime, IPerformanceSwitchHandler, Task`1<PerformanceSwitchValue>> func);
    public sealed virtual Task`1<PerformanceSwitchValue> UpdateStateAsync(Lifetime lifetime);
    public sealed virtual Task`1<PerformanceSwitchValue> SetStateAsync(Lifetime lifetime, PerformanceSwitchState newState);
}
[ShellComponentAttribute("2")]
public class JetBrains.Application.PerformanceGuide.Impl.PerformanceGuide : object {
    public static string SettingsPagePid;
    public static string ConfigureSettingsToImprovePerformanceNotifcationTitle;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IThreading myThreading;
    private UserNotifications myUserNotifications;
    private OptionsManager myOptionsManager;
    private IContextBoundSettingsStoreLive mySettingsStore;
    private IDictionary`2<string, IPerformanceSwitch> mySwitches;
    private ICollectionEvents`1<IPerformanceSwitch> myShowNotifications;
    private IProperty`1<bool> myEnabled;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ApplicationActive>k__BackingField;
    public IProperty`1<bool> ApplicationActive { get; }
    public IReadOnlyCollection`1<IPerformanceSwitch> Switches { get; }
    public PerformanceGuide(Lifetime lifetime, ILogger logger, ISettingsStore settingsStore, IThreading threading, UserNotifications userNotifications, OptionsManager optionsManager, IEnumerable`1<IPerformanceSwitchHandlerProvider> providers);
    private static PerformanceGuide();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ApplicationActive();
    private void LoadSwitchSettings(IPerformanceSwitch switch);
    public sealed virtual void AddSwitchHandler(Lifetime lifetime, IPerformanceSwitchHandler switchHandler);
    private void BindSwitch(Lifetime lifetime, IPerformanceSwitch performanceSwitch);
    private void OnSwitchChanged(Lifetime lifetime, IPerformanceSwitch performanceSwitch);
    private void NotifyUser(IPerformanceSwitch performanceSwitch);
    private void ClearNotification(IPerformanceSwitch performanceSwitch);
    private void ClearNotifications();
    private void OpenSettings();
    private void OnSwitchStateChangedFromOutside(IPerformanceSwitch performanceSwitch, PerformanceSwitchValue newState);
    private Task`1<PerformanceSwitchValue> SetSwitchStateAsync(Lifetime lifetime, IPerformanceSwitch performanceSwitch, PerformanceSwitchState newState, bool notify);
    private void UpdateSwitchStateAsync(Lifetime lifetime, IPerformanceSwitch performanceSwitch);
    public sealed virtual IReadOnlyCollection`1<IPerformanceSwitch> get_Switches();
    public sealed virtual void RefreshSwitchesStates(Lifetime lifetime, IReadOnlyCollection`1<string> ids);
    [AsyncStateMachineAttribute("JetBrains.Application.PerformanceGuide.Impl.PerformanceGuide/<FixSwitches>d__29")]
public sealed virtual void FixSwitches(IPerformanceSwitch[] switches);
    [CompilerGeneratedAttribute]
private void <ClearNotifications>b__21_0();
}
internal class JetBrains.Application.PerformanceGuide.Impl.PerformanceSwitch : object {
    [CompilerGeneratedAttribute]
private IPerformanceSwitchHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PerformanceSwitchValue> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PerformanceSwitchHandlerBehaviour> <Behaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PerformanceSwitchConflictResolutionMode> <ConflictResolutionMode>k__BackingField;
    public IPerformanceSwitchHandler Handler { get; }
    public IProperty`1<PerformanceSwitchValue> State { get; }
    public IProperty`1<PerformanceSwitchHandlerBehaviour> Behaviour { get; }
    public IProperty`1<PerformanceSwitchConflictResolutionMode> ConflictResolutionMode { get; }
    public PerformanceSwitch(Lifetime lifetime, IPerformanceSwitchHandler handler);
    [CompilerGeneratedAttribute]
public sealed virtual IPerformanceSwitchHandler get_Handler();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PerformanceSwitchValue> get_State();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PerformanceSwitchHandlerBehaviour> get_Behaviour();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PerformanceSwitchConflictResolutionMode> get_ConflictResolutionMode();
}
public class JetBrains.Application.PerformanceGuide.Impl.PerformanceSwitchInfo : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Impact>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Affects>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tip>k__BackingField;
    public string Title { get; }
    public string Description { get; }
    public string Impact { get; }
    public string Affects { get; }
    public string Tip { get; }
    public PerformanceSwitchInfo(string title, string description, string impact, string affects, string tip);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public string get_Impact();
    [CompilerGeneratedAttribute]
public string get_Affects();
    [CompilerGeneratedAttribute]
public string get_Tip();
}
public abstract class JetBrains.Application.PerformanceGuide.Impl.ReSharperSettingPerformanceSwitchHandlerBase : object {
    private IContextBoundSettingsStoreLive myBoundSettingsStore;
    private IThreading myThreading;
    public PerformanceSwitchInfo Info { get; }
    public string Id { get; }
    public PerformanceSwitchHandlerGroup Group { get; }
    public string Title { get; }
    public string RecommendedValue { get; }
    public string SettingPath { get; }
    public bool CanSetState { get; }
    public ReSharperSettingPerformanceSwitchHandlerBase(Lifetime lifetime, ISettingsStore settingsStore, IThreading threading);
    public abstract virtual PerformanceSwitchInfo get_Info();
    public abstract virtual string get_Id();
    public sealed virtual PerformanceSwitchHandlerGroup get_Group();
    public abstract virtual string get_Title();
    public abstract virtual string get_RecommendedValue();
    public abstract virtual string get_SettingPath();
    public sealed virtual bool get_CanSetState();
    public sealed virtual ISignal`1<PerformanceSwitchValue> MonitorExternalStateChanges(Lifetime lifetime);
    protected abstract virtual PerformanceSwitchValue GetState(IContextBoundSettingsStoreLive boundSettingsStore);
    protected abstract virtual PerformanceSwitchState SetNewState(IContextBoundSettingsStoreLive boundSettingsStore, PerformanceSwitchState newState);
    protected abstract virtual SettingsEntry GetSettingsEntry(IContextBoundSettingsStoreLive boundSettingsStore);
    public sealed virtual Task`1<PerformanceSwitchValue> UpdateStateAsync(Lifetime lifetime);
    public sealed virtual Task`1<PerformanceSwitchValue> SetStateAsync(Lifetime lifetime, PerformanceSwitchState newState);
    [CompilerGeneratedAttribute]
private PerformanceSwitchValue <UpdateStateAsync>b__21_0();
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceGuide {
    public IReadOnlyCollection`1<IPerformanceSwitch> Switches { get; }
    public abstract virtual void AddSwitchHandler(Lifetime lifetime, IPerformanceSwitchHandler switchHandler);
    public abstract virtual IReadOnlyCollection`1<IPerformanceSwitch> get_Switches();
    public abstract virtual void RefreshSwitchesStates(Lifetime lifetime, IReadOnlyCollection`1<string> ids);
    public abstract virtual void FixSwitches(IPerformanceSwitch[] switches);
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceSwitch {
    [NotNullAttribute]
public IPerformanceSwitchHandler Handler { get; }
    [NotNullAttribute]
public IProperty`1<PerformanceSwitchValue> State { get; }
    [NotNullAttribute]
public IProperty`1<PerformanceSwitchHandlerBehaviour> Behaviour { get; }
    [NotNullAttribute]
public IProperty`1<PerformanceSwitchConflictResolutionMode> ConflictResolutionMode { get; }
    public abstract virtual IPerformanceSwitchHandler get_Handler();
    public abstract virtual IProperty`1<PerformanceSwitchValue> get_State();
    public abstract virtual IProperty`1<PerformanceSwitchHandlerBehaviour> get_Behaviour();
    public abstract virtual IProperty`1<PerformanceSwitchConflictResolutionMode> get_ConflictResolutionMode();
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler {
    public string Id { get; }
    public PerformanceSwitchHandlerGroup Group { get; }
    [NotNullAttribute]
public PerformanceSwitchInfo Info { get; }
    public string Title { get; }
    public string RecommendedValue { get; }
    public string SettingPath { get; }
    public bool CanSetState { get; }
    public abstract virtual string get_Id();
    public abstract virtual PerformanceSwitchHandlerGroup get_Group();
    public abstract virtual PerformanceSwitchInfo get_Info();
    public abstract virtual string get_Title();
    public abstract virtual string get_RecommendedValue();
    public abstract virtual string get_SettingPath();
    public abstract virtual bool get_CanSetState();
    public abstract virtual ISignal`1<PerformanceSwitchValue> MonitorExternalStateChanges(Lifetime lifetime);
    public abstract virtual Task`1<PerformanceSwitchValue> UpdateStateAsync(Lifetime lifetime);
    public abstract virtual Task`1<PerformanceSwitchValue> SetStateAsync(Lifetime lifetime, PerformanceSwitchState newState);
}
public interface JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandlerProvider {
    public ISimpleSignal HandlersMightHaveChanged { get; }
    public abstract virtual IEnumerable`1<IPerformanceSwitchHandler> GetHandlers();
    public abstract virtual ISimpleSignal get_HandlersMightHaveChanged();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "PerformanceGuideSettingDescription")]
public class JetBrains.Application.PerformanceGuide.PerformanceGuideSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "EnableOrDisableAllSuggestionsSettingDescription")]
public bool Enabled;
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "HowLiveTheSwitchIsSettingDescription")]
public IIndexedEntry`2<string, PerformanceSwitchHandlerBehaviour> SwitchBehaviour;
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "HowSwitchBehavesWhenConflictFoundSettingDescription")]
public IIndexedEntry`2<string, PerformanceSwitchConflictResolutionMode> SwitchConflictResolutionMode;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchConflictResolutionMode : Enum {
    public int value__;
    public static PerformanceSwitchConflictResolutionMode DO_NOTHING;
    public static PerformanceSwitchConflictResolutionMode AUTO_FIX;
    public static PerformanceSwitchConflictResolutionMode NOTIFY;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchHandlerBehaviour : Enum {
    public int value__;
    public static PerformanceSwitchHandlerBehaviour DO_NOTHING;
    public static PerformanceSwitchHandlerBehaviour LIVE_MONITOR;
    public static PerformanceSwitchHandlerBehaviour CHECK_ON_START;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchHandlerGroup : Enum {
    public int value__;
    public static PerformanceSwitchHandlerGroup RESHARPER;
    public static PerformanceSwitchHandlerGroup RESHARPER_MANAGE_OPTIONS;
    public static PerformanceSwitchHandlerGroup VISUAL_STUDIO;
    public static PerformanceSwitchHandlerGroup WINDOWS_DEFENDER;
}
public enum JetBrains.Application.PerformanceGuide.PerformanceSwitchState : Enum {
    public int value__;
    public static PerformanceSwitchState NONE;
    public static PerformanceSwitchState OK;
    public static PerformanceSwitchState NOT_OK;
    public static PerformanceSwitchState FAILED_TO_OBTAIN;
    public static PerformanceSwitchState CHECKING;
    public static PerformanceSwitchState SETTING_STATE;
}
public class JetBrains.Application.PerformanceGuide.PerformanceSwitchValue : object {
    [CompilerGeneratedAttribute]
private PerformanceSwitchState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentValue>k__BackingField;
    public PerformanceSwitchState State { get; }
    public string CurrentValue { get; }
    public PerformanceSwitchValue(PerformanceSwitchState state, string currentValue);
    [CompilerGeneratedAttribute]
public PerformanceSwitchState get_State();
    [CompilerGeneratedAttribute]
public string get_CurrentValue();
    protected bool Equals(PerformanceSwitchValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PerformanceSwitchValue left, PerformanceSwitchValue right);
    public static bool op_Inequality(PerformanceSwitchValue left, PerformanceSwitchValue right);
    public virtual string ToString();
}
public class JetBrains.Application.PerformanceTracking.EventRecord : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EventTime>k__BackingField;
    [NotNullAttribute]
public string Category { get; }
    [NotNullAttribute]
public string Name { get; }
    public DateTime EventTime { get; }
    public EventRecord(string category, string name);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public DateTime get_EventTime();
    public virtual string ToString();
}
public static class JetBrains.Application.PerformanceTracking.EventRecordCategories : object {
    public static string Action;
    public static string Memory;
    public static string UIResponsiveness;
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.PerformanceTracking.EventRecords : object {
    private IDictionary`2<string, OneToListMap`2<string, EventRecord>> myRecords;
    public void AddRecord(EventRecord record);
    public IList`1<string> GetAllCategories();
    public OneToListMap`2<string, TRecord> GetAllRecords(string category);
    public IList`1<TRecord> GetRecords(string category, string name);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "PerformanceMonitoringSettingsSettingDescription")]
public class JetBrains.Application.PerformanceTracking.EventRecordSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "HowFrequentlyMemoryStateIsUpdatedSettingDescription")]
public int CheckMemoryIntervalMs;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "HowFrequentlyUIResponsivenessIsCheckedSettingDescription")]
public int CheckUIResponsivenessIntervalMs;
}
[ShellComponentAttribute("18")]
public class JetBrains.Application.PerformanceTracking.EventRecordsProvider : object {
    private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Reasons`1<string> <PauseReasons>k__BackingField;
    private IProperty`1<int> myCheckMemoryIntervalMs;
    private IProperty`1<int> myCheckUIResponsivenessIntervalMs;
    private IList`1<Func`1<EventRecord>> myMemoryEventRecordProviders;
    protected IProperty`1<bool> IsAvailable { get; }
    public Reasons`1<string> PauseReasons { get; }
    public EventRecordsProvider(Lifetime lifetime, EventRecords eventRecords, ISettingsStore settingsStore, ILogger logger, IThreading threading, IIsApplicationActiveState isApplicationActiveState);
    [CompilerGeneratedAttribute]
protected IProperty`1<bool> get_IsAvailable();
    [CompilerGeneratedAttribute]
public Reasons`1<string> get_PauseReasons();
    private void ScheduleUIResponsivenessCheck(Lifetime lifetime, EventRecords eventRecords, IThreading threading, int intervalMs);
    private void UpdateIntervalsFromSettings(IContextBoundSettingsStore boundSettingsStore);
    public void AddMemoryEventRecordProvider(Lifetime lifetime, Func`1<EventRecord> recordProvider);
    public void ScheduleMemoryCheck(Lifetime lifetime, EventRecords eventRecords, IThreading threading, int intervalMs);
}
public interface JetBrains.Application.PerformanceTracking.IPerformanceTracker {
    public abstract virtual void RecordPerformance(Key`1<T> actionId, T parameter, double val);
    public abstract virtual ISignal`1<PerformanceRecord`1<T>> StartTracking(Lifetime lifetime, Key`1<T> actionId, Func`2<T, bool> filter, int maxRecordCount);
    public abstract virtual IList`1<PerformanceRecord`1<T>> GetReports(Key`1<T> actionId, Predicate`1<T> filter);
}
public interface JetBrains.Application.PerformanceTracking.IPerformanceTracking {
    public abstract virtual List`1<Report> PopResults();
    public abstract virtual void RecordValue(string actionId, double value);
    public abstract virtual void TrackActionRunDuration(string actionId, Action action);
}
public class JetBrains.Application.PerformanceTracking.LevelDbMemoryEventRecord : EventRecord {
    [CompilerGeneratedAttribute]
private LevelDbStatus <LevelDbStatus>k__BackingField;
    public LevelDbStatus LevelDbStatus { get; }
    public LevelDbMemoryEventRecord(string name, LevelDbStatus levelDbStatus);
    [CompilerGeneratedAttribute]
public LevelDbStatus get_LevelDbStatus();
    public virtual string ToString();
}
public class JetBrains.Application.PerformanceTracking.MemoryEventRecord : EventRecord {
    [CompilerGeneratedAttribute]
private ulong <TotalPhysicalBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AvailablePhysicalBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalVirtualBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AvailableVirtualBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MemoryLoadPercent>k__BackingField;
    public ulong TotalPhysicalBytes { get; }
    public ulong AvailablePhysicalBytes { get; }
    public ulong TotalVirtualBytes { get; }
    public ulong AvailableVirtualBytes { get; }
    public UInt32 MemoryLoadPercent { get; }
    protected MemoryEventRecord(MEMORYSTATUSEX msex);
    [CompilerGeneratedAttribute]
public ulong get_TotalPhysicalBytes();
    [CompilerGeneratedAttribute]
public ulong get_AvailablePhysicalBytes();
    [CompilerGeneratedAttribute]
public ulong get_TotalVirtualBytes();
    [CompilerGeneratedAttribute]
public ulong get_AvailableVirtualBytes();
    [CompilerGeneratedAttribute]
public UInt32 get_MemoryLoadPercent();
    [CanBeNullAttribute]
public static MemoryEventRecord TryCreate();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.PerformanceTracking.PerformaceTracker : object {
    private Dictionary`2<object, object> myActionTrackers;
    private ReaderWriterLockSlim myRwl;
    public sealed virtual void RecordPerformance(Key`1<T> actionId, T parameter, double val);
    public sealed virtual ISignal`1<PerformanceRecord`1<T>> StartTracking(Lifetime lifetime, Key`1<T> actionId, Func`2<T, bool> filter, int maxRecordCount);
    public sealed virtual IList`1<PerformanceRecord`1<T>> GetReports(Key`1<T> actionId, Predicate`1<T> filter);
}
public class JetBrains.Application.PerformanceTracking.PerformanceEventRecord : EventRecord {
    [CompilerGeneratedAttribute]
private TimeSpan <EventDuration>k__BackingField;
    public TimeSpan EventDuration { get; }
    public PerformanceEventRecord(string category, string name, TimeSpan eventDuration);
    [CompilerGeneratedAttribute]
public TimeSpan get_EventDuration();
    public virtual string ToString();
}
public class JetBrains.Application.PerformanceTracking.PerformanceRecord`1 : object {
    [CompilerGeneratedAttribute]
private Key`1<T> <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public Key`1<T> ActionId { get; }
    public T Parameter { get; }
    public double Value { get; }
    public PerformanceRecord`1(Key`1<T> actionId, T parameter, double val);
    [CompilerGeneratedAttribute]
public Key`1<T> get_ActionId();
    [CompilerGeneratedAttribute]
public T get_Parameter();
    [CompilerGeneratedAttribute]
public double get_Value();
}
public class JetBrains.Application.PerformanceTracking.PerformanceTrackerCookie`1 : object {
    private Stopwatch myStopwatch;
    private IPerformanceTracker myPerformanceTracker;
    private Key`1<T> myActionId;
    private T myParameter;
    internal PerformanceTrackerCookie`1(IPerformanceTracker performanceTracker, Key`1<T> actionId, T parameter);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class JetBrains.Application.PerformanceTracking.PerformanceTrackerEx : object {
    [ExtensionAttribute]
public static PerformanceTrackerCookie`1<T> CreateCookie(IPerformanceTracker tracker, Key`1<T> actionId, T parameter);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.PerformanceTracking.PerformanceTracking : object {
    private List`1<Report> _results;
    public sealed virtual void TrackActionRunDuration(string actionId, Action action);
    public sealed virtual void RecordValue(string actionId, double value);
    public sealed virtual List`1<Report> PopResults();
    private void Log(string result);
}
public class JetBrains.Application.PerformanceTracking.PerformanceTrackingCookie : object {
    private Stopwatch myStopwatch;
    private IPerformanceTracking myPerformanceTracking;
    private string myActionId;
    public PerformanceTrackingCookie(IComponentContainer componentContainer, string actionId);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.PerformanceTracking.Report : object {
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public string ActionId { get; private set; }
    public double Value { get; private set; }
    public Report(string actionId, double val);
    [CompilerGeneratedAttribute]
public string get_ActionId();
    [CompilerGeneratedAttribute]
private void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(double value);
}
internal class JetBrains.Application.PersistentMap.CachingEnumerator`2 : object {
    private OptimizedPersistentSortedMap`2<TKey, TValue> myMap;
    private IKeyValueEnumerator`2<TKey, TValue> mySourceEnumerator;
    private long myCommittedVersionOfEnumerationStart;
    private object System.Collections.IEnumerator.Current { get; }
    private TKey System.Collections.Generic.IEnumerator<TKey>.Current { get; }
    public KeyValuePair`2<TKey, TValue> Current { get; }
    public TKey CurrentKey { get; }
    public bool IsCurrentKeyWillBeRemoved { get; }
    private bool IsNothingChangedDuringEnumeration { get; }
    public TValue CurrentValue { get; }
    private CachingEnumerator`2(OptimizedPersistentSortedMap`2<TKey, TValue> map);
    public CachingEnumerator`2(OptimizedPersistentSortedMap`2<TKey, TValue> map, bool reversedOrder);
    public CachingEnumerator`2(OptimizedPersistentSortedMap`2<TKey, TValue> map, bool reversedOrder, TKey fromKey);
    public CachingEnumerator`2(OptimizedPersistentSortedMap`2<TKey, TValue> map, Func`2<TKey, bool> cleanerPredicate);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override TKey System.Collections.Generic.IEnumerator<TKey>.get_Current();
    public sealed virtual KeyValuePair`2<TKey, TValue> get_Current();
    public sealed virtual TKey get_CurrentKey();
    public sealed virtual bool get_IsCurrentKeyWillBeRemoved();
    public sealed virtual void add_OnKeyMarkedForRemoval(Action`1<TKey> value);
    public sealed virtual void remove_OnKeyMarkedForRemoval(Action`1<TKey> value);
    public sealed virtual void add_OnDispose(Action value);
    public sealed virtual void remove_OnDispose(Action value);
    public sealed virtual void RemoveCurrent();
    public sealed virtual T ReinterpretCastValue(Func`2<RawValue, T> valueMarshaller);
    public sealed virtual void Dispose();
    private bool get_IsNothingChangedDuringEnumeration();
    public sealed virtual TValue get_CurrentValue();
}
[FlagsAttribute]
public enum JetBrains.Application.PersistentMap.CachingStrategy : Enum {
    public int value__;
    public static CachingStrategy DoNotCache;
    public static CachingStrategy StoreReadsInCache;
    public static CachingStrategy StoreWritesInCache;
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.PersistentMap.DbDriverManager : object {
    public virtual IKeyValueDbDriver GetDriver();
}
public enum JetBrains.Application.PersistentMap.DbErrorDuringCreationAction : Enum {
    public int value__;
    public static DbErrorDuringCreationAction Exception;
    public static DbErrorDuringCreationAction Null;
    public static DbErrorDuringCreationAction ClearAndRetry;
}
public class JetBrains.Application.PersistentMap.DbException : Exception {
    [StringFormatMethodAttribute("str")]
public DbException(string str, Object[] p);
}
public enum JetBrains.Application.PersistentMap.DbMutexNotTakenAction : Enum {
    public int value__;
    public static DbMutexNotTakenAction OpenIndexed;
    public static DbMutexNotTakenAction OpenSecondaryUrl;
    public static DbMutexNotTakenAction Exception;
    public static DbMutexNotTakenAction Null;
}
public class JetBrains.Application.PersistentMap.DbOpenParams : object {
    public static string DefaultPrefix;
    public static string DefaultSubdir;
    private string myUrl;
    [CompilerGeneratedAttribute]
private ITaskHost <TaskHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subfolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParanoidChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private DbErrorDuringCreationAction <DbErrorDuringCreationAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpectedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidityCheckFailAction <ValidationFailAction>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Pair`2<Type, int>> <PolymorphicTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TakeMutex>k__BackingField;
    [CompilerGeneratedAttribute]
private DbMutexNotTakenAction <MutexNotTakenAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryUrl>k__BackingField;
    public string Url { get; }
    public ITaskHost TaskHost { get; }
    [CanBeNullAttribute]
public string Subfolder { get; public set; }
    public bool ParanoidChecks { get; private set; }
    public DbErrorDuringCreationAction DbErrorDuringCreationAction { get; private set; }
    public string ExpectedVersion { get; private set; }
    public ValidityCheckFailAction ValidationFailAction { get; private set; }
    [CanBeNullAttribute]
public IEnumerable`1<Pair`2<Type, int>> PolymorphicTypes { get; private set; }
    public bool TakeMutex { get; private set; }
    public DbMutexNotTakenAction MutexNotTakenAction { get; private set; }
    [NotNullAttribute]
public string SecondaryUrl { get; private set; }
    private DbOpenParams(string url, ITaskHost taskHost);
    public string get_Url();
    [CompilerGeneratedAttribute]
public ITaskHost get_TaskHost();
    [CompilerGeneratedAttribute]
public string get_Subfolder();
    [CompilerGeneratedAttribute]
public void set_Subfolder(string value);
    [CompilerGeneratedAttribute]
public bool get_ParanoidChecks();
    [CompilerGeneratedAttribute]
private void set_ParanoidChecks(bool value);
    [CompilerGeneratedAttribute]
public DbErrorDuringCreationAction get_DbErrorDuringCreationAction();
    [CompilerGeneratedAttribute]
private void set_DbErrorDuringCreationAction(DbErrorDuringCreationAction value);
    [CompilerGeneratedAttribute]
public string get_ExpectedVersion();
    [CompilerGeneratedAttribute]
private void set_ExpectedVersion(string value);
    [CompilerGeneratedAttribute]
public ValidityCheckFailAction get_ValidationFailAction();
    [CompilerGeneratedAttribute]
private void set_ValidationFailAction(ValidityCheckFailAction value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Pair`2<Type, int>> get_PolymorphicTypes();
    [CompilerGeneratedAttribute]
private void set_PolymorphicTypes(IEnumerable`1<Pair`2<Type, int>> value);
    [CompilerGeneratedAttribute]
public bool get_TakeMutex();
    [CompilerGeneratedAttribute]
private void set_TakeMutex(bool value);
    [CompilerGeneratedAttribute]
public DbMutexNotTakenAction get_MutexNotTakenAction();
    [CompilerGeneratedAttribute]
private void set_MutexNotTakenAction(DbMutexNotTakenAction value);
    [CompilerGeneratedAttribute]
public string get_SecondaryUrl();
    [CompilerGeneratedAttribute]
private void set_SecondaryUrl(string value);
    public static DbOpenParams Create(FileSystemPath path, ITaskHost taskHost);
    public static DbOpenParams Create(string url, ITaskHost taskHost);
    public DbOpenParams WithDbOpenError(DbErrorDuringCreationAction action);
    public DbOpenParams WithValidityChecks(string expectedVersion, IEnumerable`1<Pair`2<Type, int>> polymorphicTypes, ValidityCheckFailAction versionMismatchAction);
    public DbOpenParams WithMutexAcquire(DbMutexNotTakenAction mutexNotTakenAction, string secondaryUrl);
    public DbOpenParams WithParanoidChecks();
    public DbOpenParams WithSubfolder(string subfolder);
    public virtual string ToString();
}
public class JetBrains.Application.PersistentMap.DbOpenResult : object {
    [CompilerGeneratedAttribute]
private IKeyValueDb <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clear>k__BackingField;
    public IKeyValueDb Db { get; }
    public string Url { get; }
    public bool Clear { get; }
    public DbOpenResult(IKeyValueDb db, string url, bool cleared);
    [CompilerGeneratedAttribute]
public IKeyValueDb get_Db();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public bool get_Clear();
}
public class JetBrains.Application.PersistentMap.ExplicitCommitMap`2 : object {
    [CompilerGeneratedAttribute]
private OptimizedPersistentSortedMap`2<TKey, TValue> <Inner>k__BackingField;
    private Dictionary`2<TKey, TValue> myAdded;
    private HashSet`1<TKey> myRemoved;
    [NotNullAttribute]
public OptimizedPersistentSortedMap`2<TKey, TValue> Inner { get; }
    public ExplicitCommitMap`2(OptimizedPersistentSortedMap`2<TKey, TValue> inner);
    [CompilerGeneratedAttribute]
public OptimizedPersistentSortedMap`2<TKey, TValue> get_Inner();
    public void Add(TKey key, TValue value);
    public void Remove(TKey key);
    public void Commit();
    public void Rollback();
    public bool TryGetValue(TKey key, TValue& value);
    public void Clear();
    public TValue GetValue(TKey key, string s);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.PersistentMap.IAutocommitTransaction {
    public int BatchSizeThreshold { get; public set; }
    public int AllocatedBytesThreshold { get; public set; }
    public TimeSpan AutocommitTime { get; public set; }
    public ViewableProperty`1<long> LastCommittedVersion { get; }
    public abstract virtual int get_BatchSizeThreshold();
    public abstract virtual void set_BatchSizeThreshold(int value);
    public abstract virtual int get_AllocatedBytesThreshold();
    public abstract virtual void set_AllocatedBytesThreshold(int value);
    public abstract virtual TimeSpan get_AutocommitTime();
    public abstract virtual void set_AutocommitTime(TimeSpan value);
    public abstract virtual IDisposable AtomicCookie();
    public abstract virtual ViewableProperty`1<long> get_LastCommittedVersion();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.PersistentMap.IKeyValueDb {
    public Lifetime Lifetime { get; }
    public ViewableProperty`1<KeyValueDbStatus> Status { get; }
    public bool IsSnapshot { get; }
    public bool RemoveOnClose { get; public set; }
    public IAutocommitTransaction AutocommitTransaction { get; }
    [MustDisposeResourceAttribute]
public abstract virtual IKeyValueDb OpenSnapshot(Lifetime lf);
    [MustDisposeResourceAttribute]
public abstract virtual IKeyValueDbTransaction StartTransaction();
    public abstract virtual IPersistentSortedMap`2<TKey, TValue> GetMap(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller, IUnsafeMarshaller`1<TValue> valueMarshaller, bool verifyTypes);
    public abstract virtual ICollection`1<TKey> GetAsKeyCollection(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller);
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ViewableProperty`1<KeyValueDbStatus> get_Status();
    public abstract virtual bool get_IsSnapshot();
    public abstract virtual bool get_RemoveOnClose();
    public abstract virtual void set_RemoveOnClose(bool value);
    public abstract virtual IAutocommitTransaction get_AutocommitTransaction();
    public abstract virtual LevelDbStatus GetStatus();
    public abstract virtual void Dump(TextWriter writer);
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.PersistentMap.IKeyValueDbDriver {
    public abstract virtual DbOpenResult OpenDb(Lifetime lifetime, DbOpenParams dbParams);
}
public interface JetBrains.Application.PersistentMap.IKeyValueDbTransaction {
    [NullableContextAttribute("1")]
public abstract virtual IKeyValueDb GetDb();
    public abstract virtual void Clear();
    public abstract virtual void Rollback();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.PersistentMap.IKeyValueEnumerator`2 {
    public bool IsCurrentKeyWillBeRemoved { get; }
    public abstract virtual bool get_IsCurrentKeyWillBeRemoved();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnKeyMarkedForRemoval(Action`1<TKey> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnKeyMarkedForRemoval(Action`1<TKey> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDispose(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDispose(Action value);
    public abstract virtual void RemoveCurrent();
    public abstract virtual T ReinterpretCastValue(Func`2<RawValue, T> valueMarshaller);
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.PersistentMap.IOptimizedPersistentSortedMap`2 {
    public CachingStrategy CachingStrategy { get; public set; }
    public bool UseCachingEnumerator { get; public set; }
    public IDictionaryBasedCache`2<TKey, TValue> Cache { get; public set; }
    public abstract virtual CachingStrategy get_CachingStrategy();
    public abstract virtual void set_CachingStrategy(CachingStrategy value);
    public abstract virtual bool get_UseCachingEnumerator();
    public abstract virtual void set_UseCachingEnumerator(bool value);
    public abstract virtual IDictionaryBasedCache`2<TKey, TValue> get_Cache();
    public abstract virtual void set_Cache(IDictionaryBasedCache`2<TKey, TValue> value);
    public abstract virtual bool TryGetCachedValue(TKey key, TValue& value);
    public abstract virtual void Dump(TextWriter writer, Func`2<TKey, string> renderKey, Func`2<TValue, string> renderValue);
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.PersistentMap.IPersistentSortedMap`2 {
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
    public abstract virtual IKeyValueDb GetDb();
    public abstract virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder);
    public abstract virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder, TKey fromKey);
    public abstract virtual IPersistentSortedMap`2<TKey, TValue> GetInSnapshot(IKeyValueDb snapshot);
    public abstract virtual IKeyValueEnumerator`2<TKey, TValue> GetCleaningEnumerator(Func`2<TKey, bool> removeKeysMatches);
    public abstract virtual long SizeInBytes();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.PersistentMap.ITransactionBase {
    public abstract virtual long Add(IPersistentSortedMap`2<TKey, TValue> map, TKey key, TValue value);
    public abstract virtual long Remove(IPersistentSortedMap`2<TKey, TValue> map, TKey key);
    public abstract virtual long Remove(ICollection`1<TKey> collection, TKey key);
    public abstract virtual long AddRaw(IPersistentSortedMap`2<TKey, TValue> map, TKey key, RawValue value);
    public abstract virtual long RemoveRaw(RawValue mapSidAndKey);
    public abstract virtual void Commit();
}
public enum JetBrains.Application.PersistentMap.KeyValueDbStatus : Enum {
    public int value__;
    public static KeyValueDbStatus Ready;
    public static KeyValueDbStatus Closed;
    public static KeyValueDbStatus Corrupted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.PersistentMap.LevelDb : SafeDisposable {
    private object myLock;
    private static ILogger ourLogger;
    [NullableAttribute("2")]
private FileSystemPath myDbDir;
    [NullableAttribute("2")]
private string mySubfolder;
    internal IntPtr DbPtr;
    internal IntPtr OptionsPtr;
    internal IntPtr ReadOptionsPtr;
    internal IntPtr WriteOptionsPtr;
    internal IntPtr SnapshotPtr;
    public static LevelDbMapSid SchemaSid;
    public static LevelDbMapSid PropertiesSid;
    public static LevelDbMapSid PolymorphicTypesSid;
    private IPersistentSortedMap`2<string, LevelDbMapSchema> mySchema;
    private IPersistentSortedMap`2<string, string> myProperties;
    private IPersistentSortedMap`2<string, int> myPolymorphicTypes;
    internal Lifetime AsyncOperationsLifetime;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    private bool myRemoveOnClose;
    [CompilerGeneratedAttribute]
private IAutocommitTransaction <AutocommitTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewableProperty`1<KeyValueDbStatus> <Status>k__BackingField;
    public Lifetime Lifetime { get; }
    public bool RemoveOnClose { get; public set; }
    public IAutocommitTransaction AutocommitTransaction { get; }
    private FileSystemPath ActualDir { get; }
    internal IPersistentSortedMap`2<string, string> Properties { get; }
    internal IPersistentSortedMap`2<string, int> PolymorphicTypes { get; }
    public ViewableProperty`1<KeyValueDbStatus> Status { get; }
    public bool IsSnapshot { get; }
    protected bool WarnOnSecondDispose { get; }
    internal LevelDb(Lifetime lifetime, ITaskHost taskHost, string dbDir, bool paranoidChecks, string subfolder);
    private LevelDb(Lifetime lifetime, LevelDb map, IntPtr snapshotPtr);
    private static LevelDb();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    public sealed virtual bool get_RemoveOnClose();
    public sealed virtual void set_RemoveOnClose(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IAutocommitTransaction get_AutocommitTransaction();
    private FileSystemPath get_ActualDir();
    private void InitPointers(bool paranoidChecks);
    private bool IsBackgroundCompactionCorrupted();
    internal IPersistentSortedMap`2<string, string> get_Properties();
    internal IPersistentSortedMap`2<string, int> get_PolymorphicTypes();
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void InitSchema();
    private void CheckBackgroundCompactionCorruptedAsync(Lifetime lifetime, ITaskHost taskHost);
    [CompilerGeneratedAttribute]
public sealed virtual ViewableProperty`1<KeyValueDbStatus> get_Status();
    public sealed virtual IKeyValueDb OpenSnapshot(Lifetime lifetime);
    public sealed virtual IKeyValueDbTransaction StartTransaction();
    private static string Fqn(Type type);
    public sealed virtual IPersistentSortedMap`2<TKey, TValue> GetMap(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller, IUnsafeMarshaller`1<TValue> valueMarshaller, bool verifyTypes);
    public sealed virtual ICollection`1<TKey> GetAsKeyCollection(string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller);
    private static bool CompareFqn(string type1, string type2);
    public sealed virtual bool get_IsSnapshot();
    protected virtual bool get_WarnOnSecondDispose();
    protected virtual void DisposeUnmanagedResources();
    private void SetCorruptedStatus();
    [NullableContextAttribute("0")]
private static string Bytes2AnsiStr(Byte* bytes);
    [NullableContextAttribute("2")]
private static string Bytes2AnsiStr(IntPtr ptr);
    [NullableContextAttribute("0")]
internal void ThrowDbExceptionIfNecessary(Byte* errmsg, Byte* memoryToFree);
    [NullableContextAttribute("0")]
public static void DumpSlice(TextWriter writer, Byte* data, int length);
    private static string TryGetPropertyValue(IntPtr dbPtr, string propertyName);
    public sealed virtual LevelDbStatus GetStatus();
    public sealed virtual void Dump(TextWriter writer);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <set_RemoveOnClose>b__22_0();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__51_0();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__51_1();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__51_2();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__51_3();
    [CompilerGeneratedAttribute]
private void <DisposeUnmanagedResources>b__51_4();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.PersistentMap.LevelDbAutocommitTransaction : LevelDbTransaction {
    [CompilerGeneratedAttribute]
private ViewableProperty`1<long> <LastCommittedVersion>k__BackingField;
    private LifetimeDefinition myExecutorLifetimeDefinition;
    private SingleThreadExecutor myExecutor;
    private FreeThreadedGroupingEvent myGroupingEvent;
    public static int DefaultEntitiesCountThreshold;
    private static int DefaultAllocatedBytesThreshold;
    private static int TotalAllocatedBytesThreshold;
    private TimeSpan myDefaultAutocommitTime;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) myAtomicityLevel;
    private IDisposable myAtomicCookie;
    [CompilerGeneratedAttribute]
private int <BatchSizeThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AllocatedBytesThreshold>k__BackingField;
    private int myTotalAllocatedBytesInQueue;
    public ViewableProperty`1<long> LastCommittedVersion { get; }
    public int BatchSizeThreshold { get; public set; }
    public int AllocatedBytesThreshold { get; public set; }
    public TimeSpan AutocommitTime { get; public set; }
    internal LevelDbAutocommitTransaction(LevelDb db, ITaskHost taskHost);
    [CompilerGeneratedAttribute]
public sealed virtual ViewableProperty`1<long> get_LastCommittedVersion();
    [CompilerGeneratedAttribute]
public sealed virtual int get_BatchSizeThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BatchSizeThreshold(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_AllocatedBytesThreshold();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllocatedBytesThreshold(int value);
    public sealed virtual TimeSpan get_AutocommitTime();
    public sealed virtual void set_AutocommitTime(TimeSpan value);
    public sealed virtual IDisposable AtomicCookie();
    protected virtual void TransactionContentChanged(int allocationBytesDiff, int entitiesDiff);
    private void FireCommit(long version, bool sync);
    private void Commit0(IntPtr transactionPtr, long version, int allocatedBytesInTransaction);
    public virtual void Commit();
    protected virtual void DisposeUnmanagedResources();
    public virtual void Clear();
    public virtual void Rollback();
    [CompilerGeneratedAttribute]
private void <.ctor>b__25_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.PersistentMap.LevelDbDriver : object {
    public static string LevelDbVersion;
    private static string LevelDbLockFilename;
    public static LevelDbDriver Instance;
    private ILogger myLogger;
    public static RelativePath MutexFileName;
    private static LevelDbDriver();
    private static bool IsValidLocation(FileSystemPath path, IDictionary`2<FileSystemPath, CachedFileSystemData> cachedFileSystemDatas);
    public sealed virtual DbOpenResult OpenDb(Lifetime lifetime, DbOpenParams dbParams);
    private void OpenDb_WithMutex(Lifetime lifetime, DbOpenParams dbParams, String& url);
    private bool OpenDb_TryAcquireMutex(Lifetime lifetime, FileSystemPath dirdb);
    private DbOpenResult CheckOpenDb(string url, LevelDb db, DbOpenParams dbParams, bool cleared, SequentialLifetimes sequentialLifetimes);
    private static string TypeToString(Type t);
    private void SetPolymorphicTypes(IPersistentSortedMap`2<string, int> map, IEnumerable`1<KeyValuePair`2<string, int>> expected);
    private void ComparePolymorphicTypes(IDictionary`2<string, int> expected, IPersistentSortedMap`2<string, int> current, Boolean& polymorphicCheckFail, Boolean& writeNewPolymorphicTypes);
    internal static Cookie NewWriterCookie(LevelDbMapSid mapUniqueId);
}
[SuppressUnmanagedCodeSecurityAttribute]
public static class JetBrains.Application.PersistentMap.LevelDbInterop : object {
    private static string ourLevelDbName;
    private static bool _inited;
    private static leveldb_open_delegate leveldb_open;
    public static leveldb_close_delegate leveldb_close;
    public static leveldb_put_delegate leveldb_put;
    public static leveldb_delete_delegate leveldb_delete;
    public static leveldb_write_delegate leveldb_write;
    public static leveldb_get_delegate leveldb_get;
    public static leveldb_create_iterator_delegate leveldb_create_iterator;
    public static leveldb_create_snapshot_delegate leveldb_create_snapshot;
    public static leveldb_release_snapshot_delegate leveldb_release_snapshot;
    public static leveldb_property_value_delegate leveldb_property_value;
    public static leveldb_approximate_sizes_delegate leveldb_approximate_sizes;
    public static leveldb_destroy_db_delegate leveldb_destroy_db;
    public static leveldb_repair_db_delegate leveldb_repair_db;
    public static leveldb_iter_destroy_delegate leveldb_iter_destroy;
    public static leveldb_iter_valid_delegate leveldb_iter_valid;
    public static leveldb_iter_seek_to_first_delegate leveldb_iter_seek_to_first;
    public static leveldb_iter_seek_to_last_delegate leveldb_iter_seek_to_last;
    public static leveldb_iter_seek_delegate leveldb_iter_seek;
    public static leveldb_iter_next_delegate leveldb_iter_next;
    public static leveldb_iter_prev_delegate leveldb_iter_prev;
    public static leveldb_iter_key_delegate leveldb_iter_key;
    public static leveldb_iter_value_delegate leveldb_iter_value;
    public static leveldb_iter_get_error_delegate leveldb_iter_get_error;
    public static leveldb_writebatch_create_delegate leveldb_writebatch_create;
    public static leveldb_writebatch_destroy_delegate leveldb_writebatch_destroy;
    public static leveldb_writebatch_clear_delegate leveldb_writebatch_clear;
    public static leveldb_writebatch_put_delegate leveldb_writebatch_put;
    public static leveldb_writebatch_delete_delegate leveldb_writebatch_delete;
    public static leveldb_options_create_delegate leveldb_options_create;
    public static leveldb_options_destroy_delegate leveldb_options_destroy;
    public static leveldb_options_set_comparator_delegate leveldb_options_set_comparator;
    public static leveldb_options_set_create_if_missing_delegate leveldb_options_set_create_if_missing;
    public static leveldb_options_set_error_if_exists_delegate leveldb_options_set_error_if_exists;
    public static leveldb_options_set_paranoid_checks_delegate leveldb_options_set_paranoid_checks;
    public static leveldb_options_set_env_delegate leveldb_options_set_env;
    public static leveldb_options_set_info_log_delegate leveldb_options_set_info_log;
    public static leveldb_options_set_write_buffer_size_delegate leveldb_options_set_write_buffer_size;
    public static leveldb_options_set_max_open_files_delegate leveldb_options_set_max_open_files;
    public static leveldb_options_set_cache_delegate leveldb_options_set_cache;
    public static leveldb_options_set_block_size_delegate leveldb_options_set_block_size;
    public static leveldb_options_set_block_restart_interval_delegate leveldb_options_set_block_restart_interval;
    public static leveldb_options_set_compression_delegate leveldb_options_set_compression;
    public static leveldb_comparator_destroy_delegate leveldb_comparator_destroy;
    public static leveldb_readoptions_create_delegate leveldb_readoptions_create;
    public static leveldb_readoptions_destroy_delegate leveldb_readoptions_destroy;
    public static leveldb_readoptions_set_verify_checksums_delegate leveldb_readoptions_set_verify_checksums;
    public static leveldb_readoptions_set_fill_cache_delegate leveldb_readoptions_set_fill_cache;
    public static leveldb_readoptions_set_snapshot_delegate leveldb_readoptions_set_snapshot;
    public static leveldb_writeoptions_create_delegate leveldb_writeoptions_create;
    public static leveldb_writeoptions_destroy_delegate leveldb_writeoptions_destroy;
    public static leveldb_writeoptions_set_sync_delegate leveldb_writeoptions_set_sync;
    public static leveldb_cache_create_lru_delegate leveldb_cache_create_lru;
    public static leveldb_cache_destroy_delegate leveldb_cache_destroy;
    public static leveldb_create_default_env_delegate leveldb_create_default_env;
    public static leveldb_env_destroy_delegate leveldb_env_destroy;
    public static leveldb_free_delegate leveldb_free;
    private static object ourSentry;
    private static LevelDbInterop();
    public static IntPtr leveldb_open_database(IntPtr options, string name, Byte** errptr);
    public static void leveldb_destroy_database(IntPtr options, string name, Byte** errptr);
    public static void InitIfNecessary();
}
public static class JetBrains.Application.PersistentMap.LevelDbLicenseProvider : object {
    [IteratorStateMachineAttribute("JetBrains.Application.PersistentMap.LevelDbLicenseProvider/<GetLicenses>d__0")]
[BuildStepAttribute]
public static IEnumerable`1<SubplatformThirdPartyLicenseInfo> GetLicenses();
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.Application.PersistentMap.LevelDbMap`2 : object {
    internal IUnsafeMarshaller`1<TKey> KeyMarshaller;
    internal IUnsafeMarshaller`1<TValue> ValueMarshaller;
    internal LevelDb DbHandle;
    [CompilerGeneratedAttribute]
private LevelDbMapSid <Sid>k__BackingField;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public LevelDbMapSid Sid { get; }
    public bool IsEmpty { get; }
    internal LevelDbMap`2(IKeyValueDb db, LevelDbMapSid mapSid, IUnsafeMarshaller`1<TKey> keyMarshaller, IUnsafeMarshaller`1<TValue> valueMarshaller);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertState();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    [ThreadUnsafeAttribute]
public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    [CompilerGeneratedAttribute]
public LevelDbMapSid get_Sid();
    public sealed virtual IKeyValueDb GetDb();
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder, TKey fromKey);
    public sealed virtual IPersistentSortedMap`2<TKey, TValue> GetInSnapshot(IKeyValueDb snapshot);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetCleaningEnumerator(Func`2<TKey, bool> removeKeysMatches);
    public void AddRaw(TKey key, RawValue value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual long SizeInBytes();
    public sealed virtual bool get_IsEmpty();
}
internal class JetBrains.Application.PersistentMap.LevelDbMapEnumerator`2 : SafeDisposable {
    private IntPtr myIterPtr;
    private bool myStarted;
    private bool myStartKeyIsGiven;
    private LevelDbMap`2<TKey, TValue> myDict;
    private TKey myStartKey;
    private bool myReverseOrder;
    private Func`2<TKey, bool> myRemoveKeyMatches;
    private IAutocommitTransaction myTx;
    private UnsafeReader myReader;
    [CompilerGeneratedAttribute]
private Action`1<TKey> OnKeyMarkedForRemoval;
    [CompilerGeneratedAttribute]
private Action OnDispose;
    [CompilerGeneratedAttribute]
private bool <IsCurrentKeyWillBeRemoved>k__BackingField;
    private TKey myCurrentKey;
    public bool IsCurrentKeyWillBeRemoved { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    private TKey System.Collections.Generic.IEnumerator<TKey>.Current { get; }
    public KeyValuePair`2<TKey, TValue> Current { get; }
    public TKey CurrentKey { get; }
    public TValue CurrentValue { get; }
    public int KeySizeInBytes { get; }
    public int ValueSizeInBytes { get; }
    internal LevelDbMapEnumerator`2(LevelDbMap`2<TKey, TValue> dict, TKey startKey, bool reversedOrder);
    internal LevelDbMapEnumerator`2(LevelDbMap`2<TKey, TValue> dict, bool reversedOrder, Func`2<TKey, bool> cleaner);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnKeyMarkedForRemoval(Action`1<TKey> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnKeyMarkedForRemoval(Action`1<TKey> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnDispose(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnDispose(Action value);
    private void Init();
    protected virtual void DisposeUnmanagedResources();
    public sealed virtual bool MoveNext();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCurrentKeyWillBeRemoved();
    [CompilerGeneratedAttribute]
private void set_IsCurrentKeyWillBeRemoved(bool value);
    public sealed virtual void RemoveCurrent();
    public sealed virtual T ReinterpretCastValue(Func`2<RawValue, T> valueMarshaller);
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override TKey System.Collections.Generic.IEnumerator<TKey>.get_Current();
    public sealed virtual KeyValuePair`2<TKey, TValue> get_Current();
    public sealed virtual TKey get_CurrentKey();
    public sealed virtual TValue get_CurrentValue();
    public int get_KeySizeInBytes();
    public int get_ValueSizeInBytes();
}
internal class JetBrains.Application.PersistentMap.LevelDbMapSchema : object {
    [CompilerGeneratedAttribute]
private LevelDbMapSid <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyTypeFqn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueTypeFqn>k__BackingField;
    internal static IUnsafeMarshaller`1<LevelDbMapSchema> Marshaller;
    internal LevelDbMapSid Sid { get; }
    internal string KeyTypeFqn { get; }
    internal string ValueTypeFqn { get; }
    public LevelDbMapSchema(LevelDbMapSid sid, string keyTypeFqn, string valueTypeFqn);
    private static LevelDbMapSchema();
    [CompilerGeneratedAttribute]
internal LevelDbMapSid get_Sid();
    [CompilerGeneratedAttribute]
internal string get_KeyTypeFqn();
    [CompilerGeneratedAttribute]
internal string get_ValueTypeFqn();
    private static void Write(UnsafeWriter writer, LevelDbMapSchema value);
    private static LevelDbMapSchema Read(UnsafeReader reader);
}
public class JetBrains.Application.PersistentMap.LevelDbMapSid : ValueType {
    public static int Sizeof;
    private int myValue;
    public static LevelDbMapSid MinUserSid;
    internal static LevelDbMapSid UserSidSupremum;
    public int Value { get; }
    public LevelDbMapSid(string mapId);
    public LevelDbMapSid(int value);
    private static LevelDbMapSid();
    public int get_Value();
    public void Write(UnsafeWriter writer);
    public static LevelDbMapSid From(UnsafeReader reader);
    public static LevelDbMapSid From(Byte* storage);
    public void Write(Byte* storage);
    public static bool op_Equality(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_Inequality(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_GreaterThanOrEqual(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_LessThanOrEqual(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_GreaterThan(LevelDbMapSid left, LevelDbMapSid right);
    public static bool op_LessThan(LevelDbMapSid left, LevelDbMapSid right);
    public LevelDbMapSid Next();
    [PureAttribute]
internal bool IsValidUserSid();
    public virtual string ToString();
    private bool Equals(LevelDbMapSid other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.Application.PersistentMap.LevelDbMapStats : object {
    private static int SingleWriteThresholdInBytes;
    private static int TotalWriteThresholdInBytes;
    private static ConcurrentDictionary`2<int, int> ourSingleWriteThresholdInBytes;
    private static ConcurrentDictionary`2<int, int> ourTotalWriteThresholdInBytes;
    private static ILogger ourLogger;
    private static ConcurrentDictionary`2<int, string> ourSids;
    private static ConcurrentDictionary`2<int, int> ourTotalWrittenBytes;
    private static ConcurrentDictionary`2<int, int> ourLastStacktraceWritten;
    private static LevelDbMapStats();
    public static void RegisterSid(LevelDbMapSid sid, string name);
    public static object GetDbName(LevelDbMapSid sid);
    private static int GetSingleWriteThresholdInBytes(LevelDbMapSid sid);
    private static int GetTotalWriteThresholdInBytes(LevelDbMapSid sid);
    public static void SetDefaultWriteThresholdsInBytes(int singleWriteThresholdInBytes, int totalWriteThresholdInBytes);
    public static void SetSingleWriteThresholdInBytes(LevelDbMapSid sid, int thresholdInBytes);
    public static void SetTotalWriteThresholdInBytes(LevelDbMapSid sid, int thresholdInBytes);
    public static void LogWrittenBytes(string methodName, LevelDbMapSid sid, Cookie cookie);
    public static void Clear();
    public static string DumpToString();
}
internal class JetBrains.Application.PersistentMap.LevelDbProjectedCollection`1 : ProjectedCollection`2<TKey, KeyValuePair`2<TKey, object>> {
    internal LevelDbMapSid Sid;
    internal IUnsafeMarshaller`1<TKey> KeyMarshaller;
    internal LevelDbProjectedCollection`1(IKeyValueDb db, string mapId, IUnsafeMarshaller`1<TKey> keyMarshaller);
    public virtual bool Contains(TKey item);
    public virtual void Add(TKey item);
}
internal class JetBrains.Application.PersistentMap.LevelDbRawMapEnumerator : SafeDisposable {
    private IntPtr myIterPtr;
    private bool myStarted;
    private UnsafeReader myReader;
    private LevelDb myDb;
    public int CurrentKeyLength;
    public int CurrentValueLength;
    public LevelDbMapSid CurrentLevelDbMapSid;
    [CompilerGeneratedAttribute]
private IntPtr <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <CurrentValue>k__BackingField;
    public IntPtr Current { get; private set; }
    public IntPtr CurrentValue { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    internal LevelDbRawMapEnumerator(LevelDb db);
    private void Init();
    protected virtual void DisposeUnmanagedResources();
    public sealed virtual bool MoveNext();
    [CompilerGeneratedAttribute]
public sealed virtual IntPtr get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(IntPtr value);
    [CompilerGeneratedAttribute]
public IntPtr get_CurrentValue();
    [CompilerGeneratedAttribute]
private void set_CurrentValue(IntPtr value);
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.Application.PersistentMap.LevelDbStatus : object {
    [CompilerGeneratedAttribute]
private int <ApproximateMemoryUsageInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stats>k__BackingField;
    public int ApproximateMemoryUsageInBytes { get; }
    public string Stats { get; }
    public LevelDbStatus(int approximateMemoryUsageInBytes, string stats);
    [CompilerGeneratedAttribute]
public int get_ApproximateMemoryUsageInBytes();
    [CompilerGeneratedAttribute]
public string get_Stats();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.PersistentMap.LevelDbTransaction : SafeDisposable {
    private LevelDb myDb;
    protected IntPtr TransactionPtr;
    protected long Version;
    protected bool TransactionFinished;
    protected object Lock;
    protected ILogger myLogger;
    [CompilerGeneratedAttribute]
private int <EntitiesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AllocatedBytes>k__BackingField;
    protected int EntitiesCount { get; protected set; }
    protected int AllocatedBytes { get; protected set; }
    private static LevelDbTransaction();
    public LevelDbTransaction(LevelDb db);
    [CompilerGeneratedAttribute]
protected int get_EntitiesCount();
    [CompilerGeneratedAttribute]
protected void set_EntitiesCount(int value);
    [CompilerGeneratedAttribute]
protected int get_AllocatedBytes();
    [CompilerGeneratedAttribute]
protected void set_AllocatedBytes(int value);
    protected virtual void TransactionContentChanged(int allocationBytesDiff, int entitiesDiff);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void AssertState();
    public sealed virtual long Remove(ICollection`1<TKey> collection, TKey key);
    public sealed virtual long RemoveRaw(RawValue rawKey);
    public virtual void Clear();
    public sealed virtual IKeyValueDb GetDb();
    protected virtual void DisposeUnmanagedResources();
    public sealed virtual long AddRaw(IPersistentSortedMap`2<TKey, TValue> map, TKey key, RawValue value);
    public sealed virtual long Add(IPersistentSortedMap`2<TKey, TValue> map, TKey key, TValue value);
    public sealed virtual long Remove(IPersistentSortedMap`2<TKey, TValue> map, TKey key);
    public virtual void Commit();
    protected void CommitNoLocks(IntPtr transactionPtr);
    public virtual void Rollback();
}
internal enum JetBrains.Application.PersistentMap.OpKind : Enum {
    public int value__;
    public static OpKind Add;
    public static OpKind Remove;
    public static OpKind Raw;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2 : object {
    private IDictionaryBasedCache`2<TKey, TValue> myInMemoryCache;
    private IPersistentSortedMap`2<TKey, TValue> myBackendMap;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myHasNotCommittedEntries;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TKey, Versioned`1<TValue>> myNotCommittedEntries;
    internal IAutocommitTransaction Tx;
    internal long LastEntryVersion;
    private CachingStrategy modreq(System.Runtime.CompilerServices.IsVolatile) myCachingStrategy;
    [CompilerGeneratedAttribute]
private bool <UseCachingEnumerator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheMissingKeys>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TValue <MissingValueMarker>k__BackingField;
    private static ObjectPool`1<PooledList`1<TKey>> ourKeysToRemoveListPool;
    public bool UseCachingEnumerator { get; public set; }
    public bool CacheMissingKeys { get; public set; }
    [NullableAttribute("2")]
public TValue MissingValueMarker { get; public set; }
    public CachingStrategy CachingStrategy { get; public set; }
    public IDictionaryBasedCache`2<TKey, TValue> Cache { get; public set; }
    [PublicAPIAttribute]
public IPersistentSortedMap`2<TKey, TValue> BackendMap { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public OptimizedPersistentSortedMap`2(Lifetime lifetime, IPersistentSortedMap`2<TKey, TValue> map, IEqualityComparer`1<TKey> keyEqualityComparer);
    private static OptimizedPersistentSortedMap`2();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseCachingEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseCachingEnumerator(bool value);
    [CompilerGeneratedAttribute]
public bool get_CacheMissingKeys();
    [CompilerGeneratedAttribute]
public void set_CacheMissingKeys(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TValue get_MissingValueMarker();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MissingValueMarker(TValue value);
    public sealed virtual CachingStrategy get_CachingStrategy();
    public sealed virtual void set_CachingStrategy(CachingStrategy value);
    public sealed virtual IDictionaryBasedCache`2<TKey, TValue> get_Cache();
    public sealed virtual void set_Cache(IDictionaryBasedCache`2<TKey, TValue> value);
    private void OnCommitted(long lastCommittedVersion);
    private static void Promote(Int64& toPromote, long newMax);
    private void Commit();
    public void Flush();
    public IPersistentSortedMap`2<TKey, TValue> get_BackendMap();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual IKeyValueDb GetDb();
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetEnumerator(bool reversedOrder, TKey fromKey);
    public sealed virtual IPersistentSortedMap`2<TKey, TValue> GetInSnapshot(IKeyValueDb snapshot);
    public sealed virtual IKeyValueEnumerator`2<TKey, TValue> GetCleaningEnumerator(Func`2<TKey, bool> removeAllMatches);
    public sealed virtual long SizeInBytes();
    public sealed virtual bool ContainsKey(TKey key);
    public bool ContainsKeyDoNotCacheResult(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private void TryAddToCache(TKey key, TValue valueToStoreInCache, long versionOnStart, bool removeOnVersionCheckFail);
    private bool TryGetValueCore(TKey key, TValue& value, bool useContainsToOptimizeValueUnmarshal);
    private bool CachingStrategyContains(CachingStrategy strategy);
    private void InsertCore(TKey key, Versioned`1<TValue> entry);
    public sealed virtual void Add(TKey key, TValue value);
    public void AddRaw(TKey key, RawValue value);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual void Dump(TextWriter writer, Func`2<TKey, string> renderKey, Func`2<TValue, string> renderValue);
    public sealed virtual bool TryGetCachedValue(TKey key, TValue& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.PersistentMap.PersistentSortedMapExtensions : object {
    [ExtensionAttribute]
[PureAttribute]
public static OptimizedPersistentSortedMap`2<TKey, TValue> ToOptimized(IPersistentSortedMap`2<TKey, TValue> value, Lifetime lifetime, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void ToOptimized(OptimizedPersistentSortedMap`2<TKey, TValue> value, Lifetime lifetime, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static void Clear(IPersistentSortedMap`2<TKey, TValue> map, Func`2<TKey, bool> removeKeysMatches, Action`1<TKey> onRemove);
    [ExtensionAttribute]
public static void RemoveAll(IPersistentSortedMap`2<TKey, TValue> map, Predicate`1<TKey> match);
    [ExtensionAttribute]
public static void RemoveAll(IPersistentSortedMap`2<TKey, TValue> map, Func`3<TKey, TValue, bool> match);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.PersistentMap.PolymorphicMarshallerAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private int <HashMixin>k__BackingField;
    public int HashMixin { get; }
    public PolymorphicMarshallerAttribute(int mixin);
    [CompilerGeneratedAttribute]
public int get_HashMixin();
}
[DefaultMemberAttribute("Item")]
[ShellComponentAttribute("18")]
public class JetBrains.Application.PersistentMap.PolymorphicMarshallers : object {
    public static int NullId;
    [CompilerGeneratedAttribute]
private static PolymorphicMarshallers <Instance>k__BackingField;
    private IDictionary`2<int, ReadDelegate`1<object>> myReaders;
    private IDictionary`2<Type, Pair`2<int, WriteDelegate`1<object>>> myWriters;
    private static string ReadDelegateField;
    private static string WriteDelegateField;
    public static PolymorphicMarshallers Instance { get; private set; }
    public Pair`2<int, WriteDelegate`1<object>> Item { get; }
    public ReadDelegate`1<object> Item { get; }
    public IEnumerable`1<Pair`2<Type, int>> TypeSids { get; }
    public PolymorphicMarshallers(Lifetime lifetime, ShellPartCatalogSet catalogSet);
    [CompilerGeneratedAttribute]
public static PolymorphicMarshallers get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(PolymorphicMarshallers value);
    private int CalcHash(Type type, PolymorphicMarshallerAttribute attr);
    public Pair`2<int, WriteDelegate`1<object>> get_Item(Type clazz);
    public ReadDelegate`1<object> get_Item(int typeHash);
    public IEnumerable`1<Pair`2<Type, int>> get_TypeSids();
    private void Error(string arg, Type t);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PublicAPIAttribute]
public class JetBrains.Application.PersistentMap.ProjectedKeyValueEnumerator`3 : object {
    private IKeyValueEnumerator`2<TSrc, TValue> mySrc;
    private Func`2<TSrc, bool> myFilter;
    private Func`2<TSrc, TDst> myTo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<TDst, TValue> Current { get; }
    [NullableAttribute("2")]
private object System.Collections.IEnumerator.Current { get; }
    public TDst CurrentKey { get; }
    public TValue CurrentValue { get; }
    public bool IsCurrentKeyWillBeRemoved { get; }
    public ProjectedKeyValueEnumerator`3(IKeyValueEnumerator`2<TSrc, TValue> src, Func`2<TSrc, bool> filter, Func`2<TSrc, TDst> to);
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual KeyValuePair`2<TDst, TValue> get_Current();
    [NullableContextAttribute("2")]
private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual TDst get_CurrentKey();
    public sealed virtual TValue get_CurrentValue();
    public sealed virtual bool get_IsCurrentKeyWillBeRemoved();
    public sealed virtual void add_OnKeyMarkedForRemoval(Action`1<TDst> value);
    public sealed virtual void remove_OnKeyMarkedForRemoval(Action`1<TDst> value);
    public sealed virtual void add_OnDispose(Action value);
    public sealed virtual void remove_OnDispose(Action value);
    public sealed virtual void RemoveCurrent();
    public sealed virtual T ReinterpretCastValue(Func`2<RawValue, T> valueMarshaller);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.PersistentMap.ShellCaches : object {
    private static string ShellCachesVersion;
    private object myLock;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private DbDriverManager myDbDriverManager;
    private PolymorphicMarshallers myPolymorphicMarshallers;
    private ITaskHost myTaskHost;
    private IApplicationHost myApplicationHost;
    private IKeyValueDb modreq(System.Runtime.CompilerServices.IsVolatile) myDb;
    protected static string ShellSubfolder;
    private FileSystemPath myLocation;
    protected bool StoreInAppdata { get; }
    protected bool PersistCaches { get; }
    public FileSystemPath Location { get; }
    public IKeyValueDb Db { get; }
    public ShellCaches(Lifetime lifetime, ILogger logger, DbDriverManager dbDriverManager, IApplicationHost applicationHost, PolymorphicMarshallers polymorphicMarshallers, IShellLocks locks);
    private static ShellCaches();
    private void LazyInit();
    protected virtual bool get_StoreInAppdata();
    protected virtual bool get_PersistCaches();
    private IKeyValueDb CreateDb();
    protected virtual FileSystemPath GetCachesLocation(bool storeInAppData);
    public FileSystemPath get_Location();
    public IKeyValueDb get_Db();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.PersistentMap.ShellCachesSizeEventRecordProvider : object {
    public ShellCachesSizeEventRecordProvider(Lifetime lifetime, ShellCaches shellCaches, EventRecordsProvider eventRecordsProvider);
}
[ExtensionAttribute]
public static class JetBrains.Application.PersistentMap.UnsafeMarshallersEx : object {
    [ExtensionAttribute]
public static void WritePolymorphic(UnsafeWriter writer, object value);
    [ExtensionAttribute]
public static T ReadPolymorphic(UnsafeReader reader);
}
public enum JetBrains.Application.PersistentMap.ValidityCheckFailAction : Enum {
    public int value__;
    public static ValidityCheckFailAction Clear;
    public static ValidityCheckFailAction Exception;
    public static ValidityCheckFailAction Null;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class JetBrains.Application.PersistentMap.Versioned`1 : ValueType {
    internal long Version;
    internal OpKind Kind;
    internal T Value;
    public Versioned`1(long version, OpKind kind, T value);
    public void Deconstruct(Int64& version, OpKind& kind, T& value);
    public virtual string ToString();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Platform.IMonoPathProvider {
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public abstract virtual List`1<FileSystemPath> GetPossibleMonoPaths();
    public abstract virtual int GetPriority();
}
public class JetBrains.Application.Platform.MonoPathProviders.EnvMonoPathProvider : object {
    private ILogger myLogger;
    public sealed virtual List`1<FileSystemPath> GetPossibleMonoPaths();
    public sealed virtual int GetPriority();
}
public class JetBrains.Application.Platform.MonoPathProviders.LinuxDefaultMonoPathProvider : object {
    public sealed virtual List`1<FileSystemPath> GetPossibleMonoPaths();
    public sealed virtual int GetPriority();
}
public class JetBrains.Application.Platform.MonoPathProviders.LinuxFlatpackMonoPathProvider : object {
    public sealed virtual List`1<FileSystemPath> GetPossibleMonoPaths();
    public sealed virtual int GetPriority();
}
public class JetBrains.Application.Platform.MonoPathProviders.MacOsDefaultMonoPathProvider : object {
    public sealed virtual List`1<FileSystemPath> GetPossibleMonoPaths();
    public sealed virtual int GetPriority();
}
public class JetBrains.Application.Platform.MonoPathProviders.WindowsDefaultMonoPathProvider : object {
    public sealed virtual List`1<FileSystemPath> GetPossibleMonoPaths();
    public sealed virtual int GetPriority();
}
public class JetBrains.Application.Platform.MonoRuntime : object {
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <RootPath>k__BackingField;
    public VirtualFileSystemPath ExePath { get; }
    public VirtualFileSystemPath RootPath { get; }
    public MonoRuntime(VirtualFileSystemPath rootPath, VirtualFileSystemPath exePath);
    private static MonoRuntime();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_ExePath();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_RootPath();
    public sealed virtual bool Equals(MonoRuntime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Platform.MonoRuntimeDetector : object {
    private static ILogger ourLogger;
    private static IMonoPathProvider[] ourMonoPathProviders;
    private IReadOnlyCollection`1<IMonoPathProvider> myAdditionalProviders;
    public MonoRuntimeDetector(IEnumerable`1<IMonoPathProvider> providers);
    private static MonoRuntimeDetector();
    [NotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
private static IEnumerable`1<MonoRuntime> TryGetMonoRuntimeRootPathFromFolders(IEnumerable`1<FileSystemPath> possibleLocations);
    [CanBeNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
public static MonoRuntime TryGetMonoRuntimeRootPathFromFolder(FileSystemPath rootFolder);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
public List`1<MonoRuntime> DetectMonoRuntimes();
    [NotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
public static List`1<MonoRuntime> DetectWellKnownMonoRuntimes();
    [NotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
private static List`1<MonoRuntime> DetectMonoRuntimes(IEnumerable`1<IMonoPathProvider> providers);
}
[ExtensionAttribute]
public static class JetBrains.Application.Platform.MonoRuntimeExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyCollection`1<VirtualFileSystemPath> GetTargetFrameworkRoots(MonoRuntime monoRuntime);
}
public static class JetBrains.Application.platforms.DefaultPlatformUtil : object {
    public static IComparer`1<TargetFrameworkId> DefaultTargetFramewrkIdComparer;
    public static IEqualityComparer`1<TargetFrameworkId> IgnoreRuntimeAndDefaultProfilesComparer;
    private static DefaultPlatformUtil();
    private static int CalcHashCodeWithoutProfile(TargetFrameworkId targetFrameworkId);
    private static bool CompareIgnoringRuntimeAndDefaultProfiles(TargetFrameworkId x, TargetFrameworkId y);
    private static int GetFrameworkIdentifierWeight(FrameworkIdentifier frameworkIdentifier);
    private static int GetProfileWeight(ProfileIdentifier profile);
    private static int RuntimeAndDefaultHaveSameWeight(ProfileIdentifier profile);
    private static int CompareIdCandidates(TargetFrameworkId x, TargetFrameworkId y);
    private static int CompareTargetFrameworkIdFields(TargetFrameworkId x, TargetFrameworkId y, Func`2<ProfileIdentifier, int> profileWeight);
}
public class JetBrains.Application.platforms.DotNetCliCreationResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <IntallationFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IDotNetCoreCli <Cli>k__BackingField;
    public bool Success { get; }
    [NotNullAttribute]
public string ErrorMessage { get; }
    public VirtualFileSystemPath IntallationFolder { get; }
    [CanBeNullAttribute]
public IDotNetCoreCli Cli { get; }
    private DotNetCliCreationResult(bool success, string errorMessage, VirtualFileSystemPath intallationFolder, IDotNetCoreCli cli);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_IntallationFolder();
    [CompilerGeneratedAttribute]
public IDotNetCoreCli get_Cli();
    public static DotNetCliCreationResult CreateSuccess(VirtualFileSystemPath installationFolder, IDotNetCoreCli cli);
    public static DotNetCliCreationResult CreateFail(VirtualFileSystemPath installationFolder, string errorMessage);
    [NotNullAttribute]
public IDotNetCoreCli GetCliOrThrow();
    public void Log(ILogger logger, LoggingLevel loggingLevel);
    private static string CliToString(IDotNetCoreCli cli);
}
public class JetBrains.Application.platforms.DotNetCoreCli : object {
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <SdkRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <RuntimesRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <ExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <InstallationFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<DotNetCoreSdk> <Sdks>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<DotNetCoreRuntimeGroup> <Runtimes>k__BackingField;
    [NotNullAttribute]
public VirtualFileSystemPath SdkRootFolder { get; }
    [NotNullAttribute]
public VirtualFileSystemPath RuntimesRootFolder { get; }
    [NotNullAttribute]
public VirtualFileSystemPath ExePath { get; }
    [NotNullAttribute]
public VirtualFileSystemPath InstallationFolder { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<DotNetCoreSdk> Sdks { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<DotNetCoreRuntimeGroup> Runtimes { get; }
    private DotNetCoreCli(VirtualFileSystemPath sdkRootFolder, VirtualFileSystemPath runtimesRootFolder, VirtualFileSystemPath exePath, VirtualFileSystemPath installationFolder, IReadOnlyCollection`1<DotNetCoreSdk> sdks, IReadOnlyCollection`1<DotNetCoreRuntimeGroup> runtimes);
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_SdkRootFolder();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_RuntimesRootFolder();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_ExePath();
    [CompilerGeneratedAttribute]
public sealed virtual VirtualFileSystemPath get_InstallationFolder();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<DotNetCoreSdk> get_Sdks();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<DotNetCoreRuntimeGroup> get_Runtimes();
    [CanBeNullAttribute]
public static VirtualFileSystemPath TryDetectDotNetRootOverride(VirtualFileSystemPath exePath);
    [NotNullAttribute]
public static DotNetCliCreationResult Create(VirtualFileSystemPath installationFolder);
    [NotNullAttribute]
public sealed virtual VirtualFileSystemPath GetSdkDirectory(DotNetCoreSdk sdk);
    public sealed virtual Process CreateProcess(string command, IEnumerable`1<string> arguments, VirtualFileSystemPath workingDirectory, bool redirectOutput);
    private bool Equals(DotNetCoreCli other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.platforms.DotNetCoreInstallationsDetector : object {
    private static ILogger ourLogger;
    private IReadOnlyCollection`1<IDotNetCorePathProvider> myProviders;
    private IReadOnlyCollection`1<IDotNetCoreSelector> mySelectors;
    public DotNetCoreInstallationsDetector(IImmutableList`1<IDotNetCorePathProvider> providers, IEnumerable`1<IDotNetCoreSelector> selectors);
    private static DotNetCoreInstallationsDetector();
    public static DotNetCoreInstallationsDetector CreateDefaultInstance();
    [NotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
private IEnumerable`1<VirtualFileSystemPath> TryGetDotNetCliInstallationFolderFrom(IEnumerable`1<VirtualFileSystemPath> possibleLocations);
    private void TryGetInstallationFolderFrom(VirtualFileSystemPath possibleLocation, List`1<VirtualFileSystemPath> result);
    [NotNullAttribute]
[ItemNotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
public List`1<IDotNetCoreCli> DetectSdkInstallations(IInteractionContext context);
    [NotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
public List`1<IDotNetCoreCli> DetectNonNativeX86Installations(IInteractionContext context);
    [NotNullAttribute]
[ItemNotNullAttribute]
[MustUseReturnValueAttribute]
[PureAttribute]
public List`1<IDotNetCoreCli> DetectNonNativeX64Installations(IInteractionContext context);
    [NotNullAttribute]
[ItemNotNullAttribute]
public static List`1<IDotNetCoreCli> DetectSdkInstallations(IEnumerable`1<VirtualFileSystemPath> installationFolders);
    [CanBeNullAttribute]
public static IDotNetCoreCli DetectSdkInstallation(VirtualFileSystemPath installationFolder);
    [NotNullAttribute]
[ItemNotNullAttribute]
private static List`1<IDotNetCoreCli> DetectInstallations(IEnumerable`1<VirtualFileSystemPath> installationFolders);
    [CanBeNullAttribute]
public static IDotNetCoreCli DetectInstallation(VirtualFileSystemPath installationFolder);
    public HashSet`1<VirtualFileSystemPath> GetPossibleInstallationFolders(IInteractionContext context);
    [CanBeNullAttribute]
public IDotNetCoreCli ChooseBestDefaultDotNetCoreToolset(IReadOnlyCollection`1<IDotNetCoreCli> toolsets, VirtualFileSystemPath solutionRoot);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.platforms.DotNetCorePathProviders.DefaultDotNetCorePathProvider : object {
    private ILogger myLogger;
    public DefaultDotNetCorePathProvider(ILogger logger);
    public sealed virtual List`1<VirtualFileSystemPath> GetPossibleDotNetPaths(IInteractionContext context);
    private IEnumerable`1<VirtualFileSystemPath> GetPossibleSnapLocations(IInteractionContext context);
}
public class JetBrains.Application.platforms.DotNetCoreRuntime : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public NuGetVersion Version { get; }
    public DotNetCoreRuntime(string name, NuGetVersion version);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    private bool Equals(DotNetCoreRuntime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.platforms.DotNetCoreRuntimeGroup : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<NuGetVersion> <Versions>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<NuGetVersion> Versions { get; }
    [NotNullAttribute]
public IReadOnlyCollection`1<DotNetCoreRuntime> Runtimes { get; }
    public DotNetCoreRuntimeGroup(string name, IReadOnlyCollection`1<NuGetVersion> versions);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<NuGetVersion> get_Versions();
    public IReadOnlyCollection`1<DotNetCoreRuntime> get_Runtimes();
    [CompilerGeneratedAttribute]
private DotNetCoreRuntime <get_Runtimes>b__7_0(NuGetVersion v);
}
public class JetBrains.Application.platforms.DotNetCoreSdk : object {
    [CompilerGeneratedAttribute]
private NuGetVersion <Version>k__BackingField;
    [NotNullAttribute]
public NuGetVersion Version { get; }
    [NotNullAttribute]
public string FolderName { get; }
    public DotNetCoreSdk(NuGetVersion version);
    [CompilerGeneratedAttribute]
public NuGetVersion get_Version();
    public string get_FolderName();
    public virtual string ToString();
    private bool Equals(DotNetCoreSdk other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_Inequality(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_GreaterThan(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_LessThan(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_GreaterThanOrEqual(DotNetCoreSdk left, DotNetCoreSdk right);
    public static bool op_LessThanOrEqual(DotNetCoreSdk left, DotNetCoreSdk right);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.platforms.GacCacheController : object {
    public GacCacheController(Lifetime lifetime, IFileSystemTracker fileSystemTracker);
    private static void CreateCacheOnFolder(Lifetime lifetime, IFileSystemTracker fileSystemTracker, VirtualFileSystemPath gacPath);
}
[ExtensionAttribute]
public static class JetBrains.Application.platforms.GlobalJson.GlobalJsonMatcher : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static DotNetCoreSdk GetSdkByDirectory(IDotNetCoreCli cli, VirtualFileSystemPath root);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static DotNetCoreSdk GetSdkByVersion(IDotNetCoreCli cli, GlobalJsonModel model);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithNextMajorMinMinorMinFeatureLatestPatch(IReadOnlyCollection`1<DotNetCoreSdk> sdks, GlobalJsonVersion version);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithNextMinorMinFeatureLatestPatch(IReadOnlyCollection`1<DotNetCoreSdk> sdks, GlobalJsonVersion version);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithNextFeatureLatestPatch(IReadOnlyCollection`1<DotNetCoreSdk> sdks, GlobalJsonVersion version);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithLatestMajor(IReadOnlyCollection`1<DotNetCoreSdk> sdks, GlobalJsonVersion version);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithSameMajorLatestMinor(IReadOnlyCollection`1<DotNetCoreSdk> sdks, GlobalJsonVersion version);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithSameMinorLatestFeature(IReadOnlyCollection`1<DotNetCoreSdk> sdks, GlobalJsonVersion version);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithSameFeatureLatestPatch(IReadOnlyCollection`1<DotNetCoreSdk> sdks, GlobalJsonVersion version);
    [CanBeNullAttribute]
private static DotNetCoreSdk WithExactVersion(IReadOnlyCollection`1<DotNetCoreSdk> sdks, NuGetVersion version);
    [NotNullAttribute]
private static IReadOnlyCollection`1<DotNetCoreSdk> FilterPrerelease(IReadOnlyCollection`1<DotNetCoreSdk> sdks, bool allowPrerelease);
    [ExtensionAttribute]
private static IEnumerable`1<DotNetCoreSdk> WhereVersion(IEnumerable`1<DotNetCoreSdk> list, Func`2<GlobalJsonVersion, bool> filter);
    [ExtensionAttribute]
private static IEnumerable`1<T> SelectVersion(IEnumerable`1<DotNetCoreSdk> list, Func`2<GlobalJsonVersion, T> getter);
}
public class JetBrains.Application.platforms.GlobalJson.GlobalJsonModel : object {
    public static GlobalJsonModel Default;
    [CompilerGeneratedAttribute]
private NuGetVersion <SdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowPrerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GlobalJsonRollForwardPolicy> <RollForward>k__BackingField;
    [CanBeNullAttribute]
public NuGetVersion SdkVersion { get; }
    public Nullable`1<bool> AllowPrerelease { get; }
    public Nullable`1<GlobalJsonRollForwardPolicy> RollForward { get; }
    public GlobalJsonModel(NuGetVersion sdkVersion, Nullable`1<bool> allowPrerelease, Nullable`1<GlobalJsonRollForwardPolicy> rollForward);
    private static GlobalJsonModel();
    [CompilerGeneratedAttribute]
public NuGetVersion get_SdkVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowPrerelease();
    [CompilerGeneratedAttribute]
public Nullable`1<GlobalJsonRollForwardPolicy> get_RollForward();
    public sealed virtual bool Equals(GlobalJsonModel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.platforms.GlobalJson.GlobalJsonParser : object {
    public static string GlobalJsonFileName;
    [NotNullAttribute]
public static GlobalJsonModel FindAndParse(VirtualFileSystemPath directory);
    [NotNullAttribute]
public static GlobalJsonModel Parse(VirtualFileSystemPath globalJsonFile);
}
public enum JetBrains.Application.platforms.GlobalJson.GlobalJsonRollForwardPolicy : Enum {
    public int value__;
    public static GlobalJsonRollForwardPolicy Patch;
    public static GlobalJsonRollForwardPolicy Feature;
    public static GlobalJsonRollForwardPolicy Minor;
    public static GlobalJsonRollForwardPolicy Major;
    public static GlobalJsonRollForwardPolicy LatestPatch;
    public static GlobalJsonRollForwardPolicy LatestFeature;
    public static GlobalJsonRollForwardPolicy LatestMinor;
    public static GlobalJsonRollForwardPolicy LatestMajor;
    public static GlobalJsonRollForwardPolicy Disable;
}
[IsReadOnlyAttribute]
public class JetBrains.Application.platforms.GlobalJson.GlobalJsonVersion : ValueType {
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    public int Major { get; }
    public int Minor { get; }
    public int Feature { get; }
    public int Patch { get; }
    public GlobalJsonVersion(NuGetVersion version);
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public int get_Feature();
    [CompilerGeneratedAttribute]
public int get_Patch();
    public sealed virtual bool Equals(GlobalJsonVersion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.Application.platforms.IDotNetCoreCli {
    public VirtualFileSystemPath SdkRootFolder { get; }
    public VirtualFileSystemPath RuntimesRootFolder { get; }
    public VirtualFileSystemPath ExePath { get; }
    public VirtualFileSystemPath InstallationFolder { get; }
    public IReadOnlyCollection`1<DotNetCoreSdk> Sdks { get; }
    public IReadOnlyCollection`1<DotNetCoreRuntimeGroup> Runtimes { get; }
    public abstract virtual VirtualFileSystemPath get_SdkRootFolder();
    public abstract virtual VirtualFileSystemPath get_RuntimesRootFolder();
    public abstract virtual VirtualFileSystemPath get_ExePath();
    public abstract virtual VirtualFileSystemPath get_InstallationFolder();
    public abstract virtual IReadOnlyCollection`1<DotNetCoreSdk> get_Sdks();
    public abstract virtual IReadOnlyCollection`1<DotNetCoreRuntimeGroup> get_Runtimes();
    public abstract virtual VirtualFileSystemPath GetSdkDirectory(DotNetCoreSdk sdk);
    public abstract virtual Process CreateProcess(string command, IEnumerable`1<string> arguments, VirtualFileSystemPath workingDirectory, bool redirectOutput);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.platforms.IDotNetCorePathProvider {
    [NotNullAttribute]
[MustUseReturnValueAttribute]
public abstract virtual List`1<VirtualFileSystemPath> GetPossibleDotNetPaths(IInteractionContext context);
}
public interface JetBrains.Application.platforms.IDotNetCoreSelector {
    [CanBeNullAttribute]
public abstract virtual IDotNetCoreCli Select(IReadOnlyCollection`1<IDotNetCoreCli> toolsets, VirtualFileSystemPath solutionRoot);
    public abstract virtual int GetPriority();
}
public static class JetBrains.Application.platforms.ProjectTypesGuid : object {
    public static Guid Vs2005WebSite;
    public static Guid VsPerformanceAnalyzerProject;
    public static Guid InstallShieldProject;
    public static Guid InstallShieldProjectLight;
    public static Guid SilverlightProject;
    public static Guid WorkflowProject;
    public static Guid DBProject;
    public static Guid WindowsPhone;
    public static Guid VBLangService;
    public static Guid CSharpLangService;
    public static Guid SolutionItemsProject;
    public static Guid VBSmartDevice;
    public static Guid FSharp;
    public static Guid UnloadedProject;
    public static Guid ExtensibilityProject;
    public static Guid WpfGuid;
    public static Guid CpsGuid;
    public static Guid WindowsCSharp;
    public static Guid MetroStyleAppGuid;
    public static Guid SqlServerDatabaseProject;
    public static Guid AzureProject;
    public static Guid NanoFrameworkProject;
    public static Guid DockerComposeProject;
    public static Guid NodeJsProject;
    public static Guid WixProject;
    public static Guid ExecutableProject;
    public static Guid EcmaScriptProject;
    public static Guid ServiceFabricProject;
    public static Guid RegularProjectAsWebsiteForTests;
    public static Guid IUnknown;
    public static Guid PerformanceAnalyzerGuid;
    public static Guid StoreAppUniversalGuid;
    public static Guid Window10UniversalAppGuid;
    public static Guid OpenFolderSelectionHierarchyGuid;
    public static Guid CppGuid;
    public static Guid MonoDevelop_IPhone_IPhoneProjectGuid;
    public static Guid MonoDevelop_IPhone_IPhoneBindingProjectGuid;
    public static Guid MonoDevelop_MonoDroid_MonoDroidProjectGuid;
    public static Guid MonoDevelop_MonoDroid_MonoDroidBindingProjectGuid;
    public static JetHashSet`1<Guid> XamarinGuids;
    private static ProjectTypesGuid();
}
public enum JetBrains.Application.platforms.RollForwardPolicy : Enum {
    public int value__;
    public static RollForwardPolicy LatestPatch;
    public static RollForwardPolicy Minor;
    public static RollForwardPolicy Major;
    public static RollForwardPolicy LatestMinor;
    public static RollForwardPolicy LatestMajor;
    public static RollForwardPolicy Disable;
}
public class JetBrains.Application.platforms.SdkIdentifier : object {
    public static SdkIdentifier WindowsSdk;
    public static SdkIdentifier DotNetSdk;
    [NotNullAttribute]
private string myIdentifier;
    public SdkIdentifier(string identifier);
    private static SdkIdentifier();
    public sealed virtual bool Equals(SdkIdentifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(SdkIdentifier left, SdkIdentifier right);
    public static bool op_Inequality(SdkIdentifier left, SdkIdentifier right);
}
public class JetBrains.Application.platforms.SdkInfo : object {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualFileSystemPath <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkIdentifier <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SdkInfo> <ExtensionSDKs>k__BackingField;
    public Version Version { get; }
    public VirtualFileSystemPath Root { get; }
    public SdkIdentifier Identifier { get; }
    public IReadOnlyCollection`1<SdkInfo> ExtensionSDKs { get; public set; }
    public SdkInfo(SdkIdentifier identifier, Version version, VirtualFileSystemPath root, IReadOnlyCollection`1<SdkInfo> extensionSDKs);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public VirtualFileSystemPath get_Root();
    [CompilerGeneratedAttribute]
public SdkIdentifier get_Identifier();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SdkInfo> get_ExtensionSDKs();
    [CompilerGeneratedAttribute]
public void set_ExtensionSDKs(IReadOnlyCollection`1<SdkInfo> value);
}
public class JetBrains.Application.Processes.EnvironmentVariableMutator : object {
    public static EnvironmentVariableMutator PrepareForChildProcess;
    public static EnvironmentVariableMutator Empty;
    public static EnvironmentVariableMutator StripMonoDebug;
    [NotNullAttribute]
private Action`1<IDictionary`2<string, string>> myMutate;
    private EnvironmentVariableMutator(Action`1<IDictionary`2<string, string>> mutate);
    private EnvironmentVariableMutator(EnvironmentVariableMutator[] mutators);
    private static EnvironmentVariableMutator();
    public void Mutate(IDictionary`2<string, string> env);
    public static EnvironmentVariableMutator Set(string name, string value);
    public static EnvironmentVariableMutator Sequence(EnvironmentVariableMutator[] mutators);
    public static EnvironmentVariableMutator Remove(IEnumerable`1<string> variables);
    public static EnvironmentVariableMutator DotnetRoot(FileSystemPath dotnetRoot);
    public static EnvironmentVariableMutator DotnetRoot(VirtualFileSystemPath dotnetRoot);
    public static EnvironmentVariableMutator EnsureAtStartOfThePath(FileSystemPath root);
    public static EnvironmentVariableMutator EnsureAtStartOfThePath(VirtualFileSystemPath root);
}
public interface JetBrains.Application.Processes.IProcessStartInfoPatcher {
    [NotNullAttribute]
public abstract virtual ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeRequest request);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Processes.IShellProcessStartInfoPatcher {
}
public interface JetBrains.Application.Processes.ISolutionProcessStartInfoPatcher {
}
public class JetBrains.Application.Processes.JetProcessRuntimeFrameworkRequest : JetProcessRuntimeRequest {
    [CompilerGeneratedAttribute]
private bool <UseMono>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MonoDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private JetProcessRuntimePlatformRequest <MonoPlatform>k__BackingField;
    public bool UseMono { get; }
    public bool MonoDebugMode { get; }
    public JetProcessRuntimePlatformRequest MonoPlatform { get; }
    public JetProcessRuntimeFrameworkRequest(bool useMono, bool monoDebugMode, JetProcessRuntimePlatformRequest monoPlatform, EnvironmentVariableMutator mutator, bool dontQuote);
    [CompilerGeneratedAttribute]
public bool get_UseMono();
    [CompilerGeneratedAttribute]
public bool get_MonoDebugMode();
    [CompilerGeneratedAttribute]
public JetProcessRuntimePlatformRequest get_MonoPlatform();
    public virtual string ToString();
}
public enum JetBrains.Application.Processes.JetProcessRuntimePlatformRequest : Enum {
    public int value__;
    public static JetProcessRuntimePlatformRequest Automatic;
    public static JetProcessRuntimePlatformRequest PreferX86;
    public static JetProcessRuntimePlatformRequest PreferX64;
}
public class JetBrains.Application.Processes.JetProcessRuntimeRequest : object {
    [CompilerGeneratedAttribute]
private JetProcessRuntimeType <RuntimeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DontQuote>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PatchDotNetRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private EnvironmentVariableMutator <EnvironmentVariableMutator>k__BackingField;
    public JetProcessRuntimeType RuntimeType { get; }
    public bool DontQuote { get; }
    public bool UseInternal { get; }
    public bool PatchDotNetRoot { get; }
    [NotNullAttribute]
public EnvironmentVariableMutator EnvironmentVariableMutator { get; }
    protected JetProcessRuntimeRequest(JetProcessRuntimeType runtimeType, EnvironmentVariableMutator environmentVariableMutator, bool dontQuote, bool useInternal, bool patchDotNetRoot);
    [CompilerGeneratedAttribute]
public JetProcessRuntimeType get_RuntimeType();
    [CompilerGeneratedAttribute]
public bool get_DontQuote();
    [CompilerGeneratedAttribute]
public bool get_UseInternal();
    [CompilerGeneratedAttribute]
public bool get_PatchDotNetRoot();
    [CompilerGeneratedAttribute]
public EnvironmentVariableMutator get_EnvironmentVariableMutator();
    public static JetProcessRuntimeRequest CreateCore(EnvironmentVariableMutator mutator, bool dontQuote, bool useInternal);
    public static JetProcessRuntimeRequest CreateFramework(bool useMono, bool monoDebugMode, JetProcessRuntimePlatformRequest monoPlatform, EnvironmentVariableMutator mutator, bool dontQuote);
    public static JetProcessRuntimeRequest CreateInternalRuntime(EnvironmentVariableMutator mutator, bool dontQuote);
    public static JetProcessRuntimeRequest CreateDirect(EnvironmentVariableMutator mutator, bool patchDotNetRoot);
    public virtual string ToString();
}
public enum JetBrains.Application.Processes.JetProcessRuntimeType : Enum {
    public int value__;
    public static JetProcessRuntimeType FullFramework;
    public static JetProcessRuntimeType DotNetCore;
    public static JetProcessRuntimeType Direct;
}
public class JetBrains.Application.Processes.JetProcessStartInfo : object {
    private ProcessStartInfo myInfo;
    private bool myIsPatched;
    public string FileName { get; }
    public string Arguments { get; }
    public string WorkingDirectory { get; }
    [NotNullAttribute]
public StringDictionary EnvironmentVariables { get; }
    public JetProcessStartInfo(ProcessStartInfo info);
    public JetProcessStartInfo(string fileName, string arguments, string workingDirectory, IDictionary`2<string, string> environmentVariables);
    public JetProcessStartInfo(string fileName, IEnumerable`1<string> arguments, string workingDirectory);
    public JetProcessStartInfo(string fileName, IEnumerable`1<string> arguments, string workingDirectory, IDictionary`2<string, string> environmentVariables);
    private static ProcessStartInfo Clone(ProcessStartInfo info);
    public static JetProcessStartInfo CopyFrom(ProcessStartInfo info);
    public static JetProcessStartInfo CopyFrom(JetProcessStartInfo info);
    public JetProcessStartInfo Patch(string fileName, string arguments, EnvironmentVariableMutator mutator);
    public JetProcessStartInfo EmptyPatch(EnvironmentVariableMutator mutator);
    public JetProcessStartInfo WithOutputRedirection();
    [NotNullAttribute]
public ProcessStartInfo ToProcessStartInfo();
    public string get_FileName();
    public string get_Arguments();
    public string get_WorkingDirectory();
    public StringDictionary get_EnvironmentVariables();
    public virtual string ToString();
}
public class JetBrains.Application.Processes.JetProcessStartInfoPatch : object {
    [NotNullAttribute]
private IProcessStartInfoPatcher myPatcher;
    [NotNullAttribute]
private JetProcessRuntimeRequest myRequest;
    public JetProcessStartInfoPatch(IProcessStartInfoPatcher patcher, JetProcessRuntimeRequest request);
    [NotNullAttribute]
public ProcessStartInfoPatchResult Apply(JetProcessStartInfo info);
}
public class JetBrains.Application.Processes.ProcessStartInfoDotNetCorePatcher : object {
    [CompilerGeneratedAttribute]
private IInteractionContext <Context>k__BackingField;
    [NotNullAttribute]
public static string NotFoundMessage;
    private static EnvironmentVariableMutator ourSkipFirstTimeExperienceMutator;
    private static EnvironmentVariableMutator ourDisableTelemetryMutator;
    public IInteractionContext Context { get; }
    public ProcessStartInfoDotNetCorePatcher(IInteractionContext context);
    private static ProcessStartInfoDotNetCorePatcher();
    [CompilerGeneratedAttribute]
public IInteractionContext get_Context();
    [CanBeNullAttribute]
public virtual string GetCliPath(JetProcessRuntimeRequest request);
    public EnvironmentVariableMutator GetDotNetRootEnvironmentVariableMutator(JetProcessRuntimeRequest request);
    private static EnvironmentVariableMutator GetInternalDotNetCoreEnvironmentVariableMutator(JetProcessRuntimeRequest request);
    public ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeRequest request);
    protected virtual string PatchArguments(JetProcessStartInfo info, JetProcessRuntimeRequest request);
    protected bool TryGetWindowsRuntimeConfig(string fileName, VirtualFileSystemPath& windowsRuntimeConfig);
    private static bool TryParsePath(string fileName, IInteractionContext interactionContext, VirtualFileSystemPath& fileSystemPath);
}
public class JetBrains.Application.Processes.ProcessStartInfoMonoPatcher : object {
    [CompilerGeneratedAttribute]
private IInteractionContext <Context>k__BackingField;
    [NotNullAttribute]
public static string NotFoundMessage;
    public IInteractionContext Context { get; }
    public ProcessStartInfoMonoPatcher(IInteractionContext context);
    [CompilerGeneratedAttribute]
public IInteractionContext get_Context();
    [CanBeNullAttribute]
protected virtual string GetMonoPath(JetProcessRuntimeFrameworkRequest request);
    [NotNullAttribute]
protected virtual string GetMonoArguments(JetProcessRuntimeFrameworkRequest request);
    public ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeFrameworkRequest request);
}
public class JetBrains.Application.Processes.ProcessStartInfoPatcherBase : object {
    [CompilerGeneratedAttribute]
private IInteractionContext <Context>k__BackingField;
    protected ILogger Logger;
    private ProcessStartInfoDotNetCorePatcher myCorePatcher;
    private ProcessStartInfoMonoPatcher myMonoPatcher;
    public IInteractionContext Context { get; }
    protected ProcessStartInfoDotNetCorePatcher DotNetCorePatcher { get; }
    protected ProcessStartInfoMonoPatcher MonoPatcher { get; }
    public ProcessStartInfoPatcherBase(IInteractionContext interactionContext, ILogger logger);
    [CompilerGeneratedAttribute]
public IInteractionContext get_Context();
    protected virtual ProcessStartInfoDotNetCorePatcher get_DotNetCorePatcher();
    protected virtual ProcessStartInfoMonoPatcher get_MonoPatcher();
    protected virtual bool IsNativeFrameworkAvailable();
    public virtual ProcessStartInfoPatchResult Patch(JetProcessStartInfo info, JetProcessRuntimeRequest request);
    [NotNullAttribute]
private ProcessStartInfoPatchResult PatchFullFramework(JetProcessStartInfo info, JetProcessRuntimeFrameworkRequest request);
    [NotNullAttribute]
private ProcessStartInfoPatchResult Direct(JetProcessStartInfo info, JetProcessRuntimeRequest request);
}
public class JetBrains.Application.Processes.ProcessStartInfoPatchResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private JetProcessStartInfo <OriginalProcessStartInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private JetProcessStartInfo <PatchedProcessStartInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private JetProcessRuntimeRequest <RuntimeRequest>k__BackingField;
    public bool Success { get; }
    [NotNullAttribute]
public string ErrorMessage { get; }
    public JetProcessStartInfo OriginalProcessStartInfo { get; }
    [CanBeNullAttribute]
public JetProcessStartInfo PatchedProcessStartInfo { get; }
    [NotNullAttribute]
public JetProcessRuntimeRequest RuntimeRequest { get; }
    private ProcessStartInfoPatchResult(JetProcessStartInfo originalInfo, JetProcessRuntimeRequest runtimeRequest, bool success, string errorMessage, JetProcessStartInfo patchedInfo);
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public JetProcessStartInfo get_OriginalProcessStartInfo();
    [CompilerGeneratedAttribute]
public JetProcessStartInfo get_PatchedProcessStartInfo();
    [CompilerGeneratedAttribute]
public JetProcessRuntimeRequest get_RuntimeRequest();
    public static ProcessStartInfoPatchResult CreateSuccess(JetProcessStartInfo originalInfo, JetProcessRuntimeRequest runtimeRequest, JetProcessStartInfo patchedInfo);
    public static ProcessStartInfoPatchResult CreateFail(JetProcessStartInfo originalInfo, JetProcessRuntimeRequest runtimeRequest, string errorMessage);
    [NotNullAttribute]
public JetProcessStartInfo GetPatchedInfoOrThrow();
    public void Log(ILogger logger, LoggingLevel loggingLevel, bool includeEnvVars);
    [PublicAPIAttribute]
[PureAttribute]
[NotNullAttribute]
public string GetLogMessage(bool includeEnvVars);
    private static string InfoToString(JetProcessStartInfo info);
    private static string StringDictionaryToString(StringDictionary dictionary);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Processes.ShellProcessStartInfoPatcher : ProcessStartInfoPatcherBase {
    public ShellProcessStartInfoPatcher(ILogger logger);
}
public interface JetBrains.Application.ProcessRunner.IInternalProcessesRegistry {
    public IList`1<int> AllRegisteredProcesses { get; }
    public abstract virtual IList`1<int> get_AllRegisteredProcesses();
    public abstract virtual void RegisterProcess(string name, int pid, bool isDotnetProcess, Lifetime syncLifetime);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.ProcessRunner.InternalProcessesRegistry : object {
    private HashSet`1<int> myPids;
    public IList`1<int> AllRegisteredProcesses { get; }
    public virtual IList`1<int> get_AllRegisteredProcesses();
    public virtual void RegisterProcess(string name, int pid, bool isDotnetProcess, Lifetime lifetime);
    protected virtual void OnAdd(string userFriendlyName, int pid, bool isDotnetProcess);
    protected virtual void OnRemove(int pid);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.ProductComponentAttribute : ComponentAttribute {
    public ProductComponentAttribute(Instantiation instantiation);
}
public static class JetBrains.Application.ProductDialogHeaderImage : object {
    public static Image Placeholder;
    private static ProductDialogHeaderImage();
}
[ObsoleteAttribute("Has no meaning anymore.")]
public class JetBrains.Application.ProductEdition : object {
}
[ExtensionAttribute]
public static class JetBrains.Application.ProductInfoExtensions : object {
    [ExtensionAttribute]
public static MasterDetailInfo PresentableInfoForAboutBox(IProductInfo productInfo);
    [ExtensionAttribute]
public static MasterDetailInfo PresentableInfoForAboutBox(HostInfo hostinfo);
    [ExtensionAttribute]
public static ApplicationHostDetails GetPluginFolderDetails(HostInfo hostInfo);
    [ExtensionAttribute]
public static string PresentableName(IProductInfo productInfo, ProductNameFlags flags);
    private static string PresentProductName(IProductInfo productInfo, ProductNameFlags flags);
    public static JetSemanticVersion MakePackageVersionFromProduct(IProductInfo productInfo, JetSemanticVersion packageVersion, int fieldCount);
    public static JetSemanticVersion MakePackageVersionFromProduct(JetSemanticVersion productVersion, JetSemanticVersion packageVersion, int fieldCount);
}
public interface JetBrains.Application.Progress.ITaskExecutor {
    public abstract virtual bool ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
}
public interface JetBrains.Application.Progress.ITaskExecutorWithOptions {
    public abstract virtual bool ExecuteTask(string name, TaskExecutorOptions options, Action`1<IProgressIndicator> task);
}
public static class JetBrains.Application.Progress.ProgressIndicatorMarshalled : object {
    [NotNullAttribute]
public static IProgressIndicatorModel Create(Lifetime lifetime, IProgressIndicatorModel modelFree, IThreading threading);
    [NotNullAttribute]
public static IProgressIndicatorModel CreateWithoutSafeThreadCheck(Lifetime lifetime, IProgressIndicatorModel modelFree, IThreading invocator);
}
public class JetBrains.Application.Progress.RunningTaskExecutor : object {
    [NotNullAttribute]
public string ExecutionName;
    [NotNullAttribute]
public IProgressIndicatorModel Progress;
    public RunningTaskExecutor(string name, IProgressIndicatorModel progress);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Progress.SimpleTaskExecutor : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TaskExecutorNotification <notify>P;
    public static SimpleTaskExecutor Instance;
    [NullableContextAttribute("2")]
public SimpleTaskExecutor(TaskExecutorNotification notify);
    private static SimpleTaskExecutor();
    [MustDisposeResourceAttribute]
public static IDisposable PushProgressCanceledInterruptableCookie(IProgressIndicator pi);
    private sealed virtual override bool JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task);
    private static bool ExecuteTaskNotify(string name, TaskCancelable cancelable, Action`1<IProgressIndicator> task, TaskExecutorNotification notify);
    private static bool ExecuteTaskTrivial(Action`1<IProgressIndicator> task);
}
public enum JetBrains.Application.Progress.TaskCancelable : Enum {
    public int value__;
    public static TaskCancelable No;
    public static TaskCancelable Yes;
}
[ExtensionAttribute]
public static class JetBrains.Application.Progress.TaskExecutorExtensions : object {
    [ExtensionAttribute]
public static bool ExecuteTaskSafe(ITaskExecutor taskExecutor, string taskName, TaskExecutorOptions options, Action`1<IProgressIndicator> task);
}
public class JetBrains.Application.Progress.TaskExecutorNotification : MulticastDelegate {
    public TaskExecutorNotification(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Lifetime lifetime, TaskCancelable cancelable, RunningTaskExecutor session);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, TaskCancelable cancelable, RunningTaskExecutor session, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Progress.TaskExecutorOptions : ValueType {
    [CompilerGeneratedAttribute]
private TaskCancelable <Cancelable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndeterminate>k__BackingField;
    public TaskCancelable Cancelable { get; public set; }
    public bool IsIndeterminate { get; public set; }
    public TaskExecutorOptions(TaskCancelable Cancelable, bool IsIndeterminate);
    [CompilerGeneratedAttribute]
public TaskCancelable get_Cancelable();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Cancelable(TaskCancelable value);
    [CompilerGeneratedAttribute]
public bool get_IsIndeterminate();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsIndeterminate(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TaskExecutorOptions left, TaskExecutorOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TaskExecutorOptions left, TaskExecutorOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TaskExecutorOptions other);
    [CompilerGeneratedAttribute]
public void Deconstruct(TaskCancelable& Cancelable, Boolean& IsIndeterminate);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.Regions.CurrentRegion : object {
    [CompilerGeneratedAttribute]
private IProperty`1<Region> <Region>k__BackingField;
    [NotNullAttribute]
public IProperty`1<Region> Region { get; }
    public CurrentRegion(Lifetime lifetime, DataAccess dataAccess);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Region> get_Region();
    private static Region StringToRegion(string s);
    private static string RegionToString(Region r);
}
[OptionsPageAttribute("CurrentRegionOptionsPage", "CurrentRegionOptionsPage", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.Application.Regions.CurrentRegionOptionsPage : SimpleOptionsPage {
    public static string PID;
    [NotNullAttribute]
private CurrentRegionOptionsViewModel myModel;
    public CurrentRegionOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, ICurrentRegion currentRegion);
    public virtual bool OnOk();
}
public class JetBrains.Application.Regions.CurrentRegionOptionsViewModel : object {
    [NotNullAttribute]
private ICurrentRegion myCurrentRegion;
    [NotNullAttribute]
private IProperty`1<object> mySelectedRegion;
    [CompilerGeneratedAttribute]
private RadioOptionPoint[] <Options>k__BackingField;
    public RadioOptionPoint[] Options { get; }
    public IProperty`1<object> SelectedOption { get; }
    public CurrentRegionOptionsViewModel(ICurrentRegion currentRegion);
    [CompilerGeneratedAttribute]
public RadioOptionPoint[] get_Options();
    public IProperty`1<object> get_SelectedOption();
    public void OnOk();
    private IReadOnlyList`1<Region> GetAvailableRegionValues();
    private static string GetValuePresentation(Region region);
}
public interface JetBrains.Application.Regions.ICurrentRegion {
    public IProperty`1<Region> Region { get; }
    public abstract virtual IProperty`1<Region> get_Region();
}
public enum JetBrains.Application.Regions.Region : Enum {
    public int value__;
    [DisplayAttribute]
public static Region NOT_SET;
    [DisplayAttribute]
public static Region AFRICA;
    [DisplayAttribute]
public static Region AMERICAS;
    [DisplayAttribute]
public static Region ASIA;
    [DisplayAttribute]
public static Region CHINA;
    [DisplayAttribute]
public static Region EUROPE;
    [DisplayAttribute]
public static Region MIDDLE_EAST;
    [DisplayAttribute]
public static Region OCEANIA;
}
public class JetBrains.Application.Regions.RegionDefaultUrls : object {
    [CompilerGeneratedAttribute]
private Region <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JetBrainsComUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JetBrainsResourceMappingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JetBrainsAccountConfigUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JetBrainsAIPlatformUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotnetEaServiceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotmemoryJsonUrl>k__BackingField;
    public static RegionDefaultUrls Default;
    public Region Region { get; private set; }
    public string JetBrainsComUrl { get; private set; }
    public string JetBrainsResourceMappingUrl { get; private set; }
    public string JetBrainsAccountConfigUrl { get; private set; }
    public string JetBrainsAIPlatformUrl { get; private set; }
    public string DotnetEaServiceUrl { get; private set; }
    public string DotmemoryJsonUrl { get; private set; }
    private RegionDefaultUrls(Region region, string jetBrainsComUrl);
    private static RegionDefaultUrls();
    [CompilerGeneratedAttribute]
public Region get_Region();
    [CompilerGeneratedAttribute]
private void set_Region(Region value);
    [CompilerGeneratedAttribute]
public string get_JetBrainsComUrl();
    [CompilerGeneratedAttribute]
private void set_JetBrainsComUrl(string value);
    [CompilerGeneratedAttribute]
public string get_JetBrainsResourceMappingUrl();
    [CompilerGeneratedAttribute]
private void set_JetBrainsResourceMappingUrl(string value);
    [CompilerGeneratedAttribute]
public string get_JetBrainsAccountConfigUrl();
    [CompilerGeneratedAttribute]
private void set_JetBrainsAccountConfigUrl(string value);
    [CompilerGeneratedAttribute]
public string get_JetBrainsAIPlatformUrl();
    [CompilerGeneratedAttribute]
private void set_JetBrainsAIPlatformUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DotnetEaServiceUrl();
    [CompilerGeneratedAttribute]
private void set_DotnetEaServiceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_DotmemoryJsonUrl();
    [CompilerGeneratedAttribute]
private void set_DotmemoryJsonUrl(string value);
    public static RegionDefaultUrls Get(Region region);
}
[ExtensionAttribute]
public static class JetBrains.Application.Regions.RegionDefaultUrlsEx : object {
    [ExtensionAttribute]
public static RegionDefaultUrls GetDefaultUrls(Region region);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.Application.Res.StringTable : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionCantInsertAnchorNotInGroup { get; }
    internal static string ActionCantInsertCantLoad { get; }
    internal static string ActionCantInsertConflictingAnchor { get; }
    internal static string ActionCantInsertIntoNonexistentGroup { get; }
    internal static string ActionCantInsertIntoNonGroupAction { get; }
    internal static string ActionCantInsertInvalidAnchor { get; }
    internal static string ActionCantInsertInvalidRelativePosition { get; }
    internal static string ActionCantInsertMissingAnchor { get; }
    internal static string ActionCantLoad { get; }
    internal static string ActionUnnamedXmlElementName { get; }
    internal static string ExceptionBrowserForm_Close { get; }
    internal static string ExceptionBrowserForm_Copy_To_Clipboard { get; }
    internal static string ExceptionBrowserForm_Copy_URL { get; }
    internal static string ExceptionBrowserForm_Created_new_issue { get; }
    internal static string ExceptionBrowserForm_Do_Not_Show { get; }
    internal static string ExceptionBrowserForm_Double_Click { get; }
    internal static string ExceptionBrowserForm_Forget { get; }
    internal static string ExceptionBrowserForm_Message { get; }
    internal static string ExceptionBrowserForm_Mute_Selected { get; }
    internal static string ExceptionBrowserForm_Please_Describe { get; }
    internal static string ExceptionBrowserForm_Please_Note { get; }
    internal static string ExceptionBrowserForm_Remove_Selected { get; }
    internal static string ExceptionBrowserForm_Submit_Selected { get; }
    internal static string JetPopupMenuMainThread { get; }
    internal static string MenuAlreadyVisible { get; }
    internal static string MenuItemKeyMustBeNonNull { get; }
    internal static string NoItemsCaseShouldHaveBeenCutOffEarlier { get; }
    internal static string PendingView_Initialize_Error_Summary { get; }
    internal static string PendingView_Initialize_When_Happened { get; }
    internal static string SearchHelpOptionViewModel_Nothing_found { get; }
    internal static string SubmittedView_Initialize_Issue_Key { get; }
    internal static string SubmittedView_Initialize_Result { get; }
    internal static string SubmittedView_Initialize_Submitted { get; }
    internal static string UpdAllowDownloadCheckbox { get; }
    internal static string UpdAllowDownloadComment { get; }
    internal static string UpdAreNewPluginVersionsAvailable { get; }
    internal static string UpdAreNewProductVersionsAvailable { get; }
    internal static string UpdDownloadLink { get; }
    internal static string UpdEstimatedPrice { get; }
    internal static string UpdFree { get; }
    internal static string UpdIsNewPluginVersionAvailable { get; }
    internal static string UpdIsNewProductVersionAvailable { get; }
    internal static string UpdKindFeatures { get; }
    internal static string UpdKindGeneric { get; }
    internal static string UpdKindPreview { get; }
    internal static string UpdKindService { get; }
    internal static string UpdNoUpdatesAvailable { get; }
    internal static string UpdNoUpdatesAvailableForProduct { get; }
    internal static string UpdPluginUpdates { get; }
    internal static string UpdProductUpdates { get; }
    internal static string UpdReadMoreLink { get; }
    internal static string UpdThisUpdateInstallsInstalls { get; }
    internal static string UpdThisUpdateInstallsPre { get; }
    internal static string UpdUnidentifiedProduct { get; }
    internal static string UpdUnknownCompany { get; }
    internal static string UpdUntitledUpdate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionCantInsertAnchorNotInGroup();
    internal static string get_ActionCantInsertCantLoad();
    internal static string get_ActionCantInsertConflictingAnchor();
    internal static string get_ActionCantInsertIntoNonexistentGroup();
    internal static string get_ActionCantInsertIntoNonGroupAction();
    internal static string get_ActionCantInsertInvalidAnchor();
    internal static string get_ActionCantInsertInvalidRelativePosition();
    internal static string get_ActionCantInsertMissingAnchor();
    internal static string get_ActionCantLoad();
    internal static string get_ActionUnnamedXmlElementName();
    internal static string get_ExceptionBrowserForm_Close();
    internal static string get_ExceptionBrowserForm_Copy_To_Clipboard();
    internal static string get_ExceptionBrowserForm_Copy_URL();
    internal static string get_ExceptionBrowserForm_Created_new_issue();
    internal static string get_ExceptionBrowserForm_Do_Not_Show();
    internal static string get_ExceptionBrowserForm_Double_Click();
    internal static string get_ExceptionBrowserForm_Forget();
    internal static string get_ExceptionBrowserForm_Message();
    internal static string get_ExceptionBrowserForm_Mute_Selected();
    internal static string get_ExceptionBrowserForm_Please_Describe();
    internal static string get_ExceptionBrowserForm_Please_Note();
    internal static string get_ExceptionBrowserForm_Remove_Selected();
    internal static string get_ExceptionBrowserForm_Submit_Selected();
    internal static string get_JetPopupMenuMainThread();
    internal static string get_MenuAlreadyVisible();
    internal static string get_MenuItemKeyMustBeNonNull();
    internal static string get_NoItemsCaseShouldHaveBeenCutOffEarlier();
    internal static string get_PendingView_Initialize_Error_Summary();
    internal static string get_PendingView_Initialize_When_Happened();
    internal static string get_SearchHelpOptionViewModel_Nothing_found();
    internal static string get_SubmittedView_Initialize_Issue_Key();
    internal static string get_SubmittedView_Initialize_Result();
    internal static string get_SubmittedView_Initialize_Submitted();
    internal static string get_UpdAllowDownloadCheckbox();
    internal static string get_UpdAllowDownloadComment();
    internal static string get_UpdAreNewPluginVersionsAvailable();
    internal static string get_UpdAreNewProductVersionsAvailable();
    internal static string get_UpdDownloadLink();
    internal static string get_UpdEstimatedPrice();
    internal static string get_UpdFree();
    internal static string get_UpdIsNewPluginVersionAvailable();
    internal static string get_UpdIsNewProductVersionAvailable();
    internal static string get_UpdKindFeatures();
    internal static string get_UpdKindGeneric();
    internal static string get_UpdKindPreview();
    internal static string get_UpdKindService();
    internal static string get_UpdNoUpdatesAvailable();
    internal static string get_UpdNoUpdatesAvailableForProduct();
    internal static string get_UpdPluginUpdates();
    internal static string get_UpdProductUpdates();
    internal static string get_UpdReadMoreLink();
    internal static string get_UpdThisUpdateInstallsInstalls();
    internal static string get_UpdThisUpdateInstallsPre();
    internal static string get_UpdUnidentifiedProduct();
    internal static string get_UpdUnknownCompany();
    internal static string get_UpdUntitledUpdate();
}
public class JetBrains.Application.Resources.IdeThemedIcons : object {
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public static class JetBrains.Application.Resources.Strings : object {
    private static ILogger ourLog;
    private static Lazy`1<JetResourceManager> ourResourceManager;
    [EditorBrowsableAttribute("2")]
public static JetResourceManager ResourceManager { get; }
    public static string AboutActionText { get; }
    public static string AcceptedAgreementsSettingDescription { get; }
    public static string ActionsActionGroupText { get; }
    public static string AMinimalPeriodBetweenCallsToClrStack_Text { get; }
    public static string CommaSeparatedListOfGuardedActionNames_Text { get; }
    public static string EnterActionName_Text { get; }
    public static string IfGuardedActionExecutionTimeExceeds_Text { get; }
    public static string MiddleEast_Text { get; }
    public static string Oceania_Text { get; }
    public static string PreparingTheListOfItemsPleaseWait_Text { get; }
    public static string ACustomDisplayNameGivenToTheLayerByTheUserAnEmptyStringMeansItsNotDefinedAndWhateverDefaultIsOnTheMountingPointShouldBeUsedSettingDescription { get; }
    public static string AddLayerActionGroupText { get; }
    public static string Africa_Text { get; }
    public static string AIIsProvideByTheIDEServicesButForbidden_Text { get; }
    public static string AIIsProvidedByTheIDEServices_Text { get; }
    public static string Americas_Text { get; }
    public static string Asia_Text { get; }
    public static string AssignedTo__Text { get; }
    public static string AuthenticationRequired_Text { get; }
    public static string AuthenticationStarted_Text { get; }
    public static string AuthenticationSucceded_Text { get; }
    public static string AuthorizationFailed_ThisMightHappen_Text { get; }
    public static string AuthorizationRequired_Text { get; }
    public static string AuthorizeInWebBrowserIfItIsNotOpenAutomatically_Text { get; }
    public static string AuthorizeInWebBrowserIfTheBrowserIs_Text { get; }
    public static string AuthorizeInWebBrowser_Text { get; }
    public static string Canceled_Text { get; }
    public static string CannotConnectToJetBrainsLicenseServer_Text { get; }
    public static string China_Text { get; }
    public static string ClickAuthorizeButtonBelowAndAuthorize_Text { get; }
    public static string DidNotManageToCreateHTTPRequestHandler_Text { get; }
    public static string DoesNotRequireLicense_Text { get; }
    public static string Europe_Text { get; }
    public static string ExceptionOccurred__Text { get; }
    public static string ExpiredTo__Text { get; }
    public static string ExpiresOn__Text { get; }
    public static string FailedToConnectToJetBrainsAccountTo_Text { get; }
    public static string FetchingUserDetails_Text { get; }
    public static string FreeTrialPeriodIsRunning1DayLeft_Text { get; }
    public static string FreeTrialPeriodIsRunning_DaysLeft_Text { get; }
    public static string FreeTrialPeriodOf_IsOver_Text { get; }
    public static string FreeTrialPeriodWillExpireTomorrow_Text { get; }
    public static string IncorrectDataReceivedFromTheAuthorization_Text { get; }
    public static string InfiniteSubscription_Text { get; }
    public static string LicensedTo__Text { get; }
    public static string LicenseHasExpiredOn__Text { get; }
    public static string LicenseIsNotApplicableToThisProduct_Text { get; }
    public static string LicenseIsNotApplicableTo_Text { get; }
    public static string LicenseToReSharper_IsNotAcceptableTo_Text { get; }
    public static string LicenseToReSharper_IsNotAcceptable__Text { get; }
    public static string LicenseToVersion_IsNotAcceptable_Text { get; }
    public static string LoggedIn_Text { get; }
    public static string LoggingIn_Text { get; }
    public static string LoginFailedNoUserIdObtained_Text { get; }
    public static string MaintenanceSubscriptionUntil__Text { get; }
    public static string NoAccessTokenObtained_Text { get; }
    public static string NoAuthenticationRequired_Text { get; }
    public static string NoLicenseFoundFor__Text { get; }
    public static string NoLicenseServerDetected_Text { get; }
    public static string NoNewTokens_Text { get; }
    public static string NoProductFound_Text { get; }
    public static string NoProductInstalled_Text { get; }
    public static string NoRefreshTokenObtained_Text { get; }
    public static string NotLoggedIn_Text { get; }
    public static string NoTokensObtained_Text { get; }
    public static string NotSet_Text { get; }
    public static string NoValidLicenseFound_Text { get; }
    public static string NoValidTokensFound_Text { get; }
    public static string OpenBrowserAt__Text { get; }
    public static string Other_Text { get; }
    public static string PerpetualForBuildsReleasedBefore__Text { get; }
    public static string PerpetualForBuildsReleasedUpTo__Text { get; }
    public static string ProductRegionAndCultureSettings_Text { get; }
    public static string ProperlyLicensed_Text { get; }
    public static string Region_Text { get; }
    public static string ShortNameForThisComputerSettingsLayer { get; }
    public static string BuildArtifacts_Text { get; }
    public static string BuildDispatch_Text { get; }
    public static string BuildLog_Text { get; }
    public static string BuildSteps_Text { get; }
    public static string CheckedBuild_Text { get; }
    public static string IconViewerOpenIconsActionGroupText { get; }
    public static string ADisplayNameToTellThisPaneApartFromTheOthersWhenReferringFromOtherUINotAnIdentitySettingDescription { get; }
    public static string AnImportSourceForThisToolWindowPaneDependingOnTheKindOfThePaneUsuallyADiskDirectorySettingDescription { get; }
    public static string AnInjectedLayerCreatedOverAFilePathSettingDescription { get; }
    public static string ApplicationEnvironmentSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription { get; }
    public static string ApplicationHousekeepingSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription { get; }
    public static string AttachmentUploadMethodSettingDescription { get; }
    public static string AttachSensitiveDataSettingDescription { get; }
    public static string BottomActionText { get; }
    public static string BrowseAsIconPacksActionDescription { get; }
    public static string BrowseAsIconPacksActionText { get; }
    public static string BrowseAsListActionDescription { get; }
    public static string BrowseAsListActionText { get; }
    public static string BrowseAsTilesActionDescription { get; }
    public static string BrowseAsTilesActionText { get; }
    public static string BuildActionGroupText { get; }
    public static string BuildArtifactSettingDescription { get; }
    public static string CentrallyManagedCustomizationOfInjectedLayersOfThisHostingLayerLikeTheirOnOffStateAndOrderLayerKindSpecificCustomizationsAreStoredByInjectionHandlersUnderTheirOwnKeysSettingDescription { get; }
    public static string CloseActionText { get; }
    public static string CloseAllActionText { get; }
    public static string CloseAllButPinnedActionText { get; }
    public static string CloseAllButThisActionText { get; }
    public static string CollapseAllActionText { get; }
    public static string ContextHelpActionText { get; }
    public static string ContextMenuActionGroupText { get; }
    public static string ControlsThemeSelectionForThemedIconsSettingDescription { get; }
    public static string CopyActionText { get; }
    public static string CopyLayerToLayerActionText { get; }
    public static string CopySettingsFilePathActionText { get; }
    public static string CopySettingsToActionGroupText { get; }
    public static string CoverActionGroupText { get; }
    public static string CreateSettingsFileActionText { get; }
    public static string CultureSettingDescription { get; }
    public static string CurrentRuntimeIconsActionDescription { get; }
    public static string CurrentRuntimeIconsActionText { get; }
    public static string DefaultVisibilityModeOfInlayHintsSettingDescription { get; }
    public static string IconViewerOpenSyncPaneActionDescription { get; }
    public static string IconViewerOpenSyncPaneActionText { get; }
    public static string DirectoryWithIconFilesActionDescription { get; }
    public static string DirectoryWithIconFilesActionText { get; }
    public static string DiskCleanupSettingsSettingDescription { get; }
    public static string DockAsDocumentActionText { get; }
    public static string DumpActionGroupText { get; }
    public static string DumpComponentContainersStatisticsActionText { get; }
    public static string DumpDataAccessActionText { get; }
    public static string DumpUnwantedComponentContainersDependenciesActionText { get; }
    public static string EditLayerActionText { get; }
    public static string EditorOptionPageTitle { get; }
    public static string EnabledCustomNamespacesFromLogTraceScenariosMapDelimitedByCommaSettingDescription { get; }
    public static string EnabledScenariosFromLogTraceScenariosMapDelimitedByCommaSettingDescription { get; }
    public static string EnableOrDisableAllSuggestionsSettingDescription { get; }
    public static string EnablePerformanceAssertionsOnReentrancyGuardActionExecutionSettingDescription { get; }
    public static string EnvironmentOptionPageTitle { get; }
    public static string ExceptionSubmitterSettingsSettingDescription { get; }
    public static string ExpandAllActionText { get; }
    public static string ExportActionGroupText { get; }
    public static string ExportCCodeSExpressionBodyCreateNewIconPackFileActionDescription { get; }
    public static string ExportPNGActionText { get; }
    public static string ExportsThemedIconThisIncludesBothImagesOnDiscOrSourceFilesForAddingIconsToTheSolutionActionGroupDescription { get; }
    public static string ExportSVGActionText { get; }
    public static string ExportToFileActionText { get; }
    public static string ExportToHTMLActionText { get; }
    public static string ExportToTextActionText { get; }
    public static string ExportToXMLActionText { get; }
    public static string ExtensionManagerIncludePrereleasePackagesSettingDescription { get; }
    public static string ExtensionManagerOptionsSettingDescription { get; }
    public static string ExtensionManagerProviderOptionsSettingDescription { get; }
    public static string ExtraArtifactsForBuildSettingDescription { get; }
    public static string FeedbackSubmitterSettingsSettingDescription { get; }
    public static string FileUploadBufferSizeSettingDescription { get; }
    public static string FloatActionText { get; }
    public static string FocusMonitorActionText { get; }
    public static string GeneralOptionPageTitle { get; }
    public static string GeneralSettingsOfTheApplicationUserInterfaceSettingDescription { get; }
    public static string GlobalSettingsUpgradedSettingDescription { get; }
    public static string GoToNextItemActionText { get; }
    public static string GoToPreviousItemActionText { get; }
    public static string GotoProductTwitterActionText { get; }
    public static string GotoProductWebPageActionText { get; }
    public static string GovernsTheUseOfAProxyServerWhenDownloadingFromInternetSettingDescription { get; }
    public static string HelpActionGroupText { get; }
    public static string HowFrequentlyMemoryStateIsUpdatedSettingDescription { get; }
    public static string HowFrequentlyUIResponsivenessIsCheckedSettingDescription { get; }
    public static string HowLiveTheSwitchIsSettingDescription { get; }
    public static string HowSwitchBehavesWhenConflictFoundSettingDescription { get; }
    public static string HTMLActionText { get; }
    public static string IfIsCustomProxyAndCreatingCustomProxyFromTheProvidedSettingsFailedReportsTheErrorAnEmptyStringIfLastProxyUseWasSuccessfulThisErrorWontBeExposedAsADownloadExceptionBecauseOnThisErrorProxySettingsSilentlyFallBackToDefaultAlwaysSetOnTheGlobalContextSettingDescription { get; }
    public static string IfIsCustomProxyUseThisProxyHostnameSettingDescription { get; }
    public static string IfIsCustomProxyUseThisProxyPasswordForPasswordProtectedProxiesOnlyIgnoredIfUsernameIsEmptySettingDescription { get; }
    public static string IfIsCustomProxyUseThisProxyPortSettingDescription { get; }
    public static string IfIsCustomProxyUseThisProxyUsernameForPasswordProtectedProxiesOnlySettingDescription { get; }
    public static string IfTheSpecifiedMigratorObjectIdentifiedByTheFullClassNameWithoutAssemblyNameHasAlreadyBeenRunForTheMountPointInWhichThisInformationIsWrittenSettingDescription { get; }
    public static string ImportAndExportActionGroupText { get; }
    public static string ImportFromActionGroupText { get; }
    public static string ImportFromFileActionText { get; }
    public static string ImportFromURLActionText { get; }
    public static string InlayHintSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription { get; }
    public static string InternaLActionGroupText { get; }
    public static string InternalMode_Text { get; }
    public static string IntervalOfTimeForWhichTheTextInputChangesAreDeferredBeforeTheyAreCommittedHelpsToProcessConsiderableAmountsOfUserInputRatherThanReactToEachKeystrokeSettingDescription { get; }
    public static string IsEnabledSettingDescription { get; }
    public static string KeepAttachmentsSettingDescription { get; }
    public static string LastStartTimeSettingDescription { get; }
    public static string LayoutOfTheCustomizedUserInterfaceSettingDescription { get; }
    public static string LoggerActionGroupText { get; }
    public static string LogTraceScenariosEnabledInInternalModeSettingDescription { get; }
    public static string ManageOptionsActionText { get; }
    public static string MemoryUsageIndicatorInTheStatusBarSettingDescription { get; }
    public static string MemoryUsageOptionPageTitle { get; }
    public static string MoveDownActionText { get; }
    public static string MoveUpActionText { get; }
    public static string MRUPositionsAndSizesOfApplicationWindowsSettingDescription { get; }
    public static string MRUSelectedPageSettingDescription { get; }
    public static string MRUViewModeSettingDescription { get; }
    public static string NameSettingDescription { get; }
    public static string NoOutputsYet_Text { get; }
    public static string NotificationSettingsSettingDescription { get; }
    public static string ReentrancyGuardFreezeMonitorSettingsDescription { get; }
    public static string OnlineHelpActionText { get; }
    public static string OOPActionGroupText { get; }
    public static string OpenContainingFolderActionText { get; }
    public static string OpenDefaultSetOfPanesActionDescription { get; }
    public static string OpenDefaultSetOfPanesActionText { get; }
    public static string OpenEventLogFolderActionText { get; }
    public static string DumpStatisticsGroupsActionText { get; }
    public static string DumpStatisticsSchemaActionText { get; }
    public static string FUSActionGroupText { get; }
    public static string AddGroupToEventsTestSchemeActionText { get; }
    public static string AddTestGroup_Text { get; }
    public static string GroupID_Text { get; }
    public static string OpensANewPaneInTheThemedIconsViewerToolWindowActionGroupDescription { get; }
    public static string OpenSettingsFileActionText { get; }
    public static string OptionsActionText { get; }
    public static string OptionsDialogLogicalSettingsSettingDescription { get; }
    public static string OptionsOptionPageTitle { get; }
    public static string OrderSettingDescription { get; }
    public static string PackageSourcesSettingDescription { get; }
    public static string PathPatternsToCleanSettingDescription { get; }
    public static string PathToFileWithStoredStateSettingDescription { get; }
    public static string PByPublicKeySettingDescription { get; }
    public static string PerformanceGuideSettingDescription { get; }
    public static string PerformanceMonitoringOptionPageTitle { get; }
    public static string PerformanceMonitoringSettingsSettingDescription { get; }
    public static string PersistExceptionsSettingDescription { get; }
    public static string PlatformGeneralCheckboxesOptionPageTitle { get; }
    public static string PlatformGeneralIconsOptionPageTitle { get; }
    public static string PlatformGeneralUserInterfaceOptionPageTitle { get; }
    public static string ProductHomeDirActionDescription { get; }
    public static string ProductHomeDirActionText { get; }
    public static string ProductTwitterActionGroupText { get; }
    public static string ProductWebPageActionGroupText { get; }
    public static string ProfileActionGroupText { get; }
    public static string ProfileExplorer_Text { get; }
    public static string ProjectModelActionGroupText { get; }
    public static string PropertiesActionText { get; }
    public static string QByPublicKeySettingDescription { get; }
    public static string ReindentActionText { get; }
    public static string RelativePriorityLevelOfThisInjectedLayerAgainstItsHostingLayerSettingDescription { get; }
    public static string RemoveActionText { get; }
    public static string RenameActionText { get; }
    public static string ReportNonProductExceptionsSettingDescription { get; }
    public static string ResetActionText { get; }
    public static string ResetAllSettingsActionText { get; }
    public static string ReSharperActionGroupText { get; }
    public static string ReSharperCultureSettingsSettingDescription { get; }
    public static string ReSharperGeneralInlayHintsSettingsSettingDescription { get; }
    public static string RightActionText { get; }
    public static string SelectedUserIdentificatorSettingDescription { get; }
    public static string StartNewLine_Text { get; }
    public static string SubscriptionBefore___Text { get; }
    public static string SubscriptionCoversOnlyBuildsIssuedPrior_Text { get; }
    public static string SubscriptionExpiredOn__Text { get; }
    public static string SubscriptionIsValidThrough__Text { get; }
    public static string ThankYouForInstalling__Text { get; }
    public static string ThisPreReleaseVersionWillExpireIn_Days_Text { get; }
    public static string TODO_Text { get; }
    public static string TokenRefreshFailed_Text { get; }
    public static string TokensRefreshed_Text { get; }
    public static string ToReSharper_Text { get; }
    public static string UserInterfaceSettings_IconThemeSelection { get; }
    public static string UserInterfaceSettings_IconThemeSelectionExtensionForFluentDesign { get; }
    public static string SelfProfilingToolLocationSettingDescription { get; }
    public static string SelfProfilingToolVersionSettingDescription { get; }
    public static string SentAcceptedAgreementsPerDocumentSettingDescription { get; }
    public static string SetsUpApplicationsAccessToTheWorldWideWebSettingDescription { get; }
    public static string SettingsForInternalActionToCreateZoneLicensCheckersSettingDescription { get; }
    public static string SettingsForTheThemedIconsViewerVSettingDescription { get; }
    public static string SettingsLayersActionGroupText { get; }
    public static string SettingsLayersRightHandActionGroupText { get; }
    public static string ShortcutsSchemeSettingDescription { get; }
    public static string ShowFormAfterSubmissionSettingDescription { get; }
    public static string ShowLogActionText { get; }
    public static string OpenLogActionText { get; }
    public static string ShowNotificationsActionText { get; }
    public static string ShowPreviewActionGroupText { get; }
    public static string ShowWarningNotificationsForPerformanceIssuesSettingDescription { get; }
    public static string SingleGotoTwitterActionText { get; }
    public static string SingleGotoWebActionText { get; }
    public static string SomeBoolOptionForBindSettingDescription { get; }
    public static string SomeBoolOptionForBindSSettingDescription { get; }
    public static string SomeBoolOptionForEnabledSettingDescription { get; }
    public static string SomeBoolOptionForShowingVisibilitySettingDescription { get; }
    public static string SomeBoolOptionForVisibleSettingDescription { get; }
    public static string SomeBoolOptionSettingDescription { get; }
    public static string SomeEnumOptionSettingDescription { get; }
    public static string SomeStringOptionSettingDescription { get; }
    public static string SourceSettingDescription { get; }
    public static string SpecifiesTheAbsolutePathToTheFileBasedUserInjectedLayerDiskFileOptionalTheRelativePathIfApplicableHasPriorityOverThisValueSettingDescription { get; }
    public static string SpecifiesTheRelativePathToTheFileBasedUserInjectedLayerDiskFileRelativelyToItsHostingLayerNOTETheFileItselfNotTheDirectoryOptionalThisIsOnlyAvailableWhenTheHostingLayerIsAlsoFileBasedAndHasItsPathAvailableAndThesePathsAreOffTheSameRootWhenDefinedThisPathShouldBePreferredForRestoringTheMountedLayerInTheNewSessionSettingDescription { get; }
    public static string StandardBrowserActionsActionGroupText { get; }
    public static string StartNewLineBeforeActionText { get; }
    public static string StoresTheSettingsMigrationStatusForEachOfTheSettingsLayersShouldOnlyBePresentIfASettingsMigrationCaseWasDetectedAndTheMigrationProcedureHasRunSettingDescription { get; }
    public static string SubmitAllExceptionsAutomaticallySettingDescription { get; }
    public static string SubmitPrivatelySettingDescription { get; }
    public static string TabsSortingOrderSettingDescription { get; }
    public static string TextActionText { get; }
    public static string ThemedIconViewerActionText { get; }
    public static string ThisDirectoryIsWatchedForImportableIconFilesTheCollectedFilesAreListedInTheThemedIconsViewerImportWindowSettingDescription { get; }
    public static string TimeoutBetweenCleanupRunsSettingDescription { get; }
    public static string ToggleAutoHideActionText { get; }
    public static string ToolsActionGroupText { get; }
    public static string ToolsOptionPageTitle { get; }
    public static string TrackerUsernameSettingDescription { get; }
    public static string TrueAlwaysShowModalDialogWhenExceptionOccursFalseExceptionNotificationInStatusBarCollectingExceptionsInBackgroundIfPossibleSettingDescription { get; }
    public static string TrueMouseWheelMessagesAreForcedToBeProcessedByTheControlUnderCursorFalseNoBehaviorEnforcedUsuallyThisMeansTheFocusedControlIsScrolledInsteadOfTheHoveredOneSettingDescription { get; }
    public static string TutorialSettingsSettingDescription { get; }
    public static string UIResponsivenessOptionPageTitle { get; }
    public static string UseAltRToOpenReSharperMainMenuSettingDescription { get; }
    public static string UserCommentSettingDescription { get; }
    public static string UserIdentificatorStringSettingDescription { get; }
    public static string UserInjectedLayersListStoredInTheInjectionsHostLayerSettingDescription { get; }
    public static string UserIsInformedAboutAnonymousSubmissionSettingDescription { get; }
    public static string UserIsInformedAboutSendingCodeToJetBrainsSettingDescription { get; }
    public static string ViewModeAndImportSettingsForEachOfTheToolWindowPanesSettingDescription { get; }
    public static string VisualStudioActionGroupText { get; }
    public static string VisualStudioVersionForLocalInstallSettingDescription { get; }
    public static string VisualStudioVersionForOpenInVsSettingDescription { get; }
    public static string VSVersionRootSuffixDoNotCompileFlagAndOtherUserBuildPreferencesSettingDescription { get; }
    public static string WatchExceptionStorageSettingDescription { get; }
    public static string WebProxySettingsOptionPageTitle { get; }
    public static string WhenCleanupTaskIsQueuedOfApplicationStartSettingDescription { get; }
    public static string WhetherAutomaticCleanupAllowedSettingDescription { get; }
    public static string WhetherKeyboardSelectionInListsShouldWrapAroundEndsPressingUpArrowOnTheFirstItemSelectsTheLastOneAndViceVersaSettingDescription { get; }
    public static string WhetherThisInjectedLayerIsOnOrOffSettingDescription { get; }
    public static string WhetherThisPaneIsShowingCompiledIconsSourcesScatteredFilesEtcSettingDescription { get; }
    public static string WhetherToBindThePressAndHoldOfTheCtrlKeyToPushToHintSettingDescription { get; }
    public static string WhetherToEnableTheEntireInfrastructureOfInlayHintsSettingDescription { get; }
    public static string WhetherToHideVSMenusTrueHideSettingDescription { get; }
    public static string WhetherToOverrideVSRefactoringsTrueOverrideSettingDescription { get; }
    public static string WhetherToShowTheMemoryUsageIndicatorInTheStatusBarOfTheApplicationMainWindowSettingDescription { get; }
    public static string WhetherToSubmitAnonymouslySettingDescription { get; }
    public static string WhetherToUseUserDefinedProxySettingsInsteadOfTheSystemWideProxySettingsSettingDescription { get; }
    public static string WhetherToUseVSIconsInsteadOfRTrueUseVSIconsFalseUseRIconsSettingDescription { get; }
    public static string WhyReSharperIsDisabledActionText { get; }
    public static string WillBeDisabledBy0F_Text { get; }
    public static string WindowBoundsSettingDescription { get; }
    public static string WindowPersistenceDataSettingDescription { get; }
    public static string WindowsActionGroupText { get; }
    public static string WithAutoRenewal_Text { get; }
    public static string XMLActionText { get; }
    public static string PrimaryScreenScreenshotAttachmentAction_Text { get; }
    public static string SamplingPerformanceSnapshotAttachmentProvider_ProviderName { get; }
    public static string TimelinePerformanceSnapshotAttachmentProvider_ProviderName { get; }
    public static string MemorySnapshotAttachmentProvider_ProviderName { get; }
    public static string ShowEnterLicenseAction_Text { get; }
    public static string ShowDataSharingOptionsAction_Text { get; }
    public static string ExtensionManagerEnablePluginVerifierSettingDescription { get; }
    public static string PerformanceMonitoringSettingsHeaded_Text { get; }
    public static string CheckMemoryInterval0MeansDisabled_IntOption_Text { get; }
    public static string RecentMemoryUsageInfo_Header_Text { get; }
    public static string TotalPhysical__RichText_Text { get; }
    public static string AvailablePhysical__RichText_Text { get; }
    public static string TotalVirtual__RichText_Text { get; }
    public static string AvailableVirtual__RichText_Text { get; }
    public static string MemoryLoad__RichText_Text { get; }
    public static string Ms_IntOption_TextSuffix { get; }
    public static string _DatabaseSize_MaxSize__RichText_Text { get; }
    public static string ExportToCsv_Button_Text { get; }
    public static string TODOAddDescription_Text { get; }
    public static string CheckMemoryInterval0MeansDisabled_IntOption_Text2 { get; }
    public static string Ms_IntOption_TextSuffix2 { get; }
    public static string UIResposivenessInfo_Header_Text { get; }
    public static string AverageDelay__RichText_Text { get; }
    public static string MaximumDelay__RichText_Text { get; }
    public static string NumberOfSamplesLongerThan50ms__RichText_Text { get; }
    public static string ExportToCsv_Button_Text2 { get; }
    public static string AutomaticSelection_Text { get; }
    public static string Color_Text { get; }
    public static string Gray_Text { get; }
    public static string DarkGray_Text { get; }
    public static string FluentLight_Text { get; }
    public static string FluentDark_Text { get; }
    public static string ApplicationIconsTheme_Text { get; }
    public static string ShowManaged_memoryUsageInStatusBar_BoolOption_Text { get; }
    public static string ShowReport_ErrorDialogEachTime_Encounters_BoolOption_Text { get; }
    public static string _Edit_Button_Text { get; }
    public static string FailedToProcessSettings_Caption { get; }
    public static string FailedToWriteToTheOutputLayer_Caption { get; }
    public static string FailedToWriteToTheOutputFile_Caption { get; }
    public static string FileDoesnTExist__Text { get; }
    public static string DirectoryDoesnTExist__Text { get; }
    public static string NoWritePermissionForFolder__Text { get; }
    public static string FolderDoesnTExist__Text { get; }
    public static string Browse_Button_Text { get; }
    public static string Reset_Button_Text { get; }
    public static string InvalidPath__Text { get; }
    public static string PathMustBeAbsolute__Text { get; }
    public static string Browse_Button_Text2 { get; }
    public static string UserInterface_Header_Text { get; }
    public static string _UseSystemProxyServerSettingsWhenDownloading_Text { get; }
    public static string Options_Dialog_Title_Text { get; }
    public static string NoPendingChanges_Text { get; }
    public static string ModifiedSettingWillBeSaved_Text { get; }
    public static string N_ModifiedSettingsWillBeSaved_Text { get; }
    public static string Save_Options_Dialog_Button_Text { get; }
    public static string OK_Options_Dialog_Button_Text { get; }
    public static string Manage_Options_Dialog_Button_Text { get; }
    public static string DoYouWantToSaveChanges_Text { get; }
    public static string ThisWillCloseTheOptionsDialogAndOpen_Caption { get; }
    public static string TheSettingsCouldNotBeAppliedReturning_Text { get; }
    public static string SaveTo_Options_Dialog_Button_Text { get; }
    public static string Cancel_Options_Dialog_Button_Text { get; }
    public static string AllFiles_Text { get; }
    public static string Settings_Text { get; }
    public static string Submitting_Text { get; }
    public static string SendingReport_Text { get; }
    public static string SubmittingExceptions_Text { get; }
    public static string GatheringResults_Text { get; }
    public static string LoadingProductContentPack_Text { get; }
    public static string ReadingPackagesFromProductContentPack_Text { get; }
    public static string UploadingFile__Text { get; }
    public static string UploadingFile__KbytesS_Text { get; }
    public static string DownloadingDotMemoryConsoleProfiler_Text { get; }
    public static string GettingMemorySnapshot_Text { get; }
    public static string AttachingPerformanceProfiler_Text { get; }
    public static string ProfilingReproduceProblemAndStopItManually_Text { get; }
    public static string SavingProfilingSnapshot_Text { get; }
    public static string _Of___Text { get; }
    public static string WritingPortableNetworkGraphicsFiles_Text { get; }
    public static string WritingThemedIconsPackInCFormat_Text { get; }
    public static string EmittingCodeForIcons_Text { get; }
    public static string RenderingCodeToText_Text { get; }
    public static string WritingScalableVectorGraphicsFiles_Text { get; }
    public static string WritingThemedIconsInCFormat_Text { get; }
    public static string CheckingForChanges_Text { get; }
    public static string ExportIcons_Text { get; }
    public static string Restart_Caption { get; }
    public static string DoYouReallyWantToRestart__Text { get; }
    public static string SettingsLayers_Caption { get; }
    public static string Initializing_Text { get; }
    public static string TheToolWindowHasNotBeenLoadedYet_Text { get; }
    public static string TheToolWindowHasBeenLoadedRendering_Text { get; }
    public static string TheToolWindowHasBeenUnloaded_Text { get; }
    public static string TheToolWindowHasBeenRestored_Text { get; }
    public static string ThereIsNoToolWindowToShowInThisView_Text { get; }
    public static string TheToolWindowHasBeenPutInAnUnexpected_Text { get; }
    public static string PublishedByExtension__Text { get; }
    public static string SettingsPublishedByExtensions_Text { get; }
    public static string Extensions_Text { get; }
    public static string _In__Text { get; }
    public static string BuildSettings_Text { get; }
    public static string ThisComputer_Text { get; }
    public static string DefaultSettingsCompositeStorage_Text { get; }
    public static string ShortNameForDefaultSettingsLayer { get; }
    public static string DefaultSettingsCompositeStorageBacking_Text { get; }
    public static string DefaultSettingsFrom__Text { get; }
    public static string Smart_Text { get; }
    public static string SyntheticLayerWhichAutomaticallyDecides_Text { get; }
    public static string RenameSettingsLayer_Caption { get; }
    public static string LayerName_Text { get; }
    public static string LayerNameMustNotBeEmpty_Text { get; }
    public static string ImportSettingsFromURI_Caption { get; }
    public static string URI_Text { get; }
    public static string URICannotBeEmpty_Text { get; }
    public static string ThisTextCouldNotBeParsedAsAValidURI_Text { get; }
    public static string TemporaryStorageForLoadingFromAnURI_Text { get; }
    public static string TemporaryStorageForSavingToAPath_Text { get; }
    public static string DefaultExtensionManagerSettings_Text { get; }
    public static string About_Text { get; }
    public static string CouldNotOpenAnInternetURIInYourDefault_Text { get; }
    public static string OpenInternetURI_Caption { get; }
    public static string CouldNotOpenAnInternetURIWithPlatform_Text { get; }
    public static string CouldNotOpenAnInternetURIOnBehalfOf_Text { get; }
    public static string TheLastBuildGaveNoFilesForOutput_Text { get; }
    public static string SaveBuildOutputsToFolder_Caption { get; }
    public static string TheWorkspaceSettingsFileCouldNotBeLoaded_Text { get; }
    public static string TheUserSettingsFileCouldNotBeLoaded_Text { get; }
    public static string TheUserSettingsFileFromAPreviousVersion_Text { get; }
    public static string _UnknownLoggingLevel__Text { get; }
    public static string LoggingIsNotEnabled_Text { get; }
    public static string StopTask__Text { get; }
    public static string SelectAnItemToEdit_Text { get; }
    public static string EditItem_Text { get; }
    public static string ItemText_Text { get; }
    public static string TheStringMustNotBeEmpty_Text { get; }
    public static string AddNewItem_Text { get; }
    public static string NewItem_Text { get; }
    public static string DumpToFile_Caption { get; }
    public static string SelectAnItemToRemove_Text { get; }
    public static string AttachFile_Caption { get; }
    public static string AttachMemorySnapshot_Caption { get; }
    public static string ThereIsNoHelpAvailableFor__Text { get; }
    public static string Help_Caption { get; }
    public static string ThereAreNoIconsSelected_Text { get; }
    public static string FolderForPortableNetworkGraphicsFiles_Caption { get; }
    public static string FolderForScalableVectorGraphicsFiles_Caption { get; }
    public static string ThereWereErrorsExportingIcons____Text { get; }
    public static string SystemWebProxySettingsCouldNotBeOpened_Text { get; }
    public static string CannotCopyLayerSettingsHere_Text { get; }
    public static string CannotCopyLayerSettingsIntoTheSameLayer_Text { get; }
    public static string AreYouSureToRemove_Layer_FromLayers_Text { get; }
    public static string ExportLayer_Caption { get; }
    public static string SelectFile_Caption { get; }
    public static string OpenSettings_Caption { get; }
    public static string ThereIsNoGroupSelectedToAddTheNewFile_Text { get; }
    public static string ThisFileIsAlreadyAddedAsASettingsLayer_Text { get; }
    public static string SaveSettings_Caption { get; }
    public static string ThisWillResetAllOfThe_SettingsNYouWon_Text { get; }
    public static string TheSettingsHaveBeenResetToTheirFactory_Text { get; }
    public static string ThereWereNoExceptionsRecordedWithSettings_Text { get; }
    public static string DataValidation_Text { get; }
    public static string WouldYouLikeToContinueAnyway_Text { get; }
    public static string Tab_Text { get; }
    public static string ThereAreNoRecentBuildsToShowInThisView_Text { get; }
    public static string About___Text { get; }
    public static string _WebPage_Text { get; }
    public static string Twitter_Text { get; }
    public static string Why_IsDisabled_Text { get; }
    public static string ShowMoreItems_Text { get; }
    public static string TooManyItemsListTruncated_Text { get; }
    public static string _Logs_Text { get; }
    public static string ApplicationLogs_Text { get; }
    public static string Unavailable_Text { get; }
    public static string ShowAllLayers_Text { get; }
    public static string _CtrlP_Text { get; }
    public static string SubmitPending_Text { get; }
    public static string DeletePending_Text { get; }
    public static string DeleteAll_Text { get; }
    public static string MuteAll_Text { get; }
    public static string DisableTraceScenario_Text { get; }
    public static string OpenLogFile_Text { get; }
    public static string ExceptionSubmitter_Text { get; }
    public static string Submitting_Exceptions_ToolTip { get; }
    public static string _PendingExceptionClickHereToSubmit_Text { get; }
    public static string _PendingExceptionsClickHereToSubmit_Text { get; }
    public static string ShowHelp_Caption { get; }
    public static string OutdatedLicenseServerDetected_Text { get; }
    public static string YourLicenseTicketHasBeenObtainedFrom_Text { get; }
    public static string EditLicense_Caption { get; }
    public static string LogScenarioEnabledItAffectsPerformance_ToolTip { get; }
    public static string Restart__Text { get; }
    public static string Configure_Caption { get; }
    public static string ClearNotifications_Caption { get; }
    public static string PerformanceTip__Text { get; }
    public static string ConfigureSettingsToImprovePerformance_Text { get; }
    public static string APerformanceRelatedOptionWasUpdated_Text { get; }
    public static string VisualStudioPerformanceWillImproveIf_Text { get; }
    public static string Submitted_Exceptions_ToolTip { get; }
    public static string JetBrainsAccountMustBeConnectedUntil_Text { get; }
    public static string JetBrainsAccountInaccessible_Text { get; }
    public static string ShowLicenseDialog_Caption { get; }
    public static string JetBrainsLicenseRequiresYourAttention_Text { get; }
    public static string LicenseServerInaccessible_Text { get; }
    public static string IfConnectionTo_IsNotRestoredUntil___Text { get; }
    public static string SubscriptionToLicense_IsAboutToExpire_Text { get; }
    public static string SubscriptionWillExpireOn__WillNoLonger_Text { get; }
    public static string SubscriptionToLicense_HasExpired_Text { get; }
    public static string SubscriptionHasExpiredOn_PleaseRenew_Text { get; }
    public static string License_HasNotBeenAutoRenewed_Text { get; }
    public static string ThereWasAProblemRenewingYourLicense_Text { get; }
    public static string License_HasExpired_Text { get; }
    public static string SubscriptionHasExpiredOn__WillBeDisabled_Text { get; }
    public static string CheckLicenseKey_Text { get; }
    public static string License_HasBeenAssignedTo_PleaseEnter_Text { get; }
    public static string License_HasBeenAssignedTo__Text { get; }
    public static string _Took_ms_Text { get; }
    public static string LicenseChanged_Text { get; }
    public static string FromPopup_Text { get; }
    public static string ThereReDocumentsThatRequireUserConsent_Text { get; }
    public static string ThereReOptionsThatRequireUserConsent_Text { get; }
    public static string WasRequestedByAPI_Text { get; }
    public static string ForceShowDialog_Text { get; }
    public static string ShowInFindResults_Text { get; }
    public static string ShowAllReSharperActions_ToolTip { get; }
    public static string ShowLicenseRequestedByUser_Text { get; }
    public static string ShowDataSharingOptionsRequestedByUser_Text { get; }
    public static string NETCLIInstallationFolderNotFound_Text { get; }
    public static string NETCLIExecutableNotFound_Text { get; }
    public static string NETCLIInvalidDotNetRoot_Text { get; }
    public static string _LIVE_Text { get; }
    public static string IconsIn___Text { get; }
    public static string Add_Button_Text { get; }
    public static string Edit_Button_Text { get; }
    public static string Remove_Button_Text { get; }
    public static string AggressiveFiberUsageNumberOdFibersIsTwiceProcessorCount_Description_Text { get; }
    public static string Always_Description_Text { get; }
    public static string LowUtilization_Description_Text { get; }
    public static string ModerateUtilization_Description_Text { get; }
    public static string HighUtilization_Description_Text { get; }
    public static string DoNotUseMultiCoreFibers_Description_Text { get; }
    public static string Never_Description_Text { get; }
    public static string RegularFiberUsageNumberOfFibersEqualsProcessorNumber_Description_Text { get; }
    public static string WhenTheCaretIsNear_Description_Text { get; }
    public static string CopyTo_Text { get; }
    public static string ImportFromFile_Text { get; }
    public static string ResetLayer_Text { get; }
    public static string RunBuildWaitingForEntryPoints_Text { get; }
    public static string RunBuildNowBuildingFor__Text { get; }
    public static string RunBuildAutomaticallyShuttingDownSoon_Text { get; }
    public static string RunBuildAutomaticallyShuttingDownNow_Text { get; }
    public static string RunBuildAutomaticallyShuttingDownIn_Text { get; }
    public static string RunBuildDone_Text { get; }
    public static string RunBuildFAILED_Text { get; }
    public static string PleaseWait_Text { get; }
    public static string ExportSettingsToFile_Text { get; }
    public static string ExceptionReporterAuthorization_Header { get; }
    public static string ExceptionReporterAuthorization_Message { get; }
    public static string ExceptionReporterAuthorization_Body { get; }
    public static string RestoreActionText { get; }
    public static string MaximizeToolWindowActionActionText { get; }
    public static string DockOptionsActionText { get; }
    public static string OptionsRelatedToVariousHacksSettingDescription { get; }
    public static string And_Separator_Text { get; }
    public static string ErrorWhenExportingSettings__Text { get; }
    public static string AiAssistantWithAccelerator { get; }
    public static string BuildSettingsPerHomeDirStorageOrigin_Text { get; }
    public static string GlobalPerProductStorageOrigin_Text { get; }
    public static string __BuiltOn__Text { get; }
    public static string LastBuildOutputsSummary_Text { get; }
    public static string JetPopupMenuNoItemsBanner { get; }
    public static string Localization_Header_Text { get; }
    public static string English_Text { get; }
    public static string InterfaceLanguage_Text { get; }
    public static string VisualStudioRestartMayBeRequired_Text { get; }
    public static string YouAreGoingToRemoveThePluginThatIsCurrently_Text { get; }
    public static string Report_Consent_Review1 { get; }
    public static string Report_Consent_Review2 { get; }
    public static string Report_Consent_Review3 { get; }
    public static string Report_Consent_AggreeYoutrack { get; }
    public static string Report_Consent_AggreeZendesk { get; }
    public static string Report_Consent_AggreeHeader { get; }
    public static string Report_Consent_Aggree2Header { get; }
    public static string Report_Consent_Aggree3Header { get; }
    public static string Report_Consent_Aggree2 { get; }
    public static string Report_Consent_Aggree3 { get; }
    private static Strings();
    public static JetResourceManager get_ResourceManager();
    public static string Choice(string format, Object[] args);
    public static string get_AboutActionText();
    public static string get_AcceptedAgreementsSettingDescription();
    public static string get_ActionsActionGroupText();
    public static string get_AMinimalPeriodBetweenCallsToClrStack_Text();
    public static string get_CommaSeparatedListOfGuardedActionNames_Text();
    public static string get_EnterActionName_Text();
    public static string get_IfGuardedActionExecutionTimeExceeds_Text();
    public static string get_MiddleEast_Text();
    public static string get_Oceania_Text();
    public static string get_PreparingTheListOfItemsPleaseWait_Text();
    public static string get_ACustomDisplayNameGivenToTheLayerByTheUserAnEmptyStringMeansItsNotDefinedAndWhateverDefaultIsOnTheMountingPointShouldBeUsedSettingDescription();
    public static string get_AddLayerActionGroupText();
    public static string get_Africa_Text();
    public static string get_AIIsProvideByTheIDEServicesButForbidden_Text();
    public static string get_AIIsProvidedByTheIDEServices_Text();
    public static string get_Americas_Text();
    public static string get_Asia_Text();
    public static string get_AssignedTo__Text();
    public static string get_AuthenticationRequired_Text();
    public static string get_AuthenticationStarted_Text();
    public static string get_AuthenticationSucceded_Text();
    public static string get_AuthorizationFailed_ThisMightHappen_Text();
    public static string get_AuthorizationRequired_Text();
    public static string get_AuthorizeInWebBrowserIfItIsNotOpenAutomatically_Text();
    public static string get_AuthorizeInWebBrowserIfTheBrowserIs_Text();
    public static string get_AuthorizeInWebBrowser_Text();
    public static string get_Canceled_Text();
    public static string get_CannotConnectToJetBrainsLicenseServer_Text();
    public static string get_China_Text();
    public static string get_ClickAuthorizeButtonBelowAndAuthorize_Text();
    public static string get_DidNotManageToCreateHTTPRequestHandler_Text();
    public static string get_DoesNotRequireLicense_Text();
    public static string get_Europe_Text();
    public static string get_ExceptionOccurred__Text();
    public static string get_ExpiredTo__Text();
    public static string get_ExpiresOn__Text();
    public static string get_FailedToConnectToJetBrainsAccountTo_Text();
    public static string get_FetchingUserDetails_Text();
    public static string get_FreeTrialPeriodIsRunning1DayLeft_Text();
    public static string get_FreeTrialPeriodIsRunning_DaysLeft_Text();
    public static string get_FreeTrialPeriodOf_IsOver_Text();
    public static string get_FreeTrialPeriodWillExpireTomorrow_Text();
    public static string get_IncorrectDataReceivedFromTheAuthorization_Text();
    public static string get_InfiniteSubscription_Text();
    public static string get_LicensedTo__Text();
    public static string get_LicenseHasExpiredOn__Text();
    public static string get_LicenseIsNotApplicableToThisProduct_Text();
    public static string get_LicenseIsNotApplicableTo_Text();
    public static string get_LicenseToReSharper_IsNotAcceptableTo_Text();
    public static string get_LicenseToReSharper_IsNotAcceptable__Text();
    public static string get_LicenseToVersion_IsNotAcceptable_Text();
    public static string get_LoggedIn_Text();
    public static string get_LoggingIn_Text();
    public static string get_LoginFailedNoUserIdObtained_Text();
    public static string get_MaintenanceSubscriptionUntil__Text();
    public static string get_NoAccessTokenObtained_Text();
    public static string get_NoAuthenticationRequired_Text();
    public static string get_NoLicenseFoundFor__Text();
    public static string get_NoLicenseServerDetected_Text();
    public static string get_NoNewTokens_Text();
    public static string get_NoProductFound_Text();
    public static string get_NoProductInstalled_Text();
    public static string get_NoRefreshTokenObtained_Text();
    public static string get_NotLoggedIn_Text();
    public static string get_NoTokensObtained_Text();
    public static string get_NotSet_Text();
    public static string get_NoValidLicenseFound_Text();
    public static string get_NoValidTokensFound_Text();
    public static string get_OpenBrowserAt__Text();
    public static string get_Other_Text();
    public static string get_PerpetualForBuildsReleasedBefore__Text();
    public static string get_PerpetualForBuildsReleasedUpTo__Text();
    public static string get_ProductRegionAndCultureSettings_Text();
    public static string get_ProperlyLicensed_Text();
    public static string get_Region_Text();
    public static string get_ShortNameForThisComputerSettingsLayer();
    public static string get_BuildArtifacts_Text();
    public static string get_BuildDispatch_Text();
    public static string get_BuildLog_Text();
    public static string get_BuildSteps_Text();
    public static string get_CheckedBuild_Text();
    public static string get_IconViewerOpenIconsActionGroupText();
    public static string get_ADisplayNameToTellThisPaneApartFromTheOthersWhenReferringFromOtherUINotAnIdentitySettingDescription();
    public static string get_AnImportSourceForThisToolWindowPaneDependingOnTheKindOfThePaneUsuallyADiskDirectorySettingDescription();
    public static string get_AnInjectedLayerCreatedOverAFilePathSettingDescription();
    public static string get_ApplicationEnvironmentSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription();
    public static string get_ApplicationHousekeepingSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription();
    public static string get_AttachmentUploadMethodSettingDescription();
    public static string get_AttachSensitiveDataSettingDescription();
    public static string get_BottomActionText();
    public static string get_BrowseAsIconPacksActionDescription();
    public static string get_BrowseAsIconPacksActionText();
    public static string get_BrowseAsListActionDescription();
    public static string get_BrowseAsListActionText();
    public static string get_BrowseAsTilesActionDescription();
    public static string get_BrowseAsTilesActionText();
    public static string get_BuildActionGroupText();
    public static string get_BuildArtifactSettingDescription();
    public static string get_CentrallyManagedCustomizationOfInjectedLayersOfThisHostingLayerLikeTheirOnOffStateAndOrderLayerKindSpecificCustomizationsAreStoredByInjectionHandlersUnderTheirOwnKeysSettingDescription();
    public static string get_CloseActionText();
    public static string get_CloseAllActionText();
    public static string get_CloseAllButPinnedActionText();
    public static string get_CloseAllButThisActionText();
    public static string get_CollapseAllActionText();
    public static string get_ContextHelpActionText();
    public static string get_ContextMenuActionGroupText();
    public static string get_ControlsThemeSelectionForThemedIconsSettingDescription();
    public static string get_CopyActionText();
    public static string get_CopyLayerToLayerActionText();
    public static string get_CopySettingsFilePathActionText();
    public static string get_CopySettingsToActionGroupText();
    public static string get_CoverActionGroupText();
    public static string get_CreateSettingsFileActionText();
    public static string get_CultureSettingDescription();
    public static string get_CurrentRuntimeIconsActionDescription();
    public static string get_CurrentRuntimeIconsActionText();
    public static string get_DefaultVisibilityModeOfInlayHintsSettingDescription();
    public static string get_IconViewerOpenSyncPaneActionDescription();
    public static string get_IconViewerOpenSyncPaneActionText();
    public static string get_DirectoryWithIconFilesActionDescription();
    public static string get_DirectoryWithIconFilesActionText();
    public static string get_DiskCleanupSettingsSettingDescription();
    public static string get_DockAsDocumentActionText();
    public static string get_DumpActionGroupText();
    public static string get_DumpComponentContainersStatisticsActionText();
    public static string get_DumpDataAccessActionText();
    public static string get_DumpUnwantedComponentContainersDependenciesActionText();
    public static string get_EditLayerActionText();
    public static string get_EditorOptionPageTitle();
    public static string get_EnabledCustomNamespacesFromLogTraceScenariosMapDelimitedByCommaSettingDescription();
    public static string get_EnabledScenariosFromLogTraceScenariosMapDelimitedByCommaSettingDescription();
    public static string get_EnableOrDisableAllSuggestionsSettingDescription();
    public static string get_EnablePerformanceAssertionsOnReentrancyGuardActionExecutionSettingDescription();
    public static string get_EnvironmentOptionPageTitle();
    public static string get_ExceptionSubmitterSettingsSettingDescription();
    public static string get_ExpandAllActionText();
    public static string get_ExportActionGroupText();
    public static string get_ExportCCodeSExpressionBodyCreateNewIconPackFileActionDescription();
    public static string get_ExportPNGActionText();
    public static string get_ExportsThemedIconThisIncludesBothImagesOnDiscOrSourceFilesForAddingIconsToTheSolutionActionGroupDescription();
    public static string get_ExportSVGActionText();
    public static string get_ExportToFileActionText();
    public static string get_ExportToHTMLActionText();
    public static string get_ExportToTextActionText();
    public static string get_ExportToXMLActionText();
    public static string get_ExtensionManagerIncludePrereleasePackagesSettingDescription();
    public static string get_ExtensionManagerOptionsSettingDescription();
    public static string get_ExtensionManagerProviderOptionsSettingDescription();
    public static string get_ExtraArtifactsForBuildSettingDescription();
    public static string get_FeedbackSubmitterSettingsSettingDescription();
    public static string get_FileUploadBufferSizeSettingDescription();
    public static string get_FloatActionText();
    public static string get_FocusMonitorActionText();
    public static string get_GeneralOptionPageTitle();
    public static string get_GeneralSettingsOfTheApplicationUserInterfaceSettingDescription();
    public static string get_GlobalSettingsUpgradedSettingDescription();
    public static string get_GoToNextItemActionText();
    public static string get_GoToPreviousItemActionText();
    public static string get_GotoProductTwitterActionText();
    public static string get_GotoProductWebPageActionText();
    public static string get_GovernsTheUseOfAProxyServerWhenDownloadingFromInternetSettingDescription();
    public static string get_HelpActionGroupText();
    public static string get_HowFrequentlyMemoryStateIsUpdatedSettingDescription();
    public static string get_HowFrequentlyUIResponsivenessIsCheckedSettingDescription();
    public static string get_HowLiveTheSwitchIsSettingDescription();
    public static string get_HowSwitchBehavesWhenConflictFoundSettingDescription();
    public static string get_HTMLActionText();
    public static string get_IfIsCustomProxyAndCreatingCustomProxyFromTheProvidedSettingsFailedReportsTheErrorAnEmptyStringIfLastProxyUseWasSuccessfulThisErrorWontBeExposedAsADownloadExceptionBecauseOnThisErrorProxySettingsSilentlyFallBackToDefaultAlwaysSetOnTheGlobalContextSettingDescription();
    public static string get_IfIsCustomProxyUseThisProxyHostnameSettingDescription();
    public static string get_IfIsCustomProxyUseThisProxyPasswordForPasswordProtectedProxiesOnlyIgnoredIfUsernameIsEmptySettingDescription();
    public static string get_IfIsCustomProxyUseThisProxyPortSettingDescription();
    public static string get_IfIsCustomProxyUseThisProxyUsernameForPasswordProtectedProxiesOnlySettingDescription();
    public static string get_IfTheSpecifiedMigratorObjectIdentifiedByTheFullClassNameWithoutAssemblyNameHasAlreadyBeenRunForTheMountPointInWhichThisInformationIsWrittenSettingDescription();
    public static string get_ImportAndExportActionGroupText();
    public static string get_ImportFromActionGroupText();
    public static string get_ImportFromFileActionText();
    public static string get_ImportFromURLActionText();
    public static string get_InlayHintSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription();
    public static string get_InternaLActionGroupText();
    public static string get_InternalMode_Text();
    public static string get_IntervalOfTimeForWhichTheTextInputChangesAreDeferredBeforeTheyAreCommittedHelpsToProcessConsiderableAmountsOfUserInputRatherThanReactToEachKeystrokeSettingDescription();
    public static string get_IsEnabledSettingDescription();
    public static string get_KeepAttachmentsSettingDescription();
    public static string get_LastStartTimeSettingDescription();
    public static string get_LayoutOfTheCustomizedUserInterfaceSettingDescription();
    public static string get_LoggerActionGroupText();
    public static string get_LogTraceScenariosEnabledInInternalModeSettingDescription();
    public static string get_ManageOptionsActionText();
    public static string get_MemoryUsageIndicatorInTheStatusBarSettingDescription();
    public static string get_MemoryUsageOptionPageTitle();
    public static string get_MoveDownActionText();
    public static string get_MoveUpActionText();
    public static string get_MRUPositionsAndSizesOfApplicationWindowsSettingDescription();
    public static string get_MRUSelectedPageSettingDescription();
    public static string get_MRUViewModeSettingDescription();
    public static string get_NameSettingDescription();
    public static string get_NoOutputsYet_Text();
    public static string get_NotificationSettingsSettingDescription();
    public static string get_ReentrancyGuardFreezeMonitorSettingsDescription();
    public static string get_OnlineHelpActionText();
    public static string get_OOPActionGroupText();
    public static string get_OpenContainingFolderActionText();
    public static string get_OpenDefaultSetOfPanesActionDescription();
    public static string get_OpenDefaultSetOfPanesActionText();
    public static string get_OpenEventLogFolderActionText();
    public static string get_DumpStatisticsGroupsActionText();
    public static string get_DumpStatisticsSchemaActionText();
    public static string get_FUSActionGroupText();
    public static string get_AddGroupToEventsTestSchemeActionText();
    public static string get_AddTestGroup_Text();
    public static string get_GroupID_Text();
    public static string get_OpensANewPaneInTheThemedIconsViewerToolWindowActionGroupDescription();
    public static string get_OpenSettingsFileActionText();
    public static string get_OptionsActionText();
    public static string get_OptionsDialogLogicalSettingsSettingDescription();
    public static string get_OptionsOptionPageTitle();
    public static string get_OrderSettingDescription();
    public static string get_PackageSourcesSettingDescription();
    public static string get_PathPatternsToCleanSettingDescription();
    public static string get_PathToFileWithStoredStateSettingDescription();
    public static string get_PByPublicKeySettingDescription();
    public static string get_PerformanceGuideSettingDescription();
    public static string get_PerformanceMonitoringOptionPageTitle();
    public static string get_PerformanceMonitoringSettingsSettingDescription();
    public static string get_PersistExceptionsSettingDescription();
    public static string get_PlatformGeneralCheckboxesOptionPageTitle();
    public static string get_PlatformGeneralIconsOptionPageTitle();
    public static string get_PlatformGeneralUserInterfaceOptionPageTitle();
    public static string get_ProductHomeDirActionDescription();
    public static string get_ProductHomeDirActionText();
    public static string get_ProductTwitterActionGroupText();
    public static string get_ProductWebPageActionGroupText();
    public static string get_ProfileActionGroupText();
    public static string get_ProfileExplorer_Text();
    public static string get_ProjectModelActionGroupText();
    public static string get_PropertiesActionText();
    public static string get_QByPublicKeySettingDescription();
    public static string get_ReindentActionText();
    public static string get_RelativePriorityLevelOfThisInjectedLayerAgainstItsHostingLayerSettingDescription();
    public static string get_RemoveActionText();
    public static string get_RenameActionText();
    public static string get_ReportNonProductExceptionsSettingDescription();
    public static string get_ResetActionText();
    public static string get_ResetAllSettingsActionText();
    public static string get_ReSharperActionGroupText();
    public static string get_ReSharperCultureSettingsSettingDescription();
    public static string get_ReSharperGeneralInlayHintsSettingsSettingDescription();
    public static string get_RightActionText();
    public static string get_SelectedUserIdentificatorSettingDescription();
    public static string get_StartNewLine_Text();
    public static string get_SubscriptionBefore___Text();
    public static string get_SubscriptionCoversOnlyBuildsIssuedPrior_Text();
    public static string get_SubscriptionExpiredOn__Text();
    public static string get_SubscriptionIsValidThrough__Text();
    public static string get_ThankYouForInstalling__Text();
    public static string get_ThisPreReleaseVersionWillExpireIn_Days_Text();
    public static string get_TODO_Text();
    public static string get_TokenRefreshFailed_Text();
    public static string get_TokensRefreshed_Text();
    public static string get_ToReSharper_Text();
    public static string get_UserInterfaceSettings_IconThemeSelection();
    public static string get_UserInterfaceSettings_IconThemeSelectionExtensionForFluentDesign();
    public static string get_SelfProfilingToolLocationSettingDescription();
    public static string get_SelfProfilingToolVersionSettingDescription();
    public static string get_SentAcceptedAgreementsPerDocumentSettingDescription();
    public static string get_SetsUpApplicationsAccessToTheWorldWideWebSettingDescription();
    public static string get_SettingsForInternalActionToCreateZoneLicensCheckersSettingDescription();
    public static string get_SettingsForTheThemedIconsViewerVSettingDescription();
    public static string get_SettingsLayersActionGroupText();
    public static string get_SettingsLayersRightHandActionGroupText();
    public static string get_ShortcutsSchemeSettingDescription();
    public static string get_ShowFormAfterSubmissionSettingDescription();
    public static string get_ShowLogActionText();
    public static string get_OpenLogActionText();
    public static string get_ShowNotificationsActionText();
    public static string get_ShowPreviewActionGroupText();
    public static string get_ShowWarningNotificationsForPerformanceIssuesSettingDescription();
    public static string get_SingleGotoTwitterActionText();
    public static string get_SingleGotoWebActionText();
    public static string get_SomeBoolOptionForBindSettingDescription();
    public static string get_SomeBoolOptionForBindSSettingDescription();
    public static string get_SomeBoolOptionForEnabledSettingDescription();
    public static string get_SomeBoolOptionForShowingVisibilitySettingDescription();
    public static string get_SomeBoolOptionForVisibleSettingDescription();
    public static string get_SomeBoolOptionSettingDescription();
    public static string get_SomeEnumOptionSettingDescription();
    public static string get_SomeStringOptionSettingDescription();
    public static string get_SourceSettingDescription();
    public static string get_SpecifiesTheAbsolutePathToTheFileBasedUserInjectedLayerDiskFileOptionalTheRelativePathIfApplicableHasPriorityOverThisValueSettingDescription();
    public static string get_SpecifiesTheRelativePathToTheFileBasedUserInjectedLayerDiskFileRelativelyToItsHostingLayerNOTETheFileItselfNotTheDirectoryOptionalThisIsOnlyAvailableWhenTheHostingLayerIsAlsoFileBasedAndHasItsPathAvailableAndThesePathsAreOffTheSameRootWhenDefinedThisPathShouldBePreferredForRestoringTheMountedLayerInTheNewSessionSettingDescription();
    public static string get_StandardBrowserActionsActionGroupText();
    public static string get_StartNewLineBeforeActionText();
    public static string get_StoresTheSettingsMigrationStatusForEachOfTheSettingsLayersShouldOnlyBePresentIfASettingsMigrationCaseWasDetectedAndTheMigrationProcedureHasRunSettingDescription();
    public static string get_SubmitAllExceptionsAutomaticallySettingDescription();
    public static string get_SubmitPrivatelySettingDescription();
    public static string get_TabsSortingOrderSettingDescription();
    public static string get_TextActionText();
    public static string get_ThemedIconViewerActionText();
    public static string get_ThisDirectoryIsWatchedForImportableIconFilesTheCollectedFilesAreListedInTheThemedIconsViewerImportWindowSettingDescription();
    public static string get_TimeoutBetweenCleanupRunsSettingDescription();
    public static string get_ToggleAutoHideActionText();
    public static string get_ToolsActionGroupText();
    public static string get_ToolsOptionPageTitle();
    public static string get_TrackerUsernameSettingDescription();
    public static string get_TrueAlwaysShowModalDialogWhenExceptionOccursFalseExceptionNotificationInStatusBarCollectingExceptionsInBackgroundIfPossibleSettingDescription();
    public static string get_TrueMouseWheelMessagesAreForcedToBeProcessedByTheControlUnderCursorFalseNoBehaviorEnforcedUsuallyThisMeansTheFocusedControlIsScrolledInsteadOfTheHoveredOneSettingDescription();
    public static string get_TutorialSettingsSettingDescription();
    public static string get_UIResponsivenessOptionPageTitle();
    public static string get_UseAltRToOpenReSharperMainMenuSettingDescription();
    public static string get_UserCommentSettingDescription();
    public static string get_UserIdentificatorStringSettingDescription();
    public static string get_UserInjectedLayersListStoredInTheInjectionsHostLayerSettingDescription();
    public static string get_UserIsInformedAboutAnonymousSubmissionSettingDescription();
    public static string get_UserIsInformedAboutSendingCodeToJetBrainsSettingDescription();
    public static string get_ViewModeAndImportSettingsForEachOfTheToolWindowPanesSettingDescription();
    public static string get_VisualStudioActionGroupText();
    public static string get_VisualStudioVersionForLocalInstallSettingDescription();
    public static string get_VisualStudioVersionForOpenInVsSettingDescription();
    public static string get_VSVersionRootSuffixDoNotCompileFlagAndOtherUserBuildPreferencesSettingDescription();
    public static string get_WatchExceptionStorageSettingDescription();
    public static string get_WebProxySettingsOptionPageTitle();
    public static string get_WhenCleanupTaskIsQueuedOfApplicationStartSettingDescription();
    public static string get_WhetherAutomaticCleanupAllowedSettingDescription();
    public static string get_WhetherKeyboardSelectionInListsShouldWrapAroundEndsPressingUpArrowOnTheFirstItemSelectsTheLastOneAndViceVersaSettingDescription();
    public static string get_WhetherThisInjectedLayerIsOnOrOffSettingDescription();
    public static string get_WhetherThisPaneIsShowingCompiledIconsSourcesScatteredFilesEtcSettingDescription();
    public static string get_WhetherToBindThePressAndHoldOfTheCtrlKeyToPushToHintSettingDescription();
    public static string get_WhetherToEnableTheEntireInfrastructureOfInlayHintsSettingDescription();
    public static string get_WhetherToHideVSMenusTrueHideSettingDescription();
    public static string get_WhetherToOverrideVSRefactoringsTrueOverrideSettingDescription();
    public static string get_WhetherToShowTheMemoryUsageIndicatorInTheStatusBarOfTheApplicationMainWindowSettingDescription();
    public static string get_WhetherToSubmitAnonymouslySettingDescription();
    public static string get_WhetherToUseUserDefinedProxySettingsInsteadOfTheSystemWideProxySettingsSettingDescription();
    public static string get_WhetherToUseVSIconsInsteadOfRTrueUseVSIconsFalseUseRIconsSettingDescription();
    public static string get_WhyReSharperIsDisabledActionText();
    public static string get_WillBeDisabledBy0F_Text();
    public static string get_WindowBoundsSettingDescription();
    public static string get_WindowPersistenceDataSettingDescription();
    public static string get_WindowsActionGroupText();
    public static string get_WithAutoRenewal_Text();
    public static string get_XMLActionText();
    public static string get_PrimaryScreenScreenshotAttachmentAction_Text();
    public static string get_SamplingPerformanceSnapshotAttachmentProvider_ProviderName();
    public static string get_TimelinePerformanceSnapshotAttachmentProvider_ProviderName();
    public static string get_MemorySnapshotAttachmentProvider_ProviderName();
    public static string get_ShowEnterLicenseAction_Text();
    public static string get_ShowDataSharingOptionsAction_Text();
    public static string get_ExtensionManagerEnablePluginVerifierSettingDescription();
    public static string get_PerformanceMonitoringSettingsHeaded_Text();
    public static string get_CheckMemoryInterval0MeansDisabled_IntOption_Text();
    public static string get_RecentMemoryUsageInfo_Header_Text();
    public static string get_TotalPhysical__RichText_Text();
    public static string get_AvailablePhysical__RichText_Text();
    public static string get_TotalVirtual__RichText_Text();
    public static string get_AvailableVirtual__RichText_Text();
    public static string get_MemoryLoad__RichText_Text();
    public static string get_Ms_IntOption_TextSuffix();
    public static string get__DatabaseSize_MaxSize__RichText_Text();
    public static string get_ExportToCsv_Button_Text();
    public static string get_TODOAddDescription_Text();
    public static string get_CheckMemoryInterval0MeansDisabled_IntOption_Text2();
    public static string get_Ms_IntOption_TextSuffix2();
    public static string get_UIResposivenessInfo_Header_Text();
    public static string get_AverageDelay__RichText_Text();
    public static string get_MaximumDelay__RichText_Text();
    public static string get_NumberOfSamplesLongerThan50ms__RichText_Text();
    public static string get_ExportToCsv_Button_Text2();
    public static string get_AutomaticSelection_Text();
    public static string get_Color_Text();
    public static string get_Gray_Text();
    public static string get_DarkGray_Text();
    public static string get_FluentLight_Text();
    public static string get_FluentDark_Text();
    public static string get_ApplicationIconsTheme_Text();
    public static string get_ShowManaged_memoryUsageInStatusBar_BoolOption_Text();
    public static string get_ShowReport_ErrorDialogEachTime_Encounters_BoolOption_Text();
    public static string get__Edit_Button_Text();
    public static string get_FailedToProcessSettings_Caption();
    public static string get_FailedToWriteToTheOutputLayer_Caption();
    public static string get_FailedToWriteToTheOutputFile_Caption();
    public static string get_FileDoesnTExist__Text();
    public static string get_DirectoryDoesnTExist__Text();
    public static string get_NoWritePermissionForFolder__Text();
    public static string get_FolderDoesnTExist__Text();
    public static string get_Browse_Button_Text();
    public static string get_Reset_Button_Text();
    public static string get_InvalidPath__Text();
    public static string get_PathMustBeAbsolute__Text();
    public static string get_Browse_Button_Text2();
    public static string get_UserInterface_Header_Text();
    public static string get__UseSystemProxyServerSettingsWhenDownloading_Text();
    public static string get_Options_Dialog_Title_Text();
    public static string get_NoPendingChanges_Text();
    public static string get_ModifiedSettingWillBeSaved_Text();
    public static string get_N_ModifiedSettingsWillBeSaved_Text();
    public static string get_Save_Options_Dialog_Button_Text();
    public static string get_OK_Options_Dialog_Button_Text();
    public static string get_Manage_Options_Dialog_Button_Text();
    public static string get_DoYouWantToSaveChanges_Text();
    public static string get_ThisWillCloseTheOptionsDialogAndOpen_Caption();
    public static string get_TheSettingsCouldNotBeAppliedReturning_Text();
    public static string get_SaveTo_Options_Dialog_Button_Text();
    public static string get_Cancel_Options_Dialog_Button_Text();
    public static string get_AllFiles_Text();
    public static string get_Settings_Text();
    public static string get_Submitting_Text();
    public static string get_SendingReport_Text();
    public static string get_SubmittingExceptions_Text();
    public static string get_GatheringResults_Text();
    public static string get_LoadingProductContentPack_Text();
    public static string get_ReadingPackagesFromProductContentPack_Text();
    public static string get_UploadingFile__Text();
    public static string get_UploadingFile__KbytesS_Text();
    public static string get_DownloadingDotMemoryConsoleProfiler_Text();
    public static string get_GettingMemorySnapshot_Text();
    public static string get_AttachingPerformanceProfiler_Text();
    public static string get_ProfilingReproduceProblemAndStopItManually_Text();
    public static string get_SavingProfilingSnapshot_Text();
    public static string get__Of___Text();
    public static string get_WritingPortableNetworkGraphicsFiles_Text();
    public static string get_WritingThemedIconsPackInCFormat_Text();
    public static string get_EmittingCodeForIcons_Text();
    public static string get_RenderingCodeToText_Text();
    public static string get_WritingScalableVectorGraphicsFiles_Text();
    public static string get_WritingThemedIconsInCFormat_Text();
    public static string get_CheckingForChanges_Text();
    public static string get_ExportIcons_Text();
    public static string get_Restart_Caption();
    public static string get_DoYouReallyWantToRestart__Text();
    public static string get_SettingsLayers_Caption();
    public static string get_Initializing_Text();
    public static string get_TheToolWindowHasNotBeenLoadedYet_Text();
    public static string get_TheToolWindowHasBeenLoadedRendering_Text();
    public static string get_TheToolWindowHasBeenUnloaded_Text();
    public static string get_TheToolWindowHasBeenRestored_Text();
    public static string get_ThereIsNoToolWindowToShowInThisView_Text();
    public static string get_TheToolWindowHasBeenPutInAnUnexpected_Text();
    public static string get_PublishedByExtension__Text();
    public static string get_SettingsPublishedByExtensions_Text();
    public static string get_Extensions_Text();
    public static string get__In__Text();
    public static string get_BuildSettings_Text();
    public static string get_ThisComputer_Text();
    public static string get_DefaultSettingsCompositeStorage_Text();
    public static string get_ShortNameForDefaultSettingsLayer();
    public static string get_DefaultSettingsCompositeStorageBacking_Text();
    public static string get_DefaultSettingsFrom__Text();
    public static string get_Smart_Text();
    public static string get_SyntheticLayerWhichAutomaticallyDecides_Text();
    public static string get_RenameSettingsLayer_Caption();
    public static string get_LayerName_Text();
    public static string get_LayerNameMustNotBeEmpty_Text();
    public static string get_ImportSettingsFromURI_Caption();
    public static string get_URI_Text();
    public static string get_URICannotBeEmpty_Text();
    public static string get_ThisTextCouldNotBeParsedAsAValidURI_Text();
    public static string get_TemporaryStorageForLoadingFromAnURI_Text();
    public static string get_TemporaryStorageForSavingToAPath_Text();
    public static string get_DefaultExtensionManagerSettings_Text();
    public static string get_About_Text();
    public static string get_CouldNotOpenAnInternetURIInYourDefault_Text();
    public static string get_OpenInternetURI_Caption();
    public static string get_CouldNotOpenAnInternetURIWithPlatform_Text();
    public static string get_CouldNotOpenAnInternetURIOnBehalfOf_Text();
    public static string get_TheLastBuildGaveNoFilesForOutput_Text();
    public static string get_SaveBuildOutputsToFolder_Caption();
    public static string get_TheWorkspaceSettingsFileCouldNotBeLoaded_Text();
    public static string get_TheUserSettingsFileCouldNotBeLoaded_Text();
    public static string get_TheUserSettingsFileFromAPreviousVersion_Text();
    public static string get__UnknownLoggingLevel__Text();
    public static string get_LoggingIsNotEnabled_Text();
    public static string get_StopTask__Text();
    public static string get_SelectAnItemToEdit_Text();
    public static string get_EditItem_Text();
    public static string get_ItemText_Text();
    public static string get_TheStringMustNotBeEmpty_Text();
    public static string get_AddNewItem_Text();
    public static string get_NewItem_Text();
    public static string get_DumpToFile_Caption();
    public static string get_SelectAnItemToRemove_Text();
    public static string get_AttachFile_Caption();
    public static string get_AttachMemorySnapshot_Caption();
    public static string get_ThereIsNoHelpAvailableFor__Text();
    public static string get_Help_Caption();
    public static string get_ThereAreNoIconsSelected_Text();
    public static string get_FolderForPortableNetworkGraphicsFiles_Caption();
    public static string get_FolderForScalableVectorGraphicsFiles_Caption();
    public static string get_ThereWereErrorsExportingIcons____Text();
    public static string get_SystemWebProxySettingsCouldNotBeOpened_Text();
    public static string get_CannotCopyLayerSettingsHere_Text();
    public static string get_CannotCopyLayerSettingsIntoTheSameLayer_Text();
    public static string get_AreYouSureToRemove_Layer_FromLayers_Text();
    public static string get_ExportLayer_Caption();
    public static string get_SelectFile_Caption();
    public static string get_OpenSettings_Caption();
    public static string get_ThereIsNoGroupSelectedToAddTheNewFile_Text();
    public static string get_ThisFileIsAlreadyAddedAsASettingsLayer_Text();
    public static string get_SaveSettings_Caption();
    public static string get_ThisWillResetAllOfThe_SettingsNYouWon_Text();
    public static string get_TheSettingsHaveBeenResetToTheirFactory_Text();
    public static string get_ThereWereNoExceptionsRecordedWithSettings_Text();
    public static string get_DataValidation_Text();
    public static string get_WouldYouLikeToContinueAnyway_Text();
    public static string get_Tab_Text();
    public static string get_ThereAreNoRecentBuildsToShowInThisView_Text();
    public static string get_About___Text();
    public static string get__WebPage_Text();
    public static string get_Twitter_Text();
    public static string get_Why_IsDisabled_Text();
    public static string get_ShowMoreItems_Text();
    public static string get_TooManyItemsListTruncated_Text();
    public static string get__Logs_Text();
    public static string get_ApplicationLogs_Text();
    public static string get_Unavailable_Text();
    public static string get_ShowAllLayers_Text();
    public static string get__CtrlP_Text();
    public static string get_SubmitPending_Text();
    public static string get_DeletePending_Text();
    public static string get_DeleteAll_Text();
    public static string get_MuteAll_Text();
    public static string get_DisableTraceScenario_Text();
    public static string get_OpenLogFile_Text();
    public static string get_ExceptionSubmitter_Text();
    public static string get_Submitting_Exceptions_ToolTip();
    public static string get__PendingExceptionClickHereToSubmit_Text();
    public static string get__PendingExceptionsClickHereToSubmit_Text();
    public static string get_ShowHelp_Caption();
    public static string get_OutdatedLicenseServerDetected_Text();
    public static string get_YourLicenseTicketHasBeenObtainedFrom_Text();
    public static string get_EditLicense_Caption();
    public static string get_LogScenarioEnabledItAffectsPerformance_ToolTip();
    public static string get_Restart__Text();
    public static string get_Configure_Caption();
    public static string get_ClearNotifications_Caption();
    public static string get_PerformanceTip__Text();
    public static string get_ConfigureSettingsToImprovePerformance_Text();
    public static string get_APerformanceRelatedOptionWasUpdated_Text();
    public static string get_VisualStudioPerformanceWillImproveIf_Text();
    public static string get_Submitted_Exceptions_ToolTip();
    public static string get_JetBrainsAccountMustBeConnectedUntil_Text();
    public static string get_JetBrainsAccountInaccessible_Text();
    public static string get_ShowLicenseDialog_Caption();
    public static string get_JetBrainsLicenseRequiresYourAttention_Text();
    public static string get_LicenseServerInaccessible_Text();
    public static string get_IfConnectionTo_IsNotRestoredUntil___Text();
    public static string get_SubscriptionToLicense_IsAboutToExpire_Text();
    public static string get_SubscriptionWillExpireOn__WillNoLonger_Text();
    public static string get_SubscriptionToLicense_HasExpired_Text();
    public static string get_SubscriptionHasExpiredOn_PleaseRenew_Text();
    public static string get_License_HasNotBeenAutoRenewed_Text();
    public static string get_ThereWasAProblemRenewingYourLicense_Text();
    public static string get_License_HasExpired_Text();
    public static string get_SubscriptionHasExpiredOn__WillBeDisabled_Text();
    public static string get_CheckLicenseKey_Text();
    public static string get_License_HasBeenAssignedTo_PleaseEnter_Text();
    public static string get_License_HasBeenAssignedTo__Text();
    public static string get__Took_ms_Text();
    public static string get_LicenseChanged_Text();
    public static string get_FromPopup_Text();
    public static string get_ThereReDocumentsThatRequireUserConsent_Text();
    public static string get_ThereReOptionsThatRequireUserConsent_Text();
    public static string get_WasRequestedByAPI_Text();
    public static string get_ForceShowDialog_Text();
    public static string get_ShowInFindResults_Text();
    public static string get_ShowAllReSharperActions_ToolTip();
    public static string get_ShowLicenseRequestedByUser_Text();
    public static string get_ShowDataSharingOptionsRequestedByUser_Text();
    public static string get_NETCLIInstallationFolderNotFound_Text();
    public static string get_NETCLIExecutableNotFound_Text();
    public static string get_NETCLIInvalidDotNetRoot_Text();
    public static string get__LIVE_Text();
    public static string get_IconsIn___Text();
    public static string get_Add_Button_Text();
    public static string get_Edit_Button_Text();
    public static string get_Remove_Button_Text();
    public static string get_AggressiveFiberUsageNumberOdFibersIsTwiceProcessorCount_Description_Text();
    public static string get_Always_Description_Text();
    public static string get_LowUtilization_Description_Text();
    public static string get_ModerateUtilization_Description_Text();
    public static string get_HighUtilization_Description_Text();
    public static string get_DoNotUseMultiCoreFibers_Description_Text();
    public static string get_Never_Description_Text();
    public static string get_RegularFiberUsageNumberOfFibersEqualsProcessorNumber_Description_Text();
    public static string get_WhenTheCaretIsNear_Description_Text();
    public static string get_CopyTo_Text();
    public static string get_ImportFromFile_Text();
    public static string get_ResetLayer_Text();
    public static string get_RunBuildWaitingForEntryPoints_Text();
    public static string get_RunBuildNowBuildingFor__Text();
    public static string get_RunBuildAutomaticallyShuttingDownSoon_Text();
    public static string get_RunBuildAutomaticallyShuttingDownNow_Text();
    public static string get_RunBuildAutomaticallyShuttingDownIn_Text();
    public static string get_RunBuildDone_Text();
    public static string get_RunBuildFAILED_Text();
    public static string get_PleaseWait_Text();
    public static string get_ExportSettingsToFile_Text();
    public static string get_ExceptionReporterAuthorization_Header();
    public static string get_ExceptionReporterAuthorization_Message();
    public static string get_ExceptionReporterAuthorization_Body();
    public static string get_RestoreActionText();
    public static string get_MaximizeToolWindowActionActionText();
    public static string get_DockOptionsActionText();
    public static string get_OptionsRelatedToVariousHacksSettingDescription();
    public static string get_And_Separator_Text();
    public static string get_ErrorWhenExportingSettings__Text();
    public static string get_AiAssistantWithAccelerator();
    public static string get_BuildSettingsPerHomeDirStorageOrigin_Text();
    public static string get_GlobalPerProductStorageOrigin_Text();
    public static string get___BuiltOn__Text();
    public static string get_LastBuildOutputsSummary_Text();
    public static string get_JetPopupMenuNoItemsBanner();
    public static string get_Localization_Header_Text();
    public static string get_English_Text();
    public static string get_InterfaceLanguage_Text();
    public static string get_VisualStudioRestartMayBeRequired_Text();
    public static string get_YouAreGoingToRemoveThePluginThatIsCurrently_Text();
    public static string get_Report_Consent_Review1();
    public static string get_Report_Consent_Review2();
    public static string get_Report_Consent_Review3();
    public static string get_Report_Consent_AggreeYoutrack();
    public static string get_Report_Consent_AggreeZendesk();
    public static string get_Report_Consent_AggreeHeader();
    public static string get_Report_Consent_Aggree2Header();
    public static string get_Report_Consent_Aggree3Header();
    public static string get_Report_Consent_Aggree2();
    public static string get_Report_Consent_Aggree3();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class JetBrains.Application.Resources.VsResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AggregateSourceName { get; }
    internal static string AmbiguousProjectLevelUninstal { get; }
    internal static string AmbiguousUninstall { get; }
    internal static string AmbiguousUpdate { get; }
    internal static string AskForRestoreMessage { get; }
    internal static string AskForUpdateMessage { get; }
    internal static string Console_DisclaimerText { get; }
    internal static string Console_HelpText { get; }
    internal static string Console_InitializeHostFails { get; }
    internal static string Debug_AddedFileToProject { get; }
    internal static string Debug_AddReference { get; }
    internal static string Debug_RemovedFile { get; }
    internal static string Debug_RemovedFileFromFolder { get; }
    internal static string Debug_RemovedFolder { get; }
    internal static string Debug_RemoveReference { get; }
    internal static string Dialog_DisclaimerText { get; }
    internal static string DialogTitle { get; }
    internal static string DoNotRemindAgain { get; }
    internal static string DTE_InvalidProject { get; }
    internal static string DTE_ProjectUnsupported { get; }
    internal static string ErrorReadingFile { get; }
    internal static string ExecutingScript { get; }
    internal static string FailedToAddGacReference { get; }
    internal static string FailedToAddReference { get; }
    internal static string FailedToRemoveReference { get; }
    internal static string FileConflictTitle { get; }
    internal static string IgnoreUpgrade { get; }
    internal static string Log_PackageAlreadyInstalled { get; }
    internal static string NoActivePackageSource { get; }
    internal static string NoUpdatesAvailable { get; }
    internal static string OfficialSourceName { get; }
    internal static string OperationFailed { get; }
    internal static string PackageCannotBeRemovedBecauseItIsInUse { get; }
    internal static string PackageNotInstalledInAnyProject { get; }
    internal static string PackageRestoreCompleted { get; }
    internal static string PackageRestoreConfirmation { get; }
    internal static string PackageRestoreDownloadPackageFailed { get; }
    internal static string PackageRestoreErrorMessage { get; }
    internal static string PackageRestoreErrorTryAgain { get; }
    internal static string PackageRestoreProgressMessage { get; }
    internal static string PackageRestoreSkipForProject { get; }
    internal static string PackageRestoreSkipForSolution { get; }
    internal static string PackageRestoreWaitMessage { get; }
    internal static string PackageSource_Invalid { get; }
    internal static string PackageUpdatedSuccessfully { get; }
    internal static string ProjectNotSpecified { get; }
    internal static string ReinstallProjectPackage { get; }
    internal static string ReinstallSolutionPackage { get; }
    internal static string RequestRestartToCompleteUninstall { get; }
    internal static string RestartNow { get; }
    internal static string RestoreButtonLabel { get; }
    internal static string ShowDetails { get; }
    internal static string SolutionDirectoryNotAvailable { get; }
    internal static string SolutionNotAvailable { get; }
    internal static string TemplateWizard_ErrorDialogTitle { get; }
    internal static string TemplateWizard_ExtensionManagerError { get; }
    internal static string TemplateWizard_FailedToInstallPackage { get; }
    internal static string TemplateWizard_InvalidExtensionId { get; }
    internal static string TemplateWizard_InvalidPackageElementAttributes { get; }
    internal static string TemplateWizard_InvalidRegistryValue { get; }
    internal static string TemplateWizard_InvalidRepositoryAttribute { get; }
    internal static string TemplateWizard_InvalidWizardRunKind { get; }
    internal static string TemplateWizard_MissingExtensionId { get; }
    internal static string TemplateWizard_MissingRegistryKeyName { get; }
    internal static string TemplateWizard_PackageInstallStatus { get; }
    internal static string TemplateWizard_RegistryKeyError { get; }
    internal static string TemplateWizard_VersionConflict { get; }
    internal static string UnableToFindPackageFromSource { get; }
    internal static string UnknownPackage { get; }
    internal static string UnknownPackageInProject { get; }
    internal static string VisualStudioExpressForWindows8SourceName { get; }
    internal static string Warning_DirectoryNotEmpty { get; }
    internal static string Warning_FailedToAddBindingRedirects { get; }
    internal static string Warning_FailedToDeleteMarkedPackageDirectories { get; }
    internal static string Warning_FailedToDeleteMarkedPackageDirectory { get; }
    internal static string Warning_FailedToFindMatchForRemoveReference { get; }
    internal static string Warning_FailedToMarkPackageDirectoryForDeletion { get; }
    internal static string Warning_FileAlreadyExists { get; }
    internal static string Warning_NoExactMatchForReference { get; }
    internal static string Warning_PackageNotReferencedByAnyProject { get; }
    internal static string Warning_RollingBack { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AggregateSourceName();
    internal static string get_AmbiguousProjectLevelUninstal();
    internal static string get_AmbiguousUninstall();
    internal static string get_AmbiguousUpdate();
    internal static string get_AskForRestoreMessage();
    internal static string get_AskForUpdateMessage();
    internal static string get_Console_DisclaimerText();
    internal static string get_Console_HelpText();
    internal static string get_Console_InitializeHostFails();
    internal static string get_Debug_AddedFileToProject();
    internal static string get_Debug_AddReference();
    internal static string get_Debug_RemovedFile();
    internal static string get_Debug_RemovedFileFromFolder();
    internal static string get_Debug_RemovedFolder();
    internal static string get_Debug_RemoveReference();
    internal static string get_Dialog_DisclaimerText();
    internal static string get_DialogTitle();
    internal static string get_DoNotRemindAgain();
    internal static string get_DTE_InvalidProject();
    internal static string get_DTE_ProjectUnsupported();
    internal static string get_ErrorReadingFile();
    internal static string get_ExecutingScript();
    internal static string get_FailedToAddGacReference();
    internal static string get_FailedToAddReference();
    internal static string get_FailedToRemoveReference();
    internal static string get_FileConflictTitle();
    internal static string get_IgnoreUpgrade();
    internal static string get_Log_PackageAlreadyInstalled();
    internal static string get_NoActivePackageSource();
    internal static string get_NoUpdatesAvailable();
    internal static string get_OfficialSourceName();
    internal static string get_OperationFailed();
    internal static string get_PackageCannotBeRemovedBecauseItIsInUse();
    internal static string get_PackageNotInstalledInAnyProject();
    internal static string get_PackageRestoreCompleted();
    internal static string get_PackageRestoreConfirmation();
    internal static string get_PackageRestoreDownloadPackageFailed();
    internal static string get_PackageRestoreErrorMessage();
    internal static string get_PackageRestoreErrorTryAgain();
    internal static string get_PackageRestoreProgressMessage();
    internal static string get_PackageRestoreSkipForProject();
    internal static string get_PackageRestoreSkipForSolution();
    internal static string get_PackageRestoreWaitMessage();
    internal static string get_PackageSource_Invalid();
    internal static string get_PackageUpdatedSuccessfully();
    internal static string get_ProjectNotSpecified();
    internal static string get_ReinstallProjectPackage();
    internal static string get_ReinstallSolutionPackage();
    internal static string get_RequestRestartToCompleteUninstall();
    internal static string get_RestartNow();
    internal static string get_RestoreButtonLabel();
    internal static string get_ShowDetails();
    internal static string get_SolutionDirectoryNotAvailable();
    internal static string get_SolutionNotAvailable();
    internal static string get_TemplateWizard_ErrorDialogTitle();
    internal static string get_TemplateWizard_ExtensionManagerError();
    internal static string get_TemplateWizard_FailedToInstallPackage();
    internal static string get_TemplateWizard_InvalidExtensionId();
    internal static string get_TemplateWizard_InvalidPackageElementAttributes();
    internal static string get_TemplateWizard_InvalidRegistryValue();
    internal static string get_TemplateWizard_InvalidRepositoryAttribute();
    internal static string get_TemplateWizard_InvalidWizardRunKind();
    internal static string get_TemplateWizard_MissingExtensionId();
    internal static string get_TemplateWizard_MissingRegistryKeyName();
    internal static string get_TemplateWizard_PackageInstallStatus();
    internal static string get_TemplateWizard_RegistryKeyError();
    internal static string get_TemplateWizard_VersionConflict();
    internal static string get_UnableToFindPackageFromSource();
    internal static string get_UnknownPackage();
    internal static string get_UnknownPackageInProject();
    internal static string get_VisualStudioExpressForWindows8SourceName();
    internal static string get_Warning_DirectoryNotEmpty();
    internal static string get_Warning_FailedToAddBindingRedirects();
    internal static string get_Warning_FailedToDeleteMarkedPackageDirectories();
    internal static string get_Warning_FailedToDeleteMarkedPackageDirectory();
    internal static string get_Warning_FailedToFindMatchForRemoveReference();
    internal static string get_Warning_FailedToMarkPackageDirectoryForDeletion();
    internal static string get_Warning_FileAlreadyExists();
    internal static string get_Warning_NoExactMatchForReference();
    internal static string get_Warning_PackageNotReferencedByAnyProject();
    internal static string get_Warning_RollingBack();
}
public interface JetBrains.Application.ResultList.IResultListHandler {
    [CanBeNullAttribute]
public abstract virtual Action GoToNextLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
    [CanBeNullAttribute]
public abstract virtual Action GoToPrevLocation(Lifetime lifetimeExec, IDataContext context, ActionPresentation presentation);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Settings.ApartmentForNotifications : ValueType {
    [CanBeNullAttribute]
public Thread ThreadIfSta;
    private ApartmentForNotifications(Thread threadIfSta);
    public static ApartmentForNotifications Mta();
    public static ApartmentForNotifications Primary(IThreading threading);
    public static ApartmentForNotifications Sta(Thread thread);
}
[NotNullAttribute]
public class JetBrains.Application.Settings.AsyncChangedSinkDelegate : MulticastDelegate {
    public AsyncChangedSinkDelegate(object object, IntPtr method);
    public virtual Task Invoke(Lifetime lifetime, SettingsStoreChangeArgs args);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, SettingsStoreChangeArgs args, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class JetBrains.Application.Settings.AvailabilityGroupQuery : ValueType {
    public DataContextDelegate Context;
    public bool IsEmptyDataContext;
    public List`1<ISettingsStorageMountPoint> Output;
    public AvailabilityGroupQuery(DataContextDelegate context, bool isEmptyDataContext, List`1<ISettingsStorageMountPoint> output);
}
[FlagsAttribute]
public enum JetBrains.Application.Settings.BindToContextFlags : Enum {
    public int value__;
    public static BindToContextFlags Normal;
    public static BindToContextFlags RespectReadonlyFlag;
    public static BindToContextFlags IgnoreReadonlyFlag;
    public static BindToContextFlags EraseDefaultValues;
    public static BindToContextFlags ForceWriteDefaultValues;
}
public class JetBrains.Application.Settings.Calculated.Cache.CachedSettings : object {
    protected Dictionary`2<object, object> myDictionary;
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ICalculatedSettingsSchema <Schema>k__BackingField;
    public IContextBoundSettingsStore SettingsStore { get; }
    public ICalculatedSettingsSchema Schema { get; }
    public CachedSettings(IContextBoundSettingsStore settingsStore, ICalculatedSettingsSchema schema);
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public ICalculatedSettingsSchema get_Schema();
    protected virtual void SetValue(TKey key, TValue value);
    [MustUseReturnValueAttribute]
public virtual TEntryValue GetValue(IScalarSetting`1<TEntryValue> setting);
    [MustUseReturnValueAttribute]
public virtual object GetValueUntyped(IScalarSetting setting);
    public void SetValueUntyped(IScalarSetting setting, object value);
    public void SetValue(IScalarSetting`1<TEntryValue> setting, TEntryValue value);
    [MustUseReturnValueAttribute]
public TEntryValue GetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression);
    public void SetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value);
    public CachedSettings Clone();
}
public class JetBrains.Application.Settings.Calculated.Cache.CachedSettings`1 : CachedSettings {
    public CachedSettings`1(IContextBoundSettingsStore settingsStore, ICalculatedSettingsSchema schema);
    [MustUseReturnValueAttribute]
public virtual TEntryValue GetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression);
    public virtual void SetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value);
    public CachedSettings`1<TKeyClass> Clone();
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.Calculated.Extensions.CalculatedSettingsExtensions : object {
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static TEntryValue GetValue(IContextBoundSettingsStore thіs, ICalculatedSettingsSchema schema, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetValue(IContextBoundSettingsStore thіs, ICalculatedSettingsSchema schema, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
[CanBeNullAttribute]
public static TEntryValue GetIndexedValue(IContextBoundSettingsStore thіs, ICalculatedSettingsSchema schema, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetIndexedValue(IContextBoundSettingsStore thіs, ICalculatedSettingsSchema schema, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public static IProperty`1<TEntryValue> GetValueProperty(IContextBoundSettingsStoreLive thіs, ICalculatedSettingsSchema schema, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[MustUseReturnValueAttribute]
public static IProperty`1<TEntryValue> GetValueProperty2(IContextBoundSettingsStoreLive thіs, ICalculatedSettingsSchema schema, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TEntryValue> GetIndexedValueProperty(IContextBoundSettingsStoreLive thіs, ICalculatedSettingsSchema schema, Lifetime lifetime, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TEntryValue> GetIndexedValueProperty2(IContextBoundSettingsStoreLive thіs, ICalculatedSettingsSchema schema, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void UpdateIndexedEntry(IContextBoundSettingsStore store, SettingsIndexedEntry indexedEntry, Dictionary`2<TKey, TValue> entriesToSave, Dictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void UpdateIndexedEntry(IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TKey, TValue>>> expression, Dictionary`2<TKey, TValue> entriesToSave, Dictionary`2<SettingsKey, object> keyIndices);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.Calculated.Implementation.CalculatedSettingsSchema : object {
    private object myWriteLock;
    private ConcurrentDictionary`2<SettingsIndexedEntry, Func`2<object, object>> myDefaultValuesProviders;
    private ConcurrentDictionary`2<SettingIndex, IScalarSetting> myStoredSettings;
    private ConcurrentDictionary`2<string, IScalarSetting> mySettingsByName;
    private OneToListMultimap`2<SettingIndex, ScalarSettingDescription> mySettingsByDependencies;
    private OneToSetMap`2<SettingsEntry, IScalarSetting> myAffectedSettings;
    private ISettingsSchema mySchema;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public IThreading Threading { get; }
    public ILogger Logger { get; }
    public CalculatedSettingsSchema(Lifetime lifetime, IEnumerable`1<IProvider`1<ScalarSettingDescription>> descriptions, IEnumerable`1<IProvider`1<DefaultSettingValuesProvider>> defaultValuesProviders, ISettingsSchema schema, IThreading threading, CultureContextComponent cultureContextComponent, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IThreading get_Threading();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    private void ProcessSettingDescription(ScalarSettingDescription description);
    private void AddDependencies(ScalarSettingDescription description, IScalarSetting scalarSetting);
    internal IScalarSetting GetBySettingIndex(ScalarSettingDescription description);
    public sealed virtual object GetDefaultValue(SettingIndex sourceSetting);
    public sealed virtual IScalarSetting GetScalarSetting(LambdaExpression lambda);
    public sealed virtual IScalarSetting GetScalarSetting(Type keyType, string instanceMemberName);
    public sealed virtual IScalarSetting GetScalarSetting(SettingIndex settingIndex);
    public sealed virtual IReadOnlyCollection`1<IScalarSetting> GetAffectedEntries(IEnumerable`1<SettingsEntry> changedEntries);
    public sealed virtual IReadOnlyCollection`1<IStoredScalarSetting> GetDependentUpgradableEntries(SettingIndex index);
    private IScalarSetting GetScalarSettingImpl(Type keyType, string instanceMemberName, MemberInfo instanceMemberInfo);
    private IScalarSetting GetByResultTypeAndSettingIndex(Type resultType, SettingIndex settingIndex);
    public sealed virtual IScalarSetting`1<TEntryValue> GetScalarSetting(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    public sealed virtual IScalarSetting`1<TEntryValue> GetIndexedSetting(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaExpression, TEntryIndex entryIndex);
    public sealed virtual IStoredScalarSetting GetScalarSetting(SettingsScalarEntry scalarEntry);
    public sealed virtual IStoredScalarSetting GetIndexedSetting(SettingsIndexedEntry indexedEntry, object entryIndex);
    public sealed virtual object GetDefaultValueForIndexedSetting(SettingsIndexedEntry entry, object entryIndex);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(Lifetime lifetime1, DefaultSettingValuesProvider provider);
}
public interface JetBrains.Application.Settings.Calculated.Implementation.IScalarSettingImplementation {
    public abstract virtual ValueTuple`2<object, bool> GetValueFromMountPointUntyped(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices);
}
internal interface JetBrains.Application.Settings.Calculated.Implementation.IScalarUpgradableSetting {
    public abstract virtual void Upgrade(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices, ImmutableArray`1<ISettingsStorageMountPoint> mountPoints, ISettingsStorageMountPoint previousMountPoint);
    public abstract virtual void Upgrade(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices, IStoredScalarSetting changingSourceSetting, bool isDefault);
}
public interface JetBrains.Application.Settings.Calculated.Implementation.IStoredScalarSetting {
    public SettingIndex SettingIndex { get; }
    public abstract virtual SettingIndex get_SettingIndex();
    public abstract virtual void SetValueToMountPointUntyped(object value, ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices, ImmutableArray`1<ISettingsStorageMountPoint> mountPoints);
}
internal class JetBrains.Application.Settings.Calculated.Implementation.ScalarCalculatedSetting`1 : ScalarSettingBase`1<TValue> {
    [CompilerGeneratedAttribute]
private ICalculatedSettingsSchema <Schema>k__BackingField;
    private IScalarSetting[] mySourceSettings;
    private Func`2<Object[], TValue> myCalculator;
    private Func`2<TValue, Object[]> mySetter;
    public ICalculatedSettingsSchema Schema { get; }
    public ScalarCalculatedSetting`1(string name, string description, IScalarSetting[] sourceSettings, Func`2<Object[], TValue> calculator, Func`2<TValue, Object[]> setter, ICalculatedSettingsSchema schema);
    [CompilerGeneratedAttribute]
public ICalculatedSettingsSchema get_Schema();
    public virtual void AdviseChange(IContextBoundSettingsStoreLive store, Lifetime lifetime, Action onChange, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual IProperty`1<TValue> GetValueLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual TValue GetValue(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual void SetValue(TValue value, IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual ValueTuple`2<object, bool> GetValueFromMountPointUntyped(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices);
}
internal abstract class JetBrains.Application.Settings.Calculated.Implementation.ScalarSettingBase`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Name { get; }
    public string LocalName { get; }
    public Type ResultType { get; }
    public string Description { get; }
    protected ScalarSettingBase`1(string name, string description);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LocalName();
    public sealed virtual Type get_ResultType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    private sealed virtual override object JetBrains.Application.Settings.Calculated.Interface.IScalarSetting.GetValueUntyped(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override void JetBrains.Application.Settings.Calculated.Interface.IScalarSetting.SetValueUntyped(object value, IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void AdviseChange(IContextBoundSettingsStoreLive store, Lifetime lifetime, Action onChange, IDictionary`2<SettingsKey, object> keyIndices);
    private static ApartmentForNotifications GetDefaultApartmentForNotifications();
    private sealed virtual override IUntypedProperty JetBrains.Application.Settings.Calculated.Interface.IScalarSetting.GetValueLiveUntyped(IContextBoundSettingsStoreLive store, Lifetime lifetime, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IUntypedProperty JetBrains.Application.Settings.Calculated.Interface.IScalarSetting.GetValueLiveUntyped2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IProperty`1<object> GetValueAsObjectLive(IContextBoundSettingsStoreLive store, Lifetime lifetime, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IProperty`1<object> GetValueAsObjectLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IProperty`1<TValue> GetValueLive(IContextBoundSettingsStoreLive store, Lifetime lifetime, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IProperty`1<TValue> GetValueLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual TValue GetValue(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetValue(TValue value, IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual ValueTuple`2<object, bool> GetValueFromMountPointUntyped(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual string ToString();
}
internal class JetBrains.Application.Settings.Calculated.Implementation.ScalarStoredSetting`1 : ScalarSettingBase`1<TValue> {
    protected SettingIndex mySettingIndex;
    private TValue myDefaultValue;
    [CompilerGeneratedAttribute]
private ICalculatedSettingsSchema <Schema>k__BackingField;
    protected ICalculatedSettingsSchema Schema { get; }
    public SettingIndex SettingIndex { get; }
    public ScalarStoredSetting`1(SettingIndex settingIndex, TValue defaultValue, string description, ICalculatedSettingsSchema schema);
    [CompilerGeneratedAttribute]
protected ICalculatedSettingsSchema get_Schema();
    public virtual TValue GetValue(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual void SetValue(TValue value, IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual ValueTuple`2<object, bool> GetValueFromMountPointUntyped(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValueToMountPointUntyped(object value, ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices, ImmutableArray`1<ISettingsStorageMountPoint> mountPoints);
    public virtual void AdviseChange(IContextBoundSettingsStoreLive store, Lifetime lifetime, Action onChange, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual IProperty`1<TValue> GetValueLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    protected virtual IProperty`1<TValue> DoGetValueLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual SettingIndex get_SettingIndex();
}
internal class JetBrains.Application.Settings.Calculated.Implementation.ScalarUpgradableSetting`1 : ScalarStoredSetting`1<TValue> {
    private IScalarSetting[] mySourceSettings;
    private Func`2<Object[], TValue> myUpgrader;
    public ScalarUpgradableSetting`1(SettingIndex settingIndex, TValue defaultValue, IScalarSetting[] sourceSettings, Func`2<Object[], TValue> upgrader, string description, ICalculatedSettingsSchema schema);
    public virtual void AdviseChange(IContextBoundSettingsStoreLive store, Lifetime lifetime, Action onChange, IDictionary`2<SettingsKey, object> keyIndices);
    protected virtual IProperty`1<TValue> DoGetValueLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual TValue GetValue(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual void SetValue(TValue value, IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual ValueTuple`2<object, bool> GetValueFromMountPointUntyped(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices);
    private ValueTuple`3<object, bool, bool> GetValueFromMountPointUntypedEx(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices);
    public virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void Upgrade(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transaction, ILogger logger, IDictionary`2<SettingsKey, object> keyIndices, ImmutableArray`1<ISettingsStorageMountPoint> mountPoints, ISettingsStorageMountPoint previousMountPoint);
    public sealed virtual void Upgrade(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices, IStoredScalarSetting changingSourceSetting, bool isDefault);
    private ISettingsStorageMountPoint AdjustMountPointWithSourceSetting(IContextBoundSettingsStore store, ISettingsStorageMountPoint result, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.Settings.Calculated.Implementation.SettingIndex : ValueType {
    [CompilerGeneratedAttribute]
private SettingsEntry <First>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Second>k__BackingField;
    [NotNullAttribute]
public SettingsEntry First { get; }
    [CanBeNullAttribute]
public object Second { get; }
    public SettingIndex(SettingsScalarEntry first);
    public SettingIndex(SettingsIndexedEntry first);
    public SettingIndex(SettingsEntry first, object index);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public SettingsEntry get_First();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Second();
    [PureAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual bool Equals(SettingIndex other);
    [PureAttribute]
[DebuggerStepThroughAttribute]
public virtual bool Equals(object obj);
    [PureAttribute]
[DebuggerStepThroughAttribute]
public virtual int GetHashCode();
    [PureAttribute]
[DebuggerStepThroughAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
public object GetValue(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    [IsReadOnlyAttribute]
[CanBeNullAttribute]
public object GetValue(ISettingsStorageMountPoint mountPoint, ILogger logger);
    [IsReadOnlyAttribute]
public void ResetValue(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    [IsReadOnlyAttribute]
public void ResetValue(ISettingsStorageMountPoint mountPoint, ILogger logger);
    [IsReadOnlyAttribute]
public void SetValue(IContextBoundSettingsStore store, object value, IDictionary`2<SettingsKey, object> keyIndices);
    [IsReadOnlyAttribute]
public void SetValue(ISettingsStorageMountPoint mountPoint, object value, ILogger logger);
    [IsReadOnlyAttribute]
public ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Settings.Calculated.Interface.ICalculatedSettingsSchema {
    public IThreading Threading { get; }
    public abstract virtual IThreading get_Threading();
    public abstract virtual IScalarSetting`1<TEntryValue> GetScalarSetting(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    public abstract virtual IScalarSetting`1<TEntryValue> GetIndexedSetting(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex);
    public abstract virtual IStoredScalarSetting GetScalarSetting(SettingsScalarEntry scalarEntry);
    public abstract virtual IStoredScalarSetting GetIndexedSetting(SettingsIndexedEntry indexedEntry, object entryIndex);
    public abstract virtual object GetDefaultValueForIndexedSetting(SettingsIndexedEntry entry, object entryIndex);
    public abstract virtual object GetDefaultValue(SettingIndex sourceSetting);
    public abstract virtual IScalarSetting GetScalarSetting(LambdaExpression expression);
    public abstract virtual IScalarSetting GetScalarSetting(Type keyType, string instanceMemberName);
    public abstract virtual IScalarSetting GetScalarSetting(SettingIndex settingIndex);
    public abstract virtual IReadOnlyCollection`1<IScalarSetting> GetAffectedEntries(IEnumerable`1<SettingsEntry> changedEntries);
    public abstract virtual IReadOnlyCollection`1<IStoredScalarSetting> GetDependentUpgradableEntries(SettingIndex index);
}
public interface JetBrains.Application.Settings.Calculated.Interface.IScalarSetting {
    public string Name { get; }
    public string LocalName { get; }
    public Type ResultType { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_LocalName();
    public abstract virtual Type get_ResultType();
    public abstract virtual string get_Description();
    public abstract virtual object GetValueUntyped(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetValueUntyped(object value, IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void AdviseChange(IContextBoundSettingsStoreLive store, Lifetime lifetime, Action onChange, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IUntypedProperty GetValueLiveUntyped(IContextBoundSettingsStoreLive store, Lifetime lifetime, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IUntypedProperty GetValueLiveUntyped2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IProperty`1<object> GetValueAsObjectLive(IContextBoundSettingsStoreLive store, Lifetime lifetime, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IProperty`1<object> GetValueAsObjectLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
}
public interface JetBrains.Application.Settings.Calculated.Interface.IScalarSetting`1 {
    public abstract virtual TValue GetValue(IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetValue(TValue value, IContextBoundSettingsStore store, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IProperty`1<TValue> GetValueLive(IContextBoundSettingsStoreLive store, Lifetime lifetime, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual IProperty`1<TValue> GetValueLive2(IContextBoundSettingsStoreLive store, Lifetime lifetime, ApartmentForNotifications apartmentForNotifications, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.Settings.Calculated.Registration.DefaultSettingValuesProvider : object {
    [CompilerGeneratedAttribute]
private SettingsIndexedEntry <Entry>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <Provider>k__BackingField;
    internal SettingsIndexedEntry Entry { get; internal set; }
    internal Func`2<object, object> Provider { get; internal set; }
    [CompilerGeneratedAttribute]
internal SettingsIndexedEntry get_Entry();
    [CompilerGeneratedAttribute]
internal void set_Entry(SettingsIndexedEntry value);
    [CompilerGeneratedAttribute]
internal Func`2<object, object> get_Provider();
    [CompilerGeneratedAttribute]
internal void set_Provider(Func`2<object, object> value);
    public DefaultSettingValuesProvider BindTo(ISettingsSchema schema, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaExpression);
    public DefaultSettingValuesProvider SetProvider(Func`2<object, object> provider);
}
public abstract class JetBrains.Application.Settings.Calculated.Registration.ScalarCalculatedSettingDescription : ScalarSettingDescription {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    internal string Name { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    public static ScalarCalculatedSettingDescription`1<TValue> Create(ISettingsSchema schema, Expression`1<Func`2<TKeyClass, TValue>> lambdaExpression);
}
public class JetBrains.Application.Settings.Calculated.Registration.ScalarCalculatedSettingDescription`1 : ScalarCalculatedSettingDescription {
    [CompilerGeneratedAttribute]
private ScalarSettingDescription[] <SourceSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Object[], TValue> <Calculator>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TValue, Object[]> <Setter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsSchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    internal ScalarSettingDescription[] SourceSettings { get; internal set; }
    internal Func`2<Object[], TValue> Calculator { get; internal set; }
    internal Func`2<TValue, Object[]> Setter { get; internal set; }
    internal ISettingsSchema Schema { get; internal set; }
    internal string Description { get; internal set; }
    [CompilerGeneratedAttribute]
internal ScalarSettingDescription[] get_SourceSettings();
    [CompilerGeneratedAttribute]
internal void set_SourceSettings(ScalarSettingDescription[] value);
    [CompilerGeneratedAttribute]
internal Func`2<Object[], TValue> get_Calculator();
    [CompilerGeneratedAttribute]
internal void set_Calculator(Func`2<Object[], TValue> value);
    [CompilerGeneratedAttribute]
internal Func`2<TValue, Object[]> get_Setter();
    [CompilerGeneratedAttribute]
internal void set_Setter(Func`2<TValue, Object[]> value);
    [CompilerGeneratedAttribute]
internal ISettingsSchema get_Schema();
    [CompilerGeneratedAttribute]
internal void set_Schema(ISettingsSchema value);
    [CompilerGeneratedAttribute]
internal string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    internal virtual IScalarSetting CreateSetting(CalculatedSettingsSchema schema);
    internal virtual Nullable`1<SettingIndex> GetSettingIndex();
    internal virtual ScalarSettingDescription[] GetDependencies();
    public ScalarCalculatedSettingDescription`1<TValue> AddSourceSetting(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    public ScalarCalculatedSettingDescription`1<TValue> AddSourceSetting(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaExpression, TEntryIndex entryIndex);
    public ScalarCalculatedSettingDescription`1<TValue> SetCalculator(Func`2<Object[], TValue> calculator);
    public ScalarCalculatedSettingDescription`1<TValue> SetSetter(Func`2<TValue, Object[]> setter);
    public ScalarCalculatedSettingDescription`1<TValue> SetDescription(string description);
}
public abstract class JetBrains.Application.Settings.Calculated.Registration.ScalarSettingDescription : object {
    internal abstract virtual IScalarSetting CreateSetting(CalculatedSettingsSchema schema);
    internal abstract virtual Nullable`1<SettingIndex> GetSettingIndex();
    internal abstract virtual ScalarSettingDescription[] GetDependencies();
    internal static IScalarSetting[] CreateSourceSettings(CalculatedSettingsSchema schema, ScalarSettingDescription[] sourceSettings);
}
public static class JetBrains.Application.Settings.Calculated.Registration.ScalarStoredSettingDescription : object {
    public static ScalarSettingDescription Create(ISettingsSchema schema, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaExpression, TEntryIndex entryIndex, string description);
}
internal class JetBrains.Application.Settings.Calculated.Registration.ScalarStoredSettingDescription`1 : ScalarSettingDescription {
    [CompilerGeneratedAttribute]
private SettingIndex <SettingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    private SettingIndex SettingIndex { get; }
    public string Description { get; public set; }
    public ScalarStoredSettingDescription`1(SettingIndex settingIndex);
    [CompilerGeneratedAttribute]
private SettingIndex get_SettingIndex();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    internal virtual IScalarSetting CreateSetting(CalculatedSettingsSchema schema);
    internal virtual Nullable`1<SettingIndex> GetSettingIndex();
    internal virtual ScalarSettingDescription[] GetDependencies();
}
public static class JetBrains.Application.Settings.Calculated.Registration.ScalarUpgradableSettingDescription : object {
    public static ScalarUpgradableSettingDescription`1<TEntryValue> Create(ISettingsSchema schema, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    public static ScalarUpgradableSettingDescription`1<TEntryValue> Create(ISettingsSchema schema, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaExpression, TEntryIndex entryIndex);
}
public class JetBrains.Application.Settings.Calculated.Registration.ScalarUpgradableSettingDescription`1 : ScalarSettingDescription {
    [CompilerGeneratedAttribute]
private SettingIndex <SettingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ScalarSettingDescription[] <SourceSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Object[], TValue> <Upgrader>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsSchema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    internal SettingIndex SettingIndex { get; internal set; }
    internal ScalarSettingDescription[] SourceSettings { get; internal set; }
    internal Func`2<Object[], TValue> Upgrader { get; internal set; }
    internal ISettingsSchema Schema { get; internal set; }
    internal string Description { get; internal set; }
    [CompilerGeneratedAttribute]
internal SettingIndex get_SettingIndex();
    [CompilerGeneratedAttribute]
internal void set_SettingIndex(SettingIndex value);
    [CompilerGeneratedAttribute]
internal ScalarSettingDescription[] get_SourceSettings();
    [CompilerGeneratedAttribute]
internal void set_SourceSettings(ScalarSettingDescription[] value);
    [CompilerGeneratedAttribute]
internal Func`2<Object[], TValue> get_Upgrader();
    [CompilerGeneratedAttribute]
internal void set_Upgrader(Func`2<Object[], TValue> value);
    [CompilerGeneratedAttribute]
internal ISettingsSchema get_Schema();
    [CompilerGeneratedAttribute]
internal void set_Schema(ISettingsSchema value);
    [CompilerGeneratedAttribute]
internal string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    internal virtual IScalarSetting CreateSetting(CalculatedSettingsSchema schema);
    internal virtual Nullable`1<SettingIndex> GetSettingIndex();
    internal virtual ScalarSettingDescription[] GetDependencies();
    public ScalarUpgradableSettingDescription`1<TValue> AddSourceSetting(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    public ScalarUpgradableSettingDescription`1<TValue> AddSourceSetting(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaExpression, TEntryIndex entryIndex);
    public ScalarUpgradableSettingDescription`1<TValue> SetUpgrader(Func`2<Object[], TValue> upgrader);
    public ScalarUpgradableSettingDescription`1<TValue> SetDescription(string description);
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.ContextBoundSettingStoreEx : object {
    [IteratorStateMachineAttribute("JetBrains.Application.Settings.ContextBoundSettingStoreEx/<EnumerateIndexedEntry>d__0`3")]
[ExtensionAttribute]
[ObsoleteAttribute("Slow. Use EnumIndexedValues instead.")]
public static IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> EnumerateIndexedEntry(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Not reviewed yet, likely to change.")]
public static void SetIndexedValues(IContextBoundSettingsStore settingsStore, SettingsIndexedEntry entry, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Not reviewed yet, likely to change.")]
public static void SetIndexedValues(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Not reviewed yet, likely to change.")]
public static void ResetIndexedValues(IContextBoundSettingsStore settingsStore, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Not reviewed yet, likely to change.")]
public static void AppendIndexedValues(IContextBoundSettingsStore settingsStore, SettingsIndexedEntry entry, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Not reviewed yet, likely to change.")]
public static void ResetIndexedValues(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> accessor, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Not reviewed yet, likely to change.")]
public static void AppendIndexedValues(IContextBoundSettingsStore settingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> accessor, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.Settings.ContextRange : object {
    [NotNullAttribute]
public Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext;
    [CanBeNullAttribute]
public Func`3<Lifetime, DataContexts, IDataContext> FGetWideContext;
    [NotNullAttribute]
public static ContextRange ApplicationWide { get; }
    protected ContextRange(Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext, Func`3<Lifetime, DataContexts, IDataContext> FGetWideContext);
    public static ContextRange get_ApplicationWide();
    [NotNullAttribute]
public static ContextRange Smart(Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext);
    public static ContextRange Custom(Func`3<Lifetime, DataContexts, IDataContext> FGetNarrowContext, Func`3<Lifetime, DataContexts, IDataContext> FGetWideContext);
    public static ContextRange ManuallyRestrictWritesToOneContext(Func`3<Lifetime, DataContexts, IDataContext> FGetContext);
}
public class JetBrains.Application.Settings.DataContextDelegate : MulticastDelegate {
    public DataContextDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual IDataContext Invoke(Lifetime lifetime);
    public virtual IAsyncResult BeginInvoke(Lifetime lifetime, AsyncCallback callback, object object);
    public virtual IDataContext EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("12")]
public class JetBrains.Application.Settings.DefaultSettingsAttribute : ShellComponentAttribute {
    [NotNullAttribute]
public Type TypeOfRootSettingsKey;
    [PublicAPIAttribute]
public DefaultSettingsAttribute(Type typeOfRootSettingsKey, Instantiation instantiation);
}
public class JetBrains.Application.Settings.Extentions.CustomSettingsCache : SettingsCacheBase {
    public CustomSettingsCache(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheBase parentCache, Func`3<Lifetime, DataContexts, IDataContext> fContext);
}
public interface JetBrains.Application.Settings.Extentions.ICachedSettingsReader`1 {
    public SettingsKey KeyExposed { get; }
    public abstract virtual TData ReadData(Lifetime lifetime, IContextBoundSettingsStore store);
    public abstract virtual SettingsKey get_KeyExposed();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Settings.Extentions.ISettingsCache {
    [CanBeNullAttribute]
public abstract virtual TData GetData(Lifetime lifetime, ICachedSettingsReader`1<TData> reader, Action`1<TData> onFirstRead);
}
public abstract class JetBrains.Application.Settings.Extentions.SettingsCacheBase : object {
    private Lifetime myLifetime;
    private ISettingsStore mySettingsStore;
    [CanBeNullAttribute]
private SettingsCacheBase myParentCache;
    private ConcurrentDictionary`2<object, object> myCachedData;
    [CompilerGeneratedAttribute]
private Func`3<Lifetime, DataContexts, IDataContext> <FContext>k__BackingField;
    private Func`3<Lifetime, DataContexts, IDataContext> FContext { get; }
    protected SettingsCacheBase(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheBase parentCache, Func`3<Lifetime, DataContexts, IDataContext> fContext);
    protected SettingsCacheBase(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheBase parentCache, IDataContext dataContext);
    private SettingsCacheBase(Lifetime lifetime, ISettingsStore settingsStore, SettingsCacheBase parentCache);
    [CompilerGeneratedAttribute]
private Func`3<Lifetime, DataContexts, IDataContext> get_FContext();
    private static bool ContextsHaveDifferences(Func`3<Lifetime, DataContexts, IDataContext> dc1, Func`3<Lifetime, DataContexts, IDataContext> dc2, SettingsKey key);
    protected virtual bool ContextsHaveDifferencesInternal(Func`3<Lifetime, DataContexts, IDataContext> dc1, Func`3<Lifetime, DataContexts, IDataContext> dc2, SettingsKey key);
    public sealed virtual T GetData(Lifetime lifetime, ICachedSettingsReader`1<T> reader, Action`1<T> onFirstRead);
}
[TypeConverterAttribute("JetBrains.Application.Settings.GuidIndex/GuidIndexConverter")]
[ValueSerializerAttribute("JetBrains.Application.Settings.GuidIndex/GuidIndexValueSerializer")]
public class JetBrains.Application.Settings.GuidIndex : ValueType {
    private static int BytesInGuid;
    private static int DwordsInGuid;
    [FixedBufferAttribute("System.Byte", "16")]
private <myData>e__FixedBuffer myData;
    private UInt32 myDwData0;
    private UInt32 myDwData1;
    private UInt32 myDwData2;
    private UInt32 myDwData3;
    public static GuidIndex Empty;
    public static IEqualityComparer`1<GuidIndex> EqualityComparer;
    public GuidIndex(Guid guid);
    public GuidIndex(string s);
    public GuidIndex(Byte[] data);
    private GuidIndex(SerializationInfo info, StreamingContext context);
    private static GuidIndex();
    public static GuidIndex Parse(string s);
    public static GuidIndex NewGuid();
    public virtual string ToString();
    [IsReadOnlyAttribute]
public Guid ToGuid();
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(GuidIndex other);
    public sealed virtual bool Equals(GuidIndex other);
    public bool Equals(GuidIndex& other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [UsedImplicitlyAttribute]
public void Write(UnsafeWriter unwriter);
    [UsedImplicitlyAttribute]
public static GuidIndex Read(UnsafeReader unreader);
    public static bool op_Equality(GuidIndex& left, GuidIndex& right);
    public static bool op_Inequality(GuidIndex& left, GuidIndex& right);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public interface JetBrains.Application.Settings.IContextBoundSettingsStore {
    [NotNullAttribute]
public ImmutableContextBoundMountPoints InvolvedMountPoints { get; }
    [NotNullAttribute]
public ISettingsStore SettingsStore { get; }
    [NotNullAttribute]
public ISettingsSchema Schema { get; }
    public BindToContextFlags BindToContextFlags { get; }
    [PureAttribute]
public abstract virtual TEntryValue GetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    [PureAttribute]
public abstract virtual object GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual Object[] GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual object GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public abstract virtual void RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
public abstract virtual bool IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual ImmutableContextBoundMountPoints get_InvolvedMountPoints();
    public abstract virtual ISettingsStore get_SettingsStore();
    public abstract virtual ISettingsSchema get_Schema();
    public abstract virtual BindToContextFlags get_BindToContextFlags();
    [NotNullAttribute]
[PureAttribute]
public abstract virtual SettingsStoreChangeArgs GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IDictionary`2<object, object> EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
[PureAttribute]
public abstract virtual IEnumerable`1<object> EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
}
public interface JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation {
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetValueWithMountLastWideOverride(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide, bool prohibitNulls);
    public abstract virtual void SetIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value, ISettingsStorageMountPoint overrideMountLastWide);
    public abstract virtual void RemoveIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide);
}
public interface JetBrains.Application.Settings.IContextBoundSettingsStoreLive {
    [NotNullAttribute]
public ILiveMountPointsInContext InvolvedMountPointsLive { get; }
    public abstract virtual ILiveMountPointsInContext get_InvolvedMountPointsLive();
    [NotNullAttribute]
public abstract virtual IProperty`1<TValue> GetValueProperty(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
public abstract virtual IProperty`1<TValue> GetValueProperty2(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ApartmentForNotifications apartmentForNotifications);
}
public interface JetBrains.Application.Settings.IDefaultSettingsRootKey`1 {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Settings.IHaveDefaultSettings {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Settings.IHaveDefaultSettingsStream {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    [CanBeNullAttribute]
public abstract virtual Stream GetDefaultSettingsStream(Lifetime lifetime);
}
public interface JetBrains.Application.Settings.IIndexedEntry`2 {
    public abstract virtual bool ContainsIndex(TIndex index);
    [NotNullAttribute]
public abstract virtual TIndexedValue Get(TIndex index, TIndexedValue defaultvalue);
    [CanBeNullAttribute]
public abstract virtual TIndexedValue TryGet(TIndex index);
    public abstract virtual bool TryGet(TIndex index, TIndexedValue& value);
    public abstract virtual void SnapshotAndFreeze();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<TIndex> EnumPossibleIndices();
    public abstract virtual IEnumerable`1<KeyValuePair`2<TIndex, TIndexedValue>> EnumIndexedValues();
}
public interface JetBrains.Application.Settings.IIsAvailable {
    public abstract virtual bool IsAvailable(IDataContext context);
}
public interface JetBrains.Application.Settings.IIsAvailableOptimization {
    [NotNullAttribute]
public abstract virtual IIsAvailableOptimizedGroup CreateEmptyGroup();
}
public interface JetBrains.Application.Settings.IIsAvailableOptimizedGroup {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual void EvaluateItems(FrugalLocalList`1& modreq(System.Runtime.InteropServices.InAttribute) queries);
    public abstract virtual Task EvaluateItemsAsync(Lifetime lifetime, FrugalLocalList`1<AvailabilityGroupQuery> queries);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ISettingsStorageMountPoint> GetItems();
    public abstract virtual bool TryAddItem(Lifetime lifetime, ISettingsStorageMountPoint item, IIsAvailable availability);
}
public interface JetBrains.Application.Settings.ILiveMountPointsInContext {
    [NotNullAttribute]
public ISimpleSignal Changed { get; }
    [NotNullAttribute]
public string Origin { get; }
    public abstract virtual ISimpleSignal get_Changed();
    public abstract virtual string get_Origin();
    [NotNullAttribute]
public abstract virtual ImmutableContextBoundMountPoints GetCurrentMountPoints();
}
public class JetBrains.Application.Settings.Implementation.ChangeDispatchHandlerAsyncDelegate : MulticastDelegate {
    public ChangeDispatchHandlerAsyncDelegate(object object, IntPtr method);
    public virtual Task Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public abstract class JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase : object {
    private ISettingsChangeDispatch myChangeDispatch;
    private Func`2<KeyPathComponents, bool> myFCreateIndexedKey_DefineKey;
    private Func`2<KeyPathComponents, bool> myFFillKeyPathComponentsAndCheckIsDefined_CheckKey;
    private SetFlags myIsIgnoringReadonlyFlag;
    [ThreadStaticAttribute]
[CanBeNullAttribute]
private static KeyPathComponentsCached myKeyPathComponentsCache;
    private OuterLifetime myLifetime;
    protected IExceptionThrowingLogger myLogger;
    [NotNullAttribute]
private ISettingsStore myStore;
    private BindToContextFlags myFlags;
    [CanBeNullAttribute]
private ISettingsStorageTransactionContext myTransaction;
    private BindToContextFlags JetBrains.Application.Settings.IContextBoundSettingsStore.BindToContextFlags { get; }
    private ImmutableContextBoundMountPoints JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints { get; }
    [NotNullAttribute]
protected static KeyPathComponentsCached KeyPathComponentsCache { get; }
    private ISettingsSchema JetBrains.Application.Settings.IContextBoundSettingsStore.Schema { get; }
    private ISettingsStore JetBrains.Application.Settings.IContextBoundSettingsStore.SettingsStore { get; }
    protected ContextBoundSettingsStoreBase(OuterLifetime lifetime, ISettingsStore store, BindToContextFlags flags, ISettingsChangeDispatch changedispatch, ILogger logger);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private bool CreateIndexedKey_DefineKey(KeyPathComponents keyPathComponents);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
private sealed virtual override IEnumerable`1<object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
    private sealed virtual override IDictionary`2<object, object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined_CheckKey(KeyPathComponents keyPathComponents);
    private bool FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(KeyPathComponents keyPathComponents, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private bool FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices);
    private void FillKeyPathComponentsWithoutChecking(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override ISettingsStorageMountPoint JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation.FindLayerWhereSettingValueComeFrom(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override ISettingsStorageMountPoint JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation.FindLayerWhereSettingValueComeFrom(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override object JetBrains.Application.Settings.IContextBoundSettingsStore.GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
protected abstract virtual ImmutableContextBoundMountPoints GetInvolvedMountPointsCore();
    private sealed virtual override BindToContextFlags JetBrains.Application.Settings.IContextBoundSettingsStore.get_BindToContextFlags();
    private sealed virtual override SettingsStoreChangeArgs JetBrains.Application.Settings.IContextBoundSettingsStore.GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    [NotNullAttribute]
protected abstract virtual ImmutableContextBoundMountPoints GetUpToDateMountsInfoForStorageOperations();
    private sealed virtual override TEntryValue JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    private sealed virtual override object JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override Object[] JetBrains.Application.Settings.IContextBoundSettingsStore.GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override ImmutableContextBoundMountPoints JetBrains.Application.Settings.IContextBoundSettingsStore.get_InvolvedMountPoints();
    private sealed virtual override bool JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    protected static KeyPathComponentsCached get_KeyPathComponentsCache();
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void RemoveIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide);
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override ISettingsSchema JetBrains.Application.Settings.IContextBoundSettingsStore.get_Schema();
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public sealed virtual void SetIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value, ISettingsStorageMountPoint overrideMountLastWide);
    private void SetIndexedValueCore(KeyPathComponents keyPathComponents, SettingsIndexedEntry entry, object entryIndex, object value, bool isRemovingIndexedValue, ISettingsStorageMountPoint overrideMountLastWide);
    private sealed virtual override ISettingsStore JetBrains.Application.Settings.IContextBoundSettingsStore.get_SettingsStore();
    private sealed virtual override void JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValueWithMountLastWideOverride(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide, bool prohibitNulls);
}
public class JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive : ContextBoundSettingsStoreBase {
    private static TimeSpan myTimeoutSyncLock;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LocalLazy`2<ClientInfo, ValueTuple`4<Lifetime, ISettingsStore, ILiveMountPointsInContext, SettingsStoreChangeSink>> myChangesClient;
    private Lifetime myLifetime;
    [NotNullAttribute]
private ILiveMountPointsInContext myMountsInfo;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LocalLazy`2<ValuePropertiesSupport, ValueTuple`2<ContextBoundSettingsStoreLive, ITaskHost>> myValuePropertiesSupport;
    private ISignal`1<SettingsStoreChangeArgs> JetBrains.Application.Settings.ISettingsChangedEventSource.Changed { get; }
    private ILiveMountPointsInContext JetBrains.Application.Settings.IContextBoundSettingsStoreLive.InvolvedMountPointsLive { get; }
    internal ContextBoundSettingsStoreLive(Lifetime lifetime, ISettingsStore store, ILiveMountPointsInContext mountsinfo, BindToContextFlags flags, SettingsStoreChangeSink changes, ISettingsChangeDispatch changedispatch, ITaskHost tasker, ILogger logger);
    private static ContextBoundSettingsStoreLive();
    public static ClientInfo OnLazyRegisterChangesClient(ValueTuple`4<Lifetime, ISettingsStore, ILiveMountPointsInContext, SettingsStoreChangeSink> t);
    private sealed virtual override void JetBrains.Application.Settings.ISettingsChangedEventSource.AdviseAsyncChanged(Lifetime lifetime, AsyncChangedSinkDelegate sink);
    private sealed virtual override ISignal`1<SettingsStoreChangeArgs> JetBrains.Application.Settings.ISettingsChangedEventSource.get_Changed();
    protected virtual ImmutableContextBoundMountPoints GetInvolvedMountPointsCore();
    protected virtual ImmutableContextBoundMountPoints GetUpToDateMountsInfoForStorageOperations();
    private sealed virtual override IProperty`1<TValue> JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override IProperty`1<TValue> JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty2(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ApartmentForNotifications apartmentForNotifications);
    private sealed virtual override ILiveMountPointsInContext JetBrains.Application.Settings.IContextBoundSettingsStoreLive.get_InvolvedMountPointsLive();
}
public class JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreTransient : ContextBoundSettingsStoreBase {
    [NotNullAttribute]
private ImmutableContextBoundMountPoints myMountsInfo;
    public ContextBoundSettingsStoreTransient(OuterLifetime lifetime, ISettingsStore store, ImmutableContextBoundMountPoints mountsinfo, BindToContextFlags flags, ISettingsChangeDispatch changedispatch, ILogger logger);
    protected virtual ImmutableContextBoundMountPoints GetInvolvedMountPointsCore();
    protected virtual ImmutableContextBoundMountPoints GetUpToDateMountsInfoForStorageOperations();
}
public class JetBrains.Application.Settings.Implementation.DefaultIsAvailableOptimizedGroup : object {
    [NotNullAttribute]
private IIsAvailable myAvailability;
    private bool myIsAdded;
    [NotNullAttribute]
private ISettingsStorageMountPoint myItem;
    private bool JetBrains.Application.Settings.IIsAvailableOptimizedGroup.IsEmpty { get; }
    public DefaultIsAvailableOptimizedGroup(ISettingsStorageMountPoint item, IIsAvailable availability);
    private sealed virtual override void JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItems(FrugalLocalList`1& modreq(System.Runtime.InteropServices.InAttribute) queries);
    private sealed virtual override Task JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItemsAsync(Lifetime lifetime, FrugalLocalList`1<AvailabilityGroupQuery> queries);
    [IteratorStateMachineAttribute("JetBrains.Application.Settings.Implementation.DefaultIsAvailableOptimizedGroup/<JetBrains-Application-Settings-IIsAvailableOptimizedGroup-GetItems>d__6")]
private sealed virtual override IEnumerable`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IIsAvailableOptimizedGroup.GetItems();
    private sealed virtual override bool JetBrains.Application.Settings.IIsAvailableOptimizedGroup.get_IsEmpty();
    private sealed virtual override bool JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(Lifetime lifetime, ISettingsStorageMountPoint item, IIsAvailable availability);
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem>b__9_0();
    [CompilerGeneratedAttribute]
private void <JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem>b__9_1();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints : object {
    private InternKeyPathComponent myInterned;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ICollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private ICollectionEvents`1<ISettingsStorage> myStorages;
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    public DefaultSettingsMountPoints(Lifetime lifetime, ISettingsLogger logging, IParallelImmutableList`1<IHaveDefaultSettingsStream> providersStream, IParallelImmutableList`1<IHaveDefaultSettings> providersCode, InternKeyPathComponent interned, ISettingsSchema schema, Tweaks tweaks);
    [ObsoleteAttribute("This is now very suboptimal. Implement IHaveDefaultSettingsStream and mark with DefaultSettingsAttribute.")]
public void LoadFromResources(Lifetime lifetime, Assembly assembly, string resname);
    [ObsoleteAttribute("This is now very suboptimal. Implement IHaveDefaultSettingsStream and mark with DefaultSettingsAttribute.")]
public void LoadFromStream(Lifetime lifetime, string name, Stream stream, StorageCacheIdentity identity);
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    private static StorageCacheIdentity TryGetIdentityFromStreamer(IHaveDefaultSettingsStream streamer, Stream stream);
}
[ObsoleteAttribute("Use the generic version of the class wherever possible! A default settings provider is now required to specify the root key, and the generic base class does it automatically.")]
public abstract class JetBrains.Application.Settings.Implementation.HaveDefaultSettings : object {
    [CompilerGeneratedAttribute]
private ISettingsSchema <settingsSchema>P;
    [CompilerGeneratedAttribute]
private ILogger <logger>P;
    public string Name { get; }
    protected HaveDefaultSettings(ISettingsSchema settingsSchema, ILogger logger);
    [ObsoleteAttribute("Use another overload.")]
protected HaveDefaultSettings(ILogger logger, ISettingsSchema settingsSchema);
    protected void SetValue(ISettingsStorageMountPoint mount, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    protected void SetIndexedValue(ISettingsStorageMountPoint mount, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaExpression, TEntryIndex index, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    protected void SetIndexedValue(ISettingsStorageMountPoint mount, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndexValue, TEntryIndexValue>>> lambdaExpression, TEntryIndexValue indexValue, IDictionary`2<SettingsKey, object> keyIndices);
    protected void SetIndexedKey(ISettingsStorageMountPoint mount, TKey key, object keyIndex);
    protected void SetRawStorageKeys(ISettingsStorageMountPoint mount, IEnumerable`1<ValueTuple`2<string, object>> entries);
    public abstract virtual void InitDefaultSettings(ISettingsStorageMountPoint mountPoint);
    public abstract virtual string get_Name();
}
public abstract class JetBrains.Application.Settings.Implementation.HaveDefaultSettings`1 : HaveDefaultSettings {
    protected HaveDefaultSettings`1(ISettingsSchema settingsSchema, ILogger logger);
}
public class JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints : object {
    public static ImmutableContextBoundMountPoints Empty;
    [CanBeNullAttribute]
public ISettingsStorageMountPoint LowestPriorityWritableMount;
    public ImmutableArray`1<ISettingsStorageMountPoint> Mounts;
    public ImmutableContextBoundMountPoints(ImmutableArray`1<ISettingsStorageMountPoint> mounts, ISettingsStorageMountPoint lowestPriorityWritableMount);
    private static ImmutableContextBoundMountPoints();
    public SettingsStorageOnMountPoints AsCompositeStorage(IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static ImmutableContextBoundMountPoints Create(ISettingsStorageMountPoint[] mounts);
    [NotNullAttribute]
public static ImmutableContextBoundMountPoints Create(ISettingsStorageMountPoint mount);
    [NotNullAttribute]
public static ImmutableContextBoundMountPoints Create(ISettingsStorageMountPoint mountA, ISettingsStorageMountPoint mountB);
    [NotNullAttribute]
public static ImmutableContextBoundMountPoints CreateRange(ImmutableArray`1<ISettingsStorageMountPoint> mounts, ISettingsStorageMountPoint lowestPriorityWritableMount);
    [NotNullAttribute]
public static ImmutableContextBoundMountPoints CreateRange(IEnumerable`1<ISettingsStorageMountPoint> mounts, ISettingsStorageMountPoint lowestPriorityWritableMount);
    public void Deconstruct(ImmutableArray`1& mounts, ISettingsStorageMountPoint& lowestPriorityWritableMount);
    public sealed virtual bool Equals(ImmutableContextBoundMountPoints other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static ImmutableContextBoundMountPoints ChooseLowestPriorityWritable(List`1<ISettingsStorageMountPoint> mountsNarrow, List`1<ISettingsStorageMountPoint> mountsWide, BindToContextFlags flags, bool isEmptyNarrowContextAllowed, ILogger logger);
    [NotNullAttribute]
internal static ImmutableContextBoundMountPoints FromContextRange(ContextRange contextRange, ISettingsStore store, BindToContextFlags flags, bool isEmptyNarrowContextAllowed, ILogger logger);
    [AsyncStateMachineAttribute("JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints/<FromContextRangeAsync>d__16")]
[NotNullAttribute]
internal static Task`1<ImmutableContextBoundMountPoints> FromContextRangeAsync(OuterLifetime lifetime, ContextRange contextRange, ISettingsStore store, BindToContextFlags flags, bool isEmptyNarrowContextAllowed, ILogger logger);
    private static ValueTuple`3<FrugalLocalList`1<AvailabilityGroupQuery>, List`1<ISettingsStorageMountPoint>, List`1<ISettingsStorageMountPoint>> MakeFilteringQueryForContextRange(ContextRange contextRange, ISettingsStore store);
}
public class JetBrains.Application.Settings.Implementation.IsAvailable : object {
    [NotNullAttribute]
public static IIsAvailable Always;
    [NotNullAttribute]
public static IIsAvailable Never;
    private Func`2<IDataContext, bool> myFIsAvailable;
    public IsAvailable(Func`2<IDataContext, bool> FIsAvailable);
    private static IsAvailable();
    [NotNullAttribute]
public static IIsAvailable Create(Func`2<IDataContext, bool> FIsAvailable);
    private sealed virtual override bool JetBrains.Application.Settings.IIsAvailable.IsAvailable(IDataContext context);
}
public class JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1 : object {
    private static int myReadLockTimeoutMs;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    [NotNullAttribute]
public DataConstant`1<TDataConstant> Constant;
    [NotNullAttribute]
public TDataConstant Value;
    public IsAvailableByDataConstant`1(Lifetime lifetime, DataConstant`1<TDataConstant> constant, TDataConstant value, IShellLocks locks);
    private static IsAvailableByDataConstant`1();
    private sealed virtual override IIsAvailableOptimizedGroup JetBrains.Application.Settings.IIsAvailableOptimization.CreateEmptyGroup();
    private sealed virtual override bool JetBrains.Application.Settings.IIsAvailable.IsAvailable(IDataContext context);
}
public interface JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch {
    [NotNullAttribute]
public Task CurrentActivity { get; }
    public abstract virtual Task get_CurrentActivity();
    [NotNullAttribute]
public abstract virtual RequestChangeDispatchDelegate RegisterForDispatch(Lifetime lifetime, ChangeDispatchHandlerAsyncDelegate λOnDispatchAsync);
    [MustUseReturnValueAttribute]
public abstract virtual LocalDisposable SuppressThreadDispatch();
}
public class JetBrains.Application.Settings.Implementation.LazyContextBoundSettingsStore : object {
    private InterruptibleLazy`1<IContextBoundSettingsStore> myLazy;
    public ImmutableContextBoundMountPoints InvolvedMountPoints { get; }
    public ISettingsStore SettingsStore { get; }
    public ISettingsSchema Schema { get; }
    private BindToContextFlags JetBrains.Application.Settings.IContextBoundSettingsStore.BindToContextFlags { get; }
    public LazyContextBoundSettingsStore(Func`1<IContextBoundSettingsStore> func);
    public sealed virtual TEntryValue GetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    public sealed virtual object GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual Object[] GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual object GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public sealed virtual void RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual bool IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual ImmutableContextBoundMountPoints get_InvolvedMountPoints();
    public sealed virtual ISettingsStore get_SettingsStore();
    public sealed virtual ISettingsSchema get_Schema();
    public sealed virtual SettingsStoreChangeArgs GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IDictionary`2<object, object> EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IEnumerable`1<object> EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
    public sealed virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValueWithMountLastWideOverride(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide, bool prohibitNulls);
    public sealed virtual void SetIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value, ISettingsStorageMountPoint overrideMountLastWide);
    public sealed virtual void RemoveIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide);
    private sealed virtual override BindToContextFlags JetBrains.Application.Settings.IContextBoundSettingsStore.get_BindToContextFlags();
}
internal class JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange : object {
    private ISimpleSignal myChanged;
    private ContextRange myContextRange;
    private ImmutableContextBoundMountPoints myCurrentMountsList;
    private BindToContextFlags myFlags;
    private bool myIsMountsListUpToDate;
    private Lifetime myLifetime;
    private LockObject myLockSetMountsList;
    private ILogger myLogger;
    private ISettingsStore myStore;
    private ISimpleSignal JetBrains.Application.Settings.ILiveMountPointsInContext.Changed { get; }
    private string JetBrains.Application.Settings.ILiveMountPointsInContext.Origin { get; }
    public LiveMountPointsInContextRange(Lifetime lifetime, ContextRange contextrange, ISettingsStore store, BindToContextFlags flags, ISettingsChangeDispatch changeDispatch, ILogger logger);
    private sealed virtual override ISimpleSignal JetBrains.Application.Settings.ILiveMountPointsInContext.get_Changed();
    private void ForceUpdateNow();
    private sealed virtual override ImmutableContextBoundMountPoints JetBrains.Application.Settings.ILiveMountPointsInContext.GetCurrentMountPoints();
    [AsyncStateMachineAttribute("JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange/<OnMountSetChangeDispatchedAsync>d__14")]
private Task OnMountSetChangeDispatchedAsync();
    private sealed virtual override string JetBrains.Application.Settings.ILiveMountPointsInContext.get_Origin();
    private bool TryPromoteNewMountList(ImmutableContextBoundMountPoints oldsnapshot, ImmutableContextBoundMountPoints newsnapshot);
    [CompilerGeneratedAttribute]
private ImmutableContextBoundMountPoints <ForceUpdateNow>b__12_0();
}
public class JetBrains.Application.Settings.Implementation.Provider`1 : object {
    private ICollectionEvents`1<TItem> myItems;
    [NotNullAttribute]
public ICollectionEvents`1<TItem> Items { get; }
    public Provider`1(Lifetime lifetime, string name);
    public sealed virtual ICollectionEvents`1<TItem> get_Items();
}
public static class JetBrains.Application.Settings.Implementation.ReadonlyXmlStreamSettingsStorage : object {
    [NotNullAttribute]
public static ISettingsStorage ReadFromXmlStream(Lifetime lifetime, string name, Stream stream, ILogger logger, InternKeyPathComponent interned, StorageCacheIdentity identity);
}
public class JetBrains.Application.Settings.Implementation.RequestChangeDispatchDelegate : MulticastDelegate {
    public RequestChangeDispatchDelegate(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class JetBrains.Application.Settings.Implementation.ScalarSettingsStoreAccess : object {
    public static void SetValue(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, object value, bool isWritingDefaultValues, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void ResetValue(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    [CanBeNullAttribute]
public static ValueTuple`2<object, bool> GetValue(ISettingsStorageMountPoint mount, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object GetIndexedValue(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    public static void SetIndexedValue(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, object value, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void RemoveIndexedValue(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, bool isForcingRemovalRecord, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static void SetIndexedValueCore(ISettingsStorageMountPoint mount, SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices, object value, bool isForcingRemovalRecord, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    public static bool IsIndexedKeyDefined(ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void CreateIndexedKey(ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    public static void DeleteIndexedKey(ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, bool isForcingRemovalRecord, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, ISettingsStorageMountPoint mount, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, IExceptionThrowingLogger logger);
    private static bool FillKeyPathComponentsAndCheckIsDefined(KeyPathComponents keyPathComponents, ISettingsStorageMountPoint mount, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static bool FillKeyPathComponentsAndCheckIsDefined_CheckKey(KeyPathComponents keyPathComponents, ISettingsStorageMountPoint mount, ISettingsStorageTransactionContext transaction, ILogger logger);
    private static void FillKeyPathComponentsWithoutChecking(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices, IExceptionThrowingLogger logger);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.Implementation.SettingsChangeDispatch : object {
    private static TaskCompletionSource`1<Missing> myAlwaysCompletedTask;
    private static IEqualityComparer`1<ChangeDispatchHandlerAsyncDelegate> myDelegateComparer;
    public static TimeSpan OptionChangeGroupingInterval;
    private static TimeSpan TimeLimitForAsyncChangeClients;
    [NotNullAttribute]
private TaskCompletionSource`1<Missing> myCurrentActivityTask;
    private FreeThreadedGroupingEvent myGeventSettingsChanged;
    private JetHashSet`1<ChangeDispatchHandlerAsyncDelegate> myHashDispatchRequests;
    private bool myIsAsyncProhibited;
    private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    private LockObject myLockDispatchRequests;
    private ILogger myLogger;
    [NotNullAttribute]
private SemaphoreSlim mySemaDispatchExclusively;
    private Boxed`1<int> mySuspendCount;
    [NotNullAttribute]
private Action myΛResumeThreadDispatch;
    public Task CurrentActivity { get; }
    public SettingsChangeDispatch(Lifetime lifetime, ISettingsLogger settingsLogger, IThreading threading, Nullable`1<bool> isAsyncProhibited);
    private static SettingsChangeDispatch();
    public sealed virtual Task get_CurrentActivity();
    [AsyncStateMachineAttribute("JetBrains.Application.Settings.Implementation.SettingsChangeDispatch/<DispatchChangesAsync>d__18")]
private Task DispatchChangesAsync();
    private void DispatchRequested(ChangeDispatchHandlerAsyncDelegate λOnDispatchAsync);
    protected virtual void GroupingEventRequestDispatch();
    private void OnResumeThreadDispatch();
    private sealed virtual override RequestChangeDispatchDelegate JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.RegisterForDispatch(Lifetime lifetime, ChangeDispatchHandlerAsyncDelegate λOnDispatchAsync);
    [AsyncStateMachineAttribute("JetBrains.Application.Settings.Implementation.SettingsChangeDispatch/<ServiceModeCommitPendingChangesAsync>d__23")]
protected Task ServiceModeCommitPendingChangesAsync();
    private sealed virtual override LocalDisposable JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.SuppressThreadDispatch();
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_1();
}
public static class JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization : object {
    [CanBeNullAttribute]
public static object DeserializeStorageValueToEntryValue(SettingsScalarEntry entry, object valueInStorage, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object DeserializeStorageValueToEntryValue(SettingsIndexedEntry entry, object valueInStorage, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object SerializeEntryValueToStorageValue(SettingsScalarEntry entry, object valueInEntry, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static object SerializeEntryValueToStorageValue(SettingsIndexedEntry entry, object valueInEntry, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static object SerializeEntryIndexToStorageValue(SettingsIndexedEntry entry, object valueIndexAtRuntime, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object DeserializeStorageKeyToEntryIndex(SettingsIndexedEntry entry, string subkey, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static object DeserializeStorageKeyToKeyIndex(SettingsIndexedKey key, string subkey, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static string SerializeEntryIndexToStorageKey(SettingsIndexedEntry entry, object valueOfIndex, IExceptionThrowingLogger logger);
    [CanBeNullAttribute]
public static string SerializeKeyIndexToStorageKey(SettingsIndexedKey key, object valueOfIndex, IExceptionThrowingLogger logger);
}
public class JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint : object {
    private ISettingsStorage myStorage;
    private MountPath myPathInStorage;
    private double myPriority;
    private IIsAvailable myIsAvailable;
    private string myName;
    private MountPointFlags myFlags;
    private IPropertyBag myMetadata;
    private IIsAvailable JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable { get; }
    private string JetBrains.Application.Settings.ISettingsStorageMountPoint.Name { get; }
    private double JetBrains.Application.Settings.ISettingsStorageMountPoint.Priority { get; }
    private ISettingsStorage JetBrains.Application.Settings.ISettingsStorageMountPoint.Storage { get; }
    private MountPath JetBrains.Application.Settings.ISettingsStorageMountPoint.PathInStorage { get; }
    private MountPointFlags JetBrains.Application.Settings.ISettingsStorageMountPoint.Flags { get; }
    private IPropertyBag JetBrains.Application.Settings.ISettingsStorageMountPoint.Metadata { get; }
    public SettingsStorageMountPoint(ISettingsStorage storage, MountPath pathInStorage, MountPointFlags flags, double priority, IIsAvailable isAvailable, string name);
    private sealed virtual override IIsAvailable JetBrains.Application.Settings.ISettingsStorageMountPoint.get_IsAvailable();
    private sealed virtual override string JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Name();
    private sealed virtual override double JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Priority();
    private sealed virtual override ISettingsStorage JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Storage();
    private sealed virtual override MountPath JetBrains.Application.Settings.ISettingsStorageMountPoint.get_PathInStorage();
    public virtual string ToString();
    private sealed virtual override MountPointFlags JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Flags();
    private sealed virtual override IPropertyBag JetBrains.Application.Settings.ISettingsStorageMountPoint.get_Metadata();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints : object {
    public static SettingsStorageMountPoints Empty;
    private static Func`2<MountsGrouped, double> myFGetGroupPriority;
    private Lifetime myLifetimeComponent;
    private SpinWaitLock myLockMountsGroupedByAvailabilityLocked;
    private IExceptionThrowingLogger myLogger;
    private IList`1<MountsGrouped> myMountsGroupedByAvailabilityLocked;
    private MountsGrouped[] myMountsGroupedByAvailabilityLockFree;
    private SelfCheckControl mySelfCheckControl;
    [NotNullAttribute]
public IEnumerable`1<ISettingsStorageMountPoint> EnumMountPointsLiveOrdered;
    [NotNullAttribute]
public ICollectionEvents`1<ISettingsStorageMountPoint> MountPoints;
    public SettingsStorageMountPoints(Lifetime lifetime, IEnumerable`1<IProvider`1<ISettingsStorageMountPoint>> mounts, IThreading threading, ISettingsLogger logging, SelfCheckControl selfCheckControl);
    private static SettingsStorageMountPoints();
    [NotNullAttribute]
public List`1<ISettingsStorageMountPoint> FilterMountsByContext(IDataContext context);
    public void FilterMountsByContext(FrugalLocalList`1<AvailabilityGroupQuery> queries);
    [AsyncStateMachineAttribute("JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints/<FilterMountsByContextAsync>d__14")]
[NotNullAttribute]
public Task`1<List`1<ISettingsStorageMountPoint>> FilterMountsByContextAsync(Lifetime lifetime, FrugalLocalList`1<AvailabilityGroupQuery> queries);
    private void AssertConsistentSlow();
    [NotNullAttribute]
private MountsGrouped[] GetMountsGroupedByAvailabilityLockedCold();
    private void Init_ForEachMount(Lifetime lifetime, ISettingsStorageMountPoint mount, IThreading threading, IExceptionThrowingLogger logger);
    private void Init_ForEachMount_AddToNewGroup(Lifetime lifetime, ISettingsStorageMountPoint mount, int nInsertNewGroupAtIndex, Boxed`1<IIsAvailableOptimizedGroup> groupAddedToBox);
    private void Init_ForEachMount_CleanupEmptyGroup(ISettingsStorageMountPoint mount, ILogger logger, Boxed`1<IIsAvailableOptimizedGroup> groupAddedToBox);
    private void Init_ForEachMount_TryAddToExistingGroup(Lifetime lifetime, ISettingsStorageMountPoint mount, IExceptionThrowingLogger logger, Boxed`1<IIsAvailableOptimizedGroup> groupAddedToBox, Int32& nInsertNewGroupAtIndex);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints : ValueType {
    private IExceptionThrowingLogger myLogger;
    private ImmutableContextBoundMountPoints myMountsInfo;
    private string myName;
    public string Name { get; }
    public SettingsStorageOnMountPoints(string name, ImmutableContextBoundMountPoints mountsinfo, IExceptionThrowingLogger logger);
    public sealed virtual string get_Name();
    [ObsoleteAttribute]
public void CopyToObsolete(ISettingsStorageMountPoint mountTarget, ISettingsStorageTransactionContext transactionThis, ISettingsStorageTransactionContext transactionTarget, ILogger logger, string sRootKey);
    [NotNullAttribute]
[ObsoleteAttribute]
public ICollection`1<string> EnumKeysObsolete(string keyPrefix, ISettingsStorageTransactionContext transaction);
    public void EnumRaw(KeyPathComponents keyPathComponentsWithEmptySlot, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    [ObsoleteAttribute("Use an overload with key path components.")]
public void EraseObsolete(string key, bool isIgnoringReadonlyFlag, ISettingsStorageTransactionContext transaction);
    public void EraseRaw(KeyPathComponents keyPathComponentsWithEmptySlot, bool isIgnoringReadonlyFlag, ISettingsStorageTransactionContext transaction);
    public void EraseSlow(KeyPathComponents keyPathComponentsExact, bool isIgnoringReadonlyFlag, ISettingsStorageTransactionContext transaction);
    [ObsoleteAttribute("Use an overload with key path components.")]
public ValueFromMount GetExObsolete(string key, ISettingsStorageTransactionContext transaction);
    public ValueFromMount GetExRaw(KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
    [CanBeNullAttribute]
[ObsoleteAttribute]
public object GetObsolete(string key, ISettingsStorageTransactionContext transaction);
    [CanBeNullAttribute]
public object GetRaw(KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction);
    public static bool IsMountWritable(ISettingsStorageMountPoint mount, bool isIgnoringReadonlyFlag);
    [ObsoleteAttribute]
public void SetObsolete(string key, object value, bool isIgnoreReadonlyFlag, ISettingsStorageTransactionContext transaction);
    public void SetRaw(KeyPathComponents keyPathComponentsWithEmptySlot, object value, bool isIgnoreReadonlyFlag, ISettingsStorageTransactionContext transaction);
    public SetSmartResult SetSmartRaw(KeyPathComponents keyPathComponentsWithEmptySlot, object valuePrimary, SetFlags flags, ISettingsStorageTransactionContext transaction, ISettingsStorageMountPoint overrideMountLastWide, bool prohibitNulls);
    public SetSmartResult SetSmartRaw(KeyPathComponents keyPathComponentsWithEmptySlot, object valuePrimary, SetFlags flags, ISettingsStorageTransactionContext transaction, KeyPathComponent& componentSecondary, object valueSecondary, ISettingsStorageMountPoint overrideMountLastWide, bool prohibitNulls);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
}
public class JetBrains.Application.Settings.Implementation.SettingsStore : object {
    private SettingsStoreChangeSink myChangeSink;
    private ClientInfo myChangeSinkAllMountsClient;
    [NotNullAttribute]
private DataContexts myDataContexts;
    private Lifetime myLifetime;
    private ILogger myLogger;
    private SettingsStorageMountPoints myMountPoints;
    [NotNullAttribute]
private ISettingsSchema mySchema;
    [NotNullAttribute]
private ITaskHost myTaskHost;
    [CanBeNullAttribute]
private ISettingsStorageTransactionContext myTransactionContext;
    public ISignal`1<SettingsStoreChangeArgs> Changed { get; }
    [NotNullAttribute]
public SettingsStorageMountPoints MountPoints { get; }
    [NotNullAttribute]
private DataContexts JetBrains.Application.Settings.ISettingsStore.DataContexts { get; }
    private ISettingsStorageTransactionContext JetBrains.Application.Settings.ISettingsStore.MountingPointsTransaction { get; }
    [NotNullAttribute]
private ISettingsSchema JetBrains.Application.Settings.ISettingsStore.Schema { get; }
    public SettingsStore(Lifetime lifetime, ISettingsSchema schema, SettingsStorageMountPoints mountpoints, ISettingsStorageTransactionContext transaction, DataContexts dataContexts, ISettingsChangeDispatch changedispatch, ITaskHost tasker, ISettingsLogger logging);
    [EditorBrowsableAttribute("1")]
public SettingsStore(Lifetime lifetime, ISettingsSchema schema, SettingsStorageMountPoints mountpoints, ISettingsStorageTransactionContext transaction, DataContexts dataContexts, ISettingsChangeDispatch changedispatch, IThreading threading, ISettingsLogger logging);
    public sealed virtual ISignal`1<SettingsStoreChangeArgs> get_Changed();
    public sealed virtual SettingsStorageMountPoints get_MountPoints();
    public virtual string ToString();
    private sealed virtual override void JetBrains.Application.Settings.ISettingsChangedEventSource.AdviseAsyncChanged(Lifetime lifetime, AsyncChangedSinkDelegate sink);
    private sealed virtual override IContextBoundSettingsStoreLive JetBrains.Application.Settings.ISettingsStore.BindToContextLive(Lifetime lifetime, ContextRange contextrange, BindToContextFlags flags);
    private sealed virtual override IContextBoundSettingsStore JetBrains.Application.Settings.ISettingsStore.BindToContextTransient(ContextRange contextrange, BindToContextFlags flags);
    private sealed virtual override IContextBoundSettingsStoreLive JetBrains.Application.Settings.ISettingsStore.BindToMountPointsLive(Lifetime lifetime, ILiveMountPointsInContext mounts, BindToContextFlags flags);
    private sealed virtual override IContextBoundSettingsStore JetBrains.Application.Settings.ISettingsStore.BindToMountPointsTransient(ImmutableContextBoundMountPoints mounts, BindToContextFlags flags);
    private sealed virtual override void JetBrains.Application.Settings.ISettingsStoreInTransaction.CommitTransaction();
    private sealed virtual override ISettingsStoreInTransaction JetBrains.Application.Settings.ISettingsStore.CreateNestedTransaction(Lifetime lifetime, string name);
    [NotNullAttribute]
private static IProperty`1<ImmutableArray`1<ISettingsStorageMountPoint>> Ctor_ImmutableMountPointsFromLiveList(Lifetime lifetime, ICollectionEvents`1<ISettingsStorageMountPoint> collevents);
    [DebuggerStepThroughAttribute]
private sealed virtual override DataContexts JetBrains.Application.Settings.ISettingsStore.get_DataContexts();
    private sealed virtual override ISettingsStorageTransactionContext JetBrains.Application.Settings.ISettingsStore.get_MountingPointsTransaction();
    private sealed virtual override void JetBrains.Application.Settings.ISettingsStoreInTransaction.RevertTransaction();
    [DebuggerStepThroughAttribute]
private sealed virtual override ISettingsSchema JetBrains.Application.Settings.ISettingsStore.get_Schema();
}
public class JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink : object {
    private RequestChangeDispatchDelegate myFRequestDispatch;
    private Lifetime myLifetime;
    private SpinWaitLockRef myLock;
    private ILogger myLogger;
    private OneToSetMap`2<ClientInfo, KeyPathComponents> myMapClientsToSimpleChanges;
    private OneToSetMap`2<ClientInfo, ISettingsStorageMountPoint> myMapClientsToWholeMountChanges;
    private OneToSetMap`2<ISettingsStorageMountPoint, ClientInfo> myMapMountToClients;
    private ISettingsStore myStore;
    [NotNullAttribute]
public ISettingsChangeDispatch SettingsChangeDispatch;
    public SettingsStoreChangeSink(Lifetime lifetime, ISettingsStore store, ISettingsStorageTransactionContext transaction, ISettingsChangeDispatch changedispatch, ILogger logger);
    [NotNullAttribute]
public ClientInfo RegisterClientForMounts(Lifetime lifetime, object originator, IEnumerable`1<ISettingsStorageMountPoint> mounts);
    [NotNullAttribute]
public ClientInfo RegisterClientForMountsLive(Lifetime lifetime, object originator, IProperty`1<ImmutableArray`1<ISettingsStorageMountPoint>> mountsLive);
    [AsyncStateMachineAttribute("JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink/<DispatchChanges>d__12")]
private Task DispatchChanges();
    private void Init_Logging(Lifetime lifetime, ILogger logger, ISettingsStore store);
    private void SinkMountChanges(Lifetime lifetime, ISettingsStorageMountPoint mount, ISettingsStorageTransactionContext transaction, ILogger logger);
    private void TrackLiveMountPointsForClient(Lifetime lifetime, ClientInfo client, IProperty`1<ImmutableArray`1<ISettingsStorageMountPoint>> mounts);
    private void TrackLiveMountPointsForClient_OnAdd(ClientInfo client, ISettingsStorageMountPoint mount, bool isWithAddAcknowledgement);
    private void TrackLiveMountPointsForClient_OnRemove(ClientInfo client, ISettingsStorageMountPoint mount);
}
[ShellComponentAttribute("266")]
public class JetBrains.Application.Settings.Implementation.SettingsStoreWarmer : object {
    private Lazy`1<SettingsStore> mySettingsStore;
    public SettingsStoreWarmer(Lifetime lifetime, ISettingsSchema schema, SettingsStorageMountPoints mountpoints, ISettingsStorageTransactionContext transaction, DataContexts dataContexts, ISettingsChangeDispatch changedispatch, IThreading threading, ISettingsLogger logging);
    [ShellComponentAttribute("16")]
public SettingsStore GetSettingsStore();
    private static void Warm(Lifetime lifetime, ISettingsStore settingsStore);
}
public static class JetBrains.Application.Settings.Implementation.StoreToStorageTranslation : object {
    [NotNullAttribute]
public static string SettingsEntry_To_StorageKey(SettingsEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger);
    [NotNullAttribute]
public static string SettingsEntryValueAttribute_To_StorageKey(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> mappingKeys, ILogger logger);
    [NotNullAttribute]
public static string SettingsKey_To_StorageKey(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static string AppendIndex(string sKeyBase, SettingsIndexedKey key, object index, IExceptionThrowingLogger logger);
    [NotNullAttribute]
public static string AppendIndex(string sKeyBase, SettingsIndexedEntry entry, object index, ILogger logger);
    [NotNullAttribute]
public static string AppendMetadata(string sKeyBase, string sMetadataName);
    [NotNullAttribute]
public static string AppendLocalName(string sKeyBase, string sLocalName);
    [NotNullAttribute]
public static IList`1<SettingsKeyInstance> ParseStorageKeys(JetHashSetSorted`1<KeyPathComponents> keys, ISettingsSchema schema, ILogger logger);
    private static void ParseStorageKeys_Key(IList`1<SettingsKeyInstance> rootinstances, KeyPathComponents change, ISettingsSchema schema, List`1<StorageKeyParsedComponent> parsercache, IExceptionThrowingLogger logger);
    private static void ParseStorageKeys_Key_Metadata(SettingsEntryInstance chParentEntry, SettingsKeyInstance chParentKey, KeyPathComponent pathcomponent, IList`1<KeyPathComponent> tokens, int nParserPos);
    public static bool FillKeyPathComponents(KeyPathComponents keyPathComponents, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger, Func`2<KeyPathComponents, bool> FCallAfterEachIndexedKey);
    public static void AppendEntryKeyPathComponent(KeyPathComponents keyPathComponents, SettingsEntry entry, object indexToEntry, IDictionary`2<SettingsKey, object> keyIndices, IExceptionThrowingLogger logger);
    private static InvalidOperationException CreateInvalidOperationException(string message, SettingsEntry entry, SettingsKey keyParent, Nullable`1<KeyPathComponent> componentLast, IList`1<KeyPathComponent> components);
    private static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, SettingsKey key, object index, SettingsIndexedKey keyIndexed);
}
public class JetBrains.Application.Settings.Implementation.TrackMountPointsWithDefaults : object {
    private static ReadonlyToken myReadonlyToken;
    public IProperty`1<ImmutableArray`1<ISettingsStorageMountPoint>> AsArrayProperty;
    public IListEvents`1<ISettingsStorageMountPoint> AsLiveList;
    public TrackMountPointsWithDefaults(Lifetime lifetime, SettingsStorageMountPoints mounts, ILogger logger, Thread thread);
    private static TrackMountPointsWithDefaults();
}
public class JetBrains.Application.Settings.IndexedEntry`2 : object {
    [CanBeNullAttribute]
private IContextBoundSettingsStore myStore;
    private SettingsIndexedEntry myEntry;
    private IDictionary`2<SettingsKey, object> myKeyIndices;
    private ILogger myLogger;
    [CanBeNullAttribute]
private Dictionary`2<TIndex, TIndexedValue> mySnapshot;
    public IndexedEntry`2(IContextBoundSettingsStore store, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger);
    private sealed virtual override bool JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.ContainsIndex(TIndex index);
    private void Set(TIndex index, TIndexedValue value);
    private sealed virtual override TIndexedValue JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.Get(TIndex index, TIndexedValue defaultvalue);
    private sealed virtual override TIndexedValue JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.TryGet(TIndex index);
    private sealed virtual override bool JetBrains.Application.Settings.IIndexedEntry<TIndex,TIndexedValue>.TryGet(TIndex index, TIndexedValue& value);
    private bool TryGetCore(TIndex index, TIndexedValue& value);
    private void Remove(TIndex index);
    public sealed virtual void SnapshotAndFreeze();
    [NotNullAttribute]
public sealed virtual IEnumerable`1<TIndex> EnumPossibleIndices();
    public sealed virtual IEnumerable`1<KeyValuePair`2<TIndex, TIndexedValue>> EnumIndexedValues();
    [CompilerGeneratedAttribute]
private Nullable`1<KeyValuePair`2<TIndex, TIndexedValue>> <EnumIndexedValues>b__15_0(TIndex index);
}
public interface JetBrains.Application.Settings.IProvider`1 {
    public ICollectionEvents`1<TItem> Items { get; }
    public abstract virtual ICollectionEvents`1<TItem> get_Items();
}
public interface JetBrains.Application.Settings.ISettingsChangedEventSource {
    [NotNullAttribute]
public ISignal`1<SettingsStoreChangeArgs> Changed { get; }
    public abstract virtual ISignal`1<SettingsStoreChangeArgs> get_Changed();
    public abstract virtual void AdviseAsyncChanged(Lifetime lifetime, AsyncChangedSinkDelegate sink);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Settings.ISettingsOptimization {
    [CanBeNullAttribute]
[PureAttribute]
public abstract virtual object GetKey(IContextBoundSettingsStore store, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public abstract virtual void SetKey(IContextBoundSettingsStore store, SettingsKey key, object value, IDictionary`2<SettingsKey, object> keyIndices);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Settings.ISettingsSchema {
    [NotNullAttribute]
public IEnumerable`1<SettingsKey> RootKeys { get; }
    [NotNullAttribute]
public abstract virtual SettingsKey GetKey(Type typeSettingsClass);
    [NotNullAttribute]
public abstract virtual SettingsKey GetKey();
    [NotNullAttribute]
public abstract virtual SettingsIndexedKey GetIndexedKey();
    [NotNullAttribute]
public abstract virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, object>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsEntry GetEntry(Type typeSettingsClass, string membername);
    public abstract virtual IEnumerable`1<SettingsKey> get_RootKeys();
    [NotNullAttribute]
public abstract virtual SettingsScalarEntry GetScalarEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [NotNullAttribute]
public abstract virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression);
}
public interface JetBrains.Application.Settings.ISettingsStorageMountPoint {
    public string Name { get; }
    [NotNullAttribute]
public IIsAvailable IsAvailable { get; }
    public double Priority { get; }
    public MountPointFlags Flags { get; }
    [NotNullAttribute]
public IPropertyBag Metadata { get; }
    [NotNullAttribute]
public ISettingsStorage Storage { get; }
    [NotNullAttribute]
public MountPath PathInStorage { get; }
    public abstract virtual string get_Name();
    public abstract virtual IIsAvailable get_IsAvailable();
    public abstract virtual double get_Priority();
    public abstract virtual MountPointFlags get_Flags();
    public abstract virtual IPropertyBag get_Metadata();
    public abstract virtual ISettingsStorage get_Storage();
    public abstract virtual MountPath get_PathInStorage();
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.ISettingsStorageMountPointEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute]
public static object MountGetObsolete(ISettingsStorageMountPoint mount, string sPathInMount, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static object MountGetRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static object MountGetSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsExact, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void MountSetObsolete(ISettingsStorageMountPoint mount, string sPathInMount, object value, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
public static void MountSetRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, object value, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
public static void MountEraseRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
public static void MountSetSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsExact, object value, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Ask Baltic why is this obsolete")]
public static IEnumerable`1<string> MountEnumKeysObsolete(ISettingsStorageMountPoint mount, string sPathInMount, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
[NotNullAttribute]
public static void MountEnumRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
public static void MountEnumSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponents, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
public static void MountCopyTo(ISettingsStorageMountPoint thіs, ISettingsStorageMountPoint target, ISettingsStorageTransactionContext transactionThis, ISettingsStorageTransactionContext transactionTarget, ILogger logger, string sRootKey);
    [ExtensionAttribute]
[NotNullAttribute]
public static void MountErase(ISettingsStorageMountPoint mount, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
public static void MountEraseSubtreeSlow(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsExact, ISettingsStorageTransactionContext transaction, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
public static void MountEraseSubtreeRaw(ISettingsStorageMountPoint mount, KeyPathComponents keyPathComponentsWithEmptySlot, ISettingsStorageTransactionContext transaction, ILogger logger);
}
public interface JetBrains.Application.Settings.ISettingsStore {
    [NotNullAttribute]
public DataContexts DataContexts { get; }
    [CanBeNullAttribute]
public ISettingsStorageTransactionContext MountingPointsTransaction { get; }
    [NotNullAttribute]
public SettingsStorageMountPoints MountPoints { get; }
    [NotNullAttribute]
public ISettingsSchema Schema { get; }
    [DebuggerStepThroughAttribute]
public abstract virtual DataContexts get_DataContexts();
    public abstract virtual ISettingsStorageTransactionContext get_MountingPointsTransaction();
    public abstract virtual SettingsStorageMountPoints get_MountPoints();
    [DebuggerStepThroughAttribute]
public abstract virtual ISettingsSchema get_Schema();
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStoreLive BindToContextLive(Lifetime lifetime, ContextRange contextrange, BindToContextFlags flags);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindToContextTransient(ContextRange contextrange, BindToContextFlags flags);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStoreLive BindToMountPointsLive(Lifetime lifetime, ILiveMountPointsInContext mounts, BindToContextFlags flags);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindToMountPointsTransient(ImmutableContextBoundMountPoints mounts, BindToContextFlags flags);
    [NotNullAttribute]
public abstract virtual ISettingsStoreInTransaction CreateNestedTransaction(Lifetime lifetime, string name);
}
public interface JetBrains.Application.Settings.ISettingsStoreInTransaction {
    public abstract virtual void CommitTransaction();
    public abstract virtual void RevertTransaction();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Settings.ListWithoutPrefix`1 : object {
    private IList`1<T> myBody;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public ListWithoutPrefix`1(IList`1<T> body);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public void SetBody(IList`1<T> body);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.Settings.ListWithPrefix`1 : object {
    private TItem myPrefix;
    private IList`1<TItem> myBody;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TItem Item { get; public set; }
    public ListWithPrefix`1(TItem prefix, IList`1<TItem> body);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("JetBrains.Application.Settings.ListWithPrefix`1/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    public sealed virtual void Add(TItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TItem item);
    public sealed virtual void CopyTo(TItem[] array, int arrayIndex);
    public sealed virtual bool Remove(TItem item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(TItem item);
    public sealed virtual void Insert(int index, TItem item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual TItem get_Item(int index);
    public sealed virtual void set_Item(int index, TItem value);
}
public static class JetBrains.Application.Settings.LiveMountPointsInContext : object {
    [NotNullAttribute]
public static ILiveMountPointsInContext FromContextRange(Lifetime lifetime, ContextRange contextrange, ISettingsStore store, BindToContextFlags flags, ISettingsChangeDispatch changedispatch, ILogger logger);
    [NotNullAttribute]
public static ILiveMountPointsInContext FromLiveListUnsynchronized(Lifetime lifetime, IListEvents`1<ISettingsStorageMountPoint> mounts, IProperty`1<ISettingsStorageMountPoint> mountLastInWideContext, string origin);
    [NotNullAttribute]
public static ILiveMountPointsInContext FromLiveProperty(Lifetime lifetime, IProperty`1<ImmutableContextBoundMountPoints> propLiveMountPoints, string origin);
    [NotNullAttribute]
public static ILiveMountPointsInContext FromStatic(ImmutableContextBoundMountPoints mounts, string origin);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.Settings.Logging.ISettingsLogger {
    [NotNullAttribute]
public IExceptionThrowingLogger Logger { get; }
    public abstract virtual IExceptionThrowingLogger get_Logger();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.Logging.SettingsLogging : object {
    private FilterOuterWorldExceptionsLogger mySettingsLogger;
    private IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.Logger { get; }
    public FilterOuterWorldExceptionsLogger CollectedSettingsExceptions { get; }
    public SettingsLogging(Lifetime lifetime, ILogger loggerSystem, IThreading threading, ProductConfigurations config);
    private sealed virtual override IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.get_Logger();
    protected virtual IExceptionThrowingLogger GetLoggerCore();
    public FilterOuterWorldExceptionsLogger get_CollectedSettingsExceptions();
}
public class JetBrains.Application.Settings.Logging.WrapLoggerForSettings : object {
    private IExceptionThrowingLogger myLogger;
    private IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.Logger { get; }
    public WrapLoggerForSettings(ILogger logger);
    private sealed virtual override IExceptionThrowingLogger JetBrains.Application.Settings.Logging.ISettingsLogger.get_Logger();
}
[FlagsAttribute]
public enum JetBrains.Application.Settings.MountPointFlags : Enum {
    public int value__;
    public static MountPointFlags None;
    public static MountPointFlags IsDefaultValues;
    public static MountPointFlags IsWritable;
}
public class JetBrains.Application.Settings.OneToSetSettingAccessor`3 : object {
    private IContextBoundSettingsStore myContextBoundSettingsStore;
    private SettingsIndexedKey mySettingsKey;
    private Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> myExpression;
    private OneToSetSettingAccessor`3(IContextBoundSettingsStore contextBoundSettingsStore, SettingsIndexedKey settingsKey, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> expression);
    public void Add(TIndex index, TValue[] values);
    public void Remove(TIndex index, TValue value);
    public void RemoveIndex(TIndex index);
    public void Clear();
    public IEnumerable`1<TIndex> GetIndicesWithValues();
    public IEnumerable`1<TValue> GetValues(TIndex index);
    public static OneToSetSettingAccessor`3<TKeyClass, TIndex, TValue> Create(ISettingsStore settingsStore, IDataContext dataContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> expression);
    public static OneToSetSettingAccessor`3<TKeyClass, TIndex, TValue> Create(IContextBoundSettingsStore contextBoundSettingsStore, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TValue, bool>>> expression);
    [CompilerGeneratedAttribute]
private bool <GetIndicesWithValues>b__8_0(TIndex index);
}
internal class JetBrains.Application.Settings.SchemaStorageKeyPathComponent : ValueType {
    public KeyPathComponent Component;
    public SettingsIndexedKey IndexRequired;
}
public static class JetBrains.Application.Settings.SettingLayerTypeDataContextUtils : object {
    [NotNullAttribute]
private static ISettingLayerType ourClassicLayerType;
    [NotNullAttribute]
private static DataConstant`1<ISettingLayerType> LAYER_TYPE;
    public static ContextRange ClassicApplicationWideContextRange { get; }
    public static Func`3<Lifetime, DataContexts, IDataContext> FGetClassicDataContext { get; }
    private static SettingLayerTypeDataContextUtils();
    public static bool ShouldOnlyIncludeClassicSettingsLayers(IDataContext context);
    public static ContextRange get_ClassicApplicationWideContextRange();
    public static Func`3<Lifetime, DataContexts, IDataContext> get_FGetClassicDataContext();
}
public abstract class JetBrains.Application.Settings.SettingsEntry : object {
    protected PartCatalogAttribute myEntryAttr;
    [CanBeNullAttribute]
private SchemaStorageKeyPathComponent[] myLazyCachedPathComponents;
    public PartCatalogTypeMember ClrMember;
    [NotNullAttribute]
public string LocalName;
    [NotNullAttribute]
public SettingsKey Parent;
    [NotNullAttribute]
public string SettingsKeyClassMemberName;
    private string myDescription;
    [NotNullAttribute]
public string Description { get; }
    public bool IsIndexed { get; }
    [NotNullAttribute]
internal SchemaStorageKeyPathComponent[] CachedPathComponents { get; }
    protected SettingsEntry(SettingsKey parent, PartCatalogTypeMember& pcmember, PartCatalogAttribute& pcattr);
    public string get_Description();
    public abstract virtual bool get_IsIndexed();
    public virtual string ToString();
    internal virtual void AssertValid();
    internal SchemaStorageKeyPathComponent[] get_CachedPathComponents();
    private SchemaStorageKeyPathComponent[] MakeCachedPathComponents();
}
[AttributeUsageAttribute("384")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.Settings.SettingsEntryAttribute : SettingsEntryAttributeBase {
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CanBeNullAttribute]
public object DefaultValue { get; public set; }
    public SettingsEntryAttribute(object DefaultValue, string Description);
    public SettingsEntryAttribute(object DefaultValue, Type DescriptionResourceType, string DescriptionResourceName);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(object value);
}
public abstract class JetBrains.Application.Settings.SettingsEntryAttributeBase : PartAttribute {
    [CanBeNullAttribute]
private string myDescription;
    [CompilerGeneratedAttribute]
private Type <DescriptionResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryNameOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsStoreSerializerType <ValueSerializer>k__BackingField;
    public Type DescriptionResourceType { get; }
    public string DescriptionResourceName { get; }
    [NotNullAttribute]
public string Description { get; }
    [CanBeNullAttribute]
public string EntryNameOverride { get; public set; }
    public SettingsStoreSerializerType ValueSerializer { get; public set; }
    protected SettingsEntryAttributeBase(string description);
    protected SettingsEntryAttributeBase(Type descriptionResourceType, string descriptionResourceName);
    [CompilerGeneratedAttribute]
public Type get_DescriptionResourceType();
    [CompilerGeneratedAttribute]
public string get_DescriptionResourceName();
    public string get_Description();
    [CompilerGeneratedAttribute]
public string get_EntryNameOverride();
    [CompilerGeneratedAttribute]
public void set_EntryNameOverride(string value);
    [CompilerGeneratedAttribute]
public SettingsStoreSerializerType get_ValueSerializer();
    [CompilerGeneratedAttribute]
public void set_ValueSerializer(SettingsStoreSerializerType value);
}
public class JetBrains.Application.Settings.SettingsIndexedEntry : SettingsEntry {
    private LazyIndexAndValueInfo myLazyIndexAndValueInfo;
    public PartCatalogType IndexClrType { get; }
    public PartCatalogType IndexedValueClrType { get; }
    public SettingsStoreSerializerType IndexedValueSerializer { get; }
    public SettingsStoreSerializerType IndexSerializer { get; }
    public bool IsIndexed { get; }
    public StorageValueTypeId SettingsStorageIndexedValueType { get; }
    public StorageValueTypeId SettingsStorageIndexType { get; }
    internal SettingsIndexedEntry(SettingsKey parent, PartCatalogTypeMember& pcmember, PartCatalogAttribute& pcattr);
    public PartCatalogType get_IndexClrType();
    public PartCatalogType get_IndexedValueClrType();
    public SettingsStoreSerializerType get_IndexedValueSerializer();
    public SettingsStoreSerializerType get_IndexSerializer();
    public virtual bool get_IsIndexed();
    public StorageValueTypeId get_SettingsStorageIndexedValueType();
    public StorageValueTypeId get_SettingsStorageIndexType();
    internal virtual void AssertValid();
}
[AttributeUsageAttribute("384")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.Settings.SettingsIndexedEntryAttribute : SettingsEntryAttributeBase {
    [CompilerGeneratedAttribute]
private SettingsStoreSerializerType <KeySerializer>k__BackingField;
    public SettingsStoreSerializerType KeySerializer { get; public set; }
    public SettingsIndexedEntryAttribute(string Description);
    public SettingsIndexedEntryAttribute(Type DescriptionResourceType, string DescriptionResourceName);
    [CompilerGeneratedAttribute]
public SettingsStoreSerializerType get_KeySerializer();
    [CompilerGeneratedAttribute]
public void set_KeySerializer(SettingsStoreSerializerType value);
}
public class JetBrains.Application.Settings.SettingsIndexedKey : SettingsKey {
    private bool myIsLazyInited;
    private PartCatalogType myLazyIndexClrType;
    private SettingsStoreSerializerType myLazyIndexSerializer;
    public PartCatalogType IndexClrType { get; }
    public SettingsStoreSerializerType IndexSerializer { get; }
    public bool IsIndexed { get; }
    internal SettingsIndexedKey(PartCatalogType& typeSettingsKeyClass, PartCatalogAttribute& attrKey, SettingsSchemaCollector owner);
    public PartCatalogType get_IndexClrType();
    public SettingsStoreSerializerType get_IndexSerializer();
    public virtual bool get_IsIndexed();
    internal virtual void AssertValid();
    private void LazyInitIndexedKeyInfo();
}
[AttributeUsageAttribute("1036")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.Settings.SettingsIndexedKeyAttribute : SettingsKeyAttributeBase {
    [CompilerGeneratedAttribute]
private SettingsStoreSerializerType <IndexSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <IndexType>k__BackingField;
    public SettingsStoreSerializerType IndexSerializer { get; public set; }
    [NotNullAttribute]
public Type IndexType { get; }
    public SettingsIndexedKeyAttribute(Type Parent, string Description, Type IndexType);
    public SettingsIndexedKeyAttribute(Type Parent, Type DescriptionResourceType, string DescriptionResourceName, Type IndexType);
    [CompilerGeneratedAttribute]
public SettingsStoreSerializerType get_IndexSerializer();
    [CompilerGeneratedAttribute]
public void set_IndexSerializer(SettingsStoreSerializerType value);
    [CompilerGeneratedAttribute]
public Type get_IndexType();
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.SettingsIndexedKeyUtil : object {
    public static IDictionary`2<SettingsKey, object> CreateKeyIndices(ISettingsStore store, TIndex index);
    public static IDictionary`2<SettingsKey, object> CreateKeyIndices(SettingsKey settingsKey, TIndex index);
    [ExtensionAttribute]
public static IDictionary`2<SettingsKey, object> AddKey(IDictionary`2<SettingsKey, object> dictionary, SettingsKey settingsKey, TIndex index);
}
public class JetBrains.Application.Settings.SettingsKey : object {
    private static Func`2<SettingsEntry, string> myFGetEntryKeyClassMemberName;
    private static Func`2<SettingsKey, SettingsKey> myLazyParentDelegate;
    protected PartCatalogAttribute myAttrKey;
    [CanBeNullAttribute]
private List`1<SettingsKey> myChildren;
    [CanBeNullAttribute]
private SchemaStorageKeyPathComponent[] myLazyCachedPathComponents;
    [CanBeNullAttribute]
private List`1<SettingsEntry> myLazyEntries;
    private LocalLazy`2<SettingsKey, SettingsKey> myLazyParent;
    [NotNullAttribute]
protected internal SettingsSchemaCollector Owner;
    [NotNullAttribute]
public string LocalName;
    public PartCatalogType SettingsKeyClassClrType;
    private string myDescription;
    [NotNullAttribute]
public IReadOnlyCollection`1<SettingsKey> Children { get; }
    [NotNullAttribute]
public string Description { get; }
    [NotNullAttribute]
public IReadOnlyList`1<SettingsEntry> Entries { get; }
    public bool IsIndexed { get; }
    [CanBeNullAttribute]
public SettingsKey Parent { get; }
    internal SchemaStorageKeyPathComponent[] CachedPathComponents { get; }
    internal SettingsKey(PartCatalogType& typeSettingsKeyClass, PartCatalogAttribute& attrKey, SettingsSchemaCollector owner);
    private static SettingsKey();
    public IReadOnlyCollection`1<SettingsKey> get_Children();
    public string get_Description();
    public IReadOnlyList`1<SettingsEntry> get_Entries();
    public virtual bool get_IsIndexed();
    public SettingsKey get_Parent();
    public virtual string ToString();
    [CanBeNullAttribute]
public SettingsEntry TryFindEntryByMemberName(string sMemberName);
    internal virtual void AssertValid();
    internal SchemaStorageKeyPathComponent[] get_CachedPathComponents();
    [NotNullAttribute]
internal SettingsEntry GetEntryByMemberName(string sMemberName);
    [NotNullAttribute]
private void LazyInitCachedPathComponents();
}
[AttributeUsageAttribute("1036")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.Settings.SettingsKeyAttribute : SettingsKeyAttributeBase {
    public SettingsKeyAttribute(Type Parent, string Description);
    public SettingsKeyAttribute(Type Parent, Type DescriptionResourceType, string DescriptionResourceName);
}
public class JetBrains.Application.Settings.SettingsKeyAttributeBase : PartAttribute {
    private string myDescription;
    [CompilerGeneratedAttribute]
private string <KeyNameOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DescriptionResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionResourceName>k__BackingField;
    [NotNullAttribute]
public string Description { get; }
    public string KeyNameOverride { get; public set; }
    [NotNullAttribute]
public Type Parent { get; }
    public Type DescriptionResourceType { get; }
    public string DescriptionResourceName { get; }
    public SettingsKeyAttributeBase(Type Parent, string Description);
    public SettingsKeyAttributeBase(Type Parent, Type DescriptionResourceType, string DescriptionResourceName);
    public string get_Description();
    [CompilerGeneratedAttribute]
public string get_KeyNameOverride();
    [CompilerGeneratedAttribute]
public void set_KeyNameOverride(string value);
    [CompilerGeneratedAttribute]
public Type get_Parent();
    [CompilerGeneratedAttribute]
public Type get_DescriptionResourceType();
    [CompilerGeneratedAttribute]
public string get_DescriptionResourceName();
}
public static class JetBrains.Application.Settings.SettingsOptimization : object {
    public static ISettingsOptimization DoMeSlowly;
    public static ISettingsOptimization OptimizeDefault;
    private static SettingsOptimization();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.SettingsOptimizationComponent : object {
    public SettingsOptimizationComponent(ISettingsLogger wrapLoggerForSettings);
    private sealed virtual override object JetBrains.Application.Settings.ISettingsOptimization.GetKey(IContextBoundSettingsStore store, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override void JetBrains.Application.Settings.ISettingsOptimization.SetKey(IContextBoundSettingsStore store, SettingsKey key, object value, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.Settings.SettingsScalarEntry : SettingsEntry {
    private static UInt32 myFlagIsLazyInited;
    private UInt32 myLazySettingsStorageEntryType;
    private UInt32 myLazyValueSerializer;
    public bool IsIndexed { get; }
    [CanBeNullAttribute]
public object RawDefaultValue { get; }
    public StorageValueTypeId SettingsStorageEntryType { get; }
    public PartCatalogType ValueClrType { get; }
    public SettingsStoreSerializerType ValueSerializer { get; }
    internal SettingsScalarEntry(SettingsKey parent, PartCatalogTypeMember& pcmember, PartCatalogAttribute& pcattr);
    public virtual bool get_IsIndexed();
    public object get_RawDefaultValue();
    public StorageValueTypeId get_SettingsStorageEntryType();
    public PartCatalogType get_ValueClrType();
    public SettingsStoreSerializerType get_ValueSerializer();
    public static TValue GetDefaultValue(ISettingsStore settings, Expression`1<Func`2<TKeyClass, TValue>> lambdaexpression, ILogger logger);
    [CanBeNullAttribute]
public object GetDefaultValueInEntryMemberType();
    internal virtual void AssertValid();
    [CompilerGeneratedAttribute]
private object <GetDefaultValueInEntryMemberType>b__15_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.SettingsSchema : object {
    private SettingsSchemaCollector myCollector;
    public IEnumerable`1<SettingsKey> RootKeys { get; }
    public SettingsSchema(SettingsSchemaCollector collector);
    public sealed virtual SettingsKey GetKey(Type typeSettingsClass);
    public sealed virtual SettingsKey GetKey();
    public sealed virtual SettingsIndexedKey GetIndexedKey();
    public sealed virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    public sealed virtual SettingsEntry GetEntry(Expression`1<Func`2<TKeyClass, object>> lambdaexpression);
    public sealed virtual SettingsEntry GetEntry(Type typeSettingsClass, string membername);
    public sealed virtual IEnumerable`1<SettingsKey> get_RootKeys();
    public sealed virtual SettingsScalarEntry GetScalarEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    public sealed virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    public sealed virtual SettingsIndexedEntry GetIndexedEntry(Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.SettingsSchemaCollector : object {
    [NotNullAttribute]
internal InternKeyPathComponent Interned;
    internal ILogger Logger;
    private List`1<SettingsKey> myCacheRootKeys;
    private PartCatalog myCatalog;
    private Lifetime myLifetime;
    private OneToListMap`2<TypeInWeakAssembly, TypeInWeakAssembly> myLookupChildren;
    private Dictionary`2<TypeInWeakAssembly, PartCatalogType> myLookupKeyCatalogType;
    private ConcurrentDictionary`2<TypeInWeakAssembly, SettingsKey> mySettingsKeys;
    private Func`2<TypeInWeakAssembly, SettingsKey> mySettingsKeysFactory;
    public SettingsSchemaCollector(Lifetime lifetime, ShellPartCatalogSet catalogset, IThreading threading, InternKeyPathComponent interned, ISettingsLogger settingsLogger, CultureContextComponent cultureContextComponent, CultureContextComponentPluginActivator cultureContextComponentPluginActivator);
    [NotNullAttribute]
public SettingsKey GetKey(Type typeSettingsClass);
    [NotNullAttribute]
public SettingsKey GetKey(PartCatalogType& typeSettingsClass);
    [NotNullAttribute]
public IReadOnlyCollection`1<SettingsKey> GetRootKeys();
    private void AssertValid(Lifetime lifetime);
    [NotNullAttribute]
internal List`1<SettingsKey> GetChildKeys(SettingsKey keyParent);
    [NotNullAttribute]
internal SettingsKey GetKey(TypeInWeakAssembly& tiwa);
    [ConditionalAttribute("JET_MODE_ASSERT")]
private void InvokeAssertValid(Lifetime lifetime, IThreading threading);
    [NotNullAttribute]
private OneToListMap`2<TypeInWeakAssembly, TypeInWeakAssembly> MakeLookupChildren();
    [NotNullAttribute]
private Dictionary`2<TypeInWeakAssembly, PartCatalogType> MakeLookupKeyCatalogType();
    private List`1<SettingsKey> MakeRootKeys();
    private ArgumentException SettingsKeysFactory_ThrowNoKey(TypeInWeakAssembly tiwa);
    [CompilerGeneratedAttribute]
private SettingsKey <.ctor>g__SettingsKeysFactory|9_0(TypeInWeakAssembly tiwa);
    [CompilerGeneratedAttribute]
internal static void <AssertValid>g__DoChildList|13_1(IReadOnlyCollection`1<SettingsKey> children, SettingsKey parent, ILogger logger);
}
public static class JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses : object {
    public static double AmbientStorage;
    public static double GlobalAllProductStorage;
    public static double GlobalPerProductStorage;
    public static double HierarchyStorage;
    public static double TemporaryOverrideWriteOperations;
    public static double SyntheticPriorityOfSmartLayer;
    private static SettingsStorageMountPointPriorityClasses();
}
public class JetBrains.Application.Settings.SettingsStoreChangeArgs : object {
    [NotNullAttribute]
public IList`1<SettingsKeyInstance> RootKeys;
    [NotNullAttribute]
public JetHashSetSorted`1<KeyPathComponents> ChangedStorageKeys;
    [NotNullAttribute]
public ISettingsSchema Schema;
    [NotNullAttribute]
public JetHashSet`1<SettingsKey> ChangedKeys;
    [NotNullAttribute]
public JetHashSet`1<SettingsEntry> ChangedEntries;
    public SettingsStoreChangeArgs(JetHashSetSorted`1<KeyPathComponents> changedStorageKeys, ISettingsSchema schema, ILogger logger);
    private void RemoveUnchangedThingsAndCollectLists(ILogger logger);
    private bool RemoveUnchangedThingsAndCollectLists_Key(SettingsKeyInstance chKey, ILogger logger);
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.SettingsStoreChangeArgsEx_Visit : object {
    [ExtensionAttribute]
public static void Visit(SettingsStoreChangeArgs thіs, Action`3<SettingsKeyInstance, SettingsIndexedKey, Dictionary`2<SettingsKey, object>> FIndexedKey, Action`3<SettingsEntryInstance, SettingsScalarEntry, Dictionary`2<SettingsKey, object>> FScalarEntry, Action`4<SettingsEntryInstance, SettingsIndexedEntry, object, Dictionary`2<SettingsKey, object>> FIndexedEntry, ILogger logger);
    private static void Visit_Key(SettingsKeyInstance keyinstance, VisitContext context);
    private static void Visit_Key_Entry(SettingsEntryInstance entryinstance, VisitContext context);
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.SettingsStoreEx : object {
    public static string UnknownOriginFallback { get; }
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static TEntryValue GetValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static bool HasExplicitValue(IContextBoundSettingsStoreImplementation thіs, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static bool HasExplicitValue(IContextBoundSettingsStoreImplementation thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex index, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static bool HasExplicitValue(IContextBoundSettingsStoreImplementation thіs, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static TEntryValue GetValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static TEntryValue GetValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static object GetValue(ISettingsStore thіs, IDataContext context, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetValue(ISettingsStore thіs, IDataContext context, SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void ResetValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void ResetValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, object>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void ResetValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, object>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void ResetValue(ISettingsStore thіs, IDataContext context, SettingsScalarEntry source, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static TSettingsKeyClass GetKey(IContextBoundSettingsStore thіs, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetKey(IContextBoundSettingsStore thіs, TSettingsKeyClass settingsKeyValue, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public static TSettingsKeyClass GetKey(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FDataContext, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public static TSettingsKeyClass GetKey(ISettingsStore thіs, IDataContext context, ISettingsOptimization settingsOptimization, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public static IContextBoundSettingsStore BindToContext(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, bool isForWriting);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public static IContextBoundSettingsStore BindToContexts(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContextNarrow, Func`3<Lifetime, DataContexts, IDataContext> FContextWide);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TEntryValue GetIndexedValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices, TEntryValue defauValue);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static TEntryValue GetIndexedValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static TEntryValue GetIndexedValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static object GetIndexedValue(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void SetIndexedValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetIndexedValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetIndexedValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, TEntryValue value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetIndexedValue(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, object entryIndex, object value, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void RemoveIndexedValue(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static void RemoveIndexedValue(IContextBoundSettingsStore thіs, SettingsIndexedEntry indexedEntry, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void RemoveIndexedValue(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void RemoveIndexedValue(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, TEntryIndex entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void RemoveIndexedValue(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TEntryIndex> EnumEntryIndices(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<TEntryIndex> EnumEntryIndices(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<TEntryIndex> EnumEntryIndices(ISettingsStore thіs, IDataContext context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<object> EnumEntryIndices(ISettingsStore thіs, IDataContext context, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TKeyIndex> EnumKeyIndices(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<TKeyIndex> EnumKeyIndices(ISettingsStore thіs, Func`3<Lifetime, DataContexts, IDataContext> FContext, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<TKeyIndex> EnumKeyIndices(ISettingsStore thіs, IDataContext context, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<object> EnumKeyIndices(ISettingsStore thіs, IDataContext context, SettingsIndexedKey settkey, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<Pair`2<TKeyIndex, TKeyClass>> EnumIndexedKeys(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> parentKeyIndices, ISettingsOptimization settingsOptimization);
    [IteratorStateMachineAttribute("JetBrains.Application.Settings.SettingsStoreEx/<EnumIndexedKeys>d__43`2")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<Pair`2<TKeyIndex, TKeyClass>> EnumIndexedKeys(IContextBoundSettingsStore thіs, SettingsIndexedKey settingsKey, IDictionary`2<SettingsKey, object> parentKeyIndices, ISettingsOptimization settingsOptimization);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TEntryValue> EnumIndexedValues(IContextBoundSettingsStore thіs, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<KeyValuePair`2<TEntryIndex, TEntryValue>> EnumIndexedEntries(IContextBoundSettingsStore self, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambda, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDictionary`2<TEntryIndex, TEntryValue> GetIndexedValuesDict(IContextBoundSettingsStore self, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambda, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static object CreateIndexedEntryAccess(IContextBoundSettingsStore thіs, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ILogger logger);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> EnumerateIndexedEntry(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void SetIndexedValues(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void ResetIndexedValues(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
public static void AppendIndexedValues(ISettingsStore settingsStore, Func`3<Lifetime, DataContexts, IDataContext> context, Expression`1<Func`2<TKeyClass, IIndexedEntry`2<TEntryIndex, TEntryValue>>> lambdaexpression, IEnumerable`1<Pair`2<TEntryIndex, TEntryValue>> newValues, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use IContextBoundSettingsStoreLive::GetValueProperty.")]
public static IProperty`1<TEntryMemberType> GetValuePropertyTmp(IContextBoundSettingsStoreLive thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, IProperty`1<TEntryMemberType> propTarget, IDictionary`2<SettingsKey, object> keyindices);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, SettingsScalarEntry entry, IProperty`1<TEntryMemberType> propTarget, IDictionary`2<SettingsKey, object> keyindices);
    [ExtensionAttribute]
public static void SetBinding(IContextBoundSettingsStore thіs, Lifetime lifetime, SettingsIndexedEntry entry, object entryIndex, IProperty`1<TEntryMemberType> propTarget, TEntryMemberType defaultValue, IDictionary`2<SettingsKey, object> keyindices);
    [ExtensionAttribute]
public static void CreateIndexedKey(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
public static bool IsIndexedKeyDefined(IContextBoundSettingsStore thіs, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Bind to context live and use GetValueProperty, which is also writable.")]
public static IProperty`1<TEntryMemberType> GetValueLive(ISettingsStore thіs, Lifetime lifetime, Func`3<Lifetime, DataContexts, IDataContext> FDataContext, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Bind to context live and use GetValueProperty, which is also writable.")]
public static IProperty`1<TEntryMemberType> GetValueLive(ISettingsStore thіs, Lifetime lifetime, Func`3<Lifetime, DataContexts, IDataContext> FDataContext, SettingsScalarEntry entry, IThreading threading);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TEntryMemberType> GetValueProperty(IContextBoundSettingsStoreLive thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TEntryMemberType> GetValueProperty2(IContextBoundSettingsStoreLive thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, ApartmentForNotifications apartmentForNotifications);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<TEntryMemberType> GetValueProperty2(IContextBoundSettingsStoreLive thіs, Lifetime lifetime, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, IDictionary`2<SettingsKey, object> keyIndices, ApartmentForNotifications apartmentForNotifications);
    [ExtensionAttribute]
public static void AdviseChange(ISettingsChangedEventSource thіs, Lifetime lifetime, SettingsEntry entry, Action FOnChange);
    [ExtensionAttribute]
public static void AdviseChange(ISettingsChangedEventSource thіs, Lifetime lifetime, SettingsKey key, Action FOnChange);
    [ExtensionAttribute]
public static void CopyTo(IContextBoundSettingsStore thіs, IContextBoundSettingsStore target, ILogger logger, SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    private static void CopyTo_Key(IContextBoundSettingsStore thіs, SettingsKeyInstance keyinstance, Dictionary`2<SettingsKey, object> keyindices, IContextBoundSettingsStore target, ILogger logger);
    private static void CopyTo_Key_Entry(IContextBoundSettingsStore thіs, SettingsEntryInstance entryinstance, Dictionary`2<SettingsKey, object> keyindices, IContextBoundSettingsStore target, ILogger logger);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
[ObsoleteAttribute("Use EnumIndexedValues().Keys")]
public static IEnumerable`1<object> EnumEntryIndices(IContextBoundSettingsStore thіs, SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    [ExtensionAttribute]
[NotNullAttribute]
[PureAttribute]
[ObsoleteAttribute("Use EnumIndexedKey()")]
public static IEnumerable`1<object> EnumKeyIndices(IContextBoundSettingsStore thіs, SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices);
    [ExtensionAttribute]
[CanBeNullAttribute]
[PureAttribute]
public static object GetKey(IContextBoundSettingsStore thіs, SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices, ISettingsOptimization optimization);
    [ExtensionAttribute]
public static void SetKey(IContextBoundSettingsStore thіs, SettingsKey key, object value, IDictionary`2<SettingsKey, object> keyIndices, ISettingsOptimization optimization);
    [ExtensionAttribute]
public static IContextBoundSettingsStoreImplementation ToImplementation(IContextBoundSettingsStore store);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public static IContextBoundSettingsStore BindToContext(ISettingsStore thіs, IDataContext context);
    [ExtensionAttribute]
[ObsoleteAttribute("Use BindToContextLive or BindToContextTransient.")]
[NotNullAttribute]
public static IContextBoundSettingsStore BindToContexts(ISettingsStore thіs, IDataContext contextNarrow, IDataContext contextWide);
    [ExtensionAttribute]
[ObsoleteAttribute("Bind to a context and take its mounts. This method were unused and didn't line up with API nicely, so it were moved out and obsoleted.")]
[NotNullAttribute]
public static IEnumerable`1<ISettingsStorageMountPoint> GetOrderedMountPointsInContext(ISettingsStore thіs, IDataContext context);
    [ExtensionAttribute]
[ObsoleteAttribute("Specify the single property of ImmutableContextBoundMountPoints, which would guarantee that the mounts list changes in sync with the writable range, and that free-threaded changes to the list might be processed correctly.")]
[NotNullAttribute]
public static IContextBoundSettingsStoreLive BindToMountPoints(ISettingsStore thіs, Lifetime lifetime, IListEvents`1<ISettingsStorageMountPoint> mounts, IProperty`1<ISettingsStorageMountPoint> mountLastInWideContext, BindToContextFlags flags);
    public static string get_UnknownOriginFallback();
    [ExtensionAttribute]
[ObsoleteAttribute("BindToMountPointsTransient")]
[NotNullAttribute]
public static IContextBoundSettingsStore BindToMountPoints(ISettingsStore thіs, IEnumerable`1<ISettingsStorageMountPoint> mounts, ISettingsStorageMountPoint mountLastInWideContext, BindToContextFlags flags);
    [ExtensionAttribute]
[ObsoleteAttribute("BindToMountPointsTransient")]
[NotNullAttribute]
public static IContextBoundSettingsStore BindToMountPointWithForcedDefaultValueWrites(ISettingsStore thіs, ISettingsStorageMountPoint mount);
    [ExtensionAttribute]
[ObsoleteAttribute("BindToMountPointsTransient")]
[NotNullAttribute]
public static IContextBoundSettingsStore BindToMountPoints(ISettingsStore thіs, ImmutableContextBoundMountPoints mounts, BindToContextFlags flags);
    [ExtensionAttribute]
[ObsoleteAttribute("BindToMountPointsLive")]
[NotNullAttribute]
public static IContextBoundSettingsStoreLive BindToMountPoints(ISettingsStore thіs, Lifetime lifetime, IProperty`1<ImmutableContextBoundMountPoints> mounts, BindToContextFlags flags);
}
public enum JetBrains.Application.Settings.SettingsStoreSerializerType : Enum {
    public ushort value__;
    public static SettingsStoreSerializerType Auto;
    public static SettingsStoreSerializerType Primitive;
    public static SettingsStoreSerializerType TypeConverterToInvariantString;
    public static SettingsStoreSerializerType XmlSerializer;
    public static SettingsStoreSerializerType XamlSerializer;
    public static SettingsStoreSerializerType BinaryFormatter;
}
public class JetBrains.Application.Settings.Storage.ContentSubstring : ValueType {
    public short RawOffset;
    public short RawLengthPlus1;
    public int RawValue;
    public bool IsWhole { get; }
    public static ContentSubstring Whole { get; }
    public ContentSubstring(int offset, int length);
    public bool get_IsWhole();
    public static ContentSubstring get_Whole();
    [PureAttribute]
public int GetLength(int nTotalLen);
    [PureAttribute]
public bool GetOffsetAndLength(int nTotalLen, UInt32& nOffset, UInt32& nLength);
    [NotNullAttribute]
[PureAttribute]
public string ApplyTo(string content);
    [PureAttribute]
public void WriteTo(string content, StringBuilder sb);
    [PureAttribute]
public virtual string ToString();
    [PureAttribute]
public bool AssertValid(int nTotalLen, OnError onerror);
    [PureAttribute]
public char GetFirstChar(string content);
}
public abstract class JetBrains.Application.Settings.Storage.DefaultBody.FileSettingsStorageProviderBase : object {
    private ICollectionEvents`1<ISettingsStorage> myStorages;
    private ICollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    [NotNullAttribute]
public XmlFileSettingsStorage XmlFileStorage;
    [NotNullAttribute]
public ISettingsStorageMountPoint MountPoint;
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    protected FileSettingsStorageProviderBase(Lifetime lifetime, string name, IProperty`1<FileSystemPath> path, bool isWritable, double priority, IIsAvailable isAvailable, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker fileTracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, IEnumerable`1<KeyValuePair`2<PropertyId, object>> metadata);
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(KeyValuePair`2<PropertyId, object> pair);
}
[DebuggerTypeProxyAttribute("JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionaryDebuggerTypeProxy`2")]
[DebuggerDisplayAttribute("Count = {CountOrNull}")]
public class JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionary`2 : ValueType {
    private static Dictionary`2<TKey, TValue> MarkerHaveOneItem;
    private static Dictionary`2<TKey, TValue> MarkerHaveZeroItems;
    private static Dictionary`2<TKey, TValue> MarkerNull;
    private KeyValuePair`2<TKey, TValue> ItemIfSingle;
    private Dictionary`2<TKey, TValue> ItemsIfMultiple;
    private IEqualityComparer`1<TKey> myComparer;
    private static bool ourCheckForNull;
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsNull { get; }
    public ValuesEnumerable<TKey, TValue> Values { get; }
    internal Nullable`1<int> CountOrNull { get; }
    public FrugalWhenOneItemDictionary`2(IEqualityComparer`1<TKey> comparer);
    private static FrugalWhenOneItemDictionary`2();
    [IsReadOnlyAttribute]
public int get_Count();
    [IsReadOnlyAttribute]
public bool get_IsEmpty();
    [IsReadOnlyAttribute]
public bool get_IsNull();
    [IsReadOnlyAttribute]
public ValuesEnumerable<TKey, TValue> get_Values();
    public void Add(TKey& key, TValue& value);
    public void AddRange(FrugalWhenOneItemDictionary`2& items);
    [IsReadOnlyAttribute]
[IteratorStateMachineAttribute("JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionary`2/<GetKeys>d__18")]
[NotNullAttribute]
public IEnumerable`1<TKey> GetKeys();
    public bool Remove(TKey& key);
    public void SetItem(TKey& key, TValue& value);
    [IsReadOnlyAttribute]
[NotNullAttribute]
public KeyValuePair`2[] ToArray();
    [IsReadOnlyAttribute]
[CanBeNullAttribute]
public KeyValuePair`2[] ToArrayOrNull();
    [IsReadOnlyAttribute]
public bool TryGetValue(TKey& key, TValue& value);
    private void AddRangeMany(Dictionary`2<TKey, TValue> dictionaryOther);
    [IsReadOnlyAttribute]
internal Nullable`1<int> get_CountOrNull();
}
[UsedImplicitlyAttribute]
internal class JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionaryDebuggerTypeProxy`2 : object {
    private FrugalWhenOneItemDictionary`2<TKey, TValue> myOwner;
    [DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Items { get; }
    public FrugalWhenOneItemDictionaryDebuggerTypeProxy`2(FrugalWhenOneItemDictionary`2<TKey, TValue> owner);
    public KeyValuePair`2[] get_Items();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent : object {
    [NotNullAttribute]
public ConcurrentDictionary`2<KeyPathComponent, KeyPathComponent> Interned;
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase : object {
    [CanBeNullAttribute]
private Dictionary`2<string, object> myDiffToStream;
    [NotNullAttribute]
private Dictionary`2<string, object> myEntriesInStream;
    private ReaderWriterLockSlim myLockEntriesInStream;
    private ReaderWriterLockSlim myLockDiffToStream;
    private IProperty`1<bool> myIsDirty;
    private object myLockSerialization;
    private static TimeSpan OptionLockTimeout;
    private static int OptionLockTimeoutMs;
    private string myName;
    private ILogger myLogger;
    private Action`1[] myChangeSinks;
    private SpinWaitLock myLockChangeSinksWrite;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    public string Name { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    public SettingsStorageBase(Lifetime lifetime, string name, ILogger logger);
    private static SettingsStorageBase();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private static void CommitDiffToStream(IDictionary`2<string, object> main, IDictionary`2<string, object> diff);
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    public sealed virtual string get_Name();
    private object Get(string key, ISettingsStorageTransactionContext transaction);
    private void Set(string key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private void SetBatchWithDiffWriteLocked(ICollection`1<KeyValuePair`2<string, object>> items, List`1<string> keysChanged);
    private ICollection`1<string> EnumStringKeysCore(string keyPrefix, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    public sealed virtual void EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private void FireChange(SettingsStorageChangeArgs args, bool isGettingDirty);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1();
}
public static class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFactory : object {
    [NotNullAttribute]
public static ISettingsStorageSerializable CreateStorage(Lifetime lifetime, string name, ILogger logger, InternKeyPathComponent interned);
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat : object {
    private string myName;
    [CanBeNullAttribute]
private Dictionary`2<KeyPathComponents, object> myDiffToStream;
    [NotNullAttribute]
private Dictionary`2<KeyPathComponents, object> myEntriesInStream;
    private ReaderWriterLockSlim myLockEntriesInStream;
    private ReaderWriterLockSlim myLockDiffToStream;
    private object myLockSerialization;
    private IProperty`1<bool> myIsDirty;
    private static TimeSpan OptionLockTimeout;
    private static int OptionLockTimeoutMs;
    private ChunkHashSet`1<KeyPathComponent> myInterned;
    private Action`1[] myChangeSinks;
    private SpinWaitLock myLockChangeSinksWrite;
    private ILogger myLogger;
    private SimpleTrie`2<KeyPathComponent, ChildLevel2Enumeration> myCacheChildLevel2Enumerations;
    private SpinWaitLock myLockCacheChildLevel2Enumerations;
    private string JetBrains.Application.Settings.Storage.ISettingsStorage.Name { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    public SettingsStorageFlat(string name, ILogger logger);
    private static SettingsStorageFlat();
    private void OnResetCacheChildLevel2Enumerations(SettingsStorageChangeArgs args);
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorage.get_Name();
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private void Enum_Calculate(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback);
    private void Enum_Level2Cached(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback);
    private static void Enum_Level2Cached_ReturnCachedValue(Action`2<KeyPathComponents, object> fCallback, KeyValuePair`2[] cachedvalue);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    private void FireChange(SettingsStorageChangeArgs args, bool isGettingDirty);
    private static void CommitDiffToStream(Dictionary`2<KeyPathComponents, object> main, Dictionary`2<KeyPathComponents, object> diff);
    private void SetBatchWithDiffWriteLocked(ICollection`1<KeyValuePair`2<KeyPathComponents, object>> items, List`1<KeyPathComponents> keysChanged);
    public virtual string ToString();
}
public static class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers : object {
    public static BidirectionalMapOnDictionary`2<StorageValueTypeId, Type> MapTypeIds;
    public static Dictionary`2<Type, StorageValueTypeId> MapPrimitiveTypesToStorageTypesWithCoersion;
    private static SettingsStorageHelpers();
    public static void AssertValidLocalName(string sKeyLocalName);
    public static bool IsValidLocalName(string sKeyLocalName, OnError onerror);
    private static void PostError(OnError onerror, string sKeyLocalName, UnicodeCategory category, char c);
    public static void AssertValidStoreType(Type type);
    public static void AssertValidStoreType(StorageValueTypeId type);
    public static bool ValueEquals(object α, object β);
    public static SettingsStoreSerializerType ResolveAutoSerializer(SettingsStoreSerializerType serializer, StringSource& sTypeFullName);
    [NotNullAttribute]
public static StorageValueTypeId GetSettingsStorageSerializedType(StringSource& sClrTypeFullName, SettingsStoreSerializerType valueSerializer);
    [CanBeNullAttribute]
public static object CoerceEntryDefaultValueToRuntimeType(object oValue, Type typeTarget, ILogger logger);
    [NotNullAttribute]
public static object GetStorageDefaultValue(StorageValueTypeId typeid);
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero : object {
    private static Func`2<KeyValuePair`2<string, object>, KeyValuePair`2<KeyPathComponents, object>> myFCacheParseKeyValuePairComponent;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3[] myChangeSinks;
    private Hierarchy myHierarchy;
    [NotNullAttribute]
private ConcurrentDictionary`2<KeyPathComponent, KeyPathComponent> myInterned;
    private IProperty`1<bool> myIsDirty;
    private object myLockSerialization;
    private ILogger myLogger;
    private string myName;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    private string JetBrains.Application.Settings.Storage.ISettingsStorage.Name { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    public SettingsStorageHiero(string name, InternKeyPathComponent internKeyPathComponent, ILogger logger);
    private static SettingsStorageHiero();
    private static void CommitDiffToStream(Dictionary`2<KeyPathComponents, object> main, Dictionary`2<KeyPathComponents, object> diff);
    [HandleProcessCorruptedStateExceptionsAttribute]
private void FireChange(SettingsStorageChangeArgs& args, bool isGettingDirty, ISettingsStorageTransactionContext transaction);
    [HandleProcessCorruptedStateExceptionsAttribute]
private void SaveCore(Func`2<Dictionary`2<string, object>, bool> FSave, BinaryWriter writer);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    public virtual string ToString();
    private sealed virtual override bool JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.FirstTimeLoadFromCache(Func`1<Dictionary`2<string, object>> FReadEntries, BinaryReader reader);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.SaveToCache(Func`2<Dictionary`2<string, object>, bool> FSaveEntries, BinaryWriter writer);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    [HandleProcessCorruptedStateExceptionsAttribute]
private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorage.get_Name();
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid : object {
    private static TimeSpan OptionLockTimeout;
    private static int OptionLockTimeoutMs;
    private static Func`2<HierarchicalKeyPathComponent, KeyPathComponent> myFHierarchicalKeyPathComponentGetComponent;
    private Action`1[] myChangeSinks;
    [CanBeNullAttribute]
private Dictionary`2<KeyPathComponents, object> myDiffToStream;
    [NotNullAttribute]
private Dictionary`2<KeyPathComponents, object> myEntriesInStream;
    private HierarchicalKeyPathComponent myHierarchyRoot;
    private ChunkHashSet`1<KeyPathComponent> myInterned;
    private IProperty`1<bool> myIsDirty;
    private SpinWaitLock myLockChangeSinksWrite;
    private ReaderWriterLockSlim myLockDiffToStream;
    private ReaderWriterLockSlim myLockEntriesInStream;
    private SpinWaitLock myLockHierarchy;
    private object myLockSerialization;
    private ILogger myLogger;
    private string myName;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    private string JetBrains.Application.Settings.Storage.ISettingsStorage.Name { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    public SettingsStorageHybrid(string name, ILogger logger);
    private static SettingsStorageHybrid();
    private static void CommitDiffToStream(Dictionary`2<KeyPathComponents, object> main, Dictionary`2<KeyPathComponents, object> diff);
    private void FireChange(SettingsStorageChangeArgs args, bool isGettingDirty);
    [NotNullAttribute]
private HierarchicalKeyPathComponent GetOrCreateHierarchyRoot();
    private void HierarchyAddKey(KeyPathComponents components);
    private void HierarchyEnumKeysAndValues(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback);
    private void HierarchyRemoveKey(KeyPathComponents components);
    private void OnUpdateHierarchy(SettingsStorageChangeArgs args);
    private void SetBatchWithDiffWriteLocked(ICollection`1<KeyValuePair`2<KeyPathComponents, object>> items, List`1<KeyPathComponents> keysChanged);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    public virtual string ToString();
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    private sealed virtual override ISettingsStorageTransactionData JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
    private sealed virtual override object JetBrains.Application.Settings.Storage.ISettingsStorage.Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(Func`2<Dictionary`2<string, object>, bool> FSave);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorage.Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorage.get_Name();
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
}
public enum JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag : Enum {
    public int value__;
    public static SettingsStorageLoadFlag FirstTime;
    public static SettingsStorageLoadFlag SecondTime;
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageProvidersCollection : object {
    private ICollectionEvents`1<ISettingsStorage> myStorages;
    private ICollectionEvents`1<ISettingsStorageMountPoint> myMountPoints;
    private ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.Items { get; }
    private ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.Items { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ISettingsStorage> Storages { get; }
    [NotNullAttribute]
public ICollectionEvents`1<ISettingsStorageMountPoint> MountPoints { get; }
    public SettingsStorageProvidersCollection(Lifetime lifetime);
    private sealed virtual override ICollectionEvents`1<ISettingsStorage> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.Storage.ISettingsStorage>.get_Items();
    private sealed virtual override ICollectionEvents`1<ISettingsStorageMountPoint> JetBrains.Application.Settings.IProvider<JetBrains.Application.Settings.ISettingsStorageMountPoint>.get_Items();
    [DebuggerStepThroughAttribute]
public ICollectionEvents`1<ISettingsStorage> get_Storages();
    [DebuggerStepThroughAttribute]
public ICollectionEvents`1<ISettingsStorageMountPoint> get_MountPoints();
}
public class JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageTransactionContext : object {
    private Lifetime myLifetime;
    private IDictionary`2<ISettingsStorage, ISettingsStorageTransactionData> myMapStorageToTransactionData;
    private SpinWaitLock myLockStorageTransactionDataWrite;
    [CanBeNullAttribute]
private ISettingsStorageTransactionContext myOuterTransaction;
    private ILogger myLogger;
    private string myName;
    private string JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.Name { get; }
    public SettingsStorageTransactionContext(Lifetime lifetime, string name, ISettingsStorageTransactionContext transactionOuter, ILogger logger);
    [NotNullAttribute]
public sealed virtual TData GetTransactionData(ISettingsStorage storage);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.AttachStorages(IEnumerable`1<ISettingsStorage> storages);
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.RevertAllStorages();
    private sealed virtual override void JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.CommitAllStorages();
    private sealed virtual override string JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.get_Name();
    public virtual string ToString();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalPerProductStorage : FileSettingsStorageProviderBase {
    public static string LayerId;
    public static string ResetGlobalPerProductLayer;
    private static Func`2<IApplicationHost, Dictionary`2<PropertyId, object>> myMountsMetadata;
    public GlobalPerProductStorage(Lifetime lifetime, AnyProductSettingsLocation settingsLocation, IThreading threading, IFileSystemTracker filetracker, IApplicationHost product, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, GlobalSettingsSandboxingProvider globalSettingsSandboxingProvider);
    protected GlobalPerProductStorage(Lifetime lifetime, AnyProductSettingsLocation settingsLocation, IThreading threading, IFileSystemTracker filetracker, IApplicationHost product, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned, GlobalSettingsSandboxingProvider globalSettingsSandboxingProvider, bool isWritable);
    private static GlobalPerProductStorage();
    private static Property`1<FileSystemPath> GetPath(Lifetime lifetime, AnyProductSettingsLocation settingsLocation, IApplicationHost product, GlobalSettingsSandboxingProvider globalSettingsSandboxingProvider);
    private static FileSystemPath GetPathValue(AnyProductSettingsLocation settingsLocation, GlobalSettingsSandboxingProvider globalSettingsSandboxingProvider);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings : object {
    [NotNullAttribute]
public Func`1<IContextBoundSettingsStore> BindForWritingToAllProducts;
    [NotNullAttribute]
public Identity ProductGlobalLayerId;
    public GlobalSettings(GlobalPerProductStorage perProductStorage, ISettingsStore store);
    [NotNullAttribute]
public static Func`1<IContextBoundSettingsStore> BindForSmartWritingToMountPointOverrideReadonly(ISettingsStore store, ISettingsStorageMountPoint mountWriteInto, ContextRange contextrangeWithTargetMount);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettingsSandboxingProvider : object {
    public GlobalSettingsSandboxing SettingsSandboxing { get; }
    public virtual GlobalSettingsSandboxing get_SettingsSandboxing();
}
[ContentPropertyAttribute("Content")]
[DefaultPropertyAttribute("Content")]
[TypeConverterAttribute("JetBrains.Application.Settings.Storage.Format.Base64BlobConverter")]
[ValueSerializerAttribute("JetBrains.Application.Settings.Storage.Format.Base64BlobValueSerializer")]
public class JetBrains.Application.Settings.Storage.Format.Base64Blob : object {
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    [DesignerSerializationVisibilityAttribute("0")]
public Byte[] Content { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(Byte[] value);
    public virtual string ToString();
    public bool Equals(Byte[] other);
    public bool Equals(Base64Blob other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.Settings.Storage.Format.Base64BlobConverter : TypeConverterBase`1<Base64Blob> {
}
public class JetBrains.Application.Settings.Storage.Format.Base64BlobValueSerializer : ValueSerializerBase`1<Base64Blob> {
}
internal static class JetBrains.Application.Settings.Storage.Format.Xmlns : object {
    public static string XmlNamespaceUri;
    public static string ClrNamespace;
    public static string DefaultNamespacePrefix;
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorage {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    [CanBeNullAttribute]
public abstract virtual object Get(KeyPathComponents key, ISettingsStorageTransactionContext transaction);
    public abstract virtual void Set(KeyPathComponents key, object value, ISettingsStorageTransactionContext transaction);
    public abstract virtual void AdviseChange(Lifetime lifetime, Action`1<SettingsStorageChangeArgs> FOnChange, ISettingsStorageTransactionContext transaction);
    public abstract virtual void Enum(KeyPathComponents root, int nTakeChildLevelOnly, Action`2<KeyPathComponents, object> FCallback, ISettingsStorageTransactionContext transaction);
    [NotNullAttribute]
public abstract virtual ISettingsStorageTransactionData AttachToTransaction(Lifetime lifetime, ISettingsStorageTransactionContext transactionToAttach, ISettingsStorageTransactionContext transactionOuter);
    public abstract virtual void EraseSubtree(KeyPathComponents root, ISettingsStorageTransactionContext transaction);
}
[ExtensionAttribute]
[ObsoleteAttribute]
public static class JetBrains.Application.Settings.Storage.ISettingsStorageEx_Obsolete : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
[ObsoleteAttribute]
public static object GetObsolete(ISettingsStorage thіs, string key, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
[ObsoleteAttribute]
public static void SetObsolete(ISettingsStorage thіs, string key, object value, ISettingsStorageTransactionContext transaction);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute]
public static ICollection`1<string> EnumKeysObsolete(ISettingsStorage thіs, string keyPrefix, ISettingsStorageTransactionContext transaction);
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorageSerializable {
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext {
    [NotNullAttribute]
public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void AttachStorages(IEnumerable`1<ISettingsStorage> storages);
    public abstract virtual void RevertAllStorages();
    public abstract virtual void CommitAllStorages();
    [NotNullAttribute]
public abstract virtual TData GetTransactionData(ISettingsStorage storage);
}
public interface JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData {
    [NotNullAttribute]
public ISettingsStorage Storage { get; }
    public abstract virtual ISettingsStorage get_Storage();
    public abstract virtual void Commit();
    public abstract virtual void Revert();
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Settings.Storage.KeyPathComponent : ValueType {
    public string Content;
    public ContentSubstring ContentSubstring;
    public char ContentPrefix;
    private int myCachedHashCode;
    [NotNullAttribute]
public static KeyPathComponentComparer EqualityComparer;
    public static Func`2<KeyPathComponent, KeyPathComponent> AsNormalized;
    public bool IsNull { get; }
    public int Length { get; }
    public KeyPathComponent(string content, char prefix, ContentSubstring substring);
    private static KeyPathComponent();
    public string GetPathComponentSlow();
    public void Write(StringBuilder sb);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(string s);
    public sealed virtual bool Equals(KeyPathComponent other);
    public static bool op_Equality(KeyPathComponent a, KeyPathComponent b);
    public static bool op_Inequality(KeyPathComponent a, KeyPathComponent b);
    public static KeyPathComponent FromString(string s);
    public static KeyPathComponent FromSubstring(string s, int offset, int length, char prefix);
    public virtual string ToString();
    public bool AssertValid(OnError onerror);
    public bool get_IsNull();
    public int get_Length();
    public char GetFirstChar();
    [NotNullAttribute]
public string GetTextWithoutFirstCharSlow();
    public sealed virtual int CompareTo(KeyPathComponent other);
    public bool IsEmpty();
    private int CalcHashCode();
}
public class JetBrains.Application.Settings.Storage.KeyPathComponents : ValueType {
    [CanBeNullAttribute]
public IList`1<KeyPathComponent> Components;
    public static char PathSeparatorChar;
    public static string PathSeparatorString;
    internal static char WellKnownPrefixChar;
    public KeyPathComponents(IList`1<KeyPathComponent> components);
    private static KeyPathComponents();
    public static KeyPathComponents Parse(string s);
    public static KeyPathComponents ParseInterned(string s, ChunkHashSet`1<KeyPathComponent> interneds);
    [NotNullAttribute]
public string RenderToStringSlow(bool isAddingLeadingSlash);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(KeyPathComponents other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public KeyPathComponents Intern(ChunkHashSet`1<KeyPathComponent> interneds);
    public bool StartsWith(KeyPathComponents prefix);
    private sealed virtual override int System.IComparable<JetBrains.Application.Settings.Storage.KeyPathComponents>.CompareTo(KeyPathComponents other);
    public KeyPathComponents Clone();
    public KeyPathComponents Clone(List`1& list);
}
public class JetBrains.Application.Settings.Storage.Persistence.EntriesReader : object {
    private XmlReader myXmlReader;
    private LocationAwareXmlReader myLocationAwareXmlReader;
    private IProperty`1<State> myState;
    public Dictionary`2<string, object> Entries;
    public List`1<Pair`2<string, NodePosition>> EntryPositions;
    public List`1<NodePosition> ResourceDictionaryPositions;
    private StringBuilder mySharedContentBuilder;
    private ReadEntryValueData myReadEntryValueData;
    private static Regex myRegexNonPreserveSpaceEnds;
    private static Regex myRegexNonPreserveSpaceMiddle;
    private XmlNamespaceDescriptions myXmlNamespaceDescriptions;
    private ILogger myLogger;
    public EntriesReader(ILogger logger);
    private static EntriesReader();
    [NotNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
public EntriesReader Run(XmlReader reader, EntryPositionsFlag entryPositionsFlag);
    private void Step();
    [HandleProcessCorruptedStateExceptionsAttribute]
private void Step_ReadEntryValueNodes();
    private void Step_ReadEntryValueEndClear();
    private void Step_ReadEntryValueEndError();
    private void Step_ReadEntryValueEndNewEntry();
    [HandleProcessCorruptedStateExceptionsAttribute]
private void Step_ReadEntryValueEnd_CommitContent();
    private void Step_ReadEntryValueEnd_CommitContent_WarnIfDuplicate(object value);
    private void Step_ReadEntryValueBegin();
    private void Step_ReadEntryElementStart();
    [CanBeNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
private string Step_ReadEntryElementStart_GetEntryKey();
    private StorageValueTypeId Step_Any_GetEntryTypeId();
    [HandleProcessCorruptedStateExceptionsAttribute]
private void Step_GenericRead();
    private bool Step_Any_IsResourceDictionaryElement();
    [HandleProcessCorruptedStateExceptionsAttribute]
private void Step_GenericRead_SkipToElement();
    private Nullable`1<StorageValueTypeId> Step_Any_TryGetEntryTypeId();
    [NotNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
private object Step_ReadEntryValueEnd_CommitContent_ParseValue(string sContent, StorageValueTypeId typeid, XmlSpace xmlSpace);
    [CompilerGeneratedAttribute]
private object <Run>b__6_0();
    [CompilerGeneratedAttribute]
private object <Step_ReadEntryValueEnd_CommitContent>b__12_0();
    [CompilerGeneratedAttribute]
private object <Step_ReadEntryValueEnd_CommitContent>b__12_1();
}
public static class JetBrains.Application.Settings.Storage.Persistence.EntriesWriter : object {
    public static RunResult Run(Dictionary`2<string, object> entries, Action`1<Action`1<XmlReader>> FCreateReader, Action`1<Action`1<XmlWriter>> FCreateWriter, ILogger loggerForReading, ILogger loggerForWriting);
    [HandleProcessCorruptedStateExceptionsAttribute]
private static RunResult Run_UpdateExistingXml(Dictionary`2<string, object> entries, Action`1<Action`1<XmlReader>> FCreateReader, Action`1<Action`1<XmlWriter>> FCreateWriter, EntriesReader enreader, ILogger logger);
    private static void Run_UpdateExistingXml_WriteThruSingleNode(XmlWriter xmlwriter, XmlReader xmlreader, ILogger logger);
    private static void Run_UpdateExistingXml_WriteEntries(XmlWriter xmlwriter, Dictionary`2<string, object> entries, IEnumerable`1<string> keysToWrite, ILogger logger);
    private static void Run_UpdateExistingXml_WriteThroughElementOpeningTag(LocationAwareXmlReader xmlreader, XmlWriter xmlwriter);
    private static bool Run_UpdateExistingXml_IsElementWithEntriesInside(List`1<PositionAction> elementactions, int nIndexInElementActions, NodePosition position, ILogger logger);
    private static bool Run_UpdateExistingXml_IsElementEntrysFirstChild(List`1<PositionAction> elementactions, int nIndexInElementActions, NodePosition position);
    private static bool Run_UpdateExistingXml_TryGetEntryElementAction(List`1<PositionAction> elementactions, NodePosition currentpos, Int32& nIndexInElementActions, EntryElementAction& action, String& sKey, ILogger logger);
    private static bool Run_UpdateExistingXml_TryGetEntryElementAction_TryGetEntryElementAction_Index(List`1<PositionAction> elementactions, NodePosition currentpos, Int32& nIndexInElementActions, ILogger logger);
    [CanBeNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
private static EntriesReader Run_ReadExistingXmlForPositions(Action`1<Action`1<XmlReader>> FCreateReader, ILogger loggerForReading, ILogger loggerForWriting);
    private static RunResult Run_WriteFromScratch(Dictionary`2<string, object> entries, Action`1<Action`1<XmlWriter>> FCreateWriter, ILogger logger);
    private static void Run_AllScenarios_WriteXmlSpacePreserveAttr(XmlWriter xmlwriter);
    private static void Run_AllScenarios_WriteResourceDictionaryElementOpeningTag(XmlWriter xmlwriter);
    [HandleProcessCorruptedStateExceptionsAttribute]
private static void Run_AllScenarios_WriteEntry(XmlWriter xmlwriter, string sKey, Dictionary`2<string, object> entries, ILogger logger);
    private static void XX_GetValueAndTypeId(string key, IDictionary`2<string, object> entries, StorageValueTypeId& typeid, Object& value);
    private static string X_GetEntryContent(object value, StorageValueTypeId typeid, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableArray`1<IFileSettingsStorageBehaviorProvider> myBehaviorProviders;
    private ILazy`1<ISettingsLogger> myLogging;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <DiskOperationSuppression>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDiskOperationAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSaveToDiskAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <SaveToDiskSuppression>k__BackingField;
    public ICollectionEvents`1<object> DiskOperationSuppression { get; }
    public IProperty`1<bool> IsDiskOperationAllowed { get; }
    public IProperty`1<bool> IsSaveToDiskAllowed { get; }
    private ILogger JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.Logger { get; }
    public ICollectionEvents`1<object> SaveToDiskSuppression { get; }
    public FileSettingsStorageBehavior(Lifetime lifetime, IEnumerable`1<IFileSettingsStorageBehaviorProvider> behaviorproviders, ILazy`1<ISettingsLogger> logging, IThreading threading);
    [HandleProcessCorruptedStateExceptionsAttribute]
public virtual bool QueryEditFile(FileSystemPath path);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_DiskOperationSuppression();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsDiskOperationAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsSaveToDiskAllowed();
    private sealed virtual override ILogger JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_SaveToDiskSuppression();
}
public interface JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior {
    [NotNullAttribute]
public ICollectionEvents`1<object> DiskOperationSuppression { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsDiskOperationAllowed { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsSaveToDiskAllowed { get; }
    [NotNullAttribute]
public ILogger Logger { get; }
    [NotNullAttribute]
public ICollectionEvents`1<object> SaveToDiskSuppression { get; }
    public abstract virtual ICollectionEvents`1<object> get_DiskOperationSuppression();
    public abstract virtual IProperty`1<bool> get_IsDiskOperationAllowed();
    public abstract virtual IProperty`1<bool> get_IsSaveToDiskAllowed();
    public abstract virtual ILogger get_Logger();
    public abstract virtual ICollectionEvents`1<object> get_SaveToDiskSuppression();
    public abstract virtual bool QueryEditFile(FileSystemPath path);
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehaviorProvider {
    public abstract virtual void Bind(Lifetime lifetime, IFileSettingsStorageBehavior behavior);
    public abstract virtual bool QueryEditFile(FileSystemPath path);
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization {
    public abstract virtual void Load(SettingsStorageLoadFlag flag, Func`1<Dictionary`2<string, object>> FReadEntries);
    public abstract virtual void Save(Func`2<Dictionary`2<string, object>, bool> FSave);
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached {
    public abstract virtual bool FirstTimeLoadFromCache(Func`1<Dictionary`2<string, object>> FReadEntries, BinaryReader reader);
    public abstract virtual void SaveToCache(Func`2<Dictionary`2<string, object>, bool> FSaveEntries, BinaryWriter writer);
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon {
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsDirty { get; }
    public Nullable`1<bool> IsEmpty { get; }
    public abstract virtual string get_Name();
    [NotNullAttribute]
public abstract virtual Dictionary`2<string, object> GetInMemoryChangesDiffCopy();
    public abstract virtual IProperty`1<bool> get_IsDirty();
    public abstract virtual Nullable`1<bool> get_IsEmpty();
}
public interface JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization {
    public abstract virtual void Load(SettingsStorageLoadFlag flag, Action`1<Action`1<Stream>> FWithStream, ILogger logger);
    public abstract virtual Nullable`1<RunResult> Save(Action`1<Action`1<Stream>> FWithReadStream, Action`1<Action`1<Stream>> FWithWriteStream, ILogger loggerForReading, ILogger loggerForWriting);
}
public class JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader : XmlReader {
    private XmlReader myUnderlyingReader;
    private IXmlLineInfo myUnderlyingLineInfo;
    private int myNodeAbsoluteIndex;
    private NodePosition myCurrentNodePosition;
    private bool myIsCloseCalled;
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    public int NodeAbsoluteIndex { get; }
    public XmlReaderSettings Settings { get; }
    public string Name { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    public LocationAwareXmlReader(XmlReader underlyingReader);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    private void Read_AdvancePosition();
    public virtual void Close();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual int get_AttributeCount();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    public NodePosition CurrentPositionSnapshot();
    public NodePosition CurrentPositionVolatile();
    public int get_NodeAbsoluteIndex();
    public virtual string ToString();
    public virtual XmlReaderSettings get_Settings();
    public virtual string get_Name();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual bool get_CanResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_HasAttributes();
    protected virtual void Dispose(bool disposing);
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
}
public class JetBrains.Application.Settings.Storage.Persistence.MockFileSettingsStorageBehavior : object {
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <DiskOperationSuppression>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsDiskOperationAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSaveToDiskAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<object> <SaveToDiskSuppression>k__BackingField;
    public ICollectionEvents`1<object> DiskOperationSuppression { get; }
    public IProperty`1<bool> IsDiskOperationAllowed { get; }
    public IProperty`1<bool> IsSaveToDiskAllowed { get; }
    public ILogger Logger { get; }
    public ICollectionEvents`1<object> SaveToDiskSuppression { get; }
    public MockFileSettingsStorageBehavior(Lifetime lifetime, Save save);
    public sealed virtual bool QueryEditFile(FileSystemPath path);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_DiskOperationSuppression();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsDiskOperationAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsSaveToDiskAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<object> get_SaveToDiskSuppression();
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache : object {
    private static string CacheFileExtensionWithDot;
    private static string CacheFolderLocalName;
    private static UInt32 SignatureDword;
    private static Encoding myEncodingForBinaryStrings;
    private static SettingsStorageBinaryCache();
    [NotNullAttribute]
public static BinaryWriter CreateWriterOnStream(Stream stream);
    [CanBeNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
public static BinaryReader TryGetCachedStorageReader(StorageCacheIdentity identity, ILogger logger);
    [CanBeNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
public static BinaryWriter TryGetCachedStorageWriter(StorageCacheIdentity identity, ILogger logger);
    [NotNullAttribute]
private static FileSystemPath GetBinaryCacheFilePath(StorageCacheIdentity identity);
    public static void CleanupCachedStorage(StorageCacheIdentity identity, ILogger logger);
}
public static class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers : object {
    [NotNullAttribute]
public static XmlReaderSettings XmlReaderSettingsRecommended;
    [NotNullAttribute]
public static XmlWriterSettings XmlWriterSettingsRecommended;
    private static SettingsStorageXmlHelpers();
    [NotNullAttribute]
public static string GetXmlElementLocalNameByValueTypeId(StorageValueTypeId typeid);
    [NotNullAttribute]
public static string GetXmlNamespaceUriByValueTypeId(StorageValueTypeId typeid);
    [NotNullAttribute]
public static string GetXmlNamespaceUriForKeyAttribute();
    [NotNullAttribute]
public static string GetXmlKeyAttributeLocalName();
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerialization : object {
    [NotNullAttribute]
private ISettingsStorageEntriesSerialization myStorage;
    private IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty { get; }
    private Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty { get; }
    private string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name { get; }
    public SettingsStorageXmlStreamSerialization(Lifetime lifetime, ISettingsStorageEntriesSerialization storage);
    private sealed virtual override Dictionary`2<string, object> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy();
    private sealed virtual override void JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization.Load(SettingsStorageLoadFlag flag, Action`1<Action`1<Stream>> FWithStream, ILogger logger);
    private sealed virtual override Nullable`1<RunResult> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization.Save(Action`1<Action`1<Stream>> FWithReadStream, Action`1<Action`1<Stream>> FWithWriteStream, ILogger loggerForReading, ILogger loggerForWriting);
    private sealed virtual override IProperty`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsDirty();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_IsEmpty();
    private sealed virtual override string JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.get_Name();
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching : object {
    [NotNullAttribute]
private ISettingsStorageEntriesSerialization myStorage;
    public SettingsStorageXmlStreamSerializationWithBinaryCaching(Lifetime lifetime, ISettingsStorageEntriesSerialization storage);
    [HandleProcessCorruptedStateExceptionsAttribute]
public LoadResult Load(SettingsStorageLoadFlag flag, Action`1<Action`1<Stream>> FWithStream, StorageCacheIdentity identity, ILogger logger);
    public SaveResult Save(Action`1<Action`1<Stream>> FWithReadStream, Action`1<Action`1<Stream>> FWithWriteStream, ILogger loggerForReading, ILogger loggerForWriting);
}
public class JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile : object {
    private Lifetime myLifetime;
    private ISettingsStorageSerializable myStorage;
    private SettingsStorageXmlStreamSerializationWithBinaryCaching myStorageXmlStreamSerialization;
    [NotNullAttribute]
public IProperty`1<FileSystemPath> Path;
    private IThreading myThreading;
    private IFileSettingsStorageBehavior myBehavior;
    private IProperty`1<bool> myIsReloadReschedulled;
    private IProperty`1<bool> myIsSaveReschedulled;
    private LockObject myLockSerialization;
    [CompilerGeneratedAttribute]
private SavingEmptyContent <FileWhenNoContent>k__BackingField;
    private Pair`2<FileSystemPath, DateTime> myLastLoadedStamp;
    private Nullable`1<DateTime> myUtcTimeFileDisappeared;
    private TimeSpan OptionWaitForDisappearedFileTimeout;
    private bool myIsStorageCorruptedOnLoad;
    private TimeSpan OptionSaveWhenDirtyInterval;
    private TimeSpan OptionLockTimeout;
    private ILogger myLogger;
    private static int StreamAccessRetryInitialMs;
    private static int MaxReadStreamAccessWaitMs;
    private static TimeSpan RescheduleOnFailedSaveOrReloadInterval;
    private bool myIsFileEverSeenExisting;
    public SavingEmptyContent FileWhenNoContent { get; }
    public SettingsStoreSerializationToXmlDiskFile(Lifetime lifetime, ISettingsStorageSerializable storage, IProperty`1<FileSystemPath> path, SavingEmptyContent whenNoContent, IFileSystemTracker filetracker, IThreading threading, IFileSettingsStorageBehavior behavior);
    private static SettingsStoreSerializationToXmlDiskFile();
    private void Init_FirstLoadLastSave(Lifetime lifetime, IFileSettingsStorageBehavior behavior);
    private void Init_SynchronizeLifetimeTerminationWithSerialization(Lifetime lifetime);
    private void Init_SaveOnDirty(Lifetime lifetime, ISettingsStorageSerializable storage, IThreading threading, IFileSettingsStorageBehavior behavior);
    private void Init_ReschedulledSaveOrReload(Lifetime lifetime, IThreading threading);
    public void SaveRequested();
    private void Init_OnPathChange(Lifetime lifetime, IProperty`1<FileSystemPath> path, IFileSettingsStorageBehavior behavior);
    [CompilerGeneratedAttribute]
public SavingEmptyContent get_FileWhenNoContent();
    private void Init_FileTracker(Lifetime lifetime, IFileSystemTracker filetracker, IProperty`1<FileSystemPath> path, IFileSettingsStorageBehavior behavior);
    public void ReloadOnFileChangeRequested();
    public void Reload(ReloadReason reason);
    private void ReloadReschedulled(bool newstate);
    private void SaveReschedulled(bool newstate);
    [PureAttribute]
private bool Reload_IsWaitingForMissedFile(FileSystemPath path, ReloadReason reason);
    private void Reload_ReadStream(FileSystemPath path, Action`1<Stream> F);
    [HandleProcessCorruptedStateExceptionsAttribute]
private Pair`2<FileSystemPath, DateTime> GetFileStamp(FileSystemPath path);
    public void Save(SaveDiffFlags flagsDiff, SaveForcedFlags flagsForced);
    [HandleProcessCorruptedStateExceptionsAttribute]
private bool Save_QueryEditFile();
    [HandleProcessCorruptedStateExceptionsAttribute]
private void Save_WriteFile(SaveDiffFlags flagsDiff, SaveForcedFlags flagsForced);
    [CanBeNullAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
private FileStream Save_WriteFile_OpenStreamAndTakeLock(Lifetime lifeFileAccess, FileSystemPath path, SaveForcedFlags flagsForced, bool isRecursing);
    private void Save_WriteFile_PromoteWriteCache(FileStream filestream, ChunkedMemoryStream streamInMemoryWrite, Action`1<StorageCacheIdentity> FFlushBinaryCache, FileSystemPath path);
    private void Save_WriteFile_BackupOldCorruptedFile(FileSystemPath path);
    [StringFormatMethodAttribute("message")]
private void Trace(string message, Object[] args);
    [CompilerGeneratedAttribute]
private void <Init_SynchronizeLifetimeTerminationWithSerialization>b__10_0();
    [CompilerGeneratedAttribute]
private void <SaveRequested>b__13_0();
    [CompilerGeneratedAttribute]
private void <SaveRequested>b__13_1();
    [CompilerGeneratedAttribute]
private void <ReloadOnFileChangeRequested>b__20_0();
}
public class JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage : object {
    [NotNullAttribute]
public ISettingsStorageSerializable Storage;
    [NotNullAttribute]
private SettingsStoreSerializationToXmlDiskFile DiskFile;
    public static string SettingsStorageFileExtensionNoDot;
    public static string SettingsStorageFileExtensionWithDot;
    public SavingEmptyContent FileWhenNoContent { get; }
    [NotNullAttribute]
public IProperty`1<FileSystemPath> Path { get; }
    public XmlFileSettingsStorage(Lifetime lifetime, string name, FileSystemPath path, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    public XmlFileSettingsStorage(Lifetime lifetime, string name, IProperty`1<FileSystemPath> path, SavingEmptyContent whenNoContent, IThreading threading, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    private static XmlFileSettingsStorage();
    public SavingEmptyContent get_FileWhenNoContent();
    public void ReloadFromDiskRequested();
    public void ReloadFromDiskNow();
    public void SaveToDiskRequested();
    public void SaveToDiskNow();
    public IProperty`1<FileSystemPath> get_Path();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs : ValueType {
    public FrugalLocalList`1<KeyPathComponents> Keys;
    public SettingsStorageChangeArgs(FrugalLocalList`1<KeyPathComponents> keys);
}
public class JetBrains.Application.Settings.Storage.Substring : ValueType {
    public string Content;
    public ContentSubstring ContentSubstring;
    private Substring(string content, ContentSubstring substring);
    public static Substring FromString(string s);
    public static Substring FromSubstring(string s, int offset, int length);
    public virtual string ToString();
    [NotNullAttribute]
private string CommitToString();
    public sealed virtual bool Equals(Substring other);
    private sealed virtual override int System.IComparable<JetBrains.Application.Settings.Storage.Substring>.CompareTo(Substring other);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
}
public interface JetBrains.Application.Settings.Upgrade.IMigrateSettings {
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<SettingsEntry> GetEntriesToMigrate(ISettingsSchema schema);
    [CanBeNullAttribute]
public abstract virtual IEnumerable`1<SettingsKey> GetKeysToMigrate(ISettingsSchema schema);
    public abstract virtual void Migrate(IContextBoundSettingsStoreImplementation store);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.Settings.Upgrade.IMigrateSettings")]
public class JetBrains.Application.Settings.Upgrade.MigrateSettingsAttribute : PartAttribute {
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.Upgrade.SettingsMigrationManager : object {
    public static PropertyId`1<bool> DisableMigration;
    public SettingsMigrationManager(Lifetime lifetimeUnsync, ISettingsStore store, ISettingsLogger settingslogger, ShellPartCatalogSet catalogset, IComponentContainer container, IThreading threading, ManualOverride manualOverride);
    private static SettingsMigrationManager();
    protected static void ApplyMigratorToMount(MigratorAndLifetime migrator, MigratorRuntimeData migratordata, MountAndLifetime mount, IMigrateSettings migratorInstance, ISettingsStore store, IComponentContainer container, ILogger logger);
    private static bool ApplyMigratorToMount_IsAnythingToMigrate(MigratorAndLifetime migrator, MigratorRuntimeData migratordata, MountAndLifetime mount, ILogger logger);
    private static bool ApplyMigratorToMount_IsAnythingToMigrate_Entry(MigratorAndLifetime migrator, SettingsEntry entry, KeyPathComponents components, MountAndLifetime mount, ILogger logger);
    private static bool ApplyMigratorToMount_IsAnythingToMigrate_Key(MigratorAndLifetime migrator, SettingsKey key, KeyPathComponents components, MountAndLifetime mount, ILogger logger);
    private static bool ApplyMigratorToMount_IsNotUsed(MigratorAndLifetime migrator, IContextBoundSettingsStore bound, MountAndLifetime mount, ILogger logger);
    private static void ApplyMigratorToMount_Run(MigratorAndLifetime migrator, IMigrateSettings migratorInstance, IContextBoundSettingsStoreImplementation bound, MountAndLifetime mount, ILogger logger);
    [NotNullAttribute]
protected static IMigrateSettings CreateMigratorInstance(Lifetime lifeMigratorInstance, PartCatalogType migratorType, IComponentContainer container, ILogger logger);
    [NotNullAttribute]
protected static MigratorRuntimeData GetMigratorData(IMigrateSettings migratorInstance, ISettingsStore store, ILogger logger);
    private static bool GetMigratorData_AssertNonIndexedKeys(IMigrateSettings migratorInstance, SettingsKey key, object keyorentry, ILogger logger);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "StoresTheSettingsMigrationStatusForEachOfTheSettingsLayersShouldOnlyBePresentIfASettingsMigrationCaseWasDetectedAndTheMigrationProcedureHasRunSettingDescription")]
public class JetBrains.Application.Settings.Upgrade.SettingsMigrationSettingsKey : object {
    public static Expression`1<Func`2<SettingsMigrationSettingsKey, IIndexedEntry`2<string, bool>>> Expression_IsMigratorApplied;
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "IfTheSpecifiedMigratorObjectIdentifiedByTheFullClassNameWithoutAssemblyNameHasAlreadyBeenRunForTheMountPointInWhichThisInformationIsWrittenSettingDescription")]
public IIndexedEntry`2<string, bool> IsMigratorApplied;
    private static SettingsMigrationSettingsKey();
}
[ExtensionAttribute]
public static class JetBrains.Application.Settings.Upgrade.UpgradeSettingsTableUtil : object {
    [ExtensionAttribute]
public static void UpgradeBoolSetting(SettingsTableBase table, string propertyName, bool defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, bool>> targetExpr);
    [ExtensionAttribute]
public static void UpgradeBoolSetting(SettingsTableBase table, string propertyName, bool defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TValueClass>> targetExpr, Func`2<bool, TValueClass> converterFunc);
    [ExtensionAttribute]
public static void UpgradeIntSetting(SettingsTableBase table, string propertyName, int defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, int>> targetExpr);
    [ExtensionAttribute]
public static void UpgradeIntSetting(SettingsTableBase table, string propertyName, int defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TValueClass>> targetExpr, Func`2<int, TValueClass> converter);
    [ExtensionAttribute]
public static void UpgradeStringSetting(SettingsTableBase table, string propertyName, string defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, string>> targetExpr);
    [ExtensionAttribute]
public static void UpgradeEnumSetting(SettingsTableBase table, string propertyName, TEnumValue defaultValue, IContextBoundSettingsStore store, Expression`1<Func`2<TKeyClass, TEnumValue>> targetExpr);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayers : object {
    private RegisterInjectedMounts myRegistrar;
    public FileInjectedLayers(RegisterInjectedMounts registrar);
    public bool IsLayerInjected(Identity host, FileSystemPath file);
    public void InjectLayer(Identity host, IPath file);
}
[SettingsIndexedKeyAttribute("JetBrains.Application.Settings.UserInterface.InjectedLayersSettingsKey", "JetBrains.Application.Resources.Strings", "AnInjectedLayerCreatedOverAFilePathSettingDescription", "JetBrains.Application.Settings.GuidIndex")]
public class JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayerSettingsKey : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SpecifiesTheAbsolutePathToTheFileBasedUserInjectedLayerDiskFileOptionalTheRelativePathIfApplicableHasPriorityOverThisValueSettingDescription")]
public FileSystemPath AbsolutePath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SpecifiesTheRelativePathToTheFileBasedUserInjectedLayerDiskFileRelativelyToItsHostingLayerNOTETheFileItselfNotTheDirectoryOptionalThisIsOnlyAvailableWhenTheHostingLayerIsAlsoFileBasedAndHasItsPathAvailableAndThesePathsAreOffTheSameRootWhenDefinedThisPathShouldBePreferredForRestoringTheMountedLayerInTheNewSessionSettingDescription")]
public RelativePath RelativePath;
}
[ShellComponentAttribute("2")]
public class JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts : object {
    private UserInjectedSettingsLayers myInjections;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<Tuple`3<string, IconId, FileSystemPath>> <InjectedFiles>k__BackingField;
    private DictionaryEvents`2<UserFriendlySettingsLayer, CollectionEvents`1<FileInjectedLayerInstance>> myMapHostToInjected;
    private Dictionary`2<Identity, UserFriendlySettingsLayer> myMapHostIdToHostLayer;
    private Dictionary`2<Identity, int> myMapHostToSyncResultsGeneration;
    private SpinWaitLockRef myLockMapHostToSyncResultsGeneration;
    private SettingsIndexedKey mySchemaKey;
    private ILogger myLogger;
    private ReaderWriterLockSlim mySynchronizeReadHostLayerCurrentData;
    private Lifetime myLifetimeComponent;
    public ICollectionEvents`1<Tuple`3<string, IconId, FileSystemPath>> InjectedFiles { get; }
    public RegisterInjectedMounts(Lifetime lifetimeComponentUnsynchronized, UserInjectedSettingsLayers injections, IThreading threading, ISettingsLogger logging, SettingsSchema schema, IFileSystemTracker filetracker, IFileSettingsStorageBehavior behavior, InternKeyPathComponent interned);
    [CompilerGeneratedAttribute]
public ICollectionEvents`1<Tuple`3<string, IconId, FileSystemPath>> get_InjectedFiles();
    public sealed virtual void InitOnPrimaryThread();
    [GuardAttribute("1")]
private void ForEachHostingLayer(Lifetime lifeHost, UserFriendlySettingsLayer layerHost);
    [GuardAttribute("-1")]
private void SynchronizeHostLayer(UserFriendlySettingsLayer layerHost);
    [NotNullAttribute]
private JetHashSet`1<FileInjectedLayerInstance> SynchronizeHostLayer_ReadCurrent(UserFriendlySettingsLayer layerHost);
    [CanBeNullAttribute]
private static FileSystemPath TryGetHostLayerBasePath(UserFriendlySettingsLayer layerHost);
    [GuardAttribute("1")]
public void Synchronize();
    internal bool IsLayerInjected(Identity host, FileSystemPath file);
    internal void InjectLayer(Identity host, IPath file);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "UserInjectedLayersListStoredInTheInjectionsHostLayerSettingDescription")]
public class JetBrains.Application.Settings.UserInterface.InjectedLayersSettingsKey : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.UserInterface.ResetSettings : object {
    private ISettingsStore myStore;
    private SettingsStorageMountPoints myMounts;
    private UserInjectedSettingsLayers myInjector;
    public ISignal`1<EventArgs`1<Identity>> BeforeResetSettings;
    public ISignal`1<EventArgs`1<Identity>> AfterResetSettings;
    private ILogger myLogger;
    public ResetSettings(Lifetime lifetime, ISettingsStore store, ISettingsLogger settingslogging, SettingsStorageMountPoints mounts, UserInjectedSettingsLayers injector);
    public void Reset(Identity layerid, IEnumerable`1<Tuple`2<SettingsKey, IDictionary`2<SettingsKey, object>>> keys);
    public void ResetAllSettings();
}
public abstract class JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer : object {
    [CompilerGeneratedAttribute]
private IContextBoundSettingsStoreLive <SettingsStoreContext>k__BackingField;
    public Identity Id;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <OriginText>k__BackingField;
    public double Priority;
    public IPropertyBag Metadata;
    public IProperty`1<string> DisplayName;
    public IProperty`1<IconId> Icon;
    public string Name { get; }
    public IContextBoundSettingsStoreLive SettingsStoreContext { get; protected set; }
    public bool IsDefault { get; }
    public IProperty`1<string> OriginText { get; protected set; }
    protected internal UserFriendlySettingsLayer(Lifetime lifetime, Identity id, ISettingsStore store, Func`3<Lifetime, DataContexts, IDataContext> getContext);
    public string get_Name();
    [CompilerGeneratedAttribute]
public IContextBoundSettingsStoreLive get_SettingsStoreContext();
    [CompilerGeneratedAttribute]
protected void set_SettingsStoreContext(IContextBoundSettingsStoreLive value);
    public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_OriginText();
    [CompilerGeneratedAttribute]
protected void set_OriginText(IProperty`1<string> value);
    [NotNullAttribute]
public abstract virtual IContextBoundSettingsStore BindSettingsTransientWithoutDefault(ISettingsStore store);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__17_1(string s);
    [CompilerGeneratedAttribute]
private string <.ctor>b__17_2(string s);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers : object {
    [NotNullAttribute]
public ISettingsStore SettingsStore;
    public UserFriendlySettingsLayer DefaultLayer;
    public ListEvents`1<UserFriendlySettingsLayer> UserEditableLayers;
    public ListEvents`1<UserFriendlySettingsLayer> VisibleLayers;
    public ListEvents`1<UserFriendlySettingsLayer> EditableLayers;
    public static PropertyId`1<bool> IsHiddenFromUserFriendlyLayers;
    public static PropertyId`1<bool> IsAutoGenerated;
    public static PropertyId`1<bool> IsNonUserEditable;
    public static PropertyId`1<bool> ExcludeFromResetAllSettings;
    public static PropertyId`1<string> Origin;
    public static PropertyId`1<string> ShortName;
    public static PropertyId`1<FileSystemPath> DiskFilePath;
    public static PropertyId`1<string> DisplayName;
    public static PropertyId`1<string> LayerId;
    public static PropertyId`1<IconId> Icon;
    public static string DefaultLayerOriginText;
    public UserFriendlySettingsLayers(Lifetime lifetime, ISettingsStore store, Flags flags, IEnumerable`1<IProvider`1<Identity>> customLayerProviders, Func`3<Lifetime, DataContexts, IDataContext> getContext, IThreading threading);
    private static UserFriendlySettingsLayers();
    private void AddToLayers(Lifetime identityLifeTime, UserFriendlySettingsLayer layer);
    [CanBeNullAttribute]
public UserFriendlySettingsLayer TryGetLayerById(Identity identity);
    [NotNullAttribute]
public UserFriendlySettingsLayer GetLayerById(Identity identity);
}
public class JetBrains.Application.Settings.UserInterface.UserFriendlySettingsMountPointLayer : UserFriendlySettingsLayer {
    private UserFriendlySettingsMountPointLayer(Lifetime lifetime, MountPointIdentity id, ISettingsStore store, Func`3<Lifetime, DataContexts, IDataContext> getContext, TrackMountPointsWithDefaults defaults);
    [NotNullAttribute]
private static IContextBoundSettingsStoreLive BindSettings(Lifetime lifetime, ISettingsStore store, ISettingsStorageMountPoint mountPoint, TrackMountPointsWithDefaults defaults);
    public virtual IContextBoundSettingsStore BindSettingsTransientWithoutDefault(ISettingsStore store);
}
public class JetBrains.Application.Settings.UserInterface.UserFriendlySettingsSmartLayer : UserFriendlySettingsLayer {
    internal UserFriendlySettingsSmartLayer(Lifetime lifetime, SmartLayerIdentity id, ISettingsStore store, Func`3<Lifetime, DataContexts, IDataContext> getContext);
    public virtual IContextBoundSettingsStore BindSettingsTransientWithoutDefault(ISettingsStore store);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers : object {
    private Lifetime myLifetime;
    private SettingsStorageMountPoints myRegisteredMounts;
    private SettingsStorageProvidersCollection myProvidersCollection;
    private IThreading myThreading;
    public static PropertyId`1<bool> IsHostingUserInjections;
    public static PropertyId`1<bool> IsUserInjected;
    private static PropertyId`1<UserInjectedLayerDescriptor> InjectedLayerDescriptor;
    public CollectionEvents`1<UserFriendlySettingsLayer> LayersHostingUserInjections;
    private Dictionary`2<ISettingsStorageMountPoint, UserInjectedLayerRuntimeInfo> myMapInjectedMountToInjectedLayer;
    private Dictionary`2<ISettingsStorageMountPoint, HostingLayerRuntimeInfo> myMapHostMountToHostingLayer;
    private ILogger myLogger;
    private UserFriendlySettingsLayers myUserFriendlySettingsLayers;
    private CollectionEvents`1<HostingLayerRuntimeInfo> myLayersHostingUserInjectionsInternal;
    public UserInjectedSettingsLayers(Lifetime lifetime, SettingsStorageMountPoints mounts, ISettingsLogger logging, SettingsStorageProvidersCollection providersCollection, ISettingsStore store, IThreading threading);
    private static UserInjectedSettingsLayers();
    public sealed virtual void InitOnAnyThread();
    public void RegisterUserInjectedLayer(Lifetime lifetimeInjection, UserInjectedLayerDescriptor descriptor);
    public bool IsUserInjectedLayer(Identity layerPossiblyInjected);
    public bool IsHostingUserInjectedLayers(Identity layerPossiblyHostingInjections);
    [CanBeNullAttribute]
public UserFriendlySettingsLayer TryGetLayerHostingUserInjectedLayer(Identity layerPossiblyInjected);
    [NotNullAttribute]
public UserFriendlySettingsLayer GetLayerHostingUserInjectedLayer(Identity layerInjected);
    private void Init_WatchForHostingLayers(Lifetime lifetime, SettingsStorageMountPoints mounts, UserFriendlySettingsLayers layers, IThreading threading, ILogger logger);
    private void Init_AssertValidFlags(Lifetime lifetime, SettingsStorageMountPoints mounts, ILogger logger);
    [NotNullAttribute]
public List`1<UserFriendlySettingsLayer> GetAllUserInjectedLayers();
    [NotNullAttribute]
public IList`1<UserFriendlySettingsLayer> GetUserInjectedLayersFromHost(Identity layerHost);
    public void DeleteUserInjectedLayer(Identity layerInjected);
    public bool TurnInjectedLayerOnOff(Identity layerInjected, Nullable`1<bool> desired);
    public bool IsInjectedLayerOn(Identity layerInjected);
    private IEnumerable`1<ISettingsStorageMountPoint> Get(ISettingsStorageMountPoint mount);
    [CanBeNullAttribute]
private static ISettingsStorageMountPoint TryGetMountFromLayer(Identity idlayer);
    [NotNullAttribute]
private static ISettingsStorageMountPoint GetMountFromLayer(Identity idlayer);
    public bool CanReorderInjectedLayers(Identity layerToMove, ReorderInjectedLayersFlags how);
    public void ReorderInjectedLayers(Identity layerToMove, ReorderInjectedLayersFlags how, Identity other);
    [CompilerGeneratedAttribute]
private bool <IsUserInjectedLayer>b__16_0(ISettingsStorageMountPoint mount);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private UserInjectedLayerRuntimeInfo <TryGetLayerHostingUserInjectedLayer>b__18_0(ISettingsStorageMountPoint mountInjected);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private UserFriendlySettingsLayer <TryGetLayerHostingUserInjectedLayer>b__18_1(UserInjectedLayerRuntimeInfo runinfo);
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserFriendlySettingsLayer> <GetAllUserInjectedLayers>b__22_0(HostingLayerRuntimeInfo host);
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayer <GetAllUserInjectedLayers>b__22_2(ISettingsStorageMountPoint mount);
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayer <GetUserInjectedLayersFromHost>b__23_1(ISettingsStorageMountPoint mount);
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.Application.Resources.Strings", "ApplicationEnvironmentSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription")]
public class JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings : object {
}
[SettingsKeyAttribute("System.Reflection.Missing", "JetBrains.Application.Resources.Strings", "ApplicationHousekeepingSettingsGenerallyShouldNotBeSharedWithTheSolutionWithinATeamSettingDescription")]
public class JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.Shell.AddProductIdentityToLogs : object {
    private IApplicationHost myNameAndVersion;
    private IEnumerable`1<IApplicationPackage> myPackages;
    private ProductConfigurations myProductConfigurations;
    private SubProducts myProducts;
    private ILogger myLogger;
    public AddProductIdentityToLogs(Lifetime lifetime, IApplicationHost nameAndVersion, IEnumerable`1<IApplicationPackage> packages, ProductConfigurations productConfigurations, SubProducts products, ILogger logger);
    public void AddIdentityToLog(LoggingLevel loggingLevel);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1();
}
[EnvironmentComponentAttribute("10")]
internal class JetBrains.Application.Shell.AddSystemTraceToLogs : object {
    private static string TraceListenerName;
    public AddSystemTraceToLogs(Lifetime lifetime, ILogger logger);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.Shell.ApplyCommandLineKeysToLogger : object {
    public static string SwitchLogOff;
    public static string SwitchLogInfo;
    public static string SwitchLogNormal;
    public static string SwitchLogVerbose;
    public static string SwitchLogTrace;
    public static string SwitchLog;
    public static string SwitchLogFolder;
    public static string SwitchLogFile;
    public static string SwitchLogLevel;
    public ApplyCommandLineKeysToLogger(IProductCommandLine cmdline);
}
[EnvironmentComponentAttribute("10")]
internal class JetBrains.Application.Shell.AssertShellLocksAreGuarded : object {
    private IShellLocks myLocks;
    public AssertShellLocksAreGuarded(Lifetime lifetime, IShellLocks locks);
    private void AssertGuardedLock(object sender, BeforeAcquiringWriteLockEventArgs args);
    private void AssertGuardedLock();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_3();
}
public static class JetBrains.Application.Shell.BuildNumberUtil : object {
    public static string GetFullBuildNumber();
    public static int GetBuildNumber(string suffix);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Shell.DelayedInitialization : object {
    public virtual void Schedule(Lifetime lifetime, Action action, string actionName);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.Shell.HostCulture : object {
    [NotNullAttribute]
public CultureInfo Culture { get; }
    public virtual CultureInfo get_Culture();
}
[ObsoleteAttribute("Use ITearDown, and in tests assemblies only.")]
public interface JetBrains.Application.Shell.IObsoleteTearDown {
    public abstract virtual void TearDown();
}
public interface JetBrains.Application.Shell.IOneTimeInitializationHandler {
    public abstract virtual void PerformOneTimeInitialization();
}
public static class JetBrains.Application.Shell.OneTimeInitializationChecker : object {
    public static string IdentityRegistryValueName;
    public static string GenerationRegistryValueName;
    private static OneTimeInitializationChecker();
    public static bool IsInitializationNeeded(string identity, bool bMarkAsDone, Action`1<Exception> failed, ProductSettingsLocation productSettingsLocation);
    public static string GetActualIdentity(IApplicationHost applicationDescriptor);
}
public abstract class JetBrains.Application.Shell.OneTimeInitializationManager : object {
    private IEnumerable`1<IOneTimeInitializationHandler> myHandlers;
    private ProductSettingsLocation myProductSettingsLocation;
    private IApplicationHost myProduct;
    private bool myIsOneTimeInitializationRequiredForCurrentUser;
    private IProductCommandLine myProductCommandLine;
    public bool IsOneTimeInitializationRequiredForCurrentUser { get; }
    protected bool IsOneTimeInitAllowed { get; }
    protected OneTimeInitializationManager(IEnumerable`1<IOneTimeInitializationHandler> handlers, ProductSettingsLocation productSettingsLocation, IApplicationHost product, IProductCommandLine productCommandLine);
    public bool get_IsOneTimeInitializationRequiredForCurrentUser();
    protected abstract virtual bool get_IsOneTimeInitAllowed();
    protected virtual bool IsInitializationNeeded(bool markAsDone);
    protected void OneTimeInitialize(Lifetime lifetime);
    protected abstract virtual void OnCheckFailed(Exception exception);
}
[AttributeUsageAttribute("196")]
[MeansImplicitUseAttribute("8")]
[ComponentInstantiationAttribute("-32758")]
public class JetBrains.Application.ShellComponentAttribute : ProductComponentAttribute {
    protected static Instantiation ShellComponentDefaultInstantiation;
    public ShellComponentAttribute(Instantiation instantiation);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
public class JetBrains.Application.ShellFeaturePartAttribute : ComponentAttribute {
    protected static Instantiation ShellFeaturePartDefaultInstantiation;
    public ShellFeaturePartAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("0")]
[ZoneMarkerAttribute]
public class JetBrains.Application.ShellFeaturePartsContainer : object {
    private IComponentContainer myContainer;
    public ShellFeaturePartsContainer(NestedComponentContainerAllByPartAttribute`2<ShellFeaturePartAttribute, ShellPartCatalogSet> nestedComponentContainer);
    public sealed virtual IEnumerable`1<T> GetFeatureParts(Func`2<T, bool> isApplicable);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.ShellServiceAttribute : ShellComponentAttribute {
    public ShellServiceAttribute(Instantiation instantiation);
}
[TypeConverterAttribute("JetBrains.Application.Shortcuts.ActionShortcutConverter")]
[ValueSerializerAttribute("JetBrains.Application.Shortcuts.ActionShortcut/ActionShortcutSerializer")]
public abstract class JetBrains.Application.Shortcuts.ActionShortcut : object {
    public KeyboardShortcut[] KeyboardShortcuts { get; }
    public bool IsChord { get; }
    public abstract virtual KeyboardShortcut[] get_KeyboardShortcuts();
    public abstract virtual bool get_IsChord();
    public abstract virtual string ToString();
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.Shortcuts.ActionShortcutConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class JetBrains.Application.Shortcuts.DoubleShortcut : ActionShortcut {
    private KeyboardShortcut[] myShortcuts;
    private KeyboardShortcut FirstShortcut { get; }
    private KeyboardShortcut SecondShortcut { get; }
    public KeyboardShortcut[] KeyboardShortcuts { get; }
    public bool IsChord { get; }
    public DoubleShortcut(KeyboardShortcut firstShortcut, KeyboardShortcut secondShortcut);
    private KeyboardShortcut get_FirstShortcut();
    private KeyboardShortcut get_SecondShortcut();
    public virtual KeyboardShortcut[] get_KeyboardShortcuts();
    public virtual bool get_IsChord();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[FlagsAttribute]
public enum JetBrains.Application.Shortcuts.KeyboardModifiers : Enum {
    public int value__;
    public static KeyboardModifiers None;
    public static KeyboardModifiers ShiftLeft;
    public static KeyboardModifiers ShiftRight;
    public static KeyboardModifiers ControlLeft;
    public static KeyboardModifiers ControlRight;
    public static KeyboardModifiers AltLeft;
    public static KeyboardModifiers AltRight;
    public static KeyboardModifiers Shift;
    public static KeyboardModifiers Control;
    public static KeyboardModifiers Alt;
    public static KeyboardModifiers GeneralModifiersMask;
    public static KeyboardModifiers ShiftMaskLeftRight;
    public static KeyboardModifiers ControlMaskLeftRight;
    public static KeyboardModifiers AltMaskLeftRight;
    public static KeyboardModifiers ShiftMaskAll;
    public static KeyboardModifiers ControlMaskAll;
    public static KeyboardModifiers AltMaskAll;
}
public static class JetBrains.Application.Shortcuts.KeyboardModifiersUtils : object {
    public static Keys[] ModifierKeys;
    public static KeyboardModifiers[] Modifiers;
    public static Keys[] ModifierKeysMasks;
    public static KeyboardModifiers[] ModifierMasks;
    private static KeyboardModifiersUtils();
    public static KeyboardModifiers FetchModifiers(Keys& keys);
    public static KeyboardModifiers FetchModifiersMask(Keys keys);
    public static bool Match(KeyboardModifiers pattern, KeyboardModifiers modifiers);
    public static KeyboardModifiers[] DependentModifiers(KeyboardModifiers genericModifier);
    public static KeyboardModifiers[] GenericModifiers(KeyboardModifiers modifiers);
    public static KeyboardModifiers GetKeyboardModifiersState();
}
public class JetBrains.Application.Shortcuts.KeyboardParseException : Exception {
    public KeyboardParseException(string message, Exception innerException);
}
[TypeConverterAttribute("JetBrains.Application.Shortcuts.KeyboardShortcutConverter")]
[ValueSerializerAttribute("JetBrains.Application.Shortcuts.KeyboardShortcutSerializer")]
public class JetBrains.Application.Shortcuts.KeyboardShortcut : ValueType {
    private Keys myKey;
    private KeyboardModifiers myModifiers;
    public static KeyboardShortcut Invalid;
    public Keys Key { get; }
    public KeyboardModifiers Modifiers { get; }
    public KeyboardShortcut(Keys keys);
    public KeyboardShortcut(Keys keys, KeyboardModifiers keyboardModifiers);
    private static KeyboardShortcut();
    public Keys get_Key();
    public KeyboardModifiers get_Modifiers();
    private void UpdateModifiers();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string Format(KeyboardModifiers[] preferrableModifiers);
    public virtual string ToString();
    public static KeyboardShortcut Parse(string shortcut, KeyboardShortcut& secondShortcut);
    private static KeyboardShortcut Parse(string s);
    private static Keys ParseKeys(string s);
    private static KeyboardModifiers ParseModifiers(string s);
    public static bool op_Equality(KeyboardShortcut left, KeyboardShortcut right);
    public static bool op_Inequality(KeyboardShortcut left, KeyboardShortcut right);
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.Shortcuts.KeyboardShortcutConverter : TypeConverterBase`1<KeyboardShortcut> {
}
public class JetBrains.Application.Shortcuts.KeyboardShortcutSerializer : ValueSerializerBase`1<KeyboardShortcut> {
}
[ExtensionAttribute]
public static class JetBrains.Application.Shortcuts.MultiIdeActionMap.MultiIdeActionMapHelper : object {
    public static void UpdateMappingFile(FileSystemPath filePath, IIdeKeymapProvider provider);
    private static ValueTuple`3<string, string, string> UpdateMapping(string inputMapping, IIdeKeymapProvider keymapProvider);
    [ExtensionAttribute]
private static T SingleItem(IEnumerable`1<T> enumerable, T defaultValue);
    [ExtensionAttribute]
private static T SingleItem(IList`1<T> list, T defaultValue);
    [ExtensionAttribute]
private static T SingleItem(T[] array, T defaultValue);
    [ExtensionAttribute]
private static T SingleItem(IEnumerable`1<T> enumerable, Func`2<T, bool> predicate);
}
public enum JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope : Enum {
    public int value__;
    public static ShortcutScope Global;
    public static ShortcutScope TextEditor;
    public static ShortcutScope GlobalOnly;
}
public class JetBrains.Application.Shortcuts.ShortcutScheme : EnumPattern {
    public static string NOT_SET_NAME;
    public static string NONE_NAME;
    public static ShortcutScheme NotSet;
    public static ShortcutScheme None;
    public static ShortcutScheme Idea;
    public static ShortcutScheme VS;
    protected ShortcutScheme(string name);
    private static ShortcutScheme();
    public static ShortcutScheme Parse(string name);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Shortcuts.ShortcutScopeMonitor : object {
    public IProperty`1<ShortcutScope[]> ActiveShortcutScopes;
    protected static ShortcutScope[] DefaultScopes;
    protected static ShortcutScope[] TextControlScopes;
    protected static ReadonlyToken ReadonlyToken;
    private static ShortcutScopeMonitor();
}
[LocalizableAttribute("False")]
public static class JetBrains.Application.Shortcuts.ShortcutUtil : object {
    private static string DELIMETER;
    private static Regex ourWinFormToVSKeyRegex;
    private static Regex ourVSToWinFormKeyRegex;
    private static Dictionary`2<string, string> ourWinFormToVSKeyNames;
    private static Dictionary`2<string, string> ourVSToWinFormKeyNames;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<ValueTuple`3<VirtualKey, string, string>> KeyCodesAndNames;
    private static ShortcutUtil();
    [NotNullAttribute]
public static string GetBindingsString(ActionShortcut shortcut);
    [NotNullAttribute]
private static string ConvertToBindingString(string shortcutString);
    [NotNullAttribute]
private static string ConvertToKeyboardShortcutString(string bindingsString);
    [CanBeNullAttribute]
public static ActionShortcut BindingsToShortcut(string bindingsString, OnError onerror);
    [CanBeNullAttribute]
public static ActionShortcut ParseKeyboardShortcut(string text, OnError onerror);
    public static bool HasConflict(ActionShortcut a, ActionShortcut b);
    [CanBeNullAttribute]
public static ActionShortcut SelectShortcutForPresentation(IList`1<ActionShortcut> shortcuts);
}
public class JetBrains.Application.Shortcuts.SingleShortcut : ActionShortcut {
    private KeyboardShortcut[] myShortcuts;
    private KeyboardShortcut Shortcut { get; }
    public KeyboardShortcut[] KeyboardShortcuts { get; }
    public bool IsChord { get; }
    public SingleShortcut(KeyboardShortcut keyboardShortcut);
    private KeyboardShortcut get_Shortcut();
    public virtual KeyboardShortcut[] get_KeyboardShortcuts();
    public virtual bool get_IsChord();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
[FlagsAttribute]
public enum JetBrains.Application.Shortcuts.StructuralNavigationBehavior : Enum {
    public int value__;
    public static StructuralNavigationBehavior DisabledOnIndenting;
    public static StructuralNavigationBehavior DisabledAtLineEnd;
    public static StructuralNavigationBehavior DisabledOnSelection;
    public static StructuralNavigationBehavior DisabledInCommentsAndStringLiterals;
    public static StructuralNavigationBehavior BackwardEnabledAtStrictLineEnd;
    public static StructuralNavigationBehavior Forced;
    public static StructuralNavigationBehavior Default;
}
[ExtensionAttribute]
public static class JetBrains.Application.Shortcuts.StructuralNavigationBehaviorExtensions : object {
    [ExtensionAttribute]
public static bool HasFlag(StructuralNavigationBehavior value, StructuralNavigationBehavior flag);
}
[FlagsAttribute]
public enum JetBrains.Application.SingleInstanceStandaloneProductBehaviorFlags : Enum {
    public int value__;
    public static SingleInstanceStandaloneProductBehaviorFlags None;
    public static SingleInstanceStandaloneProductBehaviorFlags PassCommandLine;
    public static SingleInstanceStandaloneProductBehaviorFlags MakeMainWindowVisible;
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.StdApplicationUI.About.AboutBox : object {
    [CompilerGeneratedAttribute]
private Action <Show>k__BackingField;
    [NotNullAttribute]
public Action Show { get; protected set; }
    public AboutBox(IUIApplicationSimple environment, IApplicationHost host, IEnumerable`1<ApplicationPackageArtifact> apppkgs, IEnumerable`1<IPopulateAboutBox> populators);
    [CompilerGeneratedAttribute]
public Action get_Show();
    [CompilerGeneratedAttribute]
protected void set_Show(Action value);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "AboutActionText")]
public class JetBrains.Application.StdApplicationUI.About.AboutBoxAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[UsedImplicitlyAttribute]
internal class JetBrains.Application.StdApplicationUI.About.ExposeDeploymentPackagingIdentityInAboutBox : object {
    private Lazy`1<string> myIdentity;
    private double JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.Priority { get; }
    private string JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.ClipboardData { get; }
    private RichText JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.DisplayText { get; }
    public ExposeDeploymentPackagingIdentityInAboutBox(InstalledProductsDiscoveryComponent disco, HostInfo hostinfo, ILogger logger);
    private sealed virtual override double JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_Priority();
    private sealed virtual override string JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_ClipboardData();
    private sealed virtual override RichText JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_DisplayText();
}
[ShellComponentAttribute("10")]
internal class JetBrains.Application.StdApplicationUI.About.ExposeSourceControlBranchInAboutBox : object {
    private Lazy`1<ICollection`1<string>> myBranches;
    private double JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.Priority { get; }
    private string JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.ClipboardData { get; }
    private RichText JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.DisplayText { get; }
    public ExposeSourceControlBranchInAboutBox(SubProducts products, IEnumerable`1<SubplatformOriginalRevision> revisions);
    private sealed virtual override double JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_Priority();
    private sealed virtual override string JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_ClipboardData();
    private sealed virtual override RichText JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.get_DisplayText();
}
public interface JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox {
    public double Priority { get; }
    [CanBeNullAttribute]
public string ClipboardData { get; }
    [CanBeNullAttribute]
public RichText DisplayText { get; }
    public abstract virtual double get_Priority();
    public abstract virtual string get_ClipboardData();
    public abstract virtual RichText get_DisplayText();
}
public interface JetBrains.Application.StdApplicationUI.IMainWindow {
    [NotNullAttribute]
public IProperty`1<IWin32Window> PrimaryWindow { get; }
    [NotNullAttribute]
public IProperty`1<IWin32Window> ActiveWindow { get; }
    [NotNullAttribute]
public ICollectionEvents`1<IWin32Window> TopLevelWindows { get; }
    public abstract virtual IProperty`1<IWin32Window> get_PrimaryWindow();
    public abstract virtual IProperty`1<IWin32Window> get_ActiveWindow();
    public abstract virtual ICollectionEvents`1<IWin32Window> get_TopLevelWindows();
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.StdApplicationUI.OpensUri : object {
    public virtual bool IsInternetConnected();
    public virtual void OpenUri(Uri uri);
    public static void OpenUriImpl(Uri uri);
}
[ExtensionAttribute]
public static class JetBrains.Application.StdApplicationUI.OpensUriEx : object {
    [ExtensionAttribute]
public static bool ShowOnlineHelp(OpensUri opensUri, JetBrainsResourceMappingAccessor resourceMappingAccessor, IHostProductInfo hostProductInfo, string keyword, string preferredProduct, ShortcutScheme shortcutScheme);
    [ExtensionAttribute]
public static void Open(Uri uri);
}
public interface JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar {
    [NotNullAttribute]
public ICollectionEvents`1<JetStatusBarIndicator> Indicators { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsVisible { get; }
    [NotNullAttribute]
public IProperty`1<string> Text { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsEmphasized { get; }
    public abstract virtual ICollectionEvents`1<JetStatusBarIndicator> get_Indicators();
    public abstract virtual IProperty`1<bool> get_IsVisible();
    public abstract virtual IProperty`1<string> get_Text();
    public abstract virtual IProperty`1<bool> get_IsEmphasized();
}
[ExtensionAttribute]
public static class JetBrains.Application.StdApplicationUI.StatusBars.IStatusBarEx : object {
    [ExtensionAttribute]
public static void ClearText(IStatusBar thіs);
    [ExtensionAttribute]
public static void SetText(IStatusBar thіs, string text, bool isEmphisized);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetCurrentText(IStatusBar thіs, SubclassedStatusBar subclassedStatusBar);
    [ExtensionAttribute]
public static IListEvents`1<JetStatusBarIndicator> OrderByPriorityLive(ICollectionEvents`1<JetStatusBarIndicator> indicators, Lifetime lifetime);
}
public class JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarClickEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MouseButtons <Button>k__BackingField;
    public MouseButtons Button { get; }
    public JetStatusBarClickEventArgs(MouseButtons button);
    [CompilerGeneratedAttribute]
public MouseButtons get_Button();
}
public class JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator : object {
    [NotNullAttribute]
private Signal`1<JetStatusBarClickEventArgs> myClick;
    [NotNullAttribute]
private IProperty`1<IAutomation> myContent;
    [NotNullAttribute]
private ISignal`1<ContextMenuEventArgs> myContextMenu;
    [NotNullAttribute]
private ISimpleSignal myContextMenuRequested;
    [NotNullAttribute]
private Lazy`1<Property`1<Cursor>> myCursor;
    [NotNullAttribute]
private Signal`1<JetStatusBarClickEventArgs> myDoubleClick;
    [NotNullAttribute]
private Property`1<bool> myIsHot;
    [NotNullAttribute]
private IProperty`1<Padding> myMargin;
    [NotNullAttribute]
private ISignal`1<OutEventArgs`1<PopupWindowContextSource>> myPopupWindowContextRequested;
    private double myPriority;
    [NotNullAttribute]
private ISignal`1<OutEventArgs`1<RichTextBlock>> myTooltipRequested;
    [CompilerGeneratedAttribute]
private IProperty`1<Func`3<Lifetime, IAnchoringRect, IPopupLayouter>> <PopupLayouterFactory>k__BackingField;
    [NotNullAttribute]
public ISignal`1<JetStatusBarClickEventArgs> Click { get; }
    [NotNullAttribute]
public IProperty`1<IAutomation> Content { get; }
    [NotNullAttribute]
public ISignal`1<ContextMenuEventArgs> ContextMenu { get; }
    [NotNullAttribute]
public ISimpleSignal ContextMenuRequested { get; }
    [NotNullAttribute]
public IProperty`1<Cursor> Cursor { get; }
    [NotNullAttribute]
public ISignal`1<JetStatusBarClickEventArgs> DoubleClick { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsHot { get; }
    public IProperty`1<Padding> Margin { get; }
    public ISignal`1<OutEventArgs`1<PopupWindowContextSource>> PopupWindowContextRequested { get; }
    public double Priority { get; }
    [NotNullAttribute]
public ISignal`1<OutEventArgs`1<RichTextBlock>> TooltipRequested { get; }
    [NotNullAttribute]
public IProperty`1<Func`3<Lifetime, IAnchoringRect, IPopupLayouter>> PopupLayouterFactory { get; }
    public JetStatusBarIndicator(Lifetime lifetime, ILogger logger, double priority);
    public ISignal`1<JetStatusBarClickEventArgs> get_Click();
    public IProperty`1<IAutomation> get_Content();
    public ISignal`1<ContextMenuEventArgs> get_ContextMenu();
    public ISimpleSignal get_ContextMenuRequested();
    public IProperty`1<Cursor> get_Cursor();
    public ISignal`1<JetStatusBarClickEventArgs> get_DoubleClick();
    public IProperty`1<bool> get_IsHot();
    public IProperty`1<Padding> get_Margin();
    public ISignal`1<OutEventArgs`1<PopupWindowContextSource>> get_PopupWindowContextRequested();
    public double get_Priority();
    public ISignal`1<OutEventArgs`1<RichTextBlock>> get_TooltipRequested();
    [CompilerGeneratedAttribute]
public IProperty`1<Func`3<Lifetime, IAnchoringRect, IPopupLayouter>> get_PopupLayouterFactory();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.StdApplicationUI.StatusBars.StatusBar : object {
    private ICollectionEvents`1<JetStatusBarIndicator> myIndicators;
    private IProperty`1<bool> myIsVisible;
    private IProperty`1<string> myText;
    private IProperty`1<bool> myIsEmphasized;
    private ICollectionEvents`1<JetStatusBarIndicator> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.Indicators { get; }
    private IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.IsVisible { get; }
    private IProperty`1<string> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.Text { get; }
    private IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.IsEmphasized { get; }
    public StatusBar(Lifetime lifetime);
    private sealed virtual override ICollectionEvents`1<JetStatusBarIndicator> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_Indicators();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_IsVisible();
    private sealed virtual override IProperty`1<string> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_Text();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.get_IsEmphasized();
}
public interface JetBrains.Application.StdApplicationUI.TaskBar.ITaskBarManager {
    public abstract virtual void AddProgress(Lifetime lifetime, IProgressIndicatorModel indicatorModel);
    public abstract virtual void SetProgressState(TaskBarProgressState state);
    public abstract virtual void SetFinalState(TaskBarProgressState state);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.StdApplicationUI.TaskBar.TaskBarManager : object {
    private sealed virtual override void JetBrains.Application.StdApplicationUI.TaskBar.ITaskBarManager.AddProgress(Lifetime lifetime, IProgressIndicatorModel indicatorModel);
    protected virtual void AddProgressCore(Lifetime lifetime, IProgressIndicatorModel indicatorModel);
    protected virtual void SetProgressStateCore(TaskBarProgressState state);
    protected virtual void SetFinalStateCore(TaskBarProgressState state);
    private sealed virtual override void JetBrains.Application.StdApplicationUI.TaskBar.ITaskBarManager.SetProgressState(TaskBarProgressState state);
    private sealed virtual override void JetBrains.Application.StdApplicationUI.TaskBar.ITaskBarManager.SetFinalState(TaskBarProgressState state);
}
public enum JetBrains.Application.StdApplicationUI.TaskBar.TaskBarProgressState : Enum {
    public int value__;
    public static TaskBarProgressState NoProgress;
    public static TaskBarProgressState Indeterminate;
    public static TaskBarProgressState Normal;
    public static TaskBarProgressState Error;
    public static TaskBarProgressState Paused;
}
internal class JetBrains.Application.SubProductPackage : object {
    [CompilerGeneratedAttribute]
private IApplicationPackage <Package>k__BackingField;
    [CompilerGeneratedAttribute]
private IProductInfo <SubProductInfo>k__BackingField;
    public IApplicationPackage Package { get; }
    public IProductInfo SubProductInfo { get; }
    public SubProductPackage(IApplicationPackage package, IProductInfo subProductInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IApplicationPackage get_Package();
    [CompilerGeneratedAttribute]
public sealed virtual IProductInfo get_SubProductInfo();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.SubProducts : object {
    private ILogger myLogger;
    private EnvironmentZonesExtra myEnvironmentZonesExtra;
    private ProductConfigurations myProductConfigurations;
    private ApplicationPackages myApplicationPackages;
    private ILazy`1<IEnumerable`1<JetPackageMetadata>> myPackagesMetadata;
    private IList`1<ISubProductInfo> mySubProducts;
    public ICollection`1<ISubProductInfo> SubProductsInfos { get; }
    public SubProducts(EnvironmentZonesExtra environmentZonesExtra, ProductConfigurations configurations, ApplicationPackages apppkgs, ILazy`1<IEnumerable`1<JetPackageMetadata>> packagesMetadata);
    public ICollection`1<ISubProductInfo> get_SubProductsInfos();
    private IList`1<ISubProductInfo> CollectSubProducts();
    public static string GetPriorityString(IProductInfo productInfo);
    public static string GetPriorityString(string productTechnicalName);
}
public class JetBrains.Application.SynchronizationPoint.SynchronizationPoint : Reasons`1<string> {
    public SynchronizationPoint(string name, ILogger logger, bool uniqueSuppressors);
}
[EnvironmentComponentAttribute("16")]
public class JetBrains.Application.SynchronizationPoint.SynchronizationPoints : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private IDictionary`2<string, SynchronizationPoint> mySynchronizationPoints;
    private Reasons`1<string> myAllSyncPointsSuppressor;
    public IProperty`1<bool> AllSyncPointsReached { get; }
    public SynchronizationPoints(Lifetime lifetime, ILogger logger);
    public SynchronizationPoint GetOrCreateSyncPoint(string name, bool uniqueSuppressors);
    public IList`1<SynchronizationPoint> GetAllSyncPoints();
    public IProperty`1<bool> get_AllSyncPointsReached();
    public IList`1<SynchronizationPoint> GetNotReachedSyncPoints();
}
[ExtensionAttribute]
public static class JetBrains.Application.SynchronizationPoint.SynchronizationPointsEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetNotReachedSyncPointsReasons(SynchronizationPoints synchronizationPoints);
    [ExtensionAttribute]
public static SynchronizationPoint CreateSyncPointAndAttachGroupingEvent(SynchronizationPoints synchronizationPoints, Lifetime lifetime, GroupingEvent groupingEvent, bool uniqueSuppressors);
    [ExtensionAttribute]
public static void AttachGroupingEvent(SynchronizationPoint synchronizationPoint, Lifetime lifetime, GroupingEvent groupingEvent);
    [ExtensionAttribute]
public static void AttachTask(SynchronizationPoint synchronizationPoint, Task task);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.ActorEx : object {
    [ExtensionAttribute]
[PublicAPIAttribute]
public static bool WaitForEmpty(Actor`1<T> actor, Lifetime lifetime, IThreading threading);
}
public class JetBrains.Application.Threading.AggregatedConsrtaint : object {
    [CompilerGeneratedAttribute]
private IReadConstraint[] <constraint>P;
    public AggregatedConsrtaint(IReadConstraint[] constraint);
    public sealed virtual bool IsSatisfied();
    public sealed virtual Task AwaitConstraint(Lifetime lifetime);
}
public class JetBrains.Application.Threading.ApplicationMutex : object {
    private static Dictionary`2<string, ApplicationMutex> ourMap;
    private Mutex myMutex;
    private string myMutexName;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myOwned;
    private ILogger myLogger;
    private ApplicationMutex(string mutexName);
    private static ApplicationMutex();
    public static ApplicationMutex CreateMutex(string mutexName);
    public bool TryAquire();
    public void Release();
    private static void ExecuteDispatcherThread(Action action);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <Release>b__8_0();
}
public static class JetBrains.Application.Threading.AsyncBuilder : object {
    public static AsyncBuilderResult`2<TMainResult, TBackgroundResult> BuildWithTimeOut(TParams parameters, Func`2<TParams, TMainResult> mainBuildFunc, Func`2<TParams, TBackgroundResult> backgroundBuildFunc, int timeout, IShellLocks locks);
}
public class JetBrains.Application.Threading.AsyncBuilderResult`2 : object {
    [CompilerGeneratedAttribute]
private TBackgroundResult <BackgroundResult>k__BackingField;
    [CompilerGeneratedAttribute]
private TMainResult <MainResult>k__BackingField;
    [CanBeNullAttribute]
public TBackgroundResult BackgroundResult { get; }
    [NotNullAttribute]
public TMainResult MainResult { get; }
    public AsyncBuilderResult`2(TBackgroundResult backgroundResult, TMainResult mainResult);
    [CompilerGeneratedAttribute]
public TBackgroundResult get_BackgroundResult();
    [CompilerGeneratedAttribute]
public TMainResult get_MainResult();
}
public class JetBrains.Application.Threading.AsyncProcessing.AsyncItemsProcessor`1 : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IAsyncScheduler myScheduler;
    [NotNullAttribute]
private Reasons`1<string> myPauseReasons;
    [NotNullAttribute]
private ILogger myLogger;
    [CompilerGeneratedAttribute]
private IItemsToProcess`1<T> <ItemsToProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<T> <ProcessItemAction>k__BackingField;
    [NotNullAttribute]
public IItemsToProcess`1<T> ItemsToProcess { get; }
    [NotNullAttribute]
private Action`1<T> ProcessItemAction { get; }
    public AsyncItemsProcessor`1(Lifetime lifetime, Action`1<T> processItemAction, IItemsToProcess`1<T> itemsToProcess, IAsyncScheduler scheduler, ILogger logger);
    [CompilerGeneratedAttribute]
public IItemsToProcess`1<T> get_ItemsToProcess();
    [CompilerGeneratedAttribute]
private Action`1<T> get_ProcessItemAction();
    private void WhenProcessingIsNotEmpty(Lifetime isNotEmptyLifetime);
    public void Pause(Lifetime lifetime, string reason);
    private void ProcessItems();
    private void ProcessItemsInternal();
    public void UnpauseAndSynchronouslyWaitForItemsToProcessIfPaused();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0(Lifetime enabledLifetime);
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_2();
    [CompilerGeneratedAttribute]
private void <WhenProcessingIsNotEmpty>b__11_0();
    [CompilerGeneratedAttribute]
private void <WhenProcessingIsNotEmpty>b__11_1();
    [CompilerGeneratedAttribute]
private void <ProcessItemsInternal>b__14_0();
    [CompilerGeneratedAttribute]
private void <ProcessItemsInternal>b__14_1(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private void <UnpauseAndSynchronouslyWaitForItemsToProcessIfPaused>b__15_0(Lifetime lifetime);
}
public static class JetBrains.Application.Threading.AsyncProcessing.AsyncItemsProcessorEx : object {
    public static AsyncItemsProcessor`1<T> CreateFreeThreadedEx(Lifetime lifetime, IShellLocks locks, ILogger logger, LockingMode lockingMode, Action`1<T> processItem, InterruptionSet checkForInterrupt);
    public static AsyncItemsProcessor`1<Action> CreateBatchWriteActions(Lifetime lifetime, string name, IShellLocks locks, ILogger logger, Action`1<Action> wrapProcessItemsAction);
    public static AsyncItemsProcessor`1<T> CreateUIThreadWithReadLock(Lifetime lifetime, IShellLocks locks, ILogger logger, Action`1<T> processItem);
}
public enum JetBrains.Application.Threading.AsyncProcessing.AsyncSchedulerOnInterruptedBehavior : Enum {
    public int value__;
    public static AsyncSchedulerOnInterruptedBehavior RESCHEDULE;
    public static AsyncSchedulerOnInterruptedBehavior RETRY_IN_THE_SAME_LOOP;
    public static AsyncSchedulerOnInterruptedBehavior FAIL_ITEM_AND_CONTINUE_IN_THE_SAME_LOOP;
    public static AsyncSchedulerOnInterruptedBehavior SKIP_ITEM_AND_CONTINUE_IN_THE_SAME_LOOP;
    public static AsyncSchedulerOnInterruptedBehavior RETHROW_INTERRUPTION;
}
public class JetBrains.Application.Threading.AsyncProcessing.FreeThreadedGrouppingEventScheduler : object {
    private FreeThreadedGroupingEvent myEvent;
    private Action myAction;
    private Lifetime myLifetime;
    private IShellLocks myShellLocks;
    private ILogger myLogger;
    private LockingMode myLockingMode;
    private InterruptionSet myCheckForInterrupt;
    private object myLockObject;
    private LifetimeDefinition myExecutionLifetimeDefinition;
    private int myScheduleAllowedCount;
    public FreeThreadedGrouppingEventScheduler(Lifetime lifetime, IShellLocks shellLocks, ILogger logger, LockingMode lockingMode, InterruptionSet checkForInterrupt, double milliseconds, GroupingEventProlongation groupingEventProlongation);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0(bool b);
    [CompilerGeneratedAttribute]
private void <Schedule>b__12_0();
    [CompilerGeneratedAttribute]
private void <Schedule>b__12_1();
    [CompilerGeneratedAttribute]
private void <Schedule>b__12_2();
    [CompilerGeneratedAttribute]
private void <Schedule>b__12_5();
    [CompilerGeneratedAttribute]
private void <Schedule>b__12_6();
    [CompilerGeneratedAttribute]
private void <Schedule>b__12_3();
}
public class JetBrains.Application.Threading.AsyncProcessing.GroupingEventScheduler : object {
    private GroupingEvent myEvent;
    private Action myAction;
    private ILogger myLogger;
    private IAsyncScheduler myNextScheduler;
    public GroupingEventScheduler(Lifetime lifetime, string name, GroupingEventHosts groupingEventHosts, ILogger logger, IAsyncScheduler nextScheduler, double milliseconds);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
}
public interface JetBrains.Application.Threading.AsyncProcessing.IAsyncScheduler {
    public abstract virtual void Schedule(Lifetime lifetime, Action action);
    public abstract virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
}
public interface JetBrains.Application.Threading.AsyncProcessing.IItemsToProcess`1 {
    public IProperty`1<bool> IsEmptyNotificationMode { get; }
    public IProperty`1<bool> IsEmptyProcessingMode { get; }
    public abstract virtual IProperty`1<bool> get_IsEmptyNotificationMode();
    public abstract virtual IProperty`1<bool> get_IsEmptyProcessingMode();
    public abstract virtual void Add(T item);
    public abstract virtual void Remove(T item);
    public abstract virtual bool TryGetNextItem(T& result);
    public abstract virtual void OnProcessingFinished(T item);
    public abstract virtual void OnProcessingInterrupted(T item);
}
public class JetBrains.Application.Threading.AsyncProcessing.ItemsToProcess`1 : object {
    [CompilerGeneratedAttribute]
private OrderedDictionary`2<T, ItemState<T>> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEmptyNotificationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEmptyProcessingMode>k__BackingField;
    [NotNullAttribute]
protected OrderedDictionary`2<T, ItemState<T>> Items { get; }
    [NotNullAttribute]
protected ILogger Logger { get; }
    public IProperty`1<bool> IsEmptyNotificationMode { get; }
    public IProperty`1<bool> IsEmptyProcessingMode { get; }
    public ItemsToProcess`1(Lifetime lifetime, ILogger logger);
    [CompilerGeneratedAttribute]
protected OrderedDictionary`2<T, ItemState<T>> get_Items();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    protected void UpdateIsEmpty();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEmptyNotificationMode();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEmptyProcessingMode();
    public sealed virtual void Add(T item);
    public sealed virtual void Remove(T item);
    public sealed virtual bool TryGetNextItem(T& result);
    public sealed virtual void OnProcessingFinished(T item);
    public sealed virtual void OnProcessingInterrupted(T item);
}
public class JetBrains.Application.Threading.AsyncProcessing.SwitchingByAsyncBehaviorProhibitedScheduler : object {
    [NotNullAttribute]
private IAsyncScheduler mySyncScheduler;
    private ILogger myLogger;
    private IProperty`1<Pair`2<Lifetime, IAsyncScheduler>> myCurrentSchedulerWithLifetime;
    public SwitchingByAsyncBehaviorProhibitedScheduler(Lifetime lifetime, IShellLocks locks, IAsyncScheduler syncScheduler, IAsyncScheduler asyncScheduler, ILogger logger);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
    public static SwitchingByAsyncBehaviorProhibitedScheduler CreateWithFreeThreadedGrouppingEventScheduler(Lifetime lifetime, IShellLocks locks, ILogger logger, LockingMode lockingMode, InterruptionSet checkForInterrupt);
}
public class JetBrains.Application.Threading.AsyncProcessing.SyncScheduler : object {
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstSleepInMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MultiplyFactor>k__BackingField;
    public static IAsyncScheduler Instance;
    public int MaxRetryCount { get; }
    public int FirstSleepInMilliseconds { get; }
    public int MultiplyFactor { get; }
    public SyncScheduler(int maxRetryCount, int firstSleepInMilliseconds, int multiplyFactor);
    private static SyncScheduler();
    [CompilerGeneratedAttribute]
public int get_MaxRetryCount();
    [CompilerGeneratedAttribute]
public int get_FirstSleepInMilliseconds();
    [CompilerGeneratedAttribute]
public int get_MultiplyFactor();
    public virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
}
public class JetBrains.Application.Threading.AsyncProcessing.SyncSchedulerWithReadLock : SyncScheduler {
    private IShellLocks myLocks;
    public SyncSchedulerWithReadLock(IShellLocks locks, int maxRetryCount, int firstSleepInMilliseconds, int multiplyFactor);
    public virtual void Schedule(Lifetime lifetime, Action action);
}
public class JetBrains.Application.Threading.AsyncProcessing.TaskScheduler : object {
    [CanBeNullAttribute]
private InterruptionSet myCheckForInterrupt;
    private Scheduling myScheduling;
    private TaskCreationOptions myTaskCreationOptions;
    private Lifetime myLifetime;
    private ITaskHost myTaskHost;
    private TaskJetProperties myTaskProperties;
    public TaskScheduler(Lifetime lifetime, ITaskHost taskHost, Scheduling scheduling, InterruptionSet checkForInterrupt, TaskCreationOptions taskCreationOptions, TaskJetProperties taskProperties);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
}
public class JetBrains.Application.Threading.AsyncProcessing.UIThreadWithReadLockScheduler : object {
    private IShellLocks myShellLocks;
    public UIThreadWithReadLockScheduler(IShellLocks shellLocks);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
}
public class JetBrains.Application.Threading.AsyncProcessing.WriteActionScheduler : object {
    private string myName;
    private IShellLocks myShellLocks;
    private Action`1<Action> myWrapAction;
    public WriteActionScheduler(string name, IShellLocks shellLocks, Action`1<Action> wrapAction);
    public sealed virtual void Schedule(Lifetime lifetime, Action action);
    public sealed virtual AsyncSchedulerOnInterruptedBehavior OnInterrupted(int interruptedCount);
}
public class JetBrains.Application.Threading.AsyncReadLockLazy`1 : object {
    private static Func`2<Lifetime, TValue> ourFactoryBusyMarker;
    private LifetimeDefinition myLifetimeDefinition;
    private IShellLocks myLocks;
    private Task`1<TValue> myTask;
    private TaskCompletionSource`1<TValue> myTaskCompletionSource;
    private Func`2<Lifetime, TValue> myFactory;
    private int myAsyncCalculationScheduled;
    public AsyncReadLockLazy`1(TValue value);
    public AsyncReadLockLazy`1(Task`1<TValue> valueTask);
    public AsyncReadLockLazy`1(Lifetime lifetime, Func`2<Lifetime, TValue> factory, IShellLocks locks);
    private static AsyncReadLockLazy`1();
    public TValue GetValueSync();
    public Task`1<TValue> GetValueAsync();
    private void TryScheduleCalculation();
    private void CalculateWithReadLock();
    private void CalculateCore();
    private void CheckCyclicCalls();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
private void <TryScheduleCalculation>b__12_0(LifetimeDefinition ld);
}
public class JetBrains.Application.Threading.BeforeAcquiringWriteLockEventArgs : EventArgs {
    public bool IsTryAcquire;
    public CallerInfo CallerInfo;
    private BeforeAcquiringWriteLockEventArgs(bool isTryAcquire, CallerInfo callerInfo);
    [NotNullAttribute]
[PureAttribute]
public static BeforeAcquiringWriteLockEventArgs CreateAcquireInstance(CallerInfo callerInfo);
    [NotNullAttribute]
[PureAttribute]
public static BeforeAcquiringWriteLockEventArgs CreateTryAcquireInstance(CallerInfo callerInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Threading.ContentModelReadWriteLock : object {
    private ReaderWriterLockSlim myMainRwLock;
    [NullableAttribute("2")]
private LifetimeDefinition modreq(System.Runtime.CompilerServices.IsVolatile) myWriteLockLifetimeDefinition;
    private int myWriteLockTimestamp;
    [NullableAttribute("2")]
private NoReentrancySynchronizationContext myNoReentrancySynchronizationContext;
    private ILogger myLogger;
    private JetDispatcher myDispatcher;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action BeforeAcquiringReadLock;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action AfterReadLockReleased;
    private List`1<EventHandler`1<BeforeAcquiringWriteLockEventArgs>> myBeforeAcquiringWriteLockHandlers;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventHandler`1[] myBeforeAcquiringWriteLockHandlersCached;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<BeforeAcquiringWriteLockEventArgs> BeforeAcquiringWriteLockInContentModelFork;
    private SimpleSignal myAfterWriteLockReleased;
    private Queue`1<CallerInfo> myLastWriterLockCallers;
    private static ReadonlyToken ourBackgroundReadersAllowedPoliteReadonlyToken;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <BackgroundReadersAllowedPolite>k__BackingField;
    private int myPoliteInterruptersCount;
    private ConcurrentBag`1<Action> myAsyncWriteLockSubscribers;
    private ContentWriteLockInterruptionSource myInterruption;
    private ContentWriteLockPoliteInterruptionSource myInterruptionPolite;
    [CompilerGeneratedAttribute]
private SimpleSignal <InterruptionInvalidation>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleSignal <InterruptionInvalidationPolite>k__BackingField;
    private SequentialLifetimes myBackgroundReadersAllowedSequentialLifetimes;
    private Lifetime myBackgroundReadersAllowedLifetime;
    private SequentialLifetimes myNoNewWriteLocksSequentialLifetimes;
    private Lifetime myNoNewWriteLocksLifetime;
    [ThreadStaticAttribute]
private static int ourLockAcquisitionForbidden;
    [ThreadStaticAttribute]
private static bool ourWriteLockEventNotificationInProcess;
    private static bool ourUiSmoothnessSupported;
    private ReaderWriterLockSlim RwLockInCurrentFork { get; }
    public bool IsReadAccessAllowed { get; }
    public bool IsReadLockHeld { get; }
    public bool IsWriteAccessAllowed { get; }
    [ObsoleteAttribute("Use IsWriteAccessAllowed instead")]
public bool IsWriteLockHeld { get; }
    public bool IsWriteLockRequestedOrHeldBySomeThread { get; }
    public int WriteLockTimestamp { get; }
    public ISimpleSignal AfterWriteLockReleased { get; }
    public IProperty`1<bool> BackgroundReadersAllowedPolite { get; }
    internal bool HasPoliteInterrupters { get; }
    internal SimpleSignal InterruptionInvalidation { get; }
    internal SimpleSignal InterruptionInvalidationPolite { get; }
    public IInterruptionSource Interruption { get; }
    public IInterruptionSource InterruptionPolite { get; }
    private static ContentModelReadWriteLock();
    private ReaderWriterLockSlim get_RwLockInCurrentFork();
    public sealed virtual bool get_IsReadAccessAllowed();
    public sealed virtual bool get_IsReadLockHeld();
    public sealed virtual bool get_IsWriteAccessAllowed();
    public sealed virtual bool get_IsWriteLockHeld();
    public sealed virtual bool get_IsWriteLockRequestedOrHeldBySomeThread();
    public Task AwaitCurrentWriteLockCompletion(Lifetime lifetime);
    public int get_WriteLockTimestamp();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_BeforeAcquiringReadLock(Action value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_BeforeAcquiringReadLock(Action value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_AfterReadLockReleased(Action value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_AfterReadLockReleased(Action value);
    public sealed virtual void AcquireReadLock();
    public sealed virtual bool TryAcquireReadLock(int timeoutMs);
    private bool TryAcquireReadLockInFork(ContentModelForkDefinition currentFork, int timeoutMs);
    [HandleProcessCorruptedStateExceptionsAttribute]
private void FireBeforeAcquiringReadLock();
    public sealed virtual void ReleaseReadLock();
    private void ReleaseReadLockInFork(ContentModelForkDefinition currentFork);
    [HandleProcessCorruptedStateExceptionsAttribute]
private void FireAfterReadLockReleased();
    private void AssertGlobalReadLockIsTakenInFork();
    public void add_BeforeAcquiringWriteLock(EventHandler`1<BeforeAcquiringWriteLockEventArgs> value);
    public void remove_BeforeAcquiringWriteLock(EventHandler`1<BeforeAcquiringWriteLockEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_BeforeAcquiringWriteLockInContentModelFork(EventHandler`1<BeforeAcquiringWriteLockEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeAcquiringWriteLockInContentModelFork(EventHandler`1<BeforeAcquiringWriteLockEventArgs> value);
    public ISimpleSignal get_AfterWriteLockReleased();
    public sealed virtual void AcquireWriteLock(CallerInfo callerInfo);
    [NullableContextAttribute("2")]
public sealed virtual void AcquireWriteLock(string callerFilePath, string callerMemberName);
    [NullableContextAttribute("2")]
public sealed virtual bool TryAcquireWriteLock(int timeoutMs, string callerFilePath, string callerMemberName);
    public sealed virtual bool TryAcquireWriteLock(int timeoutMs, CallerInfo callerInfo);
    private bool TryAcquireWriteLockInFork(ContentModelForkDefinition currentFork, CallerInfo callerInfo, int timeoutMs);
    [NullableContextAttribute("2")]
private void AssertBeforeAcquireWriteLock(ContentModelForkDefinition currentFork);
    [HandleProcessCorruptedStateExceptionsAttribute]
private void FireBeforeAcquiringWriteLock(BeforeAcquiringWriteLockEventArgs args);
    [HandleProcessCorruptedStateExceptionsAttribute]
private void FireBeforeAcquiringWriteLockInFork(ContentModelForkDefinition currentFork, BeforeAcquiringWriteLockEventArgs args);
    public sealed virtual void ReleaseWriteLock();
    private void EnsureWriteLockLifetimeIsTerminated();
    private void ReleaseWriteLockInFork(ContentModelForkDefinition currentFork);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_BackgroundReadersAllowedPolite();
    internal bool get_HasPoliteInterrupters();
    internal void WhenNoReadLocks(Lifetime lifetime, bool interrupt, Action onReady, CallerInfo callerInfo);
    private void PoliteListenersInvalidate();
    private bool TryNotifyAsyncLockWaiters();
    private void NotifyAllAsyncLockSubscribers();
    [CompilerGeneratedAttribute]
internal SimpleSignal get_InterruptionInvalidation();
    [CompilerGeneratedAttribute]
internal SimpleSignal get_InterruptionInvalidationPolite();
    private void InvalidateInterruptions();
    public sealed virtual IInterruptionSource get_Interruption();
    public sealed virtual IInterruptionSource get_InterruptionPolite();
    [PureAttribute]
internal string GetInterruptionDebugString(bool isInterruptSignalled);
    [PublicAPIAttribute]
[MustUseReturnValueAttribute]
public Lifetime BackgroundReadersAllowedLifetime();
    [PublicAPIAttribute]
[MustUseReturnValueAttribute]
public Lifetime NoNewWriteLocksLifetime();
    public static void BeginLockAcquisitionForbiddenState();
    public static void EndLockAcquisitionForbiddenState();
    private void HandleReadLockReleaseForUiSmoothnessAsserts();
    private void LogAction(string action, Nullable`1<CallerInfo> caller, Nullable`1<int> timeoutMs, Nullable`1<long> duration);
    private void LogActionCold(string action, Nullable`1<CallerInfo> caller, Nullable`1<int> timeoutMs, Nullable`1<long> duration);
    [CompilerGeneratedAttribute]
private void <FireBeforeAcquiringReadLock>g__HandleColdFault|31_0(Exception exception, Action action);
    [CompilerGeneratedAttribute]
private void <FireAfterReadLockReleased>g__HandleColdFault|34_0(Exception exception, Action action);
    [CompilerGeneratedAttribute]
private bool <TryAcquireWriteLock>g__TryEnterWriteLockCheckUiSmoothness|50_0(<>c__DisplayClass50_0& );
    [CompilerGeneratedAttribute]
private void <FireBeforeAcquiringWriteLock>g__HandleColdFault|53_0(Exception exception, EventHandler`1<BeforeAcquiringWriteLockEventArgs> handler);
    [CompilerGeneratedAttribute]
private void <FireBeforeAcquiringWriteLockInFork>g__HandleColdFault|54_0(Exception exception, EventHandler`1<BeforeAcquiringWriteLockEventArgs> handler);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.ContentModelReadWriteLockEx : object {
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static ProhibitedReadLockCookie ProhibitReadLockCookie(ContentModelReadWriteLock rwLock, string reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.Threading.ContentWriteLockInterruptionSource : InterruptionSourceBaseNoLifetime {
    [CompilerGeneratedAttribute]
private ContentModelReadWriteLock <contentModelLocks>P;
    private int myWriteLockRequestedOrHeld;
    public ContentWriteLockInterruptionSource(ContentModelReadWriteLock contentModelLocks);
    public virtual bool CheckInterrupt();
    public void Invalidate();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.Threading.ContentWriteLockPoliteInterruptionSource : InterruptionSourceBaseNoLifetime {
    [CompilerGeneratedAttribute]
private ContentModelReadWriteLock <contentModelLocks>P;
    private int myInterrupt;
    public ContentWriteLockPoliteInterruptionSource(ContentModelReadWriteLock contentModelLocks);
    public virtual bool CheckInterrupt();
    public void Invalidate();
    public virtual string ToString();
}
public class JetBrains.Application.Threading.DeadlockResolutionByTimeoutRegion : object {
    private static int DefaultReadLockTimeout;
    [ThreadStaticAttribute]
private static DeadlockResolutionByTimeoutRegion ourThreadLocalCookie;
    private bool myPossibleDeadlockHappened;
    private int myReentrancyCount;
    public static bool TryReadLock(ContentModelReadWriteLock rwLock, int timeout);
    public static DeadlockResolutionByTimeoutRegion Create();
    public sealed virtual void Dispose();
}
public class JetBrains.Application.Threading.ExecuteOrQueueSingular : object {
    [NotNullAttribute]
private Action`1<Action> myFExecuteOrQueue;
    private Lifetime myLifetime;
    private Action myFUserAction;
    private int myIsPendingExecution;
    [CanBeNullAttribute]
private string myName;
    public ExecuteOrQueueSingular(Lifetime lifetime, string name, Action FUserAction, IThreading threading);
    public ExecuteOrQueueSingular(Lifetime lifetime, Action FUserAction, Action`1<Action> FExecuteOrQueue);
    public void ExecuteOrQueue();
    private void OnExecute();
}
internal class JetBrains.Application.Threading.GroupingEvents.BackgroundThreadGroupingEventWrapper : object {
    private FreeThreadedGroupingEvent myEv;
    public BackgroundThreadGroupingEventWrapper(FreeThreadedGroupingEvent ev, Lifetime lifetime, Action handler);
    public sealed virtual void Fire();
}
[ShellComponentAttribute("16")]
internal class JetBrains.Application.Threading.GroupingEvents.GroupingEventFactory : object {
    private IThreading myThreading;
    public GroupingEventFactory(IThreading threading);
    public sealed virtual IGroupingEvent Create(Lifetime lifetime, string name, TimeSpan period, GroupingEventProlongation prolongationPolicy, ThreadingPolicy threadingPolicy, Action handler);
}
public interface JetBrains.Application.Threading.GroupingEvents.IGroupingEvent {
    public abstract virtual void Fire();
}
public interface JetBrains.Application.Threading.GroupingEvents.IGroupingEventFactory {
    [NotNullAttribute]
public abstract virtual IGroupingEvent Create(Lifetime lifetime, string name, TimeSpan period, GroupingEventProlongation prolongationPolicy, ThreadingPolicy threadingPolicy, Action handler);
}
internal class JetBrains.Application.Threading.GroupingEvents.MainThreadGroupingEventWrapper : object {
    private Action myFire;
    public MainThreadGroupingEventWrapper(GroupingEvent ev, GroupingEventProlongation prolongationPolicy);
    public sealed virtual void Fire();
}
public enum JetBrains.Application.Threading.GroupingEvents.ThreadingPolicy : Enum {
    public int value__;
    public static ThreadingPolicy MainThread;
    public static ThreadingPolicy Background;
}
public abstract class JetBrains.Application.Threading.InterruptableReadActivity : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [NotNullAttribute]
protected IShellLocks myShellLocks;
    [NotNullAttribute]
private InterruptionSet myInterruptionSet;
    [CanBeNullAttribute]
private string myCreationStacktrace;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsInterrupted;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myOnInterruptCalled;
    private bool myIsDoStartCalled;
    [CanBeNullAttribute]
private LifetimeDefinition myBeforeAcquiringWriteLockSubscriptionLifetimeDefinition;
    protected Lifetime Lifetime { get; }
    [NotNullAttribute]
protected string ThreadName { get; }
    protected InterruptableReadActivity(Lifetime lifetime, IShellLocks shellLocks, InterruptionSet checkForInterrupt);
    [CompilerGeneratedAttribute]
protected Lifetime get_Lifetime();
    protected abstract virtual void Start();
    protected abstract virtual void Work();
    protected abstract virtual void Finish();
    protected virtual void OnInterrupt();
    private void Interrupt(object o, BeforeAcquiringWriteLockEventArgs args);
    protected abstract virtual string get_ThreadName();
    private void WorkerThreadProc();
    private void FinishingProc();
    private void OnInterruptImpl();
    private void DoWork();
    public void DoSynch();
    public bool DoStart();
    [CompilerGeneratedAttribute]
private void <WorkerThreadProc>b__18_0(Lifetime asyncLifetime);
    [CompilerGeneratedAttribute]
private void <WorkerThreadProc>b__18_1();
    [CompilerGeneratedAttribute]
private void <OnInterruptImpl>b__20_0(Lifetime asyncLifetime);
    [CompilerGeneratedAttribute]
private void <OnInterruptImpl>b__20_2();
    [CompilerGeneratedAttribute]
private void <OnInterruptImpl>b__20_1();
    [CompilerGeneratedAttribute]
private void <DoStart>b__23_0();
    [CompilerGeneratedAttribute]
private void <DoStart>b__23_1();
    [CompilerGeneratedAttribute]
private void <DoStart>b__23_2();
}
public class JetBrains.Application.Threading.InterruptableReadActivityThe : InterruptableReadActivity {
    [NotNullAttribute]
private Action myFuncCancelled;
    [NotNullAttribute]
private Action myFuncCompleted;
    [NotNullAttribute]
private Action`1<bool> myFuncCompletedOrCancelled;
    [NotNullAttribute]
private Action myFuncRun;
    [NotNullAttribute]
private Action myFuncStart;
    [NotNullAttribute]
private string myName;
    [NotNullAttribute]
public Action FuncCancelled { get; public set; }
    [NotNullAttribute]
public Action FuncCompleted { get; public set; }
    [NotNullAttribute]
public Action`1<bool> FuncCompletedOrCancelled { get; public set; }
    [NotNullAttribute]
public Action FuncRun { get; public set; }
    [NotNullAttribute]
public Action FuncStart { get; public set; }
    [NotNullAttribute]
[LocalizationRequiredAttribute("False")]
public string Name { get; public set; }
    protected string ThreadName { get; }
    public InterruptableReadActivityThe(Lifetime lifetime, IShellLocks shellLocks, InterruptionSet interruptionSet);
    public Action get_FuncCancelled();
    public void set_FuncCancelled(Action value);
    public Action get_FuncCompleted();
    public void set_FuncCompleted(Action value);
    public Action`1<bool> get_FuncCompletedOrCancelled();
    public void set_FuncCompletedOrCancelled(Action`1<bool> value);
    public Action get_FuncRun();
    public void set_FuncRun(Action value);
    public Action get_FuncStart();
    public void set_FuncStart(Action value);
    public string get_Name();
    public void set_Name(string value);
    protected virtual void Finish();
    protected virtual void OnInterrupt();
    protected virtual void Start();
    protected virtual void Work();
    protected virtual string get_ThreadName();
    public static void ExecuteRestartOnInterruptActivity(Lifetime lifetime, IShellLocks locks, Action activity, bool isTestShell);
}
public class JetBrains.Application.Threading.Invocator : object {
    [NotNullAttribute]
private JetDispatcher myDispatcher;
    [NotNullAttribute]
private GroupingEventHosts myGroupingEvents;
    [NotNullAttribute]
private IProperty`1<bool> myIsRecurringActivityAllowed;
    [NotNullAttribute]
private ReentrancyGuard myReentrancyGuard;
    [NotNullAttribute]
private ITaskHost myTaskHost;
    [NotNullAttribute]
private TimedActionsHost myTimedActionsHost;
    [NotNullAttribute]
public JetDispatcher Dispatcher { get; }
    public GroupingEventHosts GroupingEvents { get; }
    public IProperty`1<bool> IsRecurringActivityAllowed { get; }
    [NotNullAttribute]
public ReentrancyGuard ReentrancyGuard { get; }
    public ITaskHost Tasks { get; }
    [ObsoleteAttribute("Use Tasks.")]
public ThreadManager ThreadManager { get; }
    [NotNullAttribute]
public TimedActionsHost TimedActions { get; }
    public Invocator(Lifetime lifetime);
    public sealed virtual JetDispatcher get_Dispatcher();
    public sealed virtual GroupingEventHosts get_GroupingEvents();
    public sealed virtual IProperty`1<bool> get_IsRecurringActivityAllowed();
    public sealed virtual ReentrancyGuard get_ReentrancyGuard();
    public sealed virtual ITaskHost get_Tasks();
    public sealed virtual ThreadManager get_ThreadManager();
    public sealed virtual TimedActionsHost get_TimedActions();
}
public interface JetBrains.Application.Threading.IReadConstraint {
    public abstract virtual bool IsSatisfied();
    public abstract virtual Task AwaitConstraint(Lifetime lifetime);
}
public interface JetBrains.Application.Threading.IShellLocks {
    [NotNullAttribute]
public ContentModelReadWriteLock ContentModelLocks { get; }
    public abstract virtual ContentModelReadWriteLock get_ContentModelLocks();
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.IShellLocksEx : object {
    private static int DefaultGentleTimeoutMs;
    [ExtensionAttribute]
[GuardAttribute("1")]
public static void AllowNestedExecutionAndReleaseLocks(IShellLocks shellLocks, string name, Action action);
    [ExtensionAttribute]
public static bool ExecuteOrQueueReadLock(IShellLocks shellLocks, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static bool ExecuteOrQueueReadLock(IShellLocks shellLocks, string name, Action action);
    [ExtensionAttribute]
public static bool ExecuteOrQueueReadLockEx(IShellLocks shellLocks, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static bool ExecuteOrQueueReadLockEx(IShellLocks shellLocks, string name, Action action);
    [ExtensionAttribute]
public static bool ExecuteOrQueueReadLock(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void ExecuteOrQueueReadLock(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action);
    [ExtensionAttribute]
public static void ExecuteOrQueueReadLockEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void ExecuteOrQueueReadLockEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action);
    [ExtensionAttribute]
[ObsoleteAttribute("Use an overload with lifetime.")]
public static void QueueReadLock(IShellLocks shellLocks, string name, Action action);
    [ExtensionAttribute]
public static void QueueReadLock(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void QueueReadLock(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action);
    [ExtensionAttribute]
public static void QueueReadLockOrRunSync(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertReadAccessAllowed(IShellLocks shellLocks);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertWriteAccessAllowed(IShellLocks shellLocks);
    [ExtensionAttribute]
public static void ExecuteWithLocksReleased(IShellLocks shellLocks, Action action);
    [ExtensionAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
public static void ExecuteWithReadLock(IShellLocks shellLocks, Action action);
    [ExtensionAttribute]
public static TValue ExecuteWithReadLock(IShellLocks shellLocks, Func`1<TValue> func);
    [ExtensionAttribute]
public static bool TryExecuteWithReadLock(IShellLocks shellLocks, Action action);
    [ExtensionAttribute]
public static bool TryExecuteWithReadLock(IShellLocks shellLocks, OuterLifetime lifetime, TimeSpan timeout, Action`1<Lifetime> action);
    [ExtensionAttribute]
public static void ExecuteWithWriteLock(IShellLocks shellLocks, Action action, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
public static void ExecuteWithWriteLock(IShellLocks shellLocks, Action action, CallerInfo caller);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.IShellLocksEx/<ExecuteOrQueueWithWriteLockWhenAvailableEx>d__23`2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use ExecuteOrQueueWithWeakWriteLockWhenAvailableEx for async lambdas")]
public static Task`1<T> ExecuteOrQueueWithWriteLockWhenAvailableEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Func`1<TT> func, int gentleTimeoutMs, AcquireWriteLockWhenAvailablePredicate predicate);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.IShellLocksEx/<ExecuteOrQueueWithWeakWriteLockWhenAvailableEx>d__24`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteOrQueueWithWeakWriteLockWhenAvailableEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Func`1<Task`1<T>> func, int gentleTimeoutMs, AcquireWriteLockWhenAvailablePredicate predicate);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.IShellLocksEx/<ExecuteOrQueueWithWeakWriteLockWhenAvailableEx>d__25`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteOrQueueWithWeakWriteLockWhenAvailableEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Func`1<Task`1<T>> func, TimeSpan gentleTimeout, AcquireWriteLockWhenAvailablePredicate predicate);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.IShellLocksEx/<ExecuteOrQueueWithWriteLockWhenAvailableEx>d__26`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteOrQueueWithWriteLockWhenAvailableEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Func`1<T> func, int gentleTimeoutMs, AcquireWriteLockWhenAvailablePredicate predicate);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.IShellLocksEx/<ExecuteOrQueueWithWriteLockWhenAvailableEx>d__27`1")]
[ExtensionAttribute]
[NotNullAttribute]
public static Task`1<T> ExecuteOrQueueWithWriteLockWhenAvailableEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Func`1<T> func, TimeSpan gentleTimeout, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ExecuteOrQueueWithWriteLockWhenAvailableEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action func, int gentleTimeoutMs, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ExecuteOrQueueWithWriteLockWhenAvailableEx(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action func, TimeSpan gentleTimeout, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
public static Task ExecuteWithWriteLockWhenAvailable(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action, int gentleTimeoutMs, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
public static Task ExecuteWithWriteLockWhenAvailable(IShellLocks shellLocks, OuterLifetime lifetime, string name, Action action, TimeSpan gentleTimeout, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
public static Task`1<T> ExecuteWithWriteLockWhenAvailable(IShellLocks shellLocks, OuterLifetime lifetime, string name, Func`1<T> func, int gentleTimeoutMs, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
public static Task`1<T> ExecuteWithWriteLockWhenAvailable(IShellLocks shellLocks, OuterLifetime lifetime, string name, Func`1<T> func, TimeSpan gentleTimeout, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
private static void ExecuteWithWriteLockWhenAvailable(IShellLocks shellLocks, LifetimeDefinition lifetimeDefinition, string name, Func`1<T> func, TimeSpan gentleTimeout, TaskCompletionSource`1<T> taskCompletionSource, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
[HandleProcessCorruptedStateExceptionsAttribute]
private static void ExecuteWithWriteLockWhenAvailableInternal(IShellLocks shellLocks, LifetimeDefinition lifetimeDefinition, string name, Func`1<T> func, TimeSpan gentleTimeout, Stopwatch sw, int writeLockTimestamp, int retryCount, TaskCompletionSource`1<T> taskCompletionSource, AcquireWriteLockWhenAvailablePredicate predicate);
    [ExtensionAttribute]
public static Task ExecuteOrQueueWriteLockAsyncEx(IShellLocks shellLocks, OuterLifetime outerLifetime, string name, Action f, TimeSpan timeoutToSync, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
public static Task`1<T> ExecuteOrQueueWriteLockAsyncEx(IShellLocks shellLocks, OuterLifetime outerLifetime, string name, Func`1<T> func, TimeSpan timeoutToSync, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
public static void ExecuteOrQueueWhenNoReadLocks(IShellLocks locks, OuterLifetime outerLifetime, string name, Action action, TimeSpan timeoutToSync, TaskPriority priority, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
private static void WhenNoReadLocksInternal(IShellLocks locks, Lifetime lifetime, string name, Action action, TimeSpan timeoutToSync, CallerInfo callerInfo, TaskPriority priority);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.IShellLocksEx/<ExecuteOrQueueWithReadLockWhenReadLockAvailable>d__41`1")]
[ExtensionAttribute]
public static Task`1<T> ExecuteOrQueueWithReadLockWhenReadLockAvailable(IShellLocks locks, OuterLifetime lifetime, string name, TimeSpan interval, Func`1<T> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ExecuteOrQueueWithReadLockWhenReadLockAvailable(IShellLocks locks, OuterLifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueWithReadLockWhenReadLockAvailable(IShellLocks locks, OuterLifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void HideReadLocks(IShellLocks locks, Lifetime lifetime);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoUsingReadLock UsingReadLock(IShellLocks locks);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoTryUsingReadLock TryUsingReadLock(IShellLocks locks, int timeoutMs);
    [ExtensionAttribute]
public static void UsingReadLock(IShellLocks locks, Action action);
    [ExtensionAttribute]
public static void UsingReadLock(IReaderWriterLock locks, Action action);
    [ExtensionAttribute]
public static T UsingReadLock(IShellLocks locks, Func`1<T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static T UsingReadLock(IReaderWriterLock locks, Func`1<T> func);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoUsingReadLock UsingReadLock(IReaderWriterLock locks);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoTryUsingReadLock TryUsingReadLock(IReaderWriterLock locks, int timeoutMs);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoUsingWriteLock UsingWriteLock(IShellLocks locks, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoTryUsingWriteLock TryUsingWriteLock(IShellLocks locks, int timeoutMs, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoUsingWriteLock UsingWriteLock(IReaderWriterLock locks, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
[MustDisposeResourceAttribute]
public static UndoTryUsingWriteLock TryUsingWriteLock(IReaderWriterLock locks, int timeoutMs, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
public static void UsingWriteLock(IReaderWriterLock locks, Action action, string callerFilePath, string callerMemberName);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsOnMainThreadGuarded(IShellLocks locks);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsOnMainThread(IShellLocks locks);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsReadAccessAllowed(IShellLocks locks);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsWriteAccessAllowed(IShellLocks locks);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsWriteLockHeld(IShellLocks locks);
    private static void SetResultToTcs(LifetimeDefinition lifetimeDefinition, Func`1<T> func, TaskCompletionSource`1<T> tcs);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.IShellLocksExAsync : object {
    public static string TaskMustNotBeLeaked;
    [ExtensionAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<TResult> ExecuteOrQueueReadLockAsync(IShellLocks thіs, Lifetime lifetime, string name, Func`1<TResult> F);
    [ExtensionAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task ExecuteOrQueueReadLockAsync(IShellLocks thіs, Lifetime lifetime, string name, Action F);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartBackground(IShellLocks locks, Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartBackground(IShellLocks locks, Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartBackgroundAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartBackgroundAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task`1<T>> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartBackgroundInterruptableRead(IShellLocks locks, Lifetime lifetime, Action action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartBackgroundInterruptableRead(IShellLocks locks, Lifetime lifetime, Func`1<T> action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartBackgroundRead(IShellLocks locks, Lifetime lifetime, Action action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartBackgroundRead(IShellLocks locks, Lifetime lifetime, Func`1<T> action, bool retryOnOperationCanceled);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartMainRead(IShellLocks locks, Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartMainRead(IShellLocks locks, Lifetime lifetime, Func`1<T> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartMainReadAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartMainReadAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task`1<T>> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartMainUnguarded(IShellLocks locks, Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartMainUnguarded(IShellLocks locks, Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartMainUnguardedAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartMainUnguardedAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task`1<T>> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartMainWrite(IShellLocks locks, Lifetime lifetime, Action action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartMainWrite(IShellLocks locks, Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task StartMainWriteAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task> action);
    [ExtensionAttribute]
[PublicAPIAttribute]
[MustUseReturnValueAttribute("The task sequence must not be leaked — .NET Runtime may be configured to terminate process if exceptions from task lines are left unconsumed. If you have no await/ContinueWith to do, add an explicit .NoAwait() termination.")]
public static Task`1<T> StartMainWriteAsync(IShellLocks locks, Lifetime lifetime, Func`1<Task`1<T>> func);
    [HandleProcessCorruptedStateExceptionsAttribute]
private static void ExecuteOrQueueReadLockAsync_Body(IShellLocks locks, Func`1<TResult> F, TaskCompletionSource`1<TResult> tcs);
}
public interface JetBrains.Application.Threading.IThreading {
    [NotNullAttribute]
public JetDispatcher Dispatcher { get; }
    [NotNullAttribute]
public GroupingEventHosts GroupingEvents { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsRecurringActivityAllowed { get; }
    [NotNullAttribute]
public ReentrancyGuard ReentrancyGuard { get; }
    [NotNullAttribute]
public ITaskHost Tasks { get; }
    [NotNullAttribute]
public ThreadManager ThreadManager { get; }
    [NotNullAttribute]
public TimedActionsHost TimedActions { get; }
    public abstract virtual JetDispatcher get_Dispatcher();
    public abstract virtual GroupingEventHosts get_GroupingEvents();
    public abstract virtual IProperty`1<bool> get_IsRecurringActivityAllowed();
    public abstract virtual ReentrancyGuard get_ReentrancyGuard();
    public abstract virtual ITaskHost get_Tasks();
    public abstract virtual ThreadManager get_ThreadManager();
    public abstract virtual TimedActionsHost get_TimedActions();
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.IThreading_DataFlowEx : object {
    [ExtensionAttribute]
public static void ForValuesGuarded(IProperty`1<TValue> property, Lifetime lifetime, IThreading threading, Action`2<Lifetime, TValue> FHandler);
    [ExtensionAttribute]
public static void WhenTrueGuarded(IProperty`1<bool> property, Lifetime lifetime, IThreading threading, Action`1<Lifetime> FHandler);
    [ExtensionAttribute]
public static void WhenFalseGuarded(IProperty`1<bool> property, Lifetime lifetime, IThreading threading, Action`1<Lifetime> FHandler);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.IThreadingEx : object {
    [ExtensionAttribute]
[GuardAttribute("1")]
[HandleProcessCorruptedStateExceptionsAttribute]
public static void LogAssertGuarded(IThreading threading);
    [ExtensionAttribute]
public static bool ExecuteOrQueue(IThreading threading, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static bool ExecuteOrQueue(IThreading threading, string name, Action action);
    [ExtensionAttribute]
public static bool ExecuteOrQueueEx(IThreading threading, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static bool ExecuteOrQueue(IThreading threading, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void ExecuteOrQueue(IThreading threading, OuterLifetime lifetime, string name, Action action);
    [ExtensionAttribute]
public static void ExecuteOrQueueEx(IThreading threading, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void ExecuteOrQueueEx(IThreading threading, OuterLifetime lifetime, string name, Action action);
    [ExtensionAttribute]
public static void Queue(IThreading threading, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void Queue(IThreading threading, OuterLifetime lifetime, string name, Action action);
    [ExtensionAttribute]
[ObsoleteAttribute("Use an overload with lifetime.")]
public static void Queue(IThreading threading, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use an overload with lifetime.")]
[MustDisposeResourceAttribute]
public static IDisposable QueueAt(IThreading threading, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueAt(IThreading threading, OuterLifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueAt_NoReentrancyGuarding(IThreading threading, OuterLifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
[NotNullAttribute]
public static GroupingEvent CreateGroupingEvent(IThreading threading, Lifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void QueueRecurring(IThreading threading, Lifetime lifetime, string name, TimeSpan interval, Action action);
    [ExtensionAttribute]
public static void ExecuteOrQueueWhenNotGuarded(IThreading threading, OuterLifetime lifetime, string name, Action action, TaskPriority priority);
    [ExtensionAttribute]
public static void ExecuteOrQueueWhenNotGuarded(IThreading threading, OuterLifetime lifetime, string name, Action action);
    [ExtensionAttribute]
[NotNullAttribute]
public static YieldWhenNotGuardedAwaiter YieldWhenNotGuarded(IThreading thіs, OuterLifetime lifetime, string name, TaskPriority priority);
    [ExtensionAttribute]
public static void AssertMainThread(IThreading threading);
    [ExtensionAttribute]
public static void AssertMainThreadOrForkPrimaryThread(IThreading threading);
    [ExtensionAttribute]
[PureAttribute]
public static bool IsMainThreadOrForkPrimaryThread(IThreading threading);
    [ExtensionAttribute]
public static void AssertNonMainThread(IThreading threading);
}
public enum JetBrains.Application.Threading.LockKind : Enum {
    public byte value__;
    public static LockKind Read;
    public static LockKind Write;
    public static LockKind FullWrite;
    public static LockKind Full;
}
public class JetBrains.Application.Threading.NoConstraint : object {
    public static IReadConstraint Instance;
    private static NoConstraint();
    public sealed virtual bool IsSatisfied();
    public sealed virtual Task AwaitConstraint(Lifetime lifetime);
}
public class JetBrains.Application.Threading.NoContentLockInsideReadWriteLock : object {
    private ReaderWriterSlimWrapper myInnerLock;
    private SyncWrapper myReadLock;
    private SyncWrapper myUpgradableReadLock;
    private SyncWrapper myWriteLock;
    [CompilerGeneratedAttribute]
private Action AnyLockAcquired;
    [CompilerGeneratedAttribute]
private Action AnyLockReleased;
    public ISync ReadLock { get; }
    public ISync UpgradableReadLock { get; }
    public ISync WriteLock { get; }
    public int WaitingReadCount { get; }
    public int WaitingWriteCount { get; }
    public NoContentLockInsideReadWriteLock(ReaderWriterSlimWrapper innerLock);
    [CompilerGeneratedAttribute]
public void add_AnyLockAcquired(Action value);
    [CompilerGeneratedAttribute]
public void remove_AnyLockAcquired(Action value);
    [CompilerGeneratedAttribute]
public void add_AnyLockReleased(Action value);
    [CompilerGeneratedAttribute]
public void remove_AnyLockReleased(Action value);
    public bool HasReadAccess();
    public bool HasUpgradableReadAccess();
    public bool HasWriteAccess();
    public sealed virtual ISync get_ReadLock();
    public sealed virtual ISync get_UpgradableReadLock();
    public sealed virtual ISync get_WriteLock();
    public int get_WaitingReadCount();
    public int get_WaitingWriteCount();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_3();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_4();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_5();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[IsReadOnlyAttribute]
public class JetBrains.Application.Threading.ProhibitedReadLockCookie : ValueType {
    private ContentModelReadWriteLock myRwLock;
    private static ILogger ourLogger;
    [ThreadStaticAttribute]
[CanBeNullAttribute]
private static string ourThreadStaticReason;
    private static Action ourReadLockIsProhibited;
    public ProhibitedReadLockCookie(ContentModelReadWriteLock rwLock, string reason);
    private static ProhibitedReadLockCookie();
    public void Dispose();
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.ReadActionUtil : object {
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, Action action);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, Func`1<T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, Action`1<Lifetime> action);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, Func`2<Lifetime, T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartConstrainedReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, IReadConstraint constraint, Action func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartConstrainedReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, IReadConstraint constraint, Func`1<T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartConstrainedReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, IReadConstraint constraint, Action`1<Lifetime> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartConstrainedReadActionAsync(IShellLocks shellLocks, Lifetime lifetime, IReadConstraint constraint, Func`2<Lifetime, T> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartReadAndMainThreadActionAsync(IShellLocks shellLocks, Lifetime lifetime, Func`2<ReadAndWriteScope, ReadResult`1<T>> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartReadAndMainThreadActionAsync(IShellLocks shellLocks, Lifetime lifetime, Func`2<ReadAndWriteScope, ReadResult> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task`1<T> StartConstrainedReadAndMainThreadActionAsync(IShellLocks shellLocks, Lifetime lifetime, IReadConstraint constraint, Func`2<ReadAndWriteScope, ReadResult`1<T>> func);
    [ExtensionAttribute]
[MustUseReturnValueAttribute]
public static Task StartConstrainedReadAndMainThreadActionAsync(IShellLocks shellLocks, Lifetime lifetime, IReadConstraint constraint, Func`2<ReadAndWriteScope, ReadResult> func);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.ReadActionUtil/<RunConstrainedReadLoopAsync>d__12`2")]
private static Task`1<T> RunConstrainedReadLoopAsync(IShellLocks shellLocks, Lifetime lifetime, IReadConstraint constraint, TContext context, Func`3<Lifetime, TContext, T> func);
    private static ConstrainedReadResult TryExecuteWithReadLock(ContentModelReadWriteLock locks, Lifetime lifetime, IReadConstraint constraint, TContext context, Func`3<Lifetime, TContext, T> func, T& result);
    private static Task`1<T> StartMainThreadAction(IShellLocks locks, ReadResult`1& readResult);
    private static Task`1<T> StartMainWrite(IShellLocks locks, ReadResult`1& readResult);
    private static Task StartMainWrite(IShellLocks locks, ReadResult& readResult);
    private static Task StartMainThreadAction(IShellLocks locks, ReadResult& readResult);
}
public class JetBrains.Application.Threading.ReadAndWriteScope : ValueType {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public Lifetime Lifetime { get; public set; }
    public ReadAndWriteScope(Lifetime Lifetime);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(Lifetime value);
    public ReadResult`1<T> Value(T value);
    public ReadResult`1<T> Null();
    public ReadResult`1<T> WriteAction(Func`1<T> writeAction);
    public ReadResult`1<T> MainReadAction(Func`1<T> mainReadAction);
    public ReadResult Nothing();
    public ReadResult WriteAction(Action writeAction);
    public ReadResult MainReadAction(Action mainReadAction);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ReadAndWriteScope left, ReadAndWriteScope right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ReadAndWriteScope left, ReadAndWriteScope right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ReadAndWriteScope other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Lifetime& Lifetime);
}
public class JetBrains.Application.Threading.ReleaseLockCookie : ValueType {
    private IShellLocks myLocks;
    private byte myReadLockReleasedCount;
    private byte myWriteLockReleasedCount;
    private LockKind myLockKind;
    private CallerInfo myCallerInfo;
    public ReleaseLockCookie(IShellLocks locks, LockKind lockKind, string callerFilePath, string callerMemberName);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.Threading.SequentialItemsProcessor`2 : object {
    private Lifetime myLifetime;
    private Actor`1<RequestEntry<TRequest, TResult>> myActor;
    public SequentialItemsProcessor`2(string id, Lifetime lifetime, Func`3<Lifetime, TRequest, Task`1<TResult>> processor, TaskScheduler scheduler, int maxQueueSize);
    public Task`1<TResult> SendAsync(Lifetime lifetime, TRequest request);
    public Task`1<TResult> SendAsync(TRequest request);
}
public class JetBrains.Application.Threading.ShellLocks : object {
    [CompilerGeneratedAttribute]
private ContentModelReadWriteLock <ContentModelLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private JetDispatcher <Dispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupingEventHosts <GroupingEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsRecurringActivityAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ReentrancyGuard <ReentrancyGuard>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskHost <Tasks>k__BackingField;
    [CompilerGeneratedAttribute]
private TimedActionsHost <TimedActions>k__BackingField;
    public ContentModelReadWriteLock ContentModelLocks { get; }
    public JetDispatcher Dispatcher { get; }
    public GroupingEventHosts GroupingEvents { get; }
    public IProperty`1<bool> IsRecurringActivityAllowed { get; }
    public ReentrancyGuard ReentrancyGuard { get; }
    public ITaskHost Tasks { get; }
    public ThreadManager ThreadManager { get; }
    public TimedActionsHost TimedActions { get; }
    public ShellLocks(Lifetime lifetime, TaskHost host);
    private static TaskScheduler GetScheduler(Lifetime lifetimeTerminated, JetDispatcher dispatcher, IReaderWriterLock locks);
    [CompilerGeneratedAttribute]
public sealed virtual ContentModelReadWriteLock get_ContentModelLocks();
    [CompilerGeneratedAttribute]
public sealed virtual JetDispatcher get_Dispatcher();
    [CompilerGeneratedAttribute]
public sealed virtual GroupingEventHosts get_GroupingEvents();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsRecurringActivityAllowed();
    [CompilerGeneratedAttribute]
public sealed virtual ReentrancyGuard get_ReentrancyGuard();
    [CompilerGeneratedAttribute]
public sealed virtual ITaskHost get_Tasks();
    public sealed virtual ThreadManager get_ThreadManager();
    [CompilerGeneratedAttribute]
public sealed virtual TimedActionsHost get_TimedActions();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(string actionName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1(string name);
}
public class JetBrains.Application.Threading.SyncWrapper : object {
    private int myWaitersCount;
    private ISync myInnerSync;
    private Action myOnAcquire;
    private Action myOnRelease;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int WaitersCount { get; }
    public string Name { get; }
    public SyncWrapper(ISync sync, Action onAcquire, Action onRelease);
    public int get_WaitersCount();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual void Acquire();
    public sealed virtual bool TryAcquire(int timeoutMs);
    public sealed virtual void Release();
    public sealed virtual bool HasWriteAccess();
    public sealed virtual bool HasReadAccess();
    public sealed virtual bool HasUpgradableReadAccess();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Threading.Tasks.LimitedNumberOfConcurrentTasksBarrier : object {
    [CompilerGeneratedAttribute]
private TaskBarrier <taskBarrier>P;
    [CompilerGeneratedAttribute]
private int <maxConcurrentTasks>P;
    private int myTaskCount;
    private ConcurrentQueue`1<Action> myActions;
    public bool IsSync { get; }
    public LimitedNumberOfConcurrentTasksBarrier(TaskBarrier taskBarrier, int maxConcurrentTasks);
    public sealed virtual bool get_IsSync();
    public sealed virtual void EnqueueJob(Action job);
    public sealed virtual void EnqueueJob(string name, Action action);
    private void DoTask();
    private void ScheduleTasks();
    public sealed virtual void WaitAll();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class JetBrains.Application.Threading.Tasks.SingleThreadExecutor : TaskScheduler {
    private Thread myThread;
    private Lifetime myLifetime;
    private CancellationTokenSource myCts;
    private ITaskHost myTasks;
    private ILogger myLogger;
    private string myName;
    private BlockingPriorityQueue`1<OrderedTask> myQueue;
    private bool myAsyncBehaviorProhibited;
    [PublicAPIAttribute]
[NotNullAttribute]
public IProperty`1<Task> CurrentlyExecuting;
    [PublicAPIAttribute]
[NotNullAttribute]
public IProperty`1<bool> Idle;
    private Action`1 modreq(System.Runtime.CompilerServices.IsVolatile) mySyncContinuationAction;
    private long myPreliminaryExecutionIdGen;
    private CancellationTokenSource mySequentialCts;
    [PublicAPIAttribute]
public int Count { get; }
    [PublicAPIAttribute]
public Action`1<Task> SyncContinuationAction { get; public set; }
    public SingleThreadExecutor(Lifetime lifetime, ITaskHost tasks, string name);
    private void StartProc();
    private void ThreadProc();
    [HandleProcessCorruptedStateExceptionsAttribute]
private bool InternalExecute(Task task);
    [PublicAPIAttribute]
public Task Queue(Action action, TaskPriority priority, bool sync);
    [PublicAPIAttribute]
public Task`1<T> Queue(Func`1<T> action, TaskPriority priority, bool sync);
    [PublicAPIAttribute]
public bool ManagesCurrentTask();
    public int get_Count();
    [PublicAPIAttribute]
public void ClearQueue();
    [CanBeNullAttribute]
public Action`1<Task> get_SyncContinuationAction();
    public void set_SyncContinuationAction(Action`1<Task> value);
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    [IteratorStateMachineAttribute("JetBrains.Application.Threading.Tasks.SingleThreadExecutor/<GetScheduledTasks>d__28")]
protected virtual IEnumerable`1<Task> GetScheduledTasks();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_1();
    [CompilerGeneratedAttribute]
private void <.ctor>b__10_2();
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.Tasks.TaskBarrierEx : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[MustDisposeResourceAttribute]
public static LimitedNumberOfConcurrentTasksBarrier RestrictConcurrentTaskCount(TaskBarrier taskBarrier, int maxConcurrentTasks);
}
[ExtensionAttribute]
public static class JetBrains.Application.Threading.Tasks.TaskHostEx : object {
    [ExtensionAttribute]
public static void WaitUiTasks(IThreading threading, Lifetime lifetime, InterruptionSet checkForInterrupt);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ContinueWithDelay(Task thіs, Lifetime lifetime, IThreading threading, TimeSpan span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Threading.TaskWithWorkStealing : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ILogger myLogger;
    private string myName;
    private Action myAction;
    private int myTimeOutMs;
    [NullableAttribute("2")]
private Task modreq(System.Runtime.CompilerServices.IsVolatile) myTask;
    private int myStarted;
    private static int NotStarted;
    private static int StartedViaTask;
    private static int StartedViaWorkStealing;
    private int myFinished;
    private static int SleepTimeForWaitingWorkStolenOnOtherThreadMs;
    public TaskWithWorkStealing(Lifetime lifetime, IThreading threading, ILogger logger, string name, Action action, int timeOutMs, TaskJetProperties taskProperties);
    private void DoWork();
    public void RunTask();
    public void EnsureTaskCompleted();
    public string GetDebugInfo();
    [CompilerGeneratedAttribute]
private void <DoWork>b__14_0();
}
public interface JetBrains.Application.Threading.Timers.IDispatcherTimer {
    public TimeSpan Interval { get; public set; }
    public bool IsEnabled { get; public set; }
    public abstract virtual TimeSpan get_Interval();
    public abstract virtual void set_Interval(TimeSpan value);
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void set_IsEnabled(bool value);
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
public interface JetBrains.Application.Threading.Timers.IDispatcherTimerFactory {
    public abstract virtual IDispatcherTimer Create(TimeSpan interval, JetDispatcherPriority priority, EventHandler callback);
}
public enum JetBrains.Application.Threading.Timers.JetDispatcherPriority : Enum {
    public int value__;
    public static JetDispatcherPriority Invalid;
    public static JetDispatcherPriority Inactive;
    public static JetDispatcherPriority SystemIdle;
    public static JetDispatcherPriority ApplicationIdle;
    public static JetDispatcherPriority ContextIdle;
    public static JetDispatcherPriority Background;
    public static JetDispatcherPriority Input;
    public static JetDispatcherPriority Loaded;
    public static JetDispatcherPriority Render;
    public static JetDispatcherPriority DataBind;
    public static JetDispatcherPriority Normal;
    public static JetDispatcherPriority Send;
}
public class JetBrains.Application.Threading.Timers.WpfDispatcherTimer : DispatcherTimer {
    public WpfDispatcherTimer(JetDispatcherPriority priority);
    public WpfDispatcherTimer(JetDispatcherPriority priority, Dispatcher dispatcher);
    public WpfDispatcherTimer(TimeSpan interval, JetDispatcherPriority priority, EventHandler callback);
    private static DispatcherPriority ConvertPriority(JetDispatcherPriority priority);
    private sealed virtual override TimeSpan JetBrains.Application.Threading.Timers.IDispatcherTimer.get_Interval();
    private sealed virtual override void JetBrains.Application.Threading.Timers.IDispatcherTimer.set_Interval(TimeSpan value);
    private sealed virtual override bool JetBrains.Application.Threading.Timers.IDispatcherTimer.get_IsEnabled();
    private sealed virtual override void JetBrains.Application.Threading.Timers.IDispatcherTimer.set_IsEnabled(bool value);
    private sealed virtual override void JetBrains.Application.Threading.Timers.IDispatcherTimer.Start();
    private sealed virtual override void JetBrains.Application.Threading.Timers.IDispatcherTimer.Stop();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.Threading.Timers.WpfDispatcherTimerFactory : object {
    public sealed virtual IDispatcherTimer Create(TimeSpan interval, JetDispatcherPriority priority, EventHandler callback);
}
public static class JetBrains.Application.Threading.TreeLocks : object {
    [NotNullAttribute]
public static NoContentLockInsideReadWriteLock CreateUpgradableModelLock(IShellLocks shellLocks);
    [NotNullAttribute]
public static NoContentLockInsideReadWriteLock CreateModelLock(IShellLocks shellLocks);
    [NotNullAttribute]
public static NoContentLockInsideReadWriteLock CreateUILock(NoContentLockInsideReadWriteLock modelLock, IShellLocks contentLock);
    private static void CheckModelLock(NoContentLockInsideReadWriteLock modelLock, NoContentLockInsideReadWriteLock result);
    private static void CheckContentLock(IShellLocks contentLock, NoContentLockInsideReadWriteLock result);
}
public static class JetBrains.Application.Threading.TryReadLockCookie : object {
    public static Undo Create(IProgressIndicator progress, IShellLocks shellLocks, Func`1<bool> checkForInterruptAction, bool releaseOnlyWhenLockHeld);
    public static Undo CreateCore(IProgressIndicator progress, IReaderWriterLock shellLocks, Func`1<bool> checkForInterruptAction, bool releaseOnlyWhenLockHeld);
    private static void CheckForInterrupt(IProgressIndicator progress, Func`1<bool> checkForInterruptAction);
}
public class JetBrains.Application.Threading.TryWriteLockCookie : SafeDisposable {
    private ContentModelReadWriteLock myLocks;
    private Action myCheckForInterrupt;
    private int myMaxMillisToHeldSinceLastAcquire;
    private int myLastAcquireTime;
    private TryWriteLockCookie(ContentModelReadWriteLock locks, Action checkForInterrupt, int maxMillisToHeldSinceLastAcquire);
    private static void CheckForInterrupt(IProgressIndicator progress, Func`1<bool> checkForInterruptAction);
    [NotNullAttribute]
public static TryWriteLockCookie Create(IProgressIndicator progress, IShellLocks shellLocks, Func`1<bool> checkForInterruptAction, int maxMillisToHeldSinceLastAcquire, string callerFilePath, string callerMemberName);
    [NotNullAttribute]
private static TryWriteLockCookie Create(IProgressIndicator progress, IShellLocks shellLocks, Func`1<bool> checkForInterruptAction, int maxMillisToHeldSinceLastAcquire, CallerInfo callerInfo);
    public void ReleaseConditionally(string callerFilePath, string callerMemberName);
    private void TryAcquire(CallerInfo callerInfo);
    public void ReleaseAndSleep(int millisToSleep, string callerFilePath, string callerMemberName);
    private void ReleaseAndSleep(int millisToSleep, CallerInfo callerInfo);
    protected virtual void DisposeUnmanagedResources();
}
internal abstract class JetBrains.Application.Threading.UnguardedAlarm : object {
    private static Hashtable ourRequests;
    private List`1<AlarmActionHandle> myRequests;
    private static Timer ourTimer;
    private static object LOCK;
    private static UnguardedAlarm();
    public static void Init();
    public static void Terminate();
    public AlarmActionHandle AddRequest(Action request, int delay);
    public bool CancelRequest(AlarmActionHandle actionHandle);
    public int CancelAllRequests();
    private static void OnTimer(object sender, EventArgs e);
}
public class JetBrains.Application.Threading.WorkerThread : object {
    private bool mySynchronous;
    private WaitHandle mySyncWaitHandle;
    private Thread myThread;
    private Queue`1<JobInfo> myQueue;
    private EventWaitHandle myJobAddedEvent;
    private bool myTerminating;
    private bool Terminating { get; private set; }
    public WorkerThread(string name, bool synchronous);
    private void AssertCorrectThread();
    public void Dispose();
    public WaitHandle ExecuteAsync(Action job);
    public WaitHandle AllCurrentJobsToFinish();
    public void ExecuteSync(Action job);
    public void ExecuteSync(Action job, Func`1<bool> checkForInterrupt);
    private JobInfo PopJob();
    private void set_Terminating(bool value);
    private bool get_Terminating();
    private void ThreadProc();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.Threading.YieldWhenNotGuardedAwaiter : object {
    private OuterLifetime myLifetime;
    private ILogger myLogger;
    private string myName;
    private Nullable`1<TaskPriority> myPriority;
    private IThreading myThreading;
    [EditorBrowsableAttribute("1")]
public bool IsCompleted { get; }
    public YieldWhenNotGuardedAwaiter(OuterLifetime lifetime, string name, IThreading threading, Nullable`1<TaskPriority> priority, ILogger logger);
    public bool get_IsCompleted();
    [EditorBrowsableAttribute("1")]
public YieldWhenNotGuardedAwaiter GetAwaiter();
    [EditorBrowsableAttribute("1")]
public void GetResult();
    [EditorBrowsableAttribute("1")]
public sealed virtual void OnCompleted(Action continuation);
    [AsyncStateMachineAttribute("JetBrains.Application.Threading.YieldWhenNotGuardedAwaiter/<ExecuteAsync>d__11")]
private Task ExecuteAsync(Action continuation);
    private void OnCompleted_Fail(Action continuation, Exception ex);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.ActionBarInjectEx : object {
    [ExtensionAttribute]
public static ActionLabel InjectLabel(IActionBar bar, int index, string text, Lifetime lifetime, Action accessKeyPressed);
    [ExtensionAttribute]
public static ActionSeparator InjectSeparator(IActionBar bar, int index);
    [ExtensionAttribute]
public static ActionComboBox InjectComboBox(IActionBar bar, int index, IEnumerable itemSource);
}
public class JetBrains.Application.UI.Actions.ActionComboBox : ComboBox {
    public static DependencyProperty AllowFocusRestoringProperty;
    private FocusRestoringChain myFocusRestoringChain;
    public bool AllowFocusRestoring { get; public set; }
    private static ActionComboBox();
    public bool get_AllowFocusRestoring();
    public void set_AllowFocusRestoring(bool value);
    protected virtual void OnDropDownOpened(EventArgs e);
    protected virtual void OnDropDownClosed(EventArgs e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(EventArgs e);
}
public class JetBrains.Application.UI.Actions.ActionLabel : Label {
    [CompilerGeneratedAttribute]
private AccessKeyPressedEventHandler AccessKeyPressed;
    private static ActionLabel();
    [CompilerGeneratedAttribute]
public void add_AccessKeyPressed(AccessKeyPressedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AccessKeyPressed(AccessKeyPressedEventHandler value);
    private void OnAccessKeyPressed(object sender, AccessKeyPressedEventArgs e);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Actions.ActionManager.ActionManager : object {
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private DataContexts <DataContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionDefs <Defs>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionHandlers <Handlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionShortcuts <Shortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionPresentableTexts <PresentableTexts>k__BackingField;
    public IShellLocks Locks { get; }
    public DataContexts DataContexts { get; }
    public IActionDefs Defs { get; }
    public IActionHandlers Handlers { get; }
    public IActionShortcuts Shortcuts { get; }
    public IActionPresentableTexts PresentableTexts { get; }
    public ActionManager(DataContexts dataContexts, IActionDefs defs, IActionHandlers handlers, IActionShortcuts shortcuts, IShellLocks locks, IActionPresentableTexts presentableTexts);
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public sealed virtual DataContexts get_DataContexts();
    [CompilerGeneratedAttribute]
public sealed virtual IActionDefs get_Defs();
    [CompilerGeneratedAttribute]
public sealed virtual IActionHandlers get_Handlers();
    [CompilerGeneratedAttribute]
public sealed virtual IActionShortcuts get_Shortcuts();
    [CompilerGeneratedAttribute]
public sealed virtual IActionPresentableTexts get_PresentableTexts();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.ActionManager.ActionManagerCommandBindingsEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ICommand GetCommand(IActionManagerCommandBindings actionManagerCommandBindings, string sActionId);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICommand GetCommand(IActionManagerCommandBindings actionManagerCommandBindings);
}
public class JetBrains.Application.UI.Actions.ActionManager.ActionManagerContextMenu : object {
    [NotNullAttribute]
public Lifetime Lifetime;
    [NotNullAttribute]
public IActionBarManager ActionBarManager;
    [NotNullAttribute]
public string ActionGroupId;
    [NotNullAttribute]
public IThreading Threading;
    public ActionManagerContextMenu(Lifetime lifetime, IActionBarManager actionbarman, string sActionGroupId, IThreading threading);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.ActionManager.ActionManagerEx : object {
    [ExtensionAttribute]
public static bool IsAvailable(IActionManager actionManager, IDataContext dataContext);
    [ExtensionAttribute]
public static void ExecuteAction(IActionManager actionManager, IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static Task ExecuteActionAsync(IActionManager actionMan, Lifetime limit);
    [ExtensionAttribute]
public static void ExecuteActionGuarded(IActionManager actionManager, Lifetime lifetime, string name, IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetPresentableShortcutText(IActionManager actionManager, Decoration decoration);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetShortcutOrMenuPathText(IActionManager actionManager, Decoration decoration);
    [ExtensionAttribute]
[NotNullAttribute]
public static string GetHowToExecuteText(IActionManager actionManager, Decoration decoration);
}
public interface JetBrains.Application.UI.Actions.ActionManager.IActionManager {
    public IShellLocks Locks { get; }
    public DataContexts DataContexts { get; }
    public IActionDefs Defs { get; }
    public IActionHandlers Handlers { get; }
    public IActionShortcuts Shortcuts { get; }
    public IActionPresentableTexts PresentableTexts { get; }
    public abstract virtual IShellLocks get_Locks();
    public abstract virtual DataContexts get_DataContexts();
    public abstract virtual IActionDefs get_Defs();
    public abstract virtual IActionHandlers get_Handlers();
    public abstract virtual IActionShortcuts get_Shortcuts();
    public abstract virtual IActionPresentableTexts get_PresentableTexts();
}
public interface JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindings {
    public IActionManager ActionManager { get; }
    public abstract virtual ICommand GetCommand(IActionDefWithId action);
    public abstract virtual IActionManager get_ActionManager();
}
public interface JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindingsFactory {
    public abstract virtual IActionManagerCommandBindings Create(Lifetime lifetime);
}
public class JetBrains.Application.UI.Actions.ActionPresentation : object {
    [NotNullAttribute]
public static ActionPresentation Empty;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayStyles <DisplayStyle>k__BackingField;
    [CanBeNullAttribute]
public string Description { get; public set; }
    [CanBeNullAttribute]
public string Text { get; public set; }
    [CanBeNullAttribute]
public IconId Image { get; public set; }
    public bool Visible { get; public set; }
    public DisplayStyles DisplayStyle { get; public set; }
    public ActionPresentation(StandartPresentation standartPresentation);
    private static ActionPresentation();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public IconId get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(IconId value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public DisplayStyles get_DisplayStyle();
    [CompilerGeneratedAttribute]
public void set_DisplayStyle(DisplayStyles value);
}
public class JetBrains.Application.UI.Actions.ActionSeparator : Separator {
    private static ActionSeparator();
}
public class JetBrains.Application.UI.Actions.AutomationProviderActionPresentation : ActionPresentation {
    [CompilerGeneratedAttribute]
private Func`1<IAutomation> <FAutomaton>k__BackingField;
    public Func`1<IAutomation> FAutomaton { get; public set; }
    public AutomationProviderActionPresentation(StandartPresentation standartPresentation);
    [CompilerGeneratedAttribute]
public Func`1<IAutomation> get_FAutomaton();
    [CompilerGeneratedAttribute]
public void set_FAutomaton(Func`1<IAutomation> value);
}
public class JetBrains.Application.UI.Actions.Automations.ActionAutomation : AAutomation {
    private Lifetime myLifetime;
    private IActionAutomation myParent;
    private IActionBarManager myManager;
    private Nullable`1<bool> myShowDisabledItems;
    private bool myVisibleIfNoChildren;
    private bool myEvaluatedVisibility;
    [CompilerGeneratedAttribute]
private IActionNodeDef <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <ShowHeaderAlways>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<object> <Shortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<IActionAutomation> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ListEvents`1<IActionAutomation> <AllItems>k__BackingField;
    public IActionNodeDef Action { get; }
    public Property`1<object> Icon { get; }
    public Property`1<object> Header { get; }
    public Property`1<bool> ShowHeaderAlways { get; }
    public Property`1<object> ToolTip { get; }
    public Property`1<object> Shortcut { get; }
    public Property`1<bool> IsEnabled { get; }
    public Property`1<bool> IsVisible { get; }
    public IListEvents`1<IActionAutomation> Items { get; }
    public ListEvents`1<IActionAutomation> AllItems { get; }
    public bool ShowDisabledItems { get; }
    protected ActionAutomation(Lifetime lifetime, IActionBarManager manager, IActionNodeDef definition, IActionAutomation parent, bool visibleIfNoChildren);
    [CompilerGeneratedAttribute]
public IActionNodeDef get_Action();
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Header();
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_ShowHeaderAlways();
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Shortcut();
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsVisible();
    [CompilerGeneratedAttribute]
public sealed virtual IListEvents`1<IActionAutomation> get_Items();
    [CompilerGeneratedAttribute]
public ListEvents`1<IActionAutomation> get_AllItems();
    public virtual string ToString();
    private void OnIsVisibleChanged(PropertyChangedEventArgs`1<bool> obj);
    public virtual void Update(EvaluatedAction evaluated);
    private void UpdateVisibility();
    private string GetToolTip(EvaluatedAction evaluatedAction, string shortcutText);
    public virtual bool get_ShowDisabledItems();
    protected string GetShortcutText();
    protected void InvalidateChildren();
    protected virtual void UpdateChildren();
    public virtual IDataContext CreateDataContext(Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.Automations.ActionAutomationExtensions : object {
    [ExtensionAttribute]
public static void Update(ActionAutomation item, IActionBarManager manager, IDataContext context);
    [ExtensionAttribute]
public static void UpdateAsynchronously(ActionAutomation item, Lifetime lifetime, IShellLocks locks, IActionsAvailabilityService service, Func`2<Lifetime, IDataContext> getContext);
    private static void AppendAsyncUpdateListRecursively(ActionAutomation item, IShellLocks locks, AsyncUpdateList list);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Actions.Automations.ActionAutomationHelpers : object {
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Actions.Automations.ActionAutomationHelpers/<ToAutomations>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IActionAutomation> ToAutomations(IEnumerable`1<IActionNodeDef> actions, Lifetime lifetime, IActionAutomation parent, IActionBarManager manager);
    [ExtensionAttribute]
public static ICommand ToCommand(IActionDefWithId action, IActionBarManager manager, Func`2<Lifetime, IDataContext> createDataContext);
    [ExtensionAttribute]
public static bool IsSeparator(IActionAutomation automation);
    public static string ReplaceAmpersandAccessKeyToUnderline(string text);
}
public class JetBrains.Application.UI.Actions.Automations.ActionBarAutomation : ActionRootAutomation {
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsActionBarVisible>k__BackingField;
    public bool Visible { get; }
    public Property`1<bool> IsActionBarVisible { get; }
    public ActionBarAutomation(Lifetime lifetime, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
    public virtual bool get_Visible();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsActionBarVisible();
}
public class JetBrains.Application.UI.Actions.Automations.ActionCheckableAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <Execute>k__BackingField;
    public Property`1<bool> IsChecked { get; }
    public ICommand Execute { get; }
    public ActionCheckableAutomation(Lifetime lifetime, IActionBarManager manager, IActionDefWithId definition, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_Execute();
    public virtual void Update(EvaluatedAction evaluated);
}
public class JetBrains.Application.UI.Actions.Automations.ActionContextMenuAutomation : ActionRootAutomation {
    private LifetimeDefinition myLifetimeDefinition;
    private ReentrancyGuard myReentrancyGuard;
    public ISignal`1<ShowRequestedEventArgs> OnShowRequested;
    public bool ShowDisabledItems { get; }
    public ActionContextMenuAutomation(LifetimeDefinition lifetimeDefinition, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
    public sealed virtual void BeginShow(JetPhysicalPoint ptScreen);
    public virtual bool get_ShowDisabledItems();
}
public class JetBrains.Application.UI.Actions.Automations.ActionCustomAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private Property`1<object> <Content>k__BackingField;
    public Property`1<object> Content { get; }
    public ActionCustomAutomation(Lifetime lifetime, IActionBarManager manager, IActionDefWithId definition, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Content();
    public virtual void Update(EvaluatedAction evaluated);
}
public class JetBrains.Application.UI.Actions.Automations.ActionExecutableAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private ICommand <Execute>k__BackingField;
    public ICommand Execute { get; }
    public ActionExecutableAutomation(Lifetime lifetime, IActionBarManager manager, IActionDefWithId definition, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual ICommand get_Execute();
}
public class JetBrains.Application.UI.Actions.Automations.ActionGroupAutomation : ActionAutomation {
    public ActionGroupAutomation(Lifetime lifetime, IActionBarManager manager, IActionNodeDef definition, IActionAutomation parent);
}
public class JetBrains.Application.UI.Actions.Automations.ActionMenuAutomation : ActionRootAutomation {
    public ActionMenuAutomation(Lifetime lifetime, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
}
public class JetBrains.Application.UI.Actions.Automations.ActionRootAutomation : ActionAutomation {
    protected Lifetime myLifetime;
    protected IActionBarManager myManager;
    protected Func`2<Lifetime, IDataContext> myGetDataContext;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsVertical>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionGroupDef <ActionGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferMenuItems>k__BackingField;
    public Property`1<bool> IsVertical { get; }
    public IActionGroupDef ActionGroup { get; }
    public IAutomation Automation { get; }
    public bool PreferMenuItems { get; private set; }
    public bool Visible { get; }
    public ActionRootAutomation(Lifetime lifetime, IActionBarManager manager, IActionGroupDef actionGroup, Func`2<Lifetime, IDataContext> getDataContext);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsVertical();
    protected void UpdateOrQueue();
    [CompilerGeneratedAttribute]
public sealed virtual IActionGroupDef get_ActionGroup();
    public virtual IDataContext CreateDataContext(Lifetime lifetime);
    public sealed virtual void UpdateAsync(IActionsAvailabilityService availabilityService);
    public sealed virtual void Update(IDataContext context);
    public sealed virtual IAutomation get_Automation();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreferMenuItems();
    [CompilerGeneratedAttribute]
private void set_PreferMenuItems(bool value);
    public virtual bool get_Visible();
    [ObsoleteAttribute]
public sealed virtual ICustomStripComboBox InsertComboBox(int index);
    [ObsoleteAttribute]
public sealed virtual ICustomStripLabel InsertLabel(int index, string title, Image image);
    [ObsoleteAttribute]
public sealed virtual ICustomStripSeparator InsertSplitter(int index);
    [ObsoleteAttribute]
public sealed virtual ICustomStripProgressBar InsertProgressBar(int index);
    public sealed virtual void RemoveCustom(object item);
    public sealed virtual void InjectCustom(int index, object item);
}
public class JetBrains.Application.UI.Actions.Automations.ActionSeparatorAutomation : ActionAutomation {
    public ActionSeparatorAutomation(Lifetime lifetime, IActionBarManager manager, IActionNodeDef definition, IActionAutomation parent);
}
public class JetBrains.Application.UI.Actions.Automations.CustomInjectableAutomation : ActionAutomation {
    [CompilerGeneratedAttribute]
private Property`1<object> <Content>k__BackingField;
    public Property`1<object> Content { get; }
    public CustomInjectableAutomation(Lifetime lifetime, IActionBarManager manager, object content, IActionAutomation parent);
    [CompilerGeneratedAttribute]
public sealed virtual Property`1<object> get_Content();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Actions.Automations.DefaultActionBarItemAutomationProvider : object {
    public sealed virtual IActionAutomation ProvideItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionBarManager manager, IActionAutomation parent);
}
public interface JetBrains.Application.UI.Actions.Automations.IActionAutomation {
    public Property`1<object> Icon { get; }
    public Property`1<object> Header { get; }
    public Property`1<bool> ShowHeaderAlways { get; }
    public Property`1<object> ToolTip { get; }
    public Property`1<object> Shortcut { get; }
    public Property`1<bool> IsEnabled { get; }
    public Property`1<bool> IsVisible { get; }
    public IListEvents`1<IActionAutomation> Items { get; }
    public abstract virtual Property`1<object> get_Icon();
    public abstract virtual Property`1<object> get_Header();
    public abstract virtual Property`1<bool> get_ShowHeaderAlways();
    public abstract virtual Property`1<object> get_ToolTip();
    public abstract virtual Property`1<object> get_Shortcut();
    public abstract virtual Property`1<bool> get_IsEnabled();
    public abstract virtual Property`1<bool> get_IsVisible();
    public abstract virtual IListEvents`1<IActionAutomation> get_Items();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionBarItemAutomationProvider {
    public abstract virtual IActionAutomation ProvideItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionBarManager manager, IActionAutomation parent);
}
public interface JetBrains.Application.UI.Actions.Automations.IActionCheckableAutomation {
    public Property`1<bool> IsChecked { get; }
    public abstract virtual Property`1<bool> get_IsChecked();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionCustomAutomation {
    public Property`1<object> Content { get; }
    public abstract virtual Property`1<object> get_Content();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionExecutableAutomation {
    public ICommand Execute { get; }
    public abstract virtual ICommand get_Execute();
}
public interface JetBrains.Application.UI.Actions.Automations.IActionSeparatorAutomation {
}
public class JetBrains.Application.UI.Actions.CheckedActionPresentation : ActionPresentation {
    [CompilerGeneratedAttribute]
private bool <Checked>k__BackingField;
    public bool Checked { get; public set; }
    public CheckedActionPresentation(StandartPresentation standartPresentation);
    [CompilerGeneratedAttribute]
public bool get_Checked();
    [CompilerGeneratedAttribute]
public void set_Checked(bool value);
}
public class JetBrains.Application.UI.Actions.DelegateActionHandler : object {
    [NotNullAttribute]
private Func`4<IDataContext, ActionPresentation, DelegateUpdate, bool> myFUpdate;
    [NotNullAttribute]
private Action`2<IDataContext, DelegateExecute> myFExecute;
    public DelegateActionHandler(Func`4<IDataContext, ActionPresentation, DelegateUpdate, bool> FUpdate, Action`2<IDataContext, DelegateExecute> FExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.UI.Actions.DelegateExecute : MulticastDelegate {
    public DelegateExecute(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Actions.DelegateUpdate : MulticastDelegate {
    public DelegateUpdate(object object, IntPtr method);
    public virtual bool Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public interface JetBrains.Application.UI.Actions.IAlterInterceptHandler {
    public bool AlterSuppress { get; }
    public abstract virtual bool get_AlterSuppress();
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalActionsMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalAIActionsMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalDumpMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalLoggerMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalOopMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalProjectsMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalToolsMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalVisualStudioMenu : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.InternalMenu.InternalWindowsMenu : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.Application.UI.Actions.InternalMenu.IntoInternalMenu : object {
    public IntoInternalMenu(InternalActionsMenu actions, InternalDumpMenu dump, InternalProjectsMenu projects, InternalLoggerMenu logger, Separator sep1, InternalOopMenu oop, Separator sep2, InternalToolsMenu tools, InternalWindowsMenu windows, Separator sep3, InternalVisualStudioMenu visualStudio, Separator sep4, InternalAIActionsMenu internalAiActionsMenu);
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.AiFeaturesGroup : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.GotoActionGroup : object {
}
[ActionGroupAttribute("ReSharper.Help.Twitter", "1", "10")]
public class JetBrains.Application.UI.Actions.MenuGroups.GotoTwitterMenu : object {
    public GotoTwitterMenu(ProductGotoTwitterAction showTwitterAction);
}
[ActionGroupAttribute("ReSharper.Help.Web", "1", "10")]
public class JetBrains.Application.UI.Actions.MenuGroups.GotoWebMenu : object {
    public GotoWebMenu(ProductGoToWebAction showTwitterAction);
}
[ActionGroupAttribute("ReSharper.Help", "1", "10")]
public class JetBrains.Application.UI.Actions.MenuGroups.HelpMenu : object {
    public HelpMenu(ShowHelpAction showHelpAction, Separator sep, GotoWebMenu webMenu, GotoTwitterMenu twitterMenu, HelpMenuSubmeetFeedpackPlaceholderActionGroup feedbacks, Separator sep1, ShowLogAction showLogAction, Separator sep2, ShowEnterLicenseAction showEnterLicenseAction, ShowDataSharingOptionsAction showDataSharingOptionsAction, ShowUserNotificationsAction showUserNotifications, AboutBoxAction aboutBoxAction);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.HelpMenuSubmeetFeedpackPlaceholderActionGroup : object {
}
[ActionGroupAttribute("Internal", "1", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.InternalMenu : object {
    public static string ID;
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IPresentableAction.Update(IDataContext context, ActionPresentation actionPresentation);
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuCodeAwareFeaturesGroup : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuFeaturesGroup : object {
    public MainMenuFeaturesGroup(MainMenuCodeAwareFeaturesGroup codeAwareFeatures, MainMenuIntegratedToolsGroup integratedToolsGroup);
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsBuildGroup : object {
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsCoverGroup : object {
}
[ActionGroupAttribute("0", "10")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsGroup : object {
    public MainMenuIntegratedToolsGroup(MainMenuIntegratedToolsCoverGroup cover, MainMenuIntegratedToolsProfileGroup profile, MainMenuIntegratedToolsBuildGroup build);
}
[ActionGroupAttribute("1", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuIntegratedToolsProfileGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuOptionsGroup : object {
}
[ActionGroupAttribute("0", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.MainMenuToolsGroup : object {
}
[ActionGroupAttribute("ReSharper", "0", "10")]
public class JetBrains.Application.UI.Actions.MenuGroups.VsMainMenuGroup : object {
    public VsMainMenuGroup(WhyProductIsDisabledAction disabledEntities, Separator sep0, AiFeaturesGroup aiFeaturesGroup, Separator sep1, MainMenuFeaturesGroup featuresGroup, Separator sep2, MainMenuToolsGroup toolsGroup, MainMenuOptionsGroup optionsGroup, Separator sep3, WindowsMenu windowsMenu, HelpMenu helpMenu, Separator sep4, InternalMenu internalGroup);
}
[ActionGroupAttribute("ReSharper.Windows", "1", "16")]
public class JetBrains.Application.UI.Actions.MenuGroups.WindowsMenu : object {
}
public class JetBrains.Application.UI.Actions.PrimitiveDelegateActionHandler : object {
    [NotNullAttribute]
private Func`2<IDataContext, bool> myUpdate;
    [NotNullAttribute]
private Action`1<IDataContext> myExecute;
    public bool AlterSuppress { get; }
    public PrimitiveDelegateActionHandler(Func`2<IDataContext, bool> update, Action`1<IDataContext> execute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool get_AlterSuppress();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ShowDataSharingOptionsAction_Text")]
public class JetBrains.Application.UI.Actions.ShowDataSharingOptionsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ShowEnterLicenseAction_Text")]
public class JetBrains.Application.UI.Actions.ShowEnterLicenseAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "WhyReSharperIsDisabledActionText")]
public class JetBrains.Application.UI.Actions.WhyProductIsDisabledAction : object {
    private int myIndex;
    public WhyProductIsDisabledAction(int index);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Handlers.ActionEvents : object {
    private ISignal`1<ActionEventArgs> myExecuteAction;
    private ISignal`1<ActionExecutedEventArgs> myAfterExecuteAction;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ISignal`1<ValueTuple`2<IAction, IActionDefWithId>> myAddHandler;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ISignal`1<ValueTuple`2<IAction, IActionDefWithId>> myRemoveHandler;
    public void AdviseExecuteAction(Lifetime lifetime, Action`1<ActionEventArgs> handler);
    public void AdviseAfterExecuteAction(Lifetime lifetime, Action`1<ActionExecutedEventArgs> handler);
    public void AdviseAddRemoveHandler(Lifetime lifetime, Action`1<ValueTuple`2<IAction, IActionDefWithId>> handler);
    public void AdviseAddHandler(Lifetime lifetime, Action`1<ValueTuple`2<IAction, IActionDefWithId>> handler);
    public void AdviseRemoveHandler(Lifetime lifetime, Action`1<ValueTuple`2<IAction, IActionDefWithId>> handler);
    internal void FireExecuteAction(Lifetime execLifetime, IActionDefWithId selectedAction, IDataContext context);
    internal void FireAfterExecuteAction(IActionDefWithId selectedAction, IDataContext context, TimeSpan timeSpan);
    internal void FireAddHandler(IActionDefWithId actionDef, IAction handler);
    internal void FireRemoveHandler(IActionDefWithId actionDef, IAction handler);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Handlers.ActionHandlerEx : object {
    [ExtensionAttribute]
public static void AddHandler(IActionHandlers handlers, Lifetime lifetime, IActionDefWithId action, IAction hanadler);
    [ExtensionAttribute]
public static void AddHandler(IActionHandlers handlers, Lifetime lifetime, IActionDefWithId action, IAction handler, ActionHandlerPriority priority);
    [ExtensionAttribute]
[NotNullAttribute]
public static ExecutedAction EvaluateAndExecute(IActionDefWithId actionDef, IActionHandlers handlers, DataContexts dataContexts, IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static EvaluatedAction Evaluate(IActionDefWithId actionDef, IActionHandlers handlers, DataContexts dataContexts);
}
public enum JetBrains.Application.UI.ActionsRevised.Handlers.ActionHandlerPriority : Enum {
    public int value__;
    public static ActionHandlerPriority PRIMARY_ACTION_HANDLERS;
    public static ActionHandlerPriority NORMAL_ACTION_HANDLERS;
    public static ActionHandlerPriority SECONDARY_ACTION_HANDLERS;
    public static ActionHandlerPriority FINAL_ACTION_HANDLER;
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Handlers.ActionHandlers : object {
    private IShellLocks myShellLocks;
    private RequirementsManager myRequirementsManager;
    private IEnumerable`1<IActionEvaluator> myEvaluators;
    private ProductConfigurations myConfigurations;
    private ActionEvents myEvents;
    private CompactMap`2<IActionDefWithId, IBoundAction> myBoundActions;
    public RequirementsManager RequirementsManager { get; }
    public ActionEvents Events { get; }
    public ActionHandlers(IShellLocks shellLocks, RequirementsManager requirementsManager, IEnumerable`1<IActionEvaluator> evaluators, ProductConfigurations configurations, ActionEvents events);
    public sealed virtual RequirementsManager get_RequirementsManager();
    public sealed virtual ActionEvents get_Events();
    public sealed virtual void AddHandler(IActionDefWithId action, IAction handler);
    public sealed virtual void AddHandler(IActionDefWithId action, IAction handler, ActionHandlerPriority priority);
    public sealed virtual void RemoveHandler(IActionDefWithId action, IAction handler);
    public sealed virtual EvaluatedAction Evaluate(IActionDefWithId action, IDataContext context);
    public sealed virtual EvaluatedAction StaticEvaluate(IActionDefWithId actionDef);
    public sealed virtual IBoundAction BindActionDef(IActionDefWithId actionDefWithId);
    [NotNullAttribute]
private IBoundAction BindInternal(IActionDefWithId actionDefWithId);
    private IBoundAction CreateActionNodeInstance(IActionDefWithId actionDefWithId);
    private IBoundAction ToActionNode(IActionDefWithId actionDefWithId, object instance);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Handlers.ActionHandlersEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static EvaluatedAction Evaluate(IActionDefWithId actionDef, IActionManager actions, IDataContext dataContext);
    [ExtensionAttribute]
[NotNullAttribute]
public static ExecutedAction EvaluateAndExecute(IActionDefWithId actionDef, IActionManager actions, IDataContext dataContext);
}
[ShellComponentAttribute("16")]
internal class JetBrains.Application.UI.ActionsRevised.Handlers.AutomationProviderActionEvaluator : object {
    [NotNullAttribute]
private RequirementsManager myRequirementsManager;
    [NotNullAttribute]
private IShellLocks myLocks;
    public AutomationProviderActionEvaluator(RequirementsManager requirementsManager, IShellLocks locks);
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual bool IsApplicable(IAction action);
    public sealed virtual bool Execute(IAction action, IReadOnlyCollection`1<IAction> allActions, IDataContext dataContext);
    public sealed virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.AutomationProviderCustomPresentation : object {
    [CompilerGeneratedAttribute]
private Func`1<IAutomation> <FAutomaton>k__BackingField;
    public Func`1<IAutomation> FAutomaton { get; public set; }
    [CompilerGeneratedAttribute]
public Func`1<IAutomation> get_FAutomaton();
    [CompilerGeneratedAttribute]
public void set_FAutomaton(Func`1<IAutomation> value);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.BoundAction : object {
    [CompilerGeneratedAttribute]
private IActionDefWithId <Def>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionHandlers <ActionHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionEvaluator <Evaluator>k__BackingField;
    private IconId myIconId;
    private List`1<IAction> myOtherHandlers;
    private List`1<ActionHandlerPriority> myHandlerPriorities;
    [CompilerGeneratedAttribute]
private IAction <PrimaryHandler>k__BackingField;
    public IActionDefWithId Def { get; }
    public IActionHandlers ActionHandlers { get; }
    public IActionEvaluator Evaluator { get; }
    public IAction PrimaryHandler { get; }
    public BoundAction(IActionDefWithId actionDef, IAction primaryHandler, IActionEvaluator evaluator, IActionHandlers actionHandlers);
    [CompilerGeneratedAttribute]
public IActionDefWithId get_Def();
    [CompilerGeneratedAttribute]
public IActionHandlers get_ActionHandlers();
    [CompilerGeneratedAttribute]
public IActionEvaluator get_Evaluator();
    [CompilerGeneratedAttribute]
public sealed virtual IAction get_PrimaryHandler();
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    public sealed virtual EvaluatedAction StaticEvaluate();
    public IEnumerable`1<IAction> AllActions();
    private EvaluatedAction CreateDefaultEvaluated();
    public sealed virtual void AddHandler(IAction handler, ActionHandlerPriority priority);
    public sealed virtual void RemoveHandler(IAction handler);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Handlers.CheckableActionEvaluator : object {
    private RequirementsManager myRequirementsManager;
    private IShellLocks myLocks;
    public CheckableActionEvaluator(RequirementsManager requirementsManager, IShellLocks locks);
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual bool IsApplicable(IAction action);
    public sealed virtual bool Execute(IAction action, IReadOnlyCollection`1<IAction> allActions, IDataContext dataContext);
    public sealed virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.EvaluatedAction : object {
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ICustomActionPresentation <CustomPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundAction <BoundAction>k__BackingField;
    [CompilerGeneratedAttribute]
private StandartPresentation <StandartPresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private IAction <SelectedAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldFallBack>k__BackingField;
    [CanBeNullAttribute]
public IDataContext DataContext { get; public set; }
    [CanBeNullAttribute]
public ICustomActionPresentation CustomPresentation { get; public set; }
    [CanBeNullAttribute]
public BoundAction BoundAction { get; public set; }
    public StandartPresentation StandartPresentation { get; public set; }
    [CanBeNullAttribute]
public IAction SelectedAction { get; public set; }
    public bool ShouldFallBack { get; public set; }
    public EvaluationStatus Status { get; }
    public bool IsAvailable { get; }
    public bool IsVisible { get; }
    public string Text { get; }
    public IconId Icon { get; }
    public string Description { get; }
    public DisplayStyles DisplayStyle { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
public void set_DataContext(IDataContext value);
    [CompilerGeneratedAttribute]
public ICustomActionPresentation get_CustomPresentation();
    [CompilerGeneratedAttribute]
public void set_CustomPresentation(ICustomActionPresentation value);
    [CompilerGeneratedAttribute]
public BoundAction get_BoundAction();
    [CompilerGeneratedAttribute]
public void set_BoundAction(BoundAction value);
    [CompilerGeneratedAttribute]
public StandartPresentation get_StandartPresentation();
    [CompilerGeneratedAttribute]
public void set_StandartPresentation(StandartPresentation value);
    [CompilerGeneratedAttribute]
public IAction get_SelectedAction();
    [CompilerGeneratedAttribute]
public void set_SelectedAction(IAction value);
    [NotNullAttribute]
public ExecutedAction PrepareRequirementsAsync(OuterLifetime lifetime, Func`1<bool> executeWhenRequirementsReady, Action`1<FailWithKind> failWith);
    [NotNullAttribute]
public ExecutedAction Execute();
    public bool ExecuteWithoutRequirements();
    [CompilerGeneratedAttribute]
public bool get_ShouldFallBack();
    [CompilerGeneratedAttribute]
public void set_ShouldFallBack(bool value);
    public EvaluationStatus get_Status();
    public bool get_IsAvailable();
    public bool get_IsVisible();
    public string get_Text();
    public IconId get_Icon();
    public string get_Description();
    public DisplayStyles get_DisplayStyle();
    public sealed virtual void ProlongateDataContext(Lifetime lifetime);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Handlers.ExecutableActionEvaluator : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private RequirementsManager myRequirementsManager;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    public ExecutableActionEvaluator(Lifetime lifetime, RequirementsManager requirementsManager, IShellLocks shellLocks);
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual bool IsApplicable(IAction action);
    private bool ExecuteWithRequirements(IAction action, IReadOnlyCollection`1<IAction> allActions, RequirementsManager requirementsManager, IDataContextOwner dataContextOwner);
    public sealed virtual bool Execute(IAction action, IReadOnlyCollection`1<IAction> allActions, IDataContext dataContext);
    public virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
    public static void PrepareRequirementsAsync(OuterLifetime lifetime, IAction action, IDataContextOwner dataContextOwner, RequirementsManager requirementsManager, Action executeWhenRequirementsReady, Action`1<FailWithKind> failWith);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.ExecutedAction : object {
    [CompilerGeneratedAttribute]
private EvaluatedAction <EvaluatedAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CallNext>k__BackingField;
    [NotNullAttribute]
public EvaluatedAction EvaluatedAction { get; }
    public bool CallNext { get; }
    public ExecutedAction(EvaluatedAction evaluatedAction, bool callNext);
    [CompilerGeneratedAttribute]
public EvaluatedAction get_EvaluatedAction();
    [CompilerGeneratedAttribute]
public bool get_CallNext();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.ActionsRevised.Handlers.IActionEvaluator {
    [NotNullAttribute]
[PureAttribute]
public abstract virtual ICustomActionPresentation NewCustomPresentation();
    public abstract virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
    public abstract virtual bool Execute(IAction action, IReadOnlyCollection`1<IAction> allActions, IDataContext dataContext);
    public abstract virtual bool IsApplicable(IAction action);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.ActionsRevised.Handlers.IActionHandlers {
    [NotNullAttribute]
public RequirementsManager RequirementsManager { get; }
    public ActionEvents Events { get; }
    public abstract virtual void AddHandler(IActionDefWithId action, IAction handler);
    public abstract virtual void AddHandler(IActionDefWithId action, IAction handler, ActionHandlerPriority priority);
    public abstract virtual void RemoveHandler(IActionDefWithId actionDef, IAction handlers);
    [NotNullAttribute]
public abstract virtual EvaluatedAction Evaluate(IActionDefWithId action, IDataContext context);
    [NotNullAttribute]
public abstract virtual EvaluatedAction StaticEvaluate(IActionDefWithId actionDef);
    [NotNullAttribute]
public abstract virtual IBoundAction BindActionDef(IActionDefWithId actionDefWithId);
    public abstract virtual RequirementsManager get_RequirementsManager();
    public abstract virtual ActionEvents get_Events();
}
public interface JetBrains.Application.UI.ActionsRevised.Handlers.IBoundAction {
    public IAction PrimaryHandler { get; }
    public abstract virtual IAction get_PrimaryHandler();
    public abstract virtual EvaluatedAction Evaluate(IDataContext context);
    public abstract virtual EvaluatedAction StaticEvaluate();
    public abstract virtual void AddHandler(IAction handler, ActionHandlerPriority priority);
    public abstract virtual void RemoveHandler(IAction handler);
}
public interface JetBrains.Application.UI.ActionsRevised.Handlers.IDataContextOwner {
    public IDataContext DataContext { get; }
    public abstract virtual IDataContext get_DataContext();
    public abstract virtual void ProlongateDataContext(Lifetime lifetime);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.InvisibleBound : object {
    public static InvisibleBound Instance;
    public IAction PrimaryHandler { get; }
    private static InvisibleBound();
    public sealed virtual IAction get_PrimaryHandler();
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    private static EvaluatedAction DefaultEvaluated();
    public sealed virtual EvaluatedAction StaticEvaluate();
    public sealed virtual void AddHandler(IAction handler, ActionHandlerPriority priority);
    public sealed virtual void RemoveHandler(IAction handler);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.ActionsRevised.Handlers.LicensedEntityActionEventsTracker : object {
    private ILogger myLogger;
    private ShellPartCatalogSet myShellPartCatalogSet;
    private EnvironmentZonesExtra myZonesExtra;
    private LicensedEntityUsageTracker myTracker;
    private IImmutableList`1<ILicensedEntity> myEntities;
    private PartCatalogZoneMapping myMapping;
    public LicensedEntityActionEventsTracker(Lifetime lifetime, ILogger logger, ActionEvents actionEvents, ShellPartCatalogSet shellPartCatalogSet, EnvironmentZonesExtra zonesExtra, LicensedEntityUsageTracker tracker, IImmutableList`1<ILicensedEntity> entities);
    public void ReportProductIsUsed(PartCatalogType type);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(ActionEventArgs args);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Handlers.PresentableActionEvaluator : object {
    public sealed virtual ICustomActionPresentation NewCustomPresentation();
    public sealed virtual bool IsApplicable(IAction action);
    public sealed virtual void Evaluate(IAction handler, EvaluatedAction result, IDataContext context);
    public sealed virtual bool Execute(IAction action, IReadOnlyCollection`1<IAction> allActions, IDataContext dataContext);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.SimpleDataContextOwner : object {
    [CompilerGeneratedAttribute]
private IDataContext <DataContext>k__BackingField;
    public IDataContext DataContext { get; protected set; }
    public SimpleDataContextOwner(IDataContext dataContext);
    [CompilerGeneratedAttribute]
public sealed virtual IDataContext get_DataContext();
    [CompilerGeneratedAttribute]
protected void set_DataContext(IDataContext value);
    public sealed virtual void ProlongateDataContext(Lifetime lifetime);
}
public class JetBrains.Application.UI.ActionsRevised.Handlers.StandartPresentation : object {
    [CompilerGeneratedAttribute]
private EvaluationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayStyles <DisplayStyle>k__BackingField;
    public EvaluationStatus Status { get; public set; }
    public bool IsAvailable { get; }
    public bool IsVisible { get; }
    public string Text { get; public set; }
    public IconId Icon { get; public set; }
    public string Description { get; public set; }
    public DisplayStyles DisplayStyle { get; public set; }
    [CompilerGeneratedAttribute]
public EvaluationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(EvaluationStatus value);
    public bool get_IsAvailable();
    public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public DisplayStyles get_DisplayStyle();
    [CompilerGeneratedAttribute]
public void set_DisplayStyle(DisplayStyles value);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.StaticBound : object {
    private IAction myNode;
    private EvaluatedAction myEvaluatedAction;
    public IAction PrimaryHandler { get; }
    public StaticBound(IActionDefWithId actionDef, IAction node);
    public sealed virtual IAction get_PrimaryHandler();
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    public sealed virtual EvaluatedAction StaticEvaluate();
    public sealed virtual void AddHandler(IAction handler, ActionHandlerPriority priority);
    public sealed virtual void RemoveHandler(IAction handler);
}
internal class JetBrains.Application.UI.ActionsRevised.Handlers.UnsupportedBound : object {
    public static UnsupportedBound Instance;
    public IAction PrimaryHandler { get; }
    private static UnsupportedBound();
    public sealed virtual IAction get_PrimaryHandler();
    public sealed virtual EvaluatedAction Evaluate(IDataContext context);
    private static EvaluatedAction DefaultEvaluated();
    public sealed virtual EvaluatedAction StaticEvaluate();
    public sealed virtual void AddHandler(IAction handler, ActionHandlerPriority priority);
    public sealed virtual void RemoveHandler(IAction handler);
}
[BuildArtifactAttribute]
[MemberwiseSerializableAttribute]
public class JetBrains.Application.UI.ActionsRevised.Install.ShortcutConflictsArtifact : object {
    public bool HasConflicts;
    public ImmutableFileItem Conflicts;
    public ShortcutConflictsArtifact(bool hasConflicts, ImmutableFileItem conflicts);
}
public static class JetBrains.Application.UI.ActionsRevised.Install.ShortcutConflictsReporter : object {
    [BuildStepAttribute]
public static InstallersPortablesZipsDeployableFile ReportShortcutConflictsDeploy(ShortcutConflictsArtifact conflictsart, ILogger logger);
    [BuildStepAttribute]
public static LocalInstallWithPostInstallStepsPart ReportShortcutConflictsArtOfBuild(ProductBinariesDirArtifact bindir, ShortcutConflictsArtifact conflictsart, ILogger logger);
    [BuildStepAttribute]
public static ShortcutConflictsArtifact ReportShortcutConflictsCore(ProductPartCatalogForBuild catalogart, ILogger logger);
    private static bool CollectConflicts(PartCatalog catalog, TextWriter writer, ILogger logger);
    private static IList`1<PartCatalogType> TraceParts(string text, IList`1<PartCatalogType> oldTypes, IEnumerable`1<PartCatalogType> newTypes, TextWriter writer);
    private static IEnumerable`1<PartCatalogType> GetLeafUiInteractiveZones(PartCatalog catalog);
    private static JetHashSet`1<ZonePart> GetAllowedActivatorZones(IEnumerable`1<PartCatalogType> productZonesActivators, ILogger logger);
    private static bool ReportActionSchemeConflicts(ActionsScheme actionsScheme, TextWriter writer);
    private static List`1<string> DetectConflicts(ICollection`1<IActionDefWithId> actionDefs, Func`2<IActionDefWithId, String[]> selector);
    [CompilerGeneratedAttribute]
internal static string <DetectConflicts>g__ActionToString|8_0(IActionDefWithId def);
    [CompilerGeneratedAttribute]
internal static void <DetectConflicts>g__FindConflicts|8_1(OneToSetMap`2<ActionShortcut, IActionDefWithId> shortcutsMap, <>c__DisplayClass8_0& );
}
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionDef : object {
    internal static string ActionWithFallback;
    private string myText;
    private string myDescription;
    private Nullable`1<PartCatalogType> myResourceType;
    private Nullable`1<StringSource> myTextResourceName;
    private Nullable`1<StringSource> myDescriptionResourceName;
    public static Guid NamespaceGuid;
    [CompilerGeneratedAttribute]
private int <MultiIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private PartCatalogType <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PartCatalogType> <IconType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultShortcutText>k__BackingField;
    [CompilerGeneratedAttribute]
private ShortcutScope <ShortcutScope>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VsShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IdeaShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CustomVisualStudioId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActionWithFallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContextDependent>k__BackingField;
    public int MultiIndex { get; }
    public PartCatalogType Part { get; }
    public string ActionId { get; }
    public string Text { get; public set; }
    public string Description { get; private set; }
    public Nullable`1<PartCatalogType> IconType { get; }
    public string DefaultShortcutText { get; }
    public ShortcutScope ShortcutScope { get; }
    public String[] VsShortcuts { get; }
    public String[] IdeaShortcuts { get; }
    public bool IsInternal { get; }
    public Nullable`1<int> CustomVisualStudioId { get; }
    public string TypeFullName { get; }
    public bool IsActionWithFallback { get; }
    public bool IsContextDependent { get; }
    public ActionDef(PartCatalogType part, PartCatalogAttribute attribute, int multiIndex);
    private static ActionDef();
    [CompilerGeneratedAttribute]
public int get_MultiIndex();
    [CompilerGeneratedAttribute]
public sealed virtual PartCatalogType get_Part();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual string get_Description();
    private void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PartCatalogType> get_IconType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultShortcutText();
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScope get_ShortcutScope();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_VsShortcuts();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_IdeaShortcuts();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CustomVisualStudioId();
    public sealed virtual string get_TypeFullName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActionWithFallback();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsContextDependent();
    public virtual string ToString();
}
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionDefDescriptor : object {
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CustomVisualStudioId>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VsShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IdeaShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultShortcutText>k__BackingField;
    [CompilerGeneratedAttribute]
private ShortcutScope <ShortcutScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActionWithFallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContextDependent>k__BackingField;
    public string ActionId { get; }
    public string Text { get; }
    public string Description { get; }
    public bool IsInternal { get; }
    public Nullable`1<int> CustomVisualStudioId { get; }
    public String[] VsShortcuts { get; }
    public String[] IdeaShortcuts { get; }
    public string DefaultShortcutText { get; }
    public ShortcutScope ShortcutScope { get; }
    public string TypeFullName { get; }
    public bool IsActionWithFallback { get; }
    public bool IsContextDependent { get; }
    public ActionDefDescriptor(IActionDefWithIdDescriptor actionDef);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CustomVisualStudioId();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_VsShortcuts();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_IdeaShortcuts();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultShortcutText();
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScope get_ShortcutScope();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TypeFullName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActionWithFallback();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsContextDependent();
    public virtual string ToString();
}
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionDefDescriptorLite : object {
    protected IActionDefWithIdDescriptor myActionDef;
    public string ActionId { get; }
    public string Text { get; }
    public string Description { get; }
    public bool IsInternal { get; }
    public Nullable`1<int> CustomVisualStudioId { get; }
    public String[] VsShortcuts { get; }
    public String[] IdeaShortcuts { get; }
    public string DefaultShortcutText { get; }
    public ShortcutScope ShortcutScope { get; }
    public string TypeFullName { get; }
    public bool IsActionWithFallback { get; }
    public bool IsContextDependent { get; }
    public ActionDefDescriptorLite(IActionDefWithIdDescriptor actionDef);
    public sealed virtual string get_ActionId();
    public sealed virtual string get_Text();
    public sealed virtual string get_Description();
    public sealed virtual bool get_IsInternal();
    public sealed virtual Nullable`1<int> get_CustomVisualStudioId();
    public sealed virtual String[] get_VsShortcuts();
    public sealed virtual String[] get_IdeaShortcuts();
    public sealed virtual string get_DefaultShortcutText();
    public sealed virtual ShortcutScope get_ShortcutScope();
    public sealed virtual string get_TypeFullName();
    public sealed virtual bool get_IsActionWithFallback();
    public sealed virtual bool get_IsContextDependent();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Loader.ActionDefEx : object {
    [ExtensionAttribute]
public static string GetActionId(IActionDefs this);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionDefs : object {
    private Dictionary`2<string, IActionDefWithId> myActionIdToNodes;
    private Dictionary`2<object, IActionDefWithId> myPartTypeToNodes;
    public ActionDefs(ActionsScheme scheme, CultureContextComponent cultureContextComponent, CultureContextComponentPluginActivator cultureContextComponentPluginActivator);
    private void ApplyAcceleratorsForMenuActions();
    public sealed virtual IActionDefWithId GetActionDefById(string id);
    public sealed virtual IActionDefWithId TryGetActionDefById(string id);
    public sealed virtual IActionDefWithId GetActionDef();
    public sealed virtual IActionDefWithId GetActionDef(Type actionType);
    public sealed virtual IActionDefWithId TryGetActionDef();
    private IActionDefWithId TryGetActionDef(Type actionType);
    public sealed virtual IEnumerable`1<IActionDefWithId> GetAllActionDefs();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionDescriptorDefs : object {
    private IActionDefs myActionDefs;
    public ActionDescriptorDefs(IActionDefs actionDefs);
    public sealed virtual IActionDefWithIdDescriptor GetActionDefById(string id);
    public sealed virtual IActionDefWithIdDescriptor TryGetActionDefById(string id);
    public sealed virtual IEnumerable`1<IActionDefWithIdDescriptor> GetAllActionDefs();
}
internal class JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDef : object {
    private string myDescription;
    private string myText;
    private Nullable`1<PartCatalogType> myTextResourceType;
    private Nullable`1<StringSource> myTextResourceName;
    private Nullable`1<PartCatalogType> myDescriptionResourceType;
    private Nullable`1<StringSource> myDescriptionResourceName;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private PartCatalogType <Part>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultShortcutText>k__BackingField;
    [CompilerGeneratedAttribute]
private ShortcutScope <ShortcutScope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PartCatalogType> <IconType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <VsShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IdeaShortcuts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CustomVisualStudioId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionGroupInsertStyles <InsertionStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IActionNodeDef> <RawChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVsContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActionWithFallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContextDependent>k__BackingField;
    public bool IsInternal { get; }
    public string ActionId { get; }
    public PartCatalogType Part { get; }
    public string DefaultShortcutText { get; }
    public ShortcutScope ShortcutScope { get; }
    public string Description { get; }
    public Nullable`1<PartCatalogType> IconType { get; }
    public string Text { get; public set; }
    public String[] VsShortcuts { get; }
    public String[] IdeaShortcuts { get; }
    public Nullable`1<int> CustomVisualStudioId { get; }
    public ActionGroupInsertStyles InsertionStyle { get; }
    public IList`1<IActionNodeDef> RawChildren { get; }
    public bool IsVsContextMenu { get; }
    public int Priority { get; public set; }
    public bool IsActionWithFallback { get; }
    public bool IsContextDependent { get; }
    public string TypeFullName { get; }
    public bool IsEmpty { get; }
    public IEnumerable`1<IActionNodeDef> MenuChildren { get; }
    public ActionGroupDef(PartCatalogType part);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActionId();
    [CompilerGeneratedAttribute]
public sealed virtual PartCatalogType get_Part();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultShortcutText();
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScope get_ShortcutScope();
    public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PartCatalogType> get_IconType();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_VsShortcuts();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_IdeaShortcuts();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_CustomVisualStudioId();
    [CompilerGeneratedAttribute]
public sealed virtual ActionGroupInsertStyles get_InsertionStyle();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<IActionNodeDef> get_RawChildren();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVsContextMenu();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsActionWithFallback();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsContextDependent();
    public sealed virtual string get_TypeFullName();
    public sealed virtual bool get_IsEmpty();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDef/<get_MenuChildren>d__62")]
public sealed virtual IEnumerable`1<IActionNodeDef> get_MenuChildren();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDef/<MenuChildrenImpl>d__63")]
private IEnumerable`1<IActionNodeDef> MenuChildrenImpl();
    private int TryGetChildNodeIndex(IActionNodeDef def);
    public bool InsertBefore(IActionNodeDef def, IActionNodeDef tag);
    public bool InsertAfter(IActionNodeDef def, IActionNodeDef tag);
    public void InsertLast(IActionNodeDef def);
    public void InsertFirst(IActionNodeDef def);
    public virtual string ToString();
}
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDefDescriptor : ActionDefDescriptor {
    [CompilerGeneratedAttribute]
private ActionGroupInsertStyles <InsertionStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVsContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    public ActionGroupInsertStyles InsertionStyle { get; }
    public bool IsVsContextMenu { get; }
    public int Priority { get; public set; }
    public bool IsEmpty { get; }
    public ActionGroupDefDescriptor(IActionGroupDefDescriptor a);
    [CompilerGeneratedAttribute]
public sealed virtual ActionGroupInsertStyles get_InsertionStyle();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVsContextMenu();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEmpty();
}
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDefDescriptorLite : ActionDefDescriptorLite {
    [CompilerGeneratedAttribute]
private ActionGroupInsertStyles <InsertionStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVsContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    public ActionGroupInsertStyles InsertionStyle { get; }
    public bool IsVsContextMenu { get; }
    public int Priority { get; public set; }
    public bool IsEmpty { get; }
    public ActionGroupDefDescriptorLite(IActionGroupDefDescriptor a);
    [CompilerGeneratedAttribute]
public sealed virtual ActionGroupInsertStyles get_InsertionStyle();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsVsContextMenu();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Priority();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Priority(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEmpty();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Loader.ActionGroupDefEx : object {
    [ExtensionAttribute]
public static bool IsMenu(IActionGroupDef actionGroupDef);
    [ExtensionAttribute]
public static bool IsGroup(IActionGroupDef actionGroupDef);
    [ExtensionAttribute]
public static bool IsSeparated(IActionGroupDef actionGroupDef);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionsRevised.Loader.ActionsScheme : object {
    private static ILogger Logger;
    private IEnumerable`1<ICustomActionDefFactory> myActionDefFactories;
    public Dictionary`2<string, IActionDefWithId> ActionIdToNodes;
    public Dictionary`2<PartCatalogType, IActionDefWithId> PartTypeToNodes;
    private CompactOneToListMap`2<PartCatalogType, IActionDefWithId> myPartTypeToMultinodes;
    private List`1<MyNodeInsertion> myPostponedInsertions;
    public ActionsScheme(ShellPartCatalogSet productcatalogs, IEnumerable`1<ICustomActionDefFactory> actionDefFactories, CultureContextComponent cultureContextComponent, CultureContextComponentPluginActivator cultureContextComponentPluginActivator);
    private static ActionsScheme();
    private static void SortPartsByLocalName(PartCatalogType[] parts);
    private void AddActionsFromParts(ICollection`1<PartCatalogType> actionParts, ICollection`1<PartCatalogType> groupParts);
    private void AddActionOrMultiAction(PartCatalogType part);
    protected virtual ActionDef CreateActionDef(PartCatalogType part, PartCatalogAttribute attribute, int i);
    private void IterateUnresolvedInsertions();
    private void AddAction(IActionDefWithId actionNode, bool indexByPart);
    private void ProcessInsertion(IActionDefWithId actionNode);
    private void ProcessSingleInsertion(PartCatalogType baseType, IActionDefWithId actionNode);
    private void ProcessOwnChildren(ActionGroupDef actionGroup);
    private T FindNodeForInsertion(PartCatalogType nodeType);
    public void Dump(StreamWriter writer);
    private void DumpImpl(StreamWriter writer, string indent, IActionNodeDef actionNodeDef);
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDef {
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDefs {
    [NotNullAttribute]
public abstract virtual IActionDefWithId GetActionDefById(string id);
    [CanBeNullAttribute]
public abstract virtual IActionDefWithId TryGetActionDefById(string id);
    [NotNullAttribute]
public abstract virtual IActionDefWithId GetActionDef(Type actionType);
    [NotNullAttribute]
public abstract virtual IActionDefWithId GetActionDef();
    [CanBeNullAttribute]
public abstract virtual IActionDefWithId TryGetActionDef();
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IActionDefWithId> GetAllActionDefs();
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId {
    public PartCatalogType Part { get; }
    public Nullable`1<PartCatalogType> IconType { get; }
    public string Text { get; public set; }
    public abstract virtual PartCatalogType get_Part();
    public abstract virtual Nullable`1<PartCatalogType> get_IconType();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor {
    public bool IsInternal { get; }
    public string ActionId { get; }
    public string Text { get; }
    public string Description { get; }
    public Nullable`1<int> CustomVisualStudioId { get; }
    public String[] VsShortcuts { get; }
    public String[] IdeaShortcuts { get; }
    [NotNullAttribute]
public string DefaultShortcutText { get; }
    public ShortcutScope ShortcutScope { get; }
    [NotNullAttribute]
public string TypeFullName { get; }
    public bool IsActionWithFallback { get; }
    public bool IsContextDependent { get; }
    public abstract virtual bool get_IsInternal();
    public abstract virtual string get_ActionId();
    public abstract virtual string get_Text();
    public abstract virtual string get_Description();
    public abstract virtual Nullable`1<int> get_CustomVisualStudioId();
    public abstract virtual String[] get_VsShortcuts();
    public abstract virtual String[] get_IdeaShortcuts();
    public abstract virtual string get_DefaultShortcutText();
    public abstract virtual ShortcutScope get_ShortcutScope();
    public abstract virtual string get_TypeFullName();
    public abstract virtual bool get_IsActionWithFallback();
    public abstract virtual bool get_IsContextDependent();
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDescriptorDefs {
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionDescriptorDefs`1 {
    [NotNullAttribute]
public abstract virtual TActionDefWithIdDescriptor GetActionDefById(string id);
    [CanBeNullAttribute]
public abstract virtual TActionDefWithIdDescriptor TryGetActionDefById(string id);
    public abstract virtual IEnumerable`1<TActionDefWithIdDescriptor> GetAllActionDefs();
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef {
    public IList`1<IActionNodeDef> RawChildren { get; }
    public IEnumerable`1<IActionNodeDef> MenuChildren { get; }
    public abstract virtual IList`1<IActionNodeDef> get_RawChildren();
    public abstract virtual IEnumerable`1<IActionNodeDef> get_MenuChildren();
}
public interface JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDefDescriptor {
    public ActionGroupInsertStyles InsertionStyle { get; }
    public bool IsVsContextMenu { get; }
    public int Priority { get; public set; }
    public bool IsEmpty { get; }
    public abstract virtual ActionGroupInsertStyles get_InsertionStyle();
    public abstract virtual bool get_IsVsContextMenu();
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual bool get_IsEmpty();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.ActionsRevised.Loader.ICustomActionDefFactory {
    public abstract virtual bool IsApplicable(PartCatalogType part, PartCatalogAttribute attribute);
    public abstract virtual ActionDef Create(PartCatalogType part, PartCatalogAttribute attribute, int i);
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
[AttributeUsageAttribute("4")]
[ComponentInstantiationAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.ActionsRevised.Menu.ActionAttribute : ProductComponentAttribute {
    protected static Instantiation ActionDefaultInstantiation;
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    public string Text;
    [CompilerGeneratedAttribute]
private string <TextResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdRangeLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ShortcutScope <ShortcutScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultShortcutText>k__BackingField;
    public String[] VsShortcuts;
    public String[] IdeaShortcuts;
    [CompilerGeneratedAttribute]
private bool <IsContextDependent>k__BackingField;
    public static string ActionAttribute_ActionId;
    public static string ActionAttribute_Text;
    public static string ActionAttribute_ResourceType;
    public static string ActionAttribute_TextResourceName;
    public static string ActionAttribute_Id;
    public static string ActionAttribute_IdRangeLength;
    public static string ActionAttribute_Description;
    public static string ActionAttribute_DescriptionResourceName;
    public static string ActionAttribute_Icon;
    public static string ActionAttribute_ShortcutScope;
    public static string ActionAttribute_VsShortcuts;
    public static string ActionAttribute_IdeaShortcuts;
    public static string ActionAttribute_DefaultShortcutText;
    public static string ActionAttribute_IsContextDependent;
    public static string ShortName;
    public static string FullName;
    public string ActionId { get; public set; }
    public Type ResourceType { get; }
    public string TextResourceName { get; }
    public int Id { get; public set; }
    public int IdRangeLength { get; public set; }
    public string Description { get; public set; }
    public string DescriptionResourceName { get; public set; }
    public Type Icon { get; public set; }
    public ShortcutScope ShortcutScope { get; public set; }
    public string DefaultShortcutText { get; public set; }
    public bool IsContextDependent { get; public set; }
    [ObsoleteAttribute("Use the globalization-aware overload which references a resource.")]
public ActionAttribute(string Text);
    [ObsoleteAttribute("Use the globalization-aware overload which references a resource.")]
public ActionAttribute(string Text, Instantiation instantiation);
    public ActionAttribute(Type ResourceType, string TextResourceName);
    public ActionAttribute(Type ResourceType, string TextResourceName, Instantiation instantiation);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public ActionAttribute(string ActionId, string Text);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public ActionAttribute(string ActionId, string Text, Instantiation instantiation);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public ActionAttribute(string ActionId, Type ResourceType, string TextResourceName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public ActionAttribute(string ActionId, Type ResourceType, string TextResourceName, Instantiation instantiation);
    private static ActionAttribute();
    [CompilerGeneratedAttribute]
public string get_ActionId();
    [CompilerGeneratedAttribute]
public void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public string get_TextResourceName();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_IdRangeLength();
    [CompilerGeneratedAttribute]
public void set_IdRangeLength(int value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DescriptionResourceName();
    [CompilerGeneratedAttribute]
public void set_DescriptionResourceName(string value);
    [CompilerGeneratedAttribute]
public Type get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Type value);
    [CompilerGeneratedAttribute]
public ShortcutScope get_ShortcutScope();
    [CompilerGeneratedAttribute]
public void set_ShortcutScope(ShortcutScope value);
    [CompilerGeneratedAttribute]
public string get_DefaultShortcutText();
    [CompilerGeneratedAttribute]
public void set_DefaultShortcutText(string value);
    [CompilerGeneratedAttribute]
public bool get_IsContextDependent();
    [CompilerGeneratedAttribute]
public void set_IsContextDependent(bool value);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.IAutomationProviderAction {
    public abstract virtual bool Execute(IDataContext context);
    public abstract virtual bool Update(IDataContext context, AutomationProviderActionPresentation presentation);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.ICheckableAction {
    public abstract virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public abstract virtual void Execute(IDataContext context);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction {
    public abstract virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.Application.UI.ActionsRevised.Menu.IPresentableAction {
    public abstract virtual bool Update(IDataContext context, ActionPresentation actionPresentation);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionsRevised.Shortcuts.ActionShortcutsEx : object {
    [ExtensionAttribute]
public static bool ShortcutSchemeIsNotSelected(IActionShortcuts shortcuts);
}
public interface JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts {
    public ShortcutScheme CurrentScheme { get; }
    public abstract virtual ShortcutScheme get_CurrentScheme();
    public abstract virtual void SelectShortcutScheme(ShortcutScheme scheme);
    public abstract virtual void AddShortcut(ShortcutScheme scheme, IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public abstract virtual void RemoveShortcut(ShortcutScheme scheme, IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    [NotNullAttribute]
public abstract virtual IList`1<Pair`2<ActionShortcut, ShortcutScope>> GetDefinedShortcutsWithScopes(IActionDefWithIdDescriptor action);
    [NotNullAttribute]
public abstract virtual IList`1<ActionShortcut> GetAssignedShortcuts(IActionDefWithIdDescriptor actionDef);
    [CanBeNullAttribute]
public abstract virtual IActionDefWithIdDescriptor TryGetActionByShortcut(ActionShortcut shortcut);
}
public abstract class JetBrains.Application.UI.ActionSystem.Action.OverridingActionHandler : object {
    [NotNullAttribute]
private String[] myBaseActionIds;
    [NotNullAttribute]
public String[] ActionIds { get; }
    public ActionHandlerPriority Priority { get; }
    protected OverridingActionHandler(String[] baseActionIds);
    public virtual String[] get_ActionIds();
    public virtual ActionHandlerPriority get_Priority();
    public void RegisterActionHandler(Lifetime lifetime, IActionManager actionManager);
    public abstract virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.Application.UI.ActionSystem.Action.SimpleOverridingActionHandler : OverridingActionHandler {
    protected SimpleOverridingActionHandler(String[] baseActionIds);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual bool IsAvailable(IDataContext context);
    protected abstract virtual void ExecuteInternal(IDataContext context);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.ActionSystem.ActionBar.ActionsAsyncAvailability : object {
    private GroupingEvent myPushAsyncUpdateEvent;
    private SequentialLifetimes myUpdateLifetimes;
    private IActionManager myActionManager;
    private RequirementsManager myRequirementsManager;
    protected IShellLocks myLocks;
    protected ICollection`1<AsyncUpdateList> myAsyncUpdateList;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myIsUpdateInProgress;
    public ActionsAsyncAvailability(IShellLocks locks, Lifetime lifetime, IActionManager actionManager, RequirementsManager requirementsManager, DataContexts dataContexts);
    protected void UpdateAsyncCore();
    private void Prepare(Lifetime lifetimeDef, List`1<AsyncUpdateList> asyncUpdateLists);
    protected virtual void PrecalculateAllDataRules(IDataContext context);
    public virtual void PushAsyncUpdate(AsyncUpdateList asyncUpdateList);
}
public class JetBrains.Application.UI.ActionSystem.ActionBar.AsyncActionEvaluationData : object {
    private EvaluatedAction myResult;
    [CompilerGeneratedAttribute]
private IActionDefWithId <ActionDefWithId>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<EvaluatedAction> <ContinueOnUiThread>k__BackingField;
    public IActionDefWithId ActionDefWithId { get; }
    public Action`1<EvaluatedAction> ContinueOnUiThread { get; }
    public EvaluatedAction Result { get; }
    public AsyncActionEvaluationData(IActionDefWithId actionDefWithId, Action`1<EvaluatedAction> continueOnUiThreadAction);
    [CompilerGeneratedAttribute]
public IActionDefWithId get_ActionDefWithId();
    [CompilerGeneratedAttribute]
public Action`1<EvaluatedAction> get_ContinueOnUiThread();
    public void SetResult(EvaluatedAction evaluatedAction);
    public EvaluatedAction get_Result();
}
public class JetBrains.Application.UI.ActionSystem.ActionBar.AsyncUpdateList : object {
    private Lifetime myLifetime;
    private Func`2<Lifetime, IDataContext> myGetDataContextFunc;
    private List`1<AsyncActionEvaluationData> myListToUpdate;
    private IDataContext myContext;
    public List`1<AsyncActionEvaluationData> ListToUpdate { get; }
    public IDataContext Context { get; }
    public bool IsAlive { get; }
    public AsyncUpdateList(Lifetime lifetime, Func`2<Lifetime, IDataContext> getDataContextFunc);
    public List`1<AsyncActionEvaluationData> get_ListToUpdate();
    public IDataContext get_Context();
    public bool get_IsAlive();
    public void PrepareContext(Lifetime lifetime);
    public virtual string ToString();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager : object {
    protected IActionManager myActionman;
    private IEnumerable`1<IActionBarItemAutomationProvider> myAutomationProvides;
    private IThemedIconManager myIconman;
    private IActionManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.ActionManager { get; }
    private IThemedIconManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.ThemedIconManager { get; }
    public DummyActionBarManager(IActionManager actionman, IThemedIconManager iconman, IEnumerable`1<IActionBarItemAutomationProvider> automationProvides);
    public sealed virtual void RegisterActionBar(Lifetime lifetime, IActionBar actionBar, bool autoUpdate);
    private sealed virtual override IActionManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.get_ActionManager();
    public virtual IActionBar CreateActionBar(Lifetime lifetime, IActionGroupDef def, bool autoUpdate, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    public virtual IActionContextMenu CreateActionContextMenu(LifetimeDefinition lifetimeDefinition, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    private sealed virtual override IActionMenu JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionMenu(Lifetime lifetime, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    public sealed virtual void ShowActionContextMenuInWinFormsControl(LifetimeDefinition lifetimeDefinition, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> fGetDataRules, JetPhysicalPoint ptScreen);
    private sealed virtual override IActionAutomation JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionAutomation parent);
    private sealed virtual override IThemedIconManager JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.get_ThemedIconManager();
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar {
    [NotNullAttribute]
public IActionGroupDef ActionGroup { get; }
    public IAutomation Automation { get; }
    public bool Visible { get; }
    public abstract virtual IActionGroupDef get_ActionGroup();
    [NotNullAttribute]
public abstract virtual IDataContext CreateDataContext(Lifetime lifetime);
    public abstract virtual IAutomation get_Automation();
    public abstract virtual bool get_Visible();
    public abstract virtual void Update(IDataContext context);
    public abstract virtual void UpdateAsync(IActionsAvailabilityService availabilityService);
    public abstract virtual ICustomStripComboBox InsertComboBox(int index);
    public abstract virtual ICustomStripLabel InsertLabel(int index, string title, Image image);
    public abstract virtual ICustomStripSeparator InsertSplitter(int index);
    public abstract virtual ICustomStripProgressBar InsertProgressBar(int index);
    public abstract virtual void InjectCustom(int index, object item);
    public abstract virtual void RemoveCustom(object item);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager {
    [NotNullAttribute]
public IActionManager ActionManager { get; }
    [NotNullAttribute]
public IThemedIconManager ThemedIconManager { get; }
    public abstract virtual IActionManager get_ActionManager();
    public abstract virtual IThemedIconManager get_ThemedIconManager();
    [NotNullAttribute]
public abstract virtual IActionBar CreateActionBar(Lifetime lifetime, IActionGroupDef def, bool autoUpdate, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    [NotNullAttribute]
public abstract virtual IActionContextMenu CreateActionContextMenu(LifetimeDefinition lifetimeDefinition, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    [NotNullAttribute]
public abstract virtual IActionMenu CreateActionMenu(Lifetime lifetime, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    [CanBeNullAttribute]
public abstract virtual IActionAutomation CreateItemAutomation(Lifetime lifetime, IActionNodeDef action, IActionAutomation parent);
    public abstract virtual void RegisterActionBar(Lifetime lifetime, IActionBar actionBar, bool autoUpdate);
    public abstract virtual void ShowActionContextMenuInWinFormsControl(LifetimeDefinition lifetimeDefinition, IActionGroupDef actionGroup, Func`1<IEnumerable`1<IDataRule>> fGetDataRules, JetPhysicalPoint ptScreen);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManagerEx : object {
    [ExtensionAttribute]
[GuardAttribute("1")]
public static void ShowPopupMenu(IActionBarManager thіs, Lifetime lifetime, IThreading threading, IActionGroupDef group, Func`1<IEnumerable`1<IDataRule>> FGetDataRules, JetPhysicalPoint ptScreen);
    [ExtensionAttribute]
[GuardAttribute("1")]
public static void ShowPopupMenu(IActionBarManager thіs, LifetimeDefinition lifetimeDefinition, IThreading threading, IActionGroupDef group, Func`1<IEnumerable`1<IDataRule>> FGetDataRules, JetPhysicalPoint ptScreen);
    [ExtensionAttribute]
[GuardAttribute("1")]
public static void Update(IActionBar thіs);
    [ExtensionAttribute]
public static IActionBar CreateActionBar(IActionBarManager thіs, Lifetime lifetime, bool isAutoUpdate, Func`1<IEnumerable`1<IDataRule>> FGetDataRules);
    public static Func`2<Lifetime, IDataContext> ToGetDataContext(IActionManager actionManager, Func`1<IEnumerable`1<IDataRule>> fGetDataRules);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionContextMenu {
    public abstract virtual void BeginShow(JetPhysicalPoint ptScreen);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionItemParent {
    public bool PreferMenuItems { get; }
    public bool ShowDisabledItems { get; }
    public abstract virtual bool get_PreferMenuItems();
    public abstract virtual bool get_ShowDisabledItems();
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionMenu {
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.IActionsAvailabilityService {
    public abstract virtual void PushAsyncUpdate(AsyncUpdateList asyncUpdateList);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripComboBox {
    [NotNullAttribute]
public ComboBox ComboBox { get; }
    public int Width { get; public set; }
    public abstract virtual ComboBox get_ComboBox();
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripItem {
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripLabel {
    public string Text { get; public set; }
    public string ToolTipText { get; public set; }
    public Image Image { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_ToolTipText();
    public abstract virtual void set_ToolTipText(string value);
    public abstract virtual Image get_Image();
    public abstract virtual void set_Image(Image value);
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripProgressBar {
    public string Text { get; public set; }
    public int Value { get; public set; }
    public int Minimum { get; public set; }
    public int Maximum { get; public set; }
    public JetRgbaColor ProgressColor { get; public set; }
    public ProgressBar ProgressBar { get; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual int get_Value();
    public abstract virtual void set_Value(int value);
    public abstract virtual int get_Minimum();
    public abstract virtual void set_Minimum(int value);
    public abstract virtual int get_Maximum();
    public abstract virtual void set_Maximum(int value);
    public abstract virtual JetRgbaColor get_ProgressColor();
    public abstract virtual void set_ProgressColor(JetRgbaColor value);
    public abstract virtual ProgressBar get_ProgressBar();
}
public interface JetBrains.Application.UI.ActionSystem.ActionBar.Legacy.ICustomStripSeparator {
}
public class JetBrains.Application.UI.ActionSystem.ActionLoader.ActionLoaderConstants : object {
    public static string ACTION_TAG_NAME;
    public static string ACTION_GROUP_TAG_NAME;
    public static string ACTION_WITH_GROUP_TAG_NAME;
    public static string SEPARATOR_TAG_NAME;
    public static string ACTION_REF_TAG_NAME;
    public static string AttrEmbed;
    public static string INSERT_TAG_NAME;
    public static string ATTR_ID;
    public static string ATTR_POSITION;
    public static string ATTR_INSERT_ANCHOR_ID;
    public static string ATTR_GROUP_ID;
    public static string ATTR_INTERNAL;
    public static string ATTR_DESCRIPTION;
    public static string ATTR_SHORTCUT;
    public static string ATTR_VS_SHORTCUT;
    public static string ATTR_TEXT;
    public static string ATTR_IMAGE;
    public static string ATTR_TYPE;
    public static string ATTR_CHECKED;
    public static string ATTR_RADIOCHECK;
    public static string TYPE_CHECKBOX;
    public static string TYPE_COMBOBOX;
    public static string SHORTCUT_ELEMENT;
    public static string VS_SHORTCUT_ELEMENT;
    public static string ATTR_MOUSE_SHORTCUT;
    public static string ATTR_SCOPE;
    public static string ATTR_OVERRIDES;
    public static string ATTR_SHOW_CONFLICT;
    public static string UpdatesActions;
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerCommandBindingsFactory : object {
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private IThreading myThreading;
    public ActionManagerCommandBindingsFactory(IActionManager actionManager, IThreading threading);
    public virtual IActionManagerCommandBindings Create(Lifetime lifetime);
}
public class JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerSimpleCommand : object {
    [NotNullAttribute]
private IActionManager myActionManager;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    [NotNullAttribute]
public IActionDefWithId Action;
    public ActionManagerSimpleCommand(Lifetime lifetime, IActionDefWithId action, IActionManager actionManager, IThreading threading);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    [CompilerGeneratedAttribute]
private void <System.Windows.Input.ICommand.Execute>b__9_0();
}
public class JetBrains.Application.UI.ActionSystem.ActionManager.DummyActionManagerCommandBindings : object {
    private Lifetime myLifetime;
    private IDictionaryEvents`2<IActionDefWithId, ActionManagerSimpleCommand> myMapActionToCommand;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private IActionManager <ActionManager>k__BackingField;
    public IActionManager ActionManager { get; }
    public DummyActionManagerCommandBindings(Lifetime lifetime, IActionManager actionManager, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual IActionManager get_ActionManager();
    [NotNullAttribute]
private sealed virtual override ICommand JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindings.GetCommand(IActionDefWithId action);
}
public static class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll : object {
    public static string ActionGroupId;
    public static ICloseAllItems EmptyItemsList;
    private static CloseAll();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CloseAllActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseAllAction : object {
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CloseAllButPinnedActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseAllButPinnedAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CloseAllButThisActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseAllButThisAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CloseActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll_CloseThisAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAllItem : object {
    public Action Close;
    public bool IsCloseable;
    public bool IsCurrent;
    public string Text;
    public CloseAllItem(string text, bool isCurrent, Action FClose);
}
public interface JetBrains.Application.UI.ActionSystem.Actions.CloseAll.ICloseAllItem {
    public string Title { get; }
    public bool CanClose { get; }
    public bool QueryClose { get; }
    public bool IsCurrentItem { get; }
    public bool IsPinned { get; }
    public abstract virtual string get_Title();
    public abstract virtual bool get_CanClose();
    public abstract virtual bool get_QueryClose();
    public abstract virtual bool get_IsCurrentItem();
    public abstract virtual bool get_IsPinned();
}
public interface JetBrains.Application.UI.ActionSystem.Actions.CloseAll.ICloseAllItems {
    [NotNullAttribute]
public IReadOnlyList`1<ICloseAllItem> Items { get; }
    public abstract virtual IReadOnlyList`1<ICloseAllItem> get_Items();
    public abstract virtual void QueryClose(IEnumerable`1<ICloseAllItem> items);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "OpenLogActionText")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.UI.ActionSystem.Actions.OpenLogAction : object {
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "GotoProductTwitterActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.ProductInfo.ProductGotoTwitterAction : ProductGoToWebActionBase {
    public ProductGotoTwitterAction(int index);
    protected virtual string GetProductUrl(ISubProductInfo productInfo);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "GotoProductWebPageActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.ProductInfo.ProductGoToWebAction : ProductGoToWebActionBase {
    public ProductGoToWebAction(int index);
    protected virtual string GetProductUrl(ISubProductInfo productInfo);
}
public abstract class JetBrains.Application.UI.ActionSystem.Actions.ProductInfo.ProductGoToWebActionBase : object {
    private int myIndex;
    private string myFormat;
    public ProductGoToWebActionBase(int index, string format);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private ISubProductInfo GetProductInfo(IEnumerable`1<ISubProductInfo> subProductsInfos);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual string GetProductUrl(ISubProductInfo productInfo);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "OnlineHelpActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.ShowHelpAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ShowLogActionText")]
public class JetBrains.Application.UI.ActionSystem.Actions.ShowLogAction : object {
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.CheckableCustomPresentation : object {
    [CompilerGeneratedAttribute]
private bool <IsChecked>k__BackingField;
    public bool IsChecked { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsChecked();
    [CompilerGeneratedAttribute]
public void set_IsChecked(bool value);
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus : Enum {
    public int value__;
    public static EvaluationStatus Unsupported;
    public static EvaluationStatus Available;
    public static EvaluationStatus Unavailable;
    public static EvaluationStatus Invisible;
    public static EvaluationStatus CallNext;
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.ExecutableCustomActionPresentation : object {
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.ExecutionState : Enum {
    public int value__;
    public static ExecutionState Undefined;
    public static ExecutionState WaitingForRequirement;
    public static ExecutionState CompletedOrInterrupted;
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.ICustomActionPresentation {
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.PresentableCustomActionPresentation : object {
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.RequirementExecutionStatus : object {
    public ExecutionState ExecutionState;
    public string Description;
    public bool ShowReSharperIsThinking;
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.RequirementsManager : object {
    private IShellLocks myLocks;
    private ILogger myLogger;
    private GroupingEvent myPushRequirementEvent;
    private JetHashSet`1<IActionRequirement> myPendingRequirements;
    private Signal`1<RequirementExecutionStatus> myWaitingForRequirementSignal;
    public Signal`1<RequirementExecutionStatus> WaitingForRequirementSignal { get; }
    public RequirementsManager(IShellLocks locks, Lifetime lifetime, SynchronizationPoints synchronizationPoints, ILogger logger);
    public Signal`1<RequirementExecutionStatus> get_WaitingForRequirementSignal();
    public void GetReadyCore();
    public void ForceThatAllRequirementIsReady();
    public void PushRequirement(IActionRequirement requirement, Action`1<IActionRequirement> subscribeAction);
    public virtual void ExecuteActionAsync(IActionRequirement requirement, Action continueWith, Action failWith, bool reSharperIsThinking);
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.RequirementState : Enum {
    public int value__;
    public static RequirementState Undefined;
    public static RequirementState Completed;
    public static RequirementState Interrupted;
}
public static class JetBrains.Application.UI.ActionSystem.ActionsRevised.Loader.ActionDefines : object {
    public static string SeparatorNodeName;
    public static string InsertBefore;
    public static string InsertAfter;
    public static string InsertFirst;
    public static string InsertLast;
    private static ActionDefines();
    [NotNullAttribute]
public static string GetIdFromName(StringSource typeName);
    [NotNullAttribute]
public static string GetIdFromNameImpl(StringSource typeName);
    [CanBeNullAttribute]
public static string TryGetActionIDFromActionHandlerTypeName(string typename);
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Loader.ActionSeparator : object {
    public static IActionNodeDef Separator;
    private static ActionSeparator();
    public virtual string ToString();
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Loader.IActionNodeDef {
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionGroupAttribute : ProductComponentAttribute {
    [CompilerGeneratedAttribute]
private string <ActionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionGroupInsertStyles <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TextResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DescriptionResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptionResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdatesActions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVsContextMenu>k__BackingField;
    public int Priority;
    private string myText;
    private string myDescription;
    public static string ActionGroupAttribute_ActionId;
    public static string ActionGroupAttribute_Style;
    public static string ActionGroupAttribute_Icon;
    public static string ActionGroupAttribute_Text;
    public static string ActionGroupAttribute_TextResourceType;
    public static string ActionGroupAttribute_TextResourceName;
    public static string ActionGroupAttribute_Description;
    public static string ActionGroupAttribute_DescriptionResourceType;
    public static string ActionGroupAttribute_DescriptionResourceName;
    public static string ActionGroupAttribute_Id;
    public static string ActionGroupAttribute_Priority;
    public static string ActionGroupAttribute_IsVsContextMenu;
    public static string ActionGroupAttribute_UpdatesActions;
    public static string ShortName;
    public static string FullName;
    public string ActionId { get; public set; }
    public ActionGroupInsertStyles Style { get; public set; }
    public Type Icon { get; public set; }
    public int Id { get; public set; }
    public string Text { get; public set; }
    public Type TextResourceType { get; public set; }
    public string TextResourceName { get; public set; }
    public string Description { get; public set; }
    public Type DescriptionResourceType { get; public set; }
    public string DescriptionResourceName { get; public set; }
    public bool UpdatesActions { get; public set; }
    public bool IsVsContextMenu { get; public set; }
    public ActionGroupAttribute(ActionGroupInsertStyles Style, Instantiation instantiation);
    [EditorBrowsableAttribute("1")]
public ActionGroupAttribute(string ActionId, ActionGroupInsertStyles Style, Instantiation instantiation);
    private static ActionGroupAttribute();
    [CompilerGeneratedAttribute]
public string get_ActionId();
    [CompilerGeneratedAttribute]
public void set_ActionId(string value);
    [CompilerGeneratedAttribute]
public ActionGroupInsertStyles get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(ActionGroupInsertStyles value);
    [CompilerGeneratedAttribute]
public Type get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Type value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Type get_TextResourceType();
    [CompilerGeneratedAttribute]
public void set_TextResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_TextResourceName();
    [CompilerGeneratedAttribute]
public void set_TextResourceName(string value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_DescriptionResourceType();
    [CompilerGeneratedAttribute]
public void set_DescriptionResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_DescriptionResourceName();
    [CompilerGeneratedAttribute]
public void set_DescriptionResourceName(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdatesActions();
    [CompilerGeneratedAttribute]
public void set_UpdatesActions(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVsContextMenu();
    [CompilerGeneratedAttribute]
public void set_IsVsContextMenu(bool value);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionGroupInsertStyles : Enum {
    public int value__;
    public static ActionGroupInsertStyles Embedded;
    public static ActionGroupInsertStyles Submenu;
    public static ActionGroupInsertStyles Separated;
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionHandler : PartAttribute {
    [CompilerGeneratedAttribute]
private Type <ActionType>k__BackingField;
    public Type ActionType { get; public set; }
    public ActionHandler(Type ActionType);
    [CompilerGeneratedAttribute]
public Type get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(Type value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionRequirementEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IActionRequirement GetActionExecuteRequirement(IAction action, IDataContext dataContext);
}
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.EmptyRequirement : object {
    [NotNullAttribute]
private static EmptyRequirement ourEmptyRequirement;
    private Signal`1<RequirementState> myDone;
    [NotNullAttribute]
public static EmptyRequirement Instance { get; }
    public bool IsReady { get; }
    public ISignal`1<RequirementState> Done { get; }
    public string Description { get; }
    private static EmptyRequirement();
    public static EmptyRequirement get_Instance();
    public sealed virtual bool get_IsReady();
    public sealed virtual void GetReady();
    public sealed virtual ISignal`1<RequirementState> get_Done();
    public sealed virtual string get_Description();
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction {
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionRequirement {
    public bool IsReady { get; }
    [NotNullAttribute]
public ISignal`1<RequirementState> Done { get; }
    public string Description { get; }
    public abstract virtual bool get_IsReady();
    public abstract virtual void GetReady();
    public abstract virtual ISignal`1<RequirementState> get_Done();
    public abstract virtual string get_Description();
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithExecuteRequirement {
    [NotNullAttribute]
public abstract virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithFallback {
    public abstract virtual bool ShouldFallBack(IDataContext context);
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithUpdateRequirement {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertAfter`2 {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertBefore`2 {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertFirst`1 {
}
[UsedImplicitlyAttribute]
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IInsertLast`1 {
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.INeedMainThreadToUpdateAction {
}
public enum JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.InsertionPosition : Enum {
    public int value__;
    public static InsertionPosition First;
    public static InsertionPosition Last;
    public static InsertionPosition Before;
    public static InsertionPosition After;
}
[ObsoleteAttribute("Zoning is the primary means for hiding internal-only features. Place internal actions within internal module zones.")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.InternalActionAttribute : PartAttribute {
}
public interface JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IRefactoringAction {
}
[UsedImplicitlyAttribute]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.Separator : object {
}
[MeansImplicitUseAttribute]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IAction")]
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute : PartAttribute {
    public string VsOverriddenAction;
    [CompilerGeneratedAttribute]
private bool <HideVsCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FallBackOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Configurable>k__BackingField;
    public bool HideVsCommand { get; public set; }
    public bool FallBackOnly { get; public set; }
    public bool Configurable { get; public set; }
    public VsOverrideActionAttribute(string VsOverriddenAction);
    [CompilerGeneratedAttribute]
public bool get_HideVsCommand();
    [CompilerGeneratedAttribute]
public void set_HideVsCommand(bool value);
    [CompilerGeneratedAttribute]
public bool get_FallBackOnly();
    [CompilerGeneratedAttribute]
public void set_FallBackOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Configurable();
    [CompilerGeneratedAttribute]
public void set_Configurable(bool value);
}
[ActionAttribute("")]
[VsOverrideActionAttribute("({1496A755-94DE-11D0-8C3F-00C04FC2AAE2}:103)")]
public class JetBrains.Application.UI.ActionSystem.EscapeActionHandler : object {
    public static string ActionId;
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public abstract class JetBrains.Application.UI.ActionSystem.EscapeActionHandlerBase : OneOfaListActionHandler {
    public IActionDefWithId ActionId { get; }
    protected EscapeActionHandlerBase(IActionManager actionManager);
    public virtual IActionDefWithId get_ActionId();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionSystem.JetPopupContextMenu : object {
    [ExtensionAttribute]
public static void SetItemsForActionGroup(JetPopupMenu jpm, Lifetime lifetime, IDataContext datacontext, IActionManager actionman, ILogger logger);
    public static void SetItemsForActionGroup(Lifetime lifetime, JetPopupMenu jpm, IActionGroupDef group, IDataContext datacontext, IActionManager actionman, ILogger logger);
}
public interface JetBrains.Application.UI.ActionSystem.Menu.INamedUiItem {
    public bool CanHaveMnemonic { get; }
    public string Text { get; public set; }
    public abstract virtual bool get_CanHaveMnemonic();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
public class JetBrains.Application.UI.ActionSystem.Menu.MnemonicProcessor : object {
    private List`1<char> myMnemonics;
    [NotNullAttribute]
private static Int32[] CONSONANTS;
    private static char NO_MNEMONIC;
    private static MnemonicProcessor();
    private bool TryUseMnemonic(char c);
    [NotNullAttribute]
private static Int32[] FillConsonantsList();
    private static bool IsConsonant(char c);
    private static void SplitWord(string word, Char& firstChar, Char[]& consonants, Char[]& other);
    private static IList`1<char> GetPossibleMnemonics(string text);
    private static char GetMnemonic(string text);
    public void UpdateMnemonics(IEnumerable`1<INamedUiItem> allItems, ICollection`1<INamedUiItem> targetItems);
}
public abstract class JetBrains.Application.UI.ActionSystem.OneOfaListActionHandler : object {
    [CanBeNullAttribute]
private LifetimeDefinition mySubscribedLifetimeDef;
    [NotNullAttribute]
protected IActionManager myActionManager;
    public IActionDefWithId ActionId { get; }
    public bool IsSubscribed { get; }
    protected OneOfaListActionHandler(IActionManager actionManager);
    public abstract virtual IActionDefWithId get_ActionId();
    public bool get_IsSubscribed();
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public void Subscribe(Lifetime lifetime);
    public void Unsubscribe();
    protected abstract virtual bool IsAvailable(IDataContext dataContext);
    protected abstract virtual void Execute(IDataContext dataContext);
    [CompilerGeneratedAttribute]
private void <Subscribe>b__9_0();
}
public interface JetBrains.Application.UI.ActionSystem.ShortcutManager.ISchemeEntry {
    public ShortcutScheme Scheme { get; }
    public abstract virtual ShortcutScheme get_Scheme();
    public abstract virtual void AddShortcut(IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public abstract virtual void RemoveShortcut(IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public abstract virtual IEnumerable`1<IActionDefWithIdDescriptor> GetActionsWithShortcuts();
    public abstract virtual IEnumerable`1<Pair`2<ActionShortcut, ShortcutScope>> GetShortcuts(IActionDefWithIdDescriptor action);
    [CanBeNullAttribute]
public abstract virtual IActionDefWithIdDescriptor TryGetActionByShortcut(ShortcutScope scope, ActionShortcut shortcut);
}
public class JetBrains.Application.UI.ActionSystem.ShortcutManager.SchemeEntry : object {
    private OneToSetMap`2<string, Pair`2<ActionShortcut, ShortcutScope>> myActions;
    private Dictionary`2<string, IActionDefWithIdDescriptor> myActionsDefs;
    private Dictionary`2<ShortcutScope, Dictionary`2<ActionShortcut, IActionDefWithIdDescriptor>> myScopeShortcuts;
    [CompilerGeneratedAttribute]
private ShortcutScheme <Scheme>k__BackingField;
    public ShortcutScheme Scheme { get; }
    public SchemeEntry(ShortcutScheme scheme);
    [CompilerGeneratedAttribute]
public sealed virtual ShortcutScheme get_Scheme();
    public virtual void AddShortcut(IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public virtual void RemoveShortcut(IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public sealed virtual IEnumerable`1<IActionDefWithIdDescriptor> GetActionsWithShortcuts();
    public sealed virtual IEnumerable`1<Pair`2<ActionShortcut, ShortcutScope>> GetShortcuts(IActionDefWithIdDescriptor action);
    public sealed virtual IActionDefWithIdDescriptor TryGetActionByShortcut(ShortcutScope scope, ActionShortcut shortcut);
}
[ShellComponentAttribute("18")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.ActionSystem.ShortcutManager.ShortcutManager : object {
    private ILazy`1<ShowOnlineHelpHandler> myShowHelp;
    private Dictionary`2<ShortcutScheme, ISchemeEntry> mySchemes;
    protected ISimpleSignal ShortcutsChanged;
    [NotNullAttribute]
public IProperty`1<ShortcutScheme> SelectedShortcutScheme;
    protected ISchemeEntry CurrentEntry { get; }
    public bool IsSchemeInitialized { get; }
    [NotNullAttribute]
public ShortcutScheme CurrentScheme { get; }
    public ShortcutManager(Lifetime lifetime, IActionDescriptorDefs defs, ILazy`1<ShowOnlineHelpHandler> maybeShowHelp);
    protected ISchemeEntry get_CurrentEntry();
    public ISchemeEntry GetEntry(ShortcutScheme scheme);
    public bool get_IsSchemeInitialized();
    public sealed virtual ShortcutScheme get_CurrentScheme();
    protected virtual ISchemeEntry CreateSchemeEntry(ShortcutScheme scheme);
    public virtual void SelectShortcutScheme(ShortcutScheme scheme);
    public virtual void AddShortcut(ShortcutScheme scheme, IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public virtual void RemoveShortcut(ShortcutScheme scheme, IActionDefWithIdDescriptor action, ShortcutScope scope, ActionShortcut shortcut);
    public sealed virtual IList`1<Pair`2<ActionShortcut, ShortcutScope>> GetDefinedShortcutsWithScopes(IActionDefWithIdDescriptor action);
    public virtual IList`1<ActionShortcut> GetAssignedShortcuts(IActionDefWithIdDescriptor action);
    public virtual IActionDefWithIdDescriptor TryGetActionByShortcut(ActionShortcut shortcut);
    [CanBeNullAttribute]
protected IActionDefWithIdDescriptor TryGetActionByShortcut(ActionShortcut shortcut, ShortcutScope[] scopes);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0(PropertyChangedEventArgs`1<ShortcutScheme> _);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.ActionSystem.ShortcutManager.ShortcutManagerEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static InputGestureCollection GetInputGestures(IActionShortcuts thіs, IActionDefWithId action);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "StartNewLine_Text")]
public class JetBrains.Application.UI.ActionSystem.Text.EditorStartNewLineAction : object {
    public static string ACTION_ID;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "StartNewLineBeforeActionText")]
public class JetBrains.Application.UI.ActionSystem.Text.EditorStartNewLineBeforeAction : object {
    public static string ACTION_ID;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ReindentActionText")]
public class JetBrains.Application.UI.ActionSystem.Text.ReindentAction : object {
    public static string ACTION_ID;
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public static class JetBrains.Application.UI.ActionSystem.Text.TextControlActions : object {
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.ActionSystem.UserPresentation.ActionPresentableTexts : object {
    public static string ArrowDelimiter;
    public static string PipeDelimiter;
    private IActionShortcuts myShortcuts;
    [CanBeNullAttribute]
private IActionDefWithId myMainMenuDef;
    private object myLock;
    private Dictionary`2<IActionDefWithId, ICollection`1<IActionDefWithId>> myActionToParentsMap;
    private Dictionary`2<string, Dictionary`2<IActionDefWithId, string>> myCacheDelimiterActionMenuPaths;
    public ActionPresentableTexts(IActionShortcuts shortcuts);
    public sealed virtual string GetPathToMenuRoot(IActionDefWithId actionDef, Decoration decoration);
    public sealed virtual string GetMenuPathText(IActionDefWithId actionDef, Decoration decoration);
    public sealed virtual string GetShortcutText(IActionDefWithId actionDef, Decoration decoration);
    public sealed virtual string GetShortcutOrMenuPathText(IActionDefWithId actionDef, Decoration decoration);
    public sealed virtual string GetHowToExecuteText(IActionDefWithId actionDef, Decoration decoration);
    [CanBeNullAttribute]
public ICollection`1<IActionDefWithId> GetPathToMainMenuRoot(IActionDefWithId actionDef);
    [CanBeNullAttribute]
protected virtual IActionDefWithId GetMainMenuDef();
    protected virtual bool ShouldBeExcludedFromMenuPath(IActionDefWithId actionDef);
    [NotNullAttribute]
private static string DecorateText(string text, Decoration decoration);
    private string TryGetShortcutText(IActionDefWithId actionDef);
    private string TryGetMenuPathText(IActionDefWithId actionDef, Decoration decoration, bool includeSelf);
    private void EnsureMenuMapInitialized();
    private void ProcessMenuActionRecursive(IActionDefWithId actionDef, Stack`1<IActionDefWithId> parentsList);
    private string BuildMenuPathText(ICollection`1<IActionDefWithId> path, string delimiter);
    private string GetPureActionText(IActionDefWithId actionDef);
}
public interface JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts {
    [NotNullAttribute]
public abstract virtual string GetPathToMenuRoot(IActionDefWithId actionDef, Decoration decoration);
    [NotNullAttribute]
public abstract virtual string GetMenuPathText(IActionDefWithId actionDef, Decoration decoration);
    [NotNullAttribute]
public abstract virtual string GetShortcutText(IActionDefWithId actionDef, Decoration decoration);
    [NotNullAttribute]
public abstract virtual string GetShortcutOrMenuPathText(IActionDefWithId actionDef, Decoration decoration);
    [NotNullAttribute]
public abstract virtual string GetHowToExecuteText(IActionDefWithId actionDef, Decoration decoration);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Automation.AutomationViewsRegistry : object {
    private static ReadonlyToken ourReadonlyToken;
    [CompilerGeneratedAttribute]
private DictionaryEvents`2<ViewKey, Type> <RegisteredViews>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponentContainer <DefaultParentComponentContainer>k__BackingField;
    protected DictionaryEvents`2<ViewKey, Type> RegisteredViews { get; }
    public IComponentContainer DefaultParentComponentContainer { get; }
    private DictionaryEvents`2<ViewKey, Type> JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisteredViews { get; }
    public AutomationViewsRegistry(ShellPartCatalogSet catalogset, IComponentContainer componentContainer, IEnumerable`1<ICustomAutomationViewsRegistryEntry> customentries, ILogger logger);
    private static AutomationViewsRegistry();
    [CompilerGeneratedAttribute]
protected DictionaryEvents`2<ViewKey, Type> get_RegisteredViews();
    [CompilerGeneratedAttribute]
public sealed virtual IComponentContainer get_DefaultParentComponentContainer();
    private static DictionaryEvents`2<ViewKey, Type> CollectViewsByViewAttributeAndCustomEntries(ShellPartCatalogSet catalogset, IEnumerable`1<ICustomAutomationViewsRegistryEntry> customentries, ILogger logger);
    private sealed virtual override DictionaryEvents`2<ViewKey, Type> JetBrains.Application.UI.Automation.IAutomationViewsRegistry.get_RegisteredViews();
}
public class JetBrains.Application.UI.Automation.CustomAutomationViewsRegistryEntryDelegate : MulticastDelegate {
    public CustomAutomationViewsRegistryEntryDelegate(object object, IntPtr method);
    public virtual void Invoke(Type typeAutomation, Type typeView, ViewKind viewkind);
    public virtual IAsyncResult BeginInvoke(Type typeAutomation, Type typeView, ViewKind viewkind, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("Should not be in the viewmodel. But for now it's used on Rider side.")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Automation.DefaultWinFormsControlViews : object {
    protected IAutomationViewsRegistry AutomationViewsRegistry;
    public DefaultWinFormsControlViews(IAutomationViewsRegistry automationViewsRegistry);
    public virtual IViewModelPresenter CreateWinFormsView(Lifetime lifetime, IAutomation oAutomation);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.Automation.IAutomationViewsRegistry {
    public IComponentContainer DefaultParentComponentContainer { get; }
    [NotNullAttribute]
public DictionaryEvents`2<ViewKey, Type> RegisteredViews { get; }
    public abstract virtual IComponentContainer get_DefaultParentComponentContainer();
    public abstract virtual DictionaryEvents`2<ViewKey, Type> get_RegisteredViews();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Automation.IAutomationViewsRegistryEx : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static TRes TryCreateViewBy(IAutomationViewsRegistry thіs, Lifetime lifetime, IAutomation oAutomation, ViewKind kind, IComponentContainer containerForFactoring);
    [ExtensionAttribute]
[NotNullAttribute]
public static TRes CreateViewBy(IAutomationViewsRegistry thіs, Lifetime lifetime, IAutomation oAutomation, ViewKind kind, IComponentContainer containerForFactoring);
    [ExtensionAttribute]
[NotNullAttribute]
private static TRes CreateView(IAutomationViewsRegistry thіs, Lifetime lifetime, Type typeView, IComponentContainer containerForFactoring, IAutomation oAutomation);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.Automation.ICustomAutomationViewsRegistryEntry {
    public abstract virtual void OnRegister(CustomAutomationViewsRegistryEntryDelegate registrar);
}
public interface JetBrains.Application.UI.Automation.IView {
}
public interface JetBrains.Application.UI.Automation.IView`1 {
}
public interface JetBrains.Application.UI.Automation.IViewModelPresenter {
    public abstract virtual void ShowView();
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.Automation.IView`1")]
public class JetBrains.Application.UI.Automation.ViewAttribute : PartAttribute {
    public ViewKind Kind;
    public ViewAttribute(ViewKind kind);
}
public class JetBrains.Application.UI.Automation.ViewKey : ValueType {
    private Type myAutomationType;
    private ViewKind myViewKind;
    public Type AutomationType { get; }
    public ViewKind ViewKind { get; }
    public ViewKey(Type automationType, ViewKind viewKind);
    public Type get_AutomationType();
    public ViewKind get_ViewKind();
    public sealed virtual bool Equals(ViewKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ViewKey left, ViewKey right);
    public static bool op_Inequality(ViewKey left, ViewKey right);
    public virtual string ToString();
}
public enum JetBrains.Application.UI.Automation.ViewKind : Enum {
    public int value__;
    public static ViewKind Wpf;
    public static ViewKind WindowlessControl;
    public static ViewKind WinForms;
    public static ViewKind OutOfProcess;
    public static ViewKind Unattended;
    public static ViewKind Avalonia;
}
public enum JetBrains.Application.UI.Automation.WindowModality : Enum {
    public int value__;
    public static WindowModality Nonmodal;
    public static WindowModality Modal;
    public static WindowModality ModalThisStack;
}
public static class JetBrains.Application.UI.Automation.WindowModalityDataConstants : object {
    public static DataConstant`1<Boxed`1<WindowModality>> ShowDialogModality;
    private static WindowModalityDataConstants();
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.Aggregator`2 : AggregatorBase`2<TSource, TResult> {
    protected Aggregator`2(IBindableView`1<TSource> sourceCollection);
    protected virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.AggregatorBase`2 : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    private int myState;
    private TResult myValue;
    [CompilerGeneratedAttribute]
private IBindableView`1<TSource> <SourceCollection>k__BackingField;
    private int mySuspendCount;
    protected IBindableView`1<TSource> SourceCollection { get; }
    public bool IsDisposed { get; }
    public bool IsEvaluated { get; }
    public TResult Value { get; public set; }
    public bool IsSuspended { get; }
    protected AggregatorBase`2(IBindableView`1<TSource> sourceCollection);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected IBindableView`1<TSource> get_SourceCollection();
    public sealed virtual bool get_IsDisposed();
    public sealed virtual bool get_IsEvaluated();
    public virtual TResult get_Value();
    public virtual void set_Value(TResult value);
    public sealed virtual void Evaluate();
    protected abstract virtual TResult EvaluateValue();
    protected abstract virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected abstract virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
    private void ReactToCollectionChangedUnsafe(object sender, NotifyCollectionChangedEventArgs e);
    private void ReactToItemPropertyChangedUnsafe(TSource item, string propertyName);
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private void SubscribeToDependency(IDependencyDefinition definition);
    public virtual void Refresh();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual void Dispose();
    public virtual string ToString();
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    [CompilerGeneratedAttribute]
private void <SubscribeToDependency>b__25_0(object _);
    [CompilerGeneratedAttribute]
private void <SubscribeToDependency>b__25_1(object o, string _);
}
public static class JetBrains.Application.UI.BindableLinq.Aggregators.AverageAggregator`1 : object {
}
internal class JetBrains.Application.UI.BindableLinq.Aggregators.CountAggregator`1 : Aggregator`2<TElement, int> {
    public CountAggregator`1(IBindableView`1<TElement> sourceCollection);
    protected virtual int EvaluateValue();
}
internal class JetBrains.Application.UI.BindableLinq.Aggregators.CustomAggregator`2 : Aggregator`2<TSource, TResult> {
    private Func`1<TResult> mySeedGetter;
    private Func`3<TResult, TSource, TResult> myAggregator;
    public CustomAggregator`2(IBindableView`1<TSource> sourceCollection, Func`1<TResult> seed, Func`3<TResult, TSource, TResult> aggregator);
    public CustomAggregator`2(IBindableView`1<TSource> sourceCollection, TResult seed, Func`3<TResult, TSource, TResult> aggregator);
    protected virtual TResult EvaluateValue();
}
internal class JetBrains.Application.UI.BindableLinq.Aggregators.ElementAtAggregator`1 : Aggregator`2<TElement, TElement> {
    private int myIndex;
    public ElementAtAggregator`1(IBindableView`1<TElement> source, int index);
    protected virtual TElement EvaluateValue();
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingAggregator`2 : Aggregator`2<TSource, TResult> {
    [NotNullAttribute]
private IFreeThreadedThrottlingGroupingEvent myRefreshEvent;
    protected FreeThreadedThrottlingAggregator`2(IBindableView`1<TSource> sourceCollection, IFreeThreadedThrottlingGroupingEvent refreshEvent);
    public virtual void Refresh();
    public virtual void RefreshCore();
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingAggregatorWithDefaultValue`2 : FreeThreadedThrottlingAggregator`2<TSource, TResult> {
    public TResult Value { get; public set; }
    protected TResult DefaultValue { get; }
    protected FreeThreadedThrottlingAggregatorWithDefaultValue`2(IBindableView`1<TSource> sourceCollection, IFreeThreadedThrottlingGroupingEvent refreshEvent);
    public virtual TResult get_Value();
    public virtual void set_Value(TResult value);
    protected virtual TResult get_DefaultValue();
    public virtual void RefreshCore();
}
public class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingGroupingEvent : FreeThreadedGroupingEvent {
    private ISync myLock;
    private OrderedHashSet`1<IFreeThreadedThrottlingAggregator> myAggregators;
    private object myAggregatorsSync;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    public IProperty`1<bool> IsBusy { get; }
    public FreeThreadedThrottlingGroupingEvent(Lifetime lifetime, ITaskHost taskHost, GroupingEventProlongation prolongation, TimeSpan waitTime, ISync lock);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsBusy();
    public sealed virtual void FireIncoming(IFreeThreadedThrottlingAggregator aggregator);
    private void RefreshAggregators();
}
[ShellComponentAttribute("16")]
internal class JetBrains.Application.UI.BindableLinq.Aggregators.FreeThreadedThrottlingGroupingEventFactory : object {
    private IThreading myThreading;
    public FreeThreadedThrottlingGroupingEventFactory(IThreading threading);
    public sealed virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, GroupingEventProlongation prolongation, TimeSpan waitTime, ISync lock);
    public sealed virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, ISync lock);
}
public interface JetBrains.Application.UI.BindableLinq.Aggregators.IFreeThreadedThrottlingAggregator {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void RefreshCore();
}
public interface JetBrains.Application.UI.BindableLinq.Aggregators.IFreeThreadedThrottlingGroupingEvent {
    public IProperty`1<bool> IsBusy { get; }
    public abstract virtual IProperty`1<bool> get_IsBusy();
    public abstract virtual void FireIncoming(IFreeThreadedThrottlingAggregator aggregator);
}
public interface JetBrains.Application.UI.BindableLinq.Aggregators.IFreeThreadedThrottlingGroupingEventFactory {
    public abstract virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, GroupingEventProlongation prolongation, TimeSpan waitTime, ISync lock);
    public abstract virtual IFreeThreadedThrottlingGroupingEvent Create(Lifetime lifetime, ISync lock);
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.OptimizableAggregator`2 : AggregatorBase`2<TSource, TResult> {
    protected OptimizableAggregator`2(IBindableView`1<TSource> sourceCollection);
    protected virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected abstract virtual void ReactToAdd(int index, TSource item);
    protected abstract virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected abstract virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected abstract virtual void ReactToRemove(int index, TSource removedItem);
    protected abstract virtual void ReactToReset();
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.OptimizedAggregator`3 : OptimizableAggregator`2<TSource, TResult> {
    private Func`2<TSource, TInterim> myValueSelector;
    private Func`3<TResult, TInterim, TResult> myAddOperation;
    private Func`3<TResult, TInterim, TResult> mySubOperation;
    private Func`1<TResult> mySeedGetter;
    protected OptimizedAggregator`3(IBindableView`1<TSource> sourceCollection, Func`1<TResult> seed, Func`2<TSource, TInterim> valueSelector, Func`3<TResult, TInterim, TResult> addOperation, Func`3<TResult, TInterim, TResult> subOperation);
    protected virtual TResult EvaluateValue();
    protected virtual void ReactToAdd(int index, TSource item);
    protected virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected virtual void ReactToRemove(int index, TSource removedItem);
    protected virtual void ReactToReset();
}
public static class JetBrains.Application.UI.BindableLinq.Aggregators.SumAggregator`1 : object {
}
public abstract class JetBrains.Application.UI.BindableLinq.Aggregators.ThrottlingAggregator`2 : Aggregator`2<TSource, TResult> {
    private GroupingEvent myRefreshEvent;
    private LifetimeDefinition myLifetime;
    protected ThrottlingAggregator`2(Lifetime lifetime, IBindableView`1<TSource> sourceCollection, GroupingEventHosts hosts, TimeSpan updateInternal, Rgc guarding);
    public virtual void Dispose();
    public virtual void Refresh();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class JetBrains.Application.UI.BindableLinq.Aggregators.ThrottlingSumAggregator`1 : ThrottlingAggregator`2<TSource, int> {
    [NotNullAttribute]
private Func`2<TSource, int> myValueSelector;
    [NotNullAttribute]
private Func`1<bool> myCheckingValidator;
    public ThrottlingSumAggregator`1(Lifetime lifetime, IBindableView`1<TSource> sourceCollection, Func`2<TSource, int> valueSelector, Func`1<bool> checkingValidator, GroupingEventHosts hosts, TimeSpan updateInternal, Rgc guarding);
    protected virtual int EvaluateValue();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.BindableCollection`1 : BindableCollectionBase`1<T> {
    private List`1<T> myItems;
    protected IEnumerable`1<T> Items { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public T Item { get; public set; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public BindableCollection`1(IEnumerable`1<T> items);
    public BindableCollection`1(ISync readLock);
    public BindableCollection`1(ReadWriteLock readWriteLock);
    public BindableCollection`1(IEnumerable`1<T> items, ISync readLock, ISync writeLock);
    private BindableCollection`1(List`1<T> items, ISync readLock, ISync writeLock);
    protected virtual IEnumerable`1<T> get_Items();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public T GetItemUnsafe(int index);
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(T item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Remove(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    public sealed virtual bool Contains(T item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int index);
    protected void CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    public sealed virtual void Add(T item);
    public void AddRange(IEnumerable`1<T> items);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual void Insert(int index, T item);
    public void Replace(int index, T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public virtual string ToString();
}
public abstract class JetBrains.Application.UI.BindableLinq.Collections.BindableCollectionBase`1 : object {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private SimpleMonitor<T> myMonitor;
    private ISync myReadLock;
    private ISync myWriteLock;
    public ISync Lock { get; }
    protected IEnumerable`1<T> Items { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    protected BindableCollectionBase`1(ISync readLock, ISync writeLock);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual ISync get_Lock();
    protected abstract virtual IEnumerable`1<T> get_Items();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumeratorUnsafe();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    public virtual void Dispose();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnCollectionChanging(NotifyCollectionChangedEventArgs e);
    protected IDisposable BlockReentrancy();
    protected SyncLockCookie ReadLock();
    protected virtual IDisposable WriteLock();
    protected virtual void CheckReentrancy();
}
public class JetBrains.Application.UI.BindableLinq.Collections.BindableHashSet`1 : JetHashSet`1<TElement> {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private ISync myReadLock;
    private ISync myWriteLock;
    private SimpleMonitor<TElement> myMonitor;
    private List`1<TElement> myList;
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public ISync Lock { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    private TElement JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<TElement>.Item { get; }
    public BindableHashSet`1(IEqualityComparer`1<TElement> comparer);
    public BindableHashSet`1(IEqualityComparer`1<TElement> comparer, ISync readLock);
    public BindableHashSet`1(ISync readLock);
    public BindableHashSet`1(ISync readLock, ISync writeLock);
    public BindableHashSet`1(IEnumerable`1<TElement> items);
    public BindableHashSet`1(IEnumerable`1<TElement> items, ISync readLock);
    public BindableHashSet`1(IEnumerable`1<TElement> items, ISync readLock, ISync writeLock);
    public BindableHashSet`1(IEnumerable`1<TElement> items, IEqualityComparer`1<TElement> comparer, ISync readLock, ISync writeLock);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual ISync get_Lock();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator`1<TElement> GetEnumerator();
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
    public virtual bool Add(TElement element);
    public virtual bool Remove(TElement element);
    public virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<TElement> items);
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    private SyncLockCookie WriteLock();
    private SyncLockCookie ReadLock();
    protected IDisposable BlockReentrancy();
    protected void CheckReentrancy();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override TElement JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView<TElement>.get_Item(int index);
    public sealed virtual int IndexOf(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Add(object value);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Remove(object value);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    [CompilerGeneratedAttribute]
private IEnumerator`1<TElement> <GetEnumerator>b__31_0();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.BindableSetCollectionWithoutIndexTracking`1 : BindableCollectionBase`1<T> {
    private HashSet`1<T> myItems;
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    protected IEnumerable`1<T> Items { get; }
    public T Item { get; }
    public BindableSetCollectionWithoutIndexTracking`1(ISync readLock);
    public BindableSetCollectionWithoutIndexTracking`1(IEqualityComparer`1<T> comparer);
    public BindableSetCollectionWithoutIndexTracking`1(IEnumerable`1<T> items);
    public BindableSetCollectionWithoutIndexTracking`1(IEnumerable`1<T> items, ISync readLock);
    public BindableSetCollectionWithoutIndexTracking`1(ISync readLock, IEqualityComparer`1<T> equalityComparer);
    public BindableSetCollectionWithoutIndexTracking`1(IEnumerable`1<T> items, ISync readLock, ISync writeLock, IEqualityComparer`1<T> equalityComparer);
    private BindableSetCollectionWithoutIndexTracking`1(HashSet`1<T> items, ISync readLock, ISync writeLock);
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    protected virtual IEnumerable`1<T> get_Items();
    public bool Add(T item);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public void AddRange(IEnumerable`1<T> items);
    public sealed virtual bool Remove(T item);
    public void RemoveRange(IEnumerable`1<T> items);
    public sealed virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual int IndexOf(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Add(object value);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Remove(object value);
    public sealed virtual bool Contains(object item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual T get_Item(int index);
    [CompilerGeneratedAttribute]
private bool <Reset>b__25_1(T i);
}
public class JetBrains.Application.UI.BindableLinq.Collections.EmptyBindableCollection`1 : EmptyList`1<TElement> {
    [NotNullAttribute]
public static EmptyBindableCollection`1<TElement> Instance;
    private ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    private static EmptyBindableCollection`1();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.IndexOf(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Add(object value);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Remove(object value);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    private sealed virtual override ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual void Reset(IEnumerable`1<TElement> items);
    public void Replace(int index, TElement item);
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
}
[EditorBrowsableAttribute("1")]
public class JetBrains.Application.UI.BindableLinq.Collections.FakeBindableList`1 : List`1<TElement> {
    private ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    public FakeBindableList`1(IEnumerable`1<TElement> items);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private sealed virtual override int JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.IndexOf(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Add(object value);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Remove(object value);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.Contains(object item);
    private sealed virtual override ISync JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual void Reset(IEnumerable`1<TElement> items);
    public void Replace(int index, TElement item);
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
}
public static class JetBrains.Application.UI.BindableLinq.Collections.LockingEnumerator : object {
    [NotNullAttribute]
public static IEnumerator`1<T> From(IEnumerable`1<T> enumerable, ISync lock);
    [NotNullAttribute]
public static IEnumerator`1<T> From(Func`1<IEnumerator`1<T>> factory, ISync lock);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.ReadOnlyBindableCollectionProxy`1 : object {
    [NotNullAttribute]
private IBindableView`1<T> myInner;
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T Item { get; }
    public ReadOnlyBindableCollectionProxy`1(IBindableView`1<T> inner);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual ISync get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual int IndexOf(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Add(object value);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Remove(object value);
    public sealed virtual bool Contains(object item);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual T get_Item(int index);
    public sealed virtual IEnumerator`1<T> GetEnumeratorUnsafe();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Collections.SortedBindableCollection`1 : BindableCollectionBase`1<T> {
    private List`1<T> myItems;
    private IComparer`1<T> myComparer;
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    protected IEnumerable`1<T> Items { get; }
    public T Item { get; }
    public SortedBindableCollection`1(IComparer`1<T> comparer);
    public SortedBindableCollection`1(IEnumerable`1<T> items, IComparer`1<T> comparer);
    public SortedBindableCollection`1(IEnumerable`1<T> items, IComparer`1<T> comparer, ISync readLock, ISync writeLock);
    private SortedBindableCollection`1(List`1<T> items, IComparer`1<T> comparer, ISync readLock, ISync writeLock);
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    protected virtual IEnumerable`1<T> get_Items();
    private int BinarySearch(T item);
    public sealed virtual void Add(T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual void Reset(IEnumerable`1<T> items);
    public sealed virtual int IndexOf(object item);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Add(object value);
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection.Remove(object value);
    public sealed virtual bool Contains(object item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual T get_Item(int index);
}
public class JetBrains.Application.UI.BindableLinq.Collections.SyncLockCookie : ValueType {
    private ISync myLock;
    public SyncLockCookie(ISync lock);
    public sealed virtual void Dispose();
}
public static class JetBrains.Application.UI.BindableLinq.CommonEventArgsCache : object {
    [NotNullAttribute]
public static PropertyChangedEventArgs Count;
    [NotNullAttribute]
public static PropertyChangedEventArgs Item;
    [NotNullAttribute]
public static PropertyChangedEventArgs Value;
    [NotNullAttribute]
public static PropertyChangedEventArgs Children;
    [NotNullAttribute]
public static PropertyChangedEventArgs IsEvaluated;
    [NotNullAttribute]
public static PropertyChangedEventArgs HasChildren;
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Reset;
    private static CommonEventArgsCache();
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Add(object item);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Add(object item, int idx);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Add(IEnumerable`1<T> items);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Add(IEnumerable`1<T> items, int idx);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Remove(object item);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Remove(object item, int idx);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Remove(IEnumerable`1<T> items);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Remove(IEnumerable`1<T> items, int idx);
    [NotNullAttribute]
public static NotifyCollectionChangedEventArgs Resett(IEnumerable`1<T> oldItems, IEnumerable`1<T> newItems);
}
public static class JetBrains.Application.UI.BindableLinq.Configuration.BindingConfigurations : object {
    private static IBindingConfiguration ourDefault;
    private static IBindingConfiguration ourExplicitDependenciesOnly;
    public static IBindingConfiguration Default { get; }
    public static IBindingConfiguration ExplicitDependenciesOnly { get; }
    private static BindingConfigurations();
    public static IBindingConfiguration get_Default();
    public static IBindingConfiguration get_ExplicitDependenciesOnly();
}
internal class JetBrains.Application.UI.BindableLinq.Configuration.DefaultBindingConfiguration : object {
    private IExpressionAnalyzer myExpressionAnalyzer;
    private IPathNavigator myPathNavigator;
    public sealed virtual IExpressionAnalyzer CreateExpressionAnalyzer();
    public sealed virtual IPathNavigator CreatePathNavigator();
}
internal class JetBrains.Application.UI.BindableLinq.Configuration.ExplicitBindingConfiguration : object {
    private IExpressionAnalyzer myExpressionAnalyzer;
    private IPathNavigator myPathNavigator;
    public sealed virtual IExpressionAnalyzer CreateExpressionAnalyzer();
    public sealed virtual IPathNavigator CreatePathNavigator();
}
public interface JetBrains.Application.UI.BindableLinq.Configuration.IBindingConfiguration {
    public abstract virtual IExpressionAnalyzer CreateExpressionAnalyzer();
    public abstract virtual IPathNavigator CreatePathNavigator();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.DataFlow.Bindable : object {
    [NotNullAttribute]
public static IBindable`1<TResult> QuickFrom(Func`1<TResult> valueProvider);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> Select(IBindable`1<T> root, Func`2<T, TResult> selector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<T> ObserveOn(IBindable`1<T> root, Lifetime lifetime, Dispatcher dispatcher);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.DataFlow.BindableExtensions : object {
    [ExtensionAttribute]
public static void Advise_NoAcknowledgement(IBindable`1<T> source, Lifetime lifetime, Action`1<T> handler);
    [ExtensionAttribute]
public static void Advise(IBindable`1<T> source, Lifetime lifetime, Action`1<T> handler);
    [ExtensionAttribute]
public static void FlowInto(IBindable`1<T> source, Lifetime lifetime, IProperty`1<T> target);
    [ExtensionAttribute]
public static void FlowInto(IBindable`1<T> source, Lifetime lifetime, IBindable`1<T> target);
    [ExtensionAttribute]
public static void FlowInto(IBindable`1<TSource> source, Lifetime lifetime, IBindable`1<TResult> target, Func`2<TSource, TResult> converter);
    [ExtensionAttribute]
public static void FlowInto_NoAcknowledgement(IBindable`1<TSource> source, Lifetime lifetime, IProperty`1<TResult> target, Func`2<TSource, TResult> converter);
    [ExtensionAttribute]
public static void FlowInto(IBindable`1<TSource> source, Lifetime lifetime, IProperty`1<TResult> target, Func`2<TSource, TResult> converter);
    [ExtensionAttribute]
public static void FlowInto(IProperty`1<T> source, Lifetime lifetime, IBindable`1<T> target);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<T> ToProperty(IBindable`1<T> bindable, Lifetime lifetime);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<T> ToBindable(IProperty`1<T> property, Lifetime lifetime);
    [ExtensionAttribute]
[NotNullAttribute]
public static ISignal`1<IReadOnlyList`1<T>> ToSignal(IBindableView`1<T> bindable, Lifetime lifetime);
}
public class JetBrains.Application.UI.BindableLinq.DataFlow.MultiBindingValue`2 : object {
    [NotNullAttribute]
private IBindable`1[] myBindables;
    private Func`2<IBindable`1[], TOut> myOutput;
    private TOut myValue;
    private int myState;
    private int mySuspendCount;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool IsEvaluated { get; }
    public bool IsSuspended { get; }
    public TOut Value { get; public set; }
    public MultiBindingValue`2(Func`2<IBindable`1[], TOut> output, IBindable`1<TItem> item1, IBindable`1<TItem> item2, IBindable`1[] itemn);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void Dispose();
    public virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual bool get_IsEvaluated();
    public virtual void Evaluate();
    protected virtual void ReactToPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    private void ReactToPropertyChangedUnsafe(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    public virtual void Refresh();
    protected virtual TOut EvaluateValue();
    public sealed virtual TOut get_Value();
    public sealed virtual void set_Value(TOut value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
}
public class JetBrains.Application.UI.BindableLinq.DataFlow.ThrottlingMultiBindingValue`2 : MultiBindingValue`2<TItem, TOut> {
    private LifetimeDefinition myLifetime;
    private IGroupingEvent myRefreshEvent;
    public ThrottlingMultiBindingValue`2(Lifetime lifetime, IGroupingEventFactory groupingEventFactory, Func`2<IBindable`1[], TOut> output, IBindable`1<TItem> item1, IBindable`1<TItem> item2, IBindable`1[] itemn);
    protected virtual void ReactToPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    public virtual void Dispose();
    public virtual void Refresh();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public class JetBrains.Application.UI.BindableLinq.DataFlow.VolatileValueProvider`1 : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private Func`1<TValue> myValueProvider;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    private TValue myValue;
    private int myState;
    private int mySuspendCount;
    public bool IsEvaluated { get; }
    public TValue Value { get; public set; }
    public bool IsSuspended { get; }
    public VolatileValueProvider`1(Func`1<TValue> valueProvider);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual TValue get_Value();
    public sealed virtual void set_Value(TValue value);
    public sealed virtual void Evaluate();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public void Refresh();
    protected virtual void CalculateAndSetValue();
    public sealed virtual void Dispose();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual string ToString();
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    [CompilerGeneratedAttribute]
private void <AcceptDependency>b__15_0(object _);
    [CompilerGeneratedAttribute]
private void <AcceptDependency>b__15_1(object _, string _);
}
internal class JetBrains.Application.UI.BindableLinq.DefaultComparer`1 : object {
    public sealed virtual int Compare(TCompared left, TCompared right);
    public sealed virtual bool Equals(TCompared x, TCompared y);
    public sealed virtual int GetHashCode(TCompared obj);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Definitions.ExternalDependencyDefinition : object {
    [CompilerGeneratedAttribute]
private string <PropertyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TargetObject>k__BackingField;
    public string PropertyPath { get; public set; }
    public object TargetObject { get; public set; }
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public ExternalDependencyDefinition(string propertyPath, object targetObject);
    [CompilerGeneratedAttribute]
public string get_PropertyPath();
    [CompilerGeneratedAttribute]
public void set_PropertyPath(string value);
    [CompilerGeneratedAttribute]
public object get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(object value);
    public sealed virtual bool get_AppliesToCollections();
    public sealed virtual bool get_AppliesToSingleElement();
    public sealed virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public sealed virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
    public virtual string ToString();
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Definitions.ItemDependencyDefinition : object {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyPath>k__BackingField;
    [CanBeNullAttribute]
public string ParameterName { get; public set; }
    public string PropertyPath { get; public set; }
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public ItemDependencyDefinition(string propertyPath);
    public ItemDependencyDefinition(string propertyPath, string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyPath();
    [CompilerGeneratedAttribute]
public void set_PropertyPath(string value);
    public sealed virtual bool get_AppliesToCollections();
    public sealed virtual bool get_AppliesToSingleElement();
    public sealed virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public sealed virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
    public virtual string ToString();
}
public static class JetBrains.Application.UI.BindableLinq.Dependencies.Dependency : object {
    [NotNullAttribute]
public static IDependencyDefinition FromProperty(IProperty`1<TValue> property);
    [NotNullAttribute]
public static IDependencyDefinition FromProperty(IProperty`1<TValue> property, ISync underLock);
    [NotNullAttribute]
public static IDependencyDefinition FromBindable(IBindable`1<TValue> bindable);
    [NotNullAttribute]
public static IDependencyDefinition FromSignal(ISignal`1<TValue> signal);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.Dependencies.DependencyExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDependency SetElementCallback(IDependency dependency, Action`2<object, string> action);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDependency SetCallback(IDependency dependency, Action`1<object> action);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.DummyDependency : object {
    [NotNullAttribute]
public static IDependency Instance;
    private static DummyDependency();
    public sealed virtual void Dispose();
    public sealed virtual void SetReevaluateElementCallback(Action`2<object, string> action);
    public sealed virtual void SetReevaluateCallback(Action`1<object> action);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.ExpressionAnalyzer : object {
    private static IEqualityComparer`1<IDependencyDefinition> ourComparer;
    private IDependencyExtractor[] myExtractors;
    public ExpressionAnalyzer(IDependencyExtractor[] extractors);
    private static ExpressionAnalyzer();
    public sealed virtual IEnumerable`1<IDependencyDefinition> DiscoverDependencies(Expression expression, ParameterExpression itemParameter);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.ExpressionFlattener : object {
    private List`1<Expression> myExpressions;
    private ExpressionType[] myStopAt;
    public IEnumerable`1<Expression> Expressions { get; }
    public ExpressionFlattener(Expression expression, ExpressionType[] stopAt);
    public IEnumerable`1<Expression> get_Expressions();
    private void TraverseExpressions(IEnumerable expressions);
    private void TraverseExpression(Expression expression);
    private void TraverseBinaryExpression(BinaryExpression binaryExpression);
    private void TraverseConditionalExpression(ConditionalExpression conditionalExpression);
    private void TraverseConstantExpression(ConstantExpression constantExpression);
    private void TraverseInvocationExpression(InvocationExpression invocationExpression);
    private void TraverseLambdaExpression(LambdaExpression lambdaExpression);
    private void TraverseListInitExpression(ListInitExpression listInitExpression);
    private void TraverseMemberExpression(MemberExpression memberExpression);
    private void TraverseMemberInitExpression(MemberInitExpression memberInitExpression);
    private void TraverseMethodCallExpression(MethodCallExpression methodCallExpression);
    private void TraverseNewArrayExpression(NewArrayExpression newArrayExpression);
    private void TraverseNewExpression(NewExpression newExpression);
    private void TraverseParameterExpression(ParameterExpression parameterExpression);
    private void TraverseTypeBinaryExpression(TypeBinaryExpression typeBinaryExpression);
    private void TraverseUnaryExpression(UnaryExpression unaryExpression);
}
internal abstract class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.DependencyExtractor : object {
    public sealed virtual IEnumerable`1<IDependencyDefinition> Extract(Expression expression);
    protected abstract virtual IDependencyDefinition ExtractFromRoot(Expression rootExpression, string propertyPath);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.ExternalDependencyExtractor : DependencyExtractor {
    protected virtual IDependencyDefinition ExtractFromRoot(Expression rootExpression, string propertyPath);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.IDependencyExtractor {
    public abstract virtual IEnumerable`1<IDependencyDefinition> Extract(Expression expression);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.ItemDependencyExtractor : DependencyExtractor {
    protected virtual IDependencyDefinition ExtractFromRoot(Expression rootExpression, string propertyPath);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.IExpressionAnalyzer {
    public abstract virtual IEnumerable`1<IDependencyDefinition> DiscoverDependencies(Expression expression, ParameterExpression itemParameter);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies {
    public abstract virtual void AcceptDependency(IDependencyDefinition definition);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.IDependency {
    public abstract virtual void SetReevaluateElementCallback(Action`2<object, string> action);
    public abstract virtual void SetReevaluateCallback(Action`1<object> action);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.IDependencyDefinition {
    public bool AppliesToCollections { get; }
    public bool AppliesToSingleElement { get; }
    public abstract virtual bool get_AppliesToCollections();
    public abstract virtual bool get_AppliesToSingleElement();
    public abstract virtual IDependency ConstructForCollection(IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    public abstract virtual IDependency ConstructForElement(TElement sourceElement, IPathNavigator pathNavigator);
}
public static class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.Actioner : object {
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, Action handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, Action`1<string> handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(T item, Expression`1<Func`2<T, TProperty>> reference, Action handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(T item, Expression`1<Func`2<T, TProperty>> reference, Action`1<string> handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, string propertyName, Action handler, bool executeImmediately);
    [NotNullAttribute]
public static IDisposable Create(INotifyPropertyChanged item, string propertyName, Action`1<string> handler, bool executeImmediately);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ElementActioner`1 : ElementActionerBase`1<TElement> {
    private Action`1<TElement> myAddAction;
    private Action`1<TElement> myRemoveAction;
    private Action`2<IEnumerable`1<TElement>, IEnumerable`1<TElement>> myResetAction;
    private static ConstructorInfo ourElementActionerCtor;
    private ElementActioner`1(IBindableView`1<TElement> collection, Action`1<TElement> addAction, Action`1<TElement> removeAction, Action`2<IEnumerable`1<TElement>, IEnumerable`1<TElement>> resetAction, bool handleRemoveOnDispose);
    private static ElementActioner`1();
    public static ElementActioner`1<TElement> Create(IBindableView`1<TElement> collection, Action`1<TElement> addAction, Action`1<TElement> removeAction, Action`2<IEnumerable`1<TElement>, IEnumerable`1<TElement>> resetAction, bool handleRemoveOnDispose, bool handleAddOnInit);
    public static ElementActioner`1<TElement> CreateUninitializedObject(IBindableView`1<TElement> collection, Action`1<TElement> addAction, Action`1<TElement> removeAction, bool handleRemoveOnDispose, bool handleAddOnInit);
    protected virtual void HandleAdd(IEnumerable newItems);
    protected virtual void HandleRemove(IEnumerable oldItems);
    protected virtual void HandleReset(IEnumerable oldItems, IEnumerable newItems);
}
public abstract class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ElementActionerBase`1 : object {
    protected IBindableView`1<TElement> myCollection;
    private bool myHandleRemoveOnDispose;
    private int myIsDisposed;
    protected ElementActionerBase`1(IBindableView`1<TElement> collection, bool handleRemoveOnDispose);
    protected abstract virtual void HandleAdd(IEnumerable newItems);
    protected abstract virtual void HandleRemove(IEnumerable oldItems);
    protected abstract virtual void HandleReset(IEnumerable oldItems, IEnumerable newItems);
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ElementCollectionActioner`1 : ElementActionerBase`1<TElement> {
    private Action`1<IEnumerable`1<TElement>> myAddAction;
    private Action`1<IEnumerable`1<TElement>> myRemoveAction;
    private Action`2<IEnumerable`1<TElement>, IEnumerable`1<TElement>> myResetAction;
    private ElementCollectionActioner`1(IBindableView`1<TElement> collection, Action`1<IEnumerable`1<TElement>> addAction, Action`1<IEnumerable`1<TElement>> removeAction, Action`2<IEnumerable`1<TElement>, IEnumerable`1<TElement>> resetAction, bool handleRemoveOnDispose);
    public static ElementCollectionActioner`1<TElement> Create(IBindableView`1<TElement> collection, Action`1<IEnumerable`1<TElement>> addAction, Action`1<IEnumerable`1<TElement>> removeAction, Action`2<IEnumerable`1<TElement>, IEnumerable`1<TElement>> resetAction, bool handleRemoveOnDispose, bool handleAddOnInit);
    protected virtual void HandleAdd(IEnumerable newItems);
    protected virtual void HandleRemove(IEnumerable oldItems);
    protected virtual void HandleReset(IEnumerable oldItems, IEnumerable newItems);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ExternalDependency : object {
    private IToken myRootMonitor;
    private Action`1<object> myElementChangedCallback;
    public ExternalDependency(object targetObject, string propertyPath, IPathNavigator pathNavigator);
    public sealed virtual void SetReevaluateElementCallback(Action`2<object, string> action);
    public sealed virtual void SetReevaluateCallback(Action`1<object> action);
    public sealed virtual void Dispose();
    private void Element_PropertyChanged(object element, string propertyPath);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ItemActioner`1 : object {
    private ElementActioner`1<T> myInner;
    private Action`1<T> myOnAdded;
    private Action`2<T, string> myOnChanged;
    private Action`1<T> myOnRemoved;
    private void OnItemAdded(T item);
    private void OnItemRemoved(T item);
    private void OnItemChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual void Dispose();
    public IDisposable ForCollection(IBindableView`1<T> collection, bool addOnInit, bool removeOnDispose);
    public ItemActioner`1<T> OnItemAdded(Action action);
    public ItemActioner`1<T> OnItemAdded(Action`1<T> action);
    public ItemActioner`1<T> OnItemRemoved(Action action);
    public ItemActioner`1<T> OnItemRemoved(Action`1<T> action);
    public ItemActioner`1<T> OnItemChanged(Action action, string property);
    public ItemActioner`1<T> OnItemChanged(Action`1<T> action, string property);
    public ItemActioner`1<T> OnItemChanged(Action`2<T, string> action, string property);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.Instances.ItemDependency`1 : object {
    private ElementActioner`1<TElement> myActioner;
    private object mySyncRoot;
    private IPathNavigator myPathNavigator;
    private string myPropertyPath;
    private Dictionary`2<TElement, IToken> mySourceElementObservers;
    private Action`2<object, string> myReevaluateElementCallback;
    public ItemDependency`1(string propertyPath, IBindableView`1<TElement> sourceElements, IPathNavigator pathNavigator);
    private void AddItem(TElement addedItem);
    private void RemoveItem(TElement removedItem);
    private void Element_PropertyChanged(object element, string propertyPath);
    public sealed virtual void SetReevaluateElementCallback(Action`2<object, string> action);
    public sealed virtual void SetReevaluateCallback(Action`1<object> action);
    public sealed virtual void Dispose();
}
public static class JetBrains.Application.UI.BindableLinq.Dependencies.ItemDependency : object {
    public static IDependencyDefinition FromProperty(Expression`1<Func`2<T, object>> reference);
    public static IDependencyDefinition FromBindable(Expression`1<Func`2<T, IBindable>> reference);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPathNavigator {
    public abstract virtual IToken TraverseNext(object target, string propertyPath, Action`2<object, string> callback);
}
internal interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPropertyReader`1 {
    public abstract virtual TCast GetValue(object input);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.PathNavigator : object {
    private ITokenFactory[] myTraversers;
    public PathNavigator(ITokenFactory[] traversers);
    public sealed virtual IToken TraverseNext(object target, string propertyPath, Action`2<object, string> callback);
}
internal static class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.PropertyReaderFactory : object {
    private static ConcurrentDictionary`2<string, object> ourReaders;
    private static PropertyReaderFactory();
    public static IPropertyReader`1<TCast> Create(Type objectType, string propertyName);
    private static object CreateReader(Type objectType, string propertyName, string key);
    private static object TryCreateFieldReader(Type objectType, string propertyName, string key);
    private static object TryCreatePropertyReader(Type objectType, string propertyName, string key);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.ClrMemberTokenFactory : object {
    public sealed virtual IToken ParseNext(object target, string propertyPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.ITokenFactory {
    public abstract virtual IToken ParseNext(object target, string propertyPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
}
public class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.WpfMemberTokenFactory : object {
    public sealed virtual IToken ParseNext(object target, string propertyPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.ClrMemberToken : MemberToken {
    private EventHandler`1<PropertyChangedEventArgs> myActualHandler;
    private WeakEventProxy`1<PropertyChangedEventArgs> myWeakHandler;
    private PropertyChangedEventHandler myWeakHandlerWrapper;
    private IPropertyReader`1<object> myPropertyReader;
    public ClrMemberToken(object objectToObserve, string propertyName, string remainingPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
    protected virtual void DiscardCurrentTargetOverride();
    protected virtual void MonitorCurrentTargetOverride();
    protected virtual object ReadCurrentPropertyValueOverride();
    private void CurrentTarget_PropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void DisposeOverride();
}
public interface JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.IToken {
    public IToken NextToken { get; }
    public abstract virtual IToken get_NextToken();
    public abstract virtual void AcquireTarget(object target);
}
internal abstract class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken : object {
    private Action`2<object, string> myChangeDetectedCallback;
    private IPathNavigator myPathNavigator;
    private object myPropertyMonitorLock;
    private string myPropertyName;
    private string myRemainingPath;
    private object myCurrentTarget;
    private IToken myNextMonitor;
    public string RemainingPath { get; }
    public string PropertyName { get; }
    protected object CurrentTarget { get; }
    protected object PropertyMonitorLock { get; }
    protected IPathNavigator PathNavigator { get; }
    public IToken NextToken { get; private set; }
    protected MemberToken(string propertyName, string remainingPath, Action`2<object, string> changeDetectedCallback, IPathNavigator traverser);
    public string get_RemainingPath();
    public string get_PropertyName();
    protected object get_CurrentTarget();
    protected object get_PropertyMonitorLock();
    protected IPathNavigator get_PathNavigator();
    public sealed virtual IToken get_NextToken();
    private void set_NextToken(IToken value);
    public sealed virtual void AcquireTarget(object target);
    public sealed virtual void Dispose();
    protected abstract virtual void DiscardCurrentTargetOverride();
    protected abstract virtual void MonitorCurrentTargetOverride();
    protected abstract virtual object ReadCurrentPropertyValueOverride();
    private void NextMonitor_ChangeDetected(object changedObject, string propertyName);
    protected void HandleCurrentTargetPropertyValueChanged();
    private void ChangeDetected(string propertyName);
    protected abstract virtual void DisposeOverride();
}
internal class JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.WpfMemberToken : MemberToken {
    private DependencyProperty myDependencyProperty;
    public WpfMemberToken(DependencyObject objectToObserve, DependencyProperty dependencyProperty, string propertyName, string remainingPath, Action`2<object, string> callback, IPathNavigator pathNavigator);
    protected virtual void DiscardCurrentTargetOverride();
    protected virtual void MonitorCurrentTargetOverride();
    protected virtual object ReadCurrentPropertyValueOverride();
    public void CurrentTarget_PropertyChanged(object sender, EventArgs e);
    protected virtual void DisposeOverride();
}
public enum JetBrains.Application.UI.BindableLinq.DependencyDiscovery : Enum {
    public int value__;
    public static DependencyDiscovery Enabled;
    public static DependencyDiscovery Disabled;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.Extensions.BindableEnumerable : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, TResult seed, Expression`1<Func`3<TResult, TSource, TResult>> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`1<TResult>> seed, Expression`1<Func`3<TResult, TSource, TResult>> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, TResult seed, Expression`1<Func`3<TResult, TSource, TResult>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> Aggregate(IBindableView`1<TSource> source, Expression`1<Func`1<TResult>> seed, Expression`1<Func`3<TResult, TSource, TResult>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> QuickAggregate(IBindableView`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> QuickAggregate(IBindableView`1<TSource> source, TResult seed, Func`3<TResult, TSource, TResult> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TResult> QuickAggregate(IBindableView`1<TSource> source, Func`1<TResult> seed, Func`3<TResult, TSource, TResult> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<double> Average(IBindableView`1<TSource> source, Func`2<TSource, double> valueSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> Count(IBindableView`1<TSource> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> Count(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> Count(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> ElementAtOrDefault(IBindableView`1<TSource> source, int index);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> FirstOrDefault(IBindableView`1<TSource> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TSource> FirstOrDefault(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, int>> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, int>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TimeSpan> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TimeSpan>> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TimeSpan> Sum(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TimeSpan>> func, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<int> QuickSum(IBindableView`1<TSource> source, Func`2<TSource, int> func);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindable`1<TimeSpan> QuickSum(IBindableView`1<TSource> source, Func`2<TSource, TimeSpan> func);
    [ExtensionAttribute]
public static TResult DependsOn(TResult query, Expression`1<Func`2<TElement, TProperty>> expression);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, Expression expression, ParameterExpression itemParameter);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, object externalObject, string propertyPath);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, DependencyObject dependencyObject, DependencyProperty dependencyProperty);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, string propertyPath);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, IDependencyDefinition definition);
    [ExtensionAttribute]
[NotNullAttribute]
public static TResult DependsOn(TResult query, IEnumerable`1<IDependencyDefinition> definitions);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Cast(IBindableView`1<TSource> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> Distinct(IBindableView`1<TSource> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Distinct(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Distinct(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> QuickDistinct(IBindableView`1<TSource> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> QuickDistinct(IBindableView`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> ForEach(IBindableView`1<TSource> source, Action`1<TSource> evaluateOnEachItem);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TSource>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<IBindableGrouping`2<TKey, TElement>> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IBindableView`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> GroupBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Into(IBindableView`1<IBindableGrouping`2<TKey, TElement>> source, Expression`1<Func`3<TKey, IBindableView`1<TElement>, TResult>> resultSelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> ObserveOn(IBindableView`1<TSource> source, Dispatcher dispatcher);
    [ExtensionAttribute]
[NotNullAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IOrderedBindableView`1<TSource> OrderBy(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IOrderedBindableView`1<TSource> QuickOrderBy(IBindableView`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> QuickOrderByWhere(IBindableView`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Select(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> Select(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TResult> QuickSelect(IBindableView`1<TSource> source, Func`2<TSource, TResult> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> Skip(IBindableView`1<TSource> source, int count);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> Where(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> Where(IBindableView`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, DependencyDiscovery dependencyAnalysisMode);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> QuickWhere(IBindableView`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> QuickWhereWithoutIndexTracking(IBindableView`1<TSource> source, Func`2<TSource, bool> predicate);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.Extensions.Extensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableView`1<TSource> GetRef(IBindableView`1<TSource> source);
    [ExtensionAttribute]
[NotNullAttribute]
public static T WithLifetime(T source, Lifetime lifetime);
    [ExtensionAttribute]
public static int IndexOf(IBindableView`1<T> list, T item, IEqualityComparer`1<T> comparer, int startSearchFromElement, int howManyElementsToSearch);
    [ExtensionAttribute]
[NotNullAttribute]
public static IBindableCollection`1<T> AsReadOnlyCollection(IBindableView`1<T> view);
    [ExtensionAttribute]
[NotNullAttribute]
public static IListEvents`1<T> AsListEvents(IBindableView`1<T> view, Lifetime lifetime);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.BindableLinq.Helpers.Utils : object {
    [ExtensionAttribute]
public static void BindTwoWay(IBindable`1<T> point1, Lifetime lifetime, IProperty`1<T> point2);
    [ExtensionAttribute]
public static void BindTwoWay(IBindable`1<T1> point1, Lifetime lifetime, IProperty`1<T2> point2, Func`2<T1, T2> convertTo, Func`2<T2, T1> convertFrom);
}
internal class JetBrains.Application.UI.BindableLinq.Helpers.Weak : object {
    public static WeakEvent`1<TEventArgs> Event(EventHandler`1<TEventArgs> eventHandler);
}
internal class JetBrains.Application.UI.BindableLinq.Helpers.WeakEvent`1 : object {
    private EventHandler`1<TEventArgs> myOriginalHandler;
    private WeakEventProxy`1<TEventArgs> myWeakProxy;
    public WeakEventProxy`1<TEventArgs> HandlerProxy { get; }
    public WeakEvent`1(EventHandler`1<TEventArgs> originalHandler);
    public WeakEventProxy`1<TEventArgs> get_HandlerProxy();
}
internal class JetBrains.Application.UI.BindableLinq.Helpers.WeakEventProxy`1 : object {
    private WeakReference myCallbackReference;
    public WeakEventProxy`1(EventHandler`1<TEventArgs> callback);
    public void Handler(object sender, TEventArgs e);
}
public class JetBrains.Application.UI.BindableLinq.Interfaces.BindableConstant`1 : object {
    private TValue myValue;
    public bool IsEvaluated { get; }
    public bool IsSuspended { get; }
    public TValue Value { get; public set; }
    public BindableConstant`1(TValue value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Evaluate();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    public sealed virtual TValue get_Value();
    public sealed virtual void set_Value(TValue value);
}
public class JetBrains.Application.UI.BindableLinq.Interfaces.BindableProperty`1 : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private TValue myValue;
    private int mySuspendCount;
    public TValue Value { get; public set; }
    private bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.IsEvaluated { get; }
    public bool IsSuspended { get; }
    public BindableProperty`1(TValue value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual TValue get_Value();
    public sealed virtual void set_Value(TValue value);
    private sealed virtual override bool JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.get_IsEvaluated();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Interfaces.IBindable.Evaluate();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void JetBrains.Application.UI.BindableLinq.Dependencies.IAcceptsDependencies.AcceptDependency(IDependencyDefinition definition);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public sealed virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
}
public class JetBrains.Application.UI.BindableLinq.Interfaces.BulkUpdate : ValueType {
    private ISuspendable mySuspendable;
    private BulkUpdate(ISuspendable suspendable);
    public sealed virtual void Dispose();
    public static IDisposable For(ISuspendable suspendable);
    public static IDisposable For(ISuspendable suspendable, int affectedElementsCount);
    public static IDisposable For(ISuspendable suspendable, NotifyCollectionChangedEventArgs e);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindable {
    public bool IsEvaluated { get; }
    public abstract virtual bool get_IsEvaluated();
    public abstract virtual void Evaluate();
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindable`1 {
    [CanBeNullAttribute]
public TValue Value { get; public set; }
    public abstract virtual TValue get_Value();
    public abstract virtual void set_Value(TValue value);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection {
    public abstract virtual void Add(object value);
    public abstract virtual void Remove(object value);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableCollection`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Reset(IEnumerable`1<TElement> items);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableGrouping`2 {
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableSet`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView {
    [CanBeNullAttribute]
public ISync Lock { get; }
    [CanBeNullAttribute]
public IBindableView ParentView { get; }
    [NotNullAttribute]
public IBindableView RootView { get; }
    public abstract virtual ISync get_Lock();
    public abstract virtual IBindableView get_ParentView();
    public abstract virtual IBindableView get_RootView();
    public abstract virtual int IndexOf(object item);
    public abstract virtual bool Contains(object item);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView`1 {
    public int Count { get; }
    public TElement Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual TElement get_Item(int index);
    public abstract virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.IOrderedBindableView`1 {
    [NotNullAttribute]
public abstract virtual IOrderedBindableView`1<TResult> CreateOrderedIterator(Func`2<TResult, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
}
public interface JetBrains.Application.UI.BindableLinq.Interfaces.ISuspendable {
    public bool IsSuspended { get; }
    public abstract virtual bool get_IsSuspended();
    public abstract virtual void Suspend();
    public abstract virtual void Resume();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Iterators.CastIterator`2 : object {
    private IBindableView`1<TSource> mySourceCollection;
    public int Count { get; }
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public TResult Item { get; }
    public CastIterator`2(IBindableView`1<TSource> sourceCollection);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.BindableLinq.Iterators.CastIterator`2/<GetEnumerator>d__2")]
public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.BindableLinq.Iterators.CastIterator`2/<GetEnumeratorUnsafe>d__4")]
public sealed virtual IEnumerator`1<TResult> GetEnumeratorUnsafe();
    public sealed virtual int get_Count();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual ISync get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual TResult get_Item(int index);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual string ToString();
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.DistinctIterator`2 : Iterator`2<TSource, TResult> {
    [NotNullAttribute]
private Func`2<TSource, TResult> mySelector;
    [NotNullAttribute]
private IDictionary`2<TResult, int> myCountingMap;
    public DistinctIterator`2(IBindableView`1<TSource> sourceCollection, Func`2<TSource, TResult> selector);
    protected virtual IBindableCollection`1<TResult> CreateResultCollection(ISync readlock, IEnumerable`1<TResult> items);
    protected virtual IEnumerable`1<TResult> EvaluateSourceCollection();
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
    protected virtual void ReactToAdd(int index, TSource item);
    protected virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected virtual void ReactToRemove(int index, TSource removedItem);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.EvaluateOnceForEachItemIterator`1 : Iterator`2<TElement, TElement> {
    [NotNullAttribute]
private Action`1<TElement> myEvaluateOnEachItem;
    public EvaluateOnceForEachItemIterator`1(IBindableView`1<TElement> sourceCollection, Action`1<TElement> evaluateOnEachItem);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToReplace(int index, TElement oldItem, TElement newItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int index, TElement removedItem);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.GroupByIterator`3 : Iterator`2<TSource, IBindableGrouping`2<TKey, TElement>> {
    private Expression`1<Func`2<TSource, TElement>> myElementSelector;
    private IEqualityComparer`1<TKey> myKeyComparer;
    private Expression`1<Func`2<TSource, TKey>> myKeySelector;
    private Func`2<TSource, TKey> myKeySelectorCompiled;
    public GroupByIterator`3(IBindableView`1<TSource> sourceCollection, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> keyComparer);
    protected virtual IEnumerable`1<IBindableGrouping`2<TKey, TElement>> EvaluateSourceCollection();
    public TKey KeySelector(TSource sourceItem);
    private bool CompareKeys(TKey lhs, TKey rhs);
    private bool FindGroup(TKey key, IEnumerable`1<IBindableGrouping`2<TKey, TElement>> groups);
    private void EnsureGroupsExists(TSource element, ICollection`1<IBindableGrouping`2<TKey, TElement>> groups);
    protected virtual void ReactToAdd(int sourceStartingIndex, TSource addedItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected virtual void ReactToRemove(int oldIndex, TSource removedItem);
    protected virtual void ReactToReplace(int oldIndex, TSource oldItem, TSource newItem);
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
    private void Group_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual void Dispose();
}
internal abstract class JetBrains.Application.UI.BindableLinq.Iterators.ItemSorter`1 : object {
    public abstract virtual int Compare(T left, T right);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.ItemSorter`2 : ItemSorter`1<T> {
    private ItemSorter`1<T> mySuperior;
    private Func`2<T, TKey> myKeySelector;
    private IComparer`1<TKey> myComparer;
    private bool myAscending;
    public ItemSorter`2(ItemSorter`1<T> superior, Func`2<T, TKey> keySelector, IComparer`1<TKey> comparer, bool ascending);
    public virtual int Compare(T left, T right);
}
[DefaultMemberAttribute("Item")]
public abstract class JetBrains.Application.UI.BindableLinq.Iterators.Iterator`2 : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    private int myState;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    [CompilerGeneratedAttribute]
private IBindableCollection`1<TResult> <ResultCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IBindableView`1<TSource> <SourceCollection>k__BackingField;
    [NotNullAttribute]
protected IBindableCollection`1<TResult> ResultCollection { get; private set; }
    [NotNullAttribute]
protected IBindableView`1<TSource> SourceCollection { get; }
    public ISync Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public int Count { get; }
    public bool IsEvaluated { get; }
    protected bool IsDisposed { get; }
    public TResult Item { get; }
    protected Iterator`2(IBindableView`1<TSource> sourceCollection);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected IBindableCollection`1<TResult> get_ResultCollection();
    [CompilerGeneratedAttribute]
private void set_ResultCollection(IBindableCollection`1<TResult> value);
    [CompilerGeneratedAttribute]
protected IBindableView`1<TSource> get_SourceCollection();
    public virtual ISync get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsEvaluated();
    protected bool get_IsDisposed();
    public sealed virtual TResult get_Item(int index);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public virtual void Evaluate();
    [NotNullAttribute]
protected virtual IBindableCollection`1<TResult> CreateResultCollection(ISync readlock, IEnumerable`1<TResult> items);
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TResult> GetEnumeratorUnsafe();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private void SubscribeToDependency(IDependencyDefinition definition);
    private void ReevaluateElement(object element, string propertyName);
    private void ReevaluateCollection(object obj);
    protected void ReactToReset();
    private void ReactToCollectionChangedUnsafe(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected abstract virtual IEnumerable`1<TResult> EvaluateSourceCollection();
    protected abstract virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
    protected abstract virtual void ReactToAdd(int index, TSource item);
    protected abstract virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected abstract virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected abstract virtual void ReactToRemove(int index, TSource removedItem);
    protected virtual void OnPostEvaluate();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual void Dispose();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Iterators.ObserveOnIterator`1 : object {
    private PropertyChangedEventHandler myPropertyChanged;
    private NotifyCollectionChangedEventHandler myCollectionChanged;
    [NotNullAttribute]
private IBindableView`1<TItem> myInner;
    [NotNullAttribute]
private Dispatcher myDispatcher;
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public int Count { get; }
    public TItem Item { get; }
    public ObserveOnIterator`1(IBindableView`1<TItem> inner, Dispatcher dispatcher);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void RaisePropertyChanged(object param);
    protected void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void RaiseCollectionChanged(object param);
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    public sealed virtual void Dispose();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual ISync get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual int get_Count();
    public sealed virtual TItem get_Item(int index);
    public sealed virtual IEnumerator`1<TItem> GetEnumeratorUnsafe();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.OrderByIterator`2 : Iterator`2<TElement, TElement> {
    private ItemSorter`2<TElement, TKey> myItemSorter;
    public OrderByIterator`2(IBindableView`1<TElement> source, ItemSorter`2<TElement, TKey> itemSorter);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int oldIndex, TElement removedItem);
    protected virtual void ReactToReplace(int oldIndex, TElement oldItem, TElement newItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    public sealed virtual IOrderedBindableView`1<TElement> CreateOrderedIterator(Func`2<TElement, TNewKey> keySelector, IComparer`1<TNewKey> comparer, bool descending);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.OrderByWhereIterator`2 : Iterator`2<TElement, TElement> {
    private ItemSorter`2<TElement, TKey> myItemSorter;
    private Func`2<TElement, bool> myPredicate;
    public OrderByWhereIterator`2(IBindableView`1<TElement> source, ItemSorter`2<TElement, TKey> itemSorter, Func`2<TElement, bool> predicate);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    public bool Filter(TElement element);
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int oldIndex, TElement removedItem);
    protected virtual void ReactToReplace(int oldIndex, TElement oldItem, TElement newItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    public sealed virtual IOrderedBindableView`1<TElement> CreateOrderedIterator(Func`2<TElement, TNewKey> keySelector, IComparer`1<TNewKey> comparer, bool descending);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Iterators.QuickWhereWithoutIndexTracking`1 : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    private IBindableView`1<TElement> mySourceCollection;
    private Func`2<TElement, bool> myPredicate;
    private HashSet`1<TElement> myElements;
    private List`1<IDependency> myDependencies;
    private List`1<IDependencyDefinition> myDependencyDefinitions;
    private int myState;
    public int Count { get; }
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public TElement Item { get; }
    public QuickWhereWithoutIndexTracking`1(IBindableView`1<TElement> sourceCollection, Func`2<TElement, bool> predicate);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
    public sealed virtual int get_Count();
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    private void SubscribeToDependency(IDependencyDefinition definition);
    private void ReevaluateElement(object element, string propertyName);
    private void ReevaluateCollection(object obj);
    protected void ReactToItemPropertyChanged(TElement item, string propertyName);
    protected void ReactToReset();
    private void ReactToCollectionChangedUnsafe(object sender, NotifyCollectionChangedEventArgs e);
    private void ReactToCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual ISync get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual bool Contains(TElement item);
    public sealed virtual TElement get_Item(int index);
    [CompilerGeneratedAttribute]
internal static bool <ReactToReset>g__SetsAreEqual|29_0(HashSet`1<TElement> a, HashSet`1<TElement> b, List`1& missingFromA, List`1& missingFromB);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.BindableLinq.Iterators.RefIterator`1 : object {
    private IBindableView`1<TElement> mySourceCollection;
    public IBindableView`1<TElement> SourceCollection { get; }
    public int Count { get; }
    public bool IsEvaluated { get; }
    public ISync Lock { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.ParentView { get; }
    private IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.RootView { get; }
    public TElement Item { get; }
    public RefIterator`1(IBindableView`1<TElement> sourceCollection);
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TElement> GetEnumeratorUnsafe();
    public IBindableView`1<TElement> get_SourceCollection();
    public sealed virtual int get_Count();
    public sealed virtual void AcceptDependency(IDependencyDefinition definition);
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsEvaluated();
    public sealed virtual void Evaluate();
    public sealed virtual ISync get_Lock();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_ParentView();
    private sealed virtual override IBindableView JetBrains.Application.UI.BindableLinq.Interfaces.IBindableView.get_RootView();
    public sealed virtual TElement get_Item(int index);
    public sealed virtual int IndexOf(object item);
    public sealed virtual bool Contains(object item);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual string ToString();
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.SelectIterator`2 : Iterator`2<TSource, TResult> {
    private Func`2<TSource, TResult> mySelector;
    private BindableCollection`1<TResult> ResultCollection { get; }
    public SelectIterator`2(IBindableView`1<TSource> sourceCollection, Func`2<TSource, TResult> selector);
    private BindableCollection`1<TResult> get_ResultCollection();
    protected virtual IEnumerable`1<TResult> EvaluateSourceCollection();
    protected virtual void ReactToAdd(int index, TSource item);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TSource movedItem);
    protected virtual void ReactToRemove(int index, TSource removedItem);
    protected virtual void ReactToReplace(int index, TSource oldItem, TSource newItem);
    protected virtual void ReactToItemPropertyChanged(TSource item, string propertyName);
}
public class JetBrains.Application.UI.BindableLinq.Iterators.SkipIterator`1 : Iterator`2<TElement, TElement> {
    private int mySkipCount;
    private BindableCollection`1<TElement> ResultCollection { get; }
    public SkipIterator`1(IBindableView`1<TElement> sourceCollection, int skipCount);
    private BindableCollection`1<TElement> get_ResultCollection();
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    protected virtual void ReactToAdd(int index, TElement item);
    protected virtual void ReactToReplace(int index, TElement oldItem, TElement newItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int index, TElement removedItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
}
internal class JetBrains.Application.UI.BindableLinq.Iterators.WhereIterator`1 : Iterator`2<TElement, TElement> {
    private Func`2<TElement, bool> myPredicate;
    public WhereIterator`1(IBindableView`1<TElement> sourceCollection, Func`2<TElement, bool> predicate);
    protected virtual IBindableCollection`1<TElement> CreateResultCollection(ISync readlock, IEnumerable`1<TElement> items);
    protected virtual IEnumerable`1<TElement> EvaluateSourceCollection();
    public bool Filter(TElement element);
    protected virtual void ReactToAdd(int insertionIndex, TElement addedItem);
    protected virtual void ReactToMove(int oldIndex, int newIndex, TElement movedItem);
    protected virtual void ReactToRemove(int index, TElement removedItem);
    protected virtual void ReactToReplace(int index, TElement oldItem, TElement newItem);
    protected virtual void ReactToItemPropertyChanged(TElement item, string propertyName);
}
public abstract class JetBrains.Application.UI.Commands.Command`1 : CommandMixin {
    public abstract virtual void Execute(T parameter);
    public abstract virtual bool CanExecute(T parameter);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.Application.UI.Commands.CommandMixin : object {
    private JetDispatcher myDispatcher;
    [NullableAttribute("2")]
private EventHandler myCanExecuteChanged;
    [NullableContextAttribute("2")]
protected CommandMixin(JetDispatcher dispatcher);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    protected void CheckCorrectThreadAndRaiseCanExecuteChanged();
    protected void RaiseCanExecuteChangedOnCorrectThread();
    private void RaiseCanExecuteChanged();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Commands.DelegateCommand : CommandMixin {
    private Action`1<object> myExecute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Predicate`1<object> myCanExecute;
    public DelegateCommand(Action`1<object> execute, Predicate`1<object> canExecute, JetDispatcher dispatcher);
    [NullableContextAttribute("2")]
public DelegateCommand(Action execute, Func`1<bool> canExecute, JetDispatcher dispatcher);
    [PublicAPIAttribute]
public DelegateCommand(Action execute, Func`1<bool> canExecute);
    [PublicAPIAttribute]
public DelegateCommand(Action`1<object> execute, Predicate`1<object> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    public void RaiseCanExecuteChanged();
    public void RaiseCanExecuteChangedOnCorrectThread();
}
public class JetBrains.Application.UI.Commands.DelegateCommand`1 : Command`1<T> {
    private Action`1<T> myExecute;
    private Predicate`1<T> myCanExecute;
    public DelegateCommand`1(Action`1<T> execute, Predicate`1<T> canExecute);
    public virtual void Execute(T parameter);
    public virtual bool CanExecute(T parameter);
    public void RaiseCanExecuteChanged();
}
public class JetBrains.Application.UI.Commands.DelegateCommandWithResult`2 : DelegateCommand`1<TParameter> {
    private Func`2<TParameter, TResult> myFunc;
    [CompilerGeneratedAttribute]
private TResult <LastResult>k__BackingField;
    public TResult LastResult { get; private set; }
    private object JetBrains.Application.UI.Commands.ICommandWithResult.LastResult { get; }
    public DelegateCommandWithResult`2(Func`2<TParameter, TResult> execute, Predicate`1<TParameter> canExecute);
    [CompilerGeneratedAttribute]
public sealed virtual TResult get_LastResult();
    [CompilerGeneratedAttribute]
private void set_LastResult(TResult value);
    private sealed virtual override object JetBrains.Application.UI.Commands.ICommandWithResult.get_LastResult();
    public virtual void Execute(TParameter parameter);
}
public interface JetBrains.Application.UI.Commands.ICommand`1 {
    public abstract virtual void Execute(T param);
    public abstract virtual bool CanExecute(T param);
}
public interface JetBrains.Application.UI.Commands.ICommandWithResult {
    public object LastResult { get; }
    public abstract virtual object get_LastResult();
}
public interface JetBrains.Application.UI.Commands.ICommandWithResult`2 {
    public TResult LastResult { get; }
    public abstract virtual TResult get_LastResult();
}
public class JetBrains.Application.UI.Commands.OpenUriCommand : UICommand {
    public OpenUriCommand(Lifetime lifetime, OpensUri opensUri, Uri uri, object icon, object title, object description, Predicate`1<object> canExecute);
}
public class JetBrains.Application.UI.Commands.SignalCommand : SignalCommand`1<object> {
    public SignalCommand(string sSignalName, Action FFirstHandler);
    public SignalCommand(string sSignalName, Action`1<object> FFirstHandler);
    public void Fire();
}
public class JetBrains.Application.UI.Commands.SignalCommand`1 : object {
    private EventHandler _CanExecuteChanged;
    private IProperty`1<bool> myCanExecute;
    [NotNullAttribute]
private Signal`1<EventArgs`1<T>> mySignal;
    public IProperty`1<bool> IsCanExecute { get; }
    private IUntypedSignal JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<T>>.AsUntyped { get; }
    private PropertyId`1<EventArgs`1<T>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<T>>.Id { get; }
    private IProperty`1<EventArgs`1<T>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<T>>.Property { get; }
    public SignalCommand`1(string sSignalName, Action FFirstHandler);
    public SignalCommand`1(string sSignalName, Action`1<object> FFirstHandler);
    public IProperty`1<bool> get_IsCanExecute();
    public sealed virtual void Advise(Lifetime lifetime, Action`1<EventArgs`1<T>> handler);
    public void Fire(T value);
    public sealed virtual void Fire(EventArgs`1<T> value);
    public sealed virtual void Fire(EventArgs`1<T> value, object cookie);
    private sealed virtual override IUntypedSignal JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<T>>.get_AsUntyped();
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private sealed virtual override void System.Windows.Input.ICommand.add_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.Windows.Input.ICommand.remove_CanExecuteChanged(EventHandler value);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override PropertyId`1<EventArgs`1<T>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<T>>.get_Id();
    private sealed virtual override IProperty`1<EventArgs`1<T>> JetBrains.DataFlow.ISignal<JetBrains.DataFlow.EventArgs<T>>.get_Property();
}
public class JetBrains.Application.UI.Commands.SimpleCommand : CommandMixin {
    private Action myExecute;
    private bool myCanExecute;
    private bool CanExecute { get; public set; }
    public SimpleCommand(Action execute, bool canExecute);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private bool get_CanExecute();
    public void set_CanExecute(bool value);
}
public class JetBrains.Application.UI.Commands.SimpleCommand`1 : CommandMixin {
    private ICommand`1<T> myThis;
    private Action`1<T> myAction;
    private bool myCanExecute;
    private bool CanExecute { get; public set; }
    public SimpleCommand`1(Action`1<T> action, bool canExecute);
    private sealed virtual override void JetBrains.Application.UI.Commands.ICommand<T>.Execute(T param);
    private sealed virtual override bool JetBrains.Application.UI.Commands.ICommand<T>.CanExecute(T param);
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object parameter);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object parameter);
    private bool get_CanExecute();
    public void set_CanExecute(bool value);
}
public class JetBrains.Application.UI.Commands.UICommand : DelegateCommand {
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Description>k__BackingField;
    public IProperty`1<object> Icon { get; }
    public IProperty`1<object> Title { get; }
    public IProperty`1<object> Description { get; }
    public UICommand(Lifetime lifetime, Action`1<object> execute, Predicate`1<object> canExecute, object icon, object title, object description);
    public UICommand(Lifetime lifetime, Action execute, Predicate`1<object> canExecute, object icon, object title, object description);
    [CompilerGeneratedAttribute]
public IProperty`1<object> get_Icon();
    [CompilerGeneratedAttribute]
public IProperty`1<object> get_Title();
    [CompilerGeneratedAttribute]
public IProperty`1<object> get_Description();
}
public class JetBrains.Application.UI.Commands.UiCommandAutomation : AAutomation {
    public SignalCommand Command;
    public Property`1<RichText> DisplayText;
    public IProperty`1<bool> IsEnabled;
    public IProperty`1<IAutomation> Tooltip;
    public UiCommandAutomation(RichText displaytext, Action λOnCommand, RichText tooltip);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Components.Clipboard : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IThreading myThreading;
    public Clipboard(Lifetime lifetime, IThreading threading);
    [CanBeNullAttribute]
public virtual IDataObject GetDataObject();
    [CanBeNullAttribute]
public virtual string GetText();
    public virtual void SetText(string text);
    [CanBeNullAttribute]
public virtual object GetData(string format);
    [CanBeNullAttribute]
public virtual IDataObject SetDataObject(object data);
    [CanBeNullAttribute]
public static string GetText(int maxLength);
    [MustUseReturnValueAttribute]
private static bool OpenClipboard(int retryCount);
    [MustUseReturnValueAttribute]
private static IntPtr GetClipboardText(int retryCount);
}
public static class JetBrains.Application.UI.Components.Dumping : object {
    public static void DumpObjectSimple(object o, XmlWriter writer);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.Components.Fonts.FontsManager : object {
    protected Lazy`1<IProperty`1<JetFont>> myCodeFont;
    protected Lazy`1<IProperty`1<JetFont>> myLookupFont;
    protected Lazy`1<IProperty`1<JetFont>> myTipFont;
    protected Lazy`1<IProperty`1<JetFont>> myEditorTooltipFont;
    protected Lazy`1<IProperty`1<JetFont>> myDialogFont;
    protected Lazy`1<IProperty`1<JetFont>> myMenuFont;
    public static JetFont FallbackUiFont;
    public IProperty`1<JetFont> DefaultCodeFont { get; }
    public IProperty`1<JetFont> DialogFont { get; }
    public IProperty`1<JetFont> LookupFont { get; }
    public IProperty`1<JetFont> MenuFont { get; }
    public IProperty`1<JetFont> TipFont { get; }
    public IProperty`1<JetFont> EditorTooltipFont { get; }
    private static FontsManager();
    public IProperty`1<JetFont> get_DefaultCodeFont();
    public IProperty`1<JetFont> get_DialogFont();
    public IProperty`1<JetFont> get_LookupFont();
    public IProperty`1<JetFont> get_MenuFont();
    public IProperty`1<JetFont> get_TipFont();
    public IProperty`1<JetFont> get_EditorTooltipFont();
    protected virtual JetFont GetCodeFont();
    protected virtual JetFont GetDialogFont();
    protected virtual JetFont GetLookupFont();
    protected virtual JetFont GetMenuFont();
    protected virtual JetFont GetTipFont();
    protected virtual JetFont GetEditorTooltipFont();
    [CompilerGeneratedAttribute]
internal static Lazy`1<IProperty`1<JetFont>> <.ctor>g__CreateLazyFontProperty|7_0(string name, Func`1<JetFont> getter);
}
public static class JetBrains.Application.UI.Components.Fonts.GdipFontFamilyEx : object {
    [NotNullAttribute]
public static FontFamily CreateFontFamily(string fontFamilyName, GenericFontFamilies fontFamilies);
}
public interface JetBrains.Application.UI.Components.Fonts.IFontsManager {
    public IProperty`1<JetFont> DefaultCodeFont { get; }
    public IProperty`1<JetFont> DialogFont { get; }
    public IProperty`1<JetFont> LookupFont { get; }
    public IProperty`1<JetFont> MenuFont { get; }
    public IProperty`1<JetFont> TipFont { get; }
    public IProperty`1<JetFont> EditorTooltipFont { get; }
    public abstract virtual IProperty`1<JetFont> get_DefaultCodeFont();
    public abstract virtual IProperty`1<JetFont> get_DialogFont();
    public abstract virtual IProperty`1<JetFont> get_LookupFont();
    public abstract virtual IProperty`1<JetFont> get_MenuFont();
    public abstract virtual IProperty`1<JetFont> get_TipFont();
    public abstract virtual IProperty`1<JetFont> get_EditorTooltipFont();
}
public interface JetBrains.Application.UI.Components.IApplicationActiveStateProvider {
    public IProperty`1<bool> IsActive { get; }
    public abstract virtual IProperty`1<bool> get_IsActive();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.Components.IIsApplicationActiveState {
    [NotNullAttribute]
public IProperty`1<bool> IsEnabled { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsApplicationActive { get; }
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    public abstract virtual IProperty`1<bool> get_IsApplicationActive();
}
public static class JetBrains.Application.UI.Components.Interop.AvalonOperationCrisp : object {
    private static object myCookie;
    private static bool myExecuted;
    private static AvalonOperationCrisp();
    public static void Execute();
    private static void Execute_InstallHook();
    private static void Execute_InvalidateMil();
    private static int OnSystemParametersInfoW(UInt32 uiAction, UInt32 uiParam, Void* pvParam, UInt32 fWinIni);
}
public class JetBrains.Application.UI.Components.Interop.AvalonOperationCrispComponent : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Components.IsApplicationActiveState : object {
    private static ILogger ourLog;
    protected Lifetime myLifetimeComponent;
    private static ReadonlyToken myReadonlyToken;
    private JetDispatcher Dispatcher;
    private IProperty`1<bool> myIsApplicationActive;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsApplicationActive { get; }
    public IsApplicationActiveState(Lifetime lifetimeComponent, IThreading threading, IWindowsHookManager windowsHookManager, ILazy`1<IOptional`1<IApplicationActiveStateProvider>> lazyApplicationActiveStateProvider);
    private static IsApplicationActiveState();
    protected virtual void Init();
    private void UpdateActive(IProperty`1<bool> property);
    private void LogWindowStatus();
    public void Invalidate();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    public virtual IProperty`1<bool> get_IsApplicationActive();
}
public class JetBrains.Application.UI.Components.IsApplicationActiveStateDummy : object {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsApplicationActive>k__BackingField;
    public IProperty`1<bool> IsEnabled { get; private set; }
    public IProperty`1<bool> IsApplicationActive { get; private set; }
    public IsApplicationActiveStateDummy(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsApplicationActive();
    [CompilerGeneratedAttribute]
private void set_IsApplicationActive(IProperty`1<bool> value);
}
public interface JetBrains.Application.UI.Components.IUIApplication {
    [NotNullAttribute]
public IApplicationModalState ApplicationModalState { get; }
    [NotNullAttribute]
public ICommonFileDialogs FileDialogs { get; }
    [NotNullAttribute]
public IMainWindowPopupWindowContext MainWindowPopupWindowContext { get; }
    [NotNullAttribute]
public ISettingsStore Settings { get; }
    [NotNullAttribute]
public IShellLocks ShellLocks { get; }
    [NotNullAttribute]
public IWindowsHookManager WindowsHookManager { get; }
    public abstract virtual IApplicationModalState get_ApplicationModalState();
    public abstract virtual ICommonFileDialogs get_FileDialogs();
    public abstract virtual IMainWindowPopupWindowContext get_MainWindowPopupWindowContext();
    public abstract virtual ISettingsStore get_Settings();
    public abstract virtual IShellLocks get_ShellLocks();
    public abstract virtual IWindowsHookManager get_WindowsHookManager();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.IUIApplicationEx : object {
    [ExtensionAttribute]
public static void OpenUri(IUIApplicationSimple thіs, Uri uri);
}
public interface JetBrains.Application.UI.Components.IUIApplicationSimple {
    [NotNullAttribute]
public ISimpleSignal Idle { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsApplicationActive { get; }
    public bool IsInternalMode { get; }
    [CanBeNullAttribute]
public IMainWindow MainWindow { get; }
    [NotNullAttribute]
public OpensUri OpensUri { get; }
    public OuterLifetime OuterLifetime { get; }
    [NotNullAttribute]
public ITheming Theming { get; }
    [NotNullAttribute]
public IThreading Threading { get; }
    [NotNullAttribute]
public IWindowBranding WindowBranding { get; }
    public abstract virtual ISimpleSignal get_Idle();
    public abstract virtual IProperty`1<bool> get_IsApplicationActive();
    public abstract virtual bool get_IsInternalMode();
    public abstract virtual IMainWindow get_MainWindow();
    public abstract virtual OpensUri get_OpensUri();
    public abstract virtual OuterLifetime get_OuterLifetime();
    public abstract virtual ITheming get_Theming();
    public abstract virtual IThreading get_Threading();
    public abstract virtual IWindowBranding get_WindowBranding();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.IUIApplicationSimpleEx : object {
    [ExtensionAttribute]
public static void OpenUri(IUIApplicationSimple thіs, string uri);
}
public interface JetBrains.Application.UI.Components.IUIPreparer {
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.UI.Components.NonInteractiveMessageBoxHandler : object {
    public NonInteractiveMessageBoxHandler(Lifetime lifetime, ILogger logger, bool isSuppress);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Components.SuspendFileSystemTrackerWhenInactive : object {
    public SuspendFileSystemTrackerWhenInactive(Lifetime lifetime, IFileSystemTracker filetracker, IIsApplicationActiveState activestate);
}
[ShellComponentAttribute("10")]
internal class JetBrains.Application.UI.Components.SuspendInvocatorOnAppInactive : object {
    public SuspendInvocatorOnAppInactive(Lifetime lifetime, IThreading threading, IIsApplicationActiveState isApplicationActiveState);
}
public class JetBrains.Application.UI.Components.Theming.ColorTheme : object {
    private IDictionary`2<ThemeColor, JetRgbaColor> myARGBColors;
    public void SetColor(ThemeColor color, JetRgbaColor v);
    public JetRgbaColor GetColor(ThemeColor color);
    public JetRgbaColor GetColorBlended(ThemeColor source, ThemeColor destination, double alpha);
}
public static class JetBrains.Application.UI.Components.Theming.DummyThemingAggregator : object {
    [NotNullAttribute]
public static ITheming CreateDummyThemingInstance(Lifetime lifetime, IThreading threading, ILogger logger);
}
public interface JetBrains.Application.UI.Components.Theming.IColorThemeManager {
    public IViewableProperty`1<ColorTheme> CurrentTheme { get; }
    public IProperty`1<ColorTheme> CurrentTheme2 { get; }
    public abstract virtual IViewableProperty`1<ColorTheme> get_CurrentTheme();
    public abstract virtual IProperty`1<ColorTheme> get_CurrentTheme2();
    public abstract virtual IProperty`1<JetRgbaColor> CreateLiveColor(ThemeColor themeColor);
    [ObsoleteAttribute("Use ApplyTheming ext method, takes Control not HWND. Maybe update this one when can do non-portable changes.")]
public abstract virtual void PrepareWinForm(Lifetime lifetime, Void* hWnd);
    public abstract virtual void PrepareFrameworkElement(FrameworkElement element);
    public abstract virtual void UseDefaultThemedStyles(FrameworkElement element);
}
public interface JetBrains.Application.UI.Components.Theming.IStatusBarColorsManager {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<IProperty`1<JetRgbaColor>, IProperty`1<JetRgbaColor>> CurrentStatusBarColors { get; }
    public abstract virtual ValueTuple`2<IProperty`1<JetRgbaColor>, IProperty`1<JetRgbaColor>> get_CurrentStatusBarColors();
}
public interface JetBrains.Application.UI.Components.Theming.IThemeColorFiller {
    public abstract virtual void FillColorTheme(ColorTheme theme);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.Theming.IThemeManagerEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<Theme> GetThemeKind(IColorThemeManager thіs);
    public static bool IsDarkColor(JetRgbaColor color);
    public static Theme GetThemeKind(ColorTheme theme);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> IsMonochromeTheme(IColorThemeManager thіs);
    [ExtensionAttribute]
[NotNullAttribute]
public static IProperty`1<bool> IsDarkTheme(IColorThemeManager thіs);
    public static bool IsMonochromeTheme(JetRgbaColor color);
}
public interface JetBrains.Application.UI.Components.Theming.ITheming {
    [NotNullAttribute]
public IViewableProperty`1<ColorTheme> CurrentTheme { get; }
    [NotNullAttribute]
public IProperty`1<ColorTheme> CurrentTheme2 { get; }
    [NotNullAttribute]
public IColorThemeManager ColorThemeManager { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsDarkTheme { get; }
    [NotNullAttribute]
public IProperty`1<Theme> ThemeKind { get; }
    [NotNullAttribute]
public IStatusBarColorsManager StatusBarColors { get; }
    public abstract virtual IViewableProperty`1<ColorTheme> get_CurrentTheme();
    public abstract virtual IProperty`1<ColorTheme> get_CurrentTheme2();
    public abstract virtual IColorThemeManager get_ColorThemeManager();
    public abstract virtual IProperty`1<bool> get_IsDarkTheme();
    public abstract virtual IProperty`1<Theme> get_ThemeKind();
    public abstract virtual IStatusBarColorsManager get_StatusBarColors();
    [NotNullAttribute]
public abstract virtual IProperty`1<JetRgbaColor> CreateLiveColor(ThemeColor themeColor);
    [NotNullAttribute]
public abstract virtual ColorTheme GetCurrentColorTheme();
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Components.Theming.StatusBarColorsManager : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<IProperty`1<JetRgbaColor>, IProperty`1<JetRgbaColor>> myCurrentStatusBarColors;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<IProperty`1<JetRgbaColor>, IProperty`1<JetRgbaColor>> CurrentStatusBarColors { get; }
    public StatusBarColorsManager(IColorThemeManager themeManager);
    public virtual ValueTuple`2<IProperty`1<JetRgbaColor>, IProperty`1<JetRgbaColor>> get_CurrentStatusBarColors();
}
public enum JetBrains.Application.UI.Components.Theming.SystemColor : Enum {
    public int value__;
    public static SystemColor ScrollBar;
    public static SystemColor Desktop;
    public static SystemColor ActiveCaption;
    public static SystemColor InactiveCaption;
    public static SystemColor Menu;
    public static SystemColor Window;
    public static SystemColor WindowFrame;
    public static SystemColor MenuText;
    public static SystemColor WindowText;
    public static SystemColor ActiveCaptionText;
    public static SystemColor ActiveBorder;
    public static SystemColor InactiveBorder;
    public static SystemColor AppWorkspace;
    public static SystemColor Highlight;
    public static SystemColor HighlightText;
    public static SystemColor Control;
    public static SystemColor ControlDark;
    public static SystemColor GrayText;
    public static SystemColor ControlText;
    public static SystemColor InactiveCaptionText;
    public static SystemColor ControlLightLight;
    public static SystemColor ControlDarkDark;
    public static SystemColor ControlLight;
    public static SystemColor InfoText;
    public static SystemColor Info;
    public static SystemColor HotTrack;
    public static SystemColor GradientActiveCaption;
    public static SystemColor GradientInactiveCaption;
    public static SystemColor MenuHighlight;
    public static SystemColor MenuBar;
}
public class JetBrains.Application.UI.Components.Theming.ThemeColor : EnumPattern {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlphaAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private JetRgbaColor <DefaultColor>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BrushKey>k__BackingField;
    private static JetRgbaColor ourDefaultColor;
    protected static ConcurrentDictionary`2<string, ThemeColor> ourColors;
    public static ThemeColor TextBoxBackground;
    public static ThemeColor ControlLinkText;
    public static ThemeColor ControlLinkTextPressed;
    public static ThemeColor Highlight;
    public static ThemeColor HighlightText;
    public static ThemeColor Background;
    public static ThemeColor Window;
    public static ThemeColor WindowText;
    public static ThemeColor DisabledText;
    public static ThemeColor Control;
    public static ThemeColor Info;
    public static ThemeColor InfoText;
    public static ThemeColor ActiveBorder;
    public static object InfoBrushKey;
    public static object InfoTextBrushKey;
    public static object ActiveBorderBrushKey;
    public static object WindowBrushKey;
    public static object WindowTextBrushKey;
    public static object DisabledTextBrushKey;
    public static object ControlBrushKey;
    public static object HighlightBrushKey;
    public static object HighlightTextBrushKey;
    public static ThemeColor ThemedAccentBackground;
    public static ThemeColor ThemedAccentForeground;
    public static ThemeColor ThemedAccentSelection;
    public static ThemeColor ThemedAccentHighlight;
    public static ThemeColor ThemedAccentAccent;
    public static ThemeColor TabStripBackground;
    public static ThemeColor TabStripForeground;
    public static ThemeColor TabStripItemBackground;
    public static ThemeColor TabStripItemForeground;
    public static ThemeColor TabStripItemBorder;
    public static ThemeColor TabStripItemMouseOverBackground;
    public static ThemeColor TabStripItemMouseOverForeground;
    public static ThemeColor TabStripItemMouseOverBorder;
    public static ThemeColor TabStripItemSelectedInactiveBackground;
    public static ThemeColor TabStripItemSelectedInactiveForeground;
    public static ThemeColor TabStripItemSelectedInactiveBorder;
    public static ThemeColor TabStripItemSelectedActiveBackground;
    public static ThemeColor TabStripItemSelectedActiveForeground;
    public static ThemeColor TabStripItemSelectedActiveBorder;
    public static ThemeColor TabStripButtonBackground;
    public static ThemeColor TabStripButtonForeground;
    public static ThemeColor TabStripButtonBorder;
    public static ThemeColor TabStripButtonMouseOverBackground;
    public static ThemeColor TabStripButtonMouseOverForeground;
    public static ThemeColor TabStripButtonMouseOverBorder;
    public static ThemeColor TabStripButtonMousePressedBackground;
    public static ThemeColor TabStripButtonMousePressedForeground;
    public static ThemeColor TabStripButtonMousePressedBorder;
    public static object TabStripBackgroundBrushKey;
    public static object TabStripForegroundBrushKey;
    public static object TabStripItemBackgroundBrushKey;
    public static object TabStripItemForegroundBrushKey;
    public static object TabStripItemBorderBrushKey;
    public static object TabStripItemMouseOverBackgroundBrushKey;
    public static object TabStripItemMouseOverForegroundBrushKey;
    public static object TabStripItemMouseOverBorderBrushKey;
    public static object TabStripItemSelectedInactiveBackgroundBrushKey;
    public static object TabStripItemSelectedInactiveForegroundBrushKey;
    public static object TabStripItemSelectedInactiveBorderBrushKey;
    public static object TabStripItemSelectedActiveBackgroundBrushKey;
    public static object TabStripItemSelectedActiveForegroundBrushKey;
    public static object TabStripItemSelectedActiveBorderBrushKey;
    public static object TabStripButtonBackgroundBrushKey;
    public static object TabStripButtonForegroundBrushKey;
    public static object TabStripButtonBorderBrushKey;
    public static object TabStripButtonMouseOverBackgroundBrushKey;
    public static object TabStripButtonMouseOverForegroundBrushKey;
    public static object TabStripButtonMouseOverBorderBrushKey;
    public static object TabStripButtonMousePressedBackgroundBrushKey;
    public static object TabStripButtonMousePressedForegroundBrushKey;
    public static object TabStripButtonMousePressedBorderBrushKey;
    public static ThemeColor ToolbarBackgroundGradientBegin;
    public static object ToolbarBackgroundGradientBeginBrushKey;
    public static ThemeColor ToolbarBackgroundGradientMiddle;
    public static object ToolbarBackgroundGradientMiddleKey;
    public static ThemeColor ToolbarBackgroundGradientEnd;
    public static ThemeColor ToolbarForeground;
    public static object ToolbarForegroundKey;
    public static ThemeColor ToolbarSeparatorDark;
    public static ThemeColor ToolbarSeparatorLight;
    public static ThemeColor ToolbarItemPressedBackgroundGradientBegin;
    public static object ToolbarItemPressedBackgroundGradientBeginBrushKey;
    public static ThemeColor ToolbarItemPressedBackgroundGradientEnd;
    public static ThemeColor ToolbarItemPressedForeground;
    public static ThemeColor ToolbarItemPressedBorder;
    public static ThemeColor ToolbarItemHoveredBackgroundGradientBegin;
    public static object ToolbarItemHoveredBackgroundGradientBeginBrushKey;
    public static ThemeColor ToolbarItemHoveredBackgroundGradientEnd;
    public static object ToolbarItemHoveredBackgroundGradientEndKey;
    public static ThemeColor ToolbarItemHoveredForeground;
    public static ThemeColor ToolbarItemHoveredBorder;
    public static object ToolbarItemHoveredBorderKey;
    public static ThemeColor ToolbarItemCheckedBackgroundGradientBegin;
    public static ThemeColor ToolbarItemCheckedBackgroundGradientEnd;
    public static object ToolbarItemCheckedBackgroundGradientEndKey;
    public static ThemeColor ToolbarItemCheckedForeground;
    public static ThemeColor ToolbarItemCheckedBorder;
    public static object ToolbarItemCheckedBorderKey;
    public static ThemeColor ToolbarComboBoxBackground;
    public static ThemeColor ToolbarComboBoxForeground;
    public static ThemeColor ToolbarComboBoxBorder;
    public static ThemeColor ToolbarComboBoxPopupBackground;
    public static ThemeColor ToolbarComboBoxPopupForeground;
    public static ThemeColor ToolbarComboBoxPopupBorder;
    public static ThemeColor ToolbarComboBoxCheckedBackground;
    public static ThemeColor ToolbarComboBoxCheckedForeground;
    public static ThemeColor ToolbarComboBoxCheckedBorder;
    public static ThemeColor ToolbarComboBoxHoveredBackground;
    public static ThemeColor ToolbarComboBoxHoveredForeground;
    public static ThemeColor ToolbarComboBoxHoveredBorder;
    public static ThemeColor ToolbarComboBoxItemSelectedForeground;
    public static ThemeColor ToolbarComboBoxItemSelectedBackground;
    public static ThemeColor ToolbarComboBoxItemSelectedBorder;
    public static ThemeColor ContextMenuBorder;
    public static ThemeColor ContextMenuForeground;
    public static ThemeColor ContextMenuForegroundMouseOver;
    public static ThemeColor ContextMenuForegroundInactive;
    public static ThemeColor ContextMenuBackgroundGradientBegin;
    public static ThemeColor ContextMenuBackgroundGradientEnd;
    public static ThemeColor ContextMenuSeparator;
    public static ThemeColor ContextMenuItemMouseOverBorder;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientBegin;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientMiddle1;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientMiddle2;
    public static ThemeColor ContextMenuItemMouseOverBackgroundGradientEnd;
    public static ThemeColor ContextMenuItemPressedBorder;
    public static ThemeColor ContextMenuItemPressedBackgroundGradientBegin;
    public static ThemeColor ContextMenuItemPressedBackgroundGradientMiddle;
    public static ThemeColor ContextMenuItemPressedBackgroundGradientEnd;
    public static ThemeColor ContextMenuIconBackgroundGradientBegin;
    public static ThemeColor ContextMenuIconBackgroundGradientMiddle;
    public static ThemeColor ContextMenuIconBackgroundGradientEnd;
    public static ThemeColor TooltipBackground;
    public static ThemeColor TooltipForeground;
    public static ThemeColor TooltipBorder;
    public static ThemeColor ToolWindowBackground;
    public static ThemeColor ToolWindowForeground;
    public static ThemeColor TreeViewBackground;
    public static ThemeColor TreeViewForeground;
    public static ThemeColor TreeViewItemHoverBackground;
    public static ThemeColor TreeViewItemHoverBorder;
    public static ThemeColor TreeViewItemSelectedActiveBackground;
    public static ThemeColor TreeViewItemSelectedActiveBorder;
    public static ThemeColor TreeViewItemSelectedActiveForeground;
    public static ThemeColor TreeViewItemSelectedInactiveBackground;
    public static ThemeColor TreeViewItemSelectedInactiveBorder;
    public static ThemeColor TreeViewItemSelectedInactiveForeground;
    public static ThemeColor ToolWindowTreeBackground;
    public static ThemeColor ToolWindowTreeForeground;
    public static ThemeColor ToolWindowSelectedActiveTreeItemBackground;
    public static ThemeColor ToolWindowSelectedActiveTreeItemBorder;
    public static ThemeColor ToolWindowSelectedActiveTreeItemForeground;
    public static ThemeColor ToolWindowSelectedInactiveTreeItemBackground;
    public static ThemeColor ToolWindowSelectedInactiveTreeItemBorder;
    public static ThemeColor ToolWindowSelectedInactiveTreeItemForeground;
    public static ThemeColor TreeViewCellFocusedBorder;
    public static ThemeColor TreeViewColumnBackground;
    public static ThemeColor TreeViewColumnForeground;
    public static ThemeColor TreeViewColumnBorder;
    public static ThemeColor TreeViewColumnMouseOverBackground;
    public static ThemeColor TreeViewColumnMouseOverForeground;
    public static ThemeColor TreeViewColumnMouseOverBorder;
    public static object TreeViewBackgroundBrush;
    public static object TreeViewForegroundBrush;
    public static object TreeViewItemHoverBackgroundBrush;
    public static object TreeViewItemHoverBorderBrush;
    public static object TreeViewItemSelectedActiveBackgroundBrush;
    public static object TreeViewItemSelectedActiveBorderBrush;
    public static object TreeViewItemSelectedActiveForegroundBrush;
    public static object TreeViewItemSelectedInactiveBackgroundBrush;
    public static object TreeViewItemSelectedInactiveBorderBrush;
    public static object TreeViewItemSelectedInactiveForegroundBrush;
    public static object TreeViewColumnBackgroundBrush;
    public static object TreeViewColumnForegroundBrush;
    public static object TreeViewColumnBorderBrush;
    public static object TreeViewColumnMouseOverBackgroundBrush;
    public static object TreeViewColumnMouseOverForegroundBrush;
    public static object TreeViewColumnMouseOverBorderBrush;
    public static ThemeColor ToolWindowTreeHeaderBackground;
    public static ThemeColor ToolWindowTreeHeaderBorder;
    public static ThemeColor ToolWindowTreeHeaderForeground;
    public static ThemeColor ToolWindowTreeHeaderHoverBackground;
    public static ThemeColor ToolWindowTreeHeaderHoverForeground;
    public static ThemeColor ToolWindowTreeHeaderPressedBackground;
    public static ThemeColor ToolWindowTreeHeaderPressedForeground;
    public static ThemeColor ToolWindowTreeHeaderGlyph;
    public static ThemeColor ToolWindowTreeHeaderHoverGlyph;
    public static ThemeColor ToolWindowTreeHeaderPressedGlyph;
    public static object TreeViewCellFocusedBorderBrush;
    public static ThemeColor DialogFooterBackground;
    public static ThemeColor DialogFooterForeground;
    public static object DialogFooterBackgroundBrushKey;
    public static object DialogFooterForegroundBrushKey;
    public static ThemeColor StatusBarBackground;
    public static ThemeColor StatusBarForeground;
    public static ThemeColor EnvironmentBackground;
    public static ThemeColor FileTabInactiveTop;
    public static ThemeColor FileTabInactiveBottom;
    public static object FileTabInactiveTopBrushKey;
    public static object FileTabInactiveBottomBrushKey;
    public static ThemeColor InfoBarForeground;
    public static ThemeColor InfoBarBackground;
    public static object InfoBarForegroundBrush;
    public static object InfoBarBackgroundBrush;
    public static ThemeColor ActiProDockSiteBackground;
    public static ThemeColor SearchHighlightBackground;
    public static ThemeColor SearchHighlightForeground;
    public static object SearchHighlightBackgroundBrush;
    public static object SearchHighlightForegroundBrush;
    public static ThemeColor HyperlinkForegroundNormal;
    public static ThemeColor HyperlinkForegroundMouseOver;
    public static ThemeColor HyperlinkForegroundDisabled;
    public static object HyperlinkForegroundNormalBrushKey;
    public static object HyperlinkForegroundMouseOverBrushKey;
    public static object HyperlinkForegroundDisabledBrushKey;
    public static ThemeColor TextBoxForegroundNormal;
    public static ThemeColor TextBoxForegroundFocused;
    public static ThemeColor TextBoxForegroundDisabled;
    public static ThemeColor TextBoxBackgroundNormal;
    public static ThemeColor TextBoxBackgroundFocused;
    public static ThemeColor TextBoxBackgroundDisabled;
    public static ThemeColor TextBoxBorderNormal;
    public static ThemeColor TextBoxBorderFocused;
    public static ThemeColor TextBoxBorderDisabled;
    public static object TextBoxForegroundNormalBrushKey;
    public static object TextBoxForegroundFocusedBrushKey;
    public static object TextBoxForegroundDisabledBrushKey;
    public static object TextBoxBackgroundNormalBrushKey;
    public static object TextBoxBackgroundFocusedBrushKey;
    public static object TextBoxBackgroundDisabledBrushKey;
    public static object TextBoxBorderNormalBrushKey;
    public static object TextBoxBorderFocusedBrushKey;
    public static object TextBoxBorderDisabledBrushKey;
    public static ThemeColor CheckBoxMarkNormal;
    public static ThemeColor CheckBoxMarkFocused;
    public static ThemeColor CheckBoxMarkMouseOver;
    public static ThemeColor CheckBoxBackgroundNormal;
    public static ThemeColor CheckBoxBackgroundFocused;
    public static ThemeColor CheckBoxBackgroundMouseOver;
    public static ThemeColor CheckBoxBorderNormal;
    public static ThemeColor CheckBoxBorderFocused;
    public static ThemeColor CheckBoxBorderMouseOver;
    public static object CheckBoxMarkNormalBrushKey;
    public static object CheckBoxMarkFocusedBrushKey;
    public static object CheckBoxMarkMouseOverBrushKey;
    public static object CheckBoxBackgroundNormalBrushKey;
    public static object CheckBoxBackgroundFocusedBrushKey;
    public static object CheckBoxBackgroundMouseOverBrushKey;
    public static object CheckBoxBorderNormalBrushKey;
    public static object CheckBoxBorderFocusedBrushKey;
    public static object CheckBoxBorderMouseOverBrushKey;
    public static ThemeColor ScrollBarTrack;
    public static ThemeColor ScrollBarThumbNormal;
    public static ThemeColor ScrollBarThumbMouseOver;
    public static ThemeColor ScrollBarThumbPressed;
    public static ThemeColor ScrollBarArrowNormal;
    public static ThemeColor ScrollBarArrowMouseOver;
    public static ThemeColor ScrollBarArrowPressed;
    public static object ScrollBarTrackBrushKey;
    public static object ScrollBarThumbNormalBrushKey;
    public static object ScrollBarThumbMouseOverBrushKey;
    public static object ScrollBarThumbPressedBrushKey;
    public static object ScrollBarArrowNormalBrushKey;
    public static object ScrollBarArrowMouseOverBrushKey;
    public static object ScrollBarArrowPressedBrushKey;
    [NotNullAttribute]
public string Key { get; }
    public bool AlphaAllowed { get; }
    public JetRgbaColor DefaultColor { get; }
    public object BrushKey { get; }
    public ThemeColor(string key, bool alphaAllowed, bool isBrushNeeded);
    public ThemeColor(string key, JetRgbaColor defaultColor, bool alphaAllowed, bool isBrushNeeded);
    private static ThemeColor();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public bool get_AlphaAllowed();
    [CompilerGeneratedAttribute]
public JetRgbaColor get_DefaultColor();
    [CompilerGeneratedAttribute]
public object get_BrushKey();
    public static IEnumerable`1<ThemeColor> EnumerateColors();
    public static T Intern(T color);
    public static ThemeColor Read(UnsafeReader reader);
    public void Write(UnsafeWriter writer);
    public virtual bool ValueEquals(ThemeColor other);
}
public class JetBrains.Application.UI.Components.Theming.ThemedGradientBrush : EnumPattern {
    private static IList`1<ThemedGradientBrush> ourAllBrushes;
    [CompilerGeneratedAttribute]
private Point <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <End>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ThemedGradientStop> <GradientStops>k__BackingField;
    public Point Start { get; }
    public Point End { get; }
    public IEnumerable`1<ThemedGradientStop> GradientStops { get; }
    public static IEnumerable`1<ThemedGradientBrush> All { get; }
    public ThemedGradientBrush(string name, Point start, Point end, ThemedGradientStop[] gradientStops);
    private static ThemedGradientBrush();
    [CompilerGeneratedAttribute]
public Point get_Start();
    [CompilerGeneratedAttribute]
public Point get_End();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ThemedGradientStop> get_GradientStops();
    public static IEnumerable`1<ThemedGradientBrush> get_All();
}
public class JetBrains.Application.UI.Components.Theming.ThemedGradientStop : object {
    [CompilerGeneratedAttribute]
private ThemeColor <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Offset>k__BackingField;
    public ThemeColor Color { get; }
    public double Offset { get; }
    public ThemedGradientStop(ThemeColor color, double offset);
    [CompilerGeneratedAttribute]
public ThemeColor get_Color();
    [CompilerGeneratedAttribute]
public double get_Offset();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Components.Theming.ThemeManager : object {
    private Lifetime myLifetime;
    private IThreading myThreading;
    private IEnumerable`1<IThemeColorFiller> myFillersList;
    private DateTime myLastChanged;
    protected ViewableProperty`1<ColorTheme> myCurrentThemeRd;
    protected Property`1<ColorTheme> myCurrentTheme;
    protected static ISignal`1<Pair`2<DependencyObject, ThemingAwareness>> ThemingAwareChanged;
    public static DependencyProperty ThemingAwareProperty;
    private IViewableProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.IColorThemeManager.CurrentTheme { get; }
    private IProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.IColorThemeManager.CurrentTheme2 { get; }
    public ThemeManager(Lifetime lifetime, IThreading threading, IEnumerable`1<IThemeColorFiller> fillers);
    private static ThemeManager();
    protected virtual void SubscribeToSystemEvents();
    protected virtual void InitializeTheming(Type from);
    protected virtual ColorTheme CreateTheme();
    private static JetRgbaColor Modify(HSB accent, double hueFactor, double saturationFactor, double brightnessFactor);
    private sealed virtual override IViewableProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.IColorThemeManager.get_CurrentTheme();
    private sealed virtual override IProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.IColorThemeManager.get_CurrentTheme2();
    public sealed virtual IProperty`1<JetRgbaColor> CreateLiveColor(ThemeColor themeColor);
    public virtual void PrepareWinForm(Lifetime lifetime, Void* hWnd);
    public virtual void PrepareFrameworkElement(FrameworkElement element);
    public virtual void UseDefaultThemedStyles(FrameworkElement element);
    protected void FireColorThemeChanged(bool fireImediatelly);
    private void FireColorThemeChangedInt();
    public static void SetThemingAware(FrameworkElement element, ThemingAwareness value);
    public static ThemingAwareness GetThemingAware(FrameworkElement element);
    private static void PropertyChangedCallback(DependencyObject obj, DependencyPropertyChangedEventArgs args);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Components.Theming.ThemeManagerInitializationChecker : object {
    public ThemeManagerInitializationChecker(IColorThemeManager theming);
}
[ShellComponentAttribute("2")]
public class JetBrains.Application.UI.Components.Theming.ThemingAggregator : object {
    [CompilerGeneratedAttribute]
private IStatusBarColorsManager <myStatusBarColorsManager>P;
    [CompilerGeneratedAttribute]
private IColorThemeManager <myColorThemeManager>P;
    [CompilerGeneratedAttribute]
private FontsManager <myFontsManager>P;
    [CompilerGeneratedAttribute]
private ThemedIconManagerCreator <myThemedIconManagerCreator>P;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <JetBrains.Application.UI.Components.Theming.ITheming.IsDarkTheme>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Theme> <JetBrains.Application.UI.Components.Theming.ITheming.ThemeKind>k__BackingField;
    private IViewableProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.ITheming.CurrentTheme { get; }
    private IProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.ITheming.CurrentTheme2 { get; }
    private IColorThemeManager JetBrains.Application.UI.Components.Theming.ITheming.ColorThemeManager { get; }
    private IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme { get; }
    private IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.DefaultCodeFont { get; }
    private IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.DialogFont { get; }
    private IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.EditorTooltipFont { get; }
    private ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.Icons { get; }
    private IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.LookupFont { get; }
    private IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.MenuFont { get; }
    private IStatusBarColorsManager JetBrains.Application.UI.Components.Theming.ITheming.StatusBarColors { get; }
    private IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.TipFont { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Components.Theming.ITheming.IsDarkTheme { get; }
    private IProperty`1<Theme> JetBrains.Application.UI.Components.Theming.ITheming.ThemeKind { get; }
    public ThemingAggregator(IStatusBarColorsManager myStatusBarColorsManager, IColorThemeManager myColorThemeManager, FontsManager myFontsManager, ThemedIconManagerCreator myThemedIconManagerCreator);
    private sealed virtual override IViewableProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.ITheming.get_CurrentTheme();
    private sealed virtual override IProperty`1<ColorTheme> JetBrains.Application.UI.Components.Theming.ITheming.get_CurrentTheme2();
    private sealed virtual override IColorThemeManager JetBrains.Application.UI.Components.Theming.ITheming.get_ColorThemeManager();
    private sealed virtual override IProperty`1<JetRgbaColor> JetBrains.Application.UI.Components.Theming.ITheming.CreateLiveColor(ThemeColor themeColor);
    private sealed virtual override IProperty`1<IconTheme> JetBrains.Application.Icons.IThemedIconManager.get_CurrentIconTheme();
    private sealed virtual override IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_DefaultCodeFont();
    private sealed virtual override IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_DialogFont();
    private sealed virtual override IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_EditorTooltipFont();
    private sealed virtual override ColorTheme JetBrains.Application.UI.Components.Theming.ITheming.GetCurrentColorTheme();
    private sealed virtual override IThemedIconManagerRawApi JetBrains.Application.Icons.IThemedIconManager.GetRawApi();
    private sealed virtual override ThemedIconManagerIcons JetBrains.Application.Icons.IThemedIconManager.get_Icons();
    private sealed virtual override IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_LookupFont();
    private sealed virtual override IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_MenuFont();
    private sealed virtual override IStatusBarColorsManager JetBrains.Application.UI.Components.Theming.ITheming.get_StatusBarColors();
    private sealed virtual override IProperty`1<JetFont> JetBrains.Application.UI.Components.Fonts.IFontsManager.get_TipFont();
    [CompilerGeneratedAttribute]
private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Components.Theming.ITheming.get_IsDarkTheme();
    [CompilerGeneratedAttribute]
private sealed virtual override IProperty`1<Theme> JetBrains.Application.UI.Components.Theming.ITheming.get_ThemeKind();
}
public class JetBrains.Application.UI.Components.Theming.UnixCompatibleProfessionalColorTable : ProfessionalColorTable {
    [CompilerGeneratedAttribute]
private Dictionary`2<KnownColors, Color> <ColorTable>k__BackingField;
    private Dictionary`2<KnownColors, Color> ColorTable { get; }
    public Color ButtonSelectedHighlight { get; }
    public Color ButtonSelectedHighlightBorder { get; }
    public Color ButtonPressedHighlight { get; }
    public Color ButtonPressedHighlightBorder { get; }
    public Color ButtonCheckedHighlight { get; }
    public Color ButtonCheckedHighlightBorder { get; }
    public Color ButtonPressedBorder { get; }
    public Color ButtonSelectedBorder { get; }
    public Color ButtonCheckedGradientBegin { get; }
    public Color ButtonCheckedGradientMiddle { get; }
    public Color ButtonCheckedGradientEnd { get; }
    public Color ButtonSelectedGradientBegin { get; }
    public Color ButtonSelectedGradientMiddle { get; }
    public Color ButtonSelectedGradientEnd { get; }
    public Color ButtonPressedGradientBegin { get; }
    public Color ButtonPressedGradientMiddle { get; }
    public Color ButtonPressedGradientEnd { get; }
    public Color CheckBackground { get; }
    public Color CheckSelectedBackground { get; }
    public Color CheckPressedBackground { get; }
    public Color GripDark { get; }
    public Color GripLight { get; }
    public Color ImageMarginGradientBegin { get; }
    public Color ImageMarginGradientMiddle { get; }
    public Color ImageMarginGradientEnd { get; }
    public Color ImageMarginRevealedGradientBegin { get; }
    public Color ImageMarginRevealedGradientMiddle { get; }
    public Color ImageMarginRevealedGradientEnd { get; }
    public Color MenuStripGradientBegin { get; }
    public Color MenuStripGradientEnd { get; }
    public Color MenuItemSelected { get; }
    public Color MenuItemBorder { get; }
    public Color MenuBorder { get; }
    public Color MenuItemSelectedGradientBegin { get; }
    public Color MenuItemSelectedGradientEnd { get; }
    public Color MenuItemPressedGradientBegin { get; }
    public Color MenuItemPressedGradientMiddle { get; }
    public Color MenuItemPressedGradientEnd { get; }
    public Color RaftingContainerGradientBegin { get; }
    public Color RaftingContainerGradientEnd { get; }
    public Color SeparatorDark { get; }
    public Color SeparatorLight { get; }
    public Color StatusStripGradientBegin { get; }
    public Color StatusStripGradientEnd { get; }
    public Color ToolStripBorder { get; }
    public Color ToolStripDropDownBackground { get; }
    public Color ToolStripGradientBegin { get; }
    public Color ToolStripGradientMiddle { get; }
    public Color ToolStripGradientEnd { get; }
    public Color ToolStripContentPanelGradientBegin { get; }
    public Color ToolStripContentPanelGradientEnd { get; }
    public Color ToolStripPanelGradientBegin { get; }
    public Color ToolStripPanelGradientEnd { get; }
    public Color OverflowButtonGradientBegin { get; }
    public Color OverflowButtonGradientMiddle { get; }
    public Color OverflowButtonGradientEnd { get; }
    [CompilerGeneratedAttribute]
private Dictionary`2<KnownColors, Color> get_ColorTable();
    private static Color GetAlphaBlendedColor(Color src, Color dest, int alpha);
    private static Color GetAlphaBlendedColorHighRes(Color src, Color dest, int alpha);
    private static void InitCommonColors(Dictionary`2<KnownColors, Color> rgbTable);
    private static void InitSystemColors(Dictionary`2<KnownColors, Color> rgbTable);
    private Color FromKnownColor(KnownColors color);
    public virtual Color get_ButtonSelectedHighlight();
    public virtual Color get_ButtonSelectedHighlightBorder();
    public virtual Color get_ButtonPressedHighlight();
    public virtual Color get_ButtonPressedHighlightBorder();
    public virtual Color get_ButtonCheckedHighlight();
    public virtual Color get_ButtonCheckedHighlightBorder();
    public virtual Color get_ButtonPressedBorder();
    public virtual Color get_ButtonSelectedBorder();
    public virtual Color get_ButtonCheckedGradientBegin();
    public virtual Color get_ButtonCheckedGradientMiddle();
    public virtual Color get_ButtonCheckedGradientEnd();
    public virtual Color get_ButtonSelectedGradientBegin();
    public virtual Color get_ButtonSelectedGradientMiddle();
    public virtual Color get_ButtonSelectedGradientEnd();
    public virtual Color get_ButtonPressedGradientBegin();
    public virtual Color get_ButtonPressedGradientMiddle();
    public virtual Color get_ButtonPressedGradientEnd();
    public virtual Color get_CheckBackground();
    public virtual Color get_CheckSelectedBackground();
    public virtual Color get_CheckPressedBackground();
    public virtual Color get_GripDark();
    public virtual Color get_GripLight();
    public virtual Color get_ImageMarginGradientBegin();
    public virtual Color get_ImageMarginGradientMiddle();
    public virtual Color get_ImageMarginGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientBegin();
    public virtual Color get_ImageMarginRevealedGradientMiddle();
    public virtual Color get_ImageMarginRevealedGradientEnd();
    public virtual Color get_MenuStripGradientBegin();
    public virtual Color get_MenuStripGradientEnd();
    public virtual Color get_MenuItemSelected();
    public virtual Color get_MenuItemBorder();
    public virtual Color get_MenuBorder();
    public virtual Color get_MenuItemSelectedGradientBegin();
    public virtual Color get_MenuItemSelectedGradientEnd();
    public virtual Color get_MenuItemPressedGradientBegin();
    public virtual Color get_MenuItemPressedGradientMiddle();
    public virtual Color get_MenuItemPressedGradientEnd();
    public virtual Color get_RaftingContainerGradientBegin();
    public virtual Color get_RaftingContainerGradientEnd();
    public virtual Color get_SeparatorDark();
    public virtual Color get_SeparatorLight();
    public virtual Color get_StatusStripGradientBegin();
    public virtual Color get_StatusStripGradientEnd();
    public virtual Color get_ToolStripBorder();
    public virtual Color get_ToolStripDropDownBackground();
    public virtual Color get_ToolStripGradientBegin();
    public virtual Color get_ToolStripGradientMiddle();
    public virtual Color get_ToolStripGradientEnd();
    public virtual Color get_ToolStripContentPanelGradientBegin();
    public virtual Color get_ToolStripContentPanelGradientEnd();
    public virtual Color get_ToolStripPanelGradientBegin();
    public virtual Color get_ToolStripPanelGradientEnd();
    public virtual Color get_OverflowButtonGradientBegin();
    public virtual Color get_OverflowButtonGradientMiddle();
    public virtual Color get_OverflowButtonGradientEnd();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Components.TrackFocus : object {
    public static ulong FakeWindowId;
    public IProperty`1<bool> IsEnabled;
    public IProperty`1<bool> IsLoggingAvalon;
    public IProperty`1<bool> UseAutomationForAvalon;
    public IProperty`1<bool> IsLoggingFullChain;
    public IProperty`1<bool> IsLoggingStackTraces;
    public ISimpleSignal FocusChanged;
    public IProperty`1<FocusRecord> Focused;
    public TrackFocus(Lifetime lifetimeGlobal);
    private static TrackFocus();
    public static string GetUserFriendlyName(ulong id);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.Components.UIApplication.ApplicationModalState : object {
    protected Reasons`1<string> ModalStateReasons;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsInModalState>k__BackingField;
    public IProperty`1<bool> IsInModalState { get; }
    public ApplicationModalState(Lifetime lifetime, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsInModalState();
    public virtual void AdvertiseModalState(Lifetime lifetime, string reason);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Components.UIApplication.ApplicationModalStateEx : object {
    [ExtensionAttribute]
public static T WithModalState(IApplicationModalState appModalState, Func`1<T> modalAction);
}
public interface JetBrains.Application.UI.Components.UIApplication.IApplicationModalState {
    public IProperty`1<bool> IsInModalState { get; }
    public abstract virtual IProperty`1<bool> get_IsInModalState();
    public abstract virtual void AdvertiseModalState(Lifetime lifetime, string reason);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Components.UIApplication.UIApplication : UIApplicationSimple {
    [NotNullAttribute]
private IApplicationModalState myApplicationModalState;
    [NotNullAttribute]
private ICommonFileDialogs myFileDialogs;
    [CanBeNullAttribute]
private IMainWindowPopupWindowContext myLazyMainWindowPopupWindowContext;
    [NotNullAttribute]
private ISettingsStore mySettings;
    [NotNullAttribute]
private IShellLocks myShellLocks;
    [NotNullAttribute]
private IWindowsHookManager myWindowsHookManager;
    private IApplicationModalState JetBrains.Application.UI.Components.IUIApplication.ApplicationModalState { get; }
    private ICommonFileDialogs JetBrains.Application.UI.Components.IUIApplication.FileDialogs { get; }
    private IMainWindowPopupWindowContext JetBrains.Application.UI.Components.IUIApplication.MainWindowPopupWindowContext { get; }
    private ISettingsStore JetBrains.Application.UI.Components.IUIApplication.Settings { get; }
    private IShellLocks JetBrains.Application.UI.Components.IUIApplication.ShellLocks { get; }
    private IWindowsHookManager JetBrains.Application.UI.Components.IUIApplication.WindowsHookManager { get; }
    public UIApplication(Lifetime lifetime, ProductConfigurations configurations, IShellLocks locks, ISettingsStore settings, IIsApplicationActiveState isApplicationActiveState, ApplicationIdleEvent applicationIdleEvent, OpensUri opensUri, ICommonFileDialogs filedlg, IMainWindow mainwin, IWindowsHookManager hookman, ITheming theming, IWindowBranding windowBranding, ILogger logger, IApplicationModalState modelState, IMainWindowPopupWindowContext mainWindowPopupWindowContext);
    private sealed virtual override IApplicationModalState JetBrains.Application.UI.Components.IUIApplication.get_ApplicationModalState();
    private sealed virtual override ICommonFileDialogs JetBrains.Application.UI.Components.IUIApplication.get_FileDialogs();
    private sealed virtual override IMainWindowPopupWindowContext JetBrains.Application.UI.Components.IUIApplication.get_MainWindowPopupWindowContext();
    private sealed virtual override ISettingsStore JetBrains.Application.UI.Components.IUIApplication.get_Settings();
    private sealed virtual override IShellLocks JetBrains.Application.UI.Components.IUIApplication.get_ShellLocks();
    private sealed virtual override IWindowsHookManager JetBrains.Application.UI.Components.IUIApplication.get_WindowsHookManager();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple : object {
    private static ReadonlyToken myReadonlyToken;
    private InternalMode myInternalMode;
    private Lifetime myLifetime;
    [NotNullAttribute]
private OpensUri myOpensUri;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Idle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsApplicationActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IMainWindow <MainWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private ITheming <Theming>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowBranding <WindowBranding>k__BackingField;
    [NotNullAttribute]
public ISimpleSignal Idle { get; }
    [NotNullAttribute]
public IProperty`1<bool> IsApplicationActive { get; }
    public bool IsInternalMode { get; }
    [CanBeNullAttribute]
public IMainWindow MainWindow { get; }
    public OpensUri OpensUri { get; }
    public OuterLifetime OuterLifetime { get; }
    [NotNullAttribute]
public ITheming Theming { get; }
    [NotNullAttribute]
public IThreading Threading { get; }
    public IWindowBranding WindowBranding { get; }
    public UIApplicationSimple(Lifetime lifetime, ProductConfigurations configurations, IThreading threading, IIsApplicationActiveState isApplicationActiveState, ApplicationIdleEvent applicationIdleEvent, OpensUri opensUri, IMainWindow mainwin, IWindowsHookManager hookman, ITheming theming, IWindowBranding windowBranding, ILogger logger);
    private static UIApplicationSimple();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Idle();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsApplicationActive();
    public sealed virtual bool get_IsInternalMode();
    [CompilerGeneratedAttribute]
public sealed virtual IMainWindow get_MainWindow();
    public sealed virtual OpensUri get_OpensUri();
    public sealed virtual OuterLifetime get_OuterLifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ITheming get_Theming();
    [CompilerGeneratedAttribute]
public sealed virtual IThreading get_Threading();
    [CompilerGeneratedAttribute]
public sealed virtual IWindowBranding get_WindowBranding();
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Components.UIPreparation : object {
    private TaskCompletionSource`1<UIReady> myTaskCompletionSource;
    public Task Done { get; }
    public UIPreparation(Lifetime lifetime);
    public Task get_Done();
    internal void SetDone(UIReady uiReady);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Components.UIReady : object {
    public UIReady(UIPreparation preparation, IReadyImmutableList`1<IUIPreparer> _);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.BackgroundProgressIndicatorEx : object {
    [ExtensionAttribute]
public static IBackgroundProgressIndicator CreateIndicator(IBackgroundProgressIndicatorManager provider, Lifetime lifetime, IProgressIndicatorModel indicator, string title, Action cancel);
    [ExtensionAttribute]
public static IProgressIndicator CreateBackgroundProgress(IBackgroundProgressIndicatorManager provider, Lifetime lifetime, string title, Action cancel);
    [ExtensionAttribute]
public static IProgressIndicator CreateBackgroundProgress(IBackgroundProgressIndicatorManager provider, LifetimeDefinition lifetimeDefinition, string title);
}
public class JetBrains.Application.UI.Controls.Browser.Interop.COMRECT : object {
    public int bottom;
    public int left;
    public int right;
    public int top;
    public COMRECT(Rectangle r);
    public COMRECT(int left, int top, int right, int bottom);
    public static COMRECT FromXYWH(int x, int y, int width, int height);
    public virtual string ToString();
}
[ComConversionLossAttribute]
public class JetBrains.Application.UI.Controls.Browser.Interop.DOCHOSTUIINFO : ValueType {
    public UInt32 cbSize;
    public UInt32 dwDoubleClick;
    public UInt32 dwFlags;
    [ComConversionLossAttribute]
public IntPtr pchHostCss;
    [ComConversionLossAttribute]
public IntPtr pchHostNS;
}
[ComVisibleAttribute("True")]
[GuidAttribute("79EAC9EE-BAF9-11CE-8C82-00AA004BA90B")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.UI.Controls.Browser.Interop.IInternetSecurityManager {
    public abstract virtual int SetSecuritySite(IntPtr pSite);
    public abstract virtual int GetSecuritySite(IntPtr& pSite);
    public abstract virtual int MapUrlToZone(string pwszUrl, UInt32& pdwZone, UInt32 dwFlags);
    public abstract virtual int GetSecurityId(string pwszUrl, IntPtr pbSecurityId, UInt32& pcbSecurityId, UInt32& dwReserved);
    public abstract virtual int ProcessUrlAction(string pwszUrl, UInt32 dwAction, IntPtr pPolicy, UInt32 cbPolicy, IntPtr pContext, UInt32 cbContext, UInt32 dwFlags, UInt32 dwReserved);
    public abstract virtual int QueryCustomPolicy(string pwszUrl, Guid& guidKey, IntPtr& ppPolicy, UInt32& pcbPolicy, IntPtr pContext, UInt32 cbContext, UInt32 dwReserved);
    public abstract virtual int SetZoneMapping(UInt32 dwZone, string lpszPattern, UInt32 dwFlags);
    public abstract virtual int GetZoneMappings(UInt32 dwZone, IEnumString& ppenumString, UInt32 dwFlags);
}
public static class JetBrains.Application.UI.Controls.Browser.Interop.InterfacesID : object {
    public static string InternetSecurityManager;
}
[ComVisibleAttribute("True")]
[GuidAttribute("6d5140c1-7436-11ce-8034-00aa006009fa")]
[InterfaceTypeAttribute("1")]
public interface JetBrains.Application.UI.Controls.Browser.Interop.IServiceProvider {
    public abstract virtual int QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject);
}
public class JetBrains.Application.UI.Controls.Browser.Interop.MSG : ValueType {
    public IntPtr hwnd;
    public IntPtr lParam;
    public int message;
    public int pt_x;
    public int pt_y;
    public int time;
    public IntPtr wParam;
}
public enum JetBrains.Application.UI.Controls.Browser.Interop.UrlPolicy : Enum {
    public UInt32 value__;
    public static UrlPolicy ALLOW;
    public static UrlPolicy QUERY;
    public static UrlPolicy DISALLOW;
    public static UrlPolicy ACTIVEX_CHECK_LIST;
    public static UrlPolicy CREDENTIALS_SILENT_LOGON_OK;
    public static UrlPolicy CREDENTIALS_MUST_PROMPT_USER;
    public static UrlPolicy CREDENTIALS_CONDITIONAL_PROMPT;
    public static UrlPolicy CREDENTIALS_ANONYMOUS_ONLY;
    public static UrlPolicy AUTHENTICATE_CLEARTEXT_OK;
    public static UrlPolicy AUTHENTICATE_CHALLENGE_RESPONSE;
    public static UrlPolicy AUTHENTICATE_MUTUAL_ONLY;
    public static UrlPolicy JAVA_PROHIBIT;
    public static UrlPolicy JAVA_HIGH;
    public static UrlPolicy JAVA_MEDIUM;
    public static UrlPolicy JAVA_LOW;
    public static UrlPolicy JAVA_CUSTOM;
    public static UrlPolicy CHANNEL_SOFTDIST_PROHIBIT;
    public static UrlPolicy CHANNEL_SOFTDIST_PRECACHE;
    public static UrlPolicy CHANNEL_SOFTDIST_AUTOINSTALL;
    public static UrlPolicy NOTIFY_ON_ALLOW;
    public static UrlPolicy NOTIFY_ON_DISALLOW;
    public static UrlPolicy LOG_ON_ALLOW;
    public static UrlPolicy LOG_ON_DISALLOW;
    public static UrlPolicy DONTCHECKDLGBOX;
}
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.AnchorComparer : object {
    [NullableAttribute("1")]
public static IComparer`1<IAnchor> Default;
    private static AnchorComparer();
    [NullableContextAttribute("2")]
[PureAttribute]
private sealed virtual override int System.Collections.Generic.IComparer<JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor>.Compare(IAnchor left, IAnchor right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.UI.Controls.BulbMenu.Anchors.BulbMenuAnchors : object {
    public static InvisibleAnchor FirstClassContextItems;
    public static InvisibleAnchor PermanentItem;
    public static InvisibleAnchor SecondClassContextItems;
    public static InvisibleAnchor PermanentBackgroundItems;
    public static InvisibleAnchor PermanentRoslynItems;
    private static BulbMenuAnchors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.GroupAnchor : object {
    [CompilerGeneratedAttribute]
private IAnchor <ParentAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchorPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Separate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProduceSubmenu>k__BackingField;
    public IAnchor ParentAnchor { get; }
    public IAnchorPosition Position { get; }
    public RichText Title { get; }
    public bool Separate { get; public set; }
    public bool ProduceSubmenu { get; public set; }
    public GroupAnchor(IAnchor parentAnchor, IAnchorPosition position, RichText title);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchor get_ParentAnchor();
    [CompilerGeneratedAttribute]
public sealed virtual IAnchorPosition get_Position();
    [CompilerGeneratedAttribute]
public RichText get_Title();
    [CompilerGeneratedAttribute]
public bool get_Separate();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Separate(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProduceSubmenu();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProduceSubmenu(bool value);
    public sealed virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey parentKey, IAnchor& groupingAnchor);
    public sealed virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor {
    public IAnchorPosition Position { get; }
    [NullableAttribute("2")]
public IAnchor ParentAnchor { get; }
    public abstract virtual IAnchorPosition get_Position();
    [NullableContextAttribute("2")]
public abstract virtual IAnchor get_ParentAnchor();
    public abstract virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey parentKey, IAnchor& groupingAnchor);
    public abstract virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.InvisibleAnchor : object {
    [CompilerGeneratedAttribute]
private IAnchor <ParentAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchorPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Separate>k__BackingField;
    public IAnchor ParentAnchor { get; }
    public IAnchorPosition Position { get; }
    public bool Separate { get; }
    public InvisibleAnchor(IAnchor parentAnchor, IAnchorPosition position, bool separate);
    public InvisibleAnchor(IAnchor parentAnchor, bool separate);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchor get_ParentAnchor();
    [CompilerGeneratedAttribute]
public sealed virtual IAnchorPosition get_Position();
    [CompilerGeneratedAttribute]
public bool get_Separate();
    [PureAttribute]
public InvisibleAnchor CreateNext(bool separate);
    public sealed virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey parentKey, IAnchor& groupingAnchor);
    public sealed virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.RootAnchor : object {
    public static IAnchor Instance;
    public IAnchorPosition Position { get; }
    [NullableAttribute("2")]
public IAnchor ParentAnchor { get; }
    private static RootAnchor();
    public sealed virtual IAnchorPosition get_Position();
    [NullableContextAttribute("2")]
public sealed virtual IAnchor get_ParentAnchor();
    public sealed virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey parentKey, IAnchor& groupingAnchor);
    public sealed virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.SubmenuAnchor : object {
    [CompilerGeneratedAttribute]
private IAnchor <ParentAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchorPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private SubmenuBehavior <Behavior>k__BackingField;
    public IAnchor ParentAnchor { get; }
    public IAnchorPosition Position { get; }
    public SubmenuBehavior Behavior { get; }
    public SubmenuAnchor(IAnchor parentAnchor, SubmenuBehavior behavior, IAnchorPosition position);
    public SubmenuAnchor(IAnchor parentAnchor, SubmenuBehavior behavior);
    public SubmenuAnchor(IAnchor parentAnchor, RichText text, IconId icon);
    [CompilerGeneratedAttribute]
public sealed virtual IAnchor get_ParentAnchor();
    [CompilerGeneratedAttribute]
public sealed virtual IAnchorPosition get_Position();
    [CompilerGeneratedAttribute]
public SubmenuBehavior get_Behavior();
    public sealed virtual BulbActionKey BuildMenuKey(IAnchor parentGroupingAnchor, BulbActionKey parentKey, IAnchor& groupingAnchor);
    public sealed virtual void PostInitMenuKey(BulbActionKey key, AnchorsTrieNode node);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.Anchors.SubmenuBehavior : object {
    [CompilerGeneratedAttribute]
private RichText <text>P;
    [CompilerGeneratedAttribute]
private IconId <icon>P;
    [CompilerGeneratedAttribute]
private bool <executable>P;
    [CompilerGeneratedAttribute]
private bool <removeFirst>P;
    [NullableAttribute("1")]
public static SubmenuBehavior Executable;
    [NullableAttribute("1")]
public static SubmenuBehavior ExecutableDuplicateFirst;
    [CompilerGeneratedAttribute]
private string <RiderMenuItemId>k__BackingField;
    public string RiderMenuItemId { get; public set; }
    public SubmenuBehavior(RichText text, IconId icon, bool executable, bool removeFirst);
    private static SubmenuBehavior();
    [NullableContextAttribute("1")]
[PureAttribute]
public static SubmenuBehavior Static(RichText text, IconId icon);
    [CompilerGeneratedAttribute]
public string get_RiderMenuItemId();
    [CompilerGeneratedAttribute]
public void set_RiderMenuItemId(string value);
    [NullableContextAttribute("1")]
internal void PostInit(BulbActionKey menuKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.AnchorsTrieNode : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<IAnchor> <SortedAnchors>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private AnchorsTrieNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <ChildrenItems>k__BackingField;
    private Dictionary`2<IAnchor, AnchorsTrieNode> myChildrenAnchors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<IAnchor> SortedAnchors { get; private set; }
    [NullableAttribute("2")]
public IAnchor Anchor { get; }
    [NullableAttribute("2")]
public AnchorsTrieNode Parent { get; private set; }
    public List`1<object> ChildrenItems { get; }
    public IEnumerable`1<IAnchor> Anchors { get; }
    [NullableContextAttribute("2")]
public AnchorsTrieNode(IAnchor anchor);
    [CompilerGeneratedAttribute]
public List`1<IAnchor> get_SortedAnchors();
    [CompilerGeneratedAttribute]
private void set_SortedAnchors(List`1<IAnchor> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IAnchor get_Anchor();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public AnchorsTrieNode get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Parent(AnchorsTrieNode value);
    [CompilerGeneratedAttribute]
public List`1<object> get_ChildrenItems();
    public IEnumerable`1<IAnchor> get_Anchors();
    public AnchorsTrieNode GetOrCreateChild(IAnchor anchor);
    public AnchorsTrieNode GetChildNode(IAnchor anchor);
    public void SortAnchors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.UI.Controls.BulbMenu.BulbKeysBuilder : object {
    public static IReadOnlyCollection`1<BulbActionKey> BuildMenuKeys(IEnumerable`1<BulbMenuItem> menuItems);
    private static void ApplySorting(AnchorsTrieNode node);
    private static void BuildMenuKeys(AnchorsTrieNode node, BulbActionKey key, IAnchor ownerGroupingAnchor);
    private static AnchorsTrieNode BuildAnchorsTrie(IEnumerable`1<BulbMenuItem> menuItems);
    private static List`1<IAnchor> GetPathFromRoot(IBulbMenuItem item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.FeatureSuggestionBulbItems : object {
    public static InvisibleAnchor Anchor;
    private List`1<BulbMenuItem> myItems;
    private static FeatureSuggestionBulbItems();
    public void Add(BulbMenuItem item);
    public void AddRange(BulbMenuItem[] items);
    public BulbMenuItem[] ToArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Controls.BulbMenu.FeatureSuggestionBulbItemsProvider : object {
    private static ReadonlyToken ourCookie;
    [CompilerGeneratedAttribute]
private IProperty`1<FeatureSuggestionBulbItems> <Items>k__BackingField;
    public IProperty`1<FeatureSuggestionBulbItems> Items { get; }
    private static FeatureSuggestionBulbItemsProvider();
    [CompilerGeneratedAttribute]
public IProperty`1<FeatureSuggestionBulbItems> get_Items();
    public BulbMenuItem[] CollectItems(Lifetime menuLifetime);
}
[NullableContextAttribute("2")]
public interface JetBrains.Application.UI.Controls.BulbMenu.IBulbActionWrapper {
    public abstract virtual object Unwrap();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{RichText.ToString(),nq}")]
public class JetBrains.Application.UI.Controls.BulbMenu.Items.BulbMenuItem : object {
    [CompilerGeneratedAttribute]
private IExecutableItem <ExecutableItem>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoExecuteSingleItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotShowGutterMark>k__BackingField;
    public IExecutableItem ExecutableItem { get; }
    public RichText RichText { get; private set; }
    [NullableAttribute("2")]
public IconId IconId { get; }
    public IAnchor Anchor { get; }
    public bool AutoExecuteSingleItem { get; public set; }
    public bool DoNotShowGutterMark { get; public set; }
    public BulbMenuItem(IExecutableItem executableItem, RichText richText, IconId iconId, IAnchor anchor);
    [ObsoleteAttribute("To be removed, use init-only props instead")]
[PublicAPIAttribute]
public BulbMenuItem(IExecutableItem executableItem, RichText richText, IconId iconId, IAnchor anchor, bool autoExecuteSingleItem, bool doNotShowGutterMark);
    [CompilerGeneratedAttribute]
public sealed virtual IExecutableItem get_ExecutableItem();
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_RichText();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RichText(RichText value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IconId get_IconId();
    [CompilerGeneratedAttribute]
public sealed virtual IAnchor get_Anchor();
    [CompilerGeneratedAttribute]
public bool get_AutoExecuteSingleItem();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AutoExecuteSingleItem(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DoNotShowGutterMark();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DoNotShowGutterMark(bool value);
}
public class JetBrains.Application.UI.Controls.BulbMenu.Items.ExecutableItem : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Action <action>P;
    [NullableContextAttribute("1")]
public ExecutableItem(Action action);
    public sealed virtual void Execute();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.UI.Controls.BulbMenu.Items.IBulbMenuItem {
    public IExecutableItem ExecutableItem { get; }
    public RichText RichText { get; }
    public IAnchor Anchor { get; }
    [NullableAttribute("2")]
public IconId IconId { get; }
    public bool DoNotShowGutterMark { get; }
    public abstract virtual IExecutableItem get_ExecutableItem();
    public abstract virtual RichText get_RichText();
    public abstract virtual IAnchor get_Anchor();
    [NullableContextAttribute("2")]
public abstract virtual IconId get_IconId();
    public abstract virtual bool get_DoNotShowGutterMark();
}
public interface JetBrains.Application.UI.Controls.BulbMenu.Items.IExecutableItem {
    public abstract virtual void Execute();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.Controls.BulbMenu.Keys.BulbActionKey : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IAnchor <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private BulbActionKey <ParentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutableItem <Executable>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RiderMenuItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGroupHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchor <GroupingAnchor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<BulbActionKey> <Subitems>k__BackingField;
    [NullableAttribute("1")]
public IAnchor Anchor { get; }
    public BulbActionKey ParentKey { get; public set; }
    public IExecutableItem Executable { get; public set; }
    public RichText RichText { get; public set; }
    public IconId IconId { get; public set; }
    public string RiderMenuItemId { get; public set; }
    public bool IsSeparator { get; public set; }
    public bool IsGroupHeader { get; public set; }
    public IAnchor GroupingAnchor { get; public set; }
    [NullableAttribute("1")]
public List`1<BulbActionKey> Subitems { get; }
    [NullableContextAttribute("1")]
public BulbActionKey(BulbActionKey ownerKey, IAnchor anchor);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IAnchor get_Anchor();
    [CompilerGeneratedAttribute]
public BulbActionKey get_ParentKey();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParentKey(BulbActionKey value);
    [CompilerGeneratedAttribute]
public IExecutableItem get_Executable();
    [CompilerGeneratedAttribute]
public void set_Executable(IExecutableItem value);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
public void set_RichText(RichText value);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public void set_IconId(IconId value);
    [CompilerGeneratedAttribute]
public string get_RiderMenuItemId();
    [CompilerGeneratedAttribute]
public void set_RiderMenuItemId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSeparator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsSeparator(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGroupHeader();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsGroupHeader(bool value);
    [CompilerGeneratedAttribute]
public IAnchor get_GroupingAnchor();
    [CompilerGeneratedAttribute]
public void set_GroupingAnchor(IAnchor value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<BulbActionKey> get_Subitems();
    [NullableContextAttribute("1")]
public void WriteTo(TextWriter writer, string indent);
    [NullableContextAttribute("1")]
public void DescribeOn(IMenuItemDescriptor descriptor);
    public void Clicked();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.BulbMenu.Positions.AnchorPosition : object {
    public static IAnchorPosition BeforePosition;
    public static IAnchorPosition AfterPosition;
    public static IAnchorPosition Undefined;
    private static AnchorPosition();
    [ExtensionAttribute]
[PureAttribute]
internal static string PresentPositionInRoot(IAnchor anchor);
    public static List`1<long> GetSerializableOrderVector(IAnchor anchor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.Application.UI.Controls.BulbMenu.Positions.AnchorPositionNumeric : object {
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    private static long FirstBeforePosition;
    public static IAnchorPosition BeforePosition;
    public static IAnchorPosition AfterPosition;
    public static IAnchorPosition UndefinedPosition;
    private static IAnchorPosition ourPosition2;
    private static IAnchorPosition ourPosition3;
    private static IAnchorPosition ourPosition4;
    public long Position { get; }
    public bool IsBefore { get; }
    private AnchorPositionNumeric(long position);
    private static AnchorPositionNumeric();
    [CompilerGeneratedAttribute]
public sealed virtual long get_Position();
    public sealed virtual bool get_IsBefore();
    [PureAttribute]
public sealed virtual IAnchorPosition GetNext();
    public sealed virtual int CompareTo(IAnchorPosition other);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface JetBrains.Application.UI.Controls.BulbMenu.Positions.IAnchorPosition {
    public long Position { get; }
    public bool IsBefore { get; }
    public abstract virtual long get_Position();
    public abstract virtual bool get_IsBefore();
    [PureAttribute]
public abstract virtual IAnchorPosition GetNext();
}
public static class JetBrains.Application.UI.Controls.Caption.CaptionUtil : object {
    private static int Ceiling(double d);
    public static Size GetStringRect(string s, Graphics g, Font f);
    public static string CalculateString(string s, Graphics g, Font f, int maxWidth);
    public static string CalculateSpaces(int width, Graphics g, Font f);
}
public class JetBrains.Application.UI.Controls.CheckBoxAutomation : object {
    private static object myTokenSettingTextFromContent;
    private IProperty`1<bool> myIsAppearingChecked;
    private IProperty`1<bool> myIsCheckedLogically;
    private Property`1<bool> myIsEnabled;
    private Property`1<bool> myIsVisible;
    private IProperty`1<RichText> myText;
    private IProperty`1<Nullable`1<bool>> myIsCheckedForChildControl;
    private IProperty`1<bool> myShouldBeDisabled;
    private IProperty`1<bool> myShouldBeHidden;
    public IProperty`1<RichText> Text { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsCheckedLogically { get; }
    public IProperty`1<bool> IsAppearingChecked { get; }
    private IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxAutomation.IsCheckedForChildControl { get; }
    public IProperty`1<bool> ShouldBeHidden { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public CheckBoxAutomation(Lifetime lifetime);
    public CheckBoxAutomation(Lifetime lifetime, RichText text);
    private static CheckBoxAutomation();
    private void InitBinding(Lifetime lifetime);
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<RichText> get_Text();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsVisible();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabled();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckedLogically();
    [DebuggerStepThroughAttribute]
public sealed virtual IProperty`1<bool> get_IsAppearingChecked();
    private sealed virtual override IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxAutomation.get_IsCheckedForChildControl();
    public sealed virtual IProperty`1<bool> get_ShouldBeHidden();
    public sealed virtual IProperty`1<bool> get_ShouldBeDisabled();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Application.UI.Controls.Common.MarginAutomation : AAutomation {
    public IProperty`1<IAutomation> Content;
    public IProperty`1<JetThickness> Margin;
    public MarginAutomation(IAutomation content);
    public MarginAutomation(IAutomation content, JetThickness margin);
}
internal class JetBrains.Application.UI.Controls.Common.PopupService : object {
}
internal class JetBrains.Application.UI.Controls.Common.Spinner : object {
}
public class JetBrains.Application.UI.Controls.ContextMenuEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Point <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MouseEvent>k__BackingField;
    public Point Location { get; }
    public bool MouseEvent { get; }
    public ContextMenuEventArgs(Point location, bool mouseEvent);
    [CompilerGeneratedAttribute]
public Point get_Location();
    [CompilerGeneratedAttribute]
public bool get_MouseEvent();
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.Controls.Dialogs.DummyPromptWinForms : object {
    public virtual string Prompt(IWin32Window parentWindow, string title, string label, string defaultValue, Func`2<string, string> validator);
}
public interface JetBrains.Application.UI.Controls.Dialogs.IPromptWinForm {
    [CanBeNullAttribute]
public abstract virtual string Prompt(IWin32Window parentWindow, string title, string label, string defaultValue, Func`2<string, string> validator);
}
public interface JetBrains.Application.UI.Controls.Dialogs.IViewService {
    [ObsoleteAttribute]
public abstract virtual ControlWrapper Create(object content);
    [ObsoleteAttribute]
public abstract virtual object Show(ControlWrapper dialog);
    [ObsoleteAttribute]
public abstract virtual Task`1<object> ShowAsync(ControlWrapper dialog);
    public abstract virtual object Show(object content);
    public abstract virtual Task`1<object> ShowAsync(object content);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ToggleAutoHideActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.AutoHideAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CloseAllActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.CloseAllFramesAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CloseActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.CloseFrameAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.Application.UI.Controls.Dock.Actions.DockActionGroup : object {
    public DockActionGroup(FloatAction floatAction, CloseFrameAction closeFrameAction, CloseAllFramesAction closeAllFramesAction, DockAsDocumentAction dockAsDocumentAction, AutoHideAction autoHideAction);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "DockAsDocumentActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.DockAsDocumentAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Dock as Tool window")]
public class JetBrains.Application.UI.Controls.Dock.Actions.DockAsToolAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public static class JetBrains.Application.UI.Controls.Dock.Actions.DockConstants : object {
    public static DataConstant`1<DockFrame> DockFrame;
    public static DataConstant`1<DockFrameContainer> DockFrameContainer;
    public static DataConstant`1<DockWindow> DockWindow;
    private static DockConstants();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "FloatActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.FloatAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "MaximizeToolWindowActionActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.MaximizeRestoreToolWindowAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "MaximizeToolWindowActionActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.MaximizeToolWindowAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "RestoreActionText")]
public class JetBrains.Application.UI.Controls.Dock.Actions.RestoreToolWindowAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Area.DockAreaProviders : object {
    private Dictionary`2<DockPlacementLocation, IDockTargetAreaProvider> myTargetAreaProviders;
    [CompilerGeneratedAttribute]
private DockPlacementLocation <PlacementOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private DockPlacementLocation <HighlightedOverlay>k__BackingField;
    [CompilerGeneratedAttribute]
private IDockTargetAreaProvider <BoundsProvider>k__BackingField;
    public DockPlacementLocation PlacementOverlay { get; public set; }
    public DockPlacementLocation HighlightedOverlay { get; public set; }
    public IDockTargetAreaProvider BoundsProvider { get; private set; }
    public IReadOnlyDictionary`2<DockPlacementLocation, IDockTargetAreaProvider> TargetAreaProviders { get; }
    [CompilerGeneratedAttribute]
public DockPlacementLocation get_PlacementOverlay();
    [CompilerGeneratedAttribute]
public void set_PlacementOverlay(DockPlacementLocation value);
    [CompilerGeneratedAttribute]
public DockPlacementLocation get_HighlightedOverlay();
    [CompilerGeneratedAttribute]
public void set_HighlightedOverlay(DockPlacementLocation value);
    [CompilerGeneratedAttribute]
public IDockTargetAreaProvider get_BoundsProvider();
    [CompilerGeneratedAttribute]
private void set_BoundsProvider(IDockTargetAreaProvider value);
    public IReadOnlyDictionary`2<DockPlacementLocation, IDockTargetAreaProvider> get_TargetAreaProviders();
    public void SetTargetAreaProvider(DockPlacementLocation location, IDockTargetAreaProvider provider);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Area.DockTargetArea : object {
    [CompilerGeneratedAttribute]
private static DockTargetArea <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    public static DockTargetArea Default { get; }
    public double Left { get; }
    public double Top { get; }
    public double Right { get; }
    public double Bottom { get; }
    public DockTargetArea(double left, double top, double right, double bottom);
    private static DockTargetArea();
    [CompilerGeneratedAttribute]
public static DockTargetArea get_Default();
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
public double get_Right();
    [CompilerGeneratedAttribute]
public double get_Bottom();
    public bool Contains(double x, double y);
}
public interface JetBrains.Application.UI.Controls.Dock.Layout.Area.IDockTargetAreaProvider {
    public DockTargetArea Area { get; }
    public abstract virtual DockTargetArea get_Area();
}
public enum JetBrains.Application.UI.Controls.Dock.Layout.Common.DockAutoHideLocation : Enum {
    public int value__;
    public static DockAutoHideLocation None;
    public static DockAutoHideLocation Left;
    public static DockAutoHideLocation Right;
    public static DockAutoHideLocation Top;
    public static DockAutoHideLocation Bottom;
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Controls.Dock.Layout.Common.DockPlacementLocation : Enum {
    public int value__;
    public static DockPlacementLocation None;
    public static DockPlacementLocation SameContainer;
    public static DockPlacementLocation SplitLeft;
    public static DockPlacementLocation SplitRight;
    public static DockPlacementLocation SplitTop;
    public static DockPlacementLocation SplitBottom;
    public static DockPlacementLocation Split;
    public static DockPlacementLocation AttachLeft;
    public static DockPlacementLocation AttachRight;
    public static DockPlacementLocation AttachTop;
    public static DockPlacementLocation AttachBottom;
    public static DockPlacementLocation Attach;
    public static DockPlacementLocation EdgeLeft;
    public static DockPlacementLocation EdgeRight;
    public static DockPlacementLocation EdgeTop;
    public static DockPlacementLocation EdgeBottom;
    public static DockPlacementLocation Edge;
    public static DockPlacementLocation Vertical;
    public static DockPlacementLocation Horizontal;
}
public enum JetBrains.Application.UI.Controls.Dock.Layout.Common.DockSplitOrientation : Enum {
    public int value__;
    public static DockSplitOrientation Horizontal;
    public static DockSplitOrientation Vertical;
}
public enum JetBrains.Application.UI.Controls.Dock.Layout.Common.DockSplitPlacement : Enum {
    public int value__;
    public static DockSplitPlacement Left;
    public static DockSplitPlacement Right;
    public static DockSplitPlacement Top;
    public static DockSplitPlacement Bottom;
}
public interface JetBrains.Application.UI.Controls.Dock.Layout.Common.IDockLayoutRectangleElement {
    public DockAreaProviders AreaProviders { get; }
    public DockPlacementLocation PlacementOverlay { get; public set; }
    public DockPlacementLocation HighlightedOverlay { get; public set; }
    public abstract virtual DockAreaProviders get_AreaProviders();
    public abstract virtual DockPlacementLocation get_PlacementOverlay();
    public abstract virtual void set_PlacementOverlay(DockPlacementLocation value);
    public abstract virtual DockPlacementLocation get_HighlightedOverlay();
    public abstract virtual void set_HighlightedOverlay(DockPlacementLocation value);
    public abstract virtual void Activate();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.Dock.Layout.Common.LayoutExtensions : object {
    [ExtensionAttribute]
public static bool IsOpposite(DockAutoHideLocation autoHideLocation, DockAutoHideLocation other);
    [ExtensionAttribute]
public static DockAutoHideLocation GetAutoHideLocation(DockFrameContainer frameContainer);
    [ExtensionAttribute]
public static DockPlacementLocation GetAvailablePlacementLocations(DockFrameContainer container, DockFrame frame);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Common.WindowCreatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DockWindow <Window>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FloatWindow>k__BackingField;
    public DockWindow Window { get; }
    public bool FloatWindow { get; }
    public WindowCreatedEventArgs(DockWindow window, bool floatWindow);
    [CompilerGeneratedAttribute]
public DockWindow get_Window();
    [CompilerGeneratedAttribute]
public bool get_FloatWindow();
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Common.WindowEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DockWindow <Window>k__BackingField;
    public DockWindow Window { get; }
    public WindowEventArgs(DockWindow window);
    [CompilerGeneratedAttribute]
public DockWindow get_Window();
}
public class JetBrains.Application.UI.Controls.Dock.Layout.ContainerSizeCalculator : object {
    public static void AdjustContainerSizes(DockContainer newItem, IReadOnlyList`1<DockContainer> otherItems, Nullable`1<DockSplitOrientation> orientation);
}
public abstract class JetBrains.Application.UI.Controls.Dock.Layout.DockContainer : object {
    private DockSplitContainer myContainer;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private double <SplitProportion>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private DockWindow <Window>k__BackingField;
    public double SplitProportion { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double DesiredWidth { get; }
    public double DesiredHeight { get; }
    public bool IsTitleVisible { get; }
    public DockSplitContainer Container { get; internal set; }
    public IEnumerable`1<DockFrame> AllFrames { get; }
    public IEnumerable`1<DockFrameContainer> AllFrameContainers { get; }
    public ContainerDescriptorDebug DebugSerializationData { get; }
    public ContainerDescriptor SerializationData { get; public set; }
    public DockWindow Window { get; }
    public bool IsDocumentArea { get; }
    public bool ContainsDocumentArea { get; }
    public bool IsVisible { get; }
    public bool ShouldFill { get; }
    protected DockContainer(DockWindow window);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public double get_SplitProportion();
    [CompilerGeneratedAttribute]
public void set_SplitProportion(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public abstract virtual double get_DesiredWidth();
    public abstract virtual double get_DesiredHeight();
    public bool get_IsTitleVisible();
    public DockSplitContainer get_Container();
    internal void set_Container(DockSplitContainer value);
    public abstract virtual IEnumerable`1<DockFrame> get_AllFrames();
    public abstract virtual IEnumerable`1<DockFrameContainer> get_AllFrameContainers();
    public abstract virtual ContainerDescriptorDebug get_DebugSerializationData();
    public abstract virtual ContainerDescriptor get_SerializationData();
    public abstract virtual void set_SerializationData(ContainerDescriptor value);
    [CompilerGeneratedAttribute]
public DockWindow get_Window();
    public abstract virtual bool get_IsDocumentArea();
    public abstract virtual bool get_ContainsDocumentArea();
    public abstract virtual bool get_IsVisible();
    public bool get_ShouldFill();
    [NotifyPropertyChangedInvocatorAttribute]
protected void OnPropertyChanged(string propertyName);
    internal virtual void OnUpdate();
    protected virtual void OnContainerChanged();
}
public class JetBrains.Application.UI.Controls.Dock.Layout.DockFrame : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private CancelEventHandler RequestClose;
    private bool myIsDocument;
    private string myId;
    private string myTitle;
    private string myFileName;
    private double myWidth;
    private double myHeight;
    private object myContent;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private DockFrameContainer <Container>k__BackingField;
    public string Id { get; private set; }
    public bool IsDocument { get; private set; }
    public bool IsActive { get; private set; }
    public bool IsLastActive { get; public set; }
    public bool IsVisible { get; public set; }
    public string Title { get; public set; }
    public string FileName { get; public set; }
    public DockFrameContainer Container { get; internal set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public object Content { get; public set; }
    public FrameDescriptorDebug DebugSerializationData { get; }
    public FrameDescriptor SerializationData { get; public set; }
    internal DockFrame(string id, bool isDocument);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RequestClose(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RequestClose(CancelEventHandler value);
    public string get_Id();
    private void set_Id(string value);
    public bool get_IsDocument();
    private void set_IsDocument(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLastActive();
    [CompilerGeneratedAttribute]
public void set_IsLastActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    public string get_Title();
    public void set_Title(string value);
    public string get_FileName();
    public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public DockFrameContainer get_Container();
    [CompilerGeneratedAttribute]
internal void set_Container(DockFrameContainer value);
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public object get_Content();
    public void set_Content(object value);
    public FrameDescriptorDebug get_DebugSerializationData();
    public FrameDescriptor get_SerializationData();
    public void set_SerializationData(FrameDescriptor value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged(string propertyName);
    public void Deactivate();
    public void Activate();
    private void Activate(bool force);
    internal void Close(bool force);
    internal void SetFrameContainer(DockFrameContainer newContainer, bool activate);
    public void HideOrCloseDocument();
    public void RequestHideOrCloseDocument();
    internal void OnUpdate();
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules();
    [CompilerGeneratedAttribute]
private bool <Activate>b__59_0(DockFrame x);
    [CompilerGeneratedAttribute]
private bool <Activate>b__59_1(DockFrame x);
    [CompilerGeneratedAttribute]
private bool <Close>b__60_0(DockFrame x);
    [CompilerGeneratedAttribute]
private bool <SetFrameContainer>b__61_0(DockFrame x);
    [CompilerGeneratedAttribute]
private DockFrame <JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules>b__65_0(IDataContext _);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.DockFrameContainer : DockContainer {
    private ObservableCollection`1<DockFrame> myFrames;
    private bool myIsPinned;
    private DockAreaProviders myDockAreaProviders;
    private bool myIsDocumentArea;
    public DockAreaProviders AreaProviders { get; }
    public bool IsVisible { get; }
    public IEnumerable`1<DockFrame> AllFrames { get; }
    public DockFrame ActiveFrame { get; }
    public IEnumerable`1<DockFrameContainer> AllFrameContainers { get; }
    public bool IsPinned { get; public set; }
    public double DesiredWidth { get; }
    public double DesiredHeight { get; }
    public ContainerDescriptorDebug DebugSerializationData { get; }
    public ContainerDescriptor SerializationData { get; public set; }
    public DockPlacementLocation PlacementOverlay { get; public set; }
    public DockPlacementLocation HighlightedOverlay { get; public set; }
    public bool IsDocumentArea { get; }
    public bool ContainsDocumentArea { get; }
    public IReadOnlyList`1<DockFrame> Frames { get; }
    public bool HasMultipleFrames { get; }
    public DockFrameContainer(DockWindow window, bool isDocumentArea);
    public sealed virtual DockAreaProviders get_AreaProviders();
    public virtual bool get_IsVisible();
    public virtual IEnumerable`1<DockFrame> get_AllFrames();
    public DockFrame get_ActiveFrame();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Controls.Dock.Layout.DockFrameContainer/<get_AllFrameContainers>d__12")]
public virtual IEnumerable`1<DockFrameContainer> get_AllFrameContainers();
    public bool get_IsPinned();
    public void set_IsPinned(bool value);
    public virtual double get_DesiredWidth();
    public virtual double get_DesiredHeight();
    public virtual ContainerDescriptorDebug get_DebugSerializationData();
    public virtual ContainerDescriptor get_SerializationData();
    public virtual void set_SerializationData(ContainerDescriptor value);
    public sealed virtual DockPlacementLocation get_PlacementOverlay();
    public sealed virtual void set_PlacementOverlay(DockPlacementLocation value);
    public sealed virtual DockPlacementLocation get_HighlightedOverlay();
    public sealed virtual void set_HighlightedOverlay(DockPlacementLocation value);
    public virtual bool get_IsDocumentArea();
    public virtual bool get_ContainsDocumentArea();
    public IReadOnlyList`1<DockFrame> get_Frames();
    public bool get_HasMultipleFrames();
    public void TogglePinned();
    internal void PlaceDock(DockFrame frame, DockPlacementLocation location, bool activate);
    public void HideAndCloseDocuments();
    internal void RemoveFrame(DockFrame frame);
    internal void AddFrame(DockFrame frame);
    public sealed virtual void Activate();
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules();
    internal virtual void OnUpdate();
    protected virtual void OnContainerChanged();
    [CompilerGeneratedAttribute]
private DockFrame <JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules>b__47_0(IDataContext _);
    [CompilerGeneratedAttribute]
private DockFrameContainer <JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules>b__47_1(IDataContext _);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.DockLayout : object {
    public static int Version;
    private ObservableCollection`1<DockWindow> myWindows;
    [CompilerGeneratedAttribute]
private EventHandler`1<WindowCreatedEventArgs> WindowCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<WindowEventArgs> WindowClosed;
    [CompilerGeneratedAttribute]
private EventHandler`1<WindowEventArgs> WindowActivated;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private static ILogger ourLogger;
    public IReadOnlyList`1<DockWindow> Windows { get; }
    public IReadOnlyCollection`1<DockFrame> Frames { get; }
    public DockWindow MainWindow { get; }
    public DockFrameContainer PreferredDocumentContainer { get; }
    public LayoutDescriptorDebug DebugSerializationData { get; }
    public LayoutDescriptor SerializationData { get; public set; }
    private static DockLayout();
    [CompilerGeneratedAttribute]
public void add_WindowCreated(EventHandler`1<WindowCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WindowCreated(EventHandler`1<WindowCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WindowClosed(EventHandler`1<WindowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WindowClosed(EventHandler`1<WindowEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_WindowActivated(EventHandler`1<WindowEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_WindowActivated(EventHandler`1<WindowEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public IReadOnlyList`1<DockWindow> get_Windows();
    public IReadOnlyCollection`1<DockFrame> get_Frames();
    public DockWindow get_MainWindow();
    public DockFrameContainer get_PreferredDocumentContainer();
    public DockFrame CreateFrame(string id, object content, bool isDocument, double width, double height, bool activate);
    public DockWindow CreateWindow(bool document, double width, double height);
    internal DockWindow CreateWindow(bool document, bool isMain, bool empty, bool floatWindow, double width, double height, bool noEvent);
    public void DragOverWindow(double x, double y, DockFrame draggedFrame, bool drop);
    public void DragOverWindow(double x, double y, DockFrameContainer frameContainer, bool drop);
    public void DragOverWindow(double x, double y, DockWindow draggedWindow, bool drop);
    public LayoutDescriptorDebug get_DebugSerializationData();
    public LayoutDescriptor get_SerializationData();
    public void set_SerializationData(LayoutDescriptor value);
    internal void ActivateWindow(DockWindow window);
    internal void WindowOnClosed(DockWindow window);
    public void Delete(DockFrame frame);
    public void Float(DockFrame frame);
    public void Float(DockFrameContainer frameContainer);
    private void DragOverWindow(double x, double y, bool onlyInactive, DockFrame draggedFrame, DockFrameContainer draggedFrameContainer, DockWindow draggedWindow, bool drop);
    [NotifyPropertyChangedInvocatorAttribute]
protected void OnPropertyChanged(string propertyName);
    internal void Log();
}
public class JetBrains.Application.UI.Controls.Dock.Layout.DockSplitContainer : DockContainer {
    private Nullable`1<DockSplitOrientation> myOrientation;
    private ContentCollections myContentCollections;
    public IReadOnlyList`1<DockContainer> VisibleContent { get; }
    public IReadOnlyList`1<DockContainer> Content { get; }
    public bool IsVisible { get; }
    public IEnumerable`1<DockFrame> AllFrames { get; }
    public IEnumerable`1<DockFrameContainer> AllFrameContainers { get; }
    public Nullable`1<DockSplitOrientation> Orientation { get; private set; }
    public double DesiredWidth { get; }
    public double DesiredHeight { get; }
    public ContainerDescriptorDebug DebugSerializationData { get; }
    public ContainerDescriptor SerializationData { get; public set; }
    public bool IsDocumentArea { get; }
    public bool ContainsDocumentArea { get; }
    internal DockSplitContainer(DockWindow window, DockFrameContainer initialContent);
    public IReadOnlyList`1<DockContainer> get_VisibleContent();
    public IReadOnlyList`1<DockContainer> get_Content();
    public virtual bool get_IsVisible();
    public virtual IEnumerable`1<DockFrame> get_AllFrames();
    public virtual IEnumerable`1<DockFrameContainer> get_AllFrameContainers();
    public Nullable`1<DockSplitOrientation> get_Orientation();
    private void set_Orientation(Nullable`1<DockSplitOrientation> value);
    public virtual double get_DesiredWidth();
    public virtual double get_DesiredHeight();
    public virtual ContainerDescriptorDebug get_DebugSerializationData();
    public virtual ContainerDescriptor get_SerializationData();
    public virtual void set_SerializationData(ContainerDescriptor value);
    public virtual bool get_IsDocumentArea();
    public virtual bool get_ContainsDocumentArea();
    internal virtual void OnUpdate();
    internal void Split(DockContainer splittedItem, DockContainer insertedItem, DockSplitPlacement location, bool addToEdge, bool skipDocumentCheck, bool attach);
    private static void SetContainer(DockContainer item, DockSplitContainer container);
    internal static void SetContainer(DockContainer item, DockSplitContainer container, int index);
    private static void SetContainer(IReadOnlyList`1<DockContainer> items, DockSplitContainer container, int index);
    private void RemoveItem(DockContainer item, bool keepHierarchy);
    [CompilerGeneratedAttribute]
private bool <get_SerializationData>b__23_0(DockContainer x);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.DockWindow : object {
    private DockSplitContainer myRoot;
    private double myX;
    private double myY;
    private double myWidth;
    private double myHeight;
    private bool myIsMaximized;
    private DockAreaProviders myDockAreaProviders;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private bool <IsMain>k__BackingField;
    [CompilerGeneratedAttribute]
private DockLayout <DockLayout>k__BackingField;
    private WindowUpdateContext myUpdateContext;
    public bool IsMain { get; }
    public bool IsMaximized { get; public set; }
    public DockLayout DockLayout { get; }
    public DockAreaProviders AreaProviders { get; }
    public bool IsVisible { get; }
    public DockPlacementLocation PlacementOverlay { get; public set; }
    public DockPlacementLocation HighlightedOverlay { get; public set; }
    public IReadOnlyCollection`1<DockFrame> ActiveFrames { get; }
    public DockFrame ActiveAutoHideFrame { get; }
    public DockFrame TitleFrame { get; }
    public DockSplitContainer Root { get; private set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public IEnumerable`1<DockFrame> LeftAutoHide { get; }
    public IEnumerable`1<DockFrame> RightAutoHide { get; }
    public IEnumerable`1<DockFrame> TopAutoHide { get; }
    public IEnumerable`1<DockFrame> BottomAutoHide { get; }
    public IEnumerable`1<DockFrameContainer> FrameContainers { get; }
    public IEnumerable`1<DockFrame> Frames { get; }
    public WindowDescriptorDebug DebugSerializationData { get; }
    public WindowDescriptor SerializationData { get; public set; }
    internal DockWindow(DockLayout layout, bool document, bool isMain, bool empty, double width, double height);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public bool get_IsMain();
    public bool get_IsMaximized();
    public void set_IsMaximized(bool value);
    [CompilerGeneratedAttribute]
public DockLayout get_DockLayout();
    public sealed virtual DockAreaProviders get_AreaProviders();
    public bool get_IsVisible();
    public sealed virtual DockPlacementLocation get_PlacementOverlay();
    public sealed virtual void set_PlacementOverlay(DockPlacementLocation value);
    public sealed virtual DockPlacementLocation get_HighlightedOverlay();
    public sealed virtual void set_HighlightedOverlay(DockPlacementLocation value);
    public IReadOnlyCollection`1<DockFrame> get_ActiveFrames();
    public DockFrame get_ActiveAutoHideFrame();
    public DockFrame get_TitleFrame();
    public DockSplitContainer get_Root();
    private void set_Root(DockSplitContainer value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public IEnumerable`1<DockFrame> get_LeftAutoHide();
    public IEnumerable`1<DockFrame> get_RightAutoHide();
    public IEnumerable`1<DockFrame> get_TopAutoHide();
    public IEnumerable`1<DockFrame> get_BottomAutoHide();
    public IEnumerable`1<DockFrameContainer> get_FrameContainers();
    private IEnumerable`1<DockFrame> AutoHideFrames(DockAutoHideLocation location);
    public IEnumerable`1<DockFrame> get_Frames();
    public WindowDescriptorDebug get_DebugSerializationData();
    public WindowDescriptor get_SerializationData();
    public void set_SerializationData(WindowDescriptor value);
    internal void Close();
    public void HideAndCloseDocuments();
    public sealed virtual void Activate();
    [NotifyPropertyChangedInvocatorAttribute]
protected void OnPropertyChanged(string propertyName);
    private sealed virtual override IEnumerable`1<IDataRule> JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules();
    internal IDisposable GetWindowUpdateContext();
    private void OnUpdate();
    [CompilerGeneratedAttribute]
private DockWindow <JetBrains.Application.DataContext.IDataRuleProvider.GetDataRules>b__73_0(IDataContext x);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.ContainerDescriptor : object {
    [CompilerGeneratedAttribute]
private ContainerType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SplitProportion>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPinned>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsDocumentArea>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FrameDescriptor> <Frames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DockSplitOrientation> <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContainerDescriptor> <Items>k__BackingField;
    [JsonPropertyAttribute("type")]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public ContainerType Type { get; public set; }
    [JsonPropertyAttribute("splitProportion")]
public double SplitProportion { get; public set; }
    [JsonPropertyAttribute("width")]
public double Width { get; public set; }
    [JsonPropertyAttribute("height")]
public double Height { get; public set; }
    [JsonPropertyAttribute("isPinned")]
public bool IsPinned { get; public set; }
    [JsonPropertyAttribute("isDocumentArea")]
public Nullable`1<bool> IsDocumentArea { get; public set; }
    [JsonPropertyAttribute("frames")]
public List`1<FrameDescriptor> Frames { get; public set; }
    [JsonPropertyAttribute("orientation")]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public Nullable`1<DockSplitOrientation> Orientation { get; public set; }
    [JsonPropertyAttribute("items")]
public List`1<ContainerDescriptor> Items { get; public set; }
    [CompilerGeneratedAttribute]
public ContainerType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ContainerType value);
    [CompilerGeneratedAttribute]
public double get_SplitProportion();
    [CompilerGeneratedAttribute]
public void set_SplitProportion(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public bool get_IsPinned();
    [CompilerGeneratedAttribute]
public void set_IsPinned(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsDocumentArea();
    [CompilerGeneratedAttribute]
public void set_IsDocumentArea(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<FrameDescriptor> get_Frames();
    [CompilerGeneratedAttribute]
public void set_Frames(List`1<FrameDescriptor> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DockSplitOrientation> get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Nullable`1<DockSplitOrientation> value);
    [CompilerGeneratedAttribute]
public List`1<ContainerDescriptor> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<ContainerDescriptor> value);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.ContainerDescriptorDebug : ContainerDescriptor {
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DesiredWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DesiredHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bounds>k__BackingField;
    [JsonPropertyAttribute("isVisible")]
public bool IsVisible { get; public set; }
    [JsonPropertyAttribute("desiredWidth")]
public double DesiredWidth { get; public set; }
    [JsonPropertyAttribute("desiredHeight")]
public double DesiredHeight { get; public set; }
    [JsonPropertyAttribute("bounds")]
public string Bounds { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public double get_DesiredWidth();
    [CompilerGeneratedAttribute]
public void set_DesiredWidth(double value);
    [CompilerGeneratedAttribute]
public double get_DesiredHeight();
    [CompilerGeneratedAttribute]
public void set_DesiredHeight(double value);
    [CompilerGeneratedAttribute]
public string get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(string value);
}
public enum JetBrains.Application.UI.Controls.Dock.Layout.Serialization.ContainerType : Enum {
    public int value__;
    public static ContainerType Split;
    public static ContainerType Frame;
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.FrameDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [JsonPropertyAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyAttribute("isDocument")]
public bool IsDocument { get; public set; }
    [JsonPropertyAttribute("width")]
public double Width { get; public set; }
    [JsonPropertyAttribute("height")]
public double Height { get; public set; }
    [JsonPropertyAttribute("isActive")]
public bool IsActive { get; public set; }
    [JsonPropertyAttribute("isHidden")]
public bool IsHidden { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDocument();
    [CompilerGeneratedAttribute]
public void set_IsDocument(bool value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.FrameDescriptorDebug : FrameDescriptor {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLastActive>k__BackingField;
    [JsonPropertyAttribute("fileName")]
public string FileName { get; public set; }
    [JsonPropertyAttribute("title")]
public string Title { get; public set; }
    [JsonPropertyAttribute("isLastActive")]
public bool IsLastActive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLastActive();
    [CompilerGeneratedAttribute]
public void set_IsLastActive(bool value);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.LayoutDescriptor : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WindowDescriptor> <Windows>k__BackingField;
    [JsonPropertyAttribute("version")]
public int Version { get; public set; }
    [JsonPropertyAttribute("windows")]
public List`1<WindowDescriptor> Windows { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public List`1<WindowDescriptor> get_Windows();
    [CompilerGeneratedAttribute]
public void set_Windows(List`1<WindowDescriptor> value);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.LayoutDescriptorDebug : LayoutDescriptor {
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.SerializationExtensions : object {
    private static JsonSerializerSettings ourSettings;
    private static JsonSerializerSettings ourSettingsDebug;
    private static SerializationExtensions();
    [ExtensionAttribute]
public static string Serialize(DockLayout layout);
    [ExtensionAttribute]
public static string DebugSerialize(DockLayout layout);
    [ExtensionAttribute]
public static void Deserialize(DockLayout layout, string data);
    [ExtensionAttribute]
public static LayoutDescriptor DeserializeDescriptor(string data);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.WindowDescriptor : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaximized>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AutoHideFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerDescriptor <Root>k__BackingField;
    [JsonPropertyAttribute("x")]
public double X { get; public set; }
    [JsonPropertyAttribute("y")]
public double Y { get; public set; }
    [JsonPropertyAttribute("width")]
public double Width { get; public set; }
    [JsonPropertyAttribute("height")]
public double Height { get; public set; }
    [JsonPropertyAttribute("isMaximized")]
public bool IsMaximized { get; public set; }
    [JsonPropertyAttribute("autoHideFrames")]
public List`1<string> AutoHideFrames { get; public set; }
    [JsonPropertyAttribute("root")]
public ContainerDescriptor Root { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public bool get_IsMaximized();
    [CompilerGeneratedAttribute]
public void set_IsMaximized(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AutoHideFrames();
    [CompilerGeneratedAttribute]
public void set_AutoHideFrames(List`1<string> value);
    [CompilerGeneratedAttribute]
public ContainerDescriptor get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(ContainerDescriptor value);
}
public class JetBrains.Application.UI.Controls.Dock.Layout.Serialization.WindowDescriptorDebug : WindowDescriptor {
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bounds>k__BackingField;
    [JsonPropertyAttribute("isVisible")]
public bool IsVisible { get; public set; }
    [JsonPropertyAttribute("bounds")]
public string Bounds { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public string get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(string value);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Controls.DummyCommonDialogs : object {
    public sealed virtual void EnterStringAsync(Lifetime lifetime, IDataContext context, string title, string label, string initialValue, Action`1<string> callback, Func`2[] validators);
}
public class JetBrains.Application.UI.Controls.EmptyVirtualListBoxItemProvider`2 : object {
    [NotNullAttribute]
public static EmptyVirtualListBoxItemProvider`2<TListItem, TTag> Instance;
    public int MaximumItemsToDisplay { get; }
    public int ItemsCount { get; }
    private static EmptyVirtualListBoxItemProvider`2();
    public sealed virtual int get_MaximumItemsToDisplay();
    public sealed virtual int get_ItemsCount();
    public sealed virtual void GetItemsRangeAsync(int start, int end, Action`1<TListItem[]> onItemsAvailable);
    public sealed virtual int GetItemIndex(TTag item);
    public sealed virtual TTag GetItem(int index);
}
public static class JetBrains.Application.UI.Controls.EnumDescriptionCache : object {
    private static Dictionary`2<Type, Object[]> ourValues;
    private static Dictionary`2<Type, Object[]> ourSkippedEnumValues;
    private static Func`3<FieldInfo, Type, bool> ourFieldMatcher;
    private static EnumDescriptionCache();
    public static Object[] GetValues(Type type);
    private static object Presentation(FieldInfo field);
    private static object PresentationFromString(FieldInfo field, bool fromString);
    public static object GetValue(Type type, object value, bool toString);
    private static object GetValue(object value, bool toString);
    public static object GetValueBack(Type type, object value, bool fromString);
}
public enum JetBrains.Application.UI.Controls.FileSystem.AllowMultipleFiles : Enum {
    public int value__;
    public static AllowMultipleFiles Yes;
    public static AllowMultipleFiles No;
}
public class JetBrains.Application.UI.Controls.FileSystem.ChooseFileType : ValueType {
    public static ChooseFileType AllFiles;
    public static ChooseFileType[] AllFilesOnly;
    [CanBeNullAttribute]
public string DisplayName;
    [NotNullAttribute]
public String[] Extensions;
    public ChooseFileType(string extension, string displayname);
    public ChooseFileType(String[] extensions, string displayname);
    private static ChooseFileType();
    [NotNullAttribute]
public static ChooseFileType[] Add(string extension, string displayname);
    [NotNullAttribute]
public static ChooseFileType[] Add(String[] extensions, string displayname);
    public sealed virtual bool Equals(ChooseFileType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ChooseFileType left, ChooseFileType right);
    public static bool op_Inequality(ChooseFileType left, ChooseFileType right);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs : object {
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForFolder(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    private sealed virtual override IEnumerable`1<string> JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForFoldersWithMultiselect(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialDirectory);
    private sealed virtual override ICollection`1<FileSystemPath> JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenMultipleFiles(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialDirectory);
    private sealed virtual override FileSystemPath JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForSaveFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialDirectory, string fileName);
    private sealed virtual override Task`1<FileSystemPath> JetBrains.Application.UI.Controls.FileSystem.IAsyncCommonFileDialogs.BrowseForFolder(string windowtitle, FileSystemPath initialFolder);
    private sealed virtual override Task`1<FileSystemPath> JetBrains.Application.UI.Controls.FileSystem.IAsyncCommonFileDialogs.BrowseForOpenFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialFolder, string fileName);
    private sealed virtual override Task`1<ICollection`1<FileSystemPath>> JetBrains.Application.UI.Controls.FileSystem.IAsyncCommonFileDialogs.BrowseForOpenMultipleFiles(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialFolder);
    private sealed virtual override Task`1<FileSystemPath> JetBrains.Application.UI.Controls.FileSystem.IAsyncCommonFileDialogs.BrowseForSaveFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialFolder, string fileName);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Controls.FileSystem.DummyCommonLocateFile : object {
    public sealed virtual string LocateActionName();
    public sealed virtual void LocateFile(FileSystemPath file);
}
public interface JetBrains.Application.UI.Controls.FileSystem.IAsyncCommonFileDialogs {
    [CanBeNullAttribute]
public abstract virtual Task`1<FileSystemPath> BrowseForFolder(string windowtitle, FileSystemPath initialFolder);
    [CanBeNullAttribute]
public abstract virtual Task`1<FileSystemPath> BrowseForOpenFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialFolder, string fileName);
    [CanBeNullAttribute]
public abstract virtual Task`1<ICollection`1<FileSystemPath>> BrowseForOpenMultipleFiles(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialFolder);
    [CanBeNullAttribute]
public abstract virtual Task`1<FileSystemPath> BrowseForSaveFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialFolder, string fileName);
}
public interface JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs {
    [CanBeNullAttribute]
public abstract virtual FileSystemPath BrowseForFolder(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    [ObsoleteAttribute("Must be upgraded to use FileSystemPath.")]
[CanBeNullAttribute]
public abstract virtual IEnumerable`1<string> BrowseForFoldersWithMultiselect(string title, FileSystemPath initialFolder, IWindowOwner windowOwner);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath BrowseForOpenFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialDirectory);
    [CanBeNullAttribute]
public abstract virtual ICollection`1<FileSystemPath> BrowseForOpenMultipleFiles(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialDirectory);
    [CanBeNullAttribute]
public abstract virtual FileSystemPath BrowseForSaveFile(string windowtitle, ChooseFileType[] filetypes, FileSystemPath initialDirectory, string fileName);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogsEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ChooseFileType[] Add(ChooseFileType[] this, string extension, string displayname);
    [ExtensionAttribute]
[NotNullAttribute]
public static ChooseFileType[] Add(ChooseFileType[] this, String[] extensions, string displayname);
    [ExtensionAttribute]
[NotNullAttribute]
public static ChooseFileType[] AddAllFiles(ChooseFileType[] this);
    [ExtensionAttribute]
public static void BrowseForOpenFileStreams(ICommonFileDialogs this, string windowtitle, ChooseFileType[] filetypes, AllowMultipleFiles allowmultiple, Action`1<Stream> reader);
    [ExtensionAttribute]
public static void BrowseForSaveFileStream(ICommonFileDialogs this, string title, ChooseFileType[] filetypes, Action`1<Stream> writer);
    [ExtensionAttribute]
public static TResult BrowseForSaveFileStream(ICommonFileDialogs this, string title, ChooseFileType[] filetypes, Func`2<Stream, TResult> writer);
    [NotNullAttribute]
public static string GetDefaultExt(ChooseFileType[] filetypesNormalized);
    [NotNullAttribute]
public static string GetDisplayName(ChooseFileType cft);
    [NotNullAttribute]
public static string GetTrimmedExtension(string extension);
    [NotNullAttribute]
private static string GetNormalizedExtension(string extension);
    [NotNullAttribute]
public static string GetExtensionsPresentation(ChooseFileType cft);
    [NotNullAttribute]
public static string GetExtensionsFilter(ChooseFileType cft);
    [NotNullAttribute]
public static string MakeFilter(ChooseFileType[] filetypesNormalized);
    [NotNullAttribute]
public static ChooseFileType[] Normalized(ChooseFileType[] filetypes);
}
public interface JetBrains.Application.UI.Controls.FileSystem.ICommonLocateFile {
    [CanBeNullAttribute]
public abstract virtual string LocateActionName();
    public abstract virtual void LocateFile(FileSystemPath file);
}
public interface JetBrains.Application.UI.Controls.FileSystem.IWindowOwner {
}
public class JetBrains.Application.UI.Controls.FileSystem.WindowsWindowOwner : object {
    [CompilerGeneratedAttribute]
private Window <OwnerAvalon>k__BackingField;
    [CompilerGeneratedAttribute]
private IWin32Window <OwnerWin32>k__BackingField;
    [CanBeNullAttribute]
public Window OwnerAvalon { get; }
    [CanBeNullAttribute]
public IWin32Window OwnerWin32 { get; }
    public WindowsWindowOwner(Window ownerAvalon, IWin32Window ownerWin32);
    [CompilerGeneratedAttribute]
public Window get_OwnerAvalon();
    [CompilerGeneratedAttribute]
public IWin32Window get_OwnerWin32();
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Controls.GotoByName.BulbMenuComponent : object {
    [NotNullAttribute]
public ISignal`1<bool> BeforeMenuShow;
    [NotNullAttribute]
public ISignal`1<bool> BeforeActionExecuted;
    [CompilerGeneratedAttribute]
private IProperty`1<JetPopupMenu> <MenuReady>k__BackingField;
    protected Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [NotNullAttribute]
private JetPopupMenus myJetPopupMenus;
    [NotNullAttribute]
protected IShellLocks myLocks;
    [NotNullAttribute]
private UsageStatistics myUsageStatistics;
    [NotNullAttribute]
private FeatureSuggestionBulbItemsProvider myFeatureSuggestionItemsProvider;
    [CompilerGeneratedAttribute]
private IActionManager <ActionManager>k__BackingField;
    [NotNullAttribute]
public IProperty`1<JetPopupMenu> MenuReady { get; }
    [NotNullAttribute]
public IUIApplication Environment { get; }
    [NotNullAttribute]
public IActionManager ActionManager { get; }
    protected bool IsSuppressingMenuCaption { get; }
    public JetThickness IconMargin { get; }
    public BulbMenuComponent(Lifetime lifetime, IUIApplication environment, JetPopupMenus jetPopupMenus, IShellLocks locks, IActionManager actionManager, UsageStatistics usageStatistics, FeatureSuggestionBulbItemsProvider featureSuggestionItemsProvider);
    [CompilerGeneratedAttribute]
public IProperty`1<JetPopupMenu> get_MenuReady();
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public IActionManager get_ActionManager();
    protected virtual bool get_IsSuppressingMenuCaption();
    public void ShowBulbMenu(IEnumerable`1<BulbMenuItem> menuItems, PopupWindowContextSource context, IAutomation captionAutomation, Action`1<Lifetime> beforeShow, LifetimeDefinition viewLifetimeDefinition);
    public void ShowBulbMenuForBulbIndicator(LifetimeDefinition viewLifetimeDefinition, IEnumerable`1<BulbMenuItem> menuItems, GotoByNameModel gotoByNameModel, Action`1<GotoByNameModel> modelInitHandler, Func`2<JetThickness, PopupWindowContextSource> getPopupWindowContextSource, IAutomation captionAutomation, Action`1<Lifetime> beforeShow, bool isMouseDown);
    public void ShowBulbMenuForGutterMarks(LifetimeDefinition viewLifetimeDefinition, IReadOnlyCollection`1<BulbActionKey> keys, PopupWindowContextSource context, IAutomation captionControl);
    public virtual JetThickness get_IconMargin();
    [NotNullAttribute]
protected virtual IAutomation MakeCaptionIconAutomation(IconId iconId);
    [NotNullAttribute]
protected IAutomation InferIconForCaption(IReadOnlyCollection`1<BulbActionKey> rootKeys);
    private void ShowMenuOnKeys(LifetimeDefinition viewLifetimeDefinition, PopupWindowContextSource context, IReadOnlyCollection`1<BulbActionKey> rootkeys, IAutomation menuCaptionAutomation, Action`1<Lifetime> beforeShow, ShowWhen showWhen);
    protected virtual void InitMenuItemsFromKeys(LifetimeDefinition viewModelDefinition, JetPopupMenu menu, IReadOnlyList`1<BulbActionKey> rootItems, Nullable`1<int> initialRwLockTimeStamp);
    protected void InitMenuItemsFromKeys(LifetimeDefinition viewModelDefinition, JetPopupMenu menu, IReadOnlyList`1<BulbActionKey> rootItems, bool terminateAllViewModels, Nullable`1<int> initialRwLockTimestamp);
    protected virtual void HandleItemClicked(object objKey, JetPopupMenu jetPopupMenu, LifetimeDefinition viewModelDefinition, bool terminateAllViewModels, bool timestampChanged);
    [NotNullAttribute]
protected static IReadOnlyList`1<BulbActionKey> InsertSeparators(IEnumerable`1<BulbActionKey> subitems);
    [CompilerGeneratedAttribute]
private void <ShowBulbMenuForBulbIndicator>b__20_0(PropertyChangedEventArgs`1<bool> args);
    [CompilerGeneratedAttribute]
private void <ShowBulbMenuForBulbIndicator>b__20_2();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Controls.GotoByName.GotoByNameColors : object {
    [CompilerGeneratedAttribute]
private static JetRgbaColor <HighlightingColor>k__BackingField;
    public static JetRgbaColor HighlightingColor { get; private set; }
    public GotoByNameColors(Lifetime lifetime, ITheming theming);
    [CompilerGeneratedAttribute]
public static JetRgbaColor get_HighlightingColor();
    [CompilerGeneratedAttribute]
private static void set_HighlightingColor(JetRgbaColor value);
}
public abstract class JetBrains.Application.UI.Controls.GotoByName.GotoByNameController : object {
    protected Property`1<bool> IsComplete;
    protected Property`1<bool> IsNotRunningAsyncAction;
    private GotoByNameModel myModel;
    private IShellLocks myLocks;
    private ReadonlyToken myReadonlyCookie;
    public static object EtcItemKey;
    [CompilerGeneratedAttribute]
private IconId <EtcItemIcon>k__BackingField;
    [NotNullAttribute]
public Property`1<Action> FuncEtcItemExecute;
    [NotNullAttribute]
public IProperty`1<bool> ItemsGottenDirty;
    private Property`1<AsyncState> myAsyncState;
    private int myUpdateEntrancy;
    private Lifetime myLifetime;
    public int MenuItemsCountLimit { get; }
    [NotNullAttribute]
public IconId EtcItemIcon { get; protected set; }
    [NotNullAttribute]
public GotoByNameModel Model { get; }
    protected Lifetime Lifetime { get; }
    protected GotoByNameController(Lifetime lifetime, GotoByNameModel model, IShellLocks locks);
    private static GotoByNameController();
    public virtual int get_MenuItemsCountLimit();
    [CompilerGeneratedAttribute]
public IconId get_EtcItemIcon();
    [CompilerGeneratedAttribute]
protected void set_EtcItemIcon(IconId value);
    public GotoByNameModel get_Model();
    protected Lifetime get_Lifetime();
    public JetPopupMenuItem CreateEtcItem();
    protected virtual void BeforeUpdateItems();
    protected abstract virtual bool ExecuteItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    public bool ExecuteSelectedItem(JetPopupMenuItem item, ISignal`1<bool> closeBeforeExecute);
    protected abstract virtual bool UpdateItems(string filterString, Func`3<IEnumerable`1<JetPopupMenuItem>, AddItemsBehavior, bool> itemsConsumer);
    private void Init();
    protected virtual void InitDefaultAsyncAction();
    private void OnGottenDirty();
    protected virtual void ScheduleAfterCommit();
    protected virtual void SpawnInterruptableActivity();
    private void AsyncRun(string sFilterText, SynchronizedLifetime lifetime, GroupingEvent itemsAddedEvent, Action& updateModel);
    private void AsyncStart();
    protected virtual void AppendToModel(AddItemsBehavior behavior, List`1<JetPopupMenuItem> arItems, string sFilterText);
    private void InitDataFlow();
    private void InitLogging();
    protected virtual void InternalExecuteItem(JetPopupMenuItem item, IShellLocks locks);
    [CompilerGeneratedAttribute]
private void <InitDefaultAsyncAction>b__28_1(Lifetime trueLifetime);
    [CompilerGeneratedAttribute]
private void <InitDefaultAsyncAction>b__28_2();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__35_0();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__35_1();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__35_2();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__35_5();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__35_3(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__35_4(Lifetime lifeFExec, Action FExec);
}
public static class JetBrains.Application.UI.Controls.GotoByName.GotoByNameDataConstants : object {
    public static DataConstant`1<SearchTextData> CurrentSearchText;
    public static DataConstant`1<object> SelectedKey;
    public static DataConstant`1<JetPopupMenuDoc> Doc;
    private static GotoByNameDataConstants();
}
public class JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel : object {
    public static bool OptionTrace;
    [NotNullAttribute]
public IProperty`1<string> CaptionText;
    [NotNullAttribute]
public IProperty`1<string> CheckBoxText;
    [NotNullAttribute]
public IProperty`1<string> LabelText;
    [NotNullAttribute]
public IProperty`1<string> FilterText;
    [NotNullAttribute]
public IProperty`1<int> SelectedIndex;
    [NotNullAttribute]
public IProperty`1<bool> AutoselectFirstItem;
    [NotNullAttribute]
public ISignal`1<JetPopupMenuItem> IncomingExecuteItem;
    [NotNullAttribute]
public IProperty`1<bool> IsCheckBoxChecked;
    [NotNullAttribute]
public IProperty`1<bool> IsCheckBoxCheckerVisible;
    [NotNullAttribute]
public IProperty`1<bool> IsCheckBoxVisible;
    [NotNullAttribute]
public IProperty`1<bool> IsReady;
    [NotNullAttribute]
public IListEvents`1<JetPopupMenuItem> Items;
    [NotNullAttribute]
public IProperty`1<string> NotReadyMessage;
    [NotNullAttribute]
public ISignal`1<bool> CloseBeforeExecute;
    [NotNullAttribute]
public IListEvents`1<IToolBarItemInfo> ToolbarButtons;
    [NotNullAttribute]
public IProperty`1<bool> CloseOnExecute;
    [NotNullAttribute]
public Property`1<string> CueBannerText;
    [NotNullAttribute]
public Property`1<bool> CueBannerAlignLeft;
    public GotoByNameModel(Lifetime lifetime);
    private void InitLogging(Lifetime lifetime);
}
public static class JetBrains.Application.UI.Controls.GotoByName.GotoByNameUtil : object {
    public static void HighlightMatchingChars(RichText text, MatchingInfo matchingInfo);
    public static Nullable`1<int> GetMatchIndicesShift(RichText richText, Int32[] matches, string identifier);
    public static void HighlightMatchingChars(RichText text, Int32[] matches, string identifier);
    public static void HighlightMatchingChars(IMenuItemDescriptor descriptor, MatchingInfo matchingInfo);
}
public interface JetBrains.Application.UI.Controls.GotoByName.IHideInAltEnterSearchBulbAction {
}
public class JetBrains.Application.UI.Controls.GotoByName.SwitchToGotoActionController : object {
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
private JetPopupMenu myMenu;
    [NotNullAttribute]
private JetPopupMenuDoc myDocument;
    [NotNullAttribute]
private Action`1<GotoByNameModel> myModelInitHandler;
    [NotNullAttribute]
private GotoByNameModel myAdvancedSearchModel;
    [NotNullAttribute]
private IAutomation myDefaultCaption;
    [CanBeNullAttribute]
private List`1<JetPopupMenuItem> myDefaultItemsPlain;
    private bool myModelInitialized;
    [NotNullAttribute]
private IMenuItemsContainer myItemsContainer;
    [NotNullAttribute]
private RichTextAutomation myAdvancedCaption;
    [NotNullAttribute]
private ToolbarItemInfo myDefaultToolbarItemInfo;
    [CanBeNullAttribute]
private MenuItemsFilter myFilter;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AdvancedSearchIsActive>k__BackingField;
    [NotNullAttribute]
public IProperty`1<bool> AdvancedSearchIsActive { get; }
    public SwitchToGotoActionController(LifetimeDefinition lifetimeDefinition, JetPopupMenu menu, Action`1<GotoByNameModel> modelInitHandler, GotoByNameModel advancedSearchModel, IAutomation defaultCaption);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AdvancedSearchIsActive();
    private void Init();
    public void InitAdvancedSearch(Lifetime advancedSearchLifetime);
    private ICollection`1<BulbActionKey> TraverseBreadthFirst(List`1<BulbActionKey> roots);
    private void InitDefaultMenu(Lifetime defaultMenuLifetime);
    private double MatchWithPriority(JetPopupMenuItem item, IIdentifierMatcher identifierMatcher);
    [PureAttribute]
private static bool ShouldShowInAdvancedSearchMode(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0();
    [CompilerGeneratedAttribute]
private void <Init>b__16_0(bool value);
    [CompilerGeneratedAttribute]
private void <Init>b__16_1(JetPopupMenuItem item);
    [CompilerGeneratedAttribute]
private void <InitAdvancedSearch>b__17_0();
    [CompilerGeneratedAttribute]
private void <InitAdvancedSearch>b__17_1(Lifetime valueLifetime, string input);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.UI.Controls.Grid.JetGridLength : ValueType {
    [CompilerGeneratedAttribute]
private JetGridUnitType <GridUnitType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public JetGridUnitType GridUnitType { get; }
    public double Value { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public static JetGridLength Auto { get; }
    public static JetGridLength Star { get; }
    public JetGridLength(double pixels);
    public JetGridLength(double value, JetGridUnitType type);
    [CompilerGeneratedAttribute]
public JetGridUnitType get_GridUnitType();
    [CompilerGeneratedAttribute]
public double get_Value();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public static JetGridLength get_Auto();
    public static JetGridLength get_Star();
    public static bool op_Equality(JetGridLength gl1, JetGridLength gl2);
    public static bool op_Inequality(JetGridLength gl1, JetGridLength gl2);
    public virtual bool Equals(object oCompare);
    public sealed virtual bool Equals(JetGridLength gridLength);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum JetBrains.Application.UI.Controls.Grid.JetGridUnitType : Enum {
    public int value__;
    public static JetGridUnitType Auto;
    public static JetGridUnitType Pixel;
    public static JetGridUnitType Star;
}
public interface JetBrains.Application.UI.Controls.IBackgroundProgressIndicator {
    public bool IsCancellable { get; }
    public ISimpleSignal Cancel { get; }
    public Lifetime Lifetime { get; }
    public string Title { get; }
    public IProperty`1<string> Header { get; }
    public IProperty`1<string> Description { get; }
    public IProperty`1<double> ProgressFraction { get; }
    public IProperty`1<IconId> Icon { get; }
    public ISimpleSignal Click { get; }
    public abstract virtual bool get_IsCancellable();
    public abstract virtual ISimpleSignal get_Cancel();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual string get_Title();
    public abstract virtual IProperty`1<string> get_Header();
    public abstract virtual IProperty`1<string> get_Description();
    public abstract virtual IProperty`1<double> get_ProgressFraction();
    public abstract virtual IProperty`1<IconId> get_Icon();
    public abstract virtual ISimpleSignal get_Click();
}
public interface JetBrains.Application.UI.Controls.IBackgroundProgressIndicatorManager {
    public IShellLocks Locks { get; }
    public abstract virtual IShellLocks get_Locks();
    public abstract virtual IBackgroundProgressIndicator CreateIndicator(Lifetime lifetime, bool isCancellable, bool hasProgress, string title);
}
public interface JetBrains.Application.UI.Controls.ICheckable {
    public Nullable`1<bool> IsChecked { get; public set; }
    public abstract virtual Nullable`1<bool> get_IsChecked();
    public abstract virtual void set_IsChecked(Nullable`1<bool> value);
}
public interface JetBrains.Application.UI.Controls.ICheckBoxAutomation {
    public IProperty`1<RichText> Text { get; }
    public IProperty`1<bool> ShouldBeHidden { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsCheckedLogically { get; }
    public IProperty`1<bool> IsAppearingChecked { get; }
    public IProperty`1<Nullable`1<bool>> IsCheckedForChildControl { get; }
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<RichText> get_Text();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeHidden();
    public abstract virtual IProperty`1<bool> get_IsVisible();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeDisabled();
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsCheckedLogically();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsAppearingChecked();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<Nullable`1<bool>> get_IsCheckedForChildControl();
}
public interface JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel {
    public IProperty`1<RichText> Text { get; }
    public IProperty`1<bool> ShouldBeHidden { get; }
    public IProperty`1<bool> IsVisible { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public IProperty`1<bool> IsEnabled { get; }
    public IProperty`1<bool> IsCheckedLogically { get; }
    public IProperty`1<bool> IsAppearingChecked { get; }
    public IProperty`1<Nullable`1<bool>> IsCheckedForChildControl { get; }
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<RichText> get_Text();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeHidden();
    public abstract virtual IProperty`1<bool> get_IsVisible();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_ShouldBeDisabled();
    public abstract virtual IProperty`1<bool> get_IsEnabled();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsCheckedLogically();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<bool> get_IsAppearingChecked();
    [DebuggerStepThroughAttribute]
public abstract virtual IProperty`1<Nullable`1<bool>> get_IsCheckedForChildControl();
}
public interface JetBrains.Application.UI.Controls.IClosableViewModel {
    public IProperty`1<bool> IsClosed { get; }
    public abstract virtual IProperty`1<bool> get_IsClosed();
    public abstract virtual void Close();
}
public interface JetBrains.Application.UI.Controls.ICommonDialogs {
    public abstract virtual void EnterStringAsync(Lifetime lifetime, IDataContext context, string title, string label, string initialValue, Action`1<string> callback, Func`2[] validators);
}
public class JetBrains.Application.UI.Controls.IconAndTooltipAutomation : AAutomation {
    public IconId IconId;
    public RichText Tooltip;
    public IconAndTooltipAutomation(IconId icon, RichText tooltip);
    [NotNullAttribute]
public static IconAndTooltipAutomation Create(RichText tooltip);
}
public interface JetBrains.Application.UI.Controls.IConstrainableControl {
    public bool AutoActivate { get; public set; }
    public ISimpleSignal WantsResize { get; }
    public abstract virtual bool get_AutoActivate();
    public abstract virtual void set_AutoActivate(bool value);
    public abstract virtual ISimpleSignal get_WantsResize();
    public abstract virtual Size GetDesiredSize(IGraphicsContainer gc, Size limit);
    public abstract virtual void SetLayout(LayoutResult layout);
}
public interface JetBrains.Application.UI.Controls.IHaveRenderParams {
    [NotNullAttribute]
public IProperty`1<RenderParams> RenderParams { get; }
    public abstract virtual IProperty`1<RenderParams> get_RenderParams();
}
public interface JetBrains.Application.UI.Controls.Infrastructure.ISubscriptionTracker {
    public abstract virtual void OnSubscribed(object item);
    public abstract virtual void OnUnsubscribed(object item);
}
public interface JetBrains.Application.UI.Controls.Infrastructure.IWeakSubscriptionManager {
    public abstract virtual IDisposable Subscribe(INotifyCollectionChanged target, NotifyCollectionChangedEventHandler handler);
    public abstract virtual IDisposable Subscribe(INotifyPropertyChanged target, PropertyChangedEventHandler handler);
}
internal class JetBrains.Application.UI.Controls.Infrastructure.ListCountInfo : ValueType {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public ListCountInfo(int count);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
public interface JetBrains.Application.UI.Controls.ITopLevelOwner {
    public abstract virtual bool GetTopLevel();
}
public interface JetBrains.Application.UI.Controls.IVirtualListBoxItemProvider`2 {
    public int MaximumItemsToDisplay { get; }
    public int ItemsCount { get; }
    public abstract virtual int get_MaximumItemsToDisplay();
    public abstract virtual int get_ItemsCount();
    public abstract virtual void GetItemsRangeAsync(int start, int end, Action`1<TListItem[]> onItemsAvailable);
    [PureAttribute]
public abstract virtual int GetItemIndex(TTag item);
    [PureAttribute]
[CanBeNullAttribute]
public abstract virtual TTag GetItem(int index);
}
public interface JetBrains.Application.UI.Controls.IWindowlessControl {
    public Rectangle Bounds { get; }
    [NotNullAttribute]
public ISimpleSignal GottenDirty { get; }
    public abstract virtual Rectangle get_Bounds();
    public abstract virtual ISimpleSignal get_GottenDirty();
    public abstract virtual void Paint(IGraphicsContainer gc);
    public abstract virtual void SetBounds(IGraphicsContainer gc, Rectangle bounds);
}
public class JetBrains.Application.UI.Controls.JetLoaderAnimationAutomation : AAutomation {
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ApproveItemEventArgs : ItemEventArgs {
    protected bool myApproved;
    public bool Approved { get; public set; }
    public ApproveItemEventArgs(JetPopupMenu menu, object key);
    public bool get_Approved();
    public void set_Approved(bool value);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.DescribeItemEventArgs : ItemEventArgs {
    [NotNullAttribute]
protected IMenuItemDescriptor myDescriptor;
    [NotNullAttribute]
public IMenuItemDescriptor Descriptor { get; }
    public DescribeItemEventArgs(JetPopupMenu menu, object key, IMenuItemDescriptor descriptor);
    public IMenuItemDescriptor get_Descriptor();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.ExecuteOnTypeTag : object {
    [CompilerGeneratedAttribute]
private char <TypeKey>k__BackingField;
    public char TypeKey { get; }
    public ExecuteOnTypeTag(char typeKey);
    [CompilerGeneratedAttribute]
public char get_TypeKey();
}
public static class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.FixedSizeViewport : object {
    public static IMenuItemsFilter CreateFilter(Lifetime lifetime, int maxSize, JetPopupMenuItem etcItem);
    public static IMenuItemsFilter CreateFilter(Lifetime lifetime, int maxSize, Func`1<JetPopupMenuItem> getEtcItem);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IFixedSizeMarker {
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner {
    public abstract virtual void AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsContainer {
    public IListEvents`1<IMenuItemsFilter> Filters { get; }
    public abstract virtual IListEvents`1<IMenuItemsFilter> get_Filters();
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter {
    public ISignal`1<JetPopupMenuItem> IncomingDelete { get; }
    public ISignal`1<JetPopupMenuItem> IncomingExecute { get; }
    public Signal`1<JetPopupMenuItem> IncomingExpand { get; }
    public IListEvents`1<JetPopupMenuItem> InputItems { get; }
    public IProperty`1<bool> IsBusy { get; }
    public IListEvents`1<JetPopupMenuItem> OutputItems { get; }
    public abstract virtual ISignal`1<JetPopupMenuItem> get_IncomingDelete();
    public abstract virtual ISignal`1<JetPopupMenuItem> get_IncomingExecute();
    public abstract virtual Signal`1<JetPopupMenuItem> get_IncomingExpand();
    public abstract virtual IListEvents`1<JetPopupMenuItem> get_InputItems();
    public abstract virtual IProperty`1<bool> get_IsBusy();
    public abstract virtual IListEvents`1<JetPopupMenuItem> get_OutputItems();
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuColumnId : Enum {
    public int value__;
    public static JetPopupMenuColumnId Icon;
    public static JetPopupMenuColumnId Label;
    public static JetPopupMenuColumnId MAX;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc : object {
    [NotNullAttribute]
private static ReadonlyToken myReadonlyCookie;
    public ISignal`1<ItemExpandedEventExArgs> ItemExpanded;
    public IProperty`1<bool> ArrowKeysWrapAroundEnds;
    public IProperty`1<bool> AutoselectFirstItem;
    public ISimpleSignal BeforeExecuteAction;
    [NotNullAttribute]
public IListEvents`1<JetPopupMenuItem> CurrentItems;
    public ISignal`1<ItemIndexEventArgs> ItemChanged;
    [NotNullAttribute]
public IMenuItemsContainer ItemsContainer;
    [NotNullAttribute]
public IProperty`1<KeyboardAccelerationFlags> KeyboardAcceleration;
    public IProperty`1<JetPopupMenuItem> LastSelectedItem;
    [NotNullAttribute]
public MnemonicStore Mnemonics;
    [NotNullAttribute]
public SearchHost QuickSearch;
    [NotNullAttribute]
public IProperty`1<int> SelectedIndex;
    public IProperty`1<JetPopupMenuItem> SelectedItem;
    [NotNullAttribute]
public IListEvents`1<IToolBarItemInfo> ToolbarButtons;
    public JetPopupMenuDoc(Lifetime lifetime, ISettingsStore settings);
    private static JetPopupMenuDoc();
    public List`1<JetPopupMenuItem> ApplyCurrentPassFilter(ICollection`1<JetPopupMenuItem> raw);
    public bool DeleteSelectedItem();
    public string DumpItemsToString();
    public void DumpItemsToXaml(XmlWriter writer);
    public bool ExecuteMnemonic(char ch, Boolean& bMnemonicWasAccepted);
    public bool ExecuteSelectedItem();
    public bool ExpandSelectedItem();
    public int GetNextIndex(int nOriginalIndex, NextItemDir direction, EndBehavior endbehavior, AllowedItems alloweditems);
    public void SelectNextItem(NextItemDir direction);
    private void InitDataFlow(Lifetime lifetime);
    private void InitLogging(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private bool <ApplyCurrentPassFilter>b__16_0(JetPopupMenuItem candidate);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem : object {
    protected RichText myDisplayName;
    protected IconId myIcon;
    protected object myKey;
    protected Nullable`1<char> myMnemonic;
    protected RichText myShortcutText;
    protected MenuItemStyle myStyle;
    protected object myTag;
    protected IconId myTailGlyph;
    protected RichText myTooltipText;
    [CanBeNullAttribute]
private string myManualMnemonic;
    private static IconId ourExpandableMenuItemTailGlyph;
    public static RichText StubText { get; }
    public RichText DisplayName { get; }
    public IconId Icon { get; }
    public bool IsEnabled { get; }
    public bool IsWithActions { get; }
    public bool IsExpandable { get; }
    public bool IsGroupHeader { get; }
    public bool IsSeparator { get; }
    public object Key { get; }
    [CanBeNullAttribute]
public string ManualMnemonic { get; }
    public Nullable`1<char> Mnemonic { get; public set; }
    public RichText ShortcutText { get; }
    public MenuItemStyle Style { get; }
    public object Tag { get; }
    public IconId TailGlyph { get; }
    public RichText TooltipText { get; }
    public JetPopupMenuItem(object key, IMenuItemDescriptor descriptor);
    private static JetPopupMenuItem();
    public static RichText get_StubText();
    public RichText get_DisplayName();
    public IconId get_Icon();
    public bool get_IsEnabled();
    public bool get_IsWithActions();
    public bool get_IsExpandable();
    public bool get_IsGroupHeader();
    public bool get_IsSeparator();
    public object get_Key();
    public string get_ManualMnemonic();
    public Nullable`1<char> get_Mnemonic();
    public void set_Mnemonic(Nullable`1<char> value);
    public RichText get_ShortcutText();
    public MenuItemStyle get_Style();
    public object get_Tag();
    public IconId get_TailGlyph();
    public RichText get_TooltipText();
    public void DumpToXaml(XmlWriter writer);
    protected void Init(IMenuItemDescriptor descriptor);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemNoAdornmentAdorner : object {
    public static IJetPopupMenuItemAdorner Default;
    private static JetPopupMenuItemNoAdornmentAdorner();
    public sealed virtual void AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewHitTestResult : Enum {
    public int value__;
    public static JetPopupMenuItemViewHitTestResult Above;
    public static JetPopupMenuItemViewHitTestResult Below;
    public static JetPopupMenuItemViewHitTestResult Bulk;
    public static JetPopupMenuItemViewHitTestResult ActiveTailGlyph;
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags : Enum {
    public int value__;
    public static JetPopupMenuItemViewPresentationFlags None;
    public static JetPopupMenuItemViewPresentationFlags IsSelected;
    public static JetPopupMenuItemViewPresentationFlags ExcludeUpperMargin;
    public static JetPopupMenuItemViewPresentationFlags IsExpanded;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsContainer : MenuItemsFilter {
    private IListEvents`1<IMenuItemsFilter> myFilters;
    private SequentialLifetimes myPushFilterLinks;
    public IListEvents`1<IMenuItemsFilter> Filters { get; }
    public MenuItemsContainer(Lifetime lifetime);
    private void InitDataFlow(Lifetime lifetime);
    public sealed virtual IListEvents`1<IMenuItemsFilter> get_Filters();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter : object {
    [NotNullAttribute]
private PropertyId`1<IMenuItemsFilter> myId;
    private ISignal`1<JetPopupMenuItem> myIncomingDelete;
    private ISignal`1<JetPopupMenuItem> myIncomingExecute;
    private Signal`1<JetPopupMenuItem> myIncomingExpand;
    private IListEvents`1<JetPopupMenuItem> myInputItems;
    private IProperty`1<bool> myIsBusy;
    private IListEvents`1<JetPopupMenuItem> myOutputItems;
    [NotNullAttribute]
public PropertyId`1<IMenuItemsFilter> Id { get; }
    public ISignal`1<JetPopupMenuItem> IncomingDelete { get; }
    public ISignal`1<JetPopupMenuItem> IncomingExecute { get; }
    public Signal`1<JetPopupMenuItem> IncomingExpand { get; }
    public IListEvents`1<JetPopupMenuItem> InputItems { get; }
    public IProperty`1<bool> IsBusy { get; }
    public IListEvents`1<JetPopupMenuItem> OutputItems { get; }
    public MenuItemsFilter(Lifetime lifetime, string id);
    public PropertyId`1<IMenuItemsFilter> get_Id();
    public sealed virtual ISignal`1<JetPopupMenuItem> get_IncomingDelete();
    public sealed virtual ISignal`1<JetPopupMenuItem> get_IncomingExecute();
    public sealed virtual Signal`1<JetPopupMenuItem> get_IncomingExpand();
    public sealed virtual IListEvents`1<JetPopupMenuItem> get_InputItems();
    public sealed virtual IProperty`1<bool> get_IsBusy();
    public sealed virtual IListEvents`1<JetPopupMenuItem> get_OutputItems();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore : object {
    [NotNullAttribute]
protected BidirectionalMapOnDictionary`2<JetPopupMenuItem, char> myMapMnemonicToItem;
    public static char PreprocessMnemonic(char ch);
    public static string RemoveMnemonicMark(string text);
    private static void RemoveMnemonicMark(string escaped, String& stripped, Int32& nEscapedMnemonicIndex, Int32& nStrippedMnemonicIndex);
    [NotNullAttribute]
public IList`1<JetPopupMenuItem> GetItemsByMnemonic(char ch);
    public bool IsMnemonicUsed(char ch);
    public char RegisterMnemonic(char ch, JetPopupMenuItem item);
    public char RegisterMnemonicAndHighlight(char ch, JetPopupMenuItem item, int index);
    [CanBeNullAttribute]
public JetPopupMenuItem TryGetItemByMnemonic(char ch);
    public Nullable`1<char> TryGetMnemonicByItem(JetPopupMenuItem item);
    public bool TryUnregister(JetPopupMenuItem item);
    public void Watch(Lifetime lifetime, IListEvents`1<JetPopupMenuItem> items);
    protected void AssignMnemonic_Auto(JetPopupMenuItem item);
    protected void AssignMnemonic_Manual(JetPopupMenuItem item);
    protected void AssignMnemonic_Manual_Free(JetPopupMenuItem item, string sManualMnemonic);
    protected void AssignMnemonic_Manual_Positioned(JetPopupMenuItem item, String& sManualMnemonic);
    [CompilerGeneratedAttribute]
private void <Watch>b__11_0(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <Watch>b__11_1(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
    [CompilerGeneratedAttribute]
private void <Watch>b__11_2(AddRemoveIndexEventArgs`1<JetPopupMenuItem> args);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost : object {
    private Lifetime myLifetime;
    private PropertyBindingDeferred`1<string> myBindingPendingInput;
    private bool myCreatedFilter;
    private ReadonlyToken myReadonlyCookie;
    public Property`1<string> InputString;
    public Property`1<bool> IsActive;
    public Property`1<bool> IsAlwaysActive;
    public Property`1<bool> IsAlwaysActiveCaption;
    public Property`1<bool> IsPending;
    public Property`1<bool> IsValid;
    public Property`1<Func`2<string, double>> SearchPredicate;
    public Property`1<string> SearchString;
    public Property`1<IdentifierMatcher> Matcher;
    public Property`1<IJetPopupMenuItemAdorner> SearchHitAdorner;
    public Property`1<string> HintText;
    public SearchHost(Lifetime lifetime, ISettingsStore settings);
    private static double MatchWithPriority(JetPopupMenuItem item, Func`2<string, double> predicate);
    [CanBeNullAttribute]
private static Tuple`3<Func`2<string, double>, IdentifierMatcher, IJetPopupMenuItemAdorner> ProcessSearchString(string searchstring);
    public void CommitPendingChanges();
    public IMenuItemsFilter CreateFilter(Lifetime filterLt);
    private void InitDataFlow(Lifetime lifetime, ISettingsStore settings);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__20_0(Lifetime lifetime1, string s);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__20_1(Lifetime lifetimeIsAlwaysActive);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__20_2();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHostMatcherHitHighlightAdorner : object {
    private IDictionary`2<Pair`2<JetPopupMenuItem, Pair`2<string, string>>, Pair`2<RichText, RichText>> myCacheAdornments;
    [NotNullAttribute]
private IdentifierMatcher myMatcher;
    public SearchHostMatcherHitHighlightAdorner(IdentifierMatcher matcher);
    private sealed virtual override void JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner.AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHostRegexHitHighlightAdorner : object {
    private IDictionary`2<Pair`2<JetPopupMenuItem, Pair`2<string, string>>, Pair`2<RichText, RichText>> myCacheAdornments;
    [NotNullAttribute]
public Regex Regex;
    public SearchHostRegexHitHighlightAdorner(Regex regex);
    private sealed virtual override void JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner.AdornItemText(JetPopupMenuItem item, RichText& displayname, RichText& shortcuttext, JetPopupMenuColorSet colors);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.IJetPopupMenuOverlordView {
    public abstract virtual void Show(bool isModal);
    public abstract virtual void Hide();
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor {
    [CanBeNullAttribute]
public IconId Icon { get; public set; }
    [CanBeNullAttribute]
public string Mnemonic { get; public set; }
    [CanBeNullAttribute]
public RichText ShortcutText { get; public set; }
    public MenuItemStyle Style { get; public set; }
    [CanBeNullAttribute]
public object Tag { get; public set; }
    [CanBeNullAttribute]
public IconId TailGlyph { get; public set; }
    [NotNullAttribute]
public RichText Text { get; public set; }
    [CanBeNullAttribute]
public RichText Tooltip { get; public set; }
    public abstract virtual IconId get_Icon();
    public abstract virtual void set_Icon(IconId value);
    public abstract virtual string get_Mnemonic();
    public abstract virtual void set_Mnemonic(string value);
    public abstract virtual RichText get_ShortcutText();
    public abstract virtual void set_ShortcutText(RichText value);
    public abstract virtual MenuItemStyle get_Style();
    public abstract virtual void set_Style(MenuItemStyle value);
    public abstract virtual object get_Tag();
    public abstract virtual void set_Tag(object value);
    public abstract virtual IconId get_TailGlyph();
    public abstract virtual void set_TailGlyph(IconId value);
    public abstract virtual RichText get_Text();
    public abstract virtual void set_Text(RichText value);
    public abstract virtual RichText get_Tooltip();
    public abstract virtual void set_Tooltip(RichText value);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ItemEventArgs : EventArgs {
    protected object myKey;
    protected JetPopupMenu myMenu;
    public object Key { get; }
    public JetPopupMenu Menu { get; }
    public ItemEventArgs(JetPopupMenu menu, object key);
    public object get_Key();
    public JetPopupMenu get_Menu();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ItemExpandedEventArgs : ItemEventArgs {
    [NotNullAttribute]
public Lifetime SubmenuLifetime;
    [NotNullAttribute]
public JetPopupMenu Submenu;
    public ItemExpandedEventArgs(Lifetime lifetimeSubmenu, JetPopupMenu menu, object key, JetPopupMenu submenu);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ItemExpandedEventExArgs : ItemExpandedEventArgs {
    public JetPopupMenuItem ExpandedItem;
    public ItemExpandedEventExArgs(Lifetime lifetimeSubmenu, JetPopupMenu menu, JetPopupMenuItem item, JetPopupMenu submenu);
}
public interface JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo {
    public ISignal`1<JetPopupMenuDoc> Clicked { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IProperty`1<IPresentableItem> Presentation { get; }
    [NotNullAttribute]
public Keys[] Shortcuts { get; }
    public RichText TooltipText { get; }
    public abstract virtual ISignal`1<JetPopupMenuDoc> get_Clicked();
    public abstract virtual IProperty`1<bool> get_IsChecked();
    public abstract virtual IProperty`1<IPresentableItem> get_Presentation();
    public abstract virtual Keys[] get_Shortcuts();
    public abstract virtual RichText get_TooltipText();
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu : object {
    private Lazy`1<JetPopupMenuDoc> myMenuDocument;
    [NotNullAttribute]
private IAutomation myNoItemsBanner;
    [NotNullAttribute]
private IListEvents`1<IToolBarItemInfo> myToolbarButtons;
    private ReadonlyToken myReadonlyCookie;
    [CompilerGeneratedAttribute]
private IProperty`1<IAutomation> <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CaptureMouseInitially>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseOnExecute>k__BackingField;
    [NotNullAttribute]
public Signal`1<DescribeItemEventArgs> DescribeItem;
    [NotNullAttribute]
public Signal`1<object> ItemClicked;
    [NotNullAttribute]
public Signal`1<ApproveItemEventArgs> ItemDeleted;
    [NotNullAttribute]
public ISignal`1<ItemExpandedEventArgs> ItemExpanded;
    [NotNullAttribute]
public IProperty`1<bool> ClosingViewOnExecute;
    [CompilerGeneratedAttribute]
private IListEvents`1<object> <ItemKeys>k__BackingField;
    public Property`1<KeyboardAccelerationFlags> KeyboardAcceleration;
    [CompilerGeneratedAttribute]
private PopupWindowContextSource <PopupWindowContextSource>k__BackingField;
    public IProperty`1<object> SelectedItemKey;
    [CanBeNullAttribute]
private ITooltipManager myTooltipManager;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    private IUIApplicationSimple myUiApp;
    [CanBeNullAttribute]
public IWindowsHookManager WindowsHookManager;
    [CanBeNullAttribute]
private ISettingsStore mySettingsStore;
    [NotNullAttribute]
public IProperty`1<bool> IsHighlightingSearchHostResults;
    [NotNullAttribute]
public IProperty`1<IAutomation> Caption { get; }
    public IProperty`1<bool> CaptureMouseInitially { get; }
    public bool CloseOnExecute { get; public set; }
    [CanBeNullAttribute]
public JetPopupMenuDoc Document { get; }
    [NotNullAttribute]
public IListEvents`1<object> ItemKeys { get; }
    [NotNullAttribute]
public IAutomation NoItemsBanner { get; public set; }
    [CanBeNullAttribute]
public PopupWindowContextSource PopupWindowContextSource { get; public set; }
    public IListEvents`1<IToolBarItemInfo> ToolbarButtons { get; }
    public JetPopupMenu(OuterLifetime lifetime, IUIApplicationSimple uiapp, IIsApplicationActiveState isApplicationActiveState, ITooltipManager tooltipman, IWindowsHookManager windowsHookManager, ISettingsStore settstore);
    [CompilerGeneratedAttribute]
public IProperty`1<IAutomation> get_Caption();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CaptureMouseInitially();
    [CompilerGeneratedAttribute]
public bool get_CloseOnExecute();
    [CompilerGeneratedAttribute]
public void set_CloseOnExecute(bool value);
    public JetPopupMenuDoc get_Document();
    [CompilerGeneratedAttribute]
public IListEvents`1<object> get_ItemKeys();
    public IAutomation get_NoItemsBanner();
    public void set_NoItemsBanner(IAutomation value);
    [CompilerGeneratedAttribute]
public PopupWindowContextSource get_PopupWindowContextSource();
    [CompilerGeneratedAttribute]
public void set_PopupWindowContextSource(PopupWindowContextSource value);
    public IListEvents`1<IToolBarItemInfo> get_ToolbarButtons();
    public void CaptureIfMouseDown();
    public void SetItems(SimpleMenuItem[] menuitems);
    public JetPopupMenuStatusAndLifetimes InitViewModel(ShowWhen when, LifetimeDefinition lifetimeDefinitionOptional);
    private void CheckThread();
    private void OnMenuItemDeleted(JetPopupMenuItem item);
    private JetPopupMenuStatus ShowCore_CutoffEarly(ShowWhen when, ICollection`1<object> keys);
    private JetPopupMenuStatus ShowCore_CutoffLate(ShowWhen when, ICollection`1<JetPopupMenuItem> items);
    [CompilerGeneratedAttribute]
private JetPopupMenuDoc <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private void <InitViewModel>b__44_2();
    [CompilerGeneratedAttribute]
private JetPopupMenuItem <InitViewModel>b__44_4(object key);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet : object {
    public static double WindowToGradientHigh;
    public static double WindowToMenuBack;
    public static double WindowToSelectionBody;
    public static double SelectionToChecked;
    public JetRgbaColor Text;
    public JetRgbaColor Background;
    public JetRgbaColor EditboxBackground;
    public JetRgbaColor Border;
    public JetRgbaColor EditboxBorder;
    public JetRgbaColor SelectedText;
    public JetRgbaColor DisabledText;
    public JetRgbaColor EditboxText;
    public JetRgbaColor EditboxHighlightedText;
    public JetRgbaColor EditboxErrorText;
    public JetRgbaColor IconColumnLeft;
    public JetRgbaColor IconColumnRight;
    public JetRgbaColor IconColumnMiddle;
    public JetRgbaColor ScrollArrowDisabled;
    public JetRgbaColor ScrollArrowEnabled;
    public JetRgbaColor SelectionBorder;
    public bool SelectionFillHasAlpha;
    public JetRgbaColor SelectionFillTop;
    public JetRgbaColor SelectionFillCenterTop;
    public JetRgbaColor SelectionFillCenterBottom;
    public JetRgbaColor SelectionFillBottom;
    public JetRgbaColor Separator;
    public JetRgbaColor TitleRowBottom;
    public JetRgbaColor TitleRowTop;
    public JetRgbaColor CheckedAndSelectedFillTop;
    public JetRgbaColor CheckedAndSelectedFillCenter;
    public JetRgbaColor CheckedAndSelectedFillBottom;
    public JetRgbaColor TitleRowCenter;
    public JetRgbaColor SearchHitText;
    public JetRgbaColor SearchHitFill;
    public JetPopupMenuColorSet(ITheming thememan, Func`2<JetRgbaColor, JetRgbaColor> FCoerceToSolidColor);
    private static JetPopupMenuColorSet();
    private void AssertIsOpaque();
    public static JetRgbaColor Blend(JetRgbaColor a, JetRgbaColor b, double factor, Func`2<JetRgbaColor, JetRgbaColor> FCoerceToSolidColor);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus : object {
    protected Lifetime Lifetime;
    protected IIsApplicationActiveState myIsApplicationActiveState;
    protected ISettingsStore mySettstore;
    protected IUIApplicationSimple myUiapp;
    protected ITooltipManager Tooltipman;
    protected IWindowsHookManager WindowsHookManager;
    public JetPopupMenus(Lifetime lifetime, IUIApplicationSimple uiapp, IIsApplicationActiveState isApplicationActiveState, ITooltipManager tooltipManager, IWindowsHookManager windowsHookManager, ISettingsStore settingsStore);
    [NotNullAttribute]
public JetPopupMenu Create();
    [NotNullAttribute]
public JetPopupMenu CreateWithLifetime(Lifetime lifetime);
    public void Show(Lifetime lifetime, ShowWhen when, Action`2<Lifetime, JetPopupMenu> FFillMenu);
    public void Show(JetPopupMenu menu, LifetimeDefinition lifetimeDefinitionOptional);
    public void Show(JetPopupMenu menu, ShowWhen when, LifetimeDefinition lifetimeDefinitionOptional);
    public void ShowIfMultiple(JetPopupMenu menu, LifetimeDefinition lifetimeDefinitionOptional);
    public void ShowModal(JetPopupMenu menu, ShowWhen when, LifetimeDefinition lifetimeDefinitionOptional);
    public void ShowModal(ShowWhen when, Action`2<Lifetime, JetPopupMenu> FFillMenu);
    protected void CreateSubmenu(Lifetime lifeShow, JetPopupMenu parentMenu, IJetPopupMenuOverlordView parentView, JetPopupMenuItem expandedItem);
    protected virtual IJetPopupMenuOverlordView CreateView(LifetimeDefinition defShowView, JetPopupMenu menu, IJetPopupMenuOverlordView parentView);
    protected virtual void ShowCore(JetPopupMenu menu, ShowWhen when, bool isModal, LifetimeDefinition lifetimeDefinitionOptional, IJetPopupMenuOverlordView parentView);
    protected virtual void ShowNoItemsBanner(JetPopupMenu menu);
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuStatus : Enum {
    public int value__;
    public static JetPopupMenuStatus ShowPopup;
    public static JetPopupMenuStatus BannerNoItems;
    public static JetPopupMenuStatus AutoExecute;
    public static JetPopupMenuStatus Error;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuStatusAndLifetimes : ValueType {
    [NotNullAttribute]
public LifetimeDefinition MenuLifetimeDefinition;
    [CanBeNullAttribute]
public LifetimeDefinition ViewLifetimeDefinition;
    public JetPopupMenuStatus Status;
    public JetPopupMenuStatusAndLifetimes(LifetimeDefinition menuLifetimeDefinition, LifetimeDefinition viewLifetimeDefinition, JetPopupMenuStatus status);
}
public enum JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags : Enum {
    public int value__;
    public static KeyboardAccelerationFlags QuickSearch;
    public static KeyboardAccelerationFlags Mnemonics;
    public static KeyboardAccelerationFlags CustomSearch;
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor : object {
    private RichText myShortcutText;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mnemonic>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuItemStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <TailGlyph>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Tooltip>k__BackingField;
    public IconId Icon { get; public set; }
    public string Mnemonic { get; public set; }
    public RichText ShortcutText { get; public set; }
    public MenuItemStyle Style { get; public set; }
    public object Tag { get; public set; }
    public IconId TailGlyph { get; public set; }
    public RichText Text { get; public set; }
    public RichText Tooltip { get; public set; }
    public MenuItemDescriptor(object data);
    public void DumpToXaml(XmlWriter writer);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Icon(IconId value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Mnemonic();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Mnemonic(string value);
    public sealed virtual RichText get_ShortcutText();
    public sealed virtual void set_ShortcutText(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual MenuItemStyle get_Style();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Style(MenuItemStyle value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tag(object value);
    [CompilerGeneratedAttribute]
public sealed virtual IconId get_TailGlyph();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TailGlyph(IconId value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Text();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Text(RichText value);
    [CompilerGeneratedAttribute]
public sealed virtual RichText get_Tooltip();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tooltip(RichText value);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle : Enum {
    public int value__;
    public static MenuItemStyle None;
    public static MenuItemStyle Enabled;
    public static MenuItemStyle Separator;
    public static MenuItemStyle GroupHeader;
    public static MenuItemStyle CanExpand;
}
public static class JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyleValidator : object {
    public static void AssertValid(MenuItemStyle style);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem : MenuItemDescriptor {
    public ISimpleSignal Executed;
    public ISignal`1<ItemExpandedEventArgs> Expanded;
    public SimpleMenuItem(RichText text, IconId icon, Action FOnExecute);
    [NotNullAttribute]
[PureAttribute]
public static SimpleMenuItem CreateSeparator();
    internal void Describe(IMenuItemDescriptor descriptor);
}
public class JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo : object {
    private ISignal`1<JetPopupMenuDoc> myClicked;
    [NotNullAttribute]
private IProperty`1<bool> myIsChecked;
    private IProperty`1<IPresentableItem> myPresentation;
    [NotNullAttribute]
private Keys[] myShortcuts;
    private RichText myTooltipText;
    public ISignal`1<JetPopupMenuDoc> Clicked { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IProperty`1<IPresentableItem> Presentation { get; }
    public Keys[] Shortcuts { get; }
    public RichText TooltipText { get; }
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys[] shortcuts, bool checked, Action`1<JetPopupMenuDoc> clickHandler);
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys shortcut, bool checked, Action`1<JetPopupMenuDoc> clickHandler);
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys shortcut, bool checked, Action clickHandler);
    public ToolbarItemInfo(IPresentableItem presentation, RichText tooltiptext, Keys shortcut, bool checked);
    public sealed virtual ISignal`1<JetPopupMenuDoc> get_Clicked();
    public sealed virtual IProperty`1<bool> get_IsChecked();
    public sealed virtual IProperty`1<IPresentableItem> get_Presentation();
    public sealed virtual Keys[] get_Shortcuts();
    public sealed virtual RichText get_TooltipText();
}
public interface JetBrains.Application.UI.Controls.LayoutDesigner.Components.ILayoutDesignerSerializer {
    public abstract virtual string Serialize(object value);
    public abstract virtual object Deserialize(string value);
}
public class JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidth : object {
    public static double MinDifference;
    [CompilerGeneratedAttribute]
private ColumnWidthKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private double <InitialWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MinWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DesiredWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UserWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ActualWidth>k__BackingField;
    public ColumnWidthKind Kind { get; }
    public double InitialWidth { get; }
    public double MaxWidth { get; }
    public double MinWidth { get; }
    public Nullable`1<double> DesiredWidth { get; }
    public Nullable`1<double> UserWidth { get; }
    public double ActualWidth { get; }
    public ColumnWidth(ColumnWidthKind kind, double initialWidth, double maxWidth, double minWidth, Nullable`1<double> desiredWidth, Nullable`1<double> userWidth, double actualWidth);
    [CompilerGeneratedAttribute]
public ColumnWidthKind get_Kind();
    [CompilerGeneratedAttribute]
public double get_InitialWidth();
    [CompilerGeneratedAttribute]
public double get_MaxWidth();
    [CompilerGeneratedAttribute]
public double get_MinWidth();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DesiredWidth();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_UserWidth();
    [CompilerGeneratedAttribute]
public double get_ActualWidth();
    public ColumnWidth WithNewWidth(double width);
}
public class JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidthCalculator : object {
    public sealed virtual IReadOnlyList`1<ColumnWidth> CalculateWidths(IReadOnlyList`1<ColumnWidth> columns, double previousDataWidth, double newDataWidth, Func`2<double, double> round);
}
public enum JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidthKind : Enum {
    public int value__;
    public static ColumnWidthKind Explicit;
    public static ColumnWidthKind Auto;
    public static ColumnWidthKind Star;
}
public interface JetBrains.Application.UI.Controls.Lists.GridView.IColumnWidthCalculator {
    public abstract virtual IReadOnlyList`1<ColumnWidth> CalculateWidths(IReadOnlyList`1<ColumnWidth> columns, double previousDataWidth, double newDataWidth, Func`2<double, double> round);
}
public interface JetBrains.Application.UI.Controls.Lists.IListController {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ScrollToItem(EventHandler`1<IndexEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ScrollToItem(EventHandler`1<IndexEventArgs> value);
    public abstract virtual void RestoreScroll();
}
public interface JetBrains.Application.UI.Controls.Lists.IListEventSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemsUpdated(EventHandler`1<MultipleItemUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemsUpdated(EventHandler`1<MultipleItemUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ScrollToItem(EventHandler`1<ItemUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ScrollToItem(EventHandler`1<ItemUpdatedEventArgs> value);
    public abstract virtual void RestoreScroll();
}
public interface JetBrains.Application.UI.Controls.Lists.IListItemWrapper {
    public object Data { get; }
    public abstract virtual object get_Data();
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataProviders.ChildParentProviderAdapter : DataProviderAdapterBase {
    private IChildParentProviderContainer ProviderContainer { get; }
    public ChildParentProviderAdapter(IWeakSubscriptionManager weakSubscriptionManager);
    private IChildParentProviderContainer get_ProviderContainer();
    public virtual object GetParent(object node);
    public virtual int GetChildrenCount(object node);
    public virtual bool IsLeaf(object node);
    public virtual object GetChild(object node, int childIndex);
    public virtual Nullable`1<int> GetChildIndex(object node, object child);
    protected virtual void OnDataSourceChanged(object oldValue, object newValue);
    private void NotifyPropertyChangedOnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void ChangeProviderOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataProviders.CollectionDataProviderAdapter : DataProviderAdapterBase {
    public CollectionDataProviderAdapter(IWeakSubscriptionManager weakSubscriptionManager);
    public virtual object GetParent(object node);
    public virtual int GetChildrenCount(object node);
    public virtual bool IsLeaf(object node);
    public virtual object GetChild(object node, int childIndex);
    public virtual Nullable`1<int> GetChildIndex(object node, object child);
    protected virtual void OnDataSourceChanged(object oldValue, object newValue);
    private void NotifyCollectionChangedOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual INotifyCollectionChanged GetChangeProvider(object node);
}
public abstract class JetBrains.Application.UI.Controls.Lists.TreeList.DataProviders.DataProviderAdapterBase : object {
    private object myDataSource;
    [CompilerGeneratedAttribute]
private IWeakSubscriptionManager <WeakSubscriptionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MultipleItemUpdatedEventArgs> ItemsUpdated;
    [CompilerGeneratedAttribute]
private EventHandler`1<ItemUpdatedEventArgs> ScrollToItem;
    protected IWeakSubscriptionManager WeakSubscriptionManager { get; }
    public object Root { get; }
    public object DataSource { get; public set; }
    protected DataProviderAdapterBase(IWeakSubscriptionManager weakSubscriptionManager);
    [CompilerGeneratedAttribute]
protected IWeakSubscriptionManager get_WeakSubscriptionManager();
    public virtual object get_Root();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ItemsUpdated(EventHandler`1<MultipleItemUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ItemsUpdated(EventHandler`1<MultipleItemUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ScrollToItem(EventHandler`1<ItemUpdatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ScrollToItem(EventHandler`1<ItemUpdatedEventArgs> value);
    public sealed virtual object get_DataSource();
    public sealed virtual void set_DataSource(object value);
    public abstract virtual object GetParent(object node);
    public abstract virtual int GetChildrenCount(object node);
    public virtual INotifyCollectionChanged GetChangeProvider(object node);
    public abstract virtual bool IsLeaf(object node);
    public abstract virtual object GetChild(object node, int childIndex);
    public abstract virtual Nullable`1<int> GetChildIndex(object node, object child);
    public virtual void RestoreScroll();
    protected void RaiseDataUpdated(IEnumerable items);
    protected void RaiseScrollToItem(object item);
    protected abstract virtual void OnDataSourceChanged(object oldValue, object newValue);
    protected static int GetCount(object enumerable);
    protected static int GetCount(IEnumerable enumerable);
    protected static int GetCount(IEnumerable`1<T> enumerable);
    protected static object GetItem(object enumerable, int index);
    protected static object GetItem(IEnumerable enumerable, int index);
    protected static object GetItem(IEnumerable`1<T> enumerable, int index);
    protected static Nullable`1<int> IndexOf(object enumerable, object item);
    protected static Nullable`1<int> IndexOf(IEnumerable enumerable, object item);
    protected static Nullable`1<int> IndexOf(IEnumerable`1<T> enumerable, T item);
}
public interface JetBrains.Application.UI.Controls.Lists.TreeList.DataProviders.IChildParentProviderContainer {
    public IChildrenProvider ChildrenProvider { get; }
    public IParentProvider ParentProvider { get; }
    public abstract virtual IChildrenProvider get_ChildrenProvider();
    public abstract virtual IParentProvider get_ParentProvider();
}
public interface JetBrains.Application.UI.Controls.Lists.TreeList.DataProviders.IDataProviderAdapter {
    public object DataSource { get; public set; }
    public abstract virtual object get_DataSource();
    public abstract virtual void set_DataSource(object value);
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataProviders.TreeNodeDataProviderAdapter : DataProviderAdapterBase {
    private Dictionary`2<object, object> myParentMap;
    private Dictionary`2<object, Dictionary`2<INotifyPropertyChanged, IDisposable>> mySubscriptions;
    public TreeNodeDataProviderAdapter(IWeakSubscriptionManager weakSubscriptionManager);
    public virtual object GetParent(object node);
    public virtual int GetChildrenCount(object node);
    public virtual bool IsLeaf(object node);
    public virtual object GetChild(object node, int childIndex);
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs args);
    public virtual Nullable`1<int> GetChildIndex(object node, object child);
    protected virtual void OnDataSourceChanged(object oldValue, object newValue);
    public sealed virtual IReadOnlyDictionary`2<int, object> GetExpandedChildren(object node);
    public sealed virtual void SetExpanded(object node, bool isExpanded);
    public sealed virtual Nullable`1<bool> IsExpanded(object node);
    public virtual INotifyCollectionChanged GetChangeProvider(object node);
    public sealed virtual void OnSubscribed(object item);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    public sealed virtual void OnUnsubscribed(object item);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.DataAccessPath : ValueType {
    [CompilerGeneratedAttribute]
private static DataAccessPath <Invalid>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<int> <LocalIndexes>k__BackingField;
    public static DataAccessPath Invalid { get; }
    public bool IsValid { get; }
    public bool IsRoot { get; }
    public IReadOnlyList`1<int> LocalIndexes { get; }
    public string Key { get; }
    public DataAccessPath(IReadOnlyList`1<int> localIndexes);
    private static DataAccessPath();
    [CompilerGeneratedAttribute]
public static DataAccessPath get_Invalid();
    public bool get_IsValid();
    public bool get_IsRoot();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<int> get_LocalIndexes();
    public string get_Key();
    public DataAccessPath GetParent(Nullable`1<int> level);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.IndexEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public int Index { get; }
    public IndexEventArgs(int index);
    [CompilerGeneratedAttribute]
public int get_Index();
}
public interface JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.ITreeController {
    public abstract virtual void CollapseAll();
    public abstract virtual void SetExpanded(int index, bool isExpanded, bool userInteraction);
    public abstract virtual Nullable`1<int> GetParentIndex(int index);
}
internal interface JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.ITreeMapperNodeExpander {
    unknown Action`1<NotifyTreeCollectionChangedEventArgs> EventTrigger {public set; }
    unknown ITreeDataProvider DataProvider {public set; }
    public abstract virtual void set_EventTrigger(Action`1<NotifyTreeCollectionChangedEventArgs> value);
    public abstract virtual void set_DataProvider(ITreeDataProvider value);
    public abstract virtual void Reset();
    public abstract virtual void SynchronizeExpandedState(TreeMapperNode node);
    public abstract virtual void SetExpandedState(TreeMapperNode node, bool isExpanded);
    public abstract virtual void OnDataUpdate(TreeMapperNode node, object previousData);
    public abstract virtual void CollapseEntireNode(TreeMapperNode node, bool cleanup);
    public abstract virtual ValueTuple`2<bool, TreeMapperNode> IsExpandedAndVisible(object data);
}
[IsReadOnlyAttribute]
internal class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.NodeSizeChangeTracker : ValueType {
    private TreeMapperNode myMapperNode;
    private Action`1<NotifyTreeCollectionChangedEventArgs> myEventTrigger;
    private int myOldInnerSize;
    private int myPlainIndex;
    public NodeSizeChangeTracker(TreeMapperNode mapperNode, Action`1<NotifyTreeCollectionChangedEventArgs> eventTrigger);
    public sealed virtual void Dispose();
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.NotifyTreeCollectionChangedEventArgs : NotifyCollectionChangedEventArgs {
    public NotifyTreeCollectionChangedEventArgs(NotifyCollectionChangedAction action);
    public NotifyTreeCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex);
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem : object {
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public object Data { get; }
    public bool IsExpanded { get; }
    public bool CanBeExpanded { get; }
    public int Level { get; }
    internal PlainListItem(object data, int level, bool isExpanded, bool canBeExpanded);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Data();
    [CompilerGeneratedAttribute]
public bool get_IsExpanded();
    [CompilerGeneratedAttribute]
public bool get_CanBeExpanded();
    [CompilerGeneratedAttribute]
public int get_Level();
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeListDataSource : object {
    private TreeMapperNode myTreeMapper;
    private ITreeDataProvider myDataProvider;
    private ITreeMapperNodeExpander myExpander;
    private bool myIsUpdating;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<IndexEventArgs> ScrollToItem;
    public PlainListItem Item { get; }
    public int Count { get; }
    public ITreeDataProvider DataProvider { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.IsReadOnly { get; }
    private int System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.Count { get; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.IList.Item { get; private set; }
    private PlainListItem System.Collections.Generic.IList<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.Item { get; private set; }
    public TreeListDataSource(IWeakSubscriptionManager weakSubscriptionManager);
    internal TreeListDataSource(ITreeMapperNodeExpander expander);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ScrollToItem(EventHandler`1<IndexEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ScrollToItem(EventHandler`1<IndexEventArgs> value);
    public sealed virtual PlainListItem get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual int IndexOf(object data);
    public ITreeDataProvider get_DataProvider();
    public void set_DataProvider(ITreeDataProvider value);
    public sealed virtual void RestoreScroll();
    private void DataProviderScrollToItem(object sender, ItemUpdatedEventArgs e);
    public PlainListItem GetItem(int index);
    internal void RaiseCollectionChanged(NotifyTreeCollectionChangedEventArgs args);
    public sealed virtual void CollapseAll();
    public sealed virtual void SetExpanded(int index, bool isExpanded, bool userInteraction);
    public sealed virtual Nullable`1<int> GetParentIndex(int index);
    private void DataProviderOnItemsUpdated(object sender, MultipleItemUpdatedEventArgs e);
    private TreeMapperNode GetNode(object item);
    private object GetData(DataAccessPath path);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.get_Count();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override PlainListItem System.Collections.Generic.IList<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.set_Item(int index, PlainListItem value);
    private sealed virtual override IEnumerator`1<PlainListItem> System.Collections.Generic.IEnumerable<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.IndexOf(PlainListItem item);
    private sealed virtual override void System.Collections.Generic.IList<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.Insert(int index, PlainListItem item);
    private sealed virtual override void System.Collections.Generic.IList<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.Add(PlainListItem item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.Contains(PlainListItem item);
    private sealed virtual override void System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.CopyTo(PlainListItem[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem>.Remove(PlainListItem item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [CompilerGeneratedAttribute]
private object <GetData>b__29_0(object current, int index);
}
internal class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode : object {
    private WeakReference`1<object> myItem;
    private TreeMapperNode myParent;
    private SortedList`2<int, TreeMapperNode> myCachedChildren;
    [CompilerGeneratedAttribute]
private int <LocalIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InnerSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private IDisposable <ChildrenChangeSubscription>k__BackingField;
    public int LocalIndex { get; private set; }
    public int InnerSize { get; private set; }
    public IList`1<TreeMapperNode> CachedChildren { get; }
    public IReadOnlyDictionary`2<int, TreeMapperNode> CachedChildrenMap { get; }
    public bool IsExpanded { get; private set; }
    public object Item { get; }
    public bool IsDiscarded { get; }
    public IDisposable ChildrenChangeSubscription { get; public set; }
    public bool IsRoot { get; }
    public int PlainIndex { get; }
    private TreeMapperNode(TreeMapperNode parent, int localIndex);
    [CompilerGeneratedAttribute]
public int get_LocalIndex();
    [CompilerGeneratedAttribute]
private void set_LocalIndex(int value);
    [CompilerGeneratedAttribute]
public int get_InnerSize();
    [CompilerGeneratedAttribute]
private void set_InnerSize(int value);
    public IList`1<TreeMapperNode> get_CachedChildren();
    public IReadOnlyDictionary`2<int, TreeMapperNode> get_CachedChildrenMap();
    [CompilerGeneratedAttribute]
public bool get_IsExpanded();
    [CompilerGeneratedAttribute]
private void set_IsExpanded(bool value);
    public object get_Item();
    public bool get_IsDiscarded();
    [CompilerGeneratedAttribute]
public IDisposable get_ChildrenChangeSubscription();
    [CompilerGeneratedAttribute]
public void set_ChildrenChangeSubscription(IDisposable value);
    public bool get_IsRoot();
    public int get_PlainIndex();
    public static TreeMapperNode CreateRoot();
    public void Expand(int innerSize);
    public void Collapse();
    private void AdjustParentInnerSize(int diff);
    public void UpdateLocalIndex(int newIndex);
    public TreeMapperNode GetChild(int localIndex);
    public TreeMapperNode CreateChild(int localIndex);
    public ValueTuple`3<TreeMapperNode, int, DataAccessPath> MapPlainIndex(int plainIndex);
    public virtual string ToString();
    public void SetItem(object newItem, Action`2<TreeMapperNode, object> onChange);
}
internal class JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNodeExpander : object {
    private int myReentrancyCounter;
    private ITreeDataProvider myDataProvider;
    private IExpandedStateProvider myExpandedStateProvider;
    private ISubscriptionTracker mySubscriptionTracker;
    private ITreeEventSource myTreeEventSource;
    private WeakToStrongDictionary`2<object, TreeMapperNode> myExpandedAndVisibleNodes;
    private IWeakSubscriptionManager myWeakSubscriptionManager;
    [CompilerGeneratedAttribute]
private Action`1<NotifyTreeCollectionChangedEventArgs> <EventTrigger>k__BackingField;
    private Action`1<NotifyTreeCollectionChangedEventArgs> EventTrigger { get; public set; }
    unknown ITreeDataProvider DataProvider {public set; }
    public TreeMapperNodeExpander(IWeakSubscriptionManager weakSubscriptionManager);
    [CompilerGeneratedAttribute]
private Action`1<NotifyTreeCollectionChangedEventArgs> get_EventTrigger();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EventTrigger(Action`1<NotifyTreeCollectionChangedEventArgs> value);
    public sealed virtual void set_DataProvider(ITreeDataProvider value);
    public sealed virtual void Reset();
    public sealed virtual void SynchronizeExpandedState(TreeMapperNode node);
    public sealed virtual void SetExpandedState(TreeMapperNode node, bool isExpanded);
    public sealed virtual void OnDataUpdate(TreeMapperNode node, object previousData);
    public sealed virtual void CollapseEntireNode(TreeMapperNode node, bool cleanup);
    public sealed virtual ValueTuple`2<bool, TreeMapperNode> IsExpandedAndVisible(object data);
    private void OnChildrenCollectionChanged(TreeMapperNode node, NotifyCollectionChangedEventArgs args);
    private void Expand(TreeMapperNode mapperNode, bool isSync);
    private void Collapse(TreeMapperNode mapperNode, bool all, bool isSync, bool recursion);
}
public interface JetBrains.Application.UI.Controls.Lists.TreeList.IExpandedStateProvider {
    public abstract virtual Nullable`1<bool> IsExpanded(object node);
    public abstract virtual IReadOnlyDictionary`2<int, object> GetExpandedChildren(object node);
    public abstract virtual void SetExpanded(object node, bool isExpanded);
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.ItemUpdatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public object Item { get; }
    public ItemUpdatedEventArgs(object item);
    [CompilerGeneratedAttribute]
public object get_Item();
}
public interface JetBrains.Application.UI.Controls.Lists.TreeList.ITreeDataProvider {
    [CanBeNullAttribute]
public abstract virtual object GetParent(object node);
    public abstract virtual int GetChildrenCount(object node);
    public abstract virtual bool IsLeaf(object node);
    [CanBeNullAttribute]
public abstract virtual object GetChild(object node, int childIndex);
    public abstract virtual Nullable`1<int> GetChildIndex(object node, object child);
}
public interface JetBrains.Application.UI.Controls.Lists.TreeList.ITreeEventSource {
    public abstract virtual INotifyCollectionChanged GetChangeProvider(object node);
}
public interface JetBrains.Application.UI.Controls.Lists.TreeList.ITreeNode {
    public bool HasChildren { get; }
    public bool IsExpanded { get; public set; }
    public IEnumerable Children { get; }
    public abstract virtual bool get_HasChildren();
    public abstract virtual bool get_IsExpanded();
    public abstract virtual void set_IsExpanded(bool value);
    public abstract virtual IEnumerable get_Children();
}
public class JetBrains.Application.UI.Controls.Lists.TreeList.MultipleItemUpdatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable <Items>k__BackingField;
    public IEnumerable Items { get; }
    public MultipleItemUpdatedEventArgs(IEnumerable items);
    [CompilerGeneratedAttribute]
public IEnumerable get_Items();
}
public class JetBrains.Application.UI.Controls.MemoryUsageIndicatorContentAutomation : AAutomation {
    private InternalMode myInternalMode;
    public IProperty`1<bool> IsAccurateValue;
    public IProperty`1<long> MemoryUsageBytes;
    public Property`1<string> MemoryUsageText;
    public IStatusBarColorsManager StatusBarColorsManager;
    public MemoryUsageIndicatorContentAutomation(Lifetime lifetime, InternalMode internalmode, IStatusBarColorsManager statusBarColorsManager);
    [NotNullAttribute]
public RichText GetTooltipText();
}
public class JetBrains.Application.UI.Controls.Misc.FilterController`1 : ObservableObject {
    private List`1<FilterItemType> myFilterOptions;
    private bool myAllowMultipleActiveItems;
    [CompilerGeneratedAttribute]
private Action FiltersChanged;
    private List`1<FilterItem<FilterItemType>> myFilterItems;
    private List`1<FilterItemType> myAppliedFilters;
    public bool AllowMultipleActiveItems { get; public set; }
    public IEnumerable`1<FilterItem<FilterItemType>> FilterItems { get; }
    [NotNullAttribute]
public IEnumerable`1<FilterItem<FilterItemType>> ActiveFilterItems { get; }
    public IEnumerable`1<FilterItemType> AppliedFilters { get; }
    public FilterController`1(IEnumerable`1<FilterItemType> filterOptions, Func`2<FilterItemType, string> displayText);
    private bool OnGet(FilterItem<FilterItemType> filterItem);
    private void OnSet(FilterItem<FilterItemType> filterItem, bool newValue);
    public bool get_AllowMultipleActiveItems();
    public void set_AllowMultipleActiveItems(bool value);
    [CompilerGeneratedAttribute]
public void add_FiltersChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_FiltersChanged(Action value);
    public IEnumerable`1<FilterItem<FilterItemType>> get_FilterItems();
    public IEnumerable`1<FilterItem<FilterItemType>> get_ActiveFilterItems();
    public IEnumerable`1<FilterItemType> get_AppliedFilters();
    public bool CheckAny(IEnumerable`1<FilterItemType> toCheck);
}
public class JetBrains.Application.UI.Controls.Misc.SearchModelEventHandler : MulticastDelegate {
    public SearchModelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs`1<string> args);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs`1<string> args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.PresentableItemAutomation : AAutomation {
    [NotNullAttribute]
public IPresentableItem PresentableItem;
    [NotNullAttribute]
public RenderParams RenderParams;
    public PresentableItemAutomation(IPresentableItem presentableItem, RenderParams renderParams);
    public PresentableItemAutomation(IPresentableItem presentableItem);
    public PresentableItemAutomation(RichText text);
    public PresentableItemAutomation(string text);
    public PresentableItemAutomation(IconId icon, RichText label);
    public PresentableItemAutomation(RichText richText, IList`1<PresentableItemImage> images);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.PresentableItemBlockAutomation : AAutomation {
    [NotNullAttribute]
public PresentableItemBlock PresentableItem;
    [NotNullAttribute]
public RenderParams RenderParams;
    public PresentableItemBlockAutomation(PresentableItemBlock presentableitem, RenderParams renderparams);
    public PresentableItemBlockAutomation(PresentableItemBlock presentableitem);
}
public interface JetBrains.Application.UI.Controls.RadioGroup.IRadioGroupButtonViewModel {
    public IProperty`1<object> Label { get; }
    public IProperty`1<object> ToolTip { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IListEvents`1<object> DependentItems { get; }
    public IProperty`1<double> IndendDependentItems { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public IProperty`1<PanelOrientation> PanelOrientation { get; }
    public abstract virtual IProperty`1<object> get_Label();
    public abstract virtual IProperty`1<object> get_ToolTip();
    public abstract virtual IProperty`1<bool> get_IsChecked();
    public abstract virtual IListEvents`1<object> get_DependentItems();
    public abstract virtual IProperty`1<double> get_IndendDependentItems();
    public abstract virtual IProperty`1<bool> get_ShouldBeDisabled();
    public abstract virtual IProperty`1<PanelOrientation> get_PanelOrientation();
}
public interface JetBrains.Application.UI.Controls.RadioGroup.IRadioGroupViewModel {
    public IListEvents`1<IRadioGroupButtonViewModel> RadioButtonViewModels { get; }
    public IProperty`1<RichText> Label { get; }
    public IProperty`1<bool> IsCheckBoxCheckedLogically { get; }
    public IProperty`1<bool> IsCheckBoxCheckedVisually { get; }
    public IProperty`1<double> IndentRadioButtons { get; }
    public IProperty`1<bool> IsCheckBoxVisible { get; }
    public IProperty`1<bool> IsLabelVisible { get; }
    public IProperty`1<PanelOrientation> PanelOrientation { get; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public abstract virtual IListEvents`1<IRadioGroupButtonViewModel> get_RadioButtonViewModels();
    public abstract virtual IProperty`1<RichText> get_Label();
    public abstract virtual IProperty`1<bool> get_IsCheckBoxCheckedLogically();
    public abstract virtual IProperty`1<bool> get_IsCheckBoxCheckedVisually();
    public abstract virtual IProperty`1<double> get_IndentRadioButtons();
    public abstract virtual IProperty`1<bool> get_IsCheckBoxVisible();
    public abstract virtual IProperty`1<bool> get_IsLabelVisible();
    public abstract virtual IProperty`1<PanelOrientation> get_PanelOrientation();
    public abstract virtual IProperty`1<bool> get_IsEnabledProperty();
}
public enum JetBrains.Application.UI.Controls.RadioGroup.PanelOrientation : Enum {
    public int value__;
    public static PanelOrientation Horizontal;
    public static PanelOrientation Vertical;
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupButtonViewModel`1 : object {
    private RadioButtonModel<TValue> myButtonModel;
    [CompilerGeneratedAttribute]
private IProperty`1<PanelOrientation> <PanelOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<object> <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private IListEvents`1<object> <DependentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <IndendDependentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShouldBeDisabled>k__BackingField;
    public IProperty`1<PanelOrientation> PanelOrientation { get; }
    public RadioButtonModel<TValue> ButtonModel { get; }
    public IProperty`1<object> Label { get; }
    public IProperty`1<object> ToolTip { get; }
    public IProperty`1<bool> IsChecked { get; }
    public IListEvents`1<object> DependentItems { get; }
    public IProperty`1<double> IndendDependentItems { get; }
    public IProperty`1<bool> ShouldBeDisabled { get; }
    public RadioGroupButtonViewModel`1(Lifetime lifetime, IRadioGroupViewModel modelParent, RadioButtonModel<TValue> modelButton);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PanelOrientation> get_PanelOrientation();
    private void InitLogging(Lifetime lifetime);
    public RadioButtonModel<TValue> get_ButtonModel();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<object> get_Label();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<object> get_ToolTip();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsChecked();
    [CompilerGeneratedAttribute]
public sealed virtual IListEvents`1<object> get_DependentItems();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<double> get_IndendDependentItems();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_ShouldBeDisabled();
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1 : object {
    private Lifetime myLifetime;
    public Property`1<bool> HasCheckbox;
    public IProperty`1<RichText> LabelText;
    public IProperty`1<RichText> LabelHelp;
    public Property`1<TValue> NothingSelectedValue;
    public Property`1<TValue> Value;
    [NotNullAttribute]
public ListEvents`1<RadioButtonModel<TValue>> RadioButtons;
    public Lifetime Lifetime { get; }
    public RadioGroupModel`1(Lifetime lifetime);
    private void InitLogging(Lifetime lifetime);
    [ObsoleteAttribute("Do the adds on the radio button object returned from AddRadioButton call.")]
public void AddComment(RichText text);
    [ObsoleteAttribute("Do the adds on the radio button object returned from AddRadioButton call.")]
public void AddDependent(object control);
    [NotNullAttribute]
public RadioButtonModel<TValue> AddRadioButton(RichText text, TValue value, string toolTip);
    private void InitDataFlow(Lifetime lifetime);
    [DebuggerStepThroughAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__12_0(BeforeAddRemoveIndexEventArgs`1<RadioButtonModel<TValue>> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__12_1(AddRemoveIndexEventArgs`1<RadioButtonModel<TValue>> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__12_2(BeforePropertyChangedEventArgs`1<TValue> args);
    [CompilerGeneratedAttribute]
private void <InitDataFlow>b__12_3();
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IListEvents`1<IRadioGroupButtonViewModel> <RadioButtonViewModels>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<RichText> <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<RichText> <LabelHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCheckBoxCheckedLogically>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCheckBoxCheckedVisually>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<double> <IndentRadioButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCheckBoxVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsLabelVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsLabelHelpVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<PanelOrientation> <PanelOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    public IListEvents`1<IRadioGroupButtonViewModel> RadioButtonViewModels { get; }
    public IProperty`1<RichText> Label { get; }
    public IProperty`1<RichText> LabelHelp { get; }
    public IProperty`1<bool> IsCheckBoxCheckedLogically { get; }
    public IProperty`1<bool> IsCheckBoxCheckedVisually { get; }
    public IProperty`1<double> IndentRadioButtons { get; }
    public IProperty`1<bool> IsCheckBoxVisible { get; }
    public IProperty`1<bool> IsLabelVisible { get; }
    public IProperty`1<bool> IsLabelHelpVisible { get; }
    public IProperty`1<PanelOrientation> PanelOrientation { get; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public RadioGroupViewModel(Lifetime lifetime, IProperty`1<RichText> labelText, IProperty`1<RichText> labelHelp);
    [CompilerGeneratedAttribute]
public sealed virtual IListEvents`1<IRadioGroupButtonViewModel> get_RadioButtonViewModels();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<RichText> get_Label();
    [CompilerGeneratedAttribute]
public IProperty`1<RichText> get_LabelHelp();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckBoxCheckedLogically();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckBoxCheckedVisually();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<double> get_IndentRadioButtons();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsCheckBoxVisible();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsLabelVisible();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsLabelHelpVisible();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<PanelOrientation> get_PanelOrientation();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
}
public class JetBrains.Application.UI.Controls.RadioGroup.RadioGroupViewModel`1 : RadioGroupViewModel {
    private RadioGroupModel`1<TValue> myModel;
    private ListEvents`1<RadioGroupButtonViewModel`1<TValue>> myRadioButtonViewModelsEx;
    public RadioGroupModel`1<TValue> Model { get; }
    public RadioGroupViewModel`1(Lifetime lifetime, RadioGroupModel`1<TValue> model);
    private void InitLogging(Lifetime lifetime);
    private void InitButtonViewModels(Lifetime lifetime, RadioGroupModel`1<TValue> model);
    private void InitDataFlow(Lifetime lifetime);
    [DebuggerStepThroughAttribute]
public RadioGroupModel`1<TValue> get_Model();
}
public class JetBrains.Application.UI.Controls.RichTextAutomation : AAutomation {
    private IProperty`1<RenderParams> myRenderParams;
    private IProperty`1<RichTextBlock> myRichTextBlock;
    [NotNullAttribute]
public IProperty`1<RichTextBlock> RichTextBlock { get; }
    [NotNullAttribute]
public IProperty`1<RenderParams> RenderParams { get; }
    public RichTextAutomation(RichText richText);
    public RichTextAutomation(RichTextBlock block, RenderParams renderParams);
    public RichTextAutomation(RichTextBlock block);
    public IProperty`1<RichTextBlock> get_RichTextBlock();
    public IProperty`1<RenderParams> get_RenderParams();
}
public class JetBrains.Application.UI.Controls.RichTextWithProgressAutomation : AAutomation {
    public IProperty`1<double> Value;
    public IProperty`1<RichTextBlock> Text;
    public RichTextWithProgressAutomation(RichTextBlock richText);
}
public static class JetBrains.Application.UI.Controls.SafeControlManager : object {
    private static WeakToStrongDictionary`2<Control, ControlData> ourWatchedControls;
    private static Nullable`1<bool> ourShouldTrack;
    private static SafeControlManager();
    private static bool GetShouldTrack(IUIApplicationSimple environment);
    public static void Register(TControl control, IUIApplicationSimple environment);
    private static void ParentChanged(object sender, EventArgs e);
    public static void ControlDisposed(Control control, bool disposing, IUIApplicationSimple environment);
    private static void LogProblem(string format, Object[] args);
}
public abstract class JetBrains.Application.UI.Controls.SafeFlowLayoutPanel : FlowLayoutPanel {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; }
    protected SafeFlowLayoutPanel(IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public abstract class JetBrains.Application.UI.Controls.SafePanel : Panel {
    [CanBeNullAttribute]
private IUIApplicationSimple myUiapp;
    protected SafePanel(IUIApplicationSimple uiapp);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public class JetBrains.Application.UI.Controls.SafeTableLayoutPanel : TableLayoutPanel {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; }
    protected SafeTableLayoutPanel(IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public abstract class JetBrains.Application.UI.Controls.SafeUserControl : UserControl {
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    public IUIApplication Environment { get; }
    protected SafeUserControl(IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool JetBrains.Application.UI.Controls.ITopLevelOwner.GetTopLevel();
}
public class JetBrains.Application.UI.Controls.SizeConstraint : object {
    public static SizeConstraint Empty;
    private int myMaxWidth;
    private int myMaxHeight;
    public int MaxWidth { get; }
    public int MaxHeight { get; }
    public bool IsEmpty { get; }
    public Size ConstrainingSize { get; }
    public SizeConstraint(Size size);
    public SizeConstraint(int maxWidth, int maxHeight);
    private static SizeConstraint();
    public int get_MaxWidth();
    public int get_MaxHeight();
    public bool get_IsEmpty();
    public Size get_ConstrainingSize();
    public bool Satisfies(Size size);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Size op_Explicit(SizeConstraint constraint);
    public static SizeConstraint op_Explicit(Size size);
}
public class JetBrains.Application.UI.Controls.SpinningTrefoilAutomation : AAutomation {
    public IProperty`1<NextItemDir> Direction;
    public IProperty`1<bool> IsHot;
    public IProperty`1<bool> IsInverted;
    public SpinningTrefoilAutomation(Lifetime lifetime);
}
public class JetBrains.Application.UI.Controls.StaticBitmapAutomation : AAutomation {
    public Image Image;
    public StaticBitmapAutomation(Image image);
}
public class JetBrains.Application.UI.Controls.StatusBarAiVolumeIndicatorAutomation : AAutomation {
    public IconId IconId;
    public RichText Tooltip;
    public Thickness Margin;
    public StatusBarAiVolumeIndicatorAutomation(IconId icon, RichText tooltip, Thickness margin);
    [NotNullAttribute]
public static StatusBarAiVolumeIndicatorAutomation Create(RichText tooltip, Thickness margin);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Controls.StatusBarBackgroundProgressIndicatorManager : object {
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private IStatusBar <StatusBar>k__BackingField;
    public IShellLocks Locks { get; }
    public IStatusBar StatusBar { get; }
    public StatusBarBackgroundProgressIndicatorManager(IShellLocks locks, IStatusBar statusBar);
    [CompilerGeneratedAttribute]
public sealed virtual IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public IStatusBar get_StatusBar();
    public sealed virtual IBackgroundProgressIndicator CreateIndicator(Lifetime lifetime, bool isCancellable, bool hasProgress, string title);
}
public class JetBrains.Application.UI.Controls.StatusBarIndicatorVm : object {
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public IProperty`1<IconId> Icon { get; }
    public StatusBarIndicatorVm(IProperty`1<IconId> icon);
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Application.UI.Controls.StatusBarProgressIndicator : object {
    [NotNullAttribute]
public IProperty`1<IconId> Icon;
    [NotNullAttribute]
public JetStatusBarIndicator Indicator;
    [NotNullAttribute]
public IProperty`1<string> Text;
    [NotNullAttribute]
public IProperty`1<double> Value;
    public StatusBarProgressIndicator(Lifetime lifetime, IStatusBar statusBar, IconId icon, string text, Action iconClicked);
}
public class JetBrains.Application.UI.Controls.StatusBarProgressIndicatorContentAutomation : AAutomation {
    public static string DefaultText;
    public IProperty`1<IconId> Icon;
    public Property`1<string> Text;
    public IProperty`1<double> Value;
    public SignalCommand IconClicked;
    public StatusBarProgressIndicatorContentAutomation(Action iconClicked);
    private static StatusBarProgressIndicatorContentAutomation();
}
public abstract class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.ButtonProviderBase : ObservableObject {
    [CompilerGeneratedAttribute]
private ButtonViewModel <DoubleClickHandlingButton>k__BackingField;
    public ButtonViewModel DoubleClickHandlingButton { get; protected set; }
    public abstract virtual IEnumerable`1<ButtonViewModel> GetButtons();
    [CompilerGeneratedAttribute]
public sealed virtual ButtonViewModel get_DoubleClickHandlingButton();
    [CompilerGeneratedAttribute]
protected void set_DoubleClickHandlingButton(ButtonViewModel value);
    public virtual void HandleViewKeyPress(Key k);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.ButtonViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <Command>k__BackingField;
    public IconId IconId { get; }
    public RichText Text { get; }
    public IProperty`1<bool> IsEnabledProperty { get; public set; }
    public DelegateCommand Command { get; }
    public ButtonViewModel(IconId iconId, string text, IProperty`1<bool> isEnabledProperty, DelegateCommand command);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public RichText get_Text();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
public void set_IsEnabledProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public DelegateCommand get_Command();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProvider : DefaultButtonProviderBase {
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private Func`2<string, string> myValidator;
    private IPromptWinForm myPromptWinForm;
    public DefaultButtonProvider(Lifetime lifetime, ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IPromptWinForm promptWinForm, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, Func`2<string, string> validator, DefaultButtonProviderCaptions defaultButtonProviderCaptions);
    protected virtual void AddButtonHandler();
    protected virtual void EditButtonHandler();
}
public abstract class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProviderBase : ButtonProviderBase {
    private List`1<ButtonViewModel> myButtons;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollectionEditItemViewModel> <SelectedItemProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<ICollectionEditItemViewModel> <Items>k__BackingField;
    protected IProperty`1<ICollectionEditItemViewModel> SelectedItemProperty { get; }
    protected ObservableCollection`1<ICollectionEditItemViewModel> Items { get; }
    protected DefaultButtonProviderBase(Lifetime lifetime, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, ObservableCollection`1<ICollectionEditItemViewModel> items, DefaultButtonProviderCaptions defaultButtonProviderCaptions);
    [CompilerGeneratedAttribute]
protected IProperty`1<ICollectionEditItemViewModel> get_SelectedItemProperty();
    [CompilerGeneratedAttribute]
protected ObservableCollection`1<ICollectionEditItemViewModel> get_Items();
    public virtual IEnumerable`1<ButtonViewModel> GetButtons();
    protected abstract virtual void AddButtonHandler();
    protected abstract virtual void EditButtonHandler();
    protected virtual void RemoveButtonHandler();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProviderCaptions : object {
    public static DefaultButtonProviderCaptions Default;
    [CompilerGeneratedAttribute]
private IconIdAndText <AddButtonInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IconIdAndText <EditButtonInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IconIdAndText <RemoveButtonInfo>k__BackingField;
    public IconIdAndText AddButtonInfo { get; }
    public IconIdAndText EditButtonInfo { get; }
    public IconIdAndText RemoveButtonInfo { get; }
    public DefaultButtonProviderCaptions(IconIdAndText addButtonInfo, IconIdAndText editButtonInfo, IconIdAndText removeButtonInfo);
    public DefaultButtonProviderCaptions(string addButtonText, IconId addButtonIconId, string editButtonText, IconId editButtonIconId, string removeButtonText, IconId removeButtonIconId);
    private static DefaultButtonProviderCaptions();
    [CompilerGeneratedAttribute]
public IconIdAndText get_AddButtonInfo();
    [CompilerGeneratedAttribute]
public IconIdAndText get_EditButtonInfo();
    [CompilerGeneratedAttribute]
public IconIdAndText get_RemoveButtonInfo();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.DefaultButtonProviderFactory : object {
    private Lifetime myLifetime;
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private Func`2<string, string> myValidator;
    private DefaultButtonProviderCaptions myDefaultButtonProviderCaptions;
    private IPromptWinForm myPromptWinForms;
    public DefaultButtonProviderFactory(Lifetime lifetime, IPromptWinForm promptWinForms, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, Func`2<string, string> validator, DefaultButtonProviderCaptions defaultButtonProviderCaptions);
    public sealed virtual IButtonProvider GetButtonProvider(ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> selectedMultipleItemsProperty);
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.IButtonProvider {
    [CanBeNullAttribute]
public ButtonViewModel DoubleClickHandlingButton { get; }
    [NotNullAttribute]
public abstract virtual IEnumerable`1<ButtonViewModel> GetButtons();
    public abstract virtual ButtonViewModel get_DoubleClickHandlingButton();
    public abstract virtual void HandleViewKeyPress(Key k);
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.IButtonProviderFactory {
    public abstract virtual IButtonProvider GetButtonProvider(ObservableCollection`1<ICollectionEditItemViewModel> items, IProperty`1<ICollectionEditItemViewModel> selectedItemProperty, IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> selectedMultipleItemsProperty);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Buttons.IconIdAndText : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    public string Text { get; }
    public IconId IconId { get; }
    public IconIdAndText(string text, IconId iconId);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public IconId get_IconId();
}
public abstract class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.CollectionEditItemViewModelBase : ObservableObject {
    public IconId IconId { get; }
    public RichText PresentableName { get; }
    public abstract virtual IconId get_IconId();
    public abstract virtual RichText get_PresentableName();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.DefaultCollectionEditItemViewModelFactory : object {
    private IconId myIconId;
    public DefaultCollectionEditItemViewModelFactory(IconId iconId);
    public sealed virtual ICollectionEditItemViewModel GetCollectionEditItemViewModel(string presentableName, IconId iconId, object behindValue);
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.ICollectionEditItemViewModel {
    public IconId IconId { get; }
    public RichText PresentableName { get; }
    public abstract virtual IconId get_IconId();
    public abstract virtual RichText get_PresentableName();
}
public interface JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.ICollectionEditItemViewModelFactory {
    public abstract virtual ICollectionEditItemViewModel GetCollectionEditItemViewModel(string presentableName, IconId iconId, object behindValue);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.Items.StringCollectionEditItemViewModel : CollectionEditItemViewModelBase {
    private IconId myIconId;
    private string myPresentableName;
    public IconId IconId { get; }
    public RichText PresentableName { get; }
    public StringCollectionEditItemViewModel(string presentableName, IconId iconId);
    public virtual IconId get_IconId();
    public virtual RichText get_PresentableName();
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.PairStringCollectionEditViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private StringCollectionEditViewModel <LeftViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private StringCollectionEditViewModel <RightViewModel>k__BackingField;
    public StringCollectionEditViewModel LeftViewModel { get; public set; }
    public StringCollectionEditViewModel RightViewModel { get; public set; }
    public PairStringCollectionEditViewModel(StringCollectionEditViewModel leftViewModel, StringCollectionEditViewModel rightViewModel);
    [CompilerGeneratedAttribute]
public StringCollectionEditViewModel get_LeftViewModel();
    [CompilerGeneratedAttribute]
public void set_LeftViewModel(StringCollectionEditViewModel value);
    [CompilerGeneratedAttribute]
public StringCollectionEditViewModel get_RightViewModel();
    [CompilerGeneratedAttribute]
public void set_RightViewModel(StringCollectionEditViewModel value);
}
public class JetBrains.Application.UI.Controls.StringCollectionEdit.Impl.StringCollectionEditViewModel : ObservableObject {
    private ICollectionEditItemViewModelFactory myCollectionEditItemViewModelFactory;
    private bool myAllowMultiselect;
    [CompilerGeneratedAttribute]
private IButtonProvider <ButtonProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private ISortDescription <SortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<ICollectionEditItemViewModel> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ICollectionEditItemViewModel> <SelectedItemProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> <SelectedMultipleItemsProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    public SelectionMode SelectionMode { get; }
    public IButtonProvider ButtonProvider { get; }
    public string Caption { get; }
    public ISortDescription SortDescription { get; }
    public ObservableCollection`1<ICollectionEditItemViewModel> Items { get; }
    public IProperty`1<ICollectionEditItemViewModel> SelectedItemProperty { get; }
    public IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> SelectedMultipleItemsProperty { get; }
    public IProperty`1<bool> IsEnabledProperty { get; }
    public StringCollectionEditViewModel(Lifetime lifetime, string caption, IButtonProviderFactory buttonProviderFactory, ICollectionEditItemViewModelFactory collectionEditItemViewModelFactory, ISortDescription sortDescription, bool allowMultiselect);
    public SelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public IButtonProvider get_ButtonProvider();
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public ISortDescription get_SortDescription();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<ICollectionEditItemViewModel> get_Items();
    [CompilerGeneratedAttribute]
public IProperty`1<ICollectionEditItemViewModel> get_SelectedItemProperty();
    [CompilerGeneratedAttribute]
public IProperty`1<IEnumerable`1<ICollectionEditItemViewModel>> get_SelectedMultipleItemsProperty();
    public void AddItem(string presentableName, IconId iconId, object behindValue);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
}
public enum JetBrains.Application.UI.Controls.TabStrip.TabStripPageAlignment : Enum {
    public int value__;
    public static TabStripPageAlignment Top;
    public static TabStripPageAlignment Bottom;
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripClosedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TabStripItem[] <Items>k__BackingField;
    public TabStripItem[] Items { get; }
    public TabStripClosedEventArgs(TabStripItem[] items);
    [CompilerGeneratedAttribute]
public TabStripItem[] get_Items();
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripClosingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private TabStripItem[] <Items>k__BackingField;
    public TabStripItem[] Items { get; }
    public TabStripClosingEventArgs(TabStripItem[] items, bool cancel);
    [CompilerGeneratedAttribute]
public TabStripItem[] get_Items();
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripItem : object {
    [CompilerGeneratedAttribute]
private EventHandler IsPinnedChanged;
    [CompilerGeneratedAttribute]
private EventHandler IsSelectedChanged;
    private DelegateCommand myShowCommand;
    private DelegateCommand myCloseCommand;
    private bool myIsSelected;
    private object myHeader;
    private object myContent;
    private TabStripViewModel myViewModel;
    private bool myIsPinned;
    private bool myPinnable;
    private bool myClosable;
    private object myTooltip;
    private LifetimeDefinition myLifetimeDef;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public Lifetime Lifetime { get; }
    public object Header { get; public set; }
    public object Content { get; public set; }
    public object Tooltip { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsPinned { get; public set; }
    public bool Pinnable { get; public set; }
    public bool Closable { get; public set; }
    public ICommand CloseCommand { get; }
    public ICommand ShowCommand { get; }
    public TabStripItem(TabStripViewModel viewModel);
    [CompilerGeneratedAttribute]
public void add_IsPinnedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IsPinnedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_IsSelectedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IsSelectedChanged(EventHandler value);
    public Lifetime get_Lifetime();
    public object get_Header();
    public void set_Header(object value);
    public object get_Content();
    public void set_Content(object value);
    public object get_Tooltip();
    public void set_Tooltip(object value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsPinned();
    public void set_IsPinned(bool value);
    public bool get_Pinnable();
    public void set_Pinnable(bool value);
    public bool get_Closable();
    public void set_Closable(bool value);
    public ICommand get_CloseCommand();
    private void OnCloseCommandInvoked();
    public ICommand get_ShowCommand();
    private void OnShowCommandInvoked();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <get_CloseCommand>b__42_0();
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripItemCollection : ObservableCollection`1<TabStripItem> {
    private int GetIndexAfterLastPinnedOrZero();
    public void InsertAfterPinned(TabStripItem tabStripItem);
}
public enum JetBrains.Application.UI.Controls.TabStripView.TabStripOpenTabMode : Enum {
    public int value__;
    public static TabStripOpenTabMode AtBeginning;
    public static TabStripOpenTabMode AtEnd;
}
public class JetBrains.Application.UI.Controls.TabStripView.TabStripViewModel : object {
    [CompilerGeneratedAttribute]
private EventHandler SelectedItemChanged;
    [CompilerGeneratedAttribute]
private EventHandler SelectedItemChanging;
    [CompilerGeneratedAttribute]
private EventHandler Activated;
    private bool myHasRecentItems;
    private TabStripItem mySelectedItem;
    private TabStripOpenTabMode myOpenTabMode;
    [CompilerGeneratedAttribute]
private TabStripItemCollection <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private TabStripItemCollection <RecentItems>k__BackingField;
    private IProperty`1<bool> myContextMenuVisible;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private DelegateCommand myCloseAllCommand;
    private IProperty`1<bool> myCloseAllTabsVisible;
    private DelegateCommand myCloseAllButThisCommand;
    private IProperty`1<bool> myCloseAllButThisVisible;
    private DelegateCommand myCloseAllButPinnedCommand;
    private IProperty`1<bool> myCloseAllButPinnedVisible;
    private DelegateCommand myCloseSelectedItemCommand;
    private bool myAllowRecentItems;
    private IProperty`1<bool> myCloseTabVisible;
    private IProperty`1<ICommand> myAddNewTabCommand;
    private IProperty`1<object> myAddNewTabTooltip;
    private IProperty`1<bool> myAddNewTabAvailable;
    private IProperty`1<bool> myManageTabActivation;
    [CompilerGeneratedAttribute]
private EventHandler`1<TabStripClosingEventArgs> Closing;
    [CompilerGeneratedAttribute]
private EventHandler`1<TabStripClosedEventArgs> Closed;
    public TabStripItemCollection Items { get; }
    public TabStripItemCollection RecentItems { get; }
    public bool HasRecentItems { get; private set; }
    public TabStripOpenTabMode OpenTabMode { get; public set; }
    public bool AllowRecentItems { get; public set; }
    public TabStripItem SelectedItem { get; public set; }
    public ICommand CloseAllCommand { get; }
    public IProperty`1<bool> CloseAllTabsVisible { get; }
    public IProperty`1<bool> CloseAllButThisVisible { get; }
    public ICommand CloseAllButThisCommand { get; }
    public ICommand CloseAllButPinnedCommand { get; }
    public IProperty`1<bool> CloseAllButPinnedVisible { get; }
    public IProperty`1<bool> CloseTabVisible { get; }
    public ICommand CloseSelectedItemCommand { get; }
    public IProperty`1<ICommand> AddNewTabCommand { get; }
    public IProperty`1<object> AddNewTabTooltip { get; }
    public IProperty`1<bool> AddNewTabAvailable { get; }
    public IProperty`1<bool> ManageTabActivation { get; }
    public IProperty`1<bool> ContextMenuVisible { get; }
    [CompilerGeneratedAttribute]
public void add_SelectedItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectedItemChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectedItemChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectedItemChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Activated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Activated(EventHandler value);
    [CompilerGeneratedAttribute]
public TabStripItemCollection get_Items();
    [CompilerGeneratedAttribute]
public TabStripItemCollection get_RecentItems();
    public bool get_HasRecentItems();
    private void set_HasRecentItems(bool value);
    public TabStripOpenTabMode get_OpenTabMode();
    public void set_OpenTabMode(TabStripOpenTabMode value);
    public bool get_AllowRecentItems();
    public void set_AllowRecentItems(bool value);
    public TabStripItem get_SelectedItem();
    public void set_SelectedItem(TabStripItem value);
    protected virtual void OnSelectedItemChanged();
    protected void RaiseSelectedItemChanged();
    public void Open(TabStripItem tabStripItem);
    public virtual void Activate();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    public ICommand get_CloseAllCommand();
    private void OnCloseAllCommandInvoked();
    public IProperty`1<bool> get_CloseAllTabsVisible();
    public IProperty`1<bool> get_CloseAllButThisVisible();
    public ICommand get_CloseAllButThisCommand();
    private void OnCloseAllButThisCommandInvoked();
    public ICommand get_CloseAllButPinnedCommand();
    private void OnCloseAllButPinnedCommandInvoked();
    public IProperty`1<bool> get_CloseAllButPinnedVisible();
    public IProperty`1<bool> get_CloseTabVisible();
    public ICommand get_CloseSelectedItemCommand();
    private void OnCloseSelectedItemCommandInvoked();
    public IProperty`1<ICommand> get_AddNewTabCommand();
    public IProperty`1<object> get_AddNewTabTooltip();
    public IProperty`1<bool> get_AddNewTabAvailable();
    public IProperty`1<bool> get_ManageTabActivation();
    [CompilerGeneratedAttribute]
public void add_Closing(EventHandler`1<TabStripClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closing(EventHandler`1<TabStripClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler`1<TabStripClosedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler`1<TabStripClosedEventArgs> value);
    private bool PrepareClosing(TabStripItem[] items);
    public bool Close(IEnumerable`1<TabStripItem> items);
    public IProperty`1<bool> get_ContextMenuVisible();
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_0(object sender, NotifyCollectionChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_1(object s, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <get_CloseAllCommand>b__43_0();
    [CompilerGeneratedAttribute]
private bool <get_CloseAllButThisCommand>b__52_0();
    [CompilerGeneratedAttribute]
private bool <get_CloseAllButThisCommand>b__52_1(TabStripItem item);
    [CompilerGeneratedAttribute]
private bool <OnCloseAllButThisCommandInvoked>b__53_0(TabStripItem item);
    [CompilerGeneratedAttribute]
private bool <get_CloseSelectedItemCommand>b__67_0();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeGrid.ActionInvokatorExtensions : object {
    [ExtensionAttribute]
public static bool ExecuteOrQueue(IActionInvocator actionInvocator, Action action);
}
public class JetBrains.Application.UI.Controls.TreeGrid.CachedFilterDescriptor : object {
    private WeakToStrongDictionary`2<object, Nullable`1<bool>> mySelfVisibilityCache;
    private WeakHashSet`1<object> myStronglyVisibleSet;
    private IFilterDescriptor myFilterDescription;
    private Func`2<object, object> myFGetParent;
    private FilteringMode myMode;
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    public CachedFilterDescriptor(IFilterDescriptor filterDescriptor, FilteringMode mode, Func`2<object, object> getParent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.Cancellable : object {
    public static ICancellable Empty;
    private Action myCancel;
    public Cancellable(Action cancel);
    private static Cancellable();
    public sealed virtual void Cancel();
}
public class JetBrains.Application.UI.Controls.TreeGrid.CancellableAction : object {
    private Action myAction;
    private bool myTrapExceptions;
    private bool myCancelled;
    public CancellableAction(Action action, bool trapExceptions);
    public void Do();
    public sealed virtual void Cancel();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ChainedJobQueue : object {
    private JetPriorityQueue`1<IChainedJob> myQueue;
    public bool IsEmpty { get; }
    public void Enqueue(IChainedJob chainedJob);
    public void Clear();
    public bool get_IsEmpty();
    public void Pump();
    public void Pump(TimeSpan timeLimit);
}
public class JetBrains.Application.UI.Controls.TreeGrid.ChainedJobScheduler : object {
    private TimeSpan myTimeBudget;
    private Action`1<Action> myDispatch;
    private ChainedJobQueue myChainedJobQueue;
    private bool myIsPumpOnceScheduled;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsProcessing>k__BackingField;
    public Property`1<bool> IsProcessing { get; }
    public TimeSpan TimeBudget { get; public set; }
    public Action`1<Action> Dispatch { get; public set; }
    public ChainedJobScheduler(TimeSpan timeBudget, Action`1<Action> dispatch, ChainedJobQueue chainedJobQueue);
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsProcessing();
    public TimeSpan get_TimeBudget();
    public void set_TimeBudget(TimeSpan value);
    public Action`1<Action> get_Dispatch();
    public void set_Dispatch(Action`1<Action> value);
    public void Schedule(IChainedJob job);
    private void UpdateIsProcessing();
    private void SchedulePumpOnce();
    public void Pump();
    public void Pump(TimeSpan timeLimit);
    [CompilerGeneratedAttribute]
private void <SchedulePumpOnce>b__16_0();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ChildrenProviders.ChildrenProvider`1 : object {
    [NotNullAttribute]
private Func`2<T, IEnumerable> myGetChildren;
    [NotNullAttribute]
private Func`2<T, bool> myHasChildren;
    [CompilerGeneratedAttribute]
private bool <IsObservable>k__BackingField;
    public bool IsObservable { get; }
    public ChildrenProvider`1(Func`2<T, IEnumerable> getChildren, Func`2<T, bool> hasChildren, bool observable);
    public ChildrenProvider`1(Func`2<T, IEnumerable> getChildren, bool observable);
    private bool HashChildren(T data);
    public sealed virtual IEnumerable GetChildren(object data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsObservable();
    public sealed virtual bool HasChildren(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.CombiningFilterDescriptor : object {
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    private IFilterDescriptor[] myFilters;
    private Operation myOperation;
    public CombiningFilterDescriptor(IEnumerable`1<IFilterDescriptor> filters, Operation operation);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    public void Invalidate();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor.IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.DefaultActionInvocator : object {
    private Dispatcher myDispatcher;
    public DefaultActionInvocator(Dispatcher dispatcher);
    public sealed virtual ICancellable Queue(Action action);
    public sealed virtual bool TryExecute(Action action);
    public sealed virtual void AssertAccess();
}
public class JetBrains.Application.UI.Controls.TreeGrid.DefaultExpansionProvider : object {
    public static DefaultExpansionProvider Instance;
    private static DefaultExpansionProvider();
    public sealed virtual bool Collapsable(object item);
    public sealed virtual bool Expandable(object item);
    public sealed virtual bool IsExpanded(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.DelegateItemFilter`1 : object {
    private Func`2<T, Nullable`1<bool>> myFunction;
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    public DelegateItemFilter`1(Func`2<T, Nullable`1<bool>> function);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
internal class JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ValueChangedEventArgs`1<bool>> IsBusyChanged;
    private bool myIsBusy;
    private Queue`1<Action> myActions;
    private Queue`1<Action> myPostActions;
    private ICancellable myQueuedAction;
    private Func`2<Action, ICancellable> myQueuer;
    private DispatcherPriority myPriority;
    private TimeSpan myTimeLimit;
    private DispatcherOperation myPreDispatchedOperation;
    public bool IsBusy { get; private set; }
    public DispatchedQueue(Func`2<Action, ICancellable> queuer, DispatcherPriority priority, TimeSpan timelimit);
    [CompilerGeneratedAttribute]
public void add_IsBusyChanged(EventHandler`1<ValueChangedEventArgs`1<bool>> value);
    [CompilerGeneratedAttribute]
public void remove_IsBusyChanged(EventHandler`1<ValueChangedEventArgs`1<bool>> value);
    public bool get_IsBusy();
    private void set_IsBusy(bool value);
    private void UpdateIsBusy();
    public void Queue(Action action);
    public void QueuePostaction(Action action);
    private void SchedulePump();
    private void OnPreInvoke();
    private void OnInvoked();
    public void Pump();
    public bool Pump(TimeSpan timelimit);
    private static bool Pump(Queue`1<Action> queue, TimeSpan timelimit);
    public void Cancel();
}
public class JetBrains.Application.UI.Controls.TreeGrid.EventBasedItemFilter : object {
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    [CompilerGeneratedAttribute]
private EventHandler`1<FilterEventArgs> Filter;
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Filter(EventHandler`1<FilterEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Filter(EventHandler`1<FilterEventArgs> value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ExpansionProvider`1 : object {
    private Func`2<T, bool> myCollapsable;
    private Func`2<T, bool> myExpandable;
    private Func`2<T, bool> myIsExpanded;
    public ExpansionProvider`1(Func`2<T, bool> collapsable, Func`2<T, bool> expandable, Func`2<T, bool> expanded);
    private sealed virtual override bool JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider.Collapsable(object item);
    private sealed virtual override bool JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider.Expandable(object item);
    private sealed virtual override bool JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider.IsExpanded(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.FilterEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAccepted>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public Nullable`1<bool> IsAccepted { get; public set; }
    public object Item { get; }
    public FilterEventArgs(object item);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAccepted();
    [CompilerGeneratedAttribute]
public void set_IsAccepted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public object get_Item();
}
public enum JetBrains.Application.UI.Controls.TreeGrid.FilteringMode : Enum {
    public int value__;
    public static FilteringMode AcceptedOnly;
    public static FilteringMode AcceptedWithDescendats;
}
public class JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection : object {
    [NotNullAttribute]
public IProperty`1<IFilterDescriptor> CombinedFilter;
    [NotNullAttribute]
public IDictionaryEvents`2<ReadonlyToken, IFilterDescriptor> Filters;
    public FiltersCollection(Lifetime lifetime, Operation operation);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Previous>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Current>k__BackingField;
    public T Previous { get; }
    public T Current { get; }
    public ValueChangedEventArgs`1(T previous, T current);
    [CompilerGeneratedAttribute]
public T get_Previous();
    [CompilerGeneratedAttribute]
public T get_Current();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventHandler`1 : MulticastDelegate {
    public ValueChangedEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(object sender, ValueChangedEventArgs`1<T> args);
    public virtual IAsyncResult BeginInvoke(object sender, ValueChangedEventArgs`1<T> args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeGrid.Helpers.WeakCollectionChangedListener : object {
    private INotifyCollectionChanged mySource;
    private WeakReference myHandler;
    public WeakCollectionChangedListener(INotifyCollectionChanged source, NotifyCollectionChangedEventHandler handler);
    public static WeakCollectionChangedListener Create(INotifyCollectionChanged source, NotifyCollectionChangedEventHandler handler);
    public void Disconnect();
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IActionInvocator {
    public abstract virtual ICancellable Queue(Action action);
    public abstract virtual bool TryExecute(Action action);
    public abstract virtual void AssertAccess();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.ICancellable {
    public abstract virtual void Cancel();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IChainedJob {
    public int Priority { get; }
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IChainedJob> Do();
    public abstract virtual int get_Priority();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IChildrenProvider {
    public bool IsObservable { get; }
    public abstract virtual IEnumerable GetChildren(object item);
    public abstract virtual bool get_IsObservable();
    public abstract virtual bool HasChildren(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IExpansionProvider {
    public abstract virtual bool Collapsable(object item);
    public abstract virtual bool Expandable(object item);
    public abstract virtual bool IsExpanded(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Invalidated(EventHandler value);
    public abstract virtual Nullable`1<bool> IsAccepted(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.ISortDescription {
}
public interface JetBrains.Application.UI.Controls.TreeGrid.ITreeGridItemFilter {
    public abstract virtual bool IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPair`1 : object {
    public T Object;
    public int Index;
    public ObjectIndexPair`1(T object, int index);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPath`1 : List`1<ObjectIndexPair`1<T>> {
    public T Target { get; }
    public ObjectIndexPath`1(int capacity);
    public T get_Target();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ObjectPath`1 : List`1<T> {
    public T Target { get; }
    public ObjectPath`1(int capacity);
    public ObjectPath`1(IEnumerable`1<T> enumerable);
    public T get_Target();
}
public class JetBrains.Application.UI.Controls.TreeGrid.PredicateItemFilter`1 : object {
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    private bool myFinalValue;
    [CompilerGeneratedAttribute]
private Predicate`1<T> <Predicate>k__BackingField;
    public Predicate`1<T> Predicate { get; }
    public PredicateItemFilter`1(Predicate`1<T> predicate, bool finalValue);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public Predicate`1<T> get_Predicate();
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.ReentrancyGuardedActionInvocator : object {
    private ReentrancyGuard myReentrancyGuard;
    private UnguardedCallbackMerger myUnguardedCallbacks;
    public ReentrancyGuardedActionInvocator(ReentrancyGuard reentrancyGuard);
    public sealed virtual ICancellable Queue(Action action);
    public sealed virtual bool TryExecute(Action action);
    public sealed virtual void AssertAccess();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.ChildrenProvider`1 : object {
    [CanBeNullAttribute]
private IList myCachedRoots;
    [NotNullAttribute]
private Dictionary`2<T, IList> myCachedChildren;
    [NotNullAttribute]
private Func`2<T, IEnumerable> myGetChildren;
    [NotNullAttribute]
private Func`2<T, bool> myHasChildren;
    [NotNullAttribute]
private IEnumerable myRoots;
    [CanBeNullAttribute]
private Func`2<T, bool> myIsLeaf;
    public ChildrenProvider`1(IEnumerable roots, Func`2<T, IEnumerable> getChildren, Func`2<T, bool> hasChildren, Func`2<T, bool> isLeaf);
    private bool HasChildrenFallback(T item);
    public sealed virtual IEnumerable`1<object> FetchChildren(object data, int index, int count);
    private IList GetOrCreateCachedChildren(object data);
    private IList GetCachedChildrenOrNull(object data);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Controls.TreeGrid.Revised.ChildrenProvider`1/<FetchList>d__11")]
private static IEnumerable`1<object> FetchList(IList list, int index, int count);
    public sealed virtual bool HasChildren(object item);
    public sealed virtual bool IsLeaf(object node);
    public sealed virtual int IndexOf(object parent, object child);
    public sealed virtual INotifyCollectionChanged GetChangeProvider(object node);
    public sealed virtual int FetchCount(object item);
}
public enum JetBrains.Application.UI.Controls.TreeGrid.Revised.EnumerateDirection : Enum {
    public int value__;
    public static EnumerateDirection Forward;
    public static EnumerateDirection Backward;
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Controls.TreeGrid.Revised.EnumerateOptions : Enum {
    public int value__;
    public static EnumerateOptions None;
    public static EnumerateOptions CoerceExpansion;
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.CombiningFilterDescriptor : object {
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    private IFilterDescriptor[] myFilters;
    private Operation myOperation;
    public CombiningFilterDescriptor(IEnumerable`1<IFilterDescriptor> filters, Operation operation);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    public void Invalidate();
    private sealed virtual override Nullable`1<bool> JetBrains.Application.UI.Controls.TreeGrid.Revised.IFilterDescriptor.IsAccepted(object item);
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.DelegateFilterDescriptor`1 : object {
    private Func`2<T, Nullable`1<bool>> myFunction;
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    public DelegateFilterDescriptor`1(Func`2<T, Nullable`1<bool>> function);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection : object {
    [NotNullAttribute]
public IProperty`1<IFilterDescriptor> CombinedFilter;
    [NotNullAttribute]
public IDictionaryEvents`2<ReadonlyToken, IFilterDescriptor> Filters;
    public FiltersCollection(Lifetime lifetime, Operation operation);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.PredicateFilterDescriptor`1 : object {
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    private bool myFinalValue;
    [CompilerGeneratedAttribute]
private Predicate`1<T> <Predicate>k__BackingField;
    public Predicate`1<T> Predicate { get; }
    public PredicateFilterDescriptor`1(Predicate`1<T> predicate, bool finalValue);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public Predicate`1<T> get_Predicate();
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
    public void Invalidate();
}
public class JetBrains.Application.UI.Controls.TreeGrid.Revised.Helpers.GroupingEvent : object {
    private static TimeSpan ourEpsilon;
    [CompilerGeneratedAttribute]
private Action Fired;
    private Dispatcher myDispatcher;
    private DispatcherPriority myPriority;
    private TimeSpan myTimeSpan;
    private DispatcherTimer myTimer;
    private object myLock;
    private DateTime myDueTime;
    public TimeSpan Interval { get; public set; }
    public GroupingEvent(Dispatcher dispatcher, DispatcherPriority priority, TimeSpan timeSpan, Action fired);
    private static GroupingEvent();
    [CompilerGeneratedAttribute]
public void add_Fired(Action value);
    [CompilerGeneratedAttribute]
public void remove_Fired(Action value);
    public TimeSpan get_Interval();
    public void set_Interval(TimeSpan value);
    public void Fire(bool prolong);
    private bool IsScheduled();
    private void SetDueTimeIn(TimeSpan interval);
    private void ScheduleTickIn(TimeSpan interval);
    private void DisposeTimer();
    private void OnTick(object sender, EventArgs e);
    public void Prolong();
    public void Abort();
}
public static class JetBrains.Application.UI.Controls.TreeGrid.Revised.Helpers.IndexOf : object {
    public static int Calculate(IEnumerable`1<T> source, T value, IEqualityComparer`1<T> comparer);
    public static int Calculate(IEnumerable source, object value, IEqualityComparer comparer);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider {
    public abstract virtual int FetchCount(object node);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<object> FetchChildren(object node, int index, int count);
    public abstract virtual bool HasChildren(object node);
    public abstract virtual bool IsLeaf(object node);
    public abstract virtual int IndexOf(object parent, object child);
    [CanBeNullAttribute]
public abstract virtual INotifyCollectionChanged GetChangeProvider(object node);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.IFilterDescriptor {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Invalidated(EventHandler value);
    public abstract virtual Nullable`1<bool> IsAccepted(object item);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.IParentProvider {
    public abstract virtual object GetParent(object node);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.ISelectedItemCollection {
    public abstract virtual void Add(object item);
    public abstract virtual void Clear();
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.ISortDescription {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Invalidated(EventHandler value);
}
public interface JetBrains.Application.UI.Controls.TreeGrid.Revised.ITreeGridVisibleItemsCollection {
    public int Index { get; }
    public abstract virtual int get_Index();
}
public class JetBrains.Application.UI.Controls.TreeGrid.SortDescription : object {
    private IComparer myCustomComparer;
    private String[] myPropertyPath;
    private Func`2<object, object> myGetter;
    private Dictionary`2<Type, PropertyInfo> myPropertyInfoCache;
    public SortDescription(string propertyPath);
    public SortDescription(string propertyPath, IComparer comparer);
    public SortDescription(Func`2<object, object> getter, IComparer comparer);
    public SortDescription(IComparer comparer);
    public sealed virtual int Compare(object x, object y);
    private int CompareCore(object x, object y);
    private object ResolvePropertyPath(object target, IEnumerable`1<string> propertyPath);
    private object GetPropertyValue(object target, string propertyName);
    [CompilerGeneratedAttribute]
private object <.ctor>b__5_1(object o);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeGrid.UIChainedJobExtensions : object {
    [ExtensionAttribute]
public static void Pump(IChainedJob chainedJob);
    [ExtensionAttribute]
public static void Pump(IChainedJob chainedJob, TimeSpan timeLimit);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.DelegateFilterDescriptor : object {
    [CompilerGeneratedAttribute]
private Predicate`1<object> <Predicate>k__BackingField;
    public Predicate`1<object> Predicate { get; public set; }
    public DelegateFilterDescriptor(Predicate`1<object> predicate);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Predicate`1<object> value);
    public sealed virtual bool PassesFilter(object target);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.DelegateFilterDescriptor`1 : object {
    [CompilerGeneratedAttribute]
private Predicate`1<TItem> <Predicate>k__BackingField;
    public Predicate`1<TItem> Predicate { get; public set; }
    public DelegateFilterDescriptor`1(Predicate`1<TItem> predicate);
    [CompilerGeneratedAttribute]
public Predicate`1<TItem> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Predicate`1<TItem> value);
    public sealed virtual bool PassesFilter(object target);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.DelegateSortDescriptor : object {
    [CompilerGeneratedAttribute]
private Func`2<object, Comparison`1<object>> <ComparitionFactory>k__BackingField;
    public Func`2<object, Comparison`1<object>> ComparitionFactory { get; public set; }
    public DelegateSortDescriptor(Comparison`1<object> comparition);
    public DelegateSortDescriptor(Func`2<object, Comparison`1<object>> comparitionFactory);
    [CompilerGeneratedAttribute]
public Func`2<object, Comparison`1<object>> get_ComparitionFactory();
    [CompilerGeneratedAttribute]
public void set_ComparitionFactory(Func`2<object, Comparison`1<object>> value);
    public sealed virtual Comparison`1<object> GetComparision(object parent);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.IFilterDescriptor {
    public abstract virtual bool PassesFilter(object target);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.IFilterSortController {
    public abstract virtual bool SupportsSort();
    public abstract virtual void ApplySort(ISortDescriptor sortDescriptor, SortOrder sortOrder);
    public abstract virtual void RemoveSort();
    public abstract virtual bool SupportsFilter();
    public abstract virtual void ApplyFilter(IFilterDescriptor filterDescriptor);
    public abstract virtual void RemoveFilter();
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.IIterativeTreeModelChangeTracker {
    [CompilerGeneratedAttribute]
public abstract virtual void add_NotifyInsert(InsertRemoveChangeDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NotifyInsert(InsertRemoveChangeDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NotifyRemove(InsertRemoveChangeDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NotifyRemove(InsertRemoveChangeDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NotifyReplace(ReplaceChangeDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NotifyReplace(ReplaceChangeDelegate value);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.INodeState {
    public ITreeNodeStateProvider Provider { get; }
    public int Level { get; }
    public bool HasChildren { get; }
    public bool IsExpanded { get; }
    public INodeState Parent { get; }
    public int Index { get; }
    public object SourceObject { get; }
    public IEnumerable`1<INodeState> Children { get; }
    public IEnumerable`1<INodeState> FilteredChildren { get; }
    public abstract virtual ITreeNodeStateProvider get_Provider();
    public abstract virtual int get_Level();
    public abstract virtual bool get_HasChildren();
    public abstract virtual bool get_IsExpanded();
    public abstract virtual INodeState get_Parent();
    public abstract virtual int get_Index();
    public abstract virtual object get_SourceObject();
    public abstract virtual IEnumerable`1<INodeState> get_Children();
    public abstract virtual IEnumerable`1<INodeState> get_FilteredChildren();
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.InsertRemoveChangeDelegate : MulticastDelegate {
    public InsertRemoveChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    public virtual IAsyncResult BeginInvoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ISelectionManager {
    public IEnumerable`1<INodeState> SelectedNodes { get; }
    public abstract virtual void SetSelection(INodeState start, INodeState finish, SelectionOperation operation);
    public abstract virtual void Clear();
    public abstract virtual bool IsSelected(INodeState node);
    public abstract virtual IEnumerable`1<INodeState> get_SelectedNodes();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChangeBegin(SelectionChangedDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChangeBegin(SelectionChangedDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChangeEnd(SelectionChangedDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChangeEnd(SelectionChangedDelegate value);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ISortDescriptor {
    public abstract virtual Comparison`1<object> GetComparision(object parent);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITrackingAware {
    public abstract virtual void StartTracking(object item);
    public abstract virtual void FinishTracking(object item);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelChangeTracker {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NotifyReset(ResetChangeDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NotifyReset(ResetChangeDelegate value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ModelChanged(Action`1<ITreeModelChangeTracker> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ModelChanged(Action`1<ITreeModelChangeTracker> value);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelProvider {
    [NotNullAttribute]
public object Root { get; }
    public abstract virtual object get_Root();
    public abstract virtual bool HasChildren(object model);
    [CanBeNullAttribute]
public abstract virtual IList GetChildren(object parent);
    [CanBeNullAttribute]
public abstract virtual ITreeModelChangeTracker GetChangeTracker();
    [CanBeNullAttribute]
public abstract virtual IEqualityComparer`1<object> GetCustomComparer();
    [CanBeNullAttribute]
public abstract virtual ITreeStateRestoreSupportSimple GetStateRestoreSupport();
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeNodeStateProvider {
    public INodeState Root { get; }
    public TreeNodeStateProviderOptions Options { get; public set; }
    public int VisibleNodeCount { get; }
    public ITreeModelProvider Model { get; public set; }
    public ISelectionManager SelectionManager { get; }
    public IFilterSortController FilterSortController { get; }
    public IDisposable ModificationCookie { get; }
    public abstract virtual INodeState get_Root();
    public abstract virtual void set_Options(TreeNodeStateProviderOptions value);
    public abstract virtual TreeNodeStateProviderOptions get_Options();
    public abstract virtual void SetIsExpanded(INodeState nodeState, bool state);
    public abstract virtual void ExpandAll(INodeState node, Predicate`1<INodeState> expandDescendants);
    public abstract virtual void CollapseAll(INodeState node);
    public abstract virtual IEnumerable`1<INodeState> FetchRange(int offset, int count);
    public abstract virtual int TraverseIndex(INodeState node);
    [CanBeNullAttribute]
public abstract virtual INodeState ByIndexPath(IEnumerable`1<int> indexPath);
    [CanBeNullAttribute]
public abstract virtual INodeState ByObjectPath(IEnumerable`1<object> objectPath);
    public abstract virtual int get_VisibleNodeCount();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ItemsInvalidated(Action`1<ITreeNodeStateProvider> value);
    public abstract virtual ITreeModelProvider get_Model();
    public abstract virtual void set_Model(ITreeModelProvider value);
    public abstract virtual ISelectionManager get_SelectionManager();
    public abstract virtual IFilterSortController get_FilterSortController();
    public abstract virtual IDisposable get_ModificationCookie();
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<object> FromIdentity(object identity);
    public abstract virtual object GetParent(object model);
}
public interface JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportSimple {
    [NotNullAttribute]
public abstract virtual object GetIdentity(object model);
    [CanBeNullAttribute]
public abstract virtual ITreeStateRestoreSupportAdvanced GetAdvanced();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeListView.Contracts.NodeStateUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<INodeState> ParentPath(INodeState node);
    [ExtensionAttribute]
public static IEnumerable`1<INodeState> SelfAndParentPath(INodeState node);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.ProviderSavedState : object {
    private JetHashSet`1<SerializableSelection> mySelected;
    private OrderedHashSet`1<object> myExpanded;
    public ProviderSavedState(ITreeNodeStateProvider provider);
    private static object GetIdentity(object model, ITreeModelProvider modelProvider);
    public void ApplyTo(ITreeNodeStateProvider nodeStateProvider);
    private void ApplyByRemapping(ITreeNodeStateProvider nodeStateProvider, ITreeStateRestoreSupportAdvanced stateAdvanced);
    private void ApplyByVisitingNewTree(ITreeNodeStateProvider nodeStateProvider);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.TreeListView.Contracts.ProviderUtils : object {
    [ExtensionAttribute]
public static bool IsSelected(INodeState node);
    [ExtensionAttribute]
public static void ExpandAll(ITreeNodeStateProvider provider);
    [ExtensionAttribute]
public static void CollapseAll(ITreeNodeStateProvider provider);
    [ExtensionAttribute]
public static void SetIsExpanded(ITreeNodeStateProvider provider, bool state, Object[] path);
    [ExtensionAttribute]
public static void SetIsExpanded(ITreeNodeStateProvider provider, IEnumerable`1<object> path, bool isExpanded);
    [ExtensionAttribute]
public static void SetIsExpanded(ITreeNodeStateProvider provider, IEnumerable`1<int> path, bool isExpanded);
    [ExtensionAttribute]
public static IndexPath GetIndexPath(INodeState node);
    [ExtensionAttribute]
public static int TraverseIndex(ITreeNodeStateProvider provider, IEnumerable`1<int> path);
    [ExtensionAttribute]
public static int TraverseIndex(ITreeNodeStateProvider provider, IEnumerable`1<object> path);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEqualityComparer`1<object> GetCustomEqualityComparerOrDefault(ITreeModelProvider model);
    public static bool CustomEquals(ITreeModelProvider model, object a, object b);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.ReplaceChangeDelegate : MulticastDelegate {
    public ReplaceChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count);
    public virtual IAsyncResult BeginInvoke(IIterativeTreeModelChangeTracker tracker, object owner, int offset, int count, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.ResetChangeDelegate : MulticastDelegate {
    public ResetChangeDelegate(object object, IntPtr method);
    public virtual void Invoke(ITreeModelChangeTracker tracker, object owner, ResetType resetType);
    public virtual IAsyncResult BeginInvoke(ITreeModelChangeTracker tracker, object owner, ResetType resetType, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.Application.UI.Controls.TreeListView.Contracts.ResetType : Enum {
    public int value__;
    public static ResetType ResetChildren;
    public static ResetType ResetSubtree;
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.SelectionChangedDelegate : MulticastDelegate {
    public SelectionChangedDelegate(object object, IntPtr method);
    public virtual void Invoke(ISelectionManager sender);
    public virtual IAsyncResult BeginInvoke(ISelectionManager sender, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum JetBrains.Application.UI.Controls.TreeListView.Contracts.SelectionOperation : Enum {
    public int value__;
    public static SelectionOperation Add;
    public static SelectionOperation Remove;
    public static SelectionOperation Toggle;
    public static SelectionOperation Set;
}
public static class JetBrains.Application.UI.Controls.TreeListView.Contracts.SortDescriptor : object {
    public static ISortDescriptor IComparableSortDescriptor;
    private static SortDescriptor();
    [NotNullAttribute]
public static ISortDescriptor Create(Func`3<TItem, TItem, int> FComparer);
}
public enum JetBrains.Application.UI.Controls.TreeListView.Contracts.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
public class JetBrains.Application.UI.Controls.TreeListView.Contracts.TreeNodeStateProviderOptions : object {
    public bool AutoExpandSingleChild;
    private Func`2<object, bool> myExpandNodeInitially;
    [NotNullAttribute]
public Func`2<object, bool> ExpandNodeInitially { get; }
    public TreeNodeStateProviderOptions(bool autoExpandSingleChild, Func`2<object, bool> expandNodeInitially);
    public Func`2<object, bool> get_ExpandNodeInitially();
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.ExpandNodesVisitor : ModelVisitor {
    private ITreeNodeStateProvider myTreeNodeStateProvider;
    private Func`2<object, bool> myShouldExpand;
    public ExpandNodesVisitor(ITreeNodeStateProvider treeNodeStateProvider, Func`2<object, bool> shouldExpand);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.FindPathVisitor : ModelVisitor {
    private object myTarget;
    [CompilerGeneratedAttribute]
private List`1<object> <Path>k__BackingField;
    [CanBeNullAttribute]
public List`1<object> Path { get; private set; }
    public FindPathVisitor(object target);
    [CompilerGeneratedAttribute]
public List`1<object> get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(List`1<object> value);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.IndexPath : object {
    private IList`1<int> myIndexes;
    private int myHash;
    public int Item { get; public set; }
    public int Count { get; }
    public IndexPath(IList`1<int> path);
    public IndexPath(IEnumerable`1<int> path, bool isReversed);
    private int GetHash();
    public bool Equals(IndexPath other);
    public sealed virtual int CompareTo(IndexPath other);
    public virtual bool Equals(object obj);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    public virtual int GetHashCode();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static bool op_Equality(IndexPath left, IndexPath right);
    public static bool op_Inequality(IndexPath left, IndexPath right);
    public int get_Item(int index);
    public void set_Item(int index, int value);
    public int get_Count();
}
public abstract class JetBrains.Application.UI.Controls.TreeListView.Implementation.ModelVisitor : object {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<object> <Comparer>k__BackingField;
    protected IEqualityComparer`1<object> Comparer { get; private set; }
    [CompilerGeneratedAttribute]
protected IEqualityComparer`1<object> get_Comparer();
    [CompilerGeneratedAttribute]
private void set_Comparer(IEqualityComparer`1<object> value);
    public void Visit(ITreeModelProvider model);
    private VisitResult Visit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
    protected virtual VisitResult OnBeforeVisit(object root, ITreeModelProvider model, List`1<object> parentPath, HashSet`1<object> visited);
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.SelectNodesVisitor : ModelVisitor {
    private ITreeNodeStateProvider myTreeNodeStateProvider;
    private Func`2<object, bool> myShouldSelect;
    private HashSet`1<object> myOnceSelected;
    public SelectNodesVisitor(ITreeNodeStateProvider treeNodeStateProvider, Func`2<object, bool> shouldSelect);
    protected virtual VisitResult OnVisit(object root, ITreeModelProvider model, List`1<object> path, HashSet`1<object> visited);
    protected virtual VisitResult OnBeforeVisit(object root, ITreeModelProvider model, List`1<object> parentPath, HashSet`1<object> visited);
}
public abstract class JetBrains.Application.UI.Controls.TreeListView.Implementation.TreeModelChangeTrackerBase : object {
    [CompilerGeneratedAttribute]
private Action`1<ITreeModelChangeTracker> ModelChanging;
    [CompilerGeneratedAttribute]
private InsertRemoveChangeDelegate NotifyInsert;
    [CompilerGeneratedAttribute]
private InsertRemoveChangeDelegate NotifyRemove;
    [CompilerGeneratedAttribute]
private ReplaceChangeDelegate NotifyReplace;
    [CompilerGeneratedAttribute]
private ResetChangeDelegate NotifyReset;
    [CompilerGeneratedAttribute]
private Action`1<ITreeModelChangeTracker> ModelChanged;
    public abstract virtual void StartTracking(object item);
    public abstract virtual void FinishTracking(object item);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ModelChanging(Action`1<ITreeModelChangeTracker> value);
    protected virtual void OnModelChanging();
    [CompilerGeneratedAttribute]
public sealed virtual void add_NotifyInsert(InsertRemoveChangeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NotifyInsert(InsertRemoveChangeDelegate value);
    protected virtual void OnNotifyInsert(object owner, int offset, int count);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NotifyRemove(InsertRemoveChangeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NotifyRemove(InsertRemoveChangeDelegate value);
    protected virtual void OnNotifyRemove(object owner, int offset, int count);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NotifyReplace(ReplaceChangeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NotifyReplace(ReplaceChangeDelegate value);
    protected virtual void OnNotifyReplace(object owner, int offset, int count);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NotifyReset(ResetChangeDelegate value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NotifyReset(ResetChangeDelegate value);
    protected virtual void OnNotifyReset(object owner, ResetType arg);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ModelChanged(Action`1<ITreeModelChangeTracker> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ModelChanged(Action`1<ITreeModelChangeTracker> value);
    protected virtual void OnModelChanged();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{Count}")]
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.TreeToListAdapter : ReadOnlyListAdapterBase`1<INodeState> {
    private Dictionary`2<int, CacheItem> myCache;
    private bool myUseCaching;
    private int myCacheTimestamp;
    private int myCacheThreshold;
    private static int CacheListCount;
    [CompilerGeneratedAttribute]
private ITreeNodeStateProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ITreeNodeStateProvider Provider { get; }
    public INodeState Item { get; public set; }
    public int Count { get; }
    public bool UseCaching { get; public set; }
    public int CacheThreshold { get; public set; }
    public TreeToListAdapter(ITreeNodeStateProvider treeNodeStateProvider);
    [CompilerGeneratedAttribute]
public ITreeNodeStateProvider get_Provider();
    private void RedrawRequired();
    public virtual int IndexOf(INodeState item);
    public virtual bool Contains(object value);
    public virtual bool Contains(INodeState item);
    public virtual INodeState get_Item(int index);
    public virtual void set_Item(int index, INodeState value);
    private void RemoveMinTime();
    public virtual int get_Count();
    public bool get_UseCaching();
    public void set_UseCaching(bool value);
    public int get_CacheThreshold();
    public void set_CacheThreshold(int value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
public void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_0(ITreeNodeStateProvider provider);
}
public class JetBrains.Application.UI.Controls.TreeListView.Implementation.VirtualData.RangeSetTracker : object {
    private List`1<TextRange> myRanges;
    public IList`1<TextRange> Ranges { get; }
    public IList`1<TextRange> get_Ranges();
    public void SetOn(TextRange range);
    public void SetOff(TextRange range);
    public void Invert(TextRange range);
    private void TryJoinNext(int startIndex);
    private int BinarySearch(TextRange range, Func`3<TextRange, TextRange, int> comparer);
    private int BinarySearch(TextRange range, Func`3<TextRange, TextRange, int> comparer, Boolean& found);
    private static int RelativeToStart(TextRange inCollection, TextRange searched);
    private static int RelativeToEnd(TextRange inCollection, TextRange searched);
    internal static void Split(TextRange textRange, TextRange range, List`1<TextRange> result);
    public static void Split(TextRange textRange, TextRange range, Nullable`1& leftR, Nullable`1& rightR);
    public bool Contains(int index);
    public void Clear();
    public void UpdateRange(TextRange oldRange, TextRange newRange);
    public void UpdateRange(int offset, int oldLen, int newLen);
    private void InsertRange(TextRange newRange);
    private void RemoveRange(TextRange oldRange);
}
public class JetBrains.Application.UI.Controls.TreeListView.ObservableAutomation : ObservableObject {
}
public abstract class JetBrains.Application.UI.Controls.TreeListView.ObservableObject : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
public void OnPropertyChanged(string name);
    [NotifyPropertyChangedInvocatorAttribute("propertyName")]
protected bool SetField(T& field, T newValue, string propertyName);
}
[DefaultMemberAttribute("Item")]
public abstract class JetBrains.Application.UI.Controls.TreeListView.ReadOnlyListAdapterBase`1 : object {
    public int Count { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public T Item { get; public set; }
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Controls.TreeListView.ReadOnlyListAdapterBase`1/<Enumerate>d__1")]
private IEnumerable`1<T> Enumerate();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(T item);
    public sealed virtual int Add(object value);
    public abstract virtual bool Contains(object value);
    public virtual void Clear();
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual void CopyTo(Array array, int index);
    public abstract virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public abstract virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public abstract virtual void set_Item(int index, T value);
    public abstract virtual T get_Item(int index);
}
public class JetBrains.Application.UI.Controls.TreeView.DragResponse : object {
    public static DragResponse Empty;
    [CompilerGeneratedAttribute]
private DragDropEffects <BeforeEffects>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <AfterEffects>k__BackingField;
    [CompilerGeneratedAttribute]
private DragDropEffects <IntoEffects>k__BackingField;
    public DragDropEffects BeforeEffects { get; public set; }
    public DragDropEffects AfterEffects { get; public set; }
    public DragDropEffects IntoEffects { get; public set; }
    private static DragResponse();
    [CompilerGeneratedAttribute]
public DragDropEffects get_BeforeEffects();
    [CompilerGeneratedAttribute]
public void set_BeforeEffects(DragDropEffects value);
    [CompilerGeneratedAttribute]
public DragDropEffects get_AfterEffects();
    [CompilerGeneratedAttribute]
public void set_AfterEffects(DragDropEffects value);
    [CompilerGeneratedAttribute]
public DragDropEffects get_IntoEffects();
    [CompilerGeneratedAttribute]
public void set_IntoEffects(DragDropEffects value);
}
public interface JetBrains.Application.UI.Controls.TreeView.IPreviewControl {
    [NotNullAttribute]
public IAutomation PreviewPanelContent { get; }
    public abstract virtual IAutomation get_PreviewPanelContent();
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeModelVisitor {
    public abstract virtual void VisitTreeModel(TreeModel modelNode, IProgressIndicator progress);
    public abstract virtual void VisitTreeModelNode(TreeModelNode modelNode, IProgressIndicator progress);
    public abstract virtual void VisitPresentableItemBlock(PresentableItemBlock presentableItemBlock, IProgressIndicator progress);
    public abstract virtual void VisitPresentableItem(IPresentableItem presentableItem, IProgressIndicator progress);
    public abstract virtual void VisitPresentableItemImage(PresentableItemImage presentableItemImage, IProgressIndicator progress);
    public abstract virtual void VisitRichTextBlock(RichTextBlock richTextBlock, IProgressIndicator progress);
    public abstract virtual void VisitRichText(RichText richText, IProgressIndicator progress);
    public abstract virtual void VisitRichString(RichString richString, IProgressIndicator progress);
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeViewController {
    public bool VisibilitySupported { get; }
    public bool QuickSearchSupported { get; }
    public QuickSearchVisibilityBehavior QuickSearchVisibilityBehavior { get; }
    public bool SupportMultiSelection { get; }
    public bool RootNodesCollapsable { get; }
    public bool AutoExpandSingleChild { get; }
    public bool UpdateColumnWidthsOnNodeCreation { get; }
    public bool DragDropSupported { get; }
    public bool GuardActions { get; }
    public bool UseAutoContrastFontColorForPrimaryColumn { get; }
    public FilteringMode FilteringMode { get; }
    public IProperty`1<bool> IsBusy { get; }
    public IProperty`1<Nullable`1<double>> Progress { get; }
    public abstract virtual bool get_VisibilitySupported();
    public abstract virtual bool get_QuickSearchSupported();
    public abstract virtual QuickSearchVisibilityBehavior get_QuickSearchVisibilityBehavior();
    public abstract virtual bool get_SupportMultiSelection();
    public abstract virtual bool get_RootNodesCollapsable();
    public abstract virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public abstract virtual bool get_AutoExpandSingleChild();
    public abstract virtual bool AutoExpandOnQuickSearch(TreeModelNode node);
    public abstract virtual bool get_UpdateColumnWidthsOnNodeCreation();
    [ObsoleteAttribute("You should implement IsQuickSearchAccepted and GetQuickSearchHighlightings. QuickSearchMatches is obsolete and will be removed soon.")]
public abstract virtual bool QuickSearchMatches(TreeModelNode modelNode, string filter);
    public abstract virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode modelNode, string filter);
    public abstract virtual Task`1<bool> PrepareQuickSearch(string filter, Func`1<bool> checkForInterrupt);
    public abstract virtual IEnumerable`1<HighlightedRange> GetQuickSearchHighlightings(TreeModelNode modelNode, int column, string text, string quickSearchText);
    public abstract virtual bool VisibilityState(TreeModelNode modelNode);
    public abstract virtual bool get_DragDropSupported();
    public abstract virtual bool get_GuardActions();
    public abstract virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    public abstract virtual bool get_UseAutoContrastFontColorForPrimaryColumn();
    public abstract virtual FilteringMode get_FilteringMode();
    public abstract virtual IProperty`1<bool> get_IsBusy();
    public abstract virtual IProperty`1<Nullable`1<double>> get_Progress();
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithDragAndDrop {
    public abstract virtual DragDropEffects DragStarting(IList`1<TreeModelNode> selectedNodes, IDataObject dataObject);
    public abstract virtual DragResponse Dragging(TreeModelNode node, DragEventArgs data);
    public abstract virtual void DragDrop(TreeModelNode node, RelativeLocation location, DragEventArgs data);
}
public interface JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview {
    public PreviewSupport PreviewSupport { get; }
    public abstract virtual PreviewSupport get_PreviewSupport();
    public abstract virtual IPreviewControl PreviewCreateControl(Lifetime lifetime);
    public abstract virtual void PreviewUpdate(IPreviewControl previewControl, TreeModelNode modelNode);
}
public class JetBrains.Application.UI.Controls.TreeView.PresentationCallback`2 : MulticastDelegate {
    public PresentationCallback`2(object object, IntPtr method);
    public virtual void Invoke(object value, TPresentableItem item, TStructureElement structureElement, PresentationState state);
    public virtual IAsyncResult BeginInvoke(object value, TPresentableItem item, TStructureElement structureElement, PresentationState state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeView.PresentationCallback`3 : MulticastDelegate {
    public PresentationCallback`3(object object, IntPtr method);
    public virtual void Invoke(T value, TPresentableItem item, TStructureElement structureElement, PresentationState state);
    public virtual IAsyncResult BeginInvoke(T value, TPresentableItem item, TStructureElement structureElement, PresentationState state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class JetBrains.Application.UI.Controls.TreeView.PresentationState : object {
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Focused>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    public bool Expanded { get; public set; }
    public bool Focused { get; public set; }
    public bool Selected { get; public set; }
    public PresentationState(PresentationState state);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public bool get_Focused();
    [CompilerGeneratedAttribute]
public void set_Focused(bool value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    protected bool Equals(PresentationState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum JetBrains.Application.UI.Controls.TreeView.PreviewSupport : Enum {
    public int value__;
    public static PreviewSupport NotSupported;
    public static PreviewSupport Supported;
    public static PreviewSupport SupportedAndVisibleByDefault;
    public static PreviewSupport Virtual;
}
public enum JetBrains.Application.UI.Controls.TreeView.QuickSearchVisibilityBehavior : Enum {
    public int value__;
    public static QuickSearchVisibilityBehavior UserDefined;
    public static QuickSearchVisibilityBehavior AutoHide;
    public static QuickSearchVisibilityBehavior ShowAlways;
}
public enum JetBrains.Application.UI.Controls.TreeView.RelativeLocation : Enum {
    public int value__;
    public static RelativeLocation None;
    public static RelativeLocation Into;
    public static RelativeLocation Before;
    public static RelativeLocation After;
}
public class JetBrains.Application.UI.Controls.TreeView.StructuredPresenter`2 : object {
    [CanBeNullAttribute]
private static StructuredPresenter`2<TStructureElement, IPresentableItem> ourDefaultPresenter;
    [NotNullAttribute]
private TypeHierarchyMap`1<IStructuredPresenter<TStructureElement, TPresentableItem>> myPresenters;
    private bool myLocked;
    [CompilerGeneratedAttribute]
private PresentationCallback`2<TStructureElement, TPresentableItem> PresentAdorements;
    public static StructuredPresenter`2<TStructureElement, IPresentableItem> Default { get; }
    public static StructuredPresenter`2<TStructureElement, IPresentableItem> get_Default();
    [CompilerGeneratedAttribute]
public void add_PresentAdorements(PresentationCallback`2<TStructureElement, TPresentableItem> value);
    [CompilerGeneratedAttribute]
public void remove_PresentAdorements(PresentationCallback`2<TStructureElement, TPresentableItem> value);
    public void UpdateItem(TStructureElement structureElement, TPresentableItem item, PresentationState state);
    public virtual void UpdateItem(object value, TStructureElement structureElement, TPresentableItem item, PresentationState state);
    public void Present(PresentationCallback`3<TStructureElement, TPresentableItem, T> callback);
    private void Lock();
}
public class JetBrains.Application.UI.Controls.TreeView.TreeViewController : AAutomation {
    private bool myAutoExpandSingleChild;
    private bool myRootNodesCollapsable;
    [CompilerGeneratedAttribute]
private bool <SupportMultiSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsBusy>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Nullable`1<double>> <Progress>k__BackingField;
    public bool UpdateColumnWidthsOnNodeCreation { get; }
    public bool DragDropSupported { get; }
    public bool GuardActions { get; }
    public bool VisibilitySupported { get; }
    public bool QuickSearchSupported { get; }
    public QuickSearchVisibilityBehavior QuickSearchVisibilityBehavior { get; }
    public bool SupportMultiSelection { get; public set; }
    public bool RootNodesCollapsable { get; public set; }
    public bool AutoExpandSingleChild { get; public set; }
    [CanBeNullAttribute]
public IAutomation SummaryAutomation { get; }
    public IProperty`1<bool> IsBusy { get; }
    public IProperty`1<Nullable`1<double>> Progress { get; }
    public FilteringMode FilteringMode { get; }
    public bool UseAutoContrastFontColorForPrimaryColumn { get; }
    public static TreeViewController GetDefault();
    public virtual bool ExpandNodeInitially(TreeModelNode modelNode);
    public virtual bool AutoExpandOnQuickSearch(TreeModelNode node);
    public virtual bool get_UpdateColumnWidthsOnNodeCreation();
    public virtual bool QuickSearchMatches(TreeModelNode modelNode, string quickSearchText);
    public virtual bool VisibilityState(TreeModelNode modelNode);
    public virtual bool get_DragDropSupported();
    public virtual bool get_GuardActions();
    public virtual bool get_VisibilitySupported();
    public virtual bool get_QuickSearchSupported();
    public virtual QuickSearchVisibilityBehavior get_QuickSearchVisibilityBehavior();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportMultiSelection();
    [CompilerGeneratedAttribute]
public void set_SupportMultiSelection(bool value);
    public sealed virtual bool get_RootNodesCollapsable();
    public void set_RootNodesCollapsable(bool value);
    public sealed virtual bool get_AutoExpandSingleChild();
    public void set_AutoExpandSingleChild(bool value);
    public virtual IAutomation get_SummaryAutomation();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsBusy();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<Nullable`1<double>> get_Progress();
    public virtual IEnumerable`1<TreeModelNode> GetDefaultNodes(TreeModel model);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Controls.TreeView.TreeViewController/<GetQuickSearchHighlightings>d__39")]
public virtual IEnumerable`1<HighlightedRange> GetQuickSearchHighlightings(TreeModelNode modelNode, int column, string text, string quickSearchText);
    public virtual Nullable`1<bool> IsQuickSearchAccepted(TreeModelNode modelNode, string filter);
    public virtual Task`1<bool> PrepareQuickSearch(string filter, Func`1<bool> checkForInterrupt);
    public virtual FilteringMode get_FilteringMode();
    public virtual bool get_UseAutoContrastFontColorForPrimaryColumn();
}
public interface JetBrains.Application.UI.Controls.Utils.ICachedPresentation {
    public abstract virtual void ResetCache();
}
public enum JetBrains.Application.UI.Controls.Utils.ImagePlacement : Enum {
    public int value__;
    public static ImagePlacement LEFT;
    public static ImagePlacement RIGHT;
}
public class JetBrains.Application.UI.Controls.Utils.InitCookie : object {
    private ISupportInitialize myControl;
    public InitCookie(ISupportInitialize control);
    public sealed virtual void Dispose();
}
public interface JetBrains.Application.UI.Controls.Utils.IPresentableItem {
    [NotNullAttribute]
public RichText RichText { get; public set; }
    [NotNullAttribute]
public PresentableItemImageCollection Images { get; }
    public abstract virtual void Clear();
    public abstract virtual RichText get_RichText();
    public abstract virtual void set_RichText(RichText value);
    public abstract virtual PresentableItemImageCollection get_Images();
}
public interface JetBrains.Application.UI.Controls.Utils.IPresentableItemImageOwner {
    public abstract virtual void NotifyImageCollectionChanged();
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItem : object {
    private PresentableItemImageCollection myImages;
    private RichText myRichText;
    private UIElement myElement;
    public RichText RichText { get; public set; }
    public PresentableItemImageCollection Images { get; }
    public UIElement CustomUiElement { get; public set; }
    public PresentableItem(string text);
    public PresentableItem(RichText richText);
    public PresentableItem(RichText richText, IList`1<PresentableItemImage> images);
    public PresentableItem(RichText richText, IEnumerable`1<PresentableItemImage> images);
    public PresentableItem(IconId icon);
    public PresentableItem(IconId icon, RichText label);
    public PresentableItem(IPresentableItem other);
    public sealed virtual void Clear();
    protected virtual void UpdateItem();
    public sealed virtual RichText get_RichText();
    public sealed virtual void set_RichText(RichText value);
    public sealed virtual PresentableItemImageCollection get_Images();
    public sealed virtual void NotifyImageCollectionChanged();
    public UIElement get_CustomUiElement();
    public void set_CustomUiElement(UIElement value);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItemBlock : object {
    [NotNullAttribute]
private PresentableItemImageCollection myImages;
    [NotNullAttribute]
private RichTextBlock myRichText;
    [NotNullAttribute]
public PresentableItemImageCollection Images { get; }
    [NotNullAttribute]
public RichTextBlock RichText { get; public set; }
    public PresentableItemBlock(string text);
    public PresentableItemBlock(RichText richText);
    public PresentableItemBlock(RichTextBlock block);
    public PresentableItemBlock(RichTextBlock richTextBlock, IList`1<PresentableItemImage> images);
    public PresentableItemBlock(IconId icon);
    public PresentableItemBlock(IconId icon, RichTextBlock label);
    public PresentableItemBlock(PresentableItemBlock other);
    public PresentableItemImageCollection get_Images();
    public RichTextBlock get_RichText();
    public void set_RichText(RichTextBlock value);
    public void Clear();
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItemDumper : object {
    public static string PresentableItemToString(IPresentableItem item);
    private static void BuildImage(StringBuilder builder, PresentableItemImage image);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.Utils.PresentableItemEx : object {
    [ExtensionAttribute]
public static bool IsEmpty(IPresentableItem presentableItem);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => true")]
public static bool IsNullOrEmpty(IPresentableItem presentableItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IconId IsSingleImageOnly(IPresentableItem presentableItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static RichText IsTextOnly(IPresentableItem presentableItem);
    [ExtensionAttribute]
public static bool IsEmpty(PresentableItemBlock presentableItem);
    [ExtensionAttribute]
[ContractAnnotationAttribute("null => true")]
public static bool IsNullOrEmpty(PresentableItemBlock presentableItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IconId IsSingleImageOnly(PresentableItemBlock presentableItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static RichTextBlock IsTextBlockOnly(PresentableItemBlock presentableItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static RichText IsSingleTextLineOnly(PresentableItemBlock presentableItem);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IPresentableItem IsPresentableItemOnly(PresentableItemBlock presentableItem);
}
public class JetBrains.Application.UI.Controls.Utils.PresentableItemImage : object {
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private ImagePlacement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [NotNullAttribute]
public IconId Icon { get; }
    public RichText ToolTipText { get; }
    public ImagePlacement Placement { get; }
    [CanBeNullAttribute]
public object Tag { get; public set; }
    private PresentableItemImage(IconId icon, RichText toolTipText, ImagePlacement placement);
    public static PresentableItemImage Create(IconId icon, RichText toolTipText, ImagePlacement placement);
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public RichText get_ToolTipText();
    [CompilerGeneratedAttribute]
public ImagePlacement get_Placement();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    protected bool Equals(PresentableItemImage other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Controls.Utils.PresentableItemImageCache : object {
    private static int MaximumCacheSize;
    [CompilerGeneratedAttribute]
private static IEqualityComparer`1<PresentableItemImage> <InternComparer>k__BackingField;
    private static JetHashSet`1<PresentableItemImage> ourCache;
    private static object ourLock;
    public static IEqualityComparer`1<PresentableItemImage> InternComparer { get; }
    private static PresentableItemImageCache();
    [CompilerGeneratedAttribute]
public static IEqualityComparer`1<PresentableItemImage> get_InternComparer();
    public static void ClearCache();
    [ExtensionAttribute]
[NotNullAttribute]
public static PresentableItemImage Intern(PresentableItemImage value);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.Controls.Utils.PresentableItemImageCollection : object {
    [CanBeNullAttribute]
private IPresentableItemImageOwner myOwner;
    [NotNullAttribute]
private SynchronizedList`1<PresentableItemImage> myImages;
    private bool myShouldNotifyOnResume;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    public PresentableItemImage Item { get; public set; }
    public bool IsSuspended { get; private set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public PresentableItemImageCollection(IEnumerable`1<PresentableItemImage> images);
    public PresentableItemImageCollection(IPresentableItemImageOwner owner);
    public PresentableItemImageCollection(IPresentableItemImageOwner owner, IEnumerable`1<PresentableItemImage> images);
    public PresentableItemImage get_Item(int index);
    public void set_Item(int index, PresentableItemImage value);
    public void Add(IconId icon);
    public void Add(IconId icon, RichText toolTipText);
    public void Add(IconId icon, RichText toolTipText, ImagePlacement imagePlacement);
    public void Insert(int index, IconId icon);
    public void Insert(int index, PresentableItemImage image);
    private void Notify();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    public sealed virtual IEnumerator`1<PresentableItemImage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(PresentableItemImage item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(PresentableItemImage item);
    public sealed virtual void CopyTo(PresentableItemImage[] array, int arrayIndex);
    public sealed virtual bool Remove(PresentableItemImage item);
    public void RemoveAt(int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
}
public class JetBrains.Application.UI.Controls.ValidationAggregator : object {
    private IEnumerable`1<Func`2<string, string>> myValidators;
    public ValidationAggregator(Func`2[] validators);
    [CanBeNullAttribute]
public string GetError(string input);
}
public static class JetBrains.Application.UI.Controls.WindowlessControlAutomation : object {
    [NotNullAttribute]
public static IAutomation Create(string text);
    [NotNullAttribute]
public static IAutomation Create(IPresentableItem presentableItem);
    [NotNullAttribute]
public static IAutomation Create(IPresentableItem presentableItem, RenderParams renderParams);
    [NotNullAttribute]
public static IAutomation Create(PresentableItemBlock presentableitem);
    [NotNullAttribute]
public static IAutomation Create(PresentableItemBlock presentableitem, RenderParams renderparams);
    [NotNullAttribute]
public static IAutomation Create(RichTextBlock block);
    [NotNullAttribute]
public static IAutomation Create(RichTextBlock block, RenderParams renderParams);
    [NotNullAttribute]
public static IAutomation Create(RichText richText);
    [NotNullAttribute]
public static IAutomation Create(Image bitmap);
    [NotNullAttribute]
public static IAutomation Create(IconId icon);
}
public static class JetBrains.Application.UI.DataContext.UIDataConstants : object {
    [NotNullAttribute]
public static DataConstant`1<PopupWindowContextSource> PopupWindowContextSource;
    [NotNullAttribute]
public static DataConstant`1<ICloseAllItems> CloseAllItems;
    public static DataConstant`1<SettingsLayersDialogAutomation> SettingsLayersDialogAutomation;
    public static DataConstant`1<ControlWrapper> Sender;
    private static UIDataConstants();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.DataContext.UIDataConstantsAssertMainThread : object {
    public UIDataConstantsAssertMainThread(Lifetime lifetime, DataContexts contexts, IThreading mainThread);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.DataContext.UIDataConstantsExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static ICloseAllItems GetCloseAllItems(IDataContext dataContext);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Diagramming.API.DependencyType : Enum {
    public int value__;
    public static DependencyType Direct;
    public static DependencyType Transitive;
    public static DependencyType Unresolved;
    public static DependencyType Invalid;
    public static DependencyType Output;
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.Diagramming.API.GraphViewerStub : object {
    public virtual Task`1<Control> GetDiagramControl(string name, IDiagramGraph graph, Lifetime lifetime);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraph {
    [NotNullAttribute]
public ICollection`1<IDiagramGraphNode> Nodes { get; }
    [NotNullAttribute]
public ICollection`1<IDiagramGraphEdge> Edges { get; }
    public Dictionary`2<object, IDiagramGraphElement> CustomElements { get; }
    public IEnumerable`1<IDiagramGroupNode> GroupNodes { get; }
    public int GroupingDepth { get; public set; }
    public abstract virtual ICollection`1<IDiagramGraphNode> get_Nodes();
    public abstract virtual ICollection`1<IDiagramGraphEdge> get_Edges();
    public abstract virtual Dictionary`2<object, IDiagramGraphElement> get_CustomElements();
    public abstract virtual IEnumerable`1<IDiagramGroupNode> get_GroupNodes();
    public abstract virtual int get_GroupingDepth();
    public abstract virtual void set_GroupingDepth(int value);
    public abstract virtual void AddElement(IDiagramGraphElement element);
    public abstract virtual bool RemoveElement(IDiagramGraphElement element);
    [CanBeNullAttribute]
public abstract virtual IDiagramGroupNode GetImmediateParent(IDiagramGraphElement element);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge {
    [NotNullAttribute]
public IDiagramGraphNode Source { get; }
    [CanBeNullAttribute]
public IDiagramGraphNode Target { get; }
    public abstract virtual IDiagramGraphNode get_Source();
    public abstract virtual IDiagramGraphNode get_Target();
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraphElement {
    public string Name { get; }
    public bool IsValid { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsValid();
    public abstract virtual void set_IsValid(bool value);
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGraphNode {
    [NotNullAttribute]
public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    [NotNullAttribute]
public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public abstract virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    public abstract virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
}
public interface JetBrains.Application.UI.Diagramming.API.IDiagramGroupNode {
    public ICollection`1<IDiagramGraphElement> NestedElements { get; }
    public int Level { get; public set; }
    public abstract virtual ICollection`1<IDiagramGraphElement> get_NestedElements();
    public abstract virtual int get_Level();
    public abstract virtual void set_Level(int value);
    public abstract virtual void ProvideMetadata(IDictionary`2<string, string> metadata);
    public abstract virtual IEnumerable`1<IDiagramGraphElement> GetInvalidGroupElements(IDiagramGraph graph);
}
public interface JetBrains.Application.UI.Diagramming.API.IGraphViewer {
    public abstract virtual Task`1<Control> GetDiagramControl(string name, IDiagramGraph graph, Lifetime lifetime);
}
public class JetBrains.Application.UI.Diagramming.DiagramGraphBase : object {
    protected JetHashSet`1<IDiagramGraphNode> myNodes;
    protected JetHashSet`1<IDiagramGraphEdge> myEdges;
    protected Dictionary`2<object, IDiagramGraphElement> myCustomElements;
    private Dictionary`2<IDiagramGraphElement, IDiagramGroupNode> myHierarchyMap;
    [CompilerGeneratedAttribute]
private int <GroupingDepth>k__BackingField;
    public ICollection`1<IDiagramGraphNode> Nodes { get; }
    public ICollection`1<IDiagramGraphEdge> Edges { get; }
    public Dictionary`2<object, IDiagramGraphElement> CustomElements { get; }
    public IEnumerable`1<IDiagramGroupNode> GroupNodes { get; }
    public int GroupingDepth { get; public set; }
    public Dictionary`2<IDiagramGraphElement, IDiagramGroupNode> HierarchyMap { get; }
    public sealed virtual ICollection`1<IDiagramGraphNode> get_Nodes();
    public sealed virtual ICollection`1<IDiagramGraphEdge> get_Edges();
    public sealed virtual Dictionary`2<object, IDiagramGraphElement> get_CustomElements();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Diagramming.DiagramGraphBase/<get_GroupNodes>d__11")]
public virtual IEnumerable`1<IDiagramGroupNode> get_GroupNodes();
    [CompilerGeneratedAttribute]
public virtual int get_GroupingDepth();
    [CompilerGeneratedAttribute]
public virtual void set_GroupingDepth(int value);
    public Dictionary`2<IDiagramGraphElement, IDiagramGroupNode> get_HierarchyMap();
    public virtual bool RemoveElement(IDiagramGraphElement element);
    public virtual void AddNode(IDiagramGraphNode node);
    public virtual void AddEdge(IDiagramGraphEdge edge);
    public virtual void AddElement(IDiagramGraphElement element);
    public virtual bool RemoveNode(IDiagramGraphNode node);
    public virtual bool RemoveEdge(IDiagramGraphEdge edge);
    [CanBeNullAttribute]
public sealed virtual IDiagramGroupNode GetImmediateParent(IDiagramGraphElement element);
}
public abstract class JetBrains.Application.UI.Diagramming.DiagramGraphNode : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IDiagramGraphEdge> <Outgoing>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IDiagramGraphEdge> <Incoming>k__BackingField;
    public string Name { get; }
    public bool IsValid { get; public set; }
    public ElementKind Kind { get; public set; }
    public ICollection`1<IDiagramGraphEdge> Outgoing { get; }
    public ICollection`1<IDiagramGraphEdge> Incoming { get; }
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsValid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public ElementKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(ElementKind value);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<IDiagramGraphEdge> get_Outgoing();
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<IDiagramGraphEdge> get_Incoming();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Diagramming.DiagramGraphNodeExtentions : object {
    [ExtensionAttribute]
public static bool RemoveEdge(IDiagramGraphNode node, IDiagramGraphEdge edge);
    [ExtensionAttribute]
public static void AddEdge(IDiagramGraphNode node, IDiagramGraphEdge edge);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Diagramming.ElementKind : Enum {
    public int value__;
    public static ElementKind Normal;
    public static ElementKind New;
    public static ElementKind Removed;
    public static ElementKind VB;
    public static ElementKind CSharp;
}
public interface JetBrains.Application.UI.Diagramming.IDiagramDescriptor {
}
public class JetBrains.Application.UI.Diagramming.SimpleDiagramGraph : DiagramGraphBase {
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Diagramming.Util.GraphElementEx : object {
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Diagramming.Util.GraphElementEx/<GetNestedNodesRecursive>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IDiagramGraphNode> GetNestedNodesRecursive(IDiagramGraphElement element);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Diagramming.Util.GraphUtils : object {
    public static void GraphDfs(IDiagramGraphNode node, IDiagramGraph graph, Func`2<IDiagramGraphNode, bool> nodeFunc, Func`2<IDiagramGraphEdge, bool> edgeAction, Action`1<IDiagramGraphNode> afterVisitedAction);
    [ExtensionAttribute]
public static bool ContainsNode(IDiagramGraph graph, IDiagramGraphNode node);
    [ExtensionAttribute]
public static bool ContainsNodeOrGroup(IDiagramGraph graph, IDiagramGraphNode node);
    [ExtensionAttribute]
public static bool ContainsEdge(IDiagramGraph graph, IDiagramGraphEdge edge);
    [ExtensionAttribute]
public static bool Contains(IDiagramGraph graph, IDiagramGraphElement element);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Diagramming.Util.GraphUtils/<Elements>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<IDiagramGraphElement> Elements(IDiagramGraph graph);
    public static void FilterGraph(IDiagramGraph upToDateGraph, Func`2<IDiagramGraphElement, bool> shouldRemainFilter);
    [ExtensionAttribute]
public static void ProcessTransitiveEdges(IDiagramGraph graph, bool includeTransitive, Func`2<IDiagramGraphEdge, bool> shouldProcessEdge, Action`1<IDiagramGraphEdge> processTransitiveEdge);
    public static ICollection`1<IDiagramGraphElement> GetRelatedElements(ICollection`1<IDiagramGraphNode> nodesToRemove);
    public static int GetNestedItemsCount(IDiagramGroupNode initialGroupNode);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Diagramming.Util.ViewModelGraphExtensions : object {
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Diagramming.Util.ViewModelGraphExtensions/<GetParentsChain>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<IDiagramGroupNode> GetParentsChain(IDiagramGraph graph, IDiagramGraphNode target);
}
public interface JetBrains.Application.UI.Env.IHideSplashScreen {
    public abstract virtual void HideSplash();
    public abstract virtual void HideSplash(IntPtr hWndPtr);
    public abstract virtual void HideSplash(Action onSplashClosed, IntPtr hWndPtr);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.CustomAttributeProviderExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static T GetAttribute(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
[NotNullAttribute]
public static T[] GetAttributes(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider, bool inherit);
    [ExtensionAttribute]
public static bool HasAttribute(ICustomAttributeProvider provider, Type attributeType, bool inherit);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.DispatcherEx : object {
    [ExtensionAttribute]
public static void AssertAccess(Dispatcher dispatcher);
    [ExtensionAttribute]
public static void BeginOrInvoke(Dispatcher dispatcher, Action action);
    [ExtensionAttribute]
public static DispatcherOperation BeginInvoke(Dispatcher dispatcher, Action action);
    [ExtensionAttribute]
public static DispatcherOperation BeginInvoke(Dispatcher dispatcher, DispatcherPriority priority, Action action);
    [ExtensionAttribute]
public static void DelayInvoke(Dispatcher dispatcher, DispatcherPriority priority, Action action, TimeSpan delay);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.ImageEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static Bitmap ToGrayscale(Image thіs, Lifetime lifetime);
}
public static class JetBrains.Application.UI.Extensions.PackUriHelpers : object {
    [ObsoleteAttribute("Even though it technically works, it produces shitty code which hard-codes paths to resources in plain text, which would silently break on any move. Write x:class='MyNameForBunchOfResources' in the resource you want to load, and use ResourceDictionaries.LoadResources<MyNameForBunchOfResources>() to load it correctly.")]
public static Uri MakePackUri(string path, Assembly assembly);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.LayoutSettings", "JetBrains.Application.Resources.Strings", "WindowPersistenceDataSettingDescription")]
public class JetBrains.Application.UI.Extensions.PersistenceBehaviorSettings : object {
    [SettingsIndexedEntryAttribute("JetBrains.Application.Resources.Strings", "WindowBoundsSettingDescription")]
public IIndexedEntry`2<string, string> WindowBounds;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsGenericDefinedAs(Type type, Type template, bool recursive);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Extensions.TypeExtensions/<GetHierarchy>d__1")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<Type> GetHierarchy(Type type, bool includeSelf);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Extensions.TypeExtensions/<GetInterfaces>d__2")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<Type> GetInterfaces(Type type, bool includeSelf);
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<Type> GetInterfaces(Type type, Type template);
    [ExtensionAttribute]
public static bool Inherits(Type type);
    [ExtensionAttribute]
public static bool Inherits(Type type, Type parentType);
    [ExtensionAttribute]
public static bool Implements(Type type);
    [ExtensionAttribute]
public static bool Implements(Type type, Type interface);
    [ExtensionAttribute]
[NotNullAttribute]
public static Type[] GetGenericArgumentsOf(Type type, Type template);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Help.ExceptionReport.CollectionEventsEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
[ObsoleteAttribute("Use CollectionBridge")]
public static ICollectionEvents`1<TValue> WhereEvents(ICollectionEvents`1<TValue> sourceCollection, Lifetime lifetime, Predicate`1<TValue> filter);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICollectionEvents`1<TValue> WhereEvents(ICollectionEvents`1<TValue> sourceCollection, Lifetime lifetime, Predicate`1<TValue> filter, Func`2<TValue, ISimpleSignal> getChangeSignal);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Help.ExceptionReport.DefaultIssueTracker : ExceptionAnalyzerTracker {
    public DefaultIssueTracker(OpensUri opensUri, IApplicationHost host, IExceptionHandlingService exceptionHandlingService, SubProducts products, ISettingsStore settingsStore, ILogger logger, IShellLocks locks, Lifetime lifetime);
    public DefaultIssueTracker(OpensUri opensUri, IssueTrackerBuildDescription builddesc, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore, ILogger logger, IShellLocks locks, Lifetime lifetime);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerConnector : object {
    public static string GlobalProductName;
    private IExceptionHandlingService myService;
    private Regex myServerSideErrorMessageMatcher;
    private bool myIsGlobalConnector;
    private IssueTrackerBuildDescription myBuildDescription;
    public ExceptionAnalyzerConnector(IssueTrackerBuildDescription builddesc, IExceptionHandlingService exceptionHandlingService, bool isGlobalConnector);
    private static ExceptionAnalyzerConnector();
    public string GetRegisterUri();
    public void SubmitException(ExceptionData exceptionData, string description, bool submitPrivately, bool attachSensitiveData, LoginInformation loginInformation, String[] attachmentUrls, IProgressIndicator progressIndicator, IEnumerable`1<string> tags);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerConnector/<GetSensitiveData>d__8")]
[NotNullAttribute]
private static IEnumerable`1<RequestParameter> GetSensitiveData(ExceptionData exceptionData);
    private static string GetMessage(ResponseBody response, ICollection`1<Action> actions, string key);
    private string ExtractErrorMessage(Exception ex);
    private static string RenderErrors(IEnumerable`1<string> errors);
    private static string StripInvalidXmlSymbols(Char[] in);
    public Uri GetUrlForAttachmentsUpload();
    public String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator, ISettingsStore settingsStore);
    public JObject GetAccessTokenJson(string refreshToken);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerTracker : object {
    private OpensUri myOpensUri;
    private IExceptionHandlingService myExceptionHandlingService;
    private ExceptionAnalyzerConnector myConnector;
    [CanBeNullAttribute]
private ISettingsStore mySettingsStore;
    private ILogger myLogger;
    private static int ExpirationDeltaSeconds;
    private static string ourSuccessfulAuthorizationResponse;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    public bool IsInternal { get; public set; }
    public ExceptionAnalyzerTracker(OpensUri opensUri, IssueTrackerBuildDescription builddesc, IExceptionHandlingService exceptionHandlingService, ISettingsStore settingsStore, ILogger logger, bool isGlobalTracker);
    private static ExceptionAnalyzerTracker();
    public sealed virtual void SubmitFeedback(LoginInformation loginInformation, string feedback, IProgressIndicator progressIndicator);
    public sealed virtual void SubmitException(ExceptionData exception, LoginInformation loginInformation, string description, bool submitPrivately, bool attachSensitiveData, String[] attachmentUrls, IWebProxy proxy, IProgressIndicator progressIndicator, IEnumerable`1<string> tags);
    public sealed virtual String[] UploadAttachments(string id, ICollection`1<FileSystemPath> filesToAttach, IWebProxy proxy, IProgressIndicator progressIndicator);
    public sealed virtual Nullable`1<LoginInformation> Register();
    public sealed virtual Uri GetUrlForAttachmentsUpload();
    public sealed virtual AccessTokenInfo GetAccessToken(string refreshToken);
    [CompilerGeneratedAttribute]
public bool get_IsInternal();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsInternal(bool value);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerTracker/<LoginViaBrowserAsync>d__18")]
public sealed virtual Task`1<string> LoginViaBrowserAsync();
    private Exception PrepareError(HttpListenerResponse response, string errorMessage);
    private void ProcessResult(HttpListenerResponse response);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.ExceptionAnalyzerUtil : object {
    public static ICollection`1<Pair`2<string, long>> UploadFileAttachmentsAlternative(IExceptionHandlingService service, string reportId, ICollection`1<FileSystemPath> fileAttachments, IProgressIndicator progressIndicator, IContextBoundSettingsStore settingsStore, Action`1<string> logMessage, Action`1<string> logError, IWebProxy proxy);
    private static string UploadFileAlternative(IExceptionHandlingService service, IContextBoundSettingsStore settingsStore, string reportId, FileSystemPath path, IProgressIndicator indicator, Action`1<string> logMessage, Action`1<string> logError);
    public static ICollection`1<Pair`2<string, long>> UploadFileAttachments(string reportId, ICollection`1<FileSystemPath> fileAttachments, Uri uploadUriBase, IProgressIndicator progressIndicator, IWebProxy proxy, Action`1<string> logMessage, Action`1<string> logError);
    public static Uri Combine(Uri baseUri, string path, Action`1<string> logMessage);
    public static ICollection`1<Pair`2<string, long>> UploadAttachments(string reportId, ICollection`1<FileSystemPath> filesToAttach, IProgressIndicator progressIndicator, Action`1<string> logMessage, Action`1<string> logError, IExceptionHandlingService service, IContextBoundSettingsStore settingStore);
}
public abstract class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.AnonymousIdentifierPartBase : object {
    public string Key { get; }
    public UserIdentifier Id { get; public set; }
    public string SerializedId { get; }
    public double Order { get; }
    public sealed virtual string get_Key();
    public sealed virtual UserIdentifier Parse(String[] parts);
    public sealed virtual UserIdentifier get_Id();
    public sealed virtual void set_Id(UserIdentifier value);
    public sealed virtual string get_SerializedId();
    public string GetSerializedId();
    public sealed virtual double get_Order();
    public sealed virtual bool IsAvailable(RequestType requestType);
    public sealed virtual Task`1<UserIdentifier> ValidateAsync(UserIdentifier userIdentifier, IWin32Window ownerWindow);
}
public interface JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.IUserIdentifierPart {
    public string Key { get; }
    public UserIdentifier Id { get; public set; }
    public string SerializedId { get; }
    public double Order { get; }
    public abstract virtual string get_Key();
    [CanBeNullAttribute]
public abstract virtual UserIdentifier Parse(String[] parts);
    [NotNullAttribute]
public abstract virtual UserIdentifier get_Id();
    [CanBeNullAttribute]
public abstract virtual void set_Id(UserIdentifier value);
    public abstract virtual string get_SerializedId();
    public abstract virtual double get_Order();
    public abstract virtual bool IsAvailable(RequestType requestType);
    public abstract virtual Task`1<UserIdentifier> ValidateAsync(UserIdentifier userIdentifier, IWin32Window ownerWindow);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.RequestBody : ValueType {
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TextPart> <TextParts>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentifier <User>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Attachment> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log>k__BackingField;
    public string Product { get; public set; }
    public RequestType Type { get; public set; }
    public List`1<TextPart> TextParts { get; public set; }
    public UserIdentifier User { get; public set; }
    public List`1<Attachment> Attachments { get; public set; }
    public string Log { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public RequestType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RequestType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public List`1<TextPart> get_TextParts();
    [CompilerGeneratedAttribute]
public void set_TextParts(List`1<TextPart> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UserIdentifier get_User();
    [CompilerGeneratedAttribute]
public void set_User(UserIdentifier value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public List`1<Attachment> get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(List`1<Attachment> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RequestBody left, RequestBody right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RequestBody left, RequestBody right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RequestBody other);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.ResponseBody : ValueType {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    public string Text { get; public set; }
    public List`1<string> Errors { get; public set; }
    public ResponseBody(string Text, List`1<string> Errors);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ResponseBody left, ResponseBody right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ResponseBody left, ResponseBody right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ResponseBody other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Text, List`1& Errors);
}
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.YouTrackTokenIdentifier")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserNameIdentifier")]
[XmlTypeAttribute("UserIdentificator")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserIdentifier : object {
    [XmlIgnoreAttribute]
public static UserIdentifier Anonymous;
    [CompilerGeneratedAttribute]
private bool <IsAnonymous>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public bool IsAnonymous { get; public set; }
    [XmlIgnoreAttribute]
public int Priority { get; }
    private static UserIdentifier();
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public bool get_IsAnonymous();
    [CompilerGeneratedAttribute]
public void set_IsAnonymous(bool value);
    public virtual UserIdentifier GetIdentifierToSubmit();
    public virtual bool IsValid();
    public virtual int get_Priority();
}
[XmlTypeAttribute("UserNameIdentificator")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserNameIdentifier : UserIdentifier {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EMail>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public string UserName { get; public set; }
    public string EMail { get; public set; }
    [XmlIgnoreAttribute]
public int Priority { get; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_EMail();
    [CompilerGeneratedAttribute]
public void set_EMail(string value);
    public virtual int get_Priority();
}
public abstract class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserNameIdentifierPartBase : object {
    [CompilerGeneratedAttribute]
private UserNameParameters <Parameters>k__BackingField;
    public string Key { get; }
    protected UserNameParameters Parameters { get; private set; }
    public UserIdentifier Id { get; public set; }
    public string SerializedId { get; }
    public double Order { get; }
    public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
protected UserNameParameters get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(UserNameParameters value);
    public sealed virtual UserIdentifier Parse(String[] parts);
    [NotNullAttribute]
public sealed virtual UserIdentifier get_Id();
    [CanBeNullAttribute]
public sealed virtual void set_Id(UserIdentifier value);
    public sealed virtual string get_SerializedId();
    public sealed virtual double get_Order();
    public sealed virtual bool IsAvailable(RequestType requestType);
    public sealed virtual Task`1<UserIdentifier> ValidateAsync(UserIdentifier userIdentifier, IWin32Window ownerWindow);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.UserNameParameters : object {
    public static UserNameParameters Invalid;
    private string myUserName;
    private string myEMail;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string UserName { get; public set; }
    public string EMail { get; public set; }
    public UserNameParameters(string userName, string eMail);
    private static UserNameParameters();
    public string get_UserName();
    public void set_UserName(string value);
    public string get_EMail();
    public void set_EMail(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged1(string propertyName);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.YouTrackParameters : object {
    public static YouTrackParameters Invalid;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private string myUserName;
    private string myRefreshToken;
    private string myAccessToken;
    private DateTime myAccessTokenExpirationTime;
    public string UserName { get; public set; }
    public string AccessToken { get; public set; }
    public string RefreshToken { get; public set; }
    public DateTime AccessTokenExpirationTime { get; public set; }
    public YouTrackParameters(string userName, string refreshToken, string accessToken, DateTime accessTokenExpirationTime);
    private static YouTrackParameters();
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(PropertyChangedEventHandler value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public string get_RefreshToken();
    public void set_RefreshToken(string value);
    public DateTime get_AccessTokenExpirationTime();
    public void set_AccessTokenExpirationTime(DateTime value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged1(string propertyName);
}
[XmlTypeAttribute("YouTrackTokenIdentificator")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.YouTrackTokenIdentifier : UserIdentifier {
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <AccessTokenExpirationTime>k__BackingField;
    [XmlIgnoreAttribute]
public string Key { get; }
    public string Login { get; public set; }
    public string RefreshToken { get; public set; }
    public string AccessToken { get; public set; }
    public DateTime AccessTokenExpirationTime { get; public set; }
    [XmlIgnoreAttribute]
public int Priority { get; }
    public virtual string get_Key();
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public DateTime get_AccessTokenExpirationTime();
    [CompilerGeneratedAttribute]
public void set_AccessTokenExpirationTime(DateTime value);
    public virtual UserIdentifier GetIdentifierToSubmit();
    public virtual bool IsValid();
    public virtual int get_Priority();
}
public abstract class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.YouTrackTokenIdentifierPartBase : object {
    [CompilerGeneratedAttribute]
private IIssueTracker <issueTracker>P;
    private static ILogger ourLogger;
    [CompilerGeneratedAttribute]
private YouTrackParameters <Parameters>k__BackingField;
    protected YouTrackParameters Parameters { get; private set; }
    public string Key { get; }
    public UserIdentifier Id { get; public set; }
    public string SerializedId { get; }
    public double Order { get; }
    protected YouTrackTokenIdentifierPartBase(IIssueTracker issueTracker);
    private static YouTrackTokenIdentifierPartBase();
    [CompilerGeneratedAttribute]
protected YouTrackParameters get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(YouTrackParameters value);
    public sealed virtual string get_Key();
    public sealed virtual UserIdentifier Parse(String[] parts);
    public sealed virtual UserIdentifier get_Id();
    public sealed virtual void set_Id(UserIdentifier value);
    public sealed virtual string get_SerializedId();
    private string GetSerializedId(string userName, string encryptedRefreshToken, string encryptedAccessToken, Nullable`1<DateTime> accessTokenExpirationDateTime);
    public sealed virtual double get_Order();
    public sealed virtual bool IsAvailable(RequestType requestType);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.Feedback.v2.YouTrackTokenIdentifierPartBase/<ValidateAsync>d__19")]
public sealed virtual Task`1<UserIdentifier> ValidateAsync(UserIdentifier userIdentifier, IWin32Window ownerWindow);
    [ItemCanBeNullAttribute]
protected abstract virtual Task`1<string> RevalidateRefreshToken(IWin32Window ownerWindow);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.FileUploader : object {
    private FileSystemPath myFilePath;
    private IWebProxy myProxy;
    private Timer myTimer;
    private Uri myUploadUri;
    private int myBytesTransferred;
    [CompilerGeneratedAttribute]
private Action`1<int> TransferSpeedChanged;
    public FileUploader(Uri uploadUri, FileSystemPath filePath, IWebProxy proxy);
    [CompilerGeneratedAttribute]
public void add_TransferSpeedChanged(Action`1<int> value);
    [CompilerGeneratedAttribute]
public void remove_TransferSpeedChanged(Action`1<int> value);
    public void Upload(IProgressIndicator indicator, Action`1<string> logMessage, Action`1<string> logError);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object sender, ElapsedEventArgs args);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.Action : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    public string Text { get; public set; }
    public string Key { get; public set; }
    public int Code { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public int get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(int value);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionCodes : object {
    public static int NewException;
    public static int MatchedExistingException;
    public static int CommentedException;
    public static int ChangedStorage;
    public static int Error;
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionCollection : object {
    [CompilerGeneratedAttribute]
private List`1<Action> <Actions>k__BackingField;
    public List`1<Action> Actions { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Action> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<Action> value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionResult : object {
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Issue> <Issues>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action> <Actions>k__BackingField;
    public string Guid { get; public set; }
    public List`1<Issue> Issues { get; public set; }
    public List`1<string> Errors { get; public set; }
    public List`1<Action> Actions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public List`1<Issue> get_Issues();
    [CompilerGeneratedAttribute]
public void set_Issues(List`1<Issue> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Action> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<Action> value);
}
public enum JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ActionType : Enum {
    public int value__;
    public static ActionType Submit;
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameter : RequestParameter {
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Guid { get; public set; }
    public string Summary { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithAttachments : ExceptionParameterWithCommentAndOptions {
    [CompilerGeneratedAttribute]
private String[] <AttachmentUrls>k__BackingField;
    public String[] AttachmentUrls { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_AttachmentUrls();
    [CompilerGeneratedAttribute]
public void set_AttachmentUrls(String[] value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithComment : ExceptionParameter {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithCommentAndOptions : ExceptionParameterWithComment {
    [CompilerGeneratedAttribute]
private bool <Private>k__BackingField;
    public bool Private { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Private();
    [CompilerGeneratedAttribute]
public void set_Private(bool value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.Issue : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    public string Key { get; public set; }
    public string Url { get; public set; }
    public string Guid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.RequestAction : object {
    [CompilerGeneratedAttribute]
private ActionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RequestParameter> <Parameters>k__BackingField;
    public ActionType Type { get; public set; }
    public string Guid { get; public set; }
    public List`1<RequestParameter> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public ActionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ActionType value);
    [CompilerGeneratedAttribute]
public string get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(string value);
    [CompilerGeneratedAttribute]
public List`1<RequestParameter> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(List`1<RequestParameter> value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.RequestBody : object {
    [CompilerGeneratedAttribute]
private string <Product>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EMail>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RequestAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubmitAnonymously>k__BackingField;
    public string Product { get; public set; }
    public string ProductVersion { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string AccessToken { get; public set; }
    public string EMail { get; public set; }
    public List`1<RequestAction> Actions { get; public set; }
    public bool SubmitAnonymously { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Product();
    [CompilerGeneratedAttribute]
public void set_Product(string value);
    [CompilerGeneratedAttribute]
public string get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_EMail();
    [CompilerGeneratedAttribute]
public void set_EMail(string value);
    [CompilerGeneratedAttribute]
public List`1<RequestAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<RequestAction> value);
    [CompilerGeneratedAttribute]
public bool get_SubmitAnonymously();
    [CompilerGeneratedAttribute]
public void set_SubmitAnonymously(bool value);
}
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameter")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithComment")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithCommentAndOptions")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ExceptionParameterWithAttachments")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.SensitiveDataParameter")]
[XmlIncludeAttribute("JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.TagParameter")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.RequestParameter : object {
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.ResponseBody : object {
    [CompilerGeneratedAttribute]
private List`1<ActionResult> <ActionResults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Info>k__BackingField;
    public List`1<ActionResult> ActionResults { get; public set; }
    public List`1<string> Errors { get; public set; }
    public string Info { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ActionResult> get_ActionResults();
    [CompilerGeneratedAttribute]
public void set_ActionResults(List`1<ActionResult> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Info();
    [CompilerGeneratedAttribute]
public void set_Info(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.SensitiveDataParameter : RequestParameter {
    [CompilerGeneratedAttribute]
private string <SensitiveData>k__BackingField;
    public string SensitiveData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SensitiveData();
    [CompilerGeneratedAttribute]
public void set_SensitiveData(string value);
}
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionAnalyzer.v5.TagParameter : RequestParameter {
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
}
public abstract class JetBrains.Application.UI.Help.ExceptionReport.ExceptionBrowserParametersBase : object {
    [CompilerGeneratedAttribute]
private IWin32Window <Window>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowBranding <WindowBranding>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<ExceptionData> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionSubmitter <ExceptionSubmitter>k__BackingField;
    [CompilerGeneratedAttribute]
private IIssueTracker <IssueTracker>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMode <InternalMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Clipboard <Clipboard>k__BackingField;
    [CompilerGeneratedAttribute]
private OpensUri <OpensUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IThemedIconManager <IconManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionReportingIconSet <ExceptionReportingIconSet>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<LoginInformation> <LoginInformationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UserCommentProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HidesExceptionBrowser>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <ShowSubmissionResultProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <SubmitPrivatelyProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <AttachSensitiveDataProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private WebProxySettingsReader <ProxySettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportAttachmentPartsContainer <ReportAttachmentParts>k__BackingField;
    [CompilerGeneratedAttribute]
private IThreading <Threading>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionBarManager <ActionBarManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingsStore <SettingsStore>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentifierPartsContainer <UserIdentifierPartsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private JetBrainsResourceMappingAccessor <ResourceMappingAccessor>k__BackingField;
    public IWin32Window Window { get; public set; }
    public Lifetime Lifetime { get; public set; }
    public IWindowBranding WindowBranding { get; public set; }
    public ICollectionEvents`1<ExceptionData> Exceptions { get; public set; }
    public IExceptionSubmitter ExceptionSubmitter { get; public set; }
    public IIssueTracker IssueTracker { get; public set; }
    public InternalMode InternalMode { get; public set; }
    public Clipboard Clipboard { get; public set; }
    public OpensUri OpensUri { get; public set; }
    public IThemedIconManager IconManager { get; public set; }
    public ExceptionReportingIconSet ExceptionReportingIconSet { get; public set; }
    public IProperty`1<LoginInformation> LoginInformationProperty { get; public set; }
    public IProperty`1<string> UserCommentProperty { get; public set; }
    public bool HidesExceptionBrowser { get; public set; }
    [CanBeNullAttribute]
public IProperty`1<bool> ShowSubmissionResultProperty { get; public set; }
    [CanBeNullAttribute]
public IProperty`1<bool> SubmitPrivatelyProperty { get; public set; }
    [CanBeNullAttribute]
public IProperty`1<bool> AttachSensitiveDataProperty { get; public set; }
    public WebProxySettingsReader ProxySettings { get; public set; }
    public ReportAttachmentPartsContainer ReportAttachmentParts { get; public set; }
    public IThreading Threading { get; public set; }
    public IActionBarManager ActionBarManager { get; public set; }
    [NotNullAttribute]
public ISettingsStore SettingsStore { get; }
    [NotNullAttribute]
public UserIdentifierPartsContainer UserIdentifierPartsContainer { get; }
    [CanBeNullAttribute]
public JetBrainsResourceMappingAccessor ResourceMappingAccessor { get; public set; }
    public bool AnyExceptionBeingSubmitted { get; }
    protected ExceptionBrowserParametersBase(ISettingsStore settingsStore, UserIdentifierPartsContainer userIdentifierPartsContainer);
    [CompilerGeneratedAttribute]
public IWin32Window get_Window();
    [CompilerGeneratedAttribute]
public void set_Window(IWin32Window value);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(Lifetime value);
    [CompilerGeneratedAttribute]
public IWindowBranding get_WindowBranding();
    [CompilerGeneratedAttribute]
public void set_WindowBranding(IWindowBranding value);
    [CompilerGeneratedAttribute]
public ICollectionEvents`1<ExceptionData> get_Exceptions();
    [CompilerGeneratedAttribute]
public void set_Exceptions(ICollectionEvents`1<ExceptionData> value);
    [CompilerGeneratedAttribute]
public IExceptionSubmitter get_ExceptionSubmitter();
    [CompilerGeneratedAttribute]
public void set_ExceptionSubmitter(IExceptionSubmitter value);
    [CompilerGeneratedAttribute]
public IIssueTracker get_IssueTracker();
    [CompilerGeneratedAttribute]
public void set_IssueTracker(IIssueTracker value);
    [CompilerGeneratedAttribute]
public InternalMode get_InternalMode();
    [CompilerGeneratedAttribute]
public void set_InternalMode(InternalMode value);
    [CompilerGeneratedAttribute]
public Clipboard get_Clipboard();
    [CompilerGeneratedAttribute]
public void set_Clipboard(Clipboard value);
    [CompilerGeneratedAttribute]
public OpensUri get_OpensUri();
    [CompilerGeneratedAttribute]
public void set_OpensUri(OpensUri value);
    [CompilerGeneratedAttribute]
public IThemedIconManager get_IconManager();
    [CompilerGeneratedAttribute]
public void set_IconManager(IThemedIconManager value);
    [CompilerGeneratedAttribute]
public ExceptionReportingIconSet get_ExceptionReportingIconSet();
    [CompilerGeneratedAttribute]
public void set_ExceptionReportingIconSet(ExceptionReportingIconSet value);
    [CompilerGeneratedAttribute]
public IProperty`1<LoginInformation> get_LoginInformationProperty();
    [CompilerGeneratedAttribute]
public void set_LoginInformationProperty(IProperty`1<LoginInformation> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UserCommentProperty();
    [CompilerGeneratedAttribute]
public void set_UserCommentProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_HidesExceptionBrowser();
    [CompilerGeneratedAttribute]
public void set_HidesExceptionBrowser(bool value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_ShowSubmissionResultProperty();
    [CompilerGeneratedAttribute]
public void set_ShowSubmissionResultProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_SubmitPrivatelyProperty();
    [CompilerGeneratedAttribute]
public void set_SubmitPrivatelyProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_AttachSensitiveDataProperty();
    [CompilerGeneratedAttribute]
public void set_AttachSensitiveDataProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public WebProxySettingsReader get_ProxySettings();
    [CompilerGeneratedAttribute]
public void set_ProxySettings(WebProxySettingsReader value);
    [CompilerGeneratedAttribute]
public ReportAttachmentPartsContainer get_ReportAttachmentParts();
    [CompilerGeneratedAttribute]
public void set_ReportAttachmentParts(ReportAttachmentPartsContainer value);
    [CompilerGeneratedAttribute]
public IThreading get_Threading();
    [CompilerGeneratedAttribute]
public void set_Threading(IThreading value);
    [CompilerGeneratedAttribute]
public IActionBarManager get_ActionBarManager();
    [CompilerGeneratedAttribute]
public void set_ActionBarManager(IActionBarManager value);
    [CompilerGeneratedAttribute]
public ISettingsStore get_SettingsStore();
    [CompilerGeneratedAttribute]
public UserIdentifierPartsContainer get_UserIdentifierPartsContainer();
    [CompilerGeneratedAttribute]
public JetBrainsResourceMappingAccessor get_ResourceMappingAccessor();
    [CompilerGeneratedAttribute]
public void set_ResourceMappingAccessor(JetBrainsResourceMappingAccessor value);
    public IEnumerable`1<ExceptionData> GetPendingExceptions();
    public IEnumerable`1<ExceptionData> GetSubmittedExceptions();
    public bool get_AnyExceptionBeingSubmitted();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionHandlingService : object {
    [CompilerGeneratedAttribute]
private TimeSpan <DiscoveryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    private Lifetime myLifetime;
    private JetBrainsResourceMappingAccessor myResourceMappingAccessor;
    [CanBeNullAttribute]
private WebProxySettingsReader myProxyReader;
    [NotNullAttribute]
private ILogger myLogger;
    [CanBeNullAttribute]
private IWebProxy myProxy;
    private DateTime myLastDiscoveryTimestamp;
    private HttpClient myClient;
    private string myDiscoveryUrl;
    private string myServerUrlOverride;
    public string DiscoveryUrl { get; public set; }
    public TimeSpan DiscoveryInterval { get; }
    public TimeSpan Timeout { get; }
    public string ServerUrlOverride { get; public set; }
    [CanBeNullAttribute]
public IWebProxy Proxy { get; }
    public ExceptionHandlingService(Lifetime lifetime, JetBrainsResourceMappingAccessor resourceMappingAccessor, WebProxySettingsReader proxyReader, ILogger logger);
    public string get_DiscoveryUrl();
    public void set_DiscoveryUrl(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DiscoveryInterval();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    public string get_ServerUrlOverride();
    public void set_ServerUrlOverride(string value);
    private void PatchServicePoint();
    private Pair`2<string, string> GetServiceInfo();
    public sealed virtual IWebProxy get_Proxy();
    private HttpClient GetClient();
    [CanBeNullAttribute]
private T Execute(Func`2<Lifetime, T> whatToDo, Func`1<bool> fAbort, Action`1<Exception> onException);
    private static string HttpGet(HttpClient client, string requestUri, CancellationToken token);
    private static string HttpPost(HttpClient client, string requestUri, HttpContent content, CancellationToken token);
    public sealed virtual string GetEaServerAddress();
    public sealed virtual string HandleException(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string GetRegisterUri(string product, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string GetFileUploadUrl(Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public virtual string GetSelfProfilingToolConfiguration(Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string VerifyCredentials(string userName, string password, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string SendReport(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual void BeginFileUpload(string reportId, string fileName, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual void UploadFilePart(string reportId, string fileName, Byte[] data, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual string EndFileUpload(string reportId, string fileName, long bytesTransferred, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public sealed virtual JObject GetAccessTokenJson(string refreshToken, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.ExceptionReporterDefaultConfigs : object {
    public static string YouTrackTokenIdentifierKey;
    public static string UserNameIdentifierKey;
    public static string AnonymousIdentifierKey;
    public static string AnonymousDefaultConfig;
    public static string YouTrackTokenDefaultConfig;
    public static string YouTrackDefaultConfig;
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Help.ExceptionReport.ExceptionReportingIconSet : object {
    private bool myInitialized;
    private Func`1<ITheming> myIconmanCreate;
    private ThemedIconLoader myRefresh;
    private ThemedIconLoader mySubmittingExceptionInProgress;
    private ThemedIconLoader mySuccess;
    private ThemedIconLoader myErrorOn;
    private ThemedIconLoader myErrorRead;
    private ThemedIconLoader myHourglass;
    private ThemedIconLoader myError;
    private ThemedIconLoader myEdit;
    private ThemedIconLoader myCopy;
    private ThemedIconLoader myDelete;
    private ThemedIconLoader myDetails;
    private ThemedIconLoader myMute;
    private ThemedIconLoader myAddAttachment;
    public ThemedIconLoader Error { get; }
    public ThemedIconLoader Refresh { get; }
    public ThemedIconLoader SubmittingExceptionInProgress { get; }
    public ThemedIconLoader Success { get; }
    public ThemedIconLoader ErrorOn { get; }
    public ThemedIconLoader ErrorRead { get; }
    public ThemedIconLoader Hourglass { get; }
    public ThemedIconLoader Edit { get; }
    public ThemedIconLoader Copy { get; }
    public ThemedIconLoader Delete { get; }
    public ThemedIconLoader Details { get; }
    public ThemedIconLoader Mute { get; }
    public ThemedIconLoader AddAttachment { get; }
    public ExceptionReportingIconSet(IThemedIconManager iconman);
    public ExceptionReportingIconSet(Func`1<ITheming> iconmanCreate);
    public ExceptionReportingIconSet(ThemedIconLoader refresh, ThemedIconLoader success, ThemedIconLoader error, ThemedIconLoader submittingExceptionInProgress, ThemedIconLoader errorOn, ThemedIconLoader errorRead, ThemedIconLoader hourglass, ThemedIconLoader edit, ThemedIconLoader copy, ThemedIconLoader delete, ThemedIconLoader details, ThemedIconLoader mute, ThemedIconLoader addAttachment);
    public ThemedIconLoader get_Error();
    public ThemedIconLoader get_Refresh();
    public ThemedIconLoader get_SubmittingExceptionInProgress();
    public ThemedIconLoader get_Success();
    public ThemedIconLoader get_ErrorOn();
    public ThemedIconLoader get_ErrorRead();
    public ThemedIconLoader get_Hourglass();
    public ThemedIconLoader get_Edit();
    public ThemedIconLoader get_Copy();
    public ThemedIconLoader get_Delete();
    public ThemedIconLoader get_Details();
    public ThemedIconLoader get_Mute();
    public ThemedIconLoader get_AddAttachment();
    private void InitOnDemand();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "FeedbackSubmitterSettingsSettingDescription")]
public class JetBrains.Application.UI.Help.ExceptionReport.FeedbackReportSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "UserIdentificatorStringSettingDescription")]
[ObsoleteAttribute]
public string UserIdentificatorString;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SelectedUserIdentificatorSettingDescription")]
[ObsoleteAttribute]
public string SelectedUserIdentificator;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "KeepAttachmentsSettingDescription")]
public bool KeepTextAndAttachments;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "PathToFileWithStoredStateSettingDescription")]
public string StateFilePath;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SelfProfilingToolVersionSettingDescription")]
public int SelfProfilingToolVersion;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SelfProfilingToolLocationSettingDescription")]
public string SelfProfilingToolLocation;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "UserIsInformedAboutAnonymousSubmissionSettingDescription")]
public bool InformedUserIsAnonymous;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "UserIsInformedAboutSendingCodeToJetBrainsSettingDescription")]
public bool InformedAboutSendingCode;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "FileUploadBufferSizeSettingDescription")]
public int FileUploadBufferSize;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "AttachmentUploadMethodSettingDescription")]
public AttachmentUploadMethod AttachmentUploadMethod;
}
public interface JetBrains.Application.UI.Help.ExceptionReport.IExceptionBrowser {
    public IExceptionsControl Browser { get; }
    public bool Visible { get; }
    public abstract virtual IExceptionsControl get_Browser();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closing(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closing(CancelEventHandler value);
    public abstract virtual bool get_Visible();
    public abstract virtual void Hide();
    public abstract virtual void Show();
    public abstract virtual void Show(IMainWindow window);
    public abstract virtual void BringToFront();
}
public interface JetBrains.Application.UI.Help.ExceptionReport.IExceptionHandlingService {
    public IWebProxy Proxy { get; }
    public abstract virtual string GetEaServerAddress();
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual string HandleException(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string GetRegisterUri(string product, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string VerifyCredentials(string userName, string password, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string SendReport(string input, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string GetFileUploadUrl(Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string GetSelfProfilingToolConfiguration(Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual void BeginFileUpload(string reportId, string fileName, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual void UploadFilePart(string reportId, string fileName, Byte[] data, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual string EndFileUpload(string reportId, string fileName, long bytesTransferred, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
    public abstract virtual JObject GetAccessTokenJson(string refreshToken, Func`1<bool> checkForInterrupt, Action`1<Exception> onException);
}
public interface JetBrains.Application.UI.Help.ExceptionReport.IExceptionsControl {
    public abstract virtual IProgressIndicator CreateProgressIndicator();
    public abstract virtual void SelectAllExceptions();
    public abstract virtual void AttachmentAvailable(IReportAttachment attachment);
    public abstract virtual void ShowErrors(ICollection`1<string> errors);
    public abstract virtual void ExceptionsSubmitted();
    public abstract virtual bool NeedsSave();
    public abstract virtual void SaveTo(XmlElement rootElement, XmlDocument document);
    public abstract virtual void Restore(XmlNode exceptionsNode);
    public abstract virtual void Clear();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Help.ExceptionReport.IsInternalDetectionComponent : object {
    public IsInternalDetectionComponent(IIssueTracker tracker, ProductConfigurations productConfigurations);
}
public class JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService : object {
    [NotNullAttribute]
private static LocalReentrancyGuard mySingleMessageBox;
    private static DateTime myTimeLastShown;
    private static DateTime myLastRequestedIgnore;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    public string ProductName { get; public set; }
    public MessageBoxExceptionReportService(string sProductName);
    private static MessageBoxExceptionReportService();
    [CompilerGeneratedAttribute]
public string get_ProductName();
    [CompilerGeneratedAttribute]
public void set_ProductName(string value);
    public static void ShowException(Exception exception, string sProductName);
    public static void ShowException(ExceptionData exdata, string sProductName);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Log(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.Notify(ExceptionData exception);
    private sealed virtual override void JetBrains.Application.ExceptionReport.IExceptionReportService.RequireAction(ExceptionData exception);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ControlApiScripts : object {
    private static Type GetProfiler(Assembly profilerWindowsApiAssembly, SnapshotType snapshotKind);
    private static void InvokeStaticMethod(Type profiler, ILogger logger, string methodName);
    public static void StartPerformanceSnapshot(ILogger logger, Assembly profilerWindowsApiAssembly, SnapshotType snapshotType);
    public static void StopPerformanceSnapshot(ILogger logger, Assembly profilerWindowsApiAssembly, SnapshotType snapshotType);
    public static void Detach(ILogger logger, Assembly profilerWindowsApiAssembly, SnapshotType snapshotType);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.DotTraceSelfProfiler : object {
    [CompilerGeneratedAttribute]
private static bool <IsRunning>k__BackingField;
    private static Mutex ourLock;
    public static bool IsRunning { get; private set; }
    private static DotTraceSelfProfiler();
    [CompilerGeneratedAttribute]
public static bool get_IsRunning();
    [CompilerGeneratedAttribute]
private static void set_IsRunning(bool value);
    public static bool Start(FileSystemPath snapshotFolder, SnapshotType snapshotType, Action`1<SelfProfilingStatus> onStatusChange, ILogger logger);
    public static bool Start(FileSystemPath snapshotFolder, SnapshotType snapshotType, Config config, Action`1<SelfProfilingStatus> onStatusChange, ILogger logger);
    public static string Stop(bool compress);
}
public interface JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ISelfProfilingTool {
    public abstract virtual Task`1<string> GetMemorySnapshotAsync(IProgressIndicator progressIndicator, TaskScheduler indicatorScheduler);
    public abstract virtual string GetTestMemorySnapshot(FileSystemPath destinationFolder, TimeSpan timeout);
    public abstract virtual void CollectPerformanceSnapshot(SnapshotType snapshotType, Action`1<string> onSnapshotAvailable, Action`1<SelfProfilingStatus> onStatusChange, WriteOnceProperty`1<bool> stopped, Lifetime lifetime);
}
public interface JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ISnapshotFolderProvider {
    public abstract virtual FileSystemPath GetSnapshotsFolder();
}
public abstract class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SelfProfiler : object {
    protected ILogger Logger;
    private ISelfProfilingTool mySelfProfilingTool;
    protected SelfProfiler(ILogger logger, ISelfProfilingTool selfProfilingTool);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SelfProfiler/<CollectProfilingSnapshotAsync>d__3")]
public Task CollectProfilingSnapshotAsync(Lifetime lifetime, SelfProfilingSnapshotKind snapshotKind);
    private Task CollectMemorySnapshotAsync(Lifetime lifetime);
    private Task CollectPerformanceSnapshotAsync(Lifetime lifetime, SnapshotType snapshotType);
    protected abstract virtual Task StartBackgroundTaskAsync(Lifetime lifetime, Func`1<Task> action);
    protected abstract virtual void Initialized(Lifetime lifetime);
    protected abstract virtual void Stopped(Lifetime lifetime, string path);
    protected abstract virtual void Failed(Lifetime lifetime);
    protected abstract virtual void ProfilingStatus(Lifetime lifetime, SelfProfilingStatus status, string result);
    protected abstract virtual WriteOnceProperty`1<bool> GetStoppedProperty();
}
public enum JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SelfProfilingStatus : Enum {
    public int value__;
    public static SelfProfilingStatus Attached;
    public static SelfProfilingStatus Started;
    public static SelfProfilingStatus Detached;
}
public class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SelfProfilingTool : object {
    private static ILogger ourLogger;
    public static string InternalNuGetUrl;
    public static UrlAndApi CustomNugetUrl;
    public static string SELF_PROFILING_CUSTOM_URL;
    public static string MemorySnapshotExtension;
    private Lifetime myLifetime;
    private ISnapshotFolderProvider mySnapshotFolderProvider;
    public SelfProfilingTool(Lifetime lifetime, ISnapshotFolderProvider snapshotFolderProvider);
    private static SelfProfilingTool();
    private static UrlAndApi GetCustomUrl();
    public sealed virtual Task`1<string> GetMemorySnapshotAsync(IProgressIndicator progressIndicator, TaskScheduler indicatorScheduler);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SelfProfilingTool/<GetMemorySnapshotAsync>d__11")]
public Task`1<string> GetMemorySnapshotAsync(IProgressIndicator progressIndicator, TaskScheduler indicatorScheduler, Config config);
    public sealed virtual string GetTestMemorySnapshot(FileSystemPath destinationFolder, TimeSpan timeout);
    public sealed virtual void CollectPerformanceSnapshot(SnapshotType snapshotType, Action`1<string> onSnapshotAvailable, Action`1<SelfProfilingStatus> onStatusChange, WriteOnceProperty`1<bool> stopped, Lifetime lifetime);
    public void CollectPerformanceSnapshot(SnapshotType snapshotType, Config config, Action`1<string> onSnapshotAvailable, Action`1<SelfProfilingStatus> onStatusChange, WriteOnceProperty`1<bool> stopped, bool compressSnapshot, Lifetime lifetime);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SnapshotFolderProvider : object {
    public virtual FileSystemPath GetSnapshotsFolder();
}
public enum JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SnapshotType : Enum {
    public int value__;
    public static SnapshotType PerformanceSampling;
    public static SnapshotType PerformanceTimeline;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ZipInputStreamEx : object {
    [ExtensionAttribute]
public static void EnumerateEntry(ZipInputStream zipStream, Func`3<ZipInputStream, ZipEntry, bool> entry);
}
public static class JetBrains.Application.UI.Help.ExceptionReport.ShellLessExceptionReportingHelpers : object {
    public static IssueTrackerBuildDescription CreateBuildDescriptionFormatter_Environment(IApplicationHost host, SubProducts products);
    public static IssueTrackerBuildDescription CreateBuildDescriptionFormatter_ShellLess(HostInfo hostInfo, Lazy`1<IEnumerable`1<JetPackageMetadata>> specs);
    [NotNullAttribute]
public static ExceptionReporting CreateDeadEnd();
    public static void CreateAndInstallDeadEnd();
}
public abstract class JetBrains.Application.UI.Help.ExceptionReport.SubmitToTrackerExceptionReportService : object {
    [NotNullAttribute]
protected IThreading Invocator;
    [NotNullAttribute]
protected ExceptionManager ExceptionManager;
    protected Lifetime Lifetime;
    [CanBeNullAttribute]
protected IMainWindow MainWindow;
    public IProperty`1<LoginInformation> LoginInformation;
    protected OpensUri OpensUri;
    protected ExceptionReportingIconSet ExceptionReportingIconSet;
    protected IWindowBranding Branding;
    protected InternalMode InternalMode;
    protected IIssueTracker IssueTracker;
    protected IExceptionBrowser ExceptionBrowser;
    protected SubmitToTrackerExceptionReportService(Lifetime lifetime, ExceptionManager exceptionManager, IThreading threading, IMainWindow mainWindow, OpensUri opensUri, ExceptionReportingIconSet exceptionReportingIconSet, IWindowBranding branding, InternalMode internalMode, IIssueTracker issueTracker);
    public virtual void Log(ExceptionData exception);
    public virtual void Notify(ExceptionData exception);
    public abstract virtual void RequireAction(ExceptionData exception);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "ExceptionSubmitterSettingsSettingDescription")]
public class JetBrains.Application.UI.Help.ExceptionReport.SubmitToTrackerExceptionReportServiceSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "TrackerUsernameSettingDescription")]
public string Username;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherToSubmitAnonymouslySettingDescription")]
public bool SubmitAnonymously;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "ShowFormAfterSubmissionSettingDescription")]
public bool ShowBrowserFormAfterSubmission;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SubmitAllExceptionsAutomaticallySettingDescription")]
public bool SubmitAutomatically;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "PersistExceptionsSettingDescription")]
public bool PersistExceptions;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WatchExceptionStorageSettingDescription")]
public bool WatchExceptionStorage;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "UserCommentSettingDescription")]
public string UserComment;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SubmitPrivatelySettingDescription")]
public bool SubmitPrivately;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "AttachSensitiveDataSettingDescription")]
public bool AttachSensitiveData;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "ReportNonProductExceptionsSettingDescription")]
public bool ReportIrrelevantExceptions;
}
[GlobalSettingsUpgraderAttribute("16")]
public class JetBrains.Application.UI.Help.ExceptionReport.SubmitToTrackerExceptionReportServiceUpgrader : SettingTablesUpgrader {
    public SubmitToTrackerExceptionReportServiceUpgrader(ProductConfigurations productConfigurations);
    protected virtual void DoUpgrade(IComponentSettingsProvider legacySettingsProvider, IContextBoundSettingsStore boundSettingsStore, Lifetime upgradeLifetime, SettingsTableBase workspaceSettingsTable, SettingsTableBase globalSettingsTable);
}
public abstract class JetBrains.Application.UI.Help.Feedback.AccountBase : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
public abstract class JetBrains.Application.UI.Help.Feedback.Actions.AddAttachmentAction : object {
    public static DataConstant`1<IGetAttachmentController> GetAttachmentControllerConstant;
    protected string ProviderId { get; }
    private static AddAttachmentAction();
    protected abstract virtual string get_ProviderId();
    protected IOptionalReportAttachmentProvider GetAttachmentProvider(IDataContext context);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public abstract class JetBrains.Application.UI.Help.Feedback.Actions.AddProfileAttachmentAction : object {
    public static DataConstant`1<IGetAttachmentController> GetProfileAttachmentControllerConstant;
    protected string ProviderId { get; }
    private static AddProfileAttachmentAction();
    protected abstract virtual string get_ProviderId();
    protected IOptionalReportAttachmentProvider GetAttachmentProvider(IDataContext context);
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("AllScreensScreenshotAttachmentProvider", "Screenshot (All Screens)")]
public class JetBrains.Application.UI.Help.Feedback.Actions.AllScreensScreenshotAttachmentAction : AddAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
[ActionAttribute("FileAttachmentProvider", "File")]
public class JetBrains.Application.UI.Help.Feedback.Actions.FileAttachmentAction : AddAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
public interface JetBrains.Application.UI.Help.Feedback.Actions.IGetAttachmentController {
    public abstract virtual bool HasAttachment(string providerId);
    public abstract virtual void BeginGetAttachment(IOptionalReportAttachmentProvider provider);
}
[ActionAttribute("LogsAttachmentProvider")]
public class JetBrains.Application.UI.Help.Feedback.Actions.LogAttachmentAction : AddAttachmentAction {
    protected string ProviderId { get; }
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    protected virtual string get_ProviderId();
}
[ActionAttribute("MemorySnapshotAttachmentProvider", "JetBrains.Application.Resources.Strings", "MemorySnapshotAttachmentProvider_ProviderName")]
public class JetBrains.Application.UI.Help.Feedback.Actions.MemorySnapshotAttachmentAction : AddProfileAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
[ActionAttribute("PrimaryScreenScreenshotAttachmentProvider", "JetBrains.Application.Resources.Strings", "PrimaryScreenScreenshotAttachmentAction_Text")]
public class JetBrains.Application.UI.Help.Feedback.Actions.PrimaryScreenScreenshotAttachmentAction : AddAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
[ActionAttribute("SamplingPerformanceSnapshotAttachmentProvider", "JetBrains.Application.Resources.Strings", "SamplingPerformanceSnapshotAttachmentProvider_ProviderName")]
public class JetBrains.Application.UI.Help.Feedback.Actions.SamplingPerformanceSnapshotAttachmentAction : AddProfileAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
}
[ActionAttribute("TimelinePerformanceSnapshotAttachmentProvider", "JetBrains.Application.Resources.Strings", "TimelinePerformanceSnapshotAttachmentProvider_ProviderName")]
public class JetBrains.Application.UI.Help.Feedback.Actions.TimelinePerformanceSnapshotAttachmentAction : AddProfileAttachmentAction {
    protected string ProviderId { get; }
    protected virtual string get_ProviderId();
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.UI.Help.Feedback.AnonymousAccount : object {
}
[ActionGroupAttribute("OptionalAttachmentsManager.AvailableProviders", "1", "16")]
public class JetBrains.Application.UI.Help.Feedback.AvailableProvidersActionGroup : object {
    public static string GroupId;
}
[ReportAttachmentPartAttribute("16")]
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.AllScreensScreenshotAttachmentProvider : FileAttachmentProviderBase {
    [CompilerGeneratedAttribute]
private IScreenshotHelperComponent <screenshotHelper>P;
    public static string ProviderId;
    public static string ProviderName;
    public string Id { get; }
    public string Name { get; }
    public bool HideWindowDuringAttach { get; }
    public AllScreensScreenshotAttachmentProvider(IScreenshotHelperComponent screenshotHelper);
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
    public virtual bool IsAvailable();
    public virtual bool get_HideWindowDuringAttach();
}
[ReportAttachmentPartAttribute("0")]
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.FileAttachmentProvider : FileAttachmentProviderBase {
    private ICommonFileDialogs myFileDialog;
    public static string ProviderId;
    public static string ProviderName;
    public string Id { get; }
    public string Name { get; }
    public FileAttachmentProvider(ICommonFileDialogs fileDialog);
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
}
public interface JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.IAdditionalLogFilesProvider {
    public abstract virtual IEnumerable`1<FileSystemPath> GetAdditionalLogFiles();
}
public interface JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.IScreenshotHelperComponent {
    public int ScreenCount { get; }
    public abstract virtual void CaptureScreenshotPrimaryScreen(FileSystemPath path);
    public abstract virtual void CaptureScreenshotAllScreens(FileSystemPath path);
    public abstract virtual int get_ScreenCount();
}
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.LogAttachment : ReportAttachmentBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IAdditionalLogFilesProvider> <logFilesProviders>P;
    private static ILogger ourLogger;
    private FileSystemPath myLogsTmpDir;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public bool IsOpenLocationSupported { get; }
    public bool IsOpenSupported { get; }
    public LogAttachment(IEnumerable`1<IAdditionalLogFilesProvider> logFilesProviders, string name);
    private static LogAttachment();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual bool get_IsOpenLocationSupported();
    public virtual bool get_IsOpenSupported();
    public virtual void OpenLocation();
    public virtual void Open();
    public virtual void Attach(IReport report, IProgressIndicator progressIndicator);
    private IReadOnlyList`1<FileSystemPath> PrepareLogs();
    [CompilerGeneratedAttribute]
private FileSystemPath <PrepareLogs>b__14_0(FileSystemPath logFile);
}
[ReportAttachmentPartAttribute("0")]
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.LogsAttachmentProvider : object {
    private IEnumerable`1<IAdditionalLogFilesProvider> myAdditionalLogFilesProviders;
    public static string ProviderId;
    private static string IdXmlAttribute;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public string Id { get; }
    public bool HideWindowDuringAttach { get; }
    public LogsAttachmentProvider(IImmutableList`1<IAdditionalLogFilesProvider> additionalLogFilesProviders, IApplicationHost host);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public sealed virtual string get_Id();
    public sealed virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    public sealed virtual IReportAttachment RestoreFrom(XmlElement element);
    public sealed virtual bool IsAvailable();
    public sealed virtual bool get_HideWindowDuringAttach();
}
[ReportAttachmentPartAttribute("16")]
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.PrimaryScreenScreenshotAttachmentProvider : FileAttachmentProviderBase {
    [CompilerGeneratedAttribute]
private IScreenshotHelperComponent <screenshotHelper>P;
    public static string ProviderId;
    public string Id { get; }
    public string Name { get; }
    public PrimaryScreenScreenshotAttachmentProvider(IScreenshotHelperComponent screenshotHelper);
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
    public virtual bool IsAvailable();
}
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.ScreenshotAttachment : FileAttachmentBase {
    public string Prefix { get; }
    public ScreenshotAttachment(FileSystemPath localFilePath, string providerId);
    public virtual string get_Prefix();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.StubScreenshotHelperComponent : object {
    public int ScreenCount { get; }
    public sealed virtual int get_ScreenCount();
    public sealed virtual void CaptureScreenshotPrimaryScreen(FileSystemPath path);
    public sealed virtual void CaptureScreenshotAllScreens(FileSystemPath path);
}
[ZoneMarkerAttribute]
public class JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.ZoneMarker : object {
}
public class JetBrains.Application.UI.Help.Feedback.EMailAccount : object {
}
public class JetBrains.Application.UI.Help.Feedback.ExceptionEmbeddedFileAttachment : FileAttachmentBase {
    public string Prefix { get; }
    public ExceptionEmbeddedFileAttachment(FileSystemPath localFilePath);
    public virtual string get_Prefix();
}
public class JetBrains.Application.UI.Help.Feedback.FeedbackPartAttribute : ComponentAttribute {
    public FeedbackPartAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Help.Feedback.FeedbackPartsContainer : object {
    private ComponentContainer myComponentContainer;
    public FeedbackPartsContainer(NestedComponentContainerAllByPartAttribute`2<FeedbackPartAttribute, ShellPartCatalogSet> nestedComponentContainer);
    public IEnumerable`1<T> GetParts();
}
public static class JetBrains.Application.UI.Help.Feedback.FeedbackUtil : object {
    public static void AttachRequired(ReportAttachmentPartsContainer reportAttachmentParts, IReport report);
}
public abstract class JetBrains.Application.UI.Help.Feedback.FileAttachmentBase : ReportAttachmentBase {
    [CompilerGeneratedAttribute]
private FileSystemPath <localFilePath>P;
    public bool CanBeDeleted { get; }
    public IconId Image { get; }
    public string Prefix { get; }
    public bool IsOpenLocationSupported { get; }
    public bool IsOpenSupported { get; }
    public FileSystemPath LocalFilePath { get; }
    public string Name { get; }
    protected FileAttachmentBase(FileSystemPath localFilePath, string providerName);
    public virtual bool get_CanBeDeleted();
    public virtual IconId get_Image();
    public abstract virtual string get_Prefix();
    public virtual bool get_IsOpenLocationSupported();
    public virtual bool get_IsOpenSupported();
    public FileSystemPath get_LocalFilePath();
    public virtual void OpenLocation();
    public virtual void Open();
    public virtual string get_Name();
    public virtual void Attach(IReport report, IProgressIndicator progressIndicator);
}
public class JetBrains.Application.UI.Help.Feedback.FileAttachmentDisposable : object {
    [CompilerGeneratedAttribute]
private FileAttachmentBase <fileAttachment>P;
    [CompilerGeneratedAttribute]
private Func`1<bool> <fShouldDisposeAttachment>P;
    public FileAttachmentDisposable(FileAttachmentBase fileAttachment, Func`1<bool> fShouldDisposeAttachment);
    public sealed virtual void Dispose();
}
public abstract class JetBrains.Application.UI.Help.Feedback.FileAttachmentProviderBase : object {
    public string Name { get; }
    public string Id { get; }
    public bool HideWindowDuringAttach { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public sealed virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    public sealed virtual IReportAttachment RestoreFrom(XmlElement element);
    protected abstract virtual IReportAttachment RestoreFromPath(FileSystemPath path);
    public abstract virtual string get_Id();
    public virtual bool IsAvailable();
    public virtual bool get_HideWindowDuringAttach();
}
public interface JetBrains.Application.UI.Help.Feedback.IAccount {
}
public interface JetBrains.Application.UI.Help.Feedback.IAddedByDefaultAttachmentProvider {
}
public interface JetBrains.Application.UI.Help.Feedback.IEnvironmentInfoAttachment {
}
public interface JetBrains.Application.UI.Help.Feedback.IEnvironmentInfoAttachmentProvider {
}
public interface JetBrains.Application.UI.Help.Feedback.IOptionalReportAttachmentProvider {
    public string Id { get; }
    public bool HideWindowDuringAttach { get; }
    public abstract virtual string get_Id();
    public abstract virtual bool IsAvailable();
    public abstract virtual bool get_HideWindowDuringAttach();
}
public interface JetBrains.Application.UI.Help.Feedback.IReportAttachment {
    public string Id { get; }
    public string Name { get; }
    public string ProviderId { get; }
    public IconId Image { get; }
    public bool IsOpenLocationSupported { get; }
    public bool IsOpenSupported { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_ProviderId();
    public abstract virtual IconId get_Image();
    public abstract virtual void Attach(IReport report, IProgressIndicator progressIndicator);
    public abstract virtual bool get_IsOpenLocationSupported();
    public abstract virtual bool get_IsOpenSupported();
    public abstract virtual void OpenLocation();
    public abstract virtual void Open();
}
public interface JetBrains.Application.UI.Help.Feedback.IReportAttachmentProvider {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    public abstract virtual void SaveTo(IReportAttachment attachment, XmlElement element, XmlDocument document);
    [CanBeNullAttribute]
public abstract virtual IReportAttachment RestoreFrom(XmlElement element);
}
public interface JetBrains.Application.UI.Help.Feedback.IRequiredReportAttachmentProvider {
}
public class JetBrains.Application.UI.Help.Feedback.JetBrainsAccount : AccountBase {
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Help.Feedback.OptionalAttachmentsManager : object {
    private Lazy`1<Dictionary`2<string, IOptionalReportAttachmentProvider>> myProviders;
    public OptionalAttachmentsManager(ReportAttachmentPartsContainer attachmentParts);
    public IOptionalReportAttachmentProvider GetProvider(string id);
}
public class JetBrains.Application.UI.Help.Feedback.PerformanceSnapshotAttachment : FileAttachmentBase {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Image>k__BackingField;
    public string Prefix { get; }
    public IconId Image { get; }
    public PerformanceSnapshotAttachment(FileSystemPath localFilePath, string providerId, Nullable`1<SnapshotType> type);
    [CompilerGeneratedAttribute]
public virtual string get_Prefix();
    [CompilerGeneratedAttribute]
public virtual IconId get_Image();
}
public abstract class JetBrains.Application.UI.Help.Feedback.ReportAttachmentBase : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    public string Id { get; }
    public IconId Image { get; }
    public string ProviderId { get; }
    public bool IsOpenLocationSupported { get; }
    public bool IsOpenSupported { get; }
    public string Name { get; }
    protected ReportAttachmentBase(string providerId);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public virtual IconId get_Image();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderId();
    public sealed virtual bool Equals(ReportAttachmentBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool get_IsOpenLocationSupported();
    public virtual bool get_IsOpenSupported();
    public virtual void OpenLocation();
    public virtual void Open();
    public abstract virtual string get_Name();
    public abstract virtual void Attach(IReport report, IProgressIndicator progressIndicator);
}
public class JetBrains.Application.UI.Help.Feedback.ReportAttachmentPartAttribute : ComponentAttribute {
    public ReportAttachmentPartAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Help.Feedback.ReportAttachmentPartsContainer : object {
    private ComponentContainer myComponentContainer;
    public ReportAttachmentPartsContainer(NestedComponentContainerAllByPartAttribute`2<ReportAttachmentPartAttribute, ShellPartCatalogSet> nestedComponentContainer);
    public IEnumerable`1<T> GetParts();
    public T GetComponent();
}
[ReportAttachmentPartAttribute("16")]
public class JetBrains.Application.UI.Help.Feedback.SnapshotAttachmentProviders.MemorySnapshotAttachmentProvider : FileAttachmentProviderBase {
    private SelfProfilingMutex myMutex;
    private IThreading myThreading;
    public static string ProvderId;
    private SelfProfilingTool myProfilingTool;
    public string Name { get; }
    public string Id { get; }
    public MemorySnapshotAttachmentProvider(Lifetime lifetime, SnapshotFolderProvider snapshotFolderProvider, SelfProfilingMutex mutex, IThreading threading);
    public virtual string get_Name();
    public virtual string get_Id();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.Help.Feedback.SnapshotAttachmentProviders.MemorySnapshotAttachmentProvider/<GetSnapshotAsync>d__10")]
private void GetSnapshotAsync(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
    public virtual bool IsAvailable();
}
[ReportAttachmentPartAttribute("16")]
public class JetBrains.Application.UI.Help.Feedback.SnapshotAttachmentProviders.SamplingPerformanceSnapshotAttachmentProvider : SnapshotAttachmentProvider {
    public static string ProvderId;
    public string Name { get; }
    public string Id { get; }
    protected SnapshotType SnapshotType { get; }
    public SamplingPerformanceSnapshotAttachmentProvider(IThreading threading, Lifetime lifetime, SnapshotFolderProvider snapshotFolderProvider, SelfProfilingMutex mutex);
    public virtual string get_Name();
    public virtual string get_Id();
    protected virtual SnapshotType get_SnapshotType();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Help.Feedback.SnapshotAttachmentProviders.SelfProfilingMutex : object {
    private int myIsFree;
    public bool IsAvailable { get; }
    public bool get_IsAvailable();
    public bool TryAcquire(IDisposable& disposable);
    [CompilerGeneratedAttribute]
private void <TryAcquire>b__3_0();
}
public abstract class JetBrains.Application.UI.Help.Feedback.SnapshotAttachmentProviders.SnapshotAttachmentProvider : FileAttachmentProviderBase {
    private SelfProfilingTool myProfilingTool;
    private IThreading myThreading;
    private SelfProfilingMutex myMutex;
    protected SnapshotType SnapshotType { get; }
    protected Action`2<ILogger, Assembly> OnAttached { get; }
    protected SnapshotAttachmentProvider(Lifetime lifetime, IThreading threading, SnapshotFolderProvider snapshotFolderProvider, SelfProfilingMutex mutex);
    protected abstract virtual SnapshotType get_SnapshotType();
    protected virtual Action`2<ILogger, Assembly> get_OnAttached();
    public virtual IDisposable BeginGetAttachment(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    private void AttachAndWaitOnBackground(Action`1<IReportAttachment> onAttachmentAvailable, IProgressIndicator progressIndicator);
    protected virtual IReportAttachment RestoreFromPath(FileSystemPath path);
    public virtual bool IsAvailable();
}
[ReportAttachmentPartAttribute("16")]
public class JetBrains.Application.UI.Help.Feedback.SnapshotAttachmentProviders.TimelinePerformanceSnapshotAttachmentProvider : SnapshotAttachmentProvider {
    public static string ProvderId;
    public string Name { get; }
    public string Id { get; }
    protected SnapshotType SnapshotType { get; }
    public TimelinePerformanceSnapshotAttachmentProvider(IThreading threading, Lifetime lifetime, SnapshotFolderProvider snapshotFolderProvider, SelfProfilingMutex mutex);
    public virtual string get_Name();
    public virtual string get_Id();
    protected virtual SnapshotType get_SnapshotType();
}
public class JetBrains.Application.UI.Help.Feedback.UserIdentificatorPartAttribute : ComponentAttribute {
    public UserIdentificatorPartAttribute(Instantiation instantiation);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Help.Feedback.UserIdentifierPartsContainer : object {
    [CompilerGeneratedAttribute]
private UserIdentifierStorage <UserIdentifierStorage>k__BackingField;
    private ComponentContainer myComponentContainer;
    [NotNullAttribute]
public UserIdentifierStorage UserIdentifierStorage { get; }
    public UserIdentifierPartsContainer(NestedComponentContainerAllByPartAttribute`2<UserIdentificatorPartAttribute, ShellPartCatalogSet> nestedComponentContainer, UserIdentifierStorage userIdentifierStorage);
    [CompilerGeneratedAttribute]
public UserIdentifierStorage get_UserIdentifierStorage();
    public IEnumerable`1<T> GetParts();
}
public class JetBrains.Application.UI.Help.Feedback.UserNameAccount : object {
}
public class JetBrains.Application.UI.Help.Feedback.YouTrackAccount : AccountBase {
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Help.HelpSystem : object {
    private IEnumerable`1<IShowHelp> myShowHelps;
    public HelpSystem(IEnumerable`1<IShowHelp> showhelps);
    public virtual void ShowProductHelp(HelpId helpId, string preferredProduct);
    public virtual void ShowMsdnHelp(string keyword);
    public static void TryShowHelpOrFallbackToProductHelp(HelpSystem self, string keyword, string preferredProduct);
    public static Nullable`1<HelpId> TryGetHelpTopicByString(string keyword);
}
public interface JetBrains.Application.UI.Help.IShowHelp {
    public double Priority { get; }
    public abstract virtual double get_Priority();
    public abstract virtual bool ShowMsdnHelp(string keyword);
    public abstract virtual bool ShowProductHelp(HelpId helpId, string preferredProduct);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Help.ShowOnlineHelpHandler : object {
    [CanBeNullAttribute]
private JetBrainsResourceMappingAccessor myResourceMappingAccessor;
    private OpensUri myOpensUri;
    private IApplicationHost myProduct;
    private ShortcutScheme myCurrentShortcutScheme;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public bool IsDisabled { get; public set; }
    private double JetBrains.Application.UI.Help.IShowHelp.Priority { get; }
    public ShowOnlineHelpHandler(IApplicationHost product, OpensUri opensUri, JetBrainsResourceMappingAccessor resourceMappingAccessor);
    public void SetCurrentShortcutScheme(ShortcutScheme scheme);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_IsDisabled(bool value);
    private sealed virtual override bool JetBrains.Application.UI.Help.IShowHelp.ShowMsdnHelp(string keyword);
    public sealed virtual bool ShowProductHelp(HelpId helpId, string preferredProduct);
    private sealed virtual override double JetBrains.Application.UI.Help.IShowHelp.get_Priority();
}
public abstract class JetBrains.Application.UI.Icons.Animation.AnimatedIconId : IconId {
}
public class JetBrains.Application.UI.Icons.ColorIcons.ColorIconId : IconId {
    public JetRgbaColor Color;
    public ColorIconId(JetRgbaColor color);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons : object {
}
public abstract class JetBrains.Application.UI.Icons.CompiledIcons.AnyCompiledIconClass : object {
    private static Type TypeofCompiledIconClass;
    private static Type TypeofCompiledIconCsClass;
    private static AnyCompiledIconClass();
    public static IconId TryGetAnyCompiledIconClassId(Type type, OnError onerror);
    public static IconId TryGetAnyCompiledIconClassId(PartCatalogType pctype, OnError onerror);
}
public class JetBrains.Application.UI.Icons.CompiledIcons.CompiledIconPackIdentity : object {
    private static Func`2<string, CompiledIconPackIdentity> myFCreator;
    private static ConcurrentDictionary`2<string, CompiledIconPackIdentity> myMapInterner;
    public string Value;
    private CompiledIconPackIdentity(string value);
    private static CompiledIconPackIdentity();
    [NotNullAttribute]
public static CompiledIconPackIdentity Create(string value);
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.ComposedIcons.CompositeIconId : IconId {
    public IconId[] Parts;
    internal CompositeIconId(IconId[] parts);
    [NotNullAttribute]
public static IconId Compose(IconId part0, IconId part1);
    [NotNullAttribute]
public static IconId Compose(IconId[] parts);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.Emitters.NameNormalizer : object {
    private Dictionary`2<string, string> myMapNameToNormalization;
    private Dictionary`2<string, List`1<string>> myMapNormalizedToOrigins;
    public NameNormalizer(IEnumerable`1<string> expected);
    [NotNullAttribute]
public NameNormalizer AssertNoConflicts();
    [NotNullAttribute]
public string Denormalize(string normalized);
    [NotNullAttribute]
public IEnumerable`1<string> GetNormalizedNames();
    [NotNullAttribute]
public string Normalize(string name);
}
public class JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class JetBrains.Application.UI.Icons.GenericIconThemeAspect : object {
    public static IconThemeAspect Color;
    public static IconThemeAspect FluentDark;
    public static IconThemeAspect FluentLight;
    public static IconThemeAspect Gray;
    public static IconThemeAspect GrayDark;
    private static GenericIconThemeAspect();
}
public class JetBrains.Application.UI.Icons.IconTheme : object {
    public static IconTheme Default;
    [NotNullAttribute]
public IconThemeAspect[] Aspects;
    private IconTheme(IconThemeAspect[] aspects);
    private static IconTheme();
    [NotNullAttribute]
public static IconTheme FromAspectsUnsorted(IEnumerable`1<IconThemeAspect> aspects1);
    [NotNullAttribute]
public static IconTheme FromSingleAspect(IconThemeAspect aspect);
    public static bool op_Equality(IconTheme left, IconTheme right);
    public static bool op_Inequality(IconTheme left, IconTheme right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(IconTheme other);
}
public class JetBrains.Application.UI.Icons.IconThemeAspect : object {
    [NotNullAttribute]
public string AspectName;
    public double AspectPriority;
    [NotNullAttribute]
public string AspectValue;
    public IconThemeAspect(string aspectName, double aspectPriority, string aspectValue);
    public static bool op_Equality(IconThemeAspect left, IconThemeAspect right);
    public static bool op_Inequality(IconThemeAspect left, IconThemeAspect right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(IconThemeAspect other);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Icons.IconThemeAspectEx : object {
    [ExtensionAttribute]
public static IconThemeAspect Demoted(IconThemeAspect aspect, int times);
}
[ObsoleteAttribute("This can only handle static boot-time DPI. To handle dynamic DPI correctly, use the DpiResolution type obtained specifically for your control or screen area.")]
public enum JetBrains.Application.UI.Icons.RasterizationResolution : Enum {
    public int value__;
    public static RasterizationResolution DeviceIndependent96dpi;
    [ObsoleteAttribute("This can only handle static boot-time DPI. To handle dynamic DPI correctly, use the DpiResolution type obtained specifically for your control or screen area.")]
public static RasterizationResolution ScreenResolution;
    public static RasterizationResolution NotSure;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Icons.RasterizationResolutionEx : object {
    [ExtensionAttribute]
[ObsoleteAttribute("This can only handle static boot-time DPI. To handle dynamic DPI correctly, use the DpiResolution type obtained specifically for your control or screen area.")]
public static DpiResolution ToDpi(RasterizationResolution thіs);
}
public class JetBrains.Application.UI.Icons.Settings.IconThemeFullSelection : ValueType {
    [CompilerGeneratedAttribute]
private IconThemeSelection <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private IconThemeSelectionExtensionForFluentDesign <FluentExtension>k__BackingField;
    public IconThemeSelection Base { get; public set; }
    public IconThemeSelectionExtensionForFluentDesign FluentExtension { get; public set; }
    public IconThemeFullSelection(IconThemeSelection Base, IconThemeSelectionExtensionForFluentDesign FluentExtension);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IconThemeSelection get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(IconThemeSelection value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IconThemeSelectionExtensionForFluentDesign get_FluentExtension();
    [CompilerGeneratedAttribute]
public void set_FluentExtension(IconThemeSelectionExtensionForFluentDesign value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(IconThemeFullSelection left, IconThemeFullSelection right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(IconThemeFullSelection left, IconThemeFullSelection right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(IconThemeFullSelection other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(IconThemeSelection& Base, IconThemeSelectionExtensionForFluentDesign& FluentExtension);
}
public enum JetBrains.Application.UI.Icons.Settings.IconThemeSelection : Enum {
    public int value__;
    public static IconThemeSelection Automatic;
    public static IconThemeSelection Color;
    public static IconThemeSelection Gray;
    public static IconThemeSelection GrayDark;
}
public enum JetBrains.Application.UI.Icons.Settings.IconThemeSelectionExtensionForFluentDesign : Enum {
    public int value__;
    public static IconThemeSelectionExtensionForFluentDesign Automatic;
    public static IconThemeSelectionExtensionForFluentDesign Never;
    public static IconThemeSelectionExtensionForFluentDesign Always;
}
public interface JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample {
    public IEnumerable`1<IconId> SampleIcons { get; }
    public abstract virtual IEnumerable`1<IconId> get_SampleIcons();
}
public interface JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle {
    [NotNullAttribute]
public IProperty`1<IconThemeAspect[]> SuggestedIconTheme { get; }
    public abstract virtual IProperty`1<IconThemeAspect[]> get_SuggestedIconTheme();
}
public static class JetBrains.Application.UI.Icons.Shell.ShellFileIcon : object {
    [NotNullAttribute]
public static IconId Create(FileSystemPathBase`3<T, TFile, TDir> path, IconSize iconsize);
    [NotNullAttribute]
public static IconId Create(string extension, IconSize iconsize);
}
public class JetBrains.Application.UI.Icons.Shell.ShellFileIconId : IconId {
    public string ExtensionWithDot;
    public IconSize Size;
    internal ShellFileIconId(string extensionWithDot, IconSize size);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons : object {
}
public class JetBrains.Application.UI.Icons.ThemedIconAutomation : AAutomation {
    [NotNullAttribute]
public IconId IconId;
    public ThemedIconAutomation(IconId iconId);
    [NotNullAttribute]
public static ThemedIconAutomation Create();
}
public static class JetBrains.Application.UI.Icons.ThemedIconConventions : object {
    public static string DefaultThemeHint;
    public static String[] ThemedIconsPackStorageOptionalSuffixes;
    private static ThemedIconConventions();
    [NotNullAttribute]
public static string MakeIconPackIdentifier(string sDirectoryName);
}
public class JetBrains.Application.UI.Icons.ToolWindowLocationIcons.ToolWindowLocationIconId : IconId {
    public static ToolWindowLocationIconId FindId;
    public static ToolWindowLocationIconId HierarchyId;
    public static ToolWindowLocationIconId TodoViewId;
    public static ToolWindowLocationIconId DependenciesId;
    public static ToolWindowLocationIconId VcsId;
    public static ToolWindowLocationIconId CommitId;
    public static ToolWindowLocationIconId ModulesDependenciesId;
    public static ToolWindowLocationIconId DuplicatesId;
    public static ToolWindowLocationIconId ExtractMethodId;
    public static ToolWindowLocationIconId DocumentationId;
    public static ToolWindowLocationIconId TasksId;
    public static ToolWindowLocationIconId DatabaseViewId;
    public static ToolWindowLocationIconId PreviewId;
    public static ToolWindowLocationIconId RunDashboardId;
    public static ToolWindowLocationIconId ServicesId;
    public static ToolWindowLocationIconId EndPointsId;
    [CompilerGeneratedAttribute]
private string <ToolWindowId>k__BackingField;
    public string ToolWindowId { get; }
    private ToolWindowLocationIconId(string toolWindowId);
    private static ToolWindowLocationIconId();
    [CompilerGeneratedAttribute]
public string get_ToolWindowId();
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class JetBrains.Application.UI.License.BroadcastUtil : object {
    public static string UNKNOWN_USER;
    public static Byte[] MakeBytes(int code, String[] strings);
    public static IList`1<string> DecodeStrings(int code, Byte[] data);
    public static void CopyArray(Byte[] dst, Int32& pos, Byte[] data);
    public static Byte[] IntToBytes(int i);
    public static int BytesToInt(Byte[] data, int pos);
    public static string GetUserName();
}
public class JetBrains.Application.UI.License.FreeEvaluationInfo : object {
    private static char SEPARATOR;
    public static DateTime INSTALLER_TIME;
    public static string ROOT_GUID;
    public static string ROOT_KEY;
    public DateTime TrialStart;
    public bool IsFeedbackRequested;
    public DateTime RecentExipartionNotification;
    public bool IsNotStarted { get; }
    private FreeEvaluationInfo(DateTime trialStart, bool isFeedbackRequested, DateTime recentExipartionNotification);
    private static FreeEvaluationInfo();
    public bool get_IsNotStarted();
    [CanBeNullAttribute]
public static FreeEvaluationInfo CreateInfo(string registryValue);
    protected string GetRegistryString();
    [CanBeNullAttribute]
public static FreeEvaluationInfo GetFreeTrialInfo(string productGuid, string rootKeyName);
    public static void SetFreeTrialInfo(string productGuid, FreeEvaluationInfo info, string rootKeyName);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.License.FreeEvaluationInfoEx : object {
    [ExtensionAttribute]
public static int GetUsedDaysCount(FreeEvaluationInfo info);
    [ExtensionAttribute]
public static int GetDaysLeftCount(FreeEvaluationInfo info, int freeTrialInfoPeriod);
    [ExtensionAttribute]
public static bool IsValid(FreeEvaluationInfo info);
}
public class JetBrains.Application.UI.License.License2.AtLeastOneAllowedLicensedEntityRequired : object {
    public sealed virtual bool DoShowLicenseDialog(LicenseViewModel model);
    private static bool ThereAreNoAllowedEntities(LicenseViewModel model);
    public sealed virtual bool DoShutdownShell(LicenseViewModel model);
}
public abstract class JetBrains.Application.UI.License.License2.Common.NotifyPropertyChanged : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CanBeNullAttribute]
protected ILogger Logger { get; }
    protected NotifyPropertyChanged(ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
public interface JetBrains.Application.UI.License.License2.Conflict.ILicenseConflictChecker {
    public ICollectionEvents`1<Byte[]> DataToBroadcast { get; }
    public abstract virtual ICollectionEvents`1<Byte[]> get_DataToBroadcast();
    public abstract virtual LicenseConflictDescriptor IsConflictingLicenseReceived(Byte[] data);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.License.License2.Conflict.JetBrainsAccountLicenseConflictChecker : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ILicense2CheckComponent myCheckComponent;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<Byte[]> <DataToBroadcast>k__BackingField;
    private IReadOnlyCollection`1<IAssetData> myAssetDatas;
    public ICollectionEvents`1<Byte[]> DataToBroadcast { get; }
    private byte ProductId { get; }
    public JetBrainsAccountLicenseConflictChecker(Lifetime lifetime, ILogger logger, ILicense2CheckComponent checkComponent, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<Byte[]> get_DataToBroadcast();
    private void RefreshUserLicenses(JBAcountLicenseViewSubmodel model);
    private byte get_ProductId();
    private Byte[] TryCreateBytesToBroadcast(string jbAccount, IAssetData assetData);
    public sealed virtual LicenseConflictDescriptor IsConflictingLicenseReceived(Byte[] data);
}
public class JetBrains.Application.UI.License.License2.Conflict.LicenseConflictDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <TurnLicenseOffAction>k__BackingField;
    public string Description { get; }
    private Action TurnLicenseOffAction { get; }
    public LicenseConflictDescriptor(string description, Action turnLicenseOffAction);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private Action get_TurnLicenseOffAction();
    public void TurnLicenseOff();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.License.License2.Conflict.UserLicenseConflictChecker : object {
    private Lifetime myLifetime;
    private ILogger myLogger;
    private ILicense2CheckComponent myCheckComponent;
    private IThreading myThreading;
    private HashSet`1<UserLicense> myUserLicenses;
    private SequentialLifetimes myRefreshLifetimes;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<Byte[]> <DataToBroadcast>k__BackingField;
    public ICollectionEvents`1<Byte[]> DataToBroadcast { get; }
    private byte ProductId { get; }
    public UserLicenseConflictChecker(Lifetime lifetime, ILogger logger, ILicense2CheckComponent checkComponent, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<Byte[]> get_DataToBroadcast();
    private void RefreshUserLicenses(LicenseViewModel model);
    private byte get_ProductId();
    private Byte[] CreateBytesFromUserLicense(UserLicense userLicense);
    [CanBeNullAttribute]
protected UserLicense GetUserLicense(Byte[] data, String& windowsUserName);
    public sealed virtual LicenseConflictDescriptor IsConflictingLicenseReceived(Byte[] data);
}
public interface JetBrains.Application.UI.License.License2.ILicenseCheckPolicy {
    public abstract virtual bool DoShowLicenseDialog(LicenseViewModel model);
    public abstract virtual bool DoShutdownShell(LicenseViewModel model);
}
public enum JetBrains.Application.UI.License.License2.ManageWindow.ItemState : Enum {
    public int value__;
    public static ItemState EDITABLE_INVALID;
    public static ItemState EDITABLE_VALID;
    public static ItemState ADDED;
    public static ItemState ADDED_CHANGED;
    public static ItemState SUSPENDED;
    public static ItemState REMOVED;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.License.License2.ManageWindow.ItemStateEx : object {
    [ExtensionAttribute]
public static bool IsEditable(ItemState itemState);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.License.License2.RegionNotSelected : object {
    [CompilerGeneratedAttribute]
private CurrentRegion <currentRegion>P;
    public RegionNotSelected(CurrentRegion currentRegion);
    public sealed virtual bool DoShowLicenseDialog(LicenseViewModel model);
    public sealed virtual bool DoShutdownShell(LicenseViewModel model);
}
internal static class JetBrains.Application.UI.License.LicenseServerMessage : object {
    public static string NO_LICENSE_AVAILABLE;
    public static string LICENSE_USED;
    public static string LICENSE_USED_OLD;
    public static string LICENSE_UNUSED;
    public static string LICENSE_REQUEST;
    public static string LICENSE_POLL;
    public static string SERVER_POLL;
    public static string SERVER_RESPONSE;
    public static string LICENSE;
    public static string LICENSE_OLD;
    public static string ID;
    public static string TAG_OLD;
    public static string LICENSE_RESPONSE;
    public static string NAME;
    public static string NAME_OLD;
    public static string KEY;
    public static string KEY_OLD;
    public static string VERSION;
    public static string APP_VERSION;
    public static string PRODUCT_ID;
    public static int PROTOCOL_VERSION;
    private static LicenseServerMessage();
    public static Byte[] CreateLicenseRequest(string id, int productId, int appVersion);
    private static XmlElement CreateRootElement(string elementName, string id);
    private static Byte[] CreateBytes(XmlElement element);
    [CanBeNullAttribute]
private static XmlDocument DecodeReceivedBytes(Byte[] receivedBytes);
    public static bool DecodeLicense(Byte[] receivedBytes, String& userName, String& licenseKey);
    public static Byte[] CreateLicenseUsedMessage(string id, LicenseData licenseData);
    public static Byte[] CreateLicenseUnusedMessage(string id, LicenseData licenseData);
    public static bool DecodeLicensePoll(Byte[] receivedBytes);
}
public class JetBrains.Application.UI.License.ProductEditionValue : object {
    [CanBeNullAttribute]
private ProductEdition myEdition;
    private bool myLicenseCheckPassed;
    public static ProductEditionValue LicenseCheckFailed;
    public static ProductEditionValue LicensedNoEditions;
    [CanBeNullAttribute]
public ProductEdition Edition { get; }
    private ProductEditionValue(ProductEdition edition, bool licenseCheckPassed);
    private static ProductEditionValue();
    public ProductEdition get_Edition();
    public static ProductEditionValue CreateLicensedValue(ProductEdition edition);
    public bool Equals(ProductEditionValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.UI.MsoComponentManager.DummyMsoComponentManager : object {
    private static int True;
    private static int False;
    private Dictionary`2<IntPtr, ComponentInfo> myComponents;
    private UInt32 myNextComponentId;
    private IMsoComponent myActiveComponent;
    private IMsoComponent myTrackingComponent;
    private UInt32 myCurrentState;
    [NotNullAttribute]
private ComponentInfo GetComponentInfo(IntPtr id);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.QueryService(Guid& guidService, Guid& iid, Object& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wParam, IntPtr lParam);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRegisterComponent(IMsoComponent component, MSOCRINFO[] pcrinfo, IntPtr& dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRevokeComponent(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FUpdateComponentRegistration(IntPtr dwComponentId, MSOCRINFO[] pcrinfo);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentActivate(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FSetTrackingComponent(IntPtr dwComponentId, int fTrack);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.OnComponentEnterState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentExitState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FInState(UInt32 uStateId, IntPtr pvoid);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FContinueIdle();
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentId, int uReason, Void* pvLoopData);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FCreateSubComponentManager(object punkOuter, object punkServProv, Guid& riid, IntPtr& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetParentComponentManager(Object& ppicm);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetActiveComponent(UInt32 dwgac, Object[] ppic, MSOCRINFO[] pcrinfo, UInt32 dwReserved);
}
public static class JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader : object {
    private static LocalReentrancyGuard ourReentrancyGuard;
    private static Guid SID_MsoComponentManager;
    private static Guid IID_IMsoComponentManager;
    private static string JetComponentManagerDllName;
    private static Lazy`1<IJetComponentManagerRegistrar> ourRegistrar;
    private static JetMsoComponentManagerLoader();
    private static int CoRegisterMessageFilter(IntPtr newFilter, IntPtr& oldMsgFilter);
    public static Action InstallNativeJetComponentManager();
    [CanBeNullAttribute]
public static IMsoComponentManager GetNativeComponentManager();
    [NotNullAttribute]
public static IMsoComponent CreateComponentWrapper(IMsoComponent managedComponent);
    private static IntPtr TryGetInstalledComponentManagerPtr();
}
public class JetBrains.Application.UI.MsoComponentManager.MsoComponentBase : object {
    [CanBeNullAttribute]
private ILogger myLogger;
    protected MsoComponentBase(ILogger logger);
    public virtual int FPreTranslateMessage(MSG[] msg);
    public virtual void OnEnterState(UInt32 uStateId, int fEnter);
    public virtual void OnAppActivate(int fActive, UInt32 dwOtherThreadId);
    public virtual void OnLoseActivation();
    public virtual void OnActivationChange(object component, int fSameComponent, MSOCRINFO* pcrinfo, int fHostIsActivating, MSOCHOSTINFO* pchostinfo, UInt32 dwReserved);
    public virtual int FDoIdle(UInt32 grfidlef);
    public virtual int FContinueMessageLoop(UInt32 uReason, Void* pvLoopData, MSG[] pMsgPeeked);
    public virtual int FQueryTerminate(int fPromptUser);
    public virtual void Terminate();
    public virtual Void* HwndGetWindow(UInt32 dwWhich, UInt32 dwReserved);
    public virtual int FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wParam, IntPtr lParam);
}
public class JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy : MarshalByRefObject {
    private static int True;
    private static int False;
    private JetDispatcher myDispatcher;
    private IMsoComponentManager myNativeComponentManager;
    private IMsoComponent myNativeComponent;
    private IntPtr myComponentId;
    private Dictionary`2<IntPtr, IMsoComponent> myComponents;
    [CanBeNullAttribute]
private IMsoComponent myActiveComponent;
    [CanBeNullAttribute]
private IMsoComponent myTrackingComponent;
    private UInt32 myNextComponentId;
    private Stack`1<IProperty`1<bool>> myMessageLoops;
    private bool IsRegistered { get; }
    public NativeComponentManagerProxy(Lifetime lifetime, IMsoComponentManager nativeComponentManager, JetDispatcher dispatcher);
    public void PushMessageLoop(int uReason, IProperty`1<bool> continueLoop);
    [CanBeNullAttribute]
private IProperty`1<bool> TryGetContinueLoopProperty(Void* pvLoopData);
    private bool get_IsRegistered();
    private bool EnsureRegistered();
    private void ForEachComponent(Action`1<IMsoComponent> action);
    public virtual object InitializeLifetimeService();
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.QueryService(Guid& guidService, Guid& iid, Object& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FDebugMessage(IntPtr hInst, UInt32 msg, IntPtr wparam, IntPtr lparam);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRegisterComponent(IMsoComponent component, MSOCRINFO[] pcrinfo, IntPtr& dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FRevokeComponent(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FUpdateComponentRegistration(IntPtr dwComponentId, MSOCRINFO[] pcrinfo);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentActivate(IntPtr dwComponentId);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FSetTrackingComponent(IntPtr dwComponentId, int fTrack);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.OnComponentEnterState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FOnComponentExitState(IntPtr dwComponentId, UInt32 uStateId, UInt32 uContext, UInt32 cpicmExclude, Void** rgpicmExclude);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FInState(UInt32 uStateId, IntPtr pvoid);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FContinueIdle();
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentId, int uReason, Void* pvLoopData);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FCreateSubComponentManager(object punkOuter, object punkServProv, Guid& riid, IntPtr& ppvObj);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetParentComponentManager(Object& ppicm);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponentManager.FGetActiveComponent(UInt32 dwgac, Object[] ppic, MSOCRINFO[] pcrinfo, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FDebugMessage(IntPtr hinst, UInt32 msg, IntPtr wparam, IntPtr lparam);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FPreTranslateMessage(MSG[] msg);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnEnterState(UInt32 uStateId, int fEnter);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnAppActivate(int fActive, UInt32 dwOtherThreadId);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnLoseActivation();
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnActivationChange(object msoComponent, int fSameComponent, MSOCRINFO* pcrinfo, int fHostIsActivating, MSOCHOSTINFO* pchostinfo, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FDoIdle(UInt32 grfidlef);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FContinueMessageLoop(UInt32 uReason, Void* pvLoopData, MSG[] pMsgPeeked);
    private sealed virtual override Void* JetBrains.Interop.WinApi.Interfaces.IMsoComponent.HwndGetWindow(UInt32 dwWhich, UInt32 dwReserved);
    private sealed virtual override int JetBrains.Interop.WinApi.Interfaces.IMsoComponent.FQueryTerminate(int fPromptUser);
    private sealed virtual override void JetBrains.Interop.WinApi.Interfaces.IMsoComponent.Terminate();
    [CompilerGeneratedAttribute]
private void <.ctor>b__11_0();
    [CompilerGeneratedAttribute]
private void <JetBrains.Interop.WinApi.Interfaces.IMsoComponent.OnLoseActivation>b__38_0();
    [CompilerGeneratedAttribute]
private void <JetBrains.Interop.WinApi.Interfaces.IMsoComponent.Terminate>b__44_0();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "OptionsActionText")]
public class JetBrains.Application.UI.Options.Actions.ShowOptionsAction : ShowOptionsActionBase {
}
public class JetBrains.Application.UI.Options.Actions.ShowOptionsActionBase : object {
    public static DataConstant`1<string> ShowOptionsPage;
    public static DataConstant`1<Identity> ShowOptionsForLayer;
    private static ShowOptionsActionBase();
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
public class JetBrains.Application.UI.Options.ClassOptionIdExtractor : object {
    public static string GetOptionId(Type type);
    [NotNullAttribute]
public static String[] GetOptionsPageTags(Type type);
    private static OptionsPageAttribute GetOptionsPageAttribute(Type type);
}
public enum JetBrains.Application.UI.Options.Defaultness : Enum {
    public int value__;
    public static Defaultness AllInDefault;
    public static Defaultness SomeSetExplicitlyToDefaultValue;
    public static Defaultness SomeSetToNonDefault;
}
public class JetBrains.Application.UI.Options.DependentSettingsState : object {
    public bool IsActive;
    public Dirtiness Dirtiness;
    public Defaultness Defaultness;
    [NotNullAttribute]
public static DependentSettingsState Empty;
    public DependentSettingsState(bool isActive, Dirtiness dirtiness, Defaultness defaultness);
    private static DependentSettingsState();
}
public enum JetBrains.Application.UI.Options.Dirtiness : Enum {
    public int value__;
    public static Dirtiness AllClean;
    public static Dirtiness SomeDirty;
}
public class JetBrains.Application.UI.Options.HiddenOptionsPageKeyword : OptionsPageKeyword {
    [CompilerGeneratedAttribute]
private OptionsPageKeyword <VislbleKeyword>k__BackingField;
    [NotNullAttribute]
public OptionsPageKeyword VislbleKeyword { get; }
    public HiddenOptionsPageKeyword(string word, OptionsPageKeyword vislbleKeyword);
    [CompilerGeneratedAttribute]
public OptionsPageKeyword get_VislbleKeyword();
}
public interface JetBrains.Application.UI.Options.IDataContextProjectElementsCopierProvider {
}
public interface JetBrains.Application.UI.Options.IDependentSettings {
    [NotNullAttribute]
public IProperty`1<DependentSettingsState> State { get; }
    public abstract virtual IProperty`1<DependentSettingsState> get_State();
    [CanBeNullAttribute]
public abstract virtual Action RevertAction();
    [CanBeNullAttribute]
public abstract virtual Action ResetAction();
    [CanBeNullAttribute]
public abstract virtual Action ForceDefaultValueAction();
}
public interface JetBrains.Application.UI.Options.IDependentSettingsComposite {
}
public interface JetBrains.Application.UI.Options.IFilterable {
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    public abstract virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
}
public interface JetBrains.Application.UI.Options.IOptionPagesList {
    [NotNullAttribute]
public abstract virtual ICollection`1<OptionsPageEntity> GetOptionPages();
    public abstract virtual void AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
}
public interface JetBrains.Application.UI.Options.IOptionsAutomation1 {
    [CanBeNullAttribute]
public ICollection`1<SettingsSchemaInstance> Settings { get; }
    [CanBeNullAttribute]
public ICollection`1<IOptionsAutomation1> Children { get; }
    [CanBeNullAttribute]
public OptionsSettingsSmartContext Store { get; }
    public abstract virtual ICollection`1<SettingsSchemaInstance> get_Settings();
    public abstract virtual ICollection`1<IOptionsAutomation1> get_Children();
    public abstract virtual OptionsSettingsSmartContext get_Store();
}
public interface JetBrains.Application.UI.Options.IOptionsAutomation2 {
    [CanBeNullAttribute]
public IDependentSettings DependentSettings { get; }
    [CanBeNullAttribute]
public IAutomation Content { get; }
    public SettingsStateIndicatorAutomation Indicator { get; }
    [CanBeNullAttribute]
public ICollection`1<IOptionsAutomation2> Children { get; }
    public abstract virtual IDependentSettings get_DependentSettings();
    public abstract virtual IAutomation get_Content();
    public abstract virtual SettingsStateIndicatorAutomation get_Indicator();
    public abstract virtual ICollection`1<IOptionsAutomation2> get_Children();
}
public interface JetBrains.Application.UI.Options.IOptionsPage {
    [NotNullAttribute]
public string Id { get; }
    public abstract virtual string get_Id();
    public abstract virtual bool OnOk();
}
public interface JetBrains.Application.UI.Options.IReloadableOptionsPage {
    [NotNullAttribute]
public ISignal`1<Unit> Reload { get; }
    public abstract virtual ISignal`1<Unit> get_Reload();
}
public interface JetBrains.Application.UI.Options.ISearchablePage {
    public abstract virtual OptionsPageKeywords GetKeywords();
    public abstract virtual void HighLightKeyword(OptionsFilterResult text);
    public abstract virtual IEnumerable`1<string> GetTagKeywordsForPage();
}
public interface JetBrains.Application.UI.Options.ITreeGridViewFilterPage {
    [NotNullAttribute]
public abstract virtual IFilterDescriptor GetFilter();
}
public interface JetBrains.Application.UI.Options.Marshalling.IMarshalledOptionsPage {
    [NotNullAttribute]
public abstract virtual IMarshalledViewModel GetViewModel();
}
public interface JetBrains.Application.UI.Options.Marshalling.IMarshalledViewModel {
    public string Id { get; }
    public abstract virtual string get_Id();
}
public class JetBrains.Application.UI.Options.ObsoletePageSearchableStub : object {
    public static ObsoletePageSearchableStub Instance;
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    private static ObsoletePageSearchableStub();
    public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    public sealed virtual OptionsPageKeywords GetKeywords();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    public sealed virtual IEnumerable`1<string> GetTagKeywordsForPage();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionPageDescriptorEx : object {
    [ExtensionAttribute]
public static bool IsInline(OptionsPageDescriptor descriptor);
}
public enum JetBrains.Application.UI.Options.OptionPageNestingType : Enum {
    public int value__;
    public static OptionPageNestingType Child;
    public static OptionPageNestingType Inline;
}
public class JetBrains.Application.UI.Options.OptionPages.AOptionsPage : AAutomation {
    private List`1<Action> myFlowBackOnOK;
    private string myPid;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIApplication <UIApplication>k__BackingField;
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IUIApplication UIApplication { get; }
    private string JetBrains.Application.UI.Options.IOptionsPage.Id { get; }
    public AOptionsPage(Lifetime lifetime, IUIApplication uiapp, string pid);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IUIApplication get_UIApplication();
    public virtual bool OnOk();
    protected void Bind(IPropertyBinding binding);
    protected void Bind(IProperty`1<TValue> source, IProperty`1<TValue> target);
    private sealed virtual override string JetBrains.Application.UI.Options.IOptionsPage.get_Id();
}
public class JetBrains.Application.UI.Options.OptionPages.CompositeOptionPage : AOptionsPage {
    public OptionPagesDiagnostics Diagnostics;
    public IList`1<IOptionsPage> Pages;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    public IProperty`1<OptionsFilterResult> SearchFilter { get; private set; }
    public CompositeOptionPage(Lifetime lifetime, IUIApplication uiapp, OptionPagesDiagnostics diagnostics, IList`1<Pair`2<string, IOptionsPage>> pages);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    [CompilerGeneratedAttribute]
private void set_SearchFilter(IProperty`1<OptionsFilterResult> value);
    public virtual bool OnOk();
    public sealed virtual OptionsPageKeywords GetKeywords();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    public sealed virtual IEnumerable`1<string> GetTagKeywordsForPage();
}
[OptionsPageAttribute("EnvironmentEditorPage", "Editor", "JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons/EditorOptionsPage")]
public class JetBrains.Application.UI.Options.OptionPages.EnvironmentEditorPage : AEmptyOptionsPage {
    public static string PID;
}
[OptionsPageAttribute("EnvironmentGeneral", "General", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.Application.UI.Options.OptionPages.EnvironmentGeneralPage : SimpleOptionsPage {
    public static string PID;
    public EnvironmentGeneralPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("Environment", "Environment", "")]
public class JetBrains.Application.UI.Options.OptionPages.EnvironmentPage : AEmptyOptionsPage {
    public static string Pid;
}
[ZoneDefinitionAttribute]
public interface JetBrains.Application.UI.Options.OptionPages.IToolsOptionsPageImplZone {
}
public class JetBrains.Application.UI.Options.OptionPages.OptionsDialogSelectionMru : object {
    public OptionsDialogSelectionMru(Lifetime lifetime, OptionsDialogSettingsContext settings, OptionsDialogModel model, OptionsSessionDefinition session, ILogger logger);
}
public class JetBrains.Application.UI.Options.OptionPages.OptionsSessionDefinition : object {
    public OptionsDialogParameters Parameters;
    public OptionPagesDiagnostics Diagnostics;
    [CanBeNullAttribute]
public Identity InitialLayerId;
    [CanBeNullAttribute]
public string InitialPageId;
    [NotNullAttribute]
public LifetimeDefinition LifetimeDefinition;
    public OptionsSessionDefinition(LifetimeDefinition lifetimeDefinition, OptionsDialogParameters parameters);
}
[OptionsPageAttribute("PerformanceMonitorMemory", "Memory Usage", "")]
public class JetBrains.Application.UI.Options.OptionPages.PerformanceMonitor.PerformanceMonitorMemoryPage : CustomSimpleOptionsPage {
    public static string Pid;
    public PerformanceMonitorMemoryPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, EventRecords eventRecords);
}
[OptionsPageAttribute("PerformanceMonitor", "Performance Monitoring", "")]
public class JetBrains.Application.UI.Options.OptionPages.PerformanceMonitor.PerformanceMonitorPage : AEmptyOptionsPage {
    public static string Pid;
}
[OptionsPageAttribute("PerformanceMonitorUIResponsiveness", "UI Responsiveness", "")]
public class JetBrains.Application.UI.Options.OptionPages.PerformanceMonitor.PerformanceMonitorUIResponsivenessPage : CustomSimpleOptionsPage {
    public static string Pid;
    public PerformanceMonitorUIResponsivenessPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, EventRecords eventRecords);
}
[ZoneMarkerAttribute]
public class JetBrains.Application.UI.Options.OptionPages.PerformanceMonitor.ZoneMarker : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[OptionsPageAttribute("PlatformEnvironmentGeneralPageIcons", "Platform General Icons", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.Application.UI.Options.OptionPages.PlatformEnvironmentGeneralPageIcons : CustomSimpleOptionsPage {
    public static string PID;
    public PlatformEnvironmentGeneralPageIcons(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IEnumerable`1<IIconsForIconThemeSelectionSample> samples, IThreading threading, IconIdOwnersMap iconIdOwners, ThemedIconSettingsLoader themloader, ProductConfigurations productConfigurations, ILogger logger);
    private static IconThemeFullSelection CoerceToRadioButtonValues(IconThemeFullSelection orig, bool isExposingFluentOptions);
    private Property`1<object> MakeFullThemeSelectionProperty(bool isExposingFluentOptions);
    private IconTheme SelectionToPreviewTheme(object o, IconThemeFullSelection override);
}
[OptionsPageAttribute("PlatformEnvironmentGeneralPageCheckboxes", "Platform General Checkboxes", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.Application.UI.Options.OptionPages.PlatformEnvironmentGeneralPageUiCheckboxes : SimpleOptionsPage {
    public static string PID;
    public PlatformEnvironmentGeneralPageUiCheckboxes(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext, IWindowBranding windowBranding, IsModeReportExceptionsComponent isModeReportExceptionsComponent);
}
[OptionsPageAttribute("EnvironmentGeneralUserInterface", "Platform General User Interface", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/EnvironmentGeneral")]
public class JetBrains.Application.UI.Options.OptionPages.PlatformEnvironmentGeneralUserInterfacePage : SimpleOptionsPage {
    public static string PID;
    public PlatformEnvironmentGeneralUserInterfacePage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
[OptionsPageAttribute("Root", "Options", "")]
public class JetBrains.Application.UI.Options.OptionPages.RootOptionsPage : AAutomation {
    public static string PID;
    public string Id { get; }
    public sealed virtual string get_Id();
    internal static OptionsPageDescriptor CreateDescriptor();
    private sealed virtual override bool JetBrains.Application.UI.Options.IOptionsPage.OnOk();
}
[OptionsPageAttribute("Tools", "Tools", "")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class JetBrains.Application.UI.Options.OptionPages.ToolsPage : AEmptyOptionsPage {
    public static string PID;
}
public class JetBrains.Application.UI.Options.OptionPages.WebProxyCustomSettingsViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<string> <HostnameProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <PortProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <UsernameProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <PasswordProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsVisibleProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CopyValuesFromSystemSettingsCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ClearValuesCommand>k__BackingField;
    [UsedImplicitlyAttribute]
public IProperty`1<string> HostnameProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<int> PortProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<string> UsernameProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<string> PasswordProperty { get; private set; }
    [UsedImplicitlyAttribute]
public IProperty`1<bool> IsVisibleProperty { get; public set; }
    public ICommand CopyValuesFromSystemSettingsCommand { get; }
    public ICommand ClearValuesCommand { get; }
    public WebProxyCustomSettingsViewModel(IProperty`1<string> hostnameProperty, IProperty`1<int> portProperty, IProperty`1<string> usernameProperty, IProperty`1<string> passwordProperty);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_HostnameProperty();
    [CompilerGeneratedAttribute]
private void set_HostnameProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_PortProperty();
    [CompilerGeneratedAttribute]
private void set_PortProperty(IProperty`1<int> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_UsernameProperty();
    [CompilerGeneratedAttribute]
private void set_UsernameProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_PasswordProperty();
    [CompilerGeneratedAttribute]
private void set_PasswordProperty(IProperty`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsVisibleProperty();
    [CompilerGeneratedAttribute]
public void set_IsVisibleProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public ICommand get_CopyValuesFromSystemSettingsCommand();
    [CompilerGeneratedAttribute]
public ICommand get_ClearValuesCommand();
    public void CopyValuesFromSystemSettings();
    private void ClearValues();
    [NotNullAttribute]
private static Tuple`2<string, int> ReadSystemProxySettings();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionPages.WebProxyCustomSettingsViewModel/<GetKeywords>d__30")]
public sealed virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
    private static Tuple`2<string, int> ReadWindowsProxySettings();
    private static Tuple`2<string, int> ReadMacOSProxySettings();
    private static Tuple`2<string, int> ReadLinuxProxySettings();
    private static string ExecuteBashCommand(string command);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object _);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <.ctor>b__0_1(object _);
}
public class JetBrains.Application.UI.Options.OptionPages.WebProxyCustomUsingViewModel : AAutomation {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsCustomProxyProperty>k__BackingField;
    [UsedImplicitlyAttribute]
public IProperty`1<bool> IsCustomProxyProperty { get; public set; }
    [UsedImplicitlyAttribute]
public string IsCustomProxyLabelText { get; }
    public WebProxyCustomUsingViewModel(IProperty`1<bool> isCustomProxyProperty);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsCustomProxyProperty();
    [CompilerGeneratedAttribute]
public void set_IsCustomProxyProperty(IProperty`1<bool> value);
    public string get_IsCustomProxyLabelText();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionPages.WebProxyCustomUsingViewModel/<GetKeywords>d__7")]
public sealed virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
}
[OptionsPageAttribute("WebProxySettings", "Web Proxy Settings", "JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons/ConnectionSettings")]
public class JetBrains.Application.UI.Options.OptionPages.WebProxySettingsPage : WebProxySettingsPageBase {
    public WebProxySettingsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
}
public class JetBrains.Application.UI.Options.OptionPages.WebProxySettingsPageBase : CustomSimpleOptionsPage {
    public static string Pid;
    public WebProxySettingsPageBase(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    private static void OpenSystemWebProxySettings();
}
[FlagsAttribute]
public enum JetBrains.Application.UI.Options.OptionPagesDiagnostics : Enum {
    public int value__;
    public static OptionPagesDiagnostics None;
    public static OptionPagesDiagnostics HighlightInlinePages;
    public static OptionPagesDiagnostics NestInlinePagesAsChilderen;
    public static OptionPagesDiagnostics ShowInlineInPageTitle;
    public static OptionPagesDiagnostics ShowInternalInPageTitle;
    public static OptionPagesDiagnostics ShowZonesInPageTitle;
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Options.OptionPagesList : object {
    private PartCatalog myCatalog;
    private ProductConfigurations myProductConfigurations;
    protected IList`1<OptionsPageEntity> myManuallyAddedPages;
    public OptionPagesList(ShellPartCatalogSet catalogueSet, ProductConfigurations productConfigurations);
    protected virtual CatalogAttributeFilter CreateCatalogAttributeFilter();
    [NotNullAttribute]
public virtual ICollection`1<OptionsPageEntity> GetOptionPages();
    protected virtual IEnumerable`1<OptionsPageEntity> GetAllOptionsPageEntities();
    public virtual void AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
    protected virtual bool IsPageInConfiguration(OptionsPageAttribute attribute, ProductConfigurations productConfigurations);
    [CompilerGeneratedAttribute]
private bool <GetOptionPages>b__4_0(OptionsPageEntity pageEntity);
}
public class JetBrains.Application.UI.Options.OptionPagesTree : object {
    private OptionsPageDescriptor myRootElement;
    private Dictionary`2<string, OptionsPageDescriptor> myMapIdToDescriptor;
    [NotNullAttribute]
public OptionsPageDescriptor RootElement { get; }
    public OptionPagesTree(IEnumerable`1<OptionsPageEntity> optionpages, OptionPagesDiagnostics diagnostics);
    private static Dictionary`2<string, OptionsPageEntity> Init_MapIdToEntity(IEnumerable`1<OptionsPageEntity> optionpages);
    private void Init_PageDescriptorsTree(Dictionary`2<string, OptionsPageEntity> mapIdToEntity, OptionPagesDiagnostics diagnostics);
    private void ModifyDescriptorAccordingToDiagnostics(OptionsPageDescriptor descriptor, OptionPagesDiagnostics diagnostics);
    public OptionsPageDescriptor get_RootElement();
    [NotNullAttribute]
public OptionsPageDescriptor GetElementByID(string id);
    public bool IsValidID(string id);
}
public class JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons : object {
}
public class JetBrains.Application.UI.Options.OptionsAutomationBase : object {
    private IAutomation myContent;
    [CanBeNullAttribute]
private IDependentSettings myDependentSettings;
    private SettingsStateIndicatorAutomation myIndicator;
    [NotNullAttribute]
protected ICollectionEvents`1<IOptionsAutomation2> Children;
    private IProperty`1<DependentSettingsState> myCompositeState;
    private IDependentSettings JetBrains.Application.UI.Options.IOptionsAutomation2.DependentSettings { get; }
    private IAutomation JetBrains.Application.UI.Options.IOptionsAutomation2.Content { get; }
    public SettingsStateIndicatorAutomation Indicator { get; }
    private ICollection`1<IOptionsAutomation2> JetBrains.Application.UI.Options.IOptionsAutomation2.Children { get; }
    public IProperty`1<DependentSettingsState> State { get; }
    public OptionsAutomationBase(Lifetime lifetime, IDependentSettings dependentSettings, IAutomation content);
    private void Init_CompositeState(Lifetime lifetime);
    private void Init_CompositeState_Renew();
    private sealed virtual override IDependentSettings JetBrains.Application.UI.Options.IOptionsAutomation2.get_DependentSettings();
    private sealed virtual override IAutomation JetBrains.Application.UI.Options.IOptionsAutomation2.get_Content();
    public sealed virtual SettingsStateIndicatorAutomation get_Indicator();
    private sealed virtual override ICollection`1<IOptionsAutomation2> JetBrains.Application.UI.Options.IOptionsAutomation2.get_Children();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual IProperty`1<DependentSettingsState> get_State();
    public sealed virtual Action RevertAction();
    public sealed virtual Action ResetAction();
    public sealed virtual Action ForceDefaultValueAction();
    [CanBeNullAttribute]
private Action AggregateActions(Func`2<IDependentSettings, Action> FGetChildAction);
    [CompilerGeneratedAttribute]
private void <Init_CompositeState>b__6_0(Lifetime lifeChild, IOptionsAutomation2 child);
}
public class JetBrains.Application.UI.Options.OptionsDialog.AEmptyOptionsPage : AAutomation {
    private string myId;
    private string JetBrains.Application.UI.Options.IOptionsPage.Id { get; }
    private sealed virtual override string JetBrains.Application.UI.Options.IOptionsPage.get_Id();
    private sealed virtual override bool JetBrains.Application.UI.Options.IOptionsPage.OnOk();
}
public class JetBrains.Application.UI.Options.OptionsDialog.ChildrenOnlyOptionsAutomation : OptionsAutomationBase {
    [NotNullAttribute]
public ICollectionEvents`1<IOptionsAutomation2> Children { get; }
    public ChildrenOnlyOptionsAutomation(Lifetime lifetime);
    public ICollectionEvents`1<IOptionsAutomation2> get_Children();
}
public class JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogAutomation : AAutomation {
    private CopySettingsDialogModel myModel;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public ISignal`1<string> HelpRequested;
    public ISignal`1<bool> CloseRequested;
    [CompilerGeneratedAttribute]
private ICommand <CommandShowError>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandOk>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsSnapshotTreeAutomationBase <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModeDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <BannerIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Exception> <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ErrorFullText>k__BackingField;
    public Lifetime Lifetime { get; }
    public ICommand CommandShowError { get; }
    public ICommand CommandCancel { get; }
    public ICommand CommandHelp { get; }
    public ICommand CommandOk { get; }
    public SettingsSnapshotTreeAutomationBase Tree { get; }
    public string ModeName { get; }
    public string ModeDescription { get; }
    public IconId BannerIcon { get; }
    public IProperty`1<Exception> Error { get; }
    public IProperty`1<string> ErrorFullText { get; private set; }
    public CopySettingsDialogAutomation(Lifetime lifetime, CopySettingsDialogModel model, string modeName, string modeDescription, IconId bannerIcon, SettingsSnapshotTreeAutomationBase tree);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ICommand get_CommandShowError();
    [CompilerGeneratedAttribute]
public ICommand get_CommandCancel();
    [CompilerGeneratedAttribute]
public ICommand get_CommandHelp();
    [CompilerGeneratedAttribute]
public ICommand get_CommandOk();
    [CompilerGeneratedAttribute]
public SettingsSnapshotTreeAutomationBase get_Tree();
    [CompilerGeneratedAttribute]
public string get_ModeName();
    [CompilerGeneratedAttribute]
public string get_ModeDescription();
    [CompilerGeneratedAttribute]
public IconId get_BannerIcon();
    [CompilerGeneratedAttribute]
public IProperty`1<Exception> get_Error();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ErrorFullText();
    [CompilerGeneratedAttribute]
private void set_ErrorFullText(IProperty`1<string> value);
    public void WriteToLayer(UserFriendlySettingsLayer layerTo);
    public void WriteToFile(FileSystemPath fileTo);
    private static void ShowException(Exception exception, string title);
    [CompilerGeneratedAttribute]
private void <.ctor>b__37_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__37_1(string helpid);
    [CompilerGeneratedAttribute]
private void <.ctor>b__37_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__37_3();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__37_4();
}
public class JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel : object {
    [CanBeNullAttribute]
private ISettingsStorageMountPoint myMountWithData;
    public IProperty`1<Exception> Error;
    public SettingsSnapshotTreeModel Tree;
    private SequentialLifetimes mySequenceWriteTo;
    private SequentialLifetimes mySequenceMountWithData;
    private ISettingsStore mySettingsStore;
    private IThreading myThreading;
    private WebProxySettingsReader myWebProxySettingsReader;
    private InternKeyPathComponent myInterned;
    public CopySettingsDialogModel(Lifetime lifetime, SettingsSourceModel source, bool isAllSelectedInitially, IThreading threading, WebProxySettingsReader webProxySettingsReader, InternKeyPathComponent interned);
    private void BeginReadFromSource(Lifetime lifetime, SettingsSourceModel source, bool isAllSelectedInitially);
    public void WriteToLayer(UserFriendlySettingsLayer layerTo);
    public void WriteToFile(FileSystemPath fileTo);
    private void WriteCore(Action`1<SettingsSourceModel> FSetTarget);
    private void CopySelectedKeys(IList`1<ItemModel> rootitems, ISettingsStorageMountPoint mountSource, ISettingsStorageMountPoint mountTarget, RecordingLogger logger);
    private void CopySelectedKeys_Item(ItemModel item, ISettingsStorageMountPoint mountSource, ISettingsStorageMountPoint mountTarget, RecordingLogger logger);
    private void CopySelectedKeys_Item_CopyPhysicalSubtree(ItemModel item, ISettingsStorageMountPoint mountSource, ISettingsStorageMountPoint mountTarget, RecordingLogger logger);
}
[ObsoleteAttribute("Use BeSimpleOptionsPage and extend it as necessary; keep the same API if possible")]
public abstract class JetBrains.Application.UI.Options.OptionsDialog.CustomSimpleOptionsPage : SimpleOptionsPage {
    private IList`1<OptionsPageKeyword> myRegisteredWords;
    protected CustomSimpleOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    public virtual OptionsPageKeywords GetKeywords();
    public IOptionEntity AddCustomOption(IAutomation automation);
    public IOptionEntity AddSingleRadioOption(IProperty`1<T> sourceProperty, T value, string groupName, string text, string toolTip);
    protected void RegisterWord(string word);
    protected void RegisterWord(OptionsPageKeyword optionsPageKeyword);
    protected void RegisterWord(IEnumerable`1<OptionsPageKeyword> optionsPageKeywords);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.ICustomOptionsEditSemantic {
    public String[] FilterTags { get; }
    public abstract virtual String[] get_FilterTags();
    public abstract virtual void Save(OptionsTransaction transaction, Func`3<Lifetime, DataContexts, IDataContext> dataContext, Action onSuccess, Action onCancel);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.IOptionsDialogViewOwner {
    public abstract virtual void Show(OptionsDialogParameters parameters);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.ISettingsSnapshotTreeAutomationFactory {
    public abstract virtual SettingsSnapshotTreeAutomationBase Create(Lifetime lifetime, SettingsSnapshotTreeModel model);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CopyLayerToLayerActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.CopyLayerToLayer_Item_XxAction : object {
    private static int IdRangeLength;
    private static string StringUnavailable;
    private static string StringMoar;
    private int myActionIndex;
    public CopyLayerToLayer_Item_XxAction(int index);
    private static CopyLayerToLayer_Item_XxAction();
    private void AnalyzeThis(Identity source, UserFriendlySettingsLayers layerman, ActionDisposition& disposition, UserFriendlySettingsLayer& layer);
    [NotNullAttribute]
private static IList`1<UserFriendlySettingsLayer> GetAllLayers(UserFriendlySettingsLayers layerman);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(IDataContext context, ActionDisposition disposition, Lifetime lt, UserFriendlySettingsLayers layerman, Identity source, UserFriendlySettingsLayer layerOfThisAction);
    private static void CopyTo(Lifetime lifetime, UserFriendlySettingsLayer layerFrom, UserFriendlySettingsLayer layerTo, UserFriendlySettingsLayers layerman, WebProxySettingsReader webProxySettingsReader, InternKeyPathComponent interned, IThreading threading, ISettingsSnapshotTreeAutomationFactory treeFactory, ISettingsCopier copier, IDataContext context);
}
[ActionGroupAttribute("CopyLayerToLayer", "1", "16")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.CopyLayerToLayerActionGroup : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IPresentableAction.Update(IDataContext context, ActionPresentation presentation);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CopySettingsFilePathActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.CopySettingsLayerDiskFilePathAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "RemoveActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.DeleteInjectedLayerAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "EditLayerActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.EditSettingsLayerOptionsAction : object {
    public static DataConstant`1<string> ShowOptionsPage;
    private static EditSettingsLayerOptionsAction();
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static bool CanExecute(IDataContext context, Identity selectedLayer);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ExportToFileActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ExportSettingsToFileAction : object {
    private static ILogger ourLogger;
    private static ExportSettingsToFileAction();
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ImportFromFileActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ImportSettingsFromFileAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context, FileSystemPath path);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ImportFromURLActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ImportSettingsFromUrlAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context);
    private static void ImportFromUri(Lifetime lifetime, Uri uri, IDataContext context, Identity selected);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "OpenSettingsFileActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.InjectExistingFileLayerIntoInjectedLayersHostAction : InjectExistingFileLayerIntoInjectedLayersHostActionBase {
    protected virtual void ProcessWithPath(IDataContext context, Action`1<FileSystemPath> callback);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.InjectExistingFileLayerIntoInjectedLayersHostActionBase : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual void ProcessWithPath(IDataContext context, Action`1<FileSystemPath> callback);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "CreateSettingsFileActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.InjectNewFileLayerIntoInjectedLayersHostAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ISettingsCopier {
    public abstract virtual void ShowMoarDialog(Lifetime lifetime, UserFriendlySettingsLayer sourceLayer, UserFriendlySettingsLayers layerman, IList`1<UserFriendlySettingsLayer> allLayers, WebProxySettingsReader webProxySettingsReader, IUIApplication application, InternKeyPathComponent interned, IDataContext context, Action`2<UserFriendlySettingsLayer, IDataContext> copyTo);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ISettingsLayersModificationDialogOwner {
    public abstract virtual void ShowDialog(Lifetime lifetime, CopySettingsDialogAutomation viewModel, IDataContext context, Action onSuccess);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.MoveInjectedLayerActionBase : object {
    protected ReorderInjectedLayersFlags MoveType { get; }
    protected abstract virtual ReorderInjectedLayersFlags get_MoveType();
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "MoveDownActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.MoveInjectedLayerDownAction : MoveInjectedLayerActionBase {
    protected ReorderInjectedLayersFlags MoveType { get; }
    protected virtual ReorderInjectedLayersFlags get_MoveType();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "MoveUpActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.MoveInjectedLayerUpAction : MoveInjectedLayerActionBase {
    protected ReorderInjectedLayersFlags MoveType { get; }
    protected virtual ReorderInjectedLayersFlags get_MoveType();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "OpenContainingFolderActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.OpenSettingsLayerContainingFolderAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "RenameActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.RenameInjectedLayerAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ResetAllSettingsActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ResetAllSettingsAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ResetActionText")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.ResetSelectedSettingsLayersAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    private static void ExecuteWithLifetime(Lifetime lifetime, Identity identity, IDataContext context);
    private static void InvertModelSelection(CopySettingsDialogModel model);
    private static void InvertNode(ItemModel node);
}
[ActionGroupAttribute("SettingsLayersDialogContext_ImportFrom", "1", "10")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogContext_ImportFromActionGroup : object {
    public SettingsLayersDialogContext_ImportFromActionGroup(ImportSettingsFromFileAction importSettingsFromFileAction, ImportSettingsFromUrlAction importSettingsFromUrlAction);
}
[ActionGroupAttribute("SettingsLayersDialogContextMenu", "0", "10")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogContextMenuActionGroup : object {
    public SettingsLayersDialogContextMenuActionGroup(EditSettingsLayerOptionsAction editSettingsLayerOptionsAction, SettingsLayersDialogToolbar_AddLayerAction settingsLayersDialogToolbarAddLayerActionGroup, Separator sep, SettingsLayersDialogContext_ImportFromActionGroup settingsLayersDialogContextImportFromActionGroup, ExportSettingsToFileAction exportSettingsToFileAction, CopyLayerToLayerActionGroup copyLayerToLayerAction, Separator sep1, CopySettingsLayerDiskFilePathAction copySettingsLayerDiskFilePathAction, OpenSettingsLayerContainingFolderAction openSettingsLayerContainingFolderAction, Separator sep2, RenameInjectedLayerAction renameInjectedLayerAction, Separator sep3, ResetSelectedSettingsLayersAction resetSelectedSettingsLayersAction, DeleteInjectedLayerAction deleteInjectedLayerAction);
}
[ActionGroupAttribute("SettingsLayersDialogRightHandToolbar", "1", "10")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogRightHandToolbarActionGroup : object {
    public SettingsLayersDialogRightHandToolbarActionGroup(ResetAllSettingsAction resetAllSettingsAction);
}
[ActionGroupAttribute("SettingsLayersDialogToolbar.AddLayer", "1", "10")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogToolbar_AddLayerAction : object {
    public SettingsLayersDialogToolbar_AddLayerAction(InjectNewFileLayerIntoInjectedLayersHostAction injectNewFileLayerIntoInjectedLayersHostAction, InjectExistingFileLayerIntoInjectedLayersHostAction injectExistingFileLayerIntoInjectedLayersHostAction);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogToolbarActionGroup : object {
    public SettingsLayersDialogToolbarActionGroup(SettingsLayersDialogToolbarImportExportMenuAction settingsLayersDialogToolbarImportExportMenuActionGroup, CopyLayerToLayerActionGroup copyLayerToLayerAction, Separator sep);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.SettingsLayersDialogToolbarImportExportMenuAction : object {
    public SettingsLayersDialogToolbarImportExportMenuAction(ImportSettingsFromFileAction importSettingsFromFileAction, ImportSettingsFromUrlAction importSettingsFromUrlAction, Separator sep, ExportSettingsToFileAction exportSettingsToFileAction);
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.UriValidator : object {
    [CanBeNullAttribute]
public string Check(string input);
}
public interface JetBrains.Application.UI.Options.OptionsDialog.Layers.ISettingsLayersDialogToolbarProvider {
    public abstract virtual IAutomation CreateToolBar(IActionBarManager actionBarManager, string sActionGroupId);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomation : AAutomation {
    private IActionManager myActionManager;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private ICommand <CommandMoveUp>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandMoveDown>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandRename>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandChangeIsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandClose>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandBack>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <CommandHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    public ISignal`1<string> HelpRequested;
    public ISimpleSignal CloseRequested;
    [CompilerGeneratedAttribute]
private ListEvents`1<UserFriendlySettingsLayerForLayersDialogAutomation> <SettingsLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UserFriendlySettingsLayerForLayersDialogAutomation> <SelectedSettingsLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBackToOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private IAutomation <MainToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private IAutomation <RightHandToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private IActionManagerCommandBindings <ActionManagerCommandBindings>k__BackingField;
    public ICommand CommandMoveUp { get; }
    public ICommand CommandMoveDown { get; }
    public ICommand CommandRename { get; }
    public ICommand CommandEdit { get; }
    public ICommand CommandChangeIsActive { get; }
    public ICommand CommandClose { get; }
    public ICommand CommandBack { get; }
    public ICommand CommandHelp { get; }
    public Lifetime Lifetime { get; }
    public ListEvents`1<UserFriendlySettingsLayerForLayersDialogAutomation> SettingsLayers { get; }
    public IProperty`1<UserFriendlySettingsLayerForLayersDialogAutomation> SelectedSettingsLayer { get; }
    public bool CanBackToOptions { get; }
    public string Title { get; }
    [CanBeNullAttribute]
public IAutomation MainToolbar { get; }
    [CanBeNullAttribute]
public IAutomation RightHandToolbar { get; }
    public IActionManagerCommandBindings ActionManagerCommandBindings { get; }
    public SettingsLayersDialogAutomation(Lifetime lifetime, IActionManagerCommandBindingsFactory actionManagerCommandBindingsFactory, IUIApplication environment, SettingsLayersDialogModel model, IActionBarManager actionBarManager, UserInjectedSettingsLayers injector, IActionManager actionManager, IThreading threading, IAutomation mainToolbar, IAutomation rightHandToolbar, bool canBackToOptions);
    [CompilerGeneratedAttribute]
public ICommand get_CommandMoveUp();
    [CompilerGeneratedAttribute]
public ICommand get_CommandMoveDown();
    [CompilerGeneratedAttribute]
public ICommand get_CommandRename();
    [CompilerGeneratedAttribute]
public ICommand get_CommandEdit();
    [CompilerGeneratedAttribute]
public ICommand get_CommandChangeIsActive();
    [CompilerGeneratedAttribute]
public ICommand get_CommandClose();
    [CompilerGeneratedAttribute]
public ICommand get_CommandBack();
    [CompilerGeneratedAttribute]
public ICommand get_CommandHelp();
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public ListEvents`1<UserFriendlySettingsLayerForLayersDialogAutomation> get_SettingsLayers();
    [CompilerGeneratedAttribute]
public IProperty`1<UserFriendlySettingsLayerForLayersDialogAutomation> get_SelectedSettingsLayer();
    [CompilerGeneratedAttribute]
public bool get_CanBackToOptions();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public IAutomation get_MainToolbar();
    [CompilerGeneratedAttribute]
public IAutomation get_RightHandToolbar();
    [CompilerGeneratedAttribute]
public IActionManagerCommandBindings get_ActionManagerCommandBindings();
    private bool OnFuncFilter(UserFriendlySettingsLayer f);
    private void OnExecuteRenameInjectedLayer(IDataContext context, DelegateExecute nextExecute);
    private void OnRename();
    private void OnBackToOptions();
    public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
    [CompilerGeneratedAttribute]
private void <OnBackToOptions>b__56_0();
    [CompilerGeneratedAttribute]
private IList`1<Identity> <GetDataRules>b__57_0(IDataContext dc);
}
[ShellComponentAttribute("0")]
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomationFactory : object {
    private ISettingsStore myStore;
    private IActionManagerCommandBindingsFactory myActionManagerCommandBindingsFactory;
    private IUIApplication myEnvironment;
    private IActionBarManager myActionBarManager;
    private UserInjectedSettingsLayers myInjector;
    private IActionManager myActionman;
    private IShellLocks myLocks;
    private InternKeyPathComponent myInterned;
    private ISettingsLogger mySettingsLogger;
    private ResetSettings myResetSettings;
    private WebProxySettingsReader myWebProxySettingsReader;
    private ISettingsLayersDialogToolbarProvider myToolbarProvider;
    public SettingsLayersDialogAutomationFactory(ISettingsStore store, IActionManagerCommandBindingsFactory actionManagerCommandBindingsFactory, IUIApplication environment, IActionBarManager actionBarManager, UserInjectedSettingsLayers injector, IActionManager actionman, IShellLocks locks, InternKeyPathComponent interned, ISettingsLogger settingsLogger, ResetSettings resetSettings, WebProxySettingsReader webProxySettingsReader, ISettingsLayersDialogToolbarProvider toolbarProvider);
    public SettingsLayersDialogAutomation Create(Lifetime lifetime);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogModel : object {
    private IThreading myThreading;
    private WebProxySettingsReader myWebProxySettingsReader;
    private InternKeyPathComponent myInterned;
    [CompilerGeneratedAttribute]
private UserFriendlySettingsLayers <UserLayers>k__BackingField;
    public UserFriendlySettingsLayers UserLayers { get; }
    public SettingsLayersDialogModel(Lifetime lifetime, ISettingsStore store, IThreading threading, WebProxySettingsReader webProxySettingsReader, ResetSettings resetSettings, ISettingsLogger settingsLogger, InternKeyPathComponent interned);
    [CompilerGeneratedAttribute]
public UserFriendlySettingsLayers get_UserLayers();
    public CopySettingsDialogModel CreateCopySettingsDialogModel_FromUri(Lifetime lifetime, Uri uriFrom);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Layers.UserFriendlySettingsLayerForLayersDialogAutomation : UserFriendlySettingsLayerAutomation {
    [CompilerGeneratedAttribute]
private ICommand <CommandEditLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <ShellLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionManagerContextMenu <AddLayerContextMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsPathAccessible>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsRenameModeActive>k__BackingField;
    [CanBeNullAttribute]
private Identity ModelId { get; }
    public ICommand CommandEditLayer { get; }
    public IShellLocks ShellLocks { get; }
    public ActionManagerContextMenu AddLayerContextMenu { get; }
    public IProperty`1<bool> IsPathAccessible { get; }
    public IProperty`1<bool> IsActive { get; }
    public IProperty`1<bool> IsRenameModeActive { get; }
    public UserFriendlySettingsLayerForLayersDialogAutomation(Lifetime lifetime, IShellLocks shellLocks, UserFriendlySettingsLayer model, UserInjectedSettingsLayers injector, IActionManager actionman, IActionBarManager barman);
    private Identity get_ModelId();
    [CompilerGeneratedAttribute]
public ICommand get_CommandEditLayer();
    [CompilerGeneratedAttribute]
public IShellLocks get_ShellLocks();
    [CompilerGeneratedAttribute]
public ActionManagerContextMenu get_AddLayerContextMenu();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsPathAccessible();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsActive();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsRenameModeActive();
    public sealed virtual IEnumerable`1<IDataRule> GetDataRules();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation : AAutomation {
    [NotNullAttribute]
private OptionsModel myModel;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IShellLocks <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMode <Internalmode>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsSessionDefinition <SessionDefinition>k__BackingField;
    public IProperty`1<UserFriendlySettingsLayer> SelectedSettingsLayer_Model;
    private TagHighlightingInfoStorage myTagHighlightingInfoStorage;
    private TreeHighlightingInfoStorage myTreeHighlightingInfoStorage;
    public IList`1<OptionsPageWithoutContextAutomation> TopLevelPagesInTree;
    public Property`1<OptionsPageDescriptor> SelectedPage_Model;
    public Property`1<OptionsPageWithoutContextAutomation> SelectedPageForTree;
    public Property`1<bool> IsPagesTreeFullyInitialized;
    public Property`1<OptionsPageInOptionsContextAutomation> SelectedPageInContextForPreview;
    public IProperty`1<UserFriendlySettingsLayerAutomation> SelectedSettingsLayer;
    public IListEvents`1<UserFriendlySettingsLayerAutomation> SettingsLayersForTabs;
    public IListEvents`1<UserFriendlySettingsLayerAutomation> SettingsLayersForAddTabMenu;
    public IListEvents`1<UserFriendlySettingsLayerAutomation> SettingsLayersAllAvailable;
    public UserFriendlySettingsLayerAutomation DefaultSelectedSettingsLayer;
    public SignalCommand CommandImportExport;
    public SignalCommand CommandManageSettingsFiles;
    public SignalCommand CommandTroubleshoot;
    public ISimpleSignal ResetRequested;
    public ISignal`1<CancelEventArgs`1<UserFriendlySettingsLayerAutomation>> ApplyRequested;
    [CompilerGeneratedAttribute]
private IListEvents`1<SettingsSaveTargetAutomation> <SaveToLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private ChildrenOnlyOptionsAutomation <ChildrenOnlyOptionsAutomation>k__BackingField;
    public ISignal`1<string> SearchRequested;
    public IProperty`1<bool> IsSearching;
    public ISignal`1<IFilterDescriptor> UpdateTreeLayout;
    public IProperty`1<bool> NeedToShowSearchHelpOptionPage;
    private ListBridge`2<UserFriendlySettingsLayer, UserFriendlySettingsLayerAutomation> myBridgeOptionsContexts;
    public IUIApplication Environment { get; }
    public IShellLocks Locks { get; }
    public InternalMode Internalmode { get; }
    public OptionsSessionDefinition SessionDefinition { get; }
    public IListEvents`1<SettingsSaveTargetAutomation> SaveToLayers { get; }
    public ChildrenOnlyOptionsAutomation ChildrenOnlyOptionsAutomation { get; }
    public OptionsAutomation(Lifetime lifetime, OptionsModel model, IShellLocks locks, UserInjectedSettingsLayers injector, InternalMode internalmode, UsageStatistics activityTracking, OptionsSessionDefinition sessionDefinition, IUIApplication environment);
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public IShellLocks get_Locks();
    [CompilerGeneratedAttribute]
public InternalMode get_Internalmode();
    [CompilerGeneratedAttribute]
public OptionsSessionDefinition get_SessionDefinition();
    private void HandleSearchRequest(Lifetime currentSearchLifetime, OptionsModel model, IShellLocks locks, string searchText, IProperty`1<OptionsPageInOptionsContextAutomationFactory> propFactoryPagesInContext, OptionsPageWithoutContextAutomationFactory factoryPagesWithoutContext, StaticKeywordsPerPageKeeper staticKeywordsPerPageKeeper, UsageStatistics activityTracking);
    private ISearchablePage GetSearchablePage(OptionsPageWithoutContextAutomationFactory factoryPagesWithoutContext, OptionsPageWithoutContextAutomation node, OptionsPageInOptionsContextAutomationFactory fact, UserFriendlySettingsLayer optContext, IContextBoundSettingsStoreLive trans);
    private List`1<NodeWithParent> GetNodeWithParents(NodeWithParent grandParent, OptionsPageWithoutContextAutomation parent);
    private OptionsPageDescriptor GetFirstLeaf(OptionsPageWithoutContextAutomationFactory factory);
    private void OnBeforeCommit(IThreading threading, BeforeCommitEventArgs args, IProperty`1<OptionsPageInOptionsContextAutomationFactory> propFactoryPagesInContext);
    [CompilerGeneratedAttribute]
public IListEvents`1<SettingsSaveTargetAutomation> get_SaveToLayers();
    [CompilerGeneratedAttribute]
public ChildrenOnlyOptionsAutomation get_ChildrenOnlyOptionsAutomation();
    public void Save(UserFriendlySettingsLayerAutomation layer, Action onSuccess, Action onCancel);
    public TagHighlightingInfo GetTagHighlightingInfo(IOptionsPage page);
    public TreeHighlightingInfo GetTreeHighlightingInfo();
    private static IEnumerable`1<OptionsPageWithoutContextAutomation> GetAllOptionsPages(IEnumerable`1<OptionsPageWithoutContextAutomation> pages);
}
[AttributeUsageAttribute("4")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsComponentAttribute : ComponentAttribute {
    public static Instantiation OptionsComponentDefaultInstantiation;
    public OptionsComponentAttribute(Instantiation instantiation);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private OptionsDialogModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsSessionDefinition <SessionDefinition>k__BackingField;
    private HelpSystem helpSystem;
    [CompilerGeneratedAttribute]
private IUIApplication <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandSave>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand`1<SettingsSaveTargetAutomation> <CommandSaveTo>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandApply>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandClose>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandManage>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <CommandCopyToClipboard>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <CloseRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <WindowTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SaveButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SaveToButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ManageButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CancelButtonTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsAutomation <OptionsAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEditingNonDefaultLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsManageButtonIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsSaveToButtonIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<UserFriendlySettingsLayerAutomation> <EditedSettingsLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <PendingChangesMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <HasPendingChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <PendingChangesDetails>k__BackingField;
    public OptionsDialogModel Model { get; }
    public OptionsSessionDefinition SessionDefinition { get; }
    public IUIApplication Environment { get; public set; }
    public Lifetime Lifetime { get; }
    public DelegateCommand CommandSave { get; }
    public DelegateCommand`1<SettingsSaveTargetAutomation> CommandSaveTo { get; }
    public DelegateCommand CommandApply { get; }
    public DelegateCommand CommandCancel { get; }
    public DelegateCommand CommandClose { get; }
    public DelegateCommand CommandHelp { get; }
    public DelegateCommand CommandManage { get; }
    public DelegateCommand CommandCopyToClipboard { get; }
    public ISimpleSignal CloseRequested { get; }
    public IProperty`1<string> WindowTitle { get; }
    public IProperty`1<string> SaveButtonTitle { get; }
    public IProperty`1<string> SaveToButtonTitle { get; }
    public IProperty`1<string> ManageButtonTitle { get; }
    public IProperty`1<string> CancelButtonTitle { get; }
    public OptionsAutomation OptionsAutomation { get; }
    public IProperty`1<bool> IsEditingNonDefaultLayer { get; }
    public IProperty`1<bool> IsManageButtonIncluded { get; }
    public IProperty`1<bool> IsSaveToButtonIncluded { get; }
    public IProperty`1<UserFriendlySettingsLayerAutomation> EditedSettingsLayer { get; }
    public IProperty`1<string> PendingChangesMessage { get; }
    public IProperty`1<bool> HasPendingChanges { get; }
    public IProperty`1<string> PendingChangesDetails { get; }
    public Stream Icon { get; }
    public OptionsDialogAutomation(IUIApplication environment, Lifetime lifetime, OptionsDialogModel model, IShellLocks locks, UserInjectedSettingsLayers injector, HelpSystem helpSystem, ProductConfigurations productConfigurations, AdvancedSettingsLayersEditingTrait advancedSettingsLayersEditingTrait, ApplicationShutdownRequests shutdownRequests, UsageStatistics activityTracking, OptionsSessionDefinition sessionDefinition);
    [CompilerGeneratedAttribute]
public OptionsDialogModel get_Model();
    [CompilerGeneratedAttribute]
public OptionsSessionDefinition get_SessionDefinition();
    [CompilerGeneratedAttribute]
public IUIApplication get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(IUIApplication value);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandSave();
    [CompilerGeneratedAttribute]
public DelegateCommand`1<SettingsSaveTargetAutomation> get_CommandSaveTo();
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandApply();
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandCancel();
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandClose();
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandHelp();
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandManage();
    [CompilerGeneratedAttribute]
public DelegateCommand get_CommandCopyToClipboard();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_CloseRequested();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_WindowTitle();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SaveButtonTitle();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SaveToButtonTitle();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ManageButtonTitle();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CancelButtonTitle();
    [CompilerGeneratedAttribute]
public OptionsAutomation get_OptionsAutomation();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsEditingNonDefaultLayer();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsManageButtonIncluded();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsSaveToButtonIncluded();
    [CompilerGeneratedAttribute]
public IProperty`1<UserFriendlySettingsLayerAutomation> get_EditedSettingsLayer();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_PendingChangesMessage();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_HasPendingChanges();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_PendingChangesDetails();
    public Stream get_Icon();
    private void OnContextHelp();
    [NotNullAttribute]
private static string GetPendingChangesMessage(ICollection`1<string> changes);
    public void Close(string title, Action onClose);
    private void OnManage();
    public void RefreshPendingChanges();
    [CompilerGeneratedAttribute]
private void <OnManage>b__86_0();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogModel : object {
    private IActionManager myActionManager;
    private IThreading myThreading;
    [CompilerGeneratedAttribute]
private OptionsModel <Options>k__BackingField;
    public OptionsModel Options { get; private set; }
    public OptionsDialogModel(Lifetime lifetime, ISettingsStore settingsStore, IOptionPagesList optionpages, IComponentContainer containerForPageViews, HelpSystem helpSystem, ILogger logger, IActionManager actionman, IThreading threading, OptionPagesDiagnostics diagnostics, OptionsSessionDefinition sessionDefinition, IEnumerable`1<IProvider`1<Identity>> customLayerProviders, ICalculatedSettingsSchema calculatedSettingsSchema);
    [CompilerGeneratedAttribute]
public OptionsModel get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(OptionsModel value);
    public void ShowSettingsLayers();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
    [CompilerGeneratedAttribute]
private void <ShowSettingsLayers>b__7_0();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogOwner : object {
    private ISettingsLogger mySettingsLogger;
    private DataContexts myDatacontexts;
    public OptionsDialogOwner(Lifetime lifetime, ISettingsLogger settingsLogger, DataContexts datacontexts);
    public OptionsDialogAutomation Create(Lifetime lifetime, string layerName, Func`3<Lifetime, DataContexts, IDataContext> dataContext);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogParameters : object {
    [CompilerGeneratedAttribute]
private WindowModality <Modality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private Identity <Layer>k__BackingField;
    [CompilerGeneratedAttribute]
private LifetimeDefinition <LifetimeDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionPagesDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FilterTags>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Lifetime, DataContexts, IDataContext> <GetContext>k__BackingField;
    public WindowModality Modality { get; public set; }
    public string Page { get; public set; }
    public Identity Layer { get; public set; }
    public LifetimeDefinition LifetimeDefinition { get; public set; }
    public OptionPagesDiagnostics Diagnostics { get; public set; }
    public String[] FilterTags { get; public set; }
    public Func`3<Lifetime, DataContexts, IDataContext> GetContext { get; public set; }
    [CompilerGeneratedAttribute]
public WindowModality get_Modality();
    [CompilerGeneratedAttribute]
public void set_Modality(WindowModality value);
    [CompilerGeneratedAttribute]
public string get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(string value);
    [CompilerGeneratedAttribute]
public Identity get_Layer();
    [CompilerGeneratedAttribute]
public void set_Layer(Identity value);
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_LifetimeDefinition();
    [CompilerGeneratedAttribute]
public void set_LifetimeDefinition(LifetimeDefinition value);
    [CompilerGeneratedAttribute]
public OptionPagesDiagnostics get_Diagnostics();
    [CompilerGeneratedAttribute]
public void set_Diagnostics(OptionPagesDiagnostics value);
    [CompilerGeneratedAttribute]
public String[] get_FilterTags();
    [CompilerGeneratedAttribute]
public void set_FilterTags(String[] value);
    [CompilerGeneratedAttribute]
public Func`3<Lifetime, DataContexts, IDataContext> get_GetContext();
    [CompilerGeneratedAttribute]
public void set_GetContext(Func`3<Lifetime, DataContexts, IDataContext> value);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "OptionsDialogLogicalSettingsSettingDescription")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "MRUSelectedPageSettingDescription")]
public string SelectedPageId;
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogSettingsContext : object {
    public IContextBoundSettingsStoreLive BoundContext;
    public OptionsDialogSettings InitialSettings;
    public OptionsDialogSettingsContext(Lifetime lifetime, ISettingsStore store, ISettingsOptimization settingsOptimization);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogViewOwnerEx : object {
    [ExtensionAttribute]
public static void Show(IOptionsDialogViewOwner dialogViewOwner, WindowModality modality, string page, Identity layer, LifetimeDefinition lifetimeDefinition, OptionPagesDiagnostics diagnostics, Func`3<Lifetime, DataContexts, IDataContext> getContext);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogViewOwnerStub : object {
    public virtual void Show(OptionsDialogParameters parameters);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsManager : object {
    private IOptionPagesList myOptionPagesList;
    private IOptionsDialogViewOwner myOptionsDialogOwner;
    private ISettingsStore mySettingsStore;
    public OptionsManager(IOptionPagesList optionPagesList, IOptionsDialogViewOwner optionsDialogOwner, ISettingsStore settingsStore);
    [NotNullAttribute]
public ICollection`1<OptionsPageEntity> GetOptionPages();
    public void AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
    [NotNullAttribute]
public OptionPagesTree CreateOptionPagesTree();
    [GuardAttribute("2")]
public void ShowOptionsModal(string pageId);
    [GuardAttribute("-1")]
public void BeginShowOptions(string pageId);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsModel : object {
    public OptionPagesTree OptionPagesTree;
    public ISettingsStore SettingsStore;
    public ISignal`1<BeforeCommitEventArgs> BeforeCommit;
    public IProperty`1<OptionsPageDescriptor> SelectPageRequested;
    public IProperty`1<UserFriendlySettingsLayer> SelectLayerRequested;
    public ISignal`1<OptionsPageDescriptor> PageSelected;
    public IProperty`1<ICollection`1<string>> PendingChangesInfo;
    [NotNullAttribute]
public UserFriendlySettingsLayers SettingsLayers;
    public IComponentContainer ContainerForPageViews;
    private IDictionary`2<UserFriendlySettingsLayer, IContextBoundSettingsStoreLive> myMapLayerToItsClearTransaction;
    public OptionsTransaction OptionsTransaction;
    private JetDispatcher DispatcherMainThread;
    public ISimpleSignal EverythingWasReset { get; }
    public OptionsModel(Lifetime lifetime, ISettingsStore settingsStore, IOptionPagesList optionpages, IComponentContainer containerForPageViews, IThreading threading, ILogger logger, OptionPagesDiagnostics diagnostics, OptionsSessionDefinition sessionDefinition, ICalculatedSettingsSchema calculatedSettingsSchema, IEnumerable`1<IProvider`1<Identity>> customLayerProviders);
    public void RecalculatePendingChanges();
    public bool Commit();
    [GuardAttribute("1")]
private bool CommitOptionPagesViewModels();
    public void Revert();
    public ISimpleSignal get_EverythingWasReset();
    public bool CommitToContext(UserFriendlySettingsLayer ctx, IProgressIndicator progress);
    [NotNullAttribute]
public IContextBoundSettingsStoreLive GetCleanTransactionForLayer(UserFriendlySettingsLayer layer);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageContext : object {
    public bool IsRider { get; }
    public bool IsRadler { get; }
    public bool IsReSharper { get; }
    public virtual bool get_IsRider();
    public virtual bool get_IsRadler();
    public bool get_IsReSharper();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory : object {
    private Lifetime myLifetime;
    private IList`1<object> myDummyInjecttions;
    public OptionsPageFactory(Lifetime lifetime);
    [NotNullAttribute]
public IOptionsPage CreateOptionsPage(OptionsPageDescriptor pagedescriptor, IComponentContainer containerParent, OptionsSettingsSmartContext injectSettingsStoreSmartContext, IShellLocks locks);
    private Object[] GetInjections(Lifetime lifetime, OptionsSettingsSmartContext injectSettingsStoreSmartContext, IShellLocks locks);
    private static void GetInjections_Useful(List`1<object> injections, OptionsSettingsSmartContext injectSettingsStoreSmartContext, IShellLocks locks);
    private static IList`1<object> CreateInjections_DummyToPreventImporting(Lifetime lifetime, ISettingsSchema schema, IShellLocks shellLocks);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomation : AAutomation {
    [CanBeNullAttribute]
private IComponentContainer myContainerForPageViews;
    [NotNullAttribute]
private IShellLocks myLocks;
    [CanBeNullAttribute]
private UserFriendlySettingsLayer myOptionsContextModel;
    [NotNullAttribute]
private OptionsPageFactory myOptionsPageFactory;
    [CanBeNullAttribute]
private IContextBoundSettingsStoreLive myStoreCleanTransactionForLayer;
    [NotNullAttribute]
public IProperty`1<IOptionsPage> CreatedOptionsPage;
    [NotNullAttribute]
public OptionsPageDescriptor OptionsPageModel;
    [NotNullAttribute]
public UserFriendlySettingsLayer OptionsContextModel { get; }
    public OptionsPageInOptionsContextAutomation(Lifetime lifetime, OptionsPageDescriptor modelPage, UserFriendlySettingsLayer modelContext, IContextBoundSettingsStoreLive storeCleanTransactionForLayer, IComponentContainer containerForPageViews, IShellLocks locks);
    public UserFriendlySettingsLayer get_OptionsContextModel();
    [NotNullAttribute]
public IOptionsPage GetOrCreateOptionsPage();
    public Type GetPageType();
    [CanBeNullAttribute]
public IOptionsPage TryGetOptionsPage();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomationFactory : AAutomation {
    private Lifetime myLifetime;
    private IComponentContainer myContainerForPageViews;
    private IShellLocks myLocks;
    private BidirectionalMapOnDictionary`2<Pair`2<OptionsPageDescriptor, UserFriendlySettingsLayer>, OptionsPageInOptionsContextAutomation> mapModelToAutomation;
    private BidirectionalMapOnDictionary`2<UserFriendlySettingsLayer, IComponentContainer> myContainers;
    [NotNullAttribute]
public CollectionEvents`1<OptionsPageInOptionsContextAutomation> CreatedPageInContextAutomationObjects;
    public OptionsPageInOptionsContextAutomationFactory(Lifetime lifetime, IComponentContainer containerForPageViews, IShellLocks locks);
    [NotNullAttribute]
public OptionsPageInOptionsContextAutomation GetOrCreate(OptionsPageDescriptor page, UserFriendlySettingsLayer opcontext, IContextBoundSettingsStoreLive storeCleanTransactionForLayer);
    [NotNullAttribute]
public IList`1<KeyValuePair`2<Pair`2<OptionsPageDescriptor, UserFriendlySettingsLayer>, OptionsPageInOptionsContextAutomation>> EnumCreatedPages();
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageWithoutContextAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private OptionsPageDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SearchTags>k__BackingField;
    private Lazy`1<List`1<OptionsPageWithoutContextAutomation>> myChildren;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ChildrenOnlyOptionsAutomation <OptionsAutomation>k__BackingField;
    [NotNullAttribute]
public OptionsPageDescriptor Descriptor { get; }
    [NotNullAttribute]
public String[] SearchTags { get; public set; }
    public List`1<OptionsPageWithoutContextAutomation> Children { get; }
    public string Name { get; }
    public string AttributeId { get; }
    public IconId Icon { get; }
    [NotNullAttribute]
public ChildrenOnlyOptionsAutomation OptionsAutomation { get; private set; }
    public OptionsPageWithoutContextAutomation(Lifetime lifetime, OptionsPageDescriptor descriptor, OptionsPageWithoutContextAutomationFactory factory, InternalMode internalmode);
    [CompilerGeneratedAttribute]
public OptionsPageDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public String[] get_SearchTags();
    [CompilerGeneratedAttribute]
public void set_SearchTags(String[] value);
    [DebuggerStepThroughAttribute]
public List`1<OptionsPageWithoutContextAutomation> get_Children();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_AttributeId();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public ChildrenOnlyOptionsAutomation get_OptionsAutomation();
    [CompilerGeneratedAttribute]
private void set_OptionsAutomation(ChildrenOnlyOptionsAutomation value);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsPageWithoutContextAutomationFactory : AAutomation {
    private Lifetime myLifetime;
    private BidirectionalMapOnDictionary`2<OptionsPageDescriptor, OptionsPageWithoutContextAutomation> myMapModelToViewModel;
    public IList`1<OptionsPageWithoutContextAutomation> TopLevelViewModels;
    public OptionsPageDescriptor RootModel;
    public OptionsPageWithoutContextAutomation RootAutomation;
    private InternalMode myInternalMode;
    public OptionsPageWithoutContextAutomationFactory(Lifetime lifetime, OptionPagesTree tree, InternalMode internalMode);
    public OptionsPageWithoutContextAutomation ModelToViewModel(OptionsPageDescriptor model);
    public OptionsPageDescriptor ViewModelToModel(OptionsPageWithoutContextAutomation viewmodel);
    [CompilerGeneratedAttribute]
private OptionsPageWithoutContextAutomation <ModelToViewModel>b__7_0(OptionsPageDescriptor descriptor);
}
public static class JetBrains.Application.UI.Options.OptionsDialog.OptionsSettingsDiffScript : object {
    private static IEqualityComparer`1<SettingsKeyInstance> myKeyInstanceIndexComparer;
    private static IEqualityComparer`1<SettingsEntryInstance> myEntryInstanceIndexComparer;
    private static OptionsSettingsDiffScript();
    [NotNullAttribute]
public static List`1<IScriptAction> Emit(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, ILogger logger, ICalculatedSettingsSchema calculatedSettingsSchema);
    [NotNullAttribute]
public static List`1<IScriptAction> Emit2(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, SettingsStoreChangeArgs snapshotClean, SettingsStoreChangeArgs snapshotChanged, ILogger logger, ICalculatedSettingsSchema calculatedSettingsSchema);
    private static void DiffKeysList(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, IList`1<SettingsKeyInstance> keysClean, IList`1<SettingsKeyInstance> keysChanged, Dictionary`2<SettingsKey, object> keyIndices, List`1<IScriptAction> script, ILogger logger, ICalculatedSettingsSchema calculatedSettingsSchema);
    private static void DiffKeysList_Key(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, SettingsKeyInstance keyClean, SettingsKeyInstance keyChanged, Dictionary`2<SettingsKey, object> keyIndices, List`1<IScriptAction> script, ILogger logger, ICalculatedSettingsSchema calculatedSettingsSchema);
    private static void WithKeyIndex(SettingsKeyInstance keyinstance, Dictionary`2<SettingsKey, object> keyIndices, Action F, ILogger logger);
    private static void DiffEntriesList(IContextBoundSettingsStore storeClean, IContextBoundSettingsStore storeChanged, IList`1<SettingsEntryInstance> entriesClean, IList`1<SettingsEntryInstance> entriesChanged, Dictionary`2<SettingsKey, object> keyIndices, List`1<IScriptAction> script, ICalculatedSettingsSchema calculatedSettingsSchema);
}
public class JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction : object {
    internal static bool OptionIsForcingWriteOfDefaultValuesOnSaveTo;
    public ISettingsStore SettingsStore;
    private ILogger myLogger;
    [CanBeNullAttribute]
private IProperty`1<UserFriendlySettingsLayer> mySelectLayerRequested;
    private Func`2<ISettingsStore, IContextBoundSettingsStore> myCustomBinderForSmartContext;
    private SequentialLifetimes mySequenceSettingsStoreTransactionCleanSnapshots;
    private ICalculatedSettingsSchema myCalculatedSettingsSchema;
    [CompilerGeneratedAttribute]
private ISettingsStoreInTransaction <SettingsStoreTransactionForChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ISettingsStoreInTransaction> <SettingsStoreTransactionCleanSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private SynchronizedLifetime <LifetimeForStoreTransactionForChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private SynchronizedLifetime <LifetimeForStoreTransactionCleanSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private ProlongableLifetime <ProlongableLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <EverythingWasReset>k__BackingField;
    public ISettingsStoreInTransaction SettingsStoreTransactionForChanges { get; }
    public IProperty`1<ISettingsStoreInTransaction> SettingsStoreTransactionCleanSnapshot { get; }
    public SynchronizedLifetime LifetimeForStoreTransactionForChanges { get; }
    public SynchronizedLifetime LifetimeForStoreTransactionCleanSnapshot { get; public set; }
    public ProlongableLifetime ProlongableLifetime { get; }
    public ISimpleSignal EverythingWasReset { get; }
    public OptionsTransaction(Lifetime lifetime, ISettingsStore settingsStore, ILogger logger, IProperty`1<UserFriendlySettingsLayer> selectLayerRequested, ICalculatedSettingsSchema calculatedSettingsSchema, Func`2<ISettingsStore, IContextBoundSettingsStore> customBinderForSmartContext);
    public OptionsTransaction(ProlongableLifetime prolongableLifetime, ISettingsStore settingsStore, ILogger logger, IProperty`1<UserFriendlySettingsLayer> selectLayerRequested, ICalculatedSettingsSchema calculatedSettingsSchema, Func`2<ISettingsStore, IContextBoundSettingsStore> customBinderForSmartContext);
    private static OptionsTransaction();
    [CompilerGeneratedAttribute]
public ISettingsStoreInTransaction get_SettingsStoreTransactionForChanges();
    [CompilerGeneratedAttribute]
public IProperty`1<ISettingsStoreInTransaction> get_SettingsStoreTransactionCleanSnapshot();
    [CompilerGeneratedAttribute]
public SynchronizedLifetime get_LifetimeForStoreTransactionForChanges();
    [CompilerGeneratedAttribute]
public SynchronizedLifetime get_LifetimeForStoreTransactionCleanSnapshot();
    [CompilerGeneratedAttribute]
public void set_LifetimeForStoreTransactionCleanSnapshot(SynchronizedLifetime value);
    [CompilerGeneratedAttribute]
public ProlongableLifetime get_ProlongableLifetime();
    [CompilerGeneratedAttribute]
public ISimpleSignal get_EverythingWasReset();
    private void RefreshCleanSnapshot();
    public IContextBoundSettingsStore GetBoundSettingsStore();
    public ICollection`1<string> RecalculatePendingChangesCore();
    private IContextBoundSettingsStore BindToContext(ISettingsStore store);
    private void BindToContextBoth(IContextBoundSettingsStore& storeChanged, IContextBoundSettingsStore& storeClean);
    public void Commit();
    public void Revert();
    public void CommitToContext(UserFriendlySettingsLayer ctx, IProgressIndicator progress);
    public void SaveChangeScriptToContext(UserFriendlySettingsLayer ctx, List`1<IScriptAction> script);
    public List`1<IScriptAction> GetScriptActions();
    public List`1<IScriptAction> GetScriptActionsForCurrentLayer();
    public static IContextBoundSettingsStore BindWithoutAutoGenerated(IContextBoundSettingsStore settings);
    [CompilerGeneratedAttribute]
private void <RefreshCleanSnapshot>b__28_0(Lifetime lifeCleanSnapshotUnsync);
    [CompilerGeneratedAttribute]
private ICollection`1<string> <RecalculatePendingChangesCore>b__30_0();
    [CompilerGeneratedAttribute]
private ICollection`1<string> <RecalculatePendingChangesCore>b__30_1();
}
public class JetBrains.Application.UI.Options.OptionsDialog.PredefinedFilter : object {
    private IEnumerable`1<object> myItems;
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    public PredefinedFilter(IEnumerable`1<object> items);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Nullable`1<bool> IsAccepted(object item);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.NodeWithParent : object {
    [CompilerGeneratedAttribute]
private OptionsPageWithoutContextAutomation <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeWithParent <Parent>k__BackingField;
    public OptionsPageWithoutContextAutomation Node { get; }
    public NodeWithParent Parent { get; }
    public NodeWithParent(OptionsPageWithoutContextAutomation node, NodeWithParent parent);
    [CompilerGeneratedAttribute]
public OptionsPageWithoutContextAutomation get_Node();
    [CompilerGeneratedAttribute]
public NodeWithParent get_Parent();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsDialog.Search.NodeWithParentEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<OptionsPageWithoutContextAutomation> GetNodesFromThisToRoot(NodeWithParent nodeWithParent);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.OptionKeywordRegistrator : object {
    private IList`1<OptionsPageKeyword> myKeywords;
    public string GetRegisteredString(string source);
    public void AddKeyword(OptionsPageKeyword optionsPageKeyword);
    public OptionsPageKeywords GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.OptionsFinder : object {
    public static OptionsFilterResult FilterPage(string searchText, IEnumerable`1<OptionsPageKeyword> allKeywords, string pageTitlePath);
    private static bool ProcessTreeItemOptionsPageKeyword(TreeItemOptionsPageKeyword keyword, IEnumerable`1<string> remainingPatterns, IEnumerable`1<TreeItemOptionsPageKeyword> treeItemsToRoot, IEnumerable`1<HiddenOptionsPageKeyword> hiddenKeywordsToRoot, JetHashSet`1<object> filteredTreeItems, JetHashSet`1<HiddenOptionsPageKeyword> hiddenKeywords);
    private static bool ProcessMatchedTreeItemOptionsPageKeyword(TreeItemOptionsPageKeyword keyword, IEnumerable`1<string> remainingPatterns, IEnumerable`1<TreeItemOptionsPageKeyword> treeItemsToRoot, IEnumerable`1<HiddenOptionsPageKeyword> hiddenKeywordsToRoot, JetHashSet`1<object> filteredTreeItems, JetHashSet`1<HiddenOptionsPageKeyword> hiddenKeywords, bool isLeaf);
    private static void AddAllKeywordsToTreeFilter(TreeItemOptionsPageKeyword keyword, JetHashSet`1<object> filteredTreeItems, IEnumerable`1<TreeItemOptionsPageKeyword> treeItemsToRoot);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.SearchHelpOptionViewModel : ObservableObject {
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    public RichText Text { get; }
    [CompilerGeneratedAttribute]
public RichText get_Text();
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.StaticKeywordsPerPageKeeper : object {
    private CompactOneToListMap`2<ISearchablePage, OptionsPageKeyword> myKeywordsByPages;
    public IEnumerable`1<OptionsPageKeyword> GetKeywords(ISearchablePage searchablePage, IEnumerable`1<ISearchablePage> pagesToRoot);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.TagHighlightingInfoStorage : object {
    private CompactMap`2<ISearchablePage, TagHighlightingInfo> myTagInfoByPages;
    public void Clear();
    public void Add(ISearchablePage page, TagHighlightingInfo info);
    public TagHighlightingInfo Get(IOptionsPage page);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.TextInOptionsFinder : object {
    public static bool IsWordApplicable(string searchText, string word);
}
public class JetBrains.Application.UI.Options.OptionsDialog.Search.TreeHighlightingInfoStorage : object {
    private List`1<string> myHighlightingWords;
    public void Clear();
    public void Add(TreeHighlightingInfo treeHighlightingInfo);
    public TreeHighlightingInfo Get();
}
public static class JetBrains.Application.UI.Options.OptionsDialog.Search.UsageStatisticsGroups : object {
    public static string SucceededSearchRequest;
    public static string FailedSearchRequest;
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SettingsSaveTargetAutomation : ObservableAutomation {
    public IProperty`1<string> DisplayName { get; }
    public bool IsLocked { get; }
    public double Priority { get; }
    public bool IsDefault { get; }
    public IProperty`1<string> OriginText { get; }
    public abstract virtual IProperty`1<string> get_DisplayName();
    public abstract virtual bool get_IsLocked();
    public abstract virtual double get_Priority();
    public abstract virtual bool get_IsDefault();
    public abstract virtual IProperty`1<string> get_OriginText();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase : AAutomation {
    public IProperty`1<bool> IsAnythingChecked;
    [CompilerGeneratedAttribute]
private IProperty`1<IList`1<ItemAutomation>> <RootItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <CueBannerText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<Visibility> <CueBannerVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsItemsAssigned>k__BackingField;
    public IProperty`1<IList`1<ItemAutomation>> RootItems { get; }
    public IProperty`1<string> CueBannerText { get; }
    public IProperty`1<Visibility> CueBannerVisibility { get; }
    public IProperty`1<bool> IsItemsAssigned { get; }
    public SettingsSnapshotTreeAutomationBase(Lifetime lifetime, SettingsSnapshotTreeModel model);
    private void UpdateIsAnythingChecked();
    private bool GetIsAnythingChecked();
    [CompilerGeneratedAttribute]
public IProperty`1<IList`1<ItemAutomation>> get_RootItems();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_CueBannerText();
    [CompilerGeneratedAttribute]
public IProperty`1<Visibility> get_CueBannerVisibility();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsItemsAssigned();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationFactoryBase : object {
    public virtual SettingsSnapshotTreeAutomationBase Create(Lifetime lifetime, SettingsSnapshotTreeModel model);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel : object {
    public IProperty`1<IList`1<ItemModel>> RootItems;
    public SettingsSnapshotTreeModel(Lifetime lifetime);
    [NotNullAttribute]
public IEnumerable`1<Tuple`2<SettingsKey, IDictionary`2<SettingsKey, object>>> GetSelectedItems();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel/<GetSelectedItems_Recurse>d__4")]
[NotNullAttribute]
private IEnumerable`1<Tuple`2<SettingsKey, IDictionary`2<SettingsKey, object>>> GetSelectedItems_Recurse(IEnumerable`1<ItemModel> items, Dictionary`2<SettingsKey, object> keyindices);
}
public enum JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.BindingStyle : Enum {
    public int value__;
    public static BindingStyle IsEnabledProperty;
    public static BindingStyle IsVisibleProperty;
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.CustomOption : object {
    [CompilerGeneratedAttribute]
private IAutomation <Automation>k__BackingField;
    public IAutomation Automation { get; }
    public CustomOption(IAutomation automation);
    [CompilerGeneratedAttribute]
public IAutomation get_Automation();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.CustomOption/<GetKeywords>d__4")]
public sealed virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
}
public interface JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.IOptionCanBeEnabled {
    public IProperty`1<bool> IsEnabledProperty { get; }
    public abstract virtual IProperty`1<bool> get_IsEnabledProperty();
}
public interface JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.IOptionCanBeVisible {
    public IProperty`1<bool> IsVisibleProperty { get; }
    public abstract virtual IProperty`1<bool> get_IsVisibleProperty();
}
public interface JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.IOptionEntity {
    public abstract virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public abstract virtual IAutomation GetAutomation();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.MultiPropertyBoolValueCalculator : object {
    private List`1<Func`1<bool>> sourceValues;
    public void Add(Func`1<object> getPropertyValue, Func`2<object, object> convertFunc);
    public bool GetCurrentValue();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.OptionEntityEx : object {
    [ExtensionAttribute]
public static IProperty`1<bool> GetIsEnabledProperty(IOptionEntity option);
    [ExtensionAttribute]
public static IProperty`1<bool> GetIsVisibleProperty(IOptionEntity option);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.OptionEntityPrimitive : ObservableObject {
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsEnabledProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsVisibleProperty>k__BackingField;
    public IProperty`1<bool> IsEnabledProperty { get; }
    public IProperty`1<bool> IsVisibleProperty { get; }
    protected OptionEntityPrimitive(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsEnabledProperty();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_IsVisibleProperty();
    public abstract virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public sealed virtual IAutomation GetAutomation();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.SettingsEntryExtension : object {
    [ExtensionAttribute]
public static string GetTooltipText(SettingsEntry entry, string text, string customTooltipText);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.SimpleOptionsPageInternal : AAutomation {
    [CompilerGeneratedAttribute]
private IList`1<IOptionEntity> <OptionEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IOptionEntity, int> <OptionIndents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddVerticalScroll>k__BackingField;
    public IList`1<IOptionEntity> OptionEntities { get; }
    public IDictionary`2<IOptionEntity, int> OptionIndents { get; }
    public bool AddVerticalScroll { get; }
    public SimpleOptionsPageInternal(IList`1<IOptionEntity> optionEntities, IDictionary`2<IOptionEntity, int> optionIndents, bool addVerticalScroll);
    [CompilerGeneratedAttribute]
public IList`1<IOptionEntity> get_OptionEntities();
    [CompilerGeneratedAttribute]
public IDictionary`2<IOptionEntity, int> get_OptionIndents();
    [CompilerGeneratedAttribute]
public bool get_AddVerticalScroll();
}
public enum JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.Tutorial.MyTutorialEnum : Enum {
    public int value__;
    public static MyTutorialEnum One;
    public static MyTutorialEnum Two;
    public static MyTutorialEnum Three;
}
public enum JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.Tutorial.MyTutorialEnumWithDescription : Enum {
    public int value__;
    [DescriptionAttribute("Eins")]
public static MyTutorialEnumWithDescription One;
    [DescriptionAttribute("Zwei")]
public static MyTutorialEnumWithDescription Two;
    [DescriptionAttribute("Drei")]
public static MyTutorialEnumWithDescription Three;
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "TutorialSettingsSettingDescription")]
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.Tutorial.TutorialSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeBoolOptionSettingDescription")]
public bool MyBoolOption;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeStringOptionSettingDescription")]
public string MyStringOption;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeEnumOptionSettingDescription")]
public MyTutorialEnum MyEnumOption;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeEnumOptionSettingDescription")]
public MyTutorialEnumWithDescription MyEnumOptionWithDescribedValues;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeBoolOptionForBindSettingDescription")]
public bool BoolBindingSource;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeBoolOptionForBindSSettingDescription")]
public bool BoolBindingTarget;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeBoolOptionForVisibleSettingDescription")]
public bool MyBoolOptionForVisibleProperty;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeBoolOptionForShowingVisibilitySettingDescription")]
public bool MyBoolOptionForShowingVisibility;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "SomeBoolOptionForEnabledSettingDescription")]
public bool MyBoolOptionForEnabledProperty;
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.BoolOptionViewModel : OptionEntityPrimitive {
    private string myCaption;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CheckedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    public IProperty`1<bool> CheckedProperty { get; public set; }
    public RichText RichText { get; }
    public string ToolTipText { get; }
    private IProperty`1<RichText> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.Text { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeHidden { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsVisible { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeDisabled { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsEnabled { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsCheckedLogically { get; }
    private IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsAppearingChecked { get; }
    private IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsCheckedForChildControl { get; }
    public BoolOptionViewModel(Lifetime lifetime, IProperty`1<bool> checkedProperty, RichText richText, string toolTipText);
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CheckedProperty();
    [CompilerGeneratedAttribute]
public void set_CheckedProperty(IProperty`1<bool> value);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    private sealed virtual override IProperty`1<RichText> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_Text();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_ShouldBeHidden();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsVisible();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_ShouldBeDisabled();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsEnabled();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsCheckedLogically();
    private sealed virtual override IProperty`1<bool> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsAppearingChecked();
    private sealed virtual override IProperty`1<Nullable`1<bool>> JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.get_IsCheckedForChildControl();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.BoolOptionViewModel/<GetKeywords>d__28")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ButtonOptionViewModel : OptionEntityPrimitive {
    private string myText;
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <Command>k__BackingField;
    public RichText RichText { get; }
    public DelegateCommand Command { get; }
    public ButtonOptionViewModel(Lifetime lifetime, string text, DelegateCommand command);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
public DelegateCommand get_Command();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ButtonOptionViewModel/<GetKeywords>d__8")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboEnumWithCaptionViewModel`1 : ComboEnumWithCaptionViewModelBase {
    private Type myType;
    private IEnumerable`1<string> myAllPresentedValues;
    [CompilerGeneratedAttribute]
private IProperty`1<T> <ValueProperty>k__BackingField;
    [NotNullAttribute]
public IProperty`1<T> ValueProperty { get; }
    public IEnumerable`1<string> AllPresentedValues { get; }
    public ComboEnumWithCaptionViewModel`1(Lifetime lifetime, RichText prefixCaption, RichText postfixCaption, string tooltip, string postfixUrl, IProperty`1<T> valueProperty, Type type);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboEnumWithCaptionViewModel`1/<GetKeywords>d__3")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    [CompilerGeneratedAttribute]
public IProperty`1<T> get_ValueProperty();
    public virtual IEnumerable`1<string> get_AllPresentedValues();
    private string GetValuePresentation(object original);
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboEnumWithCaptionViewModelBase : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private RichText <PrefixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <PostfixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostfixUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <AutomationName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <PresentedValue>k__BackingField;
    [CanBeNullAttribute]
public RichText PrefixCaption { get; }
    [CanBeNullAttribute]
public RichText PostfixCaption { get; }
    [CanBeNullAttribute]
public string ToolTip { get; }
    [CanBeNullAttribute]
public string PostfixUrl { get; }
    public RichText AutomationName { get; }
    [NotNullAttribute]
public IProperty`1<string> PresentedValue { get; }
    public IEnumerable`1<string> AllPresentedValues { get; }
    protected ComboEnumWithCaptionViewModelBase(Lifetime lifetime, string prefixCaption, string postfixCaption, string tooltip, string postfixUrl, Type type);
    [CompilerGeneratedAttribute]
public RichText get_PrefixCaption();
    [CompilerGeneratedAttribute]
public RichText get_PostfixCaption();
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
public string get_PostfixUrl();
    [CompilerGeneratedAttribute]
public RichText get_AutomationName();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_PresentedValue();
    public abstract virtual IEnumerable`1<string> get_AllPresentedValues();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboOptionViewModel : OptionEntityPrimitive {
    private IProperty`1<object> myValueProperty;
    [CompilerGeneratedAttribute]
private RichText <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuffixUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<RadioOptionPoint> <Points>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SelectedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<string> <AllPossibleValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllPossibleToolTips>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Refresh>k__BackingField;
    public RichText Prefix { get; }
    public RichText Suffix { get; }
    public RichText Tooltip { get; }
    public string SuffixUrl { get; }
    public IEnumerable`1<RadioOptionPoint> Points { get; private set; }
    public IProperty`1<string> SelectedValue { get; }
    public ObservableCollection`1<string> AllPossibleValues { get; }
    public IEnumerable`1<string> AllPossibleToolTips { get; private set; }
    public ISimpleSignal Refresh { get; }
    public ComboOptionViewModel(RichText prefix, RichText suffix, string tooltip, string suffixUrl, IEnumerable`1<RadioOptionPoint> points, IProperty`1<object> valueProperty, Lifetime lifetime);
    [CompilerGeneratedAttribute]
public RichText get_Prefix();
    [CompilerGeneratedAttribute]
public RichText get_Suffix();
    [CompilerGeneratedAttribute]
public RichText get_Tooltip();
    [CompilerGeneratedAttribute]
public string get_SuffixUrl();
    [CompilerGeneratedAttribute]
public IEnumerable`1<RadioOptionPoint> get_Points();
    [CompilerGeneratedAttribute]
private void set_Points(IEnumerable`1<RadioOptionPoint> value);
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SelectedValue();
    [CompilerGeneratedAttribute]
public ObservableCollection`1<string> get_AllPossibleValues();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllPossibleToolTips();
    [CompilerGeneratedAttribute]
private void set_AllPossibleToolTips(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public ISimpleSignal get_Refresh();
    public void UpdateModel(IEnumerable`1<RadioOptionPoint> points, object newValue);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.ComboOptionViewModel/<GetKeywords>d__32")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.FileChooserViewModel : PathChooserViewModel {
    [NotNullAttribute]
private ICommonFileDialogs myCommonFileDialogs;
    [NotNullAttribute]
private ChooseFileType[] myFileTypes;
    public FileChooserViewModel(Lifetime lifetime, IProperty`1<FileSystemPath> pathSetting, string goodCaseTooltip, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty, Func`2<FileSystemPath, string> additionalValidation, ChooseFileType[] fileTypes);
    protected virtual FileSystemPath TryGetPath(FileSystemPath initialPath);
    protected virtual string AdditionalTryGetError(FileSystemPath path);
}
public enum JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.FileSystemLocation : Enum {
    public int value__;
    [DescriptionAttribute("Absolute path")]
public static FileSystemLocation AbsolutePath;
    [DescriptionAttribute("Test's file folder\")]
public static FileSystemLocation RelativeToTestFile;
    [DescriptionAttribute("Project folder\")]
public static FileSystemLocation RelativeToProject;
    [DescriptionAttribute("Solution folder\")]
public static FileSystemLocation RelativeToSolution;
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.FolderChooserViewModel : PathChooserViewModel {
    private ICommonFileDialogs myCommonFileDialogs;
    private bool myCheckWritePermission;
    public FolderChooserViewModel(Lifetime lifetime, IProperty`1<FileSystemPath> pathSetting, string goodCaseTooltip, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty, Func`2<FileSystemPath, string> additionalValidation, bool checkWritePermission);
    protected virtual FileSystemPath TryGetPath(FileSystemPath initialPath);
    protected virtual string AdditionalTryGetError(FileSystemPath path);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.HeaderOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    public string Text { get; }
    public string Tooltip { get; }
    public HeaderOptionViewModel(Lifetime lifetime, string text, string tooltip);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.HeaderOptionViewModel/<GetKeywords>d__7")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.IconComboBoxItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <IconId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Id { get; public set; }
    public IconId IconId { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IconId get_IconId();
    [CompilerGeneratedAttribute]
public void set_IconId(IconId value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.IconComboBoxViewModel : OptionEntityPrimitive {
    private IDictionary`2<string, IconComboBoxItem> myItems;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IconComboBoxItem> <SelectedItem>k__BackingField;
    public string Text { get; }
    public string ToolTipText { get; }
    public IEnumerable`1<IconComboBoxItem> Items { get; }
    public IProperty`1<IconComboBoxItem> SelectedItem { get; }
    public IconComboBoxViewModel(Lifetime lifetime, string text, string toolTipText, IProperty`1<string> idProperty, IEnumerable`1<IconComboBoxItem> items, string defaultValue);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    public IEnumerable`1<IconComboBoxItem> get_Items();
    [CompilerGeneratedAttribute]
public IProperty`1<IconComboBoxItem> get_SelectedItem();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.IconComboBoxViewModel/<GetKeywords>d__13")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.IntOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private RichText <PrefixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <PostfixCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<int> <IntValueProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Step>k__BackingField;
    public RichText PrefixCaption { get; }
    public RichText PostfixCaption { get; }
    public string ToolTipText { get; }
    public IProperty`1<int> IntValueProperty { get; }
    public int MinValue { get; }
    public int MaxValue { get; }
    public int Step { get; }
    public IntOptionViewModel(Lifetime lifetime, IProperty`1<int> intValueProperty, RichText prefixCaption, RichText postfixCaption, string toolTipText, int minValue, int maxValue, int step);
    [CompilerGeneratedAttribute]
public RichText get_PrefixCaption();
    [CompilerGeneratedAttribute]
public RichText get_PostfixCaption();
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
public IProperty`1<int> get_IntValueProperty();
    [CompilerGeneratedAttribute]
public int get_MinValue();
    [CompilerGeneratedAttribute]
public int get_MaxValue();
    [CompilerGeneratedAttribute]
public int get_Step();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.IntOptionViewModel/<GetKeywords>d__22")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.PathChooserViewModel : OptionEntityPrimitive {
    private bool myCanBeEmpty;
    private Func`2<FileSystemPath, string> myAdditionalValidation;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemPath> <PathSetting>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <InitialValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <TextIsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <BrowseCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanReset>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <ResetButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <ResetCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsReadOnly>k__BackingField;
    [NotNullAttribute]
public IProperty`1<FileSystemPath> PathSetting { get; }
    public FileSystemPath InitialValue { get; }
    public IProperty`1<bool> TextIsValid { get; }
    public RichText ButtonText { get; }
    public IProperty`1<string> ToolTipText { get; }
    public DelegateCommand BrowseCommand { get; }
    public bool CanReset { get; }
    public RichText ResetButtonText { get; }
    public DelegateCommand ResetCommand { get; }
    public IProperty`1<string> Path { get; }
    public IProperty`1<bool> IsReadOnly { get; }
    protected PathChooserViewModel(Lifetime lifetime, IProperty`1<FileSystemPath> pathSetting, string goodCaseTooltip, FileSystemPath initialValue, FileSystemPath defaultValue, bool canBeEmpty, Func`2<FileSystemPath, string> additionalValidation);
    [CompilerGeneratedAttribute]
public IProperty`1<FileSystemPath> get_PathSetting();
    [CompilerGeneratedAttribute]
public FileSystemPath get_InitialValue();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_TextIsValid();
    [CompilerGeneratedAttribute]
public RichText get_ButtonText();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_ToolTipText();
    [CompilerGeneratedAttribute]
public DelegateCommand get_BrowseCommand();
    [CompilerGeneratedAttribute]
public bool get_CanReset();
    [CompilerGeneratedAttribute]
public RichText get_ResetButtonText();
    [CompilerGeneratedAttribute]
public DelegateCommand get_ResetCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Path();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsReadOnly();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.PathChooserViewModel/<GetKeywords>d__36")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    protected abstract virtual FileSystemPath TryGetPath(FileSystemPath path);
    private FileSystemPath GetInitialPath();
    protected virtual string AdditionalTryGetError(FileSystemPath initialPath);
    [CanBeNullAttribute]
private string TryGetError(FileSystemPath path, string pathstr);
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RadioOptionPoint : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FallbackPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Comment>k__BackingField;
    public object Value { get; }
    public bool IsFallbackValue { get; }
    public string FallbackPrefix { get; }
    [NotNullAttribute]
public string Text { get; }
    [CanBeNullAttribute]
public string ToolTipText { get; }
    [CanBeNullAttribute]
public RichText Comment { get; }
    public RadioOptionPoint(object val, string text, string toolTipText, RichText comment, bool isFallbackValue, string fallbackPrefix);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsFallbackValue();
    [CompilerGeneratedAttribute]
public string get_FallbackPrefix();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
public RichText get_Comment();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RadioOptionViewModel : OptionEntityPrimitive {
    private string myCaption;
    private IEnumerable`1<RadioOptionPoint> myValues;
    [CompilerGeneratedAttribute]
private RadioGroupViewModel`1<object> <RadioGroupViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingsScalarEntry <SettingsScalarEntry>k__BackingField;
    public RadioGroupViewModel`1<object> RadioGroupViewModel { get; public set; }
    public SettingsScalarEntry SettingsScalarEntry { get; public set; }
    public RadioOptionViewModel(Lifetime lifetime, SettingsScalarEntry settingsScalarEntry, string caption, IEnumerable`1<RadioOptionPoint> values, RadioGroupViewModel`1<object> radioGroupViewModel);
    [CompilerGeneratedAttribute]
public RadioGroupViewModel`1<object> get_RadioGroupViewModel();
    [CompilerGeneratedAttribute]
public void set_RadioGroupViewModel(RadioGroupViewModel`1<object> value);
    [CompilerGeneratedAttribute]
public SettingsScalarEntry get_SettingsScalarEntry();
    [CompilerGeneratedAttribute]
public void set_SettingsScalarEntry(SettingsScalarEntry value);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RadioOptionViewModel/<GetKeywords>d__11")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RelativeFilePathChooserViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ButtonText>k__BackingField;
    [CompilerGeneratedAttribute]
private DelegateCommand <BrowseCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <IsPathValid>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<FileSystemLocation> <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <LocationNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <SelectedLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<bool> <IsButtonEnabled>k__BackingField;
    public string ToolTipText { get; }
    public string Text { get; }
    public string ButtonText { get; }
    public DelegateCommand BrowseCommand { get; }
    public IProperty`1<string> Path { get; }
    public IProperty`1<bool> IsPathValid { get; }
    public IProperty`1<FileSystemLocation> Location { get; }
    public IEnumerable`1<string> LocationNames { get; }
    public IProperty`1<string> SelectedLocation { get; }
    public Property`1<bool> IsButtonEnabled { get; }
    public RelativeFilePathChooserViewModel(Lifetime lifetime, ICommonFileDialogs commonFileDialogs, string text, string toolTipText, IProperty`1<FileSystemLocation> locationProperty, IProperty`1<string> pathProperty, ChooseFileType[] fileTypes);
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_ButtonText();
    [CompilerGeneratedAttribute]
public DelegateCommand get_BrowseCommand();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_Path();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_IsPathValid();
    [CompilerGeneratedAttribute]
public IProperty`1<FileSystemLocation> get_Location();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_LocationNames();
    [CompilerGeneratedAttribute]
public IProperty`1<string> get_SelectedLocation();
    [CompilerGeneratedAttribute]
public Property`1<bool> get_IsButtonEnabled();
    private bool GetPathIsValid();
    private bool GetButtonIsEnabled();
    private static string GetLocationName(object original);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RelativeFilePathChooserViewModel/<GetKeywords>d__34")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RemarksOptionViewModel : OptionEntityPrimitive {
    private Action myOpenHelp;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpUrl>k__BackingField;
    public string Text { get; }
    public string HelpUrl { get; }
    public RemarksOptionViewModel(Lifetime lifetime, string text, string helpUrl, Action openHelp);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_HelpUrl();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RemarksOptionViewModel/<GetKeywords>d__8")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
    public void ShowHelp();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RichTextOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private RichText <RichText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKeyAccessed>k__BackingField;
    public RichText RichText { get; }
    public bool IsKeyAccessed { get; public set; }
    public RichTextOptionViewModel(Lifetime lifetime, RichText richText);
    [CompilerGeneratedAttribute]
public RichText get_RichText();
    [CompilerGeneratedAttribute]
public bool get_IsKeyAccessed();
    [CompilerGeneratedAttribute]
public void set_IsKeyAccessed(bool value);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RichTextOptionViewModel/<GetKeywords>d__8")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.SingleRadioViewModel`1 : SingleRadioViewModelBase {
    private IProperty`1<T> mySourceProperty;
    private T myValue;
    public bool IsChecked { get; public set; }
    public SingleRadioViewModel`1(Lifetime lifetime, IProperty`1<T> sourceProperty, T value, string groupName, string text, string toolTip);
    public virtual bool get_IsChecked();
    public virtual void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.SingleRadioViewModelBase : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public bool IsChecked { get; public set; }
    public string GroupName { get; }
    public string Text { get; }
    public string ToolTip { get; }
    protected SingleRadioViewModelBase(Lifetime lifetime, string groupName, string text, string toolTip);
    public abstract virtual bool get_IsChecked();
    public abstract virtual void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.SingleRadioViewModelBase/<GetKeywords>d__13")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.StringOptionViewModel : OptionEntityPrimitive {
    [CompilerGeneratedAttribute]
private SettingsScalarEntry <SettingsScalarEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private Property`1<string> <StringProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private RichText <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTipText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptsReturn>k__BackingField;
    public SettingsScalarEntry SettingsScalarEntry { get; }
    public Property`1<string> StringProperty { get; public set; }
    public RichText Text { get; }
    public string ToolTipText { get; }
    public bool AcceptsReturn { get; }
    public StringOptionViewModel(Lifetime lifetime, IContextBoundSettingsStoreLive context, SettingsScalarEntry settingsScalarEntry, string text, string toolTipText, bool acceptsReturn);
    [CompilerGeneratedAttribute]
public SettingsScalarEntry get_SettingsScalarEntry();
    [CompilerGeneratedAttribute]
public Property`1<string> get_StringProperty();
    [CompilerGeneratedAttribute]
public void set_StringProperty(Property`1<string> value);
    [CompilerGeneratedAttribute]
public RichText get_Text();
    [CompilerGeneratedAttribute]
public string get_ToolTipText();
    [CompilerGeneratedAttribute]
public bool get_AcceptsReturn();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.StringOptionViewModel/<GetKeywords>d__17")]
public virtual IEnumerable`1<OptionsPageKeyword> GetKeywords();
}
[ObsoleteAttribute("Use BeSimpleOptionsPage and extend it as necessary; keep the same API if possible")]
public abstract class JetBrains.Application.UI.Options.OptionsDialog.SimpleOptionsPage : AAutomation {
    private static List`1<StringSource> ourAllowedTypeNamesForRadioList;
    private JetHashSet`1<IOptionEntity> myIgnoredInSearchOptions;
    private Dictionary`2<IProperty`1<bool>, MultiPropertyBoolValueCalculator> myEnableMultiPropertyBoolValues;
    protected Lifetime myLifetime;
    [CompilerGeneratedAttribute]
private OptionsSettingsSmartContext <OptionsSettingsSmartContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IOptionEntity> <OptionEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IOptionEntity, int> <OptionIndents>k__BackingField;
    [CompilerGeneratedAttribute]
private SimpleOptionsPageInternal <SimpleOptionsPageInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<OptionsFilterResult> <SearchFilter>k__BackingField;
    [NotNullAttribute]
public OptionsSettingsSmartContext OptionsSettingsSmartContext { get; private set; }
    [NotNullAttribute]
public IList`1<IOptionEntity> OptionEntities { get; }
    public IDictionary`2<IOptionEntity, int> OptionIndents { get; }
    public SimpleOptionsPageInternal SimpleOptionsPageInternal { get; }
    public string Id { get; }
    public IProperty`1<OptionsFilterResult> SearchFilter { get; }
    protected SimpleOptionsPage(Lifetime lifetime, OptionsSettingsSmartContext optionsSettingsSmartContext);
    private static SimpleOptionsPage();
    [CompilerGeneratedAttribute]
public OptionsSettingsSmartContext get_OptionsSettingsSmartContext();
    [CompilerGeneratedAttribute]
private void set_OptionsSettingsSmartContext(OptionsSettingsSmartContext value);
    [CompilerGeneratedAttribute]
public IList`1<IOptionEntity> get_OptionEntities();
    [CompilerGeneratedAttribute]
public IDictionary`2<IOptionEntity, int> get_OptionIndents();
    [CompilerGeneratedAttribute]
public SimpleOptionsPageInternal get_SimpleOptionsPageInternal();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public virtual bool OnOk();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<OptionsFilterResult> get_SearchFilter();
    public virtual OptionsPageKeywords GetKeywords();
    public virtual IEnumerable`1<string> GetTagKeywordsForPage();
    public sealed virtual void HighLightKeyword(OptionsFilterResult text);
    protected virtual OptionsPageAttribute GetOptionPageAttribute();
    protected void DeleteOptionFromSearch(IOptionEntity option);
    protected internal IOptionEntity AddHeader(string text, string tooltip);
    protected IOptionEntity AddRemarks(string text, string helpUrl, OpensUri opensUri);
    protected IOptionEntity AddRemarks(string text, HelpId helpTopicId, HelpSystem helpSystem);
    protected RichTextOptionViewModel AddRichText(RichText richText);
    public IOptionEntity AddText(String[] texts);
    protected IOptionEntity AddEmptyLine();
    protected void FinishPage();
    protected IOptionEntity AddButton(string text, DelegateCommand command);
    protected BoolOptionViewModel AddBoolOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, RichText text, string toolTipText);
    protected BoolOptionViewModel AddBoolOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, TEntryMemberType trueValue, TEntryMemberType falseValue, RichText text, string toolTipText);
    protected BoolOptionViewModel AddBoolOption(IProperty`1<bool> checkedProperty, RichText richText, string toolTipText);
    protected IntOptionViewModel AddIntOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string text, string toolTipText, int minValue, int step, int maxValue, string postfixText);
    protected StringOptionViewModel AddStringOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string text, string toolTipText, bool acceptsReturn);
    protected PathChooserViewModel AddFolderChooserOption(IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty, Func`2<FileSystemPath, string> additionalValidation, bool checkWritePermission);
    public PathChooserViewModel AddFileChooserOption(IProperty`1<FileSystemPath> setting, string toolTipText, FileSystemPath initialValue, ICommonFileDialogs commonFileDialogs, FileSystemPath defaultValue, bool canBeEmpty, Func`2<FileSystemPath, string> additionalValidation);
    protected internal RadioOptionViewModel AddRadioOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, string captionHelp, object defaultValue, RadioOptionPoint[] values);
    protected IOptionEntity AddComboEnum(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string caption, string toolTipText, string suffix, string suffixUrl);
    protected IOptionEntity AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string prefix, RadioOptionPoint[] values);
    protected IOptionEntity AddComboOption(Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaExpression, string prefix, string suffix, RadioOptionPoint[] values);
    protected ComboOptionViewModel AddComboOption(IProperty`1<object> valueProperty, string prefix, RadioOptionPoint[] values);
    protected ComboOptionViewModel AddComboOption(IProperty`1<object> valueProperty, string prefix, string suffix, RadioOptionPoint[] values);
    protected ComboOptionViewModel AddComboOption(IProperty`1<object> valueProperty, string prefix, string suffix, string tooltip, RadioOptionPoint[] values);
    protected void AddBinding(IOptionEntity target, BindingStyle bindingStyle, Expression`1<Func`2<TKeyClass, TEntryMemberType>> lambdaexpression, Func`2<TEntryMemberType, object> convertFunc);
    protected void AddBinding(IOptionEntity target, BindingStyle bindingStyle, IProperty`1<TEntryMemberType> sourceProperty, Func`2<TEntryMemberType, object> convertFunc);
    public void SetIndent(IOptionEntity widthOption, int indent);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
public class JetBrains.Application.UI.Options.OptionsDialog.SimpleViewModelsFactory : object {
    public static OptionEntityPrimitive CreateButton(Lifetime lt, string text, DelegateCommand command);
    public static ComboEnumWithCaptionViewModel`1<TEntryMemberType> CreateComboEnum(Lifetime lt, string caption, TEntryMemberType initialValue, string tooltip, string postfix, string postfixUrl);
}
public class JetBrains.Application.UI.Options.OptionsDialog.TagHighlightingInfo : object {
    public static TagHighlightingInfo EmptyInstance;
    [CompilerGeneratedAttribute]
private string <TagText>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TextHighlightings>k__BackingField;
    public string TagText { get; }
    public IEnumerable`1<string> TextHighlightings { get; }
    public TagHighlightingInfo(string tagText, IEnumerable`1<string> textHighlightings);
    private static TagHighlightingInfo();
    [CompilerGeneratedAttribute]
public string get_TagText();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TextHighlightings();
}
public class JetBrains.Application.UI.Options.OptionsDialog.TreeHighlightingInfo : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TextHighlightings>k__BackingField;
    public IEnumerable`1<string> TextHighlightings { get; }
    public TreeHighlightingInfo(IEnumerable`1<string> textHighlightings);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TextHighlightings();
}
public class JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation : SettingsSaveTargetAutomation {
    private Lifetime myLifetime;
    protected UserFriendlySettingsLayer myModel;
    public static PropertyId`1<ICustomOptionsEditSemantic> CustomOptionsEditSemanticKey;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<string> <OriginText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanAddLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <CanEditLayer>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IconId> <Icon>k__BackingField;
    [NotNullAttribute]
public UserFriendlySettingsLayer Model { get; }
    [CanBeNullAttribute]
public ICustomOptionsEditSemantic CustomOptionsEditSemantic { get; }
    public bool IsAlive { get; }
    public IProperty`1<string> DisplayName { get; }
    public IProperty`1<string> OriginText { get; }
    public bool IsDefault { get; }
    public bool IsLocked { get; }
    public IProperty`1<bool> CanAddLayer { get; }
    public IProperty`1<bool> CanEditLayer { get; }
    public double Priority { get; }
    public IProperty`1<IconId> Icon { get; }
    public UserFriendlySettingsLayerAutomation(Lifetime lifetime, UserFriendlySettingsLayer model, UserInjectedSettingsLayers injector);
    private static UserFriendlySettingsLayerAutomation();
    public UserFriendlySettingsLayer get_Model();
    public ICustomOptionsEditSemantic get_CustomOptionsEditSemantic();
    public bool get_IsAlive();
    [CompilerGeneratedAttribute]
public virtual IProperty`1<string> get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual IProperty`1<string> get_OriginText();
    public virtual bool get_IsDefault();
    [CompilerGeneratedAttribute]
public virtual bool get_IsLocked();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanAddLayer();
    [CompilerGeneratedAttribute]
public IProperty`1<bool> get_CanEditLayer();
    [CompilerGeneratedAttribute]
public virtual double get_Priority();
    [CompilerGeneratedAttribute]
public IProperty`1<IconId> get_Icon();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Options.OptionsFilterResult : object {
    [CompilerGeneratedAttribute]
private bool <IsPageApplicable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <VisibleHighlightings>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HiddenOptionsPageKeyword> <HiddenOptionsPageKeywords>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <FilteredTreeItems>k__BackingField;
    [CompilerGeneratedAttribute]
private TagOptionsPageKeyword <SingleTagOptionsPageKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeHighlightingInfo <TreeHighlightingInfo>k__BackingField;
    public bool IsPageApplicable { get; }
    public string Text { get; }
    public IEnumerable`1<string> VisibleHighlightings { get; }
    public IList`1<HiddenOptionsPageKeyword> HiddenOptionsPageKeywords { get; public set; }
    public IEnumerable`1<object> FilteredTreeItems { get; public set; }
    public TagOptionsPageKeyword SingleTagOptionsPageKeyword { get; }
    public TreeHighlightingInfo TreeHighlightingInfo { get; }
    public OptionsFilterResult(bool isPageApplicable, string text, IEnumerable`1<string> visibleHighlightings, IEnumerable`1<string> treeHighlighings, IList`1<HiddenOptionsPageKeyword> hiddenOptionsPageKeywords, IEnumerable`1<object> filteredTreeItems, TagOptionsPageKeyword singleTagOptionsPageKeyword);
    [CompilerGeneratedAttribute]
public bool get_IsPageApplicable();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_VisibleHighlightings();
    [CompilerGeneratedAttribute]
public IList`1<HiddenOptionsPageKeyword> get_HiddenOptionsPageKeywords();
    [CompilerGeneratedAttribute]
public void set_HiddenOptionsPageKeywords(IList`1<HiddenOptionsPageKeyword> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_FilteredTreeItems();
    [CompilerGeneratedAttribute]
public void set_FilteredTreeItems(IEnumerable`1<object> value);
    [CompilerGeneratedAttribute]
public TagOptionsPageKeyword get_SingleTagOptionsPageKeyword();
    [CompilerGeneratedAttribute]
public TreeHighlightingInfo get_TreeHighlightingInfo();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Options.OptionsFilterResultExt : object {
    [ExtensionAttribute]
public static string GetText(OptionsFilterResult optionsFilterResult);
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.Options.IOptionsPage")]
[MeansImplicitUseAttribute("8")]
public class JetBrains.Application.UI.Options.OptionsPageAttribute : PartAttribute {
    [CompilerGeneratedAttribute]
private HelpId <HelpKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IconId <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Internal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <NameResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionPageNestingType <NestingType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddVerticalScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SearchTags>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FilterTags>k__BackingField;
    public HelpId HelpKeyword { get; public set; }
    [NotNullAttribute]
public string Id { get; }
    [CanBeNullAttribute]
public IconId Icon { get; }
    [ObsoleteAttribute("Use Zoning")]
public bool Internal { get; public set; }
    [CanBeNullAttribute]
public string Name { get; public set; }
    [CanBeNullAttribute]
public Type NameResourceType { get; public set; }
    [CanBeNullAttribute]
public string NameResourceName { get; public set; }
    [NotNullAttribute]
public string DisplayName { get; }
    [CanBeNullAttribute]
public string ParentId { get; public set; }
    public double Sequence { get; public set; }
    public OptionPageNestingType NestingType { get; public set; }
    public bool AddVerticalScroll { get; public set; }
    [CanBeNullAttribute]
public String[] SearchTags { get; public set; }
    [CanBeNullAttribute]
public String[] FilterTags { get; public set; }
    public OptionsPageAttribute(string id, string name, Type typeofIcon);
    [CompilerGeneratedAttribute]
public HelpId get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(HelpId value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public IconId get_Icon();
    [CompilerGeneratedAttribute]
public bool get_Internal();
    [CompilerGeneratedAttribute]
public void set_Internal(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_NameResourceType();
    [CompilerGeneratedAttribute]
public void set_NameResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_NameResourceName();
    [CompilerGeneratedAttribute]
public void set_NameResourceName(string value);
    public string get_DisplayName();
    [CompilerGeneratedAttribute]
public string get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(string value);
    [CompilerGeneratedAttribute]
public double get_Sequence();
    [CompilerGeneratedAttribute]
public void set_Sequence(double value);
    [CompilerGeneratedAttribute]
public OptionPageNestingType get_NestingType();
    [CompilerGeneratedAttribute]
public void set_NestingType(OptionPageNestingType value);
    [CompilerGeneratedAttribute]
public bool get_AddVerticalScroll();
    [CompilerGeneratedAttribute]
public void set_AddVerticalScroll(bool value);
    [CompilerGeneratedAttribute]
public String[] get_SearchTags();
    [CompilerGeneratedAttribute]
public void set_SearchTags(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_FilterTags();
    [CompilerGeneratedAttribute]
public void set_FilterTags(String[] value);
    public sealed virtual int CompareTo(OptionsPageAttribute other);
}
public class JetBrains.Application.UI.Options.OptionsPageDescriptor : object {
    [NotNullAttribute]
private List`1<OptionsPageDescriptor> myChildren;
    [CompilerGeneratedAttribute]
private OptionsPageAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PageType>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionsPageDescriptor <Parent>k__BackingField;
    [NotNullAttribute]
public OptionsPageAttribute Attribute { get; }
    [NotNullAttribute]
public IList`1<OptionsPageDescriptor> Children { get; }
    [NotNullAttribute]
public IList`1<OptionsPageDescriptor> InlineChildren { get; }
    [NotNullAttribute]
public string Id { get; }
    [NotNullAttribute]
public Type PageType { get; }
    [CanBeNullAttribute]
public OptionsPageDescriptor Parent { get; }
    public OptionsPageDescriptor(OptionsPageEntity entity, OptionsPageDescriptor parent);
    [CompilerGeneratedAttribute]
public OptionsPageAttribute get_Attribute();
    public IList`1<OptionsPageDescriptor> get_Children();
    public IList`1<OptionsPageDescriptor> get_InlineChildren();
    public string get_Id();
    [CompilerGeneratedAttribute]
public Type get_PageType();
    [CompilerGeneratedAttribute]
public OptionsPageDescriptor get_Parent();
    [NotNullAttribute]
public string GetFullPath();
    [NotNullAttribute]
public Image GetIcon1(IUIApplication environment);
    [NotNullAttribute]
public IconId GetIcon(InternalMode internalmode);
    [CanBeNullAttribute]
public OptionsPageDescriptor TryGetNext();
    [CanBeNullAttribute]
public OptionsPageDescriptor TryGetPrevious();
    internal void Sort();
    private void AppendChild(OptionsPageDescriptor descriptor);
}
public class JetBrains.Application.UI.Options.OptionsPageEntity : object {
    [CompilerGeneratedAttribute]
private OptionsPageAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PageType>k__BackingField;
    [NotNullAttribute]
public OptionsPageAttribute Attribute { get; }
    [NotNullAttribute]
public Type PageType { get; }
    [NotNullAttribute]
public String[] FilterTags { get; }
    public OptionsPageEntity(Type pageType, OptionsPageAttribute attribute);
    [CompilerGeneratedAttribute]
public OptionsPageAttribute get_Attribute();
    [CompilerGeneratedAttribute]
public Type get_PageType();
    public String[] get_FilterTags();
}
public class JetBrains.Application.UI.Options.OptionsPageKeyword : object {
    [CompilerGeneratedAttribute]
private string <Word>k__BackingField;
    public string Word { get; }
    public OptionsPageKeyword(string word);
    [CompilerGeneratedAttribute]
public string get_Word();
    public virtual string ToString();
}
public class JetBrains.Application.UI.Options.OptionsPageKeywords : object {
    public static OptionsPageKeywords EmptyInstance;
    [CompilerGeneratedAttribute]
private IEnumerable`1<OptionsPageKeyword> <Keywords>k__BackingField;
    public IEnumerable`1<OptionsPageKeyword> Keywords { get; }
    public OptionsPageKeywords(IEnumerable`1<OptionsPageKeyword> keywords);
    private static OptionsPageKeywords();
    [CompilerGeneratedAttribute]
public IEnumerable`1<OptionsPageKeyword> get_Keywords();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Options.OptionsPageViewFactoryManager : object {
    public ICollectionEvents`1<FactoryEntry> Factories;
    private Lifetime myLifetime;
    private IShellLocks myLocks;
    public OptionsPageViewFactoryManager(Lifetime lifetime, IShellLocks locks);
    [NotNullAttribute]
[GuardAttribute("1")]
public Func`2<Type, object> GetFactoryFunction(Lifetime lifetime, IDataContext dc, IEnumerable`1<object> injections);
}
[ShellComponentAttribute("10")]
internal class JetBrains.Application.UI.Options.OptionsPageViewFactoryShell : object {
    private static double ourPriority;
    public OptionsPageViewFactoryShell(Lifetime lifetime, IComponentContainer containerParent, OptionsPageViewFactoryManager optionsPageViewFactoryManager);
}
public class JetBrains.Application.UI.Options.OptionsSectionDescriptor : OptionsPageDescriptor {
    public OptionsSectionDescriptor(OptionsPageEntity entity, OptionsPageDescriptor parent);
}
public class JetBrains.Application.UI.Options.OptionsSettingsSmartContext : object {
    [NotNullAttribute]
public IContextBoundSettingsStoreLive StoreOptionsTransactionContext;
    [NotNullAttribute]
public IContextBoundSettingsStoreLive StoreUnchangedSnapshotContext;
    public BindToContextFlags BindToContextFlags { get; }
    public ISignal`1<SettingsStoreChangeArgs> Changed { get; }
    public ImmutableContextBoundMountPoints InvolvedMountPoints { get; }
    public ISettingsSchema Schema { get; }
    public ISettingsStore SettingsStore { get; }
    private ILiveMountPointsInContext JetBrains.Application.Settings.IContextBoundSettingsStoreLive.InvolvedMountPointsLive { get; }
    public OptionsSettingsSmartContext(IContextBoundSettingsStoreLive storeOptionsTransaction, IContextBoundSettingsStoreLive storeUnchangedSnapshot);
    public sealed virtual BindToContextFlags get_BindToContextFlags();
    public sealed virtual ISignal`1<SettingsStoreChangeArgs> get_Changed();
    public sealed virtual ImmutableContextBoundMountPoints get_InvolvedMountPoints();
    public sealed virtual ISettingsSchema get_Schema();
    public sealed virtual ISettingsStore get_SettingsStore();
    public sealed virtual void AdviseAsyncChanged(Lifetime lifetime, AsyncChangedSinkDelegate sink);
    public sealed virtual void CreateIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void DeleteIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual ISettingsStorageMountPoint FindLayerWhereSettingValueComeFrom(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual object GetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual TEntryValue GetValue(Expression`1<Func`2<TKeyClass, TEntryValue>> lambdaExpression);
    public sealed virtual object GetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IProperty`1<TValue> GetValueProperty(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual IProperty`1<TValue> GetValueProperty2(Lifetime lifetime, SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices, ApartmentForNotifications apartmentForNotifications);
    public sealed virtual bool IsIndexedKeyDefined(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void RemoveIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void RemoveIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide);
    public sealed virtual void ResetValue(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetIndexedValue(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value);
    public sealed virtual void SetIndexedValueWithMountLastWideOverride(SettingsIndexedEntry entry, object entryIndex, IDictionary`2<SettingsKey, object> keyIndices, object value, ISettingsStorageMountPoint overrideMountLastWide);
    public sealed virtual void SetValue(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices);
    public sealed virtual void SetValueWithMountLastWideOverride(SettingsScalarEntry entry, object value, IDictionary`2<SettingsKey, object> keyIndices, ISettingsStorageMountPoint overrideMountLastWide, bool prohibitNulls);
    private sealed virtual override IEnumerable`1<object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedKey(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> parentKeyIndices, bool isIgnoringKeyIsDefined);
    private sealed virtual override IDictionary`2<object, object> JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedValues(SettingsIndexedEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override SettingsStoreChangeArgs JetBrains.Application.Settings.IContextBoundSettingsStore.GetSnapshot(SettingsKey keyRoot, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override Object[] JetBrains.Application.Settings.IContextBoundSettingsStore.GetValues(IList`1<SettingsScalarEntry> entries, IDictionary`2<SettingsKey, object> keyIndices);
    private sealed virtual override ILiveMountPointsInContext JetBrains.Application.Settings.IContextBoundSettingsStoreLive.get_InvolvedMountPointsLive();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Options.SettingsLayersDialogOwner : object {
    public virtual void Show(WindowModality modality);
}
public abstract class JetBrains.Application.UI.Options.SettingsSchemaEntryInstance : SettingsSchemaInstance {
    [NotNullAttribute]
public SettingsEntry Entry;
    protected SettingsSchemaEntryInstance(SettingsEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaIndexedEntryInstance : SettingsSchemaEntryInstance {
    public SettingsIndexedEntry Entry;
    public object EntryIndex;
    public SettingsSchemaIndexedEntryInstance(SettingsIndexedEntry entry, object entryindex, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaIndexedKeyInstance : SettingsSchemaKeyInstance {
    public SettingsIndexedKey Key;
    public SettingsSchemaIndexedKeyInstance(SettingsIndexedKey key, IDictionary`2<SettingsKey, object> keyIndices);
}
public abstract class JetBrains.Application.UI.Options.SettingsSchemaInstance : object {
    [CanBeNullAttribute]
public IDictionary`2<SettingsKey, object> KeyIndices;
    protected SettingsSchemaInstance(IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaKeyInstance : SettingsSchemaInstance {
    public SettingsKey Key;
    public SettingsSchemaKeyInstance(SettingsKey key, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsSchemaScalarEntryInstance : SettingsSchemaEntryInstance {
    public SettingsScalarEntry Entry;
    public SettingsSchemaScalarEntryInstance(SettingsScalarEntry entry, IDictionary`2<SettingsKey, object> keyIndices);
}
public class JetBrains.Application.UI.Options.SettingsStateIndicatorAutomation : AAutomation {
    [CompilerGeneratedAttribute]
private IDependentSettings <Data>k__BackingField;
    [NotNullAttribute]
public IDependentSettings Data { get; }
    public SettingsStateIndicatorAutomation(IDependentSettings data);
    [CompilerGeneratedAttribute]
public IDependentSettings get_Data();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "ManageOptionsActionText")]
public class JetBrains.Application.UI.Options.ShowSettingsLayersDialogAction : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.UI.Options.StaticOptionPagesList : object {
    public ICollectionEvents`1<OptionsPageEntity> PagesList;
    public StaticOptionPagesList(Lifetime lifetime);
    private sealed virtual override ICollection`1<OptionsPageEntity> JetBrains.Application.UI.Options.IOptionPagesList.GetOptionPages();
    private sealed virtual override void JetBrains.Application.UI.Options.IOptionPagesList.AddOptionsPage(Lifetime lifetime, Type typePage, OptionsPageAttribute attribute);
}
public class JetBrains.Application.UI.Options.TagOptionsPageKeyword : OptionsPageKeyword {
    public TagOptionsPageKeyword(string word);
}
public class JetBrains.Application.UI.Options.TreeItemOptionsPageKeyword : OptionsPageKeyword {
    [CompilerGeneratedAttribute]
private OptionsPageKeyword <VislbleKeyword>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<HiddenOptionsPageKeyword> <HiddenOptionsPageKeywords>k__BackingField;
    [CompilerGeneratedAttribute]
private object <KeywordContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TreeItemOptionsPageKeyword> <Children>k__BackingField;
    public OptionsPageKeyword VislbleKeyword { get; }
    public IEnumerable`1<HiddenOptionsPageKeyword> HiddenOptionsPageKeywords { get; }
    public object KeywordContainer { get; public set; }
    public IEnumerable`1<TreeItemOptionsPageKeyword> Children { get; }
    public TreeItemOptionsPageKeyword(OptionsPageKeyword vislbleKeyword, IEnumerable`1<TreeItemOptionsPageKeyword> children, IEnumerable`1<HiddenOptionsPageKeyword> hiddenOptionsPageKeywords, object keywordContainer);
    [CompilerGeneratedAttribute]
public OptionsPageKeyword get_VislbleKeyword();
    [CompilerGeneratedAttribute]
public IEnumerable`1<HiddenOptionsPageKeyword> get_HiddenOptionsPageKeywords();
    [CompilerGeneratedAttribute]
public object get_KeywordContainer();
    [CompilerGeneratedAttribute]
public void set_KeywordContainer(object value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TreeItemOptionsPageKeyword> get_Children();
}
public static class JetBrains.Application.UI.Options.TreeKeywordBuilder : object {
    public static IEnumerable`1<TreeItemOptionsPageKeyword> GetTreeKeywords(IEnumerable`1<T> items, Func`2<T, string> getVisibleTextFunc, Func`2<T, IEnumerable`1<T>> getChildrenFunc, Func`2<T, IEnumerable`1<string>> getHiddenTextsFunc);
    private static TreeItemOptionsPageKeyword GetTreeItemKeyword(T item, Func`2<T, string> getVisibleTextFunc, Func`2<T, IEnumerable`1<T>> getChildrenFunc, Func`2<T, IEnumerable`1<string>> getHiddenTextsFunc);
    public static IEnumerable`1<TreeItemOptionsPageKeyword> GetTreeKeywords(IEnumerable`1<TGroup> groups, Func`2<TGroup, string> getGroupVisibleTextFunc, Func`2<TItem, string> getItemVisibleTextFunc, Func`2<TGroup, IEnumerable`1<TItem>> getChildrenFunc, Func`2<TItem, IEnumerable`1<string>> getHiddenTextsFunc);
    private static TreeItemOptionsPageKeyword GetTreeItemKeyword(TGroup item, Func`2<TGroup, string> getGroupVisibleTextFunc, Func`2<TItem, string> getItemVisibleTextFunc, Func`2<TGroup, IEnumerable`1<TItem>> getChildrenFunc, Func`2<TItem, IEnumerable`1<string>> getHiddenTextsFunc);
}
public interface JetBrains.Application.UI.PersistableDocument.IPersistableView {
    public PersistableDocument Document { get; }
    public string ViewCaption { get; public set; }
    public WindowFrame WindowFrame { get; }
    public abstract virtual PersistableDocument get_Document();
    public abstract virtual string get_ViewCaption();
    public abstract virtual void set_ViewCaption(string value);
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual WindowFrame get_WindowFrame();
}
public class JetBrains.Application.UI.PersistableDocument.PersistableDocument : object {
    [NotNullAttribute]
public IProperty`1<IconId> Icon;
    [NotNullAttribute]
public IProperty`1<bool> IsDirty;
    [NotNullAttribute]
public string Moniker;
    [NotNullAttribute]
public ISimpleSignal SaveRequested;
    public PersistableDocument(string moniker);
}
public class JetBrains.Application.UI.PopupLayout.AnchoringRect : object {
    [CompilerGeneratedAttribute]
private IProperty`1<JetPhysicalRect> <Rectangle>k__BackingField;
    public IProperty`1<JetPhysicalRect> Rectangle { get; }
    public AnchoringRect(JetPhysicalRect anchor);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<JetPhysicalRect> get_Rectangle();
    public virtual string ToString();
}
public class JetBrains.Application.UI.PopupLayout.DockingLayouter : object {
    private StickyDisposition myDispositions;
    private Property`1<LayoutResult> myLayout;
    private JetThickness myPadding96;
    private Property`1<JetPhysicalSize> mySize;
    private bool mySuppressLayout;
    private bool myUseStickyDispositions;
    [NotNullAttribute]
public IProperty`1<IAnchoringRect> Anchor;
    public ICollection`1<Anchoring2D> Dispositions { get; public set; }
    public JetThickness Padding96 { get; public set; }
    public bool UseStickyDispositions { get; public set; }
    private IProperty`1<LayoutResult> JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout { get; }
    private IProperty`1<JetPhysicalSize> JetBrains.Application.UI.PopupLayout.IPopupLayouter.Size { get; }
    public DockingLayouter(Lifetime lifetime, IAnchoringRect anchor);
    public DockingLayouter(Lifetime lifetime, IAnchoringRect anchor, ICollection`1<Anchoring2D> dispositions, double padding96, bool stickydispositions);
    public DockingLayouter(Lifetime lifetime, IAnchoringRect anchor, ICollection`1<Anchoring2D> dispositions, JetThickness padding96, bool stickydispositions);
    public ICollection`1<Anchoring2D> get_Dispositions();
    public void set_Dispositions(ICollection`1<Anchoring2D> value);
    public JetThickness get_Padding96();
    public void set_Padding96(JetThickness value);
    public bool get_UseStickyDispositions();
    public void set_UseStickyDispositions(bool value);
    private static JetPhysicalRect GetScreenBounds(JetPhysicalRect rectAnchor);
    private sealed virtual override IProperty`1<LayoutResult> JetBrains.Application.UI.PopupLayout.IPopupLayouter.get_Layout();
    private sealed virtual override IProperty`1<JetPhysicalSize> JetBrains.Application.UI.PopupLayout.IPopupLayouter.get_Size();
    private void UpdateLayout();
    [CompilerGeneratedAttribute]
private void <.ctor>b__8_1(PropertyChangedEventArgs`1<LayoutResult> args);
}
public class JetBrains.Application.UI.PopupLayout.DockingLayouterDescriptor : object {
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IAnchoringRect <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private Anchoring2D[] <Dispositions>k__BackingField;
    public Lifetime Lifetime { get; }
    [NotNullAttribute]
public IAnchoringRect Anchor { get; }
    public Anchoring2D[] Dispositions { get; }
    public DockingLayouterDescriptor(Lifetime lifetime, IAnchoringRect anchor, Anchoring2D[] dispositions);
    [CompilerGeneratedAttribute]
public Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public IAnchoringRect get_Anchor();
    [CompilerGeneratedAttribute]
public Anchoring2D[] get_Dispositions();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.PopupLayout.DummyMainWindowPopupWindowContext : object {
    private static PopupWindowContextSource myPopupWindowContextSource;
    private PopupWindowContextSource JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext.Source { get; }
    private static DummyMainWindowPopupWindowContext();
    protected virtual PopupWindowContextSource GetSourceCore();
    private sealed virtual override PopupWindowContextSource JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext.get_Source();
}
public class JetBrains.Application.UI.PopupLayout.ExternallyDrivenPopupLayouter : object {
    private Property`1<LayoutResult> myLayout;
    private Property`1<JetPhysicalSize> mySize;
    private IProperty`1<LayoutResult> JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout { get; }
    private IProperty`1<JetPhysicalSize> JetBrains.Application.UI.PopupLayout.IPopupLayouter.Size { get; }
    private sealed virtual override IProperty`1<LayoutResult> JetBrains.Application.UI.PopupLayout.IPopupLayouter.get_Layout();
    private sealed virtual override IProperty`1<JetPhysicalSize> JetBrains.Application.UI.PopupLayout.IPopupLayouter.get_Size();
}
public enum JetBrains.Application.UI.PopupLayout.FormHideMethod : Enum {
    public int value__;
    public static FormHideMethod Visibility;
    public static FormHideMethod Closing;
    public static FormHideMethod FocusingAndClosing;
}
public interface JetBrains.Application.UI.PopupLayout.IAnchoringRect {
    public IProperty`1<JetPhysicalRect> Rectangle { get; }
    public abstract virtual IProperty`1<JetPhysicalRect> get_Rectangle();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext {
    [NotNullAttribute]
public PopupWindowContextSource Source { get; }
    public abstract virtual PopupWindowContextSource get_Source();
}
public interface JetBrains.Application.UI.PopupLayout.IPopupLayouter {
    public IProperty`1<LayoutResult> Layout { get; }
    public IProperty`1<JetPhysicalSize> Size { get; }
    public abstract virtual IProperty`1<LayoutResult> get_Layout();
    public abstract virtual IProperty`1<JetPhysicalSize> get_Size();
}
public interface JetBrains.Application.UI.PopupLayout.IPopupWindow {
    public IPopupWindowContext Context { get; }
    public FormHideMethod HideMethod { get; public set; }
    public bool IsDisposed { get; }
    public PopupWindowLayoutMode LayoutMode { get; public set; }
    [NotNullAttribute]
public PopupWindowMutex Mutex { get; }
    public bool Visible { get; }
    public abstract virtual IPopupWindowContext get_Context();
    public abstract virtual FormHideMethod get_HideMethod();
    public abstract virtual void set_HideMethod(FormHideMethod value);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual PopupWindowLayoutMode get_LayoutMode();
    public abstract virtual void set_LayoutMode(PopupWindowLayoutMode value);
    public abstract virtual PopupWindowMutex get_Mutex();
    public abstract virtual bool get_Visible();
    public abstract virtual void HideWindow();
    public abstract virtual bool ShowWindow();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
}
public interface JetBrains.Application.UI.PopupLayout.IPopupWindowContext {
    [NotNullAttribute]
public abstract virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    public abstract virtual void FireAnyOtherAction();
    public abstract virtual void FireDeactivated();
    public abstract virtual void FireScroll();
    public abstract virtual void FireSelectionChanged();
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnyOtherAction(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnyOtherAction(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EscapePressed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EscapePressed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanged(EventHandler value);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.PopupLayout.IPopupWindowContextEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IPopupWindowContext OverrideLayouter(IPopupWindowContext thіs, Lifetime lifetime, Func`2<Lifetime, IPopupLayouter> FCreateLayouter);
    [ExtensionAttribute]
[NotNullAttribute]
public static PopupWindowContextSource OverrideLayouter(PopupWindowContextSource thіs, Func`2<Lifetime, IPopupLayouter> FCreateLayouter);
}
public class JetBrains.Application.UI.PopupLayout.LastKnownGoodAnchoringRect : AnchoringRect {
    public LastKnownGoodAnchoringRect(Lifetime lifetime, IAnchoringRect underlyingRect, Func`2<JetPhysicalRect, bool> predicate);
}
[IsReadOnlyAttribute]
public class JetBrains.Application.UI.PopupLayout.LayoutResult : ValueType {
    public static LayoutResult Empty;
    public JetPhysicalRect AnchoringRect;
    public JetPhysicalRect Bounds;
    public Anchoring2D Disposition;
    public DpiResolution DpiResolution;
    public JetPhysicalRect Room;
    public JetPhysicalPoint Location { get; }
    public JetPhysicalSize Size { get; }
    public LayoutResult(JetPhysicalRect& room, JetPhysicalRect& bounds, JetPhysicalRect& anchor, Anchoring2D& disposition, DpiResolution& dpi);
    public JetPhysicalPoint get_Location();
    public JetPhysicalSize get_Size();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(LayoutResult α, LayoutResult β);
    public static bool op_Inequality(LayoutResult ξ, LayoutResult η);
    public virtual string ToString();
    public LayoutResult WithBounds(JetPhysicalRect& bounds);
}
public class JetBrains.Application.UI.PopupLayout.MousePositionPopupWindowContext : PopupWindowContext {
    [NotNullAttribute]
public static Func`2<Lifetime, IPopupLayouter> LayouterFactory;
    [NotNullAttribute]
public static PopupWindowContextSource Source;
    public MousePositionPopupWindowContext(Lifetime lifetime);
    private static MousePositionPopupWindowContext();
    public virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
}
public class JetBrains.Application.UI.PopupLayout.NestedAnchoringRect : AnchoringRect {
    public IProperty`1<IAnchoringRect> Nested;
    public IProperty`1<IAnchoringRect> Outer;
    public NestedAnchoringRect(Lifetime lifetime, IAnchoringRect nested, IAnchoringRect outer);
    public NestedAnchoringRect(Lifetime lifetime);
    private void UpdateAnchor();
}
public abstract class JetBrains.Application.UI.PopupLayout.PopupWindowContext : UserDataHolder {
    [NotNullAttribute]
private SequentialLifetimes myEscapeHandlerLifetimesSequence;
    [CanBeNullAttribute]
private IActionManager myActionManager;
    [CanBeNullAttribute]
private PopupWindowContextSpecificEscapeActionHandler myEscapeActionHandler;
    private EventHandler myDelegateEscapePressed;
    protected Lifetime myLifetime;
    private static Statistics Statistics;
    [CompilerGeneratedAttribute]
private EventHandler AnyOtherAction;
    [CompilerGeneratedAttribute]
private EventHandler Deactivated;
    [CompilerGeneratedAttribute]
private EventHandler Scroll;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    protected PopupWindowContext(Lifetime lifetime, IActionManager actionManager);
    private static PopupWindowContext();
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnyOtherAction(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnyOtherAction(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Deactivated(EventHandler value);
    public virtual void add_EscapePressed(EventHandler value);
    public virtual void remove_EscapePressed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Scroll(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SelectionChanged(EventHandler value);
    public abstract virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
    public sealed virtual void FireAnyOtherAction();
    public sealed virtual void FireDeactivated();
    public sealed virtual void FireScroll();
    public sealed virtual void FireSelectionChanged();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.PopupLayout.PopupWindowContextFromDataContextEx : object {
    private static object ourMarker;
    private static Key`1<object> ourKeyMarker;
    private static PopupWindowContextFromDataContextEx();
    [ExtensionAttribute]
public static IPopupWindowContext MarkAsOriginatedFromDataContext(IPopupWindowContext that);
    [ExtensionAttribute]
public static bool IsOriginatedFromDataContext(IPopupWindowContext that);
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowContextSource : object {
    [NotNullAttribute]
private Func`2<Lifetime, IPopupWindowContext> myFCreate;
    public PopupWindowContextSource(Func`2<Lifetime, IPopupWindowContext> FCreate);
    [NotNullAttribute]
public IPopupWindowContext Create(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private object <Create>b__2_0();
    [CompilerGeneratedAttribute]
private object <Create>b__2_1();
    [CompilerGeneratedAttribute]
private object <Create>b__2_2();
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowContextSpecificEscapeActionHandler : EscapeActionHandlerBase {
    private EventHandler myEscapeHandler;
    private IPopupWindowContext myPopupWindowContext;
    public PopupWindowContextSpecificEscapeActionHandler(IPopupWindowContext popupWindowContext, EventHandler escapeHandler, IActionManager actionManager);
    protected virtual void Execute(IDataContext dataContext);
    protected virtual bool IsAvailable(IDataContext dataContext);
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowContextWithAnotherLayouter : object {
    private Lifetime myLifetime;
    private IPopupWindowContext myOriginal;
    private Func`2<Lifetime, IPopupLayouter> myFCreateLayouter;
    public PopupWindowContextWithAnotherLayouter(Lifetime lifetime, IPopupWindowContext original, Func`2<Lifetime, IPopupLayouter> FCreateLayouter);
    private sealed virtual override IPopupLayouter JetBrains.Application.UI.PopupLayout.IPopupWindowContext.CreateLayouter(Lifetime lifetime);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireAnyOtherAction();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireDeactivated();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireScroll();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireSelectionChanged();
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_AnyOtherAction(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_AnyOtherAction(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_Deactivated(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_Deactivated(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_EscapePressed(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_EscapePressed(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_Scroll(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_Scroll(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.add_SelectionChanged(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.PopupLayout.IPopupWindowContext.remove_SelectionChanged(EventHandler value);
}
public enum JetBrains.Application.UI.PopupLayout.PopupWindowLayoutMode : Enum {
    public int value__;
    public static PopupWindowLayoutMode None;
    public static PopupWindowLayoutMode Full;
}
public class JetBrains.Application.UI.PopupLayout.PopupWindowMutex : object {
    public virtual void WindowAdded(IPopupWindow window, IEnumerable`1<IPopupWindow> arSameMutexWindows, ICollectionEvents`1<IPopupWindow> arAllWindows);
    public virtual void WindowRemoved(IPopupWindow window, IEnumerable`1<IPopupWindow> arSameMutexWindows, ICollectionEvents`1<IPopupWindow> arAllWindows);
}
public class JetBrains.Application.UI.PopupLayout.RectangleDocker : ValueType {
    private ICollection`1<Anchoring2D> myAllowedDispositions;
    private JetPhysicalRect myAnchoringRect;
    private Anchoring2D myCandidateDisposition;
    private int myCandidateRatio;
    private JetPhysicalRect myCandidateRect;
    private JetPhysicalRect myCandidateRoom;
    private JetPhysicalThickness myPadding;
    private JetPhysicalRect myScreen;
    private JetPhysicalSize mySize;
    public ICollection`1<Anchoring2D> AllowedDispositions { get; }
    public JetPhysicalRect AnchoringRect { get; }
    public Anchoring2D CandidateDisposition { get; }
    public int CandidateRatio { get; }
    public JetPhysicalRect CandidateRect { get; }
    public JetPhysicalRect CandidateRoom { get; }
    public JetPhysicalThickness Padding { get; }
    public LayoutResult Result { get; }
    public JetPhysicalRect Screen { get; }
    public JetPhysicalSize Size { get; }
    public RectangleDocker(JetPhysicalRect rectAnchor, JetPhysicalSize size, ICollection`1<Anchoring2D> dispositionsAllowed, JetPhysicalRect screen);
    public RectangleDocker(JetPhysicalRect rectAnchor, JetPhysicalSize size, ICollection`1<Anchoring2D> dispositionsAllowed, JetPhysicalRect screen, JetPhysicalThickness padding);
    public ICollection`1<Anchoring2D> get_AllowedDispositions();
    public JetPhysicalRect get_AnchoringRect();
    public Anchoring2D get_CandidateDisposition();
    public int get_CandidateRatio();
    public JetPhysicalRect get_CandidateRect();
    public JetPhysicalRect get_CandidateRoom();
    public JetPhysicalThickness get_Padding();
    public LayoutResult get_Result();
    public JetPhysicalRect get_Screen();
    public JetPhysicalSize get_Size();
    private void Attach();
    private bool AttachRect(JetPhysicalRect rectAnchor, Anchoring2D disposition);
    private bool AttachRectInside(JetPhysicalRect rectAnchorPadded, Anchoring2D disposition);
    private bool AttachRectMiddle(Anchoring2D disposition, JetPhysicalRect rectAnchor);
    private bool AttachRectOutside(JetPhysicalRect rectAnchorPadded, Anchoring2D dispositionAttachment, Anchoring2D dispositionOriginal);
    private void CenterHorizontally(JetPhysicalPoint ptCenter, JetPhysicalRect& rectCandidate);
    private void CenterVertically(JetPhysicalPoint ptCenter, JetPhysicalRect& rectCandidate);
    private bool CheckCandidate(JetPhysicalRect& rectCandidate, JetPhysicalRect rectRoom, Anchoring2D disposition);
}
public class JetBrains.Application.UI.PopupLayout.SimplePopupWindowContext : PopupWindowContext {
    private Func`2<Lifetime, IPopupLayouter> myFactory;
    public SimplePopupWindowContext(Lifetime lifetime, Func`2<Lifetime, IPopupLayouter> factory);
    public virtual IPopupLayouter CreateLayouter(Lifetime lifetime);
}
public class JetBrains.Application.UI.PopupLayout.StickyDisposition : object {
    protected List`1<Anchoring2D> myDispositions;
    public ICollection`1<Anchoring2D> Dispositions { get; public set; }
    public StickyDisposition(ICollection`1<Anchoring2D> dispositions);
    public ICollection`1<Anchoring2D> get_Dispositions();
    public void set_Dispositions(ICollection`1<Anchoring2D> value);
    public void Promote(Anchoring2D disposition);
    public virtual string ToString();
}
public enum JetBrains.Application.UI.Progress.TaskThreadAffinity : Enum {
    public int value__;
    public static TaskThreadAffinity Primary;
    public static TaskThreadAffinity Free;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Progress.UITaskExecutor : object {
    [CompilerGeneratedAttribute]
private ILazy`1<UITaskExecutorSwitchingImplementation> <switchingImplementation>P;
    public ITaskExecutor FreeThreaded { get; }
    public ICollectionEvents`1<RunningTaskExecutor> RunningTaskExecutors { get; }
    public ITaskExecutor SingleThreaded { get; }
    public UITaskExecutor(ILazy`1<UITaskExecutorSwitchingImplementation> switchingImplementation);
    public ITaskExecutor get_FreeThreaded();
    public ICollectionEvents`1<RunningTaskExecutor> get_RunningTaskExecutors();
    public ITaskExecutor get_SingleThreaded();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Progress.UITaskExecutorSwitchingImplementation : object {
    protected TaskExecutorNotification myTaskExecutorNotification;
    public ICollectionEvents`1<RunningTaskExecutor> RunningTaskExecutors;
    public virtual ITaskExecutor CreateExecutor(TaskThreadAffinity threading, IWin32Window mainWindow);
    protected virtual void Notification(Lifetime lifetime, TaskCancelable cancelable, RunningTaskExecutor session);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(Lifetime lifetime, TaskCancelable cancelable, RunningTaskExecutor session);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Progress.WorkerThreadShop : object {
    private ObsoleteLifetimeAndDefinitionAtTheSameTime Disposables;
    private CollectionEvents`1<JetDispatcher> myThreads;
    [NotNullAttribute]
public JetDispatcher Create(Lifetime lifetime, string name);
    public sealed virtual void Dispose();
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.PropertiesWindow.DefaultPropertiesWindowManager : object {
    public virtual bool IsAvailable();
    public virtual void ShowPropertiesWindow();
}
public abstract class JetBrains.Application.UI.PropertiesWindow.GridData : CustomTypeDescriptor {
    protected static string NotAvailable;
    protected static string Separator;
    private string myObjectName;
    private string myObjectType;
    private TypeConverter myConverter;
    private TypeConverter Converter { get; }
    protected GridData(string objectName, string objectType);
    protected static string PresentSize(long sizeInBytes);
    [NotNullAttribute]
protected static string PresentSize(IAssemblyLocation fileLocation);
    [NotNullAttribute]
protected static string PresentSize(IFileInfo`1<T> fileInfo);
    private TypeConverter get_Converter();
    public sealed virtual string GetComponentName();
    public sealed virtual string GetClassName();
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual TypeConverter GetConverter();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public virtual object GetPropertyOwner(PropertyDescriptor pd);
}
public interface JetBrains.Application.UI.PropertiesWindow.IPropertiesWindowManager {
    public abstract virtual bool IsAvailable();
    public abstract virtual void ShowPropertiesWindow();
}
[ActionAttribute("JetBrains.Application.Resources.Strings", "PropertiesActionText")]
public class JetBrains.Application.UI.PropertiesWindow.ShowPropertiesWindowAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
public class JetBrains.Application.UI.Settings.AnchorSettingsLayerDataConstant : object {
    [NotNullAttribute]
public Identity Value;
    public static DataConstant`1<AnchorSettingsLayerDataConstant> DataConstant;
    public AnchorSettingsLayerDataConstant(Identity value);
    private static AnchorSettingsLayerDataConstant();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.Settings.DataConstants : object {
    public static DataConstant`1<Identity> SingleSelectedUserFriendlySettingsLayer;
    public static DataConstant`1<UserInjectedSettingsLayer> SingleSelectedUserInjectedSettingsLayer;
    public static DataConstant`1<IList`1<Identity>> SelectedUserFriendlySettingsLayers;
    public static DataConstant`1<UserInjectedLayersHostData> InjectedLayersHost_IncludingHostItself;
    public static DataConstant`1<UserInjectedLayersHostData> InjectedLayersHost_ExcludeHostItself;
    public static DataConstant`1<Boxed`1<Lifetime>> ManageLayersDialogLifetime;
    public DataConstants(Lifetime lifetime, DataContexts dcs, UserInjectedSettingsLayers injections);
    private static DataConstants();
    public static Lifetime GetManageLayersDialogLifetime(IDataContext context);
}
[SettingsKeyAttribute("JetBrains.Application.UI.Settings.LayoutSettings", "JetBrains.Application.Resources.Strings", "MRUPositionsAndSizesOfApplicationWindowsSettingDescription")]
public class JetBrains.Application.UI.Settings.DialogWindowsSettings : object {
}
public class JetBrains.Application.UI.Settings.ImportExport.Automation.SourceSelectionAutomation : object {
    public IProperty`1<int> SelectedSourceIndex;
    public StoreMode Store;
    public MountingPointMode MountingPoint;
    public FileStorageMode FileStorage;
    public AllModesCommon Common;
    public SourceSelectionAutomation(Lifetime lifetime, SettingsSourceModel model, bool isForWriting);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class JetBrains.Application.UI.Settings.ImportExport.Model.ImportExportRun : object {
    public static void Run(SettingsSourceModel from, SettingsSourceModel to, IExceptionThrowingLogger logger, InternKeyPathComponent interned, Action`1<ISettingsStorageMountPoint> FFilter);
}
public class JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel : object {
    public IProperty`1<SourceKind> SelectedSource;
    public StoreMode Store;
    public MountingPointMode MountingPoint;
    public FileStorageMode FileStorage;
    public AllModesCommon Common;
    public ISettingsStore SettingsStore;
    public SettingsSourceModel(Lifetime lifetime, ISettingsStore store, WebProxySettingsReader webProxySettingsReader, InternKeyPathComponent interned);
    public void ReadFromSelectedSource(ISettingsStorageMountPoint mountReadInto, IExceptionThrowingLogger logger);
    public void WriteToSelectedSource(ISettingsStorageMountPoint mountWriteFrom, IExceptionThrowingLogger logger);
    [CompilerGeneratedAttribute]
private object <ReadFromSelectedSource>b__12_0();
    [CompilerGeneratedAttribute]
private object <WriteToSelectedSource>b__13_0();
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings", "JetBrains.Application.Resources.Strings", "LayoutOfTheCustomizedUserInterfaceSettingDescription")]
public class JetBrains.Application.UI.Settings.LayoutSettings : object {
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.StdApplicationUI.StatusBar.MemoryUsageIndicatorBase : object {
    [NotNullAttribute]
[GuardAttribute("-1")]
public ISimpleSignal GarbageCollectionRequested;
    public MemoryUsageIndicatorBase(Lifetime lifetime);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "MemoryUsageIndicatorInTheStatusBarSettingDescription")]
public class JetBrains.Application.UI.StdApplicationUI.StatusBar.MemoryUsageIndicatorSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherToShowTheMemoryUsageIndicatorInTheStatusBarOfTheApplicationMainWindowSettingDescription")]
public bool IsVisible;
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.StdApplicationUI.StatusBar.SubclassedStatusBar : object {
    public ISimpleSignal UpdateStatusBarRequested;
    public SubclassedStatusBar(Lifetime lifetime);
}
public interface JetBrains.Application.UI.Theming.IApplicationThemingConfig {
    public IProperty`1<bool> UseMainWindowChrome { get; }
    public IProperty`1<Theme> CurrentTheme { get; }
    public IProperty`1<bool> SyncToVsTheme { get; }
    public abstract virtual IProperty`1<bool> get_UseMainWindowChrome();
    public abstract virtual IProperty`1<Theme> get_CurrentTheme();
    public abstract virtual IProperty`1<bool> get_SyncToVsTheme();
}
public enum JetBrains.Application.UI.Theming.Theme : Enum {
    public int value__;
    public static Theme Blue;
    public static Theme Dark;
    public static Theme Light;
    public static Theme Generic;
}
public interface JetBrains.Application.UI.Tooltips.ITooltipInfo {
    [NotNullAttribute]
public IAutomation PainterAutomation { get; }
    [CanBeNullAttribute]
public PopupWindowContextSource PopupWindowContext { get; }
    public abstract virtual IAutomation get_PainterAutomation();
    public abstract virtual PopupWindowContextSource get_PopupWindowContext();
    public abstract virtual bool HitTestToolArea(JetPoint pt);
}
public interface JetBrains.Application.UI.Tooltips.ITooltipManager {
    public JetThickness ContentMargin { get; }
    public TimeSpan HoverDelay { get; }
    [NotNullAttribute]
public PopupWindowMutex PopupWindowMutex { get; }
    public abstract virtual JetThickness get_ContentMargin();
    public abstract virtual TimeSpan get_HoverDelay();
    public abstract virtual PopupWindowMutex get_PopupWindowMutex();
    [NotNullAttribute]
public abstract virtual RenderParams GetRenderParams(DpiResolution resolution);
    [CanBeNullAttribute]
public abstract virtual IPopupWindow Show(LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context, Nullable`1<HideFlags> hideflags, Nullable`1<TimeSpan> timeout);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.Tooltips.ITooltipManagerEx : object {
    [ExtensionAttribute]
public static void Show(ITooltipManager manager, string text, PopupWindowContextSource contextsource);
    [ExtensionAttribute]
public static void Show(ITooltipManager manager, RichText text, PopupWindowContextSource contextsource);
    [ExtensionAttribute]
public static void Show(ITooltipManager manager, RichText text, PopupWindowContextSource contextsource, Nullable`1<HideFlags> hideflags, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static void Show(ITooltipManager manager, RichTextBlock text, PopupWindowContextSource contextsource);
    [ExtensionAttribute]
public static void Show(ITooltipManager manager, IAutomation automation, PopupWindowContextSource contextsource);
    [ExtensionAttribute]
public static bool ShowIfPopupWindowContext(ITooltipManager tooltipman, string message, IDataContext datacontext);
}
public interface JetBrains.Application.UI.Tooltips.ITooltipProvider {
    [CanBeNullAttribute]
public abstract virtual ITooltipInfo GetTooltip(Lifetime lifetime, JetPhysicalPoint point);
}
public static class JetBrains.Application.UI.Tooltips.TooltipConfig : object {
    public static TimeSpan myDefaultTimeout;
    public static HideFlags HideFlagsDefault;
    public static TimeSpan DefaultTimeout { get; }
    private static TooltipConfig();
    public static TimeSpan get_DefaultTimeout();
    public static bool GetCanShowTooltips(IIsApplicationActiveState isApplicationActiveState);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Tooltips.TooltipManagerComponent : object {
    protected static PopupWindowMutex myPopupWindowMutex;
    private JetThickness JetBrains.Application.UI.Tooltips.ITooltipManager.ContentMargin { get; }
    private TimeSpan JetBrains.Application.UI.Tooltips.ITooltipManager.HoverDelay { get; }
    private PopupWindowMutex JetBrains.Application.UI.Tooltips.ITooltipManager.PopupWindowMutex { get; }
    private static TooltipManagerComponent();
    private sealed virtual override JetThickness JetBrains.Application.UI.Tooltips.ITooltipManager.get_ContentMargin();
    protected virtual JetThickness GetContentMarginCore();
    private sealed virtual override RenderParams JetBrains.Application.UI.Tooltips.ITooltipManager.GetRenderParams(DpiResolution resolution);
    protected virtual RenderParams GetRenderParamsCore(DpiResolution resolution);
    private sealed virtual override TimeSpan JetBrains.Application.UI.Tooltips.ITooltipManager.get_HoverDelay();
    private sealed virtual override PopupWindowMutex JetBrains.Application.UI.Tooltips.ITooltipManager.get_PopupWindowMutex();
    private sealed virtual override IPopupWindow JetBrains.Application.UI.Tooltips.ITooltipManager.Show(LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context, Nullable`1<HideFlags> hideflags, Nullable`1<TimeSpan> timeout);
    protected virtual IPopupWindow ShowCore(LifetimeDefinition lifetimeDefinition, IAutomation automation, IPopupWindowContext context, Nullable`1<HideFlags> hideflags, Nullable`1<TimeSpan> timeout);
}
public class JetBrains.Application.UI.ToolWindowManagement.ActivateToolWindowActionHandler`1 : object {
    public virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("Dump tool windows state")]
public class JetBrains.Application.UI.ToolWindowManagement.DumpToolWindowStateActionHandler : object {
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.ToolWindowManagement.FactorToolWindowContent : object {
    [CompilerGeneratedAttribute]
private DataContexts <myDataContexts>P;
    [CompilerGeneratedAttribute]
private IThreading <myThreading>P;
    [CompilerGeneratedAttribute]
private ILogger <myLogger>P;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<ValueTuple`2<Lifetime, IComponentContainer>> myContainerForAutoCreatedToolWindowContent;
    public FactorToolWindowContent(DataContexts myDataContexts, IThreading myThreading, ILogger myLogger);
    [ShellComponentAttribute("36")]
public static void AutoCreatedToolWindowContentOwner(Lifetime lifetime, IComponentContainer container, FactorToolWindowContent target);
    public static IAutomation FactorAndWrapPromise(Lifetime lifetime, ILazy`1<FactorToolWindowContent> futureContentFactory, Type typeofContent, FactoringContainerChoice containerChoice, TaskPriority priority, IThreading threading, Object[] args);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.ToolWindowManagement.FactorToolWindowContent/<FactorAsync>d__7")]
[NotNullAttribute]
public Task`1<IAutomation> FactorAsync(Lifetime lifetime, Type typeofContent, FactoringContainerChoice containerChoice, TaskPriority priority, Object[] args);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.ToolWindowManagement.FactorToolWindowContent/<GetAppWideContainerFromDataContext>d__8")]
private Task`1<ValueTuple`2<Nullable`1<Lifetime>, IComponentContainer>> GetAppWideContainerFromDataContext(OuterLifetime lifetime, TaskPriority priority);
    [CompilerGeneratedAttribute]
private ComponentContainerForFactoring <GetAppWideContainerFromDataContext>b__8_0(Lifetime lifeDc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class JetBrains.Application.UI.ToolWindowManagement.NestedContainerToolWindowContent`1 : NestedAutomationWrapper {
    private static ReadonlyToken myReadonly;
    protected NestedContainerToolWindowContent`1(Lifetime lifetime, Optional`1<ToolWindowInstance> twi, IProperty`1<IComponentContainer> propNestedContainer, IAsyncComposeManager asyncComposeManager, IThreading threading);
    private static NestedContainerToolWindowContent`1();
    [AsyncStateMachineAttribute("JetBrains.Application.UI.ToolWindowManagement.NestedContainerToolWindowContent`1/<CreateInstanceCore>d__2")]
private static Task`1<TContent> CreateInstanceCore(Lifetime lifetime, IComponentContainer container, IAsyncComposeManager asyncComposeManager, IThreading threading, Optional`1<ToolWindowInstance> twi);
}
[ActionAttribute("Open All Tool Windows")]
public class JetBrains.Application.UI.ToolWindowManagement.OpenAllToolWindowsAction : object {
    [AsyncStateMachineAttribute("JetBrains.Application.UI.ToolWindowManagement.OpenAllToolWindowsAction/<OpenAllToolWindowsAsync>d__0")]
public static Task OpenAllToolWindowsAsync(ILazy`1<ToolWindowManager> twman, IThreading threading);
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
}
[ActionAttribute("Open Tool Window…")]
public class JetBrains.Application.UI.ToolWindowManagement.OpenToolWindowAction : object {
    private sealed virtual override void JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute(IDataContext context, DelegateExecute nextExecute);
    private sealed virtual override bool JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    [CompilerGeneratedAttribute]
internal static string <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute>g__GetMenuText|0_9(List`1<SimpleMenuItem> items);
    [CompilerGeneratedAttribute]
internal static string <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute>g__GetText|0_23(SimpleMenuItem item);
    [CompilerGeneratedAttribute]
internal static string <JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction.Execute>g__DumpToolWindowText|0_10(ToolWindowManager twman);
}
public class JetBrains.Application.UI.ToolWindowManagement.QueryCloseInstancesArgs : object {
    public List`1<ToolWindowInstance> InstancesToClose;
    public bool Cancel;
}
[DebuggerDisplayAttribute("Descriptor:{Descriptor}")]
public class JetBrains.Application.UI.ToolWindowManagement.SingleInstanceToolWindowClass : ToolWindowClass {
    private ToolWindowInstanceInfo mySingleInstance;
    public ToolWindowInstance[] Instances { get; }
    public SingleInstanceToolWindowClass(Lifetime lifetime, ToolWindowDescriptor descriptor, TopLevelToolWindowFrameFactory toolWindowFrameFactory, ToolWindowListener toolWindowListener, IThreading threading, ILazy`1<FactorToolWindowContent> contentfactory, UIReady ui);
    public virtual ToolWindowInstance[] get_Instances();
    public virtual ToolWindowInstance RegisterInstance(Lifetime lifetime, string title, IconId icon, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    protected virtual void AdjustToplevelFrameContent();
    internal virtual void CloseInstance(ToolWindowInstance instance);
    internal virtual void ShowInstance(ToolWindowInstance instance, bool activate);
    internal virtual void EnsureControlCreated(ToolWindowInstance toolWindowInstance);
    internal virtual void UpdateInstanceContentFactory(ToolWindowInstance instance, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    public virtual void DumpState(IndentedTextWriter tw);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0();
}
public class JetBrains.Application.UI.ToolWindowManagement.TabbedToolWindowClass : ToolWindowClass {
    private HelpSystem myHelpSystem;
    private ICollectionEvents`1<ToolWindowInstanceInfo> myInstances;
    private TabbedToolWindowTabStripAutomation myTabStrip;
    private SequentialLifetimes myTopLevelContentLifetime;
    private ToolWindowContent myTopLevelContent;
    private bool myIsPageClosedByUser;
    public ToolWindowInstance[] Instances { get; }
    public TabbedToolWindowClass(Lifetime lifetime, ToolWindowDescriptor descriptor, TabbedToolWindowOptions options, TopLevelToolWindowFrameFactory toolWindowFrameFactory, ToolWindowListener toolWindowListener, ILazy`1<TabRenamePrompt> tabRenamePrompt, IThreading threading, HelpSystem helpSystem, ILazy`1<FactorToolWindowContent> contentfactory, UIReady ui);
    private void InitTabRename(Lifetime lifetime, ILazy`1<TabRenamePrompt> tabRenamePrompt);
    private void CloseInstance(ToolWindowInstanceInfo twi);
    public virtual ToolWindowInstance[] get_Instances();
    public TabStripPageFrame GetFrame(ToolWindowInstance instance);
    public ToolWindowInstance[] GetTabInstanceSequence();
    public virtual ToolWindowInstance RegisterInstance(Lifetime parentLifetime, string title, IconId icon, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    private ToolWindowInstance[] QueryClose(ToolWindowInstance[] instances);
    protected virtual void AdjustToplevelFrameContent();
    private ToolWindowContent EnsureTopLevelContent();
    internal virtual void CloseInstance(ToolWindowInstance instance);
    internal virtual void ShowInstance(ToolWindowInstance instance, bool activate);
    internal virtual void EnsureControlCreated(ToolWindowInstance instance);
    internal virtual void UpdateInstanceContentFactory(ToolWindowInstance instance, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    public virtual void DumpState(IndentedTextWriter tw);
    [CompilerGeneratedAttribute]
private int <GetTabInstanceSequence>b__12_0(ToolWindowInstanceInfo a);
    [CompilerGeneratedAttribute]
private void <EnsureTopLevelContent>b__16_0(Lifetime lifetime);
    [CompilerGeneratedAttribute]
private IAutomation <EnsureTopLevelContent>b__16_1(Lifetime controlLifetime, ToolWindowFrameBase frame);
    [CompilerGeneratedAttribute]
private void <EnsureTopLevelContent>b__16_2(Lifetime instanceLifetime, ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private string <EnsureTopLevelContent>b__16_4(string title);
    [CompilerGeneratedAttribute]
private void <EnsureTopLevelContent>b__16_3();
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.ToolWindowManagement.TabbedToolWindowOptions : object {
    [CompilerGeneratedAttribute]
private IProperty`1<TabStripOpenTabMode> <OpenTabBehaviour>k__BackingField;
    public IProperty`1<TabStripOpenTabMode> OpenTabBehaviour { get; protected set; }
    public TabbedToolWindowOptions(Lifetime lifetime);
    [CompilerGeneratedAttribute]
public IProperty`1<TabStripOpenTabMode> get_OpenTabBehaviour();
    [CompilerGeneratedAttribute]
protected void set_OpenTabBehaviour(IProperty`1<TabStripOpenTabMode> value);
}
public class JetBrains.Application.UI.ToolWindowManagement.TabRenamePrompt : object {
    public virtual string Prompt(string sourcename, string instanceName, String[] otherInstancesNames);
}
public class JetBrains.Application.UI.ToolWindowManagement.TabStripPageFrame : ToolWindowFrameBase {
    private ToolWindowFrameBase myTopLevelFrame;
    private TabStripItem myTabItem;
    private ToolWindowInstance myToolWindowInstance;
    private TabStripViewModel myTabStripViewModel;
    private ISimpleSignal myClosed;
    private IProperty`1<bool> myIsPinned;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ISimpleSignal Closed { get; }
    public IProperty`1<bool> IsPinned { get; }
    public TabStripItem TabStripItem { get; }
    public ToolWindowInstance ToolWindowInstance { get; }
    public TabStripPageFrame(Lifetime lifetime, ToolWindowInstance toolWindowInstance, ToolWindowFrameBase topLevelFrame, ToolWindowContent tabStripContent, TabStripViewModel tabStripViewModel, bool pinnable, IThreading threading, HelpSystem helpSystem);
    private void DetachTabItem();
    private void AdjustVisibleAndActive();
    public virtual void Show(bool activate);
    public virtual void Close();
    public ISimpleSignal get_Closed();
    public IProperty`1<bool> get_IsPinned();
    public TabStripItem get_TabStripItem();
    public ToolWindowInstance get_ToolWindowInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_1(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_4(Lifetime lt, IAutomation control);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_5(object s, EventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_8(object sender, TabStripClosedEventArgs args);
    [CompilerGeneratedAttribute]
private void <AdjustVisibleAndActive>b__8_0();
}
public abstract class JetBrains.Application.UI.ToolWindowManagement.ToolWindowClass : object {
    protected ToolWindowDescriptor myDescriptor;
    protected IThreading myThreading;
    private ILazy`1<FactorToolWindowContent> myFutureContentFactory;
    protected Lifetime myLifetime;
    protected TopLevelToolWindowFrameFactory ToolWindowFrameFactory;
    private ToolWindowListener myToolWindowListener;
    protected TopLevelToolWindowFrameBase myToplevelFrame;
    protected IProperty`1<ToolWindowContent> myEmptyContent;
    protected IProperty`1<bool> myActive;
    protected IProperty`1<bool> myVisible;
    protected IProperty`1<ToolWindowInstance> myActiveInstance;
    protected ISignal`1<QueryCloseInstancesArgs> myQueryCloseInstances;
    public ToolWindowDescriptor Descriptor { get; }
    [NotNullAttribute]
public ToolWindowInstance[] Instances { get; }
    [CanBeNullAttribute]
public TopLevelToolWindowFrameBase Frame { get; }
    public IProperty`1<bool> Active { get; }
    public IProperty`1<bool> Visible { get; }
    public IProperty`1<ToolWindowInstance> ActiveInstance { get; }
    public ISignal`1<QueryCloseInstancesArgs> QueryCloseInstances { get; }
    protected ToolWindowClass(Lifetime lifetime, TopLevelToolWindowFrameFactory toolWindowFrameFactory, ToolWindowListener toolWindowListener, ToolWindowDescriptor descriptor, IThreading threading, ILazy`1<FactorToolWindowContent> contentfactory, UIReady _);
    protected void OnObjectReady();
    public void EnsureFrame();
    public void Show(bool activate);
    public void Close();
    public virtual void DumpState(IndentedTextWriter tw);
    public ToolWindowDescriptor get_Descriptor();
    public ToolWindowInstance RegisterInstance(Lifetime lifetime, string title, IconId icon);
    public abstract virtual ToolWindowInstance RegisterInstance(Lifetime lifetime, string title, IconId icon, Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
    public abstract virtual ToolWindowInstance[] get_Instances();
    protected abstract virtual void AdjustToplevelFrameContent();
    protected void QueueAdjustToplevelFrameContent();
    [ObsoleteAttribute("Do not register tool window content imperatively within autostart components. For multi-instance tool windows, set EmptyContentAutomation on the tool window descriptor. For single-instance tool windows, registering empty content is questionable, you might want to set FirstInstanceAutomation on the descriptor instead.")]
public void RegisterEmptyContent(Lifetime lifetime);
    [ObsoleteAttribute("Do not register tool window content imperatively within autostart components. For multi-instance tool windows, set EmptyContentAutomation on the tool window descriptor. For single-instance tool windows, registering empty content is questionable, you might want to set FirstInstanceAutomation on the descriptor instead.")]
public void RegisterEmptyContent(Lifetime lifetime, Func`2<Lifetime, IAutomation> emptyContentFactory);
    internal abstract virtual void CloseInstance(ToolWindowInstance instance);
    internal abstract virtual void ShowInstance(ToolWindowInstance instance, bool activate);
    internal abstract virtual void EnsureControlCreated(ToolWindowInstance toolWindowInstance);
    internal abstract virtual void UpdateInstanceContentFactory(ToolWindowInstance instance, Func`3<Lifetime, ToolWindowInstance, IAutomation> func);
    public TopLevelToolWindowFrameBase get_Frame();
    public IProperty`1<bool> get_Active();
    public IProperty`1<bool> get_Visible();
    public IProperty`1<ToolWindowInstance> get_ActiveInstance();
    public ISignal`1<QueryCloseInstancesArgs> get_QueryCloseInstances();
    [CompilerGeneratedAttribute]
private IAutomation <OnObjectReady>b__13_0(Lifetime lifeTwi, ToolWindowInstance twi);
    [CompilerGeneratedAttribute]
private void <EnsureFrame>b__14_0(Lifetime instanceLifetime, ToolWindowInstance instance);
    [CompilerGeneratedAttribute]
private void <EnsureFrame>b__14_1(Lifetime lt, object props);
    [CompilerGeneratedAttribute]
private IAutomation <RegisterInstance>b__20_0(Lifetime lifetime, ToolWindowInstance twi);
    [CompilerGeneratedAttribute]
private void <QueueAdjustToplevelFrameContent>b__25_0(Lifetime asyncLifetime);
    [CompilerGeneratedAttribute]
private IAutomation <RegisterEmptyContent>b__26_0(Lifetime lifetime);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowClasses : object {
    private List`1<ToolWindowClass> myClasses;
    private IProperty`1<ToolWindowInstance> myLastActiveInstance;
    private HashSet`1<ToolWindowInstance> mySeenInstances;
    public IProperty`1<ToolWindowInstance> LastActiveInstance { get; }
    public ToolWindowClass[] Classes { get; }
    [NotNullAttribute]
public ToolWindowClass Item { get; }
    public ToolWindowClasses(Lifetime lifetime, IEnumerable`1<ToolWindowDescriptor> descriptors, TopLevelToolWindowFrameFactory topLevelToolWindowFrameFactory, ToolWindowListener toolWindowListener, ILazy`1<TabRenamePrompt> tabRenamePrompt, TabbedToolWindowOptions tabbedToolWindowOptions, IThreading threading, HelpSystem helpSystem, ILazy`1<FactorToolWindowContent> contentfactory, UIReady ui);
    private void SetLastActiveInstance(ToolWindowInstance inst);
    public IProperty`1<ToolWindowInstance> get_LastActiveInstance();
    public ToolWindowClass[] get_Classes();
    public ToolWindowClass get_Item(ToolWindowDescriptor descriptor);
    [NotNullAttribute]
public ToolWindowClass GetItem();
    [NotNullAttribute]
public ToolWindowClass GetItem(Type typeofToolWindowDescriptor);
    public void DumpState(IndentedTextWriter tw);
    private void DumpClasses(IndentedTextWriter tw, bool visible, bool dumpOnlyId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(Lifetime valueLt, ToolWindowInstance inst);
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowContent : object {
    private Lifetime myLifetime;
    private Func`3<Lifetime, ToolWindowFrameBase, IAutomation> myControlFactory;
    private IProperty`1<IconId> myIcon;
    private IProperty`1<string> myTitle;
    private LifetimeDefinition myControlLifetimeDefinition;
    private IProperty`1<IAutomation> myControl;
    private IProperty`1<ToolWindowContentState> myState;
    public IProperty`1<string> Title { get; }
    public IProperty`1<IconId> Icon { get; }
    public IProperty`1<IAutomation> Control { get; }
    public IProperty`1<ToolWindowContentState> State { get; }
    public ToolWindowContent(Lifetime lifetime, Func`3<Lifetime, ToolWindowFrameBase, IAutomation> controlFactory);
    public IProperty`1<string> get_Title();
    public IProperty`1<IconId> get_Icon();
    public IProperty`1<IAutomation> get_Control();
    public IProperty`1<ToolWindowContentState> get_State();
    private IAutomation CreateControl(Lifetime lifetime, ToolWindowFrameBase frame);
    public void Load(ToolWindowFrameBase frame);
    public void Load(ToolWindowFrameBase frame, Func`3<Lifetime, ToolWindowFrameBase, IAutomation> contentFactory);
    public void Unload();
    public void DumpState(IndentedTextWriter tw);
    [CompilerGeneratedAttribute]
private void <Load>b__17_1();
    [CompilerGeneratedAttribute]
private void <Load>b__17_2();
    [CompilerGeneratedAttribute]
private void <Load>b__17_3();
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowContentState : Enum {
    public int value__;
    public static ToolWindowContentState NotLoaded;
    public static ToolWindowContentState Loaded;
    public static ToolWindowContentState Unloaded;
    public static ToolWindowContentState Restored;
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowDefaultEmptyContentAutomation : AAutomation {
    public ITheming Theming;
    public ToolWindowDefaultEmptyContentAutomation(ITheming theming);
}
[DebuggerDisplayAttribute("Id:{Id}")]
public abstract class JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor : object {
    private ToolWindowDescriptorAttribute myDescriptorAttribute;
    private LocalLazy`2<IconId, Type> myIcon;
    private ToolWindowId myId;
    private Func`2<Type, IconId> myCachedIconIdFactory;
    public ToolWindowId Id { get; }
    public string Text { get; }
    public HelpId HelpTopic { get; }
    [CanBeNullAttribute]
public IconId Icon { get; }
    public ToolWindowType Type { get; }
    public ToolWindowVisibilityPersistenceScope VisibilityPersistenceScope { get; }
    public ToolWindowInitialDocking InitialDocking { get; }
    public int InitialWidth { get; }
    public int InitialHeight { get; }
    public bool MultiInstanceTabRenameAllowed { get; }
    public bool MultiInstanceTabRenameDuplicateNamesNotAllowed { get; }
    public bool MultiInstanceStayAfterClosingLastTab { get; }
    public string MultiInstanceToolWindowSingleInstanceName { get; }
    public bool MultiInstanceRecentItemsAllowed { get; }
    public bool MultiInstanceTabPinningAllowed { get; }
    public bool MultiInstanceTabReorderingAllowed { get; }
    public bool MultiInstanceOverflowTabsAllowed { get; }
    public ToolWindowOpenTabBehaviour MultiInstanceOpenTabBehaviour { get; }
    public string ContextMenuActionGroupId { get; }
    public Type EmptyContentAutomation { get; }
    public object EmptyContentParameter { get; }
    public Type FirstInstanceAutomation { get; }
    [ObsoleteAttribute("Do not specify window branding.")]
protected ToolWindowDescriptor(IApplicationHost host, IWindowBranding branding);
    [ObsoleteAttribute("Do not specify the application host.")]
protected ToolWindowDescriptor(IApplicationHost host);
    public ToolWindowId get_Id();
    public string get_Text();
    public HelpId get_HelpTopic();
    public IconId get_Icon();
    public ToolWindowType get_Type();
    public ToolWindowVisibilityPersistenceScope get_VisibilityPersistenceScope();
    public ToolWindowInitialDocking get_InitialDocking();
    public int get_InitialWidth();
    public int get_InitialHeight();
    public bool get_MultiInstanceTabRenameAllowed();
    public bool get_MultiInstanceTabRenameDuplicateNamesNotAllowed();
    public bool get_MultiInstanceStayAfterClosingLastTab();
    public string get_MultiInstanceToolWindowSingleInstanceName();
    public bool get_MultiInstanceRecentItemsAllowed();
    public bool get_MultiInstanceTabPinningAllowed();
    public bool get_MultiInstanceTabReorderingAllowed();
    public bool get_MultiInstanceOverflowTabsAllowed();
    public ToolWindowOpenTabBehaviour get_MultiInstanceOpenTabBehaviour();
    public string get_ContextMenuActionGroupId();
    public Type get_EmptyContentAutomation();
    public object get_EmptyContentParameter();
    public Type get_FirstInstanceAutomation();
    public virtual string ToString();
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor")]
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute : ShellComponentAttribute {
    [CompilerGeneratedAttribute]
private string <ProductNeutralId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private HelpId <HelpTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowVisibilityPersistenceScope <VisibilityPersistenceScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowInitialDocking <InitialDocking>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <EmptyContentAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private object <EmptyContentParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <FirstInstanceAutomation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceTabRenameAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceTabRenameDuplicateNamesNotAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceStayAfterClosingLastTab>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceTabPinningAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceTabReorderingAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceRecentItemsAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolWindowOpenTabBehaviour <MultiInstanceOpenTabBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiInstanceOverflowTabsAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstancePresentableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextMenuActionGroupId>k__BackingField;
    public static string ArgNameProductNeutralId;
    public static string ArgNameIcon;
    public string ProductNeutralId { get; public set; }
    [ObsoleteAttribute("Consider to use ResourceType and TextResourceName instead!")]
[CanBeNullAttribute]
public string Text { get; public set; }
    [CanBeNullAttribute]
public Type ResourceType { get; public set; }
    [CanBeNullAttribute]
public string TextResourceName { get; public set; }
    public HelpId HelpTopic { get; public set; }
    public Type Icon { get; public set; }
    public ToolWindowType Type { get; public set; }
    public ToolWindowVisibilityPersistenceScope VisibilityPersistenceScope { get; public set; }
    public ToolWindowInitialDocking InitialDocking { get; public set; }
    public int InitialWidth { get; public set; }
    public int InitialHeight { get; public set; }
    [CanBeNullAttribute]
public Type EmptyContentAutomation { get; public set; }
    [CanBeNullAttribute]
public object EmptyContentParameter { get; public set; }
    [CanBeNullAttribute]
public Type FirstInstanceAutomation { get; public set; }
    public bool MultiInstanceTabRenameAllowed { get; public set; }
    public bool MultiInstanceTabRenameDuplicateNamesNotAllowed { get; public set; }
    public bool MultiInstanceStayAfterClosingLastTab { get; public set; }
    public bool MultiInstanceTabPinningAllowed { get; public set; }
    public bool MultiInstanceTabReorderingAllowed { get; public set; }
    public bool MultiInstanceRecentItemsAllowed { get; public set; }
    public ToolWindowOpenTabBehaviour MultiInstanceOpenTabBehaviour { get; public set; }
    public bool MultiInstanceOverflowTabsAllowed { get; public set; }
    public string InstancePresentableName { get; public set; }
    public string ContextMenuActionGroupId { get; public set; }
    public ToolWindowDescriptorAttribute(Instantiation instantiation);
    private static ToolWindowDescriptorAttribute();
    [CompilerGeneratedAttribute]
public string get_ProductNeutralId();
    [CompilerGeneratedAttribute]
public void set_ProductNeutralId(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
public string get_TextResourceName();
    [CompilerGeneratedAttribute]
public void set_TextResourceName(string value);
    [CompilerGeneratedAttribute]
public HelpId get_HelpTopic();
    [CompilerGeneratedAttribute]
public void set_HelpTopic(HelpId value);
    [CompilerGeneratedAttribute]
public Type get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(Type value);
    [CompilerGeneratedAttribute]
public ToolWindowType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ToolWindowType value);
    [CompilerGeneratedAttribute]
public ToolWindowVisibilityPersistenceScope get_VisibilityPersistenceScope();
    [CompilerGeneratedAttribute]
public void set_VisibilityPersistenceScope(ToolWindowVisibilityPersistenceScope value);
    [CompilerGeneratedAttribute]
public ToolWindowInitialDocking get_InitialDocking();
    [CompilerGeneratedAttribute]
public void set_InitialDocking(ToolWindowInitialDocking value);
    [CompilerGeneratedAttribute]
public int get_InitialWidth();
    [CompilerGeneratedAttribute]
public void set_InitialWidth(int value);
    [CompilerGeneratedAttribute]
public int get_InitialHeight();
    [CompilerGeneratedAttribute]
public void set_InitialHeight(int value);
    [CompilerGeneratedAttribute]
public Type get_EmptyContentAutomation();
    [CompilerGeneratedAttribute]
public void set_EmptyContentAutomation(Type value);
    [CompilerGeneratedAttribute]
public object get_EmptyContentParameter();
    [CompilerGeneratedAttribute]
public void set_EmptyContentParameter(object value);
    [CompilerGeneratedAttribute]
public Type get_FirstInstanceAutomation();
    [CompilerGeneratedAttribute]
public void set_FirstInstanceAutomation(Type value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceTabRenameAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceTabRenameAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceTabRenameDuplicateNamesNotAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceTabRenameDuplicateNamesNotAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceStayAfterClosingLastTab();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceStayAfterClosingLastTab(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceTabPinningAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceTabPinningAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceTabReorderingAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceTabReorderingAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceRecentItemsAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceRecentItemsAllowed(bool value);
    [CompilerGeneratedAttribute]
public ToolWindowOpenTabBehaviour get_MultiInstanceOpenTabBehaviour();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceOpenTabBehaviour(ToolWindowOpenTabBehaviour value);
    [CompilerGeneratedAttribute]
public bool get_MultiInstanceOverflowTabsAllowed();
    [CompilerGeneratedAttribute]
public void set_MultiInstanceOverflowTabsAllowed(bool value);
    [CompilerGeneratedAttribute]
public string get_InstancePresentableName();
    [CompilerGeneratedAttribute]
public void set_InstancePresentableName(string value);
    [CompilerGeneratedAttribute]
public string get_ContextMenuActionGroupId();
    [CompilerGeneratedAttribute]
public void set_ContextMenuActionGroupId(string value);
    public string GetText();
}
public abstract class JetBrains.Application.UI.ToolWindowManagement.ToolWindowFrameBase : object {
    protected Lifetime myLifetime;
    protected IThreading myThreading;
    protected IProperty`1<ToolWindowContent> myContent;
    protected IProperty`1<IAutomation> myCurrentControl;
    protected WindowFrame myWindowFrame;
    protected IProperty`1<string> myTitle;
    protected Property`1<IconId> myIcon;
    private IProperty`1<bool> myVisible;
    private IProperty`1<bool> myActive;
    public IProperty`1<bool> Visible { get; }
    public IProperty`1<bool> Active { get; }
    public IProperty`1<ToolWindowContent> Content { get; }
    public WindowFrame WindowFrame { get; }
    protected ToolWindowFrameBase(Lifetime lifetime, IThreading threading);
    public IProperty`1<bool> get_Visible();
    public IProperty`1<bool> get_Active();
    public IProperty`1<ToolWindowContent> get_Content();
    public void EnsureControlCreated();
    public void UpdateControl(Func`3<Lifetime, ToolWindowFrameBase, IAutomation> controlFactory);
    public WindowFrame get_WindowFrame();
    public abstract virtual void Show(bool activate);
    public abstract virtual void Close();
    public virtual void DumpState(IndentedTextWriter tw);
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowFrameContentPlaceholderAutomation : AAutomation {
    private IThreading myThreading;
    [CanBeNullAttribute]
public ToolWindowId ToolWindowId;
    public IProperty`1<bool> IsToolWindowActive;
    public IProperty`1<bool> IsToolWindowVisible;
    public IProperty`1<IAutomation> ContentControl;
    [NotNullAttribute]
public ToolWindowFrameBase Frame;
    [NotNullAttribute]
public IProperty`1<bool> IsAllowAutorestore;
    public IProperty`1<bool> IsReloadAvailable;
    [NotNullAttribute]
public Lifetime Lifetime;
    public IProperty`1<string> NoContentCueBanner;
    public HelpId HelpTopic;
    [CanBeNullAttribute]
public Action F1Handler;
    public ToolWindowFrameContentPlaceholderAutomation(Lifetime lifeGlobal, ToolWindowFrameBase frame, IThreading threading, HelpSystem helpSystem, HelpId helpTopic, ToolWindowId toolWindowId);
    public void Restore();
    private void InitCueBanner(Lifetime lifeGlobal, ToolWindowFrameBase frame);
    [CompilerGeneratedAttribute]
private void <Restore>b__13_0();
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowId : object {
    [CompilerGeneratedAttribute]
private string <ProductNeutralId>k__BackingField;
    [NotNullAttribute]
public string ProductNeutralId { get; }
    [NotNullAttribute]
public string StringId { get; }
    public ToolWindowId(string productNeutralId);
    [CompilerGeneratedAttribute]
public string get_ProductNeutralId();
    public string get_StringId();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ToolWindowId left, ToolWindowId right);
    public static bool op_Inequality(ToolWindowId left, ToolWindowId right);
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowInitialDocking : Enum {
    public int value__;
    public static ToolWindowInitialDocking NotSpecified;
    public static ToolWindowInitialDocking Left;
    public static ToolWindowInitialDocking Right;
    public static ToolWindowInitialDocking Bottom;
    public static ToolWindowInitialDocking Top;
    public static ToolWindowInitialDocking Floating;
    public static ToolWindowInitialDocking TabbedDocument;
    public static ToolWindowInitialDocking SolutionExplorer;
    public static ToolWindowInitialDocking OutputWindow;
    public static ToolWindowInitialDocking ToolBox;
}
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowInstance : object {
    public Lifetime Lifetime;
    public ToolWindowClass Class;
    public WindowFrame WindowFrame;
    public IProperty`1<string> Title;
    public IProperty`1<IconId> Icon;
    public IProperty`1<bool> QueryClose;
    public IProperty`1<bool> Visible;
    public IProperty`1<bool> Active;
    public IProperty`1<bool> CanClose;
    public IProperty`1<object> SelectedObjectProperties;
    public ToolWindowInstance(Lifetime lifetime, string initialTitle, IconId icon, ToolWindowClass cls, IThreading threading);
    public virtual void Show(bool activate);
    public virtual void Close();
    public virtual ToolWindowInstance EnsureControlCreated();
    public virtual void DumpState(IndentedTextWriter tw);
    [ObsoleteAttribute("This crazy piece of API will be dropped.")]
public virtual void UpdateContentFactory(Func`3<Lifetime, ToolWindowInstance, IAutomation> contentFactory);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowListener : object {
    public virtual void OnToolWindowFrameCreated(TopLevelToolWindowFrameBase toplevelFrame, ToolWindowDescriptor toolWindowDescriptor);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.ToolWindowManagement.ToolWindowManager : object {
    [CompilerGeneratedAttribute]
private ToolWindowClasses <Classes>k__BackingField;
    [NotNullAttribute]
public ToolWindowClasses Classes { get; }
    public IProperty`1<ToolWindowInstance> LastActiveInstance { get; }
    public ToolWindowManager(Lifetime lifetime, IReadyImmutableList`1<ToolWindowDescriptor> descriptors, TopLevelToolWindowFrameFactory topLevelToolWindowFrameFactory, ToolWindowListener toolWindowListener, ILazy`1<FactorToolWindowContent> contentfactory, ILazy`1<TabRenamePrompt> tabRenamePrompt, TabbedToolWindowOptions options, IThreading threading, HelpSystem helpSystem, UIReady ui);
    [CompilerGeneratedAttribute]
public ToolWindowClasses get_Classes();
    public IProperty`1<ToolWindowInstance> get_LastActiveInstance();
    public void DumpState(IndentedTextWriter textWriter);
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowOpenTabBehaviour : Enum {
    public int value__;
    public static ToolWindowOpenTabBehaviour Default;
    public static ToolWindowOpenTabBehaviour ReplaceUnpinned;
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowType : Enum {
    public int value__;
    public static ToolWindowType Undefined;
    public static ToolWindowType SingleInstance;
    public static ToolWindowType MultiInstance;
}
public enum JetBrains.Application.UI.ToolWindowManagement.ToolWindowVisibilityPersistenceScope : Enum {
    public int value__;
    public static ToolWindowVisibilityPersistenceScope None;
    public static ToolWindowVisibilityPersistenceScope Solution;
    public static ToolWindowVisibilityPersistenceScope Global;
}
public abstract class JetBrains.Application.UI.ToolWindowManagement.TopLevelToolWindowFrameBase : ToolWindowFrameBase {
    protected TopLevelToolWindowFrameBase(Lifetime lifetime, IThreading threading);
    public virtual void AdvertiseProperties(object dataObject);
}
[ShellComponentAttribute("10")]
public class JetBrains.Application.UI.ToolWindowManagement.TopLevelToolWindowFrameFactory : object {
    protected IThreading myThreading;
    public ISignal`1<ToolWindowId> FrameRequired;
    public TopLevelToolWindowFrameFactory(Lifetime lifetime, IThreading threading);
    public virtual TopLevelToolWindowFrameBase CreateTopLevelFrame(Lifetime lifetime, ToolWindowDescriptor toolWindowDescriptor);
    public virtual bool IsFrameRequired(ToolWindowDescriptor toolWindowDescriptor);
}
[ShellComponentAttribute("10")]
internal class JetBrains.Application.UI.TreeBrowser.ExportTreeManager : object {
    private IEnumerable`1<IExportTreeProvider> myExportTreeProviders;
    public ExportTreeManager(Lifetime lifetime, IEnumerable`1<IExportTreeProvider> exportTreeProviders, IActionManager actionManager);
    public sealed virtual bool IsAvailable(IDataContext context, ExportTreeViewFormat exportFormat);
    public sealed virtual void Export(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
    public sealed virtual Action`2<IProgressIndicator, Stream> GetExporter(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
}
public abstract class JetBrains.Application.UI.TreeBrowser.ExportTreeViewBase : object {
    protected ExportTreeViewFormat ExportFormat { get; }
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    protected abstract virtual ExportTreeViewFormat get_ExportFormat();
}
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewFormat : EnumPattern {
    public static ExportTreeViewFormat Text;
    public static ExportTreeViewFormat Xml;
    public static ExportTreeViewFormat Html;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileFilter>k__BackingField;
    [NotNullAttribute]
public string Extension { get; }
    [NotNullAttribute]
public string FileFilter { get; }
    private ExportTreeViewFormat(string name, string extension, string fileFilter);
    private static ExportTreeViewFormat();
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public string get_FileFilter();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.TreeBrowser.ExportTreeViewFormatUtils : object {
    [ExtensionAttribute]
public static bool IsXml(ExportTreeViewFormat this);
    [ExtensionAttribute]
public static bool IsHtml(ExportTreeViewFormat this);
}
public abstract class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionAction : object {
    public ExportTreeViewFormat ExportFormat { get; }
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public abstract virtual ExportTreeViewFormat get_ExportFormat();
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("TreeModelBrowser.ExportSelection.Html", "JetBrains.Application.Resources.Strings", "ExportToHTMLActionText")]
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionHtmlAction : ExportTreeViewSelectionAction {
    public ExportTreeViewFormat ExportFormat { get; }
    public virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.ExportSelection.Text", "JetBrains.Application.Resources.Strings", "ExportToTextActionText")]
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionTextAction : ExportTreeViewSelectionAction {
    public ExportTreeViewFormat ExportFormat { get; }
    public virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.ExportSelection.Xml", "JetBrains.Application.Resources.Strings", "ExportToXMLActionText")]
public class JetBrains.Application.UI.TreeBrowser.ExportTreeViewSelectionXmlAction : ExportTreeViewSelectionAction {
    public ExportTreeViewFormat ExportFormat { get; }
    public virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.Preview.Horizontal", "JetBrains.Application.Resources.Strings", "BottomActionText")]
public class JetBrains.Application.UI.TreeBrowser.HorizontalCodeViewAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public interface JetBrains.Application.UI.TreeBrowser.IAsyncUpdatingContent {
    public IProperty`1<bool> IsUpdatingContent { get; }
    public abstract virtual IProperty`1<bool> get_IsUpdatingContent();
}
public interface JetBrains.Application.UI.TreeBrowser.IExportTreeManager {
    public abstract virtual bool IsAvailable(IDataContext context, ExportTreeViewFormat exportFormat);
    public abstract virtual void Export(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
    public abstract virtual Action`2<IProgressIndicator, Stream> GetExporter(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
}
public interface JetBrains.Application.UI.TreeBrowser.IExportTreeProvider {
    public int Priority { get; }
    public abstract virtual bool IsApplicable(IDataContext context, ExportTreeViewFormat exportFormat);
    public abstract virtual int get_Priority();
    public abstract virtual bool Export(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively);
    [CanBeNullAttribute]
[ContractAnnotationAttribute("=>null,title:null;=>notnull,title:notnull")]
public abstract virtual ITreeExporter GetExporter(IDataContext context, ExportTreeViewFormat exportFormat, bool onlySelection, bool recursively, String& title, IWin32Window& uiParent);
}
public interface JetBrains.Application.UI.TreeBrowser.IFocusablePanel {
    public abstract virtual void FocusOn(TreeModelNode node, bool forceFocus);
}
public interface JetBrains.Application.UI.TreeBrowser.ITreeExporter {
    public abstract virtual void PrepareData(Action afterPrepare);
    public abstract virtual void Export(IProgressIndicator progressIndicator, Stream stream);
}
public interface JetBrains.Application.UI.TreeBrowser.ITreePanelActions {
    public bool PreviewSupported { get; }
    public bool PreviewVisible { get; public set; }
    public Orientation PreviewOrientation { get; public set; }
    public string PreviewActionName { get; }
    public abstract virtual void ExpandAll();
    public abstract virtual void CollapseAll();
    public abstract virtual bool get_PreviewSupported();
    public abstract virtual bool get_PreviewVisible();
    public abstract virtual void set_PreviewVisible(bool value);
    public abstract virtual Orientation get_PreviewOrientation();
    public abstract virtual void set_PreviewOrientation(Orientation value);
    public abstract virtual string get_PreviewActionName();
}
public interface JetBrains.Application.UI.TreeBrowser.ITreeViewCellPresentationsProvider {
    public abstract virtual IPresentableItem[] GetCellPresentations(TreeModelNode treeModelNode);
}
[ActionGroupAttribute("1", "10")]
public class JetBrains.Application.UI.TreeBrowser.TogglePreviewAction : object {
    private ILogger myLogger;
    public TogglePreviewAction(VerticalCodeViewAction verticalCodeViewAction, HorizontalCodeViewAction horizontalCodeViewAction);
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public static class JetBrains.Application.UI.TreeBrowser.TreeModelBrowser : object {
    public static DataConstant`1<IResultListHandler> NAVIGATE_OCCURRENCE_PROVIDER;
    public static DataConstant`1<ITreeViewController> TREE_MODEL_DESCRIPTOR;
    public static DataConstant`1<ITreePanelActions> TREE_ACTIONS;
    public static DataConstant`1<IList`1<TreeModelNode>> TREE_MODEL_NODES;
    public static DataConstant`1<TreeModelNode> TREE_MODEL_NODE;
    public static DataConstant`1<ITreeViewCellPresentationsProvider> TREE_VIEW_CELL_PRESENTATIONS_PROVIDER;
    private static TreeModelBrowser();
}
[ActionAttribute("TreeModelBrowser.CollapseAll", "JetBrains.Application.Resources.Strings", "CollapseAllActionText")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserCollapseAllAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionAttribute("TreeModelBrowser.Copy", "JetBrains.Application.Resources.Strings", "CopyActionText")]
[VsOverrideActionAttribute("({5efc7975-14bc-11cf-9b2b-00aa00573819}:15)")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserCopyActionHandler : SimpleOverridingActionHandler {
    protected virtual bool IsAvailable(IDataContext context);
    protected virtual void ExecuteInternal(IDataContext context);
}
[ActionGroupAttribute("TreeModelBrowser.Selection.Debugger", "2", "16")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserDebuggerActionGroup : object {
}
[ActionAttribute("TreeModelBrowser.ExpandAll", "JetBrains.Application.Resources.Strings", "ExpandAllActionText")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExpandAllAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
}
[ActionGroupAttribute("TreeModelBrowser.Export", "1", "10")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportGroup : object {
    public TreeModelBrowserExportGroup(TreeModelBrowserExportText treeModelBrowserExportText, TreeModelBrowserExportXml treeModelBrowserExportXml, TreeModelBrowserExportHtml treeModelBrowserExportHtml);
}
[ActionAttribute("TreeModelBrowser.Export.Html", "JetBrains.Application.Resources.Strings", "HTMLActionText")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportHtml : ExportTreeViewBase {
    protected ExportTreeViewFormat ExportFormat { get; }
    protected virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.Export.Text", "JetBrains.Application.Resources.Strings", "TextActionText")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportText : ExportTreeViewBase {
    protected ExportTreeViewFormat ExportFormat { get; }
    protected virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.Export.Xml", "JetBrains.Application.Resources.Strings", "XMLActionText")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserExportXml : ExportTreeViewBase {
    protected ExportTreeViewFormat ExportFormat { get; }
    protected virtual ExportTreeViewFormat get_ExportFormat();
}
[ActionAttribute("TreeModelBrowser.NextOccurrence", "JetBrains.Application.Resources.Strings", "GoToNextItemActionText")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserNextAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ActionAttribute("TreeModelBrowser.PreviousOccurrence", "JetBrains.Application.Resources.Strings", "GoToPreviousItemActionText")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserPreviousAction : object {
    public sealed virtual bool Update(IDataContext context, ActionPresentation presentation, DelegateUpdate nextUpdate);
    public sealed virtual void Execute(IDataContext context, DelegateExecute nextExecute);
    public sealed virtual IActionRequirement GetRequirement(IDataContext dataContext);
}
[ShellComponentAttribute("10")]
internal class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserRules : object {
    public TreeModelBrowserRules(Lifetime lifetime, IActionManager actionManager);
}
[ActionGroupAttribute("TreeModelBrowser.Selection", "0", "10")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserSelectionActionGroup : object {
    public TreeModelBrowserSelectionActionGroup(TreeModelBrowserCopyActionHandler treeModelBrowserCopyActionHandler, TreeModelBrowserSelectionExportActionGroup treeModelBrowserSelectionExportActionGroup, TreeModelBrowserDebuggerActionGroup debugActions);
}
[ActionGroupAttribute("TreeModelBrowser.Selection.Export", "1", "10")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserSelectionExportActionGroup : object {
    public TreeModelBrowserSelectionExportActionGroup(ExportTreeViewSelectionTextAction text, ExportTreeViewSelectionXmlAction xml, ExportTreeViewSelectionHtmlAction html);
}
[ActionGroupAttribute("TreeModelBrowser.Standard", "0", "10")]
public class JetBrains.Application.UI.TreeBrowser.TreeModelBrowserStandardActionGroup : object {
    public TreeModelBrowserStandardActionGroup(TreeModelBrowserExpandAllAction treeModelBrowserExpandAllAction, TreeModelBrowserCollapseAllAction treeModelBrowserCollapseAllAction, TreeModelBrowserPreviousAction treeModelBrowserPreviousAction, TreeModelBrowserNextAction treeModelBrowserNextAction, TogglePreviewAction togglePreviewAction, TreeModelBrowserExportGroup exportTreeViewAction);
}
[ActionAttribute("TreeModelBrowser.Preview.Vertical", "JetBrains.Application.Resources.Strings", "RightActionText")]
public class JetBrains.Application.UI.TreeBrowser.VerticalCodeViewAction : object {
    public sealed virtual bool Update(IDataContext context, CheckedActionPresentation presentation);
    public sealed virtual void Execute(IDataContext context);
}
public class JetBrains.Application.UI.TreeModels.CascadeGroup : object {
    public static CascadeGroup Empty;
    private IEnumerable myGroups;
    [NotNullAttribute]
public IEnumerable Groups { get; }
    public CascadeGroup(IEnumerable groups);
    private static CascadeGroup();
    public IEnumerable get_Groups();
}
public interface JetBrains.Application.UI.TreeModels.IPrecomputeTreeGroupProvider`1 {
    public abstract virtual void Precompute(IEnumerable`1<TItem> items);
    public abstract virtual void Drop();
}
public interface JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1 {
    public abstract virtual object ExtractGroupObject(TItem item);
}
public class JetBrains.Application.UI.TreeModels.LiveTreeModelGrouping`1 : AAutomation {
    [NotNullAttribute]
public static LiveTreeModelGrouping`1<T> Empty;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<VolatileTreeGroupProvider<T>> <Providers>k__BackingField;
    [NotNullAttribute]
public string Name { get; }
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<VolatileTreeGroupProvider<T>> Providers { get; }
    public LiveTreeModelGrouping`1(string name, VolatileTreeGroupProvider[] providers);
    public LiveTreeModelGrouping`1(string name, IEnumerable`1<VolatileTreeGroupProvider<T>> providers);
    private static LiveTreeModelGrouping`1();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IEnumerable`1<VolatileTreeGroupProvider<T>> get_Providers();
    public virtual string ToString();
}
public class JetBrains.Application.UI.TreeModels.New.ActivityTimeoutTracker : object {
    private Stopwatch myStopwatch;
    private static int MaxTimeout;
    public bool ShouldStop { get; }
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual bool get_ShouldStop();
}
public class JetBrains.Application.UI.TreeModels.New.AndLiveFilter : object {
    private List`1<ILiveTreeModelFilter> myFilters;
    private LiveTreeModelFilterMatchResult myDefaultValue;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public AndLiveFilter(LiveTreeModelFilterMatchResult defaultValue, ILiveTreeModelFilter filter, ILiveTreeModelFilter anotherFilter, ILiveTreeModelFilter[] otherFilters);
    public AndLiveFilter(ILiveTreeModelFilter filter, ILiveTreeModelFilter anotherFilter, ILiveTreeModelFilter[] otherFilters);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
}
public class JetBrains.Application.UI.TreeModels.New.AsyncNodeChildrenUpdater`1 : object {
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private IMainThreadExecutor myMainThreadExecutor;
    [NotNullAttribute]
private ISync myBgWriteLock;
    [NotNullAttribute]
private IActivityTimeoutTracker myActivityTimeoutTracker;
    [NotNullAttribute]
private ILogger myLogger;
    [NotNullAttribute]
private ReadWriteLock myUiLock;
    [NotNullAttribute]
private Func`3<TNode, ITreeModel, TNode> myTempNodeFactory;
    [NotNullAttribute]
private WeakToStrongDictionary`2<ITreeModelNode, IThrottlingIteratorWithNode<TNode>> myAllIterators;
    [NotNullAttribute]
private WeakToStrongDictionary`2<ITreeModelNode, ITreeModelNode> myParentMapping;
    [NotNullAttribute]
private JetHashSet`1<IThrottlingIteratorWithNode<TNode>> myIteratorsToProcess;
    [NotNullAttribute]
private object myIteratorsToProcessLock;
    [NotNullAttribute]
private ConcurrentDictionary`2<ITreeModelNode, NodesStorage<TNode>> myUpdatersToProcess;
    [NotNullAttribute]
private IGroupingEvent myUpdateNodesEvent;
    [NotNullAttribute]
private SyncNodeChildrenUpdater mySyncUpdater;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Idle>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ITreeModelNode> <ChildrenNodeUpdated>k__BackingField;
    public IProperty`1<bool> Idle { get; }
    public ISignal`1<ITreeModelNode> ChildrenNodeUpdated { get; }
    public bool IsSync { get; }
    public AsyncNodeChildrenUpdater`1(Lifetime lifetime, IMainThreadExecutor mainThreadExecutor, ISync bgWriteLock, ReadWriteLock uiLock, IGroupingEventFactory groupingEventFactory, Func`3<TNode, ITreeModel, TNode> tempNodeFactory, GroupingEventProlongation prolongationPolicy, IActivityTimeoutTracker activityTimeoutTracker);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Idle();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ITreeModelNode> get_ChildrenNodeUpdated();
    public sealed virtual bool get_IsSync();
    public sealed virtual void Clean(bool cleanRoot);
    protected virtual void UpdateChangedChildrenCollections();
    public sealed virtual IBindableView`1<T> UpdateNode(ITreeModelNode node, IBindableView`1<T> children);
    public sealed virtual void AttachNodeToParent(ITreeModelNode node, ITreeModelNode parent);
    public sealed virtual void DetachNodeFromParent(ITreeModelNode node);
    public sealed virtual void DisposeNode(ITreeModelNode node);
    private ITreeModelNode SelfOrRootKey(ITreeModelNode node);
    public sealed virtual void RequestReset(IThrottlingIterator toReset);
    public sealed virtual void ChangeParentMapping(ITreeModelNode node, IEnumerable`1<object> evaluatedSourceCollection);
    private sealed virtual override ITreeModelNode JetBrains.Application.UI.TreeModels.New.IParentProvider.GetParent(ITreeModelNode node);
    public sealed virtual void Dump(StreamWriter writer);
}
public interface JetBrains.Application.UI.TreeModels.New.IActivityTimeoutTracker {
    public bool ShouldStop { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual bool get_ShouldStop();
}
public interface JetBrains.Application.UI.TreeModels.New.IAsyncChildrenBuildingSettings {
    public bool ShouldDelay { get; public set; }
    public abstract virtual bool get_ShouldDelay();
    public abstract virtual void set_ShouldDelay(bool value);
}
public interface JetBrains.Application.UI.TreeModels.New.ICanStopGrouping {
    public bool IsStop { get; }
    public abstract virtual bool get_IsStop();
}
public interface JetBrains.Application.UI.TreeModels.New.ICleanableModel {
    public abstract virtual void CleanAll();
}
public interface JetBrains.Application.UI.TreeModels.New.ICompositeNode {
}
public interface JetBrains.Application.UI.TreeModels.New.IDumpable {
    public abstract virtual void Dump(StreamWriter writer);
}
public interface JetBrains.Application.UI.TreeModels.New.IEvaluatedOnDemandTreeModel {
    public abstract virtual void BeginEvaluate(object node, bool recursive, Action afterEvaluation);
}
public interface JetBrains.Application.UI.TreeModels.New.ILiveTreeModelComparer {
    [NotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
}
public interface JetBrains.Application.UI.TreeModels.New.ILiveTreeModelFilter {
    [NotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public abstract virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
}
public interface JetBrains.Application.UI.TreeModels.New.IMainThreadExecutor {
    public abstract virtual void Execute(Lifetime lifetime, string name, Action action);
}
public interface JetBrains.Application.UI.TreeModels.New.INodeChildrenUpdater {
    public IProperty`1<bool> Idle { get; }
    [NotNullAttribute]
public ISignal`1<ITreeModelNode> ChildrenNodeUpdated { get; }
    public bool IsSync { get; }
    [NotNullAttribute]
public abstract virtual IBindableView`1<T> UpdateNode(ITreeModelNode node, IBindableView`1<T> children);
    public abstract virtual void AttachNodeToParent(ITreeModelNode node, ITreeModelNode parent);
    public abstract virtual void DetachNodeFromParent(ITreeModelNode node);
    public abstract virtual void DisposeNode(ITreeModelNode node);
    public abstract virtual IProperty`1<bool> get_Idle();
    public abstract virtual ISignal`1<ITreeModelNode> get_ChildrenNodeUpdated();
    public abstract virtual bool get_IsSync();
    public abstract virtual void Clean(bool cleanRoot);
}
public interface JetBrains.Application.UI.TreeModels.New.INodeChildrenUpdaterFactory {
    [NotNullAttribute]
public abstract virtual INodeChildrenUpdater Create(Lifetime lifetime, ISync bgWriteLock, ReadWriteLock uiLock, GroupingEventProlongation prolongationPolicy);
    [NotNullAttribute]
public abstract virtual ReadWriteLock CreateUILock(ReadWriteLock bgWriteLock);
}
public interface JetBrains.Application.UI.TreeModels.New.IParentProvider {
    [CanBeNullAttribute]
public abstract virtual ITreeModelNode GetParent(ITreeModelNode node);
}
public interface JetBrains.Application.UI.TreeModels.New.ITempNodeValue {
}
public interface JetBrains.Application.UI.TreeModels.New.IThrottlingIterator {
    public abstract virtual void CheckEvaluated();
    public abstract virtual void Reset();
}
internal interface JetBrains.Application.UI.TreeModels.New.IThrottlingIteratorResetService {
    public abstract virtual void RequestReset(IThrottlingIterator toReset);
    public abstract virtual void ChangeParentMapping(ITreeModelNode node, IEnumerable`1<object> evaluatedSourceCollection);
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModel {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public ReadWriteLock Lock { get; }
    [NotNullAttribute]
public ReadWriteLock UILock { get; }
    [NotNullAttribute]
public IBindableView`1<ITreeModelNode> Children { get; }
    [NotNullAttribute]
public IBindableCollection`1<ITreeModelNode> ChildrenRaw { get; }
    [NotNullAttribute]
public IProperty`1<ILiveTreeModelFilter> Filter { get; }
    [NotNullAttribute]
public IProperty`1<ILiveTreeModelComparer> Comparer { get; }
    [NotNullAttribute]
public INodeChildrenUpdater NodeChildrenUpdater { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual ReadWriteLock get_Lock();
    public abstract virtual ReadWriteLock get_UILock();
    public abstract virtual IBindableView`1<ITreeModelNode> get_Children();
    public abstract virtual IBindableCollection`1<ITreeModelNode> get_ChildrenRaw();
    public abstract virtual IProperty`1<ILiveTreeModelFilter> get_Filter();
    public abstract virtual IProperty`1<ILiveTreeModelComparer> get_Comparer();
    public abstract virtual INodeChildrenUpdater get_NodeChildrenUpdater();
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual ICollection`1<ITreeModelNode> GetNodes(object dataValue);
    public abstract virtual void EvaluateNodeViewModel(ITreeModelNode node);
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNode {
    [NotNullAttribute]
public ITreeModel Model { get; }
    [CanBeNullAttribute]
public ITreeModelNode Parent { get; public set; }
    [NotNullAttribute]
public object DataValue { get; }
    [NotNullAttribute]
public IBindableView`1<ITreeModelNode> Children { get; }
    [NotNullAttribute]
public IBindableView`1<ITreeModelNode> ChildrenFiltered { get; }
    [NotNullAttribute]
public IBindableCollection`1<ITreeModelNode> ChildrenRaw { get; }
    public bool IsDisposed { get; }
    public abstract virtual ITreeModel get_Model();
    public abstract virtual ITreeModelNode get_Parent();
    public abstract virtual void set_Parent(ITreeModelNode value);
    public abstract virtual object get_DataValue();
    public abstract virtual IBindableView`1<ITreeModelNode> get_Children();
    public abstract virtual IBindableView`1<ITreeModelNode> get_ChildrenFiltered();
    public abstract virtual IBindableCollection`1<ITreeModelNode> get_ChildrenRaw();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disposed(EventHandler`1<EventArgs> value);
    public abstract virtual bool get_IsDisposed();
    public abstract virtual void Reinitialize();
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNode`1 {
    [NotNullAttribute]
public IBindableView`1<T> Children { get; }
    [NotNullAttribute]
public IBindableCollection`1<T> ChildrenRaw { get; }
    public abstract virtual IBindableView`1<T> get_Children();
    public abstract virtual IBindableCollection`1<T> get_ChildrenRaw();
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNodeCollection {
    [CanBeNullAttribute]
public ITreeModelNode Owner { get; }
    public abstract virtual ITreeModelNode get_Owner();
}
public interface JetBrains.Application.UI.TreeModels.New.ITreeModelNodeWithUnitialize {
    public abstract virtual void Uninitialize();
}
public class JetBrains.Application.UI.TreeModels.New.LeafLiveTreeNode`1 : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private ITreeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeModelNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeModelNodeModifiers <JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disposed;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public ITreeModel Model { get; protected set; }
    public object DataValue { get; protected set; }
    public ITreeModelNode Parent { get; public set; }
    private TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.Model { get; }
    private TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.Parent { get; }
    private object JetBrains.Util.IPresentableStructureElement.PresentationObject { get; }
    private IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.Children { get; }
    private IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.ChildrenUnsorted { get; }
    private bool JetBrains.Application.UI.TreeModels.TreeModelNode.HasChildren { get; }
    private TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers { get; private set; }
    public IBindableView`1<T> Children { get; }
    public IBindableCollection`1<T> ChildrenRaw { get; }
    public bool IsDisposed { get; private set; }
    private IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenRaw { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenFiltered { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.Children { get; }
    protected bool IsInitialized { get; }
    public LeafLiveTreeNode`1(LiveTreeModel model, object dataValue);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModel get_Model();
    [CompilerGeneratedAttribute]
protected void set_Model(ITreeModel value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_DataValue();
    [CompilerGeneratedAttribute]
protected void set_DataValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModelNode get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(ITreeModelNode value);
    private sealed virtual override TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.get_Model();
    private sealed virtual override TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.get_Parent();
    private sealed virtual override object JetBrains.Util.IPresentableStructureElement.get_PresentationObject();
    private sealed virtual override IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_Children();
    private sealed virtual override IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_ChildrenUnsorted();
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModelNode.get_HasChildren();
    [CompilerGeneratedAttribute]
private sealed virtual override TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.get_Modifiers();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModelNode.set_Modifiers(TreeModelNodeModifiers value);
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    public sealed virtual IBindableView`1<T> get_Children();
    public sealed virtual IBindableCollection`1<T> get_ChildrenRaw();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    private sealed virtual override IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenRaw();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenFiltered();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_Children();
    protected bool get_IsInitialized();
    public sealed virtual void Reinitialize();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual string ToString();
    public sealed virtual void Dispose();
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeGroupModel`1 : LiveTreeModel {
    private IProperty`1<IBindableView`1<TItem>> myItems;
    private IProperty`1<IEnumerable`1<ILiveTreeGroupProvider<TItem>>> myGroupProviders;
    private SequentialLifetimes myGroupingSequentialLifetimes;
    private Lifetime myCurrentItemsLifetime;
    [CanBeNullAttribute]
private LifetimeDefinition myCurrentRegrouping;
    [NotNullAttribute]
public IBindableView`1<TItem> Items { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<ILiveTreeGroupProvider<TItem>> GroupProviders { get; public set; }
    public LiveTreeGroupModel`1(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> dataValueComparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    public IBindableView`1<TItem> get_Items();
    public void set_Items(IBindableView`1<TItem> value);
    public IEnumerable`1<ILiveTreeGroupProvider<TItem>> get_GroupProviders();
    public void set_GroupProviders(IEnumerable`1<ILiveTreeGroupProvider<TItem>> value);
    protected void ForceRegrouping();
    private static Lifetime DisposingUnderWriteLockLifetime(Lifetime parentLifetime, ISync writeLock);
    private void Initialize(Lifetime lifetime);
    private void CleanTree();
    protected virtual bool IsMeaningfulItem(TItem item);
    private GroupManagementCallbacks<TItem> Callbacks(IEnumerable`1<TItem> items);
    protected virtual void OnNodeCreated(ITreeModelNode node, ITreeModelNode parent);
    protected void OnItemsAddedSafe(IEnumerable`1<TItem> items);
    protected virtual void OnItemsAdded(IEnumerable`1<TItem> items);
    protected void OnItemAdded(TItem item);
    protected void OnItemRemoved(TItem item);
    protected virtual void BeforeInitialize();
    protected virtual void AfterInitialize();
    protected void OnItemsRemovedSafe(IEnumerable`1<TItem> items);
    protected void OnItemsRemoved(IEnumerable`1<TItem> items);
    [CompilerGeneratedAttribute]
private void <ForceRegrouping>b__12_0();
    [CompilerGeneratedAttribute]
private void <Initialize>b__14_0(IEnumerable`1<TItem> _, IEnumerable`1<TItem> _);
}
public abstract class JetBrains.Application.UI.TreeModels.New.LiveTreeGroupModel`2 : LiveTreeGroupModel`1<TItem> {
    [NotNullAttribute]
protected TRoot Root { get; }
    protected LiveTreeGroupModel`2(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> dataValueComparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    protected TRoot get_Root();
    protected virtual ITreeModelNode InitializeRoot();
    protected abstract virtual TRoot InitializeTypedRoot();
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeModel : object {
    [NotNullAttribute]
private IThreading myThreading;
    private ITreeModelNode myRoot;
    [NotNullAttribute]
protected OneToSetMap`2<object, ITreeModelNode> NodeMap;
    [NotNullAttribute]
protected IProperty`1<bool> IsBusy;
    private bool myShouldDelay;
    private object myShouldDelayLock;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadWriteLock <Lock>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadWriteLock <UILock>k__BackingField;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<object> <DataValueComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ILiveTreeModelFilter> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<ILiveTreeModelComparer> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private INodeChildrenUpdater <NodeChildrenUpdater>k__BackingField;
    [CompilerGeneratedAttribute]
private IParentProvider <ParentProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private int mySuspendCount;
    [CompilerGeneratedAttribute]
private Action OnSuspendedEvent;
    [CompilerGeneratedAttribute]
private Action OnResumedEvent;
    [CompilerGeneratedAttribute]
private Action OnStructureChanged;
    private IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.Roots { get; }
    private IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.RootsUnsorted { get; }
    private bool JetBrains.Application.UI.TreeModels.TreeModel.InUpdate { get; }
    private IComparer`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.Comparer { get; private set; }
    private IEqualityComparer`1<object> JetBrains.Application.UI.TreeModels.TreeModel.EqualityComparer { get; }
    [NotNullAttribute]
protected ITreeModelNode Root { get; }
    public IBindableCollection`1<ITreeModelNode> ChildrenRaw { get; }
    public IBindableView`1<ITreeModelNode> Children { get; }
    public Lifetime Lifetime { get; }
    public ReadWriteLock Lock { get; }
    public ReadWriteLock UILock { get; }
    public IEqualityComparer`1<object> DataValueComparer { get; }
    public IProperty`1<ILiveTreeModelFilter> Filter { get; }
    public IProperty`1<ILiveTreeModelComparer> Comparer { get; }
    public INodeChildrenUpdater NodeChildrenUpdater { get; }
    public IBindableView`1<ITreeModelNode> Roots { get; }
    public bool SuspendDuringModelChanging { get; }
    [CanBeNullAttribute]
protected IParentProvider ParentProvider { get; }
    public bool ShouldDelay { get; public set; }
    public bool IsSuspended { get; }
    public LiveTreeModel(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> dataValueComparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter, INodeChildrenUpdaterFactory nodeChildrenUpdaterFactory);
    private sealed virtual override IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_Roots();
    private sealed virtual override IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_RootsUnsorted();
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModel.get_InUpdate();
    private sealed virtual override IComparer`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_Comparer();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.set_Comparer(IComparer`1<TreeModelNode> value);
    private sealed virtual override IEqualityComparer`1<object> JetBrains.Application.UI.TreeModels.TreeModel.get_EqualityComparer();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.Update();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.BeginUpdate();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.EndUpdate();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.add_Updating(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.remove_Updating(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.add_Updated(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.remove_Updated(EventHandler value);
    private sealed virtual override TreeModelNode JetBrains.Application.UI.TreeModels.TreeModel.GetNodeContainer(TreeModelNode node);
    private sealed virtual override IList`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.GetNodes(object dataValue);
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModel.NeedUpdateChildren(TreeModelNode node);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.UpdateChildren(TreeModelNode node, List`1<TreeModelNode> children);
    private sealed virtual override IDisposable JetBrains.Application.UI.TreeModels.TreeModel.UpdateCookie();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.TreeModels.New.LiveTreeModel/<JetBrains-Application-UI-TreeModels-TreeModel-GetDescendants>d__25")]
private sealed virtual override IEnumerable`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.GetDescendants();
    protected ITreeModelNode get_Root();
    public sealed virtual IBindableCollection`1<ITreeModelNode> get_ChildrenRaw();
    public sealed virtual IBindableView`1<ITreeModelNode> get_Children();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual ReadWriteLock get_Lock();
    [CompilerGeneratedAttribute]
public sealed virtual ReadWriteLock get_UILock();
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<object> get_DataValueComparer();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ILiveTreeModelFilter> get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<ILiveTreeModelComparer> get_Comparer();
    [CompilerGeneratedAttribute]
public sealed virtual INodeChildrenUpdater get_NodeChildrenUpdater();
    public IBindableView`1<ITreeModelNode> get_Roots();
    public virtual bool get_SuspendDuringModelChanging();
    [CompilerGeneratedAttribute]
protected virtual IParentProvider get_ParentProvider();
    public sealed virtual bool get_ShouldDelay();
    public sealed virtual void set_ShouldDelay(bool value);
    protected virtual ITreeModelNode InitializeRootAndSubscribe();
    protected virtual ITreeModelNode InitializeRoot();
    protected virtual ITreeModelNode CreateNode(object dataItem);
    protected internal virtual void OnChildAdded(ITreeModelNode parent, ITreeModelNode child);
    protected internal virtual void OnChildRemoved(ITreeModelNode parent, ITreeModelNode child);
    [NotNullAttribute]
protected ITreeModelNode Insert(object dataValue, ITreeModelNode parent);
    [NotNullAttribute]
protected ITreeModelNode Insert(ITreeModelNode node, ITreeModelNode parent);
    protected virtual void OnNodeCreated(ITreeModelNode node, ITreeModelNode parent);
    protected void Detach(ITreeModelNode node);
    protected void Remove(ITreeModelNode node);
    protected void Remove(object dataValue);
    [NotNullAttribute]
[ItemNotNullAttribute]
public sealed virtual ICollection`1<ITreeModelNode> GetNodes(object dataValue);
    public virtual void EvaluateNodeViewModel(ITreeModelNode node);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual void CleanAll();
    public sealed virtual void BeginEvaluate(object node, bool recursive, Action afterEvaluation);
    private void EvaluateNode(ITreeModelNode node, bool recursive);
    private void HandleFilterChanged();
    public virtual bool get_IsSuspended();
    public sealed virtual void Suspend();
    public sealed virtual void Resume();
    protected virtual void OnSuspended();
    protected virtual void OnResumed();
    [CompilerGeneratedAttribute]
public void add_OnSuspendedEvent(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnSuspendedEvent(Action value);
    [CompilerGeneratedAttribute]
public void add_OnResumedEvent(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnResumedEvent(Action value);
    [CompilerGeneratedAttribute]
public void add_OnStructureChanged(Action value);
    [CompilerGeneratedAttribute]
public void remove_OnStructureChanged(Action value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__63_0(PropertyChangedEventArgs`1<ILiveTreeModelFilter> _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__63_1(PropertyChangedEventArgs`1<ILiveTreeModelComparer> _);
    [CompilerGeneratedAttribute]
private void <InitializeRootAndSubscribe>b__70_0();
    [CompilerGeneratedAttribute]
private void <InitializeRootAndSubscribe>b__70_2();
}
public abstract class JetBrains.Application.UI.TreeModels.New.LiveTreeModel`1 : LiveTreeModel {
    [NotNullAttribute]
protected TRoot Root { get; }
    protected LiveTreeModel`1(Lifetime lifetime, ReadWriteLock rwLock, IThreading threading, IEqualityComparer`1<object> dataValueComparer, ILiveTreeModelComparer sorter, ILiveTreeModelFilter filter);
    protected TRoot get_Root();
    protected virtual ITreeModelNode InitializeRoot();
    protected abstract virtual TRoot InitializeTypedRoot();
}
public enum JetBrains.Application.UI.TreeModels.New.LiveTreeModelFilterMatchResult : Enum {
    public int value__;
    public static LiveTreeModelFilterMatchResult No;
    public static LiveTreeModelFilterMatchResult Yes;
    public static LiveTreeModelFilterMatchResult MayBe;
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeNode : LiveTreeNode`1<ITreeModelNode> {
    public LiveTreeNode(LiveTreeModel model, object dataValue);
}
public class JetBrains.Application.UI.TreeModels.New.LiveTreeNode`1 : object {
    private ILogger myLogger;
    public static IDependencyDefinition ChildrenCountDependency;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Disposed;
    private LiveTreeNodeCollection`1<T, T> myChildrenRaw;
    private IBindableView`1<T> myChildren;
    private IBindableView`1<T> myChildrenFiltered;
    [CompilerGeneratedAttribute]
private ITreeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeModelNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeModelNodeModifiers <JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers>k__BackingField;
    public ITreeModel Model { get; protected set; }
    public object DataValue { get; protected set; }
    public ITreeModelNode Parent { get; public set; }
    public bool IsDisposed { get; private set; }
    private TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.Model { get; }
    private TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.Parent { get; }
    private object JetBrains.Util.IPresentableStructureElement.PresentationObject { get; }
    private IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.Children { get; }
    private IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.ChildrenUnsorted { get; }
    private bool JetBrains.Application.UI.TreeModels.TreeModelNode.HasChildren { get; }
    private TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.Modifiers { get; private set; }
    public IBindableView`1<T> Children { get; }
    public IBindableView`1<T> ChildrenFiltered { get; }
    public IBindableCollection`1<T> ChildrenRaw { get; }
    private IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenRaw { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.Children { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.ChildrenFiltered { get; }
    public bool IsInitialized { get; }
    public LiveTreeNode`1(LiveTreeModel model, object dataValue);
    private static LiveTreeNode`1();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModel get_Model();
    [CompilerGeneratedAttribute]
protected void set_Model(ITreeModel value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_DataValue();
    [CompilerGeneratedAttribute]
protected void set_DataValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual ITreeModelNode get_Parent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parent(ITreeModelNode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    private sealed virtual override TreeModel JetBrains.Application.UI.TreeModels.TreeModelNode.get_Model();
    private sealed virtual override TreeModelNode JetBrains.Application.UI.TreeModels.TreeModelNode.get_Parent();
    private sealed virtual override object JetBrains.Util.IPresentableStructureElement.get_PresentationObject();
    private sealed virtual override IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_Children();
    private sealed virtual override IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModelNode.get_ChildrenUnsorted();
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModelNode.get_HasChildren();
    [CompilerGeneratedAttribute]
private sealed virtual override TreeModelNodeModifiers JetBrains.Application.UI.TreeModels.TreeModelNode.get_Modifiers();
    [CompilerGeneratedAttribute]
private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModelNode.set_Modifiers(TreeModelNodeModifiers value);
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    private sealed virtual override int JetBrains.Application.UI.TreeModels.TreeModelNode.GetItemCount();
    public sealed virtual IBindableView`1<T> get_Children();
    public IBindableView`1<T> get_ChildrenFiltered();
    public sealed virtual IBindableCollection`1<T> get_ChildrenRaw();
    private sealed virtual override IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenRaw();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_Children();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModelNode.get_ChildrenFiltered();
    public bool get_IsInitialized();
    public sealed virtual void Reinitialize();
    private string DumpTree(ITreeModel model);
    private string DumpBranch(ITreeModelNode node);
    private void DumpNode(ITreeModelNode node, StringBuilder builder, string indent);
    protected virtual void InitAggregators(IBindableView`1<T> filteredChildrenRaw);
    private IBindableView`1<T> InitializeFilteredChildren();
    private IBindableView`1<T> Initialize();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    public virtual string ToString();
    public virtual void Dispose();
    public virtual void Uninitialize();
}
public class JetBrains.Application.UI.TreeModels.New.MainThreadExecutor : object {
    private IThreading myThreading;
    public MainThreadExecutor(IThreading threading);
    public sealed virtual void Execute(Lifetime lifetime, string name, Action action);
}
public enum JetBrains.Application.UI.TreeModels.New.NodeChildrenUpdatePolicy : Enum {
    public int value__;
    public static NodeChildrenUpdatePolicy Sync;
    public static NodeChildrenUpdatePolicy Async;
}
public class JetBrains.Application.UI.TreeModels.New.OrLiveFilter : object {
    private List`1<ILiveTreeModelFilter> myFilters;
    public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public OrLiveFilter(ILiveTreeModelFilter filter, ILiveTreeModelFilter anotherFilter, ILiveTreeModelFilter[] otherFilters);
    public sealed virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public sealed virtual LiveTreeModelFilterMatchResult Matches(ITreeModelNode node);
}
internal class JetBrains.Application.UI.TreeModels.New.SyncNodeChildrenUpdater : object {
    private ISync myModelLock;
    [CompilerGeneratedAttribute]
private IProperty`1<bool> <Idle>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ITreeModelNode> <ChildrenNodeUpdated>k__BackingField;
    public IProperty`1<bool> Idle { get; }
    public ISignal`1<ITreeModelNode> ChildrenNodeUpdated { get; }
    public bool IsSync { get; }
    public SyncNodeChildrenUpdater(Lifetime lifetime, ISync modelLock);
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<bool> get_Idle();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ITreeModelNode> get_ChildrenNodeUpdated();
    public sealed virtual bool get_IsSync();
    public sealed virtual void Clean(bool cleanRoot);
    public sealed virtual IBindableView`1<T> UpdateNode(ITreeModelNode node, IBindableView`1<T> children);
    public sealed virtual void DetachNodeFromParent(ITreeModelNode node);
    public sealed virtual void AttachNodeToParent(ITreeModelNode node, ITreeModelNode parent);
    public sealed virtual void DisposeNode(ITreeModelNode node);
}
public class JetBrains.Application.UI.TreeModels.New.SyncNodeChildrenUpdaterFactory : object {
    public sealed virtual INodeChildrenUpdater Create(Lifetime lifetime, ISync bgWriteLock, ReadWriteLock uiLock, GroupingEventProlongation prolongationPolicy);
    public sealed virtual ReadWriteLock CreateUILock(ReadWriteLock bgWriteLock);
}
public class JetBrains.Application.UI.TreeModels.OccurrenceFlexibleTreeModelGrouping`1 : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    private ICollection`1<TreeGroupFeatureExtractor`1<TItem>> myExtractors;
    public string Title { get; private set; }
    public OccurrenceFlexibleTreeModelGrouping`1(TreeGroupFeatureExtractor`1[] extractors);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
private void set_Title(string value);
}
public enum JetBrains.Application.UI.TreeModels.RecursionPreventionStyle : Enum {
    public int value__;
    public static RecursionPreventionStyle None;
    public static RecursionPreventionStyle StopOnOccurrence;
    public static RecursionPreventionStyle PreventOccurrence;
    public static RecursionPreventionStyle StopOnDuplicatedOccurence;
}
public class JetBrains.Application.UI.TreeModels.Revised.FilteredChildrenInitializer`1 : ReactiveChildrenInitializer`1<TNode> {
    [NotNullAttribute]
private static IDependencyDefinition ourChildrenCountDependency;
    [CompilerGeneratedAttribute]
private IProperty`1<ITreeModelFilter> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private IDependencyDefinition <FilterDependency>k__BackingField;
    [NotNullAttribute]
public IProperty`1<ITreeModelFilter> Filter { get; }
    [NotNullAttribute]
protected IDependencyDefinition FilterDependency { get; }
    public FilteredChildrenInitializer`1(Lifetime lifetime, ITreeModelFilter filter);
    private static FilteredChildrenInitializer`1();
    [CompilerGeneratedAttribute]
public IProperty`1<ITreeModelFilter> get_Filter();
    [CompilerGeneratedAttribute]
protected IDependencyDefinition get_FilterDependency();
    public virtual IBindableView`1<TNode> Initialize(TNode node, IBindableView`1<TNode> previous);
    protected virtual bool ShouldShowInTree(TNode node);
}
public class JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2 : object {
    [ThreadStaticAttribute]
private static bool ourIsEvaluatingChildren;
    [ThreadStaticAttribute]
private static bool ourIsPartiallyRegrouping;
    [NotNullAttribute]
private Lifetime myLifetime;
    [NotNullAttribute]
private SequentialLifetimes myLifetimes;
    [NotNullAttribute]
private Func`2<TItem, IReadOnlyCollection`1<TItem>> myGetAffectedItems;
    [CompilerGeneratedAttribute]
private IProperty`1<IBindableSet`1<TItem>> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IEnumerable`1<IGroupProvider<TItem, TNode>>> <GroupProviders>k__BackingField;
    private Lifetime myCurrentItemsLifetime;
    private int myIsInitialized;
    private int myChangeMitigationCounter;
    public bool IsEvaluatingChildren { get; }
    public bool IsPartiallyRegrouping { get; }
    [NotNullAttribute]
public IProperty`1<IBindableSet`1<TItem>> Items { get; }
    [NotNullAttribute]
public IProperty`1<IEnumerable`1<IGroupProvider<TItem, TNode>>> GroupProviders { get; }
    public GroupedChildrenInitializer`2(Lifetime lifetime, Func`2<TItem, IReadOnlyCollection`1<TItem>> getAffectedItems);
    public bool get_IsEvaluatingChildren();
    public bool get_IsPartiallyRegrouping();
    [CompilerGeneratedAttribute]
public IProperty`1<IBindableSet`1<TItem>> get_Items();
    [CompilerGeneratedAttribute]
public IProperty`1<IEnumerable`1<IGroupProvider<TItem, TNode>>> get_GroupProviders();
    public sealed virtual IBindableView`1<TNode> Initialize(TNode node, IBindableView`1<TNode> previous);
    private void SubscribeToChangesAndBuildTree(TreeModel`1<TNode> model);
    private void RebuildTree(Lifetime lifetime, TreeModel`1<TNode> model);
    private void IfNotMitigated(Action`2<TreeModel`1<TNode>, T> action, TreeModel`1<TNode> model, T arg0);
    protected virtual void ClearTree(TreeModel`1<TNode> model);
    protected virtual void OnChildrenEvaluate(TNode node);
    protected virtual void OnItemsAdded(TreeModel`1<TNode> model, IReadOnlyCollection`1<TItem> items);
    protected virtual void OnItemsAdded(TreeModel`1<TNode> model, IReadOnlyCollection`1<TItem> items, TNode nodeBeingAddedTo);
    protected virtual bool AddItemToNode(TNode node, TItem item);
    protected virtual bool RemoveItemFromNode(TNode node, TItem item);
    protected virtual void OnItemAdded(TreeModel`1<TNode> model, TItem item, IEnumerable`1<IGroupProvider<TItem, TNode>> providers, TNode startingNode);
    [NotNullAttribute]
private IEnumerable`1<IGroupProvider<TItem, TNode>> GetRemainingProviders(TNode& targetNode);
    protected virtual void OnItemsRemoved(TreeModel`1<TNode> model, IReadOnlyCollection`1<TItem> items);
    protected virtual void OnRegroupItem(TreeModel`1<TNode> model, TItem item);
    public void RegroupItems(TreeModel`1<TNode> model, IReadOnlyCollection`1<TItem> items);
    public LocalDisposable ManualChangeMitigation();
    [CompilerGeneratedAttribute]
private void <OnItemsRemoved>b__31_0(TNode node, IReadOnlyCollection`1<TItem> items, int count);
    [CompilerGeneratedAttribute]
private void <ManualChangeMitigation>b__34_0();
}
public interface JetBrains.Application.UI.TreeModels.Revised.IDataValueProxy {
    public object OriginalDataValue { get; }
    public abstract virtual object get_OriginalDataValue();
}
public interface JetBrains.Application.UI.TreeModels.Revised.IOwned`1 {
    [NotNullAttribute]
public TNode Owner { get; }
    public abstract virtual TNode get_Owner();
}
public interface JetBrains.Application.UI.TreeModels.Revised.ITreeModel {
    [NotNullAttribute]
public Lifetime Lifetime { get; }
    [NotNullAttribute]
public UpgradableReadWriteLock Lock { get; }
    [NotNullAttribute]
public ITreeModelNode Root { get; }
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual UpgradableReadWriteLock get_Lock();
    public abstract virtual ITreeModelNode get_Root();
}
public interface JetBrains.Application.UI.TreeModels.Revised.ITreeModel`1 {
    [NotNullAttribute]
public TNode Root { get; }
    public abstract virtual TNode get_Root();
}
public interface JetBrains.Application.UI.TreeModels.Revised.ITreeModelComparer {
    [NotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
}
public interface JetBrains.Application.UI.TreeModels.Revised.ITreeModelFilter {
    [NotNullAttribute]
[ItemNotNullAttribute]
public IEnumerable`1<IDependencyDefinition> Dependencies { get; }
    public abstract virtual IEnumerable`1<IDependencyDefinition> get_Dependencies();
    public abstract virtual TreeModelFilterMatchResult Matches(ITreeModelNode node);
}
public interface JetBrains.Application.UI.TreeModels.Revised.ITreeModelNode {
    [CanBeNullAttribute]
public ITreeModelNode Parent { get; public set; }
    [NotNullAttribute]
public IBindableView`1<ITreeModelNode> Children { get; }
    [NotNullAttribute]
public ITreeModel Model { get; }
    [NotNullAttribute]
public object DataValue { get; }
    [NotNullAttribute]
public bool IsDisposed { get; }
    public abstract virtual ITreeModelNode get_Parent();
    public abstract virtual void set_Parent(ITreeModelNode value);
    public abstract virtual IBindableView`1<ITreeModelNode> get_Children();
    public abstract virtual ITreeModel get_Model();
    public abstract virtual object get_DataValue();
    public abstract virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Disposed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Disposed(EventHandler`1<EventArgs> value);
}
public interface JetBrains.Application.UI.TreeModels.Revised.ITreeModelNode`1 {
    [CanBeNullAttribute]
public TNode Parent { get; }
    [NotNullAttribute]
public IBindableView`1<TNode> Children { get; }
    [NotNullAttribute]
public ITreeModel`1<TNode> Model { get; }
    public abstract virtual TNode get_Parent();
    public abstract virtual IBindableView`1<TNode> get_Children();
    public abstract virtual ITreeModel`1<TNode> get_Model();
}
public interface JetBrains.Application.UI.TreeModels.Revised.ITreeModelNodeChildrenInitializer`1 {
    [NotNullAttribute]
[ItemNotNullAttribute]
public abstract virtual IBindableView`1<TNode> Initialize(TNode node, IBindableView`1<TNode> previous);
}
public abstract class JetBrains.Application.UI.TreeModels.Revised.ReactiveChildrenInitializer`1 : object {
    public abstract virtual IBindableView`1<TNode> Initialize(TNode node, IBindableView`1<TNode> previous);
}
public class JetBrains.Application.UI.TreeModels.Revised.SortedChildrenInitializer`1 : ReactiveChildrenInitializer`1<TNode> {
    [CompilerGeneratedAttribute]
private IProperty`1<ITreeModelComparer> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDependencyDefinition <ComparerDependency>k__BackingField;
    [NotNullAttribute]
public IProperty`1<ITreeModelComparer> Comparer { get; }
    protected IDependencyDefinition ComparerDependency { get; }
    public SortedChildrenInitializer`1(Lifetime lifetime, ITreeModelComparer comparer);
    [CompilerGeneratedAttribute]
public IProperty`1<ITreeModelComparer> get_Comparer();
    [CompilerGeneratedAttribute]
protected IDependencyDefinition get_ComparerDependency();
    public virtual IBindableView`1<TNode> Initialize(TNode node, IBindableView`1<TNode> previous);
}
public abstract class JetBrains.Application.UI.TreeModels.Revised.TreeModel`1 : object {
    [NotNullAttribute]
public static string RootKey;
    [NotNullAttribute]
protected OneToSetMap`2<object, TNode> NodeMap;
    private TNode myRoot;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private UpgradableReadWriteLock <Lock>k__BackingField;
    [CompilerGeneratedAttribute]
private ITreeModelNodeChildrenInitializer`1<TNode> <ChildrenInitializer>k__BackingField;
    private Lifetime JetBrains.Application.UI.TreeModels.New.ITreeModel.Lifetime { get; }
    private ReadWriteLock JetBrains.Application.UI.TreeModels.New.ITreeModel.Lock { get; }
    private ReadWriteLock JetBrains.Application.UI.TreeModels.New.ITreeModel.UILock { get; }
    private IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModel.Children { get; }
    private IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModel.ChildrenRaw { get; }
    private IProperty`1<ILiveTreeModelFilter> JetBrains.Application.UI.TreeModels.New.ITreeModel.Filter { get; }
    private IProperty`1<ILiveTreeModelComparer> JetBrains.Application.UI.TreeModels.New.ITreeModel.Comparer { get; }
    private INodeChildrenUpdater JetBrains.Application.UI.TreeModels.New.ITreeModel.NodeChildrenUpdater { get; }
    private IComparer`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.Comparer { get; private set; }
    private IEqualityComparer`1<object> JetBrains.Application.UI.TreeModels.TreeModel.EqualityComparer { get; }
    private IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.Roots { get; }
    private IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.RootsUnsorted { get; }
    private bool JetBrains.Application.UI.TreeModels.TreeModel.InUpdate { get; }
    [NotNullAttribute]
public ILogger Logger { get; }
    public Lifetime Lifetime { get; }
    public UpgradableReadWriteLock Lock { get; }
    public TNode Root { get; }
    public ITreeModelNodeChildrenInitializer`1<TNode> ChildrenInitializer { get; }
    private ITreeModelNode JetBrains.Application.UI.TreeModels.Revised.ITreeModel.Root { get; }
    protected TreeModel`1(Lifetime lifetime, UpgradableReadWriteLock lock, ITreeModelNodeChildrenInitializer`1<TNode> childrenInitializer, IEqualityComparer`1<object> dataValueComparer);
    private static TreeModel`1();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override Lifetime JetBrains.Application.UI.TreeModels.New.ITreeModel.get_Lifetime();
    private sealed virtual override ReadWriteLock JetBrains.Application.UI.TreeModels.New.ITreeModel.get_Lock();
    private sealed virtual override ReadWriteLock JetBrains.Application.UI.TreeModels.New.ITreeModel.get_UILock();
    private sealed virtual override IBindableView`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModel.get_Children();
    private sealed virtual override IBindableCollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModel.get_ChildrenRaw();
    private sealed virtual override IProperty`1<ILiveTreeModelFilter> JetBrains.Application.UI.TreeModels.New.ITreeModel.get_Filter();
    private sealed virtual override IProperty`1<ILiveTreeModelComparer> JetBrains.Application.UI.TreeModels.New.ITreeModel.get_Comparer();
    private sealed virtual override INodeChildrenUpdater JetBrains.Application.UI.TreeModels.New.ITreeModel.get_NodeChildrenUpdater();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.New.ITreeModel.EvaluateNodeViewModel(ITreeModelNode node);
    private sealed virtual override ICollection`1<ITreeModelNode> JetBrains.Application.UI.TreeModels.New.ITreeModel.GetNodes(object dataValue);
    private sealed virtual override IComparer`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_Comparer();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.set_Comparer(IComparer`1<TreeModelNode> value);
    private sealed virtual override IEqualityComparer`1<object> JetBrains.Application.UI.TreeModels.TreeModel.get_EqualityComparer();
    private sealed virtual override IBindableView`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_Roots();
    private sealed virtual override IBindableCollection`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.get_RootsUnsorted();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.Update();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.BeginUpdate();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.EndUpdate();
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModel.get_InUpdate();
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.add_Updating(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.remove_Updating(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.add_Updated(EventHandler value);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.remove_Updated(EventHandler value);
    private sealed virtual override TreeModelNode JetBrains.Application.UI.TreeModels.TreeModel.GetNodeContainer(TreeModelNode node);
    private sealed virtual override IList`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.GetNodes(object dataValue);
    private sealed virtual override bool JetBrains.Application.UI.TreeModels.TreeModel.NeedUpdateChildren(TreeModelNode node);
    private sealed virtual override void JetBrains.Application.UI.TreeModels.TreeModel.UpdateChildren(TreeModelNode node, List`1<TreeModelNode> children);
    private sealed virtual override IDisposable JetBrains.Application.UI.TreeModels.TreeModel.UpdateCookie();
    [IteratorStateMachineAttribute("JetBrains.Application.UI.TreeModels.Revised.TreeModel`1/<JetBrains-Application-UI-TreeModels-TreeModel-GetDescendants>d__47")]
private sealed virtual override IEnumerable`1<TreeModelNode> JetBrains.Application.UI.TreeModels.TreeModel.GetDescendants();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual UpgradableReadWriteLock get_Lock();
    public sealed virtual TNode get_Root();
    [CompilerGeneratedAttribute]
public ITreeModelNodeChildrenInitializer`1<TNode> get_ChildrenInitializer();
    private sealed virtual override ITreeModelNode JetBrains.Application.UI.TreeModels.Revised.ITreeModel.get_Root();
    protected virtual void OnNodeAttached(TNode parent, TNode node);
    protected virtual void OnNodeDetached(TNode parent, TNode node);
    [NotNullAttribute]
public ISet`1<TNode> GetNodes(object key);
    [NotNullAttribute]
public abstract virtual TNode CreateNode(object dataItem);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.TreeModels.Revised.TreeModelExtensions : object {
    [ExtensionAttribute]
public static void RemoveAndDestroy(TNode node);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertIsAlive(TNode node);
    [ExtensionAttribute]
public static T WithReadLock(TreeModel`1<TNode> model, Func`2<TreeModel`1<TNode>, T> selector);
}
public enum JetBrains.Application.UI.TreeModels.Revised.TreeModelFilterMatchResult : Enum {
    public int value__;
    public static TreeModelFilterMatchResult No;
    public static TreeModelFilterMatchResult Yes;
    public static TreeModelFilterMatchResult Maybe;
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.TreeModels.Revised.TreeModelNodeExtensions : object {
    [ExtensionAttribute]
public static bool IsAncestorOf(ITreeModelNode node, ITreeModelNode possibleChild);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.TreeModels.Revised.TreeModelNodeExtensions/<AncestorsAndSelf>d__1`1")]
[ExtensionAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<TNode> AncestorsAndSelf(TNode node, bool includeRoot);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertReadAccess(ITreeModel model);
    [ExtensionAttribute]
[ConditionalAttribute("JET_MODE_ASSERT")]
public static void AssertWriteAccess(ITreeModel model);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.TreeModels.Revised.TreeWithGroupedChildrenExtensions : object {
    [ExtensionAttribute]
public static void ForEachNodeHavingEx(TNode node, IReadOnlyCollection`1<TItem> items, Predicate`1<TNode> shouldInspectSubTree, Action`3<TNode, IReadOnlyCollection`1<TItem>, int> action);
    [ExtensionAttribute]
public static void ForEachChildHavingEx(TNode node, IReadOnlyCollection`1<TItem> items, Predicate`1<TNode> shouldInspectSubTree, Action`3<TNode, IReadOnlyCollection`1<TItem>, int> action);
    [ExtensionAttribute]
public static void ForEachNodeHaving(TNode node, IReadOnlyCollection`1<TItem> items, Action`3<TNode, IReadOnlyCollection`1<TItem>, int> action);
    [ExtensionAttribute]
public static void ForEachChildHaving(TNode node, IReadOnlyCollection`1<TItem> items, Action`3<TNode, IReadOnlyCollection`1<TItem>, int> action);
}
public abstract class JetBrains.Application.UI.TreeModels.TreeDemandModel : TreeModelBase {
    private HashSet`1<object> myWereSeenChildren;
    [CompilerGeneratedAttribute]
private RecursionPreventionStyle <RecursionPrevention>k__BackingField;
    public RecursionPreventionStyle RecursionPrevention { get; public set; }
    [CompilerGeneratedAttribute]
public RecursionPreventionStyle get_RecursionPrevention();
    [CompilerGeneratedAttribute]
public void set_RecursionPrevention(RecursionPreventionStyle value);
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    protected virtual void PerformUpdate();
    protected void BuildRoots();
    private void BuildChildren(TreeModelNode node);
    protected abstract virtual bool HasChildren(TreeModelNode modelNode);
    protected abstract virtual IEnumerable GetChildren(TreeModelNode modelNode);
}
public class JetBrains.Application.UI.TreeModels.TreeDemandModel2 : TreeDemandModel {
    [CompilerGeneratedAttribute]
private EventHandler`1<ChildrenWantedEventArgs> ChildrenWanted;
    public TreeDemandModel2(Func`2<object, IEnumerable> children);
    public TreeDemandModel2(Func`2<object, IEnumerable> children, int expandToLevel);
    [CompilerGeneratedAttribute]
public void add_ChildrenWanted(EventHandler`1<ChildrenWantedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ChildrenWanted(EventHandler`1<ChildrenWantedEventArgs> value);
    public void Expand(int levels);
    protected virtual IEnumerable GetChildren(TreeModelNode modelNode);
    protected IEnumerable FireChildrenWanted(object dataValue);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.TreeModels.TreeDemandModel2/<GetAllNodes>d__9")]
public IEnumerable`1<TreeModelNode> GetAllNodes(int levels);
    protected virtual bool HasChildren(TreeModelNode modelNode);
}
public class JetBrains.Application.UI.TreeModels.TreeGroupFeatureExtractor`1 : object {
    private ITreeGroupProvider`1<T> myGroupProvider;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    public string Title { get; }
    public bool IsEnabled { get; public set; }
    public bool IsVisible { get; public set; }
    public TreeGroupFeatureExtractor`1(string title, ITreeGroupProvider`1<T> groupProvider);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    public sealed virtual object ExtractGroupObject(T item);
    public virtual string ToString();
}
public class JetBrains.Application.UI.TreeModels.TreeGroupModel`1 : TreeModelBase {
    private Predicate`1<TItem> myFilter;
    private int myFilteredCount;
    private ICollection`1<ITreeGroupProvider`1<TItem>> myGroupProviders;
    private IList`1<TItem> myItems;
    private int myTotalCount;
    public IEnumerable`1<TItem> Items { get; public set; }
    public int TotalCount { get; }
    public int FilteredCount { get; }
    public Predicate`1<TItem> Filter { get; public set; }
    public ICollection`1<ITreeGroupProvider`1<TItem>> GroupProviders { get; public set; }
    public TreeGroupModel`1(IEqualityComparer`1<object> equalityComparer);
    public IEnumerable`1<TItem> get_Items();
    public void set_Items(IEnumerable`1<TItem> value);
    public int get_TotalCount();
    public int get_FilteredCount();
    public Predicate`1<TItem> get_Filter();
    public void set_Filter(Predicate`1<TItem> value);
    public ICollection`1<ITreeGroupProvider`1<TItem>> get_GroupProviders();
    public void set_GroupProviders(ICollection`1<ITreeGroupProvider`1<TItem>> value);
    public void MoveNodeUp(TreeModelNode node);
    public void MoveNodeDown(TreeModelNode node);
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    protected virtual void PerformUpdate();
    private bool FilterItem(TItem item);
    protected virtual void ProcessItem(TItem item);
}
public interface JetBrains.Application.UI.TreeModels.TreeModel {
    [NotNullAttribute]
public IEqualityComparer`1<object> EqualityComparer { get; }
    public IBindableView`1<TreeModelNode> Roots { get; }
    public IBindableCollection`1<TreeModelNode> RootsUnsorted { get; }
    public bool InUpdate { get; }
    [NotNullAttribute]
public IComparer`1<TreeModelNode> Comparer { get; public set; }
    public abstract virtual IEqualityComparer`1<object> get_EqualityComparer();
    public abstract virtual IBindableView`1<TreeModelNode> get_Roots();
    public abstract virtual IBindableCollection`1<TreeModelNode> get_RootsUnsorted();
    public abstract virtual bool get_InUpdate();
    public abstract virtual IComparer`1<TreeModelNode> get_Comparer();
    public abstract virtual void set_Comparer(IComparer`1<TreeModelNode> value);
    public abstract virtual void Update();
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Updating(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Updating(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Updated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Updated(EventHandler value);
    public abstract virtual TreeModelNode GetNodeContainer(TreeModelNode node);
    public abstract virtual IList`1<TreeModelNode> GetNodes(object dataValue);
    public abstract virtual bool NeedUpdateChildren(TreeModelNode node);
    public abstract virtual void UpdateChildren(TreeModelNode node, List`1<TreeModelNode> children);
    public abstract virtual IDisposable UpdateCookie();
    public abstract virtual IEnumerable`1<TreeModelNode> GetDescendants();
}
public abstract class JetBrains.Application.UI.TreeModels.TreeModelBase : object {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<object> <EqualityComparer>k__BackingField;
    private OneToListMap`2<object, TreeModelNode> myNodeMap;
    private FakeBindableList`1<TreeModelNode> myRoots;
    private JetHashSet`1<TreeModelNode> myChangedNodeContents;
    private IComparer`1<TreeModelNode> myComparer;
    private bool myDirty;
    private bool myChangedRoots;
    private int myUpdateCount;
    [CompilerGeneratedAttribute]
private EventHandler Updating;
    [CompilerGeneratedAttribute]
private EventHandler Updated;
    public IEqualityComparer`1<object> EqualityComparer { get; }
    public IBindableView`1<TreeModelNode> Roots { get; }
    public IBindableCollection`1<TreeModelNode> RootsUnsorted { get; }
    public bool InUpdate { get; }
    public IComparer`1<TreeModelNode> Comparer { get; public set; }
    protected TreeModelBase(IEqualityComparer`1<object> equalityComparer);
    [CompilerGeneratedAttribute]
public sealed virtual IEqualityComparer`1<object> get_EqualityComparer();
    public sealed virtual IBindableView`1<TreeModelNode> get_Roots();
    public sealed virtual IBindableCollection`1<TreeModelNode> get_RootsUnsorted();
    public sealed virtual bool get_InUpdate();
    public sealed virtual IComparer`1<TreeModelNode> get_Comparer();
    public sealed virtual void set_Comparer(IComparer`1<TreeModelNode> value);
    public sealed virtual void Update();
    public sealed virtual IDisposable UpdateCookie();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    protected void NeedUpdate();
    private void DoUpdate();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Updating(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Updating(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Updated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Updated(EventHandler value);
    protected virtual void OnUpdating();
    protected virtual void OnUpdated();
    protected abstract virtual void PerformUpdate();
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    protected TreeModelNode Insert(TreeModelNode parent, object dataValue);
    protected void Remove(TreeModelNode modelNode);
    protected void Remove(object dataValue);
    public virtual TreeModelNode GetNodeContainer(TreeModelNode node);
    public virtual IList`1<TreeModelNode> GetNodes(object dataValue);
    protected virtual void Clear();
    internal void SortRoots(IComparer`1<TreeModelNode> comparer);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.TreeModels.TreeModelBase/<GetDescendants>d__44")]
public virtual IEnumerable`1<TreeModelNode> GetDescendants();
    public sealed virtual bool NeedUpdateChildren(TreeModelNode node);
    public sealed virtual void UpdateChildren(TreeModelNode node, List`1<TreeModelNode> children);
}
public class JetBrains.Application.UI.TreeModels.TreeModelGrouping`1 : object {
    private ICollection`1<ITreeGroupProvider`1<T>> myGroups;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public ICollection`1<ITreeGroupProvider`1<T>> Groups { get; }
    public TreeModelGrouping`1(string name);
    public TreeModelGrouping`1(string name, ITreeGroupProvider`1[] groups);
    public TreeModelGrouping`1(string name, ICollection`1<ITreeGroupProvider`1<T>> groups);
    [CompilerGeneratedAttribute]
public string get_Name();
    public ICollection`1<ITreeGroupProvider`1<T>> get_Groups();
}
public interface JetBrains.Application.UI.TreeModels.TreeModelNode {
    public TreeModel Model { get; }
    public TreeModelNode Parent { get; }
    public object DataValue { get; }
    public IBindableView`1<TreeModelNode> Children { get; }
    public IBindableCollection`1<TreeModelNode> ChildrenUnsorted { get; }
    public bool HasChildren { get; }
    public TreeModelNodeModifiers Modifiers { get; public set; }
    public abstract virtual TreeModel get_Model();
    public abstract virtual TreeModelNode get_Parent();
    public abstract virtual object get_DataValue();
    public abstract virtual IBindableView`1<TreeModelNode> get_Children();
    public abstract virtual IBindableCollection`1<TreeModelNode> get_ChildrenUnsorted();
    public abstract virtual bool get_HasChildren();
    public abstract virtual TreeModelNodeModifiers get_Modifiers();
    public abstract virtual void set_Modifiers(TreeModelNodeModifiers value);
    public abstract virtual int GetItemCount();
    public abstract virtual int GetItemCount();
}
public class JetBrains.Application.UI.TreeModels.TreeModelNodeBase : object {
    private TreeModel myModel;
    private TreeModelNode myParent;
    private object myDataValue;
    private FakeBindableList`1<TreeModelNode> myChildren;
    [CompilerGeneratedAttribute]
private TreeModelNodeModifiers <Modifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public TreeModel Model { get; }
    public TreeModelNode Parent { get; protected set; }
    public object DataValue { get; }
    public IBindableView`1<TreeModelNode> Children { get; }
    public IBindableCollection`1<TreeModelNode> ChildrenUnsorted { get; }
    public bool HasChildren { get; }
    public TreeModelNodeModifiers Modifiers { get; public set; }
    private object JetBrains.Util.IPresentableStructureElement.PresentationObject { get; }
    public TreeModelNodeBase(TreeModel model, TreeModelNode parent, object dataValue);
    public sealed virtual TreeModel get_Model();
    public sealed virtual TreeModelNode get_Parent();
    protected void set_Parent(TreeModelNode value);
    public sealed virtual object get_DataValue();
    public virtual IBindableView`1<TreeModelNode> get_Children();
    public virtual IBindableCollection`1<TreeModelNode> get_ChildrenUnsorted();
    public virtual bool get_HasChildren();
    [CompilerGeneratedAttribute]
public sealed virtual TreeModelNodeModifiers get_Modifiers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Modifiers(TreeModelNodeModifiers value);
    private sealed virtual override object JetBrains.Util.IPresentableStructureElement.get_PresentationObject();
    public virtual int GetItemCount();
    public virtual int GetItemCount();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
protected virtual void OnPropertyChanged(string propertyName);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.TreeModels.TreeModelNodeEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IDisposable GetBrackets(TreeModelNode node);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.TreeModels.TreeModelNodeEx/<GetDescendants>d__1")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TreeModelNode> GetDescendants(TreeModelNode node);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.TreeModels.TreeModelNodeEx/<GetSelfAndDescendants>d__2")]
[ExtensionAttribute]
[NotNullAttribute]
public static IEnumerable`1<TreeModelNode> GetSelfAndDescendants(TreeModelNode node);
    private static Nullable`1<bool> CheckIsNewModel(TreeModelNode node);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.TreeModels.TreeModelNodeModifiers : Enum {
    public int value__;
    public static TreeModelNodeModifiers None;
    public static TreeModelNodeModifiers Recursive;
    public static TreeModelNodeModifiers Duplicate;
}
public class JetBrains.Application.UI.TreeModels.TreeSection : object {
    private TreeModel myModel;
    private string myTitle;
    public string Title { get; }
    public TreeModel Model { get; }
    public TreeSection(TreeModel model, string title);
    public virtual string get_Title();
    public TreeModel get_Model();
    public virtual string ToString();
    protected bool Equals(TreeSection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.Application.UI.TreeModels.TreeSectionModel : TreeModelBase {
    private IList`1<TreeSection> mySections;
    public IList`1<TreeSection> Sections { get; public set; }
    public TreeSectionModel(IEqualityComparer`1<object> equalityComparer);
    public IList`1<TreeSection> get_Sections();
    public void set_Sections(IList`1<TreeSection> value);
    protected internal virtual TreeModelNode CreateNode(TreeModelNode parent, object value);
    public virtual TreeModelNode GetNodeContainer(TreeModelNode node);
    public virtual IList`1<TreeModelNode> GetNodes(object dataValue);
    protected virtual void Clear();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    private void SubModelUpdating(object sender, EventArgs e);
    private void SubModelUpdated(object sender, EventArgs e);
    protected virtual void PerformUpdate();
}
public class JetBrains.Application.UI.TreeModels.TreeSeparator : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; public set; }
    public TreeSeparator(string title);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    public virtual string ToString();
}
public class JetBrains.Application.UI.TreeModels.TreeSimpleModel : TreeModelBase {
    public TreeSimpleModel(IEqualityComparer`1<object> equalityComparer);
    public void Insert(object parentValue, object childValue);
    public void Remove(object childValue);
    protected virtual void PerformUpdate();
}
public abstract class JetBrains.Application.UI.UIAutomation.AAutomation : object {
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
}
public abstract class JetBrains.Application.UI.UIAutomation.AAutomationRecord : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected AAutomationRecord(AAutomationRecord original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AAutomationRecord left, AAutomationRecord right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AAutomationRecord left, AAutomationRecord right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AAutomationRecord other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public abstract virtual AAutomationRecord <Clone>$();
}
public class JetBrains.Application.UI.UIAutomation.AutomationWrapper : AAutomation {
    [CanBeNullAttribute]
public object Content;
    public AutomationWrapper(object content);
}
public class JetBrains.Application.UI.UIAutomation.ControlWrapper : object {
    [CompilerGeneratedAttribute]
private object <Control>k__BackingField;
    public object Control { get; }
    public ControlWrapper(object control);
    [CompilerGeneratedAttribute]
public object get_Control();
}
public class JetBrains.Application.UI.UIAutomation.ControlWrapperAutomation : AAutomation {
    private Func`1<ControlWrapper> myFactory;
    public ControlWrapper ControlWrapper { get; }
    public ControlWrapperAutomation(Func`1<ControlWrapper> controlWrapperFactory);
    public ControlWrapper get_ControlWrapper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.UIAutomation.ErrorCueBannerAutomation : AAutomationRecord {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DetailedInternalMessage>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string ErrorMessage { get; public set; }
    [NullableAttribute("2")]
public string DetailedInternalMessage { get; public set; }
    public ErrorCueBannerAutomation(string ErrorMessage, string DetailedInternalMessage);
    [CompilerGeneratedAttribute]
private ErrorCueBannerAutomation(ErrorCueBannerAutomation original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorMessage(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DetailedInternalMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DetailedInternalMessage(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ErrorCueBannerAutomation left, ErrorCueBannerAutomation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ErrorCueBannerAutomation left, ErrorCueBannerAutomation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(AAutomationRecord other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ErrorCueBannerAutomation other);
    [CompilerGeneratedAttribute]
public virtual AAutomationRecord <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ErrorMessage, String& DetailedInternalMessage);
}
public static class JetBrains.Application.UI.UIAutomation.FutureContentAutomation : object {
    [CanBeNullAttribute]
public static IAutomation WrapIfNeeded(Lifetime lifetime, ValueTask`1<IAutomation> futureContent, IThreading threading, TaskPriority priority);
}
public interface JetBrains.Application.UI.UIAutomation.IAutomation {
}
public class JetBrains.Application.UI.UIAutomation.LoadingCueBannerAutomation : AAutomation {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JetBrains.Application.UI.UIAutomation.NestedAutomationWrapper : AAutomation {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static PropertyId`1<IAutomation> PropIdContent;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IProperty`1<IAutomation> Content;
    [CompilerGeneratedAttribute]
private bool <NoBannerWhenNoContent>k__BackingField;
    public bool NoBannerWhenNoContent { get; public set; }
    [NullableContextAttribute("2")]
public NestedAutomationWrapper(IAutomation content);
    public NestedAutomationWrapper(IProperty`1<IAutomation> contentLive);
    private static NestedAutomationWrapper();
    [CompilerGeneratedAttribute]
public bool get_NoBannerWhenNoContent();
    [CompilerGeneratedAttribute]
public void set_NoBannerWhenNoContent(bool value);
    public static NestedAutomationWrapper Create(IAutomation content);
    public static NestedAutomationWrapper CreateLive(IProperty`1<IAutomation> contentLive);
    public static NestedAutomationWrapper CreateLive(IProperty`1<TAutomation> contentLive);
}
public static class JetBrains.Application.UI.Utils.FlowDocumentUtil : object {
    [NotNullAttribute]
private static Dictionary`2<Regex, string> ourReplaceDictionary;
    private static FlowDocumentUtil();
    [NotNullAttribute]
public static Span ConvertDescriptionToSpan(string description);
    [NotNullAttribute]
public static FlowDocument ConvertDescriptionToFlowDocumentPreservingLineBreaks(string description);
    [NotNullAttribute]
[PureAttribute]
private static string ConvertHtmlTagsToXamlTags(string html);
    [IteratorStateMachineAttribute("JetBrains.Application.UI.Utils.FlowDocumentUtil/<ConvertHtmlTagsToXamlTagsWithLineBreaks>d__3")]
[PureAttribute]
[NotNullAttribute]
[ItemNotNullAttribute]
private static IEnumerable`1<string> ConvertHtmlTagsToXamlTagsWithLineBreaks(string html);
    [CompilerGeneratedAttribute]
internal static bool <ConvertHtmlTagsToXamlTagsWithLineBreaks>g__IsFollowedByPreformattedLineBreak|3_0(int index, string html);
    [CompilerGeneratedAttribute]
internal static bool <ConvertHtmlTagsToXamlTagsWithLineBreaks>g__IsPrecededByPreformattedLineBreak|3_1(int index, string html);
}
public class JetBrains.Application.UI.Utils.FocusRestoringChain : object {
    private WeakCollection`1<IInputElement> myPreservedElements;
    public FocusRestoringChain(IEnumerable`1<IInputElement> chain);
    public static FocusRestoringChain Preserve();
    public void Restore();
    private bool IsValid(IInputElement element);
}
public class JetBrains.Application.UI.Utils.HighlightedRange : ValueType {
    public static HighlightedRange Empty;
    public int Start;
    public int Count;
    public HighlightedRange(int start, int count);
    private static HighlightedRange();
}
public interface JetBrains.Application.UI.Utils.IColorResourseDictionaryNotifier {
    public ISimpleSignal ColorsUpdated { get; }
    public abstract virtual ISimpleSignal get_ColorsUpdated();
}
public class JetBrains.Application.UI.Utils.MatchingInfo : object {
    private string myIdentifier;
    private Int32[] modreq(System.Runtime.CompilerServices.IsVolatile) myMatches;
    public int ResultScore;
    private bool myMatchingIndiciesAreCorrect;
    private int myDistanceToIdentifier;
    [CompilerGeneratedAttribute]
private object <ContextData>k__BackingField;
    [CanBeNullAttribute]
public MatchingInfo PreviousMatchingInfo;
    public object ContextData { get; public set; }
    public bool MatchingIndiciesAreCorrect { get; }
    public string Identifier { get; }
    [CanBeNullAttribute]
public Int32[] Matches { get; }
    private MatchingInfo(string identifier, Int32[] indices, MatcherScore score, bool matchingIndiciesAreCorrect, Func`2<MatcherScore, int> adjustmentFunc, int distanceToIdentifier);
    public MatchingInfo(IIdentifierMatcher matcher, string identifier, bool matchingIndiciesAreCorrect, Func`2<MatcherScore, int> adjustmentFunc, int distanceToIdentifier);
    [CompilerGeneratedAttribute]
public object get_ContextData();
    [CompilerGeneratedAttribute]
public void set_ContextData(object value);
    public static MatchingInfo CreateFakeMatchingInfo(string text, Func`2<MatcherScore, int> adjustmentFunc, MatcherScore score);
    public static MatchingInfo CreateSubstringMatchingInfo(string text, int substringStartIndex, int substringLength, MatcherScore score, Func`2<MatcherScore, int> adjustmentFunc);
    public MatchingInfo CloneWithAdjustmentFunc(Func`2<MatcherScore, int> adjustmentFunc);
    public bool get_MatchingIndiciesAreCorrect();
    public string get_Identifier();
    protected bool Equals(MatchingInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Int32[] get_Matches();
    public int GetDistanceToIdentifier();
    public void AssignNewMatchingIndicies(Int32[] matchingIndicies);
    public void SetMatchingIndiciesInvalid();
}
public static class JetBrains.Application.UI.Utils.ScreenUtil : object {
    public static JetPhysicalRect PrimaryScreenBounds { get; }
    public static JetPhysicalRect PrimaryScreenWorkingArea { get; }
    public static JetPhysicalRect get_PrimaryScreenBounds();
    public static JetPhysicalRect get_PrimaryScreenWorkingArea();
    public static int GetBitsPerPixel();
    public static JetPhysicalRect GetBounds(IWin32Window window);
    public static JetPhysicalRect GetWorkingArea(IWin32Window window);
    public static JetPhysicalRect GetBounds(JetPhysicalPoint point);
    public static JetPhysicalRect GetBounds(JetPhysicalRect rect);
    public static JetPhysicalRect GetBounds(IntPtr hwnd);
    public static JetPhysicalRect GetWorkingArea(JetPhysicalPoint point);
    public static JetPhysicalRect GetWorkingArea(JetPhysicalRect rect);
    public static JetPhysicalRect GetWorkingArea(IntPtr hwnd);
}
[ShellComponentAttribute("20")]
internal class JetBrains.Application.UI.Utils.SetUISmoothnessToolkitThread : object {
    public SetUISmoothnessToolkitThread(Lifetime lifetime, IThreading threading);
}
[ObsoleteAttribute("A weird collection of helpers, toss to appropriate places.")]
public class JetBrains.Application.UI.Utils.TypeUtilities : object {
    public static IEnumerable CreateDynamicallyTypedList(IEnumerable source);
    public static Type GetCommonBaseClass(IEnumerable e);
    public static Type GetCommonBaseClass(Type[] types);
}
[SettingsKeyAttribute("JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings", "JetBrains.Application.Resources.Strings", "GeneralSettingsOfTheApplicationUserInterfaceSettingDescription")]
public class JetBrains.Application.UI.Utils.UserInterfaceSettings : object {
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "IntervalOfTimeForWhichTheTextInputChangesAreDeferredBeforeTheyAreCommittedHelpsToProcessConsiderableAmountsOfUserInputRatherThanReactToEachKeystrokeSettingDescription")]
public TimeSpan UserInputDeferTime;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherKeyboardSelectionInListsShouldWrapAroundEndsPressingUpArrowOnTheFirstItemSelectsTheLastOneAndViceVersaSettingDescription")]
public bool CyclicSelectionInLists;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "TrueAlwaysShowModalDialogWhenExceptionOccursFalseExceptionNotificationInStatusBarCollectingExceptionsInBackgroundIfPossibleSettingDescription")]
public bool AlwaysShowExceptionReporterDialog;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "TrueMouseWheelMessagesAreForcedToBeProcessedByTheControlUnderCursorFalseNoBehaviorEnforcedUsuallyThisMeansTheFocusedControlIsScrolledInsteadOfTheHoveredOneSettingDescription")]
public bool IsFixingMouseWheel;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "ShortcutsSchemeSettingDescription")]
public string ShortcutSchemeName;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherToUseVSIconsInsteadOfRTrueUseVSIconsFalseUseRIconsSettingDescription")]
public bool UseVsIcons;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherToHideVSMenusTrueHideSettingDescription")]
public bool HideVsMenus;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "WhetherToOverrideVSRefactoringsTrueOverrideSettingDescription")]
public bool OverrideVsRefactorings;
    [SettingsEntryAttribute("Mono.Cecil.CustomAttributeArgument", "JetBrains.Application.Resources.Strings", "UseAltRToOpenReSharperMainMenuSettingDescription")]
public bool OpenReSharperMenuByAltR;
}
public class JetBrains.Application.UI.Utils.ViewModelUtil.CommandSink : object {
    private Dictionary`2<ICommand, CommandCallbacks> myCommandToCallbacksMap;
    public void AddHandler(ICommand command, Action`1<T> execute, Predicate`1<T> canExecute);
    public void AddHandler(ICommand command, Action`1<object> execute, Predicate`1<object> canExecute);
    public void RemoveHandler(ICommand command);
    public virtual bool CanExecuteCommand(ICommand command, object parameter, Boolean& handled);
    public virtual void ExecuteCommand(ICommand command, object parameter, Boolean& handled);
}
public interface JetBrains.Application.UI.Utils.ViewModelUtil.ICommandSink {
    public abstract virtual bool CanExecuteCommand(ICommand command, object parameter, Boolean& handled);
    public abstract virtual void ExecuteCommand(ICommand command, object parameter, Boolean& handled);
}
[ShellComponentAttribute("16")]
public class JetBrains.Application.UI.Utils.WaitCursorCookieAdapter : object {
    public virtual IDisposable CreateCookie();
}
[AttributeUsageAttribute("4")]
public class JetBrains.Application.UI.Validation.ControlListenerProviderAttribute : Attribute {
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.Validation.FormValidators : object {
    public virtual IFormValidator GetOrCreate(Control control);
}
public interface JetBrains.Application.UI.Validation.IFormValidator {
    public Form Form { get; }
    public ICollectionEvents`1<IValidator> Validators { get; }
    public ICollectionEvents`1<IValidatorProvider> ValidatorProviders { get; }
    public ValidatorSeverity Severity { get; }
    public abstract virtual Form get_Form();
    public abstract virtual ICollectionEvents`1<IValidator> get_Validators();
    public abstract virtual ICollectionEvents`1<IValidatorProvider> get_ValidatorProviders();
    public abstract virtual ValidatorSeverity get_Severity();
    public abstract virtual void Update();
    public abstract virtual ValidatorSeverity ShowMessage();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
}
public interface JetBrains.Application.UI.Validation.IValidator {
    public ValidatorSeverity Severity { get; }
    [NotNullAttribute]
public RichText Message { get; }
    [NotNullAttribute]
public IPopupLayouter Layouter { get; }
    [CanBeNullAttribute]
public IWindowlessControl WindowlessControl { get; }
    public abstract virtual ValidatorSeverity get_Severity();
    public abstract virtual RichText get_Message();
    public abstract virtual IPopupLayouter get_Layouter();
    public abstract virtual IWindowlessControl get_WindowlessControl();
    public abstract virtual void Update();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SeverityChanged(EventHandler`1<PropertyChangedEventArgs`2<string, ValidatorSeverity>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageChanged(EventHandler`1<PropertyChangedEventArgs`2<string, RichText>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageChanged(EventHandler`1<PropertyChangedEventArgs`2<string, RichText>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LayouterChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IPopupLayouter>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LayouterChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IPopupLayouter>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WindowlessControlChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IWindowlessControl>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WindowlessControlChanged(EventHandler`1<PropertyChangedEventArgs`2<string, IWindowlessControl>> value);
}
public interface JetBrains.Application.UI.Validation.IValidatorProvider {
    [NotNullAttribute]
public IEnumerable`1<IValidator> Validators { get; }
    public abstract virtual IEnumerable`1<IValidator> get_Validators();
}
public enum JetBrains.Application.UI.Validation.ValidatorSeverity : Enum {
    public int value__;
    public static ValidatorSeverity None;
    public static ValidatorSeverity Warning;
    public static ValidatorSeverity ImportantWarning;
    public static ValidatorSeverity Error;
}
public static class JetBrains.Application.UI.Validation.ValidatorSeverityHelper : object {
    public static string MessageBoxTitle;
    public static string IgnoreSuffix;
    private static ValidatorSeverityHelper();
    public static bool CanIgnore(ValidatorSeverity severity);
    public static string SeverityToMessagePrefix(ValidatorSeverity severity);
    public static ShowValidatorMessages SeverityToMessageDisplay(ValidatorSeverity severity);
}
public static class JetBrains.Application.UI.Validation.ValidatorUtil : object {
    public static IDataContext GetDataContext(object host);
}
[ShellComponentAttribute("16")]
[DerivedComponentsInstantiationRequirementAttribute("0")]
public class JetBrains.Application.UI.WindowManagement.FrameFocusHelper : object {
    public virtual void KeepCurrentFrame(Action nested);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.WindowManagement.FrameFocusHelper/<KeepCurrentFrameAsync>d__1`1")]
public virtual Task`1<T> KeepCurrentFrameAsync(Func`1<Task`1<T>> asyncAction);
    [AsyncStateMachineAttribute("JetBrains.Application.UI.WindowManagement.FrameFocusHelper/<ActivateFrameAsync>d__2`1")]
public virtual Task`1<T> ActivateFrameAsync(Func`1<Task`1<T>> asyncAction);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.WindowManagement.FrameFocusHelperEx : object {
    [ExtensionAttribute]
public static T KeepCurrentFrame(IFrameFocusHelper frameFocusHelper, Func`1<T> nested);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.WindowManagement.HideFlags : Enum {
    public UInt32 value__;
    public static HideFlags None;
    public static HideFlags Scrolling;
    public static HideFlags Escape;
    public static HideFlags AnyOtherAction;
    public static HideFlags SelectionChanged;
    public static HideFlags FocusLoss;
    public static HideFlags Deactivated;
    public static HideFlags All;
}
public interface JetBrains.Application.UI.WindowManagement.IDockingManager {
    public IProperty`1<IFramedWindow> ActiveWindow { get; }
    public abstract virtual IProperty`1<IFramedWindow> get_ActiveWindow();
    public abstract virtual IFramedDocumentWindow CreateDocumentWindow(Lifetime lifetime, string title, string fileName);
    public abstract virtual IFramedWindow CreateToolWindow(Lifetime lifetime, ToolWindowDescriptor descriptor);
    public abstract virtual IFramedDocumentWindow CreatePreviewDocumentWindow(Lifetime lifetime, string title, string fileName);
    public abstract virtual void ShowWindow(IFramedWindow framedWindow, bool focus);
    public abstract virtual void CloseWindow(IFramedWindow framedWindow);
}
public interface JetBrains.Application.UI.WindowManagement.IFramedDocumentWindow {
    public string FileName { get; public set; }
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
}
public interface JetBrains.Application.UI.WindowManagement.IFramedWindow {
    public IProperty`1<ImageSource> ImageSource { get; }
    public Lifetime Lifetime { get; }
    public string Title { get; public set; }
    [NotNullAttribute]
public WindowFrame Frame { get; }
    public object Content { get; public set; }
    public object TabToolTip { get; public set; }
    public Nullable`1<bool> CanClose { get; public set; }
    public abstract virtual IProperty`1<ImageSource> get_ImageSource();
    public abstract virtual Lifetime get_Lifetime();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual WindowFrame get_Frame();
    public abstract virtual object get_Content();
    public abstract virtual void set_Content(object value);
    public abstract virtual object get_TabToolTip();
    public abstract virtual void set_TabToolTip(object value);
    public abstract virtual Nullable`1<bool> get_CanClose();
    public abstract virtual void set_CanClose(Nullable`1<bool> value);
    public abstract virtual void Close();
    public abstract virtual void Activate(bool focus);
    public abstract virtual void RegisterClosingHandler(Lifetime lifetime, Func`1<bool> closingHandler);
}
public interface JetBrains.Application.UI.WindowManagement.IFrameFocusHelper {
    public abstract virtual void KeepCurrentFrame(Action nested);
    public abstract virtual Task`1<T> KeepCurrentFrameAsync(Func`1<Task`1<T>> nested);
    public abstract virtual Task`1<T> ActivateFrameAsync(Func`1<Task`1<T>> asyncAction);
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.WindowManagement.ShellWindowUtil : object {
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, Window ownerwin);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, IWin32Window ownerwin);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, IntPtr handle);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialog(Window window, Void* handle);
    [ExtensionAttribute]
public static void SetOwner(Window window, IntPtr handle);
    [ExtensionAttribute]
public static void SetOwner(Window window, IWin32Window ownerwin);
    private static void FixCenterOwner(Window window, WindowInteropHelper helper);
}
[FlagsAttribute]
public enum JetBrains.Application.UI.WindowManagement.SwitchToFrameRequestFlags : Enum {
    public int value__;
    public static SwitchToFrameRequestFlags TryKeepingFocusWhereItWas;
}
public class JetBrains.Application.UI.WindowManagement.WindowAnchoringRect : AnchoringRect {
    [CompilerGeneratedAttribute]
private Void* <WindowHandle>k__BackingField;
    public Void* WindowHandle { get; private set; }
    public WindowAnchoringRect(Lifetime lifetime, Void* window, IWindowsHookManager windowsHookManager);
    public WindowAnchoringRect(Lifetime lifetime, IWin32Window window, IWindowsHookManager windowsHookManager);
    [CompilerGeneratedAttribute]
public Void* get_WindowHandle();
    [CompilerGeneratedAttribute]
private void set_WindowHandle(Void* value);
    public void Update();
    [NotNullAttribute]
public static AnchoringRect AnchorToPrimaryMainWindowSafe(Lifetime lifetime, IMainWindow mainwin, IWindowsHookManager windowsHookManager);
    [NotNullAttribute]
public static AnchoringRect AnchorToActiveMainWindowSafe(Lifetime lifetime, IMainWindow mainwin, IWindowsHookManager windowsHookManager);
    [NotNullAttribute]
private static AnchoringRect AnchorToWindowSafe(Lifetime lifetime, IWin32Window window, IWindowsHookManager windowsHookManager);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
public class JetBrains.Application.UI.WindowManagement.WindowClientAnchoringRect : AnchoringRect {
    public WindowClientAnchoringRect(Lifetime lifetime, Void* hwnd, RECT clientRect, IWindowsHookManager hookman);
}
public class JetBrains.Application.UI.WindowManagement.WindowFrame : object {
    private static PropertyId`1<string> ourDebugName;
    private static ILogger ourLogger;
    [NotNullAttribute]
private LifetimeDefinition myLifetimeDefinition;
    [NotNullAttribute]
public IThreading Threading;
    [NotNullAttribute]
public IPropertyBag Bag;
    [NotNullAttribute]
public ISimpleSignal Closed;
    [NotNullAttribute]
public ISignal`1<EventArgs`1<SwitchToFrameRequestFlags>> SwitchToFrameRequested;
    [NotNullAttribute]
public IProperty`1<bool> IsVisibleOnScreen;
    public IProperty`1<IntPtr> RootParentHwnd;
    public Lifetime Lifetime { get; }
    public WindowFrame(IThreading threading);
    private static WindowFrame();
    public Lifetime get_Lifetime();
    [NotNullAttribute]
public static WindowFrame CreateDummyFrame(IThreading threading);
    private void InitLogging();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class JetBrains.Application.UI.WindowManagement.WindowFrameEx : object {
    public static PropertyId`1<WindowFrame> ParentWindowFrame;
    private static WindowFrameEx();
    [ExtensionAttribute]
[NotNullAttribute]
public static WindowFrame CreateChildFrame(WindowFrame thіs);
}
[ObsoleteAttribute("Do not use this component, this is for test purposes only")]
[ShellComponentAttribute("16")]
public class JetBrains.Application.UnusedDemandShellComponent : object {
    public UnusedDemandShellComponent(IInitializationStrategyProvider initializationStrategyProvider);
}
public class JetBrains.Application.Updates.ConsoleUpdatesDescriptor : SingleProductUpdatesDescriptor {
    public bool DeferFirstCheck { get; }
    public bool LicenseRequired { get; }
    public ConsoleUpdatesDescriptor(ProductDetails product);
    public virtual bool get_DeferFirstCheck();
    public virtual bool get_LicenseRequired();
}
public class JetBrains.Application.Updates.ConsoleUpdatesHandler : object {
    public static IUpdatesHandler Instance;
    private static ConsoleUpdatesHandler();
    public sealed virtual void HandleUpdateDetails(IReadOnlyList`1<UpdateDetails> entries);
}
public class JetBrains.Application.Updates.DefaultUpdatesEnvironment : object {
    private static string OsRuntimeIdEntryName;
    private static string OsVersionEntryName;
    private static string RuntimeVersionEntryName;
    private static string EnvironmentFlagsEntryName;
    private PermanentUserId myUserId;
    public static IUpdatesEnvironment Instance;
    public string MachineId { get; }
    public string SessionId { get; }
    protected DefaultUpdatesEnvironment(PermanentUserId userId);
    private static DefaultUpdatesEnvironment();
    public sealed virtual string get_MachineId();
    public sealed virtual string get_SessionId();
    public virtual IReadOnlyList`1<LicenseDetails> GetLicenses();
    public virtual IReadOnlyList`1<EnvironmentEntry> GetEntries();
    public virtual bool ProductNeedsCheckForUpdate(ProductDetails product, DateTime lastKnownCheckTime);
    private static string GetOsRuntimeId();
    private static string GetOsVersion();
    private static string GetRuntimeVersion();
    private static string GetEnvironmentFlags();
}
public abstract class JetBrains.Application.Updates.EmptyUpdatesDescriptor : object {
    public bool UpdatesSupported { get; }
    public bool DeferFirstCheck { get; }
    public bool LicenseRequired { get; }
    public string HostName { get; }
    public sealed virtual bool get_UpdatesSupported();
    public sealed virtual bool get_DeferFirstCheck();
    public sealed virtual bool get_LicenseRequired();
    public sealed virtual string get_HostName();
    public sealed virtual IReadOnlyList`1<ProductDetails> GetProducts();
}
public class JetBrains.Application.Updates.EnvironmentEntry : object {
    public static string MultiValueSeparator;
    public string Name;
    public string Value;
    public EnvironmentEntry(string name, string value);
}
public interface JetBrains.Application.Updates.ISupportUpdates {
    public bool UpdatesAreSupported { get; }
    public bool ShowUpdatesOptionPage { get; }
    public abstract virtual bool get_UpdatesAreSupported();
    public abstract virtual bool get_ShowUpdatesOptionPage();
}
public interface JetBrains.Application.Updates.IUpdatesChecker {
    public abstract virtual IList`1<UpdateInfo> GetUpdates();
}
public interface JetBrains.Application.Updates.IUpdatesDataAvailabilityIndicator {
    public bool DataAvailable { get; }
    public abstract virtual bool get_DataAvailable();
}
public interface JetBrains.Application.Updates.IUpdatesDescriptor {
    public bool UpdatesSupported { get; }
    public bool DeferFirstCheck { get; }
    public bool LicenseRequired { get; }
    public string HostName { get; }
    public abstract virtual bool get_UpdatesSupported();
    public abstract virtual bool get_DeferFirstCheck();
    public abstract virtual bool get_LicenseRequired();
    public abstract virtual string get_HostName();
    public abstract virtual IReadOnlyList`1<ProductDetails> GetProducts();
}
public interface JetBrains.Application.Updates.IUpdatesEnvironment {
    public string MachineId { get; }
    public string SessionId { get; }
    public abstract virtual string get_MachineId();
    public abstract virtual string get_SessionId();
    public abstract virtual IReadOnlyList`1<LicenseDetails> GetLicenses();
    public abstract virtual IReadOnlyList`1<EnvironmentEntry> GetEntries();
    public abstract virtual bool ProductNeedsCheckForUpdate(ProductDetails product, DateTime lastKnownCheckTime);
}
public interface JetBrains.Application.Updates.IUpdatesHandler {
    public abstract virtual void HandleUpdateDetails(IReadOnlyList`1<UpdateDetails> entries);
}
public class JetBrains.Application.Updates.LicenseDetails : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <EntityNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsJbTeam>k__BackingField;
    public string Type { get; }
    public IReadOnlyList`1<string> EntityNames { get; }
    public string Metadata { get; }
    public bool IsJbTeam { get; }
    public LicenseDetails(string type, IReadOnlyList`1<string> entityNames, string metadata, bool isJbTeam);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_EntityNames();
    [CompilerGeneratedAttribute]
public string get_Metadata();
    [CompilerGeneratedAttribute]
public bool get_IsJbTeam();
}
public class JetBrains.Application.Updates.ProductDetails : object {
    private static string Standalone;
    private static string ConsoleRunner;
    private static string VisualStudio;
    public static ProductDetails DotCoverStandalone;
    public static ProductDetails DotCoverConsole;
    public static ProductDetails DotCoverVisualStudio;
    public static ProductDetails DotMemoryStandalone;
    public static ProductDetails DotMemoryConsole;
    public static ProductDetails DotMemoryVisualStudio;
    public static ProductDetails DotMemoryUnitConsoleRunner;
    public static ProductDetails DotMemoryUnitConsoleRunnerFromReSharper;
    public static ProductDetails DotMemoryUnitConsoleRunnerFromRider;
    public static ProductDetails DotTraceHome;
    public static ProductDetails DotTracePerformanceViewer;
    public static ProductDetails DotTraceTimelineViewer;
    public static ProductDetails DotTraceConsoleProfiler;
    public static ProductDetails DotTraceConsoleReporter;
    public static ProductDetails DotTraceVisualStudio;
    public static ProductDetails DotPeekStandalone;
    public static ProductDetails ReSharperVisualStudio;
    public static ProductDetails ReSharperCleanupCodeConsole;
    public static ProductDetails ReSharperInspectCodeConsole;
    public static ProductDetails ReSharperCppVisualStudio;
    public static ProductDetails ReSharperAIVisualStudio;
    public static ProductDetails TeamCityVisualStudio;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MarketingVersion>k__BackingField;
    public string Name { get; }
    public string Mode { get; }
    public Version MarketingVersion { get; }
    public Version BuildVersion { get; }
    public string VersionSuffix { get; }
    public bool IsEap { get; }
    public bool IsDevelopmentBuild { get; }
    private ProductDetails(string name, string mode, Version marketingVersion);
    private static ProductDetails();
    private static ProductDetails CreateDotCover(string mode);
    private static ProductDetails CreateDotTrace(string mode);
    private static ProductDetails CreateDotMemory(string mode);
    private static ProductDetails CreateDotMemoryUnit(string mode);
    private static ProductDetails CreateDotPeek(string mode);
    private static ProductDetails CreateReSharper(string mode);
    private static ProductDetails CreateReSharperCleanupCode(string mode);
    private static ProductDetails CreateReSharperInspectCode(string mode);
    private static ProductDetails CreateReSharperCpp(string mode);
    private static ProductDetails CreateReSharperAI(string mode);
    private static ProductDetails CreateTeamCity(string mode);
    private static ProductDetails Create(string productName, string productMode);
    public ProductDetails WithCustomMarketingVersion(Version marketingVersion);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public Version get_MarketingVersion();
    public Version get_BuildVersion();
    public string get_VersionSuffix();
    public bool get_IsEap();
    public bool get_IsDevelopmentBuild();
}
public abstract class JetBrains.Application.Updates.SingleProductUpdatesDescriptor : object {
    private ProductDetails myProduct;
    public bool UpdatesSupported { get; }
    public bool DeferFirstCheck { get; }
    public bool LicenseRequired { get; }
    public string HostName { get; }
    protected SingleProductUpdatesDescriptor(ProductDetails product);
    public sealed virtual bool get_UpdatesSupported();
    public abstract virtual bool get_DeferFirstCheck();
    public abstract virtual bool get_LicenseRequired();
    public sealed virtual string get_HostName();
    public sealed virtual IReadOnlyList`1<ProductDetails> GetProducts();
}
public abstract class JetBrains.Application.Updates.StandaloneUpdatesDescriptor : SingleProductUpdatesDescriptor {
    public bool DeferFirstCheck { get; }
    public bool LicenseRequired { get; }
    protected StandaloneUpdatesDescriptor(ProductDetails product);
    public virtual bool get_DeferFirstCheck();
    public virtual bool get_LicenseRequired();
}
public class JetBrains.Application.Updates.UpdateDetails : object {
    [CompilerGeneratedAttribute]
private string <TargetProduct>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetMinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetMaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string TargetProduct { get; }
    public string TargetMode { get; }
    public string TargetMinVersion { get; }
    public string TargetMaxVersion { get; }
    public string NewVersion { get; }
    public string Description { get; }
    public UpdateDetails(string targetProduct, string targetMode, string targetMinVersion, string targetMaxVersion, string newVersion, string description);
    [CompilerGeneratedAttribute]
public string get_TargetProduct();
    [CompilerGeneratedAttribute]
public string get_TargetMode();
    [CompilerGeneratedAttribute]
public string get_TargetMinVersion();
    [CompilerGeneratedAttribute]
public string get_TargetMaxVersion();
    [CompilerGeneratedAttribute]
public string get_NewVersion();
    [CompilerGeneratedAttribute]
public string get_Description();
}
public class JetBrains.Application.Updates.UpdateInfo : object {
    public UpdateVerdict UpdateVerdict;
    public IProductInfo SubProductPackage;
    public string NewMarketingVersion;
    public UInt32 Wave;
    [CanBeNullAttribute]
public string WhatsNewHtmlContent;
}
public static class JetBrains.Application.Updates.UpdatesManager : object {
    private static int ApiVersion;
    private static string UpdatesUrl;
    internal static string NoCheckForUpdatesVariableName;
    private static string NoLicenseRequiredLicenseType;
    private static ILogger ourLogger;
    private static Version ourAbsoluteMinVersion;
    private static Version ourAbsoluteMaxVersion;
    private static UpdatesManager();
    public static void CheckForUpdates(IUpdatesDescriptor descriptor, IUpdatesEnvironment environment, IUpdatesHandler handler, DateTime lastKnownCheckTime);
    public static void CheckForConsoleUpdates(ProductDetails product);
    private static void CheckForUpdatesImpl(IUpdatesDescriptor descriptor, IUpdatesEnvironment environment, IUpdatesHandler handler, DateTime lastKnownCheckTime);
    internal static string GetRequestUrl(IUpdatesDescriptor descriptor, IUpdatesEnvironment environment, DateTime lastKnownCheckTime);
    private static string GetUpdatesContent(string requestUrl);
    internal static IReadOnlyList`1<UpdateDetails> ParseUpdateDetails(string updatesContent);
    internal static void HandleUpdateDetails(IUpdatesDescriptor descriptor, IUpdatesHandler handler, IReadOnlyList`1<UpdateDetails> entries);
    private static bool EntryMatchesProduct(UpdateDetails entry, IUpdatesDescriptor descriptor);
    private static bool TryParseVersion(string versionString, Version versionInCaseOfEmpty, Version& version);
    private static void Trace(string message);
}
public enum JetBrains.Application.Updates.UpdateVerdict : Enum {
    public int value__;
    public static UpdateVerdict HasNewer;
    public static UpdateVerdict Failed;
    public static UpdateVerdict UpToDate;
}
[ExtensionAttribute]
public static class JetBrains.Application.Updates.VersionUtil : object {
    private static Version ourBuildVersion;
    private static string ourVersionSuffix;
    public static Version GetBuildVersion();
    public static string GetVersionSuffix();
    [ExtensionAttribute]
public static string ToDot3String(Version version);
    [ExtensionAttribute]
public static string ToDot4String(Version version);
}
public class JetBrains.Application.WindowBranding : object {
    private LocalLazy`2<IProperty`1<ByteArrayIconGroup>, Lazy`1<ByteArrayIconGroup>> myWindowIcon;
    [CompilerGeneratedAttribute]
private string <CompanyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductDisplayName>k__BackingField;
    public string CompanyName { get; }
    public string ProductDisplayName { get; }
    public IProperty`1<ByteArrayIconGroup> WindowIcon { get; }
    public WindowBranding(string companyname, string productdisplayname, Lazy`1<ByteArrayIconGroup> producticon);
    public WindowBranding(string companyname, string productdisplayname, ByteArrayIconGroup producticon);
    public WindowBranding(string companyname, string productdisplayname, Stream producticon);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CompanyName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProductDisplayName();
    public sealed virtual IProperty`1<ByteArrayIconGroup> get_WindowIcon();
    public sealed virtual string MakeWindowCaption(string caption);
}
[EnvironmentComponentAttribute("10")]
public class JetBrains.Application.WindowBrandingComponent : WindowBranding {
    public WindowBrandingComponent(IHostProductInfo hostProductInfo, Optional`1<WindowBrandingArtifact> wba, ILogger logger);
}
[ZoneMarkerAttribute]
public class JetBrains.Application.ZoneMarker : object {
}
[FlagsAttribute]
public enum JetBrains.UI.Controls.Implication : Enum {
    public int value__;
    public static Implication None;
    public static Implication Highlight;
    public static Implication Important;
    public static Implication Clickable;
}
public class JetBrains.UI.Controls.TreeGrid.BindingChildrenProvider : object {
    [CompilerGeneratedAttribute]
private Binding <ChildrenBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private Binding <HasChildrenBinding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsObservable>k__BackingField;
    public Binding ChildrenBinding { get; public set; }
    public Binding HasChildrenBinding { get; public set; }
    public bool IsObservable { get; }
    [CompilerGeneratedAttribute]
public Binding get_ChildrenBinding();
    [CompilerGeneratedAttribute]
public void set_ChildrenBinding(Binding value);
    [CompilerGeneratedAttribute]
public Binding get_HasChildrenBinding();
    [CompilerGeneratedAttribute]
public void set_HasChildrenBinding(Binding value);
    public sealed virtual IEnumerable GetChildren(object data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsObservable();
    public sealed virtual bool HasChildren(object item);
}
public class JetBrains.UI.Controls.TreeGrid.Helpers.DataBinder : FrameworkElement {
    private static DependencyProperty EvaluatorProperty;
    private static DataBinder();
    public static object Eval(object source, string propertyPath);
    public static T Eval(object source, BindingBase binding);
    public static object Eval(object source, BindingBase binding);
}
public class JetBrains.UI.Controls.TreeGrid.Revised.Helpers.DataBinder : FrameworkElement {
    private static DependencyProperty EvaluatorProperty;
    private static DataBinder();
    public static object Eval(object source, string propertyPath);
    public static T Eval(object source, BindingBase binding);
    public static object Eval(object source, BindingBase binding);
}
public class JetBrains.UI.Controls.TreeGrid.SelfreferenceChildrenProvider : object {
    private Type myChildType;
    private Dictionary`2<Type, PropertyInfo> myChildrenPropertyCache;
    [CompilerGeneratedAttribute]
private bool <IsObservable>k__BackingField;
    public bool IsObservable { get; public set; }
    public sealed virtual IEnumerable GetChildren(object data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsObservable();
    [CompilerGeneratedAttribute]
public void set_IsObservable(bool value);
    public sealed virtual bool HasChildren(object item);
    private PropertyInfo FindChildrenProperty(Type type);
    private bool IsChildrenProperty(Type propertyType);
    private bool IsChildType(Type type);
    [CompilerGeneratedAttribute]
private bool <FindChildrenProperty>b__9_0(PropertyInfo x);
}
public class JetBrains.UI.Controls.UIText : object {
    public static UIText Empty;
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private ObservableCollection`1<UITextDefinition> myDefinitions;
    private StringBuilder myStringBuilder;
    private string myCachedText;
    public ObservableCollection`1<UITextDefinition> Definitions { get; }
    public string Text { get; public set; }
    public int Length { get; }
    public bool HasImportant { get; }
    public UIText(string text);
    private static UIText();
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler value);
    private void RaiseChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NotifyPropertyChangedInvocatorAttribute]
private void OnPropertyChanged(string propertyName);
    public ObservableCollection`1<UITextDefinition> get_Definitions();
    public string get_Text();
    public void set_Text(string value);
    public int get_Length();
    public bool get_HasImportant();
    public UIText Regular(string text, object tooltip, Implication implication, Action click);
    public UIText Append(string text, object tooltip, Implication implication, Action click);
    public UIText Highlighted(string text, Implication additional, object tooltip, Action click);
    public UIText Clickable(string text, Action click, Implication additional, object tooltip);
    public UIText Define(int start, int count, Implication implication, object tooltip, Action click);
    public UIText Define(string searchText, StringComparison stringComparison, Implication implication, object tooltip, Action click);
    public UIText Highlight(string text, StringComparison stringComparison);
    public static UIText op_Implicit(string text);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_0(object s, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_1(object s, NotifyCollectionChangedEventArgs e);
}
public class JetBrains.UI.Controls.UITextDefinition : ValueType {
    public int Start;
    public int Count;
    public Implication Implication;
    public Action Click;
    public object Tooltip;
    public UITextDefinition(int start, int count, Implication implication, object tooltip, Action click);
}
public class JetBrains.UI.Design.DesignSystemIcons : object {
}
public abstract class JetBrains.UI.Icons.CompiledIcons.CompiledIconClass : AnyCompiledIconClass {
}
[AttributeUsageAttribute("4")]
public class JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute : PartAttribute {
    [NotNullAttribute]
public CompiledIconId IconId;
    public CompiledIconClassAttribute(string sIconPackResourceName, int nIconInPack, string sIconName);
    public static CompiledIconId TryGetCompiledIconClassId(Type type, OnError onerror);
    public static CompiledIconId TryGetCompiledIconClassId(PartCatalogType type, OnError onerror);
}
public class JetBrains.UI.Icons.CompiledIcons.CompiledIconId : IconId {
    public int IconIndex;
    public string IconName;
    [NotNullAttribute]
public CompiledIconPackIdentity IconPack;
    public CompiledIconId(string sIconPackResourceName, int nIconInPack, string sIconName);
    public virtual int CompareTo(IconId otherRaw);
    public virtual bool Equals(object otherRaw);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[AttributeUsageAttribute("1")]
public class JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute : PartAttribute {
    public String[] IconNames;
    public string IconPackResourceIdentification;
}
public abstract class JetBrains.UI.Icons.IconId : object {
    public static bool op_Equality(IconId left, IconId right);
    public static bool op_Inequality(IconId left, IconId right);
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
    public abstract virtual string ToString();
    public abstract virtual int CompareTo(IconId otherRaw);
    private sealed virtual override bool System.IEquatable<JetBrains.UI.Icons.IconId>.Equals(IconId otherRaw);
    private sealed virtual override int System.IComparable.CompareTo(object oo);
}
[ExtensionAttribute]
public static class JetBrains.UI.StdApplicationUI.IMainWindowEx : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static IWin32Window GetPrimaryWindow(IMainWindow mainWindow);
    [ExtensionAttribute]
[NotNullAttribute]
public static IWin32Window GetActiveWindow(IMainWindow mainWindow);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IWin32Window TryGetPrimaryWindow(IMainWindow mainWindow);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IWin32Window TryGetActiveWindow(IMainWindow mainWindow);
    [ExtensionAttribute]
public static IntPtr TryGetPrimaryWindowHandle(IMainWindow mainWindow);
    [ExtensionAttribute]
public static IntPtr TryGetActiveWindowHandle(IMainWindow mainWindow);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialogOverPrimaryWindow(IMainWindow mainWindow, Window dialog);
    [ExtensionAttribute]
public static Nullable`1<bool> ShowDialogOverActiveWindow(IMainWindow mainWindow, Window dialog);
}
public interface JetBrains.UI.StdApplicationUI.IWpfMainWindow {
    public IProperty`1<Window> MainWpfWindow { get; }
    public IProperty`1<Window> ActiveWpfWindow { get; }
    public abstract virtual IProperty`1<Window> get_MainWpfWindow();
    public abstract virtual IProperty`1<Window> get_ActiveWpfWindow();
}
public class LiveModelModifier : object {
    public void Run(Lifetime lifetime, IThreading threading, ISync bgReadLock, ISync uiReadLock, Action run);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
