public class JetBrains.Profiler.Host.RuntimeInfo : object {
    public RuntimeType Type;
    public Version Version;
    private static string SerNameType;
    private static string SerNameVersion;
    public RuntimeInfo(RuntimeType type, Version version);
    private RuntimeInfo(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual int CompareTo(RuntimeInfo other);
    public sealed virtual bool Equals(RuntimeInfo other);
    public virtual int GetHashCode();
}
public enum JetBrains.Profiler.Host.RuntimeType : Enum {
    public byte value__;
    public static RuntimeType Unknown;
    public static RuntimeType Clr;
    public static RuntimeType CoreClr;
    public static RuntimeType Silverlight;
    public static RuntimeType Mono;
    public static RuntimeType MonoVm;
}
public class JetBrains.Profiler.Windows.RemoteApi.AlertArgs : object {
    private static int E_FAIL;
    public DateTime DateTime;
    public int Hresult;
    public string Message;
    public AlertSeverity Severity;
    public AlertArgs(AlertSeverity severity, string message, int hresult);
    public AlertArgs(Exception e);
    private static int GetHresultFromException(Exception exception);
}
public enum JetBrains.Profiler.Windows.RemoteApi.AlertSeverity : Enum {
    public byte value__;
    public static AlertSeverity Warning;
    public static AlertSeverity Error;
}
public enum JetBrains.Profiler.Windows.RemoteApi.CoreRemoteProfileState : Enum {
    public int value__;
    public static CoreRemoteProfileState Initializing;
    public static CoreRemoteProfileState Ready;
    public static CoreRemoteProfileState Unsupported;
    public static CoreRemoteProfileState Terminating;
}
public interface JetBrains.Profiler.Windows.RemoteApi.IAcceptParameters {
    public RemoteConnectionInfo ConnectionInfo { get; }
    public abstract virtual RemoteConnectionInfo get_ConnectionInfo();
}
public interface JetBrains.Profiler.Windows.RemoteApi.ICoreRemoteProfile {
    public RemoteConnectionInfo ConnectionInfo { get; }
    public abstract virtual RemoteConnectionInfo get_ConnectionInfo();
}
public interface JetBrains.Profiler.Windows.RemoteApi.IMeasureAcceptParameters {
    public abstract virtual void SetStartImmediately(string groupName);
}
public interface JetBrains.Profiler.Windows.RemoteApi.IMeasureCoreRemoteProfile {
    public abstract virtual void Start(string groupName);
    public abstract virtual void Stop(MeasureStopMode mode);
}
public interface JetBrains.Profiler.Windows.RemoteApi.IMemoryAcceptParameters {
    public abstract virtual void SetCollectAllocationsImmediately();
}
public interface JetBrains.Profiler.Windows.RemoteApi.IMemoryCoreRemoteProfile {
    public bool CanControlAllocations { get; }
    public abstract virtual bool get_CanControlAllocations();
    public abstract virtual void Dump();
    public abstract virtual void ForceGc();
    public abstract virtual void EnableAllocations();
    public abstract virtual void DisableAllocations();
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Action : MulticastDelegate {
    public Action(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Action`1 : MulticastDelegate {
    public Action`1(object object, IntPtr method);
    public virtual void Invoke(T arg);
    public virtual IAsyncResult BeginInvoke(T arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Action`2 : MulticastDelegate {
    public Action`2(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Action`3 : MulticastDelegate {
    public Action`3(object object, IntPtr method);
    public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3);
    public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.BackgroundQueue : object {
    private ManualResetEvent myThreadWakeup;
    private bool myStop;
    private object myLock;
    private Queue`1<Action> myOperationsQueue;
    public BackgroundQueue(string threadName);
    private void ThreadProc();
    public sealed virtual void Dispose();
    public void Enqueue(Action action);
}
internal static class JetBrains.Profiler.Windows.RemoteApi.Impl.BridgeIoHelper : object {
    public static T ReadAnswer(BinaryReader reader, byte expectedAnswer, Func`2<int, T> processPayload);
    public static void SendCommand(BinaryWriter writer, byte command, Byte[] payload);
    public static Guid ReadGuid(BinaryReader reader);
    public static RuntimeInfo ReadRuntimeVersion(BinaryReader reader);
    public static void ReadAnswer(BinaryReader reader, Action`2<byte, int> processPayload);
    public static T ReadAnswer(BinaryReader reader, Func`3<byte, int, T> processPayload);
    public static string ReadString(BinaryReader reader);
    public static void WriteString(BinaryWriter writer, string str);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Func`1 : MulticastDelegate {
    public Func`1(object object, IntPtr method);
    public virtual TOut Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TOut EndInvoke(IAsyncResult result);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Func`2 : MulticastDelegate {
    public Func`2(object object, IntPtr method);
    public virtual TOut Invoke(TIn arg);
    public virtual IAsyncResult BeginInvoke(TIn arg, AsyncCallback callback, object object);
    public virtual TOut EndInvoke(IAsyncResult result);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Func`3 : MulticastDelegate {
    public Func`3(object object, IntPtr method);
    public virtual TOut Invoke(TIn1 arg1, TIn2 arg2);
    public virtual IAsyncResult BeginInvoke(TIn1 arg1, TIn2 arg2, AsyncCallback callback, object object);
    public virtual TOut EndInvoke(IAsyncResult result);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.ManualRemoteProfile : object {
    private RemoteProfileCallbacks myCallbacks;
    private SimpleLifetime myLifetime;
    [CompilerGeneratedAttribute]
private IPEndPoint <EndPoint>k__BackingField;
    public IPEndPoint EndPoint { get; }
    public ManualRemoteProfile(IRemoteProfileCallbacks callbacks, int port);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_EndPoint();
    public sealed virtual void Close();
    private void OnAcceptClient(IAsyncResult asyncResult, TcpListener listener);
    private void ProceedWithClient(TcpClient client);
    private TcpClient EndAcceptClient(IAsyncResult asyncResult, TcpListener listener);
}
internal static class JetBrains.Profiler.Windows.RemoteApi.Impl.PackedIo : object {
    public static int Read(BinaryReader reader);
    public static void Write(BinaryWriter writer, int value);
}
internal static class JetBrains.Profiler.Windows.RemoteApi.Impl.RemoteConnectionInfoEx : object {
    private static Guid ourCoverageGuid;
    private static Guid ourTimelineGuid;
    private static Guid ourPerformanceGuid;
    private static Guid ourMemoryGuid;
    private static RemoteConnectionInfoEx();
    public static bool IsMeasure(RemoteConnectionInfo info);
    public static bool IsMemory(RemoteConnectionInfo info);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.RemoteProfileCallbacks : object {
    private BackgroundQueue myCallbacksQueue;
    private IRemoteProfileCallbacks myOriginal;
    public RemoteProfileCallbacks(IRemoteProfileCallbacks original, SimpleLifetime lifetime);
    public bool SendAccept(IAcceptParameters parameters);
    public void PostStateChanged(CoreRemoteProfileState state, ICoreRemoteProfile profile);
    public void PostAlert(AlertArgs args, ICoreRemoteProfile profile);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.SimpleLifetime : object {
    private IList`1<Action> myActions;
    private object myLock;
    private bool myIsTerminated;
    private SimpleLifetime(object lock, bool isTerminated);
    public void Terminate();
    public bool TryAddAction(Action action);
    public bool AddOrExecuteIfTerminated(Action action);
    public bool ExecuteIfNotTerminated(Action callback);
    public SimpleLifetime CreateChild();
}
internal abstract class JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.CoreRemoteProfileBase0000 : object {
    private RemoteProfileCallbacks myCallbacks;
    private ManualResetEvent myIdleAwaiter;
    private object myInternalLock;
    private object myUserOperationsLock;
    private BinaryWriter myWriter;
    private CoreRemoteProfileState myState;
    private bool myCanPostEvents;
    [CompilerGeneratedAttribute]
private IAcceptParameters0000 <AcceptParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteConnectionInfo <ConnectionInfo>k__BackingField;
    public IAcceptParameters0000 AcceptParameters { get; }
    public RemoteConnectionInfo ConnectionInfo { get; }
    protected CoreRemoteProfileBase0000(RemoteConnectionInfo connectionInfo, BinaryWriter writer, RemoteProfileCallbacks callbacks, IAcceptParameters0000 acceptParameters, SimpleLifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual IAcceptParameters0000 get_AcceptParameters();
    [CompilerGeneratedAttribute]
public sealed virtual RemoteConnectionInfo get_ConnectionInfo();
    public sealed virtual void HandleAnswer(byte answerCode, Byte[] payload);
    public sealed virtual void Initialize();
    protected abstract virtual void HandleAnswerInternal(byte answerCode, Byte[] payload);
    private static bool IsTerminalState(CoreRemoteProfileState state);
    protected void SetState(CoreRemoteProfileState newState);
    protected void SendCommand(byte command, Byte[] payload);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0();
}
internal interface JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.IAcceptParameters0000 {
    public abstract virtual void WritePayload(BinaryWriter writer);
}
internal interface JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.ICoreRemoteProfile0000 {
    public IAcceptParameters0000 AcceptParameters { get; }
    public abstract virtual IAcceptParameters0000 get_AcceptParameters();
    public abstract virtual void HandleAnswer(byte answerCode, Byte[] payload);
    public abstract virtual void Initialize();
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.MeasureCoreRemoteProfile0000 : CoreRemoteProfileBase0000 {
    public MeasureCoreRemoteProfile0000(RemoteConnectionInfo info, BinaryWriter writer, RemoteProfileCallbacks callbacks, SimpleLifetime lifetime);
    public sealed virtual void Start(string groupName);
    public sealed virtual void Stop(MeasureStopMode mode);
    protected virtual void HandleAnswerInternal(byte answerCode, Byte[] payload);
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.MemoryCoreRemoteProfile0000 : CoreRemoteProfileBase0000 {
    [CompilerGeneratedAttribute]
private bool <CanControlAllocations>k__BackingField;
    public bool CanControlAllocations { get; private set; }
    public MemoryCoreRemoteProfile0000(RemoteConnectionInfo connectionInfo, BinaryWriter writer, RemoteProfileCallbacks callbacks, SimpleLifetime lifetime);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanControlAllocations();
    [CompilerGeneratedAttribute]
private void set_CanControlAllocations(bool value);
    public sealed virtual void Dump();
    public sealed virtual void ForceGc();
    public sealed virtual void EnableAllocations();
    public sealed virtual void DisableAllocations();
    protected virtual void HandleAnswerInternal(byte answerCode, Byte[] payload);
}
internal enum JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.RemoteBridgeAnswer0000 : Enum {
    public byte value__;
    public static RemoteBridgeAnswer0000 Version;
    public static RemoteBridgeAnswer0000 Info;
    public static RemoteBridgeAnswer0000 Idle;
    public static RemoteBridgeAnswer0000 Quit;
    public static RemoteBridgeAnswer0000 Alert;
}
internal enum JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.RemoteBridgeCommand0000 : Enum {
    public byte value__;
    public static RemoteBridgeCommand0000 InvalidVersion;
    public static RemoteBridgeCommand0000 ValidVersion;
    public static RemoteBridgeCommand0000 Go;
    public static RemoteBridgeCommand0000 Accepted;
    public static RemoteBridgeCommand0000 Unaccepted;
}
internal class JetBrains.Profiler.Windows.RemoteApi.Impl.Version0000.RemoteProfile0000 : object {
    private static Byte[] ourEmptyBuffer;
    private RemoteProfileCallbacks myCallbacks;
    private ICoreRemoteProfile0000 myCoreProfile;
    private SimpleLifetime myLifetime;
    private BinaryReader myReader;
    private NetworkStream myStream;
    private BinaryWriter myWriter;
    private RemoteProfile0000(TcpClient client, RemoteProfileCallbacks callbacks, SimpleLifetime lifetime);
    private static RemoteProfile0000();
    private void HandleExceptionAndQuit(Exception exception);
    public static void Process(TcpClient client, RemoteProfileCallbacks callbacks, SimpleLifetime lifetime);
    private void Process();
    private RemoteConnectionInfo ReadInfo(BinaryReader reader);
    private void Alert(AlertArgs args);
    private void Go();
    private void ProcessAsyncResult(IAsyncResult asyncResult);
    private AlertArgs ReadAlertArgs(Byte[] payload);
    private void Quit();
    [CompilerGeneratedAttribute]
private void <Process>b__10_0();
    [CompilerGeneratedAttribute]
private KeyValuePair`2<byte, Byte[]> <ProcessAsyncResult>b__14_0(byte answer, int payloadSize);
    [CompilerGeneratedAttribute]
private void <ProcessAsyncResult>b__14_1();
}
public interface JetBrains.Profiler.Windows.RemoteApi.IRemoteProfile {
    public IPEndPoint EndPoint { get; }
    public abstract virtual IPEndPoint get_EndPoint();
    public abstract virtual void Close();
}
public interface JetBrains.Profiler.Windows.RemoteApi.IRemoteProfileCallbacks {
    public abstract virtual bool Accept(IAcceptParameters parameters);
    public abstract virtual void StateChanged(CoreRemoteProfileState state, ICoreRemoteProfile profile);
    public abstract virtual void Alert(AlertArgs args, ICoreRemoteProfile profile);
}
public enum JetBrains.Profiler.Windows.RemoteApi.MeasureStopMode : Enum {
    public byte value__;
    public static MeasureStopMode DropSnapshot;
    public static MeasureStopMode SaveSnapshot;
    public static MeasureStopMode ContinueSnapshot;
}
public class JetBrains.Profiler.Windows.RemoteApi.RemoteConnectionInfo : object {
    public ushort Architecture;
    public string CommandLine;
    public Guid CoreGuid;
    public IEnumerable`1<string> EnvironmentVariables;
    public string FileName;
    public bool IsFirstProcess;
    public Guid ProcessGuid;
    public UInt32 ProcessId;
    public Guid ProfileInfo;
    public RuntimeInfo Runtime;
    public string User;
    public RemoteConnectionInfo(Guid profileInfo, UInt32 processId, Guid processGuid, Guid coreGuid, string fileName, string commandLine, IEnumerable`1<string> environmentVariables, RuntimeInfo runtime, ushort architecture, string user, bool isFirstProcess);
}
public static class JetBrains.Profiler.Windows.RemoteApi.RemoteProfileFactory : object {
    public static IRemoteProfile Create(RemoteProfileMode mode, IRemoteProfileCallbacks callbacks, int port);
    public static IRemoteProfile Create(RemoteProfileMode mode, IRemoteProfileCallbacks callbacks);
}
public enum JetBrains.Profiler.Windows.RemoteApi.RemoteProfileMode : Enum {
    public int value__;
    public static RemoteProfileMode Manual;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
