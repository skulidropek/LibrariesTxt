[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ClientCore.Filtering.Model.GeneratedCodeFiltersProvider : object {
    public sealed virtual IEnumerable`1<AttributeFilter> GetAttributeFilters();
}
public interface JetBrains.dotCover.ClientCore.Filtering.Model.Interface.IGeneratedCodeFiltersProvider {
    public abstract virtual IEnumerable`1<AttributeFilter> GetAttributeFilters();
}
public interface JetBrains.dotCover.ClientCore.Filtering.Model.Interface.ISystemModuleFiltersProvider {
    public abstract virtual IEnumerable`1<string> GetExcludeModuleMasks();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ClientCore.Filtering.Model.SystemModuleFiltersProvider : object {
    private String[] myModuleMasks;
    public sealed virtual IEnumerable`1<string> GetExcludeModuleMasks();
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotCover.ClientCore.IDotCoverClientCoreZone {
}
[ShellComponentAttribute("10")]
public class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.ConfigurationFactory : object {
    protected ILogger Logger;
    public ConfigurationFactory(ILoggerProvider loggerProvider);
    public sealed virtual ICoverageConfiguration CreateConfiguration(ProfileConfiguration profileConfiguration, ConfigurationContext context);
    public sealed virtual ICoverageConfiguration CreateConfiguration(ConfigurationContext context);
    public sealed virtual ICoverageConfiguration CreateConfiguration(IArgument argument, IHostParameters hostParameters, ConfigurationContext context);
    private void SetDefaultOptions(ICoverageConfiguration configuration);
    protected virtual ProfilerCoreLogPreferences GetDefaultCoreLogPreferences();
    protected virtual ProfilerPdbServerLogPreferences GetDefaultPdbServerLogPreferences();
    protected virtual bool GetDefaultForceTcpOnWindows();
}
internal class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.CoverageConfiguration : object {
    private ConfigurationContext myContext;
    private HostOptions myHostOptions;
    private CoreOptions myCoreOptions;
    private CoverageInfo myCoverageInfo;
    [CompilerGeneratedAttribute]
private ProfileConfiguration <Configuration>k__BackingField;
    public ProfileConfiguration Configuration { get; }
    public bool RequiresExplicitConfiguration { get; }
    internal CoverageConfiguration(ProfileConfiguration configuration, ConfigurationContext context);
    internal CoverageConfiguration(ConfigurationContext context);
    [CompilerGeneratedAttribute]
public ProfileConfiguration get_Configuration();
    public sealed virtual void SetTempPath(string tempPath);
    public sealed virtual void SetControlKindSettings(ProfilerControlKind controlKind, string remoteEndPoint);
    public sealed virtual void SetCyclomaticComplexityGathering(bool gatherCyclomaticComplexity);
    public sealed virtual void SetMethodRegionsGathering(bool gatherMethodRegions);
    public sealed virtual ICoverageConfiguration Clone();
    public sealed virtual void SetFilters(CoverageFilterSet filters);
    public sealed virtual void SetAttributeFilters(AttributeFilterSet filters);
    public sealed virtual void SetSymbolSearchPaths(IEnumerable`1<string> paths);
    public sealed virtual void SetSymbolSearchPolicy(bool allowOriginalPathAccess, bool allowRegistryAccess, bool allowSymbolServerAccess);
    public sealed virtual void SetStandaloneArgument(string executable, string arguments, string workingDirectory, bool createNoWindow, ProcessFilterSet processFilters, ProfilerClrEngine clrEngine);
    public sealed virtual void SetMonoArgument(string executable, string arguments, string workingDirectory, bool createNoWindow, ProcessFilterSet processFilters);
    public sealed virtual void SetMetroArgument(string packageFullName);
    public sealed virtual void SetEverythingArgument(ProcessFilterSet processFilters);
    public sealed virtual void SetWindowsServiceArgument(string serviceName, string arguments, bool startDependentServices);
    public sealed virtual void SetIisArgument();
    public sealed virtual void SetUnityArgument(string pathToUnity, string arguments, ProcessFilterSet processFilters);
    public sealed virtual void SetCoreLogPreferences(ProfilerCoreLogPreferences coreLogPreferences);
    public sealed virtual void SetFinishProfilingAutomaticallyTimeout(Nullable`1<int> timeout);
    public sealed virtual void SetPdbServerLogPreferences(ProfilerPdbServerLogPreferences pdbServerLogPreferences);
    public sealed virtual void SetStartImmediately(bool newValue);
    public sealed virtual void SetUseNativeImages(bool useNgen);
    public sealed virtual void SetAdditionalEnvironmentVariables(IDictionary`2<string, string> additionalEnvironmentVariables);
    public sealed virtual void SetChainProfiler(ProfilerChainCoreInfo chainCoreInfo);
    public sealed virtual void SetDebugAllowed(bool debugAllowed);
    public sealed virtual void SetIsUnity(bool isUnity);
    public sealed virtual void SetForceTcpOnWindows(bool force);
    public sealed virtual bool get_RequiresExplicitConfiguration();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(int indent);
    private static HostOptions CreateDefaultHostOptions(ConfigurationContext context);
    private static CoreOptions CreateDefaultCoreOptions(ConfigurationContext context);
    private static IHostParameters CreateDefaultHostParameters();
    private static CoverageInfo CreateDefaultCoverageInfo();
    private static IArgument CreateDefaultArgument();
    private static ScopeArgument GetScopeArgument(ProcessFilterSet processFilters);
}
public enum JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.ConfigurationContext : Enum {
    public int value__;
    public static ConfigurationContext Regular;
    public static ConfigurationContext ReSharperUnitTestRunner;
}
[ShellComponentAttribute("0")]
public class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.FakeConfiguratorFacade : object {
    private IConfigurationFactory myConfigurationFactory;
    public FakeConfiguratorFacade(IConfigurationFactory configurationFactory);
    public sealed virtual ICoverageConfiguration EditNewConfiguration(CoverageFilterSet coverageFilters, AttributeFilterSet attributeFilters);
    public sealed virtual ICoverageConfiguration EditConfiguration(ICoverageConfiguration configuration, ConfigurationContext context);
    public sealed virtual bool IsAdditionalConfigurationRequested();
}
public interface JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.IConfigurationFactory {
    [NotNullAttribute]
public abstract virtual ICoverageConfiguration CreateConfiguration(ProfileConfiguration profileConfiguration, ConfigurationContext context);
    [NotNullAttribute]
public abstract virtual ICoverageConfiguration CreateConfiguration(ConfigurationContext context);
    [NotNullAttribute]
public abstract virtual ICoverageConfiguration CreateConfiguration(IArgument argument, IHostParameters hostParameters, ConfigurationContext context);
}
public interface JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.IConfiguratorFacade {
    [CanBeNullAttribute]
public abstract virtual ICoverageConfiguration EditNewConfiguration(CoverageFilterSet coverageFilters, AttributeFilterSet attributeFilters);
    [CanBeNullAttribute]
public abstract virtual ICoverageConfiguration EditConfiguration(ICoverageConfiguration configuration, ConfigurationContext context);
    public abstract virtual bool IsAdditionalConfigurationRequested();
}
public interface JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.ILogFileConsumer {
    public abstract virtual void ConsumeEntry(string entry);
    public abstract virtual void LogFileFullyConsumed();
}
public interface JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.IProfilerLauncher {
    public abstract virtual IMeasureProfilingInstance StartProfiling(ICoverageConfiguration configuration, IProfilerResultsHandler profilerResultsHandler, ICustomProfilingViewer customProfilingViewer, IHostUI hostUI, IProgressIndicator progressIndicator);
}
public interface JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.IRawConfigurationConverter {
    public abstract virtual ProfileConfiguration Convert(ICoverageConfiguration configuration);
}
public static class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.Interface.LoggingUtils : object {
    private static string ourSeparator;
    private static object ourLogFileEmbeddingLock;
    private static LoggingUtils();
    public static void EmbedProfilerLogIntoMainLog(string logFileName, LogSource logSource, ILogFileConsumer logFileConsumer);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.ProfilerChainCoreInfoExtensions : object {
    [ExtensionAttribute]
public static ChainCoreInfo ToProfilerChainCoreInfo(ProfilerChainCoreInfo chainCoreInfo);
    [ExtensionAttribute]
public static ProfilerChainCoreInfo ToDotCoverChainCoreInfo(ChainCoreInfo chainCoreInfo);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.ProfilerClrEngineExtensions : object {
    [ExtensionAttribute]
public static ClrEngine ToProfilerClrEngine(ProfilerClrEngine clrEngine);
    [ExtensionAttribute]
public static ProfilerClrEngine ToDotCoverClrEngine(ClrEngine clrEngine);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.ProfilerControlKindExtensions : object {
    [ExtensionAttribute]
public static ControlKind ToProfilerControlKind(ProfilerControlKind controlKind);
    [ExtensionAttribute]
public static ProfilerControlKind ToDotCoverControlKind(ControlKind controlKind);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.ProfilerLauncher : object {
    private static String[] ourExcludeExecutables;
    private IHostManager myHostManager;
    private IThreading myThreading;
    public ProfilerLauncher(IHostManager hostManager, IThreading threading);
    private static ProfilerLauncher();
    public sealed virtual IMeasureProfilingInstance StartProfiling(ICoverageConfiguration configuration, IProfilerResultsHandler profilerResultsHandler, ICustomProfilingViewer customProfilingViewer, IHostUI hostUI, IProgressIndicator progressIndicator);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ClientCore.ProfilerLauncher.Model.RawConfigurationConverter : object {
    public sealed virtual ProfileConfiguration Convert(ICoverageConfiguration configuration);
}
internal static class JetBrains.dotCover.ClientCore.SimpleContainer.ClientCoreComponentsFactory : object {
    public static void AddShellComponents(ISimpleContainer container);
    public static void AddWorkspaceComponents(ISimpleContainer container);
    public static void AddSnapshotComponents(ISimpleContainer container);
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotCover.ClientCore.Workspaces.IDotCoverEmbeddedWorkspaceZone {
}
internal class JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.EmbeddedWorkspace : object {
    private WorkspaceId myId;
    private IWorkspaceContainersFactory myContainersFactory;
    private IThreading myThreading;
    private LifetimeDefinition mySnapshotLifetimeDefinition;
    [CompilerGeneratedAttribute]
private Lifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySimpleContainer <WorkspaceContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty`1<IReadOnlySimpleContainer> <SnapshotContainer>k__BackingField;
    public Lifetime Lifetime { get; }
    public IReadOnlySimpleContainer WorkspaceContainer { get; }
    public IProperty`1<IReadOnlySimpleContainer> SnapshotContainer { get; }
    public EmbeddedWorkspace(Lifetime lifetime, WorkspaceProductContext productContext, IEnumerable`1<object> contextComponents, IReadOnlySimpleContainer parentContainer, IWorkspaceContainersFactory containersFactory, IThreading threading);
    [CompilerGeneratedAttribute]
public sealed virtual Lifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlySimpleContainer get_WorkspaceContainer();
    [CompilerGeneratedAttribute]
public sealed virtual IProperty`1<IReadOnlySimpleContainer> get_SnapshotContainer();
    public virtual string ToString();
    private Task`1<IReadOnlySimpleContainer> HandleSnapshotChanged(ICoverageSnapshot snapshot, LifetimeDefinition snapshotLifetimeDefinition, bool waitForSnapshotContainerInitialization, IProgressIndicator progress);
    [CompilerGeneratedAttribute]
private void <.ctor>b__4_0();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.EmbeddedWorkspaceContainersFactory : ShellBasedWorkspaceContainersFactoryBase`2<WorkspaceComponentAttribute, SnapshotComponentAttribute> {
    public EmbeddedWorkspaceContainersFactory(ShellPartCatalogSet partCatalogSet);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.EmbeddedWorkspaceFactory : object {
    private Lifetime myShellLifetime;
    private IReadOnlySimpleContainer myShellContainer;
    private IWorkspaceContainersFactory myWorkspaceContainersFactory;
    private IWorkspacesRegistry myWorkspacesRegistry;
    private IThreading myThreading;
    private WorkspaceProductContext myProductContext;
    public EmbeddedWorkspaceFactory(Lifetime shellLifetime, IReadOnlySimpleContainer shellContainer, IEmbeddedWorkspaceProductContextProvider workspaceProductContextProvider, IEmbeddedWorkspaceContainersFactory workspaceContainersFactory, IWorkspacesRegistry workspacesRegistry, IThreading threading);
    [AsyncStateMachineAttribute("JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.EmbeddedWorkspaceFactory/<CreateWorkspace>d__7")]
public sealed virtual Task`1<WorkspaceCreationResult> CreateWorkspace(IEnumerable`1<object> contextComponents, Lifetime cancellationLifetime);
}
[WorkspaceClientModelComponentAttribute("10")]
internal class JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.EmbeddedWorkspaceHealthTracker : object {
    [CompilerGeneratedAttribute]
private ISignal`1<string> <CommunicationIssueOccurred>k__BackingField;
    public bool HasCommunicationIssues { get; }
    public ISignal`1<string> CommunicationIssueOccurred { get; }
    public EmbeddedWorkspaceHealthTracker(Lifetime lifetime);
    public sealed virtual bool get_HasCommunicationIssues();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<string> get_CommunicationIssueOccurred();
}
[WorkspaceClientModelComponentAttribute("16")]
internal class JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.EmbeddedWorkspaceProgressTracker : object {
    private IDictionary`2<ProgressId, WorkspaceProgress> myProgressIndicators;
    public sealed virtual IWorkspaceProgress CreateProgress(Lifetime lifetime);
    public sealed virtual IProgressIndicator GetProgressIndicator(ProgressId progressId);
}
[WorkspaceModelComponentAttribute("10")]
internal class JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.EmbeddedWorkspaceRdExtComponentsInitializer : object {
    private ReflectionSerializersFacade myReflectionSerializersFacade;
    private IProtocol myEmbeddedProtocolStub;
    public EmbeddedWorkspaceRdExtComponentsInitializer(Lifetime lifetime, IShellLocks shellLocks);
    public sealed virtual void Init(RdExtBase component, Lifetime lifetime);
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.IEmbeddedWorkspaceContainersFactory {
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.ClientCore.Workspaces.Model.Embedded.ZoneMarker : object {
}
[ShellComponentAttribute("16")]
public class JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.Embedded.FakeEmbeddedWorkspaceProductContextProvider : object {
    public WorkspaceProductContext ProductContext { get; }
    public sealed virtual WorkspaceProductContext get_ProductContext();
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.Embedded.IEmbeddedWorkspaceProductContextProvider {
    public WorkspaceProductContext ProductContext { get; }
    public abstract virtual WorkspaceProductContext get_ProductContext();
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.Embedded.ZoneMarker : object {
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.IWorkspaceContext {
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.IWorkspaceFactory {
    public abstract virtual Task`1<WorkspaceCreationResult> CreateWorkspace(IEnumerable`1<object> contextComponents, Lifetime cancellationLifetime);
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.IWorkspaceHealthTracker {
    public bool HasCommunicationIssues { get; }
    public ISignal`1<string> CommunicationIssueOccurred { get; }
    public abstract virtual bool get_HasCommunicationIssues();
    public abstract virtual ISignal`1<string> get_CommunicationIssueOccurred();
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.IWorkspaceProgress {
    public ProgressId Id { get; }
    public abstract virtual ProgressId get_Id();
    public abstract virtual void Bind(Lifetime lifetime, IProgressIndicator progressIndicator);
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.IWorkspaceProgressTracker {
    public abstract virtual IWorkspaceProgress CreateProgress(Lifetime lifetime);
}
public interface JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.IWorkspacesRegistry {
    public ICollectionEvents`1<IWorkspace> Workspaces { get; }
    public abstract virtual void RegisterWorkspace(IWorkspace workspace);
    public abstract virtual ICollectionEvents`1<IWorkspace> get_Workspaces();
}
public class JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.WorkspaceCreationResult : object {
    [CompilerGeneratedAttribute]
private IWorkspace <Workspace>k__BackingField;
    [CompilerGeneratedAttribute]
private LifetimeDefinition <WorkspaceLifetimeDefinition>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IWorkspace Workspace { get; public set; }
    public LifetimeDefinition WorkspaceLifetimeDefinition { get; public set; }
    public WorkspaceCreationResult(IWorkspace Workspace, LifetimeDefinition WorkspaceLifetimeDefinition);
    [CompilerGeneratedAttribute]
protected WorkspaceCreationResult(WorkspaceCreationResult original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IWorkspace get_Workspace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Workspace(IWorkspace value);
    [CompilerGeneratedAttribute]
public LifetimeDefinition get_WorkspaceLifetimeDefinition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WorkspaceLifetimeDefinition(LifetimeDefinition value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(WorkspaceCreationResult left, WorkspaceCreationResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(WorkspaceCreationResult left, WorkspaceCreationResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(WorkspaceCreationResult other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual WorkspaceCreationResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IWorkspace& Workspace, LifetimeDefinition& WorkspaceLifetimeDefinition);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.WorkspaceExtensions : object {
    [ExtensionAttribute]
public static TComponent GetComponent(IWorkspace workspace);
    [ExtensionAttribute]
public static bool HasCommunicationIssues(IWorkspace workspace);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.ClientCore.Workspaces.Model.Interface.WorkspaceProgressTrackerExtensions : object {
    [ExtensionAttribute]
public static ProgressId CreateAndBindProgress(IWorkspaceProgressTracker tracker, Lifetime lifetime, IProgressIndicator progressIndicator);
}
public class JetBrains.dotCover.ClientCore.Workspaces.Model.TransientWorkspace : object {
    private LifetimeDefinition myLifetimeDefinition;
    private IWorkspace myWorkspace;
    public Lifetime Lifetime { get; }
    public IReadOnlySimpleContainer WorkspaceContainer { get; }
    public IProperty`1<IReadOnlySimpleContainer> SnapshotContainer { get; }
    public TransientWorkspace(IWorkspaceFactory workspaceFactory);
    public sealed virtual Lifetime get_Lifetime();
    public sealed virtual IReadOnlySimpleContainer get_WorkspaceContainer();
    public sealed virtual IProperty`1<IReadOnlySimpleContainer> get_SnapshotContainer();
    public sealed virtual void Dispose();
}
public class JetBrains.dotCover.ClientCore.Workspaces.Model.WorkspaceContext : TypedContext {
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.ClientCore.Workspaces.Model.WorkspacesRegistry : object {
    private IThreading myThreading;
    private ReadonlyToken myReadonlyToken;
    [CompilerGeneratedAttribute]
private ICollectionEvents`1<IWorkspace> <Workspaces>k__BackingField;
    public ICollectionEvents`1<IWorkspace> Workspaces { get; }
    public WorkspacesRegistry(IThreading threading);
    public sealed virtual void RegisterWorkspace(IWorkspace workspace);
    [CompilerGeneratedAttribute]
public sealed virtual ICollectionEvents`1<IWorkspace> get_Workspaces();
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.ClientCore.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
