internal class JetBrains.dotCover.ConsoleRunner.Backend.CommandExecutionContext : object {
    private Lazy`1<IReadOnlySimpleContainer> myComponentContainer;
    [CompilerGeneratedAttribute]
private FileSystemPath <StartupDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IParsedCommandLine <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageWriter <MessageWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private PathConverter <PathConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunningUnderTeamCity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Lifetime <ConsoleRunnerLifetime>k__BackingField;
    public FileSystemPath StartupDirectory { get; }
    public IParsedCommandLine CommandLine { get; }
    public IMessageWriter MessageWriter { get; }
    public PathConverter PathConverter { get; }
    public bool IsRunningUnderTeamCity { get; }
    public int ExitCode { get; public set; }
    public Lifetime ConsoleRunnerLifetime { get; }
    public IReadOnlySimpleContainer ComponentContainer { get; }
    public CommandExecutionContext(FileSystemPath startupDirectory, IParsedCommandLine commandLine, IMessageWriter messageWriter, Lazy`1<IReadOnlySimpleContainer> componentContainer, PathConverter pathConverter, bool isRunningUnderTeamCity, int defaultExitCode, Lifetime consoleRunnerLifetime);
    [CompilerGeneratedAttribute]
public FileSystemPath get_StartupDirectory();
    [CompilerGeneratedAttribute]
public IParsedCommandLine get_CommandLine();
    [CompilerGeneratedAttribute]
public IMessageWriter get_MessageWriter();
    [CompilerGeneratedAttribute]
public PathConverter get_PathConverter();
    [CompilerGeneratedAttribute]
public bool get_IsRunningUnderTeamCity();
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
public void set_ExitCode(int value);
    [CompilerGeneratedAttribute]
public Lifetime get_ConsoleRunnerLifetime();
    public IReadOnlySimpleContainer get_ComponentContainer();
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.CommandExecutionContextFactory : object {
    public static CommandExecutionContext Create(Lifetime lifetime, FileSystemPath startupDirectory, IParsedCommandLine commandLine, PathConverter pathConverter, IMessageWriter messageWriter, bool isRunningUnderTeamCity);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.CommandExecutionException : ApplicationException {
    public CommandExecutionException(string message);
    public CommandExecutionException(string message, Exception innerException);
}
internal abstract class JetBrains.dotCover.ConsoleRunner.Backend.Commands.ConsoleCommandFactoryBase : object {
    private ISet`1<JetPlatform> mySupportedPlatforms;
    private ISet`1<string> myAliases;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsXmlConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IHelpResource <Help>k__BackingField;
    public string Name { get; }
    public string ShortName { get; }
    public bool SupportsXmlConfiguration { get; }
    public bool IsDeprecated { get; }
    public IHelpResource Help { get; }
    protected ConsoleCommandFactoryBase(string name, string shortName, IHelpResource help, bool supportsXmlConfiguration, JetPlatform[] supportedPlatforms, String[] aliases);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsXmlConfiguration();
    public sealed virtual bool CanHandle(string commandName);
    public sealed virtual bool IsSupportedForPlatform(JetPlatform platform);
    public virtual bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public sealed virtual IHelpResource get_Help();
    public abstract virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.ControlKindParametersProcessor : object {
    private bool myUseApiValue;
    private string myRemoteApiEndpointValue;
    private static string UseApiParameterName;
    private static string RemoteApiEndpointParameterName;
    public ControlKindParametersProcessor(IControlKindParameters parameters, IProfilerArgumentProcessor profilerArgumentProcessor);
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.CoverageResultsProcessor : object {
    private CommandExecutionContext myContext;
    private bool myInstanceServiceWasStarted;
    private ICoverCommandParameters myParameters;
    private SnapshotComplementer mySnapshotComplementer;
    private ReportBuilder myReportBuilder;
    public CoverageResultsProcessor(CommandExecutionContext context, ICoverCommandParameters parameters, bool instanceServiceWasStarted);
    public void Process(ICoverageResults coverageResults, IWorkspace workspace, CoverageFilterSet coverageFilters, AttributeFilterSet attributeFilters, FileSystemPath tempDir);
    private void PostProcess(FileSystemPath[] snapshots, IWorkspace workspace, CoverageFilterSet coverageFilters, AttributeFilterSet attributeFilters, FileSystemPath tempDir);
    private static bool SingleSnapshotMergeIsRequired(IWorkspace workspace, FileSystemPath snapshot);
    private void MergeSnapshots(IWorkspace workspace, IEnumerable`1<FileSystemPath> snapshots, bool mergeToSingleFile, bool keepIntermediateData, FileSystemPath tempDir, FileSystemPath mergeResult);
    private void SaveSnapshotToOutput(ICoverageSnapshotManager snapshotManager, FileSystemPath snapshot);
    [CompilerGeneratedAttribute]
internal static FileSystemPath <PostProcess>g__CreateTempSnapshot|7_0(<>c__DisplayClass7_0& );
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.CoverCommand : object {
    private CommandExecutionContext myContext;
    private CoverCommandProps myCommandProps;
    private InstanceStarter myInstanceStarter;
    private UpdatesChecker myUpdatesChecker;
    private InstanceServiceStarter myInstanceServiceStarter;
    private IProfilerArgumentProcessor myProfilerArgumentProcessor;
    private FilteringParametersProcessor myFilteringParametersProcessor;
    private CoverageResultsProcessor myCoverageResultsProcessor;
    private IEnumerable`1<ICoverageConfigurationParametersProcessor> myConfigurationParametersProcessors;
    public CoverCommand(CommandExecutionContext context, ICoverCommandParameters parameters, CoverCommandProps commandProps, IProfilerArgumentProcessor profilerArgumentProcessor);
    public sealed virtual void Execute();
    private static IMeasureProfilingInstance StartCoverageAnalysis(IWorkspace workspace, ICoverageConfiguration configuration, IProfilerResultsHandler resultsHandler, ICustomProfilingViewer coreConnectionsFilter);
}
internal abstract class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.CoverCommandFactoryBase`1 : ConsoleCommandFactoryBase {
    private ISet`1<string> myAnalyzeAliases;
    protected CoverCommandFactoryBase`1(string name, string shortName, IHelpResource help, JetPlatform[] supportedPlatforms, String[] analyzeAliases);
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
    protected abstract virtual IProfilerArgumentProcessor CreateProfilerArgumentProcessor(CommandExecutionContext context, TP parameters, FileSystemPath tempDir, bool collectPerTest);
    public abstract virtual TP ParseProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, TP parameters);
    protected static void AssertPerTestNotSupported(bool collectPerTest, string command);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.EnvironmentVariablesValidator : object {
    private static IReadOnlyList`1<string> ourVariableNames;
    public static string MessageFormat;
    private static EnvironmentVariablesValidator();
    public static void ValidateForProcess(FileSystemPath targetExecutablePath, KnownTargetExecutable targetExecutableType);
    private static bool TryGetMajorFileVersion(FileSystemPath filePath, Int32& majorVersion);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Everything.CoverEverythingCommandFactory : CoverCommandFactoryBase`1<CoverEverythingCommandParameters> {
    protected virtual IProfilerArgumentProcessor CreateProfilerArgumentProcessor(CommandExecutionContext context, CoverEverythingCommandParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    public virtual CoverEverythingCommandParameters ParseProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, CoverEverythingCommandParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Everything.EverythingArgumentProcessor : object {
    private ProcessFilterSet myProcessFilters;
    public ProfilerControlMode ProfilerControlMode { get; }
    public EverythingArgumentProcessor(IProcessFiltersAware parameters);
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
    public sealed virtual IEnumerable`1<CoverageFilter> GetDefaultCoverageFilters();
    public sealed virtual IEnumerable`1<AttributeFilter> GetDefaultAttributeFilters();
    public sealed virtual void OnCoreConnecting(ProfileeProcessInfo profileeProcessInfo, Boolean& shouldDecline);
    public sealed virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
    public sealed virtual ProfilerControlMode get_ProfilerControlMode();
    public sealed virtual bool SupportsNativeImages(String& explanationText);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Filtering.DefaultFiltersProvider : object {
    private ISystemModuleFiltersProvider mySystemModuleFiltersProvider;
    private IGeneratedCodeFiltersProvider myGeneratedCodeFiltersProvider;
    public DefaultFiltersProvider(ISystemModuleFiltersProvider systemModuleFiltersProvider, IGeneratedCodeFiltersProvider generatedCodeFiltersProvider);
    public sealed virtual IEnumerable`1<CoverageFilter> GetCoverageFilters();
    public sealed virtual IEnumerable`1<AttributeFilter> GetAttributeFilters();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Filtering.FilteringParametersProcessor : object {
    [CompilerGeneratedAttribute]
private CoverageFilterSet <CoverageFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterSet <AttributeFilters>k__BackingField;
    public CoverageFilterSet CoverageFilters { get; }
    public AttributeFilterSet AttributeFilters { get; }
    public FilteringParametersProcessor(CommandExecutionContext context, IFiltersParameters parameters, IProfilerArgumentProcessor profilerArgumentProcessor);
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
    [CompilerGeneratedAttribute]
public CoverageFilterSet get_CoverageFilters();
    [CompilerGeneratedAttribute]
public AttributeFilterSet get_AttributeFilters();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Filtering.IDefaultFiltersProvider {
    public abstract virtual IEnumerable`1<CoverageFilter> GetCoverageFilters();
    public abstract virtual IEnumerable`1<AttributeFilter> GetAttributeFilters();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.ICoverageConfigurationParametersProcessor {
    public abstract virtual void ApplyParameters(ICoverageConfiguration configuration);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.ICoverageResults {
    public FileSystemPath[] Snapshots { get; }
    public String[] Errors { get; }
    public Nullable`1<bool> GracefulFinishAccordingToLog { get; }
    public abstract virtual FileSystemPath[] get_Snapshots();
    public abstract virtual String[] get_Errors();
    public abstract virtual Nullable`1<bool> get_GracefulFinishAccordingToLog();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.IIS.CoverIisCommandFactory : CoverCommandFactoryBase`1<CoverIisCommandParameters> {
    protected virtual IProfilerArgumentProcessor CreateProfilerArgumentProcessor(CommandExecutionContext context, CoverIisCommandParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    public virtual CoverIisCommandParameters ParseProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, CoverIisCommandParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.IIS.IisArgumentProcessor : object {
    public ProfilerControlMode ProfilerControlMode { get; }
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
    public sealed virtual IEnumerable`1<CoverageFilter> GetDefaultCoverageFilters();
    public sealed virtual IEnumerable`1<AttributeFilter> GetDefaultAttributeFilters();
    public sealed virtual void OnCoreConnecting(ProfileeProcessInfo profileeProcessInfo, Boolean& shouldDecline);
    public sealed virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
    public sealed virtual ProfilerControlMode get_ProfilerControlMode();
    public sealed virtual bool SupportsNativeImages(String& explanationText);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.InstanceConstants : object {
    public static string StartInstanceParameterName;
    public static string StartInstanceTimeoutParameterName;
    public static string InstanceParameterName;
    public static string InstanceStartedMessagePrefix;
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.InstanceProcessCommandLineBuilder : object {
    private static ISet`1<string> ourParametersToRemove;
    private static InstanceProcessCommandLineBuilder();
    public static string Build(IParsedCommandLine originalCommandLine, string instanceId);
    public static FileSystemPath GetInstanceLogFile(FileSystemPath originalLogFile);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.InstanceProcessLauncher : object {
    private string myExecutable;
    private string myArguments;
    private string myWorkingDirectory;
    private IMessageWriter myMessageWriter;
    private Process myProcess;
    private ManualResetEvent myInstanceStartedEvent;
    private object myLock;
    private bool myFinished;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExitCode>k__BackingField;
    public Nullable`1<int> ExitCode { get; private set; }
    public InstanceProcessLauncher(string executable, string arguments, string workingDirectory, IMessageWriter messageWriter);
    public void StartAndWaitUntilStarted(TimeSpan timeout);
    private void OnProcessOutput(object sender, DataReceivedEventArgs e);
    private void OnProcessExited(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private void <StartAndWaitUntilStarted>b__9_0();
    [CompilerGeneratedAttribute]
private void <StartAndWaitUntilStarted>b__9_1();
    [CompilerGeneratedAttribute]
private void <StartAndWaitUntilStarted>b__9_2();
    [CompilerGeneratedAttribute]
private void <StartAndWaitUntilStarted>b__9_3();
}
[RdExtAttribute]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.InstanceService : RdExtReflectionBindableBase {
    private IMeasureProfilingInstance myProfilingInstance;
    private IStatusMessagesSink myStatusMessagesSink;
    private IMessageWriter myMessageWriter;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myStopped;
    public InstanceService(IMeasureProfilingInstance profilingInstance, IStatusMessagesSink statusMessagesSink, IMessageWriter messageWriter);
    public sealed virtual Task`1<DotCoverInstanceResponse> Cover();
    public sealed virtual Task`1<DotCoverInstanceResponse> Pause();
    public sealed virtual Task`1<DotCoverInstanceResponse> GetSnapshotAndKillChildren(TimeSpan timeout);
    public sealed virtual Task`1<int> GetProcessId();
    public void Stop();
    private Task`1<DotCoverInstanceResponse> ExecuteInstanceCommand(Action action);
    [CompilerGeneratedAttribute]
private void <Cover>b__5_0();
    [CompilerGeneratedAttribute]
private void <Pause>b__6_0();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.InstanceServiceStarter : object {
    private CommandExecutionContext myContext;
    private StatusMessagesListener myStatusMessagesListener;
    private ICoverCommandParameters myParameters;
    public bool ShouldStartService { get; }
    public InstanceServiceStarter(CommandExecutionContext context, ICoverCommandParameters parameters);
    public bool get_ShouldStartService();
    public void AssertProfilerArgumentIsCompatible(IProfilerArgumentProcessor profilerArgumentProcessor);
    public void AssertCanBeStarted();
    public void Start(Lifetime lifetime, IMeasureProfilingInstance profilingInstance);
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.InstanceStarter : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private ICoverCommandParameters <parameters>P;
    public bool ShouldStartNewInstance { get; }
    public InstanceStarter(CommandExecutionContext context, ICoverCommandParameters parameters);
    public bool get_ShouldStartNewInstance();
    public void Start();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.IStatusMessagesSink {
    public abstract virtual IEnumerable`1<string> GetNewWarnings();
    public abstract virtual IEnumerable`1<string> GetNewErrors();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Instance.StatusMessagesListener : object {
    private object myAccess;
    private IList`1<string> myWarnings;
    private IList`1<string> myErrors;
    public StatusMessagesListener(Lifetime lifetime, IMessageWriter messageWriter);
    private void OnStatusMessage(Status status, string message);
    public sealed virtual IEnumerable`1<string> GetNewWarnings();
    public sealed virtual IEnumerable`1<string> GetNewErrors();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.IProfilerArgumentProcessor {
    public ProfilerControlMode ProfilerControlMode { get; }
    public abstract virtual IEnumerable`1<CoverageFilter> GetDefaultCoverageFilters();
    public abstract virtual IEnumerable`1<AttributeFilter> GetDefaultAttributeFilters();
    public abstract virtual void OnCoreConnecting(ProfileeProcessInfo profileeProcessInfo, Boolean& shouldDecline);
    public abstract virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
    public abstract virtual ProfilerControlMode get_ProfilerControlMode();
    public abstract virtual bool SupportsNativeImages(String& explanationText);
}
internal enum JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.ProfilerControlMode : Enum {
    public int value__;
    public static ProfilerControlMode Any;
    public static ProfilerControlMode InstanceCommandsOnly;
    public static ProfilerControlMode ControlForbidden;
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.ProfilerCoreParametersProcessor : object {
    [CompilerGeneratedAttribute]
private IMessageWriter <messageWriter>P;
    [CompilerGeneratedAttribute]
private IProfilerCoreParameters <parameters>P;
    [CompilerGeneratedAttribute]
private IProfilerArgumentProcessor <profilerArgumentProcessor>P;
    public ProfilerCoreParametersProcessor(IMessageWriter messageWriter, IProfilerCoreParameters parameters, IProfilerArgumentProcessor profilerArgumentProcessor);
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.SnapshotComplementer : object {
    private CommandExecutionContext myContext;
    private IEnumerable`1<string> myScope;
    public bool WantToComplementSnapshot { get; }
    public SnapshotComplementer(CommandExecutionContext context, IEnumerable`1<string> scope);
    public bool get_WantToComplementSnapshot();
    public void Complement(FileSystemPath source, CoverageFilterSet coverageFilters, AttributeFilterSet attributeFilters);
    private IReadOnlyList`1<FileSystemPath> GetScopeAssemblies();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.BuildFiltersProvider : object {
    private static Regex ourDotNetMsBuildRegex;
    private static Regex ourDotNetVbcsCompilerRegex;
    private static Regex ourDotNetCompilerRegex;
    private static BuildFiltersProvider();
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.BuildFiltersProvider/<GetExcludeCoverageFilters>d__4")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.CoverCommandFactory : CoverCommandFactoryBase`1<CoverCommandParameters> {
    protected virtual IProfilerArgumentProcessor CreateProfilerArgumentProcessor(CommandExecutionContext context, CoverCommandParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    public virtual CoverCommandParameters ParseProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, CoverCommandParameters parameters);
    private static StandaloneArgumentProcessorBase CreateCustomStandaloneArgumentProcessor(CommandExecutionContext context, IStandaloneArgumentProcessorParameters parameters, FileSystemPath tempDir, bool collectPerTest, FileSystemPath targetExecutable);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.CoverDotNetCommandFactory : CoverCommandFactoryBase`1<CoverDotNetCommandParameters> {
    protected virtual IProfilerArgumentProcessor CreateProfilerArgumentProcessor(CommandExecutionContext context, CoverDotNetCommandParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    public virtual CoverDotNetCommandParameters ParseProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, CoverDotNetCommandParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.CoverMonoCommandFactory : CoverCommandFactoryBase`1<CoverMonoCommandParameters> {
    protected virtual IProfilerArgumentProcessor CreateProfilerArgumentProcessor(CommandExecutionContext context, CoverMonoCommandParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    public virtual CoverMonoCommandParameters ParseProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, CoverMonoCommandParameters parameters);
}
internal enum JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.DefaultTargetWorkingDirectory : Enum {
    public int value__;
    public static DefaultTargetWorkingDirectory TargetExecutable;
    public static DefaultTargetWorkingDirectory Startup;
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.DotNetCoreFiltersProvider : object {
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.DotNetCoreFiltersProvider/<GetExcludeCoverageFilters>d__1")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.DotNetCoreTestsFiltersProvider : object {
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.DotNetCoreTestsFiltersProvider/<GetExcludeCoverageFilters>d__1")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.DotNetStandaloneArgumentProcessor : StandaloneArgumentProcessorBase {
    private static string ourDotNetExecutableName;
    private static string DotNetNotFoundMessage;
    public DotNetStandaloneArgumentProcessor(CommandExecutionContext context, IStandaloneArgumentProcessorParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    private static DotNetStandaloneArgumentProcessor();
    private static FileSystemPath GetPathToDotNet(IMessageWriter messageWriter);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.DotNetTestCoverageControllerFactory : VsTestCoverageControllerFactoryBase {
    [CompilerGeneratedAttribute]
private String[] <CommandLineKeyPrefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <CommandLineKeyValueSeparators>k__BackingField;
    [CompilerGeneratedAttribute]
private Pair`2[] <RunSettingsPrefixesAndKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultRunSettingsPrefixAndKeyIndex>k__BackingField;
    protected String[] CommandLineKeyPrefixes { get; }
    protected Char[] CommandLineKeyValueSeparators { get; }
    protected Pair`2[] RunSettingsPrefixesAndKeys { get; }
    protected int DefaultRunSettingsPrefixAndKeyIndex { get; }
    [CompilerGeneratedAttribute]
protected virtual String[] get_CommandLineKeyPrefixes();
    [CompilerGeneratedAttribute]
protected virtual Char[] get_CommandLineKeyValueSeparators();
    [CompilerGeneratedAttribute]
protected virtual Pair`2[] get_RunSettingsPrefixesAndKeys();
    [CompilerGeneratedAttribute]
protected virtual int get_DefaultRunSettingsPrefixAndKeyIndex();
    public virtual bool IsApplicable(FileSystemPath targetExecutable, KnownTargetExecutable knownTargetExecutable, IMessageWriter messageWriter);
    protected virtual IRunSettingsXmlPatcher[] GetAdditionalRunSettingsXmlPatchers(KnownTargetExecutable knownTargetExecutable);
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.FileAlternateDataStreamsHelper : object {
    [ExtensionAttribute]
public static void CopyFileWithoutAlternateDataStreams(FileSystemPath file, FileSystemPath targetFile);
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.IProfileeProcessChecker {
    public abstract virtual bool IsSupportedTargetExecutableForProcess(string processExecutable, string processCommandLine, string targetExecutableName, KnownTargetExecutable knownTargetExecutable, String& message);
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.IRunSettingsXmlPatcher {
    public abstract virtual bool TryPatch(FileSystemPath targetExecutable, IParsedCommandLine parsedTargetArguments, FileSystemPath tempDir, XmlDocument runSettingsXml);
    public abstract virtual bool IsCompatibleWithNativeImages(String& explanationText);
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.ITargetExecutableSpecificCoverageController {
    public string PatchedTargetArguments { get; }
    public abstract virtual string get_PatchedTargetArguments();
    public abstract virtual bool SupportsNativeImages(String& explanationText);
    public abstract virtual bool SupportsCustomControlKinds();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.ITargetExecutableSpecificCoverageControllerFactory {
    public abstract virtual bool IsApplicable(FileSystemPath targetExecutable, KnownTargetExecutable knownTargetExecutable, IMessageWriter messageWriter);
    [CanBeNullAttribute]
public abstract virtual ITargetExecutableSpecificCoverageController TryCreate(Lifetime lifetime, bool disableVsTestSettingsPatching, FileSystemPath targetExecutable, KnownTargetExecutable knownTargetExecutable, string targetArguments, FileSystemPath targetWorkingDir, FileSystemPath tempDir, IMessageWriter messageWriter, bool collectPerTest);
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.ITargetExecutableSpecificFiltersProvider {
    public abstract virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    public abstract virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public abstract virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.KnownTargetExecutable : object {
    public static KnownTargetExecutable DotNetUnknown;
    public static KnownTargetExecutable DotNetTest;
    public static KnownTargetExecutable DotNetVsTest;
    public static KnownTargetExecutable DotNetBuild;
    public static KnownTargetExecutable DotNetMsBuild;
    public static KnownTargetExecutable VsTestConsole;
    public static KnownTargetExecutable NUnitConsole;
    public static KnownTargetExecutable TeamCityNUnitRunner;
    public static KnownTargetExecutable XUnitConsole;
    public static KnownTargetExecutable MsBuild;
    public static KnownTargetExecutable Mono;
    public static KnownTargetExecutable UnityEditor;
    private string myName;
    [CompilerGeneratedAttribute]
private TargetExecutableProperties <Properties>k__BackingField;
    public TargetExecutableProperties Properties { get; }
    private KnownTargetExecutable(string name, TargetExecutableProperties properties);
    private static KnownTargetExecutable();
    [CompilerGeneratedAttribute]
public TargetExecutableProperties get_Properties();
    public virtual string ToString();
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.KnownTargetExecutableDetector : object {
    [CanBeNullAttribute]
public static KnownTargetExecutable TryGetKnownTargetExecutable(FileSystemPath targetExecutable, string targetArguments);
    private static string TryGetDotNetCommand(string targetArguments);
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.KnownTargetExecutableExtensions : object {
    [ExtensionAttribute]
public static bool IsTestRunner(KnownTargetExecutable targetExecutable);
    [ExtensionAttribute]
public static bool IsDotNetCore(KnownTargetExecutable targetExecutable);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.MockingFrameworksFiltersProvider : object {
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.MockingFrameworksFiltersProvider/<GetExcludeCoverageFilters>d__1")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.MonoFiltersProvider : object {
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.MonoFiltersProvider/<GetExcludeCoverageFilters>d__1")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.MonoStandaloneArgumentProcessor : StandaloneArgumentProcessorBase {
    private static string MonoNotFoundMessage;
    private static string MultipleMonoFoundMessage;
    public MonoStandaloneArgumentProcessor(CommandExecutionContext context, IStandaloneArgumentProcessorParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    private static FileSystemPath GetPathToMono();
    private static FileSystemPath GetPathToMonoWindows();
    private static FileSystemPath GetPathToMonoUnix();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.NUnitFiltersProvider : object {
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.NUnitFiltersProvider/<GetExcludeCoverageFilters>d__1")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.RunSettingsArgumentPatcher : object {
    public IParsedCommandLine Patch(FileSystemPath targetExecutable, IParsedCommandLine parsedTargetArguments, Pair`2[] runSettingsPrefixesAndKeys, int defaultRunSettingsPrefixAndKeyIndex, IEnumerable`1<IRunSettingsXmlPatcher> runSettingsXmlPatchers, FileSystemPath targetWorkingDir, FileSystemPath tempDir, IMessageWriter messageWriter, IEnumerable`1& appliedRunSettingsXmlPatchers);
    private static bool IsLegacyTestSettingsArgumentSpecified(IEnumerable`1<string> additionalArguments);
    private static bool IsLegacyTestSettingsFile(IPath settingsFile);
    private static void FixRelativePathsInRunSettings(XmlDocument runSettingsXml, FileSystemPath settingsFile);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.RunSettingsXmlPatcher : object {
    public static string MsFakesDataCollectorUri;
    public static string MsFakesDataCollectorTypeName;
    public static string MsTestSettingsError;
    public static void AddInProcDataCollector(XmlDocument runSettingsXml, string dataCollectorTypeAssemblyQualifiedName, FileSystemPath dataCollectorAssemblyPath, bool parallelizationAllowed, IReadOnlyDictionary`2<string, string> dataCollectorParameters);
    public static bool PatchMsFakesDataCollectorIfNeeded(XmlDocument runSettingsXml, string collectorWrapperAssemblyQualifiedName, FileSystemPath collectorWrapperAssemblyPath);
    private static void SetAttribute(XmlDocument document, XmlElement element, string attributeName, string attributeValue);
    private static XmlNode TryGetNode(XmlNode node, string path);
    private static XmlNode GetOrCreateNode(XmlDocument document, XmlNode node, string path);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.StandaloneArgumentProcessorBase : object {
    private CommandExecutionContext myContext;
    private IStandaloneArgumentProcessorParameters myParameters;
    private FileSystemPath myTargetExecutableValue;
    private string myTargetArgumentsValue;
    private FileSystemPath myTargetWorkingDirValue;
    private KnownTargetExecutable myKnownTargetExecutable;
    private IReadOnlyCollection`1<IProfileeProcessChecker> myProfileeProcessCheckers;
    private ITargetExecutableSpecificFiltersProvider[] myFiltersProviders;
    private ITargetExecutableSpecificCoverageController myCoverageController;
    private bool myUnsupportedProfileeProcessDetected;
    public ProfilerControlMode ProfilerControlMode { get; }
    public StandaloneArgumentProcessorBase(CommandExecutionContext context, IStandaloneArgumentProcessorParameters parameters, FileSystemPath targetExecutable, DefaultTargetWorkingDirectory defaultTargetWorkingDirType, FileSystemPath tempDir, bool collectPerTest);
    public sealed virtual IEnumerable`1<CoverageFilter> GetDefaultCoverageFilters();
    public sealed virtual IEnumerable`1<AttributeFilter> GetDefaultAttributeFilters();
    public sealed virtual void OnCoreConnecting(ProfileeProcessInfo processInfo, Boolean& shouldDecline);
    public sealed virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
    public sealed virtual ProfilerControlMode get_ProfilerControlMode();
    public sealed virtual bool SupportsNativeImages(String& explanationText);
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
    private static string AdditionalArgumentsToTargetArgumentsString(IParsedCommandLine commandLine, bool analyzeTargetArguments, PathConverter pathConverter);
    private static string GetProcessCommandLine(ProfileeProcessInfo profileeProcessInfo);
}
[FlagsAttribute]
internal enum JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.TargetExecutableProperties : Enum {
    public int value__;
    public static TargetExecutableProperties DotNetCore;
    public static TargetExecutableProperties CanBuild;
    public static TargetExecutableProperties NUnitRunner;
    public static TargetExecutableProperties XUnitRunner;
    public static TargetExecutableProperties MsTestRunner;
    public static TargetExecutableProperties TestRunner;
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.TcpInProcDataCollectorService : object {
    private bool myCollectPerTestInfo;
    private int myTcpPort;
    private IMessageWriter myMessageWriter;
    private RemoteProfileController myRemoteProfileController;
    public string RemoteApiEndpoint { get; }
    public IReadOnlyDictionary`2<string, string> DataCollectorParameters { get; }
    public TcpInProcDataCollectorService(Lifetime lifetime, bool collectPerTestInfo, IMessageWriter messageWriter);
    public string get_RemoteApiEndpoint();
    public IReadOnlyDictionary`2<string, string> get_DataCollectorParameters();
    private void WaitForDataCollectorConnectionsRoutine(TcpListener tcpListener);
    private void ListenDataCollectorMessagesRoutine(TcpClient tcpClient);
    private static void StartBackgroundThread(ThreadStart start);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.TestExtensionsFiltersProvider : object {
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.TestExtensionsFiltersProvider/<GetExcludeCoverageFilters>d__1")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.VsTestConsoleCoverageControllerFactory : VsTestCoverageControllerFactoryBase {
    [CompilerGeneratedAttribute]
private String[] <CommandLineKeyPrefixes>k__BackingField;
    [CompilerGeneratedAttribute]
private Char[] <CommandLineKeyValueSeparators>k__BackingField;
    [CompilerGeneratedAttribute]
private Pair`2[] <RunSettingsPrefixesAndKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultRunSettingsPrefixAndKeyIndex>k__BackingField;
    protected String[] CommandLineKeyPrefixes { get; }
    protected Char[] CommandLineKeyValueSeparators { get; }
    protected Pair`2[] RunSettingsPrefixesAndKeys { get; }
    protected int DefaultRunSettingsPrefixAndKeyIndex { get; }
    [CompilerGeneratedAttribute]
protected virtual String[] get_CommandLineKeyPrefixes();
    [CompilerGeneratedAttribute]
protected virtual Char[] get_CommandLineKeyValueSeparators();
    [CompilerGeneratedAttribute]
protected virtual Pair`2[] get_RunSettingsPrefixesAndKeys();
    [CompilerGeneratedAttribute]
protected virtual int get_DefaultRunSettingsPrefixAndKeyIndex();
    public virtual bool IsApplicable(FileSystemPath targetExecutable, KnownTargetExecutable knownTargetExecutable, IMessageWriter messageWriter);
    protected virtual IRunSettingsXmlPatcher[] GetAdditionalRunSettingsXmlPatchers(KnownTargetExecutable knownTargetExecutable);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.VsTestConsoleProcessChecker : object {
    private static string ErrorMessage;
    private static Regex ourDotNetVsTestConsoleRegex;
    private static VsTestConsoleProcessChecker();
    public sealed virtual bool IsSupportedTargetExecutableForProcess(string processExecutable, string processCommandLine, string targetExecutableName, KnownTargetExecutable knownTargetExecutable, String& message);
    private static string GetPresentableTargetExecutableName(string targetExecutableName, KnownTargetExecutable knownTargetExecutable);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.VsTestCoverageController : object {
    private static RunSettingsArgumentPatcher ourRunSettingsArgumentPatcher;
    private TcpInProcDataCollectorService myTcpInProcDataCollectorService;
    private IEnumerable`1<IRunSettingsXmlPatcher> myAppliedRunSettingsXmlPatchers;
    [CompilerGeneratedAttribute]
private string <PatchedTargetArguments>k__BackingField;
    public string PatchedTargetArguments { get; }
    public VsTestCoverageController(Lifetime lifetime, FileSystemPath targetExecutable, IParsedCommandLine parsedTargetArguments, Pair`2[] runSettingsPrefixesAndKeys, int defaultRunSettingsPrefixAndKeyIndex, IEnumerable`1<IRunSettingsXmlPatcher> additionalRunSettingsXmlPatchers, FileSystemPath targetWorkingDir, FileSystemPath tempDir, bool collectPerTestInfo, IMessageWriter messageWriter);
    private static VsTestCoverageController();
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PatchedTargetArguments();
    public sealed virtual bool SupportsNativeImages(String& explanationText);
    public sealed virtual bool SupportsCustomControlKinds();
}
internal abstract class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.VsTestCoverageControllerFactoryBase : object {
    private static string CommandLineAdditionalArgsSeparator;
    protected String[] CommandLineKeyPrefixes { get; }
    protected Char[] CommandLineKeyValueSeparators { get; }
    protected Pair`2[] RunSettingsPrefixesAndKeys { get; }
    protected int DefaultRunSettingsPrefixAndKeyIndex { get; }
    protected abstract virtual String[] get_CommandLineKeyPrefixes();
    protected abstract virtual Char[] get_CommandLineKeyValueSeparators();
    protected abstract virtual Pair`2[] get_RunSettingsPrefixesAndKeys();
    protected abstract virtual int get_DefaultRunSettingsPrefixAndKeyIndex();
    protected abstract virtual IRunSettingsXmlPatcher[] GetAdditionalRunSettingsXmlPatchers(KnownTargetExecutable knownTargetExecutable);
    public abstract virtual bool IsApplicable(FileSystemPath targetExecutable, KnownTargetExecutable knownTargetExecutable, IMessageWriter messageWriter);
    public sealed virtual ITargetExecutableSpecificCoverageController TryCreate(Lifetime lifetime, bool disableVsTestSettingsPatching, FileSystemPath targetExecutable, KnownTargetExecutable knownTargetExecutable, string targetArguments, FileSystemPath targetWorkingDir, FileSystemPath tempDir, IMessageWriter messageWriter, bool collectPerTest);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.XUnitFiltersProvider : object {
    public sealed virtual bool IsApplicable(KnownTargetExecutable targetExecutable);
    [IteratorStateMachineAttribute("JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.Standalone.XUnitFiltersProvider/<GetExcludeCoverageFilters>d__1")]
public sealed virtual IEnumerable`1<CoverageFilter> GetExcludeCoverageFilters();
    public sealed virtual bool ShouldExcludeProcess(string executable, string commandLine);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.UpdatesChecker : object {
    [CompilerGeneratedAttribute]
private bool <noCheckForUpdates>P;
    public UpdatesChecker(bool noCheckForUpdates);
    public void CheckIfAllowed();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.ValidatingLogFileConsumer : object {
    private static string FinishedToken;
    private string myLastEntry;
    [CompilerGeneratedAttribute]
private bool <GracefulFinish>k__BackingField;
    public bool GracefulFinish { get; private set; }
    public sealed virtual void ConsumeEntry(string entry);
    public sealed virtual void LogFileFullyConsumed();
    [CompilerGeneratedAttribute]
public bool get_GracefulFinish();
    [CompilerGeneratedAttribute]
private void set_GracefulFinish(bool value);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.WindowsService.CoverServiceCommandFactory : CoverCommandFactoryBase`1<CoverServiceCommandParameters> {
    protected virtual IProfilerArgumentProcessor CreateProfilerArgumentProcessor(CommandExecutionContext context, CoverServiceCommandParameters parameters, FileSystemPath tempDir, bool collectPerTest);
    public virtual CoverServiceCommandParameters ParseProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, CoverServiceCommandParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Cover.WindowsService.WindowsServiceArgumentProcessor : object {
    [CompilerGeneratedAttribute]
private IWindowsServiceArgumentProcessorParameters <parameters>P;
    public ProfilerControlMode ProfilerControlMode { get; }
    public WindowsServiceArgumentProcessor(IWindowsServiceArgumentProcessorParameters parameters);
    public sealed virtual void ApplyParameters(ICoverageConfiguration configuration);
    public sealed virtual IEnumerable`1<CoverageFilter> GetDefaultCoverageFilters();
    public sealed virtual IEnumerable`1<AttributeFilter> GetDefaultAttributeFilters();
    public sealed virtual void OnCoreConnecting(ProfileeProcessInfo profileeProcessInfo, Boolean& shouldDecline);
    public sealed virtual void OnProfilingFinished(ExitCodeGetter exitCodeGetter);
    public sealed virtual ProfilerControlMode get_ProfilerControlMode();
    public sealed virtual bool SupportsNativeImages(String& explanationText);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Delete.DeleteCommand : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private DeleteCommandParameters <parameters>P;
    public DeleteCommand(CommandExecutionContext context, DeleteCommandParameters parameters);
    public sealed virtual void Execute();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Delete.DeleteCommandFactory : ConsoleCommandFactoryBase {
    public bool IsDeprecated { get; }
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
    public virtual bool get_IsDeprecated();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Help.HelpCommand : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private HelpCommandParameters <parameters>P;
    private static IDictionary`2<string, IHelpResource> ourAdditionalTopics;
    public HelpCommand(CommandExecutionContext context, HelpCommandParameters parameters);
    private static HelpCommand();
    public static bool IsAdditionalTopic(string name);
    public sealed virtual void Execute();
    private static void WriteHelpToFile(IConsoleCommandFactory commandFactory, FileSystemPath fileName, IMessageWriter messageWriter);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Help.HelpCommandFactory : ConsoleCommandFactoryBase {
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.HelpResource : object {
    private static string NewLine;
    private static string XmlHeader;
    private static String[] ourSeparator;
    private static Regex ourPlatformDependentStringRegex;
    [CompilerGeneratedAttribute]
private string <ShortText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SampleXml>k__BackingField;
    public string ShortText { get; }
    public string FullText { get; }
    public string SampleXml { get; }
    public HelpResource(string resourceName);
    private static HelpResource();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortText();
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullText();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SampleXml();
    public static string GetStringFromResource(Assembly assemblyWithResource, string resourceName);
    [NotNullAttribute]
private string GetStringFromResource(string resourceName, bool platformDependent);
    [CompilerGeneratedAttribute]
private string <.ctor>b__13_0(Match match);
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.IHelpResource {
    public string ShortText { get; }
    public string FullText { get; }
    public string SampleXml { get; }
    public abstract virtual string get_ShortText();
    public abstract virtual string get_FullText();
    public abstract virtual string get_SampleXml();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.List.ListCommand : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private ListCommandParameters <parameters>P;
    public ListCommand(CommandExecutionContext context, ListCommandParameters parameters);
    public sealed virtual void Execute();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.List.ListCommandFactory : ConsoleCommandFactoryBase {
    public bool IsDeprecated { get; }
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
    public virtual bool get_IsDeprecated();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Merge.MergeCommand : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private MergeCommandParameters <parameters>P;
    public MergeCommand(CommandExecutionContext context, MergeCommandParameters parameters);
    public sealed virtual void Execute();
    [CompilerGeneratedAttribute]
private void <Execute>b__3_0(PropertyChangedEventArgs`1<string> message);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Merge.MergeCommandFactory : ConsoleCommandFactoryBase {
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.DetailedXmlReportCommand : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.DetailedXmlReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.DetailedFileCoverageJsonReportCommand : FileCoverageCommandBase {
    public virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.DetailedFileCoverageJsonReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.DetailedFileCoverageXmlReportCommand : FileCoverageCommandBase {
    public virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.DetailedFileCoverageXmlReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal abstract class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.FileCoverageCommandBase : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public abstract virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.FileCoverageJsonReportCommand : FileCoverageCommandBase {
    public virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.FileCoverageJsonReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.FileCoverageXmlReportCommand : FileCoverageCommandBase {
    public virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.FileCoverage.FileCoverageXmlReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.HtmlReportCommand : object {
    private bool myAllowSourceServersAccess;
    private FileSystemPath[] mySourcesSearchPaths;
    public HtmlReportCommand(IHtmlReportGeneratingParameters parameters);
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.HtmlReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.ISpecificReportCommand {
    public abstract virtual bool RequiresHotSpots();
    [ContractAnnotationAttribute("=>false,requiredTypeMembersProcessingMode:null;=>true,requiredTypeMembersProcessingMode:notnull")]
[ContractAnnotationAttribute("=>false,requiredNodesPresentationSettings:null")]
public abstract virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public abstract virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.ISpecificReportCommandFactory {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public abstract virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public abstract virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.JsonReportCommand : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.JsonReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.NDependReportCommand : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.NDependReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal enum JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.PerTestInfoSupportKind : Enum {
    public int value__;
    public static PerTestInfoSupportKind NotSupported;
    public static PerTestInfoSupportKind Supported;
    public static PerTestInfoSupportKind Required;
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.Qodana.QodanaReportCommand : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.Qodana.QodanaReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.ReportBuilder : object {
    private CommandExecutionContext myContext;
    private IReportBuilderParameters myBuilderParameters;
    private IList`1<ISpecificReportCommand> myCommands;
    private ReportType[] myReportTypes;
    public ReportBuilder(CommandExecutionContext context, IReportBuilderParameters builderParameters);
    public void BuildReports(FileSystemPath source);
    private void ConfigureCoverageTreeBuild(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers);
    private void ConfigureHotSpotsBuild(IWorkspace workspace);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.ReportCommand : object {
    private ReportCommandParameters myParameters;
    private ReportBuilder myReportBuilder;
    public ReportCommand(CommandExecutionContext context, ReportCommandParameters parameters);
    public sealed virtual void Execute();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.ReportCommandFactory : ConsoleCommandFactoryBase {
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
}
internal enum JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.ReportType : Enum {
    public int value__;
    public static ReportType Xml;
    public static ReportType DetailedXml;
    public static ReportType TeamCityXml;
    public static ReportType UncoveredLines;
    public static ReportType Html;
    public static ReportType Json;
    public static ReportType NDependXml;
    public static ReportType SummaryXml;
    public static ReportType FileCoverageXml;
    public static ReportType FileCoverageJson;
    public static ReportType DetailedFileCoverageXml;
    public static ReportType DetailedFileCoverageJson;
    public static ReportType QodanaExperimental;
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.SummaryXmlReportCommand : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.SummaryXmlReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.TeamCityReportCommand : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.TeamCityReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.UncoveredLinesReportCommand : object {
    private FileSystemPath mySourcesRoot;
    public UncoveredLinesReportCommand(IUncoveredLinesReportGeneratingParameters parameters);
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.UncoveredLinesReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.XmlReportCommand : object {
    public sealed virtual bool RequiresHotSpots();
    public sealed virtual bool RequiresCoverageTree(IWorkspace workspace, bool hideAutoProperties, bool filterTypeMembers, Nullable`1& requiredTypeMembersProcessingMode, MetadataNodesPresentationSettings& requiredNodesPresentationSettings);
    public sealed virtual Task Execute(IReadOnlySimpleContainer snapshotContainer, FileSystemPath output, ReportFeatures reportFeatures);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Report.XmlReportCommandFactory : object {
    public PerTestInfoSupportKind PerTestInfoSupportKind { get; }
    public sealed virtual PerTestInfoSupportKind get_PerTestInfoSupportKind();
    public sealed virtual ISpecificReportCommand Create(IReportGeneratingParameters parameters);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Send.SendCommand : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private SendCommandParameters <parameters>P;
    public SendCommand(CommandExecutionContext context, SendCommandParameters parameters);
    public sealed virtual void Execute();
    private void WaitForServerTask(Task task, TimeSpan timeout, string taskDescription);
    private void ProcessInstanceResponse(DotCoverInstanceResponse response, TimeSpan commandExecutionTimeout);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Send.SendCommandFactory : ConsoleCommandFactoryBase {
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Commands.SupportedPlatforms : object {
    public static JetPlatform[] All;
    public static JetPlatform[] Windows;
    public static JetPlatform[] Unix;
    private static SupportedPlatforms();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Version.VersionCommand : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private VersionCommandParameters <parameters>P;
    public VersionCommand(CommandExecutionContext context, VersionCommandParameters parameters);
    public sealed virtual void Execute();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Version.VersionCommandFactory : ConsoleCommandFactoryBase {
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
}
[XmlTypeAttribute]
public class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Version.VersionInfo : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [XmlElementAttribute]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Zip.ZipCommand : object {
    [CompilerGeneratedAttribute]
private CommandExecutionContext <context>P;
    [CompilerGeneratedAttribute]
private ZipCommandParameters <parameters>P;
    public ZipCommand(CommandExecutionContext context, ZipCommandParameters parameters);
    public sealed virtual void Execute();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Commands.Zip.ZipCommandFactory : ConsoleCommandFactoryBase {
    public bool IsDeprecated { get; }
    public virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
    public virtual bool get_IsDeprecated();
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.CommandsRegistry : object {
    private static IDictionary`2<ReportType, ISpecificReportCommandFactory> ourReportCommandFactories;
    [CompilerGeneratedAttribute]
private static IEnumerable`1<IConsoleCommandFactory> <CommandFactories>k__BackingField;
    public static IEnumerable`1<IConsoleCommandFactory> CommandFactories { get; }
    private static CommandsRegistry();
    [CompilerGeneratedAttribute]
public static IEnumerable`1<IConsoleCommandFactory> get_CommandFactories();
    public static IConsoleCommandFactory TryGetCommandFactory(string commandName);
    public static bool HasCommandFactory(string commandName);
    public static ISpecificReportCommandFactory TryGetSpecificReportCommandFactory(ReportType reportType);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.DotCoverInstanceResponse : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimeoutExceeded>k__BackingField;
    public List`1<string> Warnings { get; public set; }
    public List`1<string> Errors { get; public set; }
    public bool TimeoutExceeded { get; public set; }
    public DotCoverInstanceResponse(List`1<string> warnings, List`1<string> errors, bool timeoutExceeded);
    [CompilerGeneratedAttribute]
public List`1<string> get_Warnings();
    [CompilerGeneratedAttribute]
public void set_Warnings(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public void set_Errors(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_TimeoutExceeded();
    [CompilerGeneratedAttribute]
public void set_TimeoutExceeded(bool value);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.ConsoleRunner.Backend.EmbeddedWorkspaceProductContextProvider : object {
    public WorkspaceProductContext ProductContext { get; }
    public sealed virtual WorkspaceProductContext get_ProductContext();
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.ExceptionsHandler : object {
    public static int HandleException(Exception e, IMessageWriter messageWriter);
    public static TResult WaitResultAndRethrowCommandExecutionException(Task`1<TResult> task, string message);
    public static void WaitAndRethrowCommandExecutionException(Task task, string message);
}
public static class JetBrains.dotCover.ConsoleRunner.Backend.ExitCodes : object {
    public static int Ok;
    public static int ExecutionProblems;
    public static int ValidationProblems;
    public static int NonZeroExitCodeInApplicationBeingAnalyzed;
    public static int Timeout;
    private static ExitCodes();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.IConsoleCommand {
    public abstract virtual void Execute();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.IConsoleCommandFactory {
    public string Name { get; }
    public string ShortName { get; }
    public IHelpResource Help { get; }
    public bool SupportsXmlConfiguration { get; }
    public bool IsDeprecated { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_ShortName();
    public abstract virtual IHelpResource get_Help();
    public abstract virtual bool get_SupportsXmlConfiguration();
    public abstract virtual bool CanHandle(string commandName);
    public abstract virtual bool IsSupportedForPlatform(JetPlatform platform);
    public abstract virtual bool get_IsDeprecated();
    public abstract virtual IConsoleCommand CreateCommand(string commandName, CommandExecutionContext context, IParametersBag bag);
}
[RdRpcAttribute]
public interface JetBrains.dotCover.ConsoleRunner.Backend.IDotCoverInstance {
    public abstract virtual Task`1<DotCoverInstanceResponse> Cover();
    public abstract virtual Task`1<DotCoverInstanceResponse> Pause();
    public abstract virtual Task`1<DotCoverInstanceResponse> GetSnapshotAndKillChildren(TimeSpan timeout);
    public abstract virtual Task`1<int> GetProcessId();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.IDotCoverInstanceImpl {
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.IMessageWriter {
    public abstract virtual void WriteDirectMessage(string message);
    public abstract virtual void WriteStatusMessage(Status status, string message);
    public abstract virtual void WriteInternalMessage(string message);
    public abstract virtual void WriteInternalException(Exception exception);
    public abstract virtual void AddStatusListener(Lifetime lifetime, Action`2<Status, string> listener);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.InstanceIdToPortMapper : object {
    private static FileSystemPath ourInstancesDirectory;
    private static ILogger ourLogger;
    private static InstanceIdToPortMapper();
    public static bool InstanceExists(string instanceId);
    public static void SaveInstancePort(Lifetime lifetime, string instanceId, int port);
    public static bool TryGetInstancePort(string instanceId, Int32& port);
    private static string GetInstanceFileName(string instanceId);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.InstanceServiceRdProtocolBootstrapper : object {
    private static string ProtocolName;
    public static IDotCoverInstance RunClient(Lifetime lifetime, IPEndPoint endpoint, TimeSpan timeout, IMessageWriter messageWriter);
    public static void RunServer(Lifetime lifetime, IDotCoverInstanceImpl instanceImpl, IScheduler scheduler, Int32& port);
    public static void RunServer(Lifetime lifetime, IDotCoverInstanceImpl instanceImpl, IPEndPoint endpoint, IScheduler scheduler);
    private static void RunServerImpl(Lifetime lifetime, IDotCoverInstanceImpl instanceImpl, IPEndPoint endpoint, IScheduler scheduler, Int32& wirePort);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.MessageWriter : object {
    private ILogger myLogger;
    private bool myIsRunningUnderTeamCity;
    private List`1<Action`2<Status, string>> myStatusListeners;
    public MessageWriter(ILogger logger, bool isRunningUnderTeamCity);
    public sealed virtual void WriteDirectMessage(string message);
    public sealed virtual void WriteStatusMessage(Status status, string message);
    public sealed virtual void WriteInternalMessage(string message);
    public sealed virtual void WriteInternalException(Exception exception);
    public sealed virtual void AddStatusListener(Lifetime lifetime, Action`2<Status, string> listener);
    public string EscapeTeamCityMessage(string message);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.AttributeFilterEntry : object {
    [CompilerGeneratedAttribute]
private string <ClassMask>k__BackingField;
    public string ClassMask { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClassMask();
    [CompilerGeneratedAttribute]
public void set_ClassMask(string value);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.AttributeFilters : object {
    [CompilerGeneratedAttribute]
private AttributeFilterEntry[] <Filters>k__BackingField;
    public AttributeFilterEntry[] Filters { get; public set; }
    [CompilerGeneratedAttribute]
public AttributeFilterEntry[] get_Filters();
    [CompilerGeneratedAttribute]
public void set_Filters(AttributeFilterEntry[] value);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.AttributeFiltersStringParser : object {
    public static AttributeFilters Parse(string source);
    private static AttributeFilterEntry ProcessFilterString(string filter, int filterIndex);
    public static string Serialize(AttributeFilters filters);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.AttributeFiltersXmlParser : object {
    private static string AttributeFilterElementName;
    private static string AttributeClassMaskElementName;
    private static string AttributeModuleMaskElementName;
    public static AttributeFilters Parse(XmlNode node);
    private static AttributeFilterEntry ParseEntry(XmlNode node);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.CommandLineParametersBag : object {
    private KeyValueConsumableBag`1<string> myKeyedBag;
    private ConsumableBag`1<string> myNonKeyedBag;
    public CommandLineParametersBag(KeyValueConsumableBag`1<string> keyedBag, ConsumableBag`1<string> nonKeyedBag);
    public static IParametersBag FromCommandLine(IParsedCommandLine commandLine);
    public sealed virtual IParametersBagEntry TryConsumeKeyed(String[] keyAliases);
    public sealed virtual string TryConsumeNextNonKeyed();
    public sealed virtual void MarkAllAsConsumed();
    public sealed virtual void ReportUnusedParameters(IMessageWriter messageWriter, Func`2<string, string> formatter);
    public virtual string ToString();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.CommandLineParametersBagEntry : object {
    private OneToListMap`2<string, string> myData;
    public ParameterOrigin Origin { get; }
    public IEnumerable`1<string> Keys { get; }
    public CommandLineParametersBagEntry(OneToListMap`2<string, string> data);
    public sealed virtual ParameterOrigin get_Origin();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public IEnumerable`1<string> GetValues(string key);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.ConsumableBag`1 : object {
    private LinkedList`1<TValue> myValues;
    public void Add(TValue value);
    public bool TryConsume(TValue& value);
    public void MarkAllAsConsumed();
    public IEnumerable`1<TValue> GetNotConsumed();
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.IParametersBag {
    [CanBeNullAttribute]
public abstract virtual IParametersBagEntry TryConsumeKeyed(String[] keyAliases);
    [CanBeNullAttribute]
public abstract virtual string TryConsumeNextNonKeyed();
    public abstract virtual void MarkAllAsConsumed();
    public abstract virtual void ReportUnusedParameters(IMessageWriter messageWriter, Func`2<string, string> formatter);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.IParametersBagEntry {
    public ParameterOrigin Origin { get; }
    public IEnumerable`1<string> Keys { get; }
    public abstract virtual ParameterOrigin get_Origin();
    public abstract virtual IEnumerable`1<string> get_Keys();
}
internal interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.IParametersBagProvider {
    public abstract virtual XmlAndCommandLineParametersBag Create(IParametersBag commandLineParametersBag, FileSystemPath xmlConfigurationFile, IMessageWriter messageWriter);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.KeyValueConsumableBag`1 : object {
    private OneToListMap`2<string, TValue> myValues;
    [NotNullAttribute]
public OneToListMap`2<string, TValue> TryConsume(String[] keys);
    public void MarkAllAsConsumed();
    [NotNullAttribute]
public IEnumerable`1<string> GetNotConsumed();
    public void Add(string key, TValue value);
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.ParametersBagEntryExtensions : object {
    [ExtensionAttribute]
public static Exception NotSupportedType(IParametersBagEntry entry);
    [ExtensionAttribute]
public static Exception SingleValueExpected(IParametersBagEntry entry);
    [ExtensionAttribute]
public static IEnumerable`1<XmlNode> Values(XmlParametersBagEntry entry);
    [ExtensionAttribute]
public static IEnumerable`1<string> Values(CommandLineParametersBagEntry entry);
    [ExtensionAttribute]
public static void HandleValues(IParametersBagEntry entry, CommandLineValueHandler handleCommandLineValue, XmlValueHandler handleXmlValue);
    [ExtensionAttribute]
public static IEnumerable`1<string> StringValues(IParametersBagEntry entry, String[] commandLineSplitters, string xmlSubItemName);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.ParametersBagProvider : object {
    public static ParametersBagProvider I;
    private static ParametersBagProvider();
    public sealed virtual XmlAndCommandLineParametersBag Create(IParametersBag commandLineParametersBag, FileSystemPath xmlConfigurationFile, IMessageWriter messageWriter);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.XmlAndCommandLineParametersBag : object {
    private IParametersBag myCommandLineParametersBag;
    private KeyValueConsumableBag`1<XmlNode> myEntries;
    internal XmlAndCommandLineParametersBag(IParametersBag commandLineParametersBag, XmlDocument document, IMessageWriter messageWriter);
    public static XmlAndCommandLineParametersBag Create(IParametersBag commandLineParametersBag, FileSystemPath xmlConfigurationFile, IMessageWriter messageWriter);
    internal static XmlAndCommandLineParametersBag Create(IParametersBag commandLineParametersBag, string xmlContent, IMessageWriter messageWriter);
    private static string GetKey(XmlNode node);
    public sealed virtual IParametersBagEntry TryConsumeKeyed(String[] keyAliases);
    public sealed virtual string TryConsumeNextNonKeyed();
    public sealed virtual void MarkAllAsConsumed();
    public sealed virtual void ReportUnusedParameters(IMessageWriter messageWriter, Func`2<string, string> formatter);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Bag.XmlParametersBagEntry : object {
    private OneToListMap`2<string, XmlNode> myData;
    public ParameterOrigin Origin { get; }
    public IEnumerable`1<string> Keys { get; }
    public XmlParametersBagEntry(OneToListMap`2<string, XmlNode> data);
    public sealed virtual ParameterOrigin get_Origin();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public IEnumerable`1<XmlNode> GetValues(string key);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.CoverCommandParameters : object {
    [CompilerGeneratedAttribute]
private bool <NoCheckForUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartInstanceTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoverImmediately>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageFilterSet <UserCoverageFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterSet <UserAttributeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteApiEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <FinishProfilingAutomaticallyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableNgen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CoreLogMask> <CoreLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdbServerLogMask> <PdbServerLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTcpBridge>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepIntermediateData>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnTargetExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessFilterSet <ProcessFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyzeTargetArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TargetWorkingDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableVsTestSettingsPatching>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TargetExecutable>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <HtmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <JsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsonReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <JsonReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <XmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportIncludeStatementInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TeamCityXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <DetailedXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NDependXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <NDependXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SummaryXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <QodanaReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideAutoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <ExcludeFileMasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSourceServersAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <SourcesSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SourcesRoot>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool NoCheckForUpdates { get; public set; }
    public string StartInstance { get; public set; }
    public TimeSpan StartInstanceTimeout { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    public string Instance { get; public set; }
    public bool CoverImmediately { get; public set; }
    public bool DisableDefaultFilters { get; public set; }
    public CoverageFilterSet UserCoverageFilters { get; public set; }
    public AttributeFilterSet UserAttributeFilters { get; public set; }
    public bool UseApi { get; public set; }
    public string RemoteApiEndpoint { get; public set; }
    public bool AllowSymbolServer { get; public set; }
    public StringSequenceWrapper SymbolSearchPaths { get; public set; }
    public Nullable`1<TimeSpan> FinishProfilingAutomaticallyTimeout { get; public set; }
    public Nullable`1<bool> DisableNgen { get; public set; }
    public Nullable`1<CoreLogMask> CoreLogMask { get; public set; }
    public Nullable`1<PdbServerLogMask> PdbServerLogMask { get; public set; }
    public bool UseTcpBridge { get; public set; }
    public StringSequenceWrapper Scope { get; public set; }
    public bool KeepIntermediateData { get; public set; }
    public FileSystemPath Output { get; public set; }
    public bool BuildReport { get; public set; }
    public bool ReturnTargetExitCode { get; public set; }
    public bool InheritConsole { get; public set; }
    public ProcessFilterSet ProcessFilters { get; public set; }
    public bool AnalyzeTargetArguments { get; public set; }
    public string TargetArguments { get; public set; }
    public FileSystemPath TargetWorkingDir { get; public set; }
    public bool DisableVsTestSettingsPatching { get; public set; }
    public FileSystemPath TargetExecutable { get; public set; }
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public FileSystemPath SourcesRoot { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverCommandParameters(CoverCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoCheckForUpdates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCheckForUpdates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StartInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StartInstanceTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstanceTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TempDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TempDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Instance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CoverImmediately();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoverImmediately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableDefaultFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableDefaultFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CoverageFilterSet get_UserCoverageFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserCoverageFilters(CoverageFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual AttributeFilterSet get_UserAttributeFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAttributeFilters(AttributeFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseApi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseApi(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteApiEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteApiEndpoint(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSymbolServer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolSearchPaths(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_FinishProfilingAutomaticallyTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FinishProfilingAutomaticallyTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableNgen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableNgen(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CoreLogMask> get_CoreLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoreLogMask(Nullable`1<CoreLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PdbServerLogMask> get_PdbServerLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbServerLogMask(Nullable`1<PdbServerLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTcpBridge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseTcpBridge(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scope(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepIntermediateData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepIntermediateData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildReport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildReport(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReturnTargetExitCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReturnTargetExitCode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InheritConsole();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InheritConsole(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessFilterSet get_ProcessFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProcessFilters(ProcessFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AnalyzeTargetArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AnalyzeTargetArguments(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetArguments(string value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TargetWorkingDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetWorkingDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableVsTestSettingsPatching();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableVsTestSettingsPatching(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TargetExecutable();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetExecutable(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_HtmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HtmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_JsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_JsonReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_XmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportIncludeStatementInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeStatementInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TeamCityXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NDependXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SummaryXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_QodanaReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QodanaReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideAutoProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideAutoProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_ExcludeFileMasks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeEnvInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeEnvInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSourceServersAccess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSourceServersAccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SourcesRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesRoot(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverCommandParameters left, CoverCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverCommandParameters left, CoverCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.CoverCommandProps : object {
    public FileSystemPath TempDir;
    public bool CollectPerTest;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public CoverCommandProps(FileSystemPath TempDir, bool CollectPerTest);
    [CompilerGeneratedAttribute]
protected CoverCommandProps(CoverCommandProps original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    public static CoverCommandProps Create(ICoverCommandParameters parameters);
    private static bool GetCollectPerTest(IReportBuilderParameters commandParameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverCommandProps left, CoverCommandProps right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverCommandProps left, CoverCommandProps right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverCommandProps other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverCommandProps <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(FileSystemPath& TempDir, Boolean& CollectPerTest);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.CoverDotNetCommandParameters : object {
    [CompilerGeneratedAttribute]
private bool <NoCheckForUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartInstanceTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoverImmediately>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepIntermediateData>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteApiEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageFilterSet <UserCoverageFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterSet <UserAttributeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <FinishProfilingAutomaticallyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableNgen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CoreLogMask> <CoreLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdbServerLogMask> <PdbServerLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTcpBridge>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <HtmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <JsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsonReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <JsonReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <XmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportIncludeStatementInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TeamCityXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <DetailedXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NDependXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <NDependXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SummaryXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <QodanaReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideAutoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <ExcludeFileMasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSourceServersAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <SourcesSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SourcesRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnTargetExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyzeTargetArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TargetWorkingDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableVsTestSettingsPatching>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessFilterSet <ProcessFilters>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool NoCheckForUpdates { get; public set; }
    public string StartInstance { get; public set; }
    public TimeSpan StartInstanceTimeout { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    public string Instance { get; public set; }
    public bool CoverImmediately { get; public set; }
    public StringSequenceWrapper Scope { get; public set; }
    public bool KeepIntermediateData { get; public set; }
    public FileSystemPath Output { get; public set; }
    public bool BuildReport { get; public set; }
    public bool UseApi { get; public set; }
    public string RemoteApiEndpoint { get; public set; }
    public bool DisableDefaultFilters { get; public set; }
    public CoverageFilterSet UserCoverageFilters { get; public set; }
    public AttributeFilterSet UserAttributeFilters { get; public set; }
    public bool AllowSymbolServer { get; public set; }
    public StringSequenceWrapper SymbolSearchPaths { get; public set; }
    public Nullable`1<TimeSpan> FinishProfilingAutomaticallyTimeout { get; public set; }
    public Nullable`1<bool> DisableNgen { get; public set; }
    public Nullable`1<CoreLogMask> CoreLogMask { get; public set; }
    public Nullable`1<PdbServerLogMask> PdbServerLogMask { get; public set; }
    public bool UseTcpBridge { get; public set; }
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public FileSystemPath SourcesRoot { get; public set; }
    public bool ReturnTargetExitCode { get; public set; }
    public bool InheritConsole { get; public set; }
    public bool AnalyzeTargetArguments { get; public set; }
    public string TargetArguments { get; public set; }
    public FileSystemPath TargetWorkingDir { get; public set; }
    public bool DisableVsTestSettingsPatching { get; public set; }
    public ProcessFilterSet ProcessFilters { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverDotNetCommandParameters(CoverDotNetCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoCheckForUpdates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCheckForUpdates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StartInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StartInstanceTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstanceTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TempDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TempDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Instance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CoverImmediately();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoverImmediately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scope(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepIntermediateData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepIntermediateData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildReport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildReport(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseApi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseApi(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteApiEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteApiEndpoint(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableDefaultFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableDefaultFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CoverageFilterSet get_UserCoverageFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserCoverageFilters(CoverageFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual AttributeFilterSet get_UserAttributeFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAttributeFilters(AttributeFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSymbolServer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolSearchPaths(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_FinishProfilingAutomaticallyTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FinishProfilingAutomaticallyTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableNgen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableNgen(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CoreLogMask> get_CoreLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoreLogMask(Nullable`1<CoreLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PdbServerLogMask> get_PdbServerLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbServerLogMask(Nullable`1<PdbServerLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTcpBridge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseTcpBridge(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_HtmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HtmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_JsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_JsonReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_XmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportIncludeStatementInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeStatementInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TeamCityXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NDependXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SummaryXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_QodanaReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QodanaReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideAutoProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideAutoProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_ExcludeFileMasks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeEnvInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeEnvInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSourceServersAccess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSourceServersAccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SourcesRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesRoot(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReturnTargetExitCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReturnTargetExitCode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InheritConsole();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InheritConsole(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AnalyzeTargetArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AnalyzeTargetArguments(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetArguments(string value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TargetWorkingDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetWorkingDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableVsTestSettingsPatching();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableVsTestSettingsPatching(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessFilterSet get_ProcessFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProcessFilters(ProcessFilterSet value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverDotNetCommandParameters left, CoverDotNetCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverDotNetCommandParameters left, CoverDotNetCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverDotNetCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverDotNetCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.CoverEverythingCommandParameters : object {
    [CompilerGeneratedAttribute]
private bool <NoCheckForUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartInstanceTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoverImmediately>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepIntermediateData>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteApiEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageFilterSet <UserCoverageFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterSet <UserAttributeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <FinishProfilingAutomaticallyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableNgen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CoreLogMask> <CoreLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdbServerLogMask> <PdbServerLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTcpBridge>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <HtmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <JsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsonReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <JsonReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <XmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportIncludeStatementInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TeamCityXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <DetailedXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NDependXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <NDependXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SummaryXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <QodanaReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideAutoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <ExcludeFileMasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSourceServersAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <SourcesSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SourcesRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessFilterSet <ProcessFilters>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool NoCheckForUpdates { get; public set; }
    public string StartInstance { get; public set; }
    public TimeSpan StartInstanceTimeout { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    public string Instance { get; public set; }
    public bool CoverImmediately { get; public set; }
    public StringSequenceWrapper Scope { get; public set; }
    public bool KeepIntermediateData { get; public set; }
    public FileSystemPath Output { get; public set; }
    public bool BuildReport { get; public set; }
    public bool UseApi { get; public set; }
    public string RemoteApiEndpoint { get; public set; }
    public bool DisableDefaultFilters { get; public set; }
    public CoverageFilterSet UserCoverageFilters { get; public set; }
    public AttributeFilterSet UserAttributeFilters { get; public set; }
    public bool AllowSymbolServer { get; public set; }
    public StringSequenceWrapper SymbolSearchPaths { get; public set; }
    public Nullable`1<TimeSpan> FinishProfilingAutomaticallyTimeout { get; public set; }
    public Nullable`1<bool> DisableNgen { get; public set; }
    public Nullable`1<CoreLogMask> CoreLogMask { get; public set; }
    public Nullable`1<PdbServerLogMask> PdbServerLogMask { get; public set; }
    public bool UseTcpBridge { get; public set; }
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public FileSystemPath SourcesRoot { get; public set; }
    public ProcessFilterSet ProcessFilters { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverEverythingCommandParameters(CoverEverythingCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoCheckForUpdates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCheckForUpdates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StartInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StartInstanceTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstanceTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TempDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TempDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Instance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CoverImmediately();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoverImmediately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scope(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepIntermediateData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepIntermediateData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildReport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildReport(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseApi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseApi(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteApiEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteApiEndpoint(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableDefaultFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableDefaultFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CoverageFilterSet get_UserCoverageFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserCoverageFilters(CoverageFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual AttributeFilterSet get_UserAttributeFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAttributeFilters(AttributeFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSymbolServer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolSearchPaths(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_FinishProfilingAutomaticallyTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FinishProfilingAutomaticallyTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableNgen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableNgen(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CoreLogMask> get_CoreLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoreLogMask(Nullable`1<CoreLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PdbServerLogMask> get_PdbServerLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbServerLogMask(Nullable`1<PdbServerLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTcpBridge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseTcpBridge(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_HtmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HtmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_JsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_JsonReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_XmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportIncludeStatementInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeStatementInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TeamCityXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NDependXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SummaryXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_QodanaReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QodanaReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideAutoProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideAutoProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_ExcludeFileMasks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeEnvInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeEnvInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSourceServersAccess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSourceServersAccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SourcesRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesRoot(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessFilterSet get_ProcessFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProcessFilters(ProcessFilterSet value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverEverythingCommandParameters left, CoverEverythingCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverEverythingCommandParameters left, CoverEverythingCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverEverythingCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverEverythingCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.CoverIisCommandParameters : object {
    [CompilerGeneratedAttribute]
private bool <NoCheckForUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartInstanceTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoverImmediately>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepIntermediateData>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteApiEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageFilterSet <UserCoverageFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterSet <UserAttributeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <FinishProfilingAutomaticallyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableNgen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CoreLogMask> <CoreLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdbServerLogMask> <PdbServerLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTcpBridge>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <HtmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <JsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsonReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <JsonReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <XmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportIncludeStatementInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TeamCityXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <DetailedXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NDependXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <NDependXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SummaryXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <QodanaReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideAutoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <ExcludeFileMasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSourceServersAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <SourcesSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SourcesRoot>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool NoCheckForUpdates { get; public set; }
    public string StartInstance { get; public set; }
    public TimeSpan StartInstanceTimeout { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    public string Instance { get; public set; }
    public bool CoverImmediately { get; public set; }
    public StringSequenceWrapper Scope { get; public set; }
    public bool KeepIntermediateData { get; public set; }
    public FileSystemPath Output { get; public set; }
    public bool BuildReport { get; public set; }
    public bool UseApi { get; public set; }
    public string RemoteApiEndpoint { get; public set; }
    public bool DisableDefaultFilters { get; public set; }
    public CoverageFilterSet UserCoverageFilters { get; public set; }
    public AttributeFilterSet UserAttributeFilters { get; public set; }
    public bool AllowSymbolServer { get; public set; }
    public StringSequenceWrapper SymbolSearchPaths { get; public set; }
    public Nullable`1<TimeSpan> FinishProfilingAutomaticallyTimeout { get; public set; }
    public Nullable`1<bool> DisableNgen { get; public set; }
    public Nullable`1<CoreLogMask> CoreLogMask { get; public set; }
    public Nullable`1<PdbServerLogMask> PdbServerLogMask { get; public set; }
    public bool UseTcpBridge { get; public set; }
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public FileSystemPath SourcesRoot { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverIisCommandParameters(CoverIisCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoCheckForUpdates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCheckForUpdates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StartInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StartInstanceTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstanceTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TempDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TempDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Instance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CoverImmediately();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoverImmediately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scope(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepIntermediateData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepIntermediateData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildReport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildReport(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseApi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseApi(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteApiEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteApiEndpoint(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableDefaultFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableDefaultFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CoverageFilterSet get_UserCoverageFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserCoverageFilters(CoverageFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual AttributeFilterSet get_UserAttributeFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAttributeFilters(AttributeFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSymbolServer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolSearchPaths(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_FinishProfilingAutomaticallyTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FinishProfilingAutomaticallyTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableNgen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableNgen(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CoreLogMask> get_CoreLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoreLogMask(Nullable`1<CoreLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PdbServerLogMask> get_PdbServerLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbServerLogMask(Nullable`1<PdbServerLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTcpBridge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseTcpBridge(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_HtmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HtmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_JsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_JsonReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_XmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportIncludeStatementInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeStatementInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TeamCityXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NDependXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SummaryXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_QodanaReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QodanaReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideAutoProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideAutoProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_ExcludeFileMasks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeEnvInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeEnvInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSourceServersAccess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSourceServersAccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SourcesRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesRoot(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverIisCommandParameters left, CoverIisCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverIisCommandParameters left, CoverIisCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverIisCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverIisCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.CoverMonoCommandParameters : object {
    [CompilerGeneratedAttribute]
private bool <NoCheckForUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartInstanceTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoverImmediately>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepIntermediateData>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteApiEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageFilterSet <UserCoverageFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterSet <UserAttributeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <FinishProfilingAutomaticallyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableNgen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CoreLogMask> <CoreLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdbServerLogMask> <PdbServerLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTcpBridge>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <HtmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <JsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsonReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <JsonReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <XmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportIncludeStatementInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TeamCityXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <DetailedXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NDependXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <NDependXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SummaryXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <QodanaReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideAutoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <ExcludeFileMasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSourceServersAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <SourcesSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SourcesRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnTargetExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InheritConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyzeTargetArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TargetWorkingDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableVsTestSettingsPatching>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessFilterSet <ProcessFilters>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool NoCheckForUpdates { get; public set; }
    public string StartInstance { get; public set; }
    public TimeSpan StartInstanceTimeout { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    public string Instance { get; public set; }
    public bool CoverImmediately { get; public set; }
    public StringSequenceWrapper Scope { get; public set; }
    public bool KeepIntermediateData { get; public set; }
    public FileSystemPath Output { get; public set; }
    public bool BuildReport { get; public set; }
    public bool UseApi { get; public set; }
    public string RemoteApiEndpoint { get; public set; }
    public bool DisableDefaultFilters { get; public set; }
    public CoverageFilterSet UserCoverageFilters { get; public set; }
    public AttributeFilterSet UserAttributeFilters { get; public set; }
    public bool AllowSymbolServer { get; public set; }
    public StringSequenceWrapper SymbolSearchPaths { get; public set; }
    public Nullable`1<TimeSpan> FinishProfilingAutomaticallyTimeout { get; public set; }
    public Nullable`1<bool> DisableNgen { get; public set; }
    public Nullable`1<CoreLogMask> CoreLogMask { get; public set; }
    public Nullable`1<PdbServerLogMask> PdbServerLogMask { get; public set; }
    public bool UseTcpBridge { get; public set; }
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public FileSystemPath SourcesRoot { get; public set; }
    public bool ReturnTargetExitCode { get; public set; }
    public bool InheritConsole { get; public set; }
    public bool AnalyzeTargetArguments { get; public set; }
    public string TargetArguments { get; public set; }
    public FileSystemPath TargetWorkingDir { get; public set; }
    public bool DisableVsTestSettingsPatching { get; public set; }
    public ProcessFilterSet ProcessFilters { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverMonoCommandParameters(CoverMonoCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoCheckForUpdates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCheckForUpdates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StartInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StartInstanceTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstanceTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TempDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TempDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Instance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CoverImmediately();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoverImmediately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scope(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepIntermediateData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepIntermediateData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildReport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildReport(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseApi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseApi(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteApiEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteApiEndpoint(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableDefaultFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableDefaultFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CoverageFilterSet get_UserCoverageFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserCoverageFilters(CoverageFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual AttributeFilterSet get_UserAttributeFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAttributeFilters(AttributeFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSymbolServer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolSearchPaths(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_FinishProfilingAutomaticallyTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FinishProfilingAutomaticallyTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableNgen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableNgen(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CoreLogMask> get_CoreLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoreLogMask(Nullable`1<CoreLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PdbServerLogMask> get_PdbServerLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbServerLogMask(Nullable`1<PdbServerLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTcpBridge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseTcpBridge(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_HtmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HtmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_JsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_JsonReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_XmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportIncludeStatementInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeStatementInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TeamCityXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NDependXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SummaryXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_QodanaReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QodanaReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideAutoProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideAutoProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_ExcludeFileMasks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeEnvInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeEnvInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSourceServersAccess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSourceServersAccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SourcesRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesRoot(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ReturnTargetExitCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReturnTargetExitCode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InheritConsole();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InheritConsole(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AnalyzeTargetArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AnalyzeTargetArguments(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetArguments(string value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TargetWorkingDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TargetWorkingDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableVsTestSettingsPatching();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableVsTestSettingsPatching(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ProcessFilterSet get_ProcessFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProcessFilters(ProcessFilterSet value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverMonoCommandParameters left, CoverMonoCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverMonoCommandParameters left, CoverMonoCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverMonoCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverMonoCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.CoverServiceCommandParameters : object {
    [CompilerGeneratedAttribute]
private bool <NoCheckForUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartInstanceTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoverImmediately>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepIntermediateData>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildReport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteApiEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDefaultFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageFilterSet <UserCoverageFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeFilterSet <UserAttributeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSymbolServer>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <SymbolSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <FinishProfilingAutomaticallyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableNgen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CoreLogMask> <CoreLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PdbServerLogMask> <PdbServerLogMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTcpBridge>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <HtmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <JsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsonReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <JsonReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <XmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportIncludeStatementInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TeamCityXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <DetailedXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NDependXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <NDependXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SummaryXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <QodanaReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideAutoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <ExcludeFileMasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSourceServersAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <SourcesSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SourcesRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartDependentServices>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceArguments>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool NoCheckForUpdates { get; public set; }
    public string StartInstance { get; public set; }
    public TimeSpan StartInstanceTimeout { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    public string Instance { get; public set; }
    public bool CoverImmediately { get; public set; }
    public StringSequenceWrapper Scope { get; public set; }
    public bool KeepIntermediateData { get; public set; }
    public FileSystemPath Output { get; public set; }
    public bool BuildReport { get; public set; }
    public bool UseApi { get; public set; }
    public string RemoteApiEndpoint { get; public set; }
    public bool DisableDefaultFilters { get; public set; }
    public CoverageFilterSet UserCoverageFilters { get; public set; }
    public AttributeFilterSet UserAttributeFilters { get; public set; }
    public bool AllowSymbolServer { get; public set; }
    public StringSequenceWrapper SymbolSearchPaths { get; public set; }
    public Nullable`1<TimeSpan> FinishProfilingAutomaticallyTimeout { get; public set; }
    public Nullable`1<bool> DisableNgen { get; public set; }
    public Nullable`1<CoreLogMask> CoreLogMask { get; public set; }
    public Nullable`1<PdbServerLogMask> PdbServerLogMask { get; public set; }
    public bool UseTcpBridge { get; public set; }
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public FileSystemPath SourcesRoot { get; public set; }
    public string ServiceName { get; public set; }
    public bool StartDependentServices { get; public set; }
    public string ServiceArguments { get; public set; }
    [CompilerGeneratedAttribute]
protected CoverServiceCommandParameters(CoverServiceCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoCheckForUpdates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NoCheckForUpdates(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StartInstance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StartInstanceTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartInstanceTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TempDir();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TempDir(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Instance(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CoverImmediately();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoverImmediately(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_Scope();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Scope(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepIntermediateData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepIntermediateData(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildReport();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildReport(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseApi();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseApi(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteApiEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteApiEndpoint(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DisableDefaultFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableDefaultFilters(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CoverageFilterSet get_UserCoverageFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserCoverageFilters(CoverageFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual AttributeFilterSet get_UserAttributeFilters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAttributeFilters(AttributeFilterSet value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSymbolServer();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSymbolServer(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_SymbolSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolSearchPaths(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<TimeSpan> get_FinishProfilingAutomaticallyTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FinishProfilingAutomaticallyTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DisableNgen();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisableNgen(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CoreLogMask> get_CoreLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CoreLogMask(Nullable`1<CoreLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<PdbServerLogMask> get_PdbServerLogMask();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbServerLogMask(Nullable`1<PdbServerLogMask> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseTcpBridge();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseTcpBridge(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_HtmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HtmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_JsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_JsonReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_XmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportIncludeStatementInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeStatementInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TeamCityXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NDependXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SummaryXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_QodanaReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QodanaReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideAutoProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideAutoProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_ExcludeFileMasks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeEnvInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeEnvInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSourceServersAccess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSourceServersAccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SourcesRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesRoot(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServiceName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_StartDependentServices();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StartDependentServices(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServiceArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceArguments(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CoverServiceCommandParameters left, CoverServiceCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CoverServiceCommandParameters left, CoverServiceCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CoverServiceCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual CoverServiceCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.DeleteCommandParameters : object {
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <Sources>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPathSequenceWrapper Sources { get; public set; }
    [CompilerGeneratedAttribute]
protected DeleteCommandParameters(DeleteCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPathSequenceWrapper get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(FileSystemPathSequenceWrapper value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DeleteCommandParameters left, DeleteCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DeleteCommandParameters left, DeleteCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DeleteCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual DeleteCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.DirectoryExplorerAdapter : object {
    public static DirectoryExplorerAdapter I;
    private static DirectoryExplorerAdapter();
    public sealed virtual IReadOnlyList`1<FileSystemPath> FindFiles(IList`1<string> patternsSuffixes, FileSystemPath rootDirectory);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.FileSystemPathSequenceWrapper : object {
    public IEnumerable`1<FileSystemPath> Value;
    public FileSystemPathSequenceWrapper(IEnumerable`1<FileSystemPath> value);
    public sealed virtual bool Equals(FileSystemPathSequenceWrapper other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static bool SequenceEqual(IEnumerable`1<FileSystemPath> enumerable0, IEnumerable`1<FileSystemPath> enumerable1);
    private static int GenerateHash(IEnumerable`1<T> iterable);
    public virtual string ToString();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.FileValidator : object {
    public static FileValidator I;
    private static FileValidator();
    public sealed virtual void EnsureDirectoryExists(string parameterName, FileSystemPath path);
    public sealed virtual void ValidateDirectoryExists(string parameterName, FileSystemPath path);
    public sealed virtual void ValidateExecutableExists(string parameterName, FileSystemPath path);
    public sealed virtual void ValidateFileExists(string parameterName, FileSystemPath path);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.HelpCommandParameters : object {
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <OutputXmlConfigFile>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string CommandName { get; public set; }
    public FileSystemPath OutputXmlConfigFile { get; public set; }
    [CompilerGeneratedAttribute]
protected HelpCommandParameters(HelpCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(string value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_OutputXmlConfigFile();
    [CompilerGeneratedAttribute]
public void set_OutputXmlConfigFile(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(HelpCommandParameters left, HelpCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(HelpCommandParameters left, HelpCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(HelpCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual HelpCommandParameters <Clone>$();
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IControlKindParameters {
    public bool UseApi { get; public set; }
    public string RemoteApiEndpoint { get; public set; }
    public abstract virtual bool get_UseApi();
    public abstract virtual void set_UseApi(bool value);
    public abstract virtual string get_RemoteApiEndpoint();
    public abstract virtual void set_RemoteApiEndpoint(string value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ICoverCommandParameters {
    public bool NoCheckForUpdates { get; public set; }
    public string StartInstance { get; public set; }
    public TimeSpan StartInstanceTimeout { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    public string Instance { get; public set; }
    public bool CoverImmediately { get; public set; }
    public StringSequenceWrapper Scope { get; public set; }
    public bool KeepIntermediateData { get; public set; }
    public FileSystemPath Output { get; public set; }
    public bool BuildReport { get; public set; }
    public abstract virtual bool get_NoCheckForUpdates();
    public abstract virtual void set_NoCheckForUpdates(bool value);
    public abstract virtual string get_StartInstance();
    public abstract virtual void set_StartInstance(string value);
    public abstract virtual TimeSpan get_StartInstanceTimeout();
    public abstract virtual void set_StartInstanceTimeout(TimeSpan value);
    public abstract virtual FileSystemPath get_TempDir();
    public abstract virtual void set_TempDir(FileSystemPath value);
    public abstract virtual string get_Instance();
    public abstract virtual void set_Instance(string value);
    public abstract virtual bool get_CoverImmediately();
    public abstract virtual void set_CoverImmediately(bool value);
    public abstract virtual StringSequenceWrapper get_Scope();
    public abstract virtual void set_Scope(StringSequenceWrapper value);
    public abstract virtual bool get_KeepIntermediateData();
    public abstract virtual void set_KeepIntermediateData(bool value);
    public abstract virtual FileSystemPath get_Output();
    public abstract virtual void set_Output(FileSystemPath value);
    public abstract virtual bool get_BuildReport();
    public abstract virtual void set_BuildReport(bool value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ICustomStandaloneArgumentProcessorParameters {
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IDirectoryExplorer {
    public abstract virtual IReadOnlyList`1<FileSystemPath> FindFiles(IList`1<string> patternsSuffixes, FileSystemPath rootDirectory);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IFileValidator {
    internal abstract virtual void EnsureDirectoryExists(string parameterName, FileSystemPath path);
    internal abstract virtual void ValidateDirectoryExists(string parameterName, FileSystemPath path);
    internal abstract virtual void ValidateExecutableExists(string parameterName, FileSystemPath path);
    internal abstract virtual void ValidateFileExists(string parameterName, FileSystemPath path);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IFiltersParameters {
    public bool DisableDefaultFilters { get; public set; }
    public CoverageFilterSet UserCoverageFilters { get; public set; }
    public AttributeFilterSet UserAttributeFilters { get; public set; }
    public abstract virtual bool get_DisableDefaultFilters();
    public abstract virtual void set_DisableDefaultFilters(bool value);
    public abstract virtual CoverageFilterSet get_UserCoverageFilters();
    public abstract virtual void set_UserCoverageFilters(CoverageFilterSet value);
    public abstract virtual AttributeFilterSet get_UserAttributeFilters();
    public abstract virtual void set_UserAttributeFilters(AttributeFilterSet value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IHtmlReportGeneratingParameters {
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public abstract virtual bool get_AllowSourceServersAccess();
    public abstract virtual void set_AllowSourceServersAccess(bool value);
    public abstract virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    public abstract virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IProcessFiltersAware {
    public ProcessFilterSet ProcessFilters { get; public set; }
    public abstract virtual ProcessFilterSet get_ProcessFilters();
    public abstract virtual void set_ProcessFilters(ProcessFilterSet value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IProfilerCoreParameters {
    public bool AllowSymbolServer { get; public set; }
    public StringSequenceWrapper SymbolSearchPaths { get; public set; }
    public Nullable`1<TimeSpan> FinishProfilingAutomaticallyTimeout { get; public set; }
    public Nullable`1<bool> DisableNgen { get; public set; }
    public Nullable`1<CoreLogMask> CoreLogMask { get; public set; }
    public Nullable`1<PdbServerLogMask> PdbServerLogMask { get; public set; }
    public bool UseTcpBridge { get; public set; }
    public abstract virtual bool get_AllowSymbolServer();
    public abstract virtual void set_AllowSymbolServer(bool value);
    public abstract virtual StringSequenceWrapper get_SymbolSearchPaths();
    public abstract virtual void set_SymbolSearchPaths(StringSequenceWrapper value);
    public abstract virtual Nullable`1<TimeSpan> get_FinishProfilingAutomaticallyTimeout();
    public abstract virtual void set_FinishProfilingAutomaticallyTimeout(Nullable`1<TimeSpan> value);
    public abstract virtual Nullable`1<bool> get_DisableNgen();
    public abstract virtual void set_DisableNgen(Nullable`1<bool> value);
    public abstract virtual Nullable`1<CoreLogMask> get_CoreLogMask();
    public abstract virtual void set_CoreLogMask(Nullable`1<CoreLogMask> value);
    public abstract virtual Nullable`1<PdbServerLogMask> get_PdbServerLogMask();
    public abstract virtual void set_PdbServerLogMask(Nullable`1<PdbServerLogMask> value);
    public abstract virtual bool get_UseTcpBridge();
    public abstract virtual void set_UseTcpBridge(bool value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IReportBuilderParameters {
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public abstract virtual FileSystemPath get_HtmlReportOutput();
    public abstract virtual void set_HtmlReportOutput(FileSystemPath value);
    public abstract virtual bool get_HtmlReportGroupNamespaces();
    public abstract virtual void set_HtmlReportGroupNamespaces(bool value);
    public abstract virtual FileSystemPath get_JsonReportOutput();
    public abstract virtual void set_JsonReportOutput(FileSystemPath value);
    public abstract virtual bool get_JsonReportGroupNamespaces();
    public abstract virtual void set_JsonReportGroupNamespaces(bool value);
    public abstract virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    public abstract virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    public abstract virtual FileSystemPath get_XmlReportOutput();
    public abstract virtual void set_XmlReportOutput(FileSystemPath value);
    public abstract virtual bool get_XmlReportGroupNamespaces();
    public abstract virtual void set_XmlReportGroupNamespaces(bool value);
    public abstract virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    public abstract virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    public abstract virtual bool get_XmlReportIncludeStatementInfo();
    public abstract virtual void set_XmlReportIncludeStatementInfo(bool value);
    public abstract virtual FileSystemPath get_TeamCityXmlReportOutput();
    public abstract virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    public abstract virtual FileSystemPath get_DetailedXmlReportOutput();
    public abstract virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    public abstract virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    public abstract virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    public abstract virtual FileSystemPath get_NDependXmlReportOutput();
    public abstract virtual void set_NDependXmlReportOutput(FileSystemPath value);
    public abstract virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    public abstract virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    public abstract virtual FileSystemPath get_SummaryXmlReportOutput();
    public abstract virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    public abstract virtual FileSystemPath get_FileCoverageXmlReportOutput();
    public abstract virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    public abstract virtual FileSystemPath get_FileCoverageJsonReportOutput();
    public abstract virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    public abstract virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    public abstract virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    public abstract virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    public abstract virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    public abstract virtual FileSystemPath get_QodanaReportOutput();
    public abstract virtual void set_QodanaReportOutput(FileSystemPath value);
    public abstract virtual bool get_HideAutoProperties();
    public abstract virtual void set_HideAutoProperties(bool value);
    public abstract virtual StringSequenceWrapper get_ExcludeFileMasks();
    public abstract virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    public abstract virtual bool get_IncludeEnvInfo();
    public abstract virtual void set_IncludeEnvInfo(bool value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IReportGeneratingParameters {
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IStandaloneArgumentProcessorParameters {
    public bool ReturnTargetExitCode { get; public set; }
    public bool InheritConsole { get; public set; }
    public bool AnalyzeTargetArguments { get; public set; }
    public string TargetArguments { get; public set; }
    public FileSystemPath TargetWorkingDir { get; public set; }
    public bool DisableVsTestSettingsPatching { get; public set; }
    public abstract virtual bool get_ReturnTargetExitCode();
    public abstract virtual void set_ReturnTargetExitCode(bool value);
    public abstract virtual bool get_InheritConsole();
    public abstract virtual void set_InheritConsole(bool value);
    public abstract virtual bool get_AnalyzeTargetArguments();
    public abstract virtual void set_AnalyzeTargetArguments(bool value);
    public abstract virtual string get_TargetArguments();
    public abstract virtual void set_TargetArguments(string value);
    public abstract virtual FileSystemPath get_TargetWorkingDir();
    public abstract virtual void set_TargetWorkingDir(FileSystemPath value);
    public abstract virtual bool get_DisableVsTestSettingsPatching();
    public abstract virtual void set_DisableVsTestSettingsPatching(bool value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ITargetExecutableAware {
    public FileSystemPath TargetExecutable { get; public set; }
    public abstract virtual FileSystemPath get_TargetExecutable();
    public abstract virtual void set_TargetExecutable(FileSystemPath value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IUncoveredLinesReportGeneratingParameters {
    public FileSystemPath SourcesRoot { get; public set; }
    public abstract virtual FileSystemPath get_SourcesRoot();
    public abstract virtual void set_SourcesRoot(FileSystemPath value);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.IWindowsServiceArgumentProcessorParameters {
    public string ServiceName { get; public set; }
    public bool StartDependentServices { get; public set; }
    public string ServiceArguments { get; public set; }
    public abstract virtual string get_ServiceName();
    public abstract virtual void set_ServiceName(string value);
    public abstract virtual bool get_StartDependentServices();
    public abstract virtual void set_StartDependentServices(bool value);
    public abstract virtual string get_ServiceArguments();
    public abstract virtual void set_ServiceArguments(string value);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ListCommandParameters : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <Sources>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath Output { get; public set; }
    public FileSystemPathSequenceWrapper Sources { get; public set; }
    [CompilerGeneratedAttribute]
protected ListCommandParameters(ListCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public FileSystemPathSequenceWrapper get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(FileSystemPathSequenceWrapper value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ListCommandParameters left, ListCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ListCommandParameters left, ListCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ListCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ListCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.MergeCommandParameters : object {
    [CompilerGeneratedAttribute]
private MergeType <MergeType>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TempDir>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MergeType MergeType { get; public set; }
    public FileSystemPath Output { get; public set; }
    public FileSystemPathSequenceWrapper Sources { get; public set; }
    public FileSystemPath TempDir { get; public set; }
    [CompilerGeneratedAttribute]
protected MergeCommandParameters(MergeCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public MergeType get_MergeType();
    [CompilerGeneratedAttribute]
public void set_MergeType(MergeType value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public FileSystemPathSequenceWrapper get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_TempDir();
    [CompilerGeneratedAttribute]
public void set_TempDir(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(MergeCommandParameters left, MergeCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(MergeCommandParameters left, MergeCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(MergeCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual MergeCommandParameters <Clone>$();
}
public static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ReportBuilderParametersUtils : object {
    internal static ReportType[] GetReportTypes(IReportBuilderParameters parameters);
    internal static PerTestInfoKind GetIncludeCoveragePerTest(IReportBuilderParameters parameters, ReportType type);
    internal static FileSystemPath GetOutput(IReportBuilderParameters parameters, ReportType type);
    internal static bool GetGroupNamespaces(IReportBuilderParameters parameters, ReportType type);
    internal static void EnsureAllDirectoriesExist(IFileValidator fileValidator, IReportBuilderParameters parameters);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ReportCommandParameters : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <HtmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <JsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsonReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <JsonReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportGroupNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <XmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlReportIncludeStatementInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <TeamCityXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <DetailedXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <NDependXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PerTestInfoKind <NDependXmlReportIncludeCoveragePerTest>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SummaryXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <FileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageXmlReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <DetailedFileCoverageJsonReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <QodanaReportOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideAutoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private StringSequenceWrapper <ExcludeFileMasks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSourceServersAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPathSequenceWrapper <SourcesSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <SourcesRoot>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath Source { get; public set; }
    public FileSystemPath HtmlReportOutput { get; public set; }
    public bool HtmlReportGroupNamespaces { get; public set; }
    public FileSystemPath JsonReportOutput { get; public set; }
    public bool JsonReportGroupNamespaces { get; public set; }
    public PerTestInfoKind JsonReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath XmlReportOutput { get; public set; }
    public bool XmlReportGroupNamespaces { get; public set; }
    public PerTestInfoKind XmlReportIncludeCoveragePerTest { get; public set; }
    public bool XmlReportIncludeStatementInfo { get; public set; }
    public FileSystemPath TeamCityXmlReportOutput { get; public set; }
    public FileSystemPath DetailedXmlReportOutput { get; public set; }
    public PerTestInfoKind DetailedXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath NDependXmlReportOutput { get; public set; }
    public PerTestInfoKind NDependXmlReportIncludeCoveragePerTest { get; public set; }
    public FileSystemPath SummaryXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath FileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageXmlReportOutput { get; public set; }
    public FileSystemPath DetailedFileCoverageJsonReportOutput { get; public set; }
    public FileSystemPath QodanaReportOutput { get; public set; }
    public bool HideAutoProperties { get; public set; }
    public StringSequenceWrapper ExcludeFileMasks { get; public set; }
    public bool IncludeEnvInfo { get; public set; }
    public bool AllowSourceServersAccess { get; public set; }
    public FileSystemPathSequenceWrapper SourcesSearchPaths { get; public set; }
    public FileSystemPath SourcesRoot { get; public set; }
    [CompilerGeneratedAttribute]
protected ReportCommandParameters(ReportCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_HtmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HtmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HtmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_JsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_JsonReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_JsonReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_JsonReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_XmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportGroupNamespaces();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportGroupNamespaces(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_XmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_XmlReportIncludeStatementInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_XmlReportIncludeStatementInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_TeamCityXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TeamCityXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_DetailedXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_NDependXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual PerTestInfoKind get_NDependXmlReportIncludeCoveragePerTest();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NDependXmlReportIncludeCoveragePerTest(PerTestInfoKind value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SummaryXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_FileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageXmlReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageXmlReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_DetailedFileCoverageJsonReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DetailedFileCoverageJsonReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_QodanaReportOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QodanaReportOutput(FileSystemPath value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideAutoProperties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideAutoProperties(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual StringSequenceWrapper get_ExcludeFileMasks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExcludeFileMasks(StringSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeEnvInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeEnvInfo(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowSourceServersAccess();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowSourceServersAccess(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPathSequenceWrapper get_SourcesSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesSearchPaths(FileSystemPathSequenceWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual FileSystemPath get_SourcesRoot();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcesRoot(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ReportCommandParameters left, ReportCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ReportCommandParameters left, ReportCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ReportCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ReportCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.SendCommandParameters : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandEnum <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public TimeSpan Timeout { get; public set; }
    public CommandEnum Command { get; public set; }
    public string Instance { get; public set; }
    [CompilerGeneratedAttribute]
protected SendCommandParameters(SendCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public CommandEnum get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(CommandEnum value);
    [CompilerGeneratedAttribute]
public string get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SendCommandParameters left, SendCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SendCommandParameters left, SendCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SendCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SendCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.StringSequenceWrapper : object {
    public IEnumerable`1<string> Value;
    public StringSequenceWrapper(IEnumerable`1<string> value);
    public sealed virtual bool Equals(StringSequenceWrapper other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static bool SequenceEqual(IEnumerable`1<string> enumerable0, IEnumerable`1<string> enumerable1);
    private static int GenerateHash(IEnumerable`1<T> iterable);
    public virtual string ToString();
}
public static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ValidationUtils : object {
    internal static void ValidateHasUniqueValues(string parameterName, IEnumerable`1<T> parameterValues);
    internal static void EnsureDirectoryExists(string parameterName, FileSystemPath path);
    internal static void ValidateDirectoryExists(string parameterName, FileSystemPath path);
    internal static void ValidateExecutableExists(string parameterName, FileSystemPath path);
    internal static void ValidateFileExists(string parameterName, FileSystemPath path);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.VersionCommandParameters : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath Output { get; public set; }
    [CompilerGeneratedAttribute]
protected VersionCommandParameters(VersionCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(VersionCommandParameters left, VersionCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(VersionCommandParameters left, VersionCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(VersionCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual VersionCommandParameters <Clone>$();
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.Commands.ZipCommandParameters : object {
    [CompilerGeneratedAttribute]
private FileSystemPath <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <Source>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public FileSystemPath Output { get; public set; }
    public FileSystemPath Source { get; public set; }
    [CompilerGeneratedAttribute]
protected ZipCommandParameters(ZipCommandParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public FileSystemPath get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(FileSystemPath value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ZipCommandParameters left, ZipCommandParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ZipCommandParameters left, ZipCommandParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ZipCommandParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ZipCommandParameters <Clone>$();
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.CoverageFilterEntry : object {
    [CompilerGeneratedAttribute]
private string <ModuleMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionMask>k__BackingField;
    public string ModuleMask { get; public set; }
    public string ClassMask { get; public set; }
    public string FunctionMask { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModuleMask();
    [CompilerGeneratedAttribute]
public void set_ModuleMask(string value);
    [CompilerGeneratedAttribute]
public string get_ClassMask();
    [CompilerGeneratedAttribute]
public void set_ClassMask(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionMask();
    [CompilerGeneratedAttribute]
public void set_FunctionMask(string value);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.CoverageFilters : object {
    [CompilerGeneratedAttribute]
private CoverageFilterEntry[] <IncludeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageFilterEntry[] <ExcludeFilters>k__BackingField;
    public CoverageFilterEntry[] IncludeFilters { get; public set; }
    public CoverageFilterEntry[] ExcludeFilters { get; public set; }
    [CompilerGeneratedAttribute]
public CoverageFilterEntry[] get_IncludeFilters();
    [CompilerGeneratedAttribute]
public void set_IncludeFilters(CoverageFilterEntry[] value);
    [CompilerGeneratedAttribute]
public CoverageFilterEntry[] get_ExcludeFilters();
    [CompilerGeneratedAttribute]
public void set_ExcludeFilters(CoverageFilterEntry[] value);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.CoverageFiltersStringParser : object {
    private static char IncludePrefix;
    private static char ExcludePrefix;
    private static char PrefixSeparator;
    private static char MasksSeparator;
    private static char ValueSeparator;
    private static string IncludeAllMask;
    private static string DefaultModuleMaskName;
    private static string DefaultClassMaskName;
    private static string DefaultFunctionMaskName;
    private static IEnumerable`1<string> ourModuleMaskNames;
    private static IEnumerable`1<string> ourClassMaskNames;
    private static IEnumerable`1<string> ourFunctionMaskNames;
    private static CoverageFiltersStringParser();
    public static string Serialize(CoverageFilters filters);
    private static void SerializeFilterSet(IEnumerable`1<CoverageFilterEntry> filterEntries, char prefix, StringBuilder builder);
    public static CoverageFilters Parse(string source);
    private static bool ComponentHasValidPrefix(string component);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.CoverageFiltersXmlParser : object {
    private static string ExcludeFiltersElementName;
    private static string IncludeFiltersElementName;
    private static string FilterEntryElementName;
    private static string ModuleMaskElementName;
    private static string ClassMaskElementName;
    private static string FunctionMaskElementName;
    public static CoverageFilters Parse(XmlNode parent);
    private static CoverageFilterEntry[] ParseFilters(XmlNode parent);
    private static CoverageFilterEntry ParseFilterEntry(XmlNode parent);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.EnumValuesParser : object {
    public static TEnum ParseEnumValue(string key, string value, TEnum[] forbiddenValues);
}
public interface JetBrains.dotCover.ConsoleRunner.Backend.Parameters.IPathConverter {
    public abstract virtual FileSystemPath ConvertPath(string sourcePath, ParameterOrigin parameterOrigin);
    public abstract virtual string ConvertPathWithWildcards(string parameterValue, ParameterOrigin parameterOrigin);
    public abstract virtual String[] GetPathsSeparators();
    public abstract virtual string ConvertPathsInTargetArguments(string targetArguments, ParameterOrigin origin);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.OSDependentConstants : object {
    public static String[] WindowsPathsSeparators;
    public static String[] UnixPathsSeparators;
    public static String[] PathsSeparators;
    private static OSDependentConstants();
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ParameterExtensions : object {
    private static Char[] ourPathPatternWildcards;
    private static ParameterExtensions();
    public static IReadOnlyList`1<FileSystemPath> GetMatchingFiles(IEnumerable`1<string> patterns, IDirectoryExplorer directoryExplorer);
    private static OneToListMap`2<FileSystemPath, string> GroupAntPatternsByRootDirectory(IEnumerable`1<string> patterns);
}
public enum JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ParameterOrigin : Enum {
    public int value__;
    public static ParameterOrigin CommandLine;
    public static ParameterOrigin Xml;
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ParametersParsers.CoverCommandParametersParser : object {
    [CompilerGeneratedAttribute]
private IPathConverter <pathConverter>P;
    [CompilerGeneratedAttribute]
private IFileValidator <fileValidator>P;
    private static TimeSpan ourDefaultStartInstanceTimeout;
    public CoverCommandParametersParser(IPathConverter pathConverter, IFileValidator fileValidator);
    private static CoverCommandParametersParser();
    internal void Parse(IParametersBag bag, bool reportIsOptional, ICoverCommandParameters parameters);
    internal static void ParseWindowsServiceArgumentProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IWindowsServiceArgumentProcessorParameters parameters);
    internal static void ParseTargetExecutableParameter(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, ITargetExecutableAware parameters);
    internal static IProcessFiltersAware ParseProcessFiltersParameter(IParametersBag bag, IProcessFiltersAware parameters);
    private static void ParseFiltersParameters(IParametersBag bag, IFiltersParameters parameters);
    private void ParseProfilerCoreParameters(IParametersBag bag, IProfilerCoreParameters parameters);
    internal static IStandaloneArgumentProcessorParameters ParseStandaloneArgumentProcessorParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, IStandaloneArgumentProcessorParameters parameters);
}
public static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ParametersParsers.ParameterParseUtils : object {
    private static String[] ourOutputParameterNames;
    private static String[] ourSourceParameterNames;
    internal static String[] SourcesParameterNames;
    private static TimeSpan ourDefaultTimeout;
    private static string EnableLoggingKey;
    private static ParameterParseUtils();
    internal static FileSystemPath ParseOutputParameter(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator);
    internal static FileSystemPath ParseSourceParameter(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator);
    internal static FileSystemPath ParseTempDir(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator);
    internal static IEnumerable`1<string> ParseSourcesParameter(IParametersBag bag, IPathConverter pathConverter);
    internal static DeleteCommandParameters ParseDeleteCommandParameters(IParametersBag bag, IPathConverter pathConverter, IDirectoryExplorer directoryExplorer);
    internal static ZipCommandParameters ParseZipCommandParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator);
    internal static VersionCommandParameters ParseVersionCommandParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator);
    internal static ListCommandParameters ParseListCommandParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, IDirectoryExplorer directoryExplorer);
    internal static ReportCommandParameters ParseReportCommandParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, bool reportIsOptional);
    internal static MergeCommandParameters ParseMergeCommandParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, IDirectoryExplorer directoryExplorer);
    internal static SendCommandParameters ParseSendCommandParameters(IParametersBag bag);
    internal static HelpCommandParameters ParseHelpCommandParameters(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator);
    internal static ConsoleRunnerParameters ParseConsoleRunnerParameters(IParametersBag bag, IPathConverter pathConverter, FileSystemPath startupDirectory, IParametersBagProvider bagProvider, IMessageWriter messageWriter, XmlAndCommandLineParametersBag& xmlAndCommandLineParametersBag);
}
public static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ParametersParsers.ParseUtils : object {
    private static string SymbolServerPrefix;
    private static string SymbolCachePrefix;
    internal static bool TryGetBoolValue(IParametersBag bag, string parameterName, Boolean& result);
    internal static bool GetBoolValue(IParametersBag bag, string parameterName, bool defaultValue);
    internal static bool GetBoolValue(IParametersBag bag, String[] parameterName, bool defaultValue);
    private static bool GetBoolValue(IParametersBagEntry entry);
    internal static bool TryGetEnumerableStringValues(IParametersBag bag, String[] parameterName, String[] commandLineSplitters, string xmlSubItemName, String[]& result);
    private static String[] GetEnumerableStringValues(IParametersBagEntry entry, String[] commandLineSplitters, string xmlSubItemName);
    internal static bool TryGetFileSystemPath(IParametersBag bag, String[] parameterNames, IPathConverter pathConverter, FileSystemPath& result);
    internal static bool TryGetStringValue(IParametersBag bag, String[] parameterName, Func`3<string, ParameterOrigin, string> transform, String& result);
    private static string GetStringValue(IParametersBagEntry bagEntry, Func`3<string, ParameterOrigin, string> transform);
    internal static bool TryGetFileSystemPaths(IParametersBag bag, String[] parameterName, IPathConverter pathConverter, IReadOnlyList`1& result);
    internal static TEnum GetEnumValue(IParametersBag bag, string parameterName, TEnum[] forbiddenValues, TEnum defaultValue);
    internal static bool TryGetEnumValue(IParametersBag bag, string parameterName, TEnum[] forbiddenValues, TEnum& result);
    internal static IReadOnlyList`1<TEnum> GetEnumValues(IParametersBag bag, String[] parameterName, TEnum[] defaultValue);
    internal static IEnumerable`1<string> GetAntPathPatterns(IParametersBag bag, String[] parameterNames, string xmlSubItemName, IPathConverter pathConverter);
    internal static TimeSpan GetTimeSpanValue(IParametersBag bag, string parameterName, TimeSpan defaultValue);
    internal static bool TryParseTimeSpanValue(IParametersBag bag, string parameterName, TimeSpan& result);
    private static TimeSpan GetTimeSpanValue(IParametersBagEntry bagEntry, string parameterName);
    internal static bool TryGetProcessFilterValue(IParametersBag bag, string parameterName, ProcessFilterSet& result);
    private static ProcessFilterSet GetProcessFilterValue(IParametersBagEntry entry, string parameterName);
    internal static bool TryGetAttributeFilterSetValue(IParametersBag bag, string parameterName, AttributeFilterSet& result);
    private static AttributeFilterSet GetAttributeFilterSetValue(IParametersBagEntry entry, string parameterName);
    private static IEnumerable`1<AttributeFilter> ConvertFilters(IEnumerable`1<AttributeFilterEntry> filters);
    internal static bool TryGetCoverageFilterSetValue(IParametersBag bag, string parameterName, CoverageFilterSet& result);
    private static CoverageFilterSet GetCoverageFilterSetValue(IParametersBagEntry entry, string parameterName);
    private static IEnumerable`1<CoverageFilter> ConvertFilters(IEnumerable`1<CoverageFilterEntry> source);
    internal static bool TryGetPaths(IParametersBag bag, String[] parameterNames, IPathConverter pathConverter, IEnumerable`1& result);
    private static bool TryGetPaths(IParametersBagEntry entry, string parameterName, IPathConverter pathConverter, IEnumerable`1& result);
    internal static bool TryGetEnumFlagsValue(IParametersBag bag, string parameterName, TEnum& result);
    private static bool TryGetEnumFlagsValue(IParametersBagEntry entry, TEnum& result);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <GetEnumValues>g__FuncSplit|12_0(string s);
}
public class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ParametersParsers.ReportBuilderParametersParser : object {
    [CompilerGeneratedAttribute]
private IPathConverter <pathConverter>P;
    [CompilerGeneratedAttribute]
private IFileValidator <fileValidator>P;
    private static String[] ourOutputParameterNames;
    private static String[] ourReportTypeParameterNames;
    private static Dictionary`2<ReportType, string> ourReportOutputsParameterNames;
    private static Dictionary`2<ReportType, string> ourReportGroupNamespacesParameterNames;
    private static Dictionary`2<ReportType, string> ourReportIncludeCoveragePerTestParameterNames;
    private Dictionary`2<ReportType, FileSystemPath> myReportTypeToOutput;
    private Dictionary`2<ReportType, bool> myReportTypeToGroupNamespaces;
    private Dictionary`2<ReportType, PerTestInfoKind> myReportTypeToIncludeCoveragePerTest;
    public ReportBuilderParametersParser(IPathConverter pathConverter, IFileValidator fileValidator);
    private static ReportBuilderParametersParser();
    public static bool Parse(IParametersBag bag, IPathConverter pathConverter, IFileValidator fileValidator, bool reportIsOptional, IReportBuilderParameters parameters);
    private bool DoParse(IParametersBag bag, bool reportIsOptional, IReportBuilderParameters parameters);
    private void ParseAndApplyObsoleteIncludeCoveragePerTestParameter(IParametersBag bag);
    private void ParseAndApplyObsoleteGroupNamespacesParameter(IParametersBag bag);
    private bool ParseAndApplyObsoleteReportTypeParameter(IParametersBag bag, bool reportIsOptional);
    private Dictionary`2<ReportType, PerTestInfoKind> ParseReportIncludeCoveragePerTest(IParametersBag bag);
    private Dictionary`2<ReportType, bool> ParseReportGroupNamespaces(IParametersBag bag);
    private Dictionary`2<ReportType, FileSystemPath> ParseReportOutputs(IParametersBag bag);
    internal static String[] ParseExcludeFileMasks(IParametersBag bag, String[] separators, string parameterName);
    private IReadOnlyList`1<FileSystemPath> ParseSourcesSearchPaths(IParametersBag bag);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.PathConverter : object {
    private static Char[] ourWildcards;
    private static Char[] ourKeyValueSeparators;
    private static ISet`1<char> ourPathSeparators;
    private static String[] ourRelativePathIndicators;
    private ILogger myLogger;
    private FileSystemPath myStartupDirectory;
    private FileSystemPath myXmlFileDirectory;
    public PathConverter(FileSystemPath startupDirectory);
    private static PathConverter();
    public sealed virtual FileSystemPath ConvertPath(string sourcePath, ParameterOrigin parameterOrigin);
    public sealed virtual String[] GetPathsSeparators();
    public sealed virtual string ConvertPathWithWildcards(string parameterValue, ParameterOrigin parameterOrigin);
    public string ConvertPathInSingleTargetArgument(string arg, ParameterOrigin origin);
    public sealed virtual string ConvertPathsInTargetArguments(string targetArguments, ParameterOrigin origin);
    private FileSystemPath MakeAbsolutePath(FileSystemPath path, ParameterOrigin parameterOrigin);
    private FileSystemPath GetBaseDirectory(ParameterOrigin parameterOrigin);
    public void SetXmlFileDirectory(FileSystemPath directory);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ProcessFiltersStringParser : object {
    private static string IncludePrefix;
    private static string ExcludePrefix;
    private static char FiltersSeparator;
    public static ProcessFilterSet Parse(string value);
}
internal static class JetBrains.dotCover.ConsoleRunner.Backend.Parameters.ProcessFiltersXmlParser : object {
    private static string IncludeFiltersTag;
    private static string ExcludeFiltersTag;
    private static string FilterTag;
    public static ProcessFilterSet Parse(XmlNode value);
    private static IEnumerable`1<string> ParseFilters(XmlNode node);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.PlatformUnsupportedCommandException : CommandExecutionException {
    public PlatformUnsupportedCommandException(string commandName);
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.PlatformUnsupportedParameterException : CommandExecutionException {
    public PlatformUnsupportedParameterException(string parameterName);
}
public enum JetBrains.dotCover.ConsoleRunner.Backend.Status : Enum {
    public int value__;
    public static Status Normal;
    public static Status Warning;
    public static Status Error;
}
internal class JetBrains.dotCover.ConsoleRunner.Backend.ValidationException : ApplicationException {
    public ValidationException(string message);
    public ValidationException(string message, Exception innerException);
    public static ValidationException ValueCanNotBeEmpty(string parameterName);
    public static ValidationException ParameterIsNotSpecified(string parameterName);
    public static ValidationException ParameterHasInvalidValue(string parameterName, Exception innerException);
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.ConsoleRunner.Backend.ZoneMarker : object {
}
internal interface JetBrains.dotCover.ConsoleRunner.CommandLineParser.IParsedCommandLine {
    public IEnumerable`1<ParsedArgument> Arguments { get; }
    [CanBeNullAttribute]
public IEnumerable`1<string> AdditionalArguments { get; }
    [CanBeNullAttribute]
public string AdditionalArgsSeparator { get; }
    public abstract virtual IEnumerable`1<ParsedArgument> get_Arguments();
    public abstract virtual IEnumerable`1<string> get_AdditionalArguments();
    public abstract virtual string get_AdditionalArgsSeparator();
}
internal class JetBrains.dotCover.ConsoleRunner.CommandLineParser.ParsedArgument : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<char> <KeyValueSeparator>k__BackingField;
    [CanBeNullAttribute]
public string Prefix { get; }
    [CanBeNullAttribute]
public string Key { get; }
    [CanBeNullAttribute]
public string Value { get; }
    public Nullable`1<char> KeyValueSeparator { get; }
    public ParsedArgument(string prefix, string key, string value, Nullable`1<char> keyValueSeparator);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Nullable`1<char> get_KeyValueSeparator();
}
internal class JetBrains.dotCover.ConsoleRunner.CommandLineParser.ParsedCommandLine : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ParsedArgument> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AdditionalArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalArgsSeparator>k__BackingField;
    public IEnumerable`1<ParsedArgument> Arguments { get; }
    public IEnumerable`1<string> AdditionalArguments { get; }
    public string AdditionalArgsSeparator { get; }
    public ParsedCommandLine(IEnumerable`1<ParsedArgument> arguments, IEnumerable`1<string> additionalArguments, string additionalArgsSeparator);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ParsedArgument> get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_AdditionalArguments();
    [CompilerGeneratedAttribute]
public sealed virtual string get_AdditionalArgsSeparator();
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.ConsoleRunner.CommandLineParser.ParsedCommandLineExtensions : object {
    [ExtensionAttribute]
public static string GetCommandLineString(IParsedCommandLine commandLine);
    [ExtensionAttribute]
public static string GetCommandLineEntry(ParsedArgument argument);
}
internal class JetBrains.dotCover.ConsoleRunner.CommandLineParser.UniversalCommandLineParser : object {
    private String[] myKeyPrefixes;
    private Char[] myKeyValueSeparators;
    private bool mySpaceKeyValueSeparatorAllowed;
    private string myAdditionalArgsSeparator;
    public UniversalCommandLineParser(String[] keyPrefixes, Char[] keyValueSeparators, string additionalArgsSeparator);
    public IParsedCommandLine ParseCommandLine(string commandLine);
    public IParsedCommandLine ParseCommandLine(String[] args);
    private static String[] NormalizeKeyPrefixes(String[] keyPrefixes);
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotCover.ConsoleRunner.IConsoleRunnerEntryPointEnvZone {
}
internal static class JetBrains.dotCover.ConsoleRunner.SimpleContainer.ConsoleRunnerComponentsFactory : object {
    public static void AddShellComponents(ISimpleContainer container);
    public static void AddWorkspaceComponents(ISimpleContainer container);
}
internal class JetBrains.dotCover.ConsoleRunner.SimpleContainer.SimpleWorkspaceContainersFactory : SimpleWorkspaceContainersFactoryBase {
    protected virtual void AddWorkspaceComponents(ISimpleContainer container);
    protected virtual void AddSnapshotComponents(ISimpleContainer container);
}
internal static class JetBrains.dotCover.ConsoleRunner.Startup.CommandLineConstants : object {
    public static String[] DotCoverWindowsKeyPrefixes;
    public static Char[] DotCoverWindowsKeyValueSeparators;
    public static String[] DotCoverUnixKeyPrefixes;
    public static Char[] DotCoverUnixKeyValueSeparators;
    public static string AdditionalArgsSeparator;
    private static CommandLineConstants();
}
internal static class JetBrains.dotCover.ConsoleRunner.Startup.ConsoleRunnerLoggerInitializer : object {
    public static void Initialize(string entryPointName, ConsoleRunnerParameters parameters, FileSystemPath startupDirectory);
}
public class JetBrains.dotCover.ConsoleRunner.Startup.ConsoleRunnerParameters : object {
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LoggingLevel> <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemPath <XmlConfigurationFile>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string CommandName { get; public set; }
    public bool LoggingEnabled { get; public set; }
    public FileSystemPath LogFile { get; public set; }
    public Nullable`1<LoggingLevel> LogLevel { get; public set; }
    public FileSystemPath XmlConfigurationFile { get; public set; }
    [CompilerGeneratedAttribute]
protected ConsoleRunnerParameters(ConsoleRunnerParameters original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(string value);
    [CompilerGeneratedAttribute]
public bool get_LoggingEnabled();
    [CompilerGeneratedAttribute]
public void set_LoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(FileSystemPath value);
    [CompilerGeneratedAttribute]
public Nullable`1<LoggingLevel> get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(Nullable`1<LoggingLevel> value);
    [CompilerGeneratedAttribute]
public FileSystemPath get_XmlConfigurationFile();
    [CompilerGeneratedAttribute]
public void set_XmlConfigurationFile(FileSystemPath value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ConsoleRunnerParameters left, ConsoleRunnerParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ConsoleRunnerParameters left, ConsoleRunnerParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ConsoleRunnerParameters other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ConsoleRunnerParameters <Clone>$();
}
public static class JetBrains.dotCover.ConsoleRunner.Startup.ConsoleRunnerProgram : object {
    private static string EntryPointName;
    public static int Main(String[] args);
}
public static class JetBrains.dotCover.ConsoleRunner.Startup.DotCoverHostFactory : object {
    public static IDotCoverHost CreateSimpleHost(Lifetime lifetime);
}
public static class JetBrains.dotCover.ConsoleRunner.Startup.EnvironmentVariablesTracker : object {
    private static IReadOnlyList`1<string> ourNames;
    private static EnvironmentVariablesTracker();
    public static void LogNotableEnvironmentVariables(IMessageWriter messageWriter);
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.ConsoleRunner.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
