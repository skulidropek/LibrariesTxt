public class JetBrains.dotCover.Core.Platform.ComponentContainers.ContainerInitializer : object {
    private IList`1<SyncInitializerEntry> mySyncEntries;
    private IList`1<AsyncInitializerEntry> myAsyncEntries;
    private int myProgressEntriesNumber;
    public sealed virtual void AddInitAction(Action action, int priority);
    public sealed virtual void AddAsyncInitAction(Func`1<Task> asyncAction, int priority);
    public sealed virtual void AddAsyncInitAction(Func`2<IProgressIndicator, Task> asyncAction, int priority);
    public void Init();
    public Task InitAsync(IProgressIndicator progress);
}
public interface JetBrains.dotCover.Core.Platform.ComponentContainers.IContainerInitializer {
    public abstract virtual void AddInitAction(Action action, int priority);
    public abstract virtual void AddAsyncInitAction(Func`1<Task> asyncAction, int priority);
    public abstract virtual void AddAsyncInitAction(Func`2<IProgressIndicator, Task> asyncAction, int priority);
}
public class JetBrains.dotCover.Core.Platform.ComponentContainers.ShellBasedContainer : object {
    [CompilerGeneratedAttribute]
private IComponentContainer <ComponentContainer>k__BackingField;
    public IComponentContainer ComponentContainer { get; }
    public ShellBasedContainer(IComponentContainer container);
    [CompilerGeneratedAttribute]
public IComponentContainer get_ComponentContainer();
    public sealed virtual object GetComponent(Type interfaceType);
    public sealed virtual object TryGetComponent(Type interfaceType);
    public sealed virtual TInterface GetComponent();
    public sealed virtual TInterface TryGetComponent();
    public sealed virtual IReadOnlyCollection`1<object> GetComponents(Type interfaceType);
    public sealed virtual IReadOnlyCollection`1<TInterface> GetComponents();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.Core.Platform.ComponentContainers.ShellContainerWrapper : ShellBasedContainer {
    public ShellContainerWrapper(IComponentContainer shellContainer);
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.Core.Platform.ComponentContainers.ZoneMarker : object {
}
public class JetBrains.dotCover.Core.Platform.Progress.ThreadSafeProgressIndicator : object {
    [CompilerGeneratedAttribute]
private IProgressIndicator <progress>P;
    private object mySyncObj;
    public string CurrentItemText { get; public set; }
    public bool IsCanceled { get; }
    public string TaskName { get; public set; }
    public ThreadSafeProgressIndicator(IProgressIndicator progress);
    public sealed virtual void Dispose();
    public sealed virtual string get_CurrentItemText();
    public sealed virtual void set_CurrentItemText(string value);
    public sealed virtual bool get_IsCanceled();
    public sealed virtual string get_TaskName();
    public sealed virtual void set_TaskName(string value);
    public sealed virtual void Advance(double units);
    public sealed virtual void Start(int totalWorkUnits);
    public sealed virtual void Stop();
}
public class JetBrains.dotCover.Core.Platform.Resources.DotCoverProductIcons : object {
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotCover.Core.Platform.Zones.IDotCoverFeatureZone {
}
[ZoneDefinitionAttribute]
[ZoneDefinitionProductAttribute]
[ZoneDefinitionConfigurableFeatureAttribute("dotCover", ".NET unit test runner and code coverage tool", "True")]
[ZoneLicenseAttribute("2580547157951247273676517266823712873503005138864249708837")]
public interface JetBrains.dotCover.Core.Platform.Zones.IDotCoverProductZone {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
