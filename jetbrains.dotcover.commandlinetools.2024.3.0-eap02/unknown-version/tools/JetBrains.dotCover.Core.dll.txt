public static class JetBrains.dotCover.Core.BuildScript.DotCoverConstants : object {
    public static string ProductTechnicalName;
    public static string ProductPresentableName;
    public static string ProductDetails;
    public static DateTime ProductBirthDate;
    public static string ProductUrl;
    public static string ProductTwitterUrl;
    public static string ProductHelpUrl;
    public static string PurchaseUrl;
    public static string EvaluationUrl;
    public static string SnapshotFileExtension;
    public static string SnapshotFileDescription;
    public static string SnapshotSettingsFileExtension;
    public static string PreferredProductHelpUrlArgumentValue;
    public static string StandaloneRunnerExecutablePrefix;
    public static Version ProductVersion;
    public static JetSemanticVersion ProductSemanticVersion;
    public static int ProductVersionForLicenseCheck;
    private static DotCoverConstants();
}
public enum JetBrains.dotCover.Core.CommentFilters.DotCoverCommentKind : Enum {
    public int value__;
    public static DotCoverCommentKind Disable;
    public static DotCoverCommentKind DisableThisLine;
    public static DotCoverCommentKind DisableNextLine;
    public static DotCoverCommentKind Enable;
}
public static class JetBrains.dotCover.Core.CommentFilters.DotCoverCommentsDetector : object {
    private static string DotCoverCommentStart;
    private static string DisableCommentText;
    private static string EnableCommentText;
    private static string ThisCommentText;
    private static string NextCommentText;
    private static string LineCommentText;
    private static Char[] ourWhiteSpaceChars;
    private static DotCoverCommentsDetector();
    public static bool IsDotCoverComment(string commentText, bool isSingleLine, Nullable`1& commentKind);
}
public static class JetBrains.dotCover.Core.CommentFilters.DotCoverMetadataEncoder : object {
    public static string EncodeExcludedStatements(IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>> excludedStatementRangesByMethodToken);
    public static IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>> DecodeExcludedStatements(string encodedBlob, ushort formatVersion);
    private static int GetExcludedStatementsBlobSize(IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>> excludedStatementRangesByMethodToken);
}
public static class JetBrains.dotCover.Core.CommentFilters.DotCoverMetadataInfo : object {
    public static ushort FormatVersion;
    public static string DotCoverClassName;
    public static string FormatVersionFieldName;
    public static string ExcludedStatementsFieldName;
}
public interface JetBrains.dotCover.Core.ComponentContainers.IReadOnlySimpleContainer {
    [NotNullAttribute]
public abstract virtual object GetComponent(Type interfaceType);
    [CanBeNullAttribute]
public abstract virtual object TryGetComponent(Type interfaceType);
    [NotNullAttribute]
public abstract virtual TInterface GetComponent();
    [CanBeNullAttribute]
public abstract virtual TInterface TryGetComponent();
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<object> GetComponents(Type interfaceType);
    [NotNullAttribute]
public abstract virtual IReadOnlyCollection`1<TInterface> GetComponents();
}
public interface JetBrains.dotCover.Core.ComponentContainers.ISimpleContainer {
    public abstract virtual void AddComponent(object component);
}
public class JetBrains.dotCover.Core.ComponentContainers.SimpleContainer : object {
    [CompilerGeneratedAttribute]
private IReadOnlySimpleContainer <parentContainer>P;
    private IDictionary`2<Type, List`1<object>> myDictionary;
    public SimpleContainer(IReadOnlySimpleContainer parentContainer);
    public sealed virtual void AddComponent(object component);
    private void AddComponent(Type interfaceType, object component);
    public sealed virtual IReadOnlyCollection`1<object> GetComponents(Type interfaceType);
    public sealed virtual object TryGetComponent(Type interfaceType);
    public sealed virtual object GetComponent(Type interfaceType);
    public sealed virtual TInterface GetComponent();
    public sealed virtual TInterface TryGetComponent();
    public sealed virtual IReadOnlyCollection`1<TInterface> GetComponents();
}
public class JetBrains.dotCover.Core.CoverageTree.CoverageNodeKind : object {
    private static IDictionary`2<int, CoverageNodeKindData> ourDataDictionary;
    private static IDictionary`2<int, CoverageNodeKind> ourNodeDictionary;
    public static CoverageNodeKind Root;
    public static CoverageNodeKind SolutionRoot;
    public static CoverageNodeKind SolutionFolder;
    public static CoverageNodeKind Project;
    public static CoverageNodeKind Assembly;
    public static CoverageNodeKind Namespace;
    public static CoverageNodeKind Class;
    public static CoverageNodeKind Interface;
    public static CoverageNodeKind Record;
    public static CoverageNodeKind Method;
    public static CoverageNodeKind LocalFunction;
    public static CoverageNodeKind Property;
    public static CoverageNodeKind AutoProperty;
    public static CoverageNodeKind Event;
    public static CoverageNodeKind Indexer;
    public static CoverageNodeKind Constructor;
    public static CoverageNodeKind AnonymousMethod;
    public static CoverageNodeKind OwnCoverage;
    public static CoverageNodeKind ExtensionMethod;
    public static CoverageNodeKind InternalCompiledMethod;
    public static CoverageNodeKind PropertyGetter;
    public static CoverageNodeKind PropertySetter;
    public static CoverageNodeKind PropertyInitOnlySetter;
    public static CoverageNodeKind EventAdder;
    public static CoverageNodeKind EventRemover;
    public static CoverageNodeKind EventRaiser;
    public static CoverageNodeKind UnresolvedStateMachineMethod;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public byte Priority { get; }
    public bool IsAssembly { get; }
    public bool IsType { get; }
    public bool IsTypeMember { get; }
    public bool IsFunction { get; }
    private CoverageNodeKind(int id);
    private static CoverageNodeKind();
    [NotNullAttribute]
[ItemNotNullAttribute]
public static IEnumerable`1<string> CollectAllNames();
    [CanBeNullAttribute]
public static CoverageNodeKind GetNodeKindById(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    protected static CoverageNodeKind CreateCoverageNodeKind(string name, byte priority, bool isAssembly, bool isType, bool isTypeMember, bool isFunction);
    public byte get_Priority();
    public bool get_IsAssembly();
    public bool get_IsType();
    public bool get_IsTypeMember();
    public bool get_IsFunction();
    public sealed virtual bool Equals(CoverageNodeKind other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(CoverageNodeKind left, CoverageNodeKind right);
    public static bool op_Inequality(CoverageNodeKind left, CoverageNodeKind right);
    private static int GetCoverageNodeKindIdByName(string name);
}
[FlagsAttribute]
[DataContractAttribute]
public enum JetBrains.dotCover.Core.CoverageTree.CoverageNodeModifier : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CoverageNodeModifier None;
    [EnumMemberAttribute]
public static CoverageNodeModifier WriteAccess;
    [EnumMemberAttribute]
public static CoverageNodeModifier Static;
    [EnumMemberAttribute]
public static CoverageNodeModifier Private;
    [EnumMemberAttribute]
public static CoverageNodeModifier Protected;
    [EnumMemberAttribute]
public static CoverageNodeModifier Internal;
    [EnumMemberAttribute]
public static CoverageNodeModifier ProtectedInternal;
    [EnumMemberAttribute]
public static CoverageNodeModifier Public;
}
public static class JetBrains.dotCover.Core.DotCoverTempPaths : object {
    private static FileSystemPath ourBasePath;
    private static DotCoverTempPaths();
    private static FileSystemPath EnsureFolderExists(string name);
    private static FileSystemPath CreateTemporaryFile(Lifetime lifetime, FileSystemPath parent, string extensionWithDot, string prefix);
    public static FileSystemPath CreateTemporarySourceFile(Lifetime lifetime);
    public static FileSystemPath CreateTemporarySnapshotFile(Lifetime lifetime, string extensionWithDot, string prefix);
}
public class JetBrains.dotCover.Core.ProfilerConfigurator.AttributeFilter : object {
    [CompilerGeneratedAttribute]
private string <ClassMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public string ClassMask { get; }
    public bool IsEnabled { get; }
    public AttributeFilter(string classMask, bool isEnabled);
    [CompilerGeneratedAttribute]
public string get_ClassMask();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    public sealed virtual bool Equals(AttributeFilter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.dotCover.Core.ProfilerConfigurator.AttributeFilterSet : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<AttributeFilter> <ExcludeFilters>k__BackingField;
    [NotNullAttribute]
public IEnumerable`1<AttributeFilter> ExcludeFilters { get; }
    public AttributeFilterSet(IEnumerable`1<AttributeFilter> excludeFilters);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AttributeFilter> get_ExcludeFilters();
    public sealed virtual bool Equals(AttributeFilterSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.dotCover.Core.ProfilerConfigurator.CoverageFilter : object {
    [CompilerGeneratedAttribute]
private string <ModuleMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleVersionMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionMask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public string ModuleMask { get; public set; }
    public string ModuleVersionMask { get; public set; }
    public string ClassMask { get; public set; }
    public string FunctionMask { get; public set; }
    public bool IsEnabled { get; public set; }
    public CoverageFilter(string moduleMask, string moduleVersionMask, string classMask, string functionMask, bool isEnabled);
    public CoverageFilter(string moduleMask);
    [CompilerGeneratedAttribute]
public string get_ModuleMask();
    [CompilerGeneratedAttribute]
public void set_ModuleMask(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleVersionMask();
    [CompilerGeneratedAttribute]
public void set_ModuleVersionMask(string value);
    [CompilerGeneratedAttribute]
public string get_ClassMask();
    [CompilerGeneratedAttribute]
public void set_ClassMask(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionMask();
    [CompilerGeneratedAttribute]
public void set_FunctionMask(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    public sealed virtual bool Equals(CoverageFilter other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.dotCover.Core.ProfilerConfigurator.CoverageFilterSet : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<CoverageFilter> <IncludeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CoverageFilter> <ExcludeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CoverageFilter> <AdditionalIncludeFilters>k__BackingField;
    public IEnumerable`1<CoverageFilter> IncludeFilters { get; }
    public IEnumerable`1<CoverageFilter> ExcludeFilters { get; }
    public IEnumerable`1<CoverageFilter> AdditionalIncludeFilters { get; }
    public CoverageFilterSet(IEnumerable`1<CoverageFilter> includeFilters, IEnumerable`1<CoverageFilter> excludeFilters, IEnumerable`1<CoverageFilter> additionalIncludeFilters);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CoverageFilter> get_IncludeFilters();
    [CompilerGeneratedAttribute]
public IEnumerable`1<CoverageFilter> get_ExcludeFilters();
    [CompilerGeneratedAttribute]
public IEnumerable`1<CoverageFilter> get_AdditionalIncludeFilters();
    public sealed virtual bool Equals(CoverageFilterSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface JetBrains.dotCover.Core.ProfilerConfigurator.ICoverageConfiguration {
    public bool RequiresExplicitConfiguration { get; }
    public abstract virtual ICoverageConfiguration Clone();
    public abstract virtual void SetFilters(CoverageFilterSet filters);
    public abstract virtual void SetAttributeFilters(AttributeFilterSet filters);
    public abstract virtual void SetStandaloneArgument(string executable, string arguments, string workingDirectory, bool createNoWindow, ProcessFilterSet processFilters, ProfilerClrEngine clrEngine);
    public abstract virtual void SetMonoArgument(string executable, string arguments, string workingDirectory, bool createNoWindow, ProcessFilterSet processFilters);
    public abstract virtual void SetMetroArgument(string packageFullName);
    public abstract virtual void SetEverythingArgument(ProcessFilterSet processFilters);
    public abstract virtual void SetWindowsServiceArgument(string serviceName, string arguments, bool startDependentServices);
    public abstract virtual void SetIisArgument();
    public abstract virtual void SetUnityArgument(string pathToUnity, string arguments, ProcessFilterSet processFilters);
    public abstract virtual void SetSymbolSearchPaths(IEnumerable`1<string> paths);
    public abstract virtual void SetSymbolSearchPolicy(bool allowOriginalPathAccess, bool allowRegistryAccess, bool allowSymbolServerAccess);
    public abstract virtual void SetTempPath(string tempPath);
    public abstract virtual void SetControlKindSettings(ProfilerControlKind controlKind, string remoteEndPoint);
    public abstract virtual void SetCyclomaticComplexityGathering(bool gatherCyclomaticComplexity);
    public abstract virtual void SetMethodRegionsGathering(bool gatherMethodRegions);
    public abstract virtual void SetCoreLogPreferences(ProfilerCoreLogPreferences coreLogPreferences);
    public abstract virtual void SetFinishProfilingAutomaticallyTimeout(Nullable`1<int> timeout);
    public abstract virtual void SetPdbServerLogPreferences(ProfilerPdbServerLogPreferences pdbServerLogPreferences);
    public abstract virtual void SetStartImmediately(bool newValue);
    public abstract virtual void SetUseNativeImages(bool useNgen);
    public abstract virtual void SetAdditionalEnvironmentVariables(IDictionary`2<string, string> additionalEnvironmentVariables);
    public abstract virtual void SetChainProfiler(ProfilerChainCoreInfo chainCoreInfo);
    public abstract virtual void SetDebugAllowed(bool debugAllowed);
    public abstract virtual void SetIsUnity(bool isUnity);
    public abstract virtual void SetForceTcpOnWindows(bool force);
    public abstract virtual bool get_RequiresExplicitConfiguration();
}
public class JetBrains.dotCover.Core.ProfilerConfigurator.ProcessFilterSet : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <IncludeFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ExcludeFilters>k__BackingField;
    public IEnumerable`1<string> IncludeFilters { get; }
    public IEnumerable`1<string> ExcludeFilters { get; }
    public ProcessFilterSet(IEnumerable`1<string> includeFilters, IEnumerable`1<string> excludeFilters);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_IncludeFilters();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ExcludeFilters();
}
public class JetBrains.dotCover.Core.ProfilerConfigurator.ProfilerChainCoreInfo : object {
    [CompilerGeneratedAttribute]
private string <Path32>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathArm32>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathArm64>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Path32 { get; public set; }
    public string Path64 { get; public set; }
    public string PathArm32 { get; public set; }
    public string PathArm64 { get; public set; }
    public ProfilerChainCoreInfo(string Path32, string Path64, string PathArm32, string PathArm64);
    [CompilerGeneratedAttribute]
protected ProfilerChainCoreInfo(ProfilerChainCoreInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Path32();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path32(string value);
    [CompilerGeneratedAttribute]
public string get_Path64();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path64(string value);
    [CompilerGeneratedAttribute]
public string get_PathArm32();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PathArm32(string value);
    [CompilerGeneratedAttribute]
public string get_PathArm64();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PathArm64(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ProfilerChainCoreInfo left, ProfilerChainCoreInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ProfilerChainCoreInfo left, ProfilerChainCoreInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ProfilerChainCoreInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ProfilerChainCoreInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Path32, String& Path64, String& PathArm32, String& PathArm64);
}
[FlagsAttribute]
public enum JetBrains.dotCover.Core.ProfilerConfigurator.ProfilerClrEngine : Enum {
    public byte value__;
    public static ProfilerClrEngine None;
    public static ProfilerClrEngine Clr;
    public static ProfilerClrEngine CoreClr;
    public static ProfilerClrEngine Mono;
    public static ProfilerClrEngine MonoVm;
    public static ProfilerClrEngine All;
}
public enum JetBrains.dotCover.Core.ProfilerConfigurator.ProfilerControlKind : Enum {
    public int value__;
    public static ProfilerControlKind Manual;
    public static ProfilerControlKind Api;
    public static ProfilerControlKind ApiFirst;
    public static ProfilerControlKind RemoteApi;
}
public enum JetBrains.dotCover.Core.ProfilerConfigurator.ProfilerCoreLogPreferences : Enum {
    public int value__;
    public static ProfilerCoreLogPreferences None;
    public static ProfilerCoreLogPreferences Minimal;
    public static ProfilerCoreLogPreferences Detailed;
}
public enum JetBrains.dotCover.Core.ProfilerConfigurator.ProfilerPdbServerLogPreferences : Enum {
    public int value__;
    public static ProfilerPdbServerLogPreferences None;
    public static ProfilerPdbServerLogPreferences Detailed;
}
public class JetBrains.dotCover.Core.UnitTesting.DotCoverTestId : object {
    public static char Separator;
    [CompilerGeneratedAttribute]
private string <TestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    public string TestId { get; }
    public string ProjectId { get; }
    public string TargetFrameworkId { get; }
    public string ProviderId { get; }
    public DotCoverTestId(string testId, string projectId, string targetFrameworkId, string providerId);
    [CompilerGeneratedAttribute]
public string get_TestId();
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkId();
    [CompilerGeneratedAttribute]
public string get_ProviderId();
    public sealed virtual bool Equals(DotCoverTestId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string AsString();
    public virtual string ToString();
    public static bool TryParse(string persistentId, DotCoverTestId& testId);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Core.Util.EnumerableExtensions : object {
    [ExtensionAttribute]
public static int GetAggregatedHashCode(IEnumerable`1<T> enumerable);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
