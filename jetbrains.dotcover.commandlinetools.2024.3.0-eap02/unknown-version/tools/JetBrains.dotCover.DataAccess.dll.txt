internal static class JetBrains.dotCover.DataAccess.BlobReaders.BlobInt64Reader : object {
    public static long Read(IBlob blob, int offset, byte sizeOfValue);
}
internal static class JetBrains.dotCover.DataAccess.BlobReaders.BlobPackedIntegerReader : object {
    public static int Read(IBlob blob, int offset, Byte& packedSize);
}
internal static class JetBrains.dotCover.DataAccess.BlobReaders.BlobUInt32Reader : object {
    public static UInt32 Read(IBlob blob, int offset, byte sizeOfValue);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.BitmaskStatementDetails : ValueType {
    private byte myFirstBitmask;
    [CanBeNullAttribute]
private Byte[] myTailBitmasks;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; }
    public int CoveredCount { get; }
    public int BitmasksCount { get; }
    public BitmaskStatementDetails(int count);
    public BitmaskStatementDetails(byte data, int count);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    public sealed virtual int get_CoveredCount();
    public sealed virtual bool IsCovered(int statement);
    public sealed virtual ulong GetCounter(int statement);
    internal void SetCovered(int statement);
    internal void AppendDetails(BitmaskStatementDetails details);
    public sealed virtual void AppendDetails(T details);
    public sealed virtual void AppendBitmask(byte bitmask, int bitmaskIndex);
    public sealed virtual int get_BitmasksCount();
    internal byte GetBitmask(int index);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static int <get_CoveredCount>g__CountSetBits|8_0(byte bitmask);
}
[IsReadOnlyAttribute]
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.CounterStatementDetails : ValueType {
    private UInt64[] myData;
    public int Count { get; }
    public int CoveredCount { get; }
    public CounterStatementDetails(UInt64[] data);
    public sealed virtual int get_Count();
    public sealed virtual int get_CoveredCount();
    public sealed virtual bool IsCovered(int statement);
    public sealed virtual ulong GetCounter(int statement);
    internal void IncCounter(int statement);
    internal void DecCounter(int statement);
    public sealed virtual void AppendDetails(T details);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.FunctionCoverageSection : object {
    private SnapshotStorageSection myStorageSection;
    private IDataProviderOnBlob myDataProviderOnBlob;
    public FunctionCoverageSection(SnapshotStorageSection storageSection, IDataProviderOnBlob dataProviderOnBlob);
    public sealed virtual IFunctionCoverageIterator LoadAll(bool lazyLoad);
    public sealed virtual Nullable`1<int> TryGetEntriesCount();
    public sealed virtual void ForEachMetadataId(T args, Action`2<MetadataId, T> visitor);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.FunctionCoverageSectionMerger : object {
    private ISectionCollectionWriter myRegularGroupSectionWriter;
    private ISectionCollectionWriter myTotalGroupSectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public FunctionCoverageSectionMerger(ISectionCollectionWriter regularGroupSectionWriter, ISectionCollectionWriter totalGroupSectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual IGroupedSectionMergerData CreateData(bool isTotal);
    public sealed virtual void AppendData(IGroupedSectionMergerData acceptorData, IRawSectionCollection contributionGroup, IMergeContext context, Nullable`1<int> contributionGroupSnapshotIndex);
    public sealed virtual void AppendData(IGroupedSectionMergerData acceptorData, IGroupedSectionMergerData contributionData, IMergeContext context);
    public sealed virtual void FlushData(IGroupedSectionMergerData data, IMergeContext context, IStorageSectionWriter writer);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.FunctionCoverageSectionReader0000 : SectionReaderBase`1<FunctionCoverageSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual FunctionCoverageSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.FunctionCoverageSectionReader0001 : SectionReaderBase`1<FunctionCoverageSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual FunctionCoverageSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.FunctionCoverageSectionsWriter : object {
    private ISectionWriter mySectionWriter;
    public FunctionCoverageSectionsWriter(ushort sectionType);
    public sealed virtual void WriteKnownSections(IEnumerable`1<ISection> sections, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.FunctionCoverageSectionWriter : SectionWriterBase`1<IFunctionCoverageSection> {
    private ushort myType;
    public FunctionCoverageSectionWriter(ushort type);
    protected virtual void WriteSection(IFunctionCoverageSection section, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.FunctionCoverageSnapshotDataDescriptor : GroupedSnapshotDataDescriptorBase {
    public static ushort FunctionCoverageSectionType;
    public static ushort TotalFunctionCoverageSectionType;
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.IBitmaskStatementDetails {
    public int BitmasksCount { get; }
    public abstract virtual int get_BitmasksCount();
    public abstract virtual void AppendBitmask(byte bitmask, int bitmaskIndex);
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.ILoadableStatementCoverageBitmasksSection {
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.CoverageSnapshotExtensions : object {
    [ExtensionAttribute]
public static IStatementCoverageIndexSection GetTotalGroupIndexSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
public static IStatementCoverageDetailsSection GetTotalGroupDetailsSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
public static IStatementCoverageIndexSection GetIndexSection(ISnapshotSectionCollection collection);
    [ExtensionAttribute]
public static IStatementCoverageDetailsSection GetDetailsSection(ISnapshotSectionCollection collection);
}
public interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IFunctionCoverageIterator {
    public abstract virtual Nullable`1<int> TryGetEntriesCount();
    public abstract virtual void ForEachMetadataId(T args, Action`2<MetadataId, T> visitor);
}
public interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IFunctionCoverageSection {
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.ILoadableFunctionCoverageSection {
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.ILoadableStatementCoverageIndexSection {
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IStatementCoverageDetailsProvider {
    [CanBeNullAttribute]
public IStatementDetails Item { get; }
    public abstract virtual IStatementDetails get_Item(SectionOffset`1<IStatementCoverageDetailsSection> offset);
    public abstract virtual void GetAndAppendTo(SectionOffset`1<IStatementCoverageDetailsSection> offset, IStatementDetails baseDetails);
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IStatementCoverageDetailsProvider`1 {
    public abstract virtual TDetails GetTypedDetails(SectionOffset`1<IStatementCoverageDetailsSection> offset);
}
public interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IStatementCoverageDetailsSection {
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IStatementCoverageDetailsSection`1 {
}
public interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IStatementCoverageIndexIterator {
    public abstract virtual Nullable`1<int> TryGetEntriesCount();
    public abstract virtual void ForEachMetadataId(T args, Action`2<MetadataId, T> simpleVisitor);
    public abstract virtual void ForEachEntry(Nullable`1<SectionIndex`1<IMetadataSection>> metadataIndex, T& args, Visitor`1<T> visitor);
}
public interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IStatementCoverageIndexSection {
}
public interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.IStatementDetails {
    public int Count { get; }
    public int CoveredCount { get; }
    public abstract virtual int get_Count();
    public abstract virtual int get_CoveredCount();
    public abstract virtual bool IsCovered(int statement);
    public abstract virtual ulong GetCounter(int statement);
    public abstract virtual void AppendDetails(T details);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.Interface.StatementCoverageIndexSectionExtensions : object {
    [ExtensionAttribute]
public static void ForEachEntry(IStatementCoverageIndexIterator section, Nullable`1<SectionIndex`1<IMetadataSection>> metadataIndex, T args, Visitor`1<T> visitor);
    [CompilerGeneratedAttribute]
internal static void <ForEachEntry>g__VisitorWithRefArgs|0_0(MetadataId metadataId, int coveredStatementCount, bool outdated, SectionOffset`1<IStatementCoverageDetailsSection> detailsOffset, ValueTuple`2& a);
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.IStatementCoverageBitmasksProvider {
    public abstract virtual int GetStatementCount(SectionOffset`1<IStatementCoverageDetailsSection> offset);
    public abstract virtual byte GetBitmask(SectionOffset`1<IStatementCoverageDetailsSection> offset, int maskIndex);
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.IStatementCoverageBitmasksSection {
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.IStatementCoverageCountersSection {
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.IWritableStatementCoverageBitmasksSection {
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.IWritableStatementCoverageCountersSection {
}
internal interface JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.IWritableStatementCoverageDetailsSection`1 {
    public abstract virtual void WriteAll(Func`3<TDetails, BinaryWriter, long> writeEntryFunc, BinaryWriter writer, long startOffset);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.MockFunctionCoverageSection : object {
    private HashSet`1<MetadataId> myMetadataIds;
    public void Add(MetadataId metadataId);
    public sealed virtual Nullable`1<int> TryGetEntriesCount();
    public sealed virtual void ForEachMetadataId(T args, Action`2<MetadataId, T> visitor);
    public sealed virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.MockStatementCoverageBitmasksSection : object {
    private IReadOnlyDictionary`2<SectionOffset`1<IStatementCoverageDetailsSection>, BitmaskStatementDetails> myStatementDetails;
    public IStatementDetails Item { get; }
    public MockStatementCoverageBitmasksSection(IReadOnlyDictionary`2<SectionOffset`1<IStatementCoverageDetailsSection>, BitmaskStatementDetails> statementDetails);
    public sealed virtual BitmaskStatementDetails GetTypedDetails(SectionOffset`1<IStatementCoverageDetailsSection> offset);
    public sealed virtual IStatementDetails get_Item(SectionOffset`1<IStatementCoverageDetailsSection> offset);
    public sealed virtual void GetAndAppendTo(SectionOffset`1<IStatementCoverageDetailsSection> offset, IStatementDetails baseDetails);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.MockStatementCoverageIndexSection : object {
    private Dictionary`2<MetadataId, IndexEntry> myDictionary;
    public void AddEntry(MetadataId metadataId, bool coverageInfoOutdated, int coveredStatementsCount, SectionOffset`1<IStatementCoverageDetailsSection> rawDataOffset);
    public sealed virtual Nullable`1<int> TryGetEntriesCount();
    public sealed virtual void ForEachEntry(Nullable`1<SectionIndex`1<IMetadataSection>> metadataIndex, T& args, Visitor`1<T> visitor);
    public sealed virtual void ForEachMetadataId(T args, Action`2<MetadataId, T> simpleVisitor);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageBitmasksSection : StatementCoverageDetailsSection`1<BitmaskStatementDetails> {
    private SnapshotStorageSection myStorageSection;
    private IDataProviderOnBlob myDataProviderOnBlob;
    public StatementCoverageBitmasksSection(SnapshotStorageSection storageSection, Func`2<SnapshotStorageSection, IDataProviderOnStorage<BitmaskStatementDetails>> dataProviderOnStorageFactory, IDataProviderOnBlob dataProviderOnBlob);
    public sealed virtual IStatementCoverageBitmasksProvider LoadAll(bool lazyLoad);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageBitmasksSectionReader0000 : SectionReaderBase`1<StatementCoverageBitmasksSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementCoverageBitmasksSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageBitmasksSectionReader0001 : SectionReaderBase`1<StatementCoverageBitmasksSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementCoverageBitmasksSection ReadSection(SnapshotStorageSection storageSection);
    private static IDataProviderOnStorage<BitmaskStatementDetails> DataProviderOnStorageFactory(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageBitmasksSectionWriter : SectionWriterBase`1<IWritableStatementCoverageBitmasksSection> {
    private ushort mySectionType;
    public StatementCoverageBitmasksSectionWriter(ushort sectionType);
    protected virtual void WriteSection(IWritableStatementCoverageBitmasksSection section, IStorageSectionWriter storageSectionWriter);
    private static long WriteEntry(BitmaskStatementDetails details, BinaryWriter writer);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageCountersSection : StatementCoverageDetailsSection`1<CounterStatementDetails> {
    public StatementCoverageCountersSection(SnapshotStorageSection storageSection, Func`2<SnapshotStorageSection, IDataProviderOnStorage<CounterStatementDetails>> dataProviderOnStorageFactory);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageCountersSectionReader0000 : SectionReaderBase`1<StatementCoverageCountersSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementCoverageCountersSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageCountersSectionWriter : SectionWriterBase`1<IWritableStatementCoverageCountersSection> {
    private ushort mySectionType;
    public StatementCoverageCountersSectionWriter(ushort sectionType);
    protected virtual void WriteSection(IWritableStatementCoverageCountersSection section, IStorageSectionWriter storageSectionWriter);
    private static long WriteEntry(CounterStatementDetails data, BinaryWriter writer);
}
[DefaultMemberAttribute("Item")]
internal abstract class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageDetailsSection`1 : object {
    protected SnapshotStorageSection StorageSection;
    private LocalLazy`2<IDataProviderOnStorage<TDetails>, SnapshotStorageSection> myDataProviderOnStorage;
    public IStatementDetails Item { get; }
    protected StatementCoverageDetailsSection`1(SnapshotStorageSection storageSection, Func`2<SnapshotStorageSection, IDataProviderOnStorage<TDetails>> dataProviderOnStorageFactory);
    public sealed virtual TDetails GetTypedDetails(SectionOffset`1<IStatementCoverageDetailsSection> offset);
    public sealed virtual IStatementDetails get_Item(SectionOffset`1<IStatementCoverageDetailsSection> offset);
    public sealed virtual void GetAndAppendTo(SectionOffset`1<IStatementCoverageDetailsSection> offset, IStatementDetails baseDetails);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageIndexAndDetailsSectionMerger : object {
    private ISectionCollectionWriter myRegularGroupSectionWriter;
    private ISectionCollectionWriter myTotalGroupSectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public StatementCoverageIndexAndDetailsSectionMerger(ISectionCollectionWriter regularGroupSectionWriter, ISectionCollectionWriter totalGroupSectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual IGroupedSectionMergerData CreateData(bool isTotal);
    public sealed virtual void AppendData(IGroupedSectionMergerData acceptorData, IRawSectionCollection contributionGroup, IMergeContext context, Nullable`1<int> contributionGroupSnapshotIndex);
    public sealed virtual void AppendData(IGroupedSectionMergerData acceptorData, IGroupedSectionMergerData contributionData, IMergeContext context);
    public sealed virtual void FlushData(IGroupedSectionMergerData data, IMergeContext context, IStorageSectionWriter writer);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageIndexAndDetailsSectionsWriter : object {
    private ISectionWriter myIndexSectionWriter;
    private ISectionWriter myBitmasksSectionWriter;
    public StatementCoverageIndexAndDetailsSectionsWriter(ushort indexSectionType, ushort bitmasksSectionType);
    public sealed virtual void WriteKnownSections(IEnumerable`1<ISection> sections, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageIndexSection : object {
    private SnapshotStorageSection myStorageSection;
    private IDataProviderOnBlob myDataProviderOnBlob;
    public StatementCoverageIndexSection(SnapshotStorageSection storageSection, IDataProviderOnBlob dataProviderOnBlob);
    public sealed virtual IStatementCoverageIndexIterator LoadAll(bool lazyLoad);
    public sealed virtual Nullable`1<int> TryGetEntriesCount();
    public sealed virtual void ForEachEntry(Nullable`1<SectionIndex`1<IMetadataSection>> metadataIndex, T& args, Visitor`1<T> visitor);
    public sealed virtual void ForEachMetadataId(T args, Action`2<MetadataId, T> simpleVisitor);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageIndexSectionReader0000 : SectionReaderBase`1<StatementCoverageIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementCoverageIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageIndexSectionReader0001 : SectionReaderBase`1<StatementCoverageIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementCoverageIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageIndexSectionWriter : SectionWriterBase`1<IStatementCoverageIndexSection> {
    private ushort myType;
    public StatementCoverageIndexSectionWriter(ushort type);
    protected virtual void WriteSection(IStatementCoverageIndexSection section, IStorageSectionWriter storageSectionWriter);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementCoverageSnapshotDataDescriptor : GroupedSnapshotDataDescriptorBase {
    public static ushort StatementCoverageIndexSectionType;
    public static ushort StatementCoverageCountersSectionType;
    public static ushort StatementCoverageBitmasksSectionType;
    public static ushort TotalStatementCoverageIndexSectionType;
    public static ushort TotalStatementCoverageCountersSectionType;
    public static ushort TotalStatementCoverageBitmasksSectionType;
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.DataAccess.CoverageAnalysis.Dal.StatementDetailsExtensions : object {
    [ExtensionAttribute]
public static BitmaskStatementDetails AsBitmaskDetails(IStatementDetails details);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ChangesDetectors.AttributesChangesDetector : object {
    public sealed virtual bool MethodChanged(ISnapshotSectionCollection oldModuleStorage, ILowLevelMetadata oldMetadata, MetadataToken oldToken, ISnapshotSectionCollection newModuleStorage, ILowLevelMetadata newMetadata, MetadataToken newToken);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ChangesDetectors.MethodBodyChangesDetector : object {
    public sealed virtual bool MethodChanged(ISnapshotSectionCollection oldModuleStorage, ILowLevelMetadata oldMetadata, MetadataToken oldToken, ISnapshotSectionCollection newModuleStorage, ILowLevelMetadata newMetadata, MetadataToken newToken);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ChangesDetectors.VirtualMethodsChangesDetector : object {
    public sealed virtual bool MethodChanged(ISnapshotSectionCollection oldModuleStorage, ILowLevelMetadata oldMetadata, MetadataToken oldToken, ISnapshotSectionCollection newModuleStorage, ILowLevelMetadata newMetadata, MetadataToken newToken);
}
[ThreadSafeAttribute]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeCoverageSnapshot : object {
    private ILogger myLogger;
    private Lifetime myLifetime;
    private ICumulativeSnapshotDescriptor mySnapshotDescriptor;
    private ICumulativeSnapshotServices mySnapshotServices;
    private IModifiableCumulativeSnapshotModulesIndexSection myModulesIndexSection;
    private IModifiableCumulativeSnapshotElementsIndexSection myElementsIndexSection;
    private JetFastSemiReenterableRWLock myRwLock;
    private ISnapshotSectionCollection myStandaloneSections;
    private ISnapshotSectionCollection myTotalGroup;
    private IDictionary`2<string, ISnapshotSectionCollection> mySessionTotalGroups;
    private IDictionary`2<int, ISnapshotSectionCollection> myElementGroups;
    private ObservableModulesCollection myModulesWithAvailableStorages;
    private ObservableModulesCollection myModulesWithAvailableAggregatedStorages;
    [CompilerGeneratedAttribute]
private ISignal`1<CumulativeSnapshotChangedEventArgs> <SnapshotChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IStorageDescriptor <StorageDescriptor>k__BackingField;
    public ISignal`1<CumulativeSnapshotChangedEventArgs> SnapshotChanged { get; }
    public ISnapshotSectionCollection StandaloneSections { get; }
    public int GroupsNumber { get; }
    public ISnapshotSectionCollection TotalGroup { get; }
    public IStorageDescriptor StorageDescriptor { get; }
    public CumulativeCoverageSnapshot(Lifetime lifetime, FileSystemPath indexFilePath, bool createIfNotExists, ICumulativeSnapshotDescriptor snapshotDescriptor, ICumulativeSnapshotServicesFactory snapshotServicesFactory);
    [AsyncStateMachineAttribute("JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeCoverageSnapshot/<AddData>d__14")]
public sealed virtual Task`1<bool> AddData(IStorageDescriptor[] rawSnapshots, string sessionId, IReadOnlyDictionary`2<string, String[]> groupNameToElementIdsMap, bool mergeModulesInsideRawSnapshots, bool ignoreTargetFrameworksWhenMatchingModules, IProgressIndicator progress);
    [AsyncStateMachineAttribute("JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeCoverageSnapshot/<AddData>d__15")]
public sealed virtual Task`1<bool> AddData(Pair`2[] assembliesAndPdbFiles, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, bool ignoreTargetFrameworksWhenMatchingModules, IProgressIndicator progress);
    public sealed virtual Task ApplyFilters(PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, IProgressIndicator progress);
    public sealed virtual Task RemoveElements(string sessionId, IReadOnlyCollection`1<string> elementIds, IProgressIndicator progress);
    public sealed virtual Task RemoveSession(string sessionId, IProgressIndicator progress);
    public sealed virtual Task RemoveInvalidSessions(IReadOnlySet`1<string> validSessionIds, IProgressIndicator progress);
    public sealed virtual Task Clear(IProgressIndicator progress);
    public sealed virtual Task`1<bool> CopyElementsData(string toSessionId, string fromSessionId, IReadOnlyCollection`1<string> fromElements, IProgressIndicator progress);
    private void OnSnapshotUpdateFinished(SnapshotUpdatedEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<CumulativeSnapshotChangedEventArgs> get_SnapshotChanged();
    public sealed virtual ISnapshotSectionCollection get_StandaloneSections();
    public sealed virtual int get_GroupsNumber();
    public sealed virtual bool TryGetElementGroup(CumulativeSnapshotElementKey elementKey, ISnapshotSectionCollection& group);
    public sealed virtual bool TryGetElementKeyByGroupIndex(int groupIndex, CumulativeSnapshotElementKey& elementKey);
    public sealed virtual bool TryGetGroup(int groupIndex, ISnapshotSectionCollection& group);
    private bool TryGetOrCreateGroupByElementIndex(int elementIndex, ISnapshotSectionCollection& group);
    public sealed virtual bool TryGetSessionTotalGroup(string sessionId, ISnapshotSectionCollection& group);
    public sealed virtual ISnapshotSectionCollection get_TotalGroup();
    [CompilerGeneratedAttribute]
public sealed virtual IStorageDescriptor get_StorageDescriptor();
    private ObservableModulesCollection CreateCollectionOfModulesWithAvailableStorages(Lifetime lifetime);
    private ObservableModulesCollection CreateCollectionOfModulesWithAvailableAggregatedStorages(Lifetime lifetime);
    private bool ModuleStorageIsAvailable(int moduleIndex);
    [CompilerGeneratedAttribute]
internal static SectionIndex`1<IMetadataSection> <OnSnapshotUpdateFinished>g__ToMetadataIndex|22_0(int moduleIndex);
    [CompilerGeneratedAttribute]
private Guid <get_StandaloneSections>b__27_0(int index);
    [CompilerGeneratedAttribute]
private ModuleMatchingData <get_StandaloneSections>b__27_1(Guid mvid);
    [CompilerGeneratedAttribute]
private IRawSectionCollection <get_StandaloneSections>b__27_2(Lifetime lt, int mi);
    [CompilerGeneratedAttribute]
private IRawSectionCollection <get_TotalGroup>g__TryGetModuleCoverageData|36_0(Lifetime lt, int moduleIndex);
}
[ShellComponentAttribute("0")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeCoverageSnapshotManager : object {
    private ILogger myLogger;
    private ICumulativeSnapshotDescriptor myCumulativeSnapshotDescriptor;
    private ICumulativeSnapshotServicesFactory myCumulativeSnapshotServicesFactory;
    private IEnumerable`1<IStandaloneSnapshotDataDescriptor> myStandaloneSnapshotDataDescriptors;
    private IEnumerable`1<IGroupedSnapshotDataDescriptor> myGroupedSnapshotDataDescriptors;
    public CumulativeCoverageSnapshotManager(ILogger logger, ICumulativeSnapshotDescriptor cumulativeSnapshotDescriptor, ICumulativeSnapshotServicesFactory cumulativeSnapshotServicesFactory, IEnumerable`1<IStandaloneSnapshotDataDescriptor> standaloneSnapshotDataDescriptors, IEnumerable`1<IGroupedSnapshotDataDescriptor> groupedSnapshotDataDescriptors);
    public sealed virtual ICumulativeCoverageSnapshot OpenOrCreate(FileSystemPath indexFilePath, Lifetime lifetime);
    public sealed virtual void SaveAs(ICumulativeCoverageSnapshot snapshot, FileSystemPath targetFilePath, IProgressIndicator progress);
    public sealed virtual void Delete(FileSystemPath indexFilePath);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotDescriptor : object {
    [CompilerGeneratedAttribute]
private ICumulativeSnapshotIndexDataDescriptor <IndexDataDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private ICumulativeSnapshotModuleDataDescriptor[] <ModuleDataDescriptors>k__BackingField;
    [CompilerGeneratedAttribute]
private ICumulativeSnapshotModuleCoverageDataDescriptor <ModuleCoverageDataDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private ICumulativeSnapshotModuleAggregatedDataDescriptor <ModuleAggregatedDataDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICumulativeSnapshotStandaloneSectionsGetter> <StandaloneSectionsGetters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICumulativeSnapshotGroupSectionsGetter> <GroupSectionsGetters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICumulativeSnapshotTotalGroupSectionsGetter> <TotalGroupSectionsGetters>k__BackingField;
    public ICumulativeSnapshotIndexDataDescriptor IndexDataDescriptor { get; }
    public ICumulativeSnapshotModuleDataDescriptor[] ModuleDataDescriptors { get; }
    public ICumulativeSnapshotModuleCoverageDataDescriptor ModuleCoverageDataDescriptor { get; }
    public ICumulativeSnapshotModuleAggregatedDataDescriptor ModuleAggregatedDataDescriptor { get; }
    public IEnumerable`1<ICumulativeSnapshotStandaloneSectionsGetter> StandaloneSectionsGetters { get; }
    public IEnumerable`1<ICumulativeSnapshotGroupSectionsGetter> GroupSectionsGetters { get; }
    public IEnumerable`1<ICumulativeSnapshotTotalGroupSectionsGetter> TotalGroupSectionsGetters { get; }
    public CumulativeSnapshotDescriptor(ICumulativeSnapshotIndexDataDescriptor indexDataDescriptor, IEnumerable`1<ICumulativeSnapshotModuleDataDescriptor> moduleDataDescriptors, ICumulativeSnapshotModuleCoverageDataDescriptor moduleCoverageDataDescriptor, ICumulativeSnapshotModuleAggregatedDataDescriptor moduleAggregatedDataDescriptor, IEnumerable`1<ICumulativeSnapshotStandaloneSectionsGetter> rawStandaloneSectionsGetters, IEnumerable`1<ICumulativeSnapshotGroupSectionsGetter> rawGroupSectionsGetters, IEnumerable`1<ICumulativeSnapshotTotalGroupSectionsGetter> rawTotalGroupSectionsGetters);
    [CompilerGeneratedAttribute]
public sealed virtual ICumulativeSnapshotIndexDataDescriptor get_IndexDataDescriptor();
    [CompilerGeneratedAttribute]
public sealed virtual ICumulativeSnapshotModuleDataDescriptor[] get_ModuleDataDescriptors();
    [CompilerGeneratedAttribute]
public sealed virtual ICumulativeSnapshotModuleCoverageDataDescriptor get_ModuleCoverageDataDescriptor();
    [CompilerGeneratedAttribute]
public sealed virtual ICumulativeSnapshotModuleAggregatedDataDescriptor get_ModuleAggregatedDataDescriptor();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ICumulativeSnapshotStandaloneSectionsGetter> get_StandaloneSectionsGetters();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ICumulativeSnapshotGroupSectionsGetter> get_GroupSectionsGetters();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ICumulativeSnapshotTotalGroupSectionsGetter> get_TotalGroupSectionsGetters();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotElementsDb : object {
    public static string DbFileName;
    internal static int DataFileSizeIncreasingStepInBytes;
    private static int ElementDataHeaderLength;
    private Lifetime myLifetime;
    private IThreading myThreading;
    private ILogger myLogger;
    private SpinWaitLockRef mySpinWaitLock;
    private IFreeFileRangesManager myFreeFileRangesManager;
    private IDictionary`2<int, ElementInfo> myElements;
    private FileStream myDataFileStream;
    private SequentialLifetimes myMemoryMappedDataFileLifetimes;
    private MemoryMappedFileInfo myMemoryMappedDataFileInfo;
    private Task myCurrentWriteTask;
    public CumulativeSnapshotElementsDb(Lifetime lifetime, FileSystemPath snapshotFolderPath, IThreading threading, ILogger logger);
    public sealed virtual Task AddElementIfNotEmpty(int elementIndex, Action`1<IStorageSectionWriter> writeSections);
    public sealed virtual Task RemoveElement(int elementIndex);
    public sealed virtual IReadOnlyList`1<SnapshotStorageSection> ReadElement(int elementIndex, Lifetime lifetime);
    private void CreateNewMemoryMappedDataFile(long capacity);
    private void InitializeElementsInfo();
    private bool WriteElementData(Stream stream, int elementIndex, Action`1<IStorageSectionWriter> writeSections, Int32& indexTableLength);
    private static long GetElementRangeOffset(ElementInfo elementInfo);
    private static int GetElementRangeLength(ElementInfo elementInfo);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotElementStoragesBuilder : object {
    private ICumulativeSnapshotDescriptor mySnapshotDescriptor;
    private ICumulativeSnapshotElementStoragesReader myStoragesReader;
    private ICumulativeSnapshotElementsDb myElementsDb;
    private IThreading myThreading;
    private ILogger myLogger;
    public CumulativeSnapshotElementStoragesBuilder(ICumulativeSnapshotDescriptor snapshotDescriptor, ICumulativeSnapshotElementStoragesReader storagesReader, ICumulativeSnapshotElementsDb elementsDb, IThreading threading, ILogger logger);
    public sealed virtual Task`1<ElementStorageBuildResult> BuildStorageByRawSnapshots(IReadOnlyList`1<SnapshotCoverageDataAddress> rawCoverageDataAddresses, Func`2<Guid, ISnapshotSectionCollection> tryGetModuleData, IReadOnlyDictionary`2<Guid, MergedModuleInfo> mergedModulesInfo, int elementIndex);
    public sealed virtual Task`1<ElementStorageUpdateResult> UpdateMetadataInStorage(int oldElementIndex, IReadOnlyList`1<int> coveredModuleIndices, IReadOnlyDictionary`2<int, IReadOnlyDictionary`2<MetadataToken, UpdatedMethodInfo>> updatedMethodsByOldModuleIndex, int newElementIndex);
    public sealed virtual Task RemoveStorage(int elementIndex);
    public sealed virtual Task`1<ElementStorageCopyResult> CopyStorage(int fromElementIndex, IReadOnlyList`1<int> coveredModuleIndices, int toElementIndex);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotElementStoragesReader : object {
    private ICumulativeSnapshotElementsDb myElementsDb;
    private ILogger myLogger;
    private ICumulativeSnapshotStorageDataDescriptor[] myStorageDataDescriptors;
    private LifetimedCache`2<int, IReadOnlyList`1<RawSectionCollection>> mySectionCollectionGroups;
    public CumulativeSnapshotElementStoragesReader(ICumulativeSnapshotDescriptor snapshotDescriptor, ICumulativeSnapshotElementsDb elementsDb, ILogger logger);
    public sealed virtual IReadOnlyList`1<IRawSectionCollection> TryReadStorage(Lifetime lifetime, int elementIndex);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotModuleStoragePathsBuilder : object {
    private string myIndexFileNameWithoutExtension;
    public CumulativeSnapshotModuleStoragePathsBuilder(string indexFileNameWithoutExtension);
    public sealed virtual RelativePath GetStoragesFolderPath(int moduleIndex);
    public sealed virtual string GetDataStorageFileName();
    public sealed virtual string GetAggregatedStorageFileName(string sessionId);
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotModuleStoragePathsBuilderExtensions : object {
    private static string MovedAsideFilesExtension;
    [ExtensionAttribute]
public static RelativePath GetDataStorageFilePath(ICumulativeSnapshotModuleStoragePathsBuilder builder, int moduleIndex);
    [ExtensionAttribute]
public static RelativePath GetAggregatedStorageFilePath(ICumulativeSnapshotModuleStoragePathsBuilder builder, int moduleIndex, string sessionId, bool movedAside);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotModuleStoragesBuilder : object {
    private ICumulativeSnapshotDescriptor mySnapshotDescriptor;
    private ICumulativeSnapshotModuleStoragePathsBuilder myPathsBuilder;
    private ICumulativeSnapshotSingleFileStorageAccess myStorageAccess;
    private ICumulativeSnapshotModuleStoragesReader myStoragesReader;
    private ILogger myLogger;
    public CumulativeSnapshotModuleStoragesBuilder(ICumulativeSnapshotDescriptor snapshotDescriptor, ICumulativeSnapshotModuleStoragePathsBuilder pathsBuilder, ICumulativeSnapshotSingleFileStorageAccess storageAccess, ICumulativeSnapshotModuleStoragesReader storagesReader, ILogger logger);
    public sealed virtual void BuildStorageByAssemblyFile(FileSystemPath assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, int moduleIndex);
    public sealed virtual void UpdateFiltersInStorage(int oldModuleIndex, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, int newModuleIndex);
    private void BuildStorage(Action`2<ICumulativeSnapshotModuleDataSectionsBuilder, IStorageSectionWriter> buildAction, int moduleIndex);
    public sealed virtual void BuildAggregatedStorages(IRawSectionCollection moduleData, IReadOnlyList`1<ElementCoverageData> elementsCoverageData, int moduleIndex);
    public sealed virtual void UpdateAggregatedStorages(IRawSectionCollection moduleData, IRawSectionCollection oldTotalAggregatedData, IReadOnlyDictionary`2<string, IRawSectionCollection> oldPerSessionAggregatedData, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToRemove, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToAdd, IReadOnlyList`1<Pair`2<int, int>> updatedElementIndices, int moduleIndex);
    public sealed virtual void RemoveAllStorages(int moduleIndex);
    public sealed virtual void RemoveAggregatedStorage(int moduleIndex, string sessionId, bool movedAside);
    public sealed virtual void MoveAsideAggregatedStorage(int moduleIndex, string sessionId);
    public sealed virtual bool StorageExists(int moduleIndex);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotModuleStoragesReader : object {
    private ICumulativeSnapshotDescriptor mySnapshotDescriptor;
    private ICumulativeSnapshotModuleStoragePathsBuilder myPathsBuilder;
    private ICumulativeSnapshotSingleFileStorageAccess myStorageAccess;
    private ILogger myLogger;
    private LifetimedCache`2<RelativePath, RawSectionCollection> mySectionCollections;
    public CumulativeSnapshotModuleStoragesReader(ICumulativeSnapshotDescriptor snapshotDescriptor, ICumulativeSnapshotModuleStoragePathsBuilder pathsBuilder, ICumulativeSnapshotSingleFileStorageAccess storageAccess, ILogger logger);
    public sealed virtual IRawSectionCollection TryReadDataStorage(Lifetime lifetime, int moduleIndex);
    public sealed virtual IRawSectionCollection TryReadAggregatedStorage(Lifetime lifetime, int moduleIndex, string sessionId, bool movedAside);
    private RawSectionCollection GetOrCreateSectionCollection(Lifetime lifetime, string storageName, RelativePath storageFilePath, UInt32 storageType, IReadOnlyList`1<ICumulativeSnapshotStorageDataDescriptor> dataDescriptors);
    private RawSectionCollection ReadStorage(Lifetime lifetime, string storageName, RelativePath storageFilePath, UInt32 storageType, IReadOnlyList`1<ICumulativeSnapshotStorageDataDescriptor> dataDescriptors);
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotModuleStoragesReaderExtensions : object {
    [ExtensionAttribute]
public static IRawSectionCollection ReadDataStorage(ICumulativeSnapshotModuleStoragesReader storagesReader, Lifetime lifetime, int moduleIndex);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotServicesFactory : object {
    private IEnumerable`1<ICumulativeSnapshotMethodChangesDetector> myChangesDetectors;
    private ICoverageSnapshotManager myCoverageSnapshotManager;
    private ILowLevelMetadataProvider myLowLevelMetadataProvider;
    private IDotCoverCommentsInfoReader myDotCoverCommentsInfoReader;
    private IThreading myThreading;
    public CumulativeSnapshotServicesFactory(IEnumerable`1<ICumulativeSnapshotMethodChangesDetector> changesDetectors, ICoverageSnapshotManager coverageSnapshotManager, ILowLevelMetadataProvider lowLevelMetadataProvider, IDotCoverCommentsInfoReader dotCoverCommentsInfoReader, IThreading threading);
    public sealed virtual ICumulativeSnapshotServices CreateServices(Lifetime lifetime, FileSystemPath snapshotIndexFile, ICumulativeSnapshotDescriptor snapshotDescriptor, IModifiableCumulativeSnapshotModulesIndexSection modifiableModulesIndex, IModifiableCumulativeSnapshotElementsIndexSection modifiableElementsIndex, JetFastSemiReenterableRWLock rwLock, ILogger logger);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotSingleFileStorageAccess : object {
    private FileSystemPath mySnapshotFolderPath;
    public CumulativeSnapshotSingleFileStorageAccess(FileSystemPath snapshotFolderPath);
    public sealed virtual bool StorageExists(RelativePath storageFilePath);
    public sealed virtual void RemoveStorage(RelativePath storageFilePath);
    public sealed virtual void RemoveStoragesFolder(RelativePath folderPath);
    public sealed virtual void MoveStorage(RelativePath sourceStorageFilePath, RelativePath targetStorageFilePath);
    public sealed virtual IReadOnlyList`1<SnapshotStorageSection> ReadStorageSections(Lifetime lifetime, RelativePath storageFilePath, UInt32 storageType);
    public sealed virtual IStorageSectionWriter CreateStorageSectionWriter(Lifetime lifetime, RelativePath storageFilePath, UInt32 storageType);
}
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotStorageDataComposer : object {
    private static ILogger ourLogger;
    private static CumulativeSnapshotStorageDataComposer();
    public static RawSectionCollection ComposeSingle(Lifetime lifetime, IReadOnlyList`1<SnapshotStorageSection> storageSections, IReadOnlyList`1<ICumulativeSnapshotStorageDataDescriptor> dataDescriptors);
    public static IReadOnlyList`1<RawSectionCollection> ComposeGroup(Lifetime lifetime, IReadOnlyList`1<SnapshotStorageSection> storageSections, IReadOnlyList`1<ICumulativeSnapshotStorageDataDescriptor> dataDescriptors);
    private static IReadOnlyList`1<RawSectionCollection> ComposeImpl(Lifetime lifetime, IReadOnlyList`1<SnapshotStorageSection> storageSections, IReadOnlyList`1<ICumulativeSnapshotStorageDataDescriptor> dataDescriptors, Func`3<ushort, RawSectionCollection, bool> needToStartNewStorage, Func`2<Lifetime, RawSectionCollection> createCollection);
    private static void CheckSpecification(RawSectionCollection sectionCollection, IReadOnlyList`1<ICumulativeSnapshotStorageDataDescriptor> dataDescriptors);
}
internal abstract class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotStorageDataDescriptorBase : object {
    protected SectionCollectionSpecification Specification;
    protected Dictionary`2<ushort, ISectionReader[]> SectionReaders;
    private ISectionCollectionSpecification JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotStorageDataDescriptor.Specification { get; }
    private IReadOnlyDictionary`2<ushort, ISectionReader[]> JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotStorageDataDescriptor.SectionReaders { get; }
    private sealed virtual override ISectionCollectionSpecification JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotStorageDataDescriptor.get_Specification();
    private sealed virtual override IReadOnlyDictionary`2<ushort, ISectionReader[]> JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotStorageDataDescriptor.get_SectionReaders();
}
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.CumulativeSnapshotStorageTypes : object {
    public static UInt32 Index;
    public static UInt32 Module;
    public static UInt32 ModuleTotal;
    public static UInt32 ModuleReverseCoverage;
    public static UInt32 ModuleAggregated;
    public static UInt32 Element;
}
[IsReadOnlyAttribute]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ElementCoverageData : ValueType {
    [CompilerGeneratedAttribute]
private int <ElementIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawSectionCollection <Sections>k__BackingField;
    public int ElementIndex { get; public set; }
    public string SessionId { get; public set; }
    public IRawSectionCollection Sections { get; public set; }
    public ElementCoverageData(int ElementIndex, string SessionId, IRawSectionCollection Sections);
    [CompilerGeneratedAttribute]
public int get_ElementIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementIndex(int value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SessionId(string value);
    [CompilerGeneratedAttribute]
public IRawSectionCollection get_Sections();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Sections(IRawSectionCollection value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ElementCoverageData left, ElementCoverageData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ElementCoverageData left, ElementCoverageData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ElementCoverageData other);
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& ElementIndex, String& SessionId, IRawSectionCollection& Sections);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ElementStorageBuildResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Guid> <CoveredMvids>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IReadOnlyList`1<Guid> CoveredMvids { get; public set; }
    public ElementStorageBuildResult(IReadOnlyList`1<Guid> CoveredMvids);
    [CompilerGeneratedAttribute]
protected ElementStorageBuildResult(ElementStorageBuildResult original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Guid> get_CoveredMvids();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CoveredMvids(IReadOnlyList`1<Guid> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ElementStorageBuildResult left, ElementStorageBuildResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ElementStorageBuildResult left, ElementStorageBuildResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ElementStorageBuildResult other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ElementStorageBuildResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlyList`1& CoveredMvids);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ElementStorageCopyResult : object {
    [CompilerGeneratedAttribute]
private bool <StorageCopied>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool StorageCopied { get; public set; }
    public ElementStorageCopyResult(bool StorageCopied);
    [CompilerGeneratedAttribute]
protected ElementStorageCopyResult(ElementStorageCopyResult original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_StorageCopied();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StorageCopied(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ElementStorageCopyResult left, ElementStorageCopyResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ElementStorageCopyResult left, ElementStorageCopyResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ElementStorageCopyResult other);
    [CompilerGeneratedAttribute]
public virtual ElementStorageCopyResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& StorageCopied);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ElementStorageUpdateResult : object {
    [CompilerGeneratedAttribute]
private bool <StorageUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ElementIsOutdated>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool StorageUpdated { get; public set; }
    public bool ElementIsOutdated { get; public set; }
    public ElementStorageUpdateResult(bool StorageUpdated, bool ElementIsOutdated);
    [CompilerGeneratedAttribute]
protected ElementStorageUpdateResult(ElementStorageUpdateResult original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_StorageUpdated();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StorageUpdated(bool value);
    [CompilerGeneratedAttribute]
public bool get_ElementIsOutdated();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementIsOutdated(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ElementStorageUpdateResult left, ElementStorageUpdateResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ElementStorageUpdateResult left, ElementStorageUpdateResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ElementStorageUpdateResult other);
    [CompilerGeneratedAttribute]
public virtual ElementStorageUpdateResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& StorageUpdated, Boolean& ElementIsOutdated);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.FormatUpgraders.AggregatedDataStoragesUpgrader : object {
    private static string OldTotalStorageName;
    private static string OldReverseStorageName;
    private static string NewAggregatedStorageName;
    private IThreading myThreading;
    private ILogger myLogger;
    public int Order { get; }
    public AggregatedDataStoragesUpgrader(IThreading threading, ILoggerProvider loggerProvider);
    public sealed virtual int get_Order();
    [AsyncStateMachineAttribute("JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.FormatUpgraders.AggregatedDataStoragesUpgrader/<UpgradeIfNeededAsync>d__8")]
public sealed virtual Task UpgradeIfNeededAsync(FileSystemPath indexFilePath);
    [CompilerGeneratedAttribute]
internal static void <UpgradeIfNeededAsync>g__CopySection|8_1(SnapshotStorageSection section, IStorageSectionWriter storageSectionWriter);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.FormatUpgraders.BitmasksTotalCoverageStoragesUpgrader : object {
    private static string OldTotalStorageName;
    private static string OldSessionTotalStorageNameMask;
    private ICumulativeSnapshotServicesFactory mySnapshotServicesFactory;
    private ICumulativeSnapshotDescriptor myCumulativeSnapshotDescriptor;
    private IThreading myThreading;
    private ILogger myLogger;
    public int Order { get; }
    public BitmasksTotalCoverageStoragesUpgrader(ICumulativeSnapshotServicesFactory snapshotServicesFactory, ICumulativeSnapshotDescriptor cumulativeSnapshotDescriptor, IThreading threading, ILoggerProvider loggerProvider);
    public sealed virtual int get_Order();
    [AsyncStateMachineAttribute("JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.FormatUpgraders.BitmasksTotalCoverageStoragesUpgrader/<UpgradeIfNeededAsync>d__9")]
public sealed virtual Task UpgradeIfNeededAsync(FileSystemPath indexFilePath);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.FormatUpgraders.MultiFileElementsStorageToElementsDbUpgrader : object {
    private IThreading myThreading;
    private ILogger myLogger;
    public int Order { get; }
    public MultiFileElementsStorageToElementsDbUpgrader(IThreading threading, ILoggerProvider loggerProvider);
    public sealed virtual int get_Order();
    [AsyncStateMachineAttribute("JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.FormatUpgraders.MultiFileElementsStorageToElementsDbUpgrader/<UpgradeIfNeededAsync>d__5")]
public sealed virtual Task UpgradeIfNeededAsync(FileSystemPath indexFilePath);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.FreeFileRangesManager : object {
    private ILogger myLogger;
    private List`1<FreeRangeInfo> myFreeRangesSortedByOffset;
    private List`1<int> myFreeRangesSortedBySize;
    public FreeFileRangesManager(IEnumerable`1<Pair`2<long, int>> initiallyConsumedRanges, ILogger logger);
    public sealed virtual long ConsumeRangeAndGetOffset(int size, Int64& residualFreeRangeSize);
    public sealed virtual void ReleaseRange(long offset, int size, Int64& freeRangeOffset, Int64& freeRangeSize);
    internal IEnumerable`1<Pair`2<long, long>> GetFreeRanges();
    private BinarySearchResult`1<int> FindFreeRangeIndexBySize(long size);
    private BinarySearchResult`1<FreeRangeInfo> FindFreeRangeByOffset(long offset);
    [ExcludeFromCodeCoverageAttribute]
private string DumpCurrentFreeRanges(string title);
    [ExcludeFromCodeCoverageAttribute]
private static string GetRangeString(long offset, long size);
    [CompilerGeneratedAttribute]
private int <.ctor>b__3_0(int i, int j);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotDescriptor {
    public ICumulativeSnapshotIndexDataDescriptor IndexDataDescriptor { get; }
    public ICumulativeSnapshotModuleDataDescriptor[] ModuleDataDescriptors { get; }
    public ICumulativeSnapshotModuleCoverageDataDescriptor ModuleCoverageDataDescriptor { get; }
    public ICumulativeSnapshotModuleAggregatedDataDescriptor ModuleAggregatedDataDescriptor { get; }
    public IEnumerable`1<ICumulativeSnapshotStandaloneSectionsGetter> StandaloneSectionsGetters { get; }
    public IEnumerable`1<ICumulativeSnapshotGroupSectionsGetter> GroupSectionsGetters { get; }
    public IEnumerable`1<ICumulativeSnapshotTotalGroupSectionsGetter> TotalGroupSectionsGetters { get; }
    public abstract virtual ICumulativeSnapshotIndexDataDescriptor get_IndexDataDescriptor();
    public abstract virtual ICumulativeSnapshotModuleDataDescriptor[] get_ModuleDataDescriptors();
    public abstract virtual ICumulativeSnapshotModuleCoverageDataDescriptor get_ModuleCoverageDataDescriptor();
    public abstract virtual ICumulativeSnapshotModuleAggregatedDataDescriptor get_ModuleAggregatedDataDescriptor();
    public abstract virtual IEnumerable`1<ICumulativeSnapshotStandaloneSectionsGetter> get_StandaloneSectionsGetters();
    public abstract virtual IEnumerable`1<ICumulativeSnapshotGroupSectionsGetter> get_GroupSectionsGetters();
    public abstract virtual IEnumerable`1<ICumulativeSnapshotTotalGroupSectionsGetter> get_TotalGroupSectionsGetters();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotElementsDb {
    public abstract virtual Task AddElementIfNotEmpty(int elementIndex, Action`1<IStorageSectionWriter> writeSections);
    public abstract virtual Task RemoveElement(int elementIndex);
    public abstract virtual IReadOnlyList`1<SnapshotStorageSection> ReadElement(int elementIndex, Lifetime lifetime);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotElementsIndexSection {
    [NotNullAttribute]
public IReadOnlyIndexedSet`1<CumulativeSnapshotElementKey> IndexedElementKeys { get; }
    public ISimpleSignal Changed { get; }
    public abstract virtual IReadOnlyIndexedSet`1<CumulativeSnapshotElementKey> get_IndexedElementKeys();
    public abstract virtual bool TryGetElementIndexByGroupIndex(int groupIndex, Int32& elementIndex);
    public abstract virtual int GetGroupIndexByElementIndex(int elementIndex);
    [NotNullAttribute]
public abstract virtual IReadOnlyList`1<int> GetModulesByElement(int elementIndex);
    public abstract virtual IReadOnlyCollection`1<int> GetElementsByModule(int moduleIndex);
    public abstract virtual IEnumerable`1<int> GetOutdatedElements();
    public abstract virtual bool ElementIsOutdated(int elementIndex);
    public abstract virtual ISimpleSignal get_Changed();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotElementStoragesBuilder {
    public abstract virtual Task`1<ElementStorageBuildResult> BuildStorageByRawSnapshots(IReadOnlyList`1<SnapshotCoverageDataAddress> rawCoverageDataAddresses, Func`2<Guid, ISnapshotSectionCollection> tryGetModuleData, IReadOnlyDictionary`2<Guid, MergedModuleInfo> mergedModulesInfo, int elementIndex);
    public abstract virtual Task`1<ElementStorageUpdateResult> UpdateMetadataInStorage(int oldElementIndex, IReadOnlyList`1<int> coveredModuleIndices, IReadOnlyDictionary`2<int, IReadOnlyDictionary`2<MetadataToken, UpdatedMethodInfo>> updatedMethodsByModuleIndex, int newElementIndex);
    public abstract virtual Task RemoveStorage(int elementIndex);
    public abstract virtual Task`1<ElementStorageCopyResult> CopyStorage(int fromElementIndex, IReadOnlyList`1<int> coveredModuleIndices, int toElementIndex);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotElementStoragesReader {
    [CanBeNullAttribute]
public abstract virtual IReadOnlyList`1<IRawSectionCollection> TryReadStorage(Lifetime lifetime, int elementIndex);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotIndexDataDescriptor {
    public ISectionWriter ModulesIndexSectionWriter { get; }
    public ISectionWriter ElementsIndexSectionWriter { get; }
    public abstract virtual ISectionWriter get_ModulesIndexSectionWriter();
    public abstract virtual ISectionWriter get_ElementsIndexSectionWriter();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotIndexReaderWriter {
    public abstract virtual void Read();
    public abstract virtual void Write();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotMethodChangesDetector {
    public abstract virtual bool MethodChanged(ISnapshotSectionCollection oldModuleStorage, ILowLevelMetadata oldMetadata, MetadataToken oldToken, ISnapshotSectionCollection newModuleStorage, ILowLevelMetadata newMetadata, MetadataToken newToken);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModuleAggregatedDataDescriptor {
    public ICumulativeSnapshotModuleAggregatedDataSectionsBuilder SectionsBuilder { get; }
    public abstract virtual ICumulativeSnapshotModuleAggregatedDataSectionsBuilder get_SectionsBuilder();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModuleAggregatedDataSectionsBuilder {
    public abstract virtual void Build(IRawSectionCollection moduleData, IReadOnlyList`1<ElementCoverageData> elementsCoverageData, GetStorageSectionWriter getStorageSectionWriter);
    public abstract virtual void Update(IRawSectionCollection moduleData, IRawSectionCollection oldTotalAggregatedData, IReadOnlyDictionary`2<string, IRawSectionCollection> oldPerSessionAggregatedData, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToRemove, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToAdd, IReadOnlyList`1<Pair`2<int, int>> updatedElementIndices, GetStorageSectionWriter getStorageSectionWriter);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModuleCoverageDataDescriptor {
    public ICumulativeSnapshotModuleCoverageDataSectionsBuilder SectionsBuilder { get; }
    public abstract virtual ICumulativeSnapshotModuleCoverageDataSectionsBuilder get_SectionsBuilder();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModuleCoverageDataSectionsBuilder {
    public abstract virtual void BuildByRawSnapshots(IReadOnlyList`1<SnapshotCoverageDataAddress> rawCoverageDataAddresses, Func`2<Guid, ISnapshotSectionCollection> tryGetModuleData, IReadOnlyDictionary`2<Guid, MergedModuleInfo> mergedModulesInfo, Func`2<Guid, IStorageSectionWriter> getStorageSectionWriter);
    public abstract virtual void BuildWithUpdatedMetadata(ICumulativeSnapshotModuleCoverageIndexIterator`1<CoverageIndexAdditionalData> oldIndex, IStatementCoverageBitmasksProvider oldDetailsProvider, IReadOnlyDictionary`2<MetadataToken, UpdatedMethodInfo> updatedMethodsInfo, IStorageSectionWriter storageSectionWriter);
    public abstract virtual void BuildCopy(IRawSectionCollection coverageData, IStorageSectionWriter storageSectionWriter);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModulesIndexSection {
    public IReadOnlyIndexedSet`1<Guid> IndexedMvids { get; }
    public IReadOnlyDictionary`2<Guid, ModuleMatchingData> ModulesMatchingData { get; }
    public IReadOnlyDictionary`2<Guid, ModuleStatFlags> ModuleFlags { get; }
    public ISignal`1<ModuleAddedEventArgs> ModuleAdded { get; }
    public ISignal`1<ModuleReplacedEventArgs> ModuleReplaced { get; }
    public ISignal`1<ModuleEventArgs> ModuleRemoved { get; }
    public abstract virtual IReadOnlyIndexedSet`1<Guid> get_IndexedMvids();
    public abstract virtual IReadOnlyDictionary`2<Guid, ModuleMatchingData> get_ModulesMatchingData();
    public abstract virtual IReadOnlyDictionary`2<Guid, ModuleStatFlags> get_ModuleFlags();
    public abstract virtual ISignal`1<ModuleAddedEventArgs> get_ModuleAdded();
    public abstract virtual ISignal`1<ModuleReplacedEventArgs> get_ModuleReplaced();
    public abstract virtual ISignal`1<ModuleEventArgs> get_ModuleRemoved();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModuleStoragePathsBuilder {
    public abstract virtual RelativePath GetStoragesFolderPath(int moduleIndex);
    public abstract virtual string GetDataStorageFileName();
    public abstract virtual string GetAggregatedStorageFileName(string sessionId);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModuleStoragesBuilder {
    public abstract virtual void BuildStorageByAssemblyFile(FileSystemPath assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, int moduleIndex);
    public abstract virtual void UpdateFiltersInStorage(int oldModuleIndex, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, int newModuleIndex);
    public abstract virtual void BuildAggregatedStorages(IRawSectionCollection moduleData, IReadOnlyList`1<ElementCoverageData> elementsCoverageData, int moduleIndex);
    public abstract virtual void UpdateAggregatedStorages(IRawSectionCollection moduleData, IRawSectionCollection oldTotalAggregatedData, IReadOnlyDictionary`2<string, IRawSectionCollection> oldPerSessionAggregatedData, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToRemove, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToAdd, IReadOnlyList`1<Pair`2<int, int>> updatedElementIndices, int moduleIndex);
    public abstract virtual void RemoveAllStorages(int moduleIndex);
    public abstract virtual void RemoveAggregatedStorage(int moduleIndex, string sessionId, bool movedAside);
    public abstract virtual void MoveAsideAggregatedStorage(int moduleIndex, string sessionId);
    public abstract virtual bool StorageExists(int moduleIndex);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotModuleStoragesReader {
    public abstract virtual IRawSectionCollection TryReadDataStorage(Lifetime lifetime, int moduleIndex);
    public abstract virtual IRawSectionCollection TryReadAggregatedStorage(Lifetime lifetime, int moduleIndex, string sessionId, bool movedAside);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotServices {
    public ICumulativeSnapshotModuleStoragesReader ModuleStoragesReader { get; }
    public ICumulativeSnapshotModuleStoragesBuilder ModuleStoragesBuilder { get; }
    public ICumulativeSnapshotElementStoragesReader ElementStoragesReader { get; }
    public ICumulativeSnapshotIndexReaderWriter IndexReaderWriter { get; }
    public IAssembliesProcessor AssembliesProcessor { get; }
    public IRawSnapshotsProcessor RawSnapshotsProcessor { get; }
    public ICumulativeSnapshotUpdater SnapshotUpdater { get; }
    public abstract virtual ICumulativeSnapshotModuleStoragesReader get_ModuleStoragesReader();
    public abstract virtual ICumulativeSnapshotModuleStoragesBuilder get_ModuleStoragesBuilder();
    public abstract virtual ICumulativeSnapshotElementStoragesReader get_ElementStoragesReader();
    public abstract virtual ICumulativeSnapshotIndexReaderWriter get_IndexReaderWriter();
    public abstract virtual IAssembliesProcessor get_AssembliesProcessor();
    public abstract virtual IRawSnapshotsProcessor get_RawSnapshotsProcessor();
    public abstract virtual ICumulativeSnapshotUpdater get_SnapshotUpdater();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotServicesFactory {
    public abstract virtual ICumulativeSnapshotServices CreateServices(Lifetime lifetime, FileSystemPath snapshotIndexFile, ICumulativeSnapshotDescriptor snapshotDescriptor, IModifiableCumulativeSnapshotModulesIndexSection modifiableModulesIndex, IModifiableCumulativeSnapshotElementsIndexSection modifiableElementsIndex, JetFastSemiReenterableRWLock rwLock, ILogger logger);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotSingleFileStorageAccess {
    public abstract virtual bool StorageExists(RelativePath storageFilePath);
    public abstract virtual void RemoveStorage(RelativePath storageFilePath);
    public abstract virtual void RemoveStoragesFolder(RelativePath folderPath);
    public abstract virtual void MoveStorage(RelativePath sourceStorageFilePath, RelativePath targetStorageFilePath);
    public abstract virtual IReadOnlyList`1<SnapshotStorageSection> ReadStorageSections(Lifetime lifetime, RelativePath storageFilePath, UInt32 storageType);
    public abstract virtual IStorageSectionWriter CreateStorageSectionWriter(Lifetime lifetime, RelativePath storageFilePath, UInt32 storageType);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ICumulativeSnapshotStorageDataDescriptor {
    public ISectionCollectionSpecification Specification { get; }
    public IReadOnlyDictionary`2<ushort, ISectionReader[]> SectionReaders { get; }
    public abstract virtual ISectionCollectionSpecification get_Specification();
    public abstract virtual IReadOnlyDictionary`2<ushort, ISectionReader[]> get_SectionReaders();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.IFreeFileRangesManager {
    public abstract virtual long ConsumeRangeAndGetOffset(int size, Int64& residualFreeRangeSize);
    public abstract virtual void ReleaseRange(long offset, int size, Int64& freeRangeOffset, Int64& freeRangeSize);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.IModifiableCumulativeSnapshotElementsIndexSection {
    public abstract virtual int GetNextElementIndex();
    public abstract virtual void ReleaseElementIndex(int elementIndex);
    public abstract virtual void AddElement(CumulativeSnapshotElementKey elementKey, int elementIndex, IReadOnlyList`1<int> moduleIndices);
    public abstract virtual void RemoveElement(int elementIndex);
    public abstract virtual void RemoveModule(int elementIndex, int moduleIndex);
    public abstract virtual void ReplaceModule(int elementIndex, int oldModuleIndex, int newModuleIndex);
    public abstract virtual void MarkElementAsOutdated(int elementIndex);
    public abstract virtual void Clear();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.IModifiableCumulativeSnapshotModulesIndexSection {
    public abstract virtual int GetNextModuleIndex();
    public abstract virtual void ReleaseModuleIndex(int moduleIndex);
    public abstract virtual void AddModule(Guid mvid, int moduleIndex, ModuleMatchingData moduleMatchingData, ModuleStatFlags moduleFlags);
    public abstract virtual void ReplaceModule(Guid mvid, int moduleIndex, ModuleMatchingData moduleMatchingData, ModuleStatFlags moduleFlags, int oldModuleIndex);
    public abstract virtual void RemoveModule(int moduleIndex);
    public abstract virtual void Clear();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotElementsIndexSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotElementsIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotElementsIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotElementsIndexSectionReader0001 : SectionReaderBase`1<ICumulativeSnapshotElementsIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotElementsIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotElementsIndexSectionWriter0001 : SectionWriterBase`1<ICumulativeSnapshotElementsIndexSection> {
    private ushort mySectionType;
    public CumulativeSnapshotElementsIndexSectionWriter0001(ushort sectionType);
    protected virtual void WriteSection(ICumulativeSnapshotElementsIndexSection section, IStorageSectionWriter storageSectionWriter);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotIndexDataDescriptor : CumulativeSnapshotStorageDataDescriptorBase {
    public static ushort ModulesIndexSectionType;
    public static ushort ElementsIndexSectionType;
    [CompilerGeneratedAttribute]
private ISectionWriter <ModulesIndexSectionWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private ISectionWriter <ElementsIndexSectionWriter>k__BackingField;
    public ISectionWriter ModulesIndexSectionWriter { get; }
    public ISectionWriter ElementsIndexSectionWriter { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ISectionWriter get_ModulesIndexSectionWriter();
    [CompilerGeneratedAttribute]
public sealed virtual ISectionWriter get_ElementsIndexSectionWriter();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotIndexReaderWriter : object {
    private string myIndexFileName;
    private ICumulativeSnapshotSingleFileStorageAccess myStorageAccess;
    private ICumulativeSnapshotDescriptor mySnapshotDescriptor;
    private IModifiableCumulativeSnapshotModulesIndexSection myModifiableModulesIndex;
    private IModifiableCumulativeSnapshotElementsIndexSection myModifiableElementsIndex;
    private ILogger myLogger;
    private bool myIndexIsModified;
    public CumulativeSnapshotIndexReaderWriter(string indexFileName, Lifetime lifetime, ICumulativeSnapshotSingleFileStorageAccess storageAccess, ICumulativeSnapshotDescriptor snapshotDescriptor, IModifiableCumulativeSnapshotModulesIndexSection modifiableModulesIndex, IModifiableCumulativeSnapshotElementsIndexSection modifiableElementsIndex, ILogger logger);
    public sealed virtual void Read();
    public sealed virtual void Write();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(ModuleAddedEventArgs _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_1(ModuleEventArgs _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_2(ModuleReplacedEventArgs _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_3(bool _);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotModulesIndexSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModulesIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModulesIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotModulesIndexSectionReader0001 : SectionReaderBase`1<ICumulativeSnapshotModulesIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModulesIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.CumulativeSnapshotModulesIndexSectionWriter0001 : SectionWriterBase`1<ICumulativeSnapshotModulesIndexSection> {
    private ushort mySectionType;
    public CumulativeSnapshotModulesIndexSectionWriter0001(ushort sectionType);
    protected virtual void WriteSection(ICumulativeSnapshotModulesIndexSection section, IStorageSectionWriter storageSectionWriter);
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.IndexedSetWithIndicesReserving`1 : object {
    private IDictionary`2<T, int> myValueToIndexMap;
    private IDictionary`2<int, T> myIndexToValueMap;
    private HashSet`1<int> myInsideFreeIndices;
    private int myNextFreeIndex;
    public T Item { get; }
    public int Item { get; }
    public int Count { get; }
    public IEnumerable`1<T> Values { get; }
    public sealed virtual T get_Item(int index);
    public sealed virtual int get_Item(T value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<T, int>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool TryGetValue(int index, T& value);
    public sealed virtual bool TryGetIndex(T value, Int32& index);
    public sealed virtual IEnumerable`1<T> get_Values();
    public int ReserveNextFreeIndex();
    public void ReleaseReservedIndex(int index);
    public void Add(T value, int index);
    public bool Remove(int index, bool releaseIndex);
    public bool Remove(T value, bool releaseIndex);
    public void Clear();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.ModifiableCumulativeSnapshotElementsIndexSection : object {
    private LifetimeDefinition myLifetimeDefinition;
    private IndexedSetWithIndicesReserving`1<CumulativeSnapshotElementKey> myIndexedElementKeys;
    private List`1<int> myOrderedElementIndices;
    private IDictionary`2<int, int> myElementIndexToOrderNumber;
    private IDictionary`2<int, List`1<int>> myElementModules;
    private OneToSetMap`2<int, int> myModuleElements;
    private JetHashSet`1<int> myOutdatedElements;
    [CompilerGeneratedAttribute]
private ISimpleSignal <Changed>k__BackingField;
    public IReadOnlyIndexedSet`1<CumulativeSnapshotElementKey> IndexedElementKeys { get; }
    public ISimpleSignal Changed { get; }
    public sealed virtual IReadOnlyIndexedSet`1<CumulativeSnapshotElementKey> get_IndexedElementKeys();
    public sealed virtual bool TryGetElementIndexByGroupIndex(int groupIndex, Int32& elementIndex);
    public sealed virtual int GetGroupIndexByElementIndex(int elementIndex);
    public sealed virtual IReadOnlyList`1<int> GetModulesByElement(int elementIndex);
    public sealed virtual IReadOnlyCollection`1<int> GetElementsByModule(int moduleIndex);
    public sealed virtual IEnumerable`1<int> GetOutdatedElements();
    public sealed virtual bool ElementIsOutdated(int elementIndex);
    public sealed virtual int GetNextElementIndex();
    public sealed virtual void ReleaseElementIndex(int elementIndex);
    public sealed virtual void AddElement(CumulativeSnapshotElementKey elementKey, int elementIndex, IReadOnlyList`1<int> moduleIndices);
    public sealed virtual void RemoveElement(int elementIndex);
    public sealed virtual void RemoveModule(int elementIndex, int moduleIndex);
    public sealed virtual void ReplaceModule(int elementIndex, int oldModuleIndex, int newModuleIndex);
    public sealed virtual void MarkElementAsOutdated(int elementIndex);
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleSignal get_Changed();
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Index.ModifiableCumulativeSnapshotModulesIndexSection : object {
    private LifetimeDefinition myLifetimeDefinition;
    private IndexedSetWithIndicesReserving`1<Guid> myIndexedMvids;
    private Dictionary`2<Guid, ModuleMatchingData> myModulesMatchingData;
    private Dictionary`2<Guid, ModuleStatFlags> myModuleFlags;
    [CompilerGeneratedAttribute]
private ISignal`1<ModuleAddedEventArgs> <ModuleAdded>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ModuleReplacedEventArgs> <ModuleReplaced>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<ModuleEventArgs> <ModuleRemoved>k__BackingField;
    public IReadOnlyIndexedSet`1<Guid> IndexedMvids { get; }
    public IReadOnlyDictionary`2<Guid, ModuleMatchingData> ModulesMatchingData { get; }
    public IReadOnlyDictionary`2<Guid, ModuleStatFlags> ModuleFlags { get; }
    public ISignal`1<ModuleAddedEventArgs> ModuleAdded { get; }
    public ISignal`1<ModuleReplacedEventArgs> ModuleReplaced { get; }
    public ISignal`1<ModuleEventArgs> ModuleRemoved { get; }
    public sealed virtual IReadOnlyIndexedSet`1<Guid> get_IndexedMvids();
    public sealed virtual IReadOnlyDictionary`2<Guid, ModuleMatchingData> get_ModulesMatchingData();
    public sealed virtual IReadOnlyDictionary`2<Guid, ModuleStatFlags> get_ModuleFlags();
    public sealed virtual int GetNextModuleIndex();
    public sealed virtual void ReleaseModuleIndex(int moduleIndex);
    public sealed virtual void AddModule(Guid mvid, int moduleIndex, ModuleMatchingData moduleMatchingData, ModuleStatFlags moduleFlags);
    public sealed virtual void ReplaceModule(Guid mvid, int moduleIndex, ModuleMatchingData moduleMatchingData, ModuleStatFlags moduleFlags, int oldModuleIndex);
    public sealed virtual void RemoveModule(int moduleIndex);
    public sealed virtual void Clear();
    private void AddModuleSilently(Guid mvid, int moduleIndex, ModuleMatchingData moduleMatchingData, ModuleStatFlags moduleFlags);
    private void RemoveModuleSilently(int moduleIndex);
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ModuleAddedEventArgs> get_ModuleAdded();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ModuleReplacedEventArgs> get_ModuleReplaced();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<ModuleEventArgs> get_ModuleRemoved();
    public sealed virtual void Dispose();
}
public class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.CumulativeSnapshotChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<SectionIndex`1<IMetadataSection>> <RemovedMetadataIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<SectionIndex`1<IMetadataSection>> <AddedMetadataIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<SectionIndex`1<IMetadataSection>, SectionIndex`1<IMetadataSection>> <ReplacedMetadataIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoverageDataChanged>k__BackingField;
    public IReadOnlySet`1<SectionIndex`1<IMetadataSection>> RemovedMetadataIndices { get; }
    public IReadOnlySet`1<SectionIndex`1<IMetadataSection>> AddedMetadataIndices { get; }
    public IReadOnlyDictionary`2<SectionIndex`1<IMetadataSection>, SectionIndex`1<IMetadataSection>> ReplacedMetadataIndices { get; }
    public bool CoverageDataChanged { get; }
    public CumulativeSnapshotChangedEventArgs(IReadOnlySet`1<SectionIndex`1<IMetadataSection>> removedMetadataIndices, IReadOnlySet`1<SectionIndex`1<IMetadataSection>> addedMetadataIndices, IReadOnlyDictionary`2<SectionIndex`1<IMetadataSection>, SectionIndex`1<IMetadataSection>> replacedMetadataIndices, bool coverageDataChanged);
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<SectionIndex`1<IMetadataSection>> get_RemovedMetadataIndices();
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<SectionIndex`1<IMetadataSection>> get_AddedMetadataIndices();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<SectionIndex`1<IMetadataSection>, SectionIndex`1<IMetadataSection>> get_ReplacedMetadataIndices();
    [CompilerGeneratedAttribute]
public bool get_CoverageDataChanged();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.CumulativeSnapshotElementKey : ValueType {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementId>k__BackingField;
    public string SessionId { get; public set; }
    public string ElementId { get; public set; }
    public CumulativeSnapshotElementKey(string SessionId, string ElementId);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_ElementId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementId(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CumulativeSnapshotElementKey left, CumulativeSnapshotElementKey right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CumulativeSnapshotElementKey left, CumulativeSnapshotElementKey right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CumulativeSnapshotElementKey other);
    [CompilerGeneratedAttribute]
public void Deconstruct(String& SessionId, String& ElementId);
}
internal abstract class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.CumulativeSnapshotModuleDataDescriptorBase : CumulativeSnapshotStorageDataDescriptorBase {
    protected List`1<ICumulativeSnapshotModuleDataSectionsBuilder> SectionsBuilders;
    private IEnumerable`1<ICumulativeSnapshotModuleDataSectionsBuilder> JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotModuleDataDescriptor.SectionsBuilders { get; }
    private sealed virtual override IEnumerable`1<ICumulativeSnapshotModuleDataSectionsBuilder> JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotModuleDataDescriptor.get_SectionsBuilders();
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeCoverageSnapshot {
    public ISignal`1<CumulativeSnapshotChangedEventArgs> SnapshotChanged { get; }
    public abstract virtual bool TryGetSessionTotalGroup(string sessionId, ISnapshotSectionCollection& group);
    public abstract virtual bool TryGetElementGroup(CumulativeSnapshotElementKey elementKey, ISnapshotSectionCollection& group);
    public abstract virtual bool TryGetElementKeyByGroupIndex(int groupIndex, CumulativeSnapshotElementKey& elementKey);
    public abstract virtual Task`1<bool> AddData(IStorageDescriptor[] rawSnapshots, string sessionId, IReadOnlyDictionary`2<string, String[]> groupNameToElementIdsMap, bool mergeModulesInsideRawSnapshots, bool ignoreTargetFrameworksWhenMatchingModules, IProgressIndicator progress);
    public abstract virtual Task`1<bool> AddData(Pair`2[] assembliesAndPdbFiles, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, bool ignoreTargetFrameworksWhenMatchingModules, IProgressIndicator progress);
    public abstract virtual Task`1<bool> CopyElementsData(string toSessionId, string fromSessionId, IReadOnlyCollection`1<string> fromElements, IProgressIndicator progress);
    public abstract virtual Task ApplyFilters(PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, IProgressIndicator progress);
    public abstract virtual Task RemoveElements(string sessionId, IReadOnlyCollection`1<string> elementIds, IProgressIndicator progress);
    public abstract virtual Task RemoveSession(string sessionId, IProgressIndicator progress);
    public abstract virtual Task RemoveInvalidSessions(IReadOnlySet`1<string> validSessionIds, IProgressIndicator progress);
    public abstract virtual Task Clear(IProgressIndicator progress);
    public abstract virtual ISignal`1<CumulativeSnapshotChangedEventArgs> get_SnapshotChanged();
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeCoverageSnapshotManager {
    public abstract virtual ICumulativeCoverageSnapshot OpenOrCreate(FileSystemPath indexFilePath, Lifetime lifetime);
    public abstract virtual void SaveAs(ICumulativeCoverageSnapshot snapshot, FileSystemPath targetFilePath, IProgressIndicator progress);
    public abstract virtual void Delete(FileSystemPath indexFilePath);
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotFormatUpgrader {
    public int Order { get; }
    public abstract virtual int get_Order();
    public abstract virtual Task UpgradeIfNeededAsync(FileSystemPath indexFilePath);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotGroupSectionsGetter {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotModuleDataDescriptor {
    public IEnumerable`1<ICumulativeSnapshotModuleDataSectionsBuilder> SectionsBuilders { get; }
    public abstract virtual IEnumerable`1<ICumulativeSnapshotModuleDataSectionsBuilder> get_SectionsBuilders();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotModuleDataSectionsBuilder {
    public abstract virtual void BuildByAssemblyFile(PEFile assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    public abstract virtual void BuildWithUpdatedFilters(IRawSectionCollection moduleData, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotSectionsGetter {
    public abstract virtual IReadOnlyDictionary`2<Type, ISection> GetSections(Lifetime lifetime, IObservableModulesCollection moduleIndices, Func`3<Lifetime, int, IRawSectionCollection> tryGetModuleData, JetFastSemiReenterableRWLock rwLock);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotStandaloneSectionsGetter {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.ICumulativeSnapshotTotalGroupSectionsGetter {
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.IObservableModulesCollection {
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.Sections.ICumulativeSnapshotCoverageDetailsSection {
    public abstract virtual IStatementCoverageDetailsProvider TryLoadModuleDetails(SectionIndex`1<IMetadataSection> metadataIndex);
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.Sections.ICumulativeSnapshotElementStatusSection {
    public abstract virtual IEnumerable`1<CumulativeSnapshotElementKey> GetOutdatedElements();
    public abstract virtual bool TestIsUpToDate(CumulativeSnapshotElementKey elementKey);
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.Sections.ICumulativeSnapshotReverseCoverageSection {
    public abstract virtual IReadOnlyList`1<CumulativeSnapshotElementKey> GetCoveringElements(IReadOnlyCollection`1<MetadataId> methodIds);
    public abstract virtual IReadOnlyList`1<int> GetCoveringGroupIndices(MetadataId methodId);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.SnapshotDataAddress`1 : object {
    [CompilerGeneratedAttribute]
private ICoverageSnapshot <Snapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private TAddress <Address>k__BackingField;
    public ICoverageSnapshot Snapshot { get; }
    public TAddress Address { get; }
    protected SnapshotDataAddress`1(ICoverageSnapshot snapshot, TAddress address);
    [CompilerGeneratedAttribute]
public ICoverageSnapshot get_Snapshot();
    [CompilerGeneratedAttribute]
public TAddress get_Address();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Interface.SnapshotModuleDataAddress : SnapshotDataAddress`1<SectionIndex`1<IMetadataSection>> {
    public SnapshotModuleDataAddress(ICoverageSnapshot snapshot, SectionIndex`1<IMetadataSection> metadataIndex);
}
[DefaultMemberAttribute("Item")]
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.IReadOnlyIndexedSet`1 {
    public T Item { get; }
    public int Item { get; }
    public IEnumerable`1<T> Values { get; }
    public abstract virtual T get_Item(int index);
    public abstract virtual int get_Item(T value);
    public abstract virtual bool TryGetValue(int index, T& value);
    public abstract virtual bool TryGetIndex(T value, Int32& index);
    public abstract virtual IEnumerable`1<T> get_Values();
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.LowLevelMetadataHelper : object {
    [ExtensionAttribute]
public static MetadataToken TryFindMethodInType(ILowLevelMetadata metadata, MetadataToken typeDefToken, Int32[] typeGenericArgumentsHashes, string methodName, int methodSignatureHash, IEqualityComparer`1<MetadataToken> typeTokensEqualityComparer, MetadataToken& actualDeclaringTypeToken);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.MergedModuleInfo : object {
    [CompilerGeneratedAttribute]
private Guid <BaseModuleMvid>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<MetadataToken, MetadataToken> <MergedToBaseTokensMap>k__BackingField;
    public Guid BaseModuleMvid { get; }
    public IReadOnlyDictionary`2<MetadataToken, MetadataToken> MergedToBaseTokensMap { get; }
    public MergedModuleInfo(Guid baseModuleMvid, IReadOnlyDictionary`2<MetadataToken, MetadataToken> mergedToBaseTokensMap);
    [CompilerGeneratedAttribute]
public Guid get_BaseModuleMvid();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<MetadataToken, MetadataToken> get_MergedToBaseTokensMap();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleAddedEventArgs : ModuleEventArgs {
    [CompilerGeneratedAttribute]
private Guid <Mvid>k__BackingField;
    public Guid Mvid { get; }
    public ModuleAddedEventArgs(int moduleIndex, Guid mvid);
    [CompilerGeneratedAttribute]
public Guid get_Mvid();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleAggregatedData.CumulativeSnapshotModuleAggregatedDataDescriptor : CumulativeSnapshotStorageDataDescriptorBase {
    public static ushort TotalCoverageIndexSectionType;
    public static ushort TotalCoverageDetailsSectionType;
    public static ushort ReverseCoverageSectionType;
    [CompilerGeneratedAttribute]
private ICumulativeSnapshotModuleAggregatedDataSectionsBuilder <SectionsBuilder>k__BackingField;
    public ICumulativeSnapshotModuleAggregatedDataSectionsBuilder SectionsBuilder { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ICumulativeSnapshotModuleAggregatedDataSectionsBuilder get_SectionsBuilder();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleAggregatedData.CumulativeSnapshotModuleAggregatedDataSectionsBuilder : object {
    private ushort myCoverageIndexSectionType;
    private ushort myReverseCoverageSectionType;
    private ISectionWriter myCoverageCountersSectionWriter;
    public CumulativeSnapshotModuleAggregatedDataSectionsBuilder(ushort coverageIndexSectionType, ushort coverageDetailsSectionType, ushort reverseCoverageSectionType);
    public sealed virtual void Build(IRawSectionCollection moduleData, IReadOnlyList`1<ElementCoverageData> elementsCoverageData, GetStorageSectionWriter getStorageSectionWriter);
    public sealed virtual void Update(IRawSectionCollection moduleData, IRawSectionCollection oldTotalAggregatedData, IReadOnlyDictionary`2<string, IRawSectionCollection> oldPerSessionAggregatedData, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToRemove, IReadOnlyList`1<ElementCoverageData> elementsCoverageDataToAdd, IReadOnlyList`1<Pair`2<int, int>> updatedElementIndices, GetStorageSectionWriter getStorageSectionWriter);
    private static AggregatedData BuildData(ISnapshotSectionCollection moduleData, IReadOnlyList`1<ElementCoverageData> elementsCoverageData);
    private static AggregatedData UpdateData(IRawSectionCollection moduleData, IRawSectionCollection oldTotalAggregatedData, IReadOnlyDictionary`2<string, IRawSectionCollection> oldPerSessionAggregatedData, IReadOnlyCollection`1<ElementCoverageData> elementsCoverageDataToRemove, IReadOnlyCollection`1<ElementCoverageData> elementsCoverageDataToAdd, IReadOnlyCollection`1<Pair`2<int, int>> updatedElementIndices);
    private static void InitAggregatedData(Dictionary`2<MetadataToken, MethodAggregatedData> aggregatedData, ISnapshotSectionCollection oldAggregatedData);
    private static void ProcessElementCoverageData(IDictionary`2<MetadataToken, MethodAggregatedData> totalAggregatedData, IDictionary`2<MetadataToken, MethodAggregatedData> sessionAggregatedData, int elementIndex, ISnapshotSectionCollection elementCoverageData, ElementAction elementAction);
    private void WriteData(AggregatedData data, ISnapshotSectionCollection moduleData, GetStorageSectionWriter getStorageSectionWriter);
    private void WriteStorageData(Dictionary`2<MetadataToken, MethodAggregatedData> methodsAggregatedData, ISnapshotSectionCollection moduleData, bool writeReverseCoverageSection, IStorageSectionWriter storageSectionWriter);
    private void CopyDataWithFixedElementIndices(IRawSectionCollection oldAggregatedData, IReadOnlyList`1<Pair`2<int, int>> updatedElementIndices, GetStorageSectionWriter getStorageSectionWriter);
    private static void WriteReverseCoverageSectionEntry(BinaryWriter writer, MetadataToken token, ConciseBitArray bitArray);
    private static void DisposeData(AggregatedData data);
}
[IsReadOnlyAttribute]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CoverageIndexAdditionalData : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsOutdated>k__BackingField;
    public bool IsOutdated { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsOutdated();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsOutdated(bool value);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleCoverageDataDescriptor : CumulativeSnapshotStorageDataDescriptorBase {
    public static ushort IndexSectionType;
    public static ushort DetailsSectionType;
    [CompilerGeneratedAttribute]
private ICumulativeSnapshotModuleCoverageDataSectionsBuilder <SectionsBuilder>k__BackingField;
    public ICumulativeSnapshotModuleCoverageDataSectionsBuilder SectionsBuilder { get; }
    public CumulativeSnapshotModuleCoverageDataDescriptor(ILoggerProvider loggerProvider);
    [CompilerGeneratedAttribute]
public sealed virtual ICumulativeSnapshotModuleCoverageDataSectionsBuilder get_SectionsBuilder();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleCoverageDataSectionsBuilder : object {
    private ILogger myLogger;
    private ushort myIndexSectionType;
    private ISectionWriter myCoverageBitmasksSectionWriter;
    public CumulativeSnapshotModuleCoverageDataSectionsBuilder(ushort indexSectionType, ushort detailsSectionType, ILoggerProvider loggerProvider);
    public sealed virtual void BuildByRawSnapshots(IReadOnlyList`1<SnapshotCoverageDataAddress> rawCoverageDataAddresses, Func`2<Guid, ISnapshotSectionCollection> tryGetModuleData, IReadOnlyDictionary`2<Guid, MergedModuleInfo> mergedModulesInfo, Func`2<Guid, IStorageSectionWriter> getStorageSectionWriter);
    public sealed virtual void BuildWithUpdatedMetadata(ICumulativeSnapshotModuleCoverageIndexIterator`1<CoverageIndexAdditionalData> oldIndex, IStatementCoverageBitmasksProvider oldCoverageDetailsProvider, IReadOnlyDictionary`2<MetadataToken, UpdatedMethodInfo> updatedMethodsInfo, IStorageSectionWriter storageSectionWriter);
    public sealed virtual void BuildCopy(IRawSectionCollection coverageData, IStorageSectionWriter storageSectionWriter);
    private static Dictionary`2<MetadataToken, MethodCoverageData> BuildUpdatedData(ICumulativeSnapshotModuleCoverageIndexIterator`1<CoverageIndexAdditionalData> oldCoverageIndex, IStatementCoverageBitmasksProvider oldCoverageDetailsProvider, IReadOnlyDictionary`2<MetadataToken, UpdatedMethodInfo> updatedMethodsInfo);
    private static Dictionary`2<Guid, Dictionary`2<MetadataToken, MethodCoverageData>> BuildDataByRawSnapshots(IReadOnlyList`1<SnapshotCoverageDataAddress> rawCoverageDataAddresses, IReadOnlyDictionary`2<Guid, MergedModuleInfo> mergedModulesInfo);
    private void WriteData(Dictionary`2<MetadataToken, MethodCoverageData> methodsCoverageData, ISnapshotSectionCollection moduleData, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleCoverageIndexSection : CumulativeSnapshotModuleCoverageIndexSectionBase`1<CoverageIndexAdditionalData> {
    public CumulativeSnapshotModuleCoverageIndexSection(SnapshotStorageSection storageSection, IDataProviderOnBlob<CoverageIndexAdditionalData> dataProviderOnBlob);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleCoverageIndexSectionBase`1 : object {
    private SnapshotStorageSection myStorageSection;
    private IDataProviderOnBlob<TAdditionalData> myDataProviderOnBlob;
    public CumulativeSnapshotModuleCoverageIndexSectionBase`1(SnapshotStorageSection storageSection, IDataProviderOnBlob<TAdditionalData> dataProviderOnBlob);
    public sealed virtual ICumulativeSnapshotModuleCoverageIndexIterator`1<TAdditionalData> LoadAll(bool lazyLoad);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleCoverageIndexSectionExtensions : object {
    [ExtensionAttribute]
public static void ForEachEntry(ICumulativeSnapshotModuleCoverageIndexIterator`1<TAdditionalData> section, T args, Visitor`2<T, TAdditionalData> visitor);
    [CompilerGeneratedAttribute]
internal static void <ForEachEntry>g__VisitorWithRefArgs|0_0(MetadataToken methodToken, int coveredStatementCount, TAdditionalData additionalData, SectionOffset`1<IStatementCoverageDetailsSection> detailsOffset, ValueTuple`2& a);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleCoverageIndexSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModuleCoverageIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleCoverageIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleCoverageIndexSectionReader0001 : SectionReaderBase`1<ICumulativeSnapshotModuleCoverageIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleCoverageIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleTotalCoverageIndexSection : CumulativeSnapshotModuleCoverageIndexSectionBase`1<TotalCoverageIndexAdditionalData> {
    public CumulativeSnapshotModuleTotalCoverageIndexSection(SnapshotStorageSection storageSection, IDataProviderOnBlob<TotalCoverageIndexAdditionalData> dataProviderOnBlob);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.CumulativeSnapshotModuleTotalCoverageIndexSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModuleTotalCoverageIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleTotalCoverageIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.ICumulativeSnapshotModuleCoverageIndexIterator`1 {
    public int EntriesCount { get; }
    public abstract virtual int get_EntriesCount();
    public abstract virtual void ForEachEntry(T& args, Visitor`1<TAdditionalData, T> visitor);
    public abstract virtual void ForEachToken(T args, Action`2<MetadataToken, T> visitor);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.ICumulativeSnapshotModuleCoverageIndexSection {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.ICumulativeSnapshotModuleCoverageIndexSectionBase`1 {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.ICumulativeSnapshotModuleTotalCoverageIndexSection {
}
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.NotHiddenCoveredStatementsCalculator : object {
    public static int Calculate(T coverageDetails, FrugalLocalList`1<int> hiddenStatementIndices);
    public static int Calculate(MetadataToken methodToken, T coverageDetails, ICumulativeSnapshotModuleMethodRangeSection methodRangeSection, IStatementDataSection statementDataSection);
}
[IsReadOnlyAttribute]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleCoverageData.TotalCoverageIndexAdditionalData : ValueType {
    [CompilerGeneratedAttribute]
private ulong <OutdatedElementsCount>k__BackingField;
    public ulong OutdatedElementsCount { get; public set; }
    [CompilerGeneratedAttribute]
public ulong get_OutdatedElementsCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OutdatedElementsCount(ulong value);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.CumulativeSnapshotChangesDetectionDataDescriptor : CumulativeSnapshotModuleDataDescriptorBase {
    public static ushort MethodBodyHashesSectionType;
    public static ushort AttributesHashesSectionType;
    public static ushort VirtualMethodsSectionType;
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.CumulativeSnapshotChangesDetectionSectionsBuilder : object {
    private static ushort MethodBodyHashesSectionVersion;
    private static ushort VirtualMethodsSectionVersion;
    private ushort myMethodBodyHashesSectionType;
    private ushort myVirtualMethodsSectionType;
    public CumulativeSnapshotChangesDetectionSectionsBuilder(ushort methodBodyHashesSectionType, ushort virtualMethodsSectionType);
    public sealed virtual void BuildByAssemblyFile(PEFile assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    public sealed virtual void BuildWithUpdatedFilters(IRawSectionCollection moduleData, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    private static bool MethodSupportsChangesDetection(MethodProperties methodProperties);
    private static bool TryGetOverriddenMethodInfo(ILowLevelMetadata metadata, MethodProperties methodProperties, LowLevelMetadataTypesEqualityComparer typeTokensEqualityComparer, Nullable`1& overriddenMethodDef, Nullable`1& overriddenMethodRef);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.CumulativeSnapshotMethodBodyHashesSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotMethodBodyHashesSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotMethodBodyHashesSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.CumulativeSnapshotVirtualMethodsSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotVirtualMethodsSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotVirtualMethodsSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.CumulativeSnapshotVirtualMethodsSectionReader0001 : SectionReaderBase`1<ICumulativeSnapshotVirtualMethodsSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotVirtualMethodsSection ReadSection(SnapshotStorageSection storageSection);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.ICumulativeSnapshotMethodBodyHashesSection {
    public IReadOnlyDictionary`2<MetadataToken, MethodHashData> Hashes { get; }
    public abstract virtual IReadOnlyDictionary`2<MetadataToken, MethodHashData> get_Hashes();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.ICumulativeSnapshotVirtualMethodsSection {
    public IReadOnlyDictionary`2<MetadataToken, OverriddenMethodDefInfo> MethodToOverriddenMethodDef { get; }
    public IReadOnlyDictionary`2<MetadataToken, OverriddenMethodRefInfo> MethodToOverriddenMethodRef { get; }
    public abstract virtual IReadOnlyDictionary`2<MetadataToken, OverriddenMethodDefInfo> get_MethodToOverriddenMethodDef();
    public abstract virtual IReadOnlyDictionary`2<MetadataToken, OverriddenMethodRefInfo> get_MethodToOverriddenMethodRef();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.MethodHashData : ValueType {
    [CompilerGeneratedAttribute]
private long <MethodBodyHash>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InstructionsCount>k__BackingField;
    public long MethodBodyHash { get; }
    public int InstructionsCount { get; }
    public MethodHashData(long methodBodyHash, int instructionsCount);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_MethodBodyHash();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_InstructionsCount();
    public sealed virtual bool Equals(MethodHashData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.OverriddenMethodDefInfo : ValueType {
    [CompilerGeneratedAttribute]
private MetadataToken <MethodToken>k__BackingField;
    public MetadataToken MethodToken { get; }
    public OverriddenMethodDefInfo(MetadataToken methodToken);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MetadataToken get_MethodToken();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.ChangesDetection.OverriddenMethodRefInfo : ValueType {
    [CompilerGeneratedAttribute]
private MetadataToken <TypeRefOrSpecToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MethodSignatureHash>k__BackingField;
    public MetadataToken TypeRefOrSpecToken { get; }
    public string MethodName { get; }
    public int MethodSignatureHash { get; }
    public OverriddenMethodRefInfo(MetadataToken typeRefOrSpecToken, string methodName, int methodSignatureHash);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MetadataToken get_TypeRefOrSpecToken();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_MethodName();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_MethodSignatureHash();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Environment.CumulativeSnapshotModuleEnvironmentDataDescriptor : CumulativeSnapshotModuleDataDescriptorBase {
    public static ushort EnvironmentSectionType;
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Environment.CumulativeSnapshotModuleEnvironmentSectionBuilder : object {
    private static ushort Version;
    private ushort mySectionType;
    public CumulativeSnapshotModuleEnvironmentSectionBuilder(ushort sectionType);
    public sealed virtual void BuildByAssemblyFile(PEFile assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    public sealed virtual void BuildWithUpdatedFilters(IRawSectionCollection moduleData, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    private void WriteSection(PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Environment.CumulativeSnapshotModuleEnvironmentSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModuleEnvironmentSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleEnvironmentSection ReadSection(SnapshotStorageSection storageSection);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Environment.ICumulativeSnapshotModuleEnvironmentSection {
    public PatternFilterInfo[] PatternFilters { get; }
    public AttributeFilterInfo[] AttributeFilters { get; }
    public abstract virtual PatternFilterInfo[] get_PatternFilters();
    public abstract virtual AttributeFilterInfo[] get_AttributeFilters();
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotMetadataDescriptor : CumulativeSnapshotModuleDataDescriptorBase {
    public static ushort MetadataSectionType;
    public static ushort FilteredMethodsSectionType;
    public static ushort FilteredTypesSectionType;
    public static ushort FilteredPropertiesSectionType;
    public static ushort FilteredEventsSectionType;
    public CumulativeSnapshotMetadataDescriptor(ILowLevelMetadataProvider lowLevelMetadataProvider);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleFilteredEventsSection : CumulativeSnapshotModuleFilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleFilteredMetadataSection : object {
    [CompilerGeneratedAttribute]
private JetHashSet`1<MetadataToken> <FilteredTokens>k__BackingField;
    public JetHashSet`1<MetadataToken> FilteredTokens { get; }
    private IReadOnlySet`1<MetadataToken> JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleFilteredMetadataSection.FilteredTokens { get; }
    [CompilerGeneratedAttribute]
public JetHashSet`1<MetadataToken> get_FilteredTokens();
    public sealed virtual void Dispose();
    private sealed virtual override IReadOnlySet`1<MetadataToken> JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleFilteredMetadataSection.get_FilteredTokens();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleFilteredMetadataSectionReader0000`1 : SectionReaderBase`1<TSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual TSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleFilteredMetadataSectionsBuilder : object {
    private ushort myFilteredTypesSectionType;
    private ushort myFilteredMethodsSectionType;
    private ushort myFilteredPropertiesSectionType;
    private ushort myFilteredEventsSectionType;
    private ILowLevelMetadataProvider myLowLevelMetadataProvider;
    public CumulativeSnapshotModuleFilteredMetadataSectionsBuilder(ushort filteredTypesSectionType, ushort filteredMethodsSectionType, ushort filteredPropertiesSectionType, ushort filteredEventsSectionType, ILowLevelMetadataProvider lowLevelMetadataProvider);
    public sealed virtual void BuildByAssemblyFile(PEFile assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    public sealed virtual void BuildWithUpdatedFilters(IRawSectionCollection moduleData, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    private void BuildByLowLevelMetadata(ILowLevelMetadata metadata, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    private static void WriteModuleData(ICollection`1<MetadataToken> filteredTokens, BinaryWriter writer);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleFilteredMethodsSection : CumulativeSnapshotModuleFilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleFilteredPropertiesSection : CumulativeSnapshotModuleFilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleFilteredTypesSection : CumulativeSnapshotModuleFilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleMetadataSectionBuilder : object {
    private static ushort Version;
    private ushort mySectionType;
    public CumulativeSnapshotModuleMetadataSectionBuilder(ushort sectionType);
    public sealed virtual void BuildByAssemblyFile(PEFile assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    public sealed virtual void BuildWithUpdatedFilters(IRawSectionCollection moduleData, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.CumulativeSnapshotModuleMetadataSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModuleMetadataSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleMetadataSection ReadSection(SnapshotStorageSection storageSection);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleFilteredEventsSection {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleFilteredMetadataSection {
    public IReadOnlySet`1<MetadataToken> FilteredTokens { get; }
    public abstract virtual IReadOnlySet`1<MetadataToken> get_FilteredTokens();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleFilteredMethodsSection {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleFilteredPropertiesSection {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleFilteredTypesSection {
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.Metadata.ICumulativeSnapshotModuleMetadataSection {
    public Guid Mvid { get; }
    public abstract virtual Guid get_Mvid();
    public abstract virtual Stream GetMetadataStream();
    public abstract virtual IMetadataAssembly GetMetadataAssembly();
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.MethodDetails.CumulativeSnapshotMethodDetailsDataDescriptor : CumulativeSnapshotModuleDataDescriptorBase {
    public static ushort MethodRangeSectionType;
    public static ushort StatementDataSectionType;
    public static ushort DocumentRangeSectionType;
    public CumulativeSnapshotMethodDetailsDataDescriptor(IDotCoverCommentsInfoReader dotCoverCommentsInfoReader);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.MethodDetails.CumulativeSnapshotMethodDetailsSectionsBuilder : object {
    private static int MethodRangeSectionVersion;
    private ushort myMethodRangeSectionType;
    private ushort myDocumentRangeSectionType;
    private ushort myStatementDataSectionType;
    private IDotCoverCommentsInfoReader myDotCoverCommentsInfoReader;
    public CumulativeSnapshotMethodDetailsSectionsBuilder(ushort methodRangeSectionType, ushort documentRangeSectionType, ushort statementDataSectionType, IDotCoverCommentsInfoReader dotCoverCommentsInfoReader);
    public sealed virtual void BuildByAssemblyFile(PEFile assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    public sealed virtual void BuildWithUpdatedFilters(IRawSectionCollection moduleData, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.MethodDetails.CumulativeSnapshotModuleMethodRangeSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModuleMethodRangeSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleMethodRangeSection ReadSection(SnapshotStorageSection storageSection);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleData.MethodDetails.ICumulativeSnapshotModuleMethodRangeSection {
    public IReadOnlyDictionary`2<MetadataToken, MethodData> Methods { get; }
    public abstract virtual IReadOnlyDictionary`2<MetadataToken, MethodData> get_Methods();
    public abstract virtual IReadOnlyList`1<MetadataToken> GetMethodsInDocument(int documentIndex);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleEventArgs : object {
    [CompilerGeneratedAttribute]
private int <ModuleIndex>k__BackingField;
    public int ModuleIndex { get; }
    public ModuleEventArgs(int moduleIndex);
    [CompilerGeneratedAttribute]
public int get_ModuleIndex();
    public virtual string ToString();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleReplacedEventArgs : ModuleEventArgs {
    [CompilerGeneratedAttribute]
private Guid <Mvid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldModuleIndex>k__BackingField;
    public Guid Mvid { get; }
    public int OldModuleIndex { get; }
    public ModuleReplacedEventArgs(int moduleIndex, Guid mvid, int oldModuleIndex);
    [CompilerGeneratedAttribute]
public Guid get_Mvid();
    [CompilerGeneratedAttribute]
public int get_OldModuleIndex();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleReverseCoverageData.CumulativeSnapshotModuleReverseCoverageSectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModuleReverseCoverageSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleReverseCoverageSection ReadSection(SnapshotStorageSection storageSection);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ModuleReverseCoverageData.ICumulativeSnapshotModuleReverseCoverageSection {
    public IReadOnlyDictionary`2<MetadataToken, ConciseBitArray> BitArrays { get; }
    public abstract virtual IReadOnlyList`1<int> GetCoveringElementIndices(MetadataToken methodToken);
    public abstract virtual IReadOnlyDictionary`2<MetadataToken, ConciseBitArray> get_BitArrays();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.ObservableModulesCollection : object {
    private ViewableCollection`1<int> myViewableCollection;
    private JetHashSet`1<int> myHashSet;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public ObservableModulesCollection(Lifetime lifetime);
    public sealed virtual bool Contains(int moduleIndex);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void View(Lifetime lifetime, Action`2<Lifetime, int> viewer);
    public void AddRange(IEnumerable`1<int> moduleIndices);
    public void RemoveRange(IEnumerable`1<int> moduleIndices);
    public void Clear();
    public void LogChanges(Lifetime lifetime, ILogger logger, string prefix);
    private void RaiseCollectionChanged(NotifyCollectionChangedEventArgs args);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.Coverage.CumulativeSnapshotGroupSectionsGetter : CumulativeSnapshotGroupSectionsGetterBase`4<ILoadableStatementCoverageBitmasksSection, BitmaskStatementDetails, ICumulativeSnapshotModuleCoverageIndexSection, CoverageIndexAdditionalData> {
    public CumulativeSnapshotGroupSectionsGetter(ILoggerProvider loggerProvider);
    protected virtual bool CoverageInfoOutdated(CoverageIndexAdditionalData data);
}
internal abstract class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.Coverage.CumulativeSnapshotGroupSectionsGetterBase`4 : object {
    private ILogger myLogger;
    private ThreadLocal`1<int> myLastAccessedModuleIndex;
    protected CumulativeSnapshotGroupSectionsGetterBase`4(ILoggerProvider loggerProvider);
    public sealed virtual IReadOnlyDictionary`2<Type, ISection> GetSections(Lifetime lifetime, IObservableModulesCollection moduleIndices, Func`3<Lifetime, int, IRawSectionCollection> tryGetModuleData, JetFastSemiReenterableRWLock rwLock);
    protected abstract virtual bool CoverageInfoOutdated(TAdditionalIndexData additionalIndexData);
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.Coverage.CumulativeSnapshotTotalGroupSectionsGetter : CumulativeSnapshotGroupSectionsGetterBase`4<IStatementCoverageCountersSection, CounterStatementDetails, ICumulativeSnapshotModuleTotalCoverageIndexSection, TotalCoverageIndexAdditionalData> {
    public CumulativeSnapshotTotalGroupSectionsGetter(ILoggerProvider loggerProvider);
    protected virtual bool CoverageInfoOutdated(TotalCoverageIndexAdditionalData data);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.ElementStatus.CumulativeSnapshotElementStatusSection : object {
    private ICumulativeSnapshotElementsIndexSection myElementsIndexSection;
    private JetFastSemiReenterableRWLock myRwLock;
    public CumulativeSnapshotElementStatusSection(ICumulativeSnapshotElementsIndexSection elementsIndexSection, JetFastSemiReenterableRWLock rwLock);
    public sealed virtual IEnumerable`1<CumulativeSnapshotElementKey> GetOutdatedElements();
    public sealed virtual bool TestIsUpToDate(CumulativeSnapshotElementKey elementKey);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private CumulativeSnapshotElementKey <GetOutdatedElements>b__3_0(int elementIndex);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.GroupIndex.CumulativeSnapshotGroupNameIndexSection : object {
    private ICumulativeSnapshotElementsIndexSection myElementsIndexSection;
    private JetFastSemiReenterableRWLock myRwLock;
    public IReadOnlyList`1<string> GroupNames { get; }
    public CumulativeSnapshotGroupNameIndexSection(ICumulativeSnapshotElementsIndexSection elementsIndexSection, JetFastSemiReenterableRWLock rwLock);
    public sealed virtual IReadOnlyList`1<string> get_GroupNames();
    public sealed virtual IReadOnlyList`1<int> GetGroupIndices(string groupName);
    public sealed virtual string GetGroupName(int groupIndex);
    private static string GetGroupNameByElementKey(CumulativeSnapshotElementKey elementKey);
    private static bool TryGetElementKeyByGroupName(string groupName, CumulativeSnapshotElementKey& elementKey);
    public sealed virtual void Dispose();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.Metadata.CumulativeSnapshotFilteredMetadataSectionsGetter : object {
    public sealed virtual IReadOnlyDictionary`2<Type, ISection> GetSections(Lifetime lifetime, IObservableModulesCollection moduleIndices, Func`3<Lifetime, int, IRawSectionCollection> tryGetModuleData, JetFastSemiReenterableRWLock rwLock);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.Metadata.CumulativeSnapshotMetadataSectionDataProvider : object {
    private JetFastSemiReenterableRWLock myRwLock;
    private IDictionary`2<SectionIndex`1<IMetadataSection>, IModuleInfo> myModulesInfo;
    private IDictionary`2<SectionIndex`1<IMetadataSection>, Lazy`1<ICumulativeSnapshotModuleMetadataSection>> myModuleMetadataSections;
    public IDictionary`2<SectionIndex`1<IMetadataSection>, IModuleInfo> Modules { get; }
    public IMetadataProvider MetadataProvider { get; }
    public CumulativeSnapshotMetadataSectionDataProvider(Lifetime lifetime, IObservableModulesCollection moduleIndices, Func`2<int, Guid> getModuleMvid, Func`2<Guid, ModuleMatchingData> getModuleMatchingData, Func`3<Lifetime, int, IRawSectionCollection> tryGetModuleData, JetFastSemiReenterableRWLock rwLock);
    public sealed virtual IDictionary`2<SectionIndex`1<IMetadataSection>, IModuleInfo> get_Modules();
    public sealed virtual IModuleInfo TryGetAssemblyData(SectionIndex`1<IMetadataSection> metadataIndex);
    public sealed virtual Stream TryGetStream(SectionIndex`1<IMetadataSection> metadataIndex);
    public sealed virtual IMetadataProvider get_MetadataProvider();
    public void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.Metadata.CumulativeSnapshotModuleStatSection : object {
    private JetFastSemiReenterableRWLock myRwLock;
    private Dictionary`2<SectionIndex`1<IMetadataSection>, IEnumerable`1<ModuleLoadInfo>> myEntries;
    public IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IEnumerable`1<ModuleLoadInfo>>> Entries { get; }
    public CumulativeSnapshotModuleStatSection(Lifetime lifetime, ICumulativeSnapshotModulesIndexSection modulesIndexSection, JetFastSemiReenterableRWLock rwLock);
    public sealed virtual IEnumerable`1<KeyValuePair`2<SectionIndex`1<IMetadataSection>, IEnumerable`1<ModuleLoadInfo>>> get_Entries();
    public sealed virtual bool TryGetEntryByMetadataIndex(SectionIndex`1<IMetadataSection> metadataIndex, IEnumerable`1& entry);
    private static IEnumerable`1<ModuleLoadInfo> CreateModuleLoadsInfo(Guid mvid, ModuleMatchingData moduleMatchingData, ModuleStatFlags moduleFlags);
    public sealed virtual void Dispose();
}
[ShellComponentAttribute("10")]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.MethodDetails.CumulativeSnapshotMethodDetailsSectionsGetter : object {
    private ILogger myLogger;
    private ThreadLocal`1<int> myLastAccessedModuleIndex;
    public CumulativeSnapshotMethodDetailsSectionsGetter(ILoggerProvider loggerProvider);
    public sealed virtual IReadOnlyDictionary`2<Type, ISection> GetSections(Lifetime lifetime, IObservableModulesCollection moduleIndices, Func`3<Lifetime, int, IRawSectionCollection> tryGetModuleData, JetFastSemiReenterableRWLock rwLock);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Sections.ReverseCoverage.CumulativeSnapshotReverseCoverageSection : object {
    private ILogger myLogger;
    private ICumulativeSnapshotElementsIndexSection myElementsIndexSection;
    private JetFastSemiReenterableRWLock myRwLock;
    private IDictionaryEvents`2<int, ICumulativeSnapshotModuleReverseCoverageSection> myModuleSections;
    public CumulativeSnapshotReverseCoverageSection(Lifetime lifetime, IObservableModulesCollection moduleIndices, Func`3<Lifetime, int, IRawSectionCollection> tryGetModuleData, ICumulativeSnapshotElementsIndexSection elementsIndexSection, JetFastSemiReenterableRWLock rwLock);
    public sealed virtual IReadOnlyList`1<CumulativeSnapshotElementKey> GetCoveringElements(IReadOnlyCollection`1<MetadataId> methodIds);
    public sealed virtual IReadOnlyList`1<int> GetCoveringGroupIndices(MetadataId methodId);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.SnapshotCoverageDataAddress : SnapshotDataAddress`1<IReadOnlyList`1<int>> {
    public static int TotalGroupIndex;
    public SnapshotCoverageDataAddress(ICoverageSnapshot snapshot, IReadOnlyList`1<int> groupIndices);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.UpdatedMethodInfo : object {
    [CompilerGeneratedAttribute]
private MetadataToken <NewMetadataToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MethodChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludedStatementsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewStatementsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private FrugalLocalList`1<int> <NewHiddenStatementIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, Nullable`1<int>> <NewToOldStatementIndicesMap>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MetadataToken NewMetadataToken { get; public set; }
    public bool MethodChanged { get; public set; }
    public bool ExcludedStatementsChanged { get; public set; }
    public int NewStatementsCount { get; public set; }
    public FrugalLocalList`1<int> NewHiddenStatementIndices { get; public set; }
    public IReadOnlyDictionary`2<int, Nullable`1<int>> NewToOldStatementIndicesMap { get; public set; }
    public UpdatedMethodInfo(MetadataToken NewMetadataToken, bool MethodChanged, bool ExcludedStatementsChanged, int NewStatementsCount, FrugalLocalList`1<int> NewHiddenStatementIndices, IReadOnlyDictionary`2<int, Nullable`1<int>> NewToOldStatementIndicesMap);
    [CompilerGeneratedAttribute]
protected UpdatedMethodInfo(UpdatedMethodInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public MetadataToken get_NewMetadataToken();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NewMetadataToken(MetadataToken value);
    [CompilerGeneratedAttribute]
public bool get_MethodChanged();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodChanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludedStatementsChanged();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExcludedStatementsChanged(bool value);
    [CompilerGeneratedAttribute]
public int get_NewStatementsCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NewStatementsCount(int value);
    [CompilerGeneratedAttribute]
public FrugalLocalList`1<int> get_NewHiddenStatementIndices();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NewHiddenStatementIndices(FrugalLocalList`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, Nullable`1<int>> get_NewToOldStatementIndicesMap();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NewToOldStatementIndicesMap(IReadOnlyDictionary`2<int, Nullable`1<int>> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(UpdatedMethodInfo left, UpdatedMethodInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(UpdatedMethodInfo left, UpdatedMethodInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(UpdatedMethodInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual UpdatedMethodInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(MetadataToken& NewMetadataToken, Boolean& MethodChanged, Boolean& ExcludedStatementsChanged, Int32& NewStatementsCount, FrugalLocalList`1& NewHiddenStatementIndices, IReadOnlyDictionary`2& NewToOldStatementIndicesMap);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.AssembliesProcessor : object {
    private ILowLevelMetadataProvider myLowLevelMetadataProvider;
    private ILogger myLogger;
    public AssembliesProcessor(ILowLevelMetadataProvider lowLevelMetadataProvider, ILogger logger);
    public sealed virtual IModulesDataProvider PrepareModulesData(Pair`2[] assembliesAndPdbFiles, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.BeforeElementStoragesModifiedEventArgs : object {
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<int> <ElementIndices>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IReadOnlySet`1<int> ElementIndices { get; public set; }
    public BeforeElementStoragesModifiedEventArgs(IReadOnlySet`1<int> ElementIndices);
    [CompilerGeneratedAttribute]
protected BeforeElementStoragesModifiedEventArgs(BeforeElementStoragesModifiedEventArgs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<int> get_ElementIndices();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementIndices(IReadOnlySet`1<int> value);
    public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BeforeElementStoragesModifiedEventArgs left, BeforeElementStoragesModifiedEventArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BeforeElementStoragesModifiedEventArgs left, BeforeElementStoragesModifiedEventArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BeforeElementStoragesModifiedEventArgs other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual BeforeElementStoragesModifiedEventArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlySet`1& ElementIndices);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.BeforeModuleStoragesModifiedEventArgs : object {
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<int> <ModuleIndices>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IReadOnlySet`1<int> ModuleIndices { get; public set; }
    public BeforeModuleStoragesModifiedEventArgs(IReadOnlySet`1<int> ModuleIndices);
    [CompilerGeneratedAttribute]
protected BeforeModuleStoragesModifiedEventArgs(BeforeModuleStoragesModifiedEventArgs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<int> get_ModuleIndices();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleIndices(IReadOnlySet`1<int> value);
    public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BeforeModuleStoragesModifiedEventArgs left, BeforeModuleStoragesModifiedEventArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BeforeModuleStoragesModifiedEventArgs left, BeforeModuleStoragesModifiedEventArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BeforeModuleStoragesModifiedEventArgs other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual BeforeModuleStoragesModifiedEventArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlySet`1& ModuleIndices);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.CumulativeSnapshotUpdater : object {
    private static int MaxParallelLockingTasksCount;
    private ILogger myLogger;
    private JetFastSemiReenterableRWLock myRwLock;
    private IModifiableCumulativeSnapshotModulesIndexSection myModifiableModulesIndexSection;
    private IModifiableCumulativeSnapshotElementsIndexSection myModifiableElementsIndexSection;
    private ILowLevelMetadataProvider myLowLevelMetadataProvider;
    private IDotCoverCommentsInfoReader myDotCoverCommentsInfoReader;
    private ICumulativeSnapshotMethodChangesDetector[] myChangesDetectors;
    private ICumulativeSnapshotModuleStoragesReader myModuleStoragesReader;
    private ICumulativeSnapshotModuleStoragesBuilder myModuleStoragesBuilder;
    private ICumulativeSnapshotElementStoragesReader myElementStoragesReader;
    private ICumulativeSnapshotElementStoragesBuilder myElementStoragesBuilder;
    private IThreading myThreading;
    private TaskScheduler myMainScheduler;
    private Dictionary`2<ModuleKey, ModuleState> myCurrentModuleStates;
    private Dictionary`2<Guid, ModuleKey> myCurrentMvidsToModuleKeys;
    private Dictionary`2<ModuleKey, Nullable`1<Guid>> myMvidsInSnapshot;
    private Dictionary`2<Guid, ModuleKey> myMvidsInSnapshotToModuleKeys;
    private Dictionary`2<ModuleKey, LockingTask> myModuleLockingTasks;
    private Dictionary`2<CumulativeSnapshotElementKey, LockingTask> myElementLockingTasks;
    private Task myLastUpdateFinishedNotificationTask;
    private Dictionary`2<ModuleKey, List`1<ModuleStorageBuildInfo>> myModuleStoragesBuildInfo;
    private AutoResetEvent myBuildModuleStoragesEvent;
    private int myBuildModuleStorageTasksInProgress;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) myStopModuleStoragesBuilder;
    private Dictionary`2<TaskPriority, TaskGroup> myTaskGroups;
    [CompilerGeneratedAttribute]
private ISignal`1<BeforeModuleStoragesModifiedEventArgs> <BeforeModuleStoragesModified>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<BeforeModuleStoragesModifiedEventArgs> <BeforeAggregatedModuleStoragesModified>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<BeforeElementStoragesModifiedEventArgs> <BeforeElementStoragesModified>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignal`1<SnapshotUpdatedEventArgs> <UpdateFinished>k__BackingField;
    public ISignal`1<BeforeModuleStoragesModifiedEventArgs> BeforeModuleStoragesModified { get; }
    public ISignal`1<BeforeModuleStoragesModifiedEventArgs> BeforeAggregatedModuleStoragesModified { get; }
    public ISignal`1<BeforeElementStoragesModifiedEventArgs> BeforeElementStoragesModified { get; }
    public ISignal`1<SnapshotUpdatedEventArgs> UpdateFinished { get; }
    public CumulativeSnapshotUpdater(Lifetime lifetime, JetFastSemiReenterableRWLock rwLock, IModifiableCumulativeSnapshotModulesIndexSection modifiableModulesIndexSection, IModifiableCumulativeSnapshotElementsIndexSection modifiableElementsIndexSection, ILowLevelMetadataProvider lowLevelMetadataProvider, IDotCoverCommentsInfoReader dotCoverCommentsInfoReader, IEnumerable`1<ICumulativeSnapshotMethodChangesDetector> changesDetectors, ICumulativeSnapshotModuleStoragesReader moduleStoragesReader, ICumulativeSnapshotModuleStoragesBuilder moduleStoragesBuilder, ICumulativeSnapshotElementStoragesReader elementStoragesReader, ICumulativeSnapshotElementStoragesBuilder elementStoragesBuilder, IThreading threading, ILogger logger);
    public sealed virtual Task`1<bool> ProcessNewModules(IModulesDataProvider newModulesDataProvider, bool ignoreTargetFrameworksWhenMatchingModules);
    public sealed virtual Task`1<bool> ProcessNewElements(IElementsDataProvider newElementsDataProvider, bool ignoreTargetFrameworksWhenMatchingModules);
    public sealed virtual Task`1<bool> CopyElementsData(string toSession, string fromSession, IReadOnlyCollection`1<string> fromElements);
    public sealed virtual Task ApplyNewFilters(PatternFilterInfo[] newPatternFilters, AttributeFilterInfo[] newAttributeFilters);
    public sealed virtual Task RemoveElements(CumulativeSnapshotElementKey[] elements);
    public sealed virtual Task Clear();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<BeforeModuleStoragesModifiedEventArgs> get_BeforeModuleStoragesModified();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<BeforeModuleStoragesModifiedEventArgs> get_BeforeAggregatedModuleStoragesModified();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<BeforeElementStoragesModifiedEventArgs> get_BeforeElementStoragesModified();
    [CompilerGeneratedAttribute]
public sealed virtual ISignal`1<SnapshotUpdatedEventArgs> get_UpdateFinished();
    private List`1<Pair`2<List`1<ModuleKey>, JetHashSet`1<CumulativeSnapshotElementKey>>> BuildIndependentEntitiesToLock(IEnumerable`1<ModuleKey> modules);
    private IReadOnlyCollection`1<CumulativeSnapshotElementKey> GetCoveringElementsFromSnapshot(IEnumerable`1<ModuleKey> modules);
    private IReadOnlyCollection`1<ModuleKey> GetCoveredModulesFromSnapshot(IEnumerable`1<CumulativeSnapshotElementKey> elements);
    private void EnsureCurrentModuleStatesInitialized();
    private ModuleMatchingResult[] MatchNewAndCurrentModules(IModulesMatchingDataProvider newModulesMatchingDataProvider, bool ignoreTargetFrameworksWhenMatchingModules, bool assemblyInfoCanBeAbsentForNewModules);
    private void UpdateModuleStatesAndStartBuildingModuleStorages(IEnumerable`1<ModuleMatchingResult> modulesMatchingResult, IModulesDataProvider newModulesDataProvider, TaskPriority priority, Dictionary`2& updatedStates, Dictionary`2& buildTasks);
    private void UpdateModuleStates(PatternFilterWildcards[] newPatternFilters, AttributeFilterWildcards[] newAttributeFilters, Dictionary`2& updatedStates);
    private static ModuleState CreateNewModuleState(Guid mvid, int moduleIndex, ModuleMatchingData moduleMatchingData, IModulesDataProvider newModulesDataProvider);
    private static ModuleState CreateAbsentModuleState(Guid mvid, ModuleMatchingData moduleMatchingData);
    private static ModuleState CreateRemovedModuleState(ModuleState currentModuleState);
    private Task`1<ModuleStorageBuildResult> CreateNewModuleStorageBuildTask(ModuleKey moduleKey, Guid mvid, int moduleIndex, IModulesDataProvider newModulesDataProvider, TaskPriority priority);
    private void UpdateModuleStorageBuildTaskPriority(ModuleKey moduleKey, TaskPriority priority);
    private Dictionary`2<ModuleKey, Task`1<ModuleStorageBuildResult>> StartUpdatingFiltersInModuleStorages(Dictionary`2<ModuleKey, ModuleState> updatedModuleStates);
    private Task`1<AffectedElementsProcessingResult> StartProcessingElementsAffectedByNewModules(Dictionary`2<ModuleKey, Nullable`1<int>> newModuleIndices);
    private Dictionary`2<CumulativeSnapshotElementKey, Task`1<ElementStorageCopyResult>> StartCopyMetadataInOldElementStorages(IReadOnlyDictionary`2<CumulativeSnapshotElementKey, CumulativeSnapshotElementKey> copyElements, Dictionary`2& allNewElementIndices, Dictionary`2& allNewElementMvids);
    private Dictionary`2<CumulativeSnapshotElementKey, Task`1<ElementStorageUpdateResult>> StartUpdatingMetadataInOldElementStorages(IReadOnlyCollection`1<CumulativeSnapshotElementKey> elements, IReadOnlyDictionary`2<int, IReadOnlyDictionary`2<MetadataToken, UpdatedMethodInfo>> updatedMethodsByOldModuleIndex, IReadOnlyDictionary`2& allNewElementIndices);
    private NewModuleStorageProcessingResult ProcessNewModuleStorage(Nullable`1<int> moduleIndexInSnapshot, int newModuleIndex);
    private Dictionary`2<CumulativeSnapshotElementKey, Task`1<ElementStorageBuildResult>> StartBuildingElementStorages(IElementsDataProvider newElementsDataProvider, IReadOnlyDictionary`2& allNewElementIndices);
    private Task StartBuildingModulesAggregateStorages(IReadOnlyDictionary`2<int, AggregateStoragesBuildContext> modules);
    private UpdateIndexResults ApplyChangesToIndexSections(Dictionary`2<ModuleKey, ModuleState> newModuleStates, Dictionary`2<CumulativeSnapshotElementKey, Nullable`1<int>> newElementIndices, Dictionary`2<CumulativeSnapshotElementKey, IReadOnlyList`1<Guid>> newElementCoveredMvids, CumulativeSnapshotElementKey[] outdatedElements);
    private void UpdateMvidsInSnapshot(ModuleKey moduleKey, Nullable`1<Guid> newMvid);
    private Task`1<bool> ApplyChangesToSnapshotAndBuildModulesAggregateStorages(Dictionary`2<ModuleKey, ModuleState> newModuleStates, Dictionary`2<CumulativeSnapshotElementKey, Nullable`1<int>> newElementIndices, Dictionary`2<CumulativeSnapshotElementKey, IReadOnlyList`1<Guid>> newElementCoveredMvids, CumulativeSnapshotElementKey[] outdatedElementIndices);
    private Task`1<TResult> StartNewLockingTask(IReadOnlyCollection`1<ModuleKey> modulesToLock, IReadOnlyCollection`1<CumulativeSnapshotElementKey> elementsToLock, Func`1<Task`1<TResult>> asyncAction);
    private void ModuleStoragesBuildQueueProcessor();
    private bool TryGetModuleBuildTaskWithMaxPriority(ModuleStorageBuildInfo& buildInfo);
    private static Dictionary`2<TKey, TTaskResult> GetSuccessfulTaskResults(IReadOnlyDictionary`2<TKey, Task`1<TTaskResult>> tasks);
    private static Dictionary`2<TKey, TTaskResult> GetSuccessfulNotNullTaskResults(IReadOnlyDictionary`2<TKey, Task`1<TTaskResult>> tasks);
    private Task StartOnMainScheduler(Func`1<Task> asyncAction);
    private Task`1<TResult> StartOnMainScheduler(Func`1<Task`1<TResult>> asyncAction);
    private Task StartOnMainSchedulerWhenAll(IReadOnlyCollection`1<Task> afterTasks, Func`2<Task[], Task> asyncAction);
    private Task`1<TResult> StartOnMainSchedulerWhenAll(IReadOnlyCollection`1<Task> afterTasks, Func`2<Task[], Task`1<TResult>> asyncAction);
    private Task`1<TResult> StartOnMainSchedulerAfter(Task afterTask, Func`2<Task, Task`1<TResult>> asyncAction);
    private void ExecuteOnMainScheduler(Action action);
    private Task`1<TResult> ExecuteOnMainSchedulerWhenAll(IReadOnlyCollection`1<Task> afterTasks, Func`2<Task[], TResult> action);
    private Task ExecuteOnThreadScheduler(Action`1<CancellationToken> action, TaskPriority priority, Nullable`1<CancellationToken> cancellationToken);
    private Task`1<TResult> ExecuteOnThreadScheduler(Func`2<CancellationToken, TResult> action, TaskPriority priority, Nullable`1<CancellationToken> cancellationToken);
    private static Lifetime GetLifetimeByCancellationToken(CancellationToken ct, Nullable`1& ctRegistration);
    private static UInt32 GetMaxParallelThreadsCount();
    [CompilerGeneratedAttribute]
private void <.ctor>b__26_0();
    [CompilerGeneratedAttribute]
private Task`1<bool> <Clear>b__32_0();
    [CompilerGeneratedAttribute]
internal static Pair`2<List`1<ModuleKey>, JetHashSet`1<CumulativeSnapshotElementKey>> <BuildIndependentEntitiesToLock>g__GetOrAddNewIndependentPair|45_0(<>c__DisplayClass45_0& );
    [CompilerGeneratedAttribute]
private Guid <StartCopyMetadataInOldElementStorages>b__59_0(int index);
    [CompilerGeneratedAttribute]
private int <ApplyChangesToIndexSections>b__64_1(Guid mvid);
    [CompilerGeneratedAttribute]
private void <ApplyChangesToIndexSections>g__DumpCoveredModulesToLog|64_0(string message, CumulativeSnapshotElementKey elementKey, IEnumerable`1<int> modules);
    [CompilerGeneratedAttribute]
private string <ApplyChangesToIndexSections>g__GetCoveredModuleString|64_5(int moduleIndex);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.IAssembliesProcessor {
    public abstract virtual IModulesDataProvider PrepareModulesData(Pair`2[] assembliesAndPdbFiles, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.ICumulativeSnapshotUpdater {
    public ISignal`1<BeforeModuleStoragesModifiedEventArgs> BeforeModuleStoragesModified { get; }
    public ISignal`1<BeforeModuleStoragesModifiedEventArgs> BeforeAggregatedModuleStoragesModified { get; }
    public ISignal`1<BeforeElementStoragesModifiedEventArgs> BeforeElementStoragesModified { get; }
    public ISignal`1<SnapshotUpdatedEventArgs> UpdateFinished { get; }
    public abstract virtual Task`1<bool> ProcessNewModules(IModulesDataProvider newModulesDataProvider, bool ignoreTargetFrameworksWhenMatchingModules);
    public abstract virtual Task`1<bool> ProcessNewElements(IElementsDataProvider newElementsDataProvider, bool ignoreTargetFrameworksWhenMatchingModules);
    public abstract virtual Task`1<bool> CopyElementsData(string toSession, string fromSession, IReadOnlyCollection`1<string> fromElements);
    public abstract virtual Task ApplyNewFilters(PatternFilterInfo[] newPatternFilters, AttributeFilterInfo[] newAttributeFilters);
    public abstract virtual Task RemoveElements(CumulativeSnapshotElementKey[] elements);
    public abstract virtual Task Clear();
    public abstract virtual ISignal`1<BeforeModuleStoragesModifiedEventArgs> get_BeforeModuleStoragesModified();
    public abstract virtual ISignal`1<BeforeModuleStoragesModifiedEventArgs> get_BeforeAggregatedModuleStoragesModified();
    public abstract virtual ISignal`1<BeforeElementStoragesModifiedEventArgs> get_BeforeElementStoragesModified();
    public abstract virtual ISignal`1<SnapshotUpdatedEventArgs> get_UpdateFinished();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.IElementsDataProvider {
    public IModulesMatchingDataProvider CoveredModulesDataProvider { get; }
    public abstract virtual IModulesMatchingDataProvider get_CoveredModulesDataProvider();
    public abstract virtual IReadOnlyList`1<CumulativeSnapshotElementKey> GetAllElementsInOrderOfCoverageDataAppearance();
    public abstract virtual Task`1<ElementStorageBuildResult> BuildElementStorage(CumulativeSnapshotElementKey elementKey, int elementIndex, Func`2<Guid, ISnapshotSectionCollection> tryGetModuleData, ICumulativeSnapshotElementStoragesBuilder storagesBuilder, CancellationToken cancellationToken);
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.IModulesDataProvider {
    public abstract virtual bool ModuleHasPdb(Guid mvid);
    public abstract virtual bool ModuleMatchesFilters(Guid mvid);
    public abstract virtual PatternFilterWildcards[] GetModulePatternFilters(Guid mvid);
    public abstract virtual AttributeFilterWildcards[] GetModuleAttributeFilters(Guid mvid);
    public abstract virtual bool TryBuildModuleStorage(Guid mvid, int moduleIndex, ICumulativeSnapshotModuleStoragesBuilder storagesBuilder, CancellationToken cancellationToken);
}
public interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.IModulesMatchingDataProvider {
    public abstract virtual IReadOnlyDictionary`2<Guid, Lazy`1<ModuleMatchingData>> GetModulesMatchingData();
}
internal interface JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.IRawSnapshotsProcessor {
    public abstract virtual IElementsDataProvider PrepareData(string sessionId, IStorageDescriptor[] rawSnapshots, IReadOnlyDictionary`2<string, String[]> groupNameToElementIdsMap, bool mergeModulesInsideRawSnapshots);
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.ModulesDataProviderExtensions : object {
    [ExtensionAttribute]
public static ModuleStatFlags GetModuleFlags(IModulesDataProvider dataProvider, Guid mvid);
}
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.OverriddenMethodsHelper : object {
    private static char NestedTypeNamesSeparator;
    public static Nullable`1<OverridenMethods> TryGetNewlyOverridenMethods(IRawSectionCollection oldModule, IRawSectionCollection newModule, ILowLevelMetadataProvider lowLevelMetadataProvider);
    public static OneToListMap`2<int, MetadataToken> ResolveNewlyOverriddenMethods(Nullable`1<int> moduleIndexInSnapshot, int newModuleIndex, Guid newModuleMvid, OverridenMethods newlyOverridenMethods, ICumulativeSnapshotModulesIndexSection modulesIndexSection, ICumulativeSnapshotElementsIndexSection elementsIndexSection, ICumulativeSnapshotModuleStoragesReader storagesReader, ILowLevelMetadataProvider lowLevelMetadataProvider);
    public static void CollectElementsCoveringNewlyOverriddenMethods(OneToListMap`2<int, MetadataToken> newlyOverriddenMethodsByModuleIndex, ICumulativeSnapshotElementsIndexSection elementsIndexSection, ICumulativeSnapshotModuleStoragesReader storagesReader, ISet`1<CumulativeSnapshotElementKey> result);
    private static bool TryGetTypeRefOrSpecInfo(ILowLevelMetadata metadata, LowLevelMetadataTypesEqualityComparer typeTokensEqualityComparer, MetadataToken typeRefOrSpecToken, String& assemblyName, String& namespaceName, String& typeName, Int32[]& genericArgTypeHashes);
    private static Nullable`1<MetadataSearchStruct> GetOrCreateMetadataSearchStruct(int moduleIndex, Lifetime lifetime, IDictionary`2<int, Nullable`1<MetadataSearchStruct>> cache, ICumulativeSnapshotModulesIndexSection modulesIndexSection, ICumulativeSnapshotModuleStoragesReader storagesReader, ILowLevelMetadataProvider lowLevelMetadataProvider);
    [CompilerGeneratedAttribute]
internal static void <TryGetNewlyOverridenMethods>g__EnsureTokensMapperCreated|1_0(<>c__DisplayClass1_0& , <>c__DisplayClass1_1& , <>c__DisplayClass1_2& );
}
[IsReadOnlyAttribute]
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.OverridenMethods : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MetadataToken> <MethodDefTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OverriddenMethodRefInfo> <MethodRefsInfo>k__BackingField;
    public IReadOnlyList`1<MetadataToken> MethodDefTokens { get; }
    public IReadOnlyList`1<OverriddenMethodRefInfo> MethodRefsInfo { get; }
    public OverridenMethods(IReadOnlyList`1<MetadataToken> methodDefTokens, IReadOnlyList`1<OverriddenMethodRefInfo> methodRefsInfo);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<MetadataToken> get_MethodDefTokens();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<OverriddenMethodRefInfo> get_MethodRefsInfo();
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.RawSnapshotsProcessor : object {
    private ICoverageSnapshotManager myCoverageSnapshotManager;
    private ILowLevelMetadataProvider myLowLevelMetadataProvider;
    private ILogger myLogger;
    public RawSnapshotsProcessor(ICoverageSnapshotManager coverageSnapshotManager, ILowLevelMetadataProvider lowLevelMetadataProvider, ILogger logger);
    public sealed virtual IElementsDataProvider PrepareData(string sessionId, IStorageDescriptor[] rawSnapshots, IReadOnlyDictionary`2<string, String[]> groupNameToElementIdsMap, bool mergeModulesInsideRawSnapshots);
}
internal class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.SnapshotUpdatedEventArgs : object {
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<int> <RemovedModuleIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<int> <AddedModuleIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, int> <ReplacedModuleIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlySet`1<int> <ModuleIndicesWithUpdatedAggregateStorages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ElementsChanged>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IReadOnlySet`1<int> RemovedModuleIndices { get; public set; }
    public IReadOnlySet`1<int> AddedModuleIndices { get; public set; }
    public IReadOnlyDictionary`2<int, int> ReplacedModuleIndices { get; public set; }
    public IReadOnlySet`1<int> ModuleIndicesWithUpdatedAggregateStorages { get; public set; }
    public bool ElementsChanged { get; public set; }
    public bool SnapshotChanged { get; }
    public SnapshotUpdatedEventArgs(IReadOnlySet`1<int> RemovedModuleIndices, IReadOnlySet`1<int> AddedModuleIndices, IReadOnlyDictionary`2<int, int> ReplacedModuleIndices, IReadOnlySet`1<int> ModuleIndicesWithUpdatedAggregateStorages, bool ElementsChanged);
    [CompilerGeneratedAttribute]
protected SnapshotUpdatedEventArgs(SnapshotUpdatedEventArgs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<int> get_RemovedModuleIndices();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RemovedModuleIndices(IReadOnlySet`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<int> get_AddedModuleIndices();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AddedModuleIndices(IReadOnlySet`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, int> get_ReplacedModuleIndices();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReplacedModuleIndices(IReadOnlyDictionary`2<int, int> value);
    [CompilerGeneratedAttribute]
public IReadOnlySet`1<int> get_ModuleIndicesWithUpdatedAggregateStorages();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleIndicesWithUpdatedAggregateStorages(IReadOnlySet`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ElementsChanged();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementsChanged(bool value);
    public bool get_SnapshotChanged();
    public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SnapshotUpdatedEventArgs left, SnapshotUpdatedEventArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SnapshotUpdatedEventArgs left, SnapshotUpdatedEventArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(SnapshotUpdatedEventArgs other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual SnapshotUpdatedEventArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(IReadOnlySet`1& RemovedModuleIndices, IReadOnlySet`1& AddedModuleIndices, IReadOnlyDictionary`2& ReplacedModuleIndices, IReadOnlySet`1& ModuleIndicesWithUpdatedAggregateStorages, Boolean& ElementsChanged);
}
internal static class JetBrains.dotCover.DataAccess.CumulativeSnapshot.Dal.Updater.UpdatedMethodsInfoBuilder : object {
    private static ILogger ourLogger;
    private static UpdatedMethodsInfoBuilder();
    public static IReadOnlyDictionary`2<MetadataToken, UpdatedMethodInfo> Build(IRawSectionCollection oldModule, IRawSectionCollection newModule, ILowLevelMetadataProvider lowLevelMetadataProvider, IDotCoverCommentsInfoReader dotCoverCommentsInfoReader, ICumulativeSnapshotMethodChangesDetector[] changesDetectors);
    private static bool ExcludedStatementsChanged(IReadOnlyList`1<KeyValuePair`2<int, int>> oldExcludedRanges, IReadOnlyList`1<KeyValuePair`2<int, int>> newExcludedRanges);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.DotCoverComments.Dal.DotCoverCommentsInfoReader : object {
    private ILowLevelMetadataProvider myLowLevelMetadataProvider;
    private ILogger myLogger;
    public DotCoverCommentsInfoReader(ILowLevelMetadataProvider lowLevelMetadataProvider, ILoggerProvider loggerProvider);
    public sealed virtual bool SnapshotHasDotCoverCommentsInfo(IRawCoverageSnapshot snapshot);
    public sealed virtual IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>> GetCommentedStatementRanges(ILowLevelMetadata metadata);
    public sealed virtual IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>> GetCommentedStatementRanges(IMetadataSection metadataSection, SectionIndex`1<IMetadataSection> metadataIndex);
    private static bool ModuleHasDotCoverCommentsInfo(ILowLevelMetadata metadata);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.dotCover.DataAccess.DotCoverComments.Dal.Interface.IDotCoverCommentsInfoReader {
    public abstract virtual bool SnapshotHasDotCoverCommentsInfo(IRawCoverageSnapshot snapshot);
    public abstract virtual IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>> GetCommentedStatementRanges(ILowLevelMetadata metadata);
    public abstract virtual IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>> GetCommentedStatementRanges(IMetadataSection metadataSection, SectionIndex`1<IMetadataSection> metadataIndex);
}
public class JetBrains.dotCover.DataAccess.Filtering.Dal.Interface.AttributeFilterWildcards : ValueType {
    [CompilerGeneratedAttribute]
private bool <FilterIsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private Wildcard <TypeWildcard>k__BackingField;
    public bool FilterIsActive { get; }
    public Wildcard TypeWildcard { get; }
    public AttributeFilterWildcards(bool filterIsActive, string typePattern);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_FilterIsActive();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Wildcard get_TypeWildcard();
    public sealed virtual bool Equals(AttributeFilterWildcards other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.dotCover.DataAccess.Filtering.Dal.Interface.AttributeMetadataFiltersMatcher : object {
    public static bool Match(string fullyQualifiedAttributeTypeName, AttributeFilterWildcards[] filters);
    public static bool Match(IMetadataEntity metadataEntity, AttributeFilterWildcards[] filters);
    public static bool Match(ILowLevelMetadata metadata, MetadataToken attributesOwnerToken, AttributeFilterWildcards[] filters);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.Filtering.Dal.Interface.FiltersExtensions : object {
    [ExtensionAttribute]
public static PatternFilterWildcards[] ToWildcards(PatternFilterInfo[] patternFilters);
    [ExtensionAttribute]
public static AttributeFilterWildcards[] ToWildcards(AttributeFilterInfo[] attributeFilters);
    [ExtensionAttribute]
public static string Dump(IEnumerable`1<PatternFilterInfo> patternFilters);
    [ExtensionAttribute]
public static string Dump(IEnumerable`1<AttributeFilterInfo> attributeFilters);
}
public class JetBrains.dotCover.DataAccess.Filtering.Dal.Interface.PatternFilterWildcards : ValueType {
    [CompilerGeneratedAttribute]
private bool <FilterIsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterType <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private Wildcard <AssemblyNameWildcard>k__BackingField;
    [CompilerGeneratedAttribute]
private Wildcard <AssemblyVersionWildcard>k__BackingField;
    [CompilerGeneratedAttribute]
private Wildcard <TypeWildcard>k__BackingField;
    [CompilerGeneratedAttribute]
private Wildcard <MethodWildcard>k__BackingField;
    public bool FilterIsActive { get; }
    public FilterType FilterType { get; }
    public Wildcard AssemblyNameWildcard { get; }
    public Wildcard AssemblyVersionWildcard { get; }
    public Wildcard TypeWildcard { get; }
    public Wildcard MethodWildcard { get; }
    public PatternFilterWildcards(bool filterIsActive, FilterType filterType, string assemblyNamePattern, string assemblyVersionPattern, string typePattern, string methodPattern);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_FilterIsActive();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public FilterType get_FilterType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Wildcard get_AssemblyNameWildcard();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Wildcard get_AssemblyVersionWildcard();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Wildcard get_TypeWildcard();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Wildcard get_MethodWildcard();
    public sealed virtual bool Equals(PatternFilterWildcards other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class JetBrains.dotCover.DataAccess.Filtering.Dal.Interface.PatternMetadataFiltersMatcher : object {
    public static bool Match(AssemblyNameInfo assemblyName, PatternFilterWildcards[] filters, PatternFilterWildcards[]& assemblySpecificFilters);
    public static bool Match(string fullyQualifiedTypeName, PatternFilterWildcards[] assemblySpecificFilters, PatternFilterWildcards[]& typeSpecificFilters);
    public static bool Match(string methodName, PatternFilterWildcards[] typeSpecificFilters);
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.Complementer.HotSpotsComplementarySectionsBuilder : object {
    private Lifetime myLifetime;
    private CyclomaticComplexitySection myCyclomaticComplexitySection;
    public HotSpotsComplementarySectionsBuilder(Lifetime lifetime, ICoverageSnapshot sourceSnapshot);
    public sealed virtual void ProcessComplementaryMethod(MetadataId metadataId, ILowLevelMetadata metadata, PEFile assemblyPeFile, DebugData debugData);
    public sealed virtual IEnumerable`1<ISection> GetSections();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.Complementer.HotSpotsComplementarySectionsBuilderFactory : object {
    public sealed virtual IComplementaryMetadataSectionsBuilder CreateComplementarySectionsBuilder(Lifetime lifetime, ICoverageSnapshot sourceSnapshot);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CumulativeSnapshot.ModuleData.CumulativeSnapshotHotSpotsDataDescriptor : CumulativeSnapshotModuleDataDescriptorBase {
    public static ushort CyclomaticComplexitySectionType;
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CumulativeSnapshot.ModuleData.CumulativeSnapshotHotSpotsSectionsBuilder : object {
    private static ushort CyclomaticComplexitySectionVersion;
    private ushort myCyclomaticComplexitySectionType;
    public CumulativeSnapshotHotSpotsSectionsBuilder(ushort cyclomaticComplexitySectionType);
    public sealed virtual void BuildByAssemblyFile(PEFile assembly, ILowLevelMetadata metadata, ParsedPdb parsedPdb, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
    public sealed virtual void BuildWithUpdatedFilters(IRawSectionCollection moduleData, PatternFilterWildcards[] patternFilters, AttributeFilterWildcards[] attributeFilters, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CumulativeSnapshot.ModuleData.CumulativeSnapshotModuleCyclomaticComplexitySectionReader0000 : SectionReaderBase`1<ICumulativeSnapshotModuleCyclomaticComplexitySection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual ICumulativeSnapshotModuleCyclomaticComplexitySection ReadSection(SnapshotStorageSection storageSection);
}
public interface JetBrains.dotCover.DataAccess.HotSpots.Dal.CumulativeSnapshot.ModuleData.ICumulativeSnapshotModuleCyclomaticComplexitySection {
    public IReadOnlyDictionary`2<MetadataToken, UInt32> CyclomaticComplexity { get; }
    public abstract virtual IReadOnlyDictionary`2<MetadataToken, UInt32> get_CyclomaticComplexity();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CumulativeSnapshot.Sections.CumulativeSnapshotHotSpotsSectionsGetter : object {
    public sealed virtual IReadOnlyDictionary`2<Type, ISection> GetSections(Lifetime lifetime, IObservableModulesCollection moduleIndices, Func`3<Lifetime, int, IRawSectionCollection> tryGetModuleData, JetFastSemiReenterableRWLock rwLock);
}
internal static class JetBrains.dotCover.DataAccess.HotSpots.Dal.CyclomaticComplexityCalculator : object {
    public static UInt32 Calc(ILMethodBody methodBody);
    public static UInt32 Calc(IBinaryReader methodBodyReader);
    public static UInt32 GetInstructionComplexity(Opcode opcode);
    public static UInt32 AddExceptionHandlerComplexity(UInt32 handlersComplexity, ExceptionHandlerType handlerType);
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CyclomaticComplexitySection : object {
    internal IDictionary`2<MetadataId, UInt32> Dictionary;
    public IEnumerable`1<KeyValuePair`2<MetadataId, UInt32>> Entries { get; }
    public sealed virtual bool TryGetCyclomaticComplexity(MetadataId methodId, UInt32& complexity);
    public sealed virtual IEnumerable`1<KeyValuePair`2<MetadataId, UInt32>> get_Entries();
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CyclomaticComplexitySectionConcatenator : SectionConcatenatorBase`1<CyclomaticComplexitySection> {
    protected virtual CyclomaticComplexitySection ConcatenateSections(IReadOnlyList`1<CyclomaticComplexitySection> sections);
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CyclomaticComplexitySectionMerger : object {
    private ISectionCollectionWriter mySectionCollectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public CyclomaticComplexitySectionMerger(ISectionCollectionWriter sectionCollectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CyclomaticComplexitySectionReader0000 : SectionReaderBase`1<CyclomaticComplexitySection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual CyclomaticComplexitySection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.CyclomaticComplexitySectionWriter : SectionWriterBase`1<ICyclomaticComplexitySection> {
    protected virtual void WriteSection(ICyclomaticComplexitySection section, IStorageSectionWriter storageSectionWriter);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.HotSpots.Dal.HotSpotsSnapshotDataDescriptor : StandaloneSnapshotDataDescriptorBase {
    public static ushort CyclomaticComplexitySectionType;
}
public interface JetBrains.dotCover.DataAccess.HotSpots.Dal.Interface.ICyclomaticComplexitySection {
    public IEnumerable`1<KeyValuePair`2<MetadataId, UInt32>> Entries { get; }
    public abstract virtual bool TryGetCyclomaticComplexity(MetadataId methodId, UInt32& complexity);
    public abstract virtual IEnumerable`1<KeyValuePair`2<MetadataId, UInt32>> get_Entries();
}
[ZoneDefinitionAttribute]
public interface JetBrains.dotCover.DataAccess.IDotCoverDataAccessZone {
}
internal static class JetBrains.dotCover.DataAccess.SimpleContainer.DataAccessComponentsFactory : object {
    public static void AddShellComponents(ISimpleContainer container);
}
internal class JetBrains.dotCover.DataAccess.SimpleContainer.MockHostXmlResurrector : object {
    public sealed virtual IHostParameters CreateEmptyHostParametersFrom(string name);
    public sealed virtual IArgument CreateEmptyArgumentFrom(string name);
    public sealed virtual IInfo CreateEmptyInfoFrom(string name);
    public sealed virtual ICoreOptions CreateEmptyCoreOptionsFrom(string name);
    public sealed virtual IHostOptions CreateEmptyHostOptionsFrom(string name);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.ChainedMergeContext : MergeContext {
    private IMergeContext myParentContext;
    public ChainedMergeContext(IMergeContext parentContext);
    public virtual bool TryGetValue(TValue& value);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Complementer.CoverageSnapshotStorageComplementer : object {
    private IImmutableList`1<IStandaloneSnapshotDataDescriptor> myStandaloneDescriptors;
    private IImmutableList`1<IGroupedSnapshotDataDescriptor> myGroupedDescriptors;
    private IImmutableList`1<IComplementaryMetadataSectionsBuilderFactory> myComplementarySectionsBuilderFactories;
    private ILowLevelMetadataProvider myLowLevelMetadataProvider;
    private ILogger myLogger;
    public CoverageSnapshotStorageComplementer(IImmutableList`1<IStandaloneSnapshotDataDescriptor> standaloneDescriptors, IImmutableList`1<IGroupedSnapshotDataDescriptor> groupedDescriptors, IImmutableList`1<IComplementaryMetadataSectionsBuilderFactory> complementarySectionsBuilderFactories, ILowLevelMetadataProvider lowLevelMetadataProvider, ILogger logger);
    public sealed virtual void Complement(Func`2<Lifetime, ISnapshotStorage> getSourceStorage, Func`2<Lifetime, IStorageSectionWriter> getStorageAppender, ISnapshotScopeInfoProvider snapshotScopeInfoProvider, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, IProgressIndicator progress);
    private static IEnumerable`1<MetadataEntry> GetMetadataEntriesFromSnapshot(ICoverageSnapshot snapshot);
    private static bool TryGetMetadataStream(Lifetime lifetime, PEFile peFile, Stream fileStream, Stream& metadataStream);
    private static bool TryGetModuleInfo(FileSystemPath assemblyPath, Stream metadataStream, IModuleInfo& moduleInfo);
    private static ModuleLoadInfo CreateModuleLoadInfo(FileSystemPath assemblyPath, IModuleInfo moduleInfo, ModuleStatFlags flags);
}
internal static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.ConvolutionUtil : object {
    public static T Convolve(IEnumerable`1<T> source, int maxItemsNumber, IProgressIndicator progress, Func`6<IEnumerable`1<T>, int, int, bool, IProgressIndicator, T> func);
    internal static int GetConvolutionIterationsNumber(int sourceItemsNumber, int maxItemsNumber);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.CoverageSnapshot : object {
    private static ILogger ourLogger;
    private RawSectionCollection myStandaloneSections;
    private IReadOnlyList`1<RawSectionCollection> myGroups;
    [CanBeNullAttribute]
private RawSectionCollection myRawTotalGroup;
    private IEnumerable`1<IGroupedSectionMerger> myGroupedSectionMergers;
    private Lazy`1<ISnapshotSectionCollection> myCalculatedTotalGroup;
    [CompilerGeneratedAttribute]
private IStorageDescriptor <StorageDescriptor>k__BackingField;
    public IStorageDescriptor StorageDescriptor { get; }
    public ISnapshotSectionCollection StandaloneSections { get; }
    public IRawSectionCollection RawStandaloneSections { get; }
    public ISnapshotSectionCollection TotalGroup { get; }
    public IRawSectionCollection RawTotalGroup { get; }
    public int GroupsNumber { get; }
    public CoverageSnapshot(IStorageDescriptor storageDescriptor, RawSectionCollection standaloneSections, IReadOnlyList`1<RawSectionCollection> groups, RawSectionCollection totalGroup, IEnumerable`1<IGroupedSectionMerger> groupedSectionMergers);
    private static CoverageSnapshot();
    [CompilerGeneratedAttribute]
public sealed virtual IStorageDescriptor get_StorageDescriptor();
    public sealed virtual ISnapshotSectionCollection get_StandaloneSections();
    public sealed virtual IRawSectionCollection get_RawStandaloneSections();
    public sealed virtual ISnapshotSectionCollection get_TotalGroup();
    public sealed virtual IRawSectionCollection get_RawTotalGroup();
    public sealed virtual int get_GroupsNumber();
    public sealed virtual bool TryGetGroup(int groupIndex, ISnapshotSectionCollection& group);
    public sealed virtual IRawSectionCollection GetRawGroup(int groupIndex);
    private ISnapshotSectionCollection CalculateTotalGroup();
}
internal static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.CoverageSnapshotComposer : object {
    private static ILogger ourLogger;
    private static CoverageSnapshotComposer();
    public static CoverageSnapshot Compose(ISnapshotStorage storage, IEnumerable`1<IStandaloneSnapshotDataDescriptor> standaloneDescriptors, IEnumerable`1<IGroupedSnapshotDataDescriptor> groupedDescriptors, Lifetime lifetime);
    private static void ProcessCurrentGroup(CoverageSnapshotComposerContext context, bool nextSectionIsGrouped, bool nextSectionIsTotal, ushort nextSectionType);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.CoverageSnapshotManager : object {
    private IEnumerable`1<IStandaloneSnapshotDataDescriptor> myStandaloneSnapshotDataDescriptors;
    private IEnumerable`1<IGroupedSnapshotDataDescriptor> myGroupedSectionDataDescriptors;
    private ICoverageSnapshotStorageComplementer myCoverageSnapshotStorageComplementer;
    private ILogger myLogger;
    public CoverageSnapshotManager(IParallelImmutableList`1<IStandaloneSnapshotDataDescriptor> standaloneSnapshotDataDescriptors, IEnumerable`1<IGroupedSnapshotDataDescriptor> groupedSectionDataDescriptors, ICoverageSnapshotStorageComplementer coverageSnapshotStorageComplementer, ILogger logger);
    public sealed virtual ICoverageSnapshot Open(IStorageDescriptor source, Lifetime lifetime);
    public sealed virtual IRawCoverageSnapshot OpenAsRaw(IStorageDescriptor source, Lifetime lifetime);
    private CoverageSnapshot DoOpen(IStorageDescriptor source, Lifetime lifetime);
    public sealed virtual void Complement(IStorageDescriptor source, ISnapshotScopeInfoProvider snapshotScopeInfoProvider, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, IProgressIndicator progress);
    public sealed virtual void SaveAs(IStorageDescriptor source, IStorageDescriptor target, IProgressIndicator progress);
    public sealed virtual void Move(IStorageDescriptor source, IStorageDescriptor target, IProgressIndicator progress);
    public sealed virtual void TryDelete(IStorageDescriptor descriptor);
    public sealed virtual void Merge(IEnumerable`1<IStorageDescriptor> sources, IStorageDescriptor target, MergeType mergeType, MetadataMappingMode metadataMappingMode, bool mergeToSingleFile, IProgressIndicator progress);
    public sealed virtual void Merge(IEnumerable`1<IStorageDescriptor> sourceDescriptors, IStorageDescriptor targetDescriptor, MergeType mergeType, MetadataMappingMode metadataMappingMode, CleanupPolicy cleanupPolicy, bool mergeToSingleFile, string tempDir, int maxNumberOfSnapshotsToBeMergedSimultaneously, IProgressIndicator progress);
    public sealed virtual bool IsCoverageSnapshot(IStorageDescriptor descriptor);
    public sealed virtual bool IsSupportedSnapshotProductVersion(Version snapshotProductVersion);
    public sealed virtual IEnumerable`1<string> ListFiles(IStorageDescriptor descriptor);
    private static ISnapshotStorage OpenStorage(IStorageDescriptor source, Lifetime lifetime);
    private IEnumerable`1<FileSystemPath> GetFileNames(FileSystemPath indexFile);
    private static List`1<TMerger> OrderByRequirements(IEnumerable`1<TMerger> mergers);
    private static Nullable`1<int> CheckDependency(TMerger merger1, TMerger merger2);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Environment.EnvironmentSectionMerger : object {
    private ISectionCollectionWriter mySectionCollectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public EnvironmentSectionMerger(ISectionCollectionWriter sectionCollectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Environment.EnvironmentSnapshotDataDescriptor : StandaloneSnapshotDataDescriptorBase {
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupedSnapshotDataDescriptorBase : object {
    protected SectionCollectionSpecification RegularGroupSpecification;
    protected SectionCollectionSpecification TotalGroupSpecification;
    protected Dictionary`2<ushort, IEnumerable`1<ISectionReader>> SectionReaders;
    protected IList`1<ISectionCollectionWriter> RegularGroupSectionWriters;
    protected IList`1<ISectionCollectionWriter> TotalGroupSectionWriters;
    protected ICollection`1<IGroupedSectionMerger> SectionMergers;
    private ISectionCollectionSpecification JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.RegularGroupSpecification { get; }
    private ISectionCollectionSpecification JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.TotalGroupSpecification { get; }
    private IReadOnlyDictionary`2<ushort, IEnumerable`1<ISectionReader>> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISnapshotDataDescriptor.SectionReaders { get; }
    private IEnumerable`1<ISectionCollectionWriter> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.RegularGroupSectionWriters { get; }
    private IEnumerable`1<ISectionCollectionWriter> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.TotalGroupSectionWriters { get; }
    private IEnumerable`1<IGroupedSectionMerger> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.SectionMergers { get; }
    private sealed virtual override ISectionCollectionSpecification JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.get_RegularGroupSpecification();
    private sealed virtual override ISectionCollectionSpecification JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.get_TotalGroupSpecification();
    private sealed virtual override IReadOnlyDictionary`2<ushort, IEnumerable`1<ISectionReader>> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISnapshotDataDescriptor.get_SectionReaders();
    private sealed virtual override IEnumerable`1<ISectionCollectionWriter> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.get_RegularGroupSectionWriters();
    private sealed virtual override IEnumerable`1<ISectionCollectionWriter> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.get_TotalGroupSectionWriters();
    private sealed virtual override IEnumerable`1<IGroupedSectionMerger> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor.get_SectionMergers();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupIndexSnapshotDataDescriptor : StandaloneSnapshotDataDescriptorBase {
    public static ushort GroupNameIndexSectionType;
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupNameIndexSection : object {
    private IReadOnlyDictionary`2<string, IReadOnlyList`1<int>> myGroupIndices;
    public IReadOnlyList`1<string> GroupNames { get; }
    public GroupNameIndexSection(IReadOnlyDictionary`2<string, IReadOnlyList`1<int>> groupIndices);
    public sealed virtual IReadOnlyList`1<string> get_GroupNames();
    public sealed virtual IReadOnlyList`1<int> GetGroupIndices(string groupName);
    public sealed virtual string GetGroupName(int groupIndex);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupNameIndexSectionMerger : object {
    private ISectionWriter mySectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public GroupNameIndexSectionMerger(ISectionWriter sectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupNameIndexSectionReader0000 : SectionReaderBase`1<GroupNameIndexSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual GroupNameIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupNameIndexSectionReader0001 : SectionReaderBase`1<GroupNameIndexSection> {
    private static string TotalGroupId;
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual GroupNameIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupNameIndexSectionReader0002 : SectionReaderBase`1<GroupNameIndexSection> {
    private static string TotalGroupId;
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual GroupNameIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupNameIndexSectionReader0003 : SectionReaderBase`1<GroupNameIndexSection> {
    private static string TotalGroupId;
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual GroupNameIndexSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.GroupNameIndexSectionWriter : SectionWriterBase`1<IGroupNameIndexSection> {
    protected virtual void WriteSection(IGroupNameIndexSection section, IStorageSectionWriter storageSectionWriter);
}
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.GroupIndex.SpecialGroupNames : object {
    public static string AuxiliaryGroupName;
    public static char SessionIdSeparator;
}
internal abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.InMemorySectionDataProviderBase : object {
    private LocalLazy`2<UnmanagedBlock, SnapshotStorageSection> myLazyUnmanagedBlock;
    [CompilerGeneratedAttribute]
private Lazy`1<IBlob> <LazyBlob>k__BackingField;
    protected Lazy`1<IBlob> LazyBlob { get; }
    protected InMemorySectionDataProviderBase(SnapshotStorageSection storageSection, bool lazyLoad);
    [CompilerGeneratedAttribute]
protected Lazy`1<IBlob> get_LazyBlob();
    private IBlob CreateBlob();
    public sealed virtual void Dispose();
}
public enum JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.CleanupPolicy : Enum {
    public int value__;
    public static CleanupPolicy KeepSourceSnapshots;
    public static CleanupPolicy RemoveSourceSnapshots;
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Complementer.IComplementaryMetadataSectionsBuilder {
    public abstract virtual void ProcessComplementaryMethod(MetadataId metadataId, ILowLevelMetadata metadata, PEFile assemblyPeFile, DebugData debugData);
    public abstract virtual IEnumerable`1<ISection> GetSections();
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Complementer.IComplementaryMetadataSectionsBuilderFactory {
    public abstract virtual IComplementaryMetadataSectionsBuilder CreateComplementarySectionsBuilder(Lifetime lifetime, ICoverageSnapshot sourceSnapshot);
}
internal interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Complementer.ICoverageSnapshotStorageComplementer {
    public abstract virtual void Complement(Func`2<Lifetime, ISnapshotStorage> getSourceStorage, Func`2<Lifetime, IStorageSectionWriter> getStorageAppender, ISnapshotScopeInfoProvider snapshotScopeInfoProvider, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, IProgressIndicator progress);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.CoverageSnapshotExtensions : object {
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IEnvironmentSection GetEnvironmentSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[NotNullAttribute]
public static IMetadataSection GetMetadataSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[NotNullAttribute]
public static IDocumentRangeSection GetDocumentRangeSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[NotNullAttribute]
public static IMethodRangeSection GetMethodRangeSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[NotNullAttribute]
public static IStatementDataSection GetStatementDataSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISourceServerDataSection GetSourceServerDataSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFilteredMethodsSection GetFilteredMethodsSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFilteredTypesSection GetFilteredTypesSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFilteredPropertiesSection GetFilteredPropertiesSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IFilteredEventsSection GetFilteredEventsSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[NotNullAttribute]
public static IGroupNameIndexSection GetGroupNameIndexSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[NotNullAttribute]
public static ISnapshotSectionCollection GetGroup(ICoverageSnapshot snapshot, int groupIndex);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static IModuleStatSection GetModuleStatSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[CanBeNullAttribute]
public static ISyntheticPointsSection GetSyntheticPointsSection(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
public static bool IsEmpty(ICoverageSnapshot snapshot);
    [ExtensionAttribute]
[NotNullAttribute]
public static ICumulativeSnapshotReverseCoverageSection GetReverseSection(ICoverageSnapshot snapshot);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.EntitySet`1 : List`1<T> {
    public EntitySet`1(IEnumerable`1<T> collection);
    public EntitySet`1(int entitiesNumber, Func`1<T> entityFactory);
    public sealed virtual void AssertNotEmpty();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.EntitySetExtensions : object {
    [ExtensionAttribute]
public static IEntitySet`1<TTarget> Select(IEntitySet`1<TSource> source, Func`2<TSource, TTarget> selector);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.GroupIndex.IGroupNameIndexSection {
    public IReadOnlyList`1<string> GroupNames { get; }
    public abstract virtual IReadOnlyList`1<string> get_GroupNames();
    public abstract virtual IReadOnlyList`1<int> GetGroupIndices(string groupName);
    public abstract virtual string GetGroupName(int groupIndex);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.GroupIndex.IReverseGroupIndexMapping {
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.GroupIndex.IReverseGroupIndexMappingInResultingSnapshot {
    public int TotalGroupIndex { get; }
    public int GroupsNumber { get; }
    public abstract virtual int get_TotalGroupIndex();
    public abstract virtual int get_GroupsNumber();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ICoverageSnapshot {
    public IStorageDescriptor StorageDescriptor { get; }
    public ISnapshotSectionCollection StandaloneSections { get; }
    public int GroupsNumber { get; }
    public ISnapshotSectionCollection TotalGroup { get; }
    public abstract virtual IStorageDescriptor get_StorageDescriptor();
    public abstract virtual ISnapshotSectionCollection get_StandaloneSections();
    public abstract virtual int get_GroupsNumber();
    public abstract virtual bool TryGetGroup(int groupIndex, ISnapshotSectionCollection& group);
    public abstract virtual ISnapshotSectionCollection get_TotalGroup();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ICoverageSnapshotManager {
    public abstract virtual ICoverageSnapshot Open(IStorageDescriptor source, Lifetime lifetime);
    public abstract virtual IRawCoverageSnapshot OpenAsRaw(IStorageDescriptor source, Lifetime lifetime);
    public abstract virtual void Complement(IStorageDescriptor source, ISnapshotScopeInfoProvider snapshotScopeInfoProvider, PatternFilterInfo[] patternFilters, AttributeFilterInfo[] attributeFilters, IProgressIndicator progress);
    public abstract virtual void SaveAs(IStorageDescriptor source, IStorageDescriptor target, IProgressIndicator progress);
    public abstract virtual void Move(IStorageDescriptor source, IStorageDescriptor target, IProgressIndicator progress);
    public abstract virtual void TryDelete(IStorageDescriptor source);
    public abstract virtual void Merge(IEnumerable`1<IStorageDescriptor> sourceDescriptors, IStorageDescriptor targetDescriptor, MergeType mergeType, MetadataMappingMode metadataMappingMode, bool mergeToSingleFile, IProgressIndicator progress);
    public abstract virtual void Merge(IEnumerable`1<IStorageDescriptor> sourceDescriptors, IStorageDescriptor targetDescriptor, MergeType mergeType, MetadataMappingMode metadataMappingMode, CleanupPolicy cleanupPolicy, bool mergeToSingleFile, string tempDir, int maxNumberOfSnapshotsToBeMergedSimultaneously, IProgressIndicator progress);
    public abstract virtual bool IsCoverageSnapshot(IStorageDescriptor descriptor);
    public abstract virtual bool IsSupportedSnapshotProductVersion(Version snapshotProductVersion);
    public abstract virtual IEnumerable`1<string> ListFiles(IStorageDescriptor descriptor);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IEntitySet`1 {
    public abstract virtual void AssertNotEmpty();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSectionMerger {
    public abstract virtual IGroupedSectionMergerData CreateData(bool isTotal);
    public abstract virtual void AppendData(IGroupedSectionMergerData acceptorData, IRawSectionCollection contributionGroup, IMergeContext context, Nullable`1<int> contributionGroupSnapshotIndex);
    public abstract virtual void AppendData(IGroupedSectionMergerData acceptorData, IGroupedSectionMergerData contributionData, IMergeContext context);
    public abstract virtual void FlushData(IGroupedSectionMergerData data, IMergeContext context, IStorageSectionWriter writer);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSectionMergerData {
    public bool IsTotal { get; }
    public abstract virtual bool get_IsTotal();
    public abstract virtual IReadOnlyDictionary`2<Type, ISection> GetSnapshotSections(IMergeContext context);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IGroupedSnapshotDataDescriptor {
    public ISectionCollectionSpecification RegularGroupSpecification { get; }
    public ISectionCollectionSpecification TotalGroupSpecification { get; }
    public IEnumerable`1<ISectionCollectionWriter> RegularGroupSectionWriters { get; }
    public IEnumerable`1<ISectionCollectionWriter> TotalGroupSectionWriters { get; }
    public IEnumerable`1<IGroupedSectionMerger> SectionMergers { get; }
    public abstract virtual ISectionCollectionSpecification get_RegularGroupSpecification();
    public abstract virtual ISectionCollectionSpecification get_TotalGroupSpecification();
    public abstract virtual IEnumerable`1<ISectionCollectionWriter> get_RegularGroupSectionWriters();
    public abstract virtual IEnumerable`1<ISectionCollectionWriter> get_TotalGroupSectionWriters();
    public abstract virtual IEnumerable`1<IGroupedSectionMerger> get_SectionMergers();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ILoadableSection`1 {
    public abstract virtual TInMemoryDataProvider LoadAll(bool lazyLoad);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ILowLevelMetadataProvider {
    public abstract virtual ILowLevelMetadata TryGetOrCreateMetadata(Lifetime lifetime, Guid mvid, bool putToProviderCache, bool useCachingMetadataImpl, Func`1<Stream> getMetadataStream);
    public abstract virtual void ExpireCache();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IMergeContext {
    public abstract virtual bool TryGetValue(TValue& value);
    public abstract virtual void AddValue(TValue value);
    public abstract virtual void RemoveValue(Type valueType);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IRawCoverageSnapshot {
    public IRawSectionCollection RawStandaloneSections { get; }
    public int GroupsNumber { get; }
    [CanBeNullAttribute]
public IRawSectionCollection RawTotalGroup { get; }
    public abstract virtual IRawSectionCollection get_RawStandaloneSections();
    public abstract virtual int get_GroupsNumber();
    public abstract virtual IRawSectionCollection GetRawGroup(int groupIndex);
    public abstract virtual IRawSectionCollection get_RawTotalGroup();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IRawSectionCollection {
    public abstract virtual bool TryGetRawSection(SnapshotStorageSection& section);
    public abstract virtual bool TryGetSnapshotSection(Lifetime lifetime, TSection& section);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISectionCollectionSpecification {
    public IEnumerable`1<Type> CompulsoryTypes { get; }
    public IEnumerable`1<Type> OptionalTypes { get; }
    public abstract virtual IEnumerable`1<Type> get_CompulsoryTypes();
    public abstract virtual IEnumerable`1<Type> get_OptionalTypes();
    public abstract virtual bool TryGetSnapshotSectionTypeByStorageSectionType(ushort storageSectionType, Type& snapshotSectionType);
    public abstract virtual bool TryGetStorageSectionTypesBySnapshotSectionType(Type snapshotSectionType, IEnumerable`1& storageSectionTypes);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISectionCollectionWriter {
    public abstract virtual void WriteKnownSections(IEnumerable`1<ISection> sections, IStorageSectionWriter storageSectionWriter);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISectionConcatenator {
    public abstract virtual object ConcatenateSections(IReadOnlyList`1<object> sections);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISectionMerger {
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public abstract virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    public abstract virtual IEnumerable`1<Type> get_ProducedContextEntries();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISnapshotDataDescriptor {
    public IReadOnlyDictionary`2<ushort, IEnumerable`1<ISectionReader>> SectionReaders { get; }
    public abstract virtual IReadOnlyDictionary`2<ushort, IEnumerable`1<ISectionReader>> get_SectionReaders();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISnapshotScopeInfoProvider {
    public abstract virtual IEnumerable`1<FileSystemPath> GetAssemblies();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISnapshotSectionCollection {
    public abstract virtual bool TryGetSnapshotSection(TSection& section);
    public abstract virtual IReadOnlyList`1<ISection> GetAllSections();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSectionMerger {
    public abstract virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
}
[DerivedComponentsInstantiationRequirementAttribute("1")]
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor {
    public ISectionCollectionSpecification StandaloneSpecification { get; }
    public IEnumerable`1<ISectionCollectionWriter> SectionWriters { get; }
    public IEnumerable`1<IStandaloneSectionMerger> SectionMergers { get; }
    public IReadOnlyDictionary`2<Type, ISectionConcatenator> SectionConcatenators { get; }
    public abstract virtual ISectionCollectionSpecification get_StandaloneSpecification();
    public abstract virtual IEnumerable`1<ISectionCollectionWriter> get_SectionWriters();
    public abstract virtual IEnumerable`1<IStandaloneSectionMerger> get_SectionMergers();
    public abstract virtual IReadOnlyDictionary`2<Type, ISectionConcatenator> get_SectionConcatenators();
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MergeContextExtensions : object {
    [ExtensionAttribute]
public static TValue GetValue(IMergeContext context);
    [ExtensionAttribute]
public static void RemoveValue(IMergeContext context);
}
public enum JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MergeType : Enum {
    public int value__;
    public static MergeType OrMerge;
    public static MergeType Replace;
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Metadata.IFilteredEventsSection {
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Metadata.IFilteredMetadataSection {
    public IReadOnlyCollection`1<MetadataId> MetadataIds { get; }
    public abstract virtual ISet`1<MetadataToken> GetFilteredMetadataTokens(SectionIndex`1<IMetadataSection> metadataIndex);
    public abstract virtual IReadOnlyCollection`1<MetadataId> get_MetadataIds();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Metadata.IFilteredMethodsSection {
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Metadata.IFilteredPropertiesSection {
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Metadata.IFilteredTypesSection {
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Metadata.IMetadataMapper {
    public abstract virtual bool TryGetResultingMetadataId(MetadataId sourceMetadataId, MetadataId& resultingMetadataId);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<MetadataId> GetSourceMetadataIds(MetadataId resultingMetadataId);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<SectionIndex`1<IMetadataSection>> GetAllResultingMetadataIndices();
    public abstract virtual bool TryGetResultingMetadataIndex(SectionIndex`1<IMetadataSection> sourceMetadataIndex, SectionIndex`1& resultingMetadataIndex);
}
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.Metadata.ModuleStatFlagsHelper : object {
    public static bool ModuleHasMetadata(ModuleStatFlags moduleFlags);
    public static bool ModuleIsMatch(ModuleStatFlags moduleFlags);
    public static bool ModuleHasPdb(ModuleStatFlags moduleFlags);
    public static ModuleStatFlags CreateModuleFlags(bool hasMetadata, bool isMatch);
}
public enum JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MetadataMappingMode : Enum {
    public int value__;
    public static MetadataMappingMode Mvid;
    public static MetadataMappingMode NameAndVersion;
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.DocumentChecksum : object {
    [CompilerGeneratedAttribute]
private Guid <AlgorithmId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Guid AlgorithmId { get; }
    [NotNullAttribute]
public Byte[] Value { get; }
    public DocumentChecksum(Guid algorithmId, Byte[] value);
    [CompilerGeneratedAttribute]
public Guid get_AlgorithmId();
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    public sealed virtual bool Equals(DocumentChecksum other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.DocumentData : object {
    private Nullable`1<int> myHashCode;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentChecksum <Checksum>k__BackingField;
    [NotNullAttribute]
public string Url { get; }
    [CanBeNullAttribute]
public DocumentChecksum Checksum { get; }
    public DocumentData(string url, DocumentChecksum checksum);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public DocumentChecksum get_Checksum();
    public sealed virtual bool Equals(DocumentData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.IDocumentRangeSection {
    public int DocumentsCount { get; }
    public IEnumerable`1<KeyValuePair`2<int, DocumentData>> IndexedDocuments { get; }
    public abstract virtual int get_DocumentsCount();
    public abstract virtual bool TryGetDocument(int index, DocumentData& document);
    public abstract virtual bool TryGetDocumentIndex(DocumentData document, Int32& index);
    public abstract virtual IEnumerable`1<int> GetAllDocumentIndices(string url);
    public abstract virtual IEnumerable`1<KeyValuePair`2<int, DocumentData>> get_IndexedDocuments();
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.IMetadataIdMapping {
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.IMethodRangeSection {
    public IReadOnlyCollection`1<KeyValuePair`2<MetadataId, MethodData>> Methods { get; }
    public abstract virtual IReadOnlyCollection`1<KeyValuePair`2<MetadataId, MethodData>> get_Methods();
    public abstract virtual bool TryGetMethod(MetadataId methodId, MethodData& methodData);
    public abstract virtual bool TryGetMethodStatementsCount(MetadataId methodId, StatementFilterType filterType, Int32& count);
    public abstract virtual bool TryGetMethodStatementDataOffset(MetadataId methodId, SectionOffset`1& offset);
    public abstract virtual IReadOnlyList`1<MetadataId> GetMethodsInDocument(int documentIndex);
}
[DefaultMemberAttribute("Item")]
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.IStatementDataSection {
    public long Size { get; }
    public SingleStatementData[] Item { get; }
    public abstract virtual long get_Size();
    public abstract virtual int GetStatementCount(SectionOffset`1<IStatementDataSection> offset);
    public abstract virtual SingleStatementData GetSingleStatementData(SectionOffset`1<IStatementDataSection> offset, int statementIndex);
    public abstract virtual FrugalLocalList`1<int> GetHiddenStatementIndices(SectionOffset`1<IStatementDataSection> offset);
    public abstract virtual FrugalLocalList`1<Pair`2<int, SourceFileRange>> GetStatementRangesInAllDocuments(SectionOffset`1<IStatementDataSection> offset);
    public abstract virtual SingleStatementData[] get_Item(SectionOffset`1<IStatementDataSection> offset);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.IStatementFilter {
    public abstract virtual bool StatementIncluded(MetadataId metadataId, int statementIndex);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.ISyntheticPointsSection {
    public abstract virtual IReadOnlySet`1<int> GetSyntheticPoints(MetadataId metadataId);
}
[IsReadOnlyAttribute]
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.LineAndColumn : ValueType {
    public static LineAndColumn Invalid;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; }
    public int Column { get; }
    public LineAndColumn(int line, int column);
    private static LineAndColumn();
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public int get_Column();
    public bool IsValid();
    public virtual string ToString();
    public sealed virtual bool Equals(LineAndColumn other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(LineAndColumn other);
    public sealed virtual int CompareTo(object obj);
    public static bool op_LessThan(LineAndColumn left, LineAndColumn right);
    public static bool op_GreaterThan(LineAndColumn left, LineAndColumn right);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.MethodData : object {
    [CompilerGeneratedAttribute]
private Int32[] <DocumentIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionOffset`1<IStatementDataSection> <StatementDataOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<StatementFilterType, int> <FilteredStatementCount>k__BackingField;
    public Int32[] DocumentIndices { get; }
    public SectionOffset`1<IStatementDataSection> StatementDataOffset { get; }
    public IReadOnlyDictionary`2<StatementFilterType, int> FilteredStatementCount { get; }
    internal MethodData(Int32[] documentIndices, SectionOffset`1<IStatementDataSection> statementDataOffset, IReadOnlyDictionary`2<StatementFilterType, int> filteredStatementCount);
    [CompilerGeneratedAttribute]
public Int32[] get_DocumentIndices();
    [CompilerGeneratedAttribute]
public SectionOffset`1<IStatementDataSection> get_StatementDataOffset();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<StatementFilterType, int> get_FilteredStatementCount();
}
[IsReadOnlyAttribute]
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.SingleStatementData : ValueType {
    public static int CompilerHiddenStatementLine;
    public static int DotCoverHiddenStatementLine;
    public static SingleStatementData Invalid;
    [CompilerGeneratedAttribute]
private int <DocumentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceFileRange <Range>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ILOffset>k__BackingField;
    public int DocumentIndex { get; }
    public SourceFileRange Range { get; }
    public int ILOffset { get; }
    public SingleStatementData(int documentIndex, int line, int column, int endLine, int endColumn, int ilOffset);
    public SingleStatementData(int documentIndex, SourceFileRange range, int ilOffset);
    private static SingleStatementData();
    [CompilerGeneratedAttribute]
public int get_DocumentIndex();
    [CompilerGeneratedAttribute]
public SourceFileRange get_Range();
    [CompilerGeneratedAttribute]
public int get_ILOffset();
    public bool IsValid();
    public bool IsHidden();
    public bool IsCompilerHidden();
    public static SingleStatementData CreateHiddenStatement(int documentIndex);
    public sealed virtual bool Equals(SingleStatementData other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.SourceFileRange : ValueType {
    public static SourceFileRange Invalid;
    [CompilerGeneratedAttribute]
private LineAndColumn <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private LineAndColumn <End>k__BackingField;
    public LineAndColumn Start { get; }
    public LineAndColumn End { get; }
    public SourceFileRange(LineAndColumn start, LineAndColumn end);
    private static SourceFileRange();
    [CompilerGeneratedAttribute]
public LineAndColumn get_Start();
    [CompilerGeneratedAttribute]
public LineAndColumn get_End();
    public bool IsValid();
    public sealed virtual bool Equals(SourceFileRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SourceFileRange left, SourceFileRange right);
    public static bool op_Inequality(SourceFileRange left, SourceFileRange right);
    public virtual string ToString();
}
public enum JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.MethodDetails.StatementFilterType : Enum {
    public byte value__;
    public static StatementFilterType None;
    public static StatementFilterType InvalidRanges;
    public static StatementFilterType ExceptionHandlers;
    public static StatementFilterType ExceptionThrowers;
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ModuleMatchingData : object {
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyNameInfo <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<TargetFrameworkId> <TargetFramework>k__BackingField;
    [NotNullAttribute]
public string ModuleName { get; }
    [CanBeNullAttribute]
public AssemblyNameInfo AssemblyName { get; }
    [ItemCanBeNullAttribute]
public Lazy`1<TargetFrameworkId> TargetFramework { get; }
    public ModuleMatchingData(string moduleName, AssemblyNameInfo assemblyName, Lazy`1<TargetFrameworkId> targetFramework);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public AssemblyNameInfo get_AssemblyName();
    [CompilerGeneratedAttribute]
public Lazy`1<TargetFrameworkId> get_TargetFramework();
    public ModuleMatchingData ForceLazyValuesCreation();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ModuleMatchingDataReaderWriter : object {
    [ExtensionAttribute]
public static void WriteModuleMatchingData(BinaryWriter writer, ModuleMatchingData data);
    [ExtensionAttribute]
public static ModuleMatchingData ReadModuleMatchingData(BinaryReader reader);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ModuleMatchingResult : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <NewMvid>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Guid> <OldMvids>k__BackingField;
    public Nullable`1<Guid> NewMvid { get; }
    [NotNullAttribute]
public IReadOnlyList`1<Guid> OldMvids { get; }
    public ModuleMatchingResult(Nullable`1<Guid> newMvid, IReadOnlyList`1<Guid> oldMvids);
    public ModuleMatchingResult(Nullable`1<Guid> newMvid, Guid oldMvid);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_NewMvid();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Guid> get_OldMvids();
}
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ModulesMatcher : object {
    public static ModuleMatchingResult[] Match(IReadOnlyDictionary`2<Guid, Lazy`1<ModuleMatchingData>> newModules, IReadOnlyDictionary`2<Guid, ModuleMatchingData> oldModules, bool ignoreTargetFrameworks, bool assemblyInfoCanBeAbsentForNewModules);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.SectionCollectionExtensions : object {
    [ExtensionAttribute]
[NotNullAttribute]
public static TSection GetSnapshotSection(ISnapshotSectionCollection collection);
    [ExtensionAttribute]
[NotNullAttribute]
public static SnapshotStorageSection GetRawSection(IRawSectionCollection collection);
    [ExtensionAttribute]
[NotNullAttribute]
public static TSection GetSnapshotSection(IRawSectionCollection collection, Lifetime lifetime);
    [ExtensionAttribute]
public static void CopySection(IRawSectionCollection collection, IStorageSectionWriter storageSectionWriter);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.SectionCollectionSpecificationExtensions : object {
    [ExtensionAttribute]
public static bool ContainsStorageSectionType(ISectionCollectionSpecification specification, ushort storageSectionType);
    [ExtensionAttribute]
public static Type GetSnapshotSectionTypeByStorageSectionType(ISectionCollectionSpecification specification, ushort storageSectionType);
}
public abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.SectionConcatenatorBase`1 : object {
    private sealed virtual override object JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISectionConcatenator.ConcatenateSections(IReadOnlyList`1<object> sections);
    protected abstract virtual TSection ConcatenateSections(IReadOnlyList`1<TSection> sections);
}
public interface JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.SourceServerData.ISourceServerDataSection {
    public abstract virtual bool TryGetSourceServerInfo(SectionIndex`1<IMetadataSection> metadataIndex, SrcSrvInfo& sourceServerInfo);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.StorageDescriptorExtensions : object {
    [ExtensionAttribute]
public static FileSystemPath GetFileSystemPath(IStorageDescriptor descriptor);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.LifetimedCache`2 : object {
    private object mySyncObject;
    private Dictionary`2<TKey, CacheItem<TKey, TValue>> myCache;
    public LifetimedCache`2(IEqualityComparer`1<TKey> comparer);
    public bool GetOrCreateValue(TKey key, Lifetime lifetime, TValue& value, Func`3<TKey, Lifetime, TValue> create);
    public TValue GetOrCreateValue(TKey key, Lifetime lifetime, Func`3<TKey, Lifetime, TValue> create);
    public bool TryGetValue(TKey key, Lifetime lifetime, TValue& value);
    private void OnCacheItemLifetimeTerminated(TKey key, CacheItem<TKey, TValue> item);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MergeContext : object {
    private IDictionary`2<Type, object> myDictionary;
    public virtual bool TryGetValue(TValue& value);
    public sealed virtual void AddValue(TValue value);
    public sealed virtual void RemoveValue(Type valueType);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredEventsSection : FilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredEventsSectionConcatenator : FilteredMetadataSectionConcatenator`1<FilteredEventsSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredEventsSectionMerger : FilteredMetadataSectionMerger`2<IFilteredEventsSection, FilteredEventsSection> {
    public FilteredEventsSectionMerger(ISectionCollectionWriter sectionCollectionWriter);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredEventsSectionReader0000 : FilteredMetadataSectionReader0000`1<FilteredEventsSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredEventsSectionWriter : FilteredMetadataSectionWriter`1<IFilteredEventsSection> {
    protected ushort SectionType { get; }
    protected virtual ushort get_SectionType();
}
internal abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMetadataSection : object {
    public OneToSetMap`2<SectionIndex`1<IMetadataSection>, MetadataToken> FilteredTokens;
    public IReadOnlyCollection`1<MetadataId> MetadataIds { get; }
    public sealed virtual ISet`1<MetadataToken> GetFilteredMetadataTokens(SectionIndex`1<IMetadataSection> metadataIndex);
    public sealed virtual IReadOnlyCollection`1<MetadataId> get_MetadataIds();
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMetadataSectionConcatenator`1 : SectionConcatenatorBase`1<TSection> {
    protected virtual TSection ConcatenateSections(IReadOnlyList`1<TSection> sections);
}
internal abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMetadataSectionMerger`2 : object {
    private ISectionCollectionWriter mySectionCollectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    protected FilteredMetadataSectionMerger`2(ISectionCollectionWriter sectionCollectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
    private static MetadataId[] GetUnfilteredMetadataIds(IEnumerable`1<MetadataId> resultingFilteredMetadataIds, IEnumerable`1<MetadataId> snapshotFilteredMetadataIds, IMetadataMapper metadataMapper);
}
internal abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMetadataSectionReader0000`1 : SectionReaderBase`1<TSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual TSection ReadSection(SnapshotStorageSection storageSection);
}
internal abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMetadataSectionWriter`1 : SectionWriterBase`1<TSection> {
    protected ushort SectionType { get; }
    protected abstract virtual ushort get_SectionType();
    protected virtual void WriteSection(TSection section, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMethodsSection : FilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMethodsSectionConcatenator : FilteredMetadataSectionConcatenator`1<FilteredMethodsSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMethodsSectionMerger : FilteredMetadataSectionMerger`2<IFilteredMethodsSection, FilteredMethodsSection> {
    public FilteredMethodsSectionMerger(ISectionCollectionWriter sectionCollectionWriter);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMethodsSectionReader0000 : FilteredMetadataSectionReader0000`1<FilteredMethodsSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredMethodsSectionWriter : FilteredMetadataSectionWriter`1<IFilteredMethodsSection> {
    protected ushort SectionType { get; }
    protected virtual ushort get_SectionType();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredPropertiesSection : FilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredPropertiesSectionConcatenator : FilteredMetadataSectionConcatenator`1<FilteredPropertiesSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredPropertiesSectionMerger : FilteredMetadataSectionMerger`2<IFilteredPropertiesSection, FilteredPropertiesSection> {
    public FilteredPropertiesSectionMerger(ISectionCollectionWriter sectionCollectionWriter);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredPropertiesSectionReader0000 : FilteredMetadataSectionReader0000`1<FilteredPropertiesSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredPropertiesSectionWriter : FilteredMetadataSectionWriter`1<IFilteredPropertiesSection> {
    protected ushort SectionType { get; }
    protected virtual ushort get_SectionType();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredTypesSection : FilteredMetadataSection {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredTypesSectionConcatenator : FilteredMetadataSectionConcatenator`1<FilteredTypesSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredTypesSectionMerger : FilteredMetadataSectionMerger`2<IFilteredTypesSection, FilteredTypesSection> {
    public FilteredTypesSectionMerger(ISectionCollectionWriter sectionCollectionWriter);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredTypesSectionReader0000 : FilteredMetadataSectionReader0000`1<FilteredTypesSection> {
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.FilteredTypesSectionWriter : FilteredMetadataSectionWriter`1<IFilteredTypesSection> {
    protected ushort SectionType { get; }
    protected virtual ushort get_SectionType();
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.LowLevelMetadataProvider : object {
    private static TimeSpan ourCachedMetadataExpirationTime;
    private Lifetime myLifetime;
    private LifetimedCache`2<Guid, ILowLevelMetadata> myCache;
    private LifetimeDefinition myCacheExpirationLifetimeDef;
    public LowLevelMetadataProvider(Lifetime lifetime);
    private static LowLevelMetadataProvider();
    public sealed virtual ILowLevelMetadata TryGetOrCreateMetadata(Lifetime lifetime, Guid mvid, bool putToProviderCache, bool useCachingMetadataImpl, Func`1<Stream> getMetadataStream);
    private static IMetadataAccess TryGetMetadataAccess(Lifetime lifetime, Guid mvid, Func`1<Stream> getMetadataStream);
    public sealed virtual void ExpireCache();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.LowLevelMetadataWithCache : object {
    private IMetadataAccess myMetadataAccess;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myTypeDefProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myTypeRefProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myTypeSpecBlobs;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMethodProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myFieldProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myStandaloneSigBlobs;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMethodSpecProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMemberRefProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myModuleRefProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myEventProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myPropertyProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMethodDefCustomAttributes;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMethodDefCustomAttributeTypeRefs;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMethodDefCustomAttributeProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myGenericParameters;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myGenericParamProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myMethodDefsByType;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myEventsByType;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myPropertiesByType;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myFieldsByType;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myNestedTypeDefsByType;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myInterfaceImplementationsByType;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myInterfaceImplementationProperties;
    private IDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) myReferencedAssemblies;
    [CompilerGeneratedAttribute]
private Guid <Mvid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyNameInfo <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataToken <AssemblyToken>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTokenRange <TypeDefs>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTokenRange <TypeRefs>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTokenRange <TypeSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTokenRange <MethodDefs>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTokenRange <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataTokenRange <Events>k__BackingField;
    public Guid Mvid { get; }
    public string ModuleName { get; }
    public AssemblyNameInfo AssemblyName { get; }
    public MetadataToken AssemblyToken { get; }
    public MetadataTokenRange TypeDefs { get; }
    public MetadataTokenRange TypeRefs { get; }
    public MetadataTokenRange TypeSpecs { get; }
    public MetadataTokenRange MethodDefs { get; }
    public MetadataTokenRange Properties { get; }
    public MetadataTokenRange Events { get; }
    public LowLevelMetadataWithCache(IMetadataAccess metadataAccess);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Mvid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ModuleName();
    [CompilerGeneratedAttribute]
public sealed virtual AssemblyNameInfo get_AssemblyName();
    [CompilerGeneratedAttribute]
public sealed virtual MetadataToken get_AssemblyToken();
    [CompilerGeneratedAttribute]
public sealed virtual MetadataTokenRange get_TypeDefs();
    [CompilerGeneratedAttribute]
public sealed virtual MetadataTokenRange get_TypeRefs();
    [CompilerGeneratedAttribute]
public sealed virtual MetadataTokenRange get_TypeSpecs();
    [CompilerGeneratedAttribute]
public sealed virtual MetadataTokenRange get_MethodDefs();
    [CompilerGeneratedAttribute]
public sealed virtual MetadataTokenRange get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual MetadataTokenRange get_Events();
    public sealed virtual TypeDefProperties GetTypeDefProperties(MetadataToken token);
    public sealed virtual TypeRefProperties GetTypeRefProperties(MetadataToken token);
    public sealed virtual IBlob GetTypeSpecBlob(MetadataToken token);
    public sealed virtual MethodProperties GetMethodProperties(MetadataToken token);
    public sealed virtual FieldProperties GetFieldProperties(MetadataToken token);
    public sealed virtual IBlob GetStandaloneSignatureBlob(MetadataToken token);
    public sealed virtual MethodSpecProperties GetMethodSpecProperties(MetadataToken token);
    public sealed virtual MemberReferenceProperties GetMemberRefProperties(MetadataToken token);
    public sealed virtual string GetModuleRefProperties(MetadataToken token);
    public sealed virtual EventProperties GetEventProperties(MetadataToken token);
    public sealed virtual PropertyProperties GetPropertyProperties(MetadataToken token);
    public sealed virtual MetadataTokenRange GetCustomAttributes(MetadataToken ownerToken);
    public sealed virtual MetadataTypeReference GetCustomAttributeTypeRef(MetadataToken token);
    public sealed virtual CustomAttributeProperties GetCustomAttributeProperties(MetadataToken token);
    public sealed virtual MetadataTokenRange GetGenericParameters(MetadataToken ownerToken);
    public sealed virtual GenericParameterProperties GetGenericParamProperties(MetadataToken token);
    private void InitGenericParameters();
    public sealed virtual MetadataTokenRange GetMethodDefs(MetadataToken typeToken);
    public sealed virtual MetadataTokenRange GetEvents(MetadataToken typeToken);
    public sealed virtual MetadataTokenRange GetProperties(MetadataToken typeToken);
    public sealed virtual MetadataTokenRange GetFields(MetadataToken typeToken);
    public sealed virtual IReadOnlyList`1<MetadataToken> GetNestedTypeDefs(MetadataToken typeToken);
    public sealed virtual MetadataToken GetEnclosingType(MetadataToken nestedTypeToken);
    public sealed virtual MetadataTokenRange GetInterfaceImplementations(MetadataToken typeToken);
    public sealed virtual InterfaceImplementationProperties GetInterfaceImplementationProperties(MetadataToken token);
    private void InitInterfaceImplementations();
    public sealed virtual MetadataTokenRange GetParameters(MetadataToken methodToken);
    public sealed virtual ParamProperties GetParameterProperties(MetadataToken token);
    public sealed virtual MetadataToken[] GetImplementedMethods(MetadataToken typeToken, MetadataToken methodBodyToken);
    public sealed virtual AssemblyNameInfo GetReferencedAssemblyName(MetadataToken token);
    public sealed virtual string GetUserString(MetadataToken token);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.MetadataAndModuleStatSectionMerger : object {
    private ISectionCollectionWriter mySectionCollectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public MetadataAndModuleStatSectionMerger(ISectionCollectionWriter sectionCollectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    private static bool TryMapMetadataEntry(MetadataMappingMode metadataMappingMode, MetadataEntry metadataEntry, bool moduleNameIsUniqueInSnapshot, IDictionary`2<Guid, MetadataEntry> resultingMetadataEntries, OneToListMap`2<string, MetadataEntry> resultingModuleNamesMap, MetadataEntry& mappedMetadataEntry);
    private static void MergeMetadataEntries(MergeType mergeType, MetadataMappingMode metadataMappingMode, IRawCoverageSnapshot snapshot, IEnumerable`1<MetadataEntry> metadataEntries, IDictionary`2<Guid, MetadataEntry> resultingMetadataEntries, OneToListMap`2<string, MetadataEntry> resultingModuleNamesMap, IDictionary`2<SectionIndex`1<IMetadataSection>, MetadataSource> resultingMetadataSources, MetadataMapper metadataMapper);
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.MetadataAndModuleStatSectionsWriter : object {
    private ISectionWriter myModuleStatSectionWriter;
    public sealed virtual void WriteKnownSections(IEnumerable`1<ISection> sections, IStorageSectionWriter storageSectionWriter);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.MetadataMapper : object {
    private LifetimeDefinition myLifetimeDefinition;
    private Lifetime myLifetime;
    private IRawCoverageSnapshot mySourceSnapshot;
    private IMetadataSectionAssemblyProvider mySourceMetadataAssemblyProvider;
    private IDictionary`2<IRawCoverageSnapshot, IMetadataSectionAssemblyProvider> myDestinationMetadataAssemblyProvidersCache;
    private IDictionary`2<SectionIndex`1<IMetadataSection>, SectionIndex`1<IMetadataSection>> myDirectMap;
    private OneToListMap`2<SectionIndex`1<IMetadataSection>, SectionIndex`1<IMetadataSection>> myReverseMap;
    private IDictionary`2<SectionIndex`1<IMetadataSection>, Pair`2<IMetadataAssembly, IMetadataAssembly>> myAssembliesMap;
    public MetadataMapper(IRawCoverageSnapshot sourceSnapshot);
    public void AddMetadataIndicesMapping(SectionIndex`1<IMetadataSection> sourceMetadataIndex, SectionIndex`1<IMetadataSection> resultingMetadataIndex);
    public void AddMetadataMapping(SectionIndex`1<IMetadataSection> sourceMetadataIndex, IRawCoverageSnapshot destinationSnapshot, SectionIndex`1<IMetadataSection> destinationMetadataIndex);
    public sealed virtual void Dispose();
    public sealed virtual bool TryGetResultingMetadataId(MetadataId sourceMetadataId, MetadataId& resultingMetadataId);
    public sealed virtual IEnumerable`1<MetadataId> GetSourceMetadataIds(MetadataId resultingMetadataId);
    public sealed virtual IEnumerable`1<SectionIndex`1<IMetadataSection>> GetAllResultingMetadataIndices();
    public sealed virtual bool TryGetResultingMetadataIndex(SectionIndex`1<IMetadataSection> sourceMetadataIndex, SectionIndex`1& resultingMetadataIndex);
    [AssertionMethodAttribute]
private static void AssertTokenTypeIsSupported(MetadataToken token);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.MetadataSectionConcatenator : SectionConcatenatorBase`1<MetadataSection> {
    protected virtual MetadataSection ConcatenateSections(IReadOnlyList`1<MetadataSection> sections);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.MetadataSnapshotDataDescriptor : StandaloneSnapshotDataDescriptorBase {
    public static ushort FilteredMethodsSectionType;
    public static ushort FilteredTypesSectionType;
    public static ushort FilteredPropertiesSectionType;
    public static ushort FilteredEventsSectionType;
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Metadata.ModuleStatSectionConcatenator : SectionConcatenatorBase`1<ModuleStatSection> {
    protected virtual ModuleStatSection ConcatenateSections(IReadOnlyList`1<ModuleStatSection> sections);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.Complementer.MethodDetailsComplementarySectionsBuilder : object {
    private IDotCoverCommentsInfoReader myDotCoverCommentsInfoReader;
    private IDocumentRangeSection mySourceDocumentRangeSection;
    private MethodDetailsSectionsBuilder myMethodDetailsSectionsBuilder;
    private IDictionary`2<SectionIndex`1<IMetadataSection>, IReadOnlyDictionary`2<UInt32, List`1<KeyValuePair`2<int, int>>>> myCommentedStatementRangesByModule;
    public MethodDetailsComplementarySectionsBuilder(Lifetime lifetime, ICoverageSnapshot sourceSnapshot, IDotCoverCommentsInfoReader dotCoverCommentsInfoReader);
    public sealed virtual void ProcessComplementaryMethod(MetadataId metadataId, ILowLevelMetadata metadata, PEFile assemblyPeFile, DebugData debugData);
    public sealed virtual IEnumerable`1<ISection> GetSections();
    private int GetDocumentIndex(DocumentData documentData);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.Complementer.MethodDetailsComplementarySectionsBuilderFactory : object {
    private IDotCoverCommentsInfoReader myDotCoverCommentsInfoReader;
    public MethodDetailsComplementarySectionsBuilderFactory(IDotCoverCommentsInfoReader dotCoverCommentsInfoReader);
    public sealed virtual IComplementaryMetadataSectionsBuilder CreateComplementarySectionsBuilder(Lifetime lifetime, ICoverageSnapshot sourceSnapshot);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.DocumentIndicesToMethodsMap : object {
    private IDictionary`2<int, List`1<MetadataId>> myMultipleEntriesDictionary;
    private IDictionary`2<int, MetadataId> mySingleEntryDictionary;
    public DocumentIndicesToMethodsMap(Dictionary`2<MetadataId, MethodData> methods);
    public IReadOnlyList`1<MetadataId> GetMethodsByDocumentIndex(int documentIndex);
}
[DefaultMemberAttribute("Item")]
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.DocumentRangeSection : object {
    private LifetimeDefinition myLifetimeDefinition;
    private int myStartDocumentIndex;
    private IList`1<DocumentData> myDocuments;
    private object myMapsCreationSync;
    private OneToListMap`2<DocumentData, int> myDocumentToIndicesMap;
    private OneToListMap`2<string, int> myUrlToIndicesMap;
    public int DocumentsCount { get; }
    public DocumentData Item { get; }
    public IEnumerable`1<KeyValuePair`2<int, DocumentData>> IndexedDocuments { get; }
    public DocumentRangeSection(int startDocumentIndex);
    public sealed virtual int get_DocumentsCount();
    public sealed virtual bool TryGetDocument(int index, DocumentData& document);
    public sealed virtual bool TryGetDocumentIndex(DocumentData document, Int32& index);
    public DocumentData get_Item(int index);
    public sealed virtual IEnumerable`1<int> GetAllDocumentIndices(string url);
    public sealed virtual IEnumerable`1<KeyValuePair`2<int, DocumentData>> get_IndexedDocuments();
    public int AddDocument(DocumentData document);
    private void EnsureDocumentToIndicesMapCreated();
    private void EnsureUrlToIndicesMapCreated();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private KeyValuePair`2<int, DocumentData> <get_IndexedDocuments>b__15_0(DocumentData document, int i);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.DocumentRangeSectionConcatenator : SectionConcatenatorBase`1<DocumentRangeSection> {
    protected virtual DocumentRangeSection ConcatenateSections(IReadOnlyList`1<DocumentRangeSection> sections);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.DocumentRangeSectionReader0000 : SectionReaderBase`1<DocumentRangeSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual DocumentRangeSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.DocumentRangeSectionReader0001 : SectionReaderBase`1<DocumentRangeSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual DocumentRangeSection ReadSection(SnapshotStorageSection storageSection);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.DocumentRangeSectionWriter : SectionWriterBase`1<IDocumentRangeSection> {
    private ushort mySectionType;
    public DocumentRangeSectionWriter(ushort sectionType);
    protected virtual void WriteSection(IDocumentRangeSection section, IStorageSectionWriter storageSectionWriter);
}
internal static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.IlMethodHelper : object {
    public static int GetMethodIlCodeOffset(IBinaryReader peFileReader, int methodBodyVirtualAddress);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.InMemoryStatementDataProvider : InMemorySectionDataProviderBase {
    private SnapshotStorageSection myStorageSection;
    private ISingleStatementDataReader mySingleStatementDataReader;
    public long Size { get; }
    public InMemoryStatementDataProvider(SnapshotStorageSection storageSection, ISingleStatementDataReader singleStatementDataReader);
    public sealed virtual long get_Size();
    public sealed virtual int GetStatementCount(SectionOffset`1<IStatementDataSection> offset);
    public sealed virtual SingleStatementData GetSingleStatementData(SectionOffset`1<IStatementDataSection> offset, int statementIndex);
    public sealed virtual FrugalLocalList`1<int> GetHiddenStatementIndices(SectionOffset`1<IStatementDataSection> offset);
    public sealed virtual SingleStatementData[] GetStatementsData(SectionOffset`1<IStatementDataSection> offset);
    private void CheckStatementCountIsValid(int statementCount, IBlob blob, int firstStatementOffset);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodDetailsSectionsBuilder : object {
    private long myStartStatementDataOffset;
    private DocumentRangeSection myDocumentRangeSection;
    private IDictionary`2<DocumentData, int> myDocumentDataToIndexMap;
    private IDictionary`2<MetadataId, MethodEntry> myMethods;
    public MethodDetailsSectionsBuilder(int startDocumentIndex, long startStatementDataOffset);
    public int AddDocumentIfNotExists(DocumentData documentData);
    public bool ContainsMethod(MetadataId metadataId);
    public int GetMethodTotalStatementCount(MetadataId metadataId);
    public void AddMethod(MetadataId metadataId, SingleStatementData[] statements, IReadOnlyDictionary`2<StatementFilterType, int> filteredStatementCount);
    public IEnumerable`1<ISection> GetSections();
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodDetailsSectionsMerger : object {
    private ISectionCollectionWriter mySectionCollectionWriter;
    private IDotCoverCommentsInfoReader myDotCoverCommentsInfoReader;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public MethodDetailsSectionsMerger(ISectionCollectionWriter sectionCollectionWriter, IDotCoverCommentsInfoReader dotCoverCommentsInfoReader);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodDetailsSectionsWriter : object {
    private SectionWriterBase`1<IDocumentRangeSection> myDocumentRangeSectionWriter;
    private SectionWriterBase`1<MockStatementDataSection> myStatementDataSectionWriter;
    private SectionWriterBase`1<IMethodRangeSection> myMethodRangeSectionWriter;
    public sealed virtual void WriteKnownSections(IEnumerable`1<ISection> sections, IStorageSectionWriter storageSectionWriter);
}
[ShellComponentAttribute("16")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodDetailsSnapshotDataDescriptor : StandaloneSnapshotDataDescriptorBase {
    public static ushort DocumentRangeSectionType;
    public static ushort MethodRangeSectionType;
    public static ushort StatementDataSectionType;
    public static ushort SyntheticPointsSectionType;
    public MethodDetailsSnapshotDataDescriptor(IDotCoverCommentsInfoReader dotCoverCommentsInfoReader);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodRangeSection : object {
    private Dictionary`2<MetadataId, MethodData> myEntries;
    private DocumentIndicesToMethodsMap myDocumentIndicesToMethodsMap;
    public IReadOnlyCollection`1<KeyValuePair`2<MetadataId, MethodData>> Methods { get; }
    public MethodRangeSection(int capacity);
    public sealed virtual bool TryGetMethod(MetadataId methodId, MethodData& methodData);
    public sealed virtual bool TryGetMethodStatementsCount(MetadataId methodId, StatementFilterType filterType, Int32& count);
    public sealed virtual bool TryGetMethodStatementDataOffset(MetadataId methodId, SectionOffset`1& offset);
    public bool HasMethod(MetadataId methodId);
    public sealed virtual IReadOnlyList`1<MetadataId> GetMethodsInDocument(int documentIndex);
    public sealed virtual IReadOnlyCollection`1<KeyValuePair`2<MetadataId, MethodData>> get_Methods();
    public void AddMethod(MetadataId metadataId, MethodData methodData);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodRangeSectionConcatenator : SectionConcatenatorBase`1<MethodRangeSection> {
    protected virtual MethodRangeSection ConcatenateSections(IReadOnlyList`1<MethodRangeSection> sections);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodRangeSectionReader0000 : SectionReaderBase`1<MethodRangeSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual MethodRangeSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodRangeSectionReader0001 : SectionReaderBase`1<MethodRangeSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual MethodRangeSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodRangeSectionWriter : SectionWriterBase`1<IMethodRangeSection> {
    protected virtual void WriteSection(IMethodRangeSection section, IStorageSectionWriter storageSectionWriter);
}
internal static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MethodStatementsDataBuilder : object {
    private static ILogger ourLogger;
    private static MethodStatementsDataBuilder();
    public static SingleStatementData[] Build(DebugMethod method, IBinaryReader peFileReader, Nullable`1<int> methodBodyVirtualAddress, IReadOnlyList`1<KeyValuePair`2<int, int>> excludedStatementIndices, Func`2<DocumentData, int> getDocumentIndex, DebugData moduleDebugData, Int32& validRangesStatementCount);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.MockStatementDataSection : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SingleStatementData[]> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionOffset`1[] <Offsets>k__BackingField;
    public IReadOnlyList`1<SingleStatementData[]> Entries { get; }
    public long StartOffset { get; }
    public SectionOffset`1[] Offsets { get; public set; }
    public MockStatementDataSection(IReadOnlyList`1<SingleStatementData[]> entries, long startOffset);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SingleStatementData[]> get_Entries();
    [CompilerGeneratedAttribute]
public long get_StartOffset();
    [CompilerGeneratedAttribute]
public SectionOffset`1[] get_Offsets();
    [CompilerGeneratedAttribute]
public void set_Offsets(SectionOffset`1[] value);
    public sealed virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.StatementDataSection : object {
    private IDataProvider myDataProvider;
    public long Size { get; }
    public SingleStatementData[] Item { get; }
    public StatementDataSection(IDataProvider dataProvider);
    public sealed virtual long get_Size();
    public sealed virtual int GetStatementCount(SectionOffset`1<IStatementDataSection> offset);
    public sealed virtual SingleStatementData GetSingleStatementData(SectionOffset`1<IStatementDataSection> offset, int statementIndex);
    public sealed virtual FrugalLocalList`1<int> GetHiddenStatementIndices(SectionOffset`1<IStatementDataSection> offset);
    public sealed virtual FrugalLocalList`1<Pair`2<int, SourceFileRange>> GetStatementRangesInAllDocuments(SectionOffset`1<IStatementDataSection> offset);
    public sealed virtual SingleStatementData[] get_Item(SectionOffset`1<IStatementDataSection> offset);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.StatementDataSectionConcatenator : SectionConcatenatorBase`1<StatementDataSection> {
    protected virtual StatementDataSection ConcatenateSections(IReadOnlyList`1<StatementDataSection> sections);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.StatementDataSectionReader0000 : SectionReaderBase`1<StatementDataSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementDataSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.StatementDataSectionReader0001 : SectionReaderBase`1<StatementDataSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementDataSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.StatementDataSectionReader0002 : SectionReaderBase`1<StatementDataSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual StatementDataSection ReadSection(SnapshotStorageSection storageSection);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.StatementDataSectionWriter : SectionWriterBase`1<MockStatementDataSection> {
    private ushort mySectionType;
    public StatementDataSectionWriter(ushort sectionType);
    protected virtual void WriteSection(MockStatementDataSection section, IStorageSectionWriter storageSectionWriter);
}
[ExtensionAttribute]
internal static class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.SyntheticPointsDetector : object {
    private static Byte[] ourStepThroughIlSequence;
    private static SyntheticPointsDetector();
    [ExtensionAttribute]
public static bool IsSyntheticPoint(SequencePoint sp, SequencePoint nextSp, IBinaryReader peFileReader, int ilCodeOffset);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.SyntheticPointsSection : object {
    private IDictionary`2<MetadataId, IReadOnlySet`1<int>> mySyntheticPointsIlOffsets;
    public SyntheticPointsSection(IDictionary`2<MetadataId, IReadOnlySet`1<int>> syntheticPointsIlOffsets);
    public sealed virtual IReadOnlySet`1<int> GetSyntheticPoints(MetadataId metadataId);
    public sealed virtual void Dispose();
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.MethodDetails.SyntheticPointsSectionReader0000 : SectionReaderBase`1<SyntheticPointsSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual SyntheticPointsSection ReadSection(SnapshotStorageSection storageSection);
}
internal abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.RawSectionCollection : object {
    private Lifetime myLifetime;
    protected Dictionary`2<Type, SectionData> StorageSectionsDataDictionary;
    protected RawSectionCollection(Lifetime lifetime);
    public sealed virtual bool TryGetRawSection(SnapshotStorageSection& section);
    public abstract virtual bool TryGetSnapshotSection(Lifetime lifetime, TSection& section);
    public sealed virtual bool TryGetSnapshotSection(TSection& section);
    public abstract virtual IReadOnlyList`1<ISection> GetAllSections();
    public bool ContainsStorageSection(ushort type);
    public void AddStorageSection(SnapshotStorageSection section, Type snapshotSectionType, IReadOnlyList`1<ISectionReader> readers, ISectionConcatenator concatenator);
    public bool CompliesSpecification(ISectionCollectionSpecification specification);
    protected ISection ReadSnapshotSection(SectionData sectionData, Lifetime lifetime);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.RawSectionCollectionWithLifetimedCache : RawSectionCollection {
    private Lifetime myLifetime;
    private LifetimedCache`2<Type, ISection> myLifetimedSectionsCache;
    public RawSectionCollectionWithLifetimedCache(Lifetime lifetime);
    public virtual bool TryGetSnapshotSection(Lifetime lifetime, TSection& section);
    public virtual IReadOnlyList`1<ISection> GetAllSections();
    private ISection TryReadSnapshotSectionByType(Type sectionType, Lifetime lifetime);
    [CompilerGeneratedAttribute]
private ISection <GetAllSections>b__4_0(Type sectionType);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.RawSectionCollectionWithPlainList : RawSectionCollection {
    private Lifetime myLifetime;
    private object mySync;
    private List`1 modreq(System.Runtime.CompilerServices.IsVolatile) myLazySectionsList;
    public RawSectionCollectionWithPlainList(Lifetime lifetime);
    public virtual bool TryGetSnapshotSection(Lifetime lifetime, TSection& section);
    public virtual IReadOnlyList`1<ISection> GetAllSections();
    private void EnsureSectionsListCreated();
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.RollingCache`2 : object {
    private StrongToWeakDictionary`2<TKey, TValue> myCache;
    private int myCapacity;
    private Queue`1<TKey> myKeyQueue;
    public RollingCache`2(int capacity);
    public sealed virtual void Dispose();
    public TValue GetOrCreateValue(TKey key, Func`2<TKey, TValue> externalValueGetter);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SectionCollection : object {
    private IReadOnlyDictionary`2<Type, ISection> mySectionsByType;
    public SectionCollection(IReadOnlyDictionary`2<Type, ISection> sectionsByType);
    public sealed virtual bool TryGetSnapshotSection(TSection& section);
    public sealed virtual IReadOnlyList`1<ISection> GetAllSections();
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SectionCollectionSpecification : object {
    private ICollection`1<Type> myCompulsoryTypes;
    private ICollection`1<Type> myOptionalTypes;
    private IDictionary`2<ushort, Type> myStorageToSnapshotSectionsMapping;
    private IDictionary`2<Type, IEnumerable`1<ushort>> mySnapshotToStorageSectionsMapping;
    public IEnumerable`1<Type> CompulsoryTypes { get; }
    public IEnumerable`1<Type> OptionalTypes { get; }
    public void RegisterCompulsorySectionType(Type type, UInt16[] storageSectionTypes);
    public void RegisterOptionalSectionType(Type type, UInt16[] storageSectionTypes);
    private void RegisterSectionType(Type type, UInt16[] storageSectionTypes);
    public sealed virtual IEnumerable`1<Type> get_CompulsoryTypes();
    public sealed virtual IEnumerable`1<Type> get_OptionalTypes();
    public sealed virtual bool TryGetSnapshotSectionTypeByStorageSectionType(ushort storageSectionType, Type& snapshotSectionType);
    public sealed virtual bool TryGetStorageSectionTypesBySnapshotSectionType(Type snapshotSectionType, IEnumerable`1& storageSectionTypes);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SectionGroupMerger : object {
    private IReadOnlyList`1<IGroupedSectionMerger> myMergers;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public SectionGroupMerger(IEnumerable`1<IGroupedSectionMerger> orderedGroupedMergers);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
    private static Int32[] CalculateLastUsageIndices(IReverseGroupIndexMapping reverseGroupIndexMapping, int resultingGroupsNumber);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SingleSectionWriter`1 : object {
    private SectionWriterBase`1<TSection> mySectionWriter;
    public SingleSectionWriter`1(SectionWriterBase`1<TSection> sectionWriter);
    public sealed virtual void WriteKnownSections(IEnumerable`1<ISection> sections, IStorageSectionWriter storageSectionWriter);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SourceServerData.SourceServerDataSection : object {
    private IDataProvider myDataProvider;
    private RollingCache`2<SectionIndex`1<IMetadataSection>, SrcSrvInfo> myCache;
    internal IDataProvider DataProvider { get; }
    public SourceServerDataSection(IDataProvider dataProvider);
    public sealed virtual void Dispose();
    public sealed virtual bool TryGetSourceServerInfo(SectionIndex`1<IMetadataSection> metadataIndex, SrcSrvInfo& sourceServerInfo);
    internal IDataProvider get_DataProvider();
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SourceServerData.SourceServerDataSectionConcatenator : SectionConcatenatorBase`1<SourceServerDataSection> {
    protected virtual SourceServerDataSection ConcatenateSections(IReadOnlyList`1<SourceServerDataSection> sections);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SourceServerData.SourceServerDataSectionMerger : object {
    private ISectionCollectionWriter mySectionCollectionWriter;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ConsumedContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <ProducedContextEntries>k__BackingField;
    public IEnumerable`1<Type> ConsumedContextEntries { get; }
    public IEnumerable`1<Type> ProducedContextEntries { get; }
    public SourceServerDataSectionMerger(ISectionCollectionWriter sectionCollectionWriter);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ConsumedContextEntries();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_ProducedContextEntries();
    public sealed virtual void MergeSections(IEntitySet`1<IRawCoverageSnapshot> snapshots, IMergeContext context, IStorageSectionWriter writer, IProgressIndicator progress);
}
internal class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SourceServerData.SourceServerDataSectionReader0000 : SectionReaderBase`1<SourceServerDataSection> {
    public ushort Version { get; }
    public virtual ushort get_Version();
    protected virtual SourceServerDataSection ReadSection(SnapshotStorageSection storageSection);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SourceServerData.SourceServerDataSectionWriter : SectionWriterBase`1<SourceServerDataSection> {
    protected virtual void WriteSection(SourceServerDataSection section, IStorageSectionWriter storageSectionWriter);
}
[ShellComponentAttribute("16")]
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.SourceServerData.SourceServerDataSnapshotDataDescriptor : StandaloneSnapshotDataDescriptorBase {
    public static ushort SourceServerdDataSectionType;
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.StandaloneSnapshotDataDescriptorBase : object {
    protected SectionCollectionSpecification StandaloneSpecification;
    protected Dictionary`2<ushort, IEnumerable`1<ISectionReader>> SectionReaders;
    protected IList`1<ISectionCollectionWriter> SectionWriters;
    protected ICollection`1<IStandaloneSectionMerger> SectionMergers;
    protected Dictionary`2<Type, ISectionConcatenator> SectionConcatenators;
    private IReadOnlyDictionary`2<ushort, IEnumerable`1<ISectionReader>> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISnapshotDataDescriptor.SectionReaders { get; }
    private IEnumerable`1<ISectionCollectionWriter> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.SectionWriters { get; }
    private ISectionCollectionSpecification JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.StandaloneSpecification { get; }
    private IEnumerable`1<IStandaloneSectionMerger> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.SectionMergers { get; }
    private IReadOnlyDictionary`2<Type, ISectionConcatenator> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.SectionConcatenators { get; }
    private sealed virtual override IReadOnlyDictionary`2<ushort, IEnumerable`1<ISectionReader>> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.ISnapshotDataDescriptor.get_SectionReaders();
    private sealed virtual override IEnumerable`1<ISectionCollectionWriter> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.get_SectionWriters();
    private sealed virtual override ISectionCollectionSpecification JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.get_StandaloneSpecification();
    private sealed virtual override IEnumerable`1<IStandaloneSectionMerger> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.get_SectionMergers();
    private sealed virtual override IReadOnlyDictionary`2<Type, ISectionConcatenator> JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Interface.IStandaloneSnapshotDataDescriptor.get_SectionConcatenators();
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.Int32ValueSizeCalculator : ValueSizeCalculator`1<int> {
    protected virtual byte GetValueSize(int value);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.Int64ValueSizeCalculator : ValueSizeCalculator`1<long> {
    protected virtual byte GetValueSize(long value);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.UInt32ValueSizeCalculator : ValueSizeCalculator`1<UInt32> {
    protected virtual byte GetValueSize(UInt32 value);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.UInt32Writer : ValueWriter`1<UInt32> {
    public UInt32Writer(byte size);
    protected virtual Byte[] GetValueBytes(UInt32 value);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.UInt64ValueSizeCalculator : ValueSizeCalculator`1<ulong> {
    protected virtual byte GetValueSize(ulong value);
}
public class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.UInt64Writer : ValueWriter`1<ulong> {
    public UInt64Writer(byte size);
    protected virtual Byte[] GetValueBytes(ulong value);
}
public abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.ValueSizeCalculator`1 : object {
    private int mySizeLimit;
    private byte mySize;
    public byte Size { get; }
    public bool MaxSizeAchieved { get; }
    protected ValueSizeCalculator`1(int sizeLimit);
    public void ProcessValue(T value);
    protected abstract virtual byte GetValueSize(T value);
    public byte get_Size();
    public bool get_MaxSizeAchieved();
}
public abstract class JetBrains.dotCover.DataAccess.SnapshotCore.Dal.Tools.ValueWriter`1 : object {
    private byte mySize;
    protected ValueWriter`1(byte size);
    protected abstract virtual Byte[] GetValueBytes(T value);
    public void Write(BinaryWriter writer, T value);
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.DataAccess.ZoneMarker : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
