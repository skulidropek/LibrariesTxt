public static class JetBrains.dotCover.Shared.ConsoleTools.ConsoleGreeting : object {
    public static string Copyright;
    private static string ourRuntime;
    private static ConsoleGreeting();
    public static string GetGreeting(string entryPointName);
    private static string GetBuildString();
}
[ShellComponentAttribute("16")]
public class JetBrains.dotCover.Shared.CoverageTree.CoverageNodeSvgProvider : object {
    private static string UnknownSvg;
    private static string RegularRootSvg;
    private static string SolutionRootSvg;
    private static string SolutionFolderSvg;
    private static string ProjectSvg;
    private static string AssemblySvg;
    private static string NamespaceSvg;
    private static string ClassSvg;
    private static string InterfaceSvg;
    private static string PropertySvg;
    private static string EventSvg;
    private static string MethodSvg;
    private static string AnonymousMethodSvg;
    private static string LocalFunctionSvg;
    private static string ConstructorSvg;
    private static string ExtensionMethodSvg;
    private static string IndexerSvg;
    private static string OwnCoverageSvg;
    private static string PrivateModifierSvg;
    private static string ProtectedModifierSvg;
    private static string InternalModifierSvg;
    private static string ProtectedInternalModifierSvg;
    private static string StaticModifierSvg;
    private Dictionary`2<CoverageNodeKind, string> myNodeKindSvgStrings;
    private Dictionary`2<CoverageNodeModifier, string> myNodeModifierSvgStrings;
    public sealed virtual IReadOnlyList`1<string> GetSvgStrings(CoverageNodeKind kind, CoverageNodeModifier modifier);
}
public interface JetBrains.dotCover.Shared.CoverageTree.ICoverageNodeSvgProvider {
    public abstract virtual IReadOnlyList`1<string> GetSvgStrings(CoverageNodeKind kind, CoverageNodeModifier modifier);
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.Shared.CoverageTree.ZoneMarker : object {
}
public interface JetBrains.dotCover.Shared.DotCoverHost.IDotCoverHost {
    public abstract virtual IReadOnlySimpleContainer GetContainer();
    public abstract virtual void RunMessageLoop();
    public abstract virtual void RequestShutdown();
}
public class JetBrains.dotCover.Shared.DotCoverHost.ShellBasedHost : object {
    private IList`1<IJetHostMixin> myMixins;
    public ShellBasedHost(Type environmentZone, IHostCommandLine commandLine, IJetHostMixin[] additionalMixins);
    public sealed virtual IReadOnlySimpleContainer GetContainer();
    public sealed virtual void RunMessageLoop();
    public sealed virtual void RequestShutdown();
    [CompilerGeneratedAttribute]
private object <.ctor>b__1_1();
}
public class JetBrains.dotCover.Shared.DotCoverHost.SimpleHost : object {
    private Lifetime myLifetime;
    private ISimpleContainer myContainer;
    private IProperty`1<bool> myShutdownRequested;
    public SimpleHost(Lifetime lifetime);
    public sealed virtual IReadOnlySimpleContainer GetContainer();
    public ISimpleContainer GetModifiableContainer();
    public sealed virtual void RunMessageLoop();
    public sealed virtual void RequestShutdown();
}
[EnvironmentComponentAttribute("16")]
[ZoneMarkerAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class JetBrains.dotCover.Shared.DummyEnvironmentComponent : object {
}
[LicensedEntityIconsAttribute("JetBrains.dotCover.Core.Platform.Resources.DotCoverProductIcons/DotCoverLicense", "JetBrains.dotCover.Core.Platform.Resources.DotCoverProductIcons/DotCoverLicense")]
public abstract class JetBrains.dotCover.Shared.License.DotCoverLicensedEntity : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISupportsLicenseServer> <LicenseServer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISupportsJetBrainsAccount> <JetBrainsAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserLicenseChecker> <UserLicenseCheckers>k__BackingField;
    public string TechnicalName { get; }
    public string PresentableName { get; }
    public Version EntityVersion { get; }
    public string EntityMarketingVersionString { get; }
    public string PurchaseUrl { get; }
    public string ProductCode { get; }
    public ISupportsEvaluation Evaluation { get; }
    public ISupportsUserLicense UserLicense { get; }
    public IEnumerable`1<ISupportsLicenseServer> LicenseServer { get; }
    public IEnumerable`1<ISupportsJetBrainsAccount> JetBrainsAccount { get; }
    public FreeTrialMode TrialMode { get; }
    public string ProductGuid { get; }
    public IEnumerable`1<string> Signatures { get; }
    public int FreeTrialPeriod { get; }
    public int FeedbackRequestPeriod { get; }
    public int LeftDaysNotification { get; }
    public EvaluationUsageMode Mode { get; }
    public IList`1<Pair`2<string, string>> OptInSubscriptions { get; }
    public DateTime ProductBuiltDateUsedForSubscriptionCheck { get; }
    public bool DoCheckLicenseReuseOverNetwork { get; }
    public IEnumerable`1<UserLicenseChecker> UserLicenseCheckers { get; }
    protected DotCoverLicensedEntity(bool preferUltimateLicenseOverProductLicense);
    public sealed virtual string get_TechnicalName();
    public sealed virtual string get_PresentableName();
    public sealed virtual Version get_EntityVersion();
    public sealed virtual string get_EntityMarketingVersionString();
    public sealed virtual string get_PurchaseUrl();
    public sealed virtual string get_ProductCode();
    public virtual ISupportsEvaluation get_Evaluation();
    public virtual ISupportsUserLicense get_UserLicense();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<ISupportsLicenseServer> get_LicenseServer();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<ISupportsJetBrainsAccount> get_JetBrainsAccount();
    public sealed virtual FreeTrialMode get_TrialMode();
    public abstract virtual string get_ProductGuid();
    public abstract virtual IEnumerable`1<string> get_Signatures();
    public sealed virtual int get_FreeTrialPeriod();
    public sealed virtual int get_FeedbackRequestPeriod();
    public sealed virtual int get_LeftDaysNotification();
    public virtual EvaluationUsageMode get_Mode();
    public sealed virtual IList`1<Pair`2<string, string>> get_OptInSubscriptions();
    public sealed virtual DateTime get_ProductBuiltDateUsedForSubscriptionCheck();
    public sealed virtual bool get_DoCheckLicenseReuseOverNetwork();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<UserLicenseChecker> get_UserLicenseCheckers();
    public sealed virtual string GetLicenseAgreement(LicenseType licenseType);
    private static T[] InvertIfRequired(bool invert, T[] source);
    protected static string CreateProductGuid(ApplicationPackageArtifact apppkg);
}
public abstract class JetBrains.dotCover.Shared.License.LiberalDotCoverLicensedEntity : DotCoverLicensedEntity {
    public ISupportsEvaluation Evaluation { get; }
    public ISupportsUserLicense UserLicense { get; }
    public IEnumerable`1<ISupportsLicenseServer> LicenseServer { get; }
    public IEnumerable`1<ISupportsJetBrainsAccount> JetBrainsAccount { get; }
    public string ProductGuid { get; }
    public virtual ISupportsEvaluation get_Evaluation();
    public virtual ISupportsUserLicense get_UserLicense();
    public virtual IEnumerable`1<ISupportsLicenseServer> get_LicenseServer();
    public virtual IEnumerable`1<ISupportsJetBrainsAccount> get_JetBrainsAccount();
    public virtual string get_ProductGuid();
}
public static class JetBrains.dotCover.Shared.Logging.DotCoverLoggerInitializer : object {
    public static string LogFileKey;
    public static string LogLevelKey;
    public static void Initialize(string entryPointName, FileSystemPath startupDirectory, string logsSubFolder, string logFile, string logLevel);
}
public interface JetBrains.dotCover.Shared.Logging.ILoggerProvider {
    public abstract virtual ILogger GetLogger(Type callerType);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static void LogAggregatedException(ILogger logger, AggregateException exception, bool silently);
}
[ShellComponentAttribute("16")]
public class JetBrains.dotCover.Shared.Logging.LoggerProvider : object {
    public sealed virtual ILogger GetLogger(Type callerType);
}
[ZoneMarkerAttribute]
public class JetBrains.dotCover.Shared.Logging.ZoneMarker : object {
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.RdProtocol.RdProtocolUtils : object {
    [AsyncStateMachineAttribute("JetBrains.dotCover.Shared.RdProtocol.RdProtocolUtils/<WhenAllConnected>d__0")]
[ExtensionAttribute]
public static Task WhenAllConnected(IReadOnlyCollection`1<RdExtBase> rdExtComponents, Lifetime lifetime, TimeSpan timeout);
}
public static class JetBrains.dotCover.Shared.RiderPlugin.RiderPluginAssemblyResolver : object {
    public static string ADDITIONAL_PROBING_PATHS_ENV_VAR;
    private static List`1<string> ourAdditionalProbingPaths;
    private static RiderPluginAssemblyResolver();
    public static Assembly Resolve(object sender, ResolveEventArgs eventArgs);
}
internal static class JetBrains.dotCover.Shared.SimpleContainer.SharedComponentsFactory : object {
    public static void AddShellComponents(ISimpleContainer container);
}
public static class JetBrains.dotCover.Shared.TargetFrameworks.TargetFrameworkComparer : object {
    public static IEqualityComparer`1<TargetFrameworkId> IgnoreTargetPlatform;
    public static IEqualityComparer`1<TargetFrameworkId> DefaultPlatformVersionsAware;
    private static TargetFrameworkComparer();
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.TargetFrameworks.TargetFrameworkPresentableNameProvider : object {
    private static string UndefinedNetFramework;
    [ExtensionAttribute]
public static string GetShortName(TargetFrameworkId id);
    [ExtensionAttribute]
public static string GetFullName(TargetFrameworkId id);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Tasks.TaskExtensions : object {
    [ExtensionAttribute]
public static void LogOnFaulted(Task task, ILogger logger, bool silently);
    [ExtensionAttribute]
public static Task WithLogOnFaulted(Task task, ILogger logger, bool silently);
    [ExtensionAttribute]
public static Task`1<TToRes> ConvertResult(Task`1<TFromRes> task, Func`2<TFromRes, TToRes> converter);
    [ExtensionAttribute]
public static TTask AttachToParentWithExceptionPropagation(TTask task);
    [ExtensionAttribute]
public static Task ContinueWithExceptionPropagation(Task`1<TTaskRes> task, Action`1<TTaskRes> action, CancellationToken cancellationToken, TaskScheduler scheduler);
    [ExtensionAttribute]
public static Task`1<TActionRes> ContinueWithExceptionPropagation(Task task, Func`1<TActionRes> action, CancellationToken cancellationToken, TaskScheduler scheduler);
    [ExtensionAttribute]
public static Task`1<TActionRes> ContinueWithExceptionPropagation(Task`1<TTaskRes> task, Func`2<TTaskRes, TActionRes> action, CancellationToken cancellationToken, TaskScheduler scheduler);
    public static Task WhenAllIfAnyRanToCompletion(Task[] tasks);
    [ExtensionAttribute]
public static void FlowInto(Task`1<TTaskResult> task, TaskCompletionSource`1<TTaskResult> taskCompletionSource, TaskScheduler scheduler);
}
public class JetBrains.dotCover.Shared.Tasks.TaskGroup : object {
    private Task[] myTaskQueues;
    public TaskGroup(UInt32 maxParallelTasksCount);
    public Task`1<TResult> AddTask(Func`1<Task`1<TResult>> startTask);
}
public class JetBrains.dotCover.Shared.Tasks.TaskSequentialSync : object {
    private TaskScheduler myTaskScheduler;
    private object mySyncObj;
    private Task myLastTask;
    public TaskSequentialSync(TaskScheduler taskScheduler);
    public Task Add(Func`1<Task> run);
    public Task Add(Lifetime lifetime, Func`1<Task> run);
    public Task Add(Action action);
    public Task Add(Lifetime lifetime, Action action);
}
public interface JetBrains.dotCover.Shared.TypedContext.ITypedContext {
    public abstract virtual bool HasValue();
    public abstract virtual TValue GetValue();
    [CanBeNullAttribute]
public abstract virtual TValue TryGetValue();
    public abstract virtual bool TryGetValue(TValue& value);
}
public class JetBrains.dotCover.Shared.TypedContext.TypedContext : object {
    private IDictionary`2<Type, object> myDictionary;
    public sealed virtual bool HasValue();
    public sealed virtual TValue GetValue();
    public sealed virtual bool TryGetValue(TValue& value);
    public sealed virtual TValue TryGetValue();
    public void AddValue(object value);
}
public static class JetBrains.dotCover.Shared.Utils.CoveragePercentCalculator : object {
    public static int GetCoveragePercent(long totalStatements, long coveredStatements);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Utils.ExceptionExtension : object {
    [ExtensionAttribute]
public static T ThrowIfNull(T obj, string message);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Utils.TimeSpanExtensions : object {
    [ExtensionAttribute]
public static TimeSpan SubtractElapsedTime(TimeSpan span, Stopwatch stopwatch);
}
[ExtensionAttribute]
public static class JetBrains.dotCover.Shared.Utils.XmlDocumentExtensions : object {
    [ExtensionAttribute]
public static string ToFormattedString(XmlDocument xmlDocument);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
